void sub_1006702D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006702EC(int *a1, void *a2)
{
  int v4 = *a1;
  __int16 v5 = *((_WORD *)a1 + 2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  uint64_t v3 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v4, 1);
  if (v3)
  {
    sub_10047D4F0(v3, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
  {
    sub_10078E40C();
  }
}

unsigned char *sub_100670398(uint64_t a1, int *a2, unsigned __int16 a3, uint64_t a4, uint64_t a5, unsigned __int8 *a6, unsigned int a7, uint64_t a8)
{
  int v67 = *a2;
  __int16 v68 = *((_WORD *)a2 + 2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  uint64_t v14 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v67, 1);
  char v66 = 0;
  sub_10001B8E0(&v66);
  v65 = 0;
  int v15 = sub_1001DD56C(a3, (uint64_t *)&v65);
  if (v15 || !v65 || !sub_1001E6484(v65))
  {
    v20 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078E440((uint64_t *)&v65, v15, v20);
    }
    goto LABEL_22;
  }
  v16 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(v14, (uint64_t)__p);
    v17 = v64 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)buf = 136315650;
    *(void *)v70 = v17;
    *(_WORD *)&v70[8] = 1024;
    *(_DWORD *)v71 = a7;
    *(_WORD *)&v71[4] = 1024;
    *(_DWORD *)v72 = a8;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "fastConnectEchoRspEvent for device %s of length %d with result %d", buf, 0x18u);
    if (v64 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a7 >= 0x18)
  {
    int v18 = *a6;
    if (v18 != 2)
    {
      if (v18 == 7)
      {
        a8 = *((unsigned __int16 *)a6 + 2);
        v19 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)v70 = a8;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "fastConnectEchoRspEvent with errorCode %d", buf, 8u);
        }
      }
      goto LABEL_17;
    }
    uint64_t v57 = sub_100197A30((uint64_t)a2);
    unsigned int v22 = *((unsigned __int16 *)a6 + 1);
    __int16 v23 = a6[4];
    __int16 v24 = a6[5];
    *(_WORD *)(sub_1001E6484(v65) + 8) = v23 | (v24 << 8);
    __int16 v25 = a6[6];
    __int16 v26 = a6[7];
    *(_WORD *)(sub_1001E6484(v65) + 32) = v25 | (v26 << 8);
    int v27 = *((_DWORD *)a6 + 2);
    uint64_t v28 = *(void *)(a6 + 12);
    if (v22 < 2)
    {
LABEL_58:
      if (v28)
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
          sub_10078E254();
        }
        a8 = 4507;
      }
      else if (!a8)
      {
        v39 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          int v40 = v27;
          int v41 = *(unsigned __int16 *)(sub_1001E6484(v65) + 8);
          int v42 = *((unsigned __int16 *)v65 + 2);
          int v43 = *(unsigned __int16 *)(sub_1001E6484(v65) + 32);
          int v44 = *(unsigned __int16 *)(sub_1001E6484(v65) + 36);
          *(_DWORD *)buf = 67110144;
          *(_DWORD *)v70 = v41;
          *(_WORD *)&v70[4] = 1024;
          *(_DWORD *)&v70[6] = v42;
          *(_WORD *)v71 = 1024;
          *(_DWORD *)&v71[2] = v43;
          *(_WORD *)v72 = 1024;
          *(_DWORD *)&v72[2] = v44;
          __int16 v73 = 1024;
          int v27 = v40;
          int v74 = v40;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "fastConnectEchoRspEvent CID sizes Remote %d, Local %d, Remote MTU %d, local %d, supported profiles %d", buf, 0x20u);
        }
        sub_10017BCA0(v57);
        uint64_t v45 = sub_1001E6484(v65);
        int v46 = *(_DWORD *)(v57 + 48);
        *(_WORD *)(v45 + 14) = *(_WORD *)(v57 + 52);
        *(_DWORD *)(v45 + 10) = v46;
        *(void *)sub_1001E6484(v65) = v57;
        *(unsigned char *)(sub_1001E6484(v65) + 25) = 0;
        *(unsigned char *)(sub_1001E6484(v65) + 28) = 0;
        if ((v28 & 4) != 0) {
          sub_10022EF58((uint64_t)a2);
        }
        *(unsigned char *)(sub_1001E6484(v65) + 16) = 4;
        v47 = v65;
        v65[19] = -1;
        a8 = sub_1001F3B3C(*((unsigned __int16 *)v47 + 2), 4, 5u, 0, (uint64_t *)v47 + 12, 0xFFFFFFFF);
        v48 = (uint64_t *)sub_1001E6484(v65);
        sub_1001F667C(*v48);
        *(_WORD *)(sub_1001E6484(v65) + 40) = 5000;
        v49 = (uint64_t *)sub_1001E6484(v65);
        sub_1001DF2E4(*v49);
        if (!a8)
        {
          sub_10001B910(&v66);
          a8 = 0;
          __int16 v50 = *((_WORD *)v65 + 2);
LABEL_72:
          sub_10066E134(a1, v50, v28, v27, 0, a8, 0, *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
          return sub_10001B8AC(&v66);
        }
      }
      sub_1001DEC18((uint64_t)v65);
      sub_10001B910(&v66);
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078E534();
      }
      __int16 v50 = 0;
      LOBYTE(v28) = 0;
      int v27 = 0;
      goto LABEL_72;
    }
    if (a7 < 0x1C)
    {
      v51 = "ByteStream_NumReadBytesAvail(bs) >= 4";
      int v52 = 2544;
    }
    else
    {
      int v54 = *((_DWORD *)a6 + 2);
      if (a7 > 0x1D)
      {
        unint64_t v55 = *(void *)(a6 + 12);
        int v58 = *((_DWORD *)a6 + 5);
        int v56 = *((_DWORD *)a6 + 6);
        v29 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v70 = v58;
          *(_WORD *)&v70[4] = 1024;
          *(_DWORD *)&v70[6] = v56;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "remoteAppleSupportedFeatures %x remoteSdpServiceDataBaseState %x", buf, 0xEu);
        }
        uint64_t v62 = 0;
        sub_1006701B8(a2, (_DWORD *)&v62 + 1, &v62);
        v30 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)v70 = HIDWORD(v62);
          *(_WORD *)&v70[4] = 1024;
          *(_DWORD *)&v70[6] = v62;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "deviceAppleSupportedFeatures %x deviceSdpServiceDataBaseState %x", buf, 0xEu);
        }
        int v31 = HIDWORD(v62);
        if (HIDWORD(v62) != v58)
        {
          v32 = qword_100A1A038;
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)v70 = v31;
            *(_WORD *)&v70[4] = 1024;
            *(_DWORD *)&v70[6] = v58;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "DID expected %x received %x", buf, 0xEu);
            v32 = qword_100A1A038;
          }
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            sub_100475EE0(v14, (uint64_t)__p);
            sub_10078E2F0();
          }
          sub_10047CC64(v14, v58, 0);
        }
        LOBYTE(v28) = v55;
        if (v62 != v56)
        {
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
            sub_10078E59C();
          }
          if (((v55 >> 4) & 1 & (*(unsigned __int8 *)(a1 + 672) >> 4)) != 0) {
            a8 = 4515;
          }
          else {
            a8 = 4504;
          }
        }
        if (v22 < 3) {
          goto LABEL_57;
        }
        uint64_t v61 = 0;
        if (a7 <= 0x21)
        {
          int v53 = 2571;
        }
        else
        {
          if (a7 > 0x25)
          {
            uint64_t v33 = *(unsigned int *)(a6 + 30);
            uint64_t v34 = *(unsigned int *)(a6 + 34);
            sub_1006702EC(a2, &v61);
            int v36 = v61;
            int v35 = HIDWORD(v61);
            if (__PAIR64__(v61, HIDWORD(v61)) != __PAIR64__(v34, v33))
            {
              v37 = qword_100A1A038;
              if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)buf = 67109888;
                *(_DWORD *)v70 = v36;
                *(_WORD *)&v70[4] = 1024;
                *(_DWORD *)&v70[6] = v35;
                *(_WORD *)v71 = 1024;
                *(_DWORD *)&v71[2] = v34;
                *(_WORD *)v72 = 1024;
                *(_DWORD *)&v72[2] = v33;
                _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Supported Extended Features expected: 0x%x 0x%x, Received: 0x%x 0x%x", buf, 0x1Au);
                v37 = qword_100A1A038;
              }
              if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
              {
                sub_100475EE0(v14, (uint64_t)v59);
                v38 = v60 >= 0 ? v59 : (void **)v59[0];
                *(_DWORD *)buf = 136315650;
                *(void *)v70 = v38;
                *(_WORD *)&v70[8] = 1024;
                *(_DWORD *)v71 = v34;
                *(_WORD *)&v71[4] = 1024;
                *(_DWORD *)v72 = v33;
                _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Updating Supported Extended Features for device %s to 0x%x 0x%x", buf, 0x18u);
                if (v60 < 0) {
                  operator delete(v59[0]);
                }
              }
              sub_10047CF64(v14, v34 | (v33 << 32), 0);
            }
            LOBYTE(v28) = v55;
LABEL_57:
            int v27 = v54;
            goto LABEL_58;
          }
          int v53 = 2572;
        }
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm", v53, "ByteStream_NumReadBytesAvail(bs) >= 4");
      }
      v51 = "ByteStream_NumReadBytesAvail(bs) >= 2";
      int v52 = 2545;
    }
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm", v52, v51);
  }
LABEL_17:
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
    sub_10078E4CC();
  }
  sub_1001DEC18((uint64_t)v65);
  sub_10001B910(&v66);
LABEL_22:
  sub_10066E134(a1, 0, 0, 0, 0, a8, 0, *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32));
  return sub_10001B8AC(&v66);
}

void sub_100670C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
}

void sub_100670C60(uint64_t a1, void **a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (uint64_t)(a2 + 2);
  do
  {
    v6 = (uint64_t *)(v4 + 208 * v3);
    if (*((_DWORD *)v6 + 4))
    {
      uint64_t v7 = *v6;
      if (*v6)
      {
        v9 = a2[1];
        unint64_t v8 = (unint64_t)a2[2];
        if ((unint64_t)v9 >= v8)
        {
          uint64_t v11 = ((char *)v9 - (unsigned char *)*a2) >> 3;
          if ((unint64_t)(v11 + 1) >> 61) {
            abort();
          }
          uint64_t v12 = v8 - (void)*a2;
          uint64_t v13 = v12 >> 2;
          if (v12 >> 2 <= (unint64_t)(v11 + 1)) {
            uint64_t v13 = v11 + 1;
          }
          if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v14 = v13;
          }
          if (v14)
          {
            int v15 = (char *)sub_1000405F8(v5, v14);
            uint64_t v7 = *v6;
          }
          else
          {
            int v15 = 0;
          }
          v16 = &v15[8 * v11];
          *(void *)v16 = v7;
          v10 = v16 + 8;
          int v18 = (char *)*a2;
          v17 = (char *)a2[1];
          if (v17 != *a2)
          {
            do
            {
              uint64_t v19 = *((void *)v17 - 1);
              v17 -= 8;
              *((void *)v16 - 1) = v19;
              v16 -= 8;
            }
            while (v17 != v18);
            v17 = (char *)*a2;
          }
          *a2 = v16;
          a2[1] = v10;
          a2[2] = &v15[8 * v14];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          void *v9 = v7;
          v10 = v9 + 1;
        }
        a2[1] = v10;
      }
    }
    ++v3;
  }
  while (v3 != 3);
}

void sub_100670D80()
{
  v0 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "stackDidStart", v1, 2u);
  }
}

void sub_100670DE8()
{
  v0 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "stackWillStop", v1, 2u);
  }
}

void sub_100670E50(uint64_t a1)
{
  v2 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "stackDidStop", v3, 2u);
  }
  sub_100667EFC(a1);
}

uint64_t sub_100670EC4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unint64_t v8 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    if (v12 >= 0) {
      v9 = __p;
    }
    else {
      v9 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136315650;
    unint64_t v14 = v9;
    __int16 v15 = 1024;
    int v16 = a3;
    __int16 v17 = 1024;
    int v18 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "aclDisconnected for %s with result %d and reason %d", buf, 0x18u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  return sub_100668114(a1, a2 + 128, a4);
}

uint64_t sub_100670FD8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_100670EC4(a1 - 8, a2, a3, a4);
}

void sub_100670FEC()
{
}

void sub_100671000(uint64_t a1)
{
  if (qword_1009FB170 != -1) {
    dispatch_once(&qword_1009FB170, &stru_1009BD5A8);
  }
  v2 = off_1009FB168;
  uint64_t v3 = *(unsigned int *)(a1 + 12);
  int v4 = *(_DWORD *)(a1 + 16);

  sub_10066DD38((uint64_t)v2, v3, v4);
}

void *sub_100671064(void *result)
{
  *result = off_1009BD3F8;
  if (result[2]) {
    operator delete[]();
  }
  return result;
}

void sub_1006710C0(void *a1)
{
  *a1 = off_1009BD3F8;
  if (a1[2]) {
    operator delete[]();
  }

  operator delete();
}

unsigned char *sub_10067113C(uint64_t a1)
{
  if (qword_1009FB170 != -1) {
    dispatch_once(&qword_1009FB170, &stru_1009BD5A8);
  }
  v2 = off_1009FB168;
  uint64_t v3 = *(void *)(a1 + 16);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 24);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 26);
  char v6 = *(unsigned char *)(a1 + 28);
  uint64_t v7 = *(void *)(a1 + 32);

  return sub_10066F2E0((uint64_t)v2, v3, v4, v5, v6, v7);
}

void sub_1006711B0(uint64_t a1, int *a2, uint64_t a3)
{
  *(_WORD *)(a1 + 8) = 1;
  *(void *)a1 = off_1009BD430;
  int v3 = *a2;
  *(_WORD *)(a1 + 14) = *((_WORD *)a2 + 2);
  *(_DWORD *)(a1 + 10) = v3;
  *(void *)(a1 + 16) = a3;
  operator new[]();
}

void sub_1006712A0(void *a1)
{
  sub_100671350(a1);

  operator delete();
}

unsigned char *sub_1006712D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1009FB170 != -1) {
    dispatch_once(&qword_1009FB170, &stru_1009BD5A8);
  }
  unsigned int v5 = off_1009FB168;
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(unsigned __int8 **)(a1 + 40);
  unsigned int v8 = *(unsigned __int16 *)(a1 + 48);
  uint64_t v9 = *(unsigned int *)(a1 + 52);

  return sub_100670398((uint64_t)v5, (int *)(a1 + 10), v6, a4, 0, v7, v8, v9);
}

void *sub_100671350(void *result)
{
  *result = off_1009BD430;
  if (result[3]) {
    operator delete[]();
  }
  if (result[5]) {
    operator delete[]();
  }
  return result;
}

void sub_1006713CC()
{
}

void sub_1006713E0(uint64_t a1)
{
  if (qword_1009FB170 != -1) {
    dispatch_once(&qword_1009FB170, &stru_1009BD5A8);
  }
  v2 = off_1009FB168;
  int v3 = *(unsigned __int16 *)(a1 + 10);
  uint64_t v4 = *(unsigned int *)(a1 + 12);

  sub_10066EE34((uint64_t)v2, v3, v4);
}

void *sub_100671448(void *result)
{
  *result = &off_1009BD4A0;
  if (result[2]) {
    operator delete[]();
  }
  return result;
}

void sub_1006714A4(void *a1)
{
  *a1 = &off_1009BD4A0;
  if (a1[2]) {
    operator delete[]();
  }

  operator delete();
}

void sub_100671520(uint64_t a1)
{
  if (qword_1009FB170 != -1) {
    dispatch_once(&qword_1009FB170, &stru_1009BD5A8);
  }
  v2 = off_1009FB168;
  uint64_t v3 = *(unsigned __int16 *)(a1 + 10);
  uint64_t v4 = *(const void **)(a1 + 16);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 12);

  sub_10066EF8C((uint64_t)v2, v3, v4, v5);
}

void sub_10067158C(id a1)
{
}

void sub_1006715D0()
{
}

void sub_1006715F4(id a1)
{
}

void sub_100671638()
{
}

void sub_10067165C(id a1)
{
}

void sub_1006716A0()
{
}

void sub_1006716C4(id a1)
{
}

void sub_100671708()
{
}

void sub_10067172C(id a1)
{
}

void sub_100671770()
{
}

void sub_100671794(id a1)
{
}

void sub_1006717D8()
{
}

void sub_1006717FC(id a1)
{
}

void sub_100671840()
{
}

void sub_100671864(id a1)
{
}

void sub_1006718A8()
{
}

void sub_1006718CC(id a1)
{
}

void sub_100671910()
{
}

void sub_100671934(id a1)
{
}

void sub_100671978()
{
}

void sub_10067199C(id a1)
{
}

void sub_1006719E0()
{
}

void sub_100671A04(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_100671A10(uint64_t a1)
{
  *(void *)a1 = &off_1009BDFD0;
  *(void *)(a1 + 8) = &off_1009BE000;
  *(void *)(a1 + 16) = &off_1009BE018;
  *(void *)(a1 + 24) = &off_1009BE048;
  sub_10004191C(&v177, "LeConnectionManager");
  sub_1004EEEF4((void *)(a1 + 32), &v177);
  if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v177.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = off_1009BD700;
  *(void *)(a1 + 8) = &off_1009BD790;
  *(void *)(a1 + 16) = off_1009BD7A8;
  *(void *)(a1 + 24) = off_1009BD7D8;
  *(void *)(a1 + 32) = &off_1009BD828;
  *(void *)(a1 + 88) = off_1009BD840;
  *(void *)(a1 + 96) = off_1009BD860;
  sub_100052DA8(a1 + 120);
  *(void *)(a1 + 200) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 192) = 0;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_DWORD *)(a1 + 224) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = a1 + 344;
  *(_OWORD *)(a1 + 368) = 0u;
  *(void *)(a1 + 360) = a1 + 368;
  *(_OWORD *)(a1 + 392) = 0u;
  *(void *)(a1 + 384) = a1 + 392;
  *(_OWORD *)(a1 + 416) = 0u;
  *(void *)(a1 + 408) = a1 + 416;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 432) = a1 + 440;
  *(_OWORD *)(a1 + 464) = 0u;
  *(void *)(a1 + 456) = a1 + 464;
  *(_OWORD *)(a1 + 488) = 0u;
  *(void *)(a1 + 480) = a1 + 488;
  *(_OWORD *)(a1 + 512) = 0u;
  *(void *)(a1 + 504) = a1 + 512;
  *(_OWORD *)(a1 + 536) = 0u;
  *(void *)(a1 + 528) = a1 + 536;
  *(void *)(a1 + 552) = 0;
  *(_OWORD *)(a1 + 616) = 0u;
  *(void *)(a1 + 608) = a1 + 616;
  *(unsigned char *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 648) = 0u;
  *(void *)(a1 + 640) = a1 + 648;
  *(_OWORD *)(a1 + 672) = 0u;
  *(void *)(a1 + 664) = a1 + 672;
  *(_OWORD *)(a1 + 696) = 0u;
  *(void *)(a1 + 688) = a1 + 696;
  *(_OWORD *)(a1 + 720) = 0u;
  *(void *)(a1 + 712) = a1 + 720;
  *(unsigned char *)(a1 + 736) = -127;
  v2 = (void **)(a1 + 744);
  *(_OWORD *)(a1 + 808) = 0u;
  *(_OWORD *)(a1 + 744) = 0u;
  *(_OWORD *)(a1 + 760) = 0u;
  *(_OWORD *)(a1 + 776) = 0u;
  *(void *)(a1 + 792) = 0;
  *(void *)(a1 + 800) = a1 + 808;
  *(void *)(a1 + 824) = 0;
  *(unsigned char *)(a1 + 832) = 0;
  *(_DWORD *)(a1 + 834) = 30;
  *(_OWORD *)(a1 + 848) = 0u;
  *(void *)(a1 + 840) = a1 + 848;
  *(_DWORD *)(a1 + 864) = 0;
  *(_OWORD *)(a1 + 872) = 0u;
  *(void *)(a1 + 944) = 0;
  *(void *)(a1 + 952) = 0;
  *(_DWORD *)(a1 + 928) = 0;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(void *)(a1 + 936) = a1 + 944;
  sub_1002B80C0((pthread_cond_t *)(a1 + 960));
  *(unsigned char *)(a1 + 1008) = 1;
  sub_1002B80C0((pthread_cond_t *)(a1 + 1016));
  *(unsigned char *)(a1 + 1064) = 1;
  *(unsigned char *)(a1 + 1067) = 0;
  *(_OWORD *)(a1 + 1080) = xmmword_1007C0320;
  *(void *)(a1 + 1096) = 0xE10025801F407D0;
  *(_DWORD *)(a1 + 1104) = 786444;
  *(_WORD *)(a1 + 1108) = 3074;
  *(unsigned char *)(a1 + 1110) = 0;
  *(_DWORD *)(a1 + 1112) = 1572888;
  *(_DWORD *)(a1 + 1116) = 0x10000;
  *(unsigned char *)(a1 + 1120) = 0;
  *(_OWORD *)(a1 + 1136) = 0u;
  *(void *)(a1 + 1128) = a1 + 1136;
  *(_OWORD *)(a1 + 1160) = 0u;
  *(void *)(a1 + 1152) = a1 + 1160;
  *(void *)(a1 + 1176) = 0;
  *(_OWORD *)(a1 + 1192) = 0u;
  *(void *)(a1 + 1184) = a1 + 1192;
  *(_WORD *)(a1 + 1208) = 10;
  *(_DWORD *)(a1 + 1212) = 3600;
  *(_WORD *)(a1 + 1216) = 2;
  *(_DWORD *)(a1 + 1220) = 3600;
  *(_OWORD *)(a1 + 1232) = 0u;
  *(_OWORD *)(a1 + 1256) = 0u;
  *(void *)(a1 + 1224) = a1 + 1232;
  *(void *)(a1 + 1248) = a1 + 1256;
  *(_OWORD *)(a1 + 1280) = 0u;
  *(void *)(a1 + 1272) = a1 + 1280;
  *(_OWORD *)(a1 + 1304) = 0u;
  *(void *)(a1 + 1296) = a1 + 1304;
  *(_OWORD *)(a1 + 1328) = 0u;
  *(void *)(a1 + 1320) = a1 + 1328;
  *(_DWORD *)(a1 + 1344) = -1415142493;
  *(_WORD *)(a1 + 1348) = -24149;
  *(unsigned char *)(a1 + 1350) = -90;
  *(_OWORD *)(a1 + 1360) = 0u;
  *(void *)(a1 + 1352) = a1 + 1360;
  *(_DWORD *)(a1 + 1376) = 0;
  *(unsigned char *)(a1 + 1380) = 0;
  *(_WORD *)(a1 + 1382) = 2;
  *(_OWORD *)(a1 + 1392) = 0u;
  *(void *)(a1 + 1384) = a1 + 1392;
  *(_OWORD *)(a1 + 1416) = 0u;
  *(void *)(a1 + 1408) = a1 + 1416;
  *(_OWORD *)(a1 + 1440) = 0u;
  *(void *)(a1 + 1432) = a1 + 1440;
  *(_OWORD *)(a1 + 1464) = 0u;
  *(void *)(a1 + 1456) = a1 + 1464;
  *(void *)(a1 + 1480) = 0x7080000000ALL;
  *(_DWORD *)(a1 + 1488) = 10;
  *(void *)(a1 + 1496) = 0;
  *(unsigned char *)(a1 + 1504) = 0;
  *(void *)(a1 + 1524) = 0;
  *(_DWORD *)(a1 + 1532) = 0;
  *(_OWORD *)(a1 + 1508) = 0u;
  *(unsigned char *)(a1 + 1536) = 1;
  *(void *)(a1 + 1552) = 0;
  *(void *)(a1 + 1560) = 0;
  *(void *)(a1 + 1544) = a1 + 1552;
  *(void *)(a1 + 1568) = 0;
  *(unsigned char *)(a1 + 1576) = 0;
  int v176 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "MaxFilterAcceptListSize");
  int v4 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v3 + 88))(v3, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      goto LABEL_15;
    }
  }
  else if (!v4)
  {
    goto LABEL_15;
  }
  int v5 = v176;
  uint64_t v6 = qword_100A19EF8;
  if (v176 < 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078E954();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) for max number of devices in connection Filter Accept List", buf, 8u);
      LOBYTE(v5) = v176;
    }
    *(unsigned char *)(a1 + 832) = v5;
  }
LABEL_15:
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DefaultConnectionInterval");
  int v8 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v7 + 88))(v7, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v8) {
      goto LABEL_27;
    }
  }
  else if (!v8)
  {
    goto LABEL_27;
  }
  int v9 = v176;
  v10 = qword_100A19EF8;
  if ((v176 - 8) > 0x3E0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078E8EC();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: Using override value %d ms for default LE connection interval", buf, 8u);
      LOWORD(v9) = v176;
    }
    *(_WORD *)(a1 + 834) = v9;
  }
LABEL_27:
  uint64_t v11 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DataLength");
  int v12 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v11 + 88))(v11, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v12) {
      goto LABEL_39;
    }
  }
  else if (!v12)
  {
    goto LABEL_39;
  }
  int v13 = v176;
  unint64_t v14 = qword_100A19EF8;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: Using override value %d ms for LE data length", buf, 8u);
      LOWORD(v13) = v176;
    }
    *(_WORD *)(a1 + 836) = v13;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_10078E880();
  }
LABEL_39:
  uint64_t v15 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "AllowAllConnectionParameterUpdates");
  int v16 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v15 + 88))(v15, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v16) {
      goto LABEL_52;
    }
  }
  else if (!v16)
  {
    goto LABEL_52;
  }
  __int16 v17 = qword_100A19EF8;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: Allow all connection parameters from remote request", buf, 2u);
      int v18 = v176;
    }
    else
    {
      int v18 = 1;
    }
    byte_100A14550 = v18 != 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_10078E814();
  }
LABEL_52:
  *(_OWORD *)(a1 + 568) = xmmword_1007C0330;
  *(_OWORD *)(a1 + 584) = xmmword_1007C0340;
  *(_DWORD *)(a1 + 600) = 9000;
  *(_OWORD *)(a1 + 256) = xmmword_1007C0350;
  *(_OWORD *)(a1 + 272) = xmmword_1007C0360;
  uint64_t v19 = sub_100017768();
  sub_10004191C(buf, "CoexConnectionScanParameters");
  sub_10004191C(__p, "CoexConnectionScanTimeout");
  int v20 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v19 + 88))(v19, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v20) {
      goto LABEL_64;
    }
  }
  else if (!v20)
  {
    goto LABEL_64;
  }
  int v21 = v176;
  unsigned int v22 = qword_100A19EF8;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Warning: Override fFastConnectionScanDurationMsCoexCarPlay=%dms", buf, 8u);
      int v21 = v176;
    }
    *(_DWORD *)(a1 + 596) = v21;
    *(_DWORD *)(a1 + 600) = v21;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_10078E814();
  }
LABEL_64:
  uint64_t v23 = sub_100017768();
  sub_10004191C(buf, "CoexConnectionScanParameters");
  sub_10004191C(__p, "CoexConnectionScanIntervalWithAudio");
  int v24 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v23 + 88))(v23, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v24) {
      goto LABEL_76;
    }
  }
  else if (!v24)
  {
    goto LABEL_76;
  }
  int v25 = v176;
  __int16 v26 = qword_100A19EF8;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = (double)v25 * 0.625;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Warning: Override fFastConnectionScanIntervalMsCoexCarPlayWithAudio=%fms", buf, 0xCu);
      LOWORD(v25) = v176;
    }
    *(_WORD *)(a1 + 272) = v25;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_10078E7A8();
  }
LABEL_76:
  uint64_t v27 = sub_100017768();
  sub_10004191C(buf, "CoexConnectionScanParameters");
  sub_10004191C(__p, "CoexConnectionScanIntervalWithoutAudio");
  int v28 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v27 + 88))(v27, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v28) {
      goto LABEL_88;
    }
  }
  else if (!v28)
  {
    goto LABEL_88;
  }
  int v29 = v176;
  v30 = qword_100A19EF8;
  if (v176)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(double *)&uint8_t buf[4] = (double)v29 * 0.625;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Warning: Override fFastConnectionScanIntervalMsCoexCarPlayNoAudio=%fms", buf, 0xCu);
      LOWORD(v29) = v176;
    }
    *(_WORD *)(a1 + 270) = v29;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_10078E73C();
  }
LABEL_88:
  uint64_t v31 = +[NSMutableSet set];
  v32 = *v2;
  void *v2 = (void *)v31;

  uint64_t v33 = +[NSMutableSet set];
  uint64_t v34 = *(void **)(a1 + 752);
  *(void *)(a1 + 752) = v33;

  uint64_t v35 = +[NSMutableSet set];
  int v36 = *(void **)(a1 + 760);
  *(void *)(a1 + 760) = v35;

  uint64_t v37 = +[NSMutableSet set];
  v38 = *(void **)(a1 + 768);
  *(void *)(a1 + 768) = v37;

  uint64_t v39 = +[NSMutableSet set];
  int v40 = *(void **)(a1 + 776);
  *(void *)(a1 + 776) = v39;

  uint64_t v41 = +[NSMutableSet set];
  int v42 = *(void **)(a1 + 784);
  *(void *)(a1 + 784) = v41;

  uint64_t v43 = +[NSMutableSet set];
  int v44 = *(void **)(a1 + 792);
  *(void *)(a1 + 792) = v43;

  uint64_t v45 = +[NSMutableSet set];
  int v46 = *(void **)(a1 + 824);
  *(void *)(a1 + 824) = v45;

  *(unsigned char *)(a1 + 1109) = 24;
  uint64_t v47 = sub_10003FB34();
  *(unsigned char *)(a1 + 1108) = (*(uint64_t (**)(uint64_t, void))(*(void *)v47 + 3488))(v47, *(unsigned __int8 *)(a1 + 1109));
  uint64_t v48 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v48 + 8))(v48)) {
    sub_1006745A4(a1);
  }
  v49 = *(void **)(a1 + 552);
  *(void *)(a1 + 552) = 0;

  *(void *)buf = 0;
  sub_100026C30((uint64_t)buf);
  uint64_t v50 = *(__int16 *)&buf[4];
  *(void *)(a1 + 872) = *(int *)buf;
  *(void *)(a1 + 880) = v50;
  *(unsigned char *)(a1 + 888) = 0;
  int v173 = 0;
  *(unsigned char *)(a1 + 1068) = 0;
  *(unsigned char *)(a1 + 1074) = 0;
  *(_DWORD *)(a1 + 1070) = 0;
  uint64_t v51 = sub_100017768();
  sub_10004191C(buf, "ScanCore");
  sub_10004191C(__p, "IsScanCoreConnectionOverriden");
  int v52 = (unsigned char *)(a1 + 1068);
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v51 + 72))(v51, buf, __p, a1 + 1068))
  {
    int v53 = *v52;
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0)
    {
      operator delete(*(void **)buf);
      if (!v53) {
        goto LABEL_137;
      }
    }
    else if (!v53)
    {
      goto LABEL_137;
    }
    int v54 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Overriding Connection Scan Parameters on ScanCore.", buf, 2u);
    }
    uint64_t v55 = sub_100017768();
    sub_10004191C(buf, "ScanCore");
    sub_10004191C(__p, "IsScanCoreEnabledConnectionScan");
    if (!(*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v55 + 72))(v55, buf, __p, a1 + 1074))
    {
      if (v175 < 0) {
        operator delete(__p[0]);
      }
      if (v179 < 0) {
        operator delete(*(void **)buf);
      }
      goto LABEL_134;
    }
    int v56 = *(unsigned __int8 *)(a1 + 1074);
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0)
    {
      operator delete(*(void **)buf);
      if (!v56) {
        goto LABEL_134;
      }
    }
    else if (!v56)
    {
LABEL_134:
      char v66 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Overriding ScanCore Disabled for Connection Scan.", buf, 2u);
      }
LABEL_136:
      *(_DWORD *)(a1 + 1070) = 0;
      goto LABEL_137;
    }
    uint64_t v57 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Overriding ScanCore Enabled for Connection Scan.", buf, 2u);
    }
    uint64_t v58 = sub_100017768();
    sub_10004191C(buf, "ScanCore");
    sub_10004191C(__p, "IntervalConnection");
    int v59 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v58 + 88))(v58, buf, __p, &v173);
    if (v173) {
      int v60 = v59;
    }
    else {
      int v60 = 0;
    }
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0) {
      operator delete(*(void **)buf);
    }
    if (v60)
    {
      int v61 = v173;
      *(_WORD *)(a1 + 1072) = v173;
      uint64_t v62 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v61;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Overriding ScanCore Connection Scan Interval %d.", buf, 8u);
      }
    }
    uint64_t v63 = sub_100017768();
    sub_10004191C(buf, "ScanCore");
    sub_10004191C(__p, "WindowConnection");
    int v64 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v63 + 88))(v63, buf, __p, &v173);
    if (v173) {
      int v65 = v64;
    }
    else {
      int v65 = 0;
    }
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0)
    {
      operator delete(*(void **)buf);
      if (!v65) {
        goto LABEL_137;
      }
    }
    else if (!v65)
    {
      goto LABEL_137;
    }
    int v164 = v173;
    *(_WORD *)(a1 + 1070) = v173;
    v165 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v164;
      _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_DEFAULT, "Overriding ScanCore Connection Scan Window %d.", buf, 8u);
      LOWORD(v164) = *(_WORD *)(a1 + 1070);
    }
    if (*(unsigned __int16 *)(a1 + 1072) < (unsigned __int16)v164)
    {
      *int v52 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078E6D4();
      }
      goto LABEL_136;
    }
  }
  else
  {
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_137:
  int v172 = 0;
  *(unsigned char *)(a1 + 1075) = 0;
  *(_DWORD *)(a1 + 1076) = 0;
  uint64_t v67 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "IsConnectionScanOverriden");
  __int16 v68 = (unsigned char *)(a1 + 1075);
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v67 + 72))(v67, buf, __p, a1 + 1075))
  {
    int v69 = *v68;
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0)
    {
      operator delete(*(void **)buf);
      if (!v69) {
        goto LABEL_174;
      }
    }
    else if (!v69)
    {
      goto LABEL_174;
    }
    v70 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "Overriding Connection Scan Parameters on MainCore.", buf, 2u);
    }
    uint64_t v71 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "ConnectionScanInterval");
    int v72 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v71 + 88))(v71, buf, __p, &v172);
    if (v172) {
      int v73 = v72;
    }
    else {
      int v73 = 0;
    }
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0) {
      operator delete(*(void **)buf);
    }
    if (v73)
    {
      int v74 = v172;
      *(_WORD *)(a1 + 1078) = v172;
      v75 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v74;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Overriding MainCore Connection Scan Interval %d.", buf, 8u);
      }
    }
    uint64_t v76 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "ConnectionScanWindow");
    int v77 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v76 + 88))(v76, buf, __p, &v172);
    if (v172) {
      int v78 = v77;
    }
    else {
      int v78 = 0;
    }
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0) {
      operator delete(*(void **)buf);
    }
    if (v78)
    {
      int v79 = v172;
      *(_WORD *)(a1 + 1076) = v172;
      v80 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v79;
        _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Overriding MainCore Connection Scan Window %d.", buf, 8u);
      }
    }
    if (*(unsigned __int16 *)(a1 + 1076) > *(unsigned __int16 *)(a1 + 1078))
    {
      *__int16 v68 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078E66C();
      }
      *(_DWORD *)(a1 + 1076) = 0;
    }
  }
  else
  {
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_174:
  int v171 = 0;
  uint64_t v81 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "MinRSSIConnection");
  int v82 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v81 + 88))(v81, buf, __p, &v171);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v82) {
      goto LABEL_182;
    }
  }
  else if (!v82)
  {
    goto LABEL_182;
  }
  char v83 = v171;
  *(unsigned char *)(a1 + 1117) = v171;
  v84 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v83;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "MinRSSIConnection %d overridden", buf, 8u);
  }
LABEL_182:
  int v170 = 0;
  uint64_t v85 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "GlobalMinRSSIConnection");
  int v86 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v85 + 88))(v85, buf, __p, &v170);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v86) {
      goto LABEL_190;
    }
  }
  else if (!v86)
  {
    goto LABEL_190;
  }
  char v87 = v170;
  *(unsigned char *)(a1 + 1120) = v170;
  v88 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v87;
    _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "GlobalMinRSSIConnection %d overridden", buf, 8u);
  }
LABEL_190:
  uint64_t v89 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "MinRSSIConnectionEnabled");
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v89 + 72))(v89, buf, __p, a1 + 1118))
  {
    int v90 = *(unsigned __int8 *)(a1 + 1118);
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0) {
      operator delete(*(void **)buf);
    }
    if (v90)
    {
      v91 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "MinRSSIConnectionEnabled is enabled (overridden)", buf, 2u);
      }
    }
  }
  else
  {
    if (v175 < 0) {
      operator delete(__p[0]);
    }
    if (v179 < 0) {
      operator delete(*(void **)buf);
    }
  }
  int v169 = 0;
  uint64_t v92 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "NumDisconnectionsFromDisabledToStageOne");
  int v93 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v92 + 88))(v92, buf, __p, &v169);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v93) {
      goto LABEL_210;
    }
  }
  else if (!v93)
  {
    goto LABEL_210;
  }
  unsigned __int16 v94 = (char)v169;
  *(_WORD *)(a1 + 1208) = (char)v169;
  v95 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v94;
    _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "NumDisconnectionsFromDisabledToStageOne %d overridden", buf, 8u);
  }
LABEL_210:
  uint64_t v96 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "NumDisconnectionsFromStageOneToDisabled");
  int v97 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v96 + 88))(v96, buf, __p, &v169);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v97) {
      goto LABEL_218;
    }
  }
  else if (!v97)
  {
    goto LABEL_218;
  }
  unsigned __int16 v98 = (char)v169;
  *(_WORD *)(a1 + 1216) = (char)v169;
  v99 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v98;
    _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "NumDisconnectionsFromStageOneToDisabled %d overridden", buf, 8u);
  }
LABEL_218:
  int v168 = 0;
  uint64_t v100 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "TimeDurationFromDisabledToStageOne");
  int v101 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v100 + 88))(v100, buf, __p, &v168);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v101) {
      goto LABEL_226;
    }
  }
  else if (!v101)
  {
    goto LABEL_226;
  }
  int v102 = v168;
  *(_DWORD *)(a1 + 1212) = v168;
  v103 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v102;
    _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "TimeDurationFromDisabledToStageOne %d overridden", buf, 8u);
  }
LABEL_226:
  uint64_t v104 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "TimeDurationFromStageOneToDisabled");
  int v105 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v104 + 88))(v104, buf, __p, &v168);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v105) {
      goto LABEL_234;
    }
  }
  else if (!v105)
  {
    goto LABEL_234;
  }
  int v106 = v168;
  *(_DWORD *)(a1 + 1220) = v168;
  v107 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v106;
    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "TimeDurationFromStageOneToDisabled %d overridden", buf, 8u);
  }
LABEL_234:
  int v167 = -93;
  uint64_t v108 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnRSSIStageOneFindMy");
  int v109 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v108 + 88))(v108, buf, __p, &v167);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v109) {
      goto LABEL_242;
    }
  }
  else if (!v109)
  {
    goto LABEL_242;
  }
  char v110 = v167;
  *(unsigned char *)(a1 + 1344) = v167;
  v111 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v110;
    _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneFindMy %d overridden", buf, 8u);
  }
LABEL_242:
  uint64_t v112 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnRSSIStageOneMagnet");
  int v113 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v112 + 88))(v112, buf, __p, &v167);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v113) {
      goto LABEL_250;
    }
  }
  else if (!v113)
  {
    goto LABEL_250;
  }
  char v114 = v167;
  *(unsigned char *)(a1 + 1345) = v167;
  v115 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v114;
    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneMagnet %d overridden", buf, 8u);
  }
LABEL_250:
  uint64_t v116 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnRSSIStageOneExternal_Lock");
  int v117 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v116 + 88))(v116, buf, __p, &v167);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v117) {
      goto LABEL_258;
    }
  }
  else if (!v117)
  {
    goto LABEL_258;
  }
  char v118 = v167;
  *(unsigned char *)(a1 + 1346) = v167;
  v119 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v118;
    _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneExternal_Lock %d overridden", buf, 8u);
  }
LABEL_258:
  uint64_t v120 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnRSSIStageOneDigitalCarKey");
  int v121 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v120 + 88))(v120, buf, __p, &v167);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v121) {
      goto LABEL_266;
    }
  }
  else if (!v121)
  {
    goto LABEL_266;
  }
  char v122 = v167;
  *(unsigned char *)(a1 + 1347) = v167;
  v123 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v122;
    _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneDigitalCarKey %d overridden", buf, 8u);
  }
LABEL_266:
  uint64_t v124 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnRSSIStageOneDigitalHomeKey");
  int v125 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v124 + 88))(v124, buf, __p, &v167);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v125) {
      goto LABEL_274;
    }
  }
  else if (!v125)
  {
    goto LABEL_274;
  }
  char v126 = v167;
  *(unsigned char *)(a1 + 1348) = v167;
  v127 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v126;
    _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "ConnRSSIStageOneDigitalHomeKey %d overridden", buf, 8u);
  }
LABEL_274:
  uint64_t v128 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConfigureCreateConnectionEnabled");
  int v129 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v128 + 72))(v128, buf, __p, a1 + 1119);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v129) {
      goto LABEL_282;
    }
  }
  else if (!v129)
  {
    goto LABEL_282;
  }
  v130 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    int v131 = *(unsigned __int8 *)(a1 + 1119);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v131;
    _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "ConfigureCreateConnectionEnabled is set to %d (overridden)", buf, 8u);
  }
LABEL_282:
  uint64_t v132 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnRSSIStageOneThirdPartyApp");
  int v133 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v132 + 88))(v132, buf, __p, &v167);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v133) {
      goto LABEL_290;
    }
  }
  else if (!v133)
  {
    goto LABEL_290;
  }
  char v134 = v167;
  *(unsigned char *)(a1 + 1349) = v167;
  v135 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v134;
    _os_log_impl((void *)&_mh_execute_header, v135, OS_LOG_TYPE_DEFAULT, "LEConnectionThirdPartyAppStageOneThresholdRssi %d overridden", buf, 8u);
  }
LABEL_290:
  uint64_t v136 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnRSSIStageOneLECarPlay");
  int v137 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v136 + 88))(v136, buf, __p, &v167);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v137) {
      goto LABEL_298;
    }
  }
  else if (!v137)
  {
    goto LABEL_298;
  }
  char v138 = v167;
  *(unsigned char *)(a1 + 1350) = v167;
  v139 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v138;
    _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "LEConnectionLECarPlayStageOneThresholdRssi %d overridden", buf, 8u);
  }
LABEL_298:
  int v166 = 0;
  uint64_t v140 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnScanTimeoutExtendPercent");
  int v141 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v140 + 88))(v140, buf, __p, &v166);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0)
  {
    operator delete(*(void **)buf);
    if (!v141) {
      goto LABEL_310;
    }
  }
  else if (!v141)
  {
    goto LABEL_310;
  }
  int v142 = v166;
  v143 = qword_100A19EF8;
  if (v166 < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078E604();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v142;
      _os_log_impl((void *)&_mh_execute_header, v143, OS_LOG_TYPE_DEFAULT, "Set ConnScanTimeoutExtendPercent %d percent", buf, 8u);
      LOBYTE(v142) = v166;
    }
    *(unsigned char *)(a1 + 1380) = v142;
  }
LABEL_310:
  uint64_t v144 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnectionDenyListTimeoutSecondsOverride");
  int v145 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v144 + 88))(v144, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0) {
    operator delete(*(void **)buf);
  }
  int v146 = v176;
  if (v176 > 0) {
    int v147 = v145;
  }
  else {
    int v147 = 0;
  }
  if (v147 == 1)
  {
    v148 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v146;
      _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListTimeoutSec", buf, 8u);
      int v146 = v176;
    }
    *(_DWORD *)(a1 + 1484) = v146;
  }
  uint64_t v149 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnectionDenyListIntervalSecondsOverride");
  int v150 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v149 + 88))(v149, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0) {
    operator delete(*(void **)buf);
  }
  int v151 = v176;
  if (v176 > 0) {
    int v152 = v150;
  }
  else {
    int v152 = 0;
  }
  if (v152 == 1)
  {
    v153 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v151;
      _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListIntervalSec", buf, 8u);
      int v151 = v176;
    }
    *(_DWORD *)(a1 + 1480) = v151;
  }
  uint64_t v154 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnectionDenyListCountThresholdOverride");
  int v155 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v154 + 88))(v154, buf, __p, &v176);
  if (v175 < 0) {
    operator delete(__p[0]);
  }
  if (v179 < 0) {
    operator delete(*(void **)buf);
  }
  int v156 = v176;
  if (v176 > 0) {
    int v157 = v155;
  }
  else {
    int v157 = 0;
  }
  if (v157 == 1)
  {
    v158 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v156;
      _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionDenyList: Using override value (%d) for fLeConnectionDenyListCountThreshold", buf, 8u);
      int v156 = v176;
    }
    *(_DWORD *)(a1 + 1488) = v156;
  }
  uint64_t v159 = objc_opt_new();
  v160 = *(void **)(a1 + 1520);
  *(void *)(a1 + 1520) = v159;

  uint64_t v161 = objc_opt_new();
  v162 = *(void **)(a1 + 1528);
  *(void *)(a1 + 1528) = v161;

  *(void *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 112) = 0;
  return a1;
}

void sub_100674120(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v43 - 105) < 0) {
    operator delete(*(void **)(v43 - 128));
  }

  sub_1006A9760(v37 + 1544, *(void **)(v37 + 1552));
  sub_1006A96C0(v40, *(void **)(v37 + 1464));
  sub_1006A96C0(v37 + 1432, *(void **)(v37 + 1440));
  sub_1000486F0(v39, *(void **)(v37 + 1416));
  sub_1000486F0(v37 + 1384, *(void **)(v37 + 1392));
  sub_10004BA28(v37 + 1352, *(char **)(v37 + 1360));
  sub_1000486F0(v37 + 1320, *(void **)(v37 + 1328));
  sub_1000486F0(v42, *(void **)(v37 + 1304));
  sub_1000486F0(v37 + 1272, *(void **)(v37 + 1280));
  sub_1000486F0(a23, *(void **)(v37 + 1256));
  sub_1000486F0(v37 + 1224, *(void **)(v37 + 1232));
  sub_10004BA28(a24, *(char **)(v37 + 1192));
  sub_10030BEA8(a25, *(void **)(v37 + 1160));
  sub_1000486F0(v37 + 1128, *(void **)(v37 + 1136));
  sub_1002B812C(a26);
  sub_1002B812C(a27);
  sub_100051AD4((uint64_t)(v41 + 92), *(void **)(v37 + 944));
  uint64_t v45 = *(void **)(v37 + 904);
  if (v45)
  {
    *(void *)(v37 + 912) = v45;
    operator delete(v45);
  }
  sub_1000486F0((uint64_t)(v41 + 80), *(void **)(v37 + 848));

  sub_1000486F0(a22, *(void **)(v37 + 808));
  sub_1000486F0((uint64_t)(v41 + 64), *(void **)(v37 + 720));
  sub_1000486F0(a19, *(void **)(v37 + 696));
  sub_1000486F0((uint64_t)(v41 + 58), *(void **)(v37 + 672));
  sub_1000486F0(a20, *(void **)(v37 + 648));
  sub_1000486F0(a21, *(void **)(v37 + 616));

  sub_1000486F0(a13, *(void **)(v37 + 536));
  sub_1000486F0((uint64_t)(v41 + 38), *(void **)(v37 + 512));
  sub_1000486F0(a14, *(void **)(v37 + 488));
  sub_1000486F0((uint64_t)(v41 + 32), *(void **)(v37 + 464));
  sub_1000486F0(a15, *(void **)(v37 + 440));
  sub_1000486F0((uint64_t)(v41 + 26), *(void **)(v37 + 416));
  sub_1000486F0(a16, *(void **)(v37 + 392));
  sub_1000486F0((uint64_t)(v41 + 20), *(void **)(v37 + 368));
  sub_1000486F0(a17, *(void **)(v37 + 344));
  int v46 = *(void **)(v37 + 232);
  if (v46)
  {
    *(void *)(v37 + 240) = v46;
    operator delete(v46);
  }
  uint64_t v47 = *v41;
  if (*v41)
  {
    *(void *)(v37 + 208) = v47;
    operator delete(v47);
  }
  sub_100052DA4(a18);
  sub_1004EF0E4(v38);
  _Unwind_Resume(a1);
}

void sub_1006745A4(uint64_t a1)
{
  int v96 = 0;
  int v94 = 0;
  int v95 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyLowMinInterval");
  int v3 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v2 + 88))(v2, buf, __p, &v96);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_12;
    }
  }
  else if (!v3)
  {
    goto LABEL_12;
  }
  int v4 = v96;
  int v5 = qword_100A19EF8;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Override rejected latency minInterval:%d LeConnectionLatencyLow", buf, 8u);
    LOWORD(v4) = v96;
    int v5 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1080) = v4;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Override latency minInterval:%d LeConnectionLatencyLow", buf, 8u);
  }
LABEL_12:
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyLowMaxInterval");
  int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v6 + 88))(v6, buf, __p, &v95);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v7) {
      goto LABEL_23;
    }
  }
  else if (!v7)
  {
    goto LABEL_23;
  }
  int v8 = v95;
  int v9 = qword_100A19EF8;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Override rejected latency maxInterval:%d LeConnectionLatencyLow", buf, 8u);
    LOWORD(v8) = v95;
    int v9 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1082) = v8;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Override latency maxInterval:%d LeConnectionLatencyLow", buf, 8u);
  }
LABEL_23:
  uint64_t v10 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyLowSupervisionTimeout");
  int v11 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v10 + 88))(v10, buf, __p, &v94);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v11) {
      goto LABEL_34;
    }
  }
  else if (!v11)
  {
    goto LABEL_34;
  }
  int v12 = v94;
  int v13 = qword_100A19EF8;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v12;
    _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Override rejected latency supervisionTimeout:%d LeConnectionLatencyLow", buf, 8u);
    LOWORD(v12) = v94;
    int v13 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1084) = v12;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v12;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Override latency supervisionTimeout:%d LeConnectionLatencyLow", buf, 8u);
  }
LABEL_34:
  if (*(unsigned __int16 *)(a1 + 1082) < *(unsigned __int16 *)(a1 + 1080)
    && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    sub_10078EB30();
  }
  uint64_t v14 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyMediumMinInterval");
  int v15 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v14 + 88))(v14, buf, __p, &v96);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15) {
      goto LABEL_48;
    }
  }
  else if (!v15)
  {
    goto LABEL_48;
  }
  int v16 = v96;
  __int16 v17 = qword_100A19EF8;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v16;
    _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Override rejected latency minInterval:%d LeConnectionLatencyMedium", buf, 8u);
    LOWORD(v16) = v96;
    __int16 v17 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1086) = v16;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v16;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Override latency minInterval:%d LeConnectionLatencyMedium", buf, 8u);
  }
LABEL_48:
  uint64_t v18 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyMediumMaxInterval");
  int v19 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v18 + 88))(v18, buf, __p, &v95);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v19) {
      goto LABEL_59;
    }
  }
  else if (!v19)
  {
    goto LABEL_59;
  }
  int v20 = v95;
  int v21 = qword_100A19EF8;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v20;
    _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "Override rejected latency maxInterval:%d LeConnectionLatencyMedium", buf, 8u);
    LOWORD(v20) = v95;
    int v21 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1088) = v20;
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v20;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Override latency maxInterval:%d LeConnectionLatencyMedium", buf, 8u);
  }
LABEL_59:
  uint64_t v22 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyMediumSupervisionTimeout");
  int v23 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v22 + 88))(v22, buf, __p, &v94);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v23) {
      goto LABEL_70;
    }
  }
  else if (!v23)
  {
    goto LABEL_70;
  }
  int v24 = v94;
  int v25 = qword_100A19EF8;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v24;
    _os_log_fault_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_FAULT, "Override rejected latency supervisionTimeout:%d LeConnectionLatencyMedium", buf, 8u);
    LOWORD(v24) = v94;
    int v25 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1090) = v24;
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v24;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Override latency supervisionTimeout:%d LeConnectionLatencyMedium", buf, 8u);
  }
LABEL_70:
  unsigned int v26 = *(unsigned __int16 *)(a1 + 1088);
  unsigned int v27 = *(unsigned __int16 *)(a1 + 1086);
  if (v26 < v27)
  {
    int v28 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT)) {
      sub_10078EA8C(v26, v27, v28);
    }
  }
  uint64_t v29 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyHighMinInterval");
  int v30 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v29 + 88))(v29, buf, __p, &v96);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v30) {
      goto LABEL_84;
    }
  }
  else if (!v30)
  {
    goto LABEL_84;
  }
  int v31 = v96;
  v32 = qword_100A19EF8;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v31;
    _os_log_fault_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_FAULT, "Override rejected latency minInterval:%d LeConnectionLatencyHigh", buf, 8u);
    LOWORD(v31) = v96;
    v32 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1092) = v31;
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v31;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Override latency minInterval:%d LeConnectionLatencyHigh", buf, 8u);
  }
LABEL_84:
  uint64_t v33 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyHighMaxInterval");
  int v34 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v33 + 88))(v33, buf, __p, &v95);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v34) {
      goto LABEL_95;
    }
  }
  else if (!v34)
  {
    goto LABEL_95;
  }
  int v35 = v95;
  int v36 = qword_100A19EF8;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v35;
    _os_log_fault_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_FAULT, "Override rejected latency maxInterval:%d LeConnectionLatencyHigh", buf, 8u);
    LOWORD(v35) = v95;
    int v36 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1094) = v35;
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Override latency maxInterval:%d LeConnectionLatencyHigh", buf, 8u);
  }
LABEL_95:
  uint64_t v37 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyHighSupervisionTimeout");
  int v38 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v37 + 88))(v37, buf, __p, &v94);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v38) {
      goto LABEL_106;
    }
  }
  else if (!v38)
  {
    goto LABEL_106;
  }
  int v39 = v94;
  uint64_t v40 = qword_100A19EF8;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v39;
    _os_log_fault_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_FAULT, "Override rejected latency supervisionTimeout:%d LeConnectionLatencyHigh", buf, 8u);
    LOWORD(v39) = v94;
    uint64_t v40 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1096) = v39;
  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v39;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Override latency supervisionTimeout:%d LeConnectionLatencyHigh", buf, 8u);
  }
LABEL_106:
  if (*(unsigned __int16 *)(a1 + 1094) < *(unsigned __int16 *)(a1 + 1092)
    && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    sub_10078EA24();
  }
  uint64_t v41 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyVeryHighMinInterval");
  int v42 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v41 + 88))(v41, buf, __p, &v96);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v42) {
      goto LABEL_120;
    }
  }
  else if (!v42)
  {
    goto LABEL_120;
  }
  int v43 = v96;
  int v44 = qword_100A19EF8;
  if ((v96 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v43;
    _os_log_fault_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_FAULT, "Override rejected latency minInterval:%d LeConnectionLatencyVeryHigh", buf, 8u);
    LOWORD(v43) = v96;
    int v44 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1098) = v43;
  if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v43;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Override latency minInterval:%d LeConnectionLatencyVeryHigh", buf, 8u);
  }
LABEL_120:
  uint64_t v45 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyVeryHighMaxInterval");
  int v46 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v45 + 88))(v45, buf, __p, &v95);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v46) {
      goto LABEL_131;
    }
  }
  else if (!v46)
  {
    goto LABEL_131;
  }
  int v47 = v95;
  uint64_t v48 = qword_100A19EF8;
  if ((v95 - 8) >= 0xF9A && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v47;
    _os_log_fault_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_FAULT, "Override rejected latency maxInterval:%d LeConnectionLatencyVeryHigh", buf, 8u);
    LOWORD(v47) = v95;
    uint64_t v48 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1100) = v47;
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v47;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Override latency maxInterval:%d LeConnectionLatencyVeryHigh", buf, 8u);
  }
LABEL_131:
  uint64_t v49 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionLatencyVeryHighSupervisionTimeout");
  int v50 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v49 + 88))(v49, buf, __p, &v94);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v50) {
      goto LABEL_142;
    }
  }
  else if (!v50)
  {
    goto LABEL_142;
  }
  int v51 = v94;
  int v52 = qword_100A19EF8;
  if ((v94 - 100) >= 0x7C9D && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v51;
    _os_log_fault_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_FAULT, "Override rejected latency supervisionTimeout:%d LeConnectionLatencyVeryHigh", buf, 8u);
    LOWORD(v51) = v94;
    int v52 = qword_100A19EF8;
  }
  *(_WORD *)(a1 + 1102) = v51;
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v51;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Override latency supervisionTimeout:%d LeConnectionLatencyVeryHigh", buf, 8u);
  }
LABEL_142:
  if (*(unsigned __int16 *)(a1 + 1100) < *(unsigned __int16 *)(a1 + 1098)
    && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    sub_10078E9BC();
  }
  int v91 = 0;
  uint64_t v53 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionMinIntervalDigitalID");
  int v54 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v53 + 88))(v53, buf, __p, &v91);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v54) {
      goto LABEL_153;
    }
  }
  else if (!v54)
  {
    goto LABEL_153;
  }
  unsigned __int16 v55 = v91;
  *(_WORD *)(a1 + 1104) = v91;
  int v56 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v55;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Override LeConnectionMinIntervalDigitalID:%d", buf, 8u);
  }
LABEL_153:
  int v90 = 0;
  uint64_t v57 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionMaxIntervalDigitalID");
  int v58 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v57 + 88))(v57, buf, __p, &v90);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v58) {
      goto LABEL_161;
    }
  }
  else if (!v58)
  {
    goto LABEL_161;
  }
  unsigned __int16 v59 = v90;
  *(_WORD *)(a1 + 1106) = v90;
  int v60 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v59;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Override LeConnectionMaxIntervalDigitalID:%d", buf, 8u);
  }
LABEL_161:
  int v89 = 0;
  uint64_t v61 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeMaxCEDigitalID");
  int v62 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v61 + 88))(v61, buf, __p, &v89);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v62) {
      goto LABEL_169;
    }
  }
  else if (!v62)
  {
    goto LABEL_169;
  }
  int v63 = v89;
  *(unsigned char *)(a1 + 1109) = v89;
  int v64 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v63;
    _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "Override LeMaxCEDigitalID:%d", buf, 8u);
  }
LABEL_169:
  int v88 = 0;
  uint64_t v65 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeMinCEDigitalID");
  int v66 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v65 + 88))(v65, buf, __p, &v88);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v66) {
      goto LABEL_177;
    }
  }
  else if (!v66)
  {
    goto LABEL_177;
  }
  int v67 = v88;
  *(unsigned char *)(a1 + 1108) = v88;
  __int16 v68 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v67;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Override LeMinCEDigitalID:%d", buf, 8u);
  }
LABEL_177:
  unsigned int v69 = *(unsigned __int8 *)(a1 + 1108);
  unsigned int v70 = *(unsigned __int8 *)(a1 + 1109);
  if (v69 > v70)
  {
    uint64_t v71 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v69;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v70;
      __int16 v98 = 1024;
      unsigned int v99 = v70;
      _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "fMinCELenDigitalID %d is greater than fMaxCELenDigitalID %d. Replace fMinCELenDigitalID by %d.", buf, 0x14u);
      LOBYTE(v70) = *(unsigned char *)(a1 + 1109);
    }
    *(unsigned char *)(a1 + 1108) = v70;
  }
  unsigned __int8 v87 = 0;
  uint64_t v72 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "OverrideConnectionIntervalFindMy");
  int v73 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v72 + 72))(v72, buf, __p, &v87);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v73) {
      goto LABEL_191;
    }
  }
  else if (!v73)
  {
    goto LABEL_191;
  }
  int v74 = v87;
  *(unsigned char *)(a1 + 1110) = v87;
  v75 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v76 = "enabled";
    if (!v74) {
      uint64_t v76 = "disabled";
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = v76;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "OverrideConnectionIntervalFindMy %s", buf, 0xCu);
  }
LABEL_191:
  int v86 = 0;
  uint64_t v77 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionMinIntervalFindMy");
  int v78 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v77 + 88))(v77, buf, __p, &v86);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v78) {
      goto LABEL_199;
    }
  }
  else if (!v78)
  {
    goto LABEL_199;
  }
  unsigned __int16 v79 = v86;
  *(_WORD *)(a1 + 1112) = v86;
  v80 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v79;
    _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "Override LeConnectionMinIntervalFindMy:%d", buf, 8u);
  }
LABEL_199:
  int v85 = 0;
  uint64_t v81 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LeConnectionMaxIntervalFindMy");
  int v82 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v81 + 88))(v81, buf, __p, &v85);
  if (v93 < 0) {
    operator delete(__p[0]);
  }
  if (v100 < 0)
  {
    operator delete(*(void **)buf);
    if (!v82) {
      return;
    }
  }
  else if (!v82)
  {
    return;
  }
  unsigned __int16 v83 = v85;
  *(_WORD *)(a1 + 1114) = v85;
  v84 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v83;
    _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "Override LeConnectionMaxIntervalFindMy:%d", buf, 8u);
  }
}

void sub_100675D38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v19 - 41) < 0) {
    operator delete(*(void **)(v19 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_100675E08(unsigned __int8 *a1, uint64_t a2, int a3, char a4)
{
  unint64_t v7 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  BOOL v8 = sub_100225F4C(a2);
  uint64_t v9 = sub_100019878();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  v10[2] = sub_1006A20B0;
  v10[3] = &unk_1009B3D20;
  BOOL v12 = v8;
  v10[4] = a2;
  v10[5] = v7;
  int v11 = a3;
  char v13 = a4;
  sub_100013018(v9, v10);
}

void sub_100675EEC(uint64_t a1, int a2, char a3, int a4)
{
  if (*(unsigned char *)(a1 + 55))
  {
    unint64_t v7 = (unsigned __int8 *)(a1 + 56);
    unint64_t v8 = ((unint64_t)*(unsigned __int8 *)(a1 + 57) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 58) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 59) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 60) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 61) << 8);
    uint64_t v9 = (unsigned __int8 *)(a1 + 62);
  }
  else
  {
    unint64_t v7 = (unsigned __int8 *)(a1 + 48);
    unint64_t v8 = ((unint64_t)*(unsigned __int8 *)(a1 + 49) << 40) | ((unint64_t)*(unsigned __int8 *)(a1 + 50) << 32) | ((unint64_t)*(unsigned __int8 *)(a1 + 51) << 24) | ((unint64_t)*(unsigned __int8 *)(a1 + 52) << 16) | ((unint64_t)*(unsigned __int8 *)(a1 + 53) << 8);
    uint64_t v9 = (unsigned __int8 *)(a1 + 54);
  }
  unint64_t v10 = v8 | *v9 | ((unint64_t)*v7 << 48);
  char v11 = *(unsigned char *)(a1 + 70);
  unsigned int v12 = *(unsigned __int8 *)(a1 + 166);
  char v13 = *(unsigned char *)(a1 + 280);
  __int16 v14 = sub_100197960((unsigned __int16 *)a1);
  if (sub_100197770(a1) && *(unsigned char *)(a1 + 220))
  {
    uint64_t v15 = sub_100019878();
    v30[0] = _NSConcreteStackBlock;
    v30[1] = 3221225472;
    v30[2] = sub_1006A2264;
    v30[3] = &unk_100998260;
    v30[4] = v10;
    v30[5] = a1;
    sub_100013018(v15, v30);
  }
  BOOL v16 = v12 == 1;
  BOOL v17 = v12 > 1;
  char v18 = v16;
  char v19 = v13 | a3;
  if (a2 == 708 && v17) {
    a2 = 4834;
  }
  uint64_t v20 = sub_100019878();
  v22[0] = _NSConcreteStackBlock;
  v22[1] = 3221225472;
  v22[2] = sub_1006A2350;
  v22[3] = &unk_1009B5DC0;
  v22[4] = a1;
  v22[5] = v10;
  BOOL v26 = v17;
  __int16 v25 = v14;
  char v27 = v11;
  char v28 = v19;
  char v29 = v18;
  int v23 = a2;
  int v24 = a4;
  sub_100013018(v20, v22);
}

void sub_1006760CC(int a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE Connection Cancelled with status %d", buf, 8u);
  }
  uint64_t v3 = sub_100019878();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1006A2200;
  v4[3] = &unk_100998300;
  int v5 = a1;
  sub_100013018(v3, v4);
}

void sub_1006761C4(uint64_t a1, int a2, int a3, int a4, int a5)
{
  unint64_t v10 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    uint64_t v17 = a1;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    int v23 = a4;
    __int16 v24 = 1024;
    int v25 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LE Connection Parameters Updated for handle %p, interval:%d peripheral latency:%d supervisionTO:%d maxCELen:%d", buf, 0x24u);
  }
  uint64_t v11 = sub_100019878();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1006A2ADC;
  v12[3] = &unk_1009AD2E0;
  v12[4] = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  __int16 v15 = a4;
  sub_100013018(v11, v12);
}

void sub_10067630C(uint64_t a1, int a2, int a3, int a4, int a5)
{
  unint64_t v10 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    uint64_t v18 = a1;
    __int16 v19 = 1024;
    int v20 = a2;
    __int16 v21 = 1024;
    int v22 = a3;
    __int16 v23 = 1024;
    int v24 = a4;
    __int16 v25 = 1024;
    int v26 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Connection Subrating Update completed for handle %p. Subrate factor: %d, Peripheral latency: %d, Continuation Number: %d, Supervision TO: %d", buf, 0x24u);
  }
  uint64_t v11 = sub_100019878();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  v12[2] = sub_1006A2B4C;
  v12[3] = &unk_100998260;
  v12[4] = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  __int16 v15 = a4;
  __int16 v16 = a5;
  sub_100013018(v11, v12);
}

void sub_100676458(uint64_t a1, int a2, int a3)
{
  if (*(_WORD *)(a1 + 22) == 26119)
  {
    uint64_t v6 = sub_100035F54();
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 344))(v6);
  }
  else
  {
    int v7 = 0;
  }
  int v8 = *(_DWORD *)(a1 + 328);
  uint64_t v9 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134219008;
    uint64_t v17 = a1;
    __int16 v18 = 1024;
    int v19 = a2;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 1024;
    int v25 = v7;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LE Link Ready for handle %p with status %d fastLEConnectionEnabled:%d linkReadyDurationMS:%d requiresCTOFix:%d", buf, 0x24u);
  }
  uint64_t v10 = sub_100019878();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1006A2BC0;
  v11[3] = &unk_1009988A0;
  v11[4] = a1;
  char v14 = v7;
  char v15 = a3;
  int v12 = a2;
  int v13 = v8;
  sub_100013018(v10, v11);
}

uint64_t sub_1006765E8(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  int v5 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = sub_1006AD3F0();
    *(_DWORD *)uint64_t v10 = 138543618;
    *(void *)&v10[4] = v6;
    *(_WORD *)&v10[12] = 1024;
    *(_DWORD *)&v10[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Address \"%{public}@\" Added to Filter Accept List with status:%d", v10, 0x12u);
  }
  if (a2)
  {
    if (a2 != 758)
    {
      int v8 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078EB98(v3, a2, v8);
      }
      uint64_t v9 = sub_100017768();
      sub_1005C99C8(v9, 1);
    }
    *(void *)uint64_t v10 = 0;
    *(void *)&v10[8] = 0;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    sub_100014B58((uint64_t)off_1009F7ED8, v3, 0, 0, 0, 0, v10);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
    }
    sub_100680C1C((uint64_t)off_1009F7EB8, v10);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
    }
    sub_10067C934((uint64_t)off_1009F7EB8, 4u);
  }
  *(void *)uint64_t v10 = 0;
  *(void *)&v10[8] = 0;
  sub_10003AED0((uint64_t)v10, (uint64_t)&unk_100A1A1A0);
  byte_100A1A220 = 0;
  sub_100026264(&stru_100A1A140);
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10067682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100676848(unsigned __int8 *a1, uint64_t a2)
{
  unint64_t v3 = ((unint64_t)a1[1] << 40) | ((unint64_t)a1[2] << 32) | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 16) | ((unint64_t)a1[5] << 8) | a1[6] | ((unint64_t)*a1 << 48);
  int v5 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = sub_1006AD3F0();
    *(_DWORD *)uint64_t v10 = 138543618;
    *(void *)&v10[4] = v6;
    *(_WORD *)&v10[12] = 1024;
    *(_DWORD *)&v10[14] = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Address \"%{public}@\" Removed from Filter Accept List with status:%d", v10, 0x12u);
  }
  if (a2)
  {
    int v7 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078EC34(v3, a2, v7);
    }
    if (a2 != 718)
    {
      if (a2 != 758)
      {
        uint64_t v9 = sub_100017768();
        sub_1005C99C8(v9, 1);
      }
      *(void *)uint64_t v10 = 0;
      *(void *)&v10[8] = 0;
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      sub_100014B58((uint64_t)off_1009F7ED8, v3, 0, 0, 0, 0, v10);
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
      }
      sub_100680D78((uint64_t)off_1009F7EB8, v10);
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
      }
      sub_10067C934((uint64_t)off_1009F7EB8, 4u);
    }
  }
  *(void *)uint64_t v10 = 0;
  *(void *)&v10[8] = 0;
  sub_10003AED0((uint64_t)v10, (uint64_t)&unk_100A1A1E0);
  byte_100A1A221 = 0;
  sub_100026264(&stru_100A1A170);
  return sub_10003AFB4((uint64_t)v10);
}

void sub_100676A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100676AB0(int a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *a3;
    *(_DWORD *)buf = 134218240;
    uint64_t v12 = a2;
    __int16 v13 = 1024;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "LE Read Remote FAE Table  handle %p, FAETable[0]:%0X ", buf, 0x12u);
  }
  uint64_t v8 = sub_100019878();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_10069FB44;
  v9[3] = &unk_100998280;
  int v10 = a1;
  v9[4] = a2;
  v9[5] = a3;
  sub_100013018(v8, v9);
}

void sub_100676BCC(int a1, uint64_t a2)
{
  int v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134217984;
    uint64_t v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LE Security Enable handle %p, FAETable[0]: ", buf, 0xCu);
  }
  uint64_t v5 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_10069FBAC;
  v6[3] = &unk_100997570;
  int v7 = a1;
  v6[4] = a2;
  sub_100013018(v5, v6);
}

void sub_100676CD4(int a1, uint64_t a2, char a3, int a4, char a5, char a6, char a7, char a8, char a9, char a10, char a11)
{
  uint64_t v17 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v33 = a2;
    __int16 v34 = 1024;
    int v35 = a4;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "LE Procedure Enable  handle %p, enable:%0X ", buf, 0x12u);
  }
  uint64_t v18 = sub_100019878();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  v21[2] = sub_10069FC14;
  v21[3] = &unk_1009A28D8;
  int v22 = a1;
  v21[4] = a2;
  char v23 = a3;
  char v24 = a4;
  char v25 = a5;
  char v26 = a6;
  char v27 = a7;
  char v28 = a8;
  char v29 = a9;
  char v30 = a10;
  char v31 = a11;
  sub_100013018(v18, v21);
}

void sub_100676E4C(uint64_t a1, int a2, char a3, char a4, char a5, char a6, char a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  int v19 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v33 = a1;
    __int16 v34 = 1024;
    int v35 = a2;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "LE SubEvent Result handle %p, enable:%0X ", buf, 0x12u);
  }
  uint64_t v20 = sub_100019878();
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  v23[2] = sub_10069FC94;
  v23[3] = &unk_1009BDDE8;
  char v24 = a2;
  char v25 = a3;
  char v26 = a4;
  char v27 = a5;
  char v28 = a6;
  char v29 = a7;
  char v30 = a8;
  char v31 = a9;
  v23[4] = a1;
  v23[5] = a10;
  v23[6] = a11;
  v23[7] = a12;
  v23[8] = a13;
  sub_100013018(v20, v23);
}

void sub_100676FD8(uint64_t a1, int a2, char a3, char a4, char a5, char a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v17 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 134218240;
    uint64_t v27 = a1;
    __int16 v28 = 1024;
    int v29 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "LE SubEvent Result Continue handle %p, enable:%0X ", buf, 0x12u);
  }
  uint64_t v18 = sub_100019878();
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 3221225472;
  v20[2] = sub_10069FD24;
  v20[3] = &unk_1009BDE08;
  char v21 = a2;
  char v22 = a3;
  char v23 = a4;
  char v24 = a5;
  char v25 = a6;
  v20[4] = a1;
  v20[5] = a7;
  v20[6] = a8;
  v20[7] = a9;
  v20[8] = a10;
  sub_100013018(v18, v20);
}

void sub_10067713C(uint64_t a1, uint64_t a2, unsigned __int8 a3, int a4, unsigned __int8 a5, int a6)
{
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v12 = *(const unsigned __int8 **)(a1 + 384);
  if (v12 != (const unsigned __int8 *)(a1 + 392))
  {
    while (*((void *)v12 + 6) != a2)
    {
      __int16 v13 = (unsigned __int8 *)*((void *)v12 + 1);
      if (v13)
      {
        do
        {
          int v14 = (const unsigned __int8 **)v13;
          __int16 v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          int v14 = (const unsigned __int8 **)*((void *)v12 + 2);
          BOOL v15 = *v14 == v12;
          uint64_t v12 = (const unsigned __int8 *)v14;
        }
        while (!v15);
      }
      uint64_t v12 = (const unsigned __int8 *)v14;
      if (v14 == (const unsigned __int8 **)(a1 + 392)) {
        goto LABEL_11;
      }
    }
    uuid_copy(uu, v12 + 32);
  }
LABEL_11:
  if (!uuid_is_null(uu))
  {
    *(void *)&long long v24 = uu;
    sub_1006A982C((uint64_t **)(a1 + 432), uu, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v24)[6] = a2;
    uint64_t v28 = 0;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    __int16 v16 = sub_100031234(uu);
    sub_1006773FC(a1, v16, (uint64_t)&v24);

    if (!(void)v24)
    {
LABEL_24:
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3321888768;
      v29[2] = sub_1006776B0;
      v29[3] = &unk_1009BD8E8;
      uuid_copy(v32, uu);
      v32[16] = a3;
      v32[17] = a5;
      int v30 = a4;
      int v31 = a6;
      sub_10067762C((os_unfair_lock_s *)a1, v29);

      return;
    }
    if ((a4 & 0x40) != 0)
    {
      uint64_t v17 = 5;
    }
    else
    {
      if ((a4 & 0x80) != 0)
      {
        *((void *)&v26 + 1) = 0;
LABEL_23:
        uint64_t v18 = sub_100031234(uu);
        v19[0] = (id)v24;
        v19[1] = *((id *)&v24 + 1);
        long long v20 = v25;
        long long v21 = v26;
        long long v22 = v27;
        int v23 = v28;
        sub_100677528(a1, v18, (uint64_t)v19);

        goto LABEL_24;
      }
      if ((a4 & 0x100) != 0) {
        uint64_t v17 = 1;
      }
      else {
        uint64_t v17 = 6;
      }
    }
    *((void *)&v26 + 1) = v17;
    goto LABEL_23;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
    sub_10078ECD0();
  }
}

void sub_1006773C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20)
{
  _Unwind_Resume(a1);
}

void sub_1006773FC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  *(_OWORD *)a3 = 0u;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)(a3 + 48) = 0u;
  *(void *)(a3 + 64) = 0;
  sub_1000305AC(uu2, v5);
  if (a1 + 1552 != sub_1000308C0(a1 + 1544, uu2))
  {
    sub_1000305AC(uu2, v5);
    int v10 = uu2;
    uint64_t v6 = sub_1006AC438((uint64_t **)(a1 + 1544), uu2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v10);
    *(void *)a3 = (id)v6[6];
    *(void *)(a3 + 8) = (id)v6[7];
    long long v8 = *((_OWORD *)v6 + 5);
    long long v7 = *((_OWORD *)v6 + 6);
    long long v9 = *((_OWORD *)v6 + 4);
    *(_DWORD *)(a3 + 64) = *((_DWORD *)v6 + 28);
    *(_OWORD *)(a3 + 32) = v8;
    *(_OWORD *)(a3 + 48) = v7;
    *(_OWORD *)(a3 + 16) = v9;
  }
}

void sub_100677504(_Unwind_Exception *a1)
{
  sub_10067774C(v2);

  _Unwind_Resume(a1);
}

void sub_100677528(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  sub_1000305AC(uu1, v5);
  int v10 = uu1;
  uint64_t v6 = sub_1006AC438((uint64_t **)(a1 + 1544), uu1, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v10);
  objc_storeStrong((id *)v6 + 6, *(id *)a3);
  objc_storeStrong((id *)v6 + 7, *(id *)(a3 + 8));
  long long v7 = *(_OWORD *)(a3 + 16);
  long long v8 = *(_OWORD *)(a3 + 32);
  long long v9 = *(_OWORD *)(a3 + 48);
  *((_DWORD *)v6 + 28) = *(_DWORD *)(a3 + 64);
  *((_OWORD *)v6 + 5) = v8;
  *((_OWORD *)v6 + 6) = v9;
  *((_OWORD *)v6 + 4) = v7;
}

void sub_10067760C(_Unwind_Exception *a1)
{
  sub_10067774C(v2);

  _Unwind_Resume(a1);
}

void sub_10067762C(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, (uint64_t)&a1[30]);
  sub_1006996D0(a1 + 48, v3);
  sub_1006996D0(a1 + 56, v3);
  sub_10003AFB4((uint64_t)v4);
}

void sub_100677690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006776B0(uint64_t a1, uint64_t a2)
{
  sub_100031234((const unsigned __int8 *)(a1 + 40));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
}

void sub_100677738(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id *sub_10067774C(id *a1)
{
  return a1;
}

char *sub_100677780(uint64_t a1)
{
  int v91 = 1800;
  int v92 = 3;
  int v89 = 7200;
  int v90 = 1;
  int v87 = 1800;
  int v88 = 3;
  int v85 = 7200;
  int v86 = 1;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionDCKDisconnectionDisabledToStageOneValue");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v2 + 88))(v2, buf, __p, &v92);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  int v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v92;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LeConnectionDCKDisconnectionDisabledToStageOneValue=%d (override)", buf, 8u);
  }
LABEL_9:
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionDCKTimeDurationFromDisabledToStageOneValue");
  int v6 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v5 + 88))(v5, buf, __p, &v91);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6) {
      goto LABEL_17;
    }
  }
  else if (!v6)
  {
    goto LABEL_17;
  }
  long long v7 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v91;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LeConnectionDCKTimeDurationFromDisabledToStageOneValue=%d (override)", buf, 8u);
  }
LABEL_17:
  uint64_t v8 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionDCKDisconnectionStageOneToDisabledValue");
  int v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v8 + 88))(v8, buf, __p, &v90);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v9) {
      goto LABEL_25;
    }
  }
  else if (!v9)
  {
    goto LABEL_25;
  }
  int v10 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v90;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LeConnectionDCKDisconnectionStageOneToDisabledValue=%d (override)", buf, 8u);
  }
LABEL_25:
  uint64_t v11 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionDCKTimeDurationFromStageOneToDisabledValue");
  int v12 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v11 + 88))(v11, buf, __p, &v89);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v12) {
      goto LABEL_33;
    }
  }
  else if (!v12)
  {
    goto LABEL_33;
  }
  __int16 v13 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v89;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "LeConnectionDCKTimeDurationFromStageOneToDisabledValue=%d (override)", buf, 8u);
  }
LABEL_33:
  uint64_t v14 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionHomeDisconnectionDisabledToStageOneValue");
  int v15 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v14 + 88))(v14, buf, __p, &v88);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v15) {
      goto LABEL_41;
    }
  }
  else if (!v15)
  {
    goto LABEL_41;
  }
  __int16 v16 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v88;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LeConnectionHomeDisconnectionDisabledToStageOneValue=%d (override)", buf, 8u);
  }
LABEL_41:
  uint64_t v17 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionHomeTimeDurationFromDisabledToStageOneValue");
  int v18 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v17 + 88))(v17, buf, __p, &v87);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v18) {
      goto LABEL_49;
    }
  }
  else if (!v18)
  {
    goto LABEL_49;
  }
  int v19 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v87;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "LeConnectionHomeTimeDurationFromDisabledToStageOneValue=%d (override)", buf, 8u);
  }
LABEL_49:
  uint64_t v20 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionHomeDisconnectionStageOneToDisabledValue");
  int v21 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v20 + 88))(v20, buf, __p, &v86);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v21) {
      goto LABEL_57;
    }
  }
  else if (!v21)
  {
    goto LABEL_57;
  }
  long long v22 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v86;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "LeConnectionHomeDisconnectionStageOneToDisabledValue=%d (override)", buf, 8u);
  }
LABEL_57:
  uint64_t v23 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionHomeTimeDurationFromStageOneToDisabledValue");
  int v24 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v23 + 88))(v23, buf, __p, &v85);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v24) {
      goto LABEL_65;
    }
  }
  else if (!v24)
  {
    goto LABEL_65;
  }
  long long v25 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v85;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "LeConnectionHomeTimeDurationFromStageOneToDisabledValue=%d (override)", buf, 8u);
  }
LABEL_65:
  __int16 v26 = v92;
  LODWORD(__p[0]) = 21;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1224), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v26;
  int v27 = v91;
  LODWORD(__p[0]) = 21;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1248), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = v27;
  __int16 v28 = v90;
  LODWORD(__p[0]) = 21;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1272), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v28;
  int v29 = v89;
  LODWORD(__p[0]) = 21;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1296), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = v29;
  __int16 v30 = v88;
  LODWORD(__p[0]) = 655360;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1224), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v30;
  int v31 = v87;
  LODWORD(__p[0]) = 655360;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1248), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = v31;
  LOWORD(v31) = v86;
  LODWORD(__p[0]) = 655360;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1272), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v31;
  int v32 = v85;
  LODWORD(__p[0]) = 655360;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1296), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = v32;
  uint64_t v33 = (uint64_t **)(a1 + 1320);
  __p[0] = (void *)3;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  LOBYTE(v29) = *(unsigned char *)(a1 + 1344);
  __p[0] = (void *)(&_mh_execute_header + 3);
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = v29;
  __p[0] = (void *)0x200000003;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  int v34 = *(char *)(a1 + 1345);
  int v81 = 24;
  int v82 = v34;
  int v79 = 5;
  int v80 = 1800;
  int v78 = 3600;
  uint64_t v35 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionMagnetRSSIThresholdStageOne");
  int v36 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v35 + 88))(v35, buf, __p, &v82);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v36) {
      goto LABEL_73;
    }
  }
  else if (!v36)
  {
    goto LABEL_73;
  }
  uint64_t v37 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v82;
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetRSSIThresholdStageOne =%d (override)", buf, 8u);
  }
LABEL_73:
  uint64_t v38 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionMagnetDisabledToStageOneValue");
  int v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v38 + 88))(v38, buf, __p, &v81);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39) {
      goto LABEL_81;
    }
  }
  else if (!v39)
  {
    goto LABEL_81;
  }
  uint64_t v40 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v81;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetDisabledToStageOneValue =%d (override)", buf, 8u);
  }
LABEL_81:
  uint64_t v41 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionMagnetTimeDurationFromDisabledToStageOneValue");
  int v42 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v41 + 88))(v41, buf, __p, &v80);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v42) {
      goto LABEL_89;
    }
  }
  else if (!v42)
  {
    goto LABEL_89;
  }
  int v43 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v80;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetTimeDurationFromDisabledToStageOneValue =%d (override)", buf, 8u);
  }
LABEL_89:
  uint64_t v44 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionMagnetStageOneToDisabledValue");
  int v45 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v44 + 88))(v44, buf, __p, &v79);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v45) {
      goto LABEL_97;
    }
  }
  else if (!v45)
  {
    goto LABEL_97;
  }
  int v46 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v79;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetStageOneToDisabledValue =%d (override)", buf, 8u);
  }
LABEL_97:
  uint64_t v47 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionMagnetTimeDurationFromStageOneToDisabledValue");
  int v48 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v47 + 88))(v47, buf, __p, &v78);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v48) {
      goto LABEL_105;
    }
  }
  else if (!v48)
  {
    goto LABEL_105;
  }
  uint64_t v49 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v78;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "LeConnectionMagnetTimeDurationFromStageOneToDisabledValue =%d (override)", buf, 8u);
  }
LABEL_105:
  __p[0] = (void *)11;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  char v50 = v82;
  __p[0] = &dword_100000008 + 3;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = v50;
  __p[0] = (void *)0x20000000BLL;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  __int16 v51 = v81;
  LODWORD(__p[0]) = 11;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1224), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v51;
  int v52 = v80;
  LODWORD(__p[0]) = 11;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1248), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = v52;
  LOWORD(v52) = v79;
  LODWORD(__p[0]) = 11;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1272), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v52;
  int v53 = v78;
  LODWORD(__p[0]) = 11;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1296), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = v53;
  LODWORD(__p[0]) = 16;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1224), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = 12;
  LODWORD(__p[0]) = 16;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1248), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = 1800;
  LODWORD(__p[0]) = 16;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1272), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = 2;
  LODWORD(__p[0]) = 16;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1296), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = 3600;
  __p[0] = (void *)16;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  char v54 = *(unsigned char *)(a1 + 1346);
  __p[0] = &dword_100000010;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = v54;
  __p[0] = (void *)0x200000010;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  __p[0] = (void *)21;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  char v55 = *(unsigned char *)(a1 + 1347);
  __p[0] = &dword_100000014 + 1;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = v55;
  __p[0] = (void *)0x200000015;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  __p[0] = (void *)655360;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  char v56 = *(unsigned char *)(a1 + 1348);
  __p[0] = &loc_10009FFFC + 4;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = v56;
  __p[0] = (void *)0x2000A0000;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  int v76 = 1800;
  int v77 = 12;
  int v74 = 3600;
  int v75 = 2;
  uint64_t v57 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionThirdPartyAppDisabledToStageOneValue");
  int v58 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v57 + 88))(v57, buf, __p, &v77);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v58) {
      goto LABEL_113;
    }
  }
  else if (!v58)
  {
    goto LABEL_113;
  }
  unsigned __int16 v59 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v77;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "LeConnectionThirdPartyAppDisabledToStageOneValue =%d (override)", buf, 8u);
  }
LABEL_113:
  uint64_t v60 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionThirdPartyAppTimeDurationFromDisabledToStageOneValue");
  int v61 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v60 + 88))(v60, buf, __p, &v76);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v61) {
      goto LABEL_121;
    }
  }
  else if (!v61)
  {
    goto LABEL_121;
  }
  int v62 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v76;
    _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "LeConnectionThirdPartyAppTimeDurationFromDisabledToStageOneValue =%d (override)", buf, 8u);
  }
LABEL_121:
  uint64_t v63 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionThirdPartyAppStageOneToDisabledValue");
  int v64 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v63 + 88))(v63, buf, __p, &v75);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v64) {
      goto LABEL_129;
    }
  }
  else if (!v64)
  {
    goto LABEL_129;
  }
  uint64_t v65 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v75;
    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "LeConnectionThirdPartyAppStageOneToDisabledValue =%d (override)", buf, 8u);
  }
LABEL_129:
  uint64_t v66 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionThirdPartyAppTimeDurationFromStageOneToDisabledValue");
  int v67 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v66 + 88))(v66, buf, __p, &v74);
  if (v84 < 0) {
    operator delete(__p[0]);
  }
  if (v94 < 0)
  {
    operator delete(*(void **)buf);
    if (!v67) {
      goto LABEL_137;
    }
  }
  else if (!v67)
  {
    goto LABEL_137;
  }
  __int16 v68 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v74;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "LeConnectionThirdPartyAppTimeDurationFromStageOneToDisabledValue =%d (override)", buf, 8u);
  }
LABEL_137:
  __int16 v69 = v77;
  LODWORD(__p[0]) = 23;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1224), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v69;
  int v70 = v76;
  LODWORD(__p[0]) = 23;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1248), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = v70;
  LOWORD(v70) = v75;
  LODWORD(__p[0]) = 23;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1272), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v70;
  int v71 = v74;
  LODWORD(__p[0]) = 23;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1296), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = v71;
  __p[0] = (void *)23;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  LOBYTE(v71) = *(unsigned char *)(a1 + 1349);
  __p[0] = &dword_100000014 + 3;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = v71;
  __p[0] = (void *)0x200000017;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  LODWORD(__p[0]) = 267;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1224), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = 12;
  LODWORD(__p[0]) = 267;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1248), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = 1800;
  LODWORD(__p[0]) = 267;
  *(void *)buf = __p;
  *((_WORD *)sub_1006A994C((uint64_t **)(a1 + 1272), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = 2;
  LODWORD(__p[0]) = 267;
  *(void *)buf = __p;
  *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1296), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (unsigned int **)buf)
  + 8) = 3600;
  __p[0] = (void *)267;
  *(void *)buf = __p;
  sub_1006A9A10((uint64_t **)(a1 + 1320), (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = 0;
  char v72 = *(unsigned char *)(a1 + 1350);
  __p[0] = &stru_100000100 + 11;
  *(void *)buf = __p;
  sub_1006A9A10(v33, (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[36] = v72;
  __p[0] = (void *)0x20000010BLL;
  *(void *)buf = __p;
  result = sub_1006A9A10(v33, (unsigned int *)__p, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
  result[36] = 0;
  return result;
}

void sub_100678FE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006790A4(uint64_t a1, void *a2)
{
  id v3 = a2;
  char v4 = *(unsigned char *)(a1 + 1117);
  if (v4) {
    goto LABEL_34;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v5 = sub_1006BF2D4((uint64_t)off_1009F7ED8, v3);
  if (v5)
  {
    if (v5 == -127) {
      char v4 = 0;
    }
    else {
      char v4 = v5;
    }
    goto LABEL_34;
  }
  if (!sub_100679324(a1, v3))
  {
    char v4 = 0;
    goto LABEL_34;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  unsigned int v6 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v3);
  v17[0] = 0;
  v17[1] = 0;
  uint64_t v18 = 0;
  id v7 = [v3 UUIDString];
  sub_10004191C(v17, (char *)[v7 UTF8String]);

  if (SHIBYTE(v18) < 0)
  {
    sub_10003B098(__p, v17[0], (unint64_t)v17[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v17;
    uint64_t v16 = v18;
  }
  uint64_t v8 = sub_10003156C(a1 + 1184, (const void **)__p);
  if (a1 + 1192 == v8) {
    unsigned int v9 = 2;
  }
  else {
    unsigned int v9 = *(_DWORD *)(v8 + 56);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  v14[0] = v6;
  v14[1] = v9;
  uint64_t v10 = sub_1006A9B88(a1 + 1320, v14);
  if (a1 + 1328 == v10)
  {
    char v4 = 0;
    goto LABEL_32;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v11 = sub_1006BBCB8((uint64_t)off_1009F7ED8, v3);
  char v4 = *(unsigned char *)(v10 + 36);
  if (v11 == 1) {
    goto LABEL_32;
  }
  if (v9 != 1) {
    goto LABEL_30;
  }
  if (v6 == 16)
  {
    char v12 = 8;
    goto LABEL_31;
  }
  if (v6 == 267 || v6 == 23) {
    char v12 = 4;
  }
  else {
LABEL_30:
  }
    char v12 = 0;
LABEL_31:
  v4 += v12;
LABEL_32:
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[0]);
  }
LABEL_34:

  return v4;
}

void sub_1006792C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100679324(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!*(unsigned char *)(a1 + 1118))
  {
    uint64_t v4 = 0;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 1117)) {
    goto LABEL_6;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  if (sub_1006BF2D4((uint64_t)off_1009F7ED8, v3)) {
    goto LABEL_6;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v6 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v3);
  uint64_t v4 = 0;
  if (v6 <= 22)
  {
    if (v6 != 11 && v6 != 16 && v6 != 21) {
      goto LABEL_8;
    }
LABEL_6:
    uint64_t v4 = 1;
    goto LABEL_8;
  }
  if (v6 == 23 || v6 == 267 || v6 == 655360) {
    goto LABEL_6;
  }
LABEL_8:

  return v4;
}

void sub_100679428(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10067943C(uint64_t a1, int a2)
{
  uint64_t v2 = *(const unsigned __int8 **)(a1 + 336);
  id v3 = (const unsigned __int8 **)(a1 + 344);
  if (v2 == (const unsigned __int8 *)(a1 + 344))
  {
    char v5 = 0;
  }
  else
  {
    char v5 = 0;
    while (1)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      int v6 = off_1009F7ED8;
      id v7 = sub_100031234(v2 + 25);
      int v8 = sub_1006BDC1C((uint64_t)v6, v7);

      if (v8 == a2) {
        break;
      }
      unsigned int v9 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = (const unsigned __int8 **)v9;
          unsigned int v9 = *(unsigned __int8 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v11 = *v10 == v2;
          uint64_t v2 = (const unsigned __int8 *)v10;
        }
        while (!v11);
      }
      v5 |= v8 == a2;
      uint64_t v2 = (const unsigned __int8 *)v10;
      if (v10 == v3) {
        return v5 & 1;
      }
    }
    char v5 = 1;
  }
  return v5 & 1;
}

void sub_100679548(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100679558(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v3 = sub_1006BEF0C((uint64_t)off_1009F7ED8, v2);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  unsigned int v4 = sub_1006BEDBC((uint64_t)off_1009F7ED8, v2);
  if ((v4 & 4) == 0)
  {
    uint64_t v5 = 0;
    goto LABEL_16;
  }
  if (v3 != 1)
  {
    if (v3 == 2)
    {
      int v6 = 8;
      goto LABEL_13;
    }
    id v7 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "PHY options are not specified, set to default S2 only", v10, 2u);
    }
  }
  int v6 = 16;
LABEL_13:
  uint64_t v8 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 688))(v8)) {
    uint64_t v5 = v6 | v4 | 2;
  }
  else {
    uint64_t v5 = v6 | v4;
  }
LABEL_16:

  return v5;
}

void sub_1006796B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006796C4(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BE138);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1);
  uint64_t v2 = *(void *)sub_100035F54();
  if (((*(uint64_t (**)(void))(v2 + 408))() & 1) == 0)
  {
    uint64_t v3 = sub_10003FFD4();
    sub_100471048(v3 + 728, a1 + 8);
  }
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BE158);
  }
  sub_1004F9E94((uint64_t)off_1009F8150, a1 + 24);
  if (qword_1009F85E8 != -1) {
    dispatch_once(&qword_1009F85E8, &stru_1009BE178);
  }
  sub_1003C2D20(qword_1009F85E0, a1 + 96);
  int v36 = 0;
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "CONNECTION");
  sub_10004191C(__p, "LeConnectionManagerConnectionScansDefaultDuration");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v4 + 88))(v4, buf, __p, &v36);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v39) < 0)
  {
    operator delete(*(void **)buf);
    if (!v5) {
      goto LABEL_17;
    }
  }
  else if (!v5)
  {
    goto LABEL_17;
  }
  int v6 = v36;
  *(_DWORD *)(a1 + 568) = v36;
  id v7 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LeConnectionManagerConnectionScansDefault duration=%d", buf, 8u);
  }
LABEL_17:
  sub_1000E65DC((uint64_t)sub_100679E58);
  *(void *)buf = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v8 = sub_100017768();
  sub_10004191C(__p, "BTUCMCustomConnectionSegments");
  if (!(*(unsigned int (**)(uint64_t, void **, uint8_t *))(*(void *)v8 + 120))(v8, __p, buf)
    || v38 == *(const char **)buf)
  {
    if (v35 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_24;
  }
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v38[-*(void *)buf] >> 3);
  if ((v35 & 0x80000000) == 0)
  {
    if ((v9 & 1) == 0) {
      goto LABEL_49;
    }
LABEL_24:
    *(_WORD *)(a1 + 112) = 5;
    uint64_t v10 = malloc_type_malloc(0x28uLL, 0x100004000313F17uLL);
    *(void *)(a1 + 104) = v10;
    _OWORD *v10 = xmmword_1007C0370;
    v10[1] = xmmword_1007C0370;
    *((void *)v10 + 4) = 500;
    goto LABEL_25;
  }
  operator delete(__p[0]);
  if (v9) {
    goto LABEL_24;
  }
LABEL_49:
  long long v22 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Overriding connection schedule segments with user defined", (uint8_t *)__p, 2u);
  }
  uint64_t v23 = malloc_type_malloc(0x5555555555555558 * ((unint64_t)&v38[-*(void *)buf] >> 3), 0x100004000313F17uLL);
  *(void *)(a1 + 104) = v23;
  int v24 = *(const char **)buf;
  long long v25 = v38;
  if (*(const char **)buf == v38)
  {
    unsigned __int16 v26 = 0;
  }
  else
  {
    unsigned __int16 v26 = 0;
    do
    {
      unsigned __int16 v27 = v26;
      int v28 = v24[23];
      int v29 = v24;
      if (v26)
      {
        if (v28 < 0) {
          int v29 = *(const char **)v24;
        }
        v23[2 * (v26 >> 1) + 1] = atoi(v29);
      }
      else
      {
        if (v28 < 0) {
          int v29 = *(const char **)v24;
        }
        v23[2 * (v26 >> 1)] = atoi(v29);
      }
      unsigned __int16 v26 = v27 + 1;
      v24 += 24;
    }
    while (v24 != v25);
  }
  *(_WORD *)(a1 + 112) = v26 >> 1;
LABEL_25:
  sub_100677780(a1);
  char v33 = 0;
  uint64_t v11 = sub_100017768();
  sub_10004191C(__p, "Sentinel");
  sub_10004191C(v31, "IsFindMyWatchCoexHandled");
  int v12 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(void *)v11 + 72))(v11, __p, v31, &v33);
  if (v33) {
    int v13 = v12;
  }
  else {
    int v13 = 0;
  }
  if (v32 < 0) {
    operator delete(v31[0]);
  }
  if (v35 < 0)
  {
    operator delete(__p[0]);
    if (!v13) {
      goto LABEL_36;
    }
  }
  else if (!v13)
  {
    goto LABEL_36;
  }
  uint64_t v14 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Overriding to handle Coex on watchOS for FindMy.", (uint8_t *)__p, 2u);
  }
LABEL_36:
  uint64_t v15 = sub_100035F54();
  *(unsigned char *)(a1 + 1376) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 840))(v15);
  uint64_t v16 = sub_100035F54();
  *(unsigned char *)(a1 + 1377) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 880))(v16);
  uint64_t v17 = sub_100035F54();
  *(unsigned char *)(a1 + 1378) = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 928))(v17);
  if (*(unsigned char *)(a1 + 1377))
  {
    unsigned int v30 = *(unsigned __int16 *)(a1 + 1382);
    uint64_t v18 = sub_100017768();
    sub_10004191C(__p, "LE");
    sub_10004191C(v31, "LEInstantFactorMacAU");
    int v19 = (*(uint64_t (**)(uint64_t, void **, void **, unsigned int *))(*(void *)v18 + 88))(v18, __p, v31, &v30);
    if (v32 < 0) {
      operator delete(v31[0]);
    }
    if (v35 < 0)
    {
      operator delete(__p[0]);
      if (!v19) {
        goto LABEL_47;
      }
    }
    else if (!v19)
    {
      goto LABEL_47;
    }
    if (HIWORD(v30))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078ED3C();
      }
    }
    else
    {
      *(_WORD *)(a1 + 1382) = v30;
    }
  }
LABEL_47:
  uint64_t v20 = sub_100035F54();
  *(unsigned char *)(a1 + 1379) = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 832))(v20);
  uint64_t v21 = sub_100050530();
  (*(void (**)(uint64_t, void))(*(void *)v21 + 608))(v21, *(unsigned __int8 *)(a1 + 1379));
  __p[0] = buf;
  sub_100051568((void ***)__p);
}

void sub_100679DB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void **a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  a18 = &a25;
  sub_100051568(&a18);
  _Unwind_Resume(a1);
}

void sub_100679E58(uint64_t a1, char a2, int a3, char a4, int a5)
{
  uint64_t v10 = sub_100019878();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  v11[2] = sub_1006A958C;
  v11[3] = &unk_1009988A0;
  v11[4] = a1;
  char v14 = a2;
  char v15 = a4;
  int v12 = a3;
  int v13 = a5;
  sub_100013018(v10, v11);
}

unsigned char *sub_100679F00(uint64_t a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack Will Start", buf, 2u);
  }
  char v18 = 0;
  sub_10001B8E0(&v18);
  if (sub_10022A2F0())
  {
    uint64_t v3 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8))(v3))
    {
      unsigned int v17 = 0;
      uint64_t v4 = sub_100017768();
      sub_10004191C(buf, "CONNECTION");
      sub_10004191C(__p, "ForceConnectionDelay");
      int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v4 + 88))(v4, buf, __p, &v17);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
      int v6 = qword_100A19EF8;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        if (v7)
        {
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v17;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ForceConnectionDelay=%d", buf, 8u);
        }
        sub_10022A26C(v17);
      }
      else if (v7)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not find ForceConnectionDelay", buf, 2u);
      }
    }
    sub_100228C78();
    if (sub_1002265A0(8))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078F030();
      }
    }
    else if (sub_1002265A0(4))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078EFC8();
      }
    }
    else if (sub_100224014((uint64_t)off_1009BD880))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078EF60();
      }
    }
    else if (sub_1002240E0((uint64_t)off_1009BD8C0))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078EEF8();
      }
    }
    else if (sub_10022627C((uint64_t)sub_10067A3D4))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078EE90();
      }
    }
    else if (sub_100226404((uint64_t)sub_10067A55C))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078EE28();
      }
    }
    else if (sub_10024127C((uint64_t)off_1009BD8B0))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078EDC0();
      }
    }
    else
    {
      sub_100226538((uint64_t (*)(void))sub_10067A5D4);
      sub_100226564(sub_10067A6E0);
      if (*(_WORD *)(a1 + 836)) {
        sub_100219F9C(*(unsigned __int16 *)(a1 + 836));
      }
      uint64_t v8 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 352))(v8))
      {
        unint64_t v9 = *(void **)(a1 + 1520);
        uint64_t v10 = *(void *)(a1 + 1528);
        v14[0] = _NSConcreteStackBlock;
        v14[1] = 3221225472;
        unsigned int v14[2] = sub_10067A814;
        v14[3] = &unk_1009BD918;
        v14[4] = a1;
        [v9 startActivityUpdatesToQueue:v10 withHandler:v14];
      }
      uint64_t v11 = *(void **)(a1 + 1512);
      *(void *)(a1 + 1512) = 0;

      *(unsigned char *)(a1 + 1536) = 1;
      sub_10001B910(&v18);
      *(unsigned char *)(a1 + 1066) = 0;
      *(void *)buf = 0;
      uint64_t v20 = 0;
      uint64_t v12 = sub_10003AED0((uint64_t)buf, a1 + 120);
      sub_10003AFB4(v12);
    }
  }
  return sub_10001B8AC(&v18);
}

void sub_10067A37C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10001B8AC((unsigned char *)(v20 - 65));
  _Unwind_Resume(a1);
}

void sub_10067A3D4()
{
  *(_DWORD *)&v12[3] = 0;
  *(_DWORD *)uint64_t v12 = 0;
  sub_100229724((uint64_t)v12);
  uint64_t v3 = 0;
  uint64_t v4 = &v3;
  uint64_t v5 = 0x4812000000;
  int v6 = sub_10004D180;
  BOOL v7 = nullsub_27;
  uint64_t v8 = "";
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  unint64_t v9 = ((unint64_t)v12[1] << 40) | ((unint64_t)v12[2] << 32) | ((unint64_t)v12[3] << 24) | ((unint64_t)v12[4] << 16) | ((unint64_t)v12[5] << 8) | v12[6] | ((unint64_t)v12[0] << 48);
  sub_1002296C8(1u, (uint64_t)v12);
  v4[7] = ((unint64_t)v12[1] << 40) | ((unint64_t)v12[2] << 32) | ((unint64_t)v12[3] << 24) | ((unint64_t)v12[4] << 16) | ((unint64_t)v12[5] << 8) | v12[6] | ((unint64_t)v12[0] << 48);
  uint64_t v0 = sub_100019878();
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_1006A1E6C;
  v1[3] = &unk_1009BDEF0;
  v1[4] = &v3;
  char v2 = 0;
  sub_100013018(v0, v1);
  _Block_object_dispose(&v3, 8);
}

void sub_10067A540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10067A55C()
{
  uint64_t v0 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)char v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "LeConnectionManager::leAddressWillChangeCallback", v2, 2u);
  }
  uint64_t v1 = sub_100019878();
  sub_100013018(v1, &stru_1009BDF10);
}

void sub_10067A5D4(uint64_t a1, char a2, __int16 a3, __int16 a4, __int16 a5, __int16 a6, int a7, char a8)
{
  if (a1)
  {
    char v16 = *(unsigned char *)(a1 + 70);
    uint64_t v17 = sub_100019878();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_10069E064;
    v18[3] = &unk_1009BDD98;
    v18[4] = a1;
    char v24 = a2;
    __int16 v20 = a3;
    __int16 v21 = a4;
    __int16 v22 = a5;
    __int16 v23 = a6;
    int v19 = a7;
    char v25 = v16;
    char v26 = a8;
    sub_100013018(v17, v18);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_10078F098();
  }
}

void sub_10067A6E0(char a1, __int16 a2, __int16 a3, unsigned int a4, unint64_t *a5)
{
  v17[0] = 0;
  v17[1] = 0;
  char v16 = (uint64_t *)v17;
  if (a4)
  {
    uint64_t v9 = a4;
    do
    {
      sub_100051620(&v16, a5, (uint64_t *)a5);
      ++a5;
      --v9;
    }
    while (v9);
  }
  uint64_t v10 = sub_100019878();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3321888768;
  v11[2] = sub_10069F468;
  v11[3] = &unk_1009BDDB8;
  char v15 = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  sub_1006AB8B4(v12, (uint64_t)&v16);
  sub_100013018(v10, v11);
  sub_1000486F0((uint64_t)v12, (void *)v12[1]);
  sub_1000486F0((uint64_t)&v16, v17[0]);
}

void sub_10067A7E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
  sub_1000486F0(v19, a15);
  sub_1000486F0((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

void sub_10067A814(uint64_t a1, void *a2)
{
}

void sub_10067A81C(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = sub_10003FB34();
  if (sub_100354F18(v5, 3) && [v4 confidence] == (id)2)
  {
    if (!*(void *)(a1 + 1512)
      || (int v6 = *(unsigned __int8 *)(a1 + 1536), v6 != [v4 stationary]))
    {
      objc_storeStrong((id *)(a1 + 1512), a2);
      *(unsigned char *)(a1 + 1536) = [v4 stationary];
      if (([v4 stationary] & 1) == 0)
      {
        uint64_t v7 = sub_100019878();
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3221225472;
        v8[2] = sub_10067ED68;
        v8[3] = &unk_100997528;
        v8[4] = a1;
        sub_100013018(v7, v8);
      }
    }
  }
}

void sub_10067A910(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *sub_10067A920(uint64_t a1)
{
  char v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack Did Start", buf, 2u);
  }
  uint64_t v3 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 344))(v3, 1);
  uint64_t v4 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 456))(v4, 12, 1);
  int v5 = *(_DWORD *)(sub_10003FB34() + 712);
  if ((v5 - 1) > 0xA)
  {
    if ((v5 - 2000) <= 0x7CF)
    {
      uint64_t v7 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 864))(v7, 14, 1);
    }
  }
  else
  {
    uint64_t v6 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 864))(v6, 7, 1);
  }
  uint64_t v8 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 992))(v8, 10);
  uint64_t v9 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 3440))(v9))
  {
    uint64_t v10 = sub_10003FB34();
    (*(void (**)(uint64_t, void))(*(void *)v10 + 3448))(v10, 0);
  }
  *(unsigned char *)(a1 + 184) = 1;
  *(unsigned char *)(a1 + 1008) = 1;
  *(_WORD *)(a1 + 1064) = 1;
  *(unsigned char *)(a1 + 1067) = 0;
  uint64_t v11 = sub_10003FFD4();
  sub_10026B638(v11 + 368, a1 + 16);
  uint64_t v12 = sub_10003FFD4();
  sub_1004A79EC(v12 + 328, a1 + 88);
  unsigned __int8 v38 = 0;
  *(unsigned char *)(a1 + 633) = 0;
  uint64_t v13 = sub_10003FFD4();
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v13 + 72))(v13, &v38);
  uint64_t v14 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 80))(v14, a1 + 633);
  char v15 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int8 *)(a1 + 633);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v16;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v38;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Low Power mode: %d. Airplane Mode: %d", buf, 0xEu);
  }
  char v37 = 0;
  sub_10001B8E0(&v37);
  *(_DWORD *)&v36[3] = 0;
  *(_DWORD *)int v36 = 0;
  *(_DWORD *)&v35[3] = 0;
  *(_DWORD *)char v35 = 0;
  sub_100229724((uint64_t)v36);
  sub_1002296C8(1u, (uint64_t)v35);
  *(void *)(a1 + 1577) = sub_10018F624();
  sub_10001B910(&v37);
  unint64_t v17 = ((unint64_t)v35[1] << 40) | ((unint64_t)v35[2] << 32) | ((unint64_t)v35[3] << 24) | ((unint64_t)v35[4] << 16) | ((unint64_t)v35[5] << 8) | v35[6] | ((unint64_t)v35[0] << 48);
  *(void *)(a1 + 288) = ((unint64_t)v36[1] << 40) | ((unint64_t)v36[2] << 32) | ((unint64_t)v36[3] << 24) | ((unint64_t)v36[4] << 16) | ((unint64_t)v36[5] << 8) | v36[6] | ((unint64_t)v36[0] << 48);
  *(void *)(a1 + 296) = v17;
  *(CFAbsoluteTime *)(a1 + 328) = CFAbsoluteTimeGetCurrent();
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BE158);
  }
  sub_1004FB19C((uint64_t)off_1009F8150, 0);
  sub_10067B1E8(a1, 0, 0, 1);
  if (qword_100A14558 != -1) {
    dispatch_once(&qword_100A14558, &stru_1009BD938);
  }
  char v34 = 0;
  uint64_t v18 = sub_100017768();
  sub_10004191C(buf, "Magnet");
  sub_10004191C(__p, "DisableMagnetSetLatency");
  int v19 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v18 + 72))(v18, buf, __p, &v34);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if ((SBYTE7(v40) & 0x80000000) == 0)
  {
    if (!v19) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  operator delete(*(void **)buf);
  if (v19) {
LABEL_19:
  }
    *(unsigned char *)(a1 + 632) = 1;
LABEL_20:
  int v31 = 0;
  *(unsigned char *)(a1 + 1504) = 0;
  uint64_t v20 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ConnectionScanTimeoutOverride");
  int v21 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v20 + 88))(v20, buf, __p, &v31);
  if (v33 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v40) < 0)
  {
    operator delete(*(void **)buf);
    if (!v21) {
      goto LABEL_31;
    }
  }
  else if (!v21)
  {
    goto LABEL_31;
  }
  __int16 v22 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v31;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionScanTimeoutOverride: Using override value (%d) for fLeConnectionScanTimeoutOverride", buf, 8u);
  }
  *(_DWORD *)(a1 + 1508) = v31;
  *(unsigned char *)(a1 + 1504) = 1;
LABEL_31:
  sub_1006A96C0(a1 + 1432, *(void **)(a1 + 1440));
  *(void *)(a1 + 1432) = a1 + 1440;
  *(void *)(a1 + 1448) = 0;
  *(void *)(a1 + 1440) = 0;
  sub_1006A96C0(a1 + 1456, *(void **)(a1 + 1464));
  *(void *)(a1 + 1456) = a1 + 1464;
  *(void *)(a1 + 1472) = 0;
  *(void *)(a1 + 1464) = 0;
  LOBYTE(__p[0]) = -1;
  long long v52 = 0u;
  memset(v53, 0, sizeof(v53));
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)buf = 0u;
  char v30 = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BE138);
  }
  if (*((unsigned char *)off_1009F8068 + 540))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078F134();
    }
  }
  else
  {
    uint64_t v23 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, char *, void **, uint8_t *))(*(void *)v23 + 1856))(v23, &v30, __p, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078F0CC();
      }
    }
    else
    {
      uint64_t v24 = +[NSData dataWithBytes:buf length:LOBYTE(__p[0])];
      char v25 = *(void **)(a1 + 1568);
      *(void *)(a1 + 1568) = v24;

      *(unsigned char *)(a1 + 1576) = v30;
      v29[0] = _NSConcreteStackBlock;
      v29[1] = 3221225472;
      v29[2] = sub_10067B6FC;
      v29[3] = &unk_1009BD958;
      void v29[4] = a1;
      sub_10067762C((os_unfair_lock_s *)a1, v29);
      uint64_t v26 = sub_100019878();
      sub_100013018(v26, &stru_1009BD978);
    }
  }
  uint64_t v27 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 328))(v27))
  {
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009BE198);
    }
    sub_100735410(qword_1009FB268, 0x10000u);
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009BE198);
    }
    sub_100735410(qword_1009FB268, 0x10001u);
  }
  return sub_10001B8AC(&v37);
}

void sub_10067B178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_10001B8AC(&a25);
  _Unwind_Resume(a1);
}

void sub_10067B1E8(uint64_t a1, void *a2, char a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 2624))(v8))
  {
    uint64_t v9 = *(const unsigned __int8 **)(a1 + 336);
    char v10 = -127;
    if (v9 != (const unsigned __int8 *)(a1 + 344))
    {
      do
      {
        uint64_t v11 = sub_100031234(v9 + 25);
        int v12 = sub_1006790A4(a1, v11);

        if (v12)
        {
          uint64_t v13 = sub_100031234(v9 + 25);
          int v14 = sub_1006790A4(a1, v13);

          if (v14 > v10)
          {
            char v15 = sub_100031234(v9 + 25);
            char v10 = sub_1006790A4(a1, v15);
          }
        }
        int v16 = (unsigned __int8 *)*((void *)v9 + 1);
        if (v16)
        {
          do
          {
            unint64_t v17 = (const unsigned __int8 **)v16;
            int v16 = *(unsigned __int8 **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            unint64_t v17 = (const unsigned __int8 **)*((void *)v9 + 2);
            BOOL v23 = *v17 == v9;
            uint64_t v9 = (const unsigned __int8 *)v17;
          }
          while (!v23);
        }
        uint64_t v9 = (const unsigned __int8 *)v17;
      }
      while (v17 != (const unsigned __int8 **)(a1 + 344));
    }
    int v18 = *(unsigned __int8 *)(a1 + 1120);
    if (*(unsigned char *)(a1 + 1120)) {
      char v19 = *(unsigned char *)(a1 + 1120);
    }
    else {
      char v19 = v10;
    }
    if (sub_10067943C(a1, 3))
    {
      uint64_t v20 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        int v21 = *(char *)(a1 + 736);
        int v28 = 67109120;
        LODWORD(v29) = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "FindMy object connection enabled, skipping Global RSSI. LastApplied =%d dBm)", (uint8_t *)&v28, 8u);
      }
      if (*(unsigned char *)(a1 + 736))
      {
        char v19 = 0;
        a4 = 1;
      }
    }
    if (a4) {
      char v22 = a3;
    }
    else {
      char v22 = v19;
    }
    if ((a4 & 1) != 0 || (v19 == a3 ? (BOOL v23 = v18 == 0) : (BOOL v23 = 0), !v23))
    {
      *(unsigned char *)(a1 + 736) = v22;
      uint64_t v24 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        int v28 = 138544386;
        id v29 = v7;
        __int16 v30 = 1024;
        int v31 = -1;
        __int16 v32 = 1024;
        int v33 = -1;
        __int16 v34 = 1024;
        int v35 = -1;
        __int16 v36 = 1024;
        int v37 = v22;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Applying configureCreateConnection for device \"%{public}@\" to connection filter accept list with option Timeout=%d, smartNotification=%d, connectRequestRetry=%d, minRssiToUpdate=%d", (uint8_t *)&v28, 0x24u);
      }
      uint64_t v25 = sub_10003FB34();
      int v26 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)v25 + 1640))(v25, 255, 255, 255, v22);
      if (v26)
      {
        uint64_t v27 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          int v28 = 67109120;
          LODWORD(v29) = v26;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "configureCreateConnection failed with error %d", (uint8_t *)&v28, 8u);
        }
      }
    }
  }
}

void sub_10067B510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10067B550(id a1)
{
  int v8 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "FastConnectionOverrideInstance");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v1 + 88))(v1, buf, __p, &v8);
  if (v8 > 0) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  uint64_t v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "FastLEConnection:calling setMaxInstantUpdateForFastLEConnection with %d", buf, 8u);
  }
  uint64_t v5 = sub_10003FB34();
  (*(void (**)(uint64_t, void))(*(void *)v5 + 1880))(v5, v8);
}

void sub_10067B6C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10067B6FC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 152))(a2, *(unsigned __int8 *)(*(void *)(a1 + 32) + 1576), *(void *)(*(void *)(a1 + 32) + 1568));
}

void sub_10067B734(id a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  uint64_t v1 = off_1009F7ED8;

  sub_1006C1788((uint64_t)v1);
}

unsigned char *sub_10067B788(uint64_t a1)
{
  int v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeConnectionManager::stackWillStop enter", (uint8_t *)&buf, 2u);
  }
  uint64_t v3 = sub_10003FFD4();
  sub_1002C4188(v3 + 368, a1 + 16);
  uint64_t v4 = sub_10003FFD4();
  sub_1004A7CFC(v4 + 328, a1 + 88);
  char v49 = 0;
  sub_10001B8E0(&v49);
  if (sub_10022A2F0())
  {
    sub_10001B910(&v49);
    *(unsigned char *)(a1 + 1067) = 1;
    uint64_t v5 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = *(void *)(a1 + 352);
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Trying to cancel all pending connections (%lu)", (uint8_t *)&buf, 0xCu);
    }
    long long buf = 0uLL;
    sub_10003AED0((uint64_t)&buf, a1 + 120);
    if (*(void *)(a1 + 352)
      && !sub_10067C23C(a1, 1)
      && *(unsigned char *)(a1 + 1064)
      && !sub_10001BCA8((pthread_cond_t *)(a1 + 1016), (pthread_mutex_t **)&buf, 0x1388uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078F204();
      }
      uint64_t v42 = sub_100017768();
      sub_10004191C(v48, "");
      sub_1005C8AF4(v42, 141, (uint64_t)v48, 1);
    }
    sub_10003AFE8((uint64_t)&buf);
    sub_1002B804C(&v49);
    char v7 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Trying to disconnect all LE connections", v51, 2u);
    }
    int v8 = sub_100228EE0((uint64_t (*)(void))sub_10067C83C);
    if (v8)
    {
      uint64_t v9 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long v51 = 67109120;
        int v52 = v8;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "LE_GAP_DisconnectAll returned %{bluetooth:OI_STATUS}u", v51, 8u);
      }
    }
    sub_10001B910(&v49);
    char v10 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v51 = 67109120;
      int v52 = 5000;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "waiting for all LE devices complete disconnection, timeout %d", v51, 8u);
    }
    sub_10003AF00((uint64_t)&buf);
    if (!v8
      && *(unsigned char *)(a1 + 1008)
      && !sub_10001BCA8((pthread_cond_t *)(a1 + 960), (pthread_mutex_t **)&buf, 0x1388uLL))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078F1D0();
      }
      uint64_t v41 = sub_100017768();
      sub_10004191C(v47, "");
      sub_1005C8AF4(v41, 141, (uint64_t)v47, 1);
    }
    sub_10003AFE8((uint64_t)&buf);
    byte_100A1A220 = 0;
    byte_100A1A221 = 0;
    sub_100026264(&stru_100A1A170);
    sub_100026264(&stru_100A1A140);
    uint64_t v11 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "No more LE connections", v51, 2u);
    }
    sub_100026264(&stru_100A1A228);
    byte_100A1A298 = 0;
    sub_1002B804C(&v49);
    if (sub_100226648(8, v12, v13, v14, v15, v16, v17, v18)
      && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      sub_10078F168();
    }
    sub_1002241AC((uint64_t)off_1009BD880);
    sub_100226348((uint64_t)sub_10067A3D4);
    sub_10001B910(&v49);
    sub_10003AF00((uint64_t)&buf);
    *(unsigned char *)(a1 + 184) = 0;
    char v19 = *(const unsigned __int8 **)(a1 + 384);
    uint64_t v20 = (const unsigned __int8 **)(a1 + 392);
    if (v19 != (const unsigned __int8 *)(a1 + 392))
    {
      do
      {
        if (qword_1009FB270 != -1) {
          dispatch_once(&qword_1009FB270, &stru_1009BE198);
        }
        uint64_t v21 = qword_1009FB268;
        char v22 = sub_100031234(v19 + 32);
        sub_10073676C(v21, v22, 0);

        BOOL v23 = (unsigned __int8 *)*((void *)v19 + 1);
        if (v23)
        {
          do
          {
            uint64_t v24 = (const unsigned __int8 **)v23;
            BOOL v23 = *(unsigned __int8 **)v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (const unsigned __int8 **)*((void *)v19 + 2);
            BOOL v25 = *v24 == v19;
            char v19 = (const unsigned __int8 *)v24;
          }
          while (!v25);
        }
        char v19 = (const unsigned __int8 *)v24;
      }
      while (v24 != v20);
    }
    sub_1000486F0(a1 + 384, *(void **)(a1 + 392));
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
    *(void *)(a1 + 384) = v20;
    int v26 = *(const unsigned __int8 **)(a1 + 336);
    uint64_t v27 = (const unsigned __int8 **)(a1 + 344);
    if (v26 != (const unsigned __int8 *)(a1 + 344))
    {
      do
      {
        if (qword_1009FB270 != -1) {
          dispatch_once(&qword_1009FB270, &stru_1009BE198);
        }
        uint64_t v28 = qword_1009FB268;
        id v29 = sub_100031234(v26 + 25);
        sub_10073676C(v28, v29, 0);

        __int16 v30 = (unsigned __int8 *)*((void *)v26 + 1);
        if (v30)
        {
          do
          {
            int v31 = (const unsigned __int8 **)v30;
            __int16 v30 = *(unsigned __int8 **)v30;
          }
          while (v30);
        }
        else
        {
          do
          {
            int v31 = (const unsigned __int8 **)*((void *)v26 + 2);
            BOOL v25 = *v31 == v26;
            int v26 = (const unsigned __int8 *)v31;
          }
          while (!v25);
        }
        int v26 = (const unsigned __int8 *)v31;
      }
      while (v31 != v27);
    }
    sub_1000486F0(a1 + 336, *(void **)(a1 + 344));
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 336) = v27;
    sub_1000486F0(a1 + 608, *(void **)(a1 + 616));
    *(void *)(a1 + 608) = a1 + 616;
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    sub_1000486F0(a1 + 360, *(void **)(a1 + 368));
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 360) = a1 + 368;
    sub_1000486F0(a1 + 640, *(void **)(a1 + 648));
    *(void *)(a1 + 640) = a1 + 648;
    *(void *)(a1 + 656) = 0;
    *(void *)(a1 + 648) = 0;
    sub_1000486F0(a1 + 664, *(void **)(a1 + 672));
    *(void *)(a1 + 664) = a1 + 672;
    *(void *)(a1 + 680) = 0;
    *(void *)(a1 + 672) = 0;
    sub_1000486F0(a1 + 688, *(void **)(a1 + 696));
    *(void *)(a1 + 688) = a1 + 696;
    *(void *)(a1 + 704) = 0;
    *(void *)(a1 + 696) = 0;
    sub_1000486F0(a1 + 712, *(void **)(a1 + 720));
    *(void *)(a1 + 712) = a1 + 720;
    *(void *)(a1 + 728) = 0;
    *(void *)(a1 + 720) = 0;
    sub_1000486F0(a1 + 408, *(void **)(a1 + 416));
    *(void *)(a1 + 416) = 0;
    *(void *)(a1 + 424) = 0;
    *(void *)(a1 + 408) = a1 + 416;
    sub_1000486F0(a1 + 432, *(void **)(a1 + 440));
    *(void *)(a1 + 440) = 0;
    *(void *)(a1 + 448) = 0;
    *(void *)(a1 + 432) = a1 + 440;
    sub_1000486F0(a1 + 840, *(void **)(a1 + 848));
    *(void *)(a1 + 840) = a1 + 848;
    *(void *)(a1 + 856) = 0;
    *(void *)(a1 + 848) = 0;
    long long v43 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v46 = 0u;
    id v32 = *(id *)(a1 + 744);
    id v33 = [v32 countByEnumeratingWithState:&v43 objects:v50 count:16];
    if (v33)
    {
      uint64_t v34 = *(void *)v44;
      do
      {
        int v35 = 0;
        do
        {
          if (*(void *)v44 != v34) {
            objc_enumerationMutation(v32);
          }
          id v36 = *(id *)(*((void *)&v43 + 1) + 8 * (void)v35);
          if (qword_1009FB270 != -1) {
            dispatch_once(&qword_1009FB270, &stru_1009BE198);
          }
          sub_10073676C(qword_1009FB268, v36, 0);

          int v35 = (char *)v35 + 1;
        }
        while (v33 != v35);
        id v33 = [v32 countByEnumeratingWithState:&v43 objects:v50 count:16];
      }
      while (v33);
    }

    [*(id *)(a1 + 744) removeAllObjects];
    [*(id *)(a1 + 752) removeAllObjects];
    [*(id *)(a1 + 760) removeAllObjects];
    [*(id *)(a1 + 768) removeAllObjects];
    [*(id *)(a1 + 776) removeAllObjects];
    [*(id *)(a1 + 784) removeAllObjects];
    [*(id *)(a1 + 792) removeAllObjects];
    [*(id *)(a1 + 824) removeAllObjects];
    sub_1000486F0(a1 + 456, *(void **)(a1 + 464));
    *(void *)(a1 + 464) = 0;
    *(void *)(a1 + 472) = 0;
    *(void *)(a1 + 456) = a1 + 464;
    sub_1000486F0(a1 + 480, *(void **)(a1 + 488));
    *(void *)(a1 + 488) = 0;
    *(void *)(a1 + 496) = 0;
    *(void *)(a1 + 480) = a1 + 488;
    sub_1000486F0(a1 + 504, *(void **)(a1 + 512));
    *(void *)(a1 + 520) = 0;
    *(void *)(a1 + 504) = a1 + 512;
    *(void *)(a1 + 512) = 0;
    sub_1000486F0(a1 + 528, *(void **)(a1 + 536));
    *(void *)(a1 + 528) = a1 + 536;
    *(void *)(a1 + 544) = 0;
    *(void *)(a1 + 536) = 0;
    sub_1000486F0(a1 + 800, *(void **)(a1 + 808));
    *(void *)(a1 + 800) = a1 + 808;
    *(void *)(a1 + 816) = 0;
    *(void *)(a1 + 808) = 0;
    int v37 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Setting initial connection state", v51, 2u);
    }
    sub_10067C934(a1, 0);
    sub_10067CCF0((os_unfair_lock_s *)a1, 0);
    sub_10067CE78(a1);
    sub_10067CF88(a1);
    sub_100051AD4(a1 + 936, *(void **)(a1 + 944));
    *(void *)(a1 + 936) = a1 + 944;
    *(void *)(a1 + 952) = 0;
    *(void *)(a1 + 944) = 0;
    *(void *)(a1 + 328) = 0;
    sub_10030BEA8(a1 + 1152, *(void **)(a1 + 1160));
    *(void *)(a1 + 1152) = a1 + 1160;
    *(void *)(a1 + 1168) = 0;
    *(void *)(a1 + 1160) = 0;
    sub_10004BA28(a1 + 1184, *(char **)(a1 + 1192));
    *(void *)(a1 + 1184) = a1 + 1192;
    *(void *)(a1 + 1200) = 0;
    *(void *)(a1 + 1192) = 0;
    sub_10004BA28(a1 + 1352, *(char **)(a1 + 1360));
    *(void *)(a1 + 1352) = a1 + 1360;
    *(void *)(a1 + 1368) = 0;
    *(void *)(a1 + 1360) = 0;
    sub_1000486F0(a1 + 1384, *(void **)(a1 + 1392));
    *(void *)(a1 + 1384) = a1 + 1392;
    *(void *)(a1 + 1400) = 0;
    *(void *)(a1 + 1392) = 0;
    sub_1000486F0(a1 + 1128, *(void **)(a1 + 1136));
    *(void *)(a1 + 1128) = a1 + 1136;
    *(void *)(a1 + 1144) = 0;
    *(void *)(a1 + 1136) = 0;
    sub_1004EF138(a1 + 32);
    sub_1006A96C0(a1 + 1432, *(void **)(a1 + 1440));
    *(void *)(a1 + 1432) = a1 + 1440;
    *(void *)(a1 + 1448) = 0;
    *(void *)(a1 + 1440) = 0;
    sub_1006A96C0(a1 + 1456, *(void **)(a1 + 1464));
    *(void *)(a1 + 1456) = a1 + 1464;
    *(void *)(a1 + 1472) = 0;
    *(void *)(a1 + 1464) = 0;
    sub_10067D020(a1);
    uint64_t v38 = sub_10003FB34();
    (*(void (**)(uint64_t))(*(void *)v38 + 3648))(v38);
    [*(id *)(a1 + 1520) stopActivityUpdates];
    uint64_t v39 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v51 = 0;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "LeConnectionManager::stackWillStop exit", v51, 2u);
    }
    sub_10003AFB4((uint64_t)&buf);
  }
  return sub_10001B8AC(&v49);
}

void sub_10067C1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,int a30,__int16 a31,char a32,char a33)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4(v33 - 112);
  sub_10001B8AC(&a33);
  _Unwind_Resume(a1);
}

uint64_t sub_10067C23C(uint64_t a1, int a2)
{
  v50[0] = 0;
  v50[1] = 0;
  sub_10003AED0((uint64_t)v50, a1 + 120);
  unint64_t v4 = *(void *)(a1 + 352);
  if (a2)
  {
    uint64_t v5 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Clearing fDevicesToAddToFilterAcceptList", buf, 2u);
    }
    [*(id *)(a1 + 768) removeAllObjects];
  }
  if (*(_DWORD *)(a1 + 864) == 1)
  {
    if (v4)
    {
      uint64_t v6 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        char v7 = "connection";
        if (v4 > 1) {
          char v7 = "connections";
        }
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cancelling %lu pending %{public}s", buf, 0x16u);
      }
      char v49 = 0;
      int v8 = sub_10001B8E0(&v49);
      uint64_t v16 = sub_100226764((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
      sub_10001B910(&v49);
      if ((v16 - 1301) >= 2)
      {
        if (!v16)
        {
          sub_10067C934(a1, 2u);
LABEL_25:
          sub_10001B8AC(&v49);
          goto LABEL_26;
        }
        if (v16 != 3704)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
            sub_10078F238();
          }
          uint64_t v42 = sub_100017768();
          sub_1005C99C8(v42, 1);
        }
      }
      uint64_t v17 = *(void *)(a1 + 872);
      uint64_t v18 = *(void *)(a1 + 880);
      unint64_t v47 = 0;
      unint64_t v48 = 0;
      *(void *)long long buf = 0;
      sub_100026C30((uint64_t)buf);
      unint64_t v19 = 1000 * (*(int *)buf - *(void *)(a1 + 872)) - *(void *)(a1 + 880) + *(__int16 *)&buf[4];
      unint64_t v47 = v19 / 0x3E8;
      unint64_t v48 = v19 % 0x3E8;
      uint64_t v20 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v28 = *(int *)(a1 + 864);
        id v29 = v28 > 4 ? "UNKNOWN" : (&off_1009BE3A8)[v28];
        sub_10042F298(&v47, __p);
        __int16 v30 = v46 >= 0 ? __p : (void **)__p[0];
        int v31 = *(unsigned __int8 *)(a1 + 888);
        *(_DWORD *)long long buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = v16;
        *(_WORD *)&uint8_t buf[8] = 2082;
        *(void *)&buf[10] = v29;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v30;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v31;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to cancel connection(s) with result %{bluetooth:OI_STATUS}u (state %{public}s,%{public}ssec %d errors)", buf, 0x22u);
        if (v46 < 0) {
          operator delete(__p[0]);
        }
      }
      if (v16 == 1301)
      {
        unsigned int v21 = ++*(unsigned char *)(a1 + 888);
        if (v21 >= 2)
        {
          unint64_t v22 = (v18 + 60000) / 0x3E8uLL;
          *(_WORD *)&buf[6] = 0;
          *(_DWORD *)long long buf = v17 + v22;
          *(_WORD *)&uint8_t buf[4] = v18 - 5536 - 1000 * v22;
          if (sub_100262A50((uint64_t)buf))
          {
            BOOL v23 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
            {
              uint64_t v24 = *(int *)(a1 + 864);
              if (v24 > 4) {
                BOOL v25 = "UNKNOWN";
              }
              else {
                BOOL v25 = (&off_1009BE3A8)[v24];
              }
              sub_10042F298(&v47, __p);
              int v32 = v46;
              uint64_t v33 = (void **)__p[0];
              sub_10042F298((void *)(a1 + 872), v43);
              uint64_t v34 = __p;
              if (v32 < 0) {
                uint64_t v34 = v33;
              }
              if (v44 >= 0) {
                int v35 = v43;
              }
              else {
                int v35 = (void **)v43[0];
              }
              int v36 = *(unsigned __int8 *)(a1 + 888);
              *(_DWORD *)long long buf = 136446978;
              *(void *)&uint8_t buf[4] = v25;
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&unsigned char buf[14] = v34;
              *(_WORD *)&buf[22] = 2082;
              *(void *)&buf[24] = v35;
              *(_WORD *)&buf[32] = 1024;
              int v52 = v36;
              _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "ABORTING TO RECOVER - %{public}s %{public}ssec (%{public}s) %d errors", buf, 0x26u);
              if (v44 < 0) {
                operator delete(v43[0]);
              }
              if (v46 < 0) {
                operator delete(__p[0]);
              }
            }
            uint64_t v37 = sub_100017768();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 8))(v37))
            {
              if (qword_1009FB088 != -1) {
                dispatch_once(&qword_1009FB088, &stru_1009BE238);
              }
              uint64_t v38 = qword_1009FB080;
              sub_10004191C(buf, "Failed to cancel all pending connection/s");
              uint64_t v39 = *(int *)(a1 + 864);
              if (v39 > 4) {
                long long v40 = "UNKNOWN";
              }
              else {
                long long v40 = (&off_1009BE3A8)[v39];
              }
              sub_10004191C(__p, v40);
              sub_1004B7DA8(0.0, v38, (uint64_t *)buf, (uint64_t *)__p);
              if (v46 < 0) {
                operator delete(__p[0]);
              }
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
            uint64_t v41 = sub_100017768();
            sub_1005C99C8(v41, 1);
          }
        }
      }
      goto LABEL_25;
    }
  }
  else
  {
    int v26 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Cannot cancel connections when not in connecting state", buf, 2u);
    }
  }
  uint64_t v16 = 408;
LABEL_26:
  sub_10003AFB4((uint64_t)v50);
  return v16;
}

void sub_10067C7B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a24);
  sub_10003AFB4((uint64_t)&a25);
  _Unwind_Resume(a1);
}

void sub_10067C83C(int a1)
{
  int v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE All Disconnected with status %d", buf, 8u);
  }
  uint64_t v3 = sub_100019878();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1006A2CA0;
  v4[3] = &unk_100998300;
  int v5 = a1;
  sub_100013018(v3, v4);
}

void sub_10067C934(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 864) == a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
      sub_10078F2A0();
    }
  }
  else
  {
    *(void *)__str = 0;
    sub_100026C30((uint64_t)__str);
    uint64_t v4 = *(int *)__str;
    uint64_t v5 = *(__int16 *)&__str[4];
    uint64_t v6 = *(void *)(a1 + 872);
    uint64_t v7 = *(void *)(a1 + 880);
    int v8 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v9 = 1000 * (v4 - v6) - v7 + v5;
      unsigned int v10 = *(_DWORD *)(a1 + 864);
      uint64_t v11 = v10 > 4 ? "UNKNOWN" : (&off_1009BE3A8)[v10];
      memset(__str, 0, 64);
      snprintf(__str, 0x3FuLL, "%0llu.%0llu", v9 / 0x3E8, v9 % 0x3E8);
      sub_10004191C(__p, __str);
      uint64_t v12 = v24 >= 0 ? __p : (void **)__p[0];
      uint64_t v13 = a2 > 4 ? "UNKNOWN" : (&off_1009BE3A8)[a2];
      int v14 = *(unsigned __int8 *)(a1 + 888);
      unsigned int v15 = *(_DWORD *)(a1 + 928);
      uint64_t v16 = v15 > 3 ? "UNKNOWN" : (&off_1009BE388)[v15];
      *(_DWORD *)__str = 136448002;
      *(void *)&__str[4] = v11;
      *(_WORD *)&__str[12] = 1024;
      *(_DWORD *)&__str[14] = v10;
      *(_WORD *)&__str[18] = 2082;
      *(void *)&__str[20] = v12;
      *(_WORD *)&__str[28] = 1024;
      *(_DWORD *)&__str[30] = v14;
      *(_WORD *)&__str[34] = 2082;
      *(void *)&__str[36] = v13;
      *(_WORD *)&__str[44] = 1024;
      *(_DWORD *)&__str[46] = a2;
      *(_WORD *)&__str[50] = 2082;
      *(void *)&__str[52] = v16;
      *(_WORD *)&__str[60] = 1024;
      *(_DWORD *)&__str[62] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting new connection state %{public}s(%d), %{public}ssec, %d errs --> %{public}s(%d), Connection Manager %{public}s(%d)", (uint8_t *)__str, 0x42u);
      if (v24 < 0) {
        operator delete(__p[0]);
      }
    }
    *(void *)__str = 0;
    sub_100026C30((uint64_t)__str);
    uint64_t v17 = *(__int16 *)&__str[4];
    *(void *)(a1 + 872) = *(int *)__str;
    *(void *)(a1 + 880) = v17;
    *(_DWORD *)(a1 + 864) = a2;
    *(unsigned char *)(a1 + 888) = 0;
    if (a2 != 1)
    {
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BE158);
      }
      sub_1004FB19C((uint64_t)off_1009F8150, 0);
      int v18 = *(_DWORD *)(a1 + 864);
      if (v18 == 4)
      {
        unsigned int v21 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__str = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "autoReconnect caused pausing", (uint8_t *)__str, 2u);
        }
        sub_1006A136C((os_unfair_lock_s *)a1);
      }
      else if (!v18)
      {
        unint64_t v19 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)__str = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Idle, checking Connection Manager state", (uint8_t *)__str, 2u);
        }
        int v20 = *(_DWORD *)(a1 + 928);
        if (v20 == 3)
        {
          sub_10067CCF0((os_unfair_lock_s *)a1, 0);
        }
        else if (v20 == 1)
        {
          sub_10067CCF0((os_unfair_lock_s *)a1, 2u);
        }
        else
        {
          unint64_t v22 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)__str = 0;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Connection Manager state is settled", (uint8_t *)__str, 2u);
          }
        }
      }
    }
  }
}

void sub_10067CCF0(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int os_unfair_lock_opaque = a1[232]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 3) {
      uint64_t v6 = "UNKNOWN";
    }
    else {
      uint64_t v6 = (&off_1009BE388)[os_unfair_lock_opaque];
    }
    if (a2 > 3) {
      uint64_t v7 = "UNKNOWN";
    }
    else {
      uint64_t v7 = (&off_1009BE388)[a2];
    }
    unsigned int v8 = a1[216]._os_unfair_lock_opaque;
    if (v8 > 4) {
      unint64_t v9 = "UNKNOWN";
    }
    else {
      unint64_t v9 = (&off_1009BE3A8)[v8];
    }
    int v11 = 136447490;
    uint64_t v12 = v6;
    __int16 v13 = 1024;
    unsigned int v14 = os_unfair_lock_opaque;
    __int16 v15 = 2082;
    uint64_t v16 = v7;
    __int16 v17 = 1024;
    unsigned int v18 = a2;
    __int16 v19 = 2082;
    int v20 = v9;
    __int16 v21 = 1024;
    unsigned int v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Setting new Connection Manager State %{public}s(%d) --> %{public}s(%d) Connection %{public}s(%d)", (uint8_t *)&v11, 0x32u);
  }
  a1[232]._unsigned int os_unfair_lock_opaque = a2;
  if (!a2)
  {
    sub_1004EF138((uint64_t)&a1[8]);
    unsigned int v10 = &stru_1009BDE68;
    goto LABEL_16;
  }
  if (a2 == 2)
  {
    unsigned int v10 = &stru_1009BDE48;
LABEL_16:
    sub_10067762C(a1, v10);
    return;
  }
  sub_1004EF214((uint64_t)&a1[8]);
}

void sub_10067CE78(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 896);
  if (v1)
  {
    uint64_t v3 = qword_100A19F40;
    if (!os_log_type_enabled((os_log_t)qword_100A19F40, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1),
          int v5 = 136446210,
          uint64_t v6 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "destroying %{public}s", (uint8_t *)&v5, 0xCu), (uint64_t v1 = *(void *)(a1 + 896)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
    *(void *)(a1 + 896) = 0;
  }
}

void sub_10067CF88(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 552);
  if (v1)
  {
    *(void *)(a1 + 560) = 0;
    uint64_t v3 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Canceling Fast connection scan Timer", v5, 2u);
      uint64_t v1 = *(void **)(a1 + 552);
    }
    [v1 invalidate];
    uint64_t v4 = *(void **)(a1 + 552);
    *(void *)(a1 + 552) = 0;
  }
}

void sub_10067D020(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 1496);
  if (v1)
  {
    uint64_t v3 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: fLeConnectionDenyListMaintainTimer destroyed!", v4, 2u);
      uint64_t v1 = *(NSObject **)(a1 + 1496);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(a1 + 1496));
    *(void *)(a1 + 1496) = 0;
  }
}

uint64_t sub_10067D0B4(uint64_t result)
{
  *(unsigned char *)(result + 1067) = 0;
  return result;
}

uint64_t sub_10067D0BC()
{
  return 1;
}

uint64_t sub_10067D0C4()
{
  return 1;
}

void sub_10067D0CC(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10067D148;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_1000197D8(v2, v3);
}

void sub_10067D148(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(const unsigned __int8 **)(v1 + 384);
  if (v2 != (const unsigned __int8 *)(v1 + 392))
  {
    do
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v3 = off_1009F7ED8;
      uint64_t v4 = sub_100031234(v2 + 32);
      LODWORD(v3) = sub_1006BDD68((uint64_t)v3, v4);

      if (v3)
      {
        uint64_t v5 = sub_10003FB34();
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        uint64_t v6 = off_1009F7ED8;
        uint64_t v7 = sub_100031234(v2 + 32);
        uint64_t v8 = sub_100030DCC((uint64_t)v6, v7, 0);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 328))(v5, 0, 1, v8, 1);
      }
      else
      {
        uint64_t v7 = sub_100031234(v2 + 32);
        sub_10067D568(v1, v7);
      }

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      unint64_t v9 = off_1009F7ED8;
      unsigned int v10 = sub_100031234(v2 + 32);
      LODWORD(v9) = sub_1006C420C((uint64_t)v9, v10);

      if (v9)
      {
        int v11 = sub_100031234(v2 + 32);
        sub_10067D6D4(v1, v11);
      }
      uint64_t v12 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v12)
      {
        do
        {
          __int16 v13 = (const unsigned __int8 **)v12;
          uint64_t v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          __int16 v13 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v14 = *v13 == v2;
          uint64_t v2 = (const unsigned __int8 *)v13;
        }
        while (!v14);
      }
      uint64_t v2 = (const unsigned __int8 *)v13;
    }
    while (v13 != (const unsigned __int8 **)(v1 + 392));
  }
  __int16 v15 = *(const unsigned __int8 **)(v1 + 336);
  if (v15 == (const unsigned __int8 *)(v1 + 344))
  {
    char v16 = 0;
  }
  else
  {
    char v16 = 0;
    while (1)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      __int16 v17 = off_1009F7ED8;
      unsigned int v18 = sub_100031234(v15 + 25);
      BOOL v19 = sub_1006C65B8((uint64_t)v17, v18);

      if (v19) {
        break;
      }
      int v20 = (unsigned __int8 *)*((void *)v15 + 1);
      if (v20)
      {
        do
        {
          __int16 v21 = (const unsigned __int8 **)v20;
          int v20 = *(unsigned __int8 **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          __int16 v21 = (const unsigned __int8 **)*((void *)v15 + 2);
          BOOL v14 = *v21 == v15;
          __int16 v15 = (const unsigned __int8 *)v21;
        }
        while (!v14);
      }
      v16 |= v19;
      __int16 v15 = (const unsigned __int8 *)v21;
      if (v21 == (const unsigned __int8 **)(v1 + 344)) {
        goto LABEL_33;
      }
    }
    char v16 = 1;
  }
LABEL_33:
  unsigned int v22 = sub_1003734A0();
  BOOL v23 = v22;
  if (v22) {
    [v22 enableSystemWakesForUpdate:v16 & 1 completion:&stru_1009BD998];
  }
  uint64_t v24 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 344))(v24))
  {
    uint64_t v25 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 952))(v25))
    {
      if (*(unsigned char *)(v1 + 633))
      {
        if (*(void *)(v1 + 520))
        {
          int v26 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
          {
            v27[0] = 0;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Subrate Change Event not masked since connection subrating transactions are pending.", (uint8_t *)v27, 2u);
          }
        }
        else
        {
          sub_10067DA80(v1, 0);
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
            sub_10078F328();
          }
        }
      }
    }
  }
}

void sub_10067D53C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10067D568(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (sub_10067DD54((uint64_t)v2, v2))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    if (sub_1006C32F4((uint64_t)off_1009F7ED8, v2))
    {
      uint64_t v3 = sub_10003FB34();
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v4 = sub_100030DCC((uint64_t)off_1009F7ED8, v2, 0);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t))(*(void *)v3 + 328))(v3, 0, 1, v4, 1);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      sub_1006C3258((uint64_t)off_1009F7ED8, v2, 0);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      sub_1006C3380((uint64_t)off_1009F7ED8, v2);
    }
  }

  return 0;
}

void sub_10067D6C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10067D6D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100017768();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4) & 1) == 0)
  {
    uint64_t v5 = sub_100017768();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 480))(v5) & 1) == 0) {
      goto LABEL_13;
    }
  }
  BOOL v14 = 0;
  if (!v3)
  {
    int v11 = qword_100A19EF8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v12 = "disableHIDLatencyStats -- device is NULL";
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
    goto LABEL_21;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  if (!sub_1006C420C((uint64_t)off_1009F7ED8, v3))
  {
    int v11 = qword_100A19EF8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v12 = "disableHIDLatencyStats -- does not have HID service";
    goto LABEL_20;
  }
  sub_1000305AC(buf, v3);
  if (!sub_1006856B8(a1, buf, &v14))
  {
    int v11 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v12 = "disableHIDLatencyStats -- cannot get connection handle";
      goto LABEL_20;
    }
LABEL_21:
    uint64_t v10 = 1;
    goto LABEL_22;
  }
  uint64_t v6 = v14;
  uint64_t v7 = sub_100197960(v14);
  uint64_t v8 = sub_100050530();
  (*(void (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)v8 + 560))(v8, v6, v7);
  uint64_t v9 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v9 + 1040))(v9, v7, 1, 0))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      sub_10003093C((uint64_t)off_1009F7ED8, v3, (uint64_t)buf);
      sub_10078F390();
    }
    goto LABEL_21;
  }
LABEL_13:
  uint64_t v10 = 0;
LABEL_22:

  return v10;
}

void sub_10067D9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10067D9DC(id a1, NSError *a2)
{
  id v3 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    uint64_t v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "enableSystemWakesForUpdate returned %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_10067DA80(uint64_t a1, int a2)
{
  uint64_t v13 = *(void *)(a1 + 1577);
  int v2 = BYTE4(v13);
  if (a2)
  {
    BYTE4(v13) |= 4u;
    if ((v2 | 4) != v2)
    {
      char v12 = 0;
      sub_10001B8E0(&v12);
      uint64_t v9 = sub_10068506C;
      goto LABEL_7;
    }
    return 0;
  }
  BYTE4(v13) &= ~4u;
  if ((v2 & 0xFFFFFFFB) == v2) {
    return 0;
  }
  char v12 = 0;
  sub_10001B8E0(&v12);
  uint64_t v9 = sub_100685138;
LABEL_7:
  uint64_t v10 = sub_10001BDE0(162, (uint64_t)v9, v3, v4, v5, v6, v7, v8, (uint64_t)&v13);
  if (v10 && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
    sub_10078F3E4();
  }
  sub_10001B8AC(&v12);
  return v10;
}

void sub_10067DBAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10067DBC8(uint64_t a1)
{
}

uint64_t sub_10067DBD0(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (!sub_10067DD54((uint64_t)v2, v2)) {
    goto LABEL_13;
  }
  sub_10003FB34();
  unsigned int v3 = sub_100354288();
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  if (sub_1006C429C((uint64_t)off_1009F7ED8) >= v3) {
    goto LABEL_13;
  }
  uint64_t v4 = sub_10003FB34();
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  uint64_t v5 = sub_100030DCC((uint64_t)off_1009F7ED8, v2, 0);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 328))(v4, 1, 1, v5, 1);
  if (!v6)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    sub_1006C3258((uint64_t)off_1009F7ED8, v2, 1);
LABEL_13:
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
    sub_10078F44C();
  }
LABEL_14:

  return v6;
}

void sub_10067DD40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64_t sub_10067DD54(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v3 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v2);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v4 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v2);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v5 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v2);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  uint64_t v6 = off_1009F7ED8;
  sub_10004191C(__p, "BluetoothTVRemote");
  int v7 = sub_100030A04((uint64_t)v6, v2, (uint64_t)__p);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = sub_10003FB34();
  if (sub_100354254(v8))
  {
    uint64_t v9 = sub_100017768();
    if (((*(unsigned int (**)(uint64_t))(*(void *)v9 + 472))(v9) | v7))
    {
      int64_t v10 = 1;
    }
    else
    {
      int64_t v10 = 1;
      if (v3 != 19 && v3 != 196608 && v4 != 21 && v5 != 655360)
      {
        uint64_t v12 = sub_100050530();
        if (((*(uint64_t (**)(uint64_t, id))(*(void *)v12 + 512))(v12, v2) & 1) == 0)
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          uint64_t v13 = off_1009F7ED8;
          sub_10004191C(v14, "_HID_DEVICE_");
          int64_t v10 = sub_100030A04((uint64_t)v13, v2, (uint64_t)v14);
          if (v15 < 0) {
            operator delete(v14[0]);
          }
        }
      }
    }
  }
  else
  {
    int64_t v10 = 0;
  }

  return v10;
}

void sub_10067DFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10067DFF4(uint64_t a1, const unsigned __int8 **a2)
{
  int v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Multiple devices addresses changed", buf, 2u);
  }
  uint64_t v8 = *a2;
  uint64_t v6 = a2 + 1;
  int v7 = v8;
  if (v8 != (const unsigned __int8 *)v6)
  {
    *(void *)&long long v5 = 136446466;
    long long v21 = v5;
    do
    {
      uint64_t v9 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_OWORD *)long long buf = 0u;
        memset(v29, 0, sizeof(v29));
        uuid_unparse_upper(v7 + 25, (char *)buf);
        sub_10004191C(__p, (char *)buf);
        int v10 = v23;
        int v11 = (void **)__p[0];
        int v12 = sub_10067E248((void *)a1, (unsigned __int8 *)v7 + 25);
        uint64_t v13 = __p;
        if (v10 < 0) {
          uint64_t v13 = v11;
        }
        *(_DWORD *)uint64_t v24 = v21;
        uint64_t v25 = v13;
        BOOL v14 = "NO";
        if (v12) {
          BOOL v14 = "YES";
        }
        __int16 v26 = 2082;
        uint64_t v27 = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device %{public}s addresses changed connecting:%{public}s", v24, 0x16u);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_10067E248((void *)a1, (unsigned __int8 *)v7 + 25))
      {
        char v15 = *(void **)(a1 + 784);
        char v16 = sub_100031234(v7 + 25);
        [v15 addObject:v16];
      }
      char v17 = (unsigned __int8 *)*((void *)v7 + 1);
      if (v17)
      {
        do
        {
          unsigned int v18 = (const unsigned __int8 **)v17;
          char v17 = *(unsigned __int8 **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unsigned int v18 = (const unsigned __int8 **)*((void *)v7 + 2);
          BOOL v19 = *v18 == v7;
          int v7 = (const unsigned __int8 *)v18;
        }
        while (!v19);
      }
      int v7 = (const unsigned __int8 *)v18;
    }
    while (v18 != v6);
  }
  if (objc_msgSend(*(id *)(a1 + 784), "count", v21)) {
    sub_10067C23C(a1, 0);
  }
  return 0;
}

void sub_10067E218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10067E248(void *a1, unsigned __int8 *a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, (uint64_t)(a1 + 15));
  if (a1 + 43 != (void *)sub_1006AAB38((uint64_t)(a1 + 42), a2)) {
    goto LABEL_4;
  }
  int v4 = (void *)a1[94];
  long long v5 = sub_100031234(a2);
  LOBYTE(v4) = [v4 containsObject:v5];

  if ((v4 & 1) != 0
    || (uint64_t v6 = (void *)a1[95],
        sub_100031234(a2),
        int v7 = objc_claimAutoreleasedReturnValue(),
        LOBYTE(v6) = [v6 containsObject:v7],
        v7,
        (v6 & 1) != 0))
  {
LABEL_4:
    uint64_t v8 = 1;
  }
  else
  {
    int v10 = (void *)a1[96];
    int v11 = sub_100031234(a2);
    uint64_t v8 = (uint64_t)[v10 containsObject:v11];
  }
  sub_10003AFB4((uint64_t)v12);
  return v8;
}

void sub_10067E338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_10067E36C(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10067E3E8;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_10067E3E8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(const unsigned __int8 **)(v1 + 384);
  if (v2 != (const unsigned __int8 *)(v1 + 392))
  {
    do
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      int v3 = off_1009F7ED8;
      int v4 = sub_100031234(v2 + 32);
      LODWORD(v3) = sub_1006BDD68((uint64_t)v3, v4);

      if (v3)
      {
        uint64_t v5 = sub_10003FB34();
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        uint64_t v6 = off_1009F7ED8;
        int v7 = sub_100031234(v2 + 32);
        uint64_t v8 = sub_100030DCC((uint64_t)v6, v7, 0);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 328))(v5, 1, 1, v8, 1);
      }
      else
      {
        int v7 = sub_100031234(v2 + 32);
        sub_10067DBD0(v1, v7);
      }

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v9 = off_1009F7ED8;
      int v10 = sub_100031234(v2 + 32);
      LODWORD(v9) = sub_1006C420C((uint64_t)v9, v10);

      if (v9)
      {
        int v11 = sub_100031234(v2 + 32);
        sub_10067E6C8(v1, v11, 0);
      }
      int v12 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v12)
      {
        do
        {
          uint64_t v13 = (const unsigned __int8 **)v12;
          int v12 = *(unsigned __int8 **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v14 = *v13 == v2;
          uint64_t v2 = (const unsigned __int8 *)v13;
        }
        while (!v14);
      }
      uint64_t v2 = (const unsigned __int8 *)v13;
    }
    while (v13 != (const unsigned __int8 **)(v1 + 392));
  }
  sub_10067EA54(v1);
  uint64_t v15 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v15 + 344))(v15))
  {
    uint64_t v16 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 952))(v16))
    {
      if (*(unsigned char *)(v1 + 633))
      {
        sub_10067DA80(v1, 1);
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
          sub_10078F4B4();
        }
      }
    }
  }
}

void sub_10067E6A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10067E6C8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = sub_100017768();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 8))(v6) & 1) == 0)
  {
    uint64_t v7 = sub_100017768();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 480))(v7) & 1) == 0) {
      goto LABEL_25;
    }
  }
  unsigned int v18 = 0;
  if (!v5)
  {
    BOOL v14 = qword_100A19EF8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "enableHIDLatencyStats -- device is NULL";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, buf, 2u);
    goto LABEL_22;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  if (!sub_1006C420C((uint64_t)off_1009F7ED8, v5))
  {
    BOOL v14 = qword_100A19EF8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_22;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "enableHIDLatencyStats -- does not have HID service";
    goto LABEL_21;
  }
  sub_1000305AC(buf, v5);
  if (sub_1006856B8(a1, buf, &v18))
  {
    uint64_t v8 = v18;
    uint64_t v9 = sub_100197960(v18);
    if (a3)
    {
      uint64_t v10 = sub_100050530();
      (*(void (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)v10 + 536))(v10, v8, v9);
    }
    sub_1000305AC(buf, v5);
    uint64_t v11 = sub_10068640C(a1, buf);
    uint64_t v12 = sub_100050530();
    (*(void (**)(uint64_t, uint64_t, unsigned __int16 *, uint64_t, uint64_t))(*(void *)v12 + 544))(v12, v9, v8, 2, v11);
    uint64_t v13 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1040))(v13, v9, 1, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        sub_10003093C((uint64_t)off_1009F7ED8, v5, (uint64_t)buf);
        sub_10078F51C();
      }
      goto LABEL_22;
    }
    if (a3) {
      sub_10067DBD0(a1, v5);
    }
LABEL_25:
    uint64_t v16 = 0;
    goto LABEL_26;
  }
  BOOL v14 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    uint64_t v15 = "enableHIDLatencyStats -- cannot get connection handle";
    goto LABEL_21;
  }
LABEL_22:
  uint64_t v16 = 1;
LABEL_26:

  return v16;
}

void sub_10067EA24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10067EA54(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100686708;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_10067EAD0(uint64_t a1)
{
}

void sub_10067EAD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = objc_alloc_init((Class)NSDateFormatter);
  [v4 setDateFormat:@"yyyy-MM-dd HH:mm:ss.SSS"];
  id v5 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    if (v3)
    {
      uint64_t v15 = [v3 startDate];
      if (v15)
      {
        uint64_t v2 = [v3 startDate];
        uint64_t v16 = [v4 stringFromDate:v2];
        int v17 = 1;
      }
      else
      {
        int v17 = 0;
        uint64_t v15 = 0;
        uint64_t v16 = @"nil";
      }
    }
    else
    {
      int v17 = 0;
      uint64_t v16 = @"nil";
    }
    if (objc_msgSend(v3, "walking", v2)) {
      uint64_t v6 = "YES";
    }
    else {
      uint64_t v6 = "NO";
    }
    if ([v3 cycling]) {
      uint64_t v7 = "YES";
    }
    else {
      uint64_t v7 = "NO";
    }
    if ([v3 running]) {
      uint64_t v8 = "YES";
    }
    else {
      uint64_t v8 = "NO";
    }
    if ([v3 stationary]) {
      uint64_t v9 = "YES";
    }
    else {
      uint64_t v9 = "NO";
    }
    unsigned int v10 = [v3 unknown];
    unsigned int v11 = [v3 automotive];
    if (v10) {
      uint64_t v12 = "YES";
    }
    else {
      uint64_t v12 = "NO";
    }
    *(_DWORD *)long long buf = 138413826;
    if (v11) {
      uint64_t v13 = "YES";
    }
    else {
      uint64_t v13 = "NO";
    }
    BOOL v19 = v16;
    __int16 v20 = 2080;
    long long v21 = v6;
    __int16 v22 = 2080;
    char v23 = v7;
    __int16 v24 = 2080;
    uint64_t v25 = v8;
    __int16 v26 = 2080;
    uint64_t v27 = v9;
    __int16 v28 = 2080;
    id v29 = v12;
    __int16 v30 = 2080;
    int v31 = v13;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "==== motion: activity.startDate:%@ walking:%s cycling:%s running:%s stationary:%s unknown:%s automotive:%s", buf, 0x48u);
    if (v17)
    {
    }
    if (v3) {
  }
    }
}

void sub_10067ED00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_10067ED68(uint64_t a1, __n128 a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(const unsigned __int8 **)(v2 + 336);
  if (v3 != (const unsigned __int8 *)(v2 + 344))
  {
    a2.n128_u64[0] = 136446210;
    __n128 v14 = a2;
    do
    {
      id v4 = sub_100031234(v3 + 25);
      BOOL v5 = sub_10067EF58(v2, v4);

      if (v5)
      {
        uint64_t v6 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          memset(out, 0, 37);
          uuid_unparse_upper(v3 + 25, (char *)out);
          sub_10004191C(__p, (char *)out);
          uint64_t v7 = v16 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)out = v14.n128_u32[0];
          *(void *)&out[4] = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "motion detected, device to update %{public}s", out, 0xCu);
          if (v16 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v8 = *(void **)(v2 + 792);
        uint64_t v9 = sub_100031234(v3 + 25);
        [v8 addObject:v9];
      }
      unsigned int v10 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v10)
      {
        do
        {
          unsigned int v11 = (const unsigned __int8 **)v10;
          unsigned int v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          unsigned int v11 = (const unsigned __int8 **)*((void *)v3 + 2);
          BOOL v12 = *v11 == v3;
          id v3 = (const unsigned __int8 *)v11;
        }
        while (!v12);
      }
      id v3 = (const unsigned __int8 *)v11;
    }
    while (v11 != (const unsigned __int8 **)(v2 + 344));
  }
  id result = [*(id *)(v2 + 792) count:v14];
  if (result)
  {
    sub_10067EAD8((uint64_t)result, *(void **)(v2 + 1512));
    return (id)sub_10067C23C(v2, 0);
  }
  return result;
}

void sub_10067EF3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10067EF58(uint64_t a1, void *a2)
{
  id v3 = a2;
  v15[0] = 0;
  v15[1] = 0;
  uint64_t v16 = 0;
  id v4 = [v3 UUIDString];
  sub_10004191C(v15, (char *)[v4 UTF8String]);

  if (SHIBYTE(v16) < 0)
  {
    sub_10003B098(__p, v15[0], (unint64_t)v15[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v15;
    uint64_t v14 = v16;
  }
  uint64_t v5 = sub_10003156C(a1 + 1184, (const void **)__p);
  if (a1 + 1192 == v5) {
    int v6 = 2;
  }
  else {
    int v6 = *(_DWORD *)(v5 + 56);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  int v7 = sub_1006A061C(a1, v3);
  uint64_t v8 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = v15;
    if (v16 < 0) {
      uint64_t v9 = (void **)v15[0];
    }
    *(_DWORD *)long long buf = 136446722;
    unsigned int v18 = v9;
    __int16 v19 = 1024;
    int v20 = v6;
    __int16 v21 = 1024;
    int v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "updateLeConnectionRSSIThresholdState for %{public}s from %d to %d ", buf, 0x18u);
  }
  if (v6 != v7)
  {
    if (v7 == 2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078F570();
      }
    }
    else
    {
      if (SHIBYTE(v16) < 0)
      {
        sub_10003B098(v11, v15[0], (unint64_t)v15[1]);
      }
      else
      {
        *(_OWORD *)unsigned int v11 = *(_OWORD *)v15;
        uint64_t v12 = v16;
      }
      sub_1006A0388(a1, (long long *)v11, v7);
      if (SHIBYTE(v12) < 0) {
        operator delete(v11[0]);
      }
    }
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }

  return v6 != v7;
}

void sub_10067F178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }

  _Unwind_Resume(a1);
}

void sub_10067F1E4(uint64_t a1, unint64_t a2)
{
  unint64_t v21 = a2;
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (sub_10067F618(a1, a2, uu))
  {
    id v4 = sub_100031234(uu);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    if (sub_1006BDD68((uint64_t)off_1009F7ED8, v4))
    {
      if (!*(unsigned char *)(a1 + 632))
      {
        uint64_t v5 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 344))(v5))
        {
          uint64_t v6 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 952))(v6))
          {
            if (*(unsigned char *)(a1 + 633))
            {
              int v7 = qword_100A19EF8;
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setMagnetLatencyForLowPowerMode: Low power mode enabled; Requesting subrating on magnet link",
                  buf,
                  2u);
              }
              if (qword_1009F7EC0 != -1) {
                dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
              }
              sub_10067F6EC((uint64_t)off_1009F7EB8, v4, -11, 1);
            }
            else
            {
              uint64_t v8 = *(void **)(a1 + 536);
              if (v8)
              {
                uint64_t v9 = (uint64_t **)(a1 + 528);
                uint64_t v10 = a1 + 536;
                do
                {
                  unint64_t v11 = v8[4];
                  BOOL v12 = v11 >= a2;
                  if (v11 >= a2) {
                    uint64_t v13 = v8;
                  }
                  else {
                    uint64_t v13 = v8 + 1;
                  }
                  if (v12) {
                    uint64_t v10 = (uint64_t)v8;
                  }
                  uint64_t v8 = (void *)*v13;
                }
                while (*v13);
                if (v10 != a1 + 536 && *(void *)(v10 + 32) <= a2)
                {
                  uint64_t v14 = qword_100A19EF8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                  {
                    int v22 = &v21;
                    int v15 = *((unsigned __int16 *)sub_100509094(v9, &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v22) + 23);
                    int v22 = &v21;
                    int v16 = *((unsigned __int16 *)sub_100509094(v9, &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v22) + 21);
                    int v22 = &v21;
                    int v17 = *((unsigned __int16 *)sub_100509094(v9, &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v22) + 24);
                    int v22 = &v21;
                    int v18 = *((unsigned __int16 *)sub_100509094(v9, &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v22) + 22);
                    int v22 = &v21;
                    int v19 = *((_DWORD *)sub_100509094(v9, &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v22) + 13);
                    *(_DWORD *)long long buf = 134219264;
                    *(void *)&uint8_t buf[4] = a2;
                    __int16 v24 = 1024;
                    int v25 = v15;
                    __int16 v26 = 1024;
                    int v27 = v16;
                    __int16 v28 = 1024;
                    int v29 = v17;
                    __int16 v30 = 1024;
                    int v31 = v18;
                    __int16 v32 = 1024;
                    int v33 = v19;
                    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "setMagnetLatencyForLowPowerMode: Low power mode not enabled. Found configured parameters for handle %p. Subrate factor:%d Peripheral latency:%d Continuation Number=%d Supervision Timeout=%d. Subrating Status: %d", buf, 0x2Au);
                  }
                  *(void *)long long buf = &v21;
                  if (*((_DWORD *)sub_100509094(v9, &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf) + 13))
                  {
                    int v20 = qword_100A19EF8;
                    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "setMagnetLatencyForLowPowerMode: Low power mode disabled while LE Connection is subrated. Exiting subrating on magnet link", buf, 2u);
                    }
                    if (qword_1009F7EC0 != -1) {
                      dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
                    }
                    sub_10067F6EC((uint64_t)off_1009F7EB8, v4, -2, 1);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

void sub_10067F5F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10067F618(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 120);
  uint64_t v6 = *(const unsigned __int8 **)(a1 + 384);
  if (v6 == (const unsigned __int8 *)(a1 + 392))
  {
LABEL_9:
    uint64_t v10 = 0;
  }
  else
  {
    while (*((void *)v6 + 6) != a2)
    {
      int v7 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = (const unsigned __int8 **)v7;
          int v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const unsigned __int8 **)*((void *)v6 + 2);
          BOOL v9 = *v8 == v6;
          uint64_t v6 = (const unsigned __int8 *)v8;
        }
        while (!v9);
      }
      uint64_t v6 = (const unsigned __int8 *)v8;
      if (v8 == (const unsigned __int8 **)(a1 + 392)) {
        goto LABEL_9;
      }
    }
    uuid_copy(a3, v6 + 32);
    uint64_t v10 = 1;
  }
  sub_10003AFB4((uint64_t)v12);
  return v10;
}

void sub_10067F6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10067F6EC(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  unint64_t v87 = 0;
  v79[0] = 0;
  v79[1] = 0;
  sub_10003AED0((uint64_t)v79, a1 + 120);
  uint64_t v8 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v9 = sub_100304F74(a3);
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)int v90 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setConnectionLatency %{public}s to device \"%{public}@\"", buf, 0x16u);
  }
  sub_1000305AC(buf, v7);
  uint64_t v10 = sub_1000308C0(a1 + 384, buf);
  if (a1 + 392 == v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078F5E0();
    }
    uint64_t v11 = 3;
  }
  else
  {
    int v85 = 0;
    int v86 = 0;
    int v83 = 0;
    int v84 = 0;
    int v82 = 0;
    unsigned __int16 v81 = 0;
    __int16 v80 = 0;
    unint64_t v87 = *(void *)(v10 + 48);
    uint64_t v11 = sub_100684D50((_WORD *)a1, a3, (__int16 *)&v86 + 1, (__int16 *)&v86, (__int16 *)&v84, (__int16 *)&v84 + 1, (_WORD *)&v85 + 1, (__int16 *)&v85, (_WORD *)&v83 + 1, &v83, (_WORD *)&v82 + 1, &v82, &v81, (unsigned char *)&v80 + 1, &v80);
    if (v11) {
      goto LABEL_97;
    }
    if (a3 == -2)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      if (!sub_1006BDD68((uint64_t)off_1009F7ED8, v7))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
          sub_10078F800();
        }
        goto LABEL_93;
      }
      uint64_t v12 = sub_10003FB34();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 2728))(v12))
      {
        uint64_t v13 = *(void **)(a1 + 536);
        if (v13)
        {
          uint64_t v14 = a1 + 536;
          do
          {
            unint64_t v15 = v13[4];
            BOOL v16 = v15 >= v87;
            if (v15 >= v87) {
              int v17 = v13;
            }
            else {
              int v17 = v13 + 1;
            }
            if (v16) {
              uint64_t v14 = (uint64_t)v13;
            }
            uint64_t v13 = (void *)*v17;
          }
          while (*v17);
          if (v14 != a1 + 536 && v87 >= *(void *)(v14 + 32))
          {
            *(void *)long long buf = &v87;
            if (*((_DWORD *)sub_100509094((uint64_t **)(a1 + 528), &v87, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf) + 13) == 2)
            {
              int v18 = qword_100A19EF8;
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543618;
                *(void *)&uint8_t buf[4] = v7;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)int v90 = 1;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Magnet link to \"%{public}@\" is currently subrated. Switching to un-subrated link without parameter update (using a subrate factor of %d).", buf, 0x12u);
              }
              int v19 = 0;
              int v20 = 1;
              __int16 v80 = 256;
              goto LABEL_62;
            }
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
          sub_10078F730();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
      {
        sub_10078F798();
      }
    }
    int v19 = v80;
    if (!(_BYTE)v80)
    {
      int v20 = 1;
LABEL_62:
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      int v45 = sub_1006BDD68((uint64_t)off_1009F7ED8, v7);
      int v46 = HIBYTE(v80);
      if (HIBYTE(v80)) {
        int v47 = v45;
      }
      else {
        int v47 = 0;
      }
      if (v47 == 1)
      {
        uint64_t v48 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v48 + 2728))(v48))
        {
          int v77 = v19;
          char v49 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_INFO, "Enable Subrating set to %d. This platform supports connection subrating.", buf, 8u);
          }
          uint64_t v50 = HIWORD(v83);
          uint64_t v51 = (unsigned __int16)v83;
          uint64_t v52 = HIWORD(v82);
          uint64_t v53 = (unsigned __int16)v82;
          int v54 = v81;
          int v75 = (uint64_t **)(a1 + 504);
          char v55 = *(void **)(a1 + 512);
          if (v55)
          {
            unint64_t v56 = v87;
            uint64_t v57 = a1 + 512;
            do
            {
              unint64_t v58 = v55[4];
              BOOL v59 = v58 >= v87;
              if (v58 >= v87) {
                uint64_t v60 = v55;
              }
              else {
                uint64_t v60 = v55 + 1;
              }
              if (v59) {
                uint64_t v57 = (uint64_t)v55;
              }
              char v55 = (void *)*v60;
            }
            while (*v60);
            if (v57 != a1 + 512 && v87 >= *(void *)(v57 + 32))
            {
              int v73 = v81;
              int v61 = qword_100A19EF8;
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 134217984;
                *(void *)&uint8_t buf[4] = v56;
                _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Warning: Already pending on sending connection subrating parameters for handle %p", buf, 0xCu);
              }
              sub_1000517A4((uint64_t)v75, &v87);
              int v54 = v73;
            }
          }
          v88[0] = 0;
          v88[1] = 0;
          sub_1000305AC(v88, v7);
          uint64_t v62 = v53;
          uint64_t v63 = v52;
          uint64_t v64 = v51;
          uint64_t v65 = v50;
          if (v20 && sub_1006854C8(a1, (unsigned __int8 *)v88))
          {
            uint64_t v66 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138544642;
              *(void *)&uint8_t buf[4] = v7;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)int v90 = v65;
              *(_WORD *)&v90[4] = 1024;
              *(_DWORD *)&v90[6] = v64;
              *(_WORD *)&v90[10] = 1024;
              *(_DWORD *)int v91 = v63;
              *(_WORD *)&v91[4] = 1024;
              int v92 = v62;
              __int16 v93 = 1024;
              int v94 = v54;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "No locally initiated connection parameter update in progress and link is ready. Proceeding with subrating mode for device \"%{public}@\" subrateMin:%d subrateMax:%d maxLatency:%d continueationNumber=%d supervisionTimeout=%d", buf, 0x2Au);
            }
            sub_10003AFE8((uint64_t)v79);
            uint64_t v11 = sub_100685204(a1, v87, (v65 << 16) | (v64 << 32) | v63 | (v62 << 48), v54);
            goto LABEL_97;
          }
          *(void *)long long buf = &v87;
          int v67 = sub_1006AA938(v75, &v87, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
          v67[5] = (uint64_t *)((v50 << 16) | (v64 << 32) | v63 | (v62 << 48));
          *((_WORD *)v67 + 24) = v54;
          __int16 v68 = qword_100A19EF8;
          uint64_t v11 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_97;
          }
          BOOL v69 = sub_1006854C8(a1, (unsigned __int8 *)v88);
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v7;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)int v90 = v77;
          *(_WORD *)&v90[4] = 1024;
          *(_DWORD *)&v90[6] = v69;
          _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "For device \"%{public}@\" - Locally initiated connection parameter update in progress: %d. LE Link Ready: %d.", buf, 0x18u);
LABEL_96:
          uint64_t v11 = 0;
          goto LABEL_97;
        }
      }
      if (a3 != -11) {
        goto LABEL_96;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078F64C();
      }
LABEL_93:
      uint64_t v11 = 17;
      goto LABEL_97;
    }
    if (a4)
    {
      if (!sub_100225F4C(v87))
      {
LABEL_61:
        int v20 = 0;
        goto LABEL_62;
      }
    }
    else if (sub_100225F4C(v87))
    {
      goto LABEL_61;
    }
    unint64_t v21 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = sub_100304F74(a3);
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = v22;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)int v90 = v7;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Setting connection latency to \"%{public}s\" for device \"%{public}@\"", buf, 0x16u);
    }
    sub_1000305AC(buf, v7);
    int v76 = v19;
    if (a1 + 848 == sub_1006AA790(a1 + 840, buf))
    {
      int v35 = 0;
      uint64_t v33 = 0x60006001E0006;
      __int16 v34 = 4;
      int v32 = 2;
    }
    else
    {
      sub_1000305AC(buf, v7);
      v88[0] = buf;
      if (*((_DWORD *)sub_1006AA80C((uint64_t **)(a1 + 840), buf, (uint64_t)&unk_1007BE9D0, v88) + 11) != 2)
      {
        char v23 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT)) {
          sub_10078F6B8(v23, v24, v25, v26, v27, v28, v29, v30);
        }
      }
      sub_1000305AC(buf, v7);
      v88[0] = buf;
      int v31 = sub_1006AA80C((uint64_t **)(a1 + 840), buf, (uint64_t)&unk_1007BE9D0, v88);
      int v32 = *((_DWORD *)v31 + 11);
      uint64_t v33 = *(uint64_t *)((char *)v31 + 50);
      __int16 v34 = *((_WORD *)v31 + 30);
      int v35 = *((_DWORD *)v31 + 19);
    }
    unsigned int v36 = HIWORD(v86);
    unsigned int v74 = (unsigned __int16)v86;
    unsigned int v71 = HIWORD(v85);
    int v72 = (unsigned __int16)v85;
    char v78 = 0;
    sub_10001B8E0(&v78);
    sub_1000305AC(buf, v7);
    v88[0] = buf;
    uint64_t v37 = sub_1006AA80C((uint64_t **)(a1 + 840), buf, (uint64_t)&unk_1007BE9D0, v88);
    *((_DWORD *)v37 + 11) = v32;
    *((_WORD *)v37 + 24) = 256;
    *(uint64_t *)((char *)v37 + 50) = v33;
    *((_WORD *)v37 + 29) = v71;
    *((_WORD *)v37 + 30) = v34;
    *((_WORD *)v37 + 31) = v72;
    *((float *)v37 + 16) = (float)v36;
    *((float *)v37 + 17) = (float)v74;
    *((float *)v37 + 18) = (float)v74;
    *((_DWORD *)v37 + 19) = v35;
    uint64_t v38 = qword_100A19EF8;
    BOOL v39 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
    int v40 = (unsigned __int16)v84;
    int v41 = HIWORD(v84);
    if (v39)
    {
      *(_DWORD *)long long buf = 138544898;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)int v90 = v36;
      *(_WORD *)&v90[4] = 1024;
      *(_DWORD *)&v90[6] = v74;
      *(_WORD *)&v90[10] = 1024;
      *(_DWORD *)int v91 = v71;
      *(_WORD *)&v91[4] = 1024;
      int v92 = (unsigned __int16)v84;
      __int16 v93 = 1024;
      int v94 = HIWORD(v84);
      __int16 v95 = 1024;
      int v96 = v72;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Trying to update connection parameters for device \"%{public}@\" minInterval:%d maxInterval:%d peripheralLatency:%d minCE=%d maxCE=%d timeout:%d", buf, 0x30u);
    }
    int v19 = v76;
    int v42 = sub_100228C7C(v87, (int)((double)v36 / 1.25), (int)((double)v74 / 1.25), v71, (52429 * v72) >> 19, v40, v41);
    sub_10001B910(&v78);
    if (!v42)
    {
      if (v74 == 1000) {
        goto LABEL_59;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      if (!sub_1006C1CEC((uint64_t)off_1009F7ED8, v7))
      {
LABEL_59:
        uint64_t v44 = sub_10003FB34();
        (*(void (**)(uint64_t, unint64_t, BOOL, void))(*(void *)v44 + 1056))(v44, v87, v74 == 1000, 0);
      }
      sub_10001B8AC(&v78);
      goto LABEL_61;
    }
    if (v42 != 4170)
    {
      long long v43 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = v36;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v74;
        *(_WORD *)int v90 = 1024;
        *(_DWORD *)&v90[2] = v71;
        *(_WORD *)&v90[6] = 1024;
        *(_DWORD *)&v90[8] = v72;
        *(_WORD *)int v91 = 1024;
        *(_DWORD *)&v91[2] = v42;
        _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "Failed to update connection parameters with interval=(%d/%d) peripheralLatency=%d, timeout=%d, status=%{bluetooth:OI_STATUS}u", buf, 0x20u);
      }
    }
    sub_10001B8AC(&v78);
    uint64_t v11 = 914;
  }
LABEL_97:
  sub_10003AFB4((uint64_t)v79);

  return v11;
}

void sub_1006801D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100680240(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1006802C4;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1006802C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  int v3 = *(unsigned __int8 *)(v1 + 633);
  if (v2 != v3)
  {
    uint64_t v5 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      v14[0] = 67109376;
      v14[1] = v3;
      __int16 v15 = 1024;
      int v16 = v2;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low Power Mode has changed from %d to %d", (uint8_t *)v14, 0xEu);
      LOBYTE(v2) = *(unsigned char *)(a1 + 40);
    }
    *(unsigned char *)(v1 + 633) = v2;
    uint64_t v6 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 952))(v6))
    {
      uint64_t v7 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 344))(v7))
      {
        uint64_t v8 = *(const unsigned __int8 **)(v1 + 384);
        if (v8 != (const unsigned __int8 *)(v1 + 392))
        {
          do
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            BOOL v9 = off_1009F7ED8;
            uint64_t v10 = sub_100031234(v8 + 32);
            LODWORD(v9) = sub_1006BDD68((uint64_t)v9, v10);

            if (v9) {
              sub_10067F1E4(v1, *((void *)v8 + 6));
            }
            uint64_t v11 = (unsigned __int8 *)*((void *)v8 + 1);
            if (v11)
            {
              do
              {
                uint64_t v12 = (const unsigned __int8 **)v11;
                uint64_t v11 = *(unsigned __int8 **)v11;
              }
              while (v11);
            }
            else
            {
              do
              {
                uint64_t v12 = (const unsigned __int8 **)*((void *)v8 + 2);
                BOOL v13 = *v12 == v8;
                uint64_t v8 = (const unsigned __int8 *)v12;
              }
              while (!v13);
            }
            uint64_t v8 = (const unsigned __int8 *)v12;
          }
          while (v12 != (const unsigned __int8 **)(v1 + 392));
        }
      }
    }
  }
}

void sub_1006804D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006804E8(uint64_t a1, char a2)
{
}

void sub_100680508(uint64_t a1, long long *a2)
{
  long long v2 = a2[1];
  long long v5 = *a2;
  long long v6 = v2;
  uint64_t v3 = sub_100019878();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1006805AC;
  v4[3] = &unk_1009983C8;
  sub_100013018(v3, v4);
}

void sub_1006805AC(uint64_t a1)
{
  uint64_t v3 = a1 + 52;
  uint64_t v2 = *(void *)(a1 + 52);
  unsigned int v4 = *(unsigned __int8 *)(a1 + 40);
  long long v5 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
  {
    int v21 = *(unsigned __int16 *)(a1 + 42);
    int v22 = *(char *)(a1 + 46);
    int v23 = *(char *)(a1 + 45);
    int v24 = *(char *)(a1 + 44);
    *(_DWORD *)long long buf = 68159746;
    *(_DWORD *)&uint8_t buf[4] = 43;
    __int16 v26 = 2096;
    uint64_t v27 = a1 + 32;
    __int16 v28 = 1024;
    unsigned int v29 = v4;
    __int16 v30 = 1024;
    int v31 = v21;
    __int16 v32 = 1040;
    int v33 = 8;
    __int16 v34 = 2096;
    uint64_t v35 = v3;
    __int16 v36 = 1024;
    int v37 = v22;
    __int16 v38 = 1024;
    int v39 = v23;
    __int16 v40 = 1024;
    int v41 = v24;
    _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "aopRssiDetectEvent: AOPBTConnectionRSSIDetect entry, entry_buff:%.43P len:%d handle:0x%2X rssi:%.8P rssi:%d:%d:%d", buf, 0x40u);
    long long v5 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEBUG))
  {
    sub_10078F914(v5, v6, v7, v8, v9, v10, v11, v12);
    if (v4)
    {
LABEL_5:
      if (v4 < 0x20)
      {
        BOOL v13 = sub_100197864(*(unsigned __int16 *)(a1 + 42));
        uint64_t v14 = (uint64_t)v13;
        *(void *)long long buf = v2;
        char v15 = *(unsigned char *)(a1 + 44);
        char v16 = *(unsigned char *)(a1 + 45);
        uint64_t v17 = 1;
        int v18 = buf;
        char v19 = *(unsigned char *)(a1 + 46);
        do
        {
          if ((char)buf[v17] < (char)v2)
          {
            LOBYTE(v2) = buf[v17];
            int v18 = &buf[v17];
          }
          ++v17;
        }
        while (v17 != 8);
        char v20 = *(unsigned char *)(a1 + 51);
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
        }
        sub_100680814((uint64_t)v13, v14, 0, 0, 0, 0, (uint64_t)buf, 32, v15, v16, v19, *v18, 0, 0, 0, v20);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_10078F8AC();
      }
      return;
    }
  }
  else if (v4)
  {
    goto LABEL_5;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
    sub_10078F86C();
  }
}

void sub_100680814(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, __int16 a13, int a14, char a15, char a16)
{
  uint64_t v21 = sub_100019878();
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  v24[2] = sub_1006A271C;
  v24[3] = &unk_1009BDE08;
  int v25 = a3;
  int v26 = a4;
  int v27 = a5;
  int v28 = a6;
  uint8_t v24[4] = a2;
  v24[5] = a7;
  char v31 = a8;
  char v32 = a9;
  char v33 = a10;
  char v34 = a11;
  char v35 = a12;
  __int16 v30 = a13;
  int v29 = a14;
  char v36 = a15;
  char v37 = a16;
  sub_100013018(v21, v24);
}

uint64_t sub_100680938(uint64_t a1, uint64_t a2, int a3)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  uint64_t v6 = 224;
  if (a3) {
    uint64_t v6 = 192;
  }
  sub_1006809B8(a1 + v6, a2);
  return sub_10003AFB4((uint64_t)v8);
}

void sub_1006809A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1006809B8(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  long long v5 = *(char **)(a1 + 8);
  unsigned int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        long long v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1006A9EE8(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_100680A44(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 120);
  sub_100052718(a1 + 192, a2);
  sub_100052718(a1 + 224, a2);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100680AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100680AB4(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  unint64_t v10 = a3;
  long long v5 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = sub_100031234(a2);
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AutoReconnect - Added device \"%{public}@\" to connection filter accept list", buf, 0xCu);
  }
  if (a1 + 808 == sub_1006AA128(a1 + 800, a2))
  {
    uint64_t v8 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078F988(a2, v8);
    }
    uint64_t v9 = sub_100017768();
    sub_1005C99C8(v9, 1);
  }
  sub_1006AA1A4((uint64_t **)(a1 + 336), a2, a2);
  *(void *)long long buf = &v10;
  uint64_t v7 = sub_1006AA33C(a1 + 360, &v10, (uint64_t)&unk_1007BE9D0, (void **)buf);
  uuid_copy((unsigned __int8 *)v7 + 40, a2);
  if (!*(_DWORD *)(a1 + 864)) {
    sub_10067C934(a1, 1u);
  }
}

void sub_100680C1C(uint64_t a1, const unsigned __int8 *a2)
{
  unsigned int v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_10004191C(__p, (char *)out);
    if (v11 >= 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" to AddToFilterAcceptList list", out, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *(void **)(a1 + 768);
  uint64_t v7 = sub_100031234(a2);
  [v6 addObject:v7];

  uint64_t v8 = *(void **)(a1 + 776);
  uint64_t v9 = sub_100031234(a2);
  [v8 removeObject:v9];
}

void sub_100680D5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100680D78(uint64_t a1, const unsigned __int8 *a2)
{
  unsigned int v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_10004191C(__p, (char *)out);
    if (v11 >= 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" to RemoveFromFilterAcceptList list", out, 0xCu);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *(void **)(a1 + 776);
  uint64_t v7 = sub_100031234(a2);
  [v6 addObject:v7];

  uint64_t v8 = *(void **)(a1 + 768);
  uint64_t v9 = sub_100031234(a2);
  [v8 removeObject:v9];
}

void sub_100680EB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100680ED4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned int v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Connect called to \"%{public}@\"", buf, 0xCu);
  }
  v50[0] = 0;
  v50[1] = 0;
  sub_10003AED0((uint64_t)v50, a1 + 120);
  if (*(unsigned char *)(a1 + 1067))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078FAF4();
    }
    uint64_t v5 = 202;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    if (sub_1006BB9D4((uint64_t)off_1009F7ED8, v3))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v6 = sub_100030C6C((uint64_t)off_1009F7ED8, v3);
      BOOL v7 = v6 == 0;

      if (v7) {
        goto LABEL_16;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      sub_1006C6648((uint64_t)off_1009F7ED8, v3, 2u, (uint64_t)buf);
      uint64_t v8 = *(void *)&buf[16];
      sub_1000486F0((uint64_t)buf, *(void **)&buf[8]);
      if (v8)
      {
LABEL_16:
        sub_1000305AC(buf, v3);
        if (sub_10067E248((void *)a1, buf))
        {
          if (([*(id *)(a1 + 776) containsObject:v3] & 1) != 0
            || (sub_1000305AC(buf, v3), (sub_100681934(a1, buf) & 1) != 0))
          {
            uint64_t v9 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138543362;
              *(void *)&uint8_t buf[4] = v3;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "device \"%{public}@\" pending for removal from filter accept list after asked to disconnect, moving back to our connection list", buf, 0xCu);
            }
            [*(id *)(a1 + 776) removeObject:v3];
            [*(id *)(a1 + 744) removeObject:v3];
          }
          else
          {
            uint64_t v17 = qword_100A19EF8;
            uint64_t v5 = 0;
            if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_26;
            }
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v3;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Already trying to connect device \"%{public}@\"", buf, 0xCu);
          }
          uint64_t v5 = 0;
        }
        else
        {
          sub_1000305AC(buf, v3);
          if (sub_1000307A4(a1, buf))
          {
            sub_1000305AC(buf, v3);
            unsigned int v11 = sub_100681934(a1, buf);
            uint64_t v12 = qword_100A19EF8;
            BOOL v13 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
            if (v11)
            {
              if (v13)
              {
                *(_DWORD *)long long buf = 138543362;
                *(void *)&uint8_t buf[4] = v3;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" as it is already connected and in the process of disconnecting", buf, 0xCu);
              }
              uint64_t v5 = 310;
            }
            else
            {
              if (v13)
              {
                *(_DWORD *)long long buf = 138543362;
                *(void *)&uint8_t buf[4] = v3;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Cannot connect device \"%{public}@\" as it is already connected", buf, 0xCu);
              }
              uint64_t v5 = 311;
            }
          }
          else
          {
            uint64_t v14 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v15 = *(_DWORD *)(a1 + 864);
              if (v15 > 4) {
                char v16 = "UNKNOWN";
              }
              else {
                char v16 = (&off_1009BE3A8)[v15];
              }
              *(_DWORD *)long long buf = 136446466;
              *(void *)&uint8_t buf[4] = v16;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v15;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Current state when trying to connect %{public}s(%d)", buf, 0x12u);
            }
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            int v18 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v3);
            long long v48 = 0uLL;
            int v49 = 0;
            if (sub_1006819C4(a1, v18, (uint64_t)&v48) && _os_feature_enabled_impl())
            {
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
              }
              sub_1006C5F3C((uint64_t)off_1009F7ED8, v3, SBYTE8(v48));
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
              }
              sub_1006BF504((uint64_t)off_1009F7ED8, v3, v49);
              v46[0] = 0;
              v46[1] = 0;
              uint64_t v47 = 0;
              id v19 = [v3 UUIDString];
              sub_10004191C(v46, (char *)[v19 UTF8String]);

              *(void *)long long buf = v46;
              char v20 = sub_1006AA480((uint64_t **)(a1 + 1352), (const void **)v46, (uint64_t)&unk_1007BE9D0, (long long **)buf);
              *(_OWORD *)(v20 + 7) = v48;
              *((_DWORD *)v20 + 18) = v49;
              uint64_t v21 = qword_100A19EF8;
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
              {
                int v22 = SHIBYTE(v47);
                int v23 = (void **)v46[0];
                sub_100681DC4();
                int v24 = sub_10003D640(v18);
                int v25 = v46;
                if (v22 < 0) {
                  int v25 = v23;
                }
                if (v45 >= 0) {
                  p_p = &__p;
                }
                else {
                  p_p = __p;
                }
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = v25;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&unsigned char buf[14] = v24;
                *(_WORD *)&buf[22] = 2080;
                uint64_t v53 = p_p;
                _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "connScanUseCaseEntryCoex at connect: device %s useCase %s useCaseEntryCoex %s", buf, 0x20u);
                if (v45 < 0) {
                  operator delete(__p);
                }
              }
              if (SHIBYTE(v47) < 0) {
                operator delete(v46[0]);
              }
            }
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            int v27 = sub_1006C269C((uint64_t)off_1009F7ED8, v3);
            int v28 = [v27 cuFilteredArrayUsingBlock:&stru_1009BD9D8];

            long long v42 = 0u;
            long long v43 = 0u;
            long long v40 = 0u;
            long long v41 = 0u;
            id v29 = v28;
            id v30 = [v29 countByEnumeratingWithState:&v40 objects:v51 count:16];
            if (v30)
            {
              uint64_t v31 = *(void *)v41;
              do
              {
                char v32 = 0;
                do
                {
                  if (*(void *)v41 != v31) {
                    objc_enumerationMutation(v29);
                  }
                  char v33 = *(void **)(*((void *)&v40 + 1) + 8 * (void)v32);
                  if (qword_1009F8158 != -1) {
                    dispatch_once(&qword_1009F8158, &stru_1009BE158);
                  }
                  sub_1004FF190((uint64_t)off_1009F8150, [v33 integerValue]);
                  char v32 = (char *)v32 + 1;
                }
                while (v30 != v32);
                id v30 = [v29 countByEnumeratingWithState:&v40 objects:v51 count:16];
              }
              while (v30);
            }

            if (*(_DWORD *)(a1 + 928))
            {
              sub_1000305AC(buf, v3);
              sub_100680C1C(a1, buf);
              uint64_t v5 = 0;
            }
            else
            {
              switch(*(_DWORD *)(a1 + 864))
              {
                case 0:
                  char v34 = qword_100A19EF8;
                  if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_89;
                  }
                  *(_WORD *)long long buf = 0;
                  char v35 = "Adding device to connecting list";
                  goto LABEL_88;
                case 1:
                  char v36 = qword_100A19EF8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Lets wait for the controller, cancelling", buf, 2u);
                  }
                  if (sub_10067C23C(a1, 1)) {
                    goto LABEL_89;
                  }
                  goto LABEL_92;
                case 2:
                  char v37 = qword_100A19EF8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "will add the device to connecting list once we're done with the pending cancelation", buf, 2u);
                  }
                  goto LABEL_92;
                case 3:
                  char v34 = qword_100A19EF8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)long long buf = 0;
                    char v35 = "adding the device to connecting list , will wait for cancelation to complete before trying to connect to it.";
LABEL_88:
                    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v35, buf, 2u);
                  }
LABEL_89:
                  uint64_t v5 = sub_100681FF4(a1, v3);
                  goto LABEL_94;
                case 4:
                  __int16 v38 = qword_100A19EF8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)long long buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "will add the device to connecting list once we're done with auto reconnecct", buf, 2u);
                  }
LABEL_92:
                  sub_1000305AC(buf, v3);
                  sub_100680C1C(a1, buf);
                  goto LABEL_93;
                default:
LABEL_93:
                  uint64_t v5 = 0;
LABEL_94:
                  uint64_t v39 = sub_100019878();
                  sub_100013018(v39, &stru_1009BD9F8);
                  break;
              }
            }
          }
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
          sub_10078FA1C();
        }
        uint64_t v5 = 149;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078FA88();
      }
      uint64_t v5 = 8;
    }
  }
LABEL_26:
  sub_10003AFB4((uint64_t)v50);

  return v5;
}

void sub_10068186C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  sub_10003AFB4((uint64_t)&a30);
  _Unwind_Resume(a1);
}

id sub_100681934(uint64_t a1, const unsigned __int8 *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  unsigned int v4 = *(void **)(a1 + 744);
  uint64_t v5 = sub_100031234(a2);
  id v6 = [v4 containsObject:v5];

  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_1006819A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006819C4(uint64_t a1, int a2, uint64_t a3)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 120);
  if ((a2 & 0xFFFF0000) == 0x10000) {
    uint64_t v6 = 63;
  }
  else {
    uint64_t v6 = 0;
  }
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BE158);
  }
  unint64_t v7 = sub_100053CC0((uint64_t)off_1009F8150, v6, 1u);
  uint64_t v8 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = sub_10003D640(a2);
    unint64_t v10 = "Yes";
    buf[0] = 136447746;
    *(void *)&buf[1] = v9;
    LOWORD(buf[3]) = 2082;
    if ((v7 & 4) != 0) {
      unsigned int v11 = "Yes";
    }
    else {
      unsigned int v11 = "No";
    }
    *(void *)((char *)&buf[3] + 2) = v11;
    HIWORD(buf[5]) = 2048;
    if ((v7 & 2) != 0) {
      uint64_t v12 = "Yes";
    }
    else {
      uint64_t v12 = "No";
    }
    *(void *)&buf[6] = v6;
    if (v7) {
      BOOL v13 = "Yes";
    }
    else {
      BOOL v13 = "No";
    }
    LOWORD(buf[8]) = 2082;
    if ((v7 & 8) == 0) {
      unint64_t v10 = "No";
    }
    *(void *)((char *)&buf[8] + 2) = v12;
    HIWORD(buf[10]) = 2082;
    *(void *)&buf[11] = v13;
    LOWORD(buf[13]) = 2082;
    *(void *)((char *)&buf[13] + 2) = v10;
    HIWORD(buf[15]) = 2048;
    *(void *)&long long v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "getConnScanUseCaseEntryCoex for useCase %{public}s WiFi Coex Critical %{public}s (0x%llx) WiFi assoc 2.4GHz %{public}s BT Audio Active %{public}s HRB %{public}s coexState 0x%llx", (uint8_t *)buf, 0x48u);
  }
  int v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  memset(buf, 0, sizeof(buf));
  unsigned int v14 = sub_1006A314C(a1, a2, (uint64_t)buf);
  if (v7 < 0x10) {
    uint64_t v15 = v14;
  }
  else {
    uint64_t v15 = 0;
  }
  if (v15 == 1)
  {
    if (LOBYTE(buf[0])) {
      unint64_t v16 = v7;
    }
    else {
      unint64_t v16 = 0;
    }
    uint64_t v17 = &buf[5 * v16];
    *(_DWORD *)(a3 + 16) = v17[5];
    *(_OWORD *)a3 = *(_OWORD *)(v17 + 1);
  }
  sub_10003AFB4((uint64_t)v19);
  return v15;
}

void sub_100681BDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100681DC4()
{
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__p = 0u;
  long long v7 = 0u;
  memset(v5, 0, sizeof(v5));
  sub_1000419CC((uint64_t)v5);
  sub_10003AB28((uint64_t)v5);
  uint64_t v0 = std::ostream::operator<<();
  sub_10003AB28(v0);
  uint64_t v1 = std::ostream::operator<<();
  sub_10003AB28(v1);
  uint64_t v2 = std::ostream::operator<<();
  sub_10003AB28(v2);
  uint64_t v3 = std::ostream::operator<<();
  sub_10003AB28(v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100681F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_100681FA4(id a1, NSNumber *a2)
{
  uint64_t v2 = a2;
  if ([(NSNumber *)v2 integerValue] <= 0) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = v2;
  }
  unsigned int v4 = v3;

  return v4;
}

void sub_100681FE4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100681FF4(uint64_t a1, void *a2)
{
  id v5 = a2;
  v138[0] = 0;
  v138[1] = 0;
  sub_10003AED0((uint64_t)v138, a1 + 120);
  __int16 v136 = 0;
  char v135 = 0;
  v137[0] = 0;
  *(_DWORD *)((char *)v137 + 3) = 0;
  if (*(unsigned char *)(a1 + 832) && *(void *)(a1 + 352) >= (unint64_t)*(unsigned __int8 *)(a1 + 832)) {
    goto LABEL_99;
  }
  if (!*(unsigned char *)(a1 + 184)) {
    goto LABEL_88;
  }
  if (sub_10068D238(a1, v5))
  {
    uint64_t v6 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: LeConnectionDenyList: Device %{public}@ is currently blocked, ignoring request", buf, 0xCu);
    }
LABEL_7:
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078FC30();
    }
    long long v7 = (id *)(a1 + 760);
LABEL_102:
    [*v7 addObject:v5];
LABEL_103:
    if (_os_feature_enabled_impl())
    {
      v148 = 0;
      uint64_t v149 = 0;
      uint64_t v150 = 0;
      id v39 = [v5 UUIDString];
      sub_10004191C(&v148, (char *)[v39 UTF8String]);

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      int v40 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v5);
      if ((v40 - 0x10000) <= 0x19 && ((1 << v40) & 0x37800FF) != 0)
      {
        sub_1000305AC(buf, v5);
        long long v41 = (uint64_t **)(a1 + 608);
        if (a1 + 616 == sub_1006AAB38(a1 + 608, buf))
        {
          if (a1 + 1360 == sub_10003156C(a1 + 1352, (const void **)&v148))
          {
            uint64_t v52 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
              sub_10078FB9C(v40, (uint64_t)v5, v52);
            }
          }
          else
          {
            *(void *)long long buf = &v148;
            long long v43 = sub_1006AA480((uint64_t **)(a1 + 1352), (const void **)&v148, (uint64_t)&unk_1007BE9D0, (long long **)buf);
            long long v112 = *(_OWORD *)(v43 + 7);
            int v113 = *((_DWORD *)v43 + 18);
            int v44 = v112;
            int v45 = DWORD1(v112);
            unsigned int v46 = HIDWORD(v112);
            if (v112 || __PAIR64__(DWORD1(v112), 0) != HIDWORD(v112))
            {
              memset(v139, 0, 24);
              id v47 = v5;
              *(void *)long long buf = v47;
              *(_DWORD *)&uint8_t buf[8] = v44;
              *(_DWORD *)&unsigned char buf[12] = v45;
              *(void *)&_DWORD buf[16] = v46;
              *(_DWORD *)int v141 = v40;
              v111[0] = _NSConcreteStackBlock;
              v111[1] = 3221225472;
              v111[2] = sub_1006A1A64;
              v111[3] = &unk_1009BDE88;
              v111[4] = a1;
              *(void *)&v141[8] = objc_retainBlock(v111);
              sub_1006A1918((uint64_t *)v139, (uint64_t *)buf);

              if (qword_1009F8158 != -1) {
                dispatch_once(&qword_1009F8158, &stru_1009BE158);
              }
              long long v48 = off_1009F8150;
              memset(v110, 0, sizeof(v110));
              sub_1006AC2CC(v110, *(uint64_t *)v139, *(uint64_t *)&v139[8], 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v139[8] - *(void *)v139) >> 3));
              sub_1004FD284((uint64_t)v48, v110);
              *(void *)long long buf = v110;
              sub_1006AC118((void ***)buf);
              sub_1000305AC(buf, v47);
              sub_1006AC014(v41, buf, buf);
              int v49 = qword_100A19EF8;
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
              {
                sub_100681DC4();
                uint64_t v50 = sub_10003D640(v40);
                uint64_t v51 = v109 >= 0 ? v108 : (void **)v108[0];
                *(_DWORD *)long long buf = 138543874;
                *(void *)&uint8_t buf[4] = v47;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&unsigned char buf[14] = v50;
                *(_WORD *)&buf[22] = 2080;
                *(void *)int v141 = v51;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "requestConnectionScanRxThreshold for device \"%{public}@\" useCase %s params %s", buf, 0x20u);
                if (v109 < 0) {
                  operator delete(v108[0]);
                }
              }
              *(void *)long long buf = v139;
              sub_1006AC118((void ***)buf);
            }
          }
        }
      }
      if (SHIBYTE(v150) < 0) {
        operator delete(v148);
      }
    }
    uint64_t v30 = 0;
    goto LABEL_112;
  }
  if (!*(unsigned char *)(a1 + 184)) {
    goto LABEL_88;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  long long v8 = off_1009F7ED8;
  sub_10004191C(__p, "PairedUsingRSA");
  if (sub_100030A04((uint64_t)v8, v5, (uint64_t)__p))
  {
    uint64_t v9 = sub_100035F54();
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 384))(v9);
  }
  else
  {
    int v10 = 0;
  }
  if (v134 < 0) {
    operator delete(__p[0]);
  }
  long long v11 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    long long v12 = "NO";
    if (v10) {
      long long v12 = "YES";
    }
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "MUC - Adding device \"%{public}@\" to connection filter accept list supportsVAPairing:%{public}s, waiting for controller to complete.", buf, 0x16u);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  if (!sub_1006BB9D4((uint64_t)off_1009F7ED8, v5))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078FA88();
    }
    uint64_t v30 = 8;
    goto LABEL_112;
  }
  v148 = 0;
  uint64_t v149 = 0;
  uint64_t v150 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  sub_1006C64DC((uint64_t)off_1009F7ED8, v5, (uint64_t)&v148);
  long long v13 = v148;
  if (v148 == &v149)
  {
LABEL_43:
    sub_1000305AC(buf, v5);
    if (a1 + 344 != sub_1006AAB38(a1 + 336, buf) && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT)) {
      sub_10078FC9C();
    }
    sub_1000305AC(buf, v5);
    sub_1006AC014((uint64_t **)(a1 + 336), buf, buf);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    if (sub_1006C5D78((uint64_t)off_1009F7ED8, v5))
    {
      uint64_t v25 = sub_10003FB34();
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v26 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 3400))(v25, v26);
    }
    sub_1000486F0((uint64_t)&v148, v149);
    goto LABEL_53;
  }
  if (v10) {
    long long v14 = "YES";
  }
  else {
    long long v14 = "NO";
  }
  while (1)
  {
    long long v15 = (void *)v13[4];
    v108[0] = v15;
    long long v16 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1006AD3F0();
      id v17 = (id)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138544131;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&unsigned char buf[12] = 2160;
      *(void *)&unsigned char buf[14] = 1752392040;
      *(_WORD *)&buf[22] = 2113;
      *(void *)int v141 = v17;
      *(_WORD *)&v141[8] = 2080;
      *(void *)&v141[10] = v14;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "MUC - Adding device \"%{public}@\" with address \"%{private, mask.hash}@\" to connection filter accept list supportsVAPairing:%s, waiting for controller to complete.", buf, 0x2Au);

      long long v15 = v108[0];
    }
    int v18 = sub_10068CE90(a1, (unint64_t)v15);
    int v19 = v18;
    if (!v18) {
      goto LABEL_37;
    }
    if (v18 != 4152) {
      break;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      char v20 = sub_1006AD3F0();
      sub_10078FD78(v20, &v146, &v147);
    }
LABEL_37:
    sub_1000305AC(buf, v5);
    *(void *)v139 = v108;
    long long v21 = sub_1006AA33C(a1 + 360, (unint64_t *)v108, (uint64_t)&unk_1007BE9D0, (void **)v139);
    uuid_copy((unsigned __int8 *)v21 + 40, buf);
    long long v22 = (void *)v13[1];
    if (v22)
    {
      do
      {
        long long v23 = (void **)v22;
        long long v22 = (void *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        long long v23 = (void **)v13[2];
        BOOL v24 = *v23 == v13;
        long long v13 = v23;
      }
      while (!v24);
    }
    long long v13 = v23;
    if (v23 == &v149) {
      goto LABEL_43;
    }
  }
  long long v31 = *(uint64_t **)(a1 + 360);
  if (v31 != (uint64_t *)(a1 + 368))
  {
    do
    {
      sub_1000305AC(buf, v5);
      uint64_t v32 = uuid_compare((const unsigned __int8 *)v31 + 40, buf);
      if (v32)
      {
        long long v33 = (uint64_t *)v31[1];
        if (v33)
        {
          do
          {
            long long v34 = v33;
            long long v33 = (uint64_t *)*v33;
          }
          while (v33);
        }
        else
        {
          do
          {
            long long v34 = (uint64_t *)v31[2];
            BOOL v24 = *v34 == (void)v31;
            long long v31 = v34;
          }
          while (!v24);
        }
      }
      else
      {
        int v35 = sub_10068CCD0(v32, v31[4]);
        long long v36 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v35;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "removeAddressFromBTController returned %d", buf, 8u);
        }
        long long v34 = sub_10004D3B8((uint64_t **)(a1 + 360), v31);
        operator delete(v31);
      }
      long long v31 = v34;
    }
    while (v34 != (uint64_t *)(a1 + 368));
  }
  sub_1000486F0((uint64_t)&v148, v149);
  if (v19 > 103)
  {
    if (v19 != 104)
    {
      if (v19 != 160) {
        goto LABEL_96;
      }
      goto LABEL_7;
    }
LABEL_99:
    __int16 v38 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Added device \"%{public}@\" to connection overflow list", buf, 0xCu);
    }
    long long v7 = (id *)(a1 + 752);
    goto LABEL_102;
  }
  if (!v19)
  {
LABEL_53:
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    sub_1006C2D6C((uint64_t)off_1009F7ED8, v5, (uint64_t)buf);
    if (!*(void *)buf && !*(void *)&buf[8])
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      sub_1006C2A54((uint64_t)off_1009F7ED8, v5);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    sub_1006C1348((uint64_t)off_1009F7ED8, v5, 1);
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009BE198);
    }
    sub_10073676C(qword_1009FB268, v5, 1);
    unsigned __int8 v132 = 2;
    unsigned __int8 v131 = 12;
    LOWORD(v112) = 12;
    unsigned __int16 v130 = 12;
    unsigned __int16 v129 = 200;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    int v27 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v5);
    int v28 = v27;
    switch(v27)
    {
      case 196608:
        goto LABEL_69;
      case 257:
        char v37 = 0;
        LOWORD(v112) = 12;
        unsigned __int16 v130 = 12;
LABEL_141:
        int v55 = 1;
        goto LABEL_144;
      case 19:
LABEL_69:
        LOWORD(v112) = *(_WORD *)(a1 + 1104);
        unsigned __int16 v130 = *(_WORD *)(a1 + 1106);
        unsigned __int8 v132 = *(unsigned char *)(a1 + 1108);
        char v29 = *(unsigned char *)(a1 + 1109);
        break;
      default:
        sub_1000305AC(buf, v5);
        if (sub_100685B10(a1, buf))
        {
          char v29 = 6;
        }
        else
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          uint64_t v53 = off_1009F7ED8;
          sub_10004191C(v127, "FastConnection");
          int v54 = sub_100030A04((uint64_t)v53, v5, (uint64_t)v127);
          if (v128 < 0) {
            operator delete(v127[0]);
          }
          if (!v54)
          {
            if (v28 == 18)
            {
              unsigned __int8 v132 = 2;
              unsigned __int8 v131 = 4;
              LOWORD(v112) = 23;
              unsigned __int16 v130 = 23;
              *(_DWORD *)v139 = 0;
              uint64_t v84 = sub_100017768();
              sub_10004191C(buf, "LE");
              sub_10004191C(&v148, "SRPipeMinConInt");
              int v85 = (*(uint64_t (**)(uint64_t, uint8_t *, void ***, uint8_t *))(*(void *)v84 + 88))(v84, buf, &v148, v139);
              if (*(int *)v139 > 0) {
                int v86 = v85;
              }
              else {
                int v86 = 0;
              }
              if (SHIBYTE(v150) < 0) {
                operator delete(v148);
              }
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              if (v86)
              {
                unint64_t v87 = qword_100A19EF8;
                BOOL v88 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
                __int16 v89 = *(_WORD *)v139;
                if (v88)
                {
                  *(_DWORD *)long long buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = *(_DWORD *)v139;
                  _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) SRPipe min connection interval", buf, 8u);
                  __int16 v89 = *(_WORD *)v139;
                }
                LOWORD(v112) = v89;
              }
              LODWORD(v108[0]) = 0;
              uint64_t v90 = sub_100017768();
              sub_10004191C(buf, "LE");
              sub_10004191C(&v148, "SRPipeMaxConInt");
              int v91 = (*(uint64_t (**)(uint64_t, uint8_t *, void ***, void **))(*(void *)v90 + 88))(v90, buf, &v148, v108);
              if (SLODWORD(v108[0]) > 0) {
                int v92 = v91;
              }
              else {
                int v92 = 0;
              }
              if (SHIBYTE(v150) < 0) {
                operator delete(v148);
              }
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              if (v92)
              {
                __int16 v93 = qword_100A19EF8;
                BOOL v94 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
                unsigned __int16 v95 = (unsigned __int16)v108[0];
                if (v94)
                {
                  *(_DWORD *)long long buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v108[0];
                  _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) SRPipe max connection interval", buf, 8u);
                  unsigned __int16 v95 = (unsigned __int16)v108[0];
                }
                unsigned __int16 v130 = v95;
              }
              char v126 = 0;
              uint64_t v96 = sub_100017768();
              sub_10004191C(buf, "LE");
              sub_10004191C(&v148, "SRPipeSpecialParamsOff");
              int v97 = (*(uint64_t (**)(uint64_t, uint8_t *, void ***, char *))(*(void *)v96 + 72))(v96, buf, &v148, &v126);
              if (v126) {
                int v98 = v97;
              }
              else {
                int v98 = 0;
              }
              if (SHIBYTE(v150) < 0) {
                operator delete(v148);
              }
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              if (v98)
              {
                unsigned int v99 = qword_100A19EF8;
                if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "Warning: Disabling special SRPipe connection intervals", buf, 2u);
                }
                LOWORD(v112) = 12;
                unsigned __int16 v130 = 12;
              }
              char v37 = 0;
              int v55 = v98 ^ 1;
              goto LABEL_144;
            }
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            if (sub_1006BEF0C((uint64_t)off_1009F7ED8, v5))
            {
              int v55 = 0;
            }
            else
            {
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
              }
              int v105 = off_1009F7ED8;
              sub_10004191C(v124, "requiresCTOFix");
              int v55 = sub_100030A04((uint64_t)v105, v5, (uint64_t)v124);
              if (v125 < 0) {
                operator delete(v124[0]);
              }
              if (v55)
              {
                unsigned __int16 v129 = 300;
                goto LABEL_135;
              }
            }
LABEL_136:
            if ((v28 & 0xFFFF0000) == 0x10000)
            {
              if (_os_feature_enabled_impl())
              {
                unint64_t v56 = qword_100A19EF8;
                if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)&uint8_t buf[4] = v5;
                  _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "device \"%{public}@\" Using Tx Boosted power for LE Connection ", buf, 0xCu);
                }
                char v37 = 1;
                __int16 v136 = 257;
                char v135 = 1;
                goto LABEL_141;
              }
              char v37 = 1;
            }
            else
            {
              char v37 = 0;
            }
LABEL_144:
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            int v57 = sub_1006C89E4((uint64_t)off_1009F7ED8, v5, &v132, &v131, &v112, &v130, &v129, (unsigned char *)&v136 + 1, &v136, &v135);
            unint64_t v58 = qword_100A19EF8;
            if (v57)
            {
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 138543362;
                *(void *)&uint8_t buf[4] = v5;
                _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "device \"%{public}@\" has override connection params", buf, 0xCu);
                unint64_t v58 = qword_100A19EF8;
              }
              int v55 = 1;
            }
            if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
            {
              int v59 = v132;
              int v60 = v131;
              LOWORD(v3) = v112;
              LOWORD(v2) = v130;
              sub_1000305AC(&v148, v5);
              unsigned int v61 = sub_100685B10(a1, (const unsigned __int8 *)&v148);
              *(_DWORD *)long long buf = 138544898;
              *(void *)&uint8_t buf[4] = v5;
              *(_WORD *)&unsigned char buf[12] = 1024;
              uint64_t v62 = "NO";
              if (v61) {
                uint64_t v62 = "YES";
              }
              *(_DWORD *)&unsigned char buf[14] = v59;
              *(_WORD *)&buf[18] = 1024;
              *(_DWORD *)&buf[20] = v60;
              *(_WORD *)int v141 = 2048;
              *(double *)&v141[2] = (double)v3 * 1.25;
              *(_WORD *)&v141[10] = 2048;
              *(double *)&v141[12] = (double)v2 * 1.25;
              __int16 v142 = 1024;
              int v143 = v55;
              __int16 v144 = 2082;
              int v145 = v62;
              _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Added device \"%{public}@\" to connection filter accept list with CE min %d, max %d, connectionInterval min:%f ms max:%f ms WLParams %d, LowLatency %{public}s", buf, 0x3Cu);
            }
            v148 = 0;
            uint64_t v149 = 0;
            uint64_t v150 = 0;
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            sub_1006C64DC((uint64_t)off_1009F7ED8, v5, (uint64_t)&v148);
            char v63 = v37 ^ 1;
            if (!*(unsigned char *)(a1 + 1110)) {
              char v63 = 1;
            }
            if (v63)
            {
              if (!v55)
              {
LABEL_173:
                uint64_t v79 = sub_10003FB34();
                if (sub_100354F18(v79, 3)
                  || *(unsigned char *)(a1 + 1119)
                  && (uint64_t v80 = sub_10003FB34(), (*(unsigned int (**)(uint64_t))(*(void *)v80 + 2624))(v80)))
                {
                  if (sub_100679324(a1, v5))
                  {
                    memset(buf, 0, sizeof(buf));
                    id v81 = [v5 UUIDString];
                    sub_10004191C(buf, (char *)[v81 UTF8String]);

                    if ((char)buf[23] < 0)
                    {
                      sub_10003B098(&__dst, *(void **)buf, *(unint64_t *)&buf[8]);
                    }
                    else
                    {
                      long long __dst = *(_OWORD *)buf;
                      uint64_t v123 = *(void *)&buf[16];
                    }
                    sub_1006A01FC((void *)a1);
                    uint64_t v82 = sub_10003156C(a1 + 1184, (const void **)&__dst);
                    uint64_t v83 = a1 + 1192;
                    if (SHIBYTE(v123) < 0) {
                      operator delete((void *)__dst);
                    }
                    if (v83 == v82)
                    {
                      if ((char)buf[23] < 0)
                      {
                        sub_10003B098(&v120, *(void **)buf, *(unint64_t *)&buf[8]);
                      }
                      else
                      {
                        long long v120 = *(_OWORD *)buf;
                        uint64_t v121 = *(void *)&buf[16];
                      }
                      sub_1006A0388(a1, &v120, 0);
                      if (SHIBYTE(v121) < 0) {
                        operator delete((void *)v120);
                      }
                    }
                    else
                    {
                      sub_10067EF58(a1, v5);
                    }
                    char v100 = qword_100A19EF8;
                    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                    {
                      if ((char)buf[23] < 0)
                      {
                        int v101 = *(uint8_t **)buf;
                        sub_10003B098(&v118, *(void **)buf, *(unint64_t *)&buf[8]);
                      }
                      else
                      {
                        long long v118 = *(_OWORD *)buf;
                        uint64_t v119 = *(void *)&buf[16];
                        int v101 = buf;
                      }
                      uint64_t v102 = sub_10003156C(a1 + 1184, (const void **)&v118);
                      int v103 = v83 == v102 ? 2 : *(_DWORD *)(v102 + 56);
                      *(_DWORD *)v139 = 136446466;
                      *(void *)&v139[4] = v101;
                      *(_WORD *)&v139[12] = 1024;
                      *(_DWORD *)&v139[14] = v103;
                      _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "RSSI threshold state for %{public}s is %d", v139, 0x12u);
                      if (SHIBYTE(v119) < 0) {
                        operator delete((void *)v118);
                      }
                    }
                    if ((char)buf[23] < 0) {
                      operator delete(*(void **)buf);
                    }
                  }
                  sub_10068B8C4(a1, v5, 0);
                }
                if (*(unsigned char *)(a1 + 1119))
                {
                  uint64_t v104 = sub_10003FB34();
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v104 + 2624))(v104)) {
                    sub_10067B1E8(a1, v5, *(unsigned char *)(a1 + 736), 0);
                  }
                }
                sub_1000486F0((uint64_t)&v148, v149);
                goto LABEL_103;
              }
            }
            else
            {
              unsigned int v64 = *(unsigned __int16 *)(a1 + 1112);
              LOWORD(v112) = *(_WORD *)(a1 + 1112);
              unsigned int v65 = *(unsigned __int16 *)(a1 + 1114);
              unsigned __int16 v130 = *(_WORD *)(a1 + 1114);
              uint64_t v66 = qword_100A19EF8;
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
              {
                int v67 = v132;
                int v68 = v131;
                sub_1000305AC(v139, v5);
                unsigned int v69 = sub_100685B10(a1, v139);
                *(_DWORD *)long long buf = 138544898;
                int v70 = "NO";
                if (v69) {
                  int v70 = "YES";
                }
                *(void *)&uint8_t buf[4] = v5;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)&unsigned char buf[14] = v67;
                *(_WORD *)&buf[18] = 1024;
                *(_DWORD *)&buf[20] = v68;
                *(_WORD *)int v141 = 2048;
                *(double *)&v141[2] = (double)v64 * 1.25;
                *(_WORD *)&v141[10] = 2048;
                *(double *)&v141[12] = (double)v65 * 1.25;
                __int16 v142 = 1024;
                int v143 = 1;
                __int16 v144 = 2082;
                int v145 = v70;
                _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Added device \"%{public}@\" to connection filter accept list with CE min %d, max %d, connectionInterval min:%f ms max:%f ms WLParams %d, LowLatency %{public}s (overridden for FindMy)", buf, 0x3Cu);
              }
            }
            unsigned int v71 = v148;
            if (v148 != &v149)
            {
              do
              {
                unint64_t v72 = v71[4];
                *(_DWORD *)&v139[3] = 0;
                *(_DWORD *)v139 = 0;
                uint64_t v73 = sub_1002284B8(v72);
                *(_DWORD *)v139 = v73;
                v139[6] = BYTE6(v73);
                *(_WORD *)&v139[4] = WORD2(v73);
                uint64_t v74 = sub_10003FB34();
                BYTE2(v107) = v135;
                LOBYTE(v107) = HIBYTE(v136);
                BYTE1(v107) = v136;
                LOWORD(v106) = v131;
                int v75 = (*(uint64_t (**)(uint64_t, uint8_t *, uint64_t, void, void, void, void, void, int, _DWORD *, _DWORD, void, int, void))(*(void *)v74 + 3584))(v74, v139, 1, (unsigned __int16)v112, v130, 0, v129, v132, v106, v137, 0, 0, v107, 0);
                int v76 = qword_100A19EF8;
                if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v75;
                  _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "addDeviceToFilterAcceptListUnified returned %d", buf, 8u);
                }
                int v77 = (void *)v71[1];
                if (v77)
                {
                  do
                  {
                    char v78 = (void **)v77;
                    int v77 = (void *)*v77;
                  }
                  while (v77);
                }
                else
                {
                  do
                  {
                    char v78 = (void **)v71[2];
                    BOOL v24 = *v78 == v71;
                    unsigned int v71 = v78;
                  }
                  while (!v24);
                }
                unsigned int v71 = v78;
              }
              while (v78 != &v149);
            }
            goto LABEL_173;
          }
          char v29 = 4;
        }
        unsigned __int8 v132 = v29;
        break;
    }
    unsigned __int8 v131 = v29;
LABEL_135:
    int v55 = 1;
    goto LABEL_136;
  }
  if (v19 == 103)
  {
LABEL_88:
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078FB28();
    }
    v116[0] = _NSConcreteStackBlock;
    v116[1] = 3221225472;
    v116[2] = sub_1006A18B0;
    v116[3] = &unk_1009BDB30;
    id v117 = v5;
    sub_10067762C((os_unfair_lock_s *)a1, v116);

    uint64_t v30 = 202;
    goto LABEL_112;
  }
LABEL_96:
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
    sub_10078FD04();
  }
  v114[0] = _NSConcreteStackBlock;
  v114[1] = 3221225472;
  v114[2] = sub_1006A18E4;
  v114[3] = &unk_1009BDB30;
  id v115 = v5;
  sub_10067762C((os_unfair_lock_s *)a1, v114);

  uint64_t v30 = 1;
LABEL_112:
  sub_10003AFB4((uint64_t)v138);

  return v30;
}

void sub_10068393C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61,uint64_t a62,uint64_t a63)
{
  if (a61 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a72);

  _Unwind_Resume(a1);
}

void sub_100683B60(id a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v1 = off_1009F7EB8;

  sub_100683BB4((uint64_t)v1);
}

uint64_t sub_100683BB4(uint64_t a1)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  unsigned int v2 = *(_DWORD *)(a1 + 928);
  if (v2)
  {
    unint64_t v3 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(int *)(a1 + 864);
      if (v4 > 4) {
        id v5 = "UNKNOWN";
      }
      else {
        id v5 = (&off_1009BE3A8)[v4];
      }
      if (v2 > 3) {
        uint64_t v6 = "UNKNOWN";
      }
      else {
        uint64_t v6 = off_1009BE2A0[v2 - 1];
      }
      *(_DWORD *)long long buf = 136446466;
      int v10 = v5;
      __int16 v11 = 2082;
      long long v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Not processing outgoing connections. LE Connection State=%{public}s LE Connection Manager State=%{public}s", buf, 0x16u);
    }
  }
  else
  {
    sub_10068A59C(a1);
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_100683CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100683CFC(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  uint64_t v6 = qword_100A19F38;
  if (os_log_type_enabled((os_log_t)qword_100A19F38, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10004191C(__p, out);
    long long v7 = v33 >= 0 ? __p : (void **)__p[0];
    long long v8 = a3 > 0xA ? "unknown" : (&off_1009BE3D0)[a3];
    *(_DWORD *)uuid_string_t out = 136446466;
    *(void *)&out[4] = v7;
    *(_WORD *)&out[12] = 2082;
    *(void *)&out[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Device disconnecting - {cbuuid: %{public}s, ledisconnectionreason: %{public}s}", (uint8_t *)out, 0x16u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_100681934(a1, a2))
  {
    uint64_t v9 = qword_100A19EF8;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v10) {
      return result;
    }
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10004191C(__p, out);
    if (v33 >= 0) {
      long long v12 = __p;
    }
    else {
      long long v12 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Already trying to disconnect device \"%{public}s\"", (uint8_t *)out, 0xCu);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  if ((sub_10067E248((void *)a1, a2) & 1) != 0 || sub_1000307A4(a1, a2))
  {
    *(void *)uuid_string_t out = 0;
    *(void *)&out[8] = 0;
    uuid_copy((unsigned __int8 *)out, a2);
    __p[0] = a2;
    *((_DWORD *)sub_1006AA5DC((uint64_t **)(a1 + 456), a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)__p)+ 11) = a3;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    long long v13 = off_1009F7ED8;
    long long v14 = sub_100031234(a2);
    unsigned int v15 = sub_1006BDC1C((uint64_t)v13, v14);

    if (v15)
    {
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BE158);
      }
      sub_1004FF278((uint64_t)off_1009F8150, v15);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    long long v16 = off_1009F7ED8;
    id v17 = sub_100031234(a2);
    int v18 = sub_1006C269C((uint64_t)v16, v17);
    int v19 = [v18 cuFilteredArrayUsingBlock:&stru_1009BDA18];

    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    id v20 = v19;
    id v21 = [v20 countByEnumeratingWithState:&v28 objects:v36 count:16];
    if (v21)
    {
      uint64_t v22 = *(void *)v29;
      do
      {
        long long v23 = 0;
        do
        {
          if (*(void *)v29 != v22) {
            objc_enumerationMutation(v20);
          }
          BOOL v24 = *(void **)(*((void *)&v28 + 1) + 8 * (void)v23);
          if (qword_1009F8158 != -1) {
            dispatch_once(&qword_1009F8158, &stru_1009BE158);
          }
          sub_1004FF278((uint64_t)off_1009F8150, [v24 integerValue]);
          long long v23 = (char *)v23 + 1;
        }
        while (v21 != v23);
        id v21 = [v20 countByEnumeratingWithState:&v28 objects:v36 count:16];
      }
      while (v21);
    }

    uint64_t v25 = sub_100019878();
    v34[0] = _NSConcreteStackBlock;
    v34[1] = 3321888768;
    v34[2] = sub_1006842A8;
    v34[3] = &unk_1009BCAE0;
    uuid_copy(v35, (const unsigned __int8 *)out);
    sub_100013018(v25, v34);

    return 0;
  }
  uint64_t v26 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10004191C(__p, out);
    int v27 = v33 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v27;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Cannot disconnect device \"%{public}s\" as it is not connecting or connected!", (uint8_t *)out, 0xCu);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  return 312;
}

void sub_100684218(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100684258(id a1, NSNumber *a2)
{
  unsigned int v2 = a2;
  if ([(NSNumber *)v2 integerValue] <= 0) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = v2;
  }
  uint64_t v4 = v3;

  return v4;
}

void sub_100684298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006842A8(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  unsigned int v2 = off_1009F7EB8;

  return sub_10068430C((uint64_t)v2, (unsigned __int8 *)(a1 + 32));
}

uint64_t sub_10068430C(uint64_t a1, unsigned __int8 *a2)
{
  v51[0] = 0;
  v51[1] = 0;
  sub_10003AED0((uint64_t)v51, a1 + 120);
  if (sub_100681934(a1, a2))
  {
    uint64_t v4 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(a2, out);
      sub_10004191C(__p, out);
      if (v53 >= 0) {
        id v5 = __p;
      }
      else {
        id v5 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136446210;
      int v55 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device \"%{public}s\" is already disconnecting", buf, 0xCu);
      if (v53 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  else if ((sub_10067E248((void *)a1, a2) & 1) != 0 || sub_1000307A4(a1, a2))
  {
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009BE1D8);
    }
    sub_100711218(qword_1009F7EC8, a2);
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009BE1D8);
    }
    sub_1007113D4(qword_1009F7EC8, a2);
    sub_1006859B0(a1, a2);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    uint64_t v6 = off_1009F7ED8;
    long long v7 = sub_100031234(a2);
    sub_1006C2BE0((uint64_t)v6, v7);

    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009BE1D8);
    }
    uint64_t v8 = qword_1009F7EC8;
    uint64_t v9 = sub_100031234(a2);
    LOBYTE(v8) = sub_100008DC4(v8, v9);

    if ((v8 & 1) == 0)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      BOOL v10 = off_1009F7ED8;
      __int16 v11 = sub_100031234(a2);
      sub_1006C3F88((uint64_t)v10, v11, 0);
    }
    if (qword_1009FB270 != -1) {
      dispatch_once(&qword_1009FB270, &stru_1009BE198);
    }
    uint64_t v12 = qword_1009FB268;
    long long v13 = sub_100031234(a2);
    sub_10073676C(v12, v13, 3);

    uint64_t v14 = sub_1000308C0(a1 + 384, a2);
    if (a1 + 392 == v14)
    {
      long long v23 = *(void **)(a1 + 752);
      BOOL v24 = sub_100031234(a2);
      LODWORD(v23) = [v23 containsObject:v24];

      if (v23)
      {
        uint64_t v25 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          memset(out, 0, sizeof(out));
          uuid_unparse_upper(a2, out);
          sub_10004191C(__p, out);
          uint64_t v26 = v53 >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)long long buf = 136446210;
          int v55 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Removing device \"%{public}s\" from connection overflow list", buf, 0xCu);
          if (v53 < 0) {
            operator delete(*(void **)__p);
          }
        }
        int v27 = *(void **)(a1 + 752);
        long long v28 = sub_100031234(a2);
        [v27 removeObject:v28];
      }
      else
      {
        long long v29 = *(void **)(a1 + 760);
        long long v30 = sub_100031234(a2);
        LODWORD(v29) = [v29 containsObject:v30];

        if (v29)
        {
          long long v31 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            memset(out, 0, sizeof(out));
            uuid_unparse_upper(a2, out);
            sub_10004191C(__p, out);
            uint64_t v32 = v53 >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)long long buf = 136446210;
            int v55 = v32;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: Removing device \"%{public}s\" from blocked connection list", buf, 0xCu);
            if (v53 < 0) {
              operator delete(*(void **)__p);
            }
          }
          char v33 = *(void **)(a1 + 760);
          long long v34 = sub_100031234(a2);
          [v33 removeObject:v34];
        }
        else
        {
          __int16 v38 = *(void **)(a1 + 768);
          id v39 = sub_100031234(a2);
          LODWORD(v38) = [v38 containsObject:v39];

          int v40 = qword_100A19EF8;
          BOOL v41 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
          if (v38)
          {
            if (v41)
            {
              sub_100401EBC(a2, out);
              long long v42 = out[23] >= 0 ? out : *(char **)out;
              *(_DWORD *)__p = 136446210;
              *(void *)&__p[4] = v42;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Removing device \"%{public}s\" from pending to go into filter accept list", __p, 0xCu);
              if (out[23] < 0) {
                operator delete(*(void **)out);
              }
            }
            long long v43 = *(void **)(a1 + 768);
            int v44 = sub_100031234(a2);
            [v43 removeObject:v44];
          }
          else
          {
            if (v41)
            {
              sub_100401EBC(a2, out);
              int v45 = out[23] >= 0 ? out : *(char **)out;
              *(_DWORD *)__p = 136446210;
              *(void *)&__p[4] = v45;
              _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "\"Disconnecting\" pending device \"%{public}s\"", __p, 0xCu);
              if (out[23] < 0) {
                operator delete(*(void **)out);
              }
            }
            switch(*(_DWORD *)(a1 + 864))
            {
              case 0:
                if (!*(_DWORD *)(a1 + 928))
                {
                  unsigned int v46 = qword_100A19EF8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT)) {
                    sub_10078FDDC(v46);
                  }
                }
                break;
              case 1:
                id v47 = qword_100A19EF8;
                if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_WORD *)uuid_string_t out = 0;
                  _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "cancelling, waiting for controller before removing from filter accept list", (uint8_t *)out, 2u);
                }
                if (!sub_10067C23C(a1, 1)) {
                  goto LABEL_76;
                }
                long long v48 = *(void **)(a1 + 744);
                int v49 = sub_100031234(a2);
                [v48 addObject:v49];

                break;
              case 2:
              case 4:
LABEL_76:
                sub_100680D78(a1, a2);
                break;
              case 3:
                uint64_t v50 = sub_100031234(a2);
                sub_10068B31C(a1, v50);

                break;
              default:
                return sub_10003AFB4((uint64_t)v51);
            }
          }
        }
      }
    }
    else
    {
      unsigned int v15 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        memset(out, 0, sizeof(out));
        uuid_unparse_upper(a2, out);
        sub_10004191C(__p, out);
        long long v16 = v53 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136446210;
        int v55 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Disconnecting connected device \"%{public}s\"", buf, 0xCu);
        if (v53 < 0) {
          operator delete(*(void **)__p);
        }
      }
      id v17 = *(void **)(a1 + 744);
      int v18 = sub_100031234(a2);
      [v17 addObject:v18];

      *(void *)uuid_string_t out = 0;
      BOOL v19 = sub_1006856B8(a1, a2, out);
      uint64_t v20 = *(void *)out;
      if (*(void *)out) {
        BOOL v21 = v19;
      }
      else {
        BOOL v21 = 0;
      }
      if (v21)
      {
        __p[0] = 0;
        sub_10001B8E0(__p);
        BOOL v22 = sub_100197770(v20) && *(unsigned char *)(v20 + 220) != 0;
        sub_10001B910(__p);
        if (v22)
        {
          uint64_t v35 = sub_10003FB34();
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t))(*(void *)v35 + 2928))(v35, v20, 0xFFFFLL, 1, 0, 1);
        }
        sub_10001B8AC(__p);
      }
      long long v36 = sub_100031234(a2);
      sub_10067D568(a1, v36);

      __p[0] = 0;
      sub_10001B8E0(__p);
      sub_100223D18(*(void *)(v14 + 48));
      sub_10001B8AC(__p);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_100401EBC(a2, out);
    sub_10078FE74();
  }
  return sub_10003AFB4((uint64_t)v51);
}

void sub_100684C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100684D50(_WORD *a1, int a2, __int16 *a3, __int16 *a4, __int16 *a5, __int16 *a6, _WORD *a7, __int16 *a8, _WORD *a9, _WORD *a10, _WORD *a11, _WORD *a12, _WORD *a13, unsigned char *a14, unsigned char *a15)
{
  *a3 = 10;
  *a4 = 30;
  *a7 = 1;
  *a8 = 2000;
  *a6 = 12;
  *a5 = 2;
  *a9 = 3;
  *a10 = 3;
  *a11 = 1;
  *a12 = 2;
  *a13 = 200;
  *a14 = 0;
  *a15 = 1;
  switch(a2)
  {
    case -11:
      uint64_t result = 0;
      *a3 = 10;
      *a4 = 30;
      *a7 = 1;
      *a6 = 12;
      *a5 = 12;
      *a9 = 3;
      *a10 = 3;
      *a11 = 1;
      *a12 = 2;
      *a13 = 200;
      *a14 = 1;
      *a15 = 0;
      return result;
    case -10:
      uint64_t result = 0;
      *a3 = a1[549];
      *a4 = a1[550];
      *a7 = 1;
      __int16 v20 = a1[551];
      goto LABEL_22;
    case -9:
      uint64_t result = 0;
      __int16 v21 = 150;
      goto LABEL_10;
    case -8:
      uint64_t result = 0;
      __int16 v21 = 30;
LABEL_10:
      *a3 = v21;
      *a4 = v21;
      *a7 = 0;
      return result;
    case -7:
      uint64_t result = 0;
      *a3 = 15;
      *a4 = 15;
      *a7 = 0;
      __int16 v20 = 2000;
      goto LABEL_22;
    case -6:
      uint64_t result = 0;
      *a3 = 970;
      *a4 = 1000;
      *a7 = 0;
      *a8 = 8000;
      __int16 v22 = 4;
      goto LABEL_14;
    case -5:
      *a3 = 30;
      *a4 = 30;
      *a7 = 0;
      sub_10003FB34();
      uint64_t result = 0;
      __int16 v22 = 8;
LABEL_14:
      *a6 = v22;
      __int16 v19 = 2;
      goto LABEL_17;
    case -4:
    case -1:
      uint64_t result = 0;
      *a3 = 15;
      *a4 = 15;
      *a7 = 0;
      __int16 v19 = 6;
      goto LABEL_16;
    case -3:
      uint64_t result = 0;
      *a3 = 60;
      *a4 = 60;
      *a7 = 5;
      __int16 v19 = 12;
LABEL_16:
      *a6 = v19;
LABEL_17:
      *a5 = v19;
      return result;
    case -2:
      uint64_t result = 0;
      *a3 = 20;
      *a4 = 30;
      *a7 = 5;
      *a6 = 12;
      *a5 = 12;
      *a9 = 1;
      *a10 = 1;
      *a11 = 5;
      *a12 = 0;
      *a13 = 200;
      return result;
    case 0:
      uint64_t result = 0;
      *a3 = a1[540];
      *a4 = a1[541];
      *a7 = 0;
      __int16 v20 = a1[542];
      goto LABEL_22;
    case 1:
      uint64_t result = 0;
      *a3 = a1[543];
      *a4 = a1[544];
      *a7 = 1;
      __int16 v20 = a1[545];
      goto LABEL_22;
    case 2:
      uint64_t result = 0;
      *a3 = a1[546];
      *a4 = a1[547];
      *a7 = 1;
      __int16 v20 = a1[548];
LABEL_22:
      *a8 = v20;
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10078FECC();
      }
      uint64_t result = 3;
      break;
  }
  return result;
}

void sub_10068506C(int a1)
{
  uint64_t v1 = qword_100A19EF8;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078FF00();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully Enabled event for connection subrating", v2, 2u);
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
    }
    *((unsigned char *)off_1009F7EB8 + 1581) |= 4u;
  }
}

void sub_100685138(int a1)
{
  uint64_t v1 = qword_100A19EF8;
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10078FF68();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Successfully Disabled event for connection subrating", v2, 2u);
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
    }
    *((unsigned char *)off_1009F7EB8 + 1581) &= ~4u;
  }
}

uint64_t sub_100685204(uint64_t a1, unint64_t a2, unint64_t a3, unsigned __int16 a4)
{
  unint64_t v23 = a2;
  char v22 = 0;
  sub_10001B8E0(&v22);
  uint64_t v8 = sub_100228DB0(a2, WORD1(a3), WORD2(a3), (unsigned __int16)a3, HIWORD(a3), a4);
  sub_10001B910(&v22);
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 120);
  uint64_t v9 = *(void **)(a1 + 536);
  if (v9)
  {
    BOOL v10 = (void *)(a1 + 536);
    do
    {
      unint64_t v11 = v9[4];
      BOOL v12 = v11 >= a2;
      if (v11 >= a2) {
        long long v13 = v9;
      }
      else {
        long long v13 = v9 + 1;
      }
      if (v12) {
        BOOL v10 = v9;
      }
      uint64_t v9 = (void *)*v13;
    }
    while (*v13);
    if (v10 != (void *)(a1 + 536) && v10[4] <= a2)
    {
      *(void *)long long buf = &v23;
      *((_DWORD *)sub_100509094((uint64_t **)(a1 + 528), &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf) + 13) = v8 == 0;
    }
  }
  uint64_t v14 = qword_100A19EF8;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67110400;
      *(_DWORD *)&uint8_t buf[4] = WORD1(a3);
      __int16 v25 = 1024;
      int v26 = WORD2(a3);
      __int16 v27 = 1024;
      int v28 = (unsigned __int16)a3;
      __int16 v29 = 1024;
      int v30 = HIWORD(a3);
      __int16 v31 = 1024;
      int v32 = a4;
      __int16 v33 = 1024;
      int v34 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to enter Connection Subrating Mode with parameters: Subrate_Min=%d, Subrate_Max=%d, Max_Latency=%d, Continuation_Number=%d, Supervision_Timeout=%d. Status=%d", buf, 0x26u);
    }
    unsigned int v15 = *(void **)(a1 + 512);
    if (v15)
    {
      long long v16 = (void *)(a1 + 512);
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v23;
        if (v17 >= v23) {
          __int16 v19 = v15;
        }
        else {
          __int16 v19 = v15 + 1;
        }
        if (v18) {
          long long v16 = v15;
        }
        unsigned int v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 != (void *)(a1 + 512) && v23 >= v16[4])
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
          sub_10078FFD0();
        }
        sub_1000517A4(a1 + 504, &v23);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Successfully sent connection subrating request", buf, 2u);
  }
  sub_10003AFB4((uint64_t)v21);
  sub_10001B8AC(&v22);
  return v8;
}

void sub_100685494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

BOOL sub_1006854C8(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 416 != sub_1000308C0(a1 + 408, a2);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_100685528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10068553C(uint64_t a1, uint64_t a2, unsigned __int8 *a3, char a4)
{
  v11[1] = 0;
  unint64_t v12 = a2;
  v11[0] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 120);
  long long v7 = (uint64_t **)(a1 + 936);
  uint64_t v8 = sub_1000308C0(a1 + 936, a3);
  if (a1 + 944 != v8 && (a4 & 1) == 0) {
    goto LABEL_5;
  }
  uint64_t v9 = sub_100685610(a1, a3);
  if (!v9)
  {
    long long v13 = a3;
    uint64_t v8 = (uint64_t)sub_1006AA9FC(v7, a3, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v13);
LABEL_5:
    sub_100051620((uint64_t **)(v8 + 48), &v12, (uint64_t *)&v12);
    uint64_t v9 = 0;
  }
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

void sub_1006855FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100685610(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = 0;
  if (!sub_1006856B8(a1, a2, &v12)) {
    return 312;
  }
  char v11 = 0;
  sub_10001B8E0(&v11);
  uint64_t v2 = v12;
  if (sub_100197770(v12))
  {
    if (sub_10018F028((uint64_t)sub_100685748, v2, v3, v4, v5, v6, v7, v8)) {
      uint64_t v9 = 7;
    }
    else {
      uint64_t v9 = 0;
    }
  }
  else
  {
    uint64_t v9 = 7;
  }
  sub_10001B8AC(&v11);
  return v9;
}

void sub_1006856A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

BOOL sub_1006856B8(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 120);
  uint64_t v6 = sub_1000308C0(a1 + 384, a2);
  if (a1 + 392 != v6) {
    *a3 = *(void *)(v6 + 48);
  }
  BOOL v7 = a1 + 392 != v6;
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

void sub_100685734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100685748(int a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_1006A2488;
  v7[3] = &unk_1009A6D98;
  int v8 = a1;
  v7[4] = a2;
  char v9 = a3;
  sub_100013018(v6, v7);
}

BOOL sub_1006857DC(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 440 != sub_1000308C0(a1 + 432, a2);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_10068583C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100685850(uint64_t a1, const unsigned __int8 *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 120);
  BOOL v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_10004191C(__p, out);
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    long long v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device \"%{public}s\" requires low latency", buf, 0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *(void **)(a1 + 824);
  BOOL v7 = sub_100031234(a2);
  [v6 addObject:v7];

  return sub_10003AFB4((uint64_t)v11);
}

void sub_100685984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006859B0(uint64_t a1, const unsigned __int8 *a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 120);
  BOOL v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_10004191C(__p, out);
    if (v10 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    long long v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Device \"%{public}s\" does not require low latency", buf, 0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = *(void **)(a1 + 824);
  BOOL v7 = sub_100031234(a2);
  [v6 removeObject:v7];

  return sub_10003AFB4((uint64_t)v11);
}

void sub_100685AE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100685B10(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 824);
  uint64_t v3 = sub_100031234(a2);
  id v4 = [v2 containsObject:v3];

  return v4;
}

void sub_100685B58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100685B68(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 648 != sub_1000308C0(a1 + 640, a2);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_100685BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100685BDC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  BOOL v6 = *(void *)(sub_1000308C0(a1 + 640, a3) + 48) == a2;
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_100685C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100685C5C(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 672 != sub_1000308C0(a1 + 664, a2);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_100685CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100685CD0(uint64_t a1, const unsigned __int8 *a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 120);
  BOOL v4 = *(const unsigned __int8 **)(a1 + 688);
  uuid_copy(dst, a2);
  uint64_t v5 = (const unsigned __int8 *)(a1 + 696);
  if (v4 != v5)
  {
    while (uuid_compare(v4 + 40, dst))
    {
      BOOL v6 = (const unsigned __int8 *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          BOOL v7 = v6;
          BOOL v6 = *(const unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          BOOL v7 = (const unsigned __int8 *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          BOOL v4 = v7;
        }
        while (!v8);
      }
      BOOL v4 = v7;
      if (v7 == v5)
      {
        BOOL v4 = v5;
        break;
      }
    }
  }
  sub_10003AFB4((uint64_t)v10);
  return v4 != v5;
}

void sub_100685DBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_100685DDC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  BOOL v6 = *(void *)(sub_1000308C0(a1 + 664, a3) + 48) == a2;
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_100685E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100685E5C(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (sub_1006856B8(a1, a2, &v6))
  {
    char v5 = 0;
    sub_10001B8E0(&v5);
    sub_10021BB90(v6, a3);
    sub_10001B8AC(&v5);
  }
  return 1;
}

void sub_100685EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_100685ED4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = 0;
  if (sub_1006856B8(a1, a2, &v6))
  {
    char v5 = 0;
    sub_10001B8E0(&v5);
    sub_10021CC78(v6, a3);
    sub_10001B8AC(&v5);
  }
  return 1;
}

void sub_100685F50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

BOOL sub_100685F64(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 120);
  BOOL v2 = *(void *)(a1 + 400) != 0;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

id sub_100685FB4(uint64_t a1)
{
  BOOL v2 = +[NSMutableArray array];
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 120);
  uint64_t v3 = *(const unsigned __int8 **)(a1 + 336);
  if (v3 != (const unsigned __int8 *)(a1 + 344))
  {
    do
    {
      BOOL v4 = sub_100031234(v3 + 25);
      [v2 addObject:v4];

      char v5 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 **)v5;
          char v5 = *(unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 **)*((void *)v3 + 2);
          BOOL v7 = *v6 == v3;
          uint64_t v3 = (const unsigned __int8 *)v6;
        }
        while (!v7);
      }
      uint64_t v3 = (const unsigned __int8 *)v6;
    }
    while (v6 != (const unsigned __int8 **)(a1 + 344));
  }
  BOOL v8 = [*(id *)(a1 + 752) allObjects];
  [v2 addObjectsFromArray:v8];

  char v9 = [*(id *)(a1 + 768) allObjects];
  [v2 addObjectsFromArray:v9];

  char v10 = [*(id *)(a1 + 760) allObjects];
  [v2 addObjectsFromArray:v10];

  sub_10003AFB4((uint64_t)v12);

  return v2;
}

void sub_1006860F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_100686130(uint64_t a1, uint64_t a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 120);
  BOOL v4 = *(const unsigned __int8 **)(a1 + 384);
  if (v4 == (const unsigned __int8 *)(a1 + 392))
  {
LABEL_9:
    BOOL v8 = 0;
  }
  else
  {
    while (*((void *)v4 + 6) != a2)
    {
      char v5 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 **)v5;
          char v5 = *(unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 **)*((void *)v4 + 2);
          BOOL v7 = *v6 == v4;
          BOOL v4 = (const unsigned __int8 *)v6;
        }
        while (!v7);
      }
      BOOL v4 = (const unsigned __int8 *)v6;
      if (v6 == (const unsigned __int8 **)(a1 + 392)) {
        goto LABEL_9;
      }
    }
    BOOL v8 = sub_100031234(v4 + 32);
  }
  sub_10003AFB4((uint64_t)v10);

  return v8;
}

void sub_1006861F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100686208(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 120);
  uint64_t v10 = 0;
  sub_1000305AC(v12, v5);
  if (sub_1006856B8(a1, v12, &v10))
  {
    v12[0] = 0;
    sub_10001B8E0(v12);
    int v6 = sub_1000E771C(v10, (uint64_t)sub_100686354, a2);
    sub_10001B910(v12);
    if (v6 == 414) {
      unsigned int v7 = 409;
    }
    else {
      unsigned int v7 = v6 != 0;
    }
    if (v6 == 116) {
      uint64_t v8 = 10;
    }
    else {
      uint64_t v8 = v7;
    }
    sub_10001B8AC(v12);
  }
  else
  {
    uint64_t v8 = 312;
  }
  sub_10003AFB4((uint64_t)v11);

  return v8;
}

void sub_100686318(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100686354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  uint64_t v10 = __ROR8__(a2, 32);
  uint64_t v11 = __ROR8__(a3, 32);
  uint64_t v12 = __ROR8__(a4, 32);
  uint64_t v13 = __ROR8__(a5, 32);
  uint64_t v14 = sub_100019878();
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  v15[2] = sub_1006A2C30;
  v15[3] = &unk_1009A00A0;
  v15[4] = a1;
  v15[5] = v10;
  v15[6] = v11;
  v15[7] = v12;
  int v16 = a6;
  v15[8] = v13;
  v15[9] = a7;
  sub_100013018(v14, v15);
}

uint64_t sub_10068640C(uint64_t a1, unsigned __int8 *a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 120);
  uint64_t v8 = 0;
  unsigned __int16 v7 = 0;
  if (sub_1006856B8(a1, a2, &v8))
  {
    char v6 = 0;
    sub_10001B8E0(&v6);
    sub_100225DB8(v8, &v7);
    sub_10001B8AC(&v6);
    uint64_t v4 = v7;
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_10003AFB4((uint64_t)v9);
  return v4;
}

void sub_10068649C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_1006864C4(uint64_t a1, unsigned __int8 *a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 120);
  uint64_t v8 = 0;
  unsigned __int16 v7 = 12;
  if (sub_1006856B8(a1, a2, &v8))
  {
    char v6 = 0;
    sub_10001B8E0(&v6);
    sub_100225E20(v8, (__int16 *)&v7);
    sub_10001B8AC(&v6);
    uint64_t v4 = v7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790038();
    }
    uint64_t v4 = 12;
  }
  sub_10003AFB4((uint64_t)v9);
  return v4;
}

void sub_100686580(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, char a10, char a11, uint64_t a12, char a13)
{
}

uint64_t sub_1006865A8(uint64_t a1, unsigned __int8 *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  uint64_t v7 = 0;
  if (sub_1006856B8(a1, a2, &v7))
  {
    char v6 = 0;
    sub_10001B8E0(&v6);
    uint64_t v4 = sub_100225FE4(v7);
    sub_10001B8AC(&v6);
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_10003AFB4((uint64_t)v8);
  return v4;
}

void sub_100686630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, char a14)
{
}

uint64_t sub_100686658(uint64_t a1, unsigned __int8 *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  uint64_t v7 = 0;
  if (sub_1006856B8(a1, a2, &v7))
  {
    char v6 = 0;
    sub_10001B8E0(&v6);
    uint64_t v4 = sub_10022602C(v7);
    sub_10001B8AC(&v6);
  }
  else
  {
    uint64_t v4 = 0;
  }
  sub_10003AFB4((uint64_t)v8);
  return v4;
}

void sub_1006866E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, uint64_t a13, char a14)
{
}

void sub_100686708(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double Current = CFAbsoluteTimeGetCurrent();
  double v3 = *(double *)(v1 + 328);
  if (v3 != 0.0)
  {
    double v4 = Current;
    if (Current - v3 > 1200.0)
    {
      id v5 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        char v6 = "YES";
        if (*(unsigned char *)(v1 + 184)) {
          uint64_t v7 = "YES";
        }
        else {
          uint64_t v7 = "NO";
        }
        uint64_t v8 = *(void *)(v1 + 352);
        uint64_t v9 = *(int *)(v1 + 864);
        if (v9 > 4) {
          uint64_t v10 = "UNKNOWN";
        }
        else {
          uint64_t v10 = (&off_1009BE3A8)[v9];
        }
        if (!*(unsigned char *)(v1 + 1066)) {
          char v6 = "NO";
        }
        int v11 = 134219266;
        double v12 = v4;
        __int16 v13 = 2048;
        double v14 = v3;
        __int16 v15 = 2082;
        int v16 = v7;
        __int16 v17 = 2048;
        uint64_t v18 = v8;
        __int16 v19 = 2082;
        __int16 v20 = v10;
        __int16 v21 = 2082;
        char v22 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Last address changed over 20 minutes ago (now:%f lastTime:%f fStarted:%{public}s fConnectingDevices.size():%zu fConnectionState:%{public}s fWaitForAddressChangeToComplete:%{public}s), forcing address change", (uint8_t *)&v11, 0x3Eu);
      }
      LOBYTE(v11) = 0;
      sub_10001B8E0(&v11);
      sub_1002291F4();
      sub_10001B910(&v11);
      sub_10001B8AC(&v11);
    }
  }
}

void sub_10068687C(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100686898(uint64_t a1, uint64_t a2, void *a3, unsigned __int8 *a4, void *a5)
{
  id v9 = a3;
  id v10 = a5;
  if (!v9)
  {
    double v14 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10079006C((uint64_t)v10, v14, v15);
    }
    int v16 = v59;
    v59[0] = _NSConcreteStackBlock;
    v59[1] = 3221225472;
    long long v17 = *((_OWORD *)a4 + 1);
    long long v60 = *(_OWORD *)a4;
    v59[2] = sub_100687134;
    v59[3] = &unk_1009BDA40;
    v59[4] = 0;
    long long v61 = v17;
    uint64_t v13 = 22;
    int v62 = *((_DWORD *)a4 + 8);
    int v63 = 22;
    sub_10067762C((os_unfair_lock_s *)a1, v59);
    goto LABEL_14;
  }
  sub_1000305AC(buf, v9);
  if (a1 + 392 == sub_1000308C0(a1 + 384, buf))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_1007900E8();
    }
    int v16 = v54;
    v54[0] = _NSConcreteStackBlock;
    v54[1] = 3221225472;
    v54[2] = sub_1006871A8;
    v54[3] = &unk_1009BDA40;
    v54[4] = v9;
    long long v18 = *((_OWORD *)a4 + 1);
    long long v55 = *(_OWORD *)a4;
    long long v56 = v18;
    uint64_t v13 = 312;
    int v57 = *((_DWORD *)a4 + 8);
    int v58 = 312;
    sub_10067762C((os_unfair_lock_s *)a1, v54);
LABEL_14:
    __int16 v19 = (id *)(v16 + 4);
    goto LABEL_48;
  }
  if (*a4)
  {
    sub_1000305AC(buf, v9);
    if (sub_100685B68(a1, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_100790230();
      }
      int v11 = v49;
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 3221225472;
      v49[2] = sub_10068721C;
      v49[3] = &unk_1009BDA40;
      v49[4] = v9;
      long long v12 = *((_OWORD *)a4 + 1);
      long long v50 = *(_OWORD *)a4;
      long long v51 = v12;
      uint64_t v13 = 1500;
      int v52 = *((_DWORD *)a4 + 8);
      int v53 = 1500;
      sub_10067762C((os_unfair_lock_s *)a1, v49);
LABEL_47:
      __int16 v19 = (id *)(v11 + 4);
      goto LABEL_48;
    }
  }
  else
  {
    sub_1000305AC(buf, v9);
    if (!sub_100685B68(a1, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_1007901C8();
      }
      int v11 = v44;
      v44[0] = _NSConcreteStackBlock;
      v44[1] = 3221225472;
      v44[2] = sub_100687290;
      v44[3] = &unk_1009BDA40;
      v44[4] = v9;
      long long v26 = *((_OWORD *)a4 + 1);
      long long v45 = *(_OWORD *)a4;
      long long v46 = v26;
      uint64_t v13 = 1501;
      int v47 = *((_DWORD *)a4 + 8);
      int v48 = 1501;
      sub_10067762C((os_unfair_lock_s *)a1, v44);
      goto LABEL_47;
    }
  }
  if (*a4)
  {
    sub_1000305AC(buf, v9);
    unsigned int v64 = buf;
    sub_1006AABB4((uint64_t **)(a1 + 640), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v64)[6] = a2;
  }
  else
  {
    sub_1000305AC(buf, v9);
    if (!sub_100685BDC(a1, a2, buf))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_1007901C8();
      }
      int v11 = v39;
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_100687304;
      v39[3] = &unk_1009BDA40;
      v39[4] = v9;
      long long v28 = *((_OWORD *)a4 + 1);
      long long v40 = *(_OWORD *)a4;
      long long v41 = v28;
      uint64_t v13 = 1502;
      int v42 = *((_DWORD *)a4 + 8);
      int v43 = 1502;
      sub_10067762C((os_unfair_lock_s *)a1, v39);
      goto LABEL_47;
    }
    sub_1000305AC(buf, v9);
    __int16 v27 = (uint64_t *)sub_1000308C0(a1 + 640, buf);
    if ((uint64_t *)(a1 + 648) != v27)
    {
      sub_10004D3B8((uint64_t **)(a1 + 640), v27);
      operator delete(v27);
    }
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100687378;
  block[3] = &unk_100997450;
  id v20 = v9;
  id v38 = v20;
  if (qword_100A14568 != -1) {
    dispatch_once(&qword_100A14568, block);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  if (sub_1006BDC1C((uint64_t)off_1009F7ED8, v20) == dword_100A14560 && byte_100A14564) {
    a4[28] = 1;
  }
  unsigned int v64 = 0;
  sub_1000305AC(buf, v20);
  if (sub_1006856B8(a1, buf, &v64))
  {
    uint64_t v13 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790154();
    }
    v31[0] = _NSConcreteStackBlock;
    v31[1] = 3221225472;
    v31[2] = sub_100687564;
    v31[3] = &unk_1009BDA40;
    id v32 = v20;
    long long v21 = *((_OWORD *)a4 + 1);
    long long v33 = *(_OWORD *)a4;
    long long v34 = v21;
    int v35 = *((_DWORD *)a4 + 8);
    int v36 = 7;
    sub_10067762C((os_unfair_lock_s *)a1, v31);

    uint64_t v13 = 7;
  }
  if (a4[30])
  {
    if (qword_1009F85E8 != -1) {
      dispatch_once(&qword_1009F85E8, &stru_1009BE178);
    }
    sub_1003C4B0C();
    a4[28] |= 2u;
    char v22 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = (char)a4[3];
      int v24 = (char)a4[6];
      *(_DWORD *)long long buf = 138543874;
      id v66 = v20;
      __int16 v67 = 1024;
      int v68 = v23;
      __int16 v69 = 1024;
      int v70 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "RSSI Detection Enabled AOP Path  \"%{public}@\". RSSI Further=%d Closer=%d", buf, 0x18u);
    }
  }
  if ((a4[30] & 2) != 0)
  {
    *(_DWORD *)(a4 + 2) = 344492168;
    *((_WORD *)a4 + 3) = 5140;
  }
  uint64_t v25 = sub_10003FB34();
  DWORD2(v30) = *((_DWORD *)a4 + 6);
  *(void *)&long long v30 = *((void *)a4 + 2);
  (*(void (**)(uint64_t, void, void, void, void, void, void, void, void, unsigned __int8, void, unsigned __int8))(*(void *)v25 + 1768))(v25, *a4, *(unsigned __int16 *)v64, a4[1], (char)a4[2], (char)a4[3], (char)a4[4], (char)a4[5], *(void *)(a4 + 6), a4[14], *(void *)((char *)&v30 + 4), a4[28]);
  __int16 v19 = &v38;
LABEL_48:

  return v13;
}

void sub_100687088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100687134(uint64_t a1, uint64_t a2)
{
  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_1006871A8(uint64_t a1, uint64_t a2)
{
  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_10068721C(uint64_t a1, uint64_t a2)
{
  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_100687290(uint64_t a1, uint64_t a2)
{
  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_100687304(uint64_t a1, uint64_t a2)
{
  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

void sub_100687378(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "EnableRSSIDetectionDebuggingUseCase");
  (*(void (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v2 + 88))(v2, buf, __p, &dword_100A14560);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "EnableRSSIDetectionDebugging");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v3 + 72))(v3, buf, __p, &byte_100A14564);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "RSSI Detection Debugging enabled for \"%{public}@\". ", buf, 0xCu);
  }
}

void sub_100687520(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100687564(uint64_t a1, uint64_t a2)
{
  BYTE4(v4) = 0;
  LODWORD(v4) = *(_DWORD *)(a1 + 76);
  WORD2(v3) = 0;
  LODWORD(v3) = 0;
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 64), *(unsigned int *)(a1 + 60), 0, 0, 0, v3, v4);
}

uint64_t sub_1006875D8(uint64_t a1, uint64_t a2, int a3, void *a4, int a5, uint64_t a6)
{
  id v11 = a4;
  *(void *)src = 0;
  uint64_t v32 = 0;
  sub_1000305AC(src, v11);
  if (uuid_is_null(v12))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10079034C();
    }
    v27[0] = _NSConcreteStackBlock;
    v27[1] = 3321888768;
    v27[2] = sub_1006879C0;
    v27[3] = &unk_1009BDA60;
    uuid_copy(v30, src);
    int v29 = a5;
    uint64_t v13 = 7;
    int v28 = 7;
    sub_10067762C((os_unfair_lock_s *)a1, v27);
  }
  else
  {
    v21[0] = 0;
    v21[1] = 0;
    sub_10003AED0((uint64_t)v21, a1 + 120);
    if (a1 + 392 == sub_1000308C0(a1 + 384, src))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_100031234(src);
        objc_claimAutoreleasedReturnValue();
        sub_100790298();
      }
      sub_10003AFE8((uint64_t)v21);
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3321888768;
      v22[2] = sub_100687A64;
      v22[3] = &unk_1009BDA60;
      uuid_copy(v25, src);
      int v24 = a5;
      uint64_t v13 = 312;
      int v23 = 312;
      sub_10067762C((os_unfair_lock_s *)a1, v22);
    }
    else if (sub_100685DDC(a1, a2, src) || a1 + 672 == sub_1000308C0(a1 + 664, src))
    {
      if (a3)
      {
        long long v26 = src;
        sub_1006AACD4((uint64_t **)(a1 + 664), src, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v26)[6] = a2;
        uint64_t v14 = sub_10003FB34();
        (*(void (**)(uint64_t, void, void, uint64_t))(*(void *)v14 + 1776))(v14, (unsigned __int16)a5, HIWORD(a5), a6);
      }
      else
      {
        uint64_t v15 = (uint64_t *)sub_1000308C0(a1 + 664, src);
        if ((uint64_t *)(a1 + 672) != v15)
        {
          sub_10004D3B8((uint64_t **)(a1 + 664), v15);
          operator delete(v15);
        }
      }
      uint64_t v13 = 0;
    }
    else
    {
      sub_10003AFE8((uint64_t)v21);
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_1007902E0();
      }
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      v17[2] = sub_100687B08;
      v17[3] = &unk_1009BDA98;
      id v18 = v11;
      int v20 = a5;
      int v19 = 2100;
      sub_10067762C((os_unfair_lock_s *)a1, v17);

      uint64_t v13 = 2100;
    }
    sub_10003AFB4((uint64_t)v21);
  }

  return v13;
}

void sub_100687974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1006879C0(uint64_t a1, uint64_t a2)
{
  sub_100031234((const unsigned __int8 *)(a1 + 40));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(*(void *)a2 + 80))(a2);
}

void sub_100687A50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100687A64(uint64_t a1, uint64_t a2)
{
  sub_100031234((const unsigned __int8 *)(a1 + 40));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(*(void *)a2 + 80))(a2);
}

void sub_100687AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100687B08(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(*(void *)a2 + 80))(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 44), *(unsigned __int16 *)(a1 + 46), 0, 0, *(unsigned int *)(a1 + 40));
}

void sub_100687B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100031234((const unsigned __int8 *)(a1 + 68));
  long long v5 = *(_OWORD *)(a1 + 48);
  v6[0] = *(_OWORD *)(a1 + 32);
  v6[1] = v5;
  (*(void (**)(uint64_t, void *, _OWORD *, void))(*(void *)a2 + 88))(a2, v4, v6, *(unsigned int *)(a1 + 64));
}

void sub_100687BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100687BE0(uint64_t a1, uint64_t a2)
{
}

void sub_100687BF0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100031234((const unsigned __int8 *)(a1 + 68));
  long long v5 = *(_OWORD *)(a1 + 48);
  v6[0] = *(_OWORD *)(a1 + 32);
  v6[1] = v5;
  (*(void (**)(uint64_t, void *, _OWORD *, void))(*(void *)a2 + 88))(a2, v4, v6, *(unsigned int *)(a1 + 64));
}

void sub_100687C74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100687C84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, unsigned __int8 a9, unsigned __int8 a10, unsigned __int8 a11, unsigned __int16 a12, unsigned __int16 a13, unsigned __int16 a14, unsigned __int16 a15, unsigned __int16 a16, unsigned __int8 a17)
{
  char v22 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67113216;
    int v27 = a1;
    __int16 v28 = 1024;
    int v29 = a2;
    __int16 v30 = 1024;
    int v31 = a3;
    __int16 v32 = 1024;
    int v33 = a4;
    __int16 v34 = 1024;
    int v35 = a5;
    __int16 v36 = 1024;
    int v37 = a6;
    __int16 v38 = 1024;
    int v39 = a7;
    __int16 v40 = 1024;
    int v41 = a8;
    __int16 v42 = 1024;
    int v43 = a9;
    __int16 v44 = 1024;
    int v45 = a10;
    __int16 v46 = 1024;
    int v47 = a11;
    __int16 v48 = 1024;
    int v49 = a12;
    __int16 v50 = 1024;
    int v51 = a13;
    __int16 v52 = 1024;
    int v53 = a14;
    __int16 v54 = 1024;
    int v55 = a15;
    __int16 v56 = 1024;
    int v57 = a16;
    __int16 v58 = 1024;
    int v59 = a17;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Cscb: csLeLocalSupportedCapabilitiesCB status=%{bluetooth:OI_STATUS}u numConfig:%d maxProc:%d numAnt:%d rolesSup:%d modeSup:%d rttCap:%d rttCoarseN:%d rttSoundingN:%d rttRandomPayloadN:%d SyncPhy%d:%d:%d:%d FcsTime:%d %d:%d", buf, 0x68u);
  }
  BYTE12(xmmword_100A19600) = a2;
  HIWORD(xmmword_100A19600) = a3;
  byte_100A19610 = a4;
  byte_100A19611 = a5;
  byte_100A19612 = a6;
  byte_100A19613 = a7;
  byte_100A19614 = a8;
  byte_100A19615 = a9;
  byte_100A19616 = a10;
  byte_100A19617 = a11;
  word_100A19618 = a12;
  word_100A1961A = a13;
  word_100A1961C = a14;
  word_100A1961E = a15;
  LOWORD(dword_100A19620) = a16;
  BYTE2(dword_100A19620) = a17;
  sub_100026264(&stru_100A1A228);
  byte_100A1A298 = 0;
}

uint64_t sub_100687EBC()
{
  char v19 = 0;
  sub_10001B8E0(&v19);
  uint64_t v6 = sub_10001BDE0(259, (uint64_t)sub_100687C84, v0, v1, v2, v3, v4, v5, v18);
  sub_10001B910(&v19);
  char v7 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "csReadLocalSupportedCapabilities status:%d", buf, 8u);
  }
  byte_100A1A298 = 1;
  if (v6)
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"CS read local capabilities failed with status %!", v8, v9, v10, v11, v12, v13, v14, v6);
      uint64_t v15 = sub_100050B4C(0x5Cu);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        int v16 = sub_100050714();
        sub_100790420((uint64_t)v16, (uint64_t)buf);
      }
    }
    byte_100A1A298 = 0;
  }
  else
  {
    *(void *)long long buf = 0;
    uint64_t v21 = 0;
    sub_10003AED0((uint64_t)buf, (uint64_t)&unk_100A1A258);
    if (byte_100A1A298) {
      sub_1002B8184(&stru_100A1A228, (pthread_mutex_t **)buf);
    }
    sub_10003AFE8((uint64_t)buf);
    sub_10003AFB4((uint64_t)buf);
  }
  sub_10001B8AC(&v19);
  return 0;
}

void sub_100688034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10068806C(void *a1, uint64_t a2, uint64_t a3)
{
  v30[0] = 0;
  v30[1] = 0;
  sub_1000305AC(v30, a3);
  if ((sub_10067E248(a1, (unsigned __int8 *)v30) & 1) != 0 || sub_1000307A4((uint64_t)a1, (unsigned __int8 *)v30))
  {
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v5 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10079045C((const unsigned __int8 *)v30, v5);
    }
    uint64_t v4 = 312;
  }
  uint64_t v28 = 0;
  BOOL v6 = sub_1006856B8((uint64_t)a1, (unsigned __int8 *)v30, &v28);
  uint64_t v7 = v28;
  if (v28) {
    BOOL v8 = v6;
  }
  else {
    BOOL v8 = 0;
  }
  if (v8)
  {
    char v27 = 0;
    sub_10001B8E0(&v27);
    if (sub_100197770(v7))
    {
      uint64_t v16 = sub_10019304C(0x104u, v9, v10, v11, v12, v13, v14, v15, v7);
      if (v16)
      {
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"CS read remote capabilities failed with status %!", v17, v18, v19, v20, v21, v22, v23, v16);
          int v24 = sub_100050B4C(0x5Cu);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
          {
            uint64_t v25 = sub_100050714();
            sub_100790420((uint64_t)v25, (uint64_t)v29);
          }
        }
      }
    }
    sub_10001B8AC(&v27);
  }
  return v4;
}

void sub_1006881CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_1006881F0(void *a1, unint64_t a2, uint64_t a3, long long *a4)
{
  *(void *)src = 0;
  uint64_t v19 = 0;
  sub_1000305AC(src, a3);
  uuid_copy(dst, src);
  uint64_t v7 = sub_100688358((uint64_t)a1, a2, dst);
  if ((sub_10067E248(a1, src) & 1) != 0 || sub_1000307A4((uint64_t)a1, src))
  {
    if (v7)
    {
      char v16 = 0;
      sub_10001B8E0(&v16);
      uint64_t v15 = 0;
      BOOL v8 = sub_1006856B8((uint64_t)a1, src, &v15);
      if (v15) {
        BOOL v9 = v8;
      }
      else {
        BOOL v9 = 0;
      }
      if (v9)
      {
        long long v10 = a4[1];
        long long v13 = *a4;
        v14[0] = v10;
        *(_OWORD *)((char *)v14 + 10) = *(long long *)((char *)a4 + 26);
        sub_10026D9C8(v7, v15, (unsigned __int16 *)&v13);
      }
      sub_10001B910(&v16);
      sub_10001B8AC(&v16);
    }
    return 0;
  }
  else
  {
    uint64_t v12 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_1007904F4(src, v12);
    }
    return 312;
  }
}

void sub_10068833C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
}

uint64_t sub_100688358(uint64_t a1, unint64_t a2, unsigned __int8 *uu)
{
  uint64_t v5 = *(void **)(a1 + 1392);
  if (!v5) {
    goto LABEL_12;
  }
  BOOL v6 = (void *)(a1 + 1392);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      BOOL v9 = v5;
    }
    else {
      BOOL v9 = v5 + 1;
    }
    if (v8) {
      BOOL v6 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 == (void *)(a1 + 1392) || v6[4] > a2) {
LABEL_12:
  }
    operator new();
  uint64_t v10 = v6[5];
  if (!uuid_is_null(uu) && a1 + 1416 == sub_1000308C0(a1 + 1408, uu))
  {
    const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v12 = uu;
    sub_1006AAF38((uint64_t **)(a1 + 1408), uu, (uint64_t)&unk_1007BE9D0, &v12)[6] = v10;
  }
  return v10;
}

void sub_1006884AC()
{
}

uint64_t sub_1006884D0(void *a1, unint64_t a2, uint64_t a3)
{
  *(void *)src = 0;
  uint64_t v20 = 0;
  sub_1000305AC(src, a3);
  uuid_copy(dst, src);
  uint64_t v5 = sub_100688358((uint64_t)a1, a2, dst);
  if ((sub_10067E248(a1, src) & 1) != 0 || sub_1000307A4((uint64_t)a1, src))
  {
    if (v5)
    {
      char v17 = 0;
      sub_10001B8E0(&v17);
      uint64_t v16 = 0;
      BOOL v6 = sub_1006856B8((uint64_t)a1, src, &v16);
      if (v16) {
        BOOL v13 = v6;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13) {
        sub_10026D9A0(v5, v16, v7, v8, v9, v10, v11, v12);
      }
      sub_10001B910(&v17);
      sub_10001B8AC(&v17);
    }
    return 0;
  }
  else
  {
    uint64_t v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10079058C(src, v15);
    }
    return 312;
  }
}

void sub_1006885FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100688618(void *a1, unint64_t a2, uint64_t a3)
{
  *(void *)src = 0;
  uint64_t v20 = 0;
  sub_1000305AC(src, a3);
  uuid_copy(dst, src);
  uint64_t v5 = sub_100688358((uint64_t)a1, a2, dst);
  if ((sub_10067E248(a1, src) & 1) != 0 || sub_1000307A4((uint64_t)a1, src))
  {
    if (v5)
    {
      char v17 = 0;
      sub_10001B8E0(&v17);
      uint64_t v16 = 0;
      BOOL v6 = sub_1006856B8((uint64_t)a1, src, &v16);
      if (v16) {
        BOOL v13 = v6;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13) {
        sub_10026D9A0(v5, v16, v7, v8, v9, v10, v11, v12);
      }
      sub_10001B910(&v17);
      sub_10001B8AC(&v17);
    }
    return 0;
  }
  else
  {
    uint64_t v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790624(src, v15);
    }
    return 312;
  }
}

void sub_100688744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_100688760(void *a1, unint64_t a2, uint64_t a3, unsigned __int16 *a4)
{
  *(void *)src = 0;
  uint64_t v35 = 0;
  sub_1000305AC(src, a3);
  uuid_copy(dst, src);
  uint64_t v7 = sub_100688358((uint64_t)a1, a2, dst);
  if ((sub_10067E248(a1, src) & 1) != 0 || sub_1000307A4((uint64_t)a1, src))
  {
    uint64_t v8 = 0;
    if (!v7) {
      return v8;
    }
    goto LABEL_8;
  }
  uint64_t v9 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
    sub_1007906BC(src, v9);
  }
  uint64_t v8 = 312;
  if (v7)
  {
LABEL_8:
    long long v10 = *((_OWORD *)a4 + 1);
    v27[0] = *(_OWORD *)a4;
    v27[1] = v10;
    v27[2] = *((_OWORD *)a4 + 2);
    int v28 = *((_DWORD *)a4 + 12);
    sub_10026E48C(v7, (unsigned __int16 *)v27);
    unsigned int v11 = *a4;
    if (v11 > 3)
    {
      uint64_t v20 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_100401EBC(src, __p);
        uint64_t v22 = v24 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 67109378;
        unsigned int v30 = v11;
        __int16 v31 = 2082;
        __int16 v32 = v22;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Unsupported ConfigID:%d for   \"%{public}s\" ", buf, 0x12u);
        if (v24 < 0) {
          operator delete(__p[0]);
        }
      }
      return 312;
    }
    else
    {
      buf[0] = 0;
      sub_10001B8E0(buf);
      __p[0] = 0;
      BOOL v12 = sub_1006856B8((uint64_t)a1, src, __p);
      if (__p[0]) {
        BOOL v18 = v12;
      }
      else {
        BOOL v18 = 0;
      }
      if (v18)
      {
        long long v19 = *((_OWORD *)a4 + 1);
        v25[0] = *(_OWORD *)a4;
        v25[1] = v19;
        v25[2] = *((_OWORD *)a4 + 2);
        int v26 = *((_DWORD *)a4 + 12);
        sub_10026D840(v7, (uint64_t)__p[0], (unsigned __int16 *)v25, v13, v14, v15, v16, v17);
      }
      sub_10001B910(buf);
      sub_10001B8AC(buf);
    }
  }
  return v8;
}

void sub_10068898C(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 112));
  _Unwind_Resume(a1);
}

uint64_t sub_1006889A8(void *a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  *(void *)uuid_t uu = 0;
  uint64_t v34 = 0;
  sub_1000305AC(uu, v7);
  uint64_t v8 = (void *)a1[174];
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = a1 + 174;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      BOOL v12 = v8;
    }
    else {
      BOOL v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 != a1 + 174 && v9[4] <= a2)
  {
    uint64_t v18 = v9[5];
    if ((sub_10067E248(a1, uu) & 1) != 0 || sub_1000307A4((uint64_t)a1, uu))
    {
      uint64_t v16 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_100401EBC(uu, __p);
        sub_10078FE74();
      }
      uint64_t v16 = 312;
    }
    char v27 = 0;
    sub_10001B8E0(&v27);
    *(void *)long long buf = 0;
    BOOL v19 = sub_1006856B8((uint64_t)a1, uu, buf);
    if (*(void *)buf) {
      BOOL v25 = v19;
    }
    else {
      BOOL v25 = 0;
    }
    if (v25) {
      sub_10026D940(v18, *(uint64_t *)buf, a4, v20, v21, v22, v23, v24);
    }
    sub_10001B910(&v27);
    sub_10001B8AC(&v27);
  }
  else
  {
LABEL_12:
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v36[7] >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    uint64_t v14 = +[NSString stringWithUTF8String:v13];
    if ((v36[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)__p = 0u;
      memset(v36, 0, sizeof(v36));
      uuid_unparse_upper(uu, (char *)__p);
      sub_10004191C(v28, (char *)__p);
      if (v29 >= 0) {
        int v26 = v28;
      }
      else {
        int v26 = (void **)v28[0];
      }
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v31 = 2082;
      __int16 v32 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }

    uint64_t v16 = 2300;
  }

  return v16;
}

void sub_100688C28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100688C84(void *a1, unint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  *(void *)uuid_t uu = 0;
  uint64_t v35 = 0;
  sub_1000305AC(uu, v9);
  unint64_t v10 = (void *)a1[174];
  if (!v10) {
    goto LABEL_12;
  }
  BOOL v11 = a1 + 174;
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= a2;
    if (v12 >= a2) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v10 + 1;
    }
    if (v13) {
      BOOL v11 = v10;
    }
    unint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 != a1 + 174 && v11[4] <= a2)
  {
    uint64_t v20 = v11[5];
    if ((sub_10067E248(a1, uu) & 1) != 0 || sub_1000307A4((uint64_t)a1, uu))
    {
      LOBYTE(v28[0]) = 0;
      sub_10001B8E0(v28);
      __p[0] = 0;
      BOOL v21 = sub_1006856B8((uint64_t)a1, uu, __p);
      if (__p[0]) {
        BOOL v26 = v21;
      }
      else {
        BOOL v26 = 0;
      }
      if (v26) {
        sub_10026D96C(v20, (uint64_t)__p[0], a4, a5, v22, v23, v24, v25);
      }
      sub_10001B910(v28);
      sub_10001B8AC(v28);
      uint64_t v18 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_100401EBC(uu, __p);
        sub_10078FE74();
      }
      uint64_t v18 = 312;
    }
  }
  else
  {
LABEL_12:
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v37[7] >= 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (void **)__p[0];
    }
    uint64_t v16 = +[NSString stringWithUTF8String:v15];
    if ((v37[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    uint64_t v17 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)__p = 0u;
      memset(v37, 0, sizeof(v37));
      uuid_unparse_upper(uu, (char *)__p);
      sub_10004191C(v28, (char *)__p);
      if (v29 >= 0) {
        char v27 = v28;
      }
      else {
        char v27 = (void **)v28[0];
      }
      *(_DWORD *)long long buf = 138543618;
      __int16 v31 = v16;
      __int16 v32 = 2082;
      int v33 = v27;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v29 < 0) {
        operator delete(v28[0]);
      }
    }

    uint64_t v18 = 2300;
  }

  return v18;
}

void sub_100688F0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100688F68(void *a1, unint64_t a2, void *a3, long long *a4)
{
  id v7 = a3;
  *(void *)uuid_t uu = 0;
  uint64_t v36 = 0;
  sub_1000305AC(uu, v7);
  uint64_t v8 = (void *)a1[174];
  if (!v8) {
    goto LABEL_12;
  }
  id v9 = a1 + 174;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v8 + 1;
    }
    if (v11) {
      id v9 = v8;
    }
    uint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 != a1 + 174 && v9[4] <= a2)
  {
    uint64_t v18 = v9[5];
    if ((sub_10067E248(a1, uu) & 1) != 0 || sub_1000307A4((uint64_t)a1, uu))
    {
      uint64_t v16 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_100401EBC(uu, out);
        sub_10078FE74();
      }
      uint64_t v16 = 312;
    }
    char v29 = 0;
    sub_10001B8E0(&v29);
    *(void *)long long buf = 0;
    BOOL v19 = sub_1006856B8((uint64_t)a1, uu, buf);
    if (*(void *)buf) {
      BOOL v25 = v19;
    }
    else {
      BOOL v25 = 0;
    }
    if (v25)
    {
      long long v27 = *a4;
      uint64_t v28 = *((void *)a4 + 2);
      sub_10026DA78(v18, *(uint64_t *)buf, (uint64_t)&v27, v20, v21, v22, v23, v24);
    }
    sub_10001B910(&v29);
    sub_10001B8AC(&v29);
  }
  else
  {
LABEL_12:
    sub_10003AE4C(a2, (uint64_t)out);
    if (out[23] >= 0) {
      BOOL v13 = out;
    }
    else {
      BOOL v13 = *(char **)out;
    }
    uint64_t v14 = +[NSString stringWithUTF8String:v13];
    if (out[23] < 0) {
      operator delete(*(void **)out);
    }
    uint64_t v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(uu, out);
      sub_10004191C(__p, out);
      if (v31 >= 0) {
        BOOL v26 = __p;
      }
      else {
        BOOL v26 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v33 = 2082;
      uint64_t v34 = v26;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v31 < 0) {
        operator delete(__p[0]);
      }
    }

    uint64_t v16 = 2300;
  }

  return v16;
}

void sub_1006891F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100689254(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uuid_clear(uu);
  uint64_t v6 = sub_100688358(a1, a2, uu);
  if (v6)
  {
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    uint64_t v7 = sub_10004A6E4(a3);
    sub_10026DBA0(v6, v7, v8, v9, v10, v11, v12, v13);
    sub_10001B910(__p);
    sub_10001B8AC(__p);
    return 0;
  }
  else
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v18 >= 0) {
      uint64_t v15 = __p;
    }
    else {
      uint64_t v15 = (void **)__p[0];
    }
    uint64_t v16 = +[NSString stringWithUTF8String:v15];
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790754();
    }

    return 2300;
  }
}

void sub_100689388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006893BC(void *a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v26[0] = 0;
  v26[1] = 0;
  sub_1000305AC(v26, a3);
  uuid_clear(uu);
  uint64_t v11 = sub_100688358((uint64_t)a1, a2, uu);
  if (v11)
  {
    if ((sub_10067E248(a1, (unsigned __int8 *)v26) & 1) != 0 || sub_1000307A4((uint64_t)a1, (unsigned __int8 *)v26))
    {
      uint64_t v12 = 0;
    }
    else
    {
      uint64_t v15 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_1007907C0((const unsigned __int8 *)v26, v15);
      }
      uint64_t v12 = 312;
    }
    char v24 = 0;
    sub_10001B8E0(&v24);
    __p[0] = 0;
    BOOL v16 = sub_1006856B8((uint64_t)a1, (unsigned __int8 *)v26, __p);
    if (__p[0]) {
      BOOL v20 = v16;
    }
    else {
      BOOL v20 = 0;
    }
    if (v20) {
      sub_10026DC7C(v11, (uint64_t)__p[0], a4, a5, a6, v17, v18, v19);
    }
    sub_10001B910(&v24);
    sub_10001B8AC(&v24);
  }
  else
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v23 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    uint64_t v14 = +[NSString stringWithUTF8String:v13];
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790754();
    }

    return 2300;
  }
  return v12;
}

void sub_10068958C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006895C8(uint64_t a1, unint64_t a2)
{
  uuid_clear(uu);
  uint64_t v4 = sub_100688358(a1, a2, uu);
  if (v4)
  {
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    sub_10026DD68(v4, v5, v6, v7, v8, v9, v10, v11);
    sub_10001B910(__p);
    sub_10001B8AC(__p);
    return 0;
  }
  else
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v16 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    uint64_t v14 = +[NSString stringWithUTF8String:v13];
    if (v16 < 0) {
      operator delete(__p[0]);
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790858();
    }

    return 2300;
  }
}

void sub_1006896EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100689720(void *a1, unint64_t a2, uint64_t a3)
{
  *(void *)src = 0;
  uint64_t v28 = 0;
  sub_1000305AC(src, a3);
  uuid_copy(dst, src);
  uint64_t v5 = sub_100688358((uint64_t)a1, a2, dst);
  if (v5)
  {
    if ((sub_10067E248(a1, src) & 1) != 0 || sub_1000307A4((uint64_t)a1, src))
    {
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      *(void *)uuid_string_t out = 0;
      BOOL v6 = sub_1006856B8((uint64_t)a1, src, out);
      if (*(void *)out) {
        BOOL v13 = v6;
      }
      else {
        BOOL v13 = 0;
      }
      if (v13) {
        sub_10026DE9C(v5, *(uint64_t *)out, v7, v8, v9, v10, v11, v12);
      }
      sub_10001B910(__p);
      sub_10001B8AC(__p);
      return 0;
    }
    else
    {
      uint64_t v18 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_1007908C4(src, v18);
      }
      return 312;
    }
  }
  else
  {
    sub_10003AE4C(a2, (uint64_t)out);
    if (out[23] >= 0) {
      uint64_t v15 = out;
    }
    else {
      uint64_t v15 = *(char **)out;
    }
    char v16 = +[NSString stringWithUTF8String:v15];
    if (out[23] < 0) {
      operator delete(*(void **)out);
    }
    uint64_t v17 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(src, out);
      sub_10004191C(__p, out);
      uint64_t v19 = v21 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 138543618;
      char v23 = v16;
      __int16 v24 = 2082;
      BOOL v25 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }

    return 2300;
  }
}

void sub_100689950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (*(char *)(v10 - 57) < 0) {
    operator delete(*(void **)(v10 - 80));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100689998(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v7 = a3;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v8 = off_1009F7EB8;
  sub_1000305AC(&v17, v7);
  if (sub_1000307A4((uint64_t)v8, (unsigned __int8 *)&v17))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    uint64_t v9 = sub_100030DCC((uint64_t)off_1009F7ED8, v7, 0);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009BE1B8);
    }
    uint64_t v10 = sub_100030F10((uint64_t)off_1009F7EF8, v9, 1);
    uint64_t v11 = sub_10003FB34();
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 152))(v11, a4, v10, a5);
    BOOL v13 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = sub_1006AD3F0();
      int v17 = 138412290;
      id v18 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "MRC LE Address :    \"%@\" ", (uint8_t *)&v17, 0xCu);
    }
  }
  else
  {
    uint64_t v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = 138412290;
      id v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "MRC needs to have device connected   \"%@\" ", (uint8_t *)&v17, 0xCu);
    }
    uint64_t v12 = 312;
  }

  return v12;
}

void sub_100689BD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100689BF4(void *a1, unint64_t a2, void *a3, uint64_t a4)
{
  id v7 = a3;
  *(void *)uuid_t uu = 0;
  uint64_t v36 = 0;
  sub_1000305AC(uu, v7);
  uint64_t v8 = (void *)a1[174];
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = a1 + 174;
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      uint64_t v12 = v8;
    }
    else {
      uint64_t v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 != a1 + 174 && v9[4] <= a2)
  {
    uint64_t v18 = v9[5];
    if ((sub_10067E248(a1, uu) & 1) != 0 || sub_1000307A4((uint64_t)a1, uu))
    {
      uint64_t v16 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_100401EBC(uu, __p);
        sub_10078FE74();
      }
      uint64_t v16 = 312;
    }
    char v29 = 0;
    sub_10001B8E0(&v29);
    *(void *)long long buf = 0;
    BOOL v19 = sub_1006856B8((uint64_t)a1, uu, buf);
    uint64_t v20 = *(void *)buf;
    if (*(void *)buf) {
      BOOL v21 = v19;
    }
    else {
      BOOL v21 = 0;
    }
    if (v21)
    {
      uint64_t v22 = sub_10004A6E4(a4);
      sub_10026DEC4(v18, v20, v22, v23, v24, v25, v26, v27);
    }
    sub_10001B910(&v29);
    sub_10001B8AC(&v29);
  }
  else
  {
LABEL_12:
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v38[7] >= 0) {
      BOOL v13 = __p;
    }
    else {
      BOOL v13 = (void **)__p[0];
    }
    uint64_t v14 = +[NSString stringWithUTF8String:v13];
    if ((v38[7] & 0x80000000) != 0) {
      operator delete(__p[0]);
    }
    uint64_t v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      *(_OWORD *)__p = 0u;
      memset(v38, 0, sizeof(v38));
      uuid_unparse_upper(uu, (char *)__p);
      sub_10004191C(v30, (char *)__p);
      if (v31 >= 0) {
        uint64_t v28 = v30;
      }
      else {
        uint64_t v28 = (void **)v30[0];
      }
      *(_DWORD *)long long buf = 138543618;
      *(void *)&uint8_t buf[4] = v14;
      __int16 v33 = 2082;
      uint64_t v34 = v28;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Session %{public}@ for \"%{public}s\" is not found", buf, 0x16u);
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }

    uint64_t v16 = 2300;
  }

  return v16;
}

void sub_100689E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  _Unwind_Resume(a1);
}

void sub_100689EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 1128);
  uint64_t v3 = (uint64_t *)(a1 + 1136);
  if (v2 != (uint64_t *)(a1 + 1136))
  {
    uint64_t v5 = (uint64_t **)(a1 + 1128);
    do
    {
      if ((unint64_t)(a2 - v2[5]) < 0x6FC23AC01)
      {
        uint64_t v9 = (uint64_t *)v2[1];
        if (v9)
        {
          do
          {
            uint64_t v8 = v9;
            uint64_t v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v8 = (uint64_t *)v2[2];
            BOOL v10 = *v8 == (void)v2;
            uint64_t v2 = v8;
          }
          while (!v10);
        }
      }
      else
      {
        BOOL v6 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          id v7 = sub_1006ACEAC();
          *(_DWORD *)long long buf = 138543362;
          uint64_t v12 = v7;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Removing expired ExpectedIncomingAddress:%{public}@", buf, 0xCu);
        }
        uint64_t v8 = sub_10004D3B8(v5, v2);
        operator delete(v2);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
}

void sub_10068A048(uint64_t a1, unint64_t a2)
{
  unint64_t v7 = a2;
  __uint64_t v3 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
  sub_100689EDC(a1, v3);
  *(void *)long long buf = &v7;
  sub_1000097B0((uint64_t **)(a1 + 1128), &v7, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5] = v3;
  uint64_t v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = sub_1006ACEAC();
    uint64_t v6 = *(void *)(a1 + 1144);
    *(_DWORD *)long long buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    __int16 v9 = 2048;
    uint64_t v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding address %{public}@ to fAddressForIncomingConnectionPrioritizationMap[%lu]", buf, 0x16u);
  }
}

void sub_10068A15C()
{
  uint64_t v0 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Stream state changed, re-evaluating scan params", v1, 2u);
  }
}

void sub_10068A1C4()
{
}

uint64_t sub_10068A1CC(uint64_t a1, long long *a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 120);
  uint64_t v4 = sub_100035F54();
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 936))(v4);
  *(_OWORD *)(a1 + 288) = *a2;
  if (v5) {
    uint64_t v6 = *((void *)a2 + 2);
  }
  else {
    uint64_t v6 = 0;
  }
  *(void *)(a1 + 312) = v6;
  unint64_t v7 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = sub_1006AD3F0();
    *(_DWORD *)long long buf = 138543362;
    *(void *)uint64_t v22 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Local LE Connectable address is now \"%{public}@\"", buf, 0xCu);

    unint64_t v7 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v9 = sub_1006AD3F0();
    *(_DWORD *)long long buf = 138543362;
    *(void *)uint64_t v22 = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Local LE Non-Connectable address is now \"%{public}@\"", buf, 0xCu);

    unint64_t v7 = qword_100A19EF8;
  }
  if (v5 && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = sub_1006AD3F0();
    *(_DWORD *)long long buf = 138543362;
    *(void *)uint64_t v22 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Local LE Non-Connectable Secondary address is now \"%{public}@\"", buf, 0xCu);

    unint64_t v7 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 184);
    uint64_t v12 = *(void *)(a1 + 352);
    uint64_t v13 = *(int *)(a1 + 864);
    if (v13 > 4) {
      uint64_t v14 = "UNKNOWN";
    }
    else {
      uint64_t v14 = (&off_1009BE3A8)[v13];
    }
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)uint64_t v22 = v11;
    *(_WORD *)&void v22[4] = 2048;
    *(void *)&void v22[6] = v12;
    __int16 v23 = 2082;
    uint64_t v24 = v14;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "fStarted:%d, fConnectingDevices.size:%lu, fConnectionState:%{public}s", buf, 0x1Cu);
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_10068A540;
  v17[3] = &unk_1009BDAE8;
  long long v18 = *a2;
  uint64_t v19 = *((void *)a2 + 2);
  sub_10067762C((os_unfair_lock_s *)a1, v17);
  if (*(unsigned char *)(a1 + 1066))
  {
    uint64_t v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Address change complete, will process connecting devices now", buf, 2u);
    }
    *(unsigned char *)(a1 + 1066) = 0;
    if (!*(_DWORD *)(a1 + 864) && *(void *)(a1 + 352)) {
      sub_10068A59C(a1);
    }
  }
  *(CFAbsoluteTime *)(a1 + 328) = CFAbsoluteTimeGetCurrent();
  return sub_10003AFB4((uint64_t)v20);
}

void sub_10068A518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10068A540(uint64_t a1, uint64_t a2)
{
  long long v3 = *(_OWORD *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  return (*(uint64_t (**)(uint64_t, long long *))(*(void *)a2 + 104))(a2, &v3);
}

uint64_t sub_10068A59C(uint64_t a1)
{
  v82[0] = 0;
  v82[1] = 0;
  sub_10003AED0((uint64_t)v82, a1 + 120);
  sub_100697524(a1);
  if (!*(unsigned char *)(a1 + 1067))
  {
    if (*(_DWORD *)(a1 + 928))
    {
      uint64_t v6 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "We should not get here, this is for debug purposes", buf, 2u);
        uint64_t v6 = qword_100A19EF8;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR)) {
        sub_100790A04();
      }
      return sub_10003AFB4((uint64_t)v82);
    }
    if (*(unsigned char *)(a1 + 1065))
    {
      uint64_t v2 = qword_100A19EF8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
        return sub_10003AFB4((uint64_t)v82);
      }
      *(_WORD *)long long buf = 0;
      long long v3 = "Controller Connection List is full, waiting for something to disconnect first";
      goto LABEL_4;
    }
    unsigned int v7 = *(_DWORD *)(a1 + 864);
    if (v7)
    {
      uint64_t v8 = qword_100A19EF8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
        return sub_10003AFB4((uint64_t)v82);
      }
      if (v7 > 4) {
        __int16 v9 = "UNKNOWN";
      }
      else {
        __int16 v9 = off_1009BE258[v7 - 1];
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)uint64_t v84 = v9;
      *(_WORD *)&v84[8] = 1024;
      *(_DWORD *)int v85 = v7;
      long long v3 = "Busy doing something else %{public}s(%d).";
      uint64_t v4 = v8;
      uint32_t v5 = 18;
      goto LABEL_5;
    }
    if (!*(void *)(a1 + 352))
    {
      uint64_t v10 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Connection list empty, skipping", buf, 2u);
      }
      sub_10067C934(a1, 0);
      uint64_t v11 = sub_100052EB4();
      (*(void (**)(uint64_t, void, void, void, uint64_t, void))(*(void *)v11 + 104))(v11, 0, 0, 0, 1, 0);
      return sub_10003AFB4((uint64_t)v82);
    }
    if (*(unsigned char *)(a1 + 1066))
    {
      uint64_t v2 = qword_100A19EF8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
        return sub_10003AFB4((uint64_t)v82);
      }
      *(_WORD *)long long buf = 0;
      long long v3 = "Address change in progress, waiting for it to complete";
      goto LABEL_4;
    }
    int v81 = 0;
    unsigned __int16 v80 = 0;
    unsigned __int8 v79 = 0;
    sub_100698980(a1, (_WORD *)&v81 + 1, (unsigned __int16 *)&v81, &v80, (char *)&v79);
    if (*(unsigned char *)(a1 + 1075))
    {
      uint64_t v12 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(unsigned __int16 *)(a1 + 1078);
        int v14 = *(unsigned __int16 *)(a1 + 1076);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)uint64_t v84 = HIWORD(v81);
        *(_WORD *)&v84[4] = 1024;
        *(_DWORD *)&v84[6] = (unsigned __int16)v81;
        *(_WORD *)int v85 = 1024;
        *(_DWORD *)&v85[2] = v13;
        *(_WORD *)int v86 = 1024;
        *(_DWORD *)&v86[2] = v14;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Override MainCore Connection Scan: interval %d window %d by interval %d window %d", buf, 0x1Au);
      }
      int v81 = *(_DWORD *)(a1 + 1076);
    }
    uint64_t v15 = *(const unsigned __int8 **)(a1 + 336);
    uint64_t v16 = (const unsigned __int8 *)(a1 + 344);
    char v17 = 1;
    if (v15 != (const unsigned __int8 *)(a1 + 344))
    {
      do
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        long long v18 = off_1009F7ED8;
        uint64_t v19 = sub_100031234(v15 + 25);
        char v20 = sub_1006BEDBC((uint64_t)v18, v19);

        BOOL v21 = (const unsigned __int8 *)*((void *)v15 + 1);
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            BOOL v21 = *(const unsigned __int8 **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (const unsigned __int8 *)*((void *)v15 + 2);
            BOOL v23 = *(void *)v22 == (void)v15;
            uint64_t v15 = v22;
          }
          while (!v23);
        }
        v17 |= v20;
        uint64_t v15 = v22;
      }
      while (v22 != v16);
    }
    uint64_t v24 = sub_100035F54();
    int v25 = (*(uint64_t (**)(uint64_t))(*(void *)v24 + 680))(v24);
    if ((v25 & 1) == 0)
    {
      uint64_t v26 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "LELR is not enabled, disable coded PHY", buf, 2u);
      }
      v17 &= ~4u;
    }
    uint64_t v27 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 688))(v27)) {
      unsigned __int8 v28 = v17 | 2;
    }
    else {
      unsigned __int8 v28 = v17;
    }
    char v29 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109888;
      *(_DWORD *)uint64_t v84 = (unsigned __int16)v81;
      *(_WORD *)&v84[4] = 1024;
      *(_DWORD *)&v84[6] = HIWORD(v81);
      *(_WORD *)int v85 = 1024;
      *(_DWORD *)&v85[2] = v25;
      *(_WORD *)int v86 = 1024;
      *(_DWORD *)&v86[2] = v28;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Next connection parameters are: window - 0x%x, interval - 0x%x enableLELR - %d initPHYs - %x", buf, 0x1Au);
      char v29 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(void *)(a1 + 352);
      *(_DWORD *)long long buf = 134217984;
      *(void *)uint64_t v84 = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Starting auto connection for %lu devices", buf, 0xCu);
    }
    uint64_t v31 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v31 + 648))(v31))
    {
      uint64_t v32 = v80;
      BOOL v33 = v80 != 0;
      int v34 = HIWORD(v81);
      if (v80) {
        uint64_t v35 = HIWORD(v81);
      }
      else {
        uint64_t v35 = 0;
      }
      if (*(unsigned char *)(a1 + 1116) != v33)
      {
        *(unsigned char *)(a1 + 1116) = v33;
        if (v32) {
          uint64_t v36 = &stru_1009BDEA8;
        }
        else {
          uint64_t v36 = &stru_1009BDEC8;
        }
        sub_10067762C((os_unfair_lock_s *)a1, v36);
      }
      int v37 = qword_100A19EF8;
      if (*(unsigned char *)(a1 + 1068))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v38 = "No";
          int v39 = *(unsigned __int16 *)(a1 + 1072);
          if (v32) {
            __int16 v40 = "Yes";
          }
          else {
            __int16 v40 = "No";
          }
          int v41 = *(unsigned __int16 *)(a1 + 1070);
          if (*(unsigned char *)(a1 + 1074)) {
            __int16 v38 = "Yes";
          }
          *(_DWORD *)long long buf = 136447490;
          *(void *)uint64_t v84 = v40;
          *(_WORD *)&v84[8] = 1024;
          *(_DWORD *)int v85 = v35;
          *(_WORD *)&v85[4] = 1024;
          *(_DWORD *)int v86 = v32;
          *(_WORD *)&v86[4] = 2082;
          *(void *)unint64_t v87 = v38;
          *(_WORD *)&v87[8] = 1024;
          int v88 = v39;
          __int16 v89 = 1024;
          int v90 = v41;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Override ScanCore Connection Scan: enabled %{public}s interval %d window %d by enabled %{public}s interval %d window %d", buf, 0x2Eu);
          int v37 = qword_100A19EF8;
        }
        BOOL v33 = *(unsigned char *)(a1 + 1074) != 0;
        uint64_t v35 = *(unsigned __int16 *)(a1 + 1072);
        uint64_t v32 = *(unsigned __int16 *)(a1 + 1070);
        unsigned __int16 v80 = *(_WORD *)(a1 + 1070);
      }
      if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v42 = "No";
        *(_DWORD *)long long buf = 136447234;
        if (v33) {
          __int16 v42 = "Yes";
        }
        *(void *)uint64_t v84 = v42;
        *(_WORD *)&v84[8] = 1024;
        *(_DWORD *)int v85 = v35;
        *(_WORD *)&v85[4] = 1024;
        *(_DWORD *)int v86 = v32;
        *(_WORD *)&v86[4] = 1024;
        *(_DWORD *)unint64_t v87 = v34;
        *(_WORD *)&v87[4] = 1024;
        *(_DWORD *)&v87[6] = (unsigned __int16)v81;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "ScanCore Connection Scan Params enabled %{public}s interval %d window %d with MainCore interval %d window %d", buf, 0x24u);
      }
      uint64_t v43 = sub_10003FB34();
      int v44 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t, uint64_t, void))(*(void *)v43 + 1816))(v43, v33, v35, v32, 0);
      int v45 = qword_100A19EF8;
      if (v44)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)uint64_t v84 = v44;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Failed to execute btscLeSetConnectionScan with error %d", buf, 8u);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
      {
        sub_1007909C4();
      }
    }
    char v78 = 0;
    sub_10001B8E0(&v78);
    uint64_t v46 = HIWORD(v81);
    uint64_t v47 = (unsigned __int16)v81;
    int v48 = sub_100228A7C(HIWORD(v81), (unsigned __int16)v81, v28, 0, 0, 0, 0xFFu, 0xFFu);
    int v49 = sub_100229070();
    sub_10001B910(&v78);
    if (v48 > 757)
    {
      if (v48 == 758)
      {
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
        }
        sub_10067C934((uint64_t)off_1009F7EB8, 4u);
        goto LABEL_106;
      }
      if (v48 == 1319 && v49)
      {
        __int16 v50 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          int v51 = "We're busy disconnecting another device, lets wait before we issue another connection command";
          goto LABEL_88;
        }
LABEL_106:
        uint64_t v74 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Failure, setting new connectionState", buf, 2u);
        }
        sub_10067C934(a1, 0);
LABEL_109:
        sub_10001B8AC(&v78);
        return sub_10003AFB4((uint64_t)v82);
      }
    }
    else
    {
      if (!v48)
      {
        unint64_t v72 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "Success, setting new connectionState", buf, 2u);
        }
        sub_10067C934(a1, 1u);
        uint64_t v73 = sub_100052EB4();
        (*(void (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, unint64_t))(*(void *)v73 + 104))(v73, v46, v47, v79, 1, (unint64_t)(*(double *)(a1 + 560) * 1000.0));
        goto LABEL_109;
      }
      if (v48 == 133)
      {
        __int16 v50 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          int v51 = "Already connected - we should be getting a connection event imminently";
LABEL_88:
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, v51, buf, 2u);
          goto LABEL_106;
        }
        goto LABEL_106;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10079095C();
    }
    if (v48 == 1309)
    {
      uint64_t v76 = sub_100017768();
      sub_10004191C(v77, "");
      sub_1005C8AF4(v76, 1309, (uint64_t)v77, 1);
    }
    sub_1002B804C(&v78);
    sub_1002419F0(v52, v53, v54, v55, v56, v57, v58, v59);
    sub_1000486F0(a1 + 360, *(void **)(a1 + 368));
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 360) = a1 + 368;
    sub_100226764(v60, v61, v62, v63, v64, v65, v66, v67);
    sub_10001B910(&v78);
    int v68 = *(const unsigned __int8 **)(a1 + 336);
    if (v68 != v16)
    {
      do
      {
        __int16 v69 = sub_100031234(v68 + 25);
        sub_1000305AC(buf, v69);
        sub_10068D04C(a1, buf, 1, v48, 1);

        int v70 = (const unsigned __int8 *)*((void *)v68 + 1);
        if (v70)
        {
          do
          {
            unsigned int v71 = v70;
            int v70 = *(const unsigned __int8 **)v70;
          }
          while (v70);
        }
        else
        {
          do
          {
            unsigned int v71 = (const unsigned __int8 *)*((void *)v68 + 2);
            BOOL v23 = *(void *)v71 == (void)v68;
            int v68 = v71;
          }
          while (!v23);
        }
        int v68 = v71;
      }
      while (v71 != v16);
    }
    sub_1000486F0(a1 + 336, *(void **)(a1 + 344));
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 336) = v16;
    sub_1000486F0(a1 + 608, *(void **)(a1 + 616));
    *(void *)(a1 + 608) = a1 + 616;
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    goto LABEL_106;
  }
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    long long v3 = "Stack is shutting down, we should not even be here.";
LABEL_4:
    uint64_t v4 = v2;
    uint32_t v5 = 2;
LABEL_5:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, buf, v5);
  }
  return sub_10003AFB4((uint64_t)v82);
}

void sub_10068B114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a15);
  sub_10003AFB4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_10068B190(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 120);
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 184);
    uint64_t v4 = *(void *)(a1 + 352);
    uint64_t v5 = *(int *)(a1 + 864);
    if (v5 > 4) {
      uint64_t v6 = "UNKNOWN";
    }
    else {
      uint64_t v6 = (&off_1009BE3A8)[v5];
    }
    *(_DWORD *)long long buf = 67109634;
    int v11 = v3;
    __int16 v12 = 2048;
    uint64_t v13 = v4;
    __int16 v14 = 2082;
    uint64_t v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AddressWillChange event fStarted:%d, fConnectingDevices.size:%lu, fConnectionState:%{public}s", buf, 0x1Cu);
  }
  if (*(unsigned char *)(a1 + 184) && *(void *)(a1 + 352) && *(_DWORD *)(a1 + 864) == 1)
  {
    *(unsigned char *)(a1 + 1066) = 1;
    unsigned int v7 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Cancelling connections due to advertising address changed", buf, 2u);
    }
    sub_10067C23C(a1, 0);
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_10068B300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10068B31C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, a1 + 120);
  [*(id *)(a1 + 768) removeObject:v3];
  [*(id *)(a1 + 792) removeObject:v3];
  sub_1000305AC(&buf, v3);
  uint64_t v19 = (uint64_t **)(a1 + 336);
  uint64_t v4 = sub_1006AAB38(a1 + 336, (unsigned __int8 *)&buf);
  uint64_t v5 = qword_100A19EF8;
  if (a1 + 344 == v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790A94();
    }
  }
  else
  {
    long long v18 = (uint64_t *)v4;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Removing device \"%{public}@\" from connection filter accept list, waiting for controller to complete.", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v6 = *(uint64_t **)(a1 + 360);
    if (v6 != (uint64_t *)(a1 + 368))
    {
      do
      {
        sub_1000305AC(&buf, v3);
        uint64_t v7 = uuid_compare((const unsigned __int8 *)v6 + 40, (const unsigned __int8 *)&buf);
        if (v7)
        {
          uint64_t v8 = (uint64_t *)v6[1];
          if (v8)
          {
            do
            {
              __int16 v9 = v8;
              uint64_t v8 = (uint64_t *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              __int16 v9 = (uint64_t *)v6[2];
              BOOL v10 = *v9 == (void)v6;
              uint64_t v6 = v9;
            }
            while (!v10);
          }
        }
        else
        {
          int v11 = sub_10068CCD0(v7, v6[4]);
          __int16 v12 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
          {
            LODWORD(buf) = 67109120;
            DWORD1(buf) = v11;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "removeAddressFromBTController returned %d", (uint8_t *)&buf, 8u);
          }
          __int16 v9 = sub_10004D3B8((uint64_t **)(a1 + 360), v6);
          operator delete(v6);
        }
        uint64_t v6 = v9;
      }
      while (v9 != (uint64_t *)(a1 + 368));
    }
    if (_os_feature_enabled_impl())
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v22 = 0;
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      unsigned int v13 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v3) - 0x10000;
      if (v13 <= 0x19 && ((1 << v13) & 0x37800FF) != 0)
      {
        sub_1000305AC(&buf, v3);
        if (a1 + 616 != sub_1006AAB38(a1 + 608, (unsigned __int8 *)&buf))
        {
          id v14 = v3;
          long long buf = (unint64_t)v14;
          uint64_t v27 = 0;
          int v28 = 0;
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          void v21[2] = sub_1006A1C30;
          v21[3] = &unk_1009BDE88;
          v21[4] = a1;
          char v29 = objc_retainBlock(v21);
          sub_1006A1918(&v22, (uint64_t *)&buf);

          sub_1000305AC(&buf, v14);
          sub_1006AC3A0((uint64_t **)(a1 + 608), (unsigned __int8 *)&buf);
        }
      }
      if (v22 != v23)
      {
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009BE158);
        }
        uint64_t v15 = off_1009F8150;
        memset(v20, 0, sizeof(v20));
        sub_1006AC2CC(v20, v22, v23, 0xCCCCCCCCCCCCCCCDLL * ((v23 - v22) >> 3));
        sub_1004FD284((uint64_t)v15, v20);
        *(void *)&long long buf = v20;
        sub_1006AC118((void ***)&buf);
        sub_1006AC16C((uint64_t)&v22, v22);
      }
      long long buf = 0uLL;
      uint64_t v27 = 0;
      [v3 UUIDString:v18 v19];
      id v16 = objc_claimAutoreleasedReturnValue();
      sub_10004191C(&buf, (char *)[v16 UTF8String]);

      sub_10037EF3C((uint64_t **)(a1 + 1352), (const void **)&buf);
      if (SHIBYTE(v27) < 0) {
        operator delete((void *)buf);
      }
      *(void *)&long long buf = &v22;
      sub_1006AC118((void ***)&buf);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    sub_1006C1348((uint64_t)off_1009F7ED8, v3, 0);
    sub_10004D3B8(v19, v18);
    operator delete(v18);
  }
  if (*(unsigned char *)(a1 + 1119))
  {
    uint64_t v17 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 2624))(v17)) {
      sub_10067B1E8(a1, v3, *(unsigned char *)(a1 + 736), 0);
    }
  }
  sub_10003AFB4((uint64_t)v25);
}

void sub_10068B814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,char *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34)
{
  __p = &a22;
  sub_1006AC118((void ***)&__p);
  sub_10003AFB4((uint64_t)&a25);

  _Unwind_Resume(a1);
}

void sub_10068B8C4(uint64_t a1, void *a2, char a3)
{
  id v3 = a2;
  uint64_t v4 = sub_10003FB34();
  if (!sub_100354F18(v4, 100))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790B00();
    }
    goto LABEL_52;
  }
  uint64_t v5 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 896))(v5)) {
    goto LABEL_15;
  }
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BE158);
  }
  if (!sub_1004FB1DC(off_1009F8150)) {
    goto LABEL_15;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v6 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v3);
  int v7 = v6;
  BOOL v35 = 1;
  if (v6 == 19 || v6 == 196608) {
    goto LABEL_16;
  }
  uint64_t v8 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 904))(v8))
  {
    BOOL v35 = 0;
    if ((v7 - 0x10000) <= 0x15) {
      BOOL v35 = ((1 << v7) & 0x200011) != 0;
    }
  }
  else
  {
LABEL_15:
    BOOL v35 = 0;
  }
LABEL_16:
  uint64_t v9 = sub_10003FB34();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 2568))(v9);
  if (!v10) {
    goto LABEL_23;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v11 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v3);
  uint64_t v12 = sub_100035F54();
  uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v12 + 920))(v12);
  if (v10 && (uint64_t v10 = _os_feature_enabled_impl(), v10))
  {
    BOOL v13 = 0;
    if ((v11 - 0x10000) <= 0x15) {
      BOOL v13 = ((1 << v11) & 0x200011) != 0;
    }
  }
  else
  {
LABEL_23:
    BOOL v13 = 0;
  }
  unsigned __int8 v14 = sub_100679558(v10, v3);
  int v15 = sub_1006790A4(a1, v3);
  int v37 = 0;
  v38[0] = 0;
  v38[1] = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  sub_1006C64DC((uint64_t)off_1009F7ED8, v3, (uint64_t)&v37);
  id v16 = v37;
  if (v37 != v38)
  {
    while (1)
    {
      unint64_t v17 = v16[4];
      long long v18 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = sub_1006AD3F0();
        *(_DWORD *)long long buf = 138544642;
        id v40 = v3;
        __int16 v41 = 2114;
        uint64_t v42 = (uint64_t)v19;
        __int16 v43 = 1024;
        *(_DWORD *)int v44 = 0;
        *(_WORD *)&v44[4] = 1024;
        *(_DWORD *)&v44[6] = v15;
        __int16 v45 = 1024;
        int v46 = v14;
        __int16 v47 = 1024;
        BOOL v48 = v35;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "device \"%{public}@\" with address \"%{public}@\" filter accept list options: conn_cmpt_option=%d, minRSSI=%d, PHYs=%x conn_scan_pri=%d waiting for controller to complete. ", buf, 0x2Eu);
      }
      if ((a3 & 1) != 0 || (v14 & 4) != 0) {
        break;
      }
      if (v15)
      {
        if (*(unsigned char *)(a1 + 1118)) {
          int v20 = 1;
        }
        else {
          int v20 = v13;
        }
        if ((v20 | v35)) {
          break;
        }
      }
      else if (v35 || v13)
      {
        break;
      }
LABEL_45:
      uint64_t v27 = (void *)v16[1];
      if (v27)
      {
        do
        {
          int v28 = (void **)v27;
          uint64_t v27 = (void *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          int v28 = (void **)v16[2];
          BOOL v29 = *v28 == v16;
          id v16 = v28;
        }
        while (!v29);
      }
      id v16 = v28;
      if (v28 == v38) {
        goto LABEL_51;
      }
    }
    *(_DWORD *)((char *)v36 + 3) = 0;
    v36[0] = 0;
    uint64_t v21 = sub_1002284B8(v17);
    v36[0] = v21;
    BYTE2(v36[1]) = BYTE6(v21);
    LOWORD(v36[1]) = WORD2(v21);
    if ((v14 & 4) == 0) {
      unsigned __int8 v14 = 0;
    }
    uint64_t v22 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = sub_1006AD3F0();
      *(_DWORD *)long long buf = 138543875;
      id v40 = v3;
      __int16 v41 = 2160;
      uint64_t v42 = 1752392040;
      __int16 v43 = 2113;
      *(void *)int v44 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Adding device \"%{public}@\" with address \"%{private, mask.hash}@\" to connection filter accept list with option", buf, 0x20u);
    }
    uint64_t v24 = sub_10003FB34();
    BYTE2(v32) = v13;
    BYTE1(v32) = v13;
    LOBYTE(v32) = v13;
    HIBYTE(v31) = v35;
    BYTE2(v31) = v14;
    BYTE1(v31) = v15;
    LOBYTE(v31) = 0;
    LOWORD(v30) = 0;
    int v25 = (*(uint64_t (**)(uint64_t, _DWORD *, void, void, void, void, void, void, int, void, int, void, int, void))(*(void *)v24 + 3584))(v24, v36, 0, 0, 0, 0, 0, 0, v30, 0, v31, 0, v32, 0);
    if (v25)
    {
      uint64_t v26 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        LODWORD(v40) = v25;
        _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "addFilterAcceptListWithOptions failed with error %d", buf, 8u);
      }
    }
    goto LABEL_45;
  }
LABEL_51:
  sub_1000486F0((uint64_t)&v37, v38[0]);
LABEL_52:
}

void sub_10068BED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  _Unwind_Resume(a1);
}

void sub_10068BF34(id *a1)
{
  long long v94 = 0u;
  long long v95 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  id v1 = a1[97];
  id v2 = [v1 countByEnumeratingWithState:&v94 objects:v105 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v95;
    do
    {
      for (i = 0; i != v2; i = (char *)i + 1)
      {
        if (*(void *)v95 != v3) {
          objc_enumerationMutation(v1);
        }
        uint64_t v5 = *(void **)(*((void *)&v94 + 1) + 8 * i);
        int v6 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "trying to remove \"%{public}@\" from connecting list", buf, 0xCu);
        }
        sub_10068B31C((uint64_t)a1, v5);
      }
      id v2 = [v1 countByEnumeratingWithState:&v94 objects:v105 count:16];
    }
    while (v2);
  }

  [a1[97] removeAllObjects];
  int v91 = 0;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v92 = 0;
  unint64_t v93 = 0;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v90 = 0u;
  id v7 = a1[96];
  id v8 = [v7 countByEnumeratingWithState:&v87 objects:v104 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v88;
    do
    {
      for (j = 0; j != v8; j = (char *)j + 1)
      {
        if (*(void *)v88 != v9) {
          objc_enumerationMutation(v7);
        }
        int v11 = *(void **)(*((void *)&v87 + 1) + 8 * (void)j);
        uint64_t v12 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "trying to add \"%{public}@\" to the connecting list", buf, 0xCu);
        }
        if (sub_100681FF4((uint64_t)a1, v11) == 8)
        {
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          sub_1000305AC(buf, v11);
          unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v13 = v92;
          if ((unint64_t)v92 >= v93)
          {
            unsigned __int8 v14 = (unsigned __int8 *)sub_1006AB128((uint64_t)&v91, buf);
          }
          else
          {
            uuid_copy(v92, buf);
            unsigned __int8 v14 = v13 + 16;
          }
          unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v92 = v14;
        }
      }
      id v8 = [v7 countByEnumeratingWithState:&v87 objects:v104 count:16];
    }
    while (v8);
  }

  long long v85 = 0u;
  long long v86 = 0u;
  long long v83 = 0u;
  long long v84 = 0u;
  id obj = a1[98];
  id v15 = [obj countByEnumeratingWithState:&v83 objects:v103 count:16];
  if (v15)
  {
    unint64_t v17 = (uint64_t **)(a1 + 45);
    long long v18 = (uint64_t *)(a1 + 46);
    unint64_t v72 = (uint64_t **)(a1 + 42);
    uint64_t v73 = *(void *)v84;
    *(void *)&long long v16 = 136315650;
    long long v69 = v16;
    do
    {
      uint64_t v19 = 0;
      id v70 = v15;
      do
      {
        if (*(void *)v84 != v73) {
          objc_enumerationMutation(obj);
        }
        int v20 = *(void **)(*((void *)&v83 + 1) + 8 * (void)v19);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        BOOL v21 = sub_1006C65B8((uint64_t)off_1009F7ED8, v20);
        uint64_t v22 = qword_100A19EF8;
        if (!v21)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Device \"%{public}@\" does not support multiple addresses", buf, 0xCu);
            uint64_t v22 = qword_100A19EF8;
          }
          if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v20;
            _os_log_fault_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Device \"%{public}@\" does not support multiple addresses but still in the fDevicesToUpdateInFilterAcceptList", buf, 0xCu);
          }
          goto LABEL_77;
        }
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "processing %{public}@ from fDevicesToUpdateInFilterAcceptList", buf, 0xCu);
        }
        __p = 0;
        int v81 = 0;
        uint64_t v82 = 0;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        sub_1006C6648((uint64_t)off_1009F7ED8, v20, 2u, (uint64_t)&__p);
        if (!v82)
        {
          int v39 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v20;
            _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Device \"%{public}@\" has no addresses, disconnecting ", buf, 0xCu);
          }
          sub_1000486F0((uint64_t)&__p, v81);
          goto LABEL_77;
        }
        uint64_t v23 = *v17;
        if (*v17 != v18)
        {
          do
          {
            sub_1000305AC(buf, v20);
            uint64_t v24 = uuid_compare((const unsigned __int8 *)v23 + 40, buf);
            if (v24)
            {
              int v25 = (uint64_t *)v23[1];
              if (v25)
              {
                do
                {
                  uint64_t v26 = v25;
                  int v25 = (uint64_t *)*v25;
                }
                while (v25);
              }
              else
              {
                do
                {
                  uint64_t v26 = (uint64_t *)v23[2];
                  BOOL v33 = *v26 == (void)v23;
                  uint64_t v23 = v26;
                }
                while (!v33);
              }
            }
            else
            {
              int v27 = sub_10068CCD0(v24, v23[4]);
              int v28 = qword_100A19EF8;
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
              {
                sub_10004BDF8();
                BOOL v29 = buf;
                if ((buf[23] & 0x80u) != 0) {
                  BOOL v29 = *(uint8_t **)buf;
                }
                *(_DWORD *)unsigned int v99 = 136446466;
                *(void *)&v99[4] = v29;
                __int16 v100 = 1024;
                LODWORD(v101) = v27;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, "removeAddressFromBTController %{public}s returned %d", v99, 0x12u);
                if ((char)buf[23] < 0) {
                  operator delete(*(void **)buf);
                }
              }
              uint64_t v26 = sub_10004D3B8(v17, v23);
              operator delete(v23);
            }
            uint64_t v23 = v26;
          }
          while (v26 != v18);
        }
        int v30 = __p;
        if (__p == &v81)
        {
LABEL_69:
          sub_1000486F0((uint64_t)&__p, v81);
          id v15 = v70;
          goto LABEL_83;
        }
        while (1)
        {
          unint64_t v79 = v30[4];
          int v31 = sub_10068CE90((uint64_t)a1, v79);
          int v32 = v31;
          BOOL v33 = !v31 || v31 == 4152;
          if (!v33) {
            break;
          }
          int v34 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10004BDF8();
            BOOL v35 = buf;
            if ((buf[23] & 0x80u) != 0) {
              BOOL v35 = *(uint8_t **)buf;
            }
            *(_DWORD *)unsigned int v99 = 136446466;
            *(void *)&v99[4] = v35;
            __int16 v100 = 2114;
            int v101 = v20;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "setting fConnectingAddresses[%{public}s]=%{public}@", v99, 0x16u);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
          sub_1000305AC(buf, v20);
          *(void *)unsigned int v99 = &v79;
          uint64_t v36 = sub_1006AA33C((uint64_t)v17, &v79, (uint64_t)&unk_1007BE9D0, (void **)v99);
          uuid_copy((unsigned __int8 *)v36 + 40, buf);
          int v37 = (void *)v30[1];
          if (v37)
          {
            do
            {
              __int16 v38 = (void **)v37;
              int v37 = (void *)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              __int16 v38 = (void **)v30[2];
              BOOL v33 = *v38 == v30;
              int v30 = v38;
            }
            while (!v33);
          }
          int v30 = v38;
          if (v38 == &v81) {
            goto LABEL_69;
          }
        }
        uint64_t v42 = __p;
        if (__p == &v81)
        {
          sub_1000486F0((uint64_t)&__p, v81);
          id v15 = v70;
LABEL_77:
          sub_1000305AC(buf, v20);
          if ((sub_100681934((uint64_t)a1, buf) & 1) == 0)
          {
            sub_1000305AC(buf, v20);
            id v40 = (uint64_t *)sub_1006AAB38((uint64_t)v72, buf);
            if (a1 + 43 != (id *)v40)
            {
              sub_10004D3B8(v72, v40);
              operator delete(v40);
            }
            __int16 v41 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v20;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Sending device connection error for device %@", buf, 0xCu);
            }
            sub_1000305AC(buf, v20);
            sub_10068D04C((uint64_t)a1, buf, 0, 8, 0);
          }
          goto LABEL_83;
        }
        do
        {
          __int16 v43 = (void *)*v18;
          if (*v18)
          {
            unint64_t v44 = v42[4];
            __int16 v45 = (uint64_t *)(a1 + 46);
            do
            {
              unint64_t v46 = v43[4];
              BOOL v47 = v46 >= v44;
              if (v46 >= v44) {
                BOOL v48 = v43;
              }
              else {
                BOOL v48 = v43 + 1;
              }
              if (v47) {
                __int16 v45 = v43;
              }
              __int16 v43 = (void *)*v48;
            }
            while (*v48);
            if (v45 != v18 && v44 >= v45[4])
            {
              int v49 = qword_100A19EF8;
              BOOL v50 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
              if (v50)
              {
                sub_10004BDF8();
                int v51 = v99;
                if (v102 < 0) {
                  int v51 = *(unsigned char **)v99;
                }
                *(_DWORD *)long long buf = v69;
                *(void *)&uint8_t buf[4] = v51;
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&unsigned char buf[14] = v20;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&uint8_t buf[24] = v32;
                _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "removing address %s from controller for device %@ due to error %d", buf, 0x1Cu);
                if (v102 < 0) {
                  operator delete(*(void **)v99);
                }
              }
              sub_10068CCD0(v50, v44);
              sub_10004D3B8(v17, v45);
              operator delete(v45);
            }
          }
          uint64_t v52 = (void *)v42[1];
          if (v52)
          {
            do
            {
              uint64_t v53 = (void **)v52;
              uint64_t v52 = (void *)*v52;
            }
            while (v52);
          }
          else
          {
            do
            {
              uint64_t v53 = (void **)v42[2];
              BOOL v33 = *v53 == v42;
              uint64_t v42 = v53;
            }
            while (!v33);
          }
          uint64_t v42 = v53;
        }
        while (v53 != &v81);
        sub_1000486F0((uint64_t)&__p, v81);
        id v15 = v70;
        if (v32) {
          goto LABEL_77;
        }
LABEL_83:
        uint64_t v19 = (char *)v19 + 1;
      }
      while (v19 != v15);
      id v54 = [obj countByEnumeratingWithState:&v83 objects:v103 count:16];
      id v15 = v54;
    }
    while (v54);
  }

  [a1[98] removeAllObjects];
  [a1[96] removeAllObjects];
  uint64_t v56 = (const unsigned __int8 *)v91;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v55 = v92;
  if (v91 != v92)
  {
    do
    {
      uint64_t v57 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v56, (char *)buf);
        sub_10004191C(&__p, (char *)buf);
        uint64_t v58 = v82 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)unsigned int v99 = 136446210;
        *(void *)&v99[4] = v58;
        _os_log_error_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_ERROR, "Failed to connect to device %{public}s due to 0 address", v99, 0xCu);
        if (SHIBYTE(v82) < 0) {
          operator delete(__p);
        }
      }
      sub_10068D04C((uint64_t)a1, v56, 0, 8, 0);
      v56 += 16;
    }
    while (v56 != v55);
  }
  uint64_t v59 = sub_10003FB34();
  if (sub_100354F18(v59, 100))
  {
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    id v60 = a1[99];
    id v61 = [v60 countByEnumeratingWithState:&v75 objects:v98 count:16];
    if (!v61) {
      goto LABEL_138;
    }
    uint64_t v62 = *(void *)v76;
    while (1)
    {
      for (k = 0; k != v61; k = (char *)k + 1)
      {
        if (*(void *)v76 != v62) {
          objc_enumerationMutation(v60);
        }
        uint64_t v64 = *(void **)(*((void *)&v75 + 1) + 8 * (void)k);
        if (sub_10068D238((uint64_t)a1, v64))
        {
          uint64_t v65 = qword_100A19EF8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
            continue;
          }
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v64;
          uint64_t v66 = v65;
          uint64_t v67 = "Warning: LeConnectionDenyList: Device %{public}@ is currently blocked, ignoring request to add to filter accept list";
          goto LABEL_135;
        }
        sub_1000305AC(buf, v64);
        if (a1 + 43 != (id *)sub_1006AAB38((uint64_t)(a1 + 42), buf))
        {
          sub_10068B8C4((uint64_t)a1, v64, 1);
          continue;
        }
        uint64_t v68 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v64;
          uint64_t v66 = v68;
          uint64_t v67 = "not connecting to Device Device %{public}@ any more, ignoring update filter accept list option";
LABEL_135:
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, v67, buf, 0xCu);
          continue;
        }
      }
      id v61 = [v60 countByEnumeratingWithState:&v75 objects:v98 count:16];
      if (!v61)
      {
LABEL_138:

        break;
      }
    }
  }
  [a1[99] removeAllObjects];
  if (v91)
  {
    unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v92 = (unsigned __int8 *)v91;
    operator delete(v91);
  }
}

void sub_10068CBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10068CCD0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = sub_1002284B8(a2);
  int v8 = v2;
  char v10 = BYTE6(v2);
  __int16 v9 = WORD2(v2);
  uint64_t v3 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = sub_1006AD3F0();
    *(_DWORD *)long long buf = 141558275;
    *(void *)&uint8_t buf[4] = 1752392040;
    *(_WORD *)&unsigned char buf[12] = 2113;
    *(void *)&unsigned char buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Removing address \"%{private, mask.hash}@\" from connection FilterAcceptList, waiting for controller to complete.", buf, 0x16u);
  }
  char v7 = 0;
  sub_10001B8E0(&v7);
  byte_100A1A221 = 1;
  uint64_t v5 = sub_1002416C4((unsigned __int8 *)&v8);
  sub_10001B910(&v7);
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790B6C();
    }
    byte_100A1A221 = 0;
  }
  else
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003AED0((uint64_t)buf, (uint64_t)&unk_100A1A1E0);
    if (byte_100A1A221) {
      sub_1002B8184(&stru_100A1A170, (pthread_mutex_t **)buf);
    }
    sub_10003AFE8((uint64_t)buf);
    sub_10003AFB4((uint64_t)buf);
  }
  sub_10001B8AC(&v7);
  return v5;
}

void sub_10068CE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_10068CE90(uint64_t a1, unint64_t a2)
{
  if (!*(unsigned char *)(a1 + 184)) {
    return 103;
  }
  uint64_t v2 = sub_1002284B8(a2);
  int v8 = v2;
  char v10 = BYTE6(v2);
  __int16 v9 = WORD2(v2);
  uint64_t v3 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = sub_1006AD3F0();
    *(_DWORD *)long long buf = 138477827;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Adding address \"%{private}@\" to connection FilterAcceptList, waiting for controller to complete.", buf, 0xCu);
  }
  char v7 = 0;
  sub_10001B8E0(&v7);
  byte_100A1A220 = 1;
  uint64_t v5 = sub_100241348((unsigned __int8 *)&v8);
  sub_10001B910(&v7);
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790BD4();
    }
    byte_100A1A220 = 0;
  }
  else
  {
    *(_OWORD *)long long buf = 0uLL;
    sub_10003AED0((uint64_t)buf, (uint64_t)&unk_100A1A1A0);
    if (byte_100A1A220) {
      sub_1002B8184(&stru_100A1A140, (pthread_mutex_t **)buf);
    }
    sub_10003AFE8((uint64_t)buf);
    sub_10003AFB4((uint64_t)buf);
  }
  sub_10001B8AC(&v7);
  return v5;
}

void sub_10068D01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

void sub_10068D04C(uint64_t a1, const unsigned __int8 *a2, int a3, int a4, char a5)
{
  uint64_t v10 = *(void *)(a1 + 400);
  int v11 = sub_100031234(a2);
  uint64_t v12 = sub_1004AF8EC();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_100696EDC;
  v21[3] = &unk_1009BDB78;
  int v23 = v10;
  id v13 = v11;
  id v22 = v13;
  char v24 = a3;
  sub_100013018(v12, v21);
  if (qword_1009FB270 != -1) {
    dispatch_once(&qword_1009FB270, &stru_1009BE198);
  }
  uint64_t v14 = qword_1009FB268;
  id v15 = sub_100031234(a2);
  if (a3) {
    uint64_t v16 = 2;
  }
  else {
    uint64_t v16 = 0;
  }
  sub_10073676C(v14, v15, v16);

  if (a4 != 305 && (a3 & 1) == 0)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    v17[2] = sub_100697134;
    v17[3] = &unk_1009BDBA0;
    char v20 = a5;
    id v18 = v13;
    int v19 = a4;
    sub_10067762C((os_unfair_lock_s *)a1, v17);
  }
}

void sub_10068D1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10068D238(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(const unsigned __int8 **)(a1 + 1456);
  uint64_t v5 = (const unsigned __int8 *)(a1 + 1464);
  if (v4 == v5)
  {
LABEL_11:
    uint64_t v9 = 0;
  }
  else
  {
    while (1)
    {
      sub_1000305AC(uu2, v3);
      if (!uuid_compare(v4 + 32, uu2) && (*((void *)v4 + 9) || *((void *)v4 + 10))) {
        break;
      }
      int v6 = (const unsigned __int8 *)*((void *)v4 + 1);
      if (v6)
      {
        do
        {
          char v7 = v6;
          int v6 = *(const unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          char v7 = (const unsigned __int8 *)*((void *)v4 + 2);
          BOOL v8 = *(void *)v7 == (void)v4;
          uint64_t v4 = v7;
        }
        while (!v8);
      }
      uint64_t v4 = v7;
      if (v7 == v5) {
        goto LABEL_11;
      }
    }
    uint64_t v9 = 1;
  }

  return v9;
}

void sub_10068D324(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10068D33C(uint64_t a1, int a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 120);
  uint64_t v4 = *(const unsigned __int8 **)(a1 + 384);
  if (v4 == (const unsigned __int8 *)(a1 + 392))
  {
    unsigned __int16 v5 = 0;
  }
  else
  {
    unsigned __int16 v5 = 0;
    do
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      int v6 = off_1009F7ED8;
      char v7 = sub_100031234(v4 + 32);
      if (sub_1006BDC1C((uint64_t)v6, v7) == a2)
      {
        BOOL v8 = sub_100031234(v4 + 32);
        sub_1000305AC(v15, v8);
        unsigned __int16 v9 = (unsigned __int16)sub_100681934(a1, v15);

        v5 += v9 ^ 1;
      }
      else
      {
      }
      uint64_t v10 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v10)
      {
        do
        {
          int v11 = (const unsigned __int8 **)v10;
          uint64_t v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          int v11 = (const unsigned __int8 **)*((void *)v4 + 2);
          BOOL v12 = *v11 == v4;
          uint64_t v4 = (const unsigned __int8 *)v11;
        }
        while (!v12);
      }
      uint64_t v4 = (const unsigned __int8 *)v11;
    }
    while (v11 != (const unsigned __int8 **)(a1 + 392));
  }
  sub_10003AFB4((uint64_t)v14);
  return v5;
}

void sub_10068D4C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10068D4F8(uint64_t a1, void *a2, uint64_t a3)
{
  v19[0] = 0;
  v19[1] = 0;
  id v18 = a2;
  sub_10003AED0((uint64_t)v19, a1 + 120);
  unsigned __int16 v4 = 0;
  if (v18 && a3)
  {
    if (![v18 length]
      || (unsigned __int16 v5 = *(const unsigned __int8 **)(a1 + 384), v5 == (const unsigned __int8 *)(a1 + 392)))
    {
      unsigned __int16 v4 = 0;
    }
    else
    {
      unsigned __int16 v4 = 0;
      do
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        int v6 = off_1009F7ED8;
        char v7 = sub_100031234(v5 + 32);
        unsigned int v8 = sub_1006C2494((uint64_t)v6, v7, v18);

        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        unsigned __int16 v9 = off_1009F7ED8;
        uint64_t v10 = sub_100031234(v5 + 32);
        LODWORD(v9) = sub_1006C2740((uint64_t)v9, v10, a3);

        if (v8 & v9)
        {
          int v11 = sub_100031234(v5 + 32);
          sub_1000305AC(v20, v11);
          unsigned __int16 v12 = (unsigned __int16)sub_100681934(a1, v20);

          v4 += v12 ^ 1;
        }
        id v13 = (unsigned __int8 *)*((void *)v5 + 1);
        if (v13)
        {
          do
          {
            uint64_t v14 = (const unsigned __int8 **)v13;
            id v13 = *(unsigned __int8 **)v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (const unsigned __int8 **)*((void *)v5 + 2);
            BOOL v15 = *v14 == v5;
            unsigned __int16 v5 = (const unsigned __int8 *)v14;
          }
          while (!v15);
        }
        unsigned __int16 v5 = (const unsigned __int8 *)v14;
      }
      while (v14 != (const unsigned __int8 **)(a1 + 392));
    }
  }
  sub_10003AFB4((uint64_t)v19);

  return v4;
}

void sub_10068D6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_10068D758(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4, __int16 a5, unsigned int a6, uint64_t a7)
{
  uint64_t v14 = sub_10003FB34();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 2104))(v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790CA4();
    }
    return 11;
  }
  uint64_t v53 = 0;
  if (sub_1006856B8(a1, a2, &v53))
  {
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    int v57 = 0;
    if (!a4)
    {
      int v28 = (uint64_t *)sub_1006AA128(a1 + 800, a2);
      if ((uint64_t *)(a1 + 808) != v28)
      {
        BOOL v29 = v28;
        sub_10004D3B8((uint64_t **)(a1 + 800), v28);
        operator delete(v29);
      }
      uint64_t v19 = 0;
      uint64_t v21 = 0;
      __int16 v26 = 0;
      char v25 = 0;
      __int16 v24 = 0;
      __int16 v23 = 0;
      uint64_t v17 = 0;
      goto LABEL_24;
    }
    uint64_t v15 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 2112))(v15))
    {
      id v54 = a2;
      *((_WORD *)sub_1006AB2E4((uint64_t **)(a1 + 800), a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v54)+ 21) = a5;
      uint64_t v16 = sub_100031234(a2);
      uint64_t v17 = sub_100679558((uint64_t)v16, v16);

      id v18 = sub_100031234(a2);
      uint64_t v19 = sub_1006790A4(a1, v18);

      if (a6 && a7)
      {
        unint64_t v20 = 0;
        if (a6 >= 5) {
          uint64_t v21 = 5;
        }
        else {
          uint64_t v21 = a6;
        }
        do
        {
          if (v20 >= a6) {
            int v22 = 0;
          }
          else {
            int v22 = *(_DWORD *)(a7 + 4 * v20);
          }
          *((_DWORD *)&v55 + v20++) = v22;
        }
        while (v20 != 5);
        __int16 v23 = 480;
        __int16 v24 = 20;
        char v25 = 6;
        __int16 v26 = 48;
      }
      else
      {
        uint64_t v55 = 0x2FA000002C4;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        int v31 = off_1009F7ED8;
        int v32 = sub_100031234(a2);
        sub_10004191C(v51, "A1603");
        if (sub_100030A04((uint64_t)v31, v32, (uint64_t)v51))
        {
          int v33 = 1;
        }
        else
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          int v34 = off_1009F7ED8;
          BOOL v35 = sub_100031234(a2);
          sub_10004191C(v49, "A2051");
          if (sub_100030A04((uint64_t)v34, v35, (uint64_t)v49))
          {
            int v33 = 1;
          }
          else
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            uint64_t v36 = off_1009F7ED8;
            int v37 = sub_100031234(a2);
            sub_10004191C(v47, "A3085");
            if (sub_100030A04((uint64_t)v36, v37, (uint64_t)v47))
            {
              int v33 = 1;
            }
            else
            {
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
              }
              __int16 v38 = off_1009F7ED8;
              uint64_t v42 = sub_100031234(a2);
              sub_10004191C(v45, "A2538");
              if (sub_100030A04((uint64_t)v38, v42, (uint64_t)v45))
              {
                int v33 = 1;
              }
              else
              {
                if (qword_1009F7EE0 != -1) {
                  dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
                }
                int v39 = off_1009F7ED8;
                id v40 = sub_100031234(a2);
                sub_10004191C(__p, "_HID_DEVICE_");
                int v33 = sub_100030A04((uint64_t)v39, v40, (uint64_t)__p);
                if (v44 < 0) {
                  operator delete(__p[0]);
                }
              }
              if (v46 < 0) {
                operator delete(v45[0]);
              }
            }
            if (v48 < 0) {
              operator delete(v47[0]);
            }
          }
          if (v50 < 0) {
            operator delete(v49[0]);
          }
        }
        if (v52 < 0) {
          operator delete(v51[0]);
        }

        if (v33)
        {
          __int16 v23 = 480;
          LODWORD(v56) = 719;
          __int16 v24 = 20;
          char v25 = 6;
          __int16 v26 = 48;
          uint64_t v21 = 3;
        }
        else
        {
          __int16 v23 = 480;
          __int16 v24 = 20;
          char v25 = 6;
          __int16 v26 = 48;
          uint64_t v21 = 2;
        }
      }
LABEL_24:
      uint64_t v30 = sub_10003FB34();
      HIWORD(v41) = v23;
      BYTE4(v41) = v25;
      WORD1(v41) = v26;
      LOWORD(v41) = v26;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, __int16))(*(void *)v30 + 1744))(v30, *v53, a3, a4, v21, &v55, v19, v17, v41, v24);
      return 0;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790C3C();
    }
    return 11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
    sub_100790C70();
  }
  return 7;
}

void sub_10068DD1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  if (a23 < 0) {
    operator delete(a18);
  }

  if (a29 < 0) {
    operator delete(a24);
  }

  if (a35 < 0) {
    operator delete(a30);
  }

  if (a41 < 0) {
    operator delete(a36);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10068DDE8(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int8 v64 = 0;
  int v62 = -31;
  unsigned int v63 = 1;
  int v61 = -30;
  uint64_t v59 = 0;
  uint64_t v60 = 0;
  uint64_t v57 = 0;
  uint64_t v58 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionEnable");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v2 + 72))(v2, buf, __p, &v64);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      goto LABEL_9;
    }
  }
  else if (!v3)
  {
    goto LABEL_9;
  }
  unsigned __int16 v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v64;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionEnable enable=(%d)", buf, 8u);
  }
LABEL_9:
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionWindow");
  int v6 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v5 + 88))(v5, buf, __p, &v63);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6) {
      goto LABEL_20;
    }
  }
  else if (!v6)
  {
    goto LABEL_20;
  }
  unsigned int v7 = v63;
  unsigned int v8 = qword_100A19EF8;
  if (v63 >= 3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790CD8();
    }
    return 3;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionWindow (%d)", buf, 8u);
  }
LABEL_20:
  uint64_t v9 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionFurther");
  int v10 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v9 + 88))(v9, buf, __p, &v62);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v10) {
      goto LABEL_28;
    }
  }
  else if (!v10)
  {
    goto LABEL_28;
  }
  int v11 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v62;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionFurther (%d)", buf, 8u);
  }
LABEL_28:
  uint64_t v12 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionCloser");
  int v13 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v12 + 88))(v12, buf, __p, &v61);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v13) {
      goto LABEL_36;
    }
  }
  else if (!v13)
  {
    goto LABEL_36;
  }
  uint64_t v14 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v61;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionCloser (%d)", buf, 8u);
  }
LABEL_36:
  uint64_t v15 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionVar1");
  int v16 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v15 + 88))(v15, buf, __p, (char *)&v60 + 4);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v16) {
      goto LABEL_44;
    }
  }
  else if (!v16)
  {
    goto LABEL_44;
  }
  uint64_t v17 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v60);
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionVar1 (%d)", buf, 8u);
  }
LABEL_44:
  uint64_t v18 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionVar2");
  int v19 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(void *)v18 + 88))(v18, buf, __p, &v60);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v19) {
      goto LABEL_52;
    }
  }
  else if (!v19)
  {
    goto LABEL_52;
  }
  unint64_t v20 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v60;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionVar2 (%d)", buf, 8u);
  }
LABEL_52:
  uint64_t v21 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionDebug");
  int v22 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v21 + 88))(v21, buf, __p, (char *)&v59 + 4);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v22) {
      goto LABEL_64;
    }
  }
  else if (!v22)
  {
    goto LABEL_64;
  }
  int v23 = HIDWORD(v59);
  __int16 v24 = qword_100A19EF8;
  if (HIDWORD(v59) >= 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100790D40();
    }
    return 3;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v23;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionDebug (%d)", buf, 8u);
  }
LABEL_64:
  uint64_t v26 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionMaskDecisionLogic");
  int v27 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(void *)v26 + 88))(v26, buf, __p, &v59);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v27) {
      goto LABEL_72;
    }
  }
  else if (!v27)
  {
    goto LABEL_72;
  }
  int v28 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v59;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionMaskDecisionLogic (%d)", buf, 8u);
  }
LABEL_72:
  uint64_t v29 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionCMCheckLogic");
  int v30 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v29 + 88))(v29, buf, __p, (char *)&v58 + 4);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v30) {
      goto LABEL_80;
    }
  }
  else if (!v30)
  {
    goto LABEL_80;
  }
  int v31 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v58);
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionMCMCheckLogic (%d)", buf, 8u);
  }
LABEL_80:
  uint64_t v32 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionCM_AND_Mask");
  int v33 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(void *)v32 + 88))(v32, buf, __p, &v58);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v33) {
      goto LABEL_88;
    }
  }
  else if (!v33)
  {
    goto LABEL_88;
  }
  int v34 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v58;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionCM_AND_Mask (%d)", buf, 8u);
  }
LABEL_88:
  uint64_t v35 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionCM_XOR_Mask");
  int v36 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v35 + 88))(v35, buf, __p, (char *)&v57 + 4);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v36) {
      goto LABEL_96;
    }
  }
  else if (!v36)
  {
    goto LABEL_96;
  }
  int v37 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = HIDWORD(v57);
    _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionCM_XOR_Mask (%d)", buf, 8u);
  }
LABEL_96:
  uint64_t v38 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "ForceRSSIDetectionCM_AND_Mask2");
  int v39 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(void *)v38 + 88))(v38, buf, __p, &v57);
  if (v56 < 0) {
    operator delete(__p[0]);
  }
  if (v66 < 0)
  {
    operator delete(*(void **)buf);
    if (!v39) {
      goto LABEL_104;
    }
LABEL_102:
    id v40 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v57;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Using override value for  ForceRSSIDetectionCM_AND_Mask2 (%d)", buf, 8u);
    }
    goto LABEL_104;
  }
  if (v39) {
    goto LABEL_102;
  }
LABEL_104:
  if (!v64) {
    return 1501;
  }
  char v42 = v62;
  unsigned __int8 v41 = v63;
  char v43 = v61;
  __int16 v53 = WORD2(v60);
  char v44 = BYTE4(v59);
  __int16 v45 = v60;
  char v47 = BYTE4(v58);
  __int16 v46 = v59;
  unsigned int v48 = HIDWORD(v57);
  unsigned int v49 = v57;
  uint64_t v50 = sub_10003FB34();
  LOBYTE(v52) = v44;
  HIWORD(v51) = v46;
  WORD2(v51) = v45;
  WORD1(v51) = v53;
  BYTE1(v51) = v43;
  LOBYTE(v51) = v43;
  return (*(uint64_t (**)(uint64_t, uint64_t, void, void, void, void, void, void, uint64_t, char, unint64_t, void))(*(void *)v50 + 1768))(v50, 1, *a2, v41, v42, v42, v42, v43, v51, v47, __PAIR64__(v49, v48), v52);
}

void sub_10068E9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_10068EA84(uint64_t a1, void *a2, uint64_t a3, int a4, int a5)
{
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  memset(v35, 0, sizeof(v35));
  id v25 = a2;
  sub_10004C67C((uint64_t)&v34);
  if (v25)
  {
    if (a4)
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BE1F8);
      }
      unsigned int v7 = sub_1002F4800((uint64_t)off_1009F8780, v25);
      uint64_t v8 = +[NSMutableSet setWithArray:v7];
    }
    else
    {
      if (qword_1009FB270 != -1) {
        dispatch_once(&qword_1009FB270, &stru_1009BE198);
      }
      unsigned int v7 = sub_100737224(qword_1009FB268, v25);
      uint64_t v8 = +[NSMutableSet setWithSet:v7];
    }
    uint64_t v9 = (void *)v8;

    if (qword_1009FB180 != -1) {
      dispatch_once(&qword_1009FB180, &stru_1009BE218);
    }
    int v10 = sub_1002BD44C(qword_1009FB178, v25);
    [v9 addObjectsFromArray:v10];

    if ([v9 count])
    {
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      id v11 = v9;
      id v12 = [v11 countByEnumeratingWithState:&v30 objects:v51 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v31;
        do
        {
          for (i = 0; i != v12; i = (char *)i + 1)
          {
            if (*(void *)v31 != v13) {
              objc_enumerationMutation(v11);
            }
            id v15 = *(id *)(*((void *)&v30 + 1) + 8 * i);
            strlen((const char *)[v15 UTF8String]);
            uint64_t v16 = sub_10003AB28((uint64_t)v35);
            sub_10003AB28(v16);
          }
          id v12 = [v11 countByEnumeratingWithState:&v30 objects:v51 count:16];
        }
        while (v12);
      }

      unsigned int v49 = 0;
      uint64_t v50 = 0;
      std::ostream::sentry::sentry();
      uint64_t v17 = (char *)v35 + *(void *)(*(void *)&v35[0] - 24);
      if ((v17[32] & 5) == 0)
      {
        (*(void (**)(void **__return_ptr))(**((void **)v17 + 5) + 32))(v52);
        if (v54 == -1) {
          std::ios_base::clear((std::ios_base *)((char *)v35 + *(void *)(*(void *)&v35[0] - 24)), *(_DWORD *)((char *)&v35[2] + *(void *)(*(void *)&v35[0] - 24)) | 4);
        }
      }
      std::ostream::sentry::~sentry();
      LOBYTE(v52[0]) = 0;
      sub_10003AB28((uint64_t)v35);
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v18 = off_1009F7ED8;
      sub_10004191C(__p, "HasTS");
      sub_100030A04((uint64_t)v18, v25, (uint64_t)__p);
      if (v29 < 0) {
        operator delete(__p[0]);
      }
      sub_10003AB28((uint64_t)v35);
    }
  }
  else
  {
    sub_10003AB28((uint64_t)v35);
  }
  if (a5)
  {
    unsigned int v49 = &off_100998428;
    uint64_t v50 = 0;
    uint64_t v19 = sub_1003731C0();
    std::stringbuf::str();
    if (v53 >= 0) {
      unint64_t v20 = v52;
    }
    else {
      unint64_t v20 = (void **)v52[0];
    }
    uint64_t v26 = &off_100998428;
    int v27 = v50;
    if (v50) {
      sub_100037354((uint64_t)v50);
    }
    (*(void (**)(uint64_t, uint64_t, void **, id, uint64_t (***)()))(*(void *)v19 + 40))(v19, a3, v20, v25, &v26);
    uint64_t v26 = &off_100998428;
    if (v27) {
      sub_1000368F4(v27);
    }
    if (v53 < 0) {
      operator delete(v52[0]);
    }
    unsigned int v49 = &off_100998428;
    if (v50) {
      sub_1000368F4(v50);
    }
  }
  if (a3 == 5 || a3 == 3)
  {
    uint64_t v21 = sub_1003731C0();
    std::stringbuf::str();
    int v22 = v53 >= 0 ? v52 : (void **)v52[0];
    (*(void (**)(uint64_t, void **, BOOL, id))(*(void *)v21 + 8))(v21, v22, a3 == 3, v25);
    if (v53 < 0) {
      operator delete(v52[0]);
    }
  }
  *(void *)((char *)&v35[-1]
  *(void *)&v35[0] = v23;
  if (SHIBYTE(v37) < 0) {
    operator delete(*((void **)&v36 + 1));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
}

void sub_10068F144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, void *__p, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  std::ostream::sentry::~sentry();

  sub_100742518((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10068F260(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5)
{
  BOOL v7 = a2 > 2 || (a4 | a3) > 1 || a5 > 0x64 || a2 == 0;
  int v8 = v7;
  if (v7)
  {
    uint64_t v13 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      id v15 = "ok";
      v19[0] = 67110914;
      uint64_t v16 = "VSC call not required";
      v19[1] = a2;
      if (a2) {
        uint64_t v16 = "ok";
      }
      __int16 v20 = 2080;
      if (a2 > 2) {
        uint64_t v16 = "Can't be >2";
      }
      uint64_t v21 = v16;
      __int16 v22 = 1024;
      unsigned int v23 = a3;
      uint64_t v17 = "Can't be >1";
      __int16 v24 = 2080;
      if (a3 <= 1) {
        uint64_t v18 = "ok";
      }
      else {
        uint64_t v18 = "Can't be >1";
      }
      id v25 = v18;
      if (a4 <= 1) {
        uint64_t v17 = "ok";
      }
      __int16 v26 = 1024;
      unsigned int v27 = a4;
      if (a5 > 0x64) {
        id v15 = "Can't be >100";
      }
      __int16 v28 = 2080;
      char v29 = v17;
      __int16 v30 = 1024;
      unsigned int v31 = a5;
      __int16 v32 = 2080;
      long long v33 = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "SetConnectionPrioritization argument out of range: {priority:%d (%s), protectWLAN:%d (%s), protectLEA:%d (%s), percentageWithCriticalPriority:%d (%s)}", (uint8_t *)v19, 0x42u);
    }
  }
  return v8 ^ 1u;
}

uint64_t sub_10068F3D8(uint64_t a1, unint64_t a2, int a3, unsigned __int16 *a4, int a5, int a6)
{
  v291[1] = 0;
  v291[0] = 0;
  sub_10003AED0((uint64_t)v291, a1 + 120);
  unsigned __int16 v290 = 0;
  if (qword_100A14578 != -1) {
    dispatch_once(&qword_100A14578, &stru_1009BDB08);
  }
  char v289 = 0;
  sub_10001B8E0(&v289);
  unint64_t v8 = a2;
  uint64_t v9 = sub_1002284B8(a2);
  int v286 = v9;
  char v288 = BYTE6(v9);
  __int16 v287 = WORD2(v9);
  BOOL v10 = sub_100197770((uint64_t)a4);
  if (v10)
  {
    int v11 = sub_100225DB8((uint64_t)a4, &v290);
    int v12 = sub_10022602C((uint64_t)a4);
  }
  else
  {
    int v11 = 0;
    int v12 = 0;
  }
  sub_10001B910(&v289);
  int v254 = v11;
  uint64_t v13 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1006AD3F0();
    id v14 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)long long buf = 138544386;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = a4;
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = a5;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v10;
    *(_WORD *)&unsigned char buf[34] = 1024;
    *(_DWORD *)&buf[36] = a6;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "handleConnectionCompleteCallback address=%{public}@ handle=%p status=%d connectionIsActive=%d, wakeupEvent=%d", buf, 0x28u);

    unint64_t v8 = a2;
  }
  if (!a5 || *(_DWORD *)(a1 + 864) != 3)
  {
    if (*(unsigned char *)(a1 + 1067))
    {
      uint64_t v16 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v17 = "Stack is shutting down, this is most likely an orphan event dispatched late, ignoring";
        goto LABEL_21;
      }
      goto LABEL_424;
    }
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    if (a5)
    {
      if (a5 > 710)
      {
        if (a5 != 713)
        {
          if (a5 == 711)
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            sub_100014B58((uint64_t)off_1009F7ED8, v8, 1u, 0, 0, 0, buf);
            uuid_copy(uu, buf);
            int is_null = uuid_is_null(uu);
            BOOL v45 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR);
            if (is_null)
            {
              if (v45)
              {
                sub_1006AD3F0();
                objc_claimAutoreleasedReturnValue();
                sub_100790FBC();
              }
              goto LABEL_424;
            }
            if (v45)
            {
              sub_100401EBC(uu, buf);
              sub_100790F4C();
            }
            if (sub_10067E248((void *)a1, uu))
            {
              long long v76 = sub_100031234(uu);
              sub_10068B31C(a1, v76);

              if ([*(id *)(a1 + 752) count])
              {
                long long v77 = [*(id *)(a1 + 752) anyObject];
                [*(id *)(a1 + 752) removeObject:v77];
                long long v78 = qword_100A19EF8;
                if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)v292 = 138543362;
                  v293 = v77;
                  _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "Moving device \"%{public}@\" off of the overflow list now that there's room", v292, 0xCu);
                }
                sub_100681FF4(a1, v77);
              }
            }
            if (*(_DWORD *)(a1 + 864) != 1)
            {
              int v46 = 0;
              goto LABEL_416;
            }
            unint64_t v79 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)v292 = 0;
              _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Connection already exists", v292, 2u);
            }
            goto LABEL_92;
          }
LABEL_84:
          uint64_t v58 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v59 = sub_1006AD3F0();
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v59;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = a5;
            _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Failed to connect to device \"%{public}@\" with result %{bluetooth:OI_STATUS}u", buf, 0x12u);
          }
          if (a3)
          {
            uint64_t v60 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT)) {
              sub_100790ED4(v60, v61, v62, v63, v64, v65, v66, v67);
            }
          }
LABEL_92:
          sub_10067C934(a1, 0);
LABEL_93:
          int v46 = 1;
LABEL_416:
          v246 = sub_100031234(uu);
          sub_10068EA84((uint64_t)v246, v246, 3, a3, a6);

          unsigned int v247 = *(_DWORD *)(a1 + 928);
          if (v247)
          {
            uint64_t v42 = qword_100A19EF8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_424;
            }
            if (v247 > 3) {
              v248 = "UNKNOWN";
            }
            else {
              v248 = off_1009BE2A0[v247 - 1];
            }
            *(_DWORD *)v292 = 136446210;
            v293 = v248;
            uint64_t v17 = "Skipping processConnectingDevices, current LE Connection Manager State is %{public}s";
            uint64_t v18 = v292;
            goto LABEL_427;
          }
          if (!v46)
          {
            uint64_t v249 = qword_100A19EF8;
            if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_424;
            }
            *(_DWORD *)v292 = 67109120;
            LODWORD(v293) = 0;
            uint64_t v17 = "Skipping processConnectingDevices, reissueConnections=%d";
            uint64_t v18 = v292;
            uint64_t v19 = v249;
            uint32_t v20 = 8;
            goto LABEL_22;
          }
LABEL_421:
          sub_10068BF34((id *)a1);
          sub_10068A59C(a1);
          goto LABEL_424;
        }
      }
      else
      {
        if (a5 == 157)
        {
          uint64_t v68 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
            sub_10079106C(v68, v69, v70, v71, v72, v73, v74, v75);
          }
          if (a3) {
            goto LABEL_93;
          }
          goto LABEL_92;
        }
        if (a5 != 709) {
          goto LABEL_84;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_100791004();
      }
      *(unsigned char *)(a1 + 1065) = 1;
      sub_10067C934(a1, 0);
      int v46 = 0;
      goto LABEL_416;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    sub_100014B58((uint64_t)off_1009F7ED8, v8, 1u, 0, 0, 0, buf);
    uuid_copy(uu, buf);
    if (uuid_is_null(uu))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_1006AD3F0();
        objc_claimAutoreleasedReturnValue();
        sub_100790E8C();
      }
      sub_1002B804C(&v289);
      sub_100228E9C(&v286);
      sub_10001B910(&v289);
      if (a3) {
        goto LABEL_424;
      }
      if (!*(void *)(a1 + 352))
      {
        sub_10067C934(a1, 0);
        goto LABEL_424;
      }
      sub_10067C934(a1, 1u);
      goto LABEL_421;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    long long v47 = off_1009F7ED8;
    uint64_t v48 = sub_100031234(uu);
    BOOL v253 = v10;
    sub_1006C27E0((uint64_t)v47, v48, 1, 2, 0);

    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    unsigned int v49 = off_1009F7ED8;
    uint64_t v50 = sub_100031234(uu);
    sub_1006C13D4((uint64_t)v49, v50, 1, a2);

    id v51 = (id)sub_10067E248((void *)a1, uu);
    unint64_t v52 = a2;
    BOOL v53 = v10;
    if (!v51)
    {
      if ((a3 & 1) == 0)
      {
        long long v84 = *(void **)(a1 + 368);
        if (!v84) {
          goto LABEL_141;
        }
        uint64_t v85 = a1 + 368;
        do
        {
          unint64_t v86 = v84[4];
          BOOL v87 = v86 >= a2;
          if (v86 >= a2) {
            long long v88 = v84;
          }
          else {
            long long v88 = v84 + 1;
          }
          if (v87) {
            uint64_t v85 = (uint64_t)v84;
          }
          long long v84 = (void *)*v88;
        }
        while (*v88);
        if (v85 == a1 + 368 || *(void *)(v85 + 32) > a2)
        {
LABEL_141:
          long long v95 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
          {
            sub_100401EBC(uu, buf);
            int v96 = (char)buf[23];
            long long v97 = *(uint8_t **)buf;
            uint64_t v98 = sub_1006AD3F0();
            unsigned int v99 = (void *)v98;
            __int16 v100 = buf;
            if (v96 < 0) {
              __int16 v100 = v97;
            }
            *(_DWORD *)v296 = 136446466;
            *(void *)&v296[4] = v100;
            __int16 v297 = 2114;
            uint64_t v298 = v98;
            _os_log_fault_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_FAULT, "We have a successful outgoing connection to device \"%{public}s(%{public}@)\" but we never asked to connect to it", v296, 0x16u);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
          uint64_t v101 = sub_100017768();
          sub_10004191C(v267, "");
          sub_1005C8AF4(v101, 132, (uint64_t)v267, 1);
        }
        BOOL v89 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR);
        if (v89)
        {
          sub_1006AD3F0();
          objc_claimAutoreleasedReturnValue();
          sub_100790E44();
          unint64_t v52 = a2;
        }
        sub_10068CCD0(v89, v52);
        long long v90 = (uint64_t *)sub_1006AAB38(a1 + 336, (unsigned __int8 *)(v85 + 40));
        if ((uint64_t *)(a1 + 344) != v90)
        {
          sub_10004D3B8((uint64_t **)(a1 + 336), v90);
          operator delete(v90);
        }
        sub_10004D3B8((uint64_t **)(a1 + 360), (uint64_t *)v85);
        operator delete((void *)v85);
        sub_10067C934(a1, 0);
        sub_1002B804C(&v289);
        sub_100228E9C(&v286);
        sub_10001B910(&v289);
        if (!*(_DWORD *)(a1 + 928))
        {
          sub_10068BF34((id *)a1);
          sub_10068A59C(a1);
        }
        goto LABEL_424;
      }
      int v46 = 0;
LABEL_246:
      sub_10068DDE8((uint64_t)v51, a4);
      *(void *)long long buf = uu;
      sub_1006A982C((uint64_t **)(a1 + 384), uu, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf)[6] = (uint64_t)a4;
      if (!v53)
      {
        v188 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          if (a3) {
            v189 = "Incoming";
          }
          else {
            v189 = "Outgoing";
          }
          if (a3) {
            v190 = "from";
          }
          else {
            v190 = "to";
          }
          sub_100401EBC(uu, v296);
          int v191 = v299;
          v192 = *(unsigned char **)v296;
          v193 = sub_1006AD3F0();
          if (v191 >= 0) {
            v194 = v296;
          }
          else {
            v194 = v192;
          }
          id v195 = v193;
          *(_DWORD *)long long buf = 136447234;
          *(void *)&uint8_t buf[4] = v189;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&unsigned char buf[14] = v190;
          *(_WORD *)&unsigned char buf[22] = 2082;
          *(void *)&uint8_t buf[24] = v194;
          *(_WORD *)&uint8_t buf[32] = 2114;
          *(void *)&unsigned char buf[34] = v195;
          *(_WORD *)&buf[42] = 2048;
          *(void *)&buf[44] = a4;
          _os_log_impl((void *)&_mh_execute_header, v188, OS_LOG_TYPE_DEFAULT, "%{public}s connection %{public}s device \"%{public}s\" (%{public}@) with handle:%p was successful but already disconnected", buf, 0x34u);

          if (v299 < 0) {
            operator delete(*(void **)v296);
          }
        }
        goto LABEL_411;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      v153 = off_1009F7ED8;
      uint64_t v154 = sub_100031234(uu);
      sub_1006C1B40((uint64_t)v153, v154, a3 ^ 1);

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      int v155 = off_1009F7ED8;
      int v156 = sub_100031234(uu);
      sub_1006C1C60((uint64_t)v155, v156, 0);

      int v157 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        if (a3) {
          v158 = "Incoming";
        }
        else {
          v158 = "Outgoing";
        }
        if (a3) {
          uint64_t v159 = "from";
        }
        else {
          uint64_t v159 = "to";
        }
        sub_100401EBC(uu, v296);
        int v160 = v299;
        uint64_t v161 = *(unsigned char **)v296;
        v162 = sub_1006AD3F0();
        if (v160 >= 0) {
          v163 = v296;
        }
        else {
          v163 = v161;
        }
        id v164 = v162;
        *(_DWORD *)long long buf = 136447746;
        *(void *)&uint8_t buf[4] = v158;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v159;
        *(_WORD *)&unsigned char buf[22] = 2082;
        *(void *)&uint8_t buf[24] = v163;
        *(_WORD *)&uint8_t buf[32] = 2114;
        *(void *)&unsigned char buf[34] = v164;
        *(_WORD *)&buf[42] = 2048;
        *(void *)&buf[44] = a4;
        *(_WORD *)&buf[52] = 1024;
        *(_DWORD *)&buf[54] = v290;
        *(_WORD *)&buf[58] = 1024;
        *(_DWORD *)&buf[60] = 1;
        _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_DEFAULT, "%{public}s connection %{public}s device \"%{public}s\" (%{public}@) with handle:%p was successful with connection interval %d active=%d", buf, 0x40u);

        if (v299 < 0) {
          operator delete(*(void **)v296);
        }
      }
      double v165 = 0.35;
      if (v290 < 0x308u) {
        double v165 = 0.75;
      }
      unsigned int v166 = (int)(v165 * (double)(10 * v12) / ((double)v290 * 1.25));
      int v167 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100401EBC(uu, v296);
        int v168 = v299 >= 0 ? v296 : *(unsigned char **)v296;
        *(_DWORD *)long long buf = 136446978;
        *(void *)&uint8_t buf[4] = v168;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v166;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v290;
        *(_WORD *)&uint8_t buf[24] = 1024;
        *(_DWORD *)&buf[26] = v12;
        _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "Connection Complete: setting LE device \"%{public}s\" connection threshold to %d events with interval %d, LSTO %d", buf, 0x1Eu);
        if (v299 < 0) {
          operator delete(*(void **)v296);
        }
      }
      uint64_t v169 = sub_100035F54();
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v169 + 336))(v169)) {
        goto LABEL_276;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v170 = (uint64_t)off_1009F7ED8;
      int v171 = sub_100031234(uu);
      LOBYTE(v170) = sub_1006C1BCC(v170, v171);

      if (v170)
      {
LABEL_276:
        uint64_t v172 = sub_10003FB34();
        if (v166 >= 0xFF) {
          uint64_t v173 = 255;
        }
        else {
          uint64_t v173 = v166;
        }
        if ((*(unsigned int (**)(uint64_t, unsigned __int16 *, uint64_t))(*(void *)v172 + 1064))(v172, a4, v173)&& os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
        {
          sub_100790E10();
        }
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      v174 = off_1009F7ED8;
      char v175 = sub_100031234(uu);
      int v176 = sub_1006BDC1C((uint64_t)v174, v175);

      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BE158);
      }
      char v177 = *((unsigned char *)off_1009F8150 + 198);
      char v178 = *((unsigned char *)off_1009F8150 + 197);
      v292[0] = 0;
      v292[0] = *((unsigned char *)off_1009F8150 + 199);
      unsigned __int8 v266 = v178 | v177;
      if (*(unsigned char *)(a1 + 1379))
      {
        if (a3 && *(void *)(a1 + 1144))
        {
          __uint64_t v179 = clock_gettime_nsec_np(_CLOCK_MONOTONIC);
          uint64_t v180 = v179;
          v181 = *(void **)(a1 + 1136);
          if (v181)
          {
            v182 = (uint64_t *)(a1 + 1136);
            do
            {
              unint64_t v183 = v181[4];
              BOOL v184 = v183 >= a2;
              if (v183 >= a2) {
                v185 = v181;
              }
              else {
                v185 = v181 + 1;
              }
              if (v184) {
                v182 = v181;
              }
              v181 = (void *)*v185;
            }
            while (*v185);
            if (v182 != (uint64_t *)(a1 + 1136) && v182[4] <= a2)
            {
              if (v179 - v182[5] < 0x6FC23AC01)
              {
                uint64_t v196 = sub_10003FB34();
                (*(void (**)(uint64_t, void, uint64_t, void, void, void, void))(*(void *)v196
                                                                                                 + 2600))(v196, *a4, 1, 0, v292[0], v266, 0);
                v197 = qword_100A19EF8;
                if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1006ACEAC();
                  id v198 = (id)objc_claimAutoreleasedReturnValue();
                  uint64_t v199 = *(void *)(a1 + 1144);
                  *(_DWORD *)long long buf = 138543618;
                  *(void *)&uint8_t buf[4] = v198;
                  *(_WORD *)&unsigned char buf[12] = 2048;
                  *(void *)&unsigned char buf[14] = v199;
                  _os_log_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_DEFAULT, "setConnectionPrioritization for matching incoming address:%{public}@ fAddressForIncomingConnectionPrioritizationMap:%lu", buf, 0x16u);
                }
                sub_10004D3B8((uint64_t **)(a1 + 1128), v182);
                operator delete(v182);
              }
              else
              {
                v186 = qword_100A19EF8;
                if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1006ACEAC();
                  id v187 = (id)objc_claimAutoreleasedReturnValue();
                  *(_DWORD *)long long buf = 138543362;
                  *(void *)&uint8_t buf[4] = v187;
                  _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "Ignoring expired incoming prioritized connection address:%{public}@", buf, 0xCu);
                }
              }
            }
          }
          sub_100689EDC(a1, v180);
        }
        if (v176 == 196608)
        {
          unsigned __int8 v265 = *(unsigned char *)(a1 + 1379);
          __int16 v264 = 0;
          uint64_t v207 = sub_100017768();
          int v208 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, uint8_t *, unsigned __int8 *, __int16 *))(*(void *)v207 + 848))(v207, &v265, (char *)&v264 + 1, v292, &v266, &v264);
          v209 = qword_100A19EF8;
          BOOL v210 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
          if (v210)
          {
            sub_100401EBC(uu, v296);
            v211 = "";
            if (v208) {
              v211 = "(overridden)";
            }
            if (v299 >= 0) {
              v212 = v296;
            }
            else {
              v212 = *(unsigned char **)v296;
            }
            if ((unint64_t)(char)v265 > 2) {
              v213 = "UNKNOWN";
            }
            else {
              v213 = off_1009BE2B8[(char)v265];
            }
            *(_DWORD *)long long buf = 136316418;
            *(void *)&uint8_t buf[4] = v211;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v212;
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&uint8_t buf[24] = v213;
            *(_WORD *)&uint8_t buf[32] = 1024;
            *(_DWORD *)&unsigned char buf[34] = HIBYTE(v264);
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&uint8_t buf[40] = v292[0];
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v264;
            _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_DEFAULT, "CBUseCaseDigitalIDTSA %sfor device \"%s\" setConnectionPrioritization{priority:%s, protectWLAN:%d, protectLEA:%d, percentageWithCriticalPriority:%d}", buf, 0x32u);
            if (v299 < 0) {
              operator delete(*(void **)v296);
            }
          }
          if (!sub_10068F260(v210, v265, HIBYTE(v264), v292[0], v264))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
              sub_100790DDC();
            }
            goto LABEL_351;
          }
LABEL_342:
          uint64_t v214 = sub_10003FB34();
          (*(void (**)(uint64_t, void, void, void, void, void, void))(*(void *)v214 + 2600))(v214, *a4, v265, HIBYTE(v264), v292[0], v266, v264);
          goto LABEL_351;
        }
        if (v176 == 19)
        {
          unsigned __int8 v265 = *(unsigned char *)(a1 + 1379);
          __int16 v264 = 0;
          uint64_t v200 = sub_100017768();
          int v201 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, char *, uint8_t *, unsigned __int8 *, __int16 *))(*(void *)v200 + 840))(v200, &v265, (char *)&v264 + 1, v292, &v266, &v264);
          v202 = qword_100A19EF8;
          BOOL v203 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
          if (v203)
          {
            sub_100401EBC(uu, v296);
            v204 = "";
            if (v201) {
              v204 = "(overridden)";
            }
            if (v299 >= 0) {
              v205 = v296;
            }
            else {
              v205 = *(unsigned char **)v296;
            }
            if ((unint64_t)(char)v265 > 2) {
              v206 = "UNKNOWN";
            }
            else {
              v206 = off_1009BE2B8[(char)v265];
            }
            *(_DWORD *)long long buf = 136316418;
            *(void *)&uint8_t buf[4] = v204;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v205;
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&uint8_t buf[24] = v206;
            *(_WORD *)&uint8_t buf[32] = 1024;
            *(_DWORD *)&unsigned char buf[34] = HIBYTE(v264);
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&uint8_t buf[40] = v292[0];
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = v264;
            _os_log_impl((void *)&_mh_execute_header, v202, OS_LOG_TYPE_DEFAULT, "CBUseCaseDigitalID for %sdevice \"%s\" setConnectionPrioritization{priority:%s, protectWLAN:%d, protectLEA:%d, percentageWithCriticalPriority:%d}", buf, 0x32u);
            if (v299 < 0) {
              operator delete(*(void **)v296);
            }
          }
          if (!sub_10068F260(v203, v265, HIBYTE(v264), v292[0], v264))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
              sub_100790DA8();
            }
            goto LABEL_351;
          }
          goto LABEL_342;
        }
      }
LABEL_351:
      if (*(unsigned char *)(a1 + 1377))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        v215 = off_1009F7ED8;
        v216 = sub_100031234(uu);
        v217 = sub_1006C1FC8((uint64_t)v215, v216);

        uint64_t v218 = sub_1006923B0(a1, v176, v217);
        if (v218)
        {
          uint64_t v219 = sub_10003FB34();
          (*(void (**)(uint64_t, void, uint64_t))(*(void *)v219 + 1736))(v219, *a4, v218);
        }
      }
      if (*(unsigned char *)(a1 + 1378))
      {
        uint64_t v220 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v220 + 912))(v220))
        {
          if ((v176 - 0x10000) <= 0x15 && ((1 << v176) & 0x200011) != 0)
          {
            uint64_t v221 = sub_10003FB34();
            int v222 = (*(uint64_t (**)(uint64_t, void, void, uint64_t, uint64_t, void, uint64_t))(*(void *)v221 + 136))(v221, 0, *a4, 1, 4294967227, 0, 4294967216);
            if (v222)
            {
              v223 = qword_100A19EF8;
              if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v222;
                _os_log_impl((void *)&_mh_execute_header, v223, OS_LOG_TYPE_DEFAULT, "Error results for enableEPATxBFForLE result:%d", buf, 8u);
              }
            }
          }
        }
      }
      if (!v254 && (a3 & 1) == 0)
      {
        unsigned int v224 = sub_100685B10(a1, uu);
        if (v290 > 0xCu) {
          unsigned int v225 = v224;
        }
        else {
          unsigned int v225 = 0;
        }
        if (v225 == 1 && v290)
        {
          v226 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100401EBC(uu, buf);
            v227 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
            *(_DWORD *)v296 = 136446210;
            *(void *)&v296[4] = v227;
            _os_log_impl((void *)&_mh_execute_header, v226, OS_LOG_TYPE_DEFAULT, "Boosting connection interval to iCloud paired device \"%{public}s\"", v296, 0xCu);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
          v228 = sub_100031234(uu);
          sub_10067F6EC(a1, v228, -4, 0);
        }
        if (!*(unsigned char *)(a1 + 1110) && (v176 & 0xFFFF0000) == 0x10000 && (byte_100A14571 || v290 && v290 != 24))
        {
          v229 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100401EBC(uu, v296);
            v231 = v299 >= 0 ? v296 : *(unsigned char **)v296;
            LOWORD(v230) = v290;
            *(_DWORD *)long long buf = 136446722;
            *(void *)&uint8_t buf[4] = v231;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(double *)&unsigned char buf[14] = (double)v230 * 1.25;
            *(_WORD *)&unsigned char buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = byte_100A14571;
            _os_log_impl((void *)&_mh_execute_header, v229, OS_LOG_TYPE_DEFAULT, "Adjusting connection interval to FindMy device \"%{public}s\", current CI is :%fms sendFindMyConnectionUpdateAnyTime:%d", buf, 0x1Cu);
            if (v299 < 0) {
              operator delete(*(void **)v296);
            }
          }
          v232 = sub_100031234(uu);
          sub_10067F6EC(a1, v232, -8, 0);
        }
      }
      if (!*(unsigned char *)(a1 + 632))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        v233 = off_1009F7ED8;
        v234 = sub_100031234(uu);
        LODWORD(v233) = sub_1006BDD68((uint64_t)v233, v234);

        if (v233)
        {
          uint64_t v235 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v235 + 344))(v235))
          {
            sub_10067F1E4(a1, (unint64_t)a4);
          }
          else if ((a3 & 1) == 0)
          {
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
            }
            v236 = off_1009F7EB8;
            v237 = sub_100031234(uu);
            sub_10067F6EC((uint64_t)v236, v237, -2, 0);
          }
        }
      }
      if (sub_100681934(a1, uu))
      {
        v238 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100401EBC(uu, buf);
          v239 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)v296 = 136446210;
          *(void *)&v296[4] = v239;
          _os_log_impl((void *)&_mh_execute_header, v238, OS_LOG_TYPE_DEFAULT, "Device was already disconnecting, disconnect connected device \"%{public}s\"", v296, 0xCu);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
        sub_1002B804C(&v289);
        *(void *)long long buf = 0;
        if (sub_1006856B8(a1, uu, buf)) {
          sub_100223D18(*(uint64_t *)buf);
        }
        sub_10001B910(&v289);
      }
LABEL_411:
      uint64_t v295 = 0;
      memset(buf, 0, sizeof(buf));
      v240 = sub_100031234(uu);
      sub_1006773FC(a1, v240, (uint64_t)buf);

      uint64_t v241 = sub_100031234(uu);
      v242 = *(void **)buf;
      *(void *)long long buf = v241;

      *(void *)&uint8_t buf[24] = CFAbsoluteTimeGetCurrent();
      buf[49] = 1;
      buf[51] = a6;
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009BE1D8);
      }
      buf[48] = sub_100008DC4(qword_1009F7EC8, *(void **)buf);
      buf[50] = a3 ^ 1;
      uint64_t v243 = objc_opt_new();
      v244 = *(void **)&buf[8];
      *(void *)&uint8_t buf[8] = v243;

      v245 = sub_100031234(uu);
      v259[0] = *(id *)buf;
      v259[1] = *(id *)&buf[8];
      long long v260 = *(_OWORD *)&buf[16];
      long long v261 = *(_OWORD *)&buf[32];
      long long v262 = *(_OWORD *)&buf[48];
      int v263 = v295;
      sub_100677528(a1, v245, (uint64_t)v259);

      if ((sub_100681934(a1, uu) & 1) == 0) {
        sub_10068D04C(a1, uu, 1, 0, 1);
      }

      goto LABEL_416;
    }
    if (a3)
    {
      uint64_t v54 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "Cancelling outgoing connection to same device", buf, 2u);
      }
      int v55 = sub_10067C23C(a1, 1);
      if (v55 == 1302)
      {
        char v56 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          uint64_t v57 = "Failed to cancel the connection because its already connected, waiting for event";
          goto LABEL_136;
        }
LABEL_137:
        sub_100680D78(a1, uu);
        unsigned int v92 = 0;
LABEL_227:
        int v141 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v142 = sub_100031234(uu);
          int v143 = sub_10003D640(v92);
          id v144 = v142;
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = v143;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&unsigned char buf[14] = v144;
          _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "BLE Connection Completed %{public}s %{public}@", buf, 0x16u);

          int v141 = qword_100A19EF8;
        }
        if (os_signpost_enabled(v141))
        {
          int v145 = sub_100031234(uu);
          int v146 = sub_10003D640(v92);
          id v147 = v145;
          *(_DWORD *)long long buf = 136446466;
          *(void *)&uint8_t buf[4] = v146;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&unsigned char buf[14] = v147;
          _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v141, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE Connection Completed %{public}s %{public}@", buf, 0x16u);
        }
        id v51 = [*(id *)(a1 + 752) count];
        int v46 = a3 ^ 1;
        if (v51)
        {
          v148 = [*(id *)(a1 + 752) anyObject];
          [*(id *)(a1 + 752) removeObject:v148];
          uint64_t v149 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v148;
            _os_log_impl((void *)&_mh_execute_header, v149, OS_LOG_TYPE_DEFAULT, "Moving device \"%{public}@\" off of the overflow list now that there's room", buf, 0xCu);
          }
          int v150 = *(_DWORD *)(a1 + 864);
          if (v150 == 4 || v150 == 2)
          {
            int v151 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              sub_100401EBC(uu, buf);
              int v152 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
              *(_DWORD *)v296 = 136446210;
              *(void *)&v296[4] = v152;
              _os_log_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" to AddToFilterAcceptList list", v296, 0xCu);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
            }
            sub_100680C1C(a1, uu);
          }
          else
          {
            sub_100681FF4(a1, v148);
          }
        }
        BOOL v53 = v253;
        goto LABEL_246;
      }
      if (!v55)
      {
        char v56 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          uint64_t v57 = "Canceled pending connection successfuly, waiting for event";
LABEL_136:
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, v57, buf, 2u);
          goto LABEL_137;
        }
        goto LABEL_137;
      }
      unint64_t v93 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "No pending event.", buf, 2u);
      }
      sub_100031234(uu);
      id v94 = (id)objc_claimAutoreleasedReturnValue();
      sub_10068B31C(a1, v94);
      unsigned int v92 = 0;
    }
    else
    {
      unsigned __int16 v80 = sub_100031234(uu);
      sub_10068B31C(a1, v80);

      unsigned int v81 = *(_DWORD *)(a1 + 864);
      uint64_t v82 = qword_100A19EF8;
      BOOL v83 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
      if (v81 == 1)
      {
        if (v83)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Successful outgoing connection", buf, 2u);
        }
        sub_10067C934(a1, 0);
      }
      else if (v83)
      {
        if (v81 > 4) {
          int v91 = "UNKNOWN";
        }
        else {
          int v91 = off_1009BE278[v81];
        }
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v91;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v81;
        _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Current state when connection completed is %{public}s(%d), lets wait for the controller.", buf, 0x12u);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      char v102 = off_1009F7ED8;
      int v103 = sub_100031234(uu);
      unsigned int v92 = sub_1006BDC1C((uint64_t)v102, v103);

      if (qword_1009FB270 != -1) {
        dispatch_once(&qword_1009FB270, &stru_1009BE198);
      }
      unsigned int v104 = sub_100735410(qword_1009FB268, v92);
      int v105 = *(const unsigned __int8 **)(a1 + 384);
      if (v105 == (const unsigned __int8 *)(a1 + 392))
      {
        unsigned __int16 v106 = v253;
      }
      else
      {
        unsigned __int16 v106 = v253;
        do
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          int v107 = off_1009F7ED8;
          uint64_t v108 = sub_100031234(v105 + 32);
          __int16 v109 = sub_1006BDC1C((uint64_t)v107, v108) == v92;

          char v110 = (unsigned __int8 *)*((void *)v105 + 1);
          if (v110)
          {
            do
            {
              v111 = (const unsigned __int8 **)v110;
              char v110 = *(unsigned __int8 **)v110;
            }
            while (v110);
          }
          else
          {
            do
            {
              v111 = (const unsigned __int8 **)*((void *)v105 + 2);
              BOOL v27 = *v111 == v105;
              int v105 = (const unsigned __int8 *)v111;
            }
            while (!v27);
          }
          v106 += v109;
          int v105 = (const unsigned __int8 *)v111;
        }
        while (v111 != (const unsigned __int8 **)(a1 + 392));
      }
      long long v112 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v92;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v104;
        *(_WORD *)&unsigned char buf[14] = 1024;
        *(_DWORD *)&_DWORD buf[16] = v106;
        _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "deviceUseCase:%d maxUseCaseConnections:%d currentlyConnectedForUseCase:%d", buf, 0x14u);
      }
      if (v104 > v106) {
        goto LABEL_227;
      }
      id v252 = objc_alloc_init((Class)NSMutableArray);
      int v113 = *(const unsigned __int8 **)(a1 + 336);
      if (v113 != (const unsigned __int8 *)(a1 + 344))
      {
        do
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          char v114 = off_1009F7ED8;
          id v115 = sub_100031234(v113 + 25);
          LODWORD(v114) = sub_1006BDC1C((uint64_t)v114, v115) == v92;

          if (v114)
          {
            uint64_t v116 = sub_100031234(v113 + 25);
            [v252 addObject:v116];
          }
          id v117 = (unsigned __int8 *)*((void *)v113 + 1);
          if (v117)
          {
            do
            {
              long long v118 = (const unsigned __int8 **)v117;
              id v117 = *(unsigned __int8 **)v117;
            }
            while (v117);
          }
          else
          {
            do
            {
              long long v118 = (const unsigned __int8 **)*((void *)v113 + 2);
              BOOL v27 = *v118 == v113;
              int v113 = (const unsigned __int8 *)v118;
            }
            while (!v27);
          }
          int v113 = (const unsigned __int8 *)v118;
        }
        while (v118 != (const unsigned __int8 **)(a1 + 344));
      }
      uint64_t v119 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v252;
        _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "devicesToDisconnect from fConnectingDevices: %{public}@", buf, 0xCu);
      }
      int v251 = v12;
      long long v284 = 0u;
      long long v285 = 0u;
      long long v282 = 0u;
      long long v283 = 0u;
      id v120 = v252;
      id v121 = [v120 countByEnumeratingWithState:&v282 objects:v303 count:16];
      if (v121)
      {
        uint64_t v122 = *(void *)v283;
        do
        {
          for (i = 0; i != v121; i = (char *)i + 1)
          {
            if (*(void *)v283 != v122) {
              objc_enumerationMutation(v120);
            }
            uint64_t v124 = *(void *)(*((void *)&v282 + 1) + 8 * i);
            if (*(_DWORD *)(a1 + 864)) {
              sub_100680D78(a1, uu);
            }
            else {
              sub_10068B31C(a1, *(void **)(*((void *)&v282 + 1) + 8 * i));
            }
            v281[0] = _NSConcreteStackBlock;
            v281[1] = 3221225472;
            v281[2] = sub_100692348;
            v281[3] = &unk_1009BDB30;
            v281[4] = v124;
            sub_10067762C((os_unfair_lock_s *)a1, v281);
          }
          id v121 = [v120 countByEnumeratingWithState:&v282 objects:v303 count:16];
        }
        while (v121);
      }

      [v120 removeAllObjects];
      long long v279 = 0u;
      long long v280 = 0u;
      long long v277 = 0u;
      long long v278 = 0u;
      id v125 = *(id *)(a1 + 752);
      id v126 = [v125 countByEnumeratingWithState:&v277 objects:v302 count:16];
      if (v126)
      {
        uint64_t v127 = *(void *)v278;
        do
        {
          char v128 = 0;
          do
          {
            if (*(void *)v278 != v127) {
              objc_enumerationMutation(v125);
            }
            unsigned __int16 v129 = *(void **)(*((void *)&v277 + 1) + 8 * (void)v128);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            if (sub_1006BDC1C((uint64_t)off_1009F7ED8, v129) == v92) {
              [v120 addObject:v129];
            }
            char v128 = (char *)v128 + 1;
          }
          while (v126 != v128);
          id v126 = [v125 countByEnumeratingWithState:&v277 objects:v302 count:16];
        }
        while (v126);
      }

      unsigned __int16 v130 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v120;
        _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_DEFAULT, "devicesToDisconnect from fConnectingOverflowDevices: %{public}@", buf, 0xCu);
      }
      long long v275 = 0u;
      long long v276 = 0u;
      long long v273 = 0u;
      long long v274 = 0u;
      id v131 = *(id *)(a1 + 760);
      id v132 = [v131 countByEnumeratingWithState:&v273 objects:v301 count:16];
      if (v132)
      {
        uint64_t v133 = *(void *)v274;
        do
        {
          char v134 = 0;
          do
          {
            if (*(void *)v274 != v133) {
              objc_enumerationMutation(v131);
            }
            char v135 = *(void **)(*((void *)&v273 + 1) + 8 * (void)v134);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            if (sub_1006BDC1C((uint64_t)off_1009F7ED8, v135) == v92) {
              [v120 addObject:v135];
            }
            char v134 = (char *)v134 + 1;
          }
          while (v132 != v134);
          id v132 = [v131 countByEnumeratingWithState:&v273 objects:v301 count:16];
        }
        while (v132);
      }

      __int16 v136 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v120;
        _os_log_impl((void *)&_mh_execute_header, v136, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: devicesToDisconnect from fDevicesBlockedFromOutgoingConnections: %{public}@", buf, 0xCu);
      }
      long long v271 = 0u;
      long long v272 = 0u;
      long long v269 = 0u;
      long long v270 = 0u;
      id v94 = v120;
      id v137 = [v94 countByEnumeratingWithState:&v269 objects:v300 count:16];
      if (v137)
      {
        uint64_t v138 = *(void *)v270;
        do
        {
          for (j = 0; j != v137; j = (char *)j + 1)
          {
            if (*(void *)v270 != v138) {
              objc_enumerationMutation(v94);
            }
            uint64_t v140 = *(void *)(*((void *)&v269 + 1) + 8 * (void)j);
            [*(id *)(a1 + 752) removeObject:v140];
            [*(id *)(a1 + 760) removeObject:v140];
            v268[0] = _NSConcreteStackBlock;
            v268[1] = 3221225472;
            v268[2] = sub_10069237C;
            v268[3] = &unk_1009BDB30;
            v268[4] = v140;
            sub_10067762C((os_unfair_lock_s *)a1, v268);
          }
          id v137 = [v94 countByEnumeratingWithState:&v269 objects:v300 count:16];
        }
        while (v137);
      }

      int v12 = v251;
    }

    goto LABEL_227;
  }
  id v15 = qword_100A19EF8;
  if (a5 != 702 && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a5;
    _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Unexpected connection complete result (%{bluetooth:OI_STATUS}u) after cancellation!", buf, 8u);
    id v15 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received connection complete event after successful cancellation. Parsing pending operations and processing pending connections", buf, 2u);
  }
  if (byte_100A14570)
  {
    uint64_t v16 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v17 = "Warning: Ignoring connection complete after succesful cancellation for debug only";
LABEL_21:
      uint64_t v18 = buf;
      uint64_t v19 = v16;
      uint32_t v20 = 2;
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v17, v18, v20);
      goto LABEL_424;
    }
    goto LABEL_424;
  }
  if (*(_DWORD *)(a1 + 928) == 1)
  {
    uint64_t v21 = *(const unsigned __int8 **)(a1 + 336);
    __int16 v22 = (const unsigned __int8 **)(a1 + 344);
    if (v21 != (const unsigned __int8 *)(a1 + 344))
    {
      do
      {
        unsigned int v23 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v24 = sub_100031234(v21 + 25);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Moving %{public}@ out of the filter accept list and into the pending list", buf, 0xCu);
        }
        sub_100680C1C(a1, v21 + 25);
        id v25 = (unsigned __int8 *)*((void *)v21 + 1);
        if (v25)
        {
          do
          {
            __int16 v26 = (const unsigned __int8 **)v25;
            id v25 = *(unsigned __int8 **)v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            __int16 v26 = (const unsigned __int8 **)*((void *)v21 + 2);
            BOOL v27 = *v26 == v21;
            uint64_t v21 = (const unsigned __int8 *)v26;
          }
          while (!v27);
        }
        uint64_t v21 = (const unsigned __int8 *)v26;
      }
      while (v26 != v22);
    }
    sub_1000486F0(a1 + 336, *(void **)(a1 + 344));
    *(void *)(a1 + 344) = 0;
    *(void *)(a1 + 352) = 0;
    *(void *)(a1 + 336) = v22;
    __int16 v28 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "calling LE_ClearFilterAcceptList", buf, 2u);
    }
    sub_1000486F0(a1 + 608, *(void **)(a1 + 616));
    *(void *)(a1 + 608) = a1 + 616;
    *(void *)(a1 + 624) = 0;
    *(void *)(a1 + 616) = 0;
    v296[0] = 0;
    char v29 = sub_10001B8E0(v296);
    int v37 = sub_1002419F0((uint64_t)v29, v30, v31, v32, v33, v34, v35, v36);
    long long v38 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v37;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "LE_ClearFilterAcceptList returned %d", buf, 8u);
    }
    sub_1000486F0(a1 + 360, *(void **)(a1 + 368));
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    *(void *)(a1 + 360) = a1 + 368;
    sub_10001B8AC(v296);
  }
  long long v39 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Connection complete after successful connection cancelation", buf, 2u);
  }
  sub_10067C934(a1, 0);
  if (*(unsigned char *)(a1 + 1067))
  {
    long long v40 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Stack is shutting down, we're done here.", buf, 2u);
    }
    *(unsigned char *)(a1 + 1064) = 0;
    sub_1002B818C((pthread_cond_t *)(a1 + 1016));
    goto LABEL_424;
  }
  unsigned int v41 = *(_DWORD *)(a1 + 928);
  if (!v41)
  {
    sub_10068BF34((id *)a1);
    sub_10068A59C(a1);
    goto LABEL_424;
  }
  uint64_t v42 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    if (v41 > 3) {
      long long v43 = "UNKNOWN";
    }
    else {
      long long v43 = off_1009BE2A0[v41 - 1];
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v43;
    uint64_t v17 = "Not updating connection list, current LE Connection Manager State is %{public}s";
    uint64_t v18 = buf;
LABEL_427:
    uint64_t v19 = v42;
    uint32_t v20 = 12;
    goto LABEL_22;
  }
LABEL_424:
  sub_10001B8AC(&v289);
  return sub_10003AFB4((uint64_t)v291);
}

void sub_100691F04(_Unwind_Exception *a1)
{
}

void sub_1006921E8(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v5, "LE");
  sub_10004191C(__p, "IgnoreControllerConnectionCompleteOnCancel");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v5, __p, &byte_100A14570);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v2 = sub_100017768();
  sub_10004191C(v5, "LE");
  sub_10004191C(__p, "sendFindMyConnectionUpdateAnyTime");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v2 + 72))(v2, v5, __p, &byte_100A14571);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_10069230C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100692348(uint64_t a1, uint64_t (***a2)(void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), 336);
}

uint64_t sub_10069237C(uint64_t a1, uint64_t (***a2)(void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), 336);
}

uint64_t sub_1006923B0(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  char v6 = v5;
  if (a2 == 131075)
  {
    uint64_t v7 = *(unsigned __int16 *)(a1 + 1382);
    if (!v5) {
      goto LABEL_20;
    }
  }
  else
  {
    uint64_t v7 = 0;
    if (!v5) {
      goto LABEL_20;
    }
  }
  if ([v5 count])
  {
    long long v16 = 0u;
    long long v17 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    id v8 = v6;
    id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v15;
      do
      {
        for (i = 0; i != v9; i = (char *)i + 1)
        {
          if (*(void *)v15 != v10) {
            objc_enumerationMutation(v8);
          }
          if ([[*(id *)(*((void *)&v14 + 1) + 8 * i) longLongValue:v14] == 131075)unsigned int v12 = *(unsigned __int16 *)(a1 + 1382); {
          else
          }
            unsigned int v12 = 0;
          if (v12 <= (unsigned __int16)v7) {
            uint64_t v7 = (unsigned __int16)v7;
          }
          else {
            uint64_t v7 = v12;
          }
        }
        id v9 = [v8 countByEnumeratingWithState:&v14 objects:v18 count:16];
      }
      while (v9);
    }
  }
LABEL_20:

  return v7;
}

void sub_100692514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100692540(uint64_t a1, int a2)
{
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 120);
  int v4 = *(_DWORD *)(a1 + 864);
  if (v4 == 2)
  {
LABEL_2:
    id v5 = qword_100A19EF8;
    if (a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_1007910E0();
      }
      if (a2 == 758)
      {
        sub_10067C934(a1, 4u);
      }
      else if (a2 == 621)
      {
        uint64_t v6 = sub_100017768();
        sub_1005C99C8(v6, 1);
      }
      int v19 = *(_DWORD *)(a1 + 928);
      if (v19 == 1)
      {
        sub_10067C934(a1, 0);
      }
      else if (v19)
      {
        uint32_t v20 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = "UNKNOWN";
          if (v19 == 2) {
            uint64_t v21 = "Paused";
          }
          if (v19 == 3) {
            uint64_t v21 = "Resuming";
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "handleConnectionCancelledCallback skipping processConnectingDevices, current Le Connection Manager state is %{public}s", buf, 0xCu);
        }
      }
      else
      {
        sub_10067C934(a1, 0);
        sub_10068BF34((id *)a1);
        sub_10068A59C(a1);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pending connection(s) canceled successfully", buf, 2u);
      }
      sub_10067C934(a1, 3u);
      if (*(unsigned char *)(a1 + 1118))
      {
        id v8 = *(const unsigned __int8 **)(a1 + 336);
        if (v8 != (const unsigned __int8 *)(a1 + 344))
        {
          do
          {
            id v9 = sub_100031234(v8 + 25);
            BOOL v10 = sub_1006790A4(a1, v9) == 0;

            if (!v10)
            {
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
              }
              int v11 = off_1009F7ED8;
              unsigned int v12 = sub_100031234(v8 + 25);
              unint64_t v13 = sub_100030DCC((uint64_t)v11, v12, 0);

              *(_DWORD *)&buf[3] = 0;
              *(_DWORD *)long long buf = 0;
              uint64_t v14 = sub_1002284B8(v13);
              *(_DWORD *)long long buf = v14;
              buf[6] = BYTE6(v14);
              *(_WORD *)&uint8_t buf[4] = WORD2(v14);
              uint64_t v15 = sub_10003FB34();
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v15 + 1800))(v15, buf);
            }
            long long v16 = (unsigned __int8 *)*((void *)v8 + 1);
            if (v16)
            {
              do
              {
                long long v17 = (const unsigned __int8 **)v16;
                long long v16 = *(unsigned __int8 **)v16;
              }
              while (v16);
            }
            else
            {
              do
              {
                long long v17 = (const unsigned __int8 **)*((void *)v8 + 2);
                BOOL v18 = *v17 == v8;
                id v8 = (const unsigned __int8 *)v17;
              }
              while (!v18);
            }
            id v8 = (const unsigned __int8 *)v17;
          }
          while (v17 != (const unsigned __int8 **)(a1 + 344));
        }
      }
    }
    return sub_10003AFB4((uint64_t)v23);
  }
  uint64_t v7 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Received cancel callback outside of cancel state (%d)", buf, 8u);
    if (*(_DWORD *)(a1 + 864) == 2) {
      goto LABEL_2;
    }
    uint64_t v7 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
    sub_100791150();
  }
  return sub_10003AFB4((uint64_t)v23);
}

void sub_1006928E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100692920(uint64_t a1, void *a2, unsigned int a3, int a4, double a5)
{
  id v9 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  double v10 = sub_1006BBD44((uint64_t)off_1009F7ED8, v9);
  if (v10 != 0.0)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    double v11 = sub_1006BBEF8((uint64_t)off_1009F7ED8, v9);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    double v12 = sub_1006BC018((uint64_t)off_1009F7ED8, v9);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    double v13 = sub_1006BC138((uint64_t)off_1009F7ED8, v9);
    if (v10 < a5 && v10 > 0.0) {
      double v14 = a5 - v10;
    }
    else {
      double v14 = 0.0;
    }
    if (v10 > 0.0 && v11 > v10) {
      double v15 = v11 - v10;
    }
    else {
      double v15 = 0.0;
    }
    BOOL v16 = v13 > v12;
    BOOL v17 = v12 > 0.0;
    double v18 = v13 - v12;
    if (v17 && v16) {
      double v19 = v18;
    }
    else {
      double v19 = 0.0;
    }
    if (v12 < a5 && v17) {
      double v20 = a5 - v12;
    }
    else {
      double v20 = 0.0;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    unsigned int v21 = sub_1006BC258((uint64_t)off_1009F7ED8, v9);
    id v79 = objc_alloc_init((Class)NSDateFormatter);
    [v79 setDateFormat:@"yyyy-MM-dd H:mm:ss"];
    long long v76 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v10];
    uint64_t v22 = [v79 stringFromDate:x0];
    unsigned int v23 = &unk_1007B8000;
    LODWORD(v23) = llround((v10 - floor(v10)) * 1000.0);
    long long v78 = (void *)v22;
    __int16 v24 = +[NSString stringWithFormat:@"%@.%000d", v22, v23];
    double v25 = 0.0;
    double v26 = (double)v21;
    double v27 = 0.0;
    if (v19 > 0.0) {
      double v27 = v26 / v19;
    }
    if (v20 > 0.0) {
      double v25 = v26 / v20;
    }
    uint64_t v83 = a1;
    int v28 = *(unsigned __int8 *)(a1 + 1379);
    if (a4 != 196608 && a4 != 19 || v28 == 0) {
      int v31 = 0;
    }
    else {
      int v31 = 75;
    }
    unsigned int v80 = v31;
    uint64_t v32 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ DigitalID Transaction -------------------", buf, 2u);
      uint64_t v32 = qword_100A19EF8;
    }
    unsigned int v86 = a3;
    id v81 = v24;
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      id v33 = [v24 UTF8String];
      *(_DWORD *)long long buf = 136446210;
      double v88 = *(double *)&v33;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Start: %{public}s", buf, 0xCu);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      double v88 = v14;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Connection Duration: %.3f (secs)", buf, 0xCu);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      double v88 = v15;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Connection Set-up Duration: %.3f (secs)", buf, 0xCu);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      double v88 = v19;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Data Transfer Duration: %.3f (secs)", buf, 0xCu);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      double v88 = v20;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Presentment Data Transfer Duration: %.3f (secs)", buf, 0xCu);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v88) = v21;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Data Bytes: %d", buf, 8u);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      double v88 = v27;
      __int16 v89 = 2048;
      *(double *)long long v90 = v27 * 8.0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Data Transfer Throughput: %.3f (bytes/sec) %.3f (bits/sec)", buf, 0x16u);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134218240;
      double v88 = v25;
      __int16 v89 = 2048;
      *(double *)long long v90 = v25 * 8.0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Presentment Data Transfer Throughput: %.3f (bytes/sec) %.3f (bits/sec)", buf, 0x16u);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v88) = a3;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Disconnection Reason: %d", buf, 8u);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v34 = "Yes";
      if (!v28) {
        uint64_t v34 = "No";
      }
      *(_DWORD *)long long buf = 136315138;
      double v88 = *(double *)&v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Is Connection Prioritization Supported: %s", buf, 0xCu);
      uint64_t v32 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v88) = v80;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Prioritized Connection Intervals Percent: %d", buf, 8u);
    }
    unsigned int v82 = v21;
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BE158);
    }
    int v35 = *((_DWORD *)off_1009F8150 + 39);
    int v36 = *((_DWORD *)off_1009F8150 + 40);
    int v37 = *((unsigned __int8 *)off_1009F8150 + 196);
    int v38 = *((unsigned __int8 *)off_1009F8150 + 197);
    int v85 = *((unsigned __int8 *)off_1009F8150 + 198);
    int v39 = *((unsigned __int8 *)off_1009F8150 + 199);
    int v84 = *((unsigned __int8 *)off_1009F8150 + 204);
    uint64_t v40 = sub_100052EB4();
    int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 120))(v40);
    if (v39) {
      BOOL v77 = *(unsigned char *)(a1 + 1379) != 0;
    }
    else {
      BOOL v77 = 0;
    }
    uint64_t v42 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: ---------- DigitalID Concurrent Usages Statistics ----------", buf, 2u);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v88) = v35;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Num Classic Connections: %d", buf, 8u);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v88) = v36;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Num LE Connections: %d", buf, 8u);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      long long v43 = "No";
      if (v37) {
        long long v43 = "Yes";
      }
      *(_DWORD *)long long buf = 136446210;
      double v88 = *(double *)&v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - Watch Connected: %{public}s", buf, 0xCu);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      long long v44 = "No";
      if (v38) {
        long long v44 = "Yes";
      }
      *(_DWORD *)long long buf = 136446210;
      double v88 = *(double *)&v44;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - A2DP Streaming: %{public}s", buf, 0xCu);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v45 = "No";
      if (v85) {
        BOOL v45 = "Yes";
      }
      *(_DWORD *)long long buf = 136446210;
      double v88 = *(double *)&v45;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - HFP Streaming: %{public}s", buf, 0xCu);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      int v46 = "No";
      if (v39) {
        int v46 = "Yes";
      }
      *(_DWORD *)long long buf = 136446210;
      double v88 = *(double *)&v46;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - LEA Streaming: %{public}s", buf, 0xCu);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      long long v47 = "No";
      if (v84) {
        long long v47 = "Yes";
      }
      *(_DWORD *)long long buf = 136446210;
      double v88 = *(double *)&v47;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - ISO Pipe Streaming: %{public}s", buf, 0xCu);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v48 = "No";
      if (v41) {
        uint64_t v48 = "Yes";
      }
      *(_DWORD *)long long buf = 136446210;
      double v88 = *(double *)&v48;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: DigitalID - WiFi on 2.4GHz: %{public}s", buf, 0xCu);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_signpost_enabled(v42))
    {
      id v49 = [v81 UTF8String];
      *(_DWORD *)long long buf = 138545154;
      double v88 = *(double *)&v9;
      __int16 v89 = 2082;
      *(void *)long long v90 = v49;
      *(_WORD *)&v90[8] = 2048;
      *(double *)int v91 = v14;
      *(_WORD *)&v91[8] = 2048;
      *(double *)unsigned int v92 = v15;
      *(_WORD *)&v92[8] = 2048;
      *(double *)unint64_t v93 = v19;
      *(_WORD *)&v93[8] = 1024;
      *(_DWORD *)id v94 = v82;
      *(_WORD *)&v94[4] = 2048;
      *(double *)&v94[6] = v27;
      *(_WORD *)&v94[14] = 1024;
      *(_DWORD *)&v94[16] = v86;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE DigitalID Stat for %{public}@ start %{public}s duration total %.3f set-up %.3f data_transfer %.3f bytes %d throughput %.3f (bytes/sec) disconnect_reason %d", buf, 0x4Au);
      uint64_t v42 = qword_100A19EF8;
    }
    if (os_signpost_enabled(v42))
    {
      uint64_t v50 = "No";
      *(_DWORD *)long long buf = 138545410;
      double v88 = *(double *)&v9;
      __int16 v89 = 1024;
      if (v37) {
        id v51 = "Yes";
      }
      else {
        id v51 = "No";
      }
      *(_DWORD *)long long v90 = v35;
      if (v38) {
        unint64_t v52 = "Yes";
      }
      else {
        unint64_t v52 = "No";
      }
      *(_WORD *)&v90[4] = 1024;
      if (v85) {
        BOOL v53 = "Yes";
      }
      else {
        BOOL v53 = "No";
      }
      *(_DWORD *)&v90[6] = v36;
      if (v39) {
        uint64_t v54 = "Yes";
      }
      else {
        uint64_t v54 = "No";
      }
      *(_WORD *)int v91 = 2082;
      if (v84) {
        int v55 = "Yes";
      }
      else {
        int v55 = "No";
      }
      *(void *)&v91[2] = v51;
      if (v41) {
        uint64_t v50 = "Yes";
      }
      *(_WORD *)unsigned int v92 = 2082;
      *(void *)&v92[2] = v52;
      *(_WORD *)unint64_t v93 = 2082;
      *(void *)&v93[2] = v53;
      *(_WORD *)id v94 = 2082;
      *(void *)&v94[2] = v54;
      *(_WORD *)&v94[10] = 2082;
      *(void *)&v94[12] = v55;
      __int16 v95 = 2082;
      int v96 = v50;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v42, OS_SIGNPOST_EVENT, 0xEEEEB0B5B2B2EEEELL, "BTSignPost", "BLE DigitalID Condition for %{public}@ Classic %d LE %d Watch %{public}s A2DP %{public}s HFP %{public}s LEA %{public}s ISO %{public}s WiFi 2.4GHz %{public}s", buf, 0x54u);
    }
    char v56 = +[NSMutableDictionary dictionary];
    uint64_t v57 = +[NSNumber numberWithDouble:v14];
    [v56 setObject:v57 forKeyedSubscript:@"ConnectionDurationInSec"];

    uint64_t v58 = +[NSNumber numberWithDouble:v15];
    [v56 setObject:v58 forKeyedSubscript:@"ConnectionSetupDurationInSec"];

    uint64_t v59 = +[NSNumber numberWithDouble:v19];
    [v56 setObject:v59 forKeyedSubscript:@"DataTransferDurationInSec"];

    uint64_t v60 = +[NSNumber numberWithUnsignedInt:v82];
    [v56 setObject:v60 forKeyedSubscript:@"DataBytes"];

    uint64_t v61 = +[NSNumber numberWithDouble:v27];
    [v56 setObject:v61 forKeyedSubscript:@"ThroughputBytesPerSec"];

    uint64_t v62 = +[NSNumber numberWithUnsignedInt:v86];
    [v56 setObject:v62 forKeyedSubscript:@"DisconnectionReason"];

    uint64_t v63 = +[NSNumber numberWithBool:v37 != 0];
    [v56 setObject:v63 forKeyedSubscript:@"IsWatchConnected"];

    uint64_t v64 = +[NSNumber numberWithBool:v38 != 0];
    [v56 setObject:v64 forKeyedSubscript:@"IsA2DPSessionActive"];

    uint64_t v65 = +[NSNumber numberWithBool:v85 != 0];
    [v56 setObject:v65 forKeyedSubscript:@"IsHFPSessionActive"];

    uint64_t v66 = +[NSNumber numberWithBool:v39 != 0];
    [v56 setObject:v66 forKeyedSubscript:@"IsLEASessionActive"];

    uint64_t v67 = +[NSNumber numberWithBool:v84 != 0];
    [v56 setObject:v67 forKeyedSubscript:@"IsISOPipeStreamingActive"];

    uint64_t v68 = +[NSString stringWithUTF8String:sub_10003D640(a4)];
    [v56 setObject:v68 forKeyedSubscript:@"UseCase"];

    uint64_t v69 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v83 + 1379)];
    [v56 setObject:v69 forKeyedSubscript:@"IsConnPrioritizationSupported"];

    uint64_t v70 = +[NSNumber numberWithUnsignedInt:v80];
    [v56 setObject:v70 forKeyedSubscript:@"PrioritizedConnIntervalsPercentage"];

    uint64_t v71 = +[NSNumber numberWithBool:v77];
    [v56 setObject:v71 forKeyedSubscript:@"ProtectLEA"];

    uint64_t v72 = +[NSNumber numberWithDouble:v20];
    [v56 setObject:v72 forKeyedSubscript:@"PresentmentDuration"];

    uint64_t v73 = +[NSNumber numberWithDouble:v25];
    [v56 setObject:v73 forKeyedSubscript:@"PresentmentThroughputBytesPerSec"];

    uint64_t v74 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543362;
      double v88 = *(double *)&v56;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Sending DigitalIDMetric :%{public}@", buf, 0xCu);
    }
    uint64_t v75 = sub_100050530();
    (*(void (**)(uint64_t, void *))(*(void *)v75 + 288))(v75, v56);
  }
}

void sub_1006938EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_100693A40(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  sub_1006BC0AC((uint64_t)off_1009F7ED8, v2, 0.0);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  sub_1006BC1CC((uint64_t)off_1009F7ED8, v2, 0.0);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  sub_1006BC2E4((uint64_t)off_1009F7ED8, v2, 0);
}

void sub_100693B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100693B38(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7 = a2;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BE1D8);
  }
  BOOL v8 = sub_100008DC4(qword_1009F7EC8, v7);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  double v9 = sub_1006BBD44((uint64_t)off_1009F7ED8, v7);
  double v10 = 0.0;
  if (CFAbsoluteTimeGetCurrent() > v9) {
    double v10 = CFAbsoluteTimeGetCurrent() - v9;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  uint64_t v11 = sub_1006C1228((uint64_t)off_1009F7ED8, v7);
  double v12 = +[NSMutableDictionary dictionary];
  double v13 = +[NSNumber numberWithBool:v8];
  [v12 setObject:v13 forKeyedSubscript:@"Paired"];

  double v14 = +[NSNumber numberWithDouble:v10];
  [v12 setObject:v14 forKeyedSubscript:@"DurationInSeconds"];

  double v15 = +[NSNumber numberWithUnsignedInt:a4];
  [v12 setObject:v15 forKeyedSubscript:@"DisconnectReasonCode"];

  BOOL v16 = +[NSNumber numberWithBool:a3 == 0];
  [v12 setObject:v16 forKeyedSubscript:@"Initiator"];

  BOOL v17 = +[NSNumber numberWithShort:v11];
  [v12 setObject:v17 forKeyedSubscript:@"ConnectionEstablishedRSSI"];

  sub_1000305AC(buf, v7);
  uint64_t v22 = buf;
  double v18 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)sub_1006AB568((uint64_t **)(a1 + 480), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v22)+ 21)];
  [v12 setObject:v18 forKeyedSubscript:@"PreviousConnectRetries"];

  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  double v19 = sub_1006C206C((uint64_t)off_1009F7ED8, v7);
  [v12 setObject:v19 forKeyedSubscript:@"UseCase"];

  double v20 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    __int16 v24 = v12;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Sending LeConnectRetry metric :%{public}@", buf, 0xCu);
  }
  uint64_t v21 = sub_100050530();
  (*(void (**)(uint64_t, void *))(*(void *)v21 + 280))(v21, v12);
}

void sub_100693EBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100693F38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, int a7, int a8, int a9)
{
  uint64_t v16 = sub_100050530();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 560))(v16, a3, a4);
  uint64_t v17 = *(void *)sub_100050530();
  (*(void (**)(void))(v17 + 536))();
  if (qword_1009F85E8 != -1) {
    dispatch_once(&qword_1009F85E8, &stru_1009BE178);
  }
  sub_1003C4C88(qword_1009F85E0, a4);
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  double v18 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1006AD3F0();
    id v19 = (id)objc_claimAutoreleasedReturnValue();
    double v20 = v19;
    *(_DWORD *)long long buf = 67110402;
    uint64_t v21 = "Peripheral";
    *(_DWORD *)&uint8_t buf[4] = a6;
    *(_WORD *)&uint8_t buf[8] = 2114;
    if (!a5) {
      uint64_t v21 = "Central";
    }
    *(void *)&buf[10] = v19;
    __int16 v25 = 2082;
    double v26 = v21;
    uint64_t v22 = "Yes";
    v27[0] = 2082;
    if (!a7) {
      uint64_t v22 = "No";
    }
    *(void *)&v27[1] = v22;
    v27[5] = 1024;
    int v28 = a8;
    __int16 v29 = 1024;
    int v30 = a9;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "LE ConnManager disconnection complete reason %d address=%{public}@ localRole=%{public}s wakeUp=%{public}s encrypted:%d timeOffsetInMs:%d", buf, 0x32u);
  }
  sub_100019878();
  operator new();
}

void sub_100695D6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42)
{
  sub_10003AFB4((uint64_t)&a34);
  _Unwind_Resume(a1);
}

void sub_10069602C(uint64_t a1, void *a2, int a3, char a4)
{
  id v7 = a2;
  uint64_t v8 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 2760))(v8))
  {
    uint64_t v9 = sub_100019878();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1006A5150;
    v10[3] = &unk_1009999C0;
    uint64_t v12 = a1;
    id v11 = v7;
    char v14 = a4;
    int v13 = a3;
    sub_100013018(v9, v10);
  }
}

void sub_100696120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100696140(uint64_t a1, void *a2, int a3, char a4)
{
  id v7 = a2;
  if (a3 == 4833 && _os_feature_enabled_impl())
  {
    uint64_t v8 = sub_100019878();
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1006A61F0;
    v9[3] = &unk_1009999C0;
    uint64_t v11 = a1;
    id v10 = v7;
    char v13 = a4;
    int v12 = 4833;
    sub_100013018(v8, v9);
  }
}

void sub_100696220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100696240(uint64_t a1)
{
  double Current = CFAbsoluteTimeGetCurrent();
  *(double *)(a1 + 1176) = Current;
  if (Current + -172800.0 <= 0.0)
  {
    int v4 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100791738(v4, Current, Current + -172800.0, v5, v6);
    }
  }
  else
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 1168);
    sub_1006A0B34(a1, Current + -172800.0);
    if (v3 > 0x20)
    {
      sub_1006A0F50(a1);
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
        sub_1007916BC();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
    {
      sub_100791648();
    }
  }
}

void sub_10069633C(uint64_t a1, char *a2, int a3, double a4)
{
  uint64_t v8 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = a2;
    if (a2[23] < 0) {
      uint64_t v9 = *(char **)a2;
    }
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = (int)a4;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "upsertDisconnectionHistoryElement %{public}s time %d reason %d", buf, 0x18u);
  }
  uint64_t v10 = sub_10003156C(a1 + 1152, (const void **)a2);
  if (a1 + 1160 == v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
      sub_1007917B8();
    }
    if (*(void *)(a1 + 1168) >= 0x21uLL) {
      sub_100696240(a1);
    }
    *(void *)long long buf = buf;
    *(_OWORD *)&uint8_t buf[8] = (unint64_t)buf;
    char v13 = (double *)operator new(0x20uLL);
    v13[2] = a4;
    *((_DWORD *)v13 + 6) = a3;
    *((_DWORD *)v13 + 7) = 0;
    *(void *)char v13 = buf;
    *((void *)v13 + 1) = buf;
    *(void *)long long buf = v13;
    *(void *)&uint8_t buf[8] = v13;
    *(void *)&_DWORD buf[16] = 1;
    uint64_t v17 = a2;
    char v14 = (uint8_t *)(sub_1006AB9A8((uint64_t **)(a1 + 1152), (const void **)a2, (uint64_t)&unk_1007BE9D0, (long long **)&v17)+ 56);
    if (v14 != buf) {
      goto LABEL_23;
    }
  }
  else
  {
    memset(buf, 0, sizeof(buf));
    sub_1006AB90C(buf, v10 + 56);
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
      sub_100791890();
    }
    if (*(void *)&buf[16] >= 0x60uLL)
    {
      if (*(_WORD *)&buf[16] == 95)
      {
        int v12 = *(uint64_t **)&buf[8];
      }
      else
      {
        unint64_t v11 = (unsigned __int16)(*(_WORD *)&buf[16] - 95) + 1;
        int v12 = *(uint64_t **)&buf[8];
        do
        {
          int v12 = (uint64_t *)v12[1];
          --v11;
        }
        while (v11 > 1);
      }
      sub_1004B7760((uint64_t)buf, *(uint64_t **)&buf[8], v12);
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
        sub_100791828();
      }
    }
    double v15 = (double *)operator new(0x20uLL);
    v15[2] = a4;
    *((_DWORD *)v15 + 6) = a3;
    *((_DWORD *)v15 + 7) = 0;
    uint64_t v16 = *(void *)buf;
    *double v15 = *(double *)buf;
    *((void *)v15 + 1) = buf;
    *(void *)(v16 + 8) = v15;
    uint64_t v17 = a2;
    *(void *)long long buf = v15;
    ++*(void *)&buf[16];
    char v14 = (uint8_t *)(sub_1006AB9A8((uint64_t **)(a1 + 1152), (const void **)a2, (uint64_t)&unk_1007BE9D0, (long long **)&v17)+ 56);
    if (v14 != buf) {
LABEL_23:
    }
      sub_1006ABB88((uint64_t *)v14, *(uint64_t *)&buf[8], (uint64_t)buf);
  }
  sub_1002B308C(buf);
  sub_10069FDA8((void *)a1);
}

void sub_1006965F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10069661C(uint64_t a1, void *a2, int a3)
{
  id v44 = a2;
  sub_1000305AC(buf, v44);
  if (a1 + 1552 != sub_1000308C0(a1 + 1544, buf))
  {
    sub_1000305AC(buf, v44);
    unint64_t v52 = buf;
    uint64_t v5 = sub_1006AC438((uint64_t **)(a1 + 1544), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v52);
    id v45 = (id)v5[6];
    uint64_t v6 = (_UNKNOWN **)(id)v5[7];
    double v7 = *((double *)v5 + 9);
    int v8 = *((unsigned __int8 *)v5 + 80);
    unint64_t v9 = v5[11];
    int v10 = *((unsigned __int8 *)v5 + 97);
    int v11 = *((unsigned __int8 *)v5 + 98);
    int v46 = *((unsigned __int8 *)v5 + 99);
    int v12 = *((unsigned __int8 *)v5 + 100);
    unsigned int v40 = *((_DWORD *)v5 + 26);
    unsigned int v13 = *((_DWORD *)v5 + 27);
    unsigned int v14 = *((_DWORD *)v5 + 28);
    unsigned int v41 = v13;
    int v42 = v12;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    int v15 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v44);
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009BE1D8);
    }
    BOOL v16 = sub_100008DC4(qword_1009F7EC8, v45);
    if (v10)
    {
      BOOL v17 = v16;
      unsigned int v39 = v14;
      double Current = CFAbsoluteTimeGetCurrent();
      id v19 = +[NSMutableDictionary dictionary];
      double v20 = +[NSNumber numberWithBool:v17];
      [v19 setObject:v20 forKeyedSubscript:@"Paired"];

      uint64_t v21 = +[NSNumber numberWithDouble:Current - v7];
      [v19 setObject:v21 forKeyedSubscript:@"Duration"];

      uint64_t v22 = +[NSNumber numberWithInteger:a3];
      [v19 setObject:v22 forKeyedSubscript:@"DisconnectReason"];

      unsigned int v23 = +[NSNumber numberWithBool:v11 != 0];
      [v19 setObject:v23 forKeyedSubscript:@"Initiator"];

      __int16 v24 = +[NSNumber numberWithBool:v8 != 0];
      [v19 setObject:v24 forKeyedSubscript:@"RemoteDisconnected"];

      if (v11)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        __int16 v25 = +[NSNumber numberWithChar:sub_1006C1228((uint64_t)off_1009F7ED8, v45)];
        [v19 setObject:v25 forKeyedSubscript:@"ConnectionEstablishedRSSI"];
      }
      if (v15 == 655360)
      {
        [v19 setObject:&__kCFBooleanTrue forKeyedSubscript:@"DigitalKey"];
        double v26 = +[NSNumber numberWithUnsignedInt:v41];
        [v19 setObject:v26 forKeyedSubscript:@"KeyRSSIEventCount"];

        double v27 = +[NSNumber numberWithUnsignedInt:v40];
        [v19 setObject:v27 forKeyedSubscript:@"KeyRSSIEventWakeCount"];
      }
      if (v46) {
        [v19 setObject:&__kCFBooleanTrue forKeyedSubscript:@"KeyWakeOnConnect"];
      }
      if (v42) {
        [v19 setObject:&__kCFBooleanTrue forKeyedSubscript:@"KeyWakeOnDisconnect"];
      }
      if (v9 > 5) {
        CFStringRef v28 = @"PeerTypeOther";
      }
      else {
        CFStringRef v28 = (const __CFString *)*((void *)&off_1009BE310 + v9);
      }
      [v19 setObject:v28 forKeyedSubscript:@"PeerType"];
      __int16 v29 = +[NSNumber numberWithUnsignedInt:v39];
      [v19 setObject:v29 forKeyedSubscript:@"DASessionType"];

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      int v30 = +[NSNumber numberWithUnsignedInt:sub_1006C199C((uint64_t)off_1009F7ED8, v45)];
      [v19 setObject:v30 forKeyedSubscript:@"LinkReadyDuration"];

      LOBYTE(v52) = 0;
      __int16 v51 = 0;
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      sub_1006C16C8((uint64_t)off_1009F7ED8, v45, &v51, &v52, (char *)&v51 + 1);
      int v31 = +[NSNumber numberWithBool:v52];
      [v19 setObject:v31 forKeyedSubscript:@"FastLeConnectionConfigured"];

      uint64_t v32 = +[NSNumber numberWithBool:v51];
      [v19 setObject:v32 forKeyedSubscript:@"FastLeConnectionUsed"];

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      id v33 = +[NSNumber numberWithUnsignedShort:sub_1006C1AB4((uint64_t)off_1009F7ED8, v45)];
      [v19 setObject:v33 forKeyedSubscript:@"LinkReadyConnectionInterval"];

      if (HIBYTE(v51)) {
        [v19 setObject:0 forKeyedSubscript:@"DASessionType"];
      }
      if (![v6 count])
      {

        uint64_t v6 = &off_1009E1A38;
      }
      uint64_t v43 = a1;
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      uint64_t v6 = v6;
      id v34 = [v6 countByEnumeratingWithState:&v47 objects:v53 count:16];
      if (v34)
      {
        uint64_t v35 = *(void *)v48;
        do
        {
          for (i = 0; i != v34; i = (char *)i + 1)
          {
            if (*(void *)v48 != v35) {
              objc_enumerationMutation(v6);
            }
            [v19 setObject:*(void *)(*((void *)&v47 + 1) + 8 * i) forKeyedSubscript:@"BundleIdentifier"];
            int v37 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              int v55 = v19;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Sending LESessionEndedMetric %@", buf, 0xCu);
            }
            uint64_t v38 = sub_100050530();
            (*(void (**)(uint64_t, void *))(*(void *)v38 + 272))(v38, v19);
          }
          id v34 = [v6 countByEnumeratingWithState:&v47 objects:v53 count:16];
        }
        while (v34);
      }

      sub_100696E4C(v43, v45);
    }
  }
}

void sub_100696D4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100696E4C(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_1000305AC(v4, v3);
  sub_1006AC5DC((uint64_t **)(a1 + 1544), v4);
}

void sub_100696EC4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100696EDC(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BE158);
  }
  sub_1004FA540((os_unfair_lock_s *)off_1009F8150, *(_DWORD *)(a1 + 40));
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  id v2 = sub_1006C269C((uint64_t)off_1009F7ED8, *(void **)(a1 + 32));
  id v3 = [v2 cuFilteredArrayUsingBlock:&stru_1009BDB50];

  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v10;
    do
    {
      double v7 = 0;
      do
      {
        if (*(void *)v10 != v6) {
          objc_enumerationMutation(v4);
        }
        int v8 = *(void **)(*((void *)&v9 + 1) + 8 * (void)v7);
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009BE158);
        }
        sub_1004FF3AC((uint64_t)off_1009F8150, *(void **)(a1 + 32), [v8 integerValue], *(unsigned __int8 *)(a1 + 44));
        double v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v4 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v5);
  }
}

void sub_1006970B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006970E4(id a1, NSNumber *a2)
{
  id v2 = a2;
  if ([(NSNumber *)v2 integerValue] <= 0) {
    id v3 = 0;
  }
  else {
    id v3 = v2;
  }
  id v4 = v3;

  return v4;
}

void sub_100697124(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100697134(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  uint64_t v5 = *a2;
  if (*(unsigned char *)(a1 + 44)) {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 16))(a2, v3, v4);
  }
  else {
    return (*(uint64_t (**)(uint64_t *, uint64_t, uint64_t))(v5 + 128))(a2, v3, v4);
  }
}

uint64_t sub_100697198(uint64_t result)
{
  if (!*(void *)(result + 896)) {
    sub_1003733D8();
  }
  return result;
}

void sub_10069728C(uint64_t a1, double a2)
{
  if (*(void *)(a1 + 552))
  {
    uint64_t v4 = qword_100A19EF8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT) || !sub_100791900(v4, (void *)(a1 + 552))) {
      sub_10067CF88(a1);
    }
  }
  uint64_t v5 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    double v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Arming Fast connection scan Timer with interval %f seconds", buf, 0xCu);
  }
  *(double *)(a1 + 560) = a2;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100697434;
  v9[3] = &unk_1009A1400;
  void v9[4] = a1;
  uint64_t v6 = +[NSTimer timerWithTimeInterval:0 repeats:v9 block:a2];
  double v7 = *(void **)(a1 + 552);
  *(void *)(a1 + 552) = v6;

  int v8 = +[NSRunLoop mainRunLoop];
  [v8 addTimer:*(void *)(a1 + 552) forMode:NSDefaultRunLoopMode];
}

void sub_10069741C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100697434(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Fast connection scan Timer expired !", buf, 2u);
  }
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  v7[2] = sub_10069751C;
  v7[3] = &unk_100997528;
  v7[4] = v4;
  sub_100013018(v6, v7);
}

void sub_10069750C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10069751C(uint64_t a1)
{
  return sub_100697524(*(void *)(a1 + 32));
}

uint64_t sub_100697524(uint64_t a1)
{
  *(void *)&long long v66 = 0;
  sub_100026C30((uint64_t)&v66);
  uint64_t v56 = SWORD2(v66);
  uint64_t v57 = (int)v66;
  v81[0] = 0;
  v81[1] = 0;
  sub_10003AED0((uint64_t)v81, a1 + 120);
  uint64_t v80 = 0;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  *(_OWORD *)uint64_t v68 = 0u;
  long long v69 = 0u;
  memset(v67, 0, sizeof(v67));
  long long v66 = 0u;
  sub_10004C67C((uint64_t)&v66);
  sub_10067CF88(a1);
  __int16 v65 = 0;
  uint64_t v2 = sub_100052EB4();
  (*(void (**)(uint64_t, char *, __int16 *))(*(void *)v2 + 48))(v2, (char *)&v65 + 1, &v65);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BE158);
  }
  int v3 = *((unsigned __int8 *)off_1009F8150 + 197);
  int v4 = *((unsigned __int8 *)off_1009F8150 + 198);
  uint64_t v5 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = HIBYTE(v65);
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v65;
    *(_WORD *)&unsigned char buf[14] = 1024;
    LODWORD(v83[0]) = v3;
    WORD2(v83[0]) = 1024;
    *(_DWORD *)((char *)v83 + 6) = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "checkIfFastConnectionScanIsRequired reason:%d state%d isA2DPStreaming:%d isHFPStreaming:%d", buf, 0x1Au);
  }
  uint64_t v96 = 0;
  long long v94 = 0u;
  long long v95 = 0u;
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  long long v88 = 0u;
  long long v89 = 0u;
  long long v86 = 0u;
  long long v87 = 0u;
  *(_OWORD *)int v84 = 0u;
  long long v85 = 0u;
  memset(v83, 0, sizeof(v83));
  *(_OWORD *)long long buf = 0u;
  sub_10004C67C((uint64_t)buf);
  uint64_t v6 = *(const unsigned __int8 **)(a1 + 336);
  if (v6 != (const unsigned __int8 *)(a1 + 344))
  {
    if (v4 | v3) {
      __int16 v7 = 8;
    }
    else {
      __int16 v7 = 7;
    }
    __int16 v54 = v7;
    char v55 = 0;
    double v8 = 0.0;
    while (1)
    {
      long long v64 = 0uLL;
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      long long v9 = off_1009F7ED8;
      long long v10 = sub_100031234(v6 + 25);
      sub_1006C2D6C((uint64_t)v9, v10, (uint64_t)&v64);

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      double v11 = off_1009F7ED8;
      long long v12 = sub_100031234(v6 + 25);
      int v13 = sub_1006C5EB0((uint64_t)v11, v12);

      if (v64 == 0 || v13 == 6) {
        goto LABEL_42;
      }
      __int16 v63 = 0;
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      unsigned int v14 = off_1009F7ED8;
      int v15 = sub_100031234(v6 + 25);
      LOWORD(v14) = sub_1006C5EB0((uint64_t)v14, v15);

      __int16 v63 = (__int16)v14;
      if (HIBYTE(v65) == 1)
      {
        if ((_BYTE)v65) {
          break;
        }
      }
      if (HIBYTE(v65) == 2 && (_BYTE)v65)
      {
        BOOL v17 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v97 = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Extending host scan request to DefaultExtended while in AirPlay critical buffering state", v97, 2u);
        }
        __int16 v16 = 1;
        goto LABEL_26;
      }
LABEL_27:
      char v62 = 0;
      double v18 = sub_100031234(v6 + 25);
      sub_1006981E8(a1, v18, &v63, &v62, &v64);

      uint64_t v19 = sub_10003AB28((uint64_t)v83);
      memset(v97, 0, 37);
      uuid_unparse_upper(v6 + 25, (char *)v97);
      sub_10004191C(&v60, (char *)v97);
      uint64_t v20 = sub_10003AB28(v19);
      uint64_t v21 = sub_10003AB28(v20);
      long long v98 = 0u;
      memset(v97, 0, sizeof(v97));
      snprintf((char *)v97, 0x3FuLL, "%0llu.%0llu", (void)v64, *((void *)&v64 + 1));
      sub_10004191C(__p, (char *)v97);
      if (v59 >= 0) {
        uint64_t v22 = __p;
      }
      else {
        uint64_t v22 = (void **)__p[0];
      }
      strlen((const char *)v22);
      uint64_t v23 = sub_10003AB28(v21);
      sub_10003AB28(v23);
      *(_WORD *)&v97[6] = 0;
      *(_DWORD *)long long v97 = v64;
      *(_WORD *)&v97[4] = WORD4(v64);
      sub_100262A50((uint64_t)v97);
      std::ostream::operator<<();
      if (v59 < 0) {
        operator delete(__p[0]);
      }
      if (v61 < 0) {
        operator delete(v60);
      }
      *(_WORD *)&v97[6] = 0;
      *(_DWORD *)long long v97 = v64;
      *(_WORD *)&v97[4] = WORD4(v64);
      if (!sub_100262A50((uint64_t)v97))
      {
        unint64_t v24 = *((void *)&v64 + 1) - v56 + 1000 * (v64 - v57);
        unint64_t v25 = v24 / 0x3E8;
        double v26 = (double)(v24 % 0x3E8) / 1000.0;
        if (v8 >= v26 + (double)(v24 / 0x3E8)) {
          double v27 = v26 + (double)v25;
        }
        else {
          double v27 = v8;
        }
        if (v8 == 0.0) {
          double v8 = v26 + (double)v25;
        }
        else {
          double v8 = v27;
        }
        CFStringRef v28 = (void *)sub_10003AB28((uint64_t)v83);
        v97[0] = 48;
        __int16 v29 = sub_10004C5B4(v28, v97);
        *(void *)((char *)v29 + *(void *)(*v29 - 24) + 16) = 3;
        uint64_t v30 = std::ostream::operator<<();
        sub_10003AB28(v30);
        char v55 = 1;
      }
LABEL_42:
      int v31 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v31)
      {
        do
        {
          uint64_t v32 = (const unsigned __int8 **)v31;
          int v31 = *(unsigned __int8 **)v31;
        }
        while (v31);
      }
      else
      {
        do
        {
          uint64_t v32 = (const unsigned __int8 **)*((void *)v6 + 2);
          BOOL v33 = *v32 == v6;
          uint64_t v6 = (const unsigned __int8 *)v32;
        }
        while (!v33);
      }
      uint64_t v6 = (const unsigned __int8 *)v32;
      if (v32 == (const unsigned __int8 **)(a1 + 344)) {
        goto LABEL_50;
      }
    }
    __int16 v16 = v54;
LABEL_26:
    __int16 v63 = v16;
    goto LABEL_27;
  }
  char v55 = 0;
  double v8 = 0.0;
LABEL_50:
  uint64_t v34 = sub_10003AB28((uint64_t)v67);
  long long v98 = 0u;
  memset(v97, 0, sizeof(v97));
  snprintf((char *)v97, 0x3FuLL, "%0llu.%0llu", v57, v56);
  uint64_t v35 = (const char *)&v60;
  sub_10004191C(&v60, (char *)v97);
  if (v61 < 0) {
    uint64_t v35 = (const char *)v60;
  }
  strlen(v35);
  uint64_t v36 = sub_10003AB28(v34);
  sub_10003AB28(v36);
  uint64_t v37 = std::ostream::operator<<();
  sub_10003AB28(v37);
  if (v61 < 0) {
    operator delete(v60);
  }
  uint64_t v38 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str();
    int v39 = v61;
    unsigned int v40 = (void **)v60;
    std::stringbuf::str();
    unsigned int v41 = &v60;
    if (v39 < 0) {
      unsigned int v41 = v40;
    }
    if (v59 >= 0) {
      int v42 = __p;
    }
    else {
      int v42 = (void **)__p[0];
    }
    *(_DWORD *)long long v97 = 67109634;
    *(_DWORD *)&v97[4] = v55 & 1;
    *(_WORD *)&v97[8] = 2082;
    *(void *)&v97[10] = v41;
    *(_WORD *)&v97[18] = 2082;
    *(void *)&v97[20] = v42;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "shouldEnableFastConnectionScan:%d %{public}s%{public}s", v97, 0x1Cu);
    if (v59 < 0) {
      operator delete(__p[0]);
    }
    if (v61 < 0) {
      operator delete(v60);
    }
  }
  if (*(_DWORD *)(a1 + 864) != 1 || !*(void *)(a1 + 352)) {
    goto LABEL_68;
  }
  LOWORD(v60) = 0;
  LOWORD(__p[0]) = 0;
  LOWORD(v64) = 0;
  LOBYTE(v63) = 0;
  sub_100698980(a1, &v60, (unsigned __int16 *)__p, &v64, (char *)&v63);
  char v62 = 0;
  sub_10001B8E0(&v62);
  int v43 = (unsigned __int16)v60;
  int v44 = LOWORD(__p[0]);
  BOOL v45 = sub_10021897C((unsigned __int16)v60, LOWORD(__p[0]));
  sub_10001B910(&v62);
  if (v45)
  {
    sub_10001B8AC(&v62);
LABEL_68:
    if (v55)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
        sub_100791958();
      }
      if (*(void *)(a1 + 352) && *(unsigned char *)(a1 + 184) && v8 > 0.0)
      {
        sub_100697198(a1);
        int v46 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long v97 = 134217984;
          *(double *)&v97[4] = v8;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Setting scan level expiration %f ms from now", v97, 0xCu);
        }
        sub_10069728C(a1, v8);
      }
    }
    else if (*(void *)(a1 + 896))
    {
      sub_10067CE78(a1);
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
        sub_1007919C4();
      }
      if (*(_DWORD *)(a1 + 864) == 1 && *(void *)(a1 + 352))
      {
        long long v47 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long v97 = 0;
          _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Reducing connection timing for current connections", v97, 2u);
        }
        sub_10067C23C(a1, 0);
      }
    }
    goto LABEL_88;
  }
  long long v48 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long v97 = 67109376;
    *(_DWORD *)&v97[4] = v44;
    *(_WORD *)&v97[8] = 1024;
    *(_DWORD *)&v97[10] = v43;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Cancelling connections due to connection scan params: window - 0x%x, interval - 0x%x", v97, 0xEu);
  }
  sub_10067C23C(a1, 0);
  sub_10001B8AC(&v62);
LABEL_88:
                            - 24)] = v51;
  uint64_t v52 = v50;
  *(void *)&v83[0] = v50;
  if (SHIBYTE(v85) < 0) {
    operator delete(v84[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  *(void *)&long long v66 = v49;
  *(void *)((char *)&v67[-1] + *(void *)(v49 - 24)) = v51;
  *(void *)&v67[0] = v52;
  if (SHIBYTE(v69) < 0) {
    operator delete(v68[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  return sub_10003AFB4((uint64_t)v81);
}

void sub_1006980F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61,uint64_t a62,char a63)
{
}

void sub_1006981E8(uint64_t a1, void *a2, _WORD *a3, char *a4, void *a5)
{
  id v8 = a2;
  uint64_t v9 = sub_100052EB4();
  __int16 v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 56))(v9);
  uint64_t v57 = 0;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  *(_OWORD *)__p = 0u;
  long long v46 = 0u;
  memset(v44, 0, sizeof(v44));
  long long v43 = 0u;
  sub_10004C67C((uint64_t)&v43);
  uint64_t v11 = sub_10003AB28((uint64_t)v44);
  sub_1000305AC(v58, v8);
  memset(out, 0, 37);
  uuid_unparse_upper(v12, (char *)out);
  sub_10004191C(buf, (char *)out);
  uint64_t v13 = sub_10003AB28(v11);
  sub_10003AB28(v13);
  std::ostream::operator<<();
  if (v60 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v14 = (unsigned __int16)*a3;
  if (!v10 || v14 > 2)
  {
    LODWORD(v21) = *(_DWORD *)(a1 + 4 * v14 + 568);
    sub_10003AB28((uint64_t)v44);
    char v26 = 0;
LABEL_21:
    *a4 = v26;
    goto LABEL_22;
  }
  sub_10003AB28((uint64_t)v44);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v15 = sub_1006C60E0((uint64_t)off_1009F7ED8, v8);
  uint64_t v16 = sub_10003AB28((uint64_t)v44);
  BOOL v17 = "Low";
  if (v15 == 1) {
    BOOL v17 = "Medium";
  }
  if (v15 == 2) {
    double v18 = "High";
  }
  else {
    double v18 = v17;
  }
  strlen(v18);
  sub_10003AB28(v16);
  if (!v15)
  {
    LODWORD(v21) = *(_DWORD *)(a1 + 600);
    *a3 = 8;
    char v26 = 1;
    goto LABEL_21;
  }
  if (v15 == 2)
  {
    LODWORD(v21) = *(_DWORD *)(a1 + 4 * (unsigned __int16)*a3 + 568);
    char v26 = 2;
    goto LABEL_21;
  }
  if (v15 == 1 && *(_WORD *)(a1 + 112))
  {
    uint64_t v19 = 0;
    unint64_t v20 = 0;
    LODWORD(v21) = 0;
    while (1)
    {
      uint64_t v21 = (*(_DWORD *)(*(void *)(a1 + 104) + v19) + v21);
      unint64_t v22 = a5[1] + v21;
      unint64_t v23 = *a5 + v22 / 0x3E8;
      unint64_t v24 = v22 % 0x3E8;
      LODWORD(out[0]) = *(_DWORD *)a5 + v22 / 0x3E8;
      DWORD1(out[0]) = v22 % 0x3E8;
      if (!sub_100262A50((uint64_t)out)) {
        break;
      }
      *a3 = 8;
      int v25 = *(_DWORD *)(a1 + 600);
      *a4 = 1;
      ++v20;
      v19 += 8;
      if (v20 >= *(unsigned __int16 *)(a1 + 112))
      {
        LODWORD(v21) = v25;
        goto LABEL_22;
      }
    }
    sub_10003AB28((uint64_t)v44);
    uint64_t v37 = std::ostream::operator<<();
    uint64_t v38 = sub_10003AB28(v37);
    memset(out, 0, sizeof(out));
    snprintf((char *)out, 0x3FuLL, "%0llu.%0llu", v23, v24);
    sub_10004191C(buf, (char *)out);
    uint64_t v39 = sub_10003AB28(v38);
    sub_10003AB28(v39);
    uint64_t v40 = std::ostream::operator<<();
    sub_10003AB28(v40);
    std::ostream::operator<<();
    if (v60 < 0) {
      operator delete(*(void **)buf);
    }
    int v41 = *(_DWORD *)(*(void *)(a1 + 104) + v19 + 4);
    if (v41 == 9) {
      LOWORD(v41) = 8;
    }
    *a3 = v41;
    if ((unsigned __int16)v41 == 8) {
      char v26 = 1;
    }
    else {
      char v26 = 2;
    }
    goto LABEL_21;
  }
  LODWORD(v21) = 0;
LABEL_22:
  unint64_t v27 = a5[1] + v21;
  *a5 += v27 / 0x3E8;
  a5[1] = v27 % 0x3E8;
  uint64_t v28 = sub_10003AB28((uint64_t)v44);
  sub_10042F298(a5, out);
  uint64_t v29 = sub_10003AB28(v28);
  sub_10003AB28(v29);
  uint64_t v30 = std::ostream::operator<<();
  uint64_t v31 = sub_10003AB28(v30);
  sub_10003AB28(v31);
  uint64_t v32 = std::ostream::operator<<();
  sub_10003AB28(v32);
  uint64_t v33 = std::ostream::operator<<();
  sub_10003AB28(v33);
  std::ostream::operator<<();
  if (SBYTE7(out[1]) < 0) {
    operator delete(*(void **)&out[0]);
  }
  uint64_t v34 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str();
    uint64_t v35 = (SBYTE7(out[1]) & 0x80u) == 0 ? out : *(_OWORD **)&out[0];
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "%{public}s", buf, 0xCu);
    if (SBYTE7(out[1]) < 0) {
      operator delete(*(void **)&out[0]);
    }
  }
  *(void *)((char *)&v44[-1]
  *(void *)&v44[0] = v36;
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
}

void sub_1006988F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100742518((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_100698980(uint64_t a1, _WORD *a2, unsigned __int16 *a3, _WORD *a4, char *a5)
{
  *a4 = 0;
  *a5 = 0;
  if (*(void *)(a1 + 896))
  {
    __int16 v96 = 0;
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BE158);
    }
    sub_1004FB19C((uint64_t)off_1009F8150, 2);
    uint64_t v5 = sub_100052EB4();
    (*(void (**)(uint64_t, __int16 *, char *))(*(void *)v5 + 48))(v5, &v96, (char *)&v96 + 1);
    BOOL v6 = 0;
    *a3 = 48;
    *a2 = 480;
    if (v96 == 1)
    {
      HIDWORD(v86) = 0;
      uint64_t v7 = a1;
      if (HIBYTE(v96))
      {
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009BE158);
        }
        HIDWORD(v86) = *((unsigned char *)off_1009F8150 + 197) != 0;
        BOOL v6 = *((unsigned char *)off_1009F8150 + 198) != 0;
      }
    }
    else
    {
      HIDWORD(v86) = 0;
      uint64_t v7 = a1;
    }
    LODWORD(v86) = v6;
    uint64_t v33 = *(const unsigned __int8 **)(v7 + 336);
    uint64_t v34 = (const unsigned __int8 **)(v7 + 344);
    if (v33 == (const unsigned __int8 *)(v7 + 344))
    {
      char v35 = 0;
    }
    else
    {
      char v35 = 0;
      if (v86) {
        __int16 v36 = 8;
      }
      else {
        __int16 v36 = 7;
      }
      __int16 v88 = v36;
      do
      {
        unsigned __int16 v95 = 0;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        uint64_t v37 = off_1009F7ED8;
        uint64_t v38 = sub_100031234(v33 + 25);
        int v39 = sub_1006C5EB0((uint64_t)v37, v38);

        BOOL v40 = v39 == 1;
        if (HIBYTE(v96)) {
          BOOL v41 = v96 == 1;
        }
        else {
          BOOL v41 = 0;
        }
        __int16 v42 = v88;
        if (!v41) {
          __int16 v42 = v39;
        }
        unsigned __int16 v95 = v42;
        uint64_t v93 = 0;
        uint64_t v94 = 0;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        long long v43 = off_1009F7ED8;
        int v44 = sub_100031234(v33 + 25);
        sub_1006C2D6C((uint64_t)v43, v44, (uint64_t)&v93);

        BOOL v45 = sub_100031234(v33 + 25);
        sub_1006981E8(a1, v45, &v95, a5, &v93);

        uint64_t v46 = v95;
        if (v95 < 9uLL)
        {
          *(_WORD *)&buf_4[2] = 0;
          int buf = v93;
          *(_WORD *)buf_4 = v94;
          BOOL v49 = sub_100262A50((uint64_t)&buf);
          unsigned int v50 = (unsigned __int16)*a2;
          if (!v49 && v50 >= *(unsigned __int16 *)(a1 + 2 * v46 + 256)) {
            LOWORD(v50) = *(_WORD *)(a1 + 2 * v46 + 256);
          }
          *a2 = v50;
          uint64_t v51 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v51 + 648))(v51))
          {
            unsigned int v52 = (unsigned __int16)*a4;
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            long long v53 = off_1009F7ED8;
            long long v54 = sub_100031234(v33 + 25);
            if (v52 <= sub_1006BF478((uint64_t)v53, v54))
            {
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
              }
              long long v55 = off_1009F7ED8;
              long long v56 = sub_100031234(v33 + 25);
              *a4 = sub_1006BF478((uint64_t)v55, v56);
            }
          }
          uint64_t v57 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
          {
            sub_100031234(v33 + 25);
            id v58 = (id)objc_claimAutoreleasedReturnValue();
            int v59 = *a3;
            int v60 = v95;
            int v61 = *(unsigned __int16 *)(a1 + 2 * v95 + 256);
            v97[0] = v93;
            v97[1] = (unsigned __int16)v94;
            BOOL v62 = sub_100262A50((uint64_t)v97);
            int v63 = *a3;
            long long v64 = "NO";
            if (v62) {
              long long v64 = "YES";
            }
            int v65 = (unsigned __int16)*a2;
            int v66 = (unsigned __int16)*a4;
            int buf = 138545154;
            *(void *)buf_4 = v58;
            *(_WORD *)&buf_4[8] = 1024;
            *(_DWORD *)__int16 v100 = v59;
            *(_WORD *)&v100[4] = 1024;
            *(_DWORD *)uint64_t v101 = v61;
            *(_WORD *)&v101[4] = 1024;
            *(_DWORD *)char v102 = v60;
            *(_WORD *)&v102[4] = 2082;
            int v103 = v64;
            __int16 v104 = 1024;
            int v105 = v63;
            __int16 v106 = 1024;
            int v107 = v65;
            __int16 v108 = 1024;
            int v109 = v66;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_INFO, "device \"%{public}@\" Connection scans [0x%x/0x%x(level:%d)] ignored:%{public}s [aggregated 0x%x/0x%x/0x%x]", (uint8_t *)&buf, 0x3Au);
          }
        }
        else
        {
          long long v47 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
          {
            long long v69 = sub_100031234(v33 + 25);
            int buf = 138543618;
            *(void *)buf_4 = v69;
            *(_WORD *)&buf_4[8] = 1024;
            *(_DWORD *)__int16 v100 = v95;
            _os_log_fault_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_FAULT, "device \"%{public}@\" connection scan duty cycle %d is invalid", (uint8_t *)&buf, 0x12u);

            long long v47 = qword_100A19EF8;
          }
          if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
          {
            long long v48 = sub_100031234(v33 + 25);
            int buf = 138543618;
            *(void *)buf_4 = v48;
            *(_WORD *)&buf_4[8] = 1024;
            *(_DWORD *)__int16 v100 = v95;
            _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "device \"%{public}@\" connection scan duty cycle %d is invalid", (uint8_t *)&buf, 0x12u);
          }
        }
        uint64_t v67 = (unsigned __int8 *)*((void *)v33 + 1);
        if (v67)
        {
          do
          {
            uint64_t v68 = (const unsigned __int8 **)v67;
            uint64_t v67 = *(unsigned __int8 **)v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            uint64_t v68 = (const unsigned __int8 **)*((void *)v33 + 2);
            BOOL v9 = *v68 == v33;
            uint64_t v33 = (const unsigned __int8 *)v68;
          }
          while (!v9);
        }
        v35 |= v40;
        uint64_t v33 = (const unsigned __int8 *)v68;
      }
      while (v68 != v34);
    }
    if (v96 == 1 && HIBYTE(v96) != 0)
    {
      uint64_t v71 = sub_100035F54();
      int v72 = (*(uint64_t (**)(uint64_t))(*(void *)v71 + 968))(v71);
      int v73 = v72;
      unsigned int v74 = (unsigned __int16)*a2;
      if ((v86 | HIDWORD(v86)) == 1)
      {
        if (v74 <= *(unsigned __int16 *)(a1 + 272)) {
          LOWORD(v74) = *(_WORD *)(a1 + 272);
        }
        *a2 = v74;
        if (v72)
        {
          if (_os_feature_enabled_impl())
          {
            int v75 = (unsigned __int16)*a2;
            if (v75 == *(unsigned __int16 *)(a1 + 272))
            {
              int v76 = v75 - *a3;
              if (v76 < (unsigned __int16)*a4) {
                LOWORD(v76) = *a4;
              }
              *a4 = v76;
            }
          }
        }
      }
      else
      {
        if (v35) {
          unsigned int v77 = *(unsigned __int16 *)(a1 + 272);
        }
        else {
          unsigned int v77 = *(unsigned __int16 *)(a1 + 270);
        }
        if (v74 <= v77) {
          LOWORD(v74) = v77;
        }
        *a2 = v74;
      }
      long long v78 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
      {
        int v79 = *a3;
        int v80 = (unsigned __int16)*a2;
        int v81 = (unsigned __int16)*a4;
        int buf = 67110400;
        *(_DWORD *)buf_4 = HIDWORD(v86);
        *(_WORD *)&buf_4[4] = 1024;
        *(_DWORD *)&buf_4[6] = v86;
        *(_WORD *)__int16 v100 = 1024;
        *(_DWORD *)&v100[2] = v73;
        *(_WORD *)uint64_t v101 = 1024;
        *(_DWORD *)&v101[2] = v79;
        *(_WORD *)char v102 = 1024;
        *(_DWORD *)&v102[2] = v80;
        LOWORD(v103) = 1024;
        *(_DWORD *)((char *)&v103 + 2) = v81;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_INFO, "CarPlay is on, isA2DPStreaming:%d isHFPStreaming:%d highDutySC:%d Connection scans updated [0x%x/0x%x/0x%x]", (uint8_t *)&buf, 0x26u);
      }
    }
  }
  else
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BE158);
    }
    sub_1004FB19C((uint64_t)off_1009F8150, 1);
    LOBYTE(v93) = 0;
    LOBYTE(v97[0]) = 0;
    LOBYTE(v95) = 0;
    uint64_t v8 = sub_10003FFD4();
    if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v8 + 152))(v8, &v93)) {
      BOOL v9 = 1;
    }
    else {
      BOOL v9 = v93 == 0;
    }
    if (v9
      && ((uint64_t v10 = sub_10003FFD4(),
           !(*(unsigned int (**)(uint64_t, _DWORD *, unsigned __int16 *))(*(void *)v10 + 96))(v10, v97, &v95))? (BOOL v11 = LOBYTE(v97[0]) == 0): (BOOL v11 = 1), v11))
    {
      *a2 = 480;
      *a3 = *(_WORD *)(a1 + 274);
      const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v12 = *(const unsigned __int8 **)(a1 + 336);
      if (v12 != (const unsigned __int8 *)(a1 + 344))
      {
        do
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          uint64_t v13 = off_1009F7ED8;
          uint64_t v14 = sub_100031234(v12 + 25);
          unsigned int v15 = sub_1006C5FC8((uint64_t)v13, v14);

          if (v15 >= 7)
          {
            double v18 = qword_100A19EF8;
            uint64_t v16 = a3;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
            {
              int buf = 67109120;
              *(_DWORD *)buf_4 = v15;
              _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "scanDutyCycle cannot be %d", (uint8_t *)&buf, 8u);
            }
          }
          else
          {
            uint64_t v16 = a3;
            unsigned int v17 = *a3;
            if (v17 <= *(unsigned __int16 *)(a1 + 2 * v15 + 274)) {
              LOWORD(v17) = *(_WORD *)(a1 + 2 * v15 + 274);
            }
            *a3 = v17;
          }
          unsigned int v19 = *v16;
          unsigned int v20 = (unsigned __int16)*a2;
          if (v19 > v20)
          {
            uint64_t v21 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT))
            {
              int buf = 67109376;
              *(_DWORD *)buf_4 = v19;
              *(_WORD *)&buf_4[4] = 1024;
              *(_DWORD *)&buf_4[6] = v20;
              _os_log_fault_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_FAULT, "scanWindow (0x%x), scanInterval (0x%x)", (uint8_t *)&buf, 0xEu);
            }
          }
          unint64_t v22 = (unsigned __int8 *)*((void *)v12 + 1);
          if (v22)
          {
            do
            {
              unint64_t v23 = (const unsigned __int8 **)v22;
              unint64_t v22 = *(unsigned __int8 **)v22;
            }
            while (v22);
          }
          else
          {
            do
            {
              unint64_t v23 = (const unsigned __int8 **)*((void *)v12 + 2);
              BOOL v9 = *v23 == v12;
              const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v12 = (const unsigned __int8 *)v23;
            }
            while (!v9);
          }
          const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v12 = (const unsigned __int8 *)v23;
        }
        while (v23 != (const unsigned __int8 **)(a1 + 344));
      }
    }
    else
    {
      *a2 = 480;
      *a3 = 48;
    }
    uint64_t v24 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 648))(v24))
    {
      int v25 = *(const unsigned __int8 **)(a1 + 336);
      if (v25 != (const unsigned __int8 *)(a1 + 344))
      {
        do
        {
          unsigned int v26 = (unsigned __int16)*a4;
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          unint64_t v27 = off_1009F7ED8;
          uint64_t v28 = sub_100031234(v25 + 25);
          if (v26 <= sub_1006BF478((uint64_t)v27, v28))
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            uint64_t v29 = off_1009F7ED8;
            uint64_t v30 = sub_100031234(v25 + 25);
            *a4 = sub_1006BF478((uint64_t)v29, v30);
          }
          uint64_t v31 = (unsigned __int8 *)*((void *)v25 + 1);
          if (v31)
          {
            do
            {
              uint64_t v32 = (const unsigned __int8 **)v31;
              uint64_t v31 = *(unsigned __int8 **)v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              uint64_t v32 = (const unsigned __int8 **)*((void *)v25 + 2);
              BOOL v9 = *v32 == v25;
              int v25 = (const unsigned __int8 *)v32;
            }
            while (!v9);
          }
          int v25 = (const unsigned __int8 *)v32;
        }
        while (v32 != (const unsigned __int8 **)(a1 + 344));
      }
    }
    *a5 = 0;
  }
  if (*(unsigned char *)(a1 + 1075))
  {
    *a3 = *(_WORD *)(a1 + 1076);
    int v82 = *(unsigned __int16 *)(a1 + 1078);
    *a2 = v82;
    uint64_t v83 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      int v84 = *a3;
      int buf = 67109376;
      *(_DWORD *)buf_4 = v84;
      *(_WORD *)&buf_4[4] = 1024;
      *(_DWORD *)&buf_4[6] = v82;
      _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Overriding Connection Scan Parameters on MainCore. window=%d: interval=%d ", (uint8_t *)&buf, 0xEu);
    }
  }
  uint64_t result = sub_1006A1CEC((unsigned __int16 *)a1, (unsigned __int16)*a2, *a3, (unsigned __int16)*a4);
  if ((result & 1) == 0) {
    *a4 = 0;
  }
  return result;
}

void sub_1006995B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10069963C(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0 && *(unsigned char *)(a1 + 184))
  {
    if (*(void *)(a1 + 352)) {
      return sub_100697524(a1);
    }
  }
  return a1;
}

uint64_t sub_100699658(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 120);
  if (*(unsigned char *)(a1 + 184) && *(void *)(a1 + 352)) {
    sub_100697524(a1);
  }
  return sub_10003AFB4((uint64_t)v3);
}

void sub_1006996B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006996C4(uint64_t a1)
{
  return sub_100699658(a1 - 8);
}

void sub_1006996D0(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  int v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    int v4 = v5;
  }
  if (v4)
  {
    BOOL v6 = v4;
    operator delete(v4);
  }
}

void sub_100699774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10069979C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 120);
  uint64_t v5 = sub_100686130(a1, a3);
  if (v5)
  {
    sub_1000305AC(uu2, v5);
    uint64_t v6 = sub_1000308C0(a1 + 936, uu2);
    uint64_t v7 = v6;
    if (a1 + 944 != v6)
    {
      *(void *)uu2 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      uint64_t v8 = v6 + 48;
      sub_1006AB730((uint64_t *)uu2, v6 + 48);
      uint64_t v10 = *(void **)(v7 + 56);
      BOOL v9 = (void *)(v7 + 56);
      sub_1000486F0(v8, v10);
      *(v9 - 1) = v9;
      void *v9 = 0;
      v9[1] = 0;
      sub_100019878();
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100791ADC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_100791A70();
  }

  return sub_10003AFB4((uint64_t)v12);
}

void sub_100699A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *a22)
{
  sub_1000486F0((uint64_t)&a21, a22);

  sub_10003AFB4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100699AEC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)a2 + 24))(a2, **(void **)(a1 + 40), *(void *)(a1 + 32), *(unsigned int *)(a1 + 48), *(char *)(a1 + 52));
}

uint64_t sub_100699B28(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 120);
  uint64_t v4 = sub_1000308C0(a1 + 936, a2);
  if (a1 + 944 != v4)
  {
    if (*(void *)(v4 + 64)) {
      sub_100685610(a1, a2);
    }
    else {
      sub_1005B8E10((uint64_t **)(a1 + 936), v4);
    }
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100699BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100699BC8(os_unfair_lock_s *a1, uint64_t a2, int a3)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, (uint64_t)&a1[30]);
  uint64_t v6 = sub_100686130((uint64_t)a1, a2);
  if (v6)
  {
    uint64_t v7 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = "asleep";
      if (a3) {
        uint64_t v8 = "awake";
      }
      *(_DWORD *)int buf = 138543618;
      uint64_t v15 = v6;
      __int16 v16 = 2082;
      unsigned int v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is now %{public}s", buf, 0x16u);
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_100699D6C;
    v10[3] = &unk_1009BDBF0;
    id v11 = v6;
    char v12 = a3;
    sub_10067762C(a1, v10);
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_100699D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100699D6C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 48))(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

uint64_t sub_100699DA0(os_unfair_lock_s *a1, uint64_t a2, int a3, uint64_t a4, int a5, int a6, int a7, int a8)
{
  v30[0] = 0;
  v30[1] = 0;
  sub_10003AED0((uint64_t)v30, (uint64_t)&a1[30]);
  __int16 v16 = sub_100686130((uint64_t)a1, a2);
  unsigned int v17 = qword_100A19EF8;
  BOOL v18 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    if (v18)
    {
      BOOL v19 = a3 == 1 || a3 == 10;
      *(_DWORD *)int buf = 138545154;
      unsigned int v20 = "LE_SET_PHY";
      uint64_t v32 = (uint64_t)v16;
      __int16 v33 = 2082;
      if (v19) {
        unsigned int v20 = "ConnectionComplete";
      }
      uint64_t v34 = v20;
      __int16 v35 = 1024;
      int v36 = a3;
      __int16 v37 = 2048;
      uint64_t v38 = a4;
      __int16 v39 = 1024;
      int v40 = a5;
      __int16 v41 = 1024;
      int v42 = a6;
      __int16 v43 = 1024;
      int v44 = a7;
      __int16 v45 = 1024;
      int v46 = a8;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is receiving a timestamp %{public}s EventType=%d with value %llu %d eventCnt=%d, sec:%d ms:%d", buf, 0x3Eu);
    }
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100699FF4;
    v22[3] = &unk_1009BDC18;
    char v29 = a3;
    id v23 = v16;
    uint64_t v24 = a4;
    __int16 v28 = a6;
    int v25 = a5;
    int v26 = a7;
    int v27 = a8;
    sub_10067762C(a1, v22);
  }
  else if (v18)
  {
    *(_DWORD *)int buf = 134217984;
    uint64_t v32 = a2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", buf, 0xCu);
  }

  return sub_10003AFB4((uint64_t)v30);
}

void sub_100699FC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100699FF4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void))(*(void *)a2 + 56))(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 62), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(unsigned __int16 *)(a1 + 60), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56));
}

uint64_t sub_10069A034(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v7 = (os_unfair_lock_s *)v2;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, v2 + 120);
  uint64_t v8 = sub_100686130((uint64_t)v7, v6);
  BOOL v9 = qword_100A19EF8;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      int v11 = v4[26090];
      int buf = 138543618;
      uint64_t v18 = (uint64_t)v8;
      __int16 v19 = 1024;
      int v20 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device %{public}@ has completed a procedure of %d stetps", (uint8_t *)&buf, 0x12u);
    }
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    void v14[2] = sub_10069A240;
    v14[3] = &unk_1009BDC40;
    id v15 = v8;
    memcpy(v16, v4, sizeof(v16));
    sub_10067762C(v7, v14);
  }
  else if (v10)
  {
    int buf = 134217984;
    uint64_t v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", (uint8_t *)&buf, 0xCu);
  }

  return sub_10003AFB4((uint64_t)v13);
}

void sub_10069A210(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, id a16)
{
  sub_10003AFB4((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10069A240(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  memcpy(__dst, (const void *)(a1 + 40), sizeof(__dst));
  return (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)a2 + 64))(a2, v3, __dst);
}

uint64_t sub_10069A2E8(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4, int a5, int a6, uint64_t a7, char a8, char a9, char a10, char a11, char a12, unsigned __int16 a13, int a14, char a15, char a16)
{
  v57[0] = 0;
  v57[1] = 0;
  sub_10003AED0((uint64_t)v57, (uint64_t)&a1[30]);
  uint64_t v24 = sub_100686130((uint64_t)a1, a2);
  if (v24)
  {
    sub_1000305AC(buf, v24);
    if (sub_100685B68((uint64_t)a1, buf))
    {
      int v25 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = "";
        *(_DWORD *)int buf = 138545666;
        *(void *)&uint8_t buf[4] = v24;
        if (a15) {
          int v26 = " wakeUp";
        }
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = a9;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = a10;
        *(_WORD *)&uint8_t buf[24] = 1024;
        *(_DWORD *)&buf[26] = a11;
        *(_WORD *)&buf[30] = 1024;
        LODWORD(v60) = a12;
        WORD2(v60) = 1024;
        *(_DWORD *)((char *)&v60 + 6) = a13;
        WORD5(v60) = 1024;
        HIDWORD(v60) = a3;
        *(_WORD *)int v61 = 1024;
        *(_DWORD *)&v61[2] = a4;
        *(_WORD *)&v61[6] = 1024;
        *(_DWORD *)&v61[8] = a5;
        *(_WORD *)&v61[12] = 2082;
        *(void *)&v61[14] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is receiving a Rssi Detection Rssi [Avg|Max|median|min] var = %d:%d:%d:%d %d  CoreMotion=%x:%x:%x %{public}s", buf, 0x46u);
      }
      long long v60 = 0u;
      memset(v61, 0, sizeof(v61));
      memset(buf, 0, sizeof(buf));
      sub_1006773FC((uint64_t)a1, v24, (uint64_t)buf);
      if (*(void *)buf)
      {
        ++*(_DWORD *)&v61[12];
        if (a15) {
          ++*(_DWORD *)&v61[8];
        }
        v52[0] = *(id *)buf;
        v52[1] = *(id *)&buf[8];
        long long v53 = *(_OWORD *)&buf[16];
        long long v54 = v60;
        long long v55 = *(_OWORD *)v61;
        int v56 = *(_DWORD *)&v61[16];
        sub_100677528((uint64_t)a1, v24, (uint64_t)v52);
      }
      v37[0] = _NSConcreteStackBlock;
      v37[1] = 3221225472;
      v37[2] = sub_10069A828;
      v37[3] = &unk_1009BDC68;
      id v27 = v24;
      int v40 = a3;
      int v41 = a4;
      int v42 = a5;
      int v43 = a6;
      id v38 = v27;
      uint64_t v39 = a7;
      char v46 = a8;
      char v47 = a9;
      char v48 = a10;
      char v49 = a11;
      char v50 = a12;
      unsigned __int16 v45 = a13;
      int v44 = a14;
      char v51 = a16;
      sub_10067762C(a1, v37);
      if (a15)
      {
        __int16 v35 = &off_100998428;
        int v36 = 0;
        sub_1000305AC(&uu2, v27);
        uint64_t v28 = sub_1000308C0((uint64_t)&a1[160], (unsigned __int8 *)&uu2);
        if (&a1[162] != (os_unfair_lock_s *)v28)
        {
          memset(&uu2, 0, sizeof(uu2));
          sub_100551758(*(void *)(v28 + 48), &uu2);
          uint64_t v29 = sub_1003731C0();
          if ((uu2.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_std::string uu2 = &uu2;
          }
          else {
            p_std::string uu2 = (std::string *)uu2.__r_.__value_.__r.__words[0];
          }
          __int16 v33 = &off_100998428;
          uint64_t v34 = v36;
          (*(void (**)(uint64_t, uint64_t, std::string *, id, uint64_t (***)()))(*(void *)v29 + 40))(v29, 6, p_uu2, v27, &v33);
          __int16 v33 = &off_100998428;
          if (v34) {
            sub_1000368F4(v34);
          }
          if (SHIBYTE(uu2.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(uu2.__r_.__value_.__l.__data_);
          }
        }
        __int16 v35 = &off_100998428;
        if (v36) {
          sub_1000368F4(v36);
        }
      }
    }
  }
  else
  {
    uint64_t v31 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", buf, 0xCu);
    }
  }

  return sub_10003AFB4((uint64_t)v57);
}

void sub_10069A780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, uint64_t a15, atomic_uint *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  if (a14) {
    sub_1000368F4(a14);
  }
  if (*(char *)(v37 - 177) < 0) {
    operator delete(*(void **)(v37 - 200));
  }
  if (a16) {
    sub_1000368F4(a16);
  }

  sub_10003AFB4((uint64_t)&a36);
  _Unwind_Resume(a1);
}

uint64_t sub_10069A828(uint64_t a1, uint64_t a2)
{
  BYTE4(v4) = *(unsigned char *)(a1 + 75);
  LODWORD(v4) = *(_DWORD *)(a1 + 64);
  WORD2(v3) = *(_WORD *)(a1 + 68);
  LODWORD(v3) = *(_DWORD *)(a1 + 71);
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, void, uint64_t, uint64_t))(*(void *)a2 + 72))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 48), *(unsigned int *)(a1 + 52), *(unsigned int *)(a1 + 56), *(unsigned int *)(a1 + 60), *(void *)(a1 + 40), *(char *)(a1 + 70), v3, v4);
}

uint64_t sub_10069A8A0(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4, int a5, uint64_t a6, int a7)
{
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, (uint64_t)&a1[30]);
  uint64_t v14 = sub_100686130((uint64_t)a1, a2);
  if (v14)
  {
    sub_1000305AC(buf, v14);
    if (sub_100685C5C((uint64_t)a1, buf))
    {
      id v15 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 138544386;
        uint64_t v27 = (uint64_t)v14;
        __int16 v28 = 1024;
        int v29 = a3;
        __int16 v30 = 1024;
        int v31 = a4;
        __int16 v32 = 1024;
        int v33 = a5;
        __int16 v34 = 2048;
        uint64_t v35 = a6;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is receiving a Bluetooth Usage Event max:%d min:%d  audioStream=%d timeStamp=%llu", buf, 0x28u);
      }
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10069AAE8;
      v18[3] = &unk_1009BDC90;
      __int16 v22 = a3;
      __int16 v23 = a4;
      char v24 = a5;
      id v19 = v14;
      uint64_t v20 = a6;
      int v21 = a7;
      sub_10067762C(a1, v18);
    }
  }
  else
  {
    __int16 v16 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      uint64_t v27 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", buf, 0xCu);
    }
  }

  return sub_10003AFB4((uint64_t)v25);
}

void sub_10069AAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10069AAE8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void, void, void))(*(void *)a2 + 80))(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 52), *(unsigned __int16 *)(a1 + 54), *(unsigned __int8 *)(a1 + 56), *(void *)(a1 + 40), *(unsigned int *)(a1 + 48));
}

uint64_t sub_10069AB28(os_unfair_lock_s *a1, uint64_t a2, char *a3, int a4)
{
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, (uint64_t)&a1[30]);
  uint64_t v8 = sub_100686130((uint64_t)a1, a2);
  if (v8)
  {
    sub_1000305AC(buf, v8);
    if (sub_100685CD0((uint64_t)a1, buf))
    {
      BOOL v9 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *a3;
        int v11 = *((unsigned __int16 *)a3 + 1);
        int v12 = *((unsigned __int16 *)a3 + 2);
        int v13 = *((unsigned __int16 *)a3 + 5);
        int v14 = *((unsigned __int16 *)a3 + 6);
        *(_DWORD *)int buf = 138544642;
        uint64_t v25 = (uint64_t)v8;
        __int16 v26 = 1024;
        int v27 = v10;
        __int16 v28 = 1024;
        int v29 = v11;
        __int16 v30 = 1024;
        int v31 = v12;
        __int16 v32 = 1024;
        int v33 = v13;
        __int16 v34 = 1024;
        int v35 = v14;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device %{public}@ is receiving a Phy statistc Bluetooth Usage Event Rssi:%d TxPER:%d:%d RxPER:%d:%d ", buf, 0x2Au);
      }
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      v18[2] = sub_10069AD74;
      v18[3] = &unk_1009BDC68;
      id v19 = v8;
      long long v15 = *((_OWORD *)a3 + 1);
      long long v20 = *(_OWORD *)a3;
      long long v21 = v15;
      int v22 = a4;
      sub_10067762C(a1, v18);
    }
  }
  else
  {
    __int16 v16 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      uint64_t v25 = a2;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device is not connected for %p", buf, 0xCu);
    }
  }

  return sub_10003AFB4((uint64_t)v23);
}

void sub_10069AD3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10069AD74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  return (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, void))(*(void *)a2 + 88))(a2, v3, v6, *(unsigned int *)(a1 + 72));
}

void sub_10069ADD4(os_unfair_lock_s *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7 = sub_100686130((uint64_t)a1, a2);
  uint64_t v8 = qword_100A19EF8;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      BOOL v9 = "high";
      *(_DWORD *)int buf = 136446722;
      if (a3) {
        BOOL v9 = "low";
      }
      long long v15 = v9;
      __int16 v16 = 2114;
      unsigned int v17 = v7;
      __int16 v18 = 1024;
      int v19 = a4;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Crossed the %{public}s LE RSSI threshold for device %{public}@: %d", buf, 0x1Cu);
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_10069AF78;
    v10[3] = &unk_1009BDCB8;
    id v11 = v7;
    char v12 = a3;
    char v13 = a4;
    sub_10067762C(a1, v10);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_100791B48();
  }
}

void sub_10069AF58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10069AF78(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 96))(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(char *)(a1 + 41));
}

uint64_t sub_10069AFB0(uint64_t a1, unint64_t a2, unsigned int a3, __int16 a4, int a5)
{
  v80[1] = 0;
  unint64_t v81 = a2;
  v80[0] = 0;
  sub_10003AED0((uint64_t)v80, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  BOOL v9 = *(const unsigned __int8 **)(a1 + 384);
  if (v9 != (const unsigned __int8 *)(a1 + 392))
  {
    while (*((void *)v9 + 6) != a2)
    {
      int v10 = (unsigned __int8 *)*((void *)v9 + 1);
      if (v10)
      {
        do
        {
          id v11 = (const unsigned __int8 **)v10;
          int v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          id v11 = (const unsigned __int8 **)*((void *)v9 + 2);
          BOOL v63 = *v11 == v9;
          BOOL v9 = (const unsigned __int8 *)v11;
        }
        while (!v63);
      }
      BOOL v9 = (const unsigned __int8 *)v11;
      if (v11 == (const unsigned __int8 **)(a1 + 392)) {
        goto LABEL_11;
      }
    }
    uuid_copy(uu, v9 + 32);
  }
LABEL_11:
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100791B7C();
    }
    return sub_10003AFB4((uint64_t)v80);
  }
  uint64_t v12 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v12 + 952))(v12))
  {
    __int16 v73 = 0;
    __int16 v74 = 0;
    goto LABEL_46;
  }
  char v13 = *(void **)(a1 + 536);
  if (!v13) {
    goto LABEL_26;
  }
  uint64_t v14 = a1 + 536;
  do
  {
    unint64_t v15 = v13[4];
    BOOL v16 = v15 >= v81;
    if (v15 >= v81) {
      unsigned int v17 = v13;
    }
    else {
      unsigned int v17 = v13 + 1;
    }
    if (v16) {
      uint64_t v14 = (uint64_t)v13;
    }
    char v13 = (void *)*v17;
  }
  while (*v17);
  if (v14 != a1 + 536 && v81 >= *(void *)(v14 + 32))
  {
    int v58 = *(unsigned __int16 *)(v14 + 46);
    int v59 = *(unsigned __int16 *)(v14 + 48);
    __int16 v60 = *(_WORD *)(v14 + 50);
    int v61 = *(_DWORD *)(v14 + 52);
    *(void *)int buf = &v81;
    BOOL v62 = sub_100509094((uint64_t **)(a1 + 528), &v81, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    if (v59) {
      BOOL v63 = 0;
    }
    else {
      BOOL v63 = v58 == 1;
    }
    if (v63) {
      int v64 = 0;
    }
    else {
      int v64 = v61;
    }
    *((_WORD *)v62 + 20) = a3;
    *((_WORD *)v62 + 21) = a4;
    *((_WORD *)v62 + 22) = a5;
    __int16 v73 = v58;
    __int16 v74 = v59;
    *((_WORD *)v62 + 23) = v58;
    *((_WORD *)v62 + 24) = v59;
    *((_WORD *)v62 + 25) = v60;
    *((_DWORD *)v62 + 13) = v64;
    int v65 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      *(void *)&uint8_t buf[4] = v81;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "Updated previously stored connection parameters for handle %p.", buf, 0xCu);
    }
  }
  else
  {
LABEL_26:
    __int16 v18 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "No previously stored connection parameters. Saving new parameters now. Subrate factor & Continuation number initialized to 0.", buf, 2u);
    }
    *(void *)int buf = &v81;
    int v19 = sub_100509094((uint64_t **)(a1 + 528), &v81, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    __int16 v73 = 0;
    __int16 v74 = 0;
    *((_WORD *)v19 + 20) = a3;
    *((_WORD *)v19 + 21) = a4;
    *((_WORD *)v19 + 22) = a5;
    *(uint64_t *)((char *)v19 + 46) = 0;
    *((_WORD *)v19 + 27) = 0;
  }
  long long v20 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v72 = v81;
    *(void *)__p = &v81;
    int v71 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v81, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)
          + 20);
    *(void *)__p = &v81;
    int v21 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v81, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)
          + 21);
    *(void *)__p = &v81;
    int v22 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v81, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)
          + 22);
    *(void *)__p = &v81;
    int v23 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v81, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)
          + 23);
    *(void *)__p = &v81;
    int v24 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v81, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)
          + 24);
    *(void *)__p = &v81;
    int v25 = *((_DWORD *)sub_100509094((uint64_t **)(a1 + 528), &v81, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p) + 13);
    *(_DWORD *)int buf = 134219520;
    *(void *)&uint8_t buf[4] = v72;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v71;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v21;
    *(_WORD *)&uint8_t buf[24] = 1024;
    *(_DWORD *)&buf[26] = v22;
    *(_WORD *)&buf[30] = 1024;
    *(_DWORD *)&uint8_t buf[32] = v23;
    *(_WORD *)&buf[36] = 1024;
    int v101 = v24;
    __int16 v102 = 1024;
    int v103 = v25;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "handleConnectionParametersUpdatedCallback: Connection parameters for handle %p. Connection Interval:%d Peripheral latency:%d Supervision Timeout=%d Subrate Factor: %d Continuation Number: %d. Subrating Status: %d", buf, 0x30u);
  }
  __int16 v26 = *(void **)(a1 + 512);
  if (v26)
  {
    unint64_t v27 = v81;
    uint64_t v28 = a1 + 512;
    do
    {
      unint64_t v29 = v26[4];
      BOOL v30 = v29 >= v81;
      if (v29 >= v81) {
        int v31 = v26;
      }
      else {
        int v31 = v26 + 1;
      }
      if (v30) {
        uint64_t v28 = (uint64_t)v26;
      }
      __int16 v26 = (void *)*v31;
    }
    while (*v31);
    if (v28 != a1 + 512 && v81 >= *(void *)(v28 + 32))
    {
      unint64_t v66 = *(void *)(v28 + 40);
      int v67 = *(unsigned __int16 *)(v28 + 48);
      uint64_t v68 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = WORD1(v66);
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = WORD2(v66);
        *(_WORD *)&unsigned char buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = (unsigned __int16)v66;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&unsigned char buf[22] = HIWORD(v66);
        *(_WORD *)&buf[26] = 1024;
        *(_DWORD *)&buf[28] = v67;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Locally initiated connection parameter update is now complete. Proceeding with sending connection subrating parameters: subrateMin:%d subrateMax:%d maxLatency:%d continuationNumber=%d supervisionTimeout=%d", buf, 0x20u);
        unint64_t v27 = v81;
      }
      int v69 = sub_100685204(a1, v27, v66, v67);
      uint64_t v70 = qword_100A19EF8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v69;
      int v33 = "Sent LE Connection Subrating Request with status: %d";
      __int16 v34 = v70;
      os_log_type_t v35 = OS_LOG_TYPE_DEFAULT;
      uint32_t v36 = 8;
      goto LABEL_44;
    }
  }
  uint64_t v32 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    int v33 = "No connection subrating requests pending for this handle";
    __int16 v34 = v32;
    os_log_type_t v35 = OS_LOG_TYPE_INFO;
    uint32_t v36 = 2;
LABEL_44:
    _os_log_impl((void *)&_mh_execute_header, v34, v35, v33, buf, v36);
  }
LABEL_46:
  if (a3 >= 0x308) {
    double v37 = 0.35;
  }
  else {
    double v37 = 0.75;
  }
  uint64_t v38 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v38 + 424))(v38))
  {
    uint64_t v39 = sub_100031234(uu);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    if (sub_1006C420C((uint64_t)off_1009F7ED8, v39))
    {
      if (a3 > 0xB)
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        int v43 = off_1009F7ED8;
        sub_10004191C(v76, "HIDDevicePoorBehavior");
        int v44 = sub_100030A04((uint64_t)v43, v39, (uint64_t)v76);
        if (v77 < 0) {
          operator delete(v76[0]);
        }
        if (v44)
        {
          unsigned __int16 v45 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
          {
            sub_100401EBC(uu, buf);
            char v46 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
            *(_DWORD *)__p = 136446210;
            *(void *)&__p[4] = v46;
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "Connection Update: Unsetting tag for LE_HID \"%{public}s\".", __p, 0xCu);
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          sub_1006B85C0((uint64_t)off_1009F7ED8, v39, @"HIDDevicePoorBehavior");
        }
      }
      else
      {
        int v40 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(uu, buf);
          sub_10004191C(__p, buf);
          int v41 = v97 >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)long long v89 = 136446466;
          *(void *)&v89[4] = v41;
          __int16 v90 = 1024;
          unsigned int v91 = a3;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Connection Update: LE HID \"%{public}s\" has interval less than 15ms: %d. Setting tag.", v89, 0x12u);
          if (SHIBYTE(v97) < 0) {
            operator delete(*(void **)__p);
          }
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        int v42 = off_1009F7ED8;
        sub_10004191C(v78, "HIDDevicePoorBehavior");
        sub_1006BC69C((uint64_t)v42, v39, (unsigned __int8 *)v78);
        if (v79 < 0) {
          operator delete(v78[0]);
        }
      }
    }
  }
  unsigned int v47 = (int)(v37 * (double)(10 * a5) / ((double)a3 * 1.25));
  char v48 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    memset(buf, 0, 37);
    uuid_unparse_upper(uu, buf);
    sub_10004191C(v89, buf);
    char v49 = v92 >= 0 ? v89 : *(unsigned char **)v89;
    *(_DWORD *)__p = 136446978;
    *(void *)&__p[4] = v49;
    __int16 v94 = 1024;
    int v95 = (int)(v37 * (double)(10 * a5) / ((double)a3 * 1.25));
    __int16 v96 = 1024;
    signed int v97 = a3;
    __int16 v98 = 1024;
    int v99 = a5;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Connection Update: setting LE device \"%{public}s\" connection threshold to %d events with interval %d, LSTO %d", __p, 0x1Eu);
    if (v92 < 0) {
      operator delete(*(void **)v89);
    }
  }
  uint64_t v50 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v50 + 336))(v50)) {
    goto LABEL_89;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  uint64_t v51 = (uint64_t)off_1009F7ED8;
  unsigned int v52 = sub_100031234(uu);
  LOBYTE(v51) = sub_1006C1BCC(v51, v52);

  if (v51)
  {
LABEL_89:
    uint64_t v53 = sub_10003FB34();
    if (v47 >= 0xFF) {
      uint64_t v54 = 255;
    }
    else {
      uint64_t v54 = v47;
    }
    if ((*(unsigned int (**)(uint64_t, unint64_t, uint64_t))(*(void *)v53 + 1064))(v53, v81, v54)
      && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      sub_100790E10();
    }
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  long long v55 = off_1009F7ED8;
  int v56 = sub_100031234(uu);
  sub_1006C38E0((uint64_t)v55, v56, a3);

  v82[0] = _NSConcreteStackBlock;
  v82[1] = 3321888768;
  void v82[2] = sub_10069BBAC;
  v82[3] = &unk_1009BDCD8;
  uuid_copy(v88, uu);
  __int16 v83 = a3;
  __int16 v84 = a4;
  __int16 v85 = a5;
  __int16 v86 = v73;
  __int16 v87 = v74;
  sub_10067762C((os_unfair_lock_s *)a1, v82);
  return sub_10003AFB4((uint64_t)v80);
}

void sub_10069BB10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  sub_10003AFB4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_10069BBAC(uint64_t a1, uint64_t a2)
{
  sub_100031234((const unsigned __int8 *)(a1 + 42));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
}

void sub_10069BC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10069BC50(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10069BC60(uint64_t a1, unint64_t a2, int a3, __int16 a4, __int16 a5, __int16 a6)
{
  v55[1] = 0;
  unint64_t v56 = a2;
  v55[0] = 0;
  sub_10003AED0((uint64_t)v55, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  char v13 = *(const unsigned __int8 **)(a1 + 384);
  if (v13 != (const unsigned __int8 *)(a1 + 392))
  {
    while (*((void *)v13 + 6) != a2)
    {
      uint64_t v14 = (unsigned __int8 *)*((void *)v13 + 1);
      if (v14)
      {
        do
        {
          unint64_t v15 = (const unsigned __int8 **)v14;
          uint64_t v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unint64_t v15 = (const unsigned __int8 **)*((void *)v13 + 2);
          BOOL v16 = *v15 == v13;
          char v13 = (const unsigned __int8 *)v15;
        }
        while (!v16);
      }
      char v13 = (const unsigned __int8 *)v15;
      if (v15 == (const unsigned __int8 **)(a1 + 392)) {
        goto LABEL_11;
      }
    }
    uuid_copy(uu, v13 + 32);
  }
LABEL_11:
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100791B7C();
    }
  }
  else
  {
    unsigned int v17 = *(void **)(a1 + 536);
    if (!v17) {
      goto LABEL_25;
    }
    unint64_t v18 = v56;
    int v19 = (void *)(a1 + 536);
    do
    {
      unint64_t v20 = v17[4];
      BOOL v21 = v20 >= v56;
      if (v20 >= v56) {
        int v22 = v17;
      }
      else {
        int v22 = v17 + 1;
      }
      if (v21) {
        int v19 = v17;
      }
      unsigned int v17 = (void *)*v22;
    }
    while (*v22);
    if (v19 != (void *)(a1 + 536) && v56 >= v19[4])
    {
      __int16 v24 = *((_WORD *)v19 + 20);
      __int16 v6 = *((_WORD *)v19 + 25);
      int v25 = *((_DWORD *)v19 + 13);
      log = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134217984;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "Updated previously stored connection parameters for handle %p.", buf, 0xCu);
      }
    }
    else
    {
LABEL_25:
      int v23 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "No previously stored connection parameters. Saving new parameters now. Connection Interval initialized to 0.", buf, 2u);
      }
      __int16 v24 = 0;
      int v25 = 0;
    }
    *(void *)int buf = &v56;
    __int16 v26 = sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    *((_WORD *)v26 + 20) = v24;
    *((_WORD *)v26 + 21) = a4;
    *((_WORD *)v26 + 22) = a6;
    *((_WORD *)v26 + 23) = a3;
    *((_WORD *)v26 + 24) = a5;
    *((_WORD *)v26 + 25) = v6;
    *((_DWORD *)v26 + 13) = v25;
    if (a3 == 1
      && (*(void *)int buf = &v56,
          *((int *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf) + 13) <= 1))
    {
      unint64_t v27 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v57 = &v56;
        int v53 = *((_DWORD *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v57) + 13);
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v53;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v56;
        _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "Connection subrating status was %d to handle %p. Setting status to OFF.", buf, 0x12u);
      }
      *(void *)int buf = &v56;
      uint64_t v28 = sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
      int v29 = 0;
    }
    else
    {
      BOOL v30 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v57 = &v56;
        int v52 = *((_DWORD *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v57) + 13);
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v52;
        *(_WORD *)&uint8_t buf[8] = 2048;
        *(void *)&buf[10] = v56;
        _os_log_debug_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEBUG, "Connection subrating status was %d to handle %p. Setting status to ON.", buf, 0x12u);
      }
      *(void *)int buf = &v56;
      uint64_t v28 = sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
      int v29 = 2;
    }
    *((_DWORD *)v28 + 13) = v29;
    int v31 = *(void **)(a1 + 512);
    if (v31)
    {
      unint64_t v32 = v56;
      int v33 = (void *)(a1 + 512);
      do
      {
        unint64_t v34 = v31[4];
        BOOL v35 = v34 >= v56;
        if (v34 >= v56) {
          uint32_t v36 = v31;
        }
        else {
          uint32_t v36 = v31 + 1;
        }
        if (v35) {
          int v33 = v31;
        }
        int v31 = (void *)*v36;
      }
      while (*v36);
      if (v33 != (void *)(a1 + 512) && v56 >= v33[4])
      {
        double v37 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          int v38 = *((unsigned __int16 *)v33 + 24);
          int v39 = *((unsigned __int16 *)v33 + 23);
          int v40 = *((unsigned __int16 *)v33 + 22);
          int v41 = *((unsigned __int16 *)v33 + 21);
          int v42 = *((unsigned __int16 *)v33 + 20);
          *(_DWORD *)int buf = 134219264;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v41;
          __int16 v61 = 1024;
          int v62 = v40;
          __int16 v63 = 1024;
          int v64 = v42;
          __int16 v65 = 1024;
          int v66 = v39;
          __int16 v67 = 1024;
          int v68 = v38;
          _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Locally initiated connection subrating update to handle %p is now complete. Connection subrating parameters requested: subrateMin:%d subrateMax:%d maxLatency:%d continuationNumber=%d supervisionTimeout=%d", buf, 0x2Au);
        }
        sub_1000517A4(a1 + 504, &v56);
      }
    }
    int v43 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v44 = v56;
      uint64_t v57 = &v56;
      int v45 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v57)
            + 20);
      uint64_t v57 = &v56;
      int v46 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v57)
            + 21);
      uint64_t v57 = &v56;
      int v47 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v57)
            + 22);
      uint64_t v57 = &v56;
      int v48 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v57)
            + 23);
      uint64_t v57 = &v56;
      int v49 = *((unsigned __int16 *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v57)
            + 24);
      uint64_t v57 = &v56;
      int v50 = *((_DWORD *)sub_100509094((uint64_t **)(a1 + 528), &v56, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v57) + 13);
      *(_DWORD *)int buf = 134219520;
      *(void *)&uint8_t buf[4] = v44;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v45;
      __int16 v61 = 1024;
      int v62 = v46;
      __int16 v63 = 1024;
      int v64 = v47;
      __int16 v65 = 1024;
      int v66 = v48;
      __int16 v67 = 1024;
      int v68 = v49;
      __int16 v69 = 1024;
      int v70 = v50;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "handleConnectionSubratingCompleted: Updated previously stored connection parameters for handle %p. Connection Interval:%d Peripheral latency:%d Supervision Timeout=%d Subrate Factor: %d Continuation Number: %d. Subrating Status set to %d", buf, 0x30u);
    }
    v58[0] = _NSConcreteStackBlock;
    v58[1] = 3321888768;
    v58[2] = sub_10069C380;
    v58[3] = &unk_1009BDD08;
    v58[4] = a1;
    uuid_copy(v59, uu);
    v58[5] = v56;
    sub_10067762C((os_unfair_lock_s *)a1, v58);
  }
  return sub_10003AFB4((uint64_t)v55);
}

void sub_10069C348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10069C380(uint64_t a1, uint64_t a2)
{
  id v3 = (uint64_t *)a1;
  long long v4 = *(uint64_t ***)(a1 + 32);
  uint64_t v5 = sub_100031234((const unsigned __int8 *)(a1 + 48));
  v4 += 66;
  v3 += 5;
  id v11 = v3;
  uint64_t v6 = *((unsigned __int16 *)sub_100509094(v4, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v11) + 20);
  id v11 = v3;
  uint64_t v7 = *((unsigned __int16 *)sub_100509094(v4, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v11) + 21);
  id v11 = v3;
  uint64_t v8 = *((unsigned __int16 *)sub_100509094(v4, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v11) + 22);
  id v11 = v3;
  uint64_t v9 = *((unsigned __int16 *)sub_100509094(v4, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v11) + 23);
  id v11 = v3;
  int v10 = sub_100509094(v4, (unint64_t *)v3, (uint64_t)&unk_1007BE9D0, &v11);
  (*(void (**)(uint64_t, void *, uint64_t, uint64_t, uint64_t, uint64_t, void))(*(void *)a2 + 32))(a2, v5, v6, v7, v8, v9, *((unsigned __int16 *)v10 + 24));
}

void sub_10069C4D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10069C4E4(uint64_t a1, unint64_t a2, int a3, int a4, char a5, int a6)
{
  v66[1] = 0;
  unint64_t v67 = a2;
  v66[0] = 0;
  sub_10003AED0((uint64_t)v66, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  uint64_t v12 = *(const unsigned __int8 **)(a1 + 384);
  if (v12 != (const unsigned __int8 *)(a1 + 392))
  {
    while (*((void *)v12 + 6) != a2)
    {
      char v13 = (unsigned __int8 *)*((void *)v12 + 1);
      if (v13)
      {
        do
        {
          uint64_t v14 = (const unsigned __int8 **)v13;
          char v13 = *(unsigned __int8 **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (const unsigned __int8 **)*((void *)v12 + 2);
          BOOL v15 = *v14 == v12;
          uint64_t v12 = (const unsigned __int8 *)v14;
        }
        while (!v15);
      }
      uint64_t v12 = (const unsigned __int8 *)v14;
      if (v14 == (const unsigned __int8 **)(a1 + 392)) {
        goto LABEL_11;
      }
    }
    uuid_copy(uu, v12 + 32);
  }
LABEL_11:
  int is_null = uuid_is_null(uu);
  unsigned int v17 = qword_100A19EF8;
  if (is_null)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100791B7C();
    }
  }
  else if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      sub_100401EBC(uu, out);
      sub_100791C1C();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, sizeof(out));
      uuid_unparse_upper(uu, out);
      sub_10004191C(__p, out);
      unint64_t v18 = v77 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)int buf = 136446466;
      char v79 = v18;
      __int16 v80 = 1024;
      int v81 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Le link \"%{public}s\" is ready with status %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v77 < 0) {
        operator delete(__p[0]);
      }
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    unsigned int v19 = sub_100225F9C(v67);
    __int16 v63 = sub_100225FE4(v67);
    __int16 v62 = sub_10022602C(v67);
    sub_10001B910(buf);
    unint64_t v20 = sub_100031234(uu);
    sub_10067DBD0(a1, v20);

    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    BOOL v21 = off_1009F7ED8;
    int v22 = sub_100031234(uu);
    sub_1006C163C((uint64_t)v21, v22, a5);

    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    int v23 = off_1009F7ED8;
    __int16 v24 = sub_100031234(uu);
    sub_1006C190C((uint64_t)v23, v24, a6);

    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    int v25 = off_1009F7ED8;
    __int16 v26 = sub_100031234(uu);
    sub_1006C1A28((uint64_t)v25, v26, (int)((double)v19 * 1.25));

    uint64_t v27 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 736))(v27))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v28 = off_1009F7ED8;
      int v29 = sub_100031234(uu);
      LODWORD(v28) = sub_1006BF058((uint64_t)v28, v29);

      if (v28)
      {
        BOOL v30 = sub_100031234(uu);
        sub_1000305AC(out, v30);
        sub_10069CE50(a1, (unsigned __int8 *)out);
      }
    }
    if (v19)
    {
      uint64_t v31 = v67;
      *(void *)uuid_string_t out = uu;
      sub_1006A982C((uint64_t **)(a1 + 408), uu, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out)[6] = v31;
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      unint64_t v32 = off_1009F7ED8;
      int v33 = sub_100031234(uu);
      sub_1006C29C8((uint64_t)v32, v33, *(_DWORD *)(v67 + 144));

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      unint64_t v34 = off_1009F7ED8;
      BOOL v35 = sub_100031234(uu);
      sub_1006C2BE0((uint64_t)v34, v35);

      uint64_t v36 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v36 + 952))(v36))
      {
        double v37 = *(void **)(a1 + 536);
        if (!v37) {
          goto LABEL_51;
        }
        unint64_t v38 = v67;
        uint64_t v39 = a1 + 536;
        do
        {
          unint64_t v40 = v37[4];
          BOOL v41 = v40 >= v67;
          if (v40 >= v67) {
            int v42 = v37;
          }
          else {
            int v42 = v37 + 1;
          }
          if (v41) {
            uint64_t v39 = (uint64_t)v37;
          }
          double v37 = (void *)*v42;
        }
        while (*v42);
        if (v39 != a1 + 536 && v67 >= *(void *)(v39 + 32))
        {
          __int16 v45 = *(_WORD *)(v39 + 46);
          __int16 v46 = *(_WORD *)(v39 + 48);
          int v59 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uuid_string_t out = 134217984;
            *(void *)&_OWORD out[4] = v38;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Updated previously stored connection parameters for handle %p.", (uint8_t *)out, 0xCu);
          }
        }
        else
        {
LABEL_51:
          int v43 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uuid_string_t out = 0;
            _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "No previously stored connection parameters. Saving new parameters now. Subrate factor & Continuation number initialized to 0.", (uint8_t *)out, 2u);
          }
          *(void *)uuid_string_t out = &v67;
          unint64_t v44 = sub_100509094((uint64_t **)(a1 + 528), &v67, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          __int16 v45 = 0;
          __int16 v46 = 0;
          *((_WORD *)v44 + 20) = v19;
          *((_WORD *)v44 + 21) = v63;
          *((_WORD *)v44 + 22) = v62;
          *(uint64_t *)((char *)v44 + 46) = 0;
          *((_WORD *)v44 + 27) = 0;
        }
        int v47 = *(void **)(a1 + 512);
        if (v47)
        {
          unint64_t v48 = v67;
          uint64_t v49 = a1 + 512;
          do
          {
            unint64_t v50 = v47[4];
            BOOL v51 = v50 >= v67;
            if (v50 >= v67) {
              int v52 = v47;
            }
            else {
              int v52 = v47 + 1;
            }
            if (v51) {
              uint64_t v49 = (uint64_t)v47;
            }
            int v47 = (void *)*v52;
          }
          while (*v52);
          if (v49 != a1 + 512 && v67 >= *(void *)(v49 + 32))
          {
            unint64_t v53 = *(void *)(v49 + 40);
            __int16 v60 = qword_100A19EF8;
            int v61 = *(unsigned __int16 *)(v49 + 48);
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uuid_string_t out = 67110144;
              *(_DWORD *)&_OWORD out[4] = WORD1(v53);
              *(_WORD *)&out[8] = 1024;
              *(_DWORD *)&out[10] = WORD2(v53);
              *(_WORD *)&out[14] = 1024;
              *(_DWORD *)&out[16] = (unsigned __int16)v53;
              *(_WORD *)&out[20] = 1024;
              *(_DWORD *)&out[22] = HIWORD(v53);
              *(_WORD *)&out[26] = 1024;
              *(_DWORD *)&out[28] = v61;
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "LE Link is now ready. Proceeding with sending connection subrating parameters: subrateMin:%d subrateMax:%d maxLatency:%d continuationNumber=%d supervisionTimeout=%d", (uint8_t *)out, 0x20u);
              unint64_t v48 = v67;
            }
            int v54 = sub_100685204(a1, v48, v53, v61);
            long long v55 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uuid_string_t out = 67109120;
              *(_DWORD *)&_OWORD out[4] = v54;
              _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Sent LE Connection Subrating Request with status: %d", (uint8_t *)out, 8u);
            }
          }
        }
      }
      else
      {
        __int16 v45 = 0;
        __int16 v46 = 0;
      }
      v68[0] = _NSConcreteStackBlock;
      v68[1] = 3321888768;
      v68[2] = sub_10069CEC8;
      v68[3] = &unk_1009BDD38;
      uuid_copy(v75, uu);
      int v69 = 0;
      __int16 v70 = v19;
      __int16 v71 = v63;
      __int16 v72 = v62;
      __int16 v73 = v45;
      __int16 v74 = v46;
      sub_10067762C((os_unfair_lock_s *)a1, v68);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      sub_100791BE8();
    }
    if (a4)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      unint64_t v56 = off_1009F7ED8;
      uint64_t v57 = sub_100031234(uu);
      sub_10004191C(v64, "requiresCTOFix");
      sub_1006BC69C((uint64_t)v56, v57, (unsigned __int8 *)v64);
      if (v65 < 0) {
        operator delete(v64[0]);
      }
    }
    sub_10001B8AC(buf);
  }
  return sub_10003AFB4((uint64_t)v66);
}

void sub_10069CD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
}

uint64_t sub_10069CE50(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v5 = 0;
  uint64_t result = sub_1006856B8(a1, a2, &v5);
  if (result)
  {
    char v4 = 0;
    uint64_t v3 = sub_10003FB34();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, void, char *, uint64_t))(*(void *)v3 + 1760))(v3, *v5, 1, 0, &v4, 33);
  }
  return result;
}

void sub_10069CEC8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const unsigned __int8 *)(a1 + 46);
  sub_100031234((const unsigned __int8 *)(a1 + 46));
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (**(void (***)(uint64_t))a2)(a2);

  sub_100031234(v3);
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t))(*(void *)a2 + 32))(a2);
}

void sub_10069CFAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_10069CFC4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10069CFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  BOOL v16 = *(const unsigned __int8 **)(a1 + 384);
  if (v16 != (const unsigned __int8 *)(a1 + 392))
  {
    while (*((void *)v16 + 6) != a2)
    {
      unsigned int v17 = (unsigned __int8 *)*((void *)v16 + 1);
      if (v17)
      {
        do
        {
          unint64_t v18 = (const unsigned __int8 **)v17;
          unsigned int v17 = *(unsigned __int8 **)v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          unint64_t v18 = (const unsigned __int8 **)*((void *)v16 + 2);
          BOOL v19 = *v18 == v16;
          BOOL v16 = (const unsigned __int8 *)v18;
        }
        while (!v19);
      }
      BOOL v16 = (const unsigned __int8 *)v18;
      if (v18 == (const unsigned __int8 **)(a1 + 392)) {
        goto LABEL_11;
      }
    }
    uuid_copy(uu, v16 + 32);
  }
LABEL_11:
  if (uuid_is_null(uu) && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_FAULT)) {
    sub_100791C70();
  }
  if (!uuid_is_null(uu))
  {
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3321888768;
    v22[2] = sub_10069D1BC;
    v22[3] = &unk_1009BDD68;
    void v22[4] = a8;
    uuid_copy(v24, uu);
    v22[5] = a3;
    void v22[6] = a4;
    v22[7] = a5;
    v22[8] = a6;
    int v23 = a7;
    sub_10067762C((os_unfair_lock_s *)a1, v22);
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_10069D198(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10069D1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  sub_100031234((const unsigned __int8 *)(a1 + 76));
  id v4 = (id)objc_claimAutoreleasedReturnValue();
  (*(void (**)(uint64_t, uint64_t))(*(void *)a2 + 40))(a2, v3);
}

void sub_10069D254(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10069D268(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_10069D278(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 120);
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "All devices have been disconnected", v4, 2u);
  }
  *(unsigned char *)(a1 + 1008) = 0;
  sub_1002B818C((pthread_cond_t *)(a1 + 960));
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10069D308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10069D31C(uint64_t a1)
{
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, a1 + 120);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  uint64_t v2 = sub_10004034C(a1);
  id v3 = [v2 countByEnumeratingWithState:&v29 objects:v42 count:16];
  if (v3)
  {
    uint64_t v22 = *(void *)v30;
    uint64_t v4 = a1 + 384;
    uint64_t v5 = a1 + 392;
    BOOL v21 = v2;
LABEL_3:
    uint64_t v6 = 0;
    while (1)
    {
      if (*(void *)v30 != v22) {
        objc_enumerationMutation(v2);
      }
      uint64_t v7 = *(void *)(*((void *)&v29 + 1) + 8 * v6);
      sub_1000305AC(buf, v7);
      uint64_t v8 = sub_1000308C0(v4, buf);
      if (v5 == v8) {
        break;
      }
      uint64_t v9 = *(void *)(v8 + 48);
      char v28 = 0;
      sub_10001B8E0(&v28);
      BOOL v10 = sub_100197770(v9);
      unsigned __int16 v27 = 0;
      sub_100225DB8(v9, &v27);
      int v11 = sub_10022602C(v9);
      sub_10001B910(&v28);
      if (v10)
      {
        int v12 = v27;
        if (v27 >= 0x308u) {
          double v13 = 0.35;
        }
        else {
          double v13 = 0.75;
        }
        unsigned int v14 = (int)(v13 * (double)(10 * v11) / ((double)v27 * 1.25));
        BOOL v15 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 138544130;
          uint64_t v35 = v7;
          __int16 v36 = 1024;
          unsigned int v37 = v14;
          __int16 v38 = 1024;
          int v39 = v12;
          __int16 v40 = 1024;
          int v41 = v11;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "setVoicePrioritizationThreshold: setting LE device \"%{public}@\" connection threshold to %d events with interval %d, LSTO %d", buf, 0x1Eu);
        }
        uint64_t v2 = v21;
        uint64_t v16 = sub_10003FB34();
        if (v14 >= 0xFF) {
          uint64_t v17 = 255;
        }
        else {
          uint64_t v17 = v14;
        }
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v16 + 1064))(v16, v9, v17))
        {
          unint64_t v18 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
            sub_100791CD8(&v25, v26, v18);
          }
        }
      }
      else
      {
        BOOL v19 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
          sub_100791D18(&v23, v24, v19);
        }
      }
      sub_10001B8AC(&v28);
      if (v3 == (id)++v6)
      {
        id v3 = [v2 countByEnumeratingWithState:&v29 objects:v42 count:16];
        if (v3) {
          goto LABEL_3;
        }
        break;
      }
    }
  }

  return sub_10003AFB4((uint64_t)v33);
}

void sub_10069D630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_10003AFB4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

uint64_t sub_10069D688(uint64_t result, unsigned __int8 *a2, int a3, int a4, uint64_t a5, __int16 a6, unsigned int a7, float a8, float a9, float a10)
{
  if (a8 != 0.0)
  {
    unsigned int v10 = a7;
    if (a10 != 0.0 && a7 != 0)
    {
      uint64_t v20 = result;
      v65[0] = 0;
      v65[1] = 0;
      sub_10003AED0((uint64_t)v65, result + 120);
      *(void *)int buf = a2;
      unsigned int v21 = *((unsigned __int16 *)sub_1006AB788((uint64_t **)(v20 + 840), a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf)+ 29);
      uint64_t v22 = sub_1000308C0(v20 + 384, a2);
      if (v20 + 392 != v22)
      {
        uint64_t v52 = *(void *)(v22 + 48);
        if (v20 + 848 == sub_1006AA790(v20 + 840, a2)) {
          unsigned int v21 = 0;
        }
        *(void *)int buf = a2;
        uint8_t v23 = sub_1006AB788((uint64_t **)(v20 + 840), a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
        *(uint64_t *)((char *)v23 + 44) = 0x5010100000002;
        *((_WORD *)v23 + 26) = (int)a9;
        *((_WORD *)v23 + 27) = a3;
        *((_WORD *)v23 + 28) = a4;
        *((_WORD *)v23 + 29) = a5;
        *((_WORD *)v23 + 30) = a6;
        *((_WORD *)v23 + 31) = v10;
        *((float *)v23 + 16) = a8;
        *((float *)v23 + 17) = a9;
        *((float *)v23 + 18) = a10;
        *((_DWORD *)v23 + 19) = 0;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        __int16 v24 = off_1009F7ED8;
        uint8_t v25 = sub_100031234(a2);
        sub_10004191C(v63, "A2051");
        if (sub_100030A04((uint64_t)v24, v25, (uint64_t)v63))
        {
          int v26 = 1;
        }
        else
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
          }
          unsigned __int16 v27 = off_1009F7ED8;
          BOOL v51 = sub_100031234(a2);
          sub_10004191C(v61, "A1603");
          if (sub_100030A04((uint64_t)v27, v51, (uint64_t)v61))
          {
            int v26 = 1;
          }
          else
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
            }
            char v28 = off_1009F7ED8;
            unint64_t v50 = sub_100031234(a2);
            sub_10004191C(v59, "A3085");
            if (sub_100030A04((uint64_t)v28, v50, (uint64_t)v59))
            {
              int v26 = 1;
            }
            else
            {
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
              }
              long long v29 = off_1009F7ED8;
              long long v30 = sub_100031234(a2);
              sub_10004191C(__p, "A2538");
              int v26 = sub_100030A04((uint64_t)v29, v30, (uint64_t)__p);
              if (v58 < 0) {
                operator delete(__p[0]);
              }
            }
            if (v60 < 0) {
              operator delete(v59[0]);
            }
          }
          if (v62 < 0) {
            operator delete(v61[0]);
          }
        }
        if (v64 < 0) {
          operator delete(v63[0]);
        }

        if (v26 && v21 != a5)
        {
          uint64_t v31 = sub_10003FB34();
          long long v32 = sub_100031234(a2);
          unsigned __int8 v33 = v21 + 2;
          if (v21 <= 5) {
            unsigned __int8 v33 = 6;
          }
          (*(void (**)(uint64_t, void *, void))(*(void *)v31 + 1000))(v31, v32, v33);
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        unint64_t v34 = off_1009F7ED8;
        uint64_t v35 = sub_100031234(a2);
        sub_10004191C(v55, "BluetoothTVRemote");
        int v36 = sub_100030A04((uint64_t)v34, v35, (uint64_t)v55);
        if (v56 < 0) {
          operator delete(v55[0]);
        }

        if (v36)
        {
          a4 = 6;
          a3 = 6;
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        unsigned int v37 = off_1009F7ED8;
        __int16 v38 = sub_100031234(a2);
        sub_10004191C(v53, "requiresCTOFix");
        int v39 = sub_100030A04((uint64_t)v37, v38, (uint64_t)v53);
        if (v54 < 0) {
          operator delete(v53[0]);
        }

        if (v39) {
          unsigned int v10 = 3000;
        }
        __int16 v40 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 67110400;
          *(_DWORD *)&uint8_t buf[4] = (int)a8;
          __int16 v67 = 1024;
          int v68 = (int)a10;
          __int16 v69 = 1024;
          int v70 = a3;
          __int16 v71 = 1024;
          int v72 = a4;
          __int16 v73 = 1024;
          int v74 = a5;
          __int16 v75 = 1024;
          unsigned int v76 = v10;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Got a profile request to update parameters to %dms->%dms, %d min CE length, %d max CE length, %d latency, and %d timeout", buf, 0x26u);
        }
        buf[0] = 0;
        sub_10001B8E0(buf);
        uint64_t v41 = v52;
        float v42 = (double)v10 / 10.0;
        LODWORD(v43) = vcvtps_s32_f32(v42);
        int v44 = sub_100228C7C(v52, (int)(a8 / 1.25), (int)(a9 / 1.25), a5, v43, a3, a4);
        sub_10001B910(buf);
        if (v44 && os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
        {
          sub_100791D58();
          uint64_t v41 = v52;
        }
        uint64_t v45 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v45 + 1056))(v45, v41, 1, 0);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        __int16 v46 = off_1009F7ED8;
        int v47 = sub_100031234(a2);
        sub_1006C1C60((uint64_t)v46, v47, 1);

        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        unint64_t v48 = off_1009F7ED8;
        uint64_t v49 = sub_100031234(a2);
        sub_1006C1D80((uint64_t)v48, v49, (int)a9);

        sub_10001B8AC(buf);
      }
      return sub_10003AFB4((uint64_t)v65);
    }
  }
  return result;
}

void sub_10069DD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49,char a50)
{
  if (a31 < 0) {
    operator delete(__p);
  }

  if (a37 < 0) {
    operator delete(a32);
  }

  if (a43 < 0) {
    operator delete(a38);
  }

  if (a49 < 0) {
    operator delete(a44);
  }

  sub_10003AFB4((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_10069DEB4(uint64_t a1, unsigned __int8 *a2, _WORD *a3, _WORD *a4, _WORD *a5, _WORD *a6, _WORD *a7)
{
  if (sub_1006854C8(a1, a2))
  {
    *(void *)uuid_string_t out = 0;
    if (sub_1006856B8(a1, a2, out))
    {
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_10021C88C(*(_WORD **)out, a3, a4, a5, a6, a7, 0, 0);
      sub_10001B910(__p);
      sub_10001B8AC(__p);
      return 0;
    }
    else
    {
      return 7;
    }
  }
  else
  {
    BOOL v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      memset(out, 0, 37);
      uuid_unparse_upper(a2, (char *)out);
      sub_10004191C(__p, (char *)out);
      if (v18 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)uuid_string_t out = 136446210;
      *(void *)&_OWORD out[4] = v16;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Device %{public}s is not ready, cannot get connection parameters", out, 0xCu);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    return 12;
  }
}

void sub_10069E048(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10069E064(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  return sub_10069E0E4((uint64_t)off_1009F7EB8, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 52), *(_WORD *)(a1 + 44), *(_WORD *)(a1 + 46), *(unsigned __int16 *)(a1 + 48), *(unsigned __int16 *)(a1 + 50), *(_DWORD *)(a1 + 40), *(_WORD *)(a1 + 53), HIBYTE(*(_WORD *)(a1 + 53)));
}

uint64_t sub_10069E0E4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int16 a4, unsigned __int16 a5, unsigned int a6, int a7, unsigned int a8, unsigned __int8 a9, unsigned __int8 a10)
{
  unsigned __int16 v61 = a4;
  unsigned __int16 v60 = a5;
  char v59 = 0;
  unsigned __int16 v58 = 12;
  v57[0] = 0;
  v57[1] = 0;
  sub_10003AED0((uint64_t)v57, a1 + 120);
  memset(uu, 0, sizeof(uu));
  uuid_clear(uu);
  if (byte_100A14550)
  {
    int v14 = 1;
  }
  else
  {
    uint64_t v27 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(v55, "DisableConnectionParameterUpdates");
    (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v27 + 72))(v27, buf, v55, &v59);
    if (v56 < 0) {
      operator delete(v55[0]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(*(void **)buf);
    }
    if (v59)
    {
      char v28 = qword_100A19EF8;
      int v14 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Warning: Rejecting parameter updates due to override", buf, 2u);
        int v14 = 0;
      }
    }
    else
    {
      if (sub_10067F618(a1, a2, uu))
      {
        uint64_t v31 = sub_1006AA790(a1 + 840, uu);
        if (a1 + 848 == v31) {
          uint64_t v32 = 0;
        }
        else {
          uint64_t v32 = v31 + 44;
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
      float v42 = sub_100031234(uu);
      int v14 = sub_10069E888((uint64_t)v42, &v61, &v60, a6, a7, v32, &v58, a9, v42);
    }
  }
  if (sub_100685B10(a1, uu))
  {
    int v15 = 0;
LABEL_5:
    int v16 = 6;
LABEL_6:
    unsigned __int16 v58 = v16;
    goto LABEL_7;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  unsigned int v21 = off_1009F7ED8;
  uint64_t v22 = sub_100031234(uu);
  sub_10004191C(__p, "FastConnection");
  int v23 = sub_100030A04((uint64_t)v21, v22, (uint64_t)__p);
  if (v54 < 0) {
    operator delete(__p[0]);
  }

  if (v23)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    __int16 v24 = off_1009F7ED8;
    uint8_t v25 = sub_100031234(uu);
    sub_10004191C(v51, "A2051");
    if (sub_100030A04((uint64_t)v24, v25, (uint64_t)v51))
    {
      int v26 = 1;
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      unsigned __int8 v33 = off_1009F7ED8;
      unint64_t v34 = sub_100031234(uu);
      sub_10004191C(v49, "A2538");
      int v26 = sub_100030A04((uint64_t)v33, v34, (uint64_t)v49);
      if (v50 < 0) {
        operator delete(v49[0]);
      }
    }
    if (v52 < 0) {
      operator delete(v51[0]);
    }

    if (v26)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v35 = off_1009F7ED8;
      int v36 = sub_100031234(uu);
      int v15 = sub_1006C1E0C((uint64_t)v35, v36);

      if (v15)
      {
        unsigned __int16 v61 = v15;
        unsigned __int16 v60 = v15;
      }
    }
    else
    {
      int v15 = 0;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    int v39 = off_1009F7ED8;
    __int16 v40 = sub_100031234(uu);
    sub_10004191C(v47, "BluetoothTVRemote");
    int v41 = sub_100030A04((uint64_t)v39, v40, (uint64_t)v47);
    if (v48 < 0) {
      operator delete(v47[0]);
    }

    if (!v41)
    {
      int v16 = 4;
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  long long v29 = off_1009F7ED8;
  long long v30 = sub_100031234(uu);
  LODWORD(v29) = sub_1006BDD68((uint64_t)v29, v30);

  if (v29)
  {
    int v15 = 0;
    int v16 = 12;
    goto LABEL_6;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  unsigned int v37 = off_1009F7ED8;
  __int16 v38 = sub_100031234(uu);
  sub_10004191C(v45, "_HID_DEVICE_");
  sub_100030A04((uint64_t)v37, v38, (uint64_t)v45);
  if (v46 < 0) {
    operator delete(v45[0]);
  }

  int v15 = 0;
  int v16 = 2;
LABEL_7:
  uint64_t v17 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    char v18 = "Rejecting";
    if (v14) {
      char v18 = "Accepting";
    }
    *(_DWORD *)int buf = 136447746;
    *(void *)&uint8_t buf[4] = v18;
    __int16 v63 = 1024;
    int v64 = v61;
    __int16 v65 = 1024;
    int v66 = v60;
    __int16 v67 = 1024;
    unsigned int v68 = a6;
    __int16 v69 = 1024;
    int v70 = a7;
    __int16 v71 = 1024;
    int v72 = v58;
    __int16 v73 = 1024;
    int v74 = v15;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%{public}s following parameters: min=%u, max=%u, lat=%u, mul=%u, cel=%u, preferredLowLatencyInterval=%d", buf, 0x30u);
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  sub_1002260A4(a2, a3, v14, v61, v60, a6, a7, v16, v58, a8);
  BOOL v19 = sub_100031234(uu);
  sub_10068EA84((uint64_t)v19, v19, 4, a9 == 1, a10);

  sub_10001B8AC(buf);
  return sub_10003AFB4((uint64_t)v57);
}

void sub_10069E748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
}

uint64_t sub_10069E888(uint64_t a1, unsigned __int16 *a2, _WORD *a3, unsigned int a4, __int16 a5, uint64_t a6, _WORD *a7, int a8, void *a9)
{
  id v16 = a9;
  unsigned int v17 = *a2;
  if ((unsigned __int16)(v17 - 3201) > 0xF384u)
  {
    unsigned int v18 = (unsigned __int16)*a3;
    if ((unsigned __int16)(v18 - 3201) > 0xF384u)
    {
      if (v17 <= v18)
      {
        if (a4 < 0x1F5)
        {
          if ((unsigned __int16)(a5 - 3201) > 0xF388u)
          {
            float v19 = (double)v17 * 1.25;
            float v20 = (double)v18 * 1.25;
            if (!a6)
            {
              if (v19 < 15.0)
              {
                unsigned int v21 = qword_100A19EF8;
                BOOL v22 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
                if (a8)
                {
                  if (v22)
                  {
                    int v46 = 134218240;
                    *(double *)int v47 = v19;
                    *(_WORD *)&v47[8] = 1024;
                    *(_DWORD *)char v48 = 15;
                    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Remote side (central) wants a min interval (%.0f ms) smaller than %d ms.", (uint8_t *)&v46, 0x12u);
                  }
                }
                else
                {
                  if (v22)
                  {
                    int v46 = 134218240;
                    *(double *)int v47 = v19;
                    *(_WORD *)&v47[8] = 1024;
                    *(_DWORD *)char v48 = 15;
                    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Remote side (peripheral) wants a min interval (%.0f ms) smaller than %d ms. Scaling up", (uint8_t *)&v46, 0x12u);
                  }
                  *a2 = 12;
                  float v19 = 15.0;
                }
              }
              float v23 = 7.5;
              if (!a8) {
                float v23 = 15.0;
              }
              if ((v23 != v20 || v19 != v23) && (float)(v20 - v19) < 15.0)
              {
                int v26 = qword_100A19EF8;
                if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v46) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Intervals should be 15 ms apart - increasing the gap", (uint8_t *)&v46, 2u);
                }
                float v20 = v19 + 15.0;
                *a3 = (int)((float)(v19 + 15.0) / 1.25);
              }
            }
            if (v20 <= 2000.0)
            {
              if ((float)(v20 * (float)(int)(a4 + 1)) <= 6000.0)
              {
                if (a4 < 0x1F || a6)
                {
                  unsigned int v35 = (unsigned __int16)(10 * a5);
                  if (v35 >= 0x4651)
                  {
                    int v36 = qword_100A19EF8;
                    if (a8 != 1)
                    {
                      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
                        sub_100792128();
                      }
                      goto LABEL_60;
                    }
                    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
                    {
                      int v46 = 67109376;
                      *(_DWORD *)int v47 = v35;
                      *(_WORD *)&v47[4] = 1024;
                      *(_DWORD *)&v47[6] = 18000;
                      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Remote side (central) asks for a timeout (%u ms) of more than %d seconds.", (uint8_t *)&v46, 0xEu);
                    }
                  }
                  if ((float)(v20 * (float)(int)(3 * (a4 + 1))) <= (float)v35)
                  {
                    if (a6)
                    {
                      float v38 = *(float *)(a6 + 20);
                      if (v19 < v38)
                      {
                        int v39 = qword_100A19EF8;
                        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
                          sub_1007920A4(a2, v39, v40, v38);
                        }
                        goto LABEL_60;
                      }
                      float v43 = *(float *)(a6 + 24);
                      if (v19 <= v43)
                      {
                        int v44 = (int)(v43 / 1.25);
                        *a3 = v44;
                        uint64_t v45 = qword_100A19EF8;
                        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
                        {
                          int v46 = 67109120;
                          *(_DWORD *)int v47 = v44;
                          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_INFO, "Using %u as the max interval", (uint8_t *)&v46, 8u);
                        }
                      }
                      *a7 = *(_WORD *)(a6 + 12);
                    }
                    uint64_t v41 = 1;
                    goto LABEL_61;
                  }
                  unsigned int v37 = qword_100A19EF8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
                  {
                    int v46 = 67109632;
                    *(_DWORD *)int v47 = v35;
                    *(_WORD *)&v47[4] = 1024;
                    *(_DWORD *)&v47[6] = a4;
                    *(_WORD *)char v48 = 2048;
                    *(double *)&v48[2] = v20;
                    _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "Remote sides asks for a timeout (%u ms) / latency (%u) / maxInterval (%f ms) that would cause link timeouts under bad conditions - refusing", (uint8_t *)&v46, 0x18u);
                  }
                }
                else
                {
                  uint64_t v27 = qword_100A19EF8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
                    sub_100792030(v27, v28, v29, v30, v31, v32, v33, v34);
                  }
                }
              }
              else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
              {
                sub_100791FFC();
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
            {
              sub_100791FC8();
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
          {
            sub_100791F60();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
        {
          sub_100791EF8();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_100791E90();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
    {
      sub_100791E28();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
  {
    sub_100791DC0();
  }
LABEL_60:
  uint64_t v41 = 0;
LABEL_61:

  return v41;
}

void sub_10069EE64(uint64_t a1, int a2, unsigned int a3, unsigned int a4, void *a5)
{
  if (a2 == 2)
  {
    uint64_t v9 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = 2;
      *(_WORD *)uint64_t v27 = 2048;
      *(double *)&v27[2] = (float)((float)a3 * 1.25);
      __int16 v28 = 2048;
      double v29 = (float)((float)a4 * 1.25);
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "autoReconnect caused resuming, state=%d, scan=%g/%g (ms)", buf, 0x1Cu);
    }
    int v12 = (void *)*a5;
    unsigned int v10 = a5 + 1;
    int v11 = v12;
    if (v12 != v10)
    {
      do
      {
        unint64_t v13 = v11[4];
        *(void *)int buf = 0;
        *(void *)uint64_t v27 = 0;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        sub_100014B58((uint64_t)off_1009F7ED8, v13, 0, 1u, 0, 0, buf);
        if (uuid_is_null(buf))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
            sub_1007921A4(&v24, v13, &v25);
          }
        }
        else if (a1 + 392 == sub_1000308C0(a1 + 384, buf))
        {
          sub_100680AB4(a1, buf, v13);
        }
        else
        {
          unint64_t v17 = sub_1002284B8(v13);
          unint64_t v18 = (unint64_t)v17 << 48;
          if (BYTE6(v13) == 3) {
            unint64_t v18 = 0x1000000000000;
          }
          if (BYTE6(v13) == 2) {
            unint64_t v19 = 0;
          }
          else {
            unint64_t v19 = v18;
          }
          int v20 = sub_10068CCD0(v17, v17 & 0xFF000000 | (unint64_t)BYTE6(v17) | ((unint64_t)BYTE2(v17) << 32) & 0xFFFF00FFFFFFFFFFLL | ((unint64_t)BYTE1(v17) << 40) | (v17 >> 16) & 0xFF0000 | HIDWORD(v17) & 0xFF00 | v19);
          unsigned int v21 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)BOOL v22 = 67109120;
            int v23 = v20;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "autoReconnect to a device already connected, removeAddressFromBTController returned %d", v22, 8u);
          }
        }
        int v14 = (void *)v11[1];
        if (v14)
        {
          do
          {
            int v15 = v14;
            int v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            int v15 = (void *)v11[2];
            BOOL v16 = *v15 == (void)v11;
            int v11 = v15;
          }
          while (!v16);
        }
        int v11 = v15;
      }
      while (v15 != v10);
    }
    if (*(_DWORD *)(a1 + 864) == 4) {
      sub_10069F19C(a1);
    }
  }
  else if (a2 == 1)
  {
    sub_10067C934(a1, 4u);
  }
}

uint64_t sub_10069F19C(uint64_t a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(int *)(a1 + 864);
    if (v3 > 4) {
      uint64_t v4 = "UNKNOWN";
    }
    else {
      uint64_t v4 = (&off_1009BE3A8)[v3];
    }
    uint64_t v5 = *(int *)(a1 + 928);
    if (v5 > 3) {
      uint64_t v6 = "UNKNOWN";
    }
    else {
      uint64_t v6 = (&off_1009BE388)[v5];
    }
    int v15 = 136446466;
    BOOL v16 = v4;
    __int16 v17 = 2082;
    unint64_t v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "resumeConnectionManager called, LeConnectionState=%{public}s LeConnectionManagerState=%{public}s", (uint8_t *)&v15, 0x16u);
  }
  unsigned int v7 = *(_DWORD *)(a1 + 928);
  if (v7 < 2) {
    goto LABEL_12;
  }
  if (v7 != 2)
  {
    if (v7 == 3)
    {
LABEL_12:
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_10079220C();
      }
      return 12;
    }
    return 0;
  }
  uint64_t v9 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Resuming LE Connection Manager", (uint8_t *)&v15, 2u);
  }
  sub_10067CCF0((os_unfair_lock_s *)a1, 3u);
  int v10 = *(_DWORD *)(a1 + 864);
  if ((v10 - 1) < 3)
  {
    int v11 = qword_100A19EF8;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "We're doing something else right now, will resume when idle", (uint8_t *)&v15, 2u);
    return 0;
  }
  if (v10 != 4)
  {
    if (!v10)
    {
      unint64_t v13 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v15) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "We're idle, lets move on", (uint8_t *)&v15, 2u);
      }
      sub_10067CCF0((os_unfair_lock_s *)a1, 0);
      sub_10068BF34((id *)a1);
      sub_10068A59C(a1);
    }
    return 0;
  }
  int v14 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "We're auto-reconnecting, lets move on", (uint8_t *)&v15, 2u);
  }
  sub_10067CCF0((os_unfair_lock_s *)a1, 0);
  sub_10067C934(a1, *(void *)(a1 + 352) != 0);
  if ([*(id *)(a1 + 768) count] || (uint64_t result = (uint64_t)objc_msgSend(*(id *)(a1 + 776), "count")) != 0)
  {
    sub_10067C23C(a1, 0);
    return 0;
  }
  return result;
}

void sub_10069F468(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  int v3 = *(unsigned __int8 *)(a1 + 60);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 56);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 58);
  sub_1006AB8B4(v6, a1 + 32);
  sub_10069EE64((uint64_t)v2, v3, v4, v5, v6);
  sub_1000486F0((uint64_t)v6, (void *)v6[1]);
}

void sub_10069F50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t *sub_10069F524(uint64_t a1, uint64_t a2)
{
  return sub_1006AB8B4((uint64_t *)(a1 + 32), a2 + 32);
}

void sub_10069F530(uint64_t a1)
{
}

double sub_10069F540(uint64_t a1, int a2, unsigned __int16 *a3, uint64_t a4)
{
  uint64_t v8 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v11[0]) = 67109120;
    HIDWORD(v11[0]) = a2;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "handleCsReadRemoteFAETableCallback status=%{bluetooth:OI_STATUS}u", (uint8_t *)v11, 8u);
  }
  v11[0] = 0;
  v11[1] = 0;
  uuid_clear((unsigned __int8 *)v11);
  if (sub_10067F618(a1, (uint64_t)a3, (unsigned __int8 *)v11))
  {
    uint64_t v10 = sub_1000308C0(a1 + 1408, (unsigned __int8 *)v11);
    if (a1 + 1416 != v10) {
      *(void *)&double result = sub_10026DFA0(*(void *)(v10 + 48), *a3, a4).n128_u64[0];
    }
  }
  return result;
}

uint64_t sub_10069F648(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v8[0]) = 67109120;
    HIDWORD(v8[0]) = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleCsReadRemoteFAETableCallback status=%{bluetooth:OI_STATUS}u", (uint8_t *)v8, 8u);
  }
  v8[0] = 0;
  v8[1] = 0;
  uuid_clear((unsigned __int8 *)v8);
  uint64_t result = sub_10067F618(a1, a3, (unsigned __int8 *)v8);
  if (result)
  {
    uint64_t result = sub_1000308C0(a1 + 1408, (unsigned __int8 *)v8);
    if (a1 + 1416 != result) {
      return sub_10026DFC8(*(void *)(result + 48));
    }
  }
  return result;
}

void sub_10069F740(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleCsProcedureEnableCallback status=%{bluetooth:OI_STATUS}u", buf, 8u);
  }
  *(void *)int buf = 0;
  uint64_t v9 = 0;
  uuid_clear(buf);
  if (sub_10067F618(a1, a3, buf))
  {
    uint64_t v7 = sub_1000308C0(a1 + 1408, buf);
    if (a1 + 1416 != v7) {
      sub_10026DFD4(*(void *)(v7 + 48), a2);
    }
  }
}

void sub_10069F89C(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, unsigned __int8 a10, size_t __n, const void *a12, unsigned __int8 *a13, const void *a14)
{
  BOOL v22 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a6;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "handleCsSubeventResultCallback status=%{bluetooth:OI_STATUS}u", buf, 8u);
  }
  *(void *)int buf = 0;
  uint64_t v25 = 0;
  uuid_clear(buf);
  if (sub_10067F618(a1, a2, buf))
  {
    uint64_t v23 = sub_1000308C0(a1 + 1408, buf);
    if (a1 + 1416 != v23) {
      sub_10026E078(*(void *)(v23 + 48), a2, a3, a4, a5, a6, a7, a8, a9, a10, __n, a12, a13, a14);
    }
  }
}

void sub_10069F9F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, unsigned __int8 *a10, const void *a11)
{
  unint64_t v19 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a4;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "handleCsSubeventResultCallback status=%{bluetooth:OI_STATUS}u", buf, 8u);
  }
  *(void *)int buf = 0;
  uint64_t v22 = 0;
  uuid_clear(buf);
  if (sub_10067F618(a1, a2, buf))
  {
    uint64_t v20 = sub_1000308C0(a1 + 1408, buf);
    if (a1 + 1416 != v20) {
      sub_10026E2B4(*(void *)(v20 + 48), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11);
    }
  }
}

double sub_10069FB44(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  int v3 = *(_DWORD *)(a1 + 48);
  unsigned int v4 = *(unsigned __int16 **)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);

  return sub_10069F540((uint64_t)v2, v3, v4, v5);
}

uint64_t sub_10069FBAC(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  int v3 = *(_DWORD *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);

  return sub_10069F648((uint64_t)v2, v3, v4);
}

void sub_10069FC14(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  sub_10069F740((uint64_t)off_1009F7EB8, *(_DWORD *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_10069FC94(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  sub_10069F89C((uint64_t)off_1009F7EB8, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 73), *(unsigned __int8 *)(a1 + 74), *(unsigned __int8 *)(a1 + 75), *(unsigned __int8 *)(a1 + 76), *(unsigned __int8 *)(a1 + 77), *(_WORD *)(a1 + 78), HIBYTE(*(_WORD *)(a1 + 78)), *(void *)(a1 + 40), *(const void **)(a1 + 48), *(unsigned __int8 **)(a1 + 56), *(const void **)(a1 + 64));
}

void sub_10069FD24(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  sub_10069F9F8((uint64_t)off_1009F7EB8, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 72), *(unsigned __int8 *)(a1 + 73), *(unsigned __int8 *)(a1 + 74), *(unsigned __int8 *)(a1 + 75), *(unsigned __int8 *)(a1 + 76), *(void *)(a1 + 40), *(const void **)(a1 + 48), *(unsigned __int8 **)(a1 + 56), *(const void **)(a1 + 64));
}

void sub_10069FDA8(void *a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[146];
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)int v26 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Disconnection History: %d entries", buf, 8u);
  }
  if (a1[146])
  {
    double Current = CFAbsoluteTimeGetCurrent();
    id v5 = objc_alloc_init((Class)NSDateFormatter);
    [v5 setDateFormat:@"yyyy-MM-dd H:mm:ss"];
    uint64_t v6 = (void *)a1[144];
    unsigned int v21 = a1 + 145;
    if (v6 != a1 + 145)
    {
      do
      {
        uint64_t v22 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        sub_1006AB90C(&v22, (uint64_t)(v6 + 7));
        uint64_t v7 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = v6 + 4;
          if (*((char *)v6 + 55) < 0) {
            uint64_t v8 = (void *)*v8;
          }
          *(_DWORD *)int buf = 136446210;
          *(void *)int v26 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:", buf, 0xCu);
        }
        for (uint64_t i = v23; (uint64_t *)i != &v22; uint64_t i = *(void *)(i + 8))
        {
          double v10 = *(double *)(i + 16);
          int v11 = +[NSDate dateWithTimeIntervalSinceReferenceDate:v10];
          BOOL v12 = [v5 stringFromDate:v11];
          LODWORD(v13) = llround((v10 - floor(v10)) * 1000.0);
          int v14 = +[NSString stringWithFormat:@"%@.%000d", v12, v13];
          int v15 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            int v16 = *(_DWORD *)(i + 24);
            id v17 = [v14 UTF8String];
            *(_DWORD *)int buf = 67109890;
            *(_DWORD *)int v26 = v16;
            *(_WORD *)&v26[4] = 2082;
            *(void *)&v26[6] = v17;
            __int16 v27 = 2048;
            double v28 = v10;
            __int16 v29 = 2048;
            double v30 = Current - v10;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:       reason %d time:%{public}s %.3f secs(%-12.2f secs ago)", buf, 0x26u);
          }
        }
        sub_1002B308C(&v22);
        unint64_t v18 = (void *)v6[1];
        if (v18)
        {
          do
          {
            unint64_t v19 = v18;
            unint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            unint64_t v19 = (void *)v6[2];
            BOOL v20 = *v19 == (void)v6;
            uint64_t v6 = v19;
          }
          while (!v20);
        }
        uint64_t v6 = v19;
      }
      while (v19 != v21);
    }
  }
}

void sub_1006A00A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006A00F0(uint64_t a1, const void **a2)
{
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
    sub_100792240();
  }
  uint64_t v4 = (uint64_t *)sub_10003156C(a1 + 1152, a2);
  if ((uint64_t *)(a1 + 1160) != v4)
  {
    id v5 = v4;
    sub_10004D3B8((uint64_t **)(a1 + 1152), v4);
    sub_10030BF04((uint64_t)(v5 + 4));
    operator delete(v5);
  }
}

double sub_1006A0184(uint64_t a1, const void **a2)
{
  uint64_t v3 = sub_10003156C(a1 + 1152, a2);
  double v4 = 0.0;
  if (a1 + 1160 != v3)
  {
    v6[0] = 0;
    v6[1] = 0;
    uint64_t v7 = 0;
    sub_1006AB90C(v6, v3 + 56);
    if (v7) {
      double v4 = *(double *)(v6[0] + 16);
    }
    sub_1002B308C(v6);
  }
  return v4;
}

void sub_1006A01FC(void *a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[150];
    *(_DWORD *)int buf = 67109120;
    LODWORD(v13) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: LeConnectionRSSIThresholdState History: %d entries", buf, 8u);
  }
  if (a1[150])
  {
    double v4 = (void *)a1[148];
    id v5 = a1 + 149;
    if (v4 != a1 + 149)
    {
      uint64_t v6 = qword_100A19EF8;
      do
      {
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v7 = v4 + 4;
          if (*((char *)v4 + 55) < 0) {
            uint64_t v7 = (void *)*v7;
          }
          int v8 = *((_DWORD *)v4 + 14);
          *(_DWORD *)int buf = 136446466;
          uint64_t v13 = v7;
          __int16 v14 = 1024;
          int v15 = v8;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:%d", buf, 0x12u);
          uint64_t v6 = qword_100A19EF8;
        }
        uint64_t v9 = (void *)v4[1];
        if (v9)
        {
          do
          {
            double v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            double v10 = (void *)v4[2];
            BOOL v11 = *v10 == (void)v4;
            double v4 = v10;
          }
          while (!v11);
        }
        double v4 = v10;
      }
      while (v10 != v5);
    }
  }
}

uint64_t *sub_1006A0388(uint64_t a1, long long *a2, int a3)
{
  if (*(void *)(a1 + 1200) >= 0x21uLL) {
    sub_100696240(a1);
  }
  uint64_t v7 = a2;
  uint64_t result = sub_1006ABCAC((uint64_t **)(a1 + 1184), (const void **)a2, (uint64_t)&unk_1007BE9D0, &v7);
  *((_DWORD *)result + 14) = a3;
  return result;
}

uint64_t sub_1006A03F8(uint64_t a1, const void **a2, double a3)
{
  double Current = CFAbsoluteTimeGetCurrent();
  if (Current <= a3) {
    double v7 = 0.0;
  }
  else {
    double v7 = Current - a3;
  }
  uint64_t v8 = sub_10003156C(a1 + 1152, a2);
  if (a1 + 1160 == v8)
  {
    unsigned __int16 v10 = 0;
  }
  else
  {
    memset(v14, 0, sizeof(v14));
    sub_1006AB90C(v14, v8 + 56);
    uint64_t v9 = v14[1];
    if ((void *)v14[1] == v14)
    {
      unsigned __int16 v10 = 0;
    }
    else
    {
      unsigned __int16 v10 = 0;
      do
      {
        BOOL v11 = (*(_DWORD *)(v9 + 24) - 708) > 0x36
           || ((1 << (*(unsigned char *)(v9 + 24) + 60)) & 0x40000004000001) == 0;
        if (!v11 && *(double *)(v9 + 16) > v7) {
          ++v10;
        }
        uint64_t v9 = *(void *)(v9 + 8);
      }
      while ((void *)v9 != v14);
    }
    sub_1002B308C(v14);
  }
  BOOL v12 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_INFO))
  {
    if (*((char *)a2 + 23) < 0) {
      a2 = (const void **)*a2;
    }
    LODWORD(v14[0]) = 136446722;
    *(void *)((char *)v14 + 4) = a2;
    WORD2(v14[1]) = 2048;
    *(double *)((char *)&v14[1] + 6) = a3;
    HIWORD(v14[2]) = 1024;
    int v15 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "getNumDisconnectionsBySignalQuality for %{public}s over time window %f count %d", (uint8_t *)v14, 0x1Cu);
  }
  return v10;
}

uint64_t sub_1006A0598(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 352))(v4);
  if (result) {
    return (a2 == 16 || a2 == 267 || a2 == 23) && *(unsigned char *)(a1 + 1536) == 0;
  }
  return result;
}

uint64_t sub_1006A061C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v43[0] = 0;
  v43[1] = 0;
  uint64_t v44 = 0;
  id v4 = [v3 UUIDString];
  sub_10004191C(v43, (char *)[v4 UTF8String]);

  unsigned int v42 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  unsigned int v5 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v3);
  unsigned int v42 = v5;
  unsigned int v6 = *(unsigned __int16 *)(a1 + 1208);
  int v7 = *(_DWORD *)(a1 + 1212);
  unsigned int v8 = *(unsigned __int16 *)(a1 + 1216);
  int v9 = *(_DWORD *)(a1 + 1220);
  uint64_t v10 = *(void *)(a1 + 1232);
  if (v10)
  {
    uint64_t v11 = a1 + 1232;
    do
    {
      unsigned int v12 = *(_DWORD *)(v10 + 28);
      BOOL v13 = v12 >= v5;
      if (v12 >= v5) {
        __int16 v14 = (uint64_t *)v10;
      }
      else {
        __int16 v14 = (uint64_t *)(v10 + 8);
      }
      if (v13) {
        uint64_t v11 = v10;
      }
      uint64_t v10 = *v14;
    }
    while (*v14);
    if (v11 != a1 + 1232 && v5 >= *(_DWORD *)(v11 + 28))
    {
      uint64_t v45 = &v42;
      unsigned int v6 = *((unsigned __int16 *)sub_1006A994C((uint64_t **)(a1 + 1224), &v42, (uint64_t)&unk_1007BE9D0, &v45) + 16);
    }
  }
  uint64_t v15 = *(void *)(a1 + 1256);
  if (v15)
  {
    uint64_t v16 = a1 + 1256;
    do
    {
      unsigned int v17 = *(_DWORD *)(v15 + 28);
      BOOL v18 = v17 >= v42;
      if (v17 >= v42) {
        unint64_t v19 = (uint64_t *)v15;
      }
      else {
        unint64_t v19 = (uint64_t *)(v15 + 8);
      }
      if (v18) {
        uint64_t v16 = v15;
      }
      uint64_t v15 = *v19;
    }
    while (*v19);
    if (v16 != a1 + 1256 && v42 >= *(_DWORD *)(v16 + 28))
    {
      uint64_t v45 = &v42;
      int v7 = *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1248), &v42, (uint64_t)&unk_1007BE9D0, &v45) + 8);
    }
  }
  uint64_t v20 = *(void *)(a1 + 1280);
  if (v20)
  {
    uint64_t v21 = a1 + 1280;
    do
    {
      unsigned int v22 = *(_DWORD *)(v20 + 28);
      BOOL v23 = v22 >= v42;
      if (v22 >= v42) {
        uint64_t v24 = (uint64_t *)v20;
      }
      else {
        uint64_t v24 = (uint64_t *)(v20 + 8);
      }
      if (v23) {
        uint64_t v21 = v20;
      }
      uint64_t v20 = *v24;
    }
    while (*v24);
    if (v21 != a1 + 1280 && v42 >= *(_DWORD *)(v21 + 28))
    {
      uint64_t v45 = &v42;
      unsigned int v8 = *((unsigned __int16 *)sub_1006A994C((uint64_t **)(a1 + 1272), &v42, (uint64_t)&unk_1007BE9D0, &v45) + 16);
    }
  }
  uint64_t v25 = *(void *)(a1 + 1304);
  if (v25)
  {
    uint64_t v26 = a1 + 1304;
    do
    {
      unsigned int v27 = *(_DWORD *)(v25 + 28);
      BOOL v28 = v27 >= v42;
      if (v27 >= v42) {
        __int16 v29 = (uint64_t *)v25;
      }
      else {
        __int16 v29 = (uint64_t *)(v25 + 8);
      }
      if (v28) {
        uint64_t v26 = v25;
      }
      uint64_t v25 = *v29;
    }
    while (*v29);
    if (v26 != a1 + 1304 && v42 >= *(_DWORD *)(v26 + 28))
    {
      uint64_t v45 = &v42;
      int v9 = *((_DWORD *)sub_100360348((uint64_t **)(a1 + 1296), &v42, (uint64_t)&unk_1007BE9D0, &v45) + 8);
    }
  }
  if (SHIBYTE(v44) < 0)
  {
    sub_10003B098(__p, v43[0], (unint64_t)v43[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v43;
    uint64_t v41 = v44;
  }
  uint64_t v30 = sub_10003156C(a1 + 1184, (const void **)__p);
  if (a1 + 1192 == v30) {
    int v31 = 2;
  }
  else {
    int v31 = *(_DWORD *)(v30 + 56);
  }
  if (SHIBYTE(v41) < 0)
  {
    operator delete(__p[0]);
    if (v31) {
      goto LABEL_59;
    }
  }
  else if (v31)
  {
LABEL_59:
    if (v31 == 1)
    {
      if (SHIBYTE(v44) < 0)
      {
        sub_10003B098(v36, v43[0], (unint64_t)v43[1]);
      }
      else
      {
        *(_OWORD *)int v36 = *(_OWORD *)v43;
        uint64_t v37 = v44;
      }
      unsigned int v33 = sub_1006A03F8(a1, (const void **)v36, (double)(unsigned __int16)v9);
      if (SHIBYTE(v37) < 0) {
        operator delete(v36[0]);
      }
      if (v33 > v8)
      {
        uint64_t v32 = sub_1006A0598(a1, v42) ^ 1;
        goto LABEL_79;
      }
      goto LABEL_78;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_1007922B0();
    }
    uint64_t v32 = 2;
    goto LABEL_79;
  }
  if (SHIBYTE(v44) < 0)
  {
    sub_10003B098(__dst, v43[0], (unint64_t)v43[1]);
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)v43;
    uint64_t v39 = v44;
  }
  unsigned int v34 = sub_1006A03F8(a1, (const void **)__dst, (double)(unsigned __int16)v7);
  if (SHIBYTE(v39) < 0) {
    operator delete(__dst[0]);
  }
  if (v34 < v6 || (sub_1006A0598(a1, v42) & 1) != 0)
  {
LABEL_78:
    uint64_t v32 = 0;
    goto LABEL_79;
  }
  uint64_t v32 = 1;
LABEL_79:
  if (SHIBYTE(v44) < 0) {
    operator delete(v43[0]);
  }

  return v32;
}

void sub_1006A0A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t *sub_1006A0AB4(uint64_t a1, const void **a2)
{
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
    sub_100792320();
  }
  uint64_t result = (uint64_t *)sub_10003156C(a1 + 1184, a2);
  if ((uint64_t *)(a1 + 1192) != result) {
    return sub_100006AC4((uint64_t **)(a1 + 1184), (uint64_t)result);
  }
  return result;
}

void sub_1006A0B34(uint64_t a1, double a2)
{
  if (a2 > 0.0)
  {
    unsigned int v27 = &v27;
    BOOL v28 = (void **)&v27;
    uint64_t v29 = 0;
    id v3 = *(void **)(a1 + 1152);
    id v4 = (void *)(a1 + 1160);
    if (v3 != (void *)(a1 + 1160))
    {
      do
      {
        unsigned int v6 = v3 + 4;
        int v7 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
        {
          if (*((char *)v3 + 55) < 0)
          {
            __int16 v14 = (void *)v3[4];
            sub_10003B098(__dst, v14, v3[5]);
          }
          else
          {
            *(_OWORD *)long long __dst = *v6;
            uint64_t v26 = v3[6];
            __int16 v14 = v3 + 4;
          }
          double v15 = sub_1006A0184(a1, (const void **)__dst);
          *(_DWORD *)int buf = 136446722;
          *(void *)&uint8_t buf[4] = v14;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&unsigned char buf[14] = v15;
          *(_WORD *)&unsigned char buf[22] = 2048;
          double v33 = a2;
          _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "purgeStaleDisconnectionHistoryLeConnectionRSSIThresholdState: %{public}s last %f cutoff %f", buf, 0x20u);
          if (SHIBYTE(v26) < 0) {
            operator delete(__dst[0]);
          }
        }
        if (*((char *)v3 + 55) < 0)
        {
          sub_10003B098(__p, (void *)v3[4], v3[5]);
        }
        else
        {
          *(_OWORD *)__p = *v6;
          uint64_t v24 = v3[6];
        }
        double v8 = sub_1006A0184(a1, (const void **)__p);
        if (SHIBYTE(v24) < 0) {
          operator delete(__p[0]);
        }
        if (v8 < a2)
        {
          int v9 = sub_1005C3118((uint64_t)&v27, 0, 0, (uint64_t)(v3 + 4));
          uint64_t v10 = v27;
          void *v9 = v27;
          v9[1] = &v27;
          v10[1] = v9;
          unsigned int v27 = v9;
          ++v29;
        }
        uint64_t v11 = (void *)v3[1];
        if (v11)
        {
          do
          {
            unsigned int v12 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            unsigned int v12 = (void *)v3[2];
            BOOL v13 = *v12 == (void)v3;
            id v3 = v12;
          }
          while (!v13);
        }
        id v3 = v12;
      }
      while (v12 != v4);
      for (uint64_t i = v28; i != (void **)&v27; uint64_t i = (void **)i[1])
      {
        memset(buf, 0, sizeof(buf));
        if (*((char *)i + 39) < 0)
        {
          sub_10003B098(buf, i[2], (unint64_t)i[3]);
        }
        else
        {
          *(_OWORD *)int buf = *((_OWORD *)i + 1);
          *(void *)&uint8_t buf[16] = i[4];
        }
        unsigned int v17 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          if ((buf[23] & 0x80u) == 0) {
            BOOL v18 = buf;
          }
          else {
            BOOL v18 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v30 = 136446210;
          int v31 = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "purgeStaleDisconnectionHistoryLeConnectionRSSIThresholdState: %{public}s deleted", v30, 0xCu);
        }
        if ((char)buf[23] < 0)
        {
          sub_10003B098(v21, *(void **)buf, *(unint64_t *)&buf[8]);
        }
        else
        {
          *(_OWORD *)uint64_t v21 = *(_OWORD *)buf;
          uint64_t v22 = *(void *)&buf[16];
        }
        sub_1006A00F0(a1, (const void **)v21);
        if (SHIBYTE(v22) < 0) {
          operator delete(v21[0]);
        }
        if ((char)buf[23] < 0)
        {
          sub_10003B098(v19, *(void **)buf, *(unint64_t *)&buf[8]);
        }
        else
        {
          *(_OWORD *)unint64_t v19 = *(_OWORD *)buf;
          uint64_t v20 = *(void *)&buf[16];
        }
        sub_1006A0AB4(a1, (const void **)v19);
        if (SHIBYTE(v20) < 0) {
          operator delete(v19[0]);
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    sub_10037D324((void **)&v27);
  }
}

void sub_1006A0EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *a38)
{
}

BOOL sub_1006A0F3C(uint64_t a1, uint64_t a2)
{
  return *(double *)(a1 + 24) < *(double *)(a2 + 24);
}

void sub_1006A0F50(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 1168);
  if ((unsigned __int16)v1 <= 0x20u)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG)) {
      sub_100792390();
    }
    return;
  }
  id v3 = &v27;
  unsigned int v27 = &v27;
  BOOL v28 = (void **)&v27;
  unint64_t v29 = 0;
  id v4 = *(void **)(a1 + 1152);
  unsigned int v5 = (void *)(a1 + 1160);
  if (v4 != (void *)(a1 + 1160))
  {
    while (1)
    {
      unsigned int v6 = v4 + 4;
      if (*((char *)v4 + 55) < 0)
      {
        sub_10003B098(__dst, (void *)v4[4], v4[5]);
        if (*((char *)v4 + 55) < 0)
        {
          sub_10003B098(__p, (void *)v4[4], v4[5]);
          goto LABEL_9;
        }
      }
      else
      {
        *(_OWORD *)long long __dst = *v6;
        uint64_t v25 = (void *)v4[6];
      }
      *(_OWORD *)__p = *v6;
      uint64_t v23 = v4[6];
LABEL_9:
      double v7 = sub_1006A0184(a1, (const void **)__p);
      double v26 = v7;
      double v8 = operator new(0x30uLL);
      v8[1] = *(_OWORD *)__dst;
      *((void *)v8 + 4) = v25;
      __dst[1] = 0;
      uint64_t v25 = 0;
      __dst[0] = 0;
      *((double *)v8 + 5) = v7;
      int v9 = v27;
      *(void *)double v8 = v27;
      *((void *)v8 + 1) = &v27;
      v9[1] = v8;
      unsigned int v27 = v8;
      ++v29;
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v10 = (void *)v4[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v4[2];
          BOOL v12 = *v11 == (void)v4;
          id v4 = v11;
        }
        while (!v12);
      }
      id v4 = v11;
      if (v11 == v5)
      {
        id v3 = (uint64_t **)v28;
        unint64_t v13 = v29;
        goto LABEL_20;
      }
    }
  }
  unint64_t v13 = 0;
LABEL_20:
  __dst[0] = sub_1006A0F3C;
  sub_1006ABE04(v3, (uint64_t *)&v27, v13, (unsigned int (**)(uint64_t, uint64_t))__dst);
  __int16 v14 = v28;
  if (v28 != (void **)&v27)
  {
    if ((((_WORD)v1 - 32) & 0xFFFE) != 0) {
      int v15 = (unsigned __int16)(v1 - 32);
    }
    else {
      int v15 = 1;
    }
    do
    {
      __dst[0] = 0;
      __dst[1] = 0;
      uint64_t v25 = 0;
      if (*((char *)v14 + 39) < 0)
      {
        sub_10003B098(__dst, v14[2], (unint64_t)v14[3]);
      }
      else
      {
        *(_OWORD *)long long __dst = *((_OWORD *)v14 + 1);
        uint64_t v25 = v14[4];
      }
      if (SHIBYTE(v25) < 0)
      {
        sub_10003B098(v20, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v20 = *(_OWORD *)__dst;
        uint64_t v21 = v25;
      }
      sub_1006A00F0(a1, (const void **)v20);
      if (SHIBYTE(v21) < 0) {
        operator delete(v20[0]);
      }
      if (SHIBYTE(v25) < 0)
      {
        sub_10003B098(v18, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)BOOL v18 = *(_OWORD *)__dst;
        unint64_t v19 = v25;
      }
      sub_1006A0AB4(a1, (const void **)v18);
      if (SHIBYTE(v19) < 0) {
        operator delete(v18[0]);
      }
      uint64_t v16 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        if (SHIBYTE(v25) >= 0) {
          unsigned int v17 = __dst;
        }
        else {
          unsigned int v17 = (void **)__dst[0];
        }
        *(_DWORD *)int buf = 136446210;
        int v31 = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "capDisconnectionHistoryLeConnectionRSSIThresholdState: delete %{public}s", buf, 0xCu);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(__dst[0]);
      }
      if (!--v15) {
        break;
      }
      __int16 v14 = (void **)v14[1];
    }
    while (v14 != (void **)&v27);
  }
  sub_10037D324((void **)&v27);
}

void sub_1006A12C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,char a40)
{
}

uint64_t sub_1006A136C(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t os_unfair_lock_opaque = (int)a1[216]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 4) {
      id v4 = "UNKNOWN";
    }
    else {
      id v4 = (&off_1009BE3A8)[os_unfair_lock_opaque];
    }
    uint64_t v5 = (int)a1[232]._os_unfair_lock_opaque;
    if (v5 > 3) {
      unsigned int v6 = "UNKNOWN";
    }
    else {
      unsigned int v6 = (&off_1009BE388)[v5];
    }
    int v14 = 136446466;
    int v15 = v4;
    __int16 v16 = 2082;
    unsigned int v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "pauseConnectionManager called, LeConnectionState=%{public}s LeConnectionManagerState=%{public}s", (uint8_t *)&v14, 0x16u);
  }
  uint32_t v7 = a1[232]._os_unfair_lock_opaque;
  if (v7 - 1 >= 3)
  {
    if (!v7)
    {
      sub_10067CCF0(a1, 1u);
      switch(a1[216]._os_unfair_lock_opaque)
      {
        case 0u:
          uint64_t v11 = qword_100A19EF8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_25;
          }
          LOWORD(v14) = 0;
          BOOL v12 = "We're idle, lets move on";
          goto LABEL_24;
        case 1u:
          unint64_t v13 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v14) = 0;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "We're trying to connect - cancelling all connections, will pause when idle", (uint8_t *)&v14, 2u);
          }
          sub_10067C23C(a1, 1);
          return 0;
        case 2u:
        case 3u:
          int v9 = qword_100A19EF8;
          BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
          uint64_t result = 0;
          if (!v10) {
            return result;
          }
          LOWORD(v14) = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "We're in the middle of connection cancellation - will pause when idle", (uint8_t *)&v14, 2u);
          return 0;
        case 4u:
          uint64_t v11 = qword_100A19EF8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_25;
          }
          LOWORD(v14) = 0;
          BOOL v12 = "We're autoReconnect, lets pause";
LABEL_24:
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, (uint8_t *)&v14, 2u);
LABEL_25:
          sub_10067CCF0(a1, 2u);
          break;
        default:
          return 0;
      }
    }
    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_10079220C();
    }
    return 12;
  }
}

void sub_1006A1600(id a1, LeConnectionManagerListener *a2)
{
}

void sub_1006A1628(id a1, LeConnectionManagerListener *a2)
{
}

uint64_t sub_1006A1650(uint64_t a1)
{
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)__p = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  sub_1000419CC((uint64_t)v12);
  uint64_t v2 = sub_10003AB28((uint64_t)v12);
  sub_10003AB28(v2);
  uint64_t v3 = sub_10003AB28((uint64_t)v12);
  uint64_t v4 = *(int *)(a1 + 864);
  if (v4 > 4) {
    uint64_t v5 = "UNKNOWN";
  }
  else {
    uint64_t v5 = (&off_1009BE3A8)[v4];
  }
  strlen(v5);
  uint64_t v6 = sub_10003AB28(v3);
  sub_10003AB28(v6);
  uint64_t v7 = sub_10003AB28((uint64_t)v12);
  uint64_t v8 = *(int *)(a1 + 928);
  if (v8 > 3) {
    int v9 = "UNKNOWN";
  }
  else {
    int v9 = (&off_1009BE388)[v8];
  }
  strlen(v9);
  uint64_t v10 = sub_10003AB28(v7);
  sub_10003AB28(v10);
  std::stringbuf::str();
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006A1894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006A18A8(uint64_t a1)
{
  return sub_1006A1650(a1 - 32);
}

uint64_t sub_1006A18B0(uint64_t a1, uint64_t (***a2)(void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), 202);
}

uint64_t sub_1006A18E4(uint64_t a1, uint64_t (***a2)(void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), 1);
}

uint64_t sub_1006A1918(uint64_t *a1, uint64_t *a2)
{
  unint64_t v6 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(result - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x666666666666666) {
      abort();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x333333333333333) {
      unint64_t v15 = 0x666666666666666;
    }
    else {
      unint64_t v15 = v13;
    }
    void v21[4] = result;
    long long v16 = (char *)sub_10026C508(result, v15);
    long long v17 = &v16[40 * v12];
    v21[0] = v16;
    v21[1] = v17;
    v21[3] = &v16[40 * v18];
    uint64_t v19 = *a2;
    *a2 = 0;
    *(void *)long long v17 = v19;
    LODWORD(v19) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(v17 + 8) = *(_OWORD *)(a2 + 1);
    *((_DWORD *)v17 + 6) = v19;
    uint64_t v20 = a2[4];
    a2[4] = 0;
    *((void *)v17 + 4) = v20;
    void v21[2] = v17 + 40;
    sub_1006AC1C0(a1, v21);
    uint64_t v11 = a1[1];
    uint64_t result = sub_1006AC238((uint64_t)v21);
  }
  else
  {
    uint64_t v8 = *a2;
    *a2 = 0;
    *(void *)unint64_t v7 = v8;
    long long v9 = *(_OWORD *)(a2 + 1);
    *(_DWORD *)(v7 + 24) = *((_DWORD *)a2 + 6);
    *(_OWORD *)(v7 + 8) = v9;
    uint64_t v10 = a2[4];
    a2[4] = 0;
    *(void *)(v7 + 32) = v10;
    uint64_t v11 = v7 + 40;
    a1[1] = v7 + 40;
  }
  a1[1] = v11;
  return result;
}

void sub_1006A1A50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006AC238((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006A1A64(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }
  sub_1006A1B20(v10, (long long *)__p, a3, a4, a5, a6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1006A1B04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006A1B20(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12 = sub_100019878();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3321888768;
  void v13[2] = sub_1006A4050;
  v13[3] = &unk_1009BDF70;
  v13[4] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v15 = *((void *)a2 + 2);
  }
  uint64_t v16 = a3;
  uint64_t v17 = a4;
  uint64_t v18 = a5;
  int v19 = a6;
  sub_100013018(v12, v13);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1006A1C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006A1C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v10 = *(void *)(a1 + 32);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
  }
  sub_1006A1B20(v10, (long long *)__p, a3, a4, a5, a6);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1006A1CD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006A1CEC(unsigned __int16 *a1, int a2, int a3, int a4)
{
  if (!a4) {
    return 1;
  }
  if (a1[132] == a2)
  {
    BOOL v7 = a4 == 24;
  }
  else if (a1[136] == a2)
  {
    BOOL v7 = a2 - 48 == a4;
  }
  else
  {
    int v8 = a1[134];
    BOOL v7 = v8 != a2 || v8 - 48 == a4;
  }
  BOOL v9 = v7;
  if (a2 - a3 >= a4 && v9) {
    return 1;
  }
  uint64_t v11 = qword_100A19EF8;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v12)
  {
    v13[0] = 67109632;
    v13[1] = a2;
    __int16 v14 = 1024;
    int v15 = a3;
    __int16 v16 = 1024;
    int v17 = a4;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "connectionScanParameters: Invalid combination of scan parameters interval %d window %d scancoreWindow %d  - do not use SC for connection scan.", (uint8_t *)v13, 0x14u);
    return 0;
  }
  return result;
}

void sub_1006A1E1C(id a1, LeConnectionManagerListener *a2)
{
}

void sub_1006A1E44(id a1, LeConnectionManagerListener *a2)
{
}

uint64_t sub_1006A1E6C(uint64_t a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1006AD3F0();
    id v3 = (id)objc_claimAutoreleasedReturnValue();
    sub_1006AD3F0();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    int v5 = *(unsigned __int8 *)(a1 + 40);
    if (*(unsigned char *)(a1 + 40)) {
      unint64_t v6 = "";
    }
    else {
      unint64_t v6 = " non-connectable-secondary:";
    }
    if (*(unsigned char *)(a1 + 40))
    {
      BOOL v7 = &stru_1009C1AC8;
    }
    else
    {
      sub_1006AD3F0();
      BOOL v7 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    *(_DWORD *)int buf = 138544130;
    id v13 = v3;
    __int16 v14 = 2114;
    id v15 = v4;
    __int16 v16 = 2080;
    int v17 = v6;
    __int16 v18 = 2114;
    int v19 = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeConnectionManager::leAddressChangedCallback dispatched addresses connectable:%{public}@ non-connectable:%{public}@%s%{public}@", buf, 0x2Au);
    if (!v5) {
  }
    }
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  long long v10 = *(_OWORD *)(v8 + 48);
  uint64_t v11 = *(void *)(v8 + 64);
  return sub_10068A1CC((uint64_t)off_1009F7EB8, &v10);
}

void sub_1006A2030(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006A205C(id a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  int v1 = off_1009F7EB8;

  sub_10068B190((uint64_t)v1);
}

uint64_t sub_1006A20B0(uint64_t a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 52)) {
      id v3 = "Incoming";
    }
    else {
      id v3 = "Outgoing";
    }
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = sub_1006AD3F0();
    int v6 = *(_DWORD *)(a1 + 48);
    int v8 = 136446978;
    BOOL v9 = v3;
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    __int16 v12 = 2114;
    id v13 = v5;
    __int16 v14 = 1024;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%{public}s LE Connection complete for handle %p address %{public}@ with status %d", (uint8_t *)&v8, 0x26u);
  }
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  return sub_10068F3D8((uint64_t)off_1009F7EB8, *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 52), *(unsigned __int16 **)(a1 + 32), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 53));
}

uint64_t sub_1006A2200(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  int v3 = *(_DWORD *)(a1 + 32);

  return sub_100692540((uint64_t)v2, v3);
}

uint64_t sub_1006A2264(uint64_t a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    int v6 = 134217984;
    uint64_t v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing ConnectionEventTrigger for device %lld", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v4 = sub_10003FB34();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t, void, uint64_t))(*(void *)v4 + 2928))(v4, *(void *)(a1 + 40), 0xFFFFLL, 1, 0, 1);
}

void sub_1006A2350(uint64_t a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = sub_1006AD3F0();
    int v5 = *(_DWORD *)(a1 + 48);
    int v6 = *(unsigned __int8 *)(a1 + 58);
    *(_DWORD *)int buf = 134218754;
    uint64_t v8 = v3;
    __int16 v9 = 2114;
    __int16 v10 = v4;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 1024;
    int v14 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LE Link disconnected for handle %p address %{public}@ with reason %d encryptionPending %d", buf, 0x22u);
  }
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  sub_100693F38((uint64_t)off_1009F7EB8, *(void *)(a1 + 40), *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(unsigned __int8 *)(a1 + 59), *(_DWORD *)(a1 + 48), *(unsigned __int8 *)(a1 + 60), *(unsigned __int8 *)(a1 + 61), *(_DWORD *)(a1 + 52));
}

uint64_t sub_1006A2488(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  uint64_t v3 = *(unsigned int *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);

  return sub_10069979C((uint64_t)v2, v3, v4);
}

void sub_1006A24F4(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006A2578;
  uint64_t v6[3] = &unk_100998A58;
  v6[4] = a2;
  char v7 = a3;
  sub_100013018(v5, v6);
}

uint64_t sub_1006A2578(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = (os_unfair_lock_s *)off_1009F7EB8;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 40);

  return sub_100699BC8(v2, v3, v4);
}

void sub_1006A25E0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, __int16 a6, int a7, int a8)
{
  *(unsigned char *)(a2 + 248) = a3;
  *(_DWORD *)(a2 + 252) = a4;
  *(_DWORD *)(a2 + 256) = a5;
  *(_WORD *)(a2 + 260) = a6;
  uint64_t v15 = sub_100019878();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  v16[2] = sub_1006A26A8;
  v16[3] = &unk_1009B5DE0;
  char v21 = a3;
  v16[4] = a2;
  v16[5] = a4;
  __int16 v20 = a6;
  int v17 = a5;
  int v18 = a7;
  int v19 = a8;
  sub_100013018(v15, v16);
}

uint64_t sub_1006A26A8(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = (os_unfair_lock_s *)off_1009F7EB8;
  int v3 = *(unsigned __int8 *)(a1 + 62);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = *(void *)(a1 + 40);
  int v6 = *(unsigned __int16 *)(a1 + 60);
  int v7 = *(_DWORD *)(a1 + 48);
  int v8 = *(_DWORD *)(a1 + 52);
  int v9 = *(_DWORD *)(a1 + 56);

  return sub_100699DA0(v2, v4, v3, v5, v7, v6, v8, v9);
}

uint64_t sub_1006A271C(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  return sub_10069A2E8((os_unfair_lock_s *)off_1009F7EB8, *(void *)(a1 + 32), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), *(_DWORD *)(a1 + 60), *(void *)(a1 + 40), *(unsigned char *)(a1 + 70), *(_DWORD *)(a1 + 71), BYTE1(*(_DWORD *)(a1 + 71)), BYTE2(*(_DWORD *)(a1 + 71)), HIBYTE(*(_DWORD *)(a1 + 71)), *(_WORD *)(a1 + 68), *(_DWORD *)(a1 + 64), *(_WORD *)(a1 + 75), HIBYTE(*(_WORD *)(a1 + 75)));
}

void sub_1006A27A8(uint64_t a1, uint64_t a2, __int16 a3, __int16 a4, char a5, uint64_t a6, int a7)
{
  uint64_t v13 = sub_100019878();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  void v14[2] = sub_1006A2858;
  void v14[3] = &unk_1009A0648;
  __int16 v16 = a3;
  __int16 v17 = a4;
  char v18 = a5;
  void v14[4] = a2;
  void v14[5] = a6;
  int v15 = a7;
  sub_100013018(v13, v14);
}

uint64_t sub_1006A2858(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = (os_unfair_lock_s *)off_1009F7EB8;
  int v3 = *(unsigned __int16 *)(a1 + 52);
  int v4 = *(unsigned __int16 *)(a1 + 54);
  int v5 = *(unsigned __int8 *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 32);
  uint64_t v7 = *(void *)(a1 + 40);
  int v8 = *(_DWORD *)(a1 + 48);

  return sub_10069A8A0(v2, v6, v3, v4, v5, v7, v8);
}

void sub_1006A28CC(uint64_t a1, uint64_t a2, long long *a3, int a4)
{
  uint64_t v7 = sub_100019878();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  long long v8 = a3[1];
  long long v10 = *a3;
  void v9[2] = sub_1006A2968;
  v9[3] = &unk_1009BDF30;
  void v9[4] = a2;
  long long v11 = v8;
  int v12 = a4;
  sub_100013018(v7, v9);
}

uint64_t sub_1006A2968(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = *(_OWORD *)(a1 + 56);
  v5[0] = *(_OWORD *)(a1 + 40);
  v5[1] = v3;
  return sub_10069AB28((os_unfair_lock_s *)off_1009F7EB8, v2, (char *)v5, *(_DWORD *)(a1 + 72));
}

void sub_1006A29DC(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v7 = sub_100019878();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_1006A2A70;
  void v8[3] = &unk_1009A0B58;
  v8[4] = a2;
  char v9 = a3;
  char v10 = a4;
  sub_100013018(v7, v8);
}

void sub_1006A2A70(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = (os_unfair_lock_s *)off_1009F7EB8;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 40);
  int v5 = *(char *)(a1 + 41);

  sub_10069ADD4(v2, v3, v4, v5);
}

uint64_t sub_1006A2ADC(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  unint64_t v3 = *(void *)(a1 + 32);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 40);
  __int16 v5 = *(_WORD *)(a1 + 42);
  int v6 = *(unsigned __int16 *)(a1 + 44);

  return sub_10069AFB0((uint64_t)v2, v3, v4, v5, v6);
}

uint64_t sub_1006A2B4C(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  unint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int16 *)(a1 + 40);
  __int16 v5 = *(_WORD *)(a1 + 42);
  __int16 v6 = *(_WORD *)(a1 + 44);
  __int16 v7 = *(_WORD *)(a1 + 46);

  return sub_10069BC60((uint64_t)v2, v3, v4, v5, v6, v7);
}

uint64_t sub_1006A2BC0(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  unint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 48);
  char v5 = *(unsigned char *)(a1 + 49);
  int v6 = *(_DWORD *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 44);

  return sub_10069C4E4((uint64_t)v2, v3, v6, v4, v5, v7);
}

uint64_t sub_1006A2C30(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v5 = *(void *)(a1 + 48);
  uint64_t v6 = *(void *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 80);
  uint64_t v8 = *(void *)(a1 + 64);
  uint64_t v9 = *(void *)(a1 + 72);

  return sub_10069CFD4((uint64_t)v2, v3, v4, v5, v6, v8, v7, v9);
}

uint64_t sub_1006A2CA0()
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v0 = off_1009F7EB8;

  return sub_10069D278((uint64_t)v0);
}

void sub_1006A2CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v4 = v3;
  uint64_t v5 = v2;
  uint64_t v6 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = v4[5];
    buf[0] = 67109120;
    buf[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "leCsProcedureCompleteCallback with status %d", (uint8_t *)buf, 8u);
  }
  uint64_t v8 = sub_100019878();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1006A2E34;
  v9[3] = &unk_1009BDF50;
  void v9[4] = v5;
  memcpy(v10, v4, sizeof(v10));
  sub_100013018(v8, v9);
}

uint64_t sub_1006A2E34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v3 = *(void *)(v2 + 32);
  memcpy(__dst, (const void *)(v2 + 40), sizeof(__dst));
  return sub_10069A034((uint64_t)off_1009F7EB8, v3);
}

uint64_t sub_1006A2F00(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = sub_100031234(a2);
    *(_DWORD *)int buf = 138543874;
    char v18 = v7;
    __int16 v19 = 1040;
    int v20 = 5;
    __int16 v21 = 2096;
    uint64_t v22 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setConnectionAFHMap for device \"%{public}@\" with map %.5P", buf, 0x1Cu);
  }
  if (a1 + 392 == sub_1000308C0(a1 + 384, a2))
  {
    int v15 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100792404(a2, v15);
    }
    return 3;
  }
  else
  {
    buf[0] = 0;
    sub_10001B8E0(buf);
    uint64_t v14 = sub_10001BDE0(180, (uint64_t)sub_1006A30A8, v8, v9, v10, v11, v12, v13, a3);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_100792494();
      }
      uint64_t v14 = 1;
    }
    sub_10001B8AC(buf);
  }
  return v14;
}

void sub_1006A308C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_1006A30A8(int a1)
{
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Set AFH status=%{bluetooth:OI_STATUS}u", (uint8_t *)v3, 8u);
  }
}

uint64_t sub_1006A314C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = sub_100035F54();
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 888))(v6);
  uint64_t result = 0;
  switch(a2)
  {
    case 65536:
    case 65540:
    case 65555:
    case 65557:
      uint64_t v9 = 0;
      *(_WORD *)(a3 + 1) = 1;
      *(unsigned char *)(a3 + 3) = 0;
      int v45 = a2;
      if (a2 == 65555) {
        unsigned int v10 = 180000;
      }
      else {
        unsigned int v10 = 10000;
      }
      int32x2_t v11 = vdup_n_s32(v10);
      uint64_t v12 = (unsigned int *)(a3 + 16);
      do
      {
        if ((v9 & 4) != 0) {
          unsigned int v13 = 3;
        }
        else {
          unsigned int v13 = 1;
        }
        *(v12 - 1) = v13;
        *uint64_t v12 = v10;
        if (*(unsigned char *)(a1 + 1376))
        {
          *(int32x2_t *)(v12 - 3) = vdup_n_s32(48 * v10 / *(unsigned __int16 *)(a1 + 2 * v13 + 256));
          int v14 = *(unsigned __int8 *)(a1 + 1380);
          if (*(unsigned char *)(a1 + 1380))
          {
            int v15 = qword_100A19EF8;
            BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG);
            unsigned int v17 = v10;
            if (v16)
            {
              char v18 = sub_10003D640(v45);
              *(_DWORD *)int buf = 136315906;
              char v48 = v18;
              __int16 v49 = 1024;
              int v50 = v9;
              __int16 v51 = 1024;
              unsigned int v52 = v10;
              __int16 v53 = 1024;
              int v54 = v14;
              _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "Override %s Coex 0x%x connection  scan timeout %d extended by %d percent", buf, 0x1Eu);
              int v14 = *(unsigned __int8 *)(a1 + 1380);
              unsigned int v17 = *v12;
            }
            *uint64_t v12 = v17 * ((656 * (v14 + 100)) >> 16);
          }
        }
        else
        {
          *(int32x2_t *)(v12 - 3) = v11;
        }
        ++v9;
        v12 += 5;
      }
      while (v9 != 16);
      goto LABEL_58;
    case 65537:
    case 65541:
    case 65560:
      uint64_t v29 = 0;
      *(_WORD *)(a3 + 1) = 257;
      *(unsigned char *)(a3 + 3) = 1;
      unsigned int v30 = v7 & 0xFFFFFFFE;
      int v31 = (int32x2_t *)(a3 + 20);
      do
      {
        if ((v29 & 5) != 0)
        {
          v31[-1].i32[1] = 600000;
          if ((v29 & 8) != 0 && _os_feature_enabled_impl())
          {
            int v32 = 0;
            v31->i32[0] = *(unsigned __int16 *)(a1 + 268) - 48;
          }
          else
          {
            int v32 = 0;
          }
          uint64_t v33 = 6;
        }
        else if ((v29 & 2) != 0)
        {
          *(int32x2_t *)((char *)&v31[-1] + 4) = (int32x2_t)0x1800004E20;
          int v32 = 1;
          uint64_t v33 = 4;
        }
        else
        {
          int v32 = 0;
          v31[-1].i32[1] = 10000;
          uint64_t v33 = 1;
        }
        v31[-1].i32[0] = v33;
        unsigned int v34 = v31[-1].u32[1];
        if (*(unsigned char *)(a1 + 1376))
        {
          unsigned int v35 = *(unsigned __int16 *)(a1 + 2 * v33 + 256);
          unsigned int v36 = 48 * v34 / v35;
          v31[-2].i32[1] = v36;
          if (v30 != 2) {
            int v32 = 0;
          }
          if (v32 == 1) {
            unsigned int v36 = (v31->i32[0] + 48) * v34 / v35;
          }
          v31[-2].i32[0] = v36;
          int v37 = *(unsigned __int8 *)(a1 + 1380);
          if (*(unsigned char *)(a1 + 1380))
          {
            float v38 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
            {
              uint64_t v39 = sub_10003D640(a2);
              *(_DWORD *)int buf = 136315906;
              char v48 = v39;
              __int16 v49 = 1024;
              int v50 = v29;
              __int16 v51 = 1024;
              unsigned int v52 = v34;
              __int16 v53 = 1024;
              int v54 = v37;
              _os_log_debug_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEBUG, "Override %s Coex 0x%x connection  scan timeout %d extended by %d percent", buf, 0x1Eu);
              int v37 = *(unsigned __int8 *)(a1 + 1380);
              unsigned int v34 = v31[-1].u32[1];
            }
            v31[-1].i32[1] = v34 * ((656 * (v37 + 100)) >> 16);
          }
        }
        else
        {
          v31[-2] = vdup_n_s32(v34);
        }
        ++v29;
        int v31 = (int32x2_t *)((char *)v31 + 20);
      }
      while (v29 != 16);
      goto LABEL_58;
    case 65538:
    case 65542:
    case 65556:
    case 65558:
      uint64_t v19 = 0;
      *(_WORD *)(a3 + 1) = 1;
      *(unsigned char *)(a3 + 3) = 0;
      int v46 = a2;
      if (a2 == 65556) {
        unsigned int v20 = 180000;
      }
      else {
        unsigned int v20 = 60000;
      }
      int32x2_t v21 = vdup_n_s32(v20);
      uint64_t v22 = (unsigned int *)(a3 + 16);
      do
      {
        if ((v19 & 4) != 0) {
          int v23 = 3;
        }
        else {
          int v23 = 1;
        }
        *(v22 - 1) = v23;
        *uint64_t v22 = v20;
        *(int32x2_t *)(v22 - 3) = v21;
        if (*(unsigned char *)(a1 + 1376))
        {
          int v24 = *(unsigned __int8 *)(a1 + 1380);
          if (*(unsigned char *)(a1 + 1380))
          {
            uint64_t v25 = qword_100A19EF8;
            BOOL v26 = os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG);
            unsigned int v27 = v20;
            if (v26)
            {
              BOOL v28 = sub_10003D640(v46);
              *(_DWORD *)int buf = 136315906;
              char v48 = v28;
              __int16 v49 = 1024;
              int v50 = v19;
              __int16 v51 = 1024;
              unsigned int v52 = v20;
              __int16 v53 = 1024;
              int v54 = v24;
              _os_log_debug_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEBUG, "Override %s Coex 0x%x connection  scan timeout %d extended by %d percent", buf, 0x1Eu);
              int v24 = *(unsigned __int8 *)(a1 + 1380);
              unsigned int v27 = *v22;
            }
            *uint64_t v22 = v27 * ((656 * (v24 + 100)) >> 16);
          }
        }
        ++v19;
        v22 += 5;
      }
      while (v19 != 16);
      goto LABEL_58;
    case 65539:
    case 65543:
    case 65561:
      *(_WORD *)(a3 + 1) = 0;
      *(unsigned char *)(a3 + 3) = 0;
      *(_OWORD *)(a3 + 4) = xmmword_1007C0380;
      if (*(unsigned char *)(a1 + 1376))
      {
        unsigned int v40 = *(unsigned __int8 *)(a1 + 1380);
        if (*(unsigned char *)(a1 + 1380))
        {
          int v41 = 600000;
          unsigned int v42 = qword_100A19EF8;
          if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int buf = 136315650;
            char v48 = sub_10003D640(a2);
            __int16 v49 = 1024;
            int v50 = 600000;
            __int16 v51 = 1024;
            unsigned int v52 = v40;
            _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Override %s Coex None connection  scan timeout %d extended by %d percent", buf, 0x18u);
            unsigned int v40 = *(unsigned __int8 *)(a1 + 1380);
            int v41 = *(_DWORD *)(a3 + 16);
          }
          *(_DWORD *)(a3 + 16) = v41 * ((656 * (v40 + 100)) >> 16);
        }
      }
LABEL_58:
      if (*(unsigned char *)(a1 + 1504))
      {
        for (uint64_t i = 16; i != 336; i += 20)
        {
          if (*(_DWORD *)(a3 + i)) {
            *(_DWORD *)(a3 + i) = *(_DWORD *)(a1 + 1508);
          }
        }
      }
      BOOL v44 = *(unsigned char *)(a3 + 2) || *(unsigned char *)(a3 + 1) || *(unsigned char *)(a3 + 3) != 0;
      *(unsigned char *)a3 = v44;
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1006A37AC(uint64_t a1, void *a2, const void **a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  id v11 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  int v12 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v11);
  int v56 = 0;
  memset(v55, 0, sizeof(v55));
  if (sub_1006A314C(a1, v12, (uint64_t)v55))
  {
    if (a1 + 1360 == sub_10003156C(a1 + 1352, a3))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
        sub_1007924FC();
      }
    }
    else
    {
      *(void *)int buf = a3;
      unsigned int v13 = sub_1006AA480((uint64_t **)(a1 + 1352), a3, (uint64_t)&unk_1007BE9D0, (long long **)buf);
      uint64_t v14 = *((int *)v13 + 16);
      unsigned int v50 = *((_DWORD *)v13 + 15);
      unsigned int v51 = *((_DWORD *)v13 + 14);
      unsigned int v52 = *((_DWORD *)v13 + 17);
      int v15 = +[NSMutableDictionary dictionary];
      [v15 setObject:@"Connection" forKeyedSubscript:@"ScanType"];
      BOOL v16 = +[NSString stringWithUTF8String:sub_10003D640(v12)];
      [v15 setObject:v16 forKeyedSubscript:@"CBUseCase"];

      if (qword_1009FB270 != -1) {
        dispatch_once(&qword_1009FB270, &stru_1009BE198);
      }
      __int16 v49 = sub_100737224(qword_1009FB268, v11);
      unsigned int v17 = [v49 allObjects];
      __int16 v53 = +[NSArray arrayWithArray:v17];

      char v18 = [v53 sortedArrayUsingSelector:"compare:"];

      int v54 = v18;
      uint64_t v19 = [v18 componentsJoinedByString:@","];
      [v15 setObject:v19 forKeyedSubscript:@"BundleID"];

      unsigned int v20 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 1376)];
      [v15 setObject:v20 forKeyedSubscript:@"IsFWBased"];

      if (v14 > 8) {
        int32x2_t v21 = "Unknown";
      }
      else {
        int32x2_t v21 = (&off_1009BE340)[v14];
      }
      int v23 = +[NSString stringWithUTF8String:v21];
      [v15 setObject:v23 forKeyedSubscript:@"InitialConnScanParamsType"];

      LODWORD(v23) = BYTE3(v55[0]);
      int v24 = +[NSNumber numberWithBool:BYTE3(v55[0])];
      [v15 setObject:v24 forKeyedSubscript:@"IsWiFiCoexCriticalProtected"];

      uint64_t v25 = +[NSNumber numberWithBool:BYTE2(v55[0])];
      [v15 setObject:v25 forKeyedSubscript:@"IsBTAudioProtected"];

      BOOL v26 = +[NSNumber numberWithBool:v23 != 0];
      [v15 setObject:v26 forKeyedSubscript:@"IsWiFi2_4GHzProtected"];

      if ((v12 & 0xFFFF0000) == 0x10000) {
        uint64_t v27 = 63;
      }
      else {
        uint64_t v27 = 0;
      }
      BOOL v28 = +[NSNumber numberWithUnsignedLongLong:v27];
      [v15 setObject:v28 forKeyedSubscript:@"WiFiCriticalDefinition"];

      uint64_t v29 = +[NSNumber numberWithUnsignedInt:v52];
      [v15 setObject:v29 forKeyedSubscript:@"ScanDurationReqMsec"];

      unsigned int v30 = +[NSNumber numberWithUnsignedInt:v51];
      [v15 setObject:v30 forKeyedSubscript:@"ActualScanTimeReqMsec"];

      int v31 = +[NSNumber numberWithUnsignedInt:v50];
      [v15 setObject:v31 forKeyedSubscript:@"ActualScanTimeMCReqMsec"];

      int v32 = +[NSNumber numberWithUnsignedLongLong:a6];
      [v15 setObject:v32 forKeyedSubscript:@"ScanDurationMsec"];

      uint64_t v33 = +[NSNumber numberWithUnsignedLongLong:a4];
      [v15 setObject:v33 forKeyedSubscript:@"ActualScanTimeMsec"];

      unsigned int v34 = +[NSNumber numberWithUnsignedLongLong:a5];
      [v15 setObject:v34 forKeyedSubscript:@"ActualScanTimeMCMsec"];

      if (v52) {
        unsigned int v35 = 100 * (int)a6 / v52;
      }
      else {
        unsigned int v35 = 0;
      }
      if (v35 <= 0x63) {
        uint64_t v36 = v35;
      }
      else {
        uint64_t v36 = 100;
      }
      if (v51) {
        unsigned int v37 = 100 * (int)a4 / v51;
      }
      else {
        unsigned int v37 = 0;
      }
      if (v37 <= 0x63) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 100;
      }
      if (v50) {
        unsigned int v39 = 100 * (int)a5 / v50;
      }
      else {
        unsigned int v39 = 0;
      }
      if (v39 <= 0x63) {
        uint64_t v40 = v39;
      }
      else {
        uint64_t v40 = 100;
      }
      int v41 = +[NSNumber numberWithUnsignedInt:v36];
      [v15 setObject:v41 forKeyedSubscript:@"ScanDurationMsecPercentage"];

      unsigned int v42 = +[NSNumber numberWithUnsignedInt:v38];
      [v15 setObject:v42 forKeyedSubscript:@"ActualScanTimeMsecPercentage"];

      float v43 = +[NSNumber numberWithUnsignedInt:v40];
      [v15 setObject:v43 forKeyedSubscript:@"ActualScanTimeMCMsecPercentage"];

      BOOL v44 = +[NSNumber numberWithBool:v35 > 0x63];
      [v15 setObject:v44 forKeyedSubscript:@"HasScanDurationReqMet"];

      int v45 = +[NSNumber numberWithBool:v37 > 0x63];
      [v15 setObject:v45 forKeyedSubscript:@"HasActualScanTimeReqMet"];

      int v46 = +[NSNumber numberWithBool:v39 > 0x63];
      [v15 setObject:v46 forKeyedSubscript:@"HasActualScanTimeMCReqMet"];

      int v47 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 138543362;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Sending CloseLoopScanningStats :%{public}@", buf, 0xCu);
      }
      uint64_t v48 = sub_100050530();
      (*(void (**)(uint64_t, void *))(*(void *)v48 + 384))(v48, v15);
    }
  }
  else
  {
    uint64_t v22 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
      sub_100792570(v12, v22);
    }
  }
}

void sub_1006A3EF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1006A4050(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    uint64_t v5 = *(void *)(a1 + 64);
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = *(void *)(a1 + 80);
    int v8 = *(_DWORD *)(a1 + 88);
    *(_DWORD *)int buf = 136316162;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v5;
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&uint8_t buf[24] = v6;
    *(_WORD *)&uint8_t buf[32] = 2048;
    *(void *)&unsigned char buf[34] = v7;
    __int16 v30 = 1024;
    int v31 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "handleConnScanRxStoppedCB: %s totalRx %llu btMCRx %llu totalTime %llu reason %d", buf, 0x30u);
  }
  if (*(_DWORD *)(a1 + 88) == 1)
  {
    uint64_t v9 = *(const unsigned __int8 **)(v2 + 336);
    if (v9 != (const unsigned __int8 *)(v2 + 344))
    {
      unsigned int v10 = (const void **)(a1 + 40);
      do
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v9 + 25, buf);
        sub_10004191C(&__p, buf);
        if ((v28 & 0x80u) == 0) {
          size_t v11 = v28;
        }
        else {
          size_t v11 = __n;
        }
        uint64_t v12 = *(unsigned __int8 *)(a1 + 63);
        int v13 = (char)v12;
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = *(void *)(a1 + 48);
        }
        if (v11 == v12)
        {
          if (v13 >= 0) {
            uint64_t v14 = (unsigned __int8 *)(a1 + 40);
          }
          else {
            uint64_t v14 = (unsigned __int8 *)*v10;
          }
          if ((v28 & 0x80) != 0)
          {
            uint64_t v19 = __p;
            int v20 = memcmp(__p, v14, __n);
            operator delete(v19);
            if (!v20) {
              goto LABEL_37;
            }
          }
          else
          {
            if (!v28) {
              goto LABEL_37;
            }
            uint64_t v15 = 0;
            do
            {
              int v16 = *((unsigned __int8 *)&__p + v15);
              int v17 = v14[v15];
              BOOL v18 = v16 != v17 || v28 - 1 == v15++;
            }
            while (!v18);
            if (v16 == v17)
            {
LABEL_37:
              int v23 = sub_100031234(v9 + 25);
              if (*(char *)(a1 + 63) < 0)
              {
                sub_10003B098(v24, *(void **)(a1 + 40), *(void *)(a1 + 48));
              }
              else
              {
                *(_OWORD *)int v24 = *(_OWORD *)v10;
                uint64_t v25 = *(void *)(a1 + 56);
              }
              sub_1006A37AC(v2, v23, (const void **)v24, *(void *)(a1 + 64), *(void *)(a1 + 72), *(void *)(a1 + 80));
              if (SHIBYTE(v25) < 0) {
                operator delete(v24[0]);
              }
              sub_1000305AC(buf, v23);
              sub_100683CFC(v2, buf, 10);
              sub_1000305AC(buf, v23);
              sub_10068D04C(v2, buf, 0, 344, 0);

              return;
            }
          }
        }
        else if ((v28 & 0x80) != 0)
        {
          operator delete(__p);
        }
        int32x2_t v21 = (unsigned __int8 *)*((void *)v9 + 1);
        if (v21)
        {
          do
          {
            uint64_t v22 = (const unsigned __int8 **)v21;
            int32x2_t v21 = *(unsigned __int8 **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            uint64_t v22 = (const unsigned __int8 **)*((void *)v9 + 2);
            BOOL v18 = *v22 == v9;
            uint64_t v9 = (const unsigned __int8 *)v22;
          }
          while (!v18);
        }
        uint64_t v9 = (const unsigned __int8 *)v22;
      }
      while (v22 != (const unsigned __int8 **)(v2 + 344));
    }
  }
}

void sub_1006A4324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1006A436C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006A4438;
  uint64_t v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1006A4418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006A4438(uint64_t a1)
{
}

void sub_1006A4448(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = sub_10003FB34();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 2760))(v6)) {
    goto LABEL_26;
  }
  sub_1000305AC(uu2, v5);
  if (a1 + 1440 == sub_1000308C0(a1 + 1432, uu2)) {
    goto LABEL_26;
  }
  uint64_t v57 = 0;
  long long __p = 0u;
  memset(uu2, 0, sizeof(uu2));
  sub_1000305AC(__str, v5);
  *(void *)int buf = __str;
  id v7 = sub_1006AC668((uint64_t **)(a1 + 1432), (unsigned __int8 *)__str, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
  *(void *)std::string uu2 = *((id *)v7 + 6);
  *(_OWORD *)&unsigned __int8 uu2[8] = *(_OWORD *)(v7 + 56);
  *(_OWORD *)&uu2[24] = *(_OWORD *)(v7 + 72);
  *(_DWORD *)&uu2[40] = *((_DWORD *)v7 + 22);
  sub_1002EACE8(&__p, (uint64_t)(v7 + 96));
  *(void *)__str = 0;
  sub_100026C30((uint64_t)__str);
  uint64_t v8 = *(int *)__str;
  uint64_t v9 = *(__int16 *)&__str[4];
  if (a3)
  {
    BOOL v10 = 1;
    BOOL v11 = 1;
  }
  else if (*(_OWORD *)&uu2[24] == 0)
  {
    unint64_t v12 = *(__int16 *)&__str[4] - *(void *)&uu2[16] + 1000 * (*(int *)__str - *(void *)&uu2[8]);
    int v13 = *(_DWORD *)(a1 + 1480);
    *(_DWORD *)__str = v12 / 0x3E8;
    *(_DWORD *)&__str[4] = v12 % 0x3E8;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_DWORD *)int buf = v13;
    BOOL v10 = 0;
    BOOL v11 = (int)sub_100262894((uint64_t)__str, (uint64_t)buf) > 0;
  }
  else
  {
    unint64_t v14 = *(__int16 *)&__str[4] - *(void *)&uu2[32] + 1000 * (*(int *)__str - *(void *)&uu2[24]);
    int v15 = *(_DWORD *)(a1 + 1484);
    *(_DWORD *)__str = v14 / 0x3E8;
    *(_DWORD *)&__str[4] = v14 % 0x3E8;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_DWORD *)int buf = v15;
    BOOL v10 = (int)sub_100262894((uint64_t)__str, (uint64_t)buf) > 0;
    BOOL v11 = v10;
  }
  int v16 = qword_100A19EF8;
  if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_17;
  }
  long long v59 = 0u;
  long long v60 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x3FuLL, "%0llu.%0llu", v8, v9);
  sub_10004191C(v42, __str);
  int v17 = v43;
  BOOL v18 = (void **)v42[0];
  sub_1006A5CBC(uu2);
  uint64_t v19 = v42;
  if (v17 < 0) {
    uint64_t v19 = v18;
  }
  if (__str[23] >= 0) {
    int v20 = __str;
  }
  else {
    int v20 = *(char **)__str;
  }
  *(_DWORD *)int buf = 138413570;
  *(void *)&uint8_t buf[4] = v5;
  __int16 v45 = 1024;
  int v46 = a3;
  __int16 v47 = 1024;
  BOOL v48 = v11;
  __int16 v49 = 1024;
  BOOL v50 = v10;
  __int16 v51 = 2080;
  unsigned int v52 = v19;
  __int16 v53 = 2080;
  int v54 = v20;
  _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateDenyListDevice incoming Device %@ forceUnblock=%d stopMonitoring=%d stopBlocking=%d TimeNow:%ssec entry:%s", buf, 0x32u);
  if (__str[23] < 0) {
    operator delete(*(void **)__str);
  }
  if (v43 < 0)
  {
    operator delete(v42[0]);
    if (v10) {
      goto LABEL_18;
    }
  }
  else
  {
LABEL_17:
    if (v10)
    {
LABEL_18:
      uint64_t v21 = sub_10003FB34();
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      uint64_t v22 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 3640))(v21, v22);
    }
  }
  if (v11)
  {
    sub_1000305AC(__str, v5);
    sub_1006AC800((uint64_t **)(a1 + 1432), (unsigned __int8 *)__str);
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

LABEL_26:
  if (!_os_feature_enabled_impl()) {
    goto LABEL_65;
  }
  sub_1000305AC(uu2, v5);
  if (a1 + 1464 == sub_1000308C0(a1 + 1456, uu2)) {
    goto LABEL_65;
  }
  uint64_t v57 = 0;
  long long __p = 0u;
  memset(uu2, 0, sizeof(uu2));
  sub_1000305AC(__str, v5);
  *(void *)int buf = __str;
  int v23 = sub_1006AC668((uint64_t **)(a1 + 1456), (unsigned __int8 *)__str, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
  *(void *)std::string uu2 = *((id *)v23 + 6);
  *(_OWORD *)&unsigned __int8 uu2[8] = *(_OWORD *)(v23 + 56);
  *(_OWORD *)&uu2[24] = *(_OWORD *)(v23 + 72);
  *(_DWORD *)&uu2[40] = *((_DWORD *)v23 + 22);
  sub_1002EACE8(&__p, (uint64_t)(v23 + 96));
  *(void *)__str = 0;
  sub_100026C30((uint64_t)__str);
  uint64_t v24 = *(int *)__str;
  uint64_t v25 = *(__int16 *)&__str[4];
  if (a3)
  {
    BOOL v26 = 1;
    BOOL v27 = 1;
  }
  else if (*(_OWORD *)&uu2[24] == 0)
  {
    unint64_t v28 = *(__int16 *)&__str[4] - *(void *)&uu2[16] + 1000 * (*(int *)__str - *(void *)&uu2[8]);
    int v29 = *(_DWORD *)(a1 + 1480);
    *(_DWORD *)__str = v28 / 0x3E8;
    *(_DWORD *)&__str[4] = v28 % 0x3E8;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_DWORD *)int buf = v29;
    BOOL v26 = 0;
    BOOL v27 = (int)sub_100262894((uint64_t)__str, (uint64_t)buf) > 0;
  }
  else
  {
    unint64_t v30 = *(__int16 *)&__str[4] - *(void *)&uu2[32] + 1000 * (*(int *)__str - *(void *)&uu2[24]);
    int v31 = *(_DWORD *)(a1 + 1484);
    *(_DWORD *)__str = v30 / 0x3E8;
    *(_DWORD *)&__str[4] = v30 % 0x3E8;
    *(_DWORD *)&uint8_t buf[4] = 0;
    *(_DWORD *)int buf = v31;
    BOOL v26 = (int)sub_100262894((uint64_t)__str, (uint64_t)buf) > 0;
    BOOL v27 = v26;
  }
  int v32 = qword_100A19EF8;
  if (!os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_42;
  }
  long long v59 = 0u;
  long long v60 = 0u;
  memset(__str, 0, sizeof(__str));
  snprintf(__str, 0x3FuLL, "%0llu.%0llu", v24, v25);
  sub_10004191C(v42, __str);
  int v33 = v43;
  unsigned int v34 = (void **)v42[0];
  sub_1006A5CBC(uu2);
  unsigned int v35 = v42;
  if (v33 < 0) {
    unsigned int v35 = v34;
  }
  if (__str[23] >= 0) {
    uint64_t v36 = __str;
  }
  else {
    uint64_t v36 = *(char **)__str;
  }
  *(_DWORD *)int buf = 138413570;
  *(void *)&uint8_t buf[4] = v5;
  __int16 v45 = 1024;
  int v46 = a3;
  __int16 v47 = 1024;
  BOOL v48 = v27;
  __int16 v49 = 1024;
  BOOL v50 = v26;
  __int16 v51 = 2080;
  unsigned int v52 = v35;
  __int16 v53 = 2080;
  int v54 = v36;
  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateDenyListDevice outgoing Device %@ forceUnblock=%d stopMonitoring=%d stopBlocking=%d TimeNow:%ssec entry:%s", buf, 0x32u);
  if (__str[23] < 0) {
    operator delete(*(void **)__str);
  }
  if ((v43 & 0x80000000) == 0)
  {
LABEL_42:
    if (!v27) {
      goto LABEL_44;
    }
    goto LABEL_43;
  }
  operator delete(v42[0]);
  if (v27)
  {
LABEL_43:
    sub_1000305AC(__str, v5);
    sub_1006AC800((uint64_t **)(a1 + 1456), (unsigned __int8 *)__str);
  }
LABEL_44:
  if (v26 && [*(id *)(a1 + 760) containsObject:v5])
  {
    [*(id *)(a1 + 760) removeObject:v5];
    if (*(_DWORD *)(a1 + 928))
    {
      unsigned int v37 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__str = 138543362;
        *(void *)&__str[4] = v5;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: Device %{public}@ setDeviceIntoConnectionPendingList ", (uint8_t *)__str, 0xCu);
      }
      sub_1000305AC(__str, v5);
      sub_100680C1C(a1, (const unsigned __int8 *)__str);
    }
    else
    {
      int v38 = sub_10067C23C(a1, 0);
      unsigned int v39 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__str = 138543618;
        *(void *)&__str[4] = v5;
        *(_WORD *)&__str[12] = 1024;
        *(_DWORD *)&__str[14] = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: Device %{public}@ cancelAllPendingConnections returned %d ", (uint8_t *)__str, 0x12u);
      }
      if (v38)
      {
        sub_100681FF4(a1, v5);
        uint64_t v40 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__str = 138543362;
          *(void *)&__str[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: addToConnectingList %{public}@", (uint8_t *)__str, 0xCu);
        }
        sub_10068A59C(a1);
      }
      else
      {
        sub_1000305AC(__str, v5);
        sub_100680C1C(a1, (const unsigned __int8 *)__str);
        int v41 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__str = 138543362;
          *(void *)&__str[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: setDeviceIntoConnectionPendingList %{public}@", (uint8_t *)__str, 0xCu);
        }
      }
    }
  }
  if ((void)__p)
  {
    *((void *)&__p + 1) = __p;
    operator delete((void *)__p);
  }

LABEL_65:
}

void sub_1006A4D2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_1006A59AC((uint64_t)&a26);

  _Unwind_Resume(a1);
}

void sub_1006A4DD8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006A4EA4;
  uint64_t v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1006A4E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006A4EA4(uint64_t a1)
{
}

void sub_1006A4EB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006A4F84;
  uint64_t v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1006A4F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006A4F84(uint64_t a1)
{
}

void sub_1006A4F94(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006A5060;
  uint64_t v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1006A5040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006A5060(uint64_t a1)
{
}

void sub_1006A5074(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006A5140;
  uint64_t v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1006A5120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006A5140(uint64_t a1)
{
}

void sub_1006A5150(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  obj[0] = 0;
  sub_100026C30((uint64_t)obj);
  id v3 = (void *)SLODWORD(obj[0]);
  uint64_t v4 = (void *)SWORD2(obj[0]);
  sub_1000305AC(obj, *(void *)(a1 + 32));
  if (v2 + 1440 == sub_1000308C0(v2 + 1432, (unsigned __int8 *)obj) || *(unsigned char *)(a1 + 52))
  {
    v66[0] = 0;
    *(_OWORD *)long long __p = 0u;
    memset(obj, 0, sizeof(obj));
    *(void *)int buf = 0;
    sub_100026C30((uint64_t)buf);
    obj[1] = (id)*(int *)buf;
    obj[2] = (id)*(__int16 *)&buf[4];
    if (*(unsigned char *)(a1 + 52))
    {
      obj[3] = (id)*(int *)buf;
      obj[4] = (id)*(__int16 *)&buf[4];
      LODWORD(obj[5]) = *(_DWORD *)(v2 + 1488);
      if (LODWORD(obj[5]))
      {
        unsigned int v5 = 0;
        uint64_t v6 = (char *)__p[1];
        do
        {
          if ((unint64_t)v6 >= v66[0])
          {
            uint64_t v8 = (char *)__p[0];
            uint64_t v9 = (v6 - (char *)__p[0]) >> 2;
            unint64_t v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 62) {
              abort();
            }
            int64_t v11 = v66[0] - (unint64_t)__p[0];
            if ((uint64_t)(v66[0] - (unint64_t)__p[0]) >> 1 > v10) {
              unint64_t v10 = v11 >> 1;
            }
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v12 = v10;
            }
            if (v12)
            {
              int v13 = (char *)sub_1002C44F0((uint64_t)v66, v12);
              uint64_t v8 = (char *)__p[0];
              uint64_t v6 = (char *)__p[1];
            }
            else
            {
              int v13 = 0;
            }
            unint64_t v14 = &v13[4 * v9];
            *(_DWORD *)unint64_t v14 = *(_DWORD *)(a1 + 48);
            id v7 = v14 + 4;
            while (v6 != v8)
            {
              int v15 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v14 - 1) = v15;
              v14 -= 4;
            }
            __p[0] = v14;
            __p[1] = v7;
            v66[0] = &v13[4 * v12];
            if (v8) {
              operator delete(v8);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v6 = *(_DWORD *)(a1 + 48);
            id v7 = v6 + 4;
          }
          __p[1] = v7;
          ++v5;
          uint64_t v6 = (char *)v7;
        }
        while (v5 < LODWORD(obj[5]));
      }
    }
    else
    {
      memset(&obj[3], 0, 20);
    }
    sub_1000305AC(buf, *(void *)(a1 + 32));
    *(void *)uint64_t v57 = buf;
    int v16 = sub_1006AC668((uint64_t **)(v2 + 1432), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v57);
    objc_storeStrong((id *)v16 + 6, obj[0]);
    if (v16 + 48 == (unsigned __int8 *)obj)
    {
      *((_DWORD *)v16 + 22) = obj[5];
    }
    else
    {
      *(_OWORD *)(v16 + 56) = *(_OWORD *)&obj[1];
      *(_OWORD *)(v16 + 72) = *(_OWORD *)&obj[3];
      *((_DWORD *)v16 + 22) = obj[5];
      sub_1002EABE0((char *)v16 + 96, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
    int v17 = *(unsigned __int8 *)(a1 + 52);
    BOOL v18 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = "and blocking (forced)";
      uint64_t v20 = *(void *)(a1 + 32);
      if (!v17) {
        uint64_t v19 = " ";
      }
      *(_DWORD *)int buf = 138412546;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateIncomingDisconnection Device %@ disconnected now, started monitoring %s", buf, 0x16u);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

    if (!v17) {
      goto LABEL_38;
    }
    goto LABEL_35;
  }
  v66[0] = 0;
  *(_OWORD *)long long __p = 0u;
  memset(obj, 0, sizeof(obj));
  sub_1000305AC(buf, *(void *)(a1 + 32));
  *(void *)uint64_t v57 = buf;
  int v23 = sub_1006AC668((uint64_t **)(v2 + 1432), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v57);
  obj[0] = *((id *)v23 + 6);
  *(_OWORD *)&obj[1] = *(_OWORD *)(v23 + 56);
  *(_OWORD *)&obj[3] = *(_OWORD *)(v23 + 72);
  LODWORD(obj[5]) = *((_DWORD *)v23 + 22);
  sub_1002EACE8(__p, (uint64_t)(v23 + 96));
  unint64_t v24 = (unsigned char *)v4 - (char *)obj[2] + 1000 * ((void)v3 - (unint64_t)obj[1]);
  unint64_t v25 = v24 / 0x3E8;
  int v26 = *(_DWORD *)(v2 + 1480);
  *(_WORD *)&buf[6] = 0;
  *(_DWORD *)int buf = v24 / 0x3E8;
  unint64_t v27 = v24 % 0x3E8;
  *(_WORD *)&uint8_t buf[4] = v24 % 0x3E8;
  *(_DWORD *)&v57[4] = 0;
  *(_DWORD *)uint64_t v57 = v26;
  int v28 = sub_100262894((uint64_t)buf, (uint64_t)v57);
  if (v28 < 0)
  {
    ++LODWORD(obj[5]);
    obj[1] = v3;
    obj[2] = v4;
    int v33 = (char *)__p[1];
    if (__p[1] >= (void *)v66[0])
    {
      unsigned int v35 = (char *)__p[0];
      int64_t v36 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v37 = v36 + 1;
      if ((unint64_t)(v36 + 1) >> 62) {
        abort();
      }
      int64_t v38 = v66[0] - (unint64_t)__p[0];
      if ((uint64_t)(v66[0] - (unint64_t)__p[0]) >> 1 > v37) {
        unint64_t v37 = v38 >> 1;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        uint64_t v40 = (char *)sub_1002C44F0((uint64_t)v66, v39);
        unsigned int v35 = (char *)__p[0];
        int v33 = (char *)__p[1];
      }
      else
      {
        uint64_t v40 = 0;
      }
      int v41 = &v40[4 * v36];
      unsigned int v42 = &v40[4 * v39];
      *(_DWORD *)int v41 = *(_DWORD *)(a1 + 48);
      unsigned int v34 = v41 + 4;
      while (v33 != v35)
      {
        int v43 = *((_DWORD *)v33 - 1);
        v33 -= 4;
        *((_DWORD *)v41 - 1) = v43;
        v41 -= 4;
      }
      __p[0] = v41;
      __p[1] = v34;
      v66[0] = v42;
      if (v35) {
        operator delete(v35);
      }
    }
    else
    {
      *(_DWORD *)__p[1] = *(_DWORD *)(a1 + 48);
      unsigned int v34 = v33 + 4;
    }
    __p[1] = v34;
    BOOL v44 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v45 = *(void *)(a1 + 32);
      long long v68 = 0u;
      long long v69 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v25, v27);
      sub_10004191C(v53, (char *)buf);
      int v46 = v56 >= 0 ? v53 : *(unsigned char **)v53;
      int v47 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)uint64_t v57 = 138413058;
      *(void *)&v57[4] = v45;
      __int16 v58 = 2080;
      long long v59 = v46;
      __int16 v60 = 1024;
      int v61 = (int)obj[5];
      __int16 v62 = 1024;
      int v63 = v47;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateIncomingDisconnection Device %@ disconnected %s seconds ago, increasing counter to %d, disconnectResult=%d", v57, 0x22u);
      if (v56 < 0) {
        operator delete(*(void **)v53);
      }
    }
    int v48 = (int)obj[5];
    unsigned int v49 = *(_DWORD *)(v2 + 1488);
    BOOL v30 = LODWORD(obj[5]) >= v49;
    if (LODWORD(obj[5]) >= v49)
    {
      obj[3] = v3;
      obj[4] = v4;
      BOOL v50 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v51 = *(void *)(a1 + 32);
        *(_DWORD *)int buf = 138412546;
        *(void *)&uint8_t buf[4] = v51;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v48;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateIncomingDisconnection Device %@ disconnected, counter:%d started blocking", buf, 0x12u);
      }
    }
    sub_1000305AC(buf, *(void *)(a1 + 32));
    *(void *)uint64_t v57 = buf;
    unsigned int v52 = sub_1006AC668((uint64_t **)(v2 + 1432), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v57);
    objc_storeStrong((id *)v52 + 6, obj[0]);
    if (v52 + 48 == (unsigned __int8 *)obj)
    {
      *((_DWORD *)v52 + 22) = obj[5];
    }
    else
    {
      *(_OWORD *)(v52 + 56) = *(_OWORD *)&obj[1];
      *(_OWORD *)(v52 + 72) = *(_OWORD *)&obj[3];
      *((_DWORD *)v52 + 22) = obj[5];
      sub_1002EABE0((char *)v52 + 96, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
  }
  else
  {
    sub_1000305AC(buf, *(void *)(a1 + 32));
    sub_1006AC800((uint64_t **)(v2 + 1432), buf);
    int v29 = qword_100A19EF8;
    BOOL v30 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v31 = *(void *)(a1 + 32);
      long long v68 = 0u;
      long long v69 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v25, v27);
      sub_10004191C(v57, (char *)buf);
      if (v60 >= 0) {
        int v32 = v57;
      }
      else {
        int v32 = *(unsigned char **)v57;
      }
      *(_DWORD *)__int16 v53 = 138412546;
      *(void *)&v53[4] = v31;
      __int16 v54 = 2080;
      long long v55 = v32;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateIncomingDisconnection  Device %@ disconnected %s seconds ago, stop monitoring", v53, 0x16u);
      if (SHIBYTE(v60) < 0) {
        operator delete(*(void **)v57);
      }
      BOOL v30 = 0;
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (v28 < 0)
  {
    if (!v30)
    {
LABEL_38:
      sub_1006A59E8(v2);
      return;
    }
LABEL_35:
    uint64_t v21 = sub_10003FB34();
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
    }
    uint64_t v22 = sub_100030DCC((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), 0);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 3632))(v21, v22);
    goto LABEL_38;
  }
}

void sub_1006A5958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1006A59AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006A59AC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1006A59E8(uint64_t a1)
{
  uint64_t v2 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 2760))(v2))
  {
    id v3 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = *(void *)(a1 + 1448);
      LODWORD(v16) = 134217984;
      *(void *)((char *)&v16 + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: LeConnectionManager::evaluateDenyListDevices incoming devices:%lu", (uint8_t *)&v16, 0xCu);
    }
    if (*(void *)(a1 + 1448))
    {
      long long v16 = 0uLL;
      uint64_t v17 = 0;
      sub_1006AC85C((uint64_t *)&v16, a1 + 1432);
      unsigned int v5 = (const unsigned __int8 *)v16;
      if ((long long *)v16 != (long long *)((char *)&v16 + 8))
      {
        do
        {
          uint64_t v6 = sub_100031234(v5 + 32);
          sub_1006A4448(a1, v6, 0);

          id v7 = (const unsigned __int8 *)*((void *)v5 + 1);
          if (v7)
          {
            do
            {
              uint64_t v8 = v7;
              id v7 = *(const unsigned __int8 **)v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              uint64_t v8 = (const unsigned __int8 *)*((void *)v5 + 2);
              BOOL v9 = *(void *)v8 == (void)v5;
              unsigned int v5 = v8;
            }
            while (!v9);
          }
          unsigned int v5 = v8;
        }
        while (v8 != (const unsigned __int8 *)((char *)&v16 + 8));
      }
      sub_1006A5FBC(a1);
      sub_1006A96C0((uint64_t)&v16, *((void **)&v16 + 1));
    }
  }
  if (_os_feature_enabled_impl())
  {
    unint64_t v10 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(void *)(a1 + 1472);
      LODWORD(v16) = 134217984;
      *(void *)((char *)&v16 + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: LeConnectionManager::evaluateDenyListDevices outgoing devices:%lu", (uint8_t *)&v16, 0xCu);
    }
    if (*(void *)(a1 + 1472))
    {
      long long v16 = 0uLL;
      uint64_t v17 = 0;
      sub_1006AC85C((uint64_t *)&v16, a1 + 1456);
      unint64_t v12 = (const unsigned __int8 *)v16;
      if ((long long *)v16 != (long long *)((char *)&v16 + 8))
      {
        do
        {
          int v13 = sub_100031234(v12 + 32);
          sub_1006A4448(a1, v13, 0);

          unint64_t v14 = (const unsigned __int8 *)*((void *)v12 + 1);
          if (v14)
          {
            do
            {
              int v15 = v14;
              unint64_t v14 = *(const unsigned __int8 **)v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              int v15 = (const unsigned __int8 *)*((void *)v12 + 2);
              BOOL v9 = *(void *)v15 == (void)v12;
              unint64_t v12 = v15;
            }
            while (!v9);
          }
          unint64_t v12 = v15;
        }
        while (v15 != (const unsigned __int8 *)((char *)&v16 + 8));
      }
      sub_1006A5FBC(a1);
      sub_1006A96C0((uint64_t)&v16, *((void **)&v16 + 1));
    }
  }
}

void sub_1006A5C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_1006A5CBC(void *a1)
{
  uint64_t v34 = 0;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)uint64_t v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v17 = 0u;
  sub_10004C67C((uint64_t)&v17);
  uint64_t v2 = std::ostream::operator<<();
  uint64_t v3 = sub_10003AB28(v2);
  sub_10042F298(a1 + 1, &v15);
  uint64_t v4 = sub_10003AB28(v3);
  uint64_t v5 = sub_10003AB28(v4);
  sub_10042F298(a1 + 3, &__p);
  uint64_t v6 = sub_10003AB28(v5);
  sub_10003AB28(v6);
  uint64_t v7 = std::ostream::operator<<();
  sub_10003AB28(v7);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v16 < 0) {
    operator delete(v15);
  }
  uint64_t v8 = a1[6];
  for (uint64_t i = a1[7]; v8 != i; v8 += 4)
  {
    uint64_t v10 = std::ostream::operator<<();
    sub_10003AB28(v10);
  }
  std::stringbuf::str();
  *(void *)((char *)&v17
  *(void *)&long long v18 = v11;
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1006A5F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_100742518((uint64_t)&a21);
  _Unwind_Resume(a1);
}

void sub_1006A5FBC(uint64_t a1)
{
  if (*(void *)(a1 + 1496) || sub_1006A6188(a1) && (sub_1006A6954(a1) & 1) != 0)
  {
    sub_10067D020(a1);
  }
  else
  {
    unint64_t v2 = (1000 * *(_DWORD *)(a1 + 1484)) / 0xAuLL;
    uint64_t v3 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      unint64_t v10 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: armPeriodicLeConnectionDenyListTimer %llu ms Armed!", buf, 0xCu);
    }
    uint64_t v4 = sub_100019878();
    uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v4 + 8));
    *(void *)(a1 + 1496) = v5;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1006A69BC;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    uint64_t v6 = *(NSObject **)(a1 + 1496);
    dispatch_time_t v7 = dispatch_time(0x8000000000000000, 1000000 * v2);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 1496));
  }
}

uint64_t sub_1006A6188(uint64_t a1)
{
  int v1 = *(void **)(a1 + 1432);
  if (v1 == (void *)(a1 + 1440)) {
    return 1;
  }
  while (!v1[9] && !v1[10])
  {
    unint64_t v2 = (void *)v1[1];
    if (v2)
    {
      do
      {
        uint64_t v3 = v2;
        unint64_t v2 = (void *)*v2;
      }
      while (v2);
    }
    else
    {
      do
      {
        uint64_t v3 = (void *)v1[2];
        BOOL v4 = *v3 == (void)v1;
        int v1 = v3;
      }
      while (!v4);
    }
    int v1 = v3;
    if (v3 == (void *)(a1 + 1440)) {
      return 1;
    }
  }
  return 0;
}

void sub_1006A61F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  obj[0] = 0;
  sub_100026C30((uint64_t)obj);
  uint64_t v3 = (void *)SLODWORD(obj[0]);
  BOOL v4 = (void *)SWORD2(obj[0]);
  sub_1000305AC(obj, *(void *)(a1 + 32));
  if (v2 + 1464 == sub_1000308C0(v2 + 1456, (unsigned __int8 *)obj) || *(unsigned char *)(a1 + 52))
  {
    v58[0] = 0;
    *(_OWORD *)long long __p = 0u;
    memset(obj, 0, sizeof(obj));
    *(void *)int buf = 0;
    sub_100026C30((uint64_t)buf);
    obj[1] = (id)*(int *)buf;
    obj[2] = (id)*(__int16 *)&buf[4];
    if (*(unsigned char *)(a1 + 52))
    {
      obj[3] = (id)*(int *)buf;
      obj[4] = (id)*(__int16 *)&buf[4];
      LODWORD(obj[5]) = *(_DWORD *)(v2 + 1488);
      if (LODWORD(obj[5]))
      {
        unsigned int v5 = 0;
        uint64_t v6 = (char *)__p[1];
        do
        {
          if ((unint64_t)v6 >= v58[0])
          {
            uint64_t v8 = (char *)__p[0];
            uint64_t v9 = (v6 - (char *)__p[0]) >> 2;
            unint64_t v10 = v9 + 1;
            if ((unint64_t)(v9 + 1) >> 62) {
              abort();
            }
            int64_t v11 = v58[0] - (unint64_t)__p[0];
            if ((uint64_t)(v58[0] - (unint64_t)__p[0]) >> 1 > v10) {
              unint64_t v10 = v11 >> 1;
            }
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v12 = v10;
            }
            if (v12)
            {
              int v13 = (char *)sub_1002C44F0((uint64_t)v58, v12);
              uint64_t v8 = (char *)__p[0];
              uint64_t v6 = (char *)__p[1];
            }
            else
            {
              int v13 = 0;
            }
            char v14 = &v13[4 * v9];
            *(_DWORD *)char v14 = *(_DWORD *)(a1 + 48);
            dispatch_time_t v7 = v14 + 4;
            while (v6 != v8)
            {
              int v15 = *((_DWORD *)v6 - 1);
              v6 -= 4;
              *((_DWORD *)v14 - 1) = v15;
              v14 -= 4;
            }
            __p[0] = v14;
            __p[1] = v7;
            v58[0] = &v13[4 * v12];
            if (v8) {
              operator delete(v8);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v6 = *(_DWORD *)(a1 + 48);
            dispatch_time_t v7 = v6 + 4;
          }
          __p[1] = v7;
          ++v5;
          uint64_t v6 = (char *)v7;
        }
        while (v5 < LODWORD(obj[5]));
      }
    }
    else
    {
      memset(&obj[3], 0, 20);
    }
    sub_1000305AC(buf, *(void *)(a1 + 32));
    *(void *)unsigned int v49 = buf;
    char v16 = sub_1006AC668((uint64_t **)(v2 + 1456), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v49);
    objc_storeStrong((id *)v16 + 6, obj[0]);
    if (v16 + 48 == (unsigned __int8 *)obj)
    {
      *((_DWORD *)v16 + 22) = obj[5];
    }
    else
    {
      *(_OWORD *)(v16 + 56) = *(_OWORD *)&obj[1];
      *(_OWORD *)(v16 + 72) = *(_OWORD *)&obj[3];
      *((_DWORD *)v16 + 22) = obj[5];
      sub_1002EABE0((char *)v16 + 96, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
    long long v17 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(void *)(a1 + 32);
      long long v19 = "and blocking (forced)";
      if (!*(unsigned char *)(a1 + 52)) {
        long long v19 = " ";
      }
      *(_DWORD *)int buf = 138412546;
      *(void *)&uint8_t buf[4] = v18;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateOutgoingDisconnection Device %@ disconnected now, started monitoring %s", buf, 0x16u);
    }
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }

LABEL_35:
    sub_1006A59E8(v2);
    return;
  }
  v58[0] = 0;
  *(_OWORD *)long long __p = 0u;
  memset(obj, 0, sizeof(obj));
  sub_1000305AC(buf, *(void *)(a1 + 32));
  *(void *)unsigned int v49 = buf;
  long long v20 = sub_1006AC668((uint64_t **)(v2 + 1456), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v49);
  obj[0] = *((id *)v20 + 6);
  *(_OWORD *)&obj[1] = *(_OWORD *)(v20 + 56);
  *(_OWORD *)&obj[3] = *(_OWORD *)(v20 + 72);
  LODWORD(obj[5]) = *((_DWORD *)v20 + 22);
  sub_1002EACE8(__p, (uint64_t)(v20 + 96));
  unint64_t v21 = (unsigned char *)v4 - (char *)obj[2] + 1000 * ((void)v3 - (unint64_t)obj[1]);
  unint64_t v22 = v21 / 0x3E8;
  int v23 = *(_DWORD *)(v2 + 1480);
  *(_WORD *)&buf[6] = 0;
  *(_DWORD *)int buf = v21 / 0x3E8;
  unint64_t v24 = v21 % 0x3E8;
  *(_WORD *)&uint8_t buf[4] = v21 % 0x3E8;
  *(_DWORD *)&v49[4] = 0;
  *(_DWORD *)unsigned int v49 = v23;
  int v25 = sub_100262894((uint64_t)buf, (uint64_t)v49);
  if (v25 < 0)
  {
    ++LODWORD(obj[5]);
    obj[1] = v3;
    obj[2] = v4;
    long long v29 = (char *)__p[1];
    if (__p[1] >= (void *)v58[0])
    {
      long long v31 = (char *)__p[0];
      int64_t v32 = ((char *)__p[1] - (char *)__p[0]) >> 2;
      unint64_t v33 = v32 + 1;
      if ((unint64_t)(v32 + 1) >> 62) {
        abort();
      }
      int64_t v34 = v58[0] - (unint64_t)__p[0];
      if ((uint64_t)(v58[0] - (unint64_t)__p[0]) >> 1 > v33) {
        unint64_t v33 = v34 >> 1;
      }
      if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v35 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v35 = v33;
      }
      if (v35)
      {
        int64_t v36 = (char *)sub_1002C44F0((uint64_t)v58, v35);
        long long v31 = (char *)__p[0];
        long long v29 = (char *)__p[1];
      }
      else
      {
        int64_t v36 = 0;
      }
      unint64_t v37 = &v36[4 * v32];
      int64_t v38 = &v36[4 * v35];
      *(_DWORD *)unint64_t v37 = *(_DWORD *)(a1 + 48);
      long long v30 = v37 + 4;
      while (v29 != v31)
      {
        int v39 = *((_DWORD *)v29 - 1);
        v29 -= 4;
        *((_DWORD *)v37 - 1) = v39;
        v37 -= 4;
      }
      __p[0] = v37;
      __p[1] = v30;
      v58[0] = v38;
      if (v31) {
        operator delete(v31);
      }
    }
    else
    {
      *(_DWORD *)__p[1] = *(_DWORD *)(a1 + 48);
      long long v30 = v29 + 4;
    }
    __p[1] = v30;
    uint64_t v40 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v41 = *(void *)(a1 + 32);
      long long v60 = 0u;
      long long v61 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v22, v24);
      sub_10004191C(v45, (char *)buf);
      unsigned int v42 = v48 >= 0 ? v45 : *(unsigned char **)v45;
      int v43 = *(_DWORD *)(a1 + 48);
      *(_DWORD *)unsigned int v49 = 138413058;
      *(void *)&v49[4] = v41;
      __int16 v50 = 2080;
      uint64_t v51 = v42;
      __int16 v52 = 1024;
      int v53 = (int)obj[5];
      __int16 v54 = 1024;
      int v55 = v43;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateOutgoingDisconnection Device %@ disconnected %s seconds ago, increasing counter to %d, disconnectResult=%d", v49, 0x22u);
      if (v48 < 0) {
        operator delete(*(void **)v45);
      }
    }
    if (LODWORD(obj[5]) >= *(_DWORD *)(v2 + 1488))
    {
      obj[3] = v3;
      obj[4] = v4;
    }
    sub_1000305AC(buf, *(void *)(a1 + 32));
    *(void *)unsigned int v49 = buf;
    BOOL v44 = sub_1006AC668((uint64_t **)(v2 + 1456), buf, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)v49);
    objc_storeStrong((id *)v44 + 6, obj[0]);
    if (v44 + 48 == (unsigned __int8 *)obj)
    {
      *((_DWORD *)v44 + 22) = obj[5];
    }
    else
    {
      *(_OWORD *)(v44 + 56) = *(_OWORD *)&obj[1];
      *(_OWORD *)(v44 + 72) = *(_OWORD *)&obj[3];
      *((_DWORD *)v44 + 22) = obj[5];
      sub_1002EABE0((char *)v44 + 96, (char *)__p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 2);
    }
  }
  else
  {
    sub_1000305AC(buf, *(void *)(a1 + 32));
    sub_1006AC800((uint64_t **)(v2 + 1456), buf);
    long long v26 = qword_100A19EF8;
    if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = *(void *)(a1 + 32);
      long long v60 = 0u;
      long long v61 = 0u;
      memset(buf, 0, sizeof(buf));
      snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v22, v24);
      sub_10004191C(v49, (char *)buf);
      long long v28 = v52 >= 0 ? v49 : *(unsigned char **)v49;
      *(_DWORD *)uint64_t v45 = 138412546;
      *(void *)&v45[4] = v27;
      __int16 v46 = 2080;
      int v47 = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: evaluateOutgoingDisconnection  Device %@ disconnected %s seconds ago, stop monitoring", v45, 0x16u);
      if (SHIBYTE(v52) < 0) {
        operator delete(*(void **)v49);
      }
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }

  if (v25 < 0) {
    goto LABEL_35;
  }
}

void sub_1006A6900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_1006A59AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006A6954(uint64_t a1)
{
  int v1 = *(void **)(a1 + 1456);
  if (v1 == (void *)(a1 + 1464)) {
    return 1;
  }
  while (!v1[9] && !v1[10])
  {
    uint64_t v2 = (void *)v1[1];
    if (v2)
    {
      do
      {
        uint64_t v3 = v2;
        uint64_t v2 = (void *)*v2;
      }
      while (v2);
    }
    else
    {
      do
      {
        uint64_t v3 = (void *)v1[2];
        BOOL v4 = *v3 == (void)v1;
        int v1 = v3;
      }
      while (!v4);
    }
    int v1 = v3;
    if (v3 == (void *)(a1 + 1464)) {
      return 1;
    }
  }
  return 0;
}

uint64_t sub_1006A69BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeConnectionDenyList: fLeConnectionDenyListMaintainTimer Timer expired!", v4, 2u);
  }
  sub_10067D020(v1);
  return sub_1006A59E8(v1);
}

void sub_1006A6A38(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_100A14588 != -1) {
    dispatch_once(&qword_100A14588, &stru_1009BDFA0);
  }
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006A6CA8;
  uint64_t v6[3] = &unk_1009BD0F8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1006A6B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006A6B2C(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "FastLEConnectionForceFakeLocalControllerInfo");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A14580);
  if (byte_100A14580) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  uint64_t v4 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = byte_100A14580;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: FastLEConnection:FastLEConnectionForceFakeLocalControllerInfo fakeControllerInfo:%d", buf, 8u);
  }
}

void sub_1006A6C6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006A6CA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 184)
    && (int v3 = *(void **)(v2 + 1568)) != 0
    && [v3 length]
    && *(unsigned char *)(v2 + 1576))
  {
    id v4 = *(id *)(v2 + 1568);
    if (byte_100A14580)
    {
      id v5 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        v9[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: FastLEConnection:LeConnectionManager::readLocalControllerCachedInfo randomizing controller info", (uint8_t *)v9, 2u);
      }
      size_t v6 = [*(id *)(v2 + 1568) length];
      id v7 = (char *)malloc_type_malloc(v6, 0x43E6BFE2uLL);
      memcpy(v7, [*(id *)(v2 + 1568) bytes], v6);
      arc4random_buf(&v7[v6 - 4], 4uLL);
      uint64_t v8 = +[NSData dataWithBytes:v7 length:v6];

      free(v7);
      id v4 = (id)v8;
    }
  }
  else
  {
    id v4 = 0;
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1006A6E14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006A6E2C(uint64_t a1)
{
  *(void *)int buf = 0;
  sub_100026C30((uint64_t)buf);
  uint64_t v1 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ LE Connection Manager -------------------", buf, 2u);
    uint64_t v1 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    sub_1006AD3F0();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    *(_DWORD *)int buf = 138543362;
    *(void *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Local address \"%{public}@\"", buf, 0xCu);
  }
  *(void *)int buf = 0;
  sub_100026C30((uint64_t)buf);
  uint64_t v3 = *(int *)buf;
  uint64_t v4 = *(__int16 *)&buf[4];
  uint64_t v5 = *(void *)(a1 + 872);
  uint64_t v6 = *(void *)(a1 + 880);
  id v7 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v8 = 1000 * (v3 - v5) - v6 + v4;
    unsigned int v9 = *(_DWORD *)(a1 + 928);
    if (v9 > 3) {
      unint64_t v10 = "UNKNOWN";
    }
    else {
      unint64_t v10 = (&off_1009BE388)[v9];
    }
    unsigned int v11 = *(_DWORD *)(a1 + 864);
    if (v11 > 4) {
      unint64_t v12 = "UNKNOWN";
    }
    else {
      unint64_t v12 = (&off_1009BE3A8)[v11];
    }
    memset(buf, 0, sizeof(buf));
    snprintf((char *)buf, 0x3FuLL, "%0llu.%0llu", v8 / 0x3E8, v8 % 0x3E8);
    sub_10004191C(out, (char *)buf);
    if (out[23] >= 0) {
      int v13 = out;
    }
    else {
      int v13 = *(char **)out;
    }
    int v14 = *(unsigned __int8 *)(a1 + 888);
    if (*(unsigned char *)(a1 + 1065)) {
      int v15 = "YES";
    }
    else {
      int v15 = "NO";
    }
    *(_DWORD *)int buf = 136447746;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v9;
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v12;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v11;
    *(_WORD *)&unsigned char buf[34] = 2082;
    *(void *)&buf[36] = v13;
    *(_WORD *)&buf[44] = 1024;
    *(_DWORD *)&buf[46] = v14;
    *(_WORD *)&buf[50] = 2082;
    *(void *)&buf[52] = v15;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: state: %{public}s(%d),%{public}s(%d) for %{public}s seconds, %d errors, fControllerConnectionListFull=%{public}s", buf, 0x3Cu);
    if (out[23] < 0) {
      operator delete(*(void **)out);
    }
    id v7 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v16 = *(void *)(a1 + 896) != 0;
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: FastConnectionScanAssertionActive:%d", buf, 8u);
    id v7 = qword_100A19EF8;
  }
  if (*(void *)(a1 + 552) && os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = *(void *)(a1 + 560);
    *(_DWORD *)int buf = 134217984;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: FastConnectionScanTimer interval:%f", buf, 0xCu);
    id v7 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v18 = *(unsigned __int8 *)(a1 + 1067);
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: stackIsShuttingDown:%d", buf, 8u);
    id v7 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: Connected devices:", buf, 2u);
  }
  long long v19 = *(void **)(a1 + 384);
  if (v19 != (void *)(a1 + 392))
  {
    v197 = (uint64_t **)(a1 + 528);
    long long v20 = (void *)(a1 + 536);
    v188 = (uint64_t **)(a1 + 504);
    unint64_t v21 = (void *)(a1 + 512);
    do
    {
      uint64_t v250 = 0;
      long long v249 = 0u;
      long long v248 = 0u;
      long long v247 = 0u;
      long long v246 = 0u;
      long long v245 = 0u;
      long long v244 = 0u;
      long long v243 = 0u;
      long long v242 = 0u;
      long long v241 = 0u;
      long long v240 = 0u;
      long long v239 = 0u;
      *(_OWORD *)v238 = 0u;
      long long v237 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_10004C67C((uint64_t)buf);
      if (a1 + 416 == sub_1000308C0(a1 + 408, (unsigned __int8 *)v19 + 32))
      {
        v226[1] = 0;
        v226[0] = 0;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        unint64_t v24 = off_1009F7ED8;
        int v25 = sub_100031234((const unsigned __int8 *)v19 + 32);
        sub_1006C2D6C((uint64_t)v24, v25, (uint64_t)v226);

        uint64_t v26 = sub_10003AB28((uint64_t)&buf[16]);
        memset(out, 0, sizeof(out));
        uuid_unparse_upper((const unsigned __int8 *)v19 + 32, out);
        sub_10004191C(__p, out);
        uint64_t v27 = sub_10003AB28(v26);
        uint64_t v28 = sub_10003AB28(v27);
        sub_1006A9284(v226);
        uint64_t v29 = sub_10003AB28(v28);
        sub_10003AB28(v29);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
      }
      else
      {
        uint64_t v22 = sub_10003AB28((uint64_t)&buf[16]);
        memset(out, 0, sizeof(out));
        uuid_unparse_upper((const unsigned __int8 *)v19 + 32, out);
        sub_10004191C(__p, out);
        uint64_t v23 = sub_10003AB28(v22);
        sub_10003AB28(v23);
      }
      if (v235 < 0) {
        operator delete(__p[0]);
      }
      long long v30 = v19 + 6;
      long long v31 = (void *)*v20;
      if (*v20)
      {
        unint64_t v32 = *v30;
        unint64_t v33 = (void *)(a1 + 536);
        do
        {
          unint64_t v34 = v31[4];
          BOOL v35 = v34 >= v32;
          if (v34 >= v32) {
            int64_t v36 = v31;
          }
          else {
            int64_t v36 = v31 + 1;
          }
          if (v35) {
            unint64_t v33 = v31;
          }
          long long v31 = (void *)*v36;
        }
        while (*v36);
        if (v33 != v20 && v32 >= v33[4])
        {
          sub_10003AB28((uint64_t)&buf[16]);
          *(void *)uuid_string_t out = v19 + 6;
          sub_100509094(v197, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v37 = std::ostream::operator<<();
          sub_10003AB28(v37);
          *(void *)uuid_string_t out = v19 + 6;
          sub_100509094(v197, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v38 = std::ostream::operator<<();
          sub_10003AB28(v38);
          *(void *)uuid_string_t out = v19 + 6;
          sub_100509094(v197, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v39 = std::ostream::operator<<();
          sub_10003AB28(v39);
          *(void *)uuid_string_t out = v19 + 6;
          sub_100509094(v197, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v40 = std::ostream::operator<<();
          sub_10003AB28(v40);
          *(void *)uuid_string_t out = v19 + 6;
          sub_100509094(v197, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v41 = std::ostream::operator<<();
          sub_10003AB28(v41);
          *(void *)uuid_string_t out = v19 + 6;
          sub_100509094(v197, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          std::ostream::operator<<();
        }
      }
      unsigned int v42 = (void *)*v21;
      if (*v21)
      {
        unint64_t v43 = *v30;
        BOOL v44 = (void *)(a1 + 512);
        do
        {
          unint64_t v45 = v42[4];
          BOOL v46 = v45 >= v43;
          if (v45 >= v43) {
            int v47 = v42;
          }
          else {
            int v47 = v42 + 1;
          }
          if (v46) {
            BOOL v44 = v42;
          }
          unsigned int v42 = (void *)*v47;
        }
        while (*v47);
        if (v44 != v21 && v43 >= v44[4])
        {
          sub_10003AB28((uint64_t)&buf[16]);
          *(void *)uuid_string_t out = v19 + 6;
          sub_1006AA938(v188, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v48 = std::ostream::operator<<();
          sub_10003AB28(v48);
          *(void *)uuid_string_t out = v19 + 6;
          sub_1006AA938(v188, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v49 = std::ostream::operator<<();
          sub_10003AB28(v49);
          *(void *)uuid_string_t out = v19 + 6;
          sub_1006AA938(v188, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v50 = std::ostream::operator<<();
          sub_10003AB28(v50);
          *(void *)uuid_string_t out = v19 + 6;
          sub_1006AA938(v188, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v51 = std::ostream::operator<<();
          sub_10003AB28(v51);
          *(void *)uuid_string_t out = v19 + 6;
          sub_1006AA938(v188, v19 + 6, (uint64_t)&unk_1007BE9D0, (uint64_t **)out);
          uint64_t v52 = std::ostream::operator<<();
          sub_10003AB28(v52);
        }
      }
      int v53 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        __int16 v54 = out;
        if (out[23] < 0) {
          __int16 v54 = *(char **)out;
        }
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v54;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", (uint8_t *)__p, 0xCu);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
      }
      *(void *)int buf = v192;
      *(void *)&buf[*(void *)(v192 - 24)] = v190;
      *(void *)&uint8_t buf[16] = v189;
      if (SHIBYTE(v239) < 0) {
        operator delete(v238[1]);
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      std::ios::~ios();
      int v55 = (void *)v19[1];
      if (v55)
      {
        do
        {
          char v56 = v55;
          int v55 = (void *)*v55;
        }
        while (v55);
      }
      else
      {
        do
        {
          char v56 = (void *)v19[2];
          BOOL v57 = *v56 == (void)v19;
          long long v19 = v56;
        }
        while (!v57);
      }
      long long v19 = v56;
    }
    while (v56 != (void *)(a1 + 392));
  }
  __int16 v58 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump: UUIDToSessionMap :  fRSSIDetectionUUIDToSessionMap", buf, 2u);
    __int16 v58 = qword_100A19EF8;
  }
  long long v59 = *(const unsigned __int8 **)(a1 + 640);
  if (v59 != (const unsigned __int8 *)(a1 + 648))
  {
    do
    {
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        sub_100031234(v59 + 32);
        id v60 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)int buf = 138543362;
        *(void *)&uint8_t buf[4] = v60;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump:  Device%{public}@ : Session:", buf, 0xCu);

        __int16 v58 = qword_100A19EF8;
      }
      long long v61 = (unsigned __int8 *)*((void *)v59 + 1);
      if (v61)
      {
        do
        {
          __int16 v62 = (const unsigned __int8 **)v61;
          long long v61 = *(unsigned __int8 **)v61;
        }
        while (v61);
      }
      else
      {
        do
        {
          __int16 v62 = (const unsigned __int8 **)*((void *)v59 + 2);
          BOOL v57 = *v62 == v59;
          long long v59 = (const unsigned __int8 *)v62;
        }
        while (!v57);
      }
      long long v59 = (const unsigned __int8 *)v62;
    }
    while (v62 != (const unsigned __int8 **)(a1 + 648));
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump: UUIDToSessionMap : fUsageNotificationUUIDToSessionMap", buf, 2u);
    __int16 v58 = qword_100A19EF8;
  }
  int v63 = *(const unsigned __int8 **)(a1 + 664);
  if (v63 != (const unsigned __int8 *)(a1 + 672))
  {
    do
    {
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        sub_100031234(v63 + 32);
        id v64 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)int buf = 138543362;
        *(void *)&uint8_t buf[4] = v64;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump:  Device%{public}@ : Session", buf, 0xCu);

        __int16 v58 = qword_100A19EF8;
      }
      __int16 v65 = (unsigned __int8 *)*((void *)v63 + 1);
      if (v65)
      {
        do
        {
          int v66 = (const unsigned __int8 **)v65;
          __int16 v65 = *(unsigned __int8 **)v65;
        }
        while (v65);
      }
      else
      {
        do
        {
          int v66 = (const unsigned __int8 **)*((void *)v63 + 2);
          BOOL v57 = *v66 == v63;
          int v63 = (const unsigned __int8 *)v66;
        }
        while (!v57);
      }
      int v63 = (const unsigned __int8 *)v66;
    }
    while (v66 != (const unsigned __int8 **)(a1 + 672));
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump: SessionToUUIDMap fUsagePhyStatisticsUUIDToSessionMap :  ", buf, 2u);
    __int16 v58 = qword_100A19EF8;
  }
  __int16 v67 = *(const unsigned __int8 **)(a1 + 688);
  if (v67 != (const unsigned __int8 *)(a1 + 696))
  {
    do
    {
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        sub_100031234(v67 + 40);
        id v68 = (id)objc_claimAutoreleasedReturnValue();
        *(_DWORD *)int buf = 138543362;
        *(void *)&uint8_t buf[4] = v68;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump:  Session:  : Device%{public}@", buf, 0xCu);

        __int16 v58 = qword_100A19EF8;
      }
      long long v69 = (unsigned __int8 *)*((void *)v67 + 1);
      if (v69)
      {
        do
        {
          int v70 = (const unsigned __int8 **)v69;
          long long v69 = *(unsigned __int8 **)v69;
        }
        while (v69);
      }
      else
      {
        do
        {
          int v70 = (const unsigned __int8 **)*((void *)v67 + 2);
          BOOL v57 = *v70 == v67;
          __int16 v67 = (const unsigned __int8 *)v70;
        }
        while (!v57);
      }
      __int16 v67 = (const unsigned __int8 *)v70;
    }
    while (v70 != (const unsigned __int8 **)(a1 + 696));
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump: SessionToUUIDMap fUsagePhyStatisticsSubratingToSessionMap :  ", buf, 2u);
    __int16 v58 = qword_100A19EF8;
  }
  __int16 v71 = *(void **)(a1 + 712);
  if (v71 != (void *)(a1 + 720))
  {
    do
    {
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        int v72 = *((unsigned __int16 *)v71 + 20);
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v72;
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump:  Session:  : %d", buf, 8u);
        __int16 v58 = qword_100A19EF8;
      }
      __int16 v73 = (void *)v71[1];
      if (v73)
      {
        do
        {
          int v74 = v73;
          __int16 v73 = (void *)*v73;
        }
        while (v73);
      }
      else
      {
        do
        {
          int v74 = (void *)v71[2];
          BOOL v57 = *v74 == (void)v71;
          __int16 v71 = v74;
        }
        while (!v57);
      }
      __int16 v71 = v74;
    }
    while (v74 != (void *)(a1 + 720));
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    int v75 = *(char *)(a1 + 736);
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v75;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump: fLastGLobalMinRSSIApplied : %d", buf, 8u);
    __int16 v58 = qword_100A19EF8;
  }
  if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "statedump: Ready devices:", buf, 2u);
  }
  unsigned int v76 = *(const unsigned __int8 **)(a1 + 408);
  if (v76 != (const unsigned __int8 *)(a1 + 416))
  {
    do
    {
      char v77 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v76 + 32, (char *)buf);
        sub_10004191C(out, (char *)buf);
        long long v78 = out[23] >= 0 ? out : *(char **)out;
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = v78;
        _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
      }
      char v79 = (unsigned __int8 *)*((void *)v76 + 1);
      if (v79)
      {
        do
        {
          __int16 v80 = (const unsigned __int8 **)v79;
          char v79 = *(unsigned __int8 **)v79;
        }
        while (v79);
      }
      else
      {
        do
        {
          __int16 v80 = (const unsigned __int8 **)*((void *)v76 + 2);
          BOOL v57 = *v80 == v76;
          unsigned int v76 = (const unsigned __int8 *)v80;
        }
        while (!v57);
      }
      unsigned int v76 = (const unsigned __int8 *)v80;
    }
    while (v80 != (const unsigned __int8 **)(a1 + 416));
  }
  int v81 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "statedump: Devices with CL Info:", buf, 2u);
  }
  int v82 = *(const unsigned __int8 **)(a1 + 432);
  if (v82 != (const unsigned __int8 *)(a1 + 440))
  {
    do
    {
      __int16 v83 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v82 + 32, (char *)buf);
        sub_10004191C(out, (char *)buf);
        __int16 v84 = out[23] >= 0 ? out : *(char **)out;
        *(_DWORD *)int buf = 136446210;
        *(void *)&uint8_t buf[4] = v84;
        _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
      }
      __int16 v85 = (unsigned __int8 *)*((void *)v82 + 1);
      if (v85)
      {
        do
        {
          __int16 v86 = (const unsigned __int8 **)v85;
          __int16 v85 = *(unsigned __int8 **)v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          __int16 v86 = (const unsigned __int8 **)*((void *)v82 + 2);
          BOOL v57 = *v86 == v82;
          int v82 = (const unsigned __int8 *)v86;
        }
        while (!v57);
      }
      int v82 = (const unsigned __int8 *)v86;
    }
    while (v86 != (const unsigned __int8 **)(a1 + 440));
  }
  __int16 v87 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "statedump: Connecting devices:", buf, 2u);
  }
  uint64_t v88 = a1;
  long long v89 = *(const unsigned __int8 **)(a1 + 336);
  if (v89 != (const unsigned __int8 *)(a1 + 344))
  {
    __int16 v90 = (const unsigned __int8 *)(a1 + 368);
    do
    {
      *(_OWORD *)long long __p = 0uLL;
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
      }
      unsigned int v91 = off_1009F7ED8;
      char v92 = sub_100031234(v89 + 25);
      sub_1006C2D6C((uint64_t)v91, v92, (uint64_t)__p);

      uint64_t v93 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100031234(v89 + 25);
        id v195 = (id)objc_claimAutoreleasedReturnValue();
        sub_1006A9284((unint64_t *)__p);
        __int16 v94 = out;
        if (out[23] < 0) {
          __int16 v94 = *(char **)out;
        }
        int v191 = v94;
        v193 = v93;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        int v95 = off_1009F7ED8;
        v194 = sub_100031234(v89 + 25);
        int v96 = sub_1006BDC1C((uint64_t)v95, v194);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        signed int v97 = off_1009F7ED8;
        __int16 v98 = sub_100031234(v89 + 25);
        int v99 = sub_1006C5EB0((uint64_t)v97, v98);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
        }
        __int16 v100 = off_1009F7ED8;
        int v101 = sub_100031234(v89 + 25);
        int v102 = sub_1006C5FC8((uint64_t)v100, v101);
        *(_DWORD *)int buf = 138544386;
        *(void *)&uint8_t buf[4] = v195;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v191;
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = v96;
        *(_WORD *)&buf[28] = 1024;
        *(_DWORD *)&buf[30] = v99;
        *(_WORD *)&unsigned char buf[34] = 1024;
        *(_DWORD *)&buf[36] = v102;
        _os_log_impl((void *)&_mh_execute_header, v193, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@ (added %{public}s ago) useCase:%d scanDutyCycle screenON:%d screenOFF:%d", buf, 0x28u);

        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
      }
      int v103 = *(const unsigned __int8 **)(a1 + 360);
      if (v103 != v90)
      {
        do
        {
          __int16 v104 = sub_100031234(v89 + 25);
          sub_1000305AC(buf, v104);
          BOOL v105 = uuid_compare(v103 + 40, buf) == 0;

          if (v105)
          {
            __int16 v106 = qword_100A19EF8;
            if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
            {
              sub_1006ACF44();
              int v107 = buf;
              if ((buf[23] & 0x80u) != 0) {
                int v107 = *(uint8_t **)buf;
              }
              *(_DWORD *)uuid_string_t out = 136315138;
              *(void *)&_OWORD out[4] = v107;
              _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "statedump:       %s", (uint8_t *)out, 0xCu);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          __int16 v108 = (const unsigned __int8 *)*((void *)v103 + 1);
          if (v108)
          {
            do
            {
              int v109 = v108;
              __int16 v108 = *(const unsigned __int8 **)v108;
            }
            while (v108);
          }
          else
          {
            do
            {
              int v109 = (const unsigned __int8 *)*((void *)v103 + 2);
              BOOL v57 = *(void *)v109 == (void)v103;
              int v103 = v109;
            }
            while (!v57);
          }
          int v103 = v109;
        }
        while (v109 != v90);
      }
      char v110 = (unsigned __int8 *)*((void *)v89 + 1);
      if (v110)
      {
        do
        {
          v111 = (const unsigned __int8 **)v110;
          char v110 = *(unsigned __int8 **)v110;
        }
        while (v110);
      }
      else
      {
        do
        {
          v111 = (const unsigned __int8 **)*((void *)v89 + 2);
          BOOL v57 = *v111 == v89;
          long long v89 = (const unsigned __int8 *)v111;
        }
        while (!v57);
      }
      long long v89 = (const unsigned __int8 *)v111;
      uint64_t v88 = a1;
    }
    while (v111 != (const unsigned __int8 **)(a1 + 344));
  }
  long long v112 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_DEFAULT, "statedump: Disconnection reason map:", buf, 2u);
  }
  int v113 = *(const unsigned __int8 **)(v88 + 456);
  if (v113 != (const unsigned __int8 *)(v88 + 464))
  {
    do
    {
      char v114 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v113 + 28, (char *)buf);
        sub_10004191C(out, (char *)buf);
        if (out[23] >= 0) {
          id v115 = out;
        }
        else {
          id v115 = *(char **)out;
        }
        uint64_t v116 = *((int *)v113 + 11);
        id v117 = "unknown";
        if (v116 <= 0xA) {
          id v117 = (&off_1009BE3D0)[v116];
        }
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = v115;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v117;
        _os_log_impl((void *)&_mh_execute_header, v114, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:%{public}s", buf, 0x16u);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
      }
      long long v118 = (unsigned __int8 *)*((void *)v113 + 1);
      if (v118)
      {
        do
        {
          uint64_t v119 = (const unsigned __int8 **)v118;
          long long v118 = *(unsigned __int8 **)v118;
        }
        while (v118);
      }
      else
      {
        do
        {
          uint64_t v119 = (const unsigned __int8 **)*((void *)v113 + 2);
          BOOL v57 = *v119 == v113;
          int v113 = (const unsigned __int8 *)v119;
        }
        while (!v57);
      }
      int v113 = (const unsigned __int8 *)v119;
    }
    while (v119 != (const unsigned __int8 **)(v88 + 464));
  }
  id v120 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "statedump: Devices pending to go into filter accept list:", buf, 2u);
  }
  long long v224 = 0u;
  long long v225 = 0u;
  long long v222 = 0u;
  long long v223 = 0u;
  id v121 = *(id *)(a1 + 768);
  id v122 = [v121 countByEnumeratingWithState:&v222 objects:v233 count:16];
  if (v122)
  {
    uint64_t v123 = *(void *)v223;
    do
    {
      for (uint64_t i = 0; i != v122; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v223 != v123) {
          objc_enumerationMutation(v121);
        }
        id v125 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v126 = *(void *)(*((void *)&v222 + 1) + 8 * i);
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v126;
          _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      id v122 = [v121 countByEnumeratingWithState:&v222 objects:v233 count:16];
    }
    while (v122);
  }

  uint64_t v127 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "statedump: Devices pending to go out of filter accept list:", buf, 2u);
  }
  long long v220 = 0u;
  long long v221 = 0u;
  long long v218 = 0u;
  long long v219 = 0u;
  id v128 = *(id *)(a1 + 776);
  id v129 = [v128 countByEnumeratingWithState:&v218 objects:v232 count:16];
  if (v129)
  {
    uint64_t v130 = *(void *)v219;
    do
    {
      for (j = 0; j != v129; j = (char *)j + 1)
      {
        if (*(void *)v219 != v130) {
          objc_enumerationMutation(v128);
        }
        id v132 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v133 = *(void *)(*((void *)&v218 + 1) + 8 * (void)j);
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v133;
          _os_log_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      id v129 = [v128 countByEnumeratingWithState:&v218 objects:v232 count:16];
    }
    while (v129);
  }

  char v134 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "statedump: Devices pending to get updated in FilterAcceptList:", buf, 2u);
  }
  long long v216 = 0u;
  long long v217 = 0u;
  long long v214 = 0u;
  long long v215 = 0u;
  id v135 = *(id *)(a1 + 784);
  id v136 = [v135 countByEnumeratingWithState:&v214 objects:v231 count:16];
  if (v136)
  {
    uint64_t v137 = *(void *)v215;
    do
    {
      for (k = 0; k != v136; k = (char *)k + 1)
      {
        if (*(void *)v215 != v137) {
          objc_enumerationMutation(v135);
        }
        v139 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v140 = *(void *)(*((void *)&v214 + 1) + 8 * (void)k);
          *(_DWORD *)int buf = 138412290;
          *(void *)&uint8_t buf[4] = v140;
          _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "statedump:    %@", buf, 0xCu);
        }
      }
      id v136 = [v135 countByEnumeratingWithState:&v214 objects:v231 count:16];
    }
    while (v136);
  }

  int v141 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v141, OS_LOG_TYPE_DEFAULT, "statedump: Overflowed connecting devices:", buf, 2u);
  }
  long long v212 = 0u;
  long long v213 = 0u;
  long long v210 = 0u;
  long long v211 = 0u;
  id v142 = *(id *)(a1 + 752);
  id v143 = [v142 countByEnumeratingWithState:&v210 objects:v230 count:16];
  if (v143)
  {
    uint64_t v144 = *(void *)v211;
    do
    {
      for (m = 0; m != v143; m = (char *)m + 1)
      {
        if (*(void *)v211 != v144) {
          objc_enumerationMutation(v142);
        }
        int v146 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v147 = *(void *)(*((void *)&v210 + 1) + 8 * (void)m);
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v147;
          _os_log_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      id v143 = [v142 countByEnumeratingWithState:&v210 objects:v230 count:16];
    }
    while (v143);
  }

  v148 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEFAULT, "statedump: Blocked connecting devices:", buf, 2u);
  }
  long long v208 = 0u;
  long long v209 = 0u;
  long long v206 = 0u;
  long long v207 = 0u;
  id v149 = *(id *)(a1 + 760);
  id v150 = [v149 countByEnumeratingWithState:&v206 objects:v229 count:16];
  if (v150)
  {
    uint64_t v151 = *(void *)v207;
    do
    {
      for (n = 0; n != v150; n = (char *)n + 1)
      {
        if (*(void *)v207 != v151) {
          objc_enumerationMutation(v149);
        }
        v153 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v154 = *(void *)(*((void *)&v206 + 1) + 8 * (void)n);
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v154;
          _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      id v150 = [v149 countByEnumeratingWithState:&v206 objects:v229 count:16];
    }
    while (v150);
  }

  int v155 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "statedump: Disconnecting devices:", buf, 2u);
  }
  long long v204 = 0u;
  long long v205 = 0u;
  long long v202 = 0u;
  long long v203 = 0u;
  id v156 = *(id *)(a1 + 744);
  id v157 = [v156 countByEnumeratingWithState:&v202 objects:v228 count:16];
  if (v157)
  {
    uint64_t v158 = *(void *)v203;
    do
    {
      for (iuint64_t i = 0; ii != v157; iuint64_t i = (char *)ii + 1)
      {
        if (*(void *)v203 != v158) {
          objc_enumerationMutation(v156);
        }
        int v160 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v161 = *(void *)(*((void *)&v202 + 1) + 8 * (void)ii);
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v161;
          _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      id v157 = [v156 countByEnumeratingWithState:&v202 objects:v228 count:16];
    }
    while (v157);
  }

  v162 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEFAULT, "statedump: Requiring low latency devices:", buf, 2u);
  }
  long long v200 = 0u;
  long long v201 = 0u;
  long long v198 = 0u;
  long long v199 = 0u;
  id v163 = *(id *)(a1 + 824);
  id v164 = [v163 countByEnumeratingWithState:&v198 objects:v227 count:16];
  if (v164)
  {
    uint64_t v165 = *(void *)v199;
    do
    {
      for (jj = 0; jj != v164; jj = (char *)jj + 1)
      {
        if (*(void *)v199 != v165) {
          objc_enumerationMutation(v163);
        }
        int v167 = qword_100A19EF8;
        if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v168 = *(void *)(*((void *)&v198 + 1) + 8 * (void)jj);
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v168;
          _os_log_impl((void *)&_mh_execute_header, v167, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@", buf, 0xCu);
        }
      }
      id v164 = [v163 countByEnumeratingWithState:&v198 objects:v227 count:16];
    }
    while (v164);
  }

  uint64_t v169 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_DEFAULT, "statedump: Incoming LE Connection Deny List:", buf, 2u);
  }
  uint64_t v170 = *(void **)(a1 + 1432);
  if (v170 != (void *)(a1 + 1440))
  {
    do
    {
      int v171 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1006A5CBC(v170 + 6);
        uint64_t v172 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&_OWORD out[4] = v172;
        _os_log_impl((void *)&_mh_execute_header, v171, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)out, 0xCu);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v173 = (void *)v170[1];
      if (v173)
      {
        do
        {
          v174 = v173;
          uint64_t v173 = (void *)*v173;
        }
        while (v173);
      }
      else
      {
        do
        {
          v174 = (void *)v170[2];
          BOOL v57 = *v174 == (void)v170;
          uint64_t v170 = v174;
        }
        while (!v57);
      }
      uint64_t v170 = v174;
    }
    while (v174 != (void *)(a1 + 1440));
  }
  char v175 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "statedump: Outgoing LE Connection Deny List:", buf, 2u);
  }
  int v176 = *(void **)(a1 + 1456);
  if (v176 != (void *)(a1 + 1464))
  {
    do
    {
      char v177 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        sub_1006A5CBC(v176 + 6);
        char v178 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)uuid_string_t out = 136446210;
        *(void *)&_OWORD out[4] = v178;
        _os_log_impl((void *)&_mh_execute_header, v177, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", (uint8_t *)out, 0xCu);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
      }
      __uint64_t v179 = (void *)v176[1];
      if (v179)
      {
        do
        {
          uint64_t v180 = v179;
          __uint64_t v179 = (void *)*v179;
        }
        while (v179);
      }
      else
      {
        do
        {
          uint64_t v180 = (void *)v176[2];
          BOOL v57 = *v180 == (void)v176;
          int v176 = v180;
        }
        while (!v57);
      }
      int v176 = v180;
    }
    while (v180 != (void *)(a1 + 1464));
  }
  v181 = qword_100A19EF8;
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v181, OS_LOG_TYPE_DEFAULT, "statedump: Controller AutoReconnect map:", buf, 2u);
  }
  v182 = *(const unsigned __int8 **)(a1 + 800);
  if (v182 != (const unsigned __int8 *)(a1 + 808))
  {
    do
    {
      unint64_t v183 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v182 + 26, (char *)buf);
        sub_10004191C(out, (char *)buf);
        BOOL v184 = out[23] >= 0 ? out : *(char **)out;
        int v185 = *((unsigned __int16 *)v182 + 21);
        *(_DWORD *)int buf = 136446466;
        *(void *)&uint8_t buf[4] = v184;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v185;
        _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s timeout:%d", buf, 0x12u);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }
      }
      v186 = (unsigned __int8 *)*((void *)v182 + 1);
      if (v186)
      {
        do
        {
          id v187 = (const unsigned __int8 **)v186;
          v186 = *(unsigned __int8 **)v186;
        }
        while (v186);
      }
      else
      {
        do
        {
          id v187 = (const unsigned __int8 **)*((void *)v182 + 2);
          BOOL v57 = *v187 == v182;
          v182 = (const unsigned __int8 *)v187;
        }
        while (!v57);
      }
      v182 = (const unsigned __int8 *)v187;
    }
    while (v187 != (const unsigned __int8 **)(a1 + 808));
  }
  sub_10069FDA8((void *)a1);
  sub_1006A01FC((void *)a1);
}

void sub_1006A90F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006A9284(unint64_t *a1)
{
  unint64_t v1 = *a1;
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  sub_10004C67C((uint64_t)&v12);
  if (v1 >> 7 >= 0x2A3)
  {
    uint64_t v2 = std::ostream::operator<<();
    sub_10003AB28(v2);
  }
  unint64_t v3 = v1 % 0x15180;
  if (v3 >= 0xE10)
  {
    uint64_t v4 = std::ostream::operator<<();
    sub_10003AB28(v4);
  }
  if (v3 % 0xE10 >= 0x3C)
  {
    uint64_t v5 = std::ostream::operator<<();
    sub_10003AB28(v5);
  }
  uint64_t v6 = std::ostream::operator<<();
  id v7 = (uint64_t *)sub_10003AB28(v6);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + 16) = 3;
  *(uint64_t *)((char *)v7 + *(void *)(v8 - 24) + 24) = 3;
  unsigned __int8 v11 = 48;
  sub_10004C5B4(v7, &v11);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)&v12
  *(void *)&long long v13 = v9;
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1006A9574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100742518((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006A958C(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int8 v4 = *(unsigned char *)(a1 + 48);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 49);
  int v6 = *(_DWORD *)(a1 + 40);
  int v7 = *(_DWORD *)(a1 + 44);

  sub_10067713C((uint64_t)v2, v3, v4, v6, v5, v7);
}

void sub_1006A9600()
{
}

uint64_t sub_1006A9614(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_1006A9648()
{
}

uint64_t sub_1006A965C(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BE0F8);
  }
  uint64_t v2 = off_1009F7EB8;

  return sub_100699B28((uint64_t)v2, (unsigned __int8 *)(a1 + 24));
}

void sub_1006A96C0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006A96C0(a1, *a2);
    sub_1006A96C0(a1, a2[1]);
    sub_1006A971C(a2 + 4);
    operator delete(a2);
  }
}

void sub_1006A971C(void *a1)
{
  uint64_t v2 = (void *)a1[8];
  if (v2)
  {
    a1[9] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[2];
}

void sub_1006A9760(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006A9760(a1, *a2);
    sub_1006A9760(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_1006A97C4(id a1)
{
}

void sub_1006A9808()
{
}

uint64_t *sub_1006A982C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006A98D0((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006A98D0(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unsigned __int8 v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006A9934(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_1006A994C(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unsigned __int8 v11 = operator new(0x28uLL);
    v11[7] = **a4;
    *((_WORD *)v11 + 16) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *sub_1006A9A10(uint64_t **a1, unsigned int *a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v10 = 0;
  int v6 = sub_1006A9AA0((uint64_t)a1, &v10, a2);
  int v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    int v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = **a4;
    *((unsigned char *)v7 + 36) = 0;
    sub_100036CA0(a1, v10, v8, v7);
  }
  return (char *)v7;
}

uint64_t *sub_1006A9AA0(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned __int8 v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  unsigned __int8 v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    int v7 = a3[1];
    do
    {
      while (1)
      {
        unsigned int v8 = v4;
        unsigned int v9 = *((_DWORD *)v4 + 7);
        int v10 = *((_DWORD *)v8 + 8);
        BOOL v11 = v7 < v10;
        if (v6 != v9) {
          BOOL v11 = v6 < v9;
        }
        if (!v11) {
          break;
        }
        unsigned __int8 v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_15;
        }
      }
      BOOL v12 = v10 < v7;
      if (v6 == v9) {
        BOOL v13 = v12;
      }
      else {
        BOOL v13 = v9 < v6;
      }
      if (!v13) {
        break;
      }
      uint64_t result = v8 + 1;
      unsigned __int8 v4 = (uint64_t *)v8[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v8 = result;
  }
LABEL_15:
  *a2 = v8;
  return result;
}

void sub_1006A9B20(id a1)
{
}

void sub_1006A9B64()
{
}

uint64_t sub_1006A9B88(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  int v6 = a2[1];
  uint64_t v7 = v2;
  do
  {
    unsigned int v8 = *(_DWORD *)(v3 + 28);
    BOOL v10 = v8 == v5;
    BOOL v9 = v8 < v5;
    if (v10) {
      BOOL v9 = *(_DWORD *)(v3 + 32) < v6;
    }
    BOOL v10 = !v9;
    if (v9) {
      BOOL v11 = (uint64_t *)(v3 + 8);
    }
    else {
      BOOL v11 = (uint64_t *)v3;
    }
    if (v10) {
      uint64_t v7 = v3;
    }
    uint64_t v3 = *v11;
  }
  while (*v11);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v12 = *(_DWORD *)(v7 + 28);
  BOOL v13 = v6 < *(_DWORD *)(v7 + 32);
  BOOL v10 = v5 == v12;
  BOOL v14 = v5 < v12;
  if (v10) {
    BOOL v14 = v13;
  }
  if (v14) {
    return v2;
  }
  return v7;
}

void sub_1006A9BFC(id a1)
{
}

void sub_1006A9C40()
{
}

void sub_1006A9C64(id a1)
{
}

void sub_1006A9DF4()
{
}

void sub_1006A9E18(id a1)
{
}

void sub_1006A9E5C()
{
}

void sub_1006A9E80(id a1)
{
}

void sub_1006A9EC4()
{
}

char *sub_1006A9EE8(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v20 = &v19[8 * v16];
    long long __p = v19;
    long long v27 = v20;
    long long v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        long long v23 = (char *)sub_1000405F8(v8, v22);
        long long v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        long long v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)long long v20 = *(void *)v3;
    long long v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    BOOL v9 = __src + 8;
    BOOL v10 = v6 - 8;
    BOOL v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1006AA0F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AA128(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = uuid_compare((const unsigned __int8 *)(v3 + 26), uu2);
    unint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      unint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || uuid_compare(uu2, (const unsigned __int8 *)(v5 + 26)) < 0) {
    return v2;
  }
  return v5;
}

uint64_t *sub_1006AA1A4(uint64_t **a1, unsigned __int8 *uu1, const unsigned __int8 *a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = (uint64_t **)sub_1006AA230((uint64_t)a1, &v8, uu1);
  uint64_t result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_1006AA2C4((uint64_t)a1, a3, v7);
    sub_100036CA0(a1, v8, v5, (uint64_t *)v7[0]);
    return (uint64_t *)v7[0];
  }
  return result;
}

void *sub_1006AA230(uint64_t a1, void *a2, unsigned __int8 *uu1)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        uint64_t v8 = (const unsigned __int8 *)(v4 + 25);
        if ((uuid_compare(uu1, (const unsigned __int8 *)(v4 + 25)) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((uuid_compare(v8, uu1) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1006AA2C4(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 25, a2);
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AA324(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AA33C(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  int v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_1006AA400(a1, a4, v11);
    sub_100036CA0((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    return v11[0];
  }
  return (uint64_t *)v8;
}

void sub_1006AA400(uint64_t a1@<X0>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  *((void *)v6 + 4) = **a2;
  uuid_clear((unsigned __int8 *)v6 + 40);
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AA468(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AA480(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AA524((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_1006AA524@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  int v6 = a3 + 1;
  unint64_t v7 = (char *)operator new(0x50uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_10003B098(result, *(void **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }
  *((void *)v7 + 7) = 0;
  *((void *)v7 + 8) = 0;
  *((_DWORD *)v7 + 18) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006AA5C0(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  sub_1002B386C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AA5DC(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_1006AA680((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AA714((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void *sub_1006AA680(uint64_t a1, void *a2, unsigned __int8 *uu1)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v7 = (void *)v4;
        uint64_t v8 = (const unsigned __int8 *)(v4 + 28);
        if ((uuid_compare(uu1, (const unsigned __int8 *)(v4 + 28)) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((uuid_compare(v8, uu1) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1006AA714(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 28, *a2);
  *((_DWORD *)v6 + 11) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AA778(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1006AA790(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = uuid_compare((const unsigned __int8 *)(v3 + 28), uu2);
    unint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      unint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || uuid_compare(uu2, (const unsigned __int8 *)(v5 + 28)) < 0) {
    return v2;
  }
  return v5;
}

uint64_t *sub_1006AA80C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_1006AA680((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AA8B0((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

double sub_1006AA8B0@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy((unsigned __int8 *)v6 + 28, *a2);
  *((_DWORD *)v6 + 19) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 60) = 0u;
  *(_OWORD *)(v6 + 44) = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006AA920(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t **sub_1006AA938(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    BOOL v11 = operator new(0x38uLL);
    uint64_t v12 = **a4;
    v11[24] = 0;
    *((void *)v11 + 4) = v12;
    *((void *)v11 + 5) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_1006AA9FC(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AAAA0((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006AAAA0(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  int v6 = a3 + 1;
  unint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 7) = 0;
  *((void *)v7 + 8) = 0;
  *((void *)v7 + 6) = v7 + 56;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AAB1C(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  sub_1005B8F8C(v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1006AAB38(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = uuid_compare((const unsigned __int8 *)(v3 + 25), uu2);
    unint64_t v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      unint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || uuid_compare(uu2, (const unsigned __int8 *)(v5 + 25)) < 0) {
    return v2;
  }
  return v5;
}

uint64_t *sub_1006AABB4(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AAC58((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006AAC58(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AACBC(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AACD4(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AAD78((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006AAD78(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AADDC(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AADF4(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  int v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_1006AAEB8(a1, a4, v11);
    sub_100036CA0((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    return v11[0];
  }
  return (uint64_t *)v8;
}

void sub_1006AAEB8(uint64_t a1@<X0>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  *((void *)v6 + 4) = **a2;
  uuid_clear((unsigned __int8 *)v6 + 40);
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AAF20(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AAF38(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AAFDC((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006AAFDC(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AB040(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1006AB058(id a1)
{
}

void sub_1006AB09C()
{
}

void sub_1006AB0C0(id a1)
{
}

void sub_1006AB104()
{
}

uint64_t sub_1006AB128(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = *(unsigned __int8 **)a1;
  uint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 60) {
    abort();
  }
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v7 = a1 + 16;
  uint64_t v9 = v8 - (void)v2;
  if (v9 >> 3 > v4) {
    unint64_t v4 = v9 >> 3;
  }
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v10 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    BOOL v11 = (char *)sub_10036C440(v7, v10);
  }
  else {
    BOOL v11 = 0;
  }
  long long __p = v11;
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)&v11[16 * v3];
  uint64_t v17 = &v11[16 * v10];
  uuid_copy(v15, a2);
  uint64_t v16 = v15 + 16;
  sub_1006AB250((unsigned __int8 **)a1, &__p);
  uint64_t v12 = *(void *)(a1 + 8);
  if (v16 != v15) {
    v16 += (v15 - v16 + 15) & 0xFFFFFFFFFFFFFFF0;
  }
  if (__p) {
    operator delete(__p);
  }
  return v12;
}

void sub_1006AB218(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006AB250(unsigned __int8 **a1, void *a2)
{
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  int v6 = (unsigned __int8 *)a2[1];
  while (v4 != v5)
  {
    v6 -= 16;
    v4 -= 16;
    uuid_copy(v6, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = (unsigned __int8 *)a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = (unsigned __int8 *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

uint64_t *sub_1006AB2E4(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_1006AB388((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AB41C((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void *sub_1006AB388(uint64_t a1, void *a2, unsigned __int8 *uu1)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        uint64_t v8 = (const unsigned __int8 *)(v4 + 26);
        if ((uuid_compare(uu1, (const unsigned __int8 *)(v4 + 26)) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((uuid_compare(v8, uu1) & 0x80000000) == 0) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1006AB41C(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 26, *a2);
  *((_WORD *)v6 + 21) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AB480(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1006AB498(id a1)
{
}

void sub_1006AB4DC()
{
}

void sub_1006AB500(id a1)
{
}

void sub_1006AB544()
{
}

uint64_t *sub_1006AB568(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_1006AB388((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AB60C((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006AB60C(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 26, *a2);
  *((_WORD *)v6 + 21) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AB670(_Unwind_Exception *a1)
{
  *unint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1006AB688(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t *)sub_1006AA790((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10004D3B8(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t sub_1006AB6DC(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t *)sub_1006AA128((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10004D3B8(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t *sub_1006AB730(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10033CE5C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1006AB770(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AB788(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_1006AA680((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AB82C((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

double sub_1006AB82C@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy((unsigned __int8 *)v6 + 28, *a2);
  *((_DWORD *)v6 + 19) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 60) = 0u;
  *(_OWORD *)(v6 + 44) = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006AB89C(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AB8B4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10033CE5C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1006AB8F4(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void *sub_1006AB90C(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    int v6 = a1;
    do
    {
      uint64_t v7 = operator new(0x20uLL);
      v7[1] = *(_OWORD *)(v3 + 16);
      *(void *)uint64_t v7 = v6;
      *((void *)v7 + 1) = a1;
      *((void *)v6 + 1) = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_1006AB994(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

char *sub_1006AB9A8(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  int v6 = (char **)sub_1000314CC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1006ABA60((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, (uint64_t *)v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1006ABB30((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_1006ABA60@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, char **a3@<X8>)
{
  uint64_t v5 = (char *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  double result = sub_1006ABAD4(v6 + 32, *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006ABABC(_Unwind_Exception *a1)
{
  sub_1006ABB30(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1006ABAD4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  *((void *)__dst + 3) = __dst + 24;
  *((void *)__dst + 4) = __dst + 24;
  *((void *)__dst + 5) = 0;
  return __dst;
}

void sub_1006ABB30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10030BF04((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_1006ABB88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  for (uint64_t i = (uint64_t *)a1[1]; a2 != a3 && i != a1; uint64_t i = (uint64_t *)i[1])
  {
    *((_OWORD *)i + 1) = *(_OWORD *)(a2 + 16);
    a2 = *(void *)(a2 + 8);
  }
  if (i == a1) {
    return sub_1006ABBD8((uint64_t)a1, a1, a2, a3);
  }
  else {
    return sub_1004B7760((uint64_t)a1, i, a1);
  }
}

uint64_t *sub_1006ABBD8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (a3 != a4)
  {
    uint64_t v8 = operator new(0x20uLL);
    uint64_t v9 = v8;
    *uint64_t v8 = 0;
    v8[1] = 0;
    *((_OWORD *)v8 + 1) = *(_OWORD *)(a3 + 16);
    uint64_t v10 = *(void *)(a3 + 8);
    uint64_t v11 = 1;
    if (v10 != a4)
    {
      uint64_t v12 = v8;
      do
      {
        uint64_t v8 = operator new(0x20uLL);
        *uint64_t v8 = v12;
        v8[1] = 0;
        *((_OWORD *)v8 + 1) = *(_OWORD *)(v10 + 16);
        v12[1] = v8;
        ++v11;
        uint64_t v10 = *(void *)(v10 + 8);
        uint64_t v12 = v8;
      }
      while (v10 != a4);
    }
    uint64_t v13 = *a2;
    *(void *)(v13 + 8) = v9;
    void *v9 = v13;
    *a2 = (uint64_t)v8;
    v8[1] = a2;
    *(void *)(a1 + 16) += v11;
    return v9;
  }
  return a2;
}

uint64_t *sub_1006ABCAC(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  int v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v9, a2);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006ABD50((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_1006ABD50@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  int v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  double result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    double result = sub_10003B098(result, *(void **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)double result = v10;
  }
  *((_DWORD *)v7 + 14) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006ABDE8(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1002B386C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006ABE04(uint64_t **a1, uint64_t *a2, unint64_t a3, unsigned int (**a4)(uint64_t, uint64_t))
{
  uint64_t v4 = a1;
  if (a3 >= 2)
  {
    if (a3 == 2)
    {
      uint64_t v7 = (uint64_t *)*a2;
      if ((*a4)(*a2 + 16, (uint64_t)(a1 + 2)))
      {
        uint64_t v8 = *v7;
        *(void *)(v8 + 8) = v7[1];
        *(void *)v7[1] = v8;
        uint64_t v9 = *v4;
        v9[1] = (uint64_t)v7;
        *uint64_t v7 = (uint64_t)v9;
        *uint64_t v4 = v7;
        v7[1] = (uint64_t)v4;
        return v7;
      }
    }
    else
    {
      unint64_t v11 = a3 >> 1;
      unint64_t v12 = (a3 >> 1) + 1;
      uint64_t v13 = a1;
      do
      {
        uint64_t v13 = (uint64_t **)v13[1];
        --v12;
      }
      while (v12 > 1);
      unint64_t v14 = (uint64_t **)sub_1006ABE04(a1, v13, a3 >> 1, a4);
      uint64_t v4 = (uint64_t **)sub_1006ABE04(v13, a2, a3 - v11, a4);
      if ((*a4)((uint64_t)(v4 + 2), (uint64_t)(v14 + 2)))
      {
        for (uint64_t i = v4[1]; i != a2; uint64_t i = (uint64_t *)i[1])
        {
          if (!(*a4)((uint64_t)(i + 2), (uint64_t)(v14 + 2))) {
            goto LABEL_14;
          }
        }
        uint64_t i = a2;
LABEL_14:
        uint64_t v17 = *i;
        uint64_t v18 = *v4;
        v18[1] = *(void *)(*i + 8);
        **(void **)(v17 + 8) = v18;
        long long v19 = *v14;
        uint64_t v16 = v14[1];
        v19[1] = (uint64_t)v4;
        *uint64_t v4 = v19;
        *unint64_t v14 = (uint64_t *)v17;
        *(void *)(v17 + 8) = v14;
      }
      else
      {
        uint64_t v16 = v14[1];
        uint64_t i = (uint64_t *)v4;
        uint64_t v4 = v14;
      }
      if (v16 != i && i != a2)
      {
        long long v20 = i;
        do
        {
          if ((*a4)((uint64_t)(i + 2), (uint64_t)(v16 + 2)))
          {
            for (j = (uint64_t *)i[1]; j != a2; j = (uint64_t *)j[1])
            {
              if (!(*a4)((uint64_t)(j + 2), (uint64_t)(v16 + 2))) {
                goto LABEL_25;
              }
            }
            j = a2;
LABEL_25:
            uint64_t v22 = *j;
            uint64_t v23 = *i;
            *(void *)(v23 + 8) = *(void *)(*j + 8);
            **(void **)(v22 + 8) = v23;
            if (v20 == i) {
              long long v20 = j;
            }
            uint64_t v25 = *v16;
            uint64_t v24 = (uint64_t *)v16[1];
            *(void *)(v25 + 8) = i;
            uint64_t *i = v25;
            uint64_t *v16 = v22;
            *(void *)(v22 + 8) = v16;
            uint64_t v16 = v24;
            uint64_t i = j;
          }
          else
          {
            uint64_t v16 = (uint64_t *)v16[1];
          }
        }
        while (v16 != v20 && i != a2);
      }
    }
  }
  return (uint64_t *)v4;
}

uint64_t *sub_1006AC014(uint64_t **a1, unsigned __int8 *uu1, const unsigned __int8 *a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = (uint64_t **)sub_1006AA230((uint64_t)a1, &v8, uu1);
  double result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_1006AC0A0((uint64_t)a1, a3, v7);
    sub_100036CA0(a1, v8, v5, (uint64_t *)v7[0]);
    return (uint64_t *)v7[0];
  }
  return result;
}

void sub_1006AC0A0(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (unsigned __int8 *)operator new(0x30uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 25, a2);
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006AC100(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1006AC118(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_1006AC16C((uint64_t)v2, *v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_1006AC16C(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 40)
  {

    uint64_t v5 = *(void **)(i - 40);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t *sub_1006AC1C0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 40);
    v2 -= 40;
    *(void *)uint64_t v2 = 0;
    *(void *)(v4 - 40) = v5;
    v4 -= 40;
    long long v6 = *(_OWORD *)(v2 + 8);
    *(_DWORD *)(v4 + 24) = *(_DWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    uint64_t v7 = *(void *)(v2 + 32);
    *(void *)(v2 + 32) = 0;
    *(void *)(v4 + 32) = v7;
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  uint64_t *result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1006AC238(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1006AC270(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
  }
}

void *sub_1006AC2CC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_100503320(result, a4);
    double result = (void *)sub_1006AC32C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_1006AC324(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1006AC32C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)a4 = *(id *)v6;
      long long v7 = *(_OWORD *)(v6 + 8);
      *(_DWORD *)(a4 + 24) = *(_DWORD *)(v6 + 24);
      *(_OWORD *)(a4 + 8) = v7;
      *(void *)(a4 + 32) = objc_retainBlock(*(id *)(v6 + 32));
      a4 += 40;
      v6 += 40;
    }
    while (v6 != a3);
  }
  return a4;
}

uint64_t sub_1006AC3A0(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t *)sub_1006AAB38((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10004D3B8(a1, v3);
  operator delete(v4);
  return 1;
}

void sub_1006AC3F4(id a1)
{
}

uint64_t *sub_1006AC438(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AC4DC((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

double sub_1006AC4DC@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  long long v7 = (unsigned __int8 *)operator new(0x78uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 14) = 0;
  double result = 0.0;
  *((_OWORD *)v7 + 5) = 0u;
  *((_OWORD *)v7 + 6) = 0u;
  *((_OWORD *)v7 + 3) = 0u;
  *((_OWORD *)v7 + 4) = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006AC560(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_1006AC57C(v3, v2);
  _Unwind_Resume(a1);
}

void sub_1006AC57C(uint64_t a1, id *a2)
{
  if (*(unsigned char *)(a1 + 8))
  {
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

uint64_t sub_1006AC5DC(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_1000308C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_1006AC624(a1, v3);
  return 1;
}

uint64_t *sub_1006AC624(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_10004D3B8(a1, (uint64_t *)a2);

  operator delete((void *)a2);
  return v3;
}

unsigned __int8 *sub_1006AC668(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (unsigned __int8 **)sub_10004A0BC((uint64_t)a1, &v11, uu1);
  long long v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1006AC720((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, (uint64_t *)v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_1006AC7A8((uint64_t)v10, 0);
  }
  return v7;
}

double sub_1006AC720@<D0>(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (unsigned __int8 *)operator new(0x78uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 14) = 0;
  double result = 0.0;
  *((_OWORD *)v6 + 5) = 0u;
  *((_OWORD *)v6 + 6) = 0u;
  *((_OWORD *)v6 + 3) = 0u;
  *((_OWORD *)v6 + 4) = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006AC790(_Unwind_Exception *a1)
{
  sub_1006AC7A8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1006AC7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1006A971C(v2 + 4);
    }
    operator delete(v2);
  }
}

uint64_t sub_1006AC800(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t *)sub_1000308C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10004D3B8(a1, v3);
  sub_1006A971C(v4 + 4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_1006AC85C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1006AC8B4(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1006AC89C(_Unwind_Exception *a1)
{
  sub_1006A96C0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1006AC8B4(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      double result = sub_1006AC940(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      long long v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          long long v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1006AC940(uint64_t **a1, uint64_t *a2, unsigned __int8 *uu2, uint64_t a4)
{
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  uint64_t v6 = sub_1006AC9E4(a1, a2, &v12, &v11, uu2);
  long long v7 = *(uint64_t **)v6;
  if (!*(void *)v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1006ACB7C((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_1006AC7A8((uint64_t)v10, 0);
  }
  return v7;
}

const unsigned __int8 *sub_1006AC9E4(void *a1, uint64_t *a2, const unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *uu2)
{
  BOOL v9 = (const unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || uuid_compare(uu2, (const unsigned __int8 *)a2 + 32) < 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      unint64_t v12 = (const unsigned __int8 *)a2;
    }
    else
    {
      uint64_t v11 = (const unsigned __int8 *)*a2;
      if (*a2)
      {
        do
        {
          unint64_t v12 = v11;
          uint64_t v11 = (const unsigned __int8 *)*((void *)v11 + 1);
        }
        while (v11);
      }
      else
      {
        uint64_t v16 = a2;
        do
        {
          unint64_t v12 = (const unsigned __int8 *)v16[2];
          BOOL v17 = *(void *)v12 == (void)v16;
          uint64_t v16 = (uint64_t *)v12;
        }
        while (v17);
      }
      if ((uuid_compare(v12 + 32, uu2) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (const unsigned __int8 *)a2;
      return (const unsigned __int8 *)a2;
    }
  }
  if ((uuid_compare((const unsigned __int8 *)a2 + 32, uu2) & 0x80000000) == 0)
  {
    *a3 = (const unsigned __int8 *)a2;
    *a4 = (uint64_t)a2;
    return (const unsigned __int8 *)a4;
  }
  a4 = a2 + 1;
  uint64_t v13 = a2[1];
  if (v13)
  {
    unint64_t v14 = (const unsigned __int8 *)a2[1];
    do
    {
      unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = v14;
      unint64_t v14 = *(const unsigned __int8 **)v14;
    }
    while (v14);
  }
  else
  {
    long long v19 = (const unsigned __int8 *)a2;
    do
    {
      unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (const unsigned __int8 *)*((void *)v19 + 2);
      BOOL v17 = *(void *)v15 == (void)v19;
      long long v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const unsigned __int8 *)a2;
    }
    return (const unsigned __int8 *)a4;
  }
  if (uuid_compare(uu2, v15 + 32) < 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:

  return (const unsigned __int8 *)sub_10004A0BC((uint64_t)a1, a3, uu2);
}

uint64_t sub_1006ACB7C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x78uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1006ACBF0((uint64_t)v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006ACBD8(_Unwind_Exception *a1)
{
  sub_1006AC7A8(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1006ACBF0(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = *(id *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  sub_1002EACE8((void *)(a1 + 64), a2 + 64);
  return a1;
}

void sub_1006ACC4C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1006ACC78(void *result, unsigned __int16 a2, uint64_t a3, float a4)
{
  if (v4 >= 0) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = (void *)*result;
  }
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = v5;
  *(_WORD *)(a3 + 12) = 1024;
  *(_DWORD *)(a3 + 14) = a2;
  return result;
}

void *sub_1006ACCA0(const unsigned __int8 *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  return sub_100401EBC(a1, (uint64_t *)va);
}

void sub_1006ACCB8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, (uint8_t *)va, 0xEu);
}

void sub_1006ACD00(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1006ACD50(void *a1, uint64_t a2, uint64_t a3, const char *a4)
{
  _os_log_debug_impl(a1, v4, OS_LOG_TYPE_DEBUG, a4, v5, 0xCu);
}

void sub_1006ACD70()
{
  sub_1002B80C0(&stru_100A1A140);
  __cxa_atexit((void (*)(void *))sub_1002B812C, &stru_100A1A140, (void *)&_mh_execute_header);
  sub_1002B80C0(&stru_100A1A170);
  __cxa_atexit((void (*)(void *))sub_1002B812C, &stru_100A1A170, (void *)&_mh_execute_header);
  sub_100052DA8(&unk_100A1A1A0);
  __cxa_atexit((void (*)(void *))sub_100052DA4, &unk_100A1A1A0, (void *)&_mh_execute_header);
  sub_100052DA8(&unk_100A1A1E0);
  __cxa_atexit((void (*)(void *))sub_100052DA4, &unk_100A1A1E0, (void *)&_mh_execute_header);
  sub_1002B80C0(&stru_100A1A228);
  __cxa_atexit((void (*)(void *))sub_1002B812C, &stru_100A1A228, (void *)&_mh_execute_header);
  sub_100052DA8(&unk_100A1A258);
  __cxa_atexit((void (*)(void *))sub_100052DA4, &unk_100A1A258, (void *)&_mh_execute_header);
}

id sub_1006ACEAC()
{
  sub_1006ACF44();
  if (v4 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  uint64_t v1 = +[NSString stringWithUTF8String:p_p];
  if (v4 < 0) {
    operator delete(__p);
  }

  return v1;
}

void sub_1006ACF28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006ACF44()
{
  uint64_t v32 = 0;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v21 = 0u;
  memset(v19, 0, sizeof(v19));
  sub_1000419CC((uint64_t)v19);
  *(_DWORD *)((char *)v19 + *(void *)(*(void *)&v19[0] - 24) + 8) |= 0x4000u;
  unsigned __int8 v18 = 48;
  uint64_t v0 = sub_10004C5B4(v19, &v18);
  uint64_t v1 = *v0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 - 24) + 24) = 2;
  *(_DWORD *)((char *)v0 + *(void *)(v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v0 + *(void *)(v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v2 = std::ostream::operator<<();
  uint64_t v3 = (uint64_t *)sub_10003AB28(v2);
  uint64_t v4 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = 2;
  *(_DWORD *)((char *)v3 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v5 = std::ostream::operator<<();
  uint64_t v6 = (uint64_t *)sub_10003AB28(v5);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = std::ostream::operator<<();
  BOOL v9 = (uint64_t *)sub_10003AB28(v8);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 2;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v11 = std::ostream::operator<<();
  unint64_t v12 = (uint64_t *)sub_10003AB28(v11);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v14 = std::ostream::operator<<();
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (uint64_t *)sub_10003AB28(v14);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 2;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (SHIBYTE(v21) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006AD3C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10027E318((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1006AD3F0()
{
  sub_10004BDF8();
  if (v4 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  uint64_t v1 = +[NSString stringWithUTF8String:p_p];
  if (v4 < 0) {
    operator delete(__p);
  }

  return v1;
}

void sub_1006AD46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1006AD488()
{
  sub_1006AD520();
  if (v4 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  uint64_t v1 = +[NSString stringWithUTF8String:p_p];
  if (v4 < 0) {
    operator delete(__p);
  }

  return v1;
}

void sub_1006AD504(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006AD520()
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v22 = 0u;
  memset(v20, 0, sizeof(v20));
  sub_1000419CC((uint64_t)v20);
  *(_DWORD *)((char *)v20 + *(void *)(*(void *)&v20[0] - 24) + 8) |= 0x4000u;
  unsigned __int8 v19 = 48;
  uint64_t v0 = sub_10004C5B4(v20, &v19);
  uint64_t v1 = *v0;
  *(uint64_t *)((char *)v0 + *(void *)(*v0 - 24) + 24) = 2;
  *(_DWORD *)((char *)v0 + *(void *)(v1 - 24) + 8) = *(_DWORD *)((unsigned char *)v0 + *(void *)(v1 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v2 = std::ostream::operator<<();
  uint64_t v3 = (uint64_t *)sub_10003AB28(v2);
  uint64_t v4 = *v3;
  *(uint64_t *)((char *)v3 + *(void *)(*v3 - 24) + 24) = 2;
  *(_DWORD *)((char *)v3 + *(void *)(v4 - 24) + 8) = *(_DWORD *)((unsigned char *)v3 + *(void *)(v4 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v5 = std::ostream::operator<<();
  uint64_t v6 = (uint64_t *)sub_10003AB28(v5);
  uint64_t v7 = *v6;
  *(uint64_t *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
  *(_DWORD *)((char *)v6 + *(void *)(v7 - 24) + 8) = *(_DWORD *)((unsigned char *)v6 + *(void *)(v7 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v8 = std::ostream::operator<<();
  BOOL v9 = (uint64_t *)sub_10003AB28(v8);
  uint64_t v10 = *v9;
  *(uint64_t *)((char *)v9 + *(void *)(*v9 - 24) + 24) = 2;
  *(_DWORD *)((char *)v9 + *(void *)(v10 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(v10 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v11 = std::ostream::operator<<();
  unint64_t v12 = (uint64_t *)sub_10003AB28(v11);
  uint64_t v13 = *v12;
  *(uint64_t *)((char *)v12 + *(void *)(*v12 - 24) + 24) = 2;
  *(_DWORD *)((char *)v12 + *(void *)(v13 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(v13 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v14 = std::ostream::operator<<();
  unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (uint64_t *)sub_10003AB28(v14);
  uint64_t v16 = *v15;
  *(uint64_t *)((char *)v15 + *(void *)(*v15 - 24) + 24) = 2;
  *(_DWORD *)((char *)v15 + *(void *)(v16 - 24) + 8) = *(_DWORD *)((unsigned char *)v15 + *(void *)(v16 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  BOOL v17 = (void *)sub_10003AB28((uint64_t)v20);
  *(_DWORD *)((char *)v17 + *(void *)(*v17 - 24) + 8) &= ~0x4000u;
  sub_10003AB28((uint64_t)v17);
  std::stringbuf::str();
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006AD9F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10027E318((uint64_t)va);
  _Unwind_Resume(a1);
}

unint64_t sub_1006ADA24(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  if (v1)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v6 = 0;
    sub_10004191C(__p, (char *)[v1 UTF8String]);
    unint64_t v3 = sub_1006ADAB4((char *)__p);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    unint64_t v3 = 0;
  }

  return v3;
}

void sub_1006ADAA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1006ADAB4(char *a1)
{
  id v1 = a1;
  if (a1[23] < 0)
  {
    if ((unint64_t)(*((void *)a1 + 1) - 25) < 0xFFFFFFFFFFFFFFE8) {
      return 0;
    }
    id v1 = *(const char **)a1;
  }
  else if (a1[23] - 25 < 0xFFFFFFE8)
  {
    return 0;
  }
  uint64_t v7 = 0;
  __int16 v6 = 0;
  int v5 = 0;
  if (sscanf(v1, "%hhX:%hhX:%hhX:%hhX:%hhX:%hhX", &v5, (char *)&v5 + 1, (char *)&v5 + 2, (char *)&v5 + 3, &v6, (char *)&v6 + 1) == 6)return ((unint64_t)v5 << 40) | ((unint64_t)BYTE1(v5) << 32) | ((unint64_t)BYTE2(v5) << 24) | ((unint64_t)HIBYTE(v5) << 16) | ((unint64_t)v6 << 8) | HIBYTE(v6); {
  if (sscanf(v1, "%7s %hhX:%hhX:%hhX:%hhX:%hhX:%hhX", &v7, &v5, (char *)&v5 + 1, (char *)&v5 + 2, (char *)&v5 + 3, &v6, (char *)&v6 + 1) != 7)return 0;
  }
  uint64_t v4 = v7 != 1818391888 || *(_DWORD *)((char *)&v7 + 3) != 6515052;
  return (v4 << 48) | ((unint64_t)v5 << 40) | ((unint64_t)BYTE1(v5) << 32) | ((unint64_t)BYTE2(v5) << 24) | ((unint64_t)HIBYTE(v5) << 16) | ((unint64_t)v6 << 8) | HIBYTE(v6);
}

unint64_t sub_1006ADC58(void *a1)
{
  id v1 = a1;
  uint64_t v2 = v1;
  __int16 v8 = 0;
  int v7 = 0;
  if (!v1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_1007925F0();
    }
    goto LABEL_9;
  }
  if ([v1 length] != (id)6 && objc_msgSend(v2, "length") != (id)7)
  {
    uint64_t v4 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100792624((uint64_t)v2, v4, v5);
    }
LABEL_9:
    unint64_t v3 = 0;
    goto LABEL_10;
  }
  [v2 getBytes:&v7 range:NSMakeRange([v2 length] - 6, 6)];
  unint64_t v3 = ((unint64_t)v7 << 40) | ((unint64_t)BYTE1(v7) << 32) | ((unint64_t)BYTE2(v7) << 24) | ((unint64_t)HIBYTE(v7) << 16) | ((unint64_t)v8 << 8) | HIBYTE(v8) | 0x1000000000000;
LABEL_10:

  return v3;
}

void sub_1006ADD74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006ADD84(unint64_t a1)
{
  uint64_t v1 = sub_1002284B8(a1);
  int v4 = v1;
  char v6 = BYTE6(v1);
  __int16 v5 = WORD2(v1);
  uint64_t v2 = +[NSMutableData data];
  [v2 appendBytes:&v4 length:1];
  [v2 appendBytes:(char *)&v4 + 1 length:6];

  return v2;
}

void sub_1006ADE08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006ADE18(uint64_t a1, uint64_t a2)
{
  int v4 = (const void *)a2;
  if (*(char *)(a2 + 23) < 0) {
    int v4 = *(const void **)a2;
  }
  id v5 = +[NSString stringWithUTF8String:v4];
  if ([v5 isEqualToString:@"APPEARANCE_KEYBOARD"])
  {
    __int16 v6 = 961;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_MOUSE"])
  {
    __int16 v6 = 962;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_TOUCHPAD"])
  {
    __int16 v6 = 969;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_JOYSTICK"])
  {
    __int16 v6 = 963;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_GAMEPAD"])
  {
    __int16 v6 = 964;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_GENERIC AUDIO SINK"])
  {
    __int16 v6 = 2112;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_STANDALONE SPEAKER"])
  {
    __int16 v6 = 2113;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_SOUNDBAR"])
  {
    __int16 v6 = 2114;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_BOOKSHELF SPEAKER"])
  {
    __int16 v6 = 2115;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_STANDMOUNTED SPEAKER"])
  {
    __int16 v6 = 2116;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_SPEAKERPHONE"])
  {
    __int16 v6 = 2117;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_EARBUD"])
  {
    __int16 v6 = 2369;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_HEADSET"])
  {
    __int16 v6 = 2370;
  }
  else if ([v5 isEqualToString:@"APPEARANCE_HEADPHONES"])
  {
    __int16 v6 = 2371;
  }
  else
  {
    if (([v5 isEqualToString:@"IsHearingAid"] & 1) == 0)
    {

      goto LABEL_34;
    }
    __int16 v6 = 2625;
  }

  *(_WORD *)(a1 + 392) = v6;
LABEL_34:
  sub_1006B331C((uint64_t **)(a1 + 176), (const void **)a2, a2);
  return v7 & 1;
}

void sub_1006AE034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006AE048(uint64_t a1, uint64_t a2, int a3, int a4)
{
  sub_10044A25C(a2, &v16);
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(_OWORD *)a2 = v16;
  *(void *)(a2 + 16) = v17;
  int v8 = *(_DWORD *)(a1 + 128);
  if (v8 < a3) {
    goto LABEL_4;
  }
  if (v8 != a3)
  {
    if (!a4) {
      return 0;
    }
LABEL_4:
    *(_DWORD *)(a1 + 128) = a3;
    std::string::operator=((std::string *)(a1 + 104), (const std::string *)a2);
    return 1;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 23);
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  uint64_t v12 = *(unsigned __int8 *)(a1 + 127);
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a1 + 112);
  }
  if (v11 != v12) {
    goto LABEL_4;
  }
  uint64_t v14 = v13 >= 0 ? (unsigned __int8 *)(a1 + 104) : *(unsigned __int8 **)(a1 + 104);
  if ((v10 & 0x80) != 0)
  {
    LOBYTE(v10) = memcmp(*(const void **)a2, v14, *(void *)(a2 + 8)) != 0;
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    unsigned __int8 *__attribute__((__org_typedef(uuid_t))) v15 = (unsigned __int8 *)a2;
    while (*v15 == *v14)
    {
      ++v15;
      ++v14;
      if (!--v10) {
        goto LABEL_24;
      }
    }
    goto LABEL_4;
  }
LABEL_24:
  if (v10 & 1) != 0 || (a4) {
    goto LABEL_4;
  }
  return 0;
}

void sub_1006AE16C(uint64_t a1, void *a2, int a3)
{
  LODWORD(v3) = a3;
  id v4 = a2;
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  sub_1000419CC((uint64_t)v12);
  id v5 = v4;
  __int16 v6 = (char *)[v5 bytes];
  unsigned __int16 v7 = (unsigned __int16)[v5 length];
  uint64_t v8 = *(void *)&v12[0];
  *(_DWORD *)((char *)v12 + *(void *)(*(void *)&v12[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v12
                                                                                    + *(void *)(*(void *)&v12[0]
                                                                                                - 24)
                                                                                    + 8) & 0xFFFFFFB5 | 8;
  BOOL v9 = (char *)v12 + *(void *)(v8 - 24);
  if (*((_DWORD *)v9 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)v12 + *(void *)(v8 - 24)));
    uint64_t v10 = std::locale::use_facet(&v26, &std::ctype<char>::id);
    ((void (*)(const std::locale::facet *, uint64_t))v10->__vftable[2].~facet_0)(v10, 32);
    std::locale::~locale(&v26);
  }
  *((_DWORD *)v9 + 36) = 48;
  if (v7 >= v3) {
    uint64_t v3 = v3;
  }
  else {
    uint64_t v3 = v7;
  }
  if (v3)
  {
    do
    {
      uint64_t v11 = *(void *)&v12[0];
      *(void *)((char *)&v12[1] + *(void *)(*(void *)&v12[0] - 24) + 8) = 2;
      *(_DWORD *)((char *)v12 + *(void *)(v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v12 + *(void *)(v11 - 24) + 8) & 0xFFFFFF4F | 0x80;
      ++v6;
      std::ostream::operator<<();
      --v3;
    }
    while (v3);
  }
  std::stringbuf::str();
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
}

void sub_1006AE450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v10 - 88));
  sub_10027E318((uint64_t)&a9);

  _Unwind_Resume(a1);
}

_DWORD *sub_1006AE488(_DWORD *result, int a2)
{
  result[117] += a2;
  result[118] = a2;
  return result;
}

_DWORD *sub_1006AE4A8(_DWORD *result, int a2)
{
  result[114] += a2;
  result[115] = a2;
  return result;
}

void sub_1006AE4C8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 464);
  if (v1 && *(_DWORD *)(a1 + 468) / v1)
  {
    *(_DWORD *)((char *)__dst + 3) = 0;
    __dst[0] = 0;
    id v3 = *(id *)(a1 + 336);
    id v4 = v3;
    if (v3)
    {
      id v5 = v3;
      memcpy(__dst, [v5 bytes], (size_t)[v5 length]);
      int v6 = *(unsigned __int16 *)((char *)__dst + 1);
      unsigned int v7 = *(unsigned __int16 *)((char *)__dst + 3);
    }
    else
    {
      int v6 = 0;
      unsigned int v7 = 0;
    }
    uint64_t v17 = 0;
    unint64_t v18 = 0;
    int v20 = 0;
    unint64_t v19 = 0;
    int v9 = *(_DWORD *)(a1 + 464);
    if (v9) {
      int v10 = *(_DWORD *)(a1 + 468) / v9;
    }
    else {
      int v10 = 0;
    }
    unsigned int v11 = *(_DWORD *)(a1 + 452);
    if (v11) {
      unsigned int v12 = (char)(*(_DWORD *)(a1 + 456) / v11);
    }
    else {
      unsigned int v12 = 0;
    }
    unsigned int v13 = *(_DWORD *)(a1 + 472);
    unsigned int v14 = *(char *)(a1 + 460);
    sub_1004B8C30(&v17, 13);
    HIDWORD(v17) = v10;
    unint64_t v18 = __PAIR64__(v13, v12);
    unint64_t v19 = __PAIR64__(v7, v14);
    int v20 = v6;
    long long v15 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67110400;
      int v23 = v10;
      __int16 v24 = 1024;
      unsigned int v25 = v12;
      __int16 v26 = 1024;
      unsigned int v27 = v13;
      __int16 v28 = 1024;
      unsigned int v29 = v14;
      __int16 v30 = 1024;
      unsigned int v31 = v7;
      __int16 v32 = 1024;
      int v33 = v6;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending LeConnectionPhyStats AWDMetric: RSSI Average %d, PER Average %d%%, RSSI %d, PER %d%% pid %d Vid %d", buf, 0x26u);
    }
    if (sub_100050530())
    {
      uint64_t v16 = sub_100050530();
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v16 + 40))(v16, &v17);
    }
    *(void *)(a1 + 452) = 0;
    *(void *)(a1 + 460) = 0;
    *(void *)(a1 + 468) = 0;
  }
  else
  {
    uint64_t v8 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Not sending LE connection phy stats as average RSSI is 0 dBm", buf, 2u);
    }
  }
}

void sub_1006AE710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006AE72C(id *a1)
{
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)unint64_t v18 = 0u;
  memset(v17, 0, sizeof(v17));
  sub_1000419CC((uint64_t)v17);
  sub_10003AB28((uint64_t)v17);
  std::stringbuf::str();
  if ((char)v16 < 0)
  {
    uint64_t v2 = v15;
    operator delete(__p);
  }
  else
  {
    uint64_t v2 = v16;
  }
  if (a1[34])
  {
    uint64_t v3 = sub_10003AB28((uint64_t)v17);
    strlen((const char *)[a1[34] UTF8String]);
    sub_10003AB28(v3);
  }
  if (a1[35])
  {
    uint64_t v4 = sub_10003AB28((uint64_t)v17);
    strlen((const char *)[a1[35] UTF8String]);
    sub_10003AB28(v4);
  }
  if (a1[36])
  {
    uint64_t v5 = sub_10003AB28((uint64_t)v17);
    strlen((const char *)[a1[36] UTF8String]);
    sub_10003AB28(v5);
  }
  if (a1[37])
  {
    uint64_t v6 = sub_10003AB28((uint64_t)v17);
    strlen((const char *)[a1[37] UTF8String]);
    sub_10003AB28(v6);
  }
  if (a1[38])
  {
    uint64_t v7 = sub_10003AB28((uint64_t)v17);
    strlen((const char *)[a1[38] UTF8String]);
    sub_10003AB28(v7);
  }
  if (a1[39])
  {
    uint64_t v8 = sub_10003AB28((uint64_t)v17);
    strlen((const char *)[a1[39] UTF8String]);
    sub_10003AB28(v8);
  }
  if (a1[40])
  {
    uint64_t v9 = sub_10003AB28((uint64_t)v17);
    sub_1006AE16C(v9, a1[40], 10);
    sub_10003AB28(v9);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
  }
  if (a1[42])
  {
    uint64_t v10 = sub_10003AB28((uint64_t)v17);
    sub_1006AE16C(v10, a1[42], 10);
    sub_10003AB28(v10);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
  }
  if (a1[43])
  {
    uint64_t v11 = sub_10003AB28((uint64_t)v17);
    sub_1006AE16C(v11, a1[43], 10);
    sub_10003AB28(v11);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
  }
  if (a1[41])
  {
    uint64_t v12 = sub_10003AB28((uint64_t)v17);
    sub_1006AE16C(v12, a1[41], 10);
    sub_10003AB28(v12);
    if ((char)v16 < 0) {
      operator delete(__p);
    }
  }
  std::stringbuf::str();
  if ((char)v16 < 0)
  {
    operator delete(__p);
    if (v15 != v2) {
      goto LABEL_33;
    }
    goto LABEL_32;
  }
  if (v2 == v16) {
LABEL_32:
  }
    sub_10003AB28((uint64_t)v17);
LABEL_33:
  std::stringbuf::str();
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006AEC24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10027E318((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1006AEC78(uint64_t a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = v4;
  if (v4)
  {
    uint64_t v6 = [v4 beaconIdentifier];

    if (v6)
    {
      uint64_t v7 = [v5 allowedSessions];
      if (v7
        && ([v5 allowedSessions],
            uint64_t v8 = objc_claimAutoreleasedReturnValue(),
            id v9 = [v8 count],
            v8,
            v7,
            v9))
      {
        uint64_t v10 = [v5 longTermKeyMap];
        if (v10
          && ([v5 longTermKeyMap],
              uint64_t v11 = objc_claimAutoreleasedReturnValue(),
              id v12 = [v11 count],
              v11,
              v10,
              v12))
        {
          unsigned int v13 = [v5 serialNumber];
          if (v13)
          {
            unsigned int v14 = [v5 serialNumber];
            id v15 = [v14 length];

            if (v15)
            {
              long long v53 = 0u;
              long long v54 = 0u;
              long long v51 = 0u;
              long long v52 = 0u;
              id obj = [v5 longTermKeyMap];
              id v16 = [obj countByEnumeratingWithState:&v51 objects:v67 count:16];
              if (v16)
              {
                uint64_t v17 = *(void *)v52;
                while (2)
                {
                  unint64_t v18 = 0;
                  do
                  {
                    if (*(void *)v52 != v17) {
                      objc_enumerationMutation(obj);
                    }
                    uint64_t v19 = *(void *)(*((void *)&v51 + 1) + 8 * (void)v18);
                    if (!v19 || [*(id *)(*((void *)&v51 + 1) + 8 * (void)v18) length] != (id)7)
                    {
                      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
                      {
                        BOOL v44 = [v5 beaconIdentifier];
                        sub_10079279C(v19, v44, (uint64_t)buf);
                      }
                      uint64_t v37 = 8;
LABEL_44:

                      goto LABEL_40;
                    }
                    long long v20 = [v5 longTermKeyMap];
                    long long v21 = [v20 objectForKeyedSubscript:v19];

                    long long v49 = 0u;
                    long long v50 = 0u;
                    long long v47 = 0u;
                    long long v48 = 0u;
                    id v22 = v21;
                    id v23 = [v22 countByEnumeratingWithState:&v47 objects:v66 count:16];
                    if (v23)
                    {
                      uint64_t v24 = *(void *)v48;
                      id v45 = v16;
                      while (2)
                      {
                        uint64_t v25 = v17;
                        long long v26 = 0;
                        do
                        {
                          if (*(void *)v48 != v24) {
                            objc_enumerationMutation(v22);
                          }
                          uint64_t v27 = *(void *)(*((void *)&v47 + 1) + 8 * (void)v26);
                          if (!v27
                            || (unint64_t)[*(id *)(*((void *)&v47 + 1) + 8 * (void)v26) length] <= 0xF)
                          {
                            if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
                            {
                              unint64_t v43 = [v5 beaconIdentifier];
                              sub_1007927F4(v27, v43, (uint64_t)buf);
                            }

                            uint64_t v37 = 149;
                            goto LABEL_44;
                          }
                          long long v26 = (char *)v26 + 1;
                        }
                        while (v23 != v26);
                        id v23 = [v22 countByEnumeratingWithState:&v47 objects:v66 count:16];
                        uint64_t v17 = v25;
                        id v16 = v45;
                        if (v23) {
                          continue;
                        }
                        break;
                      }
                    }

                    unint64_t v18 = (char *)v18 + 1;
                  }
                  while (v18 != v16);
                  id v16 = [obj countByEnumeratingWithState:&v51 objects:v67 count:16];
                  if (v16) {
                    continue;
                  }
                  break;
                }
              }

              long long v28 = qword_100A19E78;
              if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v29 = *(void *)a1;
                uint64_t v30 = [v5 beaconIdentifier];
                unsigned int v31 = [v5 groupIdentifier];
                __int16 v32 = [v5 serialNumber];
                unsigned int v33 = [v5 partIdentifier];
                unsigned int v34 = [v5 managedByFindMy];
                *(_DWORD *)int buf = 138413570;
                *(void *)&uint8_t buf[4] = v29;
                __int16 v56 = 2112;
                BOOL v57 = v30;
                __int16 v58 = 2112;
                long long v59 = v31;
                __int16 v60 = 2112;
                long long v61 = v32;
                __int16 v62 = 1024;
                unsigned int v63 = v33;
                __int16 v64 = 1024;
                unsigned int v65 = v34;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "fIdentifier:%@ fFindMyID:%@ fFindMyGroupID:%@ fFindMySerialNumber:%@ fFindMyPartID:%d fManagedByFindMy:%d", buf, 0x36u);
              }
              BOOL v35 = [v5 longTermKeyMap:v45];
              [v35 count];
              *(void *)int buf = 0;
              sub_100026C30((uint64_t)buf);
              uint64_t v36 = *(__int16 *)&buf[4];
              *(void *)(a1 + 40) = *(int *)buf;
              *(void *)(a1 + 48) = v36;

              goto LABEL_30;
            }
          }
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
            sub_100792768();
          }
        }
        else
        {
          uint64_t v40 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
          {
            uint64_t v41 = [v5 beaconIdentifier];
            sub_100792718(v41, (uint64_t)buf, v40);
          }
        }
      }
      else
      {
        uint64_t v38 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
        {
          uint64_t v39 = [v5 beaconIdentifier];
          sub_1007926C8(v39, (uint64_t)buf, v38);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
    {
      sub_100792694();
    }
    uint64_t v37 = 3;
    goto LABEL_40;
  }
LABEL_30:
  objc_storeStrong((id *)(a1 + 64), a2);
  sub_1006AF288(a1);
  uint64_t v37 = 0;
  *(unsigned char *)(a1 + 238) = 1;
LABEL_40:

  return v37;
}

void sub_1006AF1BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1006AF288(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 64) longTermKeyMap];
  id v3 = [v2 mutableCopy];
  id v4 = *(void **)(a1 + 72);
  *(void *)(a1 + 72) = v3;

  uint64_t v5 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = 0;

  uint64_t v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;
}

void sub_1006AF2F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006AF300(void *a1)
{
  uint64_t v2 = sub_1003734A0();
  id v3 = v2;
  if (v2 && a1[10] && a1[11] && a1[8]) {
    [v2 successfulConnectionForPeripheral:v3 leMAC:v4 ltk:v5 completion:v6];
  }
}

void sub_1006AF3A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006AF3B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    id v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "successfulConnectionForPeripheral returned %@", (uint8_t *)&v6, 0xCu);
  }
  sub_1006AF288(v4);
}

void sub_1006AF47C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006AF494(uint64_t a1, int a2)
{
  uint64_t v2 = (uint64_t **)(a1 + 176);
  if (a2)
  {
    sub_10004191C(__p, "_HID_DEVICE_");
    sub_1005B8FE8(v2, (const void **)__p, (uint64_t)__p);
  }
  else
  {
    sub_10004191C(__p, "_HID_DEVICE_");
    sub_10037EF3C(v2, (const void **)__p);
  }
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1006AF510(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006AF530(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (*(void *)(a1 + 496))
  {
    if (!v9) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = +[NSMutableDictionary dictionary];
    id v7 = *(void **)(a1 + 496);
    *(void *)(a1 + 496) = v6;

    if (!v9) {
      goto LABEL_9;
    }
  }
  id v8 = [v9 length];
  if (v5 && v8 && [v5 length]) {
    [*(id *)(a1 + 496) setObject:v5 forKeyedSubscript:v9];
  }
LABEL_9:
}

void sub_1006AF5E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006AF600(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5)
  {
    if ([v5 length])
    {
      id v3 = *(void **)(a1 + 496);
      if (v3)
      {
        char v4 = [v3 objectForKeyedSubscript:v5];

        if (v4) {
          [*(id *)(a1 + 496) removeObjectForKey:v5];
        }
      }
    }
  }
}

void sub_1006AF680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1006AF694(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 496);
  if (v2 && [v2 count])
  {
    id v3 = +[NSMutableSet set];
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    id v4 = *(id *)(a1 + 496);
    id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    if (v5)
    {
      uint64_t v6 = *(void *)v13;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v13 != v6) {
            objc_enumerationMutation(v4);
          }
          id v8 = [[*(id *)(a1 + 496) objectForKeyedSubscript:*(void *)(*((void *)&v12 + 1) + 8 * i)], v12];
          id v9 = v8;
          if (v8 && [v8 length]) {
            [v3 addObject:v9];
          }
        }
        id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
      }
      while (v5);
    }

    if ([v3 count])
    {
      uint64_t v10 = [v3 allObjects];
    }
    else
    {
      uint64_t v10 = 0;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }

  return v10;
}

void sub_1006AF820(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006AF85C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (v3 && [v3 length])
  {
    id v5 = sub_1006AF694(a1);
    uint64_t v6 = v5;
    if (v5 && [v5 count]) {
      id v7 = [v6 containsObject:v4];
    }
    else {
      id v7 = 0;
    }
  }
  else
  {
    id v7 = 0;
  }

  return v7;
}

void sub_1006AF8E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006AF908(uint64_t a1, void *a2, void *a3)
{
  id v9 = a2;
  id v5 = a3;
  if (*(void *)(a1 + 504))
  {
    if (!v9) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v6 = +[NSMutableDictionary dictionary];
    id v7 = *(void **)(a1 + 504);
    *(void *)(a1 + 504) = v6;

    if (!v9) {
      goto LABEL_9;
    }
  }
  id v8 = [v9 length];
  if (v5 && v8 && [v5 count]) {
    [*(id *)(a1 + 504) setObject:v5 forKeyedSubscript:v9];
  }
LABEL_9:
}

void sub_1006AF9C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006AF9D8(uint64_t a1, void *a2)
{
  id v5 = a2;
  if (v5)
  {
    if ([v5 length])
    {
      id v3 = *(void **)(a1 + 504);
      if (v3)
      {
        id v4 = [v3 objectForKeyedSubscript:v5];

        if (v4) {
          [*(id *)(a1 + 504) removeObjectForKey:v5];
        }
      }
    }
  }
}

void sub_1006AFA58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1006AFA6C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 504);
  if (v2 && [v2 count])
  {
    id v3 = +[NSMutableSet set];
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id obj = *(id *)(a1 + 504);
    id v4 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v21;
      do
      {
        for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v21 != v5) {
            objc_enumerationMutation(obj);
          }
          id v7 = [*(id *)(a1 + 504) objectForKeyedSubscript:*(void *)(*((void *)&v20 + 1) + 8 * i)];
          id v8 = v7;
          if (v7 && [v7 count])
          {
            long long v18 = 0u;
            long long v19 = 0u;
            long long v16 = 0u;
            long long v17 = 0u;
            id v9 = v8;
            id v10 = [v9 countByEnumeratingWithState:&v16 objects:v24 count:16];
            if (v10)
            {
              uint64_t v11 = *(void *)v17;
              do
              {
                for (j = 0; j != v10; j = (char *)j + 1)
                {
                  if (*(void *)v17 != v11) {
                    objc_enumerationMutation(v9);
                  }
                  [v3 addObject:*(void *)(*((void *)&v16 + 1) + 8 * (void)j)];
                }
                id v10 = [v9 countByEnumeratingWithState:&v16 objects:v24 count:16];
              }
              while (v10);
            }
          }
        }
        id v4 = [obj countByEnumeratingWithState:&v20 objects:v25 count:16];
      }
      while (v4);
    }

    if ([v3 count])
    {
      long long v13 = [v3 allObjects];
    }
    else
    {
      long long v13 = 0;
    }
  }
  else
  {
    long long v13 = 0;
  }

  return v13;
}

void sub_1006AFC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_1006AFCD8(uint64_t a1, uint64_t a2)
{
  id v3 = sub_1006AFA6C(a1);
  id v4 = v3;
  if (v3 && [v3 count])
  {
    uint64_t v5 = +[NSNumber numberWithUnsignedInt:a2];
    id v6 = [v4 containsObject:v5];
  }
  else
  {
    id v6 = 0;
  }

  return v6;
}

void sub_1006AFD58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006AFD74(uint64_t a1, int a2, void *a3, int a4)
{
  id v8 = a3;
  uint64_t v9 = sub_10003FB34();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v9 + 2736))(v9) & 1) == 0)
  {
    uint64_t v11 = 0;
    goto LABEL_27;
  }
  BOOL v10 = *(unsigned __int8 *)(a1 + 528) != a2 || *(_DWORD *)(a1 + 532) != a4;
  long long v12 = *(void **)(a1 + 520);
  if ((v8 || !v12) && (!v8 || v12))
  {
    unsigned int v13 = 0;
    if (v8 && v12) {
      unsigned int v13 = [v12 isEqualToData:v8] ^ 1;
    }
  }
  else
  {
    unsigned int v13 = 1;
  }
  *(unsigned char *)(a1 + 528) = a2;
  objc_storeStrong((id *)(a1 + 520), a3);
  int v14 = v13 | v10;
  *(_DWORD *)(a1 + 532) = a4;
  if (a4 != 2) {
    *(unsigned char *)(a1 + 544) = 1;
  }
  if (v14 || !*(unsigned char *)(a1 + 544))
  {
    sub_1006B008C((uint64_t *)a1, 0);
    sub_1006B0930((uint64_t *)a1, 0);
  }
  if (!a2 || ![v8 length] || *(unsigned char *)(a1 + 529))
  {
    if (v14)
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BE448);
      }
      sub_100308D4C((uint64_t)off_1009F8780, *(void **)a1);
    }
    int v15 = 0;
    goto LABEL_24;
  }
  if (*(unsigned char *)(a1 + 544))
  {
    uint64_t v11 = sub_1006B008C((uint64_t *)a1, 1);
    if (!v11)
    {
      int v15 = 1;
      sub_1006B0930((uint64_t *)a1, 1);
LABEL_24:
      uint64_t v11 = 0;
      goto LABEL_25;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_10079284C();
    }
    uint64_t v11 = 0;
  }
  int v15 = 1;
LABEL_25:
  long long v16 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
  {
    uint64_t v17 = *(void *)a1;
    int v18 = *(unsigned __int8 *)(a1 + 530);
    int v19 = *(unsigned __int8 *)(a1 + 529);
    int v20 = *(unsigned __int8 *)(a1 + 544);
    int v21 = *(_DWORD *)(a1 + 532);
    uint64_t v22 = *(void *)(a1 + 520);
    int v23 = *(unsigned __int8 *)(a1 + 528);
    int v25 = 138415362;
    uint64_t v26 = v17;
    __int16 v27 = 1024;
    int v28 = a2;
    __int16 v29 = 2112;
    id v30 = v8;
    __int16 v31 = 1024;
    int v32 = v14;
    __int16 v33 = 1024;
    int v34 = v15;
    __int16 v35 = 1024;
    int v36 = v11;
    __int16 v37 = 1024;
    int v38 = v18;
    __int16 v39 = 1024;
    int v40 = v19;
    __int16 v41 = 1024;
    int v42 = v20;
    __int16 v43 = 1024;
    int v44 = v21;
    __int16 v45 = 2112;
    uint64_t v46 = v22;
    __int16 v47 = 1024;
    int v48 = v23;
    __int16 v49 = 1024;
    int v50 = a4;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "FastLeConnection:setControllerInfo fIdentifier:%@ version:%d info:%@ dataChanged:%d enable:%d result:%d fControllerLTKStored:%d fControllerInfoConfigured:%d fFastLeConnectionAllowed:%d fControllerInfoOrigin:%d fControllerInfo:%@ fControllerInfoVersion:%d newOrigin:%d", (uint8_t *)&v25, 0x5Cu);
  }
LABEL_27:

  return v11;
}

void sub_1006B0068(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006B008C(uint64_t *a1, int a2)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BE468);
  }
  if (!*((unsigned char *)off_1009F8068 + 60)) {
    return 12;
  }
  uint64_t v4 = sub_10003FB34();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 2736))(v4)) {
    return 0;
  }
  unint64_t v5 = a1[3];
  if (v5 || (unint64_t v5 = a1[2]) != 0)
  {
    if (a2 && *((unsigned char *)a1 + 528))
    {
      if (!*((unsigned char *)a1 + 544))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
          sub_100792938();
        }
        int v15 = 0;
        int v14 = 0;
        LODWORD(v6) = 12;
        goto LABEL_48;
      }
      if (!*((unsigned char *)a1 + 530))
      {
        uint64_t v17 = (void *)a1[69];
        if (v17 && [v17 length])
        {
          uint64_t v18 = sub_10003FB34();
          int v19 = (*(uint64_t (**)(uint64_t, unint64_t, BOOL, void, id))(*(void *)v18 + 1840))(v18, v5, a1[3] != 0, [(id)a1[69] length], [objc_msgSend((id)a1[69], "bytes")]);
          if (v19)
          {
            LODWORD(v6) = v19;
            int v20 = qword_100A19E78;
            if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
            {
              uint64_t v21 = *a1;
              sub_10004BDF8();
              uint64_t v22 = v65 >= 0 ? __p : *(unsigned char **)__p;
              uint64_t v23 = a1[65];
              int v24 = *((unsigned __int8 *)a1 + 528);
              *(_DWORD *)int buf = 138413314;
              *(void *)&uint8_t buf[4] = v21;
              __int16 v52 = 2080;
              long long v53 = v22;
              __int16 v54 = 2112;
              *(void *)int v55 = v23;
              *(_WORD *)&v55[8] = 1024;
              *(_DWORD *)__int16 v56 = v24;
              *(_WORD *)&v56[4] = 1024;
              *(_DWORD *)BOOL v57 = v6;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "FastLEConnection:Failed writeStoredLTKForDevice for device %@ (%s) cached data:%@ version:%d returned %d aborting", buf, 0x2Cu);
              if (v65 < 0) {
                operator delete(*(void **)__p);
              }
            }
LABEL_43:
            int v15 = 0;
            int v14 = 0;
            goto LABEL_48;
          }
          *((unsigned char *)a1 + 530) = 1;
        }
        else
        {
          uint64_t v26 = sub_10003FB34();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v26 + 2744))(v26) & 1) == 0)
          {
            __int16 v27 = qword_100A19E78;
            if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
            {
              uint64_t v48 = *a1;
              sub_10004BDF8();
              __int16 v49 = v54 >= 0 ? buf : *(unsigned char **)buf;
              *(_DWORD *)long long __p = 138412546;
              *(void *)&__p[4] = v48;
              __int16 v63 = 2080;
              __int16 v64 = v49;
              _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "FastLEConnection:LeDevice::enableFastLEConnection device %@ (%s) No LTK provided but required", __p, 0x16u);
              if (SHIBYTE(v54) < 0) {
                operator delete(*(void **)buf);
              }
            }
            int v15 = 0;
            int v14 = 0;
            LODWORD(v6) = 149;
            goto LABEL_48;
          }
        }
      }
      if (*((unsigned char *)a1 + 529)) {
        return 0;
      }
      uint64_t v6 = sub_10003FB34();
      LODWORD(v6) = (*(uint64_t (**)(uint64_t, unint64_t, BOOL, void, void, id))(*(void *)v6 + 1864))(v6, v5, a1[3] != 0, *((unsigned __int8 *)a1 + 528), [(id)a1[65] length], [objc_msgSend((id)a1[65], "bytes")]);
      if (!v6)
      {
        int v15 = 0;
        int v14 = 1;
        *((unsigned char *)a1 + 529) = 1;
        goto LABEL_48;
      }
      int v25 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
      {
        uint64_t v44 = *a1;
        sub_10004BDF8();
        __int16 v45 = v65 >= 0 ? __p : *(unsigned char **)__p;
        uint64_t v46 = a1[65];
        int v47 = *((unsigned __int8 *)a1 + 528);
        *(_DWORD *)int buf = 138413314;
        *(void *)&uint8_t buf[4] = v44;
        __int16 v52 = 2080;
        long long v53 = v45;
        __int16 v54 = 2112;
        *(void *)int v55 = v46;
        *(_WORD *)&v55[8] = 1024;
        *(_DWORD *)__int16 v56 = v47;
        *(_WORD *)&v56[4] = 1024;
        *(_DWORD *)BOOL v57 = v6;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "FastLEConnection:LeDevice::enableFastLEConnection Failed writePeerControllerCachedInfo for device %@ (%s) cached data:%@ version:%d returned %d, aborting", buf, 0x2Cu);
        if (v65 < 0) {
          operator delete(*(void **)__p);
        }
      }
      if (!*((unsigned char *)a1 + 530)) {
        goto LABEL_43;
      }
    }
    else
    {
      if (*((unsigned char *)a1 + 529))
      {
        uint64_t v7 = sub_10003FB34();
        int v8 = (*(uint64_t (**)(uint64_t, unint64_t, BOOL))(*(void *)v7 + 1872))(v7, v5, a1[3] != 0);
        *((unsigned char *)a1 + 529) = 0;
        if (v8)
        {
          int v9 = v8;
          BOOL v10 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
          {
            uint64_t v41 = *a1;
            sub_10004BDF8();
            int v42 = v65 >= 0 ? __p : *(unsigned char **)__p;
            *(_DWORD *)int buf = 138412802;
            *(void *)&uint8_t buf[4] = v41;
            __int16 v52 = 2080;
            long long v53 = v42;
            __int16 v54 = 1024;
            *(_DWORD *)int v55 = v9;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "FastLEConnection:LeDevice::enableFastLEConnection FastLEConnection:removePeerControllerCachedInfo device %@ (%s) returned %d", buf, 0x1Cu);
            if (v65 < 0) {
              operator delete(*(void **)__p);
            }
          }
        }
      }
      if (!*((unsigned char *)a1 + 530))
      {
        int v15 = 0;
        int v14 = 0;
        LODWORD(v6) = 0;
LABEL_48:
        char v50 = 0;
        sub_10001B8E0(&v50);
        int v28 = *((unsigned __int8 *)a1 + 530);
        uint64_t v29 = sub_10003FB34();
        char v30 = (*(uint64_t (**)(uint64_t))(*(void *)v29 + 2744))(v29);
        int v31 = sub_10022A8A4(v5, v28 != 0, v14, v30 ^ 1u);
        int v32 = v31;
        if (v14) {
          unsigned int v33 = 1;
        }
        else {
          unsigned int v33 = v6;
        }
        if (v31) {
          uint64_t v6 = v33;
        }
        else {
          uint64_t v6 = v6;
        }
        int v34 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v35 = *a1;
          sub_10004BDF8();
          if (v65 >= 0) {
            int v36 = __p;
          }
          else {
            int v36 = *(unsigned char **)__p;
          }
          int v37 = *((unsigned __int8 *)a1 + 544);
          *(_DWORD *)int buf = 138414082;
          *(void *)&uint8_t buf[4] = v35;
          __int16 v52 = 2080;
          long long v53 = v36;
          __int16 v54 = 1024;
          *(_DWORD *)int v55 = a2;
          *(_WORD *)&v55[4] = 1024;
          *(_DWORD *)&v55[6] = v37;
          *(_WORD *)__int16 v56 = 1024;
          *(_DWORD *)&v56[2] = v32;
          *(_WORD *)BOOL v57 = 1024;
          *(_DWORD *)&void v57[2] = v15;
          __int16 v58 = 1024;
          int v59 = v14;
          __int16 v60 = 1024;
          int v61 = v6;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "FastLEConnection:LeDevice::enableFastLEConnection device:%@ address:%s enable:%d fFastLeConnectionAllowed:%d LE_GAP_EnableFastLeConnectionForAddress:%d shouldRemoveLTKFromController:%d, shouldEnable:%d ret:%d", buf, 0x3Au);
          if (v65 < 0) {
            operator delete(*(void **)__p);
          }
        }
        sub_10001B8AC(&v50);
        return v6;
      }
      LODWORD(v6) = 0;
    }
    uint64_t v11 = sub_10003FB34();
    int v12 = (*(uint64_t (**)(uint64_t, unint64_t, BOOL))(*(void *)v11 + 1848))(v11, v5, a1[3] != 0);
    *((unsigned char *)a1 + 530) = 0;
    if (v12)
    {
      unsigned int v13 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
      {
        uint64_t v39 = *a1;
        sub_10004BDF8();
        int v40 = v65 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)int buf = 138412802;
        *(void *)&uint8_t buf[4] = v39;
        __int16 v52 = 2080;
        long long v53 = v40;
        __int16 v54 = 1024;
        *(_DWORD *)int v55 = v12;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "FastLEConnection:LeDevice::enableFastLEConnection FastLEConnection:removeStoredLTKForDevice device %@ (%s) returned %d", buf, 0x1Cu);
        if (v65 < 0) {
          operator delete(*(void **)__p);
        }
      }
    }
    int v14 = 0;
    int v15 = 1;
    goto LABEL_48;
  }
  long long v16 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
  {
    uint64_t v43 = *a1;
    *(_DWORD *)int buf = 138412290;
    *(void *)&uint8_t buf[4] = v43;
    _os_log_fault_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_FAULT, "FastLEConnection: %@ Address cannot be 0", buf, 0xCu);
    long long v16 = qword_100A19E78;
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
    sub_1007928CC();
  }
  return 8;
}

void sub_1006B0910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1006B0930(uint64_t *a1, int a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006B0B90;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A14590 != -1) {
    dispatch_once(&qword_100A14590, block);
  }
  uint64_t v4 = a1[67];
  if (a2)
  {
    if (!v4 && *((_DWORD *)a1 + 133) == 3)
    {
      unint64_t v5 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *a1;
        *(_DWORD *)int buf = 138412546;
        uint64_t v16 = v6;
        __int16 v17 = 2048;
        uint64_t v18 = qword_1009FBE58;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FastLeConnection:enableClientControllerInfoTimer %@ timer duration %llums armed!", buf, 0x16u);
      }
      uint64_t v7 = sub_100019878();
      int v8 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v7 + 8));
      a1[67] = (uint64_t)v8;
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      _DWORD v13[2] = sub_1006B0D34;
      v13[3] = &unk_100997528;
      v13[4] = a1;
      dispatch_source_set_event_handler(v8, v13);
      int v9 = a1[67];
      dispatch_time_t v10 = dispatch_time(0x8000000000000000, 1000000 * qword_1009FBE58);
      dispatch_source_set_timer(v9, v10, 0xFFFFFFFFFFFFFFFFLL, 0);
      dispatch_activate((dispatch_object_t)a1[67]);
    }
  }
  else if (v4)
  {
    uint64_t v11 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *a1;
      *(_DWORD *)int buf = 138412290;
      uint64_t v16 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "FastLeConnection:enableClientControllerInfoTimer %@ timer destroyed!", buf, 0xCu);
      uint64_t v4 = a1[67];
    }
    dispatch_source_cancel(v4);
    dispatch_release((dispatch_object_t)a1[67]);
    a1[67] = 0;
  }
}

void sub_1006B0B90(uint64_t a1)
{
  int v1 = *(uint64_t **)(a1 + 32);
  int v10 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DeviceFastLeConnectionClientTimeoutSeconds");
  int v3 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v2 + 88))(v2, buf, __p, &v10);
  if (v10) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v14 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      return;
    }
  }
  else if (!v4)
  {
    return;
  }
  uint64_t v5 = 1000 * v10;
  qword_1009FBE58 = v5;
  uint64_t v6 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *v1;
    *(_DWORD *)int buf = 138412546;
    *(void *)&uint8_t buf[4] = v7;
    __int16 v12 = 2048;
    uint64_t v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "FastLeConnection:enableClientControllerInfoTimer %@ Overriding timer duration to %llums", buf, 0x16u);
  }
}

void sub_1006B0CF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006B0D34(uint64_t a1)
{
  int v1 = *(uint64_t **)(a1 + 32);
  uint64_t v2 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *v1;
    int v5 = 138412290;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "FastLeConnection:enableClientControllerInfoTimer %@ timer expired!", (uint8_t *)&v5, 0xCu);
  }
  dispatch_source_cancel((dispatch_source_t)v1[67]);
  dispatch_release((dispatch_object_t)v1[67]);
  v1[67] = 0;
  return sub_1006AFD74(v1, 0, 0, 0);
}

uint64_t sub_1006B0E04(uint64_t a1, int a2)
{
  if (qword_100A145A0 != -1) {
    dispatch_once(&qword_100A145A0, &stru_1009BE428);
  }
  uint64_t v4 = sub_10003FB34();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 2736))(v4);
  if (result)
  {
    if (*(unsigned char *)(a1 + 528)
      && (uint64_t v6 = *(void **)(a1 + 520)) != 0
      && [v6 length]
      && (int v7 = *(_DWORD *)(a1 + 532)) != 0)
    {
      if (v7 == 2) {
        int v8 = a2;
      }
      else {
        int v8 = 1;
      }
      *(unsigned char *)(a1 + 544) = v8;
      char v9 = qword_100A19E78;
      if (byte_100A14598 == 1)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)a1;
          int v13 = 138412802;
          uint64_t v14 = v10;
          __int16 v15 = 1024;
          int v16 = byte_100A14599;
          __int16 v17 = 1024;
          int v18 = 1;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: FastLEConnection:fastLeConnectionAllowed %@ forceAllow:%d forceOverride:%d", (uint8_t *)&v13, 0x18u);
          char v9 = qword_100A19E78;
        }
        int v8 = byte_100A14599;
        *(unsigned char *)(a1 + 544) = byte_100A14599;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = *(void *)a1;
        int v12 = *(_DWORD *)(a1 + 532);
        int v13 = 138413058;
        uint64_t v14 = v11;
        __int16 v15 = 1024;
        int v16 = a2;
        __int16 v17 = 1024;
        int v18 = v8;
        __int16 v19 = 1024;
        int v20 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "FastLEConnection:fastLeConnectionAllowed %@ allowed:%d fFastLeConnectionAllowed:%d fControllerInfoOrigin:%d", (uint8_t *)&v13, 0x1Eu);
        int v8 = *(unsigned __int8 *)(a1 + 544);
      }
      return sub_1006B008C((uint64_t *)a1, v8 != 0);
    }
    else
    {
      return 12;
    }
  }
  return result;
}

void sub_1006B1008(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "DeviceFastLeConnectionForceAllow");
  int v2 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A14599);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  byte_100A14598 = 1;
  uint64_t v3 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A14599) {
      uint64_t v4 = "YES";
    }
    else {
      uint64_t v4 = "NO";
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: FastLeConnection:fastLeConnectionAllowed DeviceFastLeConnectionForceAllow %s", buf, 0xCu);
  }
}

void sub_1006B1164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_1006B11A0(unsigned int a1)
{
  if (a1 > 0xD) {
    return "?";
  }
  else {
    return (&off_1009BE4A8)[a1];
  }
}

uint64_t sub_1006B11C4(uint64_t a1)
{
  sub_10004191C(v25, "A1603");
  uint64_t v2 = sub_10003156C(a1 + 176, v25);
  uint64_t v3 = a1 + 184;
  if (a1 + 184 == v2)
  {
    sub_10004191C(v23, "A2051");
    if (v2 == sub_10003156C(a1 + 176, v23))
    {
      sub_10004191C(v21, "A3085");
      if (v2 == sub_10003156C(a1 + 176, (const void **)v21))
      {
        sub_10004191C(__p, "A2538");
        BOOL v4 = v2 != sub_10003156C(a1 + 176, (const void **)__p);
        if (v20 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        BOOL v4 = 1;
      }
      if (v22 < 0) {
        operator delete(v21[0]);
      }
    }
    else
    {
      BOOL v4 = 1;
    }
    if (v24 < 0) {
      operator delete((void *)v23[0]);
    }
  }
  else
  {
    BOOL v4 = 1;
  }
  if (v26 < 0)
  {
    operator delete((void *)v25[0]);
    if (v4) {
      return 4;
    }
  }
  else if (v4)
  {
    return 4;
  }
  sub_10004191C(v17, "HasTS");
  uint64_t v6 = sub_10003156C(a1 + 176, (const void **)v17);
  if (v18 < 0) {
    operator delete(v17[0]);
  }
  if (v3 != v6)
  {
    uint64_t v7 = sub_100035F54();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 352))(v7)) {
      return 2;
    }
    uint64_t v9 = sub_100035F54();
    return (*(uint64_t (**)(uint64_t))(*(void *)v9 + 344))(v9);
  }
  sub_10004191C(v15, "_GHS_DEVICE_");
  uint64_t v8 = sub_10003156C(a1 + 176, (const void **)v15);
  if (v16 < 0) {
    operator delete(v15[0]);
  }
  if (v3 != v8) {
    return 12;
  }
  if (*(unsigned char *)(a1 + 608)) {
    return 5;
  }
  uint64_t v10 = *(void **)(a1 + 200);
  if (!v10)
  {
    int v11 = *(_DWORD *)(a1 + 372);
    if (v11 == 655360) {
      unsigned int v12 = 11;
    }
    else {
      unsigned int v12 = 0;
    }
    if (v11 == 21) {
      return 3;
    }
    else {
      return v12;
    }
  }
  if ([v10 containsString:@"iPhone"]) {
    return 1;
  }
  if ([*(id *)(a1 + 200) containsString:@"Watch"]) {
    return 2;
  }
  if ([*(id *)(a1 + 200) containsString:@"iPad"]) {
    return 10;
  }
  if (([*(id *)(a1 + 200) containsString:@"iMac"] & 1) != 0
    || ([*(id *)(a1 + 200) containsString:@"MacBook"] & 1) != 0)
  {
    return 9;
  }
  uint64_t result = CBProductIDFromNSString();
  if (result)
  {
    int v13 = +[CBProductInfo productInfoWithProductID:result];
    unsigned int v14 = [v13 flags];

    if ((v14 & 0x2000) == 0)
    {
      if ((v14 & 0x4000) != 0) {
        return 8;
      }
      if ((v14 & 0x8000) != 0) {
        return 7;
      }
      return ((int)(v14 << 15) >> 31) & 6;
    }
    return 5;
  }
  return result;
}

void sub_1006B14E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006B157C(uint64_t result)
{
  *(_WORD *)(result + 529) = 0;
  return result;
}

void sub_1006B1588(uint64_t *a1, char a2)
{
  *((unsigned char *)a1 + 160) = a2;
  if ((a2 & 1) == 0 && !*((unsigned char *)a1 + 161)) {
    *((unsigned char *)a1 + 162) = 0;
  }
  uint64_t v3 = a1[3];
  if (v3 || (uint64_t v3 = a1[2]) != 0)
  {
    if ((a2 & 1) == 0)
    {
      BOOL v4 = (void *)a1[69];
      a1[69] = 0;

      if (*((unsigned char *)a1 + 530))
      {
        uint64_t v5 = sub_10003FB34();
        int v6 = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(void *)v5 + 1848))(v5, v3, a1[3] != 0);
        if (v6)
        {
          int v7 = v6;
          uint64_t v8 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
          {
            uint64_t v9 = *a1;
            sub_10004BDF8();
            if (v12 >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            *(_DWORD *)int buf = 138412802;
            uint64_t v14 = v9;
            __int16 v15 = 2080;
            char v16 = p_p;
            __int16 v17 = 1024;
            int v18 = v7;
            _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "FastLEConnection:setLEPaired removePeerControllerCachedInfo device %@ (%s) returned %d", buf, 0x1Cu);
            if (v12 < 0) {
              operator delete(__p);
            }
          }
        }
        else
        {
          *((unsigned char *)a1 + 530) = 0;
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
  {
    sub_1007929A4();
  }
}

void sub_1006B173C(id *a1, void *a2)
{
  id v4 = a2;
  uint64_t v5 = a1 + 69;
  objc_storeStrong(a1 + 69, a2);
  id v6 = a1[3];
  if (!v6) {
    id v6 = a1[2];
  }
  if (*v5)
  {
    if (!*((unsigned char *)a1 + 530) && *((unsigned char *)a1 + 160) && *((unsigned char *)a1 + 529))
    {
      uint64_t v15 = sub_10003FB34();
      int v16 = (*(uint64_t (**)(uint64_t, id, BOOL, void, id))(*(void *)v15 + 1840))(v15, v6, a1[3] != 0, [a1[69] length], [v5 bytes]);
      *((unsigned char *)a1 + 530) = 1;
      if (!v16) {
        goto LABEL_24;
      }
      uint64_t v17 = qword_100A19E78;
      if (!os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
        goto LABEL_24;
      }
      id v18 = *a1;
      sub_10004BDF8();
      if (v23 >= 0) {
        __int16 v19 = __p;
      }
      else {
        __int16 v19 = (void **)__p[0];
      }
      id v20 = a1[65];
      int v21 = *((unsigned __int8 *)a1 + 528);
      *(_DWORD *)int buf = 138413314;
      id v25 = v18;
      __int16 v26 = 2080;
      __int16 v27 = v19;
      __int16 v28 = 2112;
      id v29 = v20;
      __int16 v30 = 1024;
      int v31 = v21;
      __int16 v32 = 1024;
      int v33 = v16;
      char v12 = "FastLEConnection:setLocalLTK writeStoredLTKForDevice device %@ (%s) controller cached data:%@ version:%d fai"
            "led with error %d";
      int v13 = v17;
      uint32_t v14 = 44;
      goto LABEL_21;
    }
    if ([*v5 length]) {
      goto LABEL_24;
    }
  }
  if (*((unsigned char *)a1 + 530))
  {
    uint64_t v7 = sub_10003FB34();
    int v8 = (*(uint64_t (**)(uint64_t, id, BOOL))(*(void *)v7 + 1848))(v7, v6, a1[3] != 0);
    if (!v8)
    {
      *((unsigned char *)a1 + 530) = 0;
      goto LABEL_24;
    }
    uint64_t v9 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
    {
      id v10 = *a1;
      sub_10004BDF8();
      if (v23 >= 0) {
        int v11 = __p;
      }
      else {
        int v11 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 138412802;
      id v25 = v10;
      __int16 v26 = 2080;
      __int16 v27 = v11;
      __int16 v28 = 1024;
      LODWORD(v29) = v8;
      char v12 = "FastLEConnection:setLocalLTK removePeerControllerCachedInfo device %@ (%s) returned %d";
      int v13 = v9;
      uint32_t v14 = 28;
LABEL_21:
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v12, buf, v14);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
  }
LABEL_24:
}

void sub_1006B1A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B1A34(uint64_t a1, int a2, uint64_t a3)
{
  *(unsigned char *)(a1 + 164) = a2;
  if (!a2) {
    a3 = 0;
  }
  *(void *)(a1 + 56) = a3;
  if (a2)
  {
    *(CFAbsoluteTime *)(a1 + 416) = CFAbsoluteTimeGetCurrent();
  }
  else
  {
    *(unsigned char *)(a1 + 165) = 0;
    *(unsigned char *)(a1 + 236) = 0;
  }
}

uint64_t sub_1006B1A7C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 168) = a2;
  if (*(unsigned char *)(result + 164))
  {
    uint64_t v2 = (uint64_t *)result;
    if (*(_DWORD *)(result + 532) == 3)
    {
      uint64_t v3 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v4 = *v2;
        int v5 = 138412290;
        uint64_t v6 = v4;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FastLEConnection:setLinkReadyDurationMS device %@ connected with Fast LE Connection cached info set by a CB client, removing.", (uint8_t *)&v5, 0xCu);
      }
      return sub_1006AFD74((uint64_t)v2, 0, 0, 0);
    }
  }
  return result;
}

uint64_t sub_1006B1B50(uint64_t a1)
{
  uint64_t v48 = 0;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  *(_OWORD *)int v36 = 0u;
  memset(v35, 0, sizeof(v35));
  sub_1000419CC((uint64_t)v35);
  *(_DWORD *)((char *)v35 + *(void *)(*(void *)&v35[0] - 24) + 8) |= 4u;
  if (*(void *)(a1 + 64))
  {
    uint64_t v2 = sub_10003AB28((uint64_t)v35);
    uint64_t v3 = [*(id *)(a1 + 64) beaconIdentifier];
    id v4 = [v3 UUIDString];
    strlen((const char *)[v4 UTF8String]);
    uint64_t v5 = sub_10003AB28(v2);
    uint64_t v6 = sub_10003AB28(v5);
    uint64_t v7 = (void *)(a1 + 40);
    sub_1006A9284((unint64_t *)(a1 + 40));
    sub_10003AB28(v6);
    if (v34 < 0) {
      operator delete(__p);
    }

    uint64_t v8 = sub_10003AB28((uint64_t)v35);
    uint64_t v9 = [*(id *)(a1 + 64) userIdentifier];
    id v10 = [v9 UUIDString];
    strlen((const char *)[v10 UTF8String]);
    uint64_t v11 = sub_10003AB28(v8);
    id v12 = (id)sub_10003AB28(v11);
    sub_1006A9284((unint64_t *)(a1 + 40));
    sub_10003AB28((uint64_t)v12);
    if (v34 < 0) {
      operator delete(__p);
    }

    uint64_t v13 = sub_10003AB28((uint64_t)v35);
    uint32_t v14 = [*(id *)(a1 + 64) groupIdentifier];
    if (v14)
    {
      uint64_t v7 = [*(id *)(a1 + 64) groupIdentifier];
      id v12 = [v7 UUIDString];
      uint64_t v15 = (const char *)[v12 UTF8String];
    }
    else
    {
      uint64_t v15 = "NONE";
    }
    strlen(v15);
    sub_10003AB28(v13);
    if (v14)
    {
    }
    sub_10003AB28((uint64_t)v35);
    [*(id *)(a1 + 64) partIdentifier];
    std::ostream::operator<<();
    uint64_t v16 = sub_10003AB28((uint64_t)v35);
    uint64_t v17 = [*(id *)(a1 + 64) serialNumber];
    id v18 = +[NSString stringWithFormat:@"%@", v17];
    strlen((const char *)[v18 UTF8String]);
    sub_10003AB28(v16);

    uint64_t v19 = sub_10003AB28((uint64_t)v35);
    id v20 = [*(id *)(a1 + 64) longTermKeyMap];
    id v21 = +[NSString stringWithFormat:@"%@", v20];
    strlen((const char *)[v21 UTF8String]);
    sub_10003AB28(v19);

    uint64_t v22 = sub_10003AB28((uint64_t)v35);
    char v23 = [*(id *)(a1 + 64) allowedSessions];
    id v24 = +[NSString stringWithFormat:@"%@", v23];
    strlen((const char *)[v24 UTF8String]);
    sub_10003AB28(v22);

    uint64_t v25 = sub_10003AB28((uint64_t)v35);
    id v26 = +[NSString stringWithFormat:@"%@", *(void *)(a1 + 72)];
    strlen((const char *)[v26 UTF8String]);
    sub_10003AB28(v25);

    uint64_t v27 = sub_10003AB28((uint64_t)v35);
    id v28 = +[NSString stringWithFormat:@"%@", *(void *)(a1 + 80)];
    strlen((const char *)[v28 UTF8String]);
    uint64_t v29 = sub_10003AB28(v27);
    uint64_t v30 = sub_10003AB28(v29);
    id v31 = +[NSString stringWithFormat:@"%@", *(void *)(a1 + 88)];
    strlen((const char *)[v31 UTF8String]);
    sub_10003AB28(v30);
  }
  std::stringbuf::str();
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006B2164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_10027E318((uint64_t)&a16);
  _Unwind_Resume(a1);
}

BOOL sub_1006B2218(uint64_t a1)
{
  uint64_t v2 = a1 + 176;
  sub_10004191C(__p, "_HID_DEVICE_");
  uint64_t v3 = sub_10003156C(v2, (const void **)__p);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return a1 + 184 != v3;
}

void sub_1006B2280(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1006B229C(uint64_t a1)
{
  if (sub_1006B2218(a1)) {
    return *(unsigned char *)(a1 + 610) != 0;
  }
  uint64_t v3 = qword_100A19E78;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (v4)
  {
    uint64_t v5 = *(void *)a1;
    int v6 = 138412290;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device %@ does not have _HID_SERVICE_", (uint8_t *)&v6, 0xCu);
    return 0;
  }
  return result;
}

uint64_t sub_1006B2368(uint64_t a1)
{
  uint64_t v58 = 0;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  *(_OWORD *)long long v46 = 0u;
  long long v47 = 0u;
  memset(v45, 0, sizeof(v45));
  sub_1000419CC((uint64_t)v45);
  *(_DWORD *)((char *)v45 + *(void *)(*(void *)&v45[0] - 24) + 8) |= 4u;
  sub_1006AD3F0();
  id v2 = objc_claimAutoreleasedReturnValue();
  strlen((const char *)[v2 UTF8String]);
  sub_10003AB28((uint64_t)v45);

  if (*(void *)(a1 + 24) && *(unsigned char *)(a1 + 22))
  {
    uint64_t v3 = sub_10003AB28((uint64_t)v45);
    sub_1006AD3F0();
    id v4 = objc_claimAutoreleasedReturnValue();
    strlen((const char *)[v4 UTF8String]);
    uint64_t v5 = sub_10003AB28(v3);
    sub_10003AB28(v5);
  }
  if (*(char *)(a1 + 127) < 0)
  {
    if (!*(void *)(a1 + 112)) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 127))
  {
LABEL_8:
    uint64_t v6 = sub_10003AB28((uint64_t)v45);
    sub_10003AB28(v6);
    uint64_t v7 = sub_10003AB28((uint64_t)v45);
    uint64_t v8 = sub_10003AB28(v7);
    uint64_t v9 = sub_10003AB28(v8);
    sub_10003AB28(v9);
  }
LABEL_9:
  CFAbsoluteTimeGetCurrent();
  if (*(double *)(a1 + 400) != 0.0)
  {
    id v10 = (void *)sub_10003AB28((uint64_t)v45);
    *(void *)((char *)v10 + *(void *)(*v10 - 24) + 16) = 2;
    uint64_t v11 = std::ostream::operator<<();
    sub_10003AB28(v11);
  }
  int v44 = 0;
  sub_10010BB74(&v44, 0);
  if (*(_DWORD *)(a1 + 140))
  {
    id v12 = (void *)sub_10003AB28((uint64_t)v45);
    *(void *)((char *)v12 + *(void *)(*v12 - 24) + 16) = 2;
    uint64_t v13 = std::ostream::operator<<();
    sub_10003AB28(v13);
  }
  if (*(unsigned char *)(a1 + 98)) {
    sub_10003AB28((uint64_t)v45);
  }
  if (*(unsigned char *)(a1 + 160)) {
    sub_10003AB28((uint64_t)v45);
  }
  if (*(unsigned char *)(a1 + 236)) {
    sub_10003AB28((uint64_t)v45);
  }
  if (*(char *)(a1 + 231) < 0)
  {
    if (!*(void *)(a1 + 216)) {
      goto LABEL_24;
    }
    goto LABEL_23;
  }
  if (*(unsigned char *)(a1 + 231))
  {
LABEL_23:
    uint64_t v14 = sub_10003AB28((uint64_t)v45);
    sub_10003AB28(v14);
  }
LABEL_24:
  if (*(unsigned char *)(a1 + 354))
  {
    sub_10003AB28((uint64_t)v45);
    std::ostream::operator<<();
  }
  if (*(unsigned char *)(a1 + 234)) {
    sub_10003AB28((uint64_t)v45);
  }
  if (*(void *)(a1 + 56))
  {
    uint64_t v15 = sub_10003AB28((uint64_t)v45);
    sub_10004BDF8();
    uint64_t v16 = sub_10003AB28(v15);
    sub_10003AB28(v16);
    if (v43 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v17 = sub_10003AB28((uint64_t)v45);
  sub_1006AE72C((id *)a1);
  sub_10003AB28(v17);
  if (v43 < 0) {
    operator delete(__p);
  }
  if (*(unsigned char *)(a1 + 528))
  {
    uint64_t v18 = sub_10003AB28((uint64_t)v45);
    LOBYTE(__p) = *(unsigned char *)(a1 + 528);
    uint64_t v19 = sub_10003AB28(v18);
    uint64_t v20 = sub_10003AB28(v19);
    id v21 = +[NSString stringWithFormat:@"%@", *(void *)(a1 + 520)];
    strlen((const char *)[v21 UTF8String]);
    uint64_t v22 = sub_10003AB28(v20);
    sub_10003AB28(v22);
    std::ostream::operator<<();
  }
  uint64_t v23 = sub_10003AB28((uint64_t)v45);
  sub_10003AB28(v23);
  sub_10003AB28((uint64_t)v45);
  uint64_t v24 = std::ostream::operator<<();
  sub_10003AB28(v24);
  if (*(unsigned char *)(a1 + 608)) {
    sub_10003AB28((uint64_t)v45);
  }
  uint64_t v25 = *(char **)(a1 + 584);
  id v26 = *(char **)(a1 + 592);
  if (v25 != v26)
  {
    char v27 = -127;
    do
    {
      int v29 = *v25++;
      char v28 = v29;
      if (v27 <= v29) {
        char v27 = v28;
      }
    }
    while (v25 != v26);
    if (v27 >= -126)
    {
      sub_10003AB28((uint64_t)v45);
      uint64_t v30 = std::ostream::operator<<();
      sub_10003AB28(v30);
    }
  }
  id v31 = sub_1006B2CCC(a1);
  if ([v31 count])
  {
    sub_10003AB28((uint64_t)v45);
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    id v32 = v31;
    id v33 = [v32 countByEnumeratingWithState:&v38 objects:v59 count:16];
    if (v33)
    {
      uint64_t v34 = *(void *)v39;
      do
      {
        for (uint64_t i = 0; i != v33; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v39 != v34) {
            objc_enumerationMutation(v32);
          }
          strlen((const char *)[*(id *)(*((void *)&v38 + 1) + 8 * i) UTF8String]);
          uint64_t v36 = sub_10003AB28((uint64_t)v45);
          sub_10003AB28(v36);
        }
        id v33 = [v32 countByEnumeratingWithState:&v38 objects:v59 count:16];
      }
      while (v33);
    }

    sub_10003AB28((uint64_t)v45);
  }
  std::stringbuf::str();

  if (SHIBYTE(v47) < 0) {
    operator delete(v46[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006B2C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26)
{
  sub_10027E318((uint64_t)&a26);
  _Unwind_Resume(a1);
}

id sub_1006B2CCC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 512);
  if (v1)
  {
    id v2 = [v1 allKeys];
  }
  else
  {
    id v2 = &__NSArray0__struct;
  }

  return v2;
}

id sub_1006B2D0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3)
  {
    id v4 = *(void **)(a1 + 512);
    if (v4)
    {
      uint64_t v5 = [v4 objectForKey:v3];
      goto LABEL_7;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
  {
    sub_1007929E4();
  }
  uint64_t v5 = 0;
LABEL_7:

  return v5;
}

void sub_1006B2D98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006B2DA8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v5 || (unint64_t)[v5 length] >= 0x401)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_1007929E4();
    }
LABEL_5:
    uint64_t v7 = 0;
    goto LABEL_6;
  }
  if ((unint64_t)[v6 length] >= 0x401)
  {
    uint64_t v9 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100792A18((uint64_t)v5, (uint64_t)v6, v9);
    }
    goto LABEL_5;
  }
  if (!*(void *)(a1 + 512))
  {
    uint64_t v10 = objc_opt_new();
    uint64_t v11 = *(void **)(a1 + 512);
    *(void *)(a1 + 512) = v10;
  }
  if (_os_feature_enabled_impl()
    && [v5 isEqualToString:@"ASK_DISPLAY_NAME"])
  {
    sub_10004191C(__p, "DA_ASK_RETAIN_DEVICE");
    uint64_t v12 = sub_10003156C(a1 + 176, (const void **)__p);
    if (v36 < 0) {
      operator delete(__p[0]);
    }
    int v13 = *(unsigned __int8 *)(a1 + 160);
    sub_10004191C(v33, "_CTKD_");
    uint64_t v14 = sub_10003156C(a1 + 176, (const void **)v33);
    uint64_t v15 = a1 + 184;
    if (v13) {
      BOOL v16 = v15 == v14;
    }
    else {
      BOOL v16 = 1;
    }
    int v17 = !v16;
    if (v34 < 0) {
      operator delete(v33[0]);
    }
    id v18 = v6;
    uint64_t v19 = sub_1006B2D0C(a1, @"ASK_LINKED_RADIO_ADDRESS");
    uint64_t v20 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 138413570;
      id v38 = v5;
      __int16 v39 = 1024;
      int v40 = v17;
      __int16 v41 = 1024;
      BOOL v42 = v15 != v12;
      __int16 v43 = 1024;
      int v44 = v13;
      __int16 v45 = 1024;
      BOOL v46 = v19 != 0;
      __int16 v47 = 2112;
      id v48 = v18;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "setCustomProperty %@ ctkd:%d ASK:%d isPaired:%d isTransportLinked:%d askName:%@", buf, 0x2Eu);
    }
    if (v19) {
      int v21 = 1;
    }
    else {
      int v21 = v17;
    }
    if (v21 != 1 || v15 == v12) {
      goto LABEL_41;
    }
    if (v17)
    {
      unint64_t v22 = *(void *)(a1 + 24);
    }
    else
    {
      if (!v19)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT)) {
          sub_100792B0C();
        }
        goto LABEL_39;
      }
      unint64_t v22 = sub_1006ADA24(v19);
    }
    if (v22)
    {
      uint64_t v23 = sub_1004AF8EC();
      char v27 = _NSConcreteStackBlock;
      uint64_t v28 = 3221225472;
      int v29 = sub_1006B31FC;
      uint64_t v30 = &unk_100998A38;
      unint64_t v32 = v22;
      id v31 = v18;
      sub_100013018(v23, &v27);

LABEL_41:
      goto LABEL_42;
    }
LABEL_39:
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100792AA0();
    }
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v24 = [[*(id *)(a1 + 512) objectForKey:v5, v27, v28, v29, v30];
  unsigned int v25 = [v24 isEqualToString:v6];
  if ((v25 & 1) == 0)
  {
    id v26 = *(void **)(a1 + 512);
    if (v6) {
      [v26 setObject:v6 forKey:v5];
    }
    else {
      [v26 removeObjectForKey:v5];
    }
  }

  uint64_t v7 = v25 ^ 1;
LABEL_6:

  return v7;
}

void sub_1006B3174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  _Unwind_Resume(a1);
}

void sub_1006B31FC(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BE488);
  }
  uint64_t v2 = sub_100030F10((uint64_t)off_1009F7EF8, *(void *)(a1 + 40), 1);
  if (v2)
  {
    uint64_t v3 = v2;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v8 = 0;
    id v4 = *(void **)(a1 + 32);
    if (v4 && [v4 length]) {
      id v5 = (char *)[*(id *)(a1 + 32) UTF8String];
    }
    else {
      id v5 = "";
    }
    sub_10004191C(__p, v5);
    sub_1004776CC(v3, (uint64_t)__p, 0);
    if (SHIBYTE(v8) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    id v6 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100792B4C(a1 + 40, v6);
    }
  }
}

void sub_1006B3300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1006B331C(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v8 = 0;
  id v5 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v8, a2);
  BOOL result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_10030BBC8((uint64_t)a1, a3, v7);
    sub_100036CA0(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

void sub_1006B33A8(id a1)
{
}

void sub_1006B33EC()
{
}

void sub_1006B3410(id a1)
{
}

void sub_1006B3454()
{
}

void sub_1006B3478(id a1)
{
}

void sub_1006B34BC()
{
}

void sub_1006B3580(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B35E4(id a1)
{
  uint64_t v1 = objc_alloc_init(ContactTracingDaemonBridge);
  uint64_t v2 = (void *)qword_100A145A8;
  qword_100A145A8 = (uint64_t)v1;
}

void sub_1006B3718(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006B3920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006B3A70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006B3B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006B3BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006B3D58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006B3EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006B3F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006B3F74(uint64_t a1, void *a2)
{
  id v5 = a2;
  pthread_mutex_lock(&stru_1009FBEC0);
  id v3 = [v5 copy];
  id v4 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v3;

  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009BE5B0);
  }
  sub_1002C3EBC((uint64_t)off_1009F8740 + 80, a1);
  pthread_mutex_unlock(&stru_1009FBEC0);
}

void sub_1006B4020(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006B405C(uint64_t a1)
{
  pthread_mutex_lock(&stru_1009FBEC0);
  uint64_t v2 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = 0;

  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009BE5B0);
  }
  sub_100052718((uint64_t)off_1009F8740 + 80, a1);

  return pthread_mutex_unlock(&stru_1009FBEC0);
}

void sub_1006B4158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B4330(uint64_t a1, void *a2)
{
  id v4 = a2;
  pthread_mutex_lock(&stru_1009FBEC0);
  objc_storeStrong((id *)(a1 + 8), a2);
  pthread_mutex_unlock(&stru_1009FBEC0);
}

void sub_1006B439C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006B43F4(uint64_t a1)
{
  pthread_mutex_lock(&stru_1009FBEC0);
  uint64_t v2 = *(id *)(a1 + 8);
  if (v2)
  {
    id v3 = objc_retainBlock(*(id *)(a1 + 16));
    if (v3) {
      dispatch_async(v2, v3);
    }
  }

  return pthread_mutex_unlock(&stru_1009FBEC0);
}

void sub_1006B446C(id a1)
{
}

void sub_1006B44B0()
{
}

void sub_1006B44D4(id a1)
{
}

void sub_1006B4518()
{
}

void sub_1006B453C(id a1)
{
}

void sub_1006B4580()
{
}

void sub_1006B45A4(id a1)
{
}

void sub_1006B45E8()
{
}

uint64_t sub_1006B460C(uint64_t a1)
{
  uint64_t v2 = (void *)sub_1004C9B7C(a1, "GATTService", 0x100000);
  void *v2 = &off_1009BE5E0;
  v2[41] = 0;
  if (qword_1009FB7B8 != -1) {
    dispatch_once(&qword_1009FB7B8, &stru_1009BE6D0);
  }
  uint64_t v3 = qword_1009FB7B0;
  *(void *)(a1 + 328) = qword_1009FB7B0;
  sub_1004C9E90(a1, v3);
  return a1;
}

void sub_1006B469C(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

void sub_1006B46B8(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

uint64_t sub_1006B46F0(uint64_t a1)
{
  uint64_t v2 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GATTService start", v4, 2u);
  }
  return sub_1004CA044(a1);
}

uint64_t sub_1006B4764(uint64_t a1)
{
  uint64_t v2 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GATTService stop", v4, 2u);
  }
  return sub_1004CA358(a1);
}

BOOL sub_1006B47D8(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009BE6F0);
  }
  if (sub_1004C0770(qword_1009FB238, a2))
  {
    id v4 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, __p);
      if (v8 >= 0) {
        id v5 = __p;
      }
      else {
        id v5 = (void **)__p[0];
      }
      *(_DWORD *)int buf = 136446210;
      uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Rejecting GATT connection because device %{public}s is already connected over GATT", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    return 0;
  }
  else
  {
    return sub_1004CB48C(a1, (uint64_t)a2);
  }
}

uint64_t sub_1006B4944(uint64_t a1, uint64_t a2)
{
  long long v12 = xmmword_1007BEC90;
  memset(v14, 0, sizeof(v14));
  char v11 = 0;
  int v10 = 0;
  if (sub_10047B300(a2))
  {
    if (sub_100478F30(a2, &v12, 4u)) {
      int v4 = 4;
    }
    else {
      int v4 = 0;
    }
  }
  else
  {
    BOOL v5 = sub_10048A2B0(a2, v14, &v11);
    if (v11) {
      BOOL v6 = v5;
    }
    else {
      BOOL v6 = 0;
    }
    if (v6) {
      int v4 = 4 * (sub_10018BDDC((unsigned __int8 *)v14, 6145, &v10) == 0);
    }
    else {
      int v4 = 0;
    }
  }
  if (sub_10047B300(a2) && sub_100478B2C(a2, 23)) {
    int v4 = 4;
  }
  unsigned int v7 = *(_DWORD *)(a1 + 32);
  uint64_t v13 = 0;
  sub_100026C30((uint64_t)&v13);
  *(void *)&long long v9 = (int)v13;
  *((void *)&v9 + 1) = SWORD2(v13);
  return sub_100477F4C(a2, v7, v4, &v9, 0);
}

uint64_t sub_1006B4AB4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  long long v8 = xmmword_1007BEC90;
  memset(v9, 0, sizeof(v9));
  char v7 = 0;
  int v6 = 0;
  *a3 = 0;
  if (sub_10047B300(a2))
  {
    uint64_t result = sub_100478F30(a2, &v8, 4u);
    if ((result & 1) == 0) {
      return result;
    }
LABEL_10:
    *a3 = 1;
    return result;
  }
  if (sub_10048A2B0(a2, v9, &v7) && v7 && !sub_10018BDDC((unsigned __int8 *)v9, 6145, &v6)) {
    *a3 = 1;
  }
  uint64_t result = sub_10047B300(a2);
  if (result)
  {
    uint64_t result = sub_100478B2C(a2, 23);
    if (result) {
      goto LABEL_10;
    }
  }
  return result;
}

void sub_1006B4BD4(id a1)
{
}

void sub_1006B4C18()
{
}

void sub_1006B4C3C(id a1)
{
}

void sub_1006B4C80()
{
}

uint64_t sub_1006B4CA4(uint64_t a1, int a2, int a3, int a4)
{
  *(void *)a1 = &off_1009BE720;
  *(void *)(a1 + 8) = 0;
  long long v8 = (id *)(a1 + 8);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009BE738);
  }
  if ((a3 - 1) > 0xA)
  {
    long long v9 = @"com.apple.bluetooth.LeBroadcaster.AdvertisingConfigAssertion";
    if (!a4) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
  long long v9 = off_1009BE778[a3 - 1];
  if (a4)
  {
LABEL_7:
    long long v9 = +[NSString stringWithFormat:@"%@.ForceWake", v9];
  }
LABEL_8:
  objc_storeStrong(v8, v9);
  *(_DWORD *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 20) = a2;
  *(unsigned char *)(a1 + 24) = a4;
  if (!a4)
  {
    int v11 = IOPMAssertionCreateWithName(@"PreventUserIdleSystemSleep", 0xFFu, v9, (IOPMAssertionID *)(a1 + 28));
    if (!v11) {
      goto LABEL_18;
    }
    goto LABEL_14;
  }
  int v27 = 1;
  Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFDictionaryAddValue(Mutable, @"AssertName", v9);
  int v11 = IOPMAssertionDeclareSystemActivityWithProperties();
  long long v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)int buf = 138412802;
    int v29 = v9;
    __int16 v30 = 1024;
    int v31 = v11;
    __int16 v32 = 2080;
    id v33 = "kIOPMSystemSleepNotReverted";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "IOPMAssertionDeclareSystemActivityWithProperties %@ returned %d systemState=%s ", buf, 0x1Cu);
  }
  CFRelease(Mutable);
  if (v11)
  {
LABEL_14:
    uint64_t v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      id v18 = (__CFString *)[(__CFString *)v9 UTF8String];
      *(_DWORD *)int buf = 136315394;
      int v29 = v18;
      __int16 v30 = 1024;
      int v31 = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Failed to take assertionId for name: %s, return value was: %d", buf, 0x12u);
      uint64_t v13 = qword_100A19E50;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_FAULT)) {
      sub_100792C00((uint64_t)[(__CFString *)v9 UTF8String], buf, v11, v13);
    }
  }
LABEL_18:
  int v14 = *(_DWORD *)(a1 + 20);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  int v16 = *(_DWORD *)(a1 + 28);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009BE738);
  }
  sub_1004BBB7C((uint64_t)off_1009F8740);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009BE738);
  }
  v19[0] = v14;
  v19[1] = 0;
  _DWORD v19[2] = a3;
  v19[3] = 0;
  CFAbsoluteTime v20 = Current;
  int v21 = v11;
  char v22 = a4;
  __int16 v23 = 0;
  char v24 = 0;
  int v25 = v16;
  int v26 = 0;
  sub_1004BB940((uint64_t)off_1009F8740, v19);

  return a1;
}

void sub_1006B5018(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006B5058(uint64_t a1)
{
  *(void *)a1 = &off_1009BE720;
  uint64_t v2 = (int *)(a1 + 28);
  IOReturn v3 = IOPMAssertionRelease(*(_DWORD *)(a1 + 28));
  if (v3)
  {
    int v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      int v12 = *v2;
      *(_DWORD *)int buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v12;
      __int16 v24 = 1024;
      IOReturn v25 = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Failed to release assertionId: %d, return value was %d", buf, 0xEu);
      int v4 = qword_100A19E50;
    }
    if (os_log_type_enabled(v4, OS_LOG_TYPE_FAULT)) {
      sub_100792C58(v2, v3, v4);
    }
    if (qword_1009FB088 != -1) {
      dispatch_once(&qword_1009FB088, &stru_1009BE758);
    }
    uint64_t v5 = qword_1009FB080;
    sub_10004191C(buf, "Assertion");
    sub_10004191C(__p, "FailedToReleaseAssertion");
    sub_1004B7DA8(0.0, v5, (uint64_t *)buf, (uint64_t *)__p);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v26 < 0) {
      operator delete(*(void **)buf);
    }
  }
  int v6 = *(_DWORD *)(a1 + 16);
  int v7 = *(_DWORD *)(a1 + 20);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  char v9 = *(unsigned char *)(a1 + 24);
  int v10 = *(_DWORD *)(a1 + 28);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009BE738);
  }
  v13[0] = v7;
  v13[1] = 1;
  _DWORD v13[2] = v6;
  v13[3] = 0;
  CFAbsoluteTime v14 = Current;
  IOReturn v15 = v3;
  char v16 = v9;
  __int16 v17 = 0;
  char v18 = 0;
  int v19 = v10;
  int v20 = 0;
  sub_1004BB940((uint64_t)off_1009F8740, v13);

  return a1;
}

void sub_1006B5280(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }

  _Unwind_Resume(a1);
}

void sub_1006B52D8(uint64_t a1)
{
  sub_1006B5058(a1);

  operator delete();
}

id sub_1006B5310(uint64_t a1)
{
  return [*(id *)(a1 + 8) UTF8String];
}

void sub_1006B5318(id a1)
{
}

void sub_1006B535C()
{
}

void sub_1006B5380(id a1)
{
}

void sub_1006B53C4(uint64_t a1)
{
  *(void *)a1 = off_1009BE7E0;
  *(void *)(a1 + 8) = off_1009BE888;
  *(void *)(a1 + 16) = off_1009BE8A8;
  *(void *)(a1 + 24) = off_1009BE8D0;
  *(void *)(a1 + 32) = &off_1009BE900;
  *(void *)(a1 + 40) = &off_1009BE918;
  *(void *)(a1 + 48) = &off_1009BE930;
  *(void *)(a1 + 56) = &off_1009BE948;
  *(void *)(a1 + 64) = &off_1009BE960;
  *(void *)(a1 + 72) = 0;
  sub_100052DA8(a1 + 88);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(_DWORD *)(a1 + 152) = 500;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 164) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = a1 + 200;
  *(void *)(a1 + 208) = a1 + 200;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 256) = a1 + 256;
  *(void *)(a1 + 264) = a1 + 256;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 288) = 0;
  *(void *)(a1 + 272) = 0;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 296) = 0;
  *(void *)(a1 + 304) = 0;
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 312) = 0;
  operator new();
}

void sub_1006B5D44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  __cxa_guard_abort(&qword_100A146E8);

  int v21 = *(void **)(v14 + 296);
  if (v21)
  {
    *(void *)(v14 + 304) = v21;
    operator delete(v21);
  }

  sub_1006CF4C4(v19);
  sub_1000486F0(v18, *(void **)(v14 + 232));
  sub_1002B308C(v17);
  sub_1000486F0(v16, *(void **)(v14 + 184));

  sub_100052DA4(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B5ED4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 88);
  id v7 = sub_100030398(a1, v5);
  uint64_t v8 = (uint64_t)v7;
  if (v7)
  {
    [*(id *)(a1 + 280) addObject:v5];
    LODWORD(v7) = sub_1006AEC78(v8, v6);
  }
  if (v8) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = 3;
  }
  sub_10003AFB4((uint64_t)v11);

  return v9;
}

void sub_1006B5F78(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006B5F9C(uint64_t a1)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 88);
  uint64_t v2 = +[NSMutableArray array];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v3 = *(id *)(a1 + 280);
  id v4 = [v3 countByEnumeratingWithState:&v9 objects:v14 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v9 + 1) + 8 * i);
        if (*(objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v7, (void)v9) + 8)) {
          [v2 addObject:v7];
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v9 objects:v14 count:16];
    }
    while (v4);
  }

  sub_10003AFB4((uint64_t)v13);

  return v2;
}

void sub_1006B60F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006B6128(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 88);
  id v4 = [*(id *)(a1 + 168) objectForKey:v3];
  if (v4) {
    sub_1006B61A8((uint64_t)v4);
  }
  sub_10003AFB4((uint64_t)v5);
}

void sub_1006B6188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B61A8(uint64_t a1)
{
  if (*(void *)(a1 + 88) && *(void *)(a1 + 80))
  {
    uint64_t v2 = [*(id *)(a1 + 72) objectForKeyedSubscript:];
    id v7 = [v2 mutableCopy];

    [v7 removeObject:*(void *)(a1 + 88)];
    id v3 = [v7 count];
    id v4 = *(void **)(a1 + 72);
    if (v3) {
      [v4 setObject:v7 forKeyedSubscript:*(void *)(a1 + 80)];
    }
    else {
      [v4 removeObjectForKey:*(void *)(a1 + 80)];
    }
    uint64_t v5 = *(void **)(a1 + 88);
    *(void *)(a1 + 88) = 0;

    id v6 = *(void **)(a1 + 80);
    *(void *)(a1 + 80) = 0;
  }
}

void sub_1006B6270(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006B6290(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_100A146F8 != -1) {
    dispatch_once(&qword_100A146F8, &stru_1009BE9B0);
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  id v4 = (id *)sub_100030398(a1, v3);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    id v6 = v4[8];
    if (v6)
    {
      if (*(unsigned char *)(v5 + 164)) {
        unint64_t v7 = *(void *)(v5 + 56);
      }
      else {
        unint64_t v7 = 0;
      }
      long long v9 = sub_1006ADD84(v7);
      id v10 = *(id *)(v5 + 72);
      long long v11 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
      {
        long long v12 = CUPrintNSObjectOneLine();
        *(_DWORD *)int buf = 141558275;
        uint64_t v21 = 1752392040;
        __int16 v22 = 2113;
        id v23 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "getFindMyDeviceLTK findMyEncryptionDictionary:%{private, mask.hash}@", buf, 0x16u);
      }
      uint64_t v13 = [v10 objectForKeyedSubscript:v9];
      if ([v13 count])
      {
        uint64_t v14 = [v13 objectAtIndexedSubscript:0];
        uint64_t v15 = [v14 subdataWithRange:0, 16];
        id v8 = [v15 mutableCopy];

        if (byte_100A146F0)
        {
          __int16 v29 = 0;
          uint64_t v28 = 0;
          [v8 replaceBytesInRange:1 withBytes:10, &v28];
          uint64_t v16 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int buf = 141558275;
            uint64_t v21 = 1752392040;
            __int16 v22 = 2113;
            id v23 = v8;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "BAD LTK:%{private, mask.hash}@", buf, 0x16u);
          }
        }
        __int16 v17 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int buf = 141558787;
          uint64_t v21 = 1752392040;
          __int16 v22 = 2113;
          id v23 = v9;
          __int16 v24 = 2160;
          uint64_t v25 = 1752392040;
          __int16 v26 = 2113;
          id v27 = v8;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "getFindMyDeviceLTK sessionKey:%{private, mask.hash}@ --> %{private, mask.hash}@", buf, 0x2Au);
        }
        sub_1006B6700(v5, v9, v8);
      }
      else
      {
        id v8 = 0;
      }
    }
    else
    {
      id v8 = 0;
    }
  }
  else
  {
    id v8 = 0;
  }
  sub_10003AFB4((uint64_t)v19);

  return v8;
}

void sub_1006B65AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006B6628(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v4, "FindMy");
  sub_10004191C(__p, "ForceCorruptLTK");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A146F0);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1006B66CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006B6700(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  objc_storeStrong((id *)(a1 + 88), a3);
  id v7 = a3;
  id v6 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v5;
}

void sub_1006B6770(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006B683C;
  uint64_t v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1006B681C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006B683C(uint64_t a1)
{
  uint64_t v89 = *(void *)(a1 + 40);
  uint64_t v2 = sub_1006B5F9C(v89);
  id v79 = [v2 mutableCopy];

  uint64_t v120 = 0;
  uint64_t v119 = 0;
  long long v118 = (uint64_t *)&v119;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  id obj = *(id *)(a1 + 32);
  id v82 = [obj countByEnumeratingWithState:&v114 objects:v135 count:16];
  if (v82)
  {
    uint64_t v4 = (void *)(v89 + 184);
    uint64_t v81 = *(void *)v115;
    *(void *)&long long v3 = 141558531;
    long long v78 = v3;
    do
    {
      for (uint64_t i = 0; i != v82; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v115 != v81) {
          objc_enumerationMutation(obj);
        }
        id v5 = *(void **)(*((void *)&v114 + 1) + 8 * i);
        id v6 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 141558275;
          *(void *)&uint8_t buf[4] = 1752392040;
          *(_WORD *)&unsigned char buf[12] = 2113;
          *(void *)&unsigned char buf[14] = v5;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "SPOwner peripheral updated %{private, mask.hash}@", buf, 0x16u);
        }
        __int16 v85 = v5;
        id v7 = [v5 longTermKeyMap:v78];
        BOOL v8 = [v7 count] == 0;

        if (v8)
        {
          uint64_t v25 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
            sub_100792DD0(&v112, v113, v25);
          }
        }
        else
        {
          __int16 v83 = objc_opt_new();
          long long v9 = [v85 lastConnectedLEMAC];
          BOOL v10 = v9 == 0;

          if (!v10)
          {
            long long v11 = [v85 lastConnectedLEMAC];
            [v83 addObject:v11];
          }
          long long v12 = [v85 longTermKeyMap];
          BOOL v13 = [v12 count] == 0;

          if (!v13)
          {
            uint64_t v14 = [v85 longTermKeyMap];
            uint64_t v15 = [v14 allKeys];
            [v83 addObjectsFromArray:v15];
          }
          if ([v83 count])
          {
            *(void *)uuid_t uu = 0;
            uint64_t v134 = 0;
            uint64_t v16 = [v85 beaconIdentifier];
            __int16 v17 = sub_1006B7870(v89, v16);
            sub_1000305AC(uu, v17);

            if (!uuid_is_null(uu)) {
              goto LABEL_45;
            }
            uint64_t v18 = [v85 lastConnectedLEMAC];
            unint64_t v19 = sub_1006ADC58(v18);

            if (v19)
            {
              sub_100014B58(v89, v19, 0, 1u, 0, 0, buf);
              uuid_copy(uu, buf);
            }
            if (uuid_is_null(uu))
            {
              long long v108 = 0u;
              long long v109 = 0u;
              long long v106 = 0u;
              long long v107 = 0u;
              int v20 = [v85 longTermKeyMap];
              id v21 = [v20 countByEnumeratingWithState:&v106 objects:v132 count:16];
              if (v21)
              {
                uint64_t v22 = *(void *)v107;
                while (2)
                {
                  for (j = 0; j != v21; j = (char *)j + 1)
                  {
                    if (*(void *)v107 != v22) {
                      objc_enumerationMutation(v20);
                    }
                    unint64_t v24 = sub_1006ADC58(*(void **)(*((void *)&v106 + 1) + 8 * (void)j));
                    *(void *)&uint8_t buf[8] = 0;
                    *(void *)int buf = 0;
                    sub_100014B58(v89, v24, 0, 1u, 0, 0, buf);
                    if (!uuid_is_null(buf))
                    {
                      uuid_copy(uu, buf);
                      goto LABEL_32;
                    }
                  }
                  id v21 = [v20 countByEnumeratingWithState:&v106 objects:v132 count:16];
                  if (v21) {
                    continue;
                  }
                  break;
                }
              }
LABEL_32:
            }
            if (uuid_is_null(uu))
            {
              memset(v105, 0, sizeof(v105));
              id v27 = [v85 longTermKeyMap];
              if ([v27 countByEnumeratingWithState:v105 objects:v131 count:16])
              {
                unint64_t v28 = sub_1006ADC58(**((void ***)&v105[0] + 1));
                sub_100014B58(v89, v28, 1u, 1u, 0, 0, buf);
                uuid_copy(uu, buf);
              }
            }
            if (uuid_is_null(uu))
            {
              __int16 v29 = qword_100A19E78;
              if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
              {
                __int16 v30 = [v85 beaconIdentifier];
                sub_1006ACF44();
                int v31 = __p;
                if (v127 < 0) {
                  int v31 = *(unsigned char **)__p;
                }
                *(_DWORD *)int buf = v78;
                *(void *)&uint8_t buf[4] = 1752392040;
                *(_WORD *)&unsigned char buf[12] = 2113;
                *(void *)&unsigned char buf[14] = v30;
                __int16 v129 = 2082;
                uint64_t v130 = v31;
                _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "Failed to retrieve/create FindMy peripheral %{private, mask.hash}@ with address %{public}s, ignoring this device", buf, 0x20u);
                if (v127 < 0) {
                  operator delete(*(void **)__p);
                }
              }
            }
            else
            {
LABEL_45:
              __int16 v86 = objc_opt_new();
              long long v103 = 0u;
              long long v104 = 0u;
              long long v101 = 0u;
              long long v102 = 0u;
              id v87 = v83;
              id v32 = [v87 countByEnumeratingWithState:&v101 objects:v123 count:16];
              if (v32)
              {
                uint64_t v88 = *(void *)v102;
                do
                {
                  for (k = 0; k != v32; k = (char *)k + 1)
                  {
                    if (*(void *)v102 != v88) {
                      objc_enumerationMutation(v87);
                    }
                    unint64_t v34 = sub_1006ADC58(*(void **)(*((void *)&v101 + 1) + 8 * (void)k));
                    uint64_t v35 = v34;
                    char v36 = (void *)*v4;
                    uint64_t v37 = v89 + 184;
                    if (*v4)
                    {
                      uint64_t v38 = v89 + 184;
                      do
                      {
                        unint64_t v39 = v36[4];
                        BOOL v40 = v39 >= v34;
                        if (v39 >= v34) {
                          __int16 v41 = v36;
                        }
                        else {
                          __int16 v41 = v36 + 1;
                        }
                        if (v40) {
                          uint64_t v38 = (uint64_t)v36;
                        }
                        char v36 = (void *)*v41;
                      }
                      while (*v41);
                      uint64_t v37 = v89 + 184;
                      if ((void *)v38 != v4)
                      {
                        uint64_t v37 = v89 + 184;
                        if (v34 >= *(void *)(v38 + 32))
                        {
                          BOOL v42 = sub_100031234(uu);
                          __int16 v43 = sub_100031234((const unsigned __int8 *)(v38 + 40));
                          unsigned __int8 v44 = [v42 isEqual:v43];

                          if ((v44 & 1) == 0)
                          {
                            __int16 v45 = qword_100A19E78;
                            if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
                            {
                              sub_100031234((const unsigned __int8 *)(v38 + 40));
                              id v46 = (id)objc_claimAutoreleasedReturnValue();
                              sub_10004BDF8();
                              __int16 v47 = buf;
                              if (v129 < 0) {
                                __int16 v47 = *(unsigned char **)buf;
                              }
                              *(_DWORD *)long long __p = 138543618;
                              *(void *)&__p[4] = v46;
                              __int16 v125 = 2082;
                              uint64_t v126 = v47;
                              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Previous device %{public}@ with address %{public}s pending removal", __p, 0x16u);
                              if (SHIBYTE(v129) < 0) {
                                operator delete(*(void **)buf);
                              }
                            }
                            id v48 = sub_100031234((const unsigned __int8 *)(v38 + 40));
                            [v86 addObject:v48];
                          }
                          uint64_t v37 = v38;
                        }
                      }
                    }
                    if (*(unsigned char *)(v89 + 164))
                    {
                      long long v49 = (id *)sub_100361570(*(void *)(v89 + 248), v35);
                      if (v49)
                      {
                        long long v50 = sub_100031234(uu);
                        id v51 = *v49;
                        unsigned __int8 v52 = [v50 isEqual:v51];

                        if ((v52 & 1) == 0)
                        {
                          long long v53 = qword_100A19E78;
                          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
                          {
                            sub_100031234((const unsigned __int8 *)(v37 + 40));
                            id v54 = (id)objc_claimAutoreleasedReturnValue();
                            sub_10004BDF8();
                            long long v55 = buf;
                            if (v129 < 0) {
                              long long v55 = *(unsigned char **)buf;
                            }
                            *(_DWORD *)long long __p = 138543618;
                            *(void *)&__p[4] = v54;
                            __int16 v125 = 2082;
                            uint64_t v126 = v55;
                            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Previous device %{public}@ with address %{public}s pending removal", __p, 0x16u);
                            if (SHIBYTE(v129) < 0) {
                              operator delete(*(void **)buf);
                            }
                          }
                          id v56 = *v49;
                          [v86 addObject:v56];
                        }
                      }
                    }
                  }
                  id v32 = [v87 countByEnumeratingWithState:&v101 objects:v123 count:16];
                }
                while (v32);
              }

              long long v99 = 0u;
              long long v100 = 0u;
              long long v97 = 0u;
              long long v98 = 0u;
              id v57 = v86;
              id v58 = [v57 countByEnumeratingWithState:&v97 objects:v122 count:16];
              if (v58)
              {
                uint64_t v59 = *(void *)v98;
                do
                {
                  __int16 v60 = 0;
                  do
                  {
                    if (*(void *)v98 != v59) {
                      objc_enumerationMutation(v57);
                    }
                    int v61 = *(void **)(*((void *)&v97 + 1) + 8 * (void)v60);
                    __int16 v62 = qword_100A19E78;
                    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)int buf = 138543362;
                      *(void *)&uint8_t buf[4] = v61;
                      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Removing previous device %{public}@ with same address, disconnecting if already connecting/connected", buf, 0xCu);
                    }
                    if (qword_1009F8788 != -1) {
                      dispatch_once(&qword_1009F8788, &stru_1009BEB80);
                    }
                    sub_1002F8D58((uint64_t)off_1009F8780, v61, 8u);
                    sub_1006B7A50(v89, v61);
                    __int16 v60 = (char *)v60 + 1;
                  }
                  while (v58 != v60);
                  id v58 = [v57 countByEnumeratingWithState:&v97 objects:v122 count:16];
                }
                while (v58);
              }

              __int16 v63 = sub_100031234(uu);
              int v64 = sub_1006B5ED4(v89, v63, v85);

              if (v64)
              {
                char v65 = qword_100A19E78;
                if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
                {
                  int v70 = sub_100031234(uu);
                  *(_DWORD *)int buf = 138543618;
                  *(void *)&uint8_t buf[4] = v70;
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)&unsigned char buf[14] = v64;
                  _os_log_error_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_ERROR, "Failed to set FindMy info for device %{public}@ with result %d, skipping", buf, 0x12u);
                }
                int v66 = sub_100031234(uu);
                sub_1006B7A50(v89, v66);
              }
              else
              {
                id v67 = [v85 name];
                sub_10004191C(v95, (char *)[v67 UTF8String]);
                sub_1006B7F8C(v89, uu, (uint64_t)v95, 4);
                if (v96 < 0) {
                  operator delete(v95[0]);
                }

                id v68 = qword_100A19E78;
                if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
                {
                  long long v69 = sub_100031234(uu);
                  *(_DWORD *)int buf = 138543362;
                  *(void *)&uint8_t buf[4] = v69;
                  _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "new addresses for device %{public}@ changed", buf, 0xCu);
                }
                sub_1006AA1A4(&v118, uu, uu);
                int v66 = sub_100031234(uu);
                [v79 removeObject:v66];
              }
            }
          }
          else
          {
            __int16 v26 = qword_100A19E78;
            if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
              sub_100792E10(&v110, v111, v26);
            }
          }
        }
      }
      id v82 = [obj countByEnumeratingWithState:&v114 objects:v135 count:16];
    }
    while (v82);
  }

  if (v120)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009BEBA0);
    }
    __int16 v71 = off_1009F7EB8;
    sub_1006CFF24((uint64_t *)v94, (uint64_t)&v118);
    sub_10067DFF4((uint64_t)v71, v94);
    sub_1000486F0((uint64_t)v94, (void *)v94[1]);
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BEB80);
    }
    sub_1003065F4((uint64_t)off_1009F8780);
  }
  long long v92 = 0u;
  long long v93 = 0u;
  long long v90 = 0u;
  long long v91 = 0u;
  id v72 = v79;
  id v73 = [v72 countByEnumeratingWithState:&v90 objects:v121 count:16];
  if (v73)
  {
    uint64_t v74 = *(void *)v91;
    do
    {
      int v75 = 0;
      do
      {
        if (*(void *)v91 != v74) {
          objc_enumerationMutation(v72);
        }
        unsigned int v76 = *(void **)(*((void *)&v90 + 1) + 8 * (void)v75);
        char v77 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v76;
          _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "removing FindMy %{public}@, disconnecting if already connecting/connected", buf, 0xCu);
        }
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009BEB80);
        }
        sub_1002F8D58((uint64_t)off_1009F8780, v76, 8u);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
        }
        sub_1006B7A50((uint64_t)off_1009F7ED8, v76);
        int v75 = (char *)v75 + 1;
      }
      while (v73 != v75);
      id v73 = [v72 countByEnumeratingWithState:&v90 objects:v121 count:16];
    }
    while (v73);
  }

  sub_1000486F0((uint64_t)&v118, v119);
}

void sub_1006B7628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42)
{
  _Unwind_Resume(a1);
}

id sub_1006B7870(uint64_t a1, void *a2)
{
  id v3 = a2;
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 88);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = *(id *)(a1 + 280);
  id v5 = [v4 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v17;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v6) {
          objc_enumerationMutation(v4);
        }
        BOOL v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        long long v9 = (id *)[*(id *)(a1 + 168) objectForKey:v8];
        if (v9)
        {
          id v10 = v9[8];
          long long v11 = v10;
          if (v10)
          {
            long long v12 = [v10 beaconIdentifier];
            unsigned __int8 v13 = [v12 isEqual:v3];

            if (v13)
            {
              id v14 = v8;

              goto LABEL_14;
            }
          }
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v16 objects:v21 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  id v14 = 0;
LABEL_14:

  sub_10003AFB4((uint64_t)v20);

  return v14;
}

void sub_1006B7A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006B7A50(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138543362;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clearing all records of device %{public}@", buf, 0xCu);
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  id v5 = [*(id *)(a1 + 168) objectForKey:v3];
  uint64_t v6 = (uint64_t)v5;
  if (v5)
  {
    if (v5[164])
    {
      id v7 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 138412290;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device %@ is pending delete but still connected, wait for a complete disconnection", buf, 0xCu);
      }
      *(unsigned char *)(v6 + 488) = 1;
      goto LABEL_27;
    }
    if (_os_feature_enabled_impl())
    {
      sub_10004191C(__p, "DA_ASK_RETAIN_DEVICE");
      int v8 = sub_100030A04(a1, v3, (uint64_t)__p);
      int v9 = v8;
      if ((v18 & 0x80000000) == 0)
      {
        if (!v8) {
          goto LABEL_20;
        }
LABEL_13:
        id v10 = sub_1006BE4EC(a1, v3, @"ASK_LINKED_RADIO_ADDRESS");
        long long v11 = v10;
        if (v10)
        {
          unint64_t v12 = sub_1006ADA24(v10);
          unsigned __int8 v13 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
          {
            *(_DWORD *)int buf = 138478083;
            *(void *)&uint8_t buf[4] = v11;
            __int16 buf_12 = 2112;
            id buf_14 = v3;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "removing classic paired device with address %{private}@ linked with %@", buf, 0x16u);
          }
          if (qword_1009F8768 != -1) {
            dispatch_once(&qword_1009F8768, &stru_1009BECA0);
          }
          sub_100610F18((uint64_t)off_1009F8760, v12);
          sub_1006BE60C(a1, v3, @"ASK_LINKED_RADIO_ADDRESS", 0);
        }

        goto LABEL_20;
      }
      operator delete(__p[0]);
      if (v9) {
        goto LABEL_13;
      }
    }
LABEL_20:
    [*(id *)(a1 + 168) removeObjectForKey:v3];
    *(void *)std::string uu2 = 0;
    uint64_t v24 = 0;
    sub_1000305AC(uu2, v3);
    id v14 = (unsigned __int8 *)(a1 + 200);
    for (uint64_t i = *(unsigned __int8 **)(a1 + 208); ; uint64_t i = (unsigned __int8 *)*((void *)i + 1))
    {
      if (i == v14) {
        goto LABEL_26;
      }
      if (!uuid_compare(i + 16, uu2)) {
        break;
      }
    }
    if (i != v14)
    {
      uint64_t v16 = *(void *)i;
      *(void *)(v16 + 8) = *((void *)i + 1);
      **((void **)i + 1) = v16;
      --*(void *)(a1 + 216);
      operator delete(i);
    }
LABEL_26:
    [*(id *)(a1 + 280) removeObject:v3];
    *(void *)int buf = *(void *)(v6 + 24);
    sub_1000517A4(a1 + 176, (unint64_t *)buf);
    *(void *)int buf = *(void *)(v6 + 16);
    sub_1000517A4(a1 + 176, (unint64_t *)buf);
    sub_100361908(*(void *)(a1 + 248), v6);
    sub_1006AFD74(v6, 0, 0, 0);
    sub_1006C2F94(v6, a1 + 256);
    sub_1006CFB8C(v6);
    operator delete();
  }
LABEL_27:
  sub_10003AFB4((uint64_t)v19);
}

void sub_1006B7EF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  sub_10003AFB4((uint64_t)&a24);

  _Unwind_Resume(a1);
}

uint64_t sub_1006B7F8C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, int a4)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  int v9 = sub_100031234(a2);
  id v10 = sub_100030398(a1, v9);

  if (!v10)
  {
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    uint64_t v18 = *(void *)(a3 + 16);
  }
  uint64_t v12 = sub_1006AE048((uint64_t)v10, (uint64_t)__p, a4, 0);
  uint64_t v11 = v12;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if (!v12) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  operator delete(__p[0]);
  if (v11) {
LABEL_10:
  }
    sub_1006BABD8(a1, a2);
LABEL_11:
  unsigned __int8 v13 = sub_100031234(a2);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003B098(v15, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)a3;
    uint64_t v16 = *(void *)(a3 + 16);
  }
  sub_1006C0EC4(a1, v13, (unsigned __int8 *)v15);
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[0]);
  }

LABEL_17:
  sub_10003AFB4((uint64_t)v19);
  return v11;
}

void sub_1006B80F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_10003AFB4((uint64_t)&a23);
  _Unwind_Resume(a1);
}

void sub_1006B815C(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BEBE0);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BEC00);
  }
  sub_100708564((void *)qword_1009F7EC8, a1 + 16);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BEC20);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 24);
  if ((sub_100360DE0(*(void *)(a1 + 248), a1 + 32) & 1) == 0
    && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
  {
    sub_100793098();
  }
  sub_100373068();
  char v25 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(v23, "Device");
  sub_10004191C(__p, "wipeIDCache");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v2 + 72))(v2, v23, __p, &v25);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(v23[0]);
  }
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BEC40);
  }
  int v3 = sub_1004FA2C8((uint64_t)off_1009F8150);
  if (v25) {
    int v4 = 1;
  }
  else {
    int v4 = v3;
  }
  if (v4 == 1)
  {
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v5 = *(id *)(a1 + 168);
    id v6 = [v5 countByEnumeratingWithState:&v17 objects:v26 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v18;
      do
      {
        for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v18 != v7) {
            objc_enumerationMutation(v5);
          }
          sub_1006B85C0(a1, *(void **)(*((void *)&v17 + 1) + 8 * i), @"LeIdentificationHashExist");
        }
        id v6 = [v5 countByEnumeratingWithState:&v17 objects:v26 count:16];
      }
      while (v6);
    }
  }
  int v9 = sub_1003734A0();
  id v10 = v9;
  if (v9) {
    [v9 setPeripheralsUpdatedCallback:&stru_1009BE9F0];
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BEC20);
  }
  *(unsigned char *)(a1 + 321) = *((unsigned char *)off_1009F8068 + 60);
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BEC60);
  }
  sub_1000A7BDC((uint64_t)off_1009F85C0 + 1872, a1 + 64);
  uint64_t v11 = sub_10003FFD4();
  sub_1006CF56C(v11 + 1128, a1 + 56);
  uint64_t v12 = sub_10003FFD4();
  sub_1006CF87C(v12 + 1088, a1 + 48);
  uint64_t v13 = sub_10003FFD4();
  sub_100471048(v13 + 728, a1 + 40);
  uint64_t v14 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 152))(v14, a1 + 375);
  uint64_t v15 = sub_10003FFD4();
  *(unsigned char *)(a1 + 377) = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 184))(v15);
  uint64_t v16 = sub_10003FFD4();
  *(unsigned char *)(a1 + 376) = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 192))(v16);
  *(_WORD *)(a1 + 372) = 0;
}

void sub_1006B8564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006B85C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v45[0] = 0;
  v45[1] = 0;
  sub_10003AED0((uint64_t)v45, a1 + 88);
  uint64_t v7 = sub_100030398(a1, v5);
  int v8 = v7;
  if (!v7)
  {
    BOOL v16 = 0;
    goto LABEL_35;
  }
  if (!_os_feature_enabled_impl()
    || ![v6 isEqualToString:@"DA_ASK_RETAIN_DEVICE"])
  {
    goto LABEL_7;
  }
  if (*((unsigned char *)v8 + 160))
  {
    int v9 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Ignoring unsetting DA_ASK_RETAIN_DEVICE for LE Paired devices", buf, 2u);
    }
LABEL_7:
    int v10 = 0;
    goto LABEL_8;
  }
  char v24 = sub_1006B2D0C((uint64_t)v8, @"ASK_LINKED_RADIO_ADDRESS");
  if (v24)
  {
    sub_10004191C(v43, (char *)[v6 UTF8String]);
    uint64_t v25 = sub_10003156C((uint64_t)(v8 + 22), (const void **)v43);
    if (v44 < 0) {
      operator delete(v43[0]);
    }
    if (v8 + 23 == (void *)v25)
    {
      __int16 v29 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = (id)*v8;
        *(_DWORD *)int buf = 138412290;
        *(void *)&uint8_t buf[4] = v30;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Device %@ does not have DA_ASK_RETAIN_DEVICE tag", buf, 0xCu);
      }
    }
    else
    {
      unint64_t v26 = sub_1006ADA24(v24);
      id v27 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
      {
        id v28 = (id)*v8;
        *(_DWORD *)int buf = 138478083;
        *(void *)&uint8_t buf[4] = v24;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&unsigned char buf[14] = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "Removing classic paired device with address %{private}@ linked with %@", buf, 0x16u);
      }
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009BECA0);
      }
      sub_100610F18(off_1009F8760, v26);
      sub_1006B2DA8((uint64_t)v8, @"ASK_LINKED_RADIO_ADDRESS", 0);
      sub_1006B2DA8((uint64_t)v8, @"ASK_RELATED_RADIO_ADDRESS", 0);
    }
  }

  int v10 = 1;
LABEL_8:
  uint64_t v11 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004191C(__p, (char *)[v6 UTF8String]);
    uint64_t v12 = sub_10003156C((uint64_t)(v8 + 22), (const void **)__p);
    *(_DWORD *)int buf = 138543874;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&unsigned char buf[14] = v5;
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = v8 + 23 != (void *)v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Removing \"%{public}@\" tag from device \"%{public}@\" hasTag:%d", buf, 0x1Cu);
    if (v42 < 0) {
      operator delete(__p[0]);
    }
  }
  id v13 = v6;
  sub_10004191C(v39, (char *)[v13 UTF8String]);
  uint64_t v14 = sub_10037EF3C((uint64_t **)v8 + 22, (const void **)v39);
  uint64_t v15 = v14;
  BOOL v16 = v14 != 0;
  if (v40 < 0)
  {
    operator delete(v39[0]);
    if (!v15) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_16:
    sub_1000305AC(buf, v5);
    sub_1006BABD8(a1, buf);
  }
LABEL_17:
  sub_10003AFE8((uint64_t)v45);
  if (([v13 isEqualToString:@"HasBuiltinServices"] & 1) != 0
    || [v13 isEqualToString:@"DoNotAutoConnect"])
  {
    sub_1006BAE00(a1, 1);
  }
  if ([v13 isEqualToString:@"IsAppleWatch"])
  {
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009BEC00);
    }
    sub_10070D294(qword_1009F7EC8, v5);
  }
  if ([v13 isEqualToString:@"BluetoothTVRemote"])
  {
    sub_10004191C(v37, "DoNotStopAutoConnecting");
    sub_10037EF3C((uint64_t **)v8 + 22, (const void **)v37);
    if (v38 < 0) {
      operator delete(v37[0]);
    }
  }
  memset(buf, 0, 32);
  *(_DWORD *)int buf = *(_DWORD *)(a1 + 288);
  sub_100040550(&buf[8], a1 + 296);
  v33._uint64_t os_unfair_lock_opaque = *(_DWORD *)buf;
  long long __dst = 0;
  uint64_t v36 = 0;
  unint64_t v34 = 0;
  long long v17 = *(const void **)&buf[8];
  int64_t v18 = *(void *)&buf[16] - *(void *)&buf[8];
  if (*(void *)&buf[16] != *(void *)&buf[8])
  {
    sub_1000405B8(&v34, v18 >> 3);
    long long v19 = (char *)__dst;
    memmove(__dst, v17, v18);
    long long __dst = &v19[8 * (v18 >> 3)];
  }
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1006BDDFC;
  v31[3] = &unk_1009BEAB0;
  id v32 = v5;
  sub_1006CF3A4(&v33, v31);
  if (v34)
  {
    long long __dst = v34;
    operator delete(v34);
  }
  if (v10) {
    sub_1006B7A50(a1, *v8);
  }

  uint64_t v7 = *(void **)&buf[8];
  if (*(void *)&buf[8])
  {
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    operator delete(*(void **)&buf[8]);
  }
LABEL_35:
  uint64_t v20 = sub_100030B78((uint64_t)v7, v5);
  if (v20)
  {
    uint64_t v21 = sub_1003708B0();
    sub_10004191C(buf, (char *)[v6 UTF8String]);
    int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v21 + 800))(v21, v20, buf);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    if (v22)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v20, buf);
        sub_10079311C();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG))
      {
        sub_100474E18(v20, buf);
        sub_1007930CC();
      }
      BOOL v16 = 1;
    }
  }
  sub_10003AFB4((uint64_t)v45);

  return v16;
}

void sub_1006B8C74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,char a43)
{
  if (a42 < 0) {
    operator delete(__p);
  }

  sub_10003AFB4((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_1006B8D84(id a1, NSArray *a2)
{
  uint64_t v2 = a2;
  int v3 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 141558275;
    uint64_t v5 = 1752392040;
    __int16 v6 = 2113;
    uint64_t v7 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "FindMy update %{private, mask.hash}@", (uint8_t *)&v4, 0x16u);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  sub_1006B6770((uint64_t)off_1009F7ED8, v2);
}

void sub_1006B8E7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B8E94(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BEC20);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 24);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BEC00);
  }
  sub_1007086AC(qword_1009F7EC8, a1 + 16);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BEBE0);
  }
  sub_100052718(qword_1009F8160 + 8, a1 + 8);
  uint64_t v2 = *(const void **)(a1 + 336);
  if (v2) {
    CFRelease(v2);
  }
  int v3 = *(const void **)(a1 + 344);
  if (v3) {
    CFRelease(v3);
  }

  sub_1006B8F90(a1);
}

void sub_1006B8F90(uint64_t a1)
{
  if (_os_feature_enabled_impl() && *(void *)(a1 + 72))
  {
    uint64_t v2 = (const char **)sub_100019878();
    if (sub_1004B0060(v2))
    {
      [*(id *)(a1 + 72) setEventHandler:0];
      [*(id *)(a1 + 72) invalidate];
      int v3 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = 0;
    }
    else
    {
      uint64_t v4 = sub_100019878();
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      void v5[2] = sub_1006B94DC;
      v5[3] = &unk_100997528;
      _OWORD v5[4] = a1;
      sub_100013018(v4, v5);
    }
  }
}

void sub_1006B9074(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    if (*(void *)(a1 + 72))
    {
      uint64_t v2 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "LeDeviceManager::registerForDAEvents Already registered", buf, 2u);
      }
    }
    else
    {
      id v3 = objc_alloc_init((Class)DASession);
      uint64_t v4 = *(void **)(a1 + 72);
      *(void *)(a1 + 72) = v3;

      [*(id *)(a1 + 72) setDispatchQueue:*(void *)(sub_100019878() + 8)];
      [*(id *)(a1 + 72) setDeviceFlags:8];
      v6[0] = _NSConcreteStackBlock;
      v6[1] = 3221225472;
      void v6[2] = sub_1006B91D8;
      uint64_t v6[3] = &unk_1009ADF48;
      void v6[4] = a1;
      [*(id *)(a1 + 72) setEventHandler:v6];
      uint64_t v5 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::registerForDAEvents registering for deviceAccess events", buf, 2u);
      }
      [*(id *)(a1 + 72) activate];
    }
  }
}

void sub_1006B91D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    [v3 eventType];
    __int16 v6 = DAEventTypeToString();
    uint64_t v7 = [v3 error];
    *(_DWORD *)int buf = 138412802;
    BOOL v16 = v6;
    __int16 v17 = 2112;
    int64_t v18 = v7;
    __int16 v19 = 2112;
    id v20 = v3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "LeDeviceManager ASK eventHandler %@ error %@ event %@", buf, 0x20u);
  }
  int v8 = [v3 error];
  BOOL v9 = v8 == 0;

  if (v9)
  {
    id v10 = [v3 eventType];
    if (v10 == (id)10)
    {
      sub_1006B93F4(v4, 0);
    }
    else if (v10 == (id)42)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass() & 1) != 0 || (objc_opt_class(), (objc_opt_isKindOfClass()))
      {
        id v11 = v3;
        uint64_t v12 = [v11 device];
        uint64_t v14 = v12;
        id v13 = +[NSArray arrayWithObjects:&v14 count:1];
        sub_1006B93F4(v4, v13);
      }
    }
  }
}

void sub_1006B93A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B93F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (_os_feature_enabled_impl())
  {
    uint64_t v4 = *(void **)(a1 + 72);
    if (v4)
    {
      if (v3)
      {
        id v5 = v3;
      }
      else
      {
        id v5 = [v4 availableDevices];
      }
      __int16 v6 = v5;
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      v7[2] = sub_1006B9528;
      v7[3] = &unk_1009BEA10;
      v7[4] = a1;
      [v5 enumerateObjectsUsingBlock:v7];
    }
  }
}

void sub_1006B94BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B94DC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  [*(id *)(v1 + 72) setEventHandler:0];
  [*(id *)(v1 + 72) invalidate];
  uint64_t v2 = *(void **)(v1 + 72);
  *(void *)(v1 + 72) = 0;
}

void sub_1006B9528(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 32);
  if (([v3 flags] & 8) != 0)
  {
    id v5 = [v3 bluetoothIdentifier];

    if (v5)
    {
      __int16 v6 = [v3 bluetoothIdentifier];
      id v7 = [*(id *)(v4 + 168) objectForKey:v6];
      if (v7)
      {
        int v8 = [v3 name];
        if (v8)
        {
          int v9 = sub_1006B2DA8((uint64_t)v7, @"ASK_DISPLAY_NAME", v8);
          id v10 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
          {
            sub_1006B2368((uint64_t)v7);
            if (v13 >= 0) {
              p_p = &__p;
            }
            else {
              p_p = __p;
            }
            *(_DWORD *)int buf = 67109890;
            int v15 = v9;
            __int16 v16 = 2112;
            id v17 = v3;
            __int16 v18 = 2080;
            __int16 v19 = p_p;
            __int16 v20 = 2112;
            uint64_t v21 = v8;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "LeDeviceManager::refreshDANames setCustomProperty returned %d for %@ %s %@", buf, 0x26u);
            if (v13 < 0) {
              operator delete(__p);
            }
          }
        }
      }
    }
  }
}

void sub_1006B96BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B96F8(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006B9774;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1006B9774(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1003734A0();
  if (v2)
  {
    id v3 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FFFFEEEE-DDDD-CCCC-BBBB-AAAA00000000"];
    id v4 = objc_alloc_init((Class)NSArray);
    [v2 startSessionForUserIdentifier:v3 bundleId:@"com.apple.bluetoothd" vendorIdentifierList:v4 completion:&stru_1009BEA30];

    id v5 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "FindMy registration completed", buf, 2u);
    }
  }
  *(unsigned char *)(v1 + 321) = 1;
  if (_os_feature_enabled_impl())
  {
    __int16 v6 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[BTGlobalTCCNames] LeDeviceManager::stackDidStart", buf, 2u);
    }
    uint64_t v7 = sub_100019878();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1006B99E0;
    void v8[3] = &unk_100997528;
    v8[4] = v1;
    sub_1004AFF58(v7, 5000, v8);
    sub_1006B9074(v1);
  }
}

void sub_1006B9914(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006B993C(id a1, NSError *a2)
{
  id v3 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "startSessionForUserIdentifier returned %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_1006B99E0(uint64_t a1)
{
  return sub_1006B99E8(*(void *)(a1 + 32));
}

uint64_t sub_1006B99E8(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BEC40);
  }
  double v2 = *((double *)off_1009F8150 + 62);
  if (v2 == 0.0)
  {
    unsigned int v3 = 0;
    int v4 = 9999;
  }
  else
  {
    int v4 = (int)((CFAbsoluteTimeGetCurrent() - v2) / 60.0);
    unsigned int v3 = v4;
  }
  id v5 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(a1 + 375);
    int v7 = *(unsigned __int8 *)(a1 + 321);
    int v8 = *(unsigned __int8 *)(a1 + 376);
    int v9 = *(unsigned __int8 *)(a1 + 377);
    int v10 = *(_DWORD *)(a1 + 368);
    v12[0] = 67110400;
    v12[1] = v6;
    __int16 v13 = 1024;
    int v14 = v7;
    __int16 v15 = 1024;
    int v16 = v8;
    __int16 v17 = 1024;
    int v18 = v9;
    __int16 v19 = 1024;
    int v20 = v10;
    __int16 v21 = 1024;
    int v22 = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "[BTGlobalTCCNames] LeDeviceManager::startActiveScanIfNeededForGlobalTCCDialog fScreenState:%d fStackStarted:%d fDeviceFirstUnlocked:%d fDeviceLocked:%d fNameSearchActiveScanCounter:%d LastActiveScanTime:%d minutes ago", (uint8_t *)v12, 0x26u);
  }
  if (*(unsigned char *)(a1 + 375)
    && *(unsigned char *)(a1 + 321)
    && *(unsigned char *)(a1 + 376)
    && !*(unsigned char *)(a1 + 377)
    && v3 >= *(unsigned __int16 *)(a1 + 372)
    && !*(void *)(a1 + 352))
  {
    sub_1006CC96C(a1);
    ++*(_DWORD *)(a1 + 368);
  }
  if (*(void *)(a1 + 352) && (!*(unsigned char *)(a1 + 375) || *(unsigned char *)(a1 + 377))) {
    sub_1006CCBFC(a1);
  }
  return 0;
}

void sub_1006B9BAC(uint64_t a1)
{
}

uint64_t sub_1006B9BB4(uint64_t a1)
{
  double v2 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::stackWillStop enter", buf, 2u);
  }
  *(void *)int buf = 0;
  uint64_t v21 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 88);
  uint64_t v3 = sub_100019878();
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_1006B9EF4;
  v19[3] = &unk_100997528;
  int v19[4] = a1;
  sub_100013018(v3, v19);
  int v4 = sub_1003734A0();
  if (v4)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
    }
    sub_1006B5F9C((uint64_t)off_1009F7ED8);
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v5 = (id)objc_claimAutoreleasedReturnValue();
    id v6 = [v5 countByEnumeratingWithState:&v15 objects:v22 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v16;
      do
      {
        int v8 = 0;
        do
        {
          if (*(void *)v16 != v7) {
            objc_enumerationMutation(v5);
          }
          int v9 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v8);
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
          }
          sub_1006B7A50((uint64_t)off_1009F7ED8, v9);
          int v8 = (char *)v8 + 1;
        }
        while (v6 != v8);
        id v6 = [v5 countByEnumeratingWithState:&v15 objects:v22 count:16];
      }
      while (v6);
    }

    [*(id *)(a1 + 280) removeAllObjects];
    id v10 = [objc_alloc((Class)NSUUID) initWithUUIDString:@"FFFFEEEE-DDDD-CCCC-BBBB-AAAA00000000"];
    [v4 stopSessionForUserIdentifier:v10 bundleId:@"com.apple.bluetoothd" completion:&stru_1009BEA50];

    id v11 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "FindMy unregistration completed", v14, 2u);
    }
  }
  uint64_t v12 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::stackWillStop exit", v14, 2u);
  }

  return sub_10003AFB4((uint64_t)buf);
}

void sub_1006B9E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006B9EF4(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 321) = 0;
  return result;
}

void sub_1006B9F00(id a1, NSError *a2)
{
  uint64_t v3 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    id v5 = a2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "stopSessionForUserIdentifier returned %@", (uint8_t *)&v4, 0xCu);
  }
}

uint64_t sub_1006B9FA4(uint64_t a1)
{
  return sub_1006B9BB4(a1 - 24);
}

void sub_1006B9FAC(uint64_t a1)
{
  long long v6 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  id v2 = *(id *)(a1 + 168);
  id v3 = [v2 countByEnumeratingWithState:&v6 objects:v10 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v7;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v7 != v4) {
          objc_enumerationMutation(v2);
        }
        sub_1006B157C([*(id *)(a1 + 168) objectForKey:*(void *)(*((void *)&v6 + 1) + 8 * (void)v5)], v6);
        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v6 objects:v10 count:16];
    }
    while (v3);
  }
}

void sub_1006BA0A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006BA0C8(uint64_t a1)
{
}

void sub_1006BA0D0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1006BA154;
  v5[3] = &unk_100998A58;
  _OWORD v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1006BA154(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 375) = *(unsigned char *)(a1 + 40);
  id v3 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::screenStateChanged screenState:%d", (uint8_t *)v6, 8u);
  }
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return sub_1006B99E8(v2);
  }
  return result;
}

void sub_1006BA230(uint64_t a1, char a2)
{
}

void sub_1006BA238(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1006BA2BC;
  v5[3] = &unk_100998A58;
  _OWORD v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1006BA2BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 377) = *(unsigned char *)(a1 + 40);
  id v3 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::deviceLockStateChanged fDeviceLocked:%d", (uint8_t *)v6, 8u);
  }
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return sub_1006B99E8(v2);
  }
  return result;
}

void sub_1006BA398(uint64_t a1, char a2)
{
}

void sub_1006BA3A0(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006BA41C;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1006BA41C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 376) = 1;
  uint64_t v2 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeDeviceManager::deviceFirstUnlocked", v4, 2u);
  }
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return sub_1006B99E8(v1);
  }
  return result;
}

void sub_1006BA4B0(uint64_t a1)
{
}

void sub_1006BA4B8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v38[0] = 0;
  v38[1] = 0;
  sub_10003AED0((uint64_t)v38, a1 + 88);
  char v6 = (uint64_t *)sub_100030398(a1, v5);
  if (v6)
  {
    sub_10004191C(__p, "HasBuiltinServices");
    uint64_t v7 = sub_10003156C((uint64_t)(v6 + 22), (const void **)__p);
    if (v37 < 0) {
      operator delete(__p[0]);
    }
    if (a3)
    {
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009BEC00);
      }
      if (!sub_100008DC4(qword_1009F7EC8, v5)) {
        sub_1006B1588(v6, 0);
      }
    }
    else
    {
      sub_1006B1588(v6, 1);
      uint64_t v8 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 384))(v8))
      {
        unsigned int v9 = *((unsigned __int16 *)v6 + 196) - 961;
        if (v9 < 9 && ((0x10Fu >> (*((_WORD *)v6 + 196) + 63)) & 1) != 0)
        {
          id v10 = [*((id *)&off_1009BED00 + (__int16)v9) uppercaseString];
          uint64_t v57 = 0;
          long long v55 = 0u;
          long long v56 = 0u;
          long long v53 = 0u;
          long long v54 = 0u;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          sub_1000419CC((uint64_t)&v41);
          uint64_t v11 = sub_10003AB28((uint64_t)&v41);
          id v27 = v10;
          sub_10004191C(buf, (char *)[v27 UTF8String]);
          sub_10003AB28(v11);
          if (v40 < 0) {
            operator delete(*(void **)buf);
          }
          std::stringbuf::str();
          sub_1006ADE18((uint64_t)v6, (uint64_t)&v34);
          if (v35 < 0) {
            operator delete(v34);
          }
          if (SHIBYTE(v46) < 0) {
            operator delete(*((void **)&v45 + 1));
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
      }
    }
    sub_1000305AC(&v41, v5);
    sub_1006BABD8(a1, (unsigned __int8 *)&v41);
    sub_10003AFE8((uint64_t)v38);
    uint64_t v12 = (char *)(v6 + 23);
    if (v6 + 23 != (uint64_t *)v7)
    {
      sub_1006BAE00(a1, 1);
      if (sub_1006B2218((uint64_t)v6)) {
        goto LABEL_24;
      }
      sub_10004191C(v32, "_GHS_DEVICE_");
      uint64_t v13 = sub_10003156C((uint64_t)(v6 + 22), (const void **)v32);
      if (v33 < 0) {
        operator delete(v32[0]);
      }
      if (v12 != (char *)v13) {
LABEL_24:
      }
        sub_1006BB020(a1, v5, 2);
    }
    long long v41 = 0uLL;
    *(void *)&long long v42 = 0;
    sub_1004B8FFC((uint64_t)&v41, v5, a3, v12 != (char *)v7);
    if (sub_100050530())
    {
      uint64_t v14 = sub_100050530();
      (*(void (**)(uint64_t, long long *))(*(void *)v14 + 40))(v14, &v41);
    }
    if (*((unsigned char *)v6 + 160))
    {
      long long v15 = (char *)sub_100030398(a1, v5);
      sub_10004191C(v30, "needsMFiAuthenticationCertClass2.0c");
      uint64_t v16 = sub_10003156C((uint64_t)(v15 + 176), (const void **)v30);
      long long v17 = v15 + 184;
      if (v31 < 0) {
        operator delete(v30[0]);
      }
      if (v17 != (char *)v16)
      {
        long long v18 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Starting MFI Auth 2.0c with device \"%{public}@\"", buf, 0xCu);
        }
        uint64_t v19 = sub_100373068();
        (*(void (**)(uint64_t, id))(*(void *)v19 + 24))(v19, v5);
        uint64_t v20 = sub_100373068();
        (*(void (**)(uint64_t, id))(*(void *)v20 + 176))(v20, v5);
      }
      uint64_t v21 = (char *)sub_100030398(a1, v5);
      sub_10004191C(v28, "needsMFiAuthentication4.0");
      uint64_t v22 = sub_10003156C((uint64_t)(v21 + 176), (const void **)v28);
      id v23 = v21 + 184;
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (v23 != (char *)v22)
      {
        char v24 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 138543362;
          *(void *)&uint8_t buf[4] = v5;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Starting MFI Auth 4.0 with device \"%{public}@\"", buf, 0xCu);
        }
        uint64_t v25 = sub_100373068();
        (*(void (**)(uint64_t, id))(*(void *)v25 + 24))(v25, v5);
        uint64_t v26 = sub_100373068();
        (*(void (**)(uint64_t, id))(*(void *)v26 + 176))(v26, v5);
      }
    }
  }
  sub_10003AFB4((uint64_t)v38);
}

void sub_1006BAAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,char a49,uint64_t a50)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  sub_10027E318((uint64_t)&a49);

  sub_10003AFB4((uint64_t)&a40);
  _Unwind_Resume(a1);
}

uint64_t sub_1006BABD8(uint64_t a1, unsigned __int8 *a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 88);
  int v4 = *(void **)(a1 + 168);
  id v5 = sub_100031234(a2);
  char v6 = [v4 objectForKey:v5];

  if (v6)
  {
    if (!*((unsigned char *)v6 + 97) && !*((unsigned char *)v6 + 96))
    {
      sub_1000305B0(a1, a2);
      if (!v6[8])
      {
        uint64_t v7 = v6[2];
        BOOL v8 = 1;
        if ((v7 & 0xFF000000000000) != 0 && (v7 & 0xFFC00000000000) != 0x1C00000000000) {
          BOOL v8 = v6[3] != 0;
        }
        sub_10004191C(__p, "DA_ASK_RETAIN_DEVICE");
        if (v6 + 23 != (void *)sub_10003156C((uint64_t)(v6 + 22), (const void **)__p)) {
          BOOL v8 = 1;
        }
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        if (v8)
        {
          if (!*(unsigned char *)(a1 + 164)
            && !*((unsigned char *)v6 + 160)
            && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
          {
            sub_100401EBC(a2, out);
            sub_1007931D0();
          }
          sub_1003617E4(*(void *)(a1 + 248), v6);
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_10004191C(v13, out);
    sub_10079316C();
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1006BADB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_1006BAE00(uint64_t a1, char a2)
{
  uint64_t v14 = sub_1006C3418(a1);
  int v4 = +[NSMutableArray array];
  char v13 = a2;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v5 = v14;
  id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v18;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v18 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v17 + 1) + 8 * i);
        id v10 = (char *)[*(id *)(a1 + 168) objectForKey:v9];
        sub_10004191C(__p, "DoNotAutoConnect");
        uint64_t v11 = sub_10003156C((uint64_t)(v10 + 176), (const void **)__p);
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v10 + 184 == (char *)v11) {
          [v4 addObject:v9];
        }
      }
      id v6 = [v5 countByEnumeratingWithState:&v17 objects:v21 count:16];
    }
    while (v6);
  }

  if ((v13 & 1) != 0 || [v4 count])
  {
    uint64_t v12 = sub_100373068();
    (*(void (**)(uint64_t, void *))(*(void *)v12 + 32))(v12, v4);
  }
}

void sub_1006BAFC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_1006BB020(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (!v5) {
    goto LABEL_47;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  id v6 = sub_100030398((uint64_t)off_1009F7ED8, v5);
  uint64_t v7 = (uint64_t)v6;
  if (!v6 || !v6[160])
  {
    uint64_t v16 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      LODWORD(v35) = a3;
      long long v17 = "Identification - device not yet le-paired, stimulus %d";
      long long v18 = v16;
      uint32_t v19 = 8;
LABEL_46:
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
      goto LABEL_47;
    }
    goto LABEL_47;
  }
  if (a3 == 1) {
    v6[359] = 1;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  BOOL v8 = off_1009F7ED8;
  sub_10004191C(__p, "LeIdentificationHashExist");
  int v9 = sub_100030A04((uint64_t)v8, v5, (uint64_t)__p);
  int v10 = v9;
  if ((v33 & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_12;
    }
LABEL_19:
    long long v20 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Identification - Identification hash does not exist - generating", buf, 2u);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
    }
    int v21 = sub_1006CCE28((uint64_t)off_1009F7ED8, v5);
    uint64_t v22 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 138543874;
      id v35 = v5;
      __int16 v36 = 1024;
      int v37 = a3;
      __int16 v38 = 1024;
      int v39 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Identification - generating for device %{public}@, stimulus %d, sent %d", buf, 0x18u);
    }
    if ((v21 & 5) == 0 && sub_1006B2218(v7)) {
      sub_1006BD468(a1, v5);
    }
    goto LABEL_47;
  }
  operator delete(__p[0]);
  if (!v10) {
    goto LABEL_19;
  }
LABEL_12:
  uint64_t v11 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 360))(v11))
  {
    sub_10004191C(v30, "IsLEMouse");
    uint64_t v12 = v7 + 176;
    uint64_t v13 = sub_10003156C(v7 + 176, (const void **)v30);
    uint64_t v14 = v7 + 184;
    if (v14 == v13)
    {
      if (v31 < 0) {
        operator delete(v30[0]);
      }
    }
    else
    {
      sub_10004191C(v28, "HIDDeviceUnknownBehavior");
      if (v14 == sub_10003156C(v12, (const void **)v28))
      {
        sub_10004191C(v26, "HIDDeviceKnownPoorBehavior");
        if (v14 == sub_10003156C(v12, (const void **)v26))
        {
          sub_10004191C(v24, "HIDDeviceKnownGoodBehavior");
          BOOL v15 = v14 == sub_10003156C(v12, (const void **)v24);
          if (v25 < 0) {
            operator delete(v24[0]);
          }
        }
        else
        {
          BOOL v15 = 0;
        }
        if (v27 < 0) {
          operator delete(v26[0]);
        }
      }
      else
      {
        BOOL v15 = 0;
      }
      if (v29 < 0) {
        operator delete(v28[0]);
      }
      if (v31 < 0)
      {
        operator delete(v30[0]);
        if (v15)
        {
LABEL_40:
          uint64_t v23 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)int buf = 138543362;
            id v35 = v5;
            long long v17 = "Identification - no hids tags for device %{public}@, not regenerating metric";
LABEL_45:
            long long v18 = v23;
            uint32_t v19 = 12;
            goto LABEL_46;
          }
          goto LABEL_47;
        }
      }
      else if (v15)
      {
        goto LABEL_40;
      }
    }
  }
  uint64_t v23 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 138543362;
    id v35 = v5;
    long long v17 = "Identification - le identification tag exist for device %{public}@ - not generating";
    goto LABEL_45;
  }
LABEL_47:
}

void sub_1006BB470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

void sub_1006BB504(uint64_t a1, void *a2, int a3)
{
}

void sub_1006BB50C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 88);
  int v4 = (unsigned __int8 *)sub_100030398(a1, v3);
  if (v4)
  {
    uint64_t v19 = 0;
    id v20 = 0;
    sub_1004B9048((uint64_t)&v19, v3);
    if (sub_100050530())
    {
      uint64_t v5 = sub_100050530();
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 40))(v5, &v19);
    }
    sub_10004191C(__p, "HasBuiltinServices");
    uint64_t v6 = sub_10003156C((uint64_t)(v4 + 176), (const void **)__p);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
    if ((char)v4[231] < 0) {
      uint64_t v7 = *((void *)v4 + 27);
    }
    else {
      uint64_t v7 = v4[231];
    }
    v4[357] = 0;
    v4[359] = 0;
    v4[368] = 1;
    sub_1006B1588((uint64_t *)v4, 0);
    sub_10004191C(&__str, "");
    std::string::operator=((std::string *)(v4 + 208), &__str);
    BOOL v8 = (char *)(v4 + 184);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    sub_10004BA28((uint64_t)(v4 + 176), *((char **)v4 + 23));
    *((void *)v4 + 23) = 0;
    *((void *)v4 + 24) = 0;
    *((void *)v4 + 22) = v8;
    *((void *)v4 + 60) = 0;
    if (v7) {
      sub_1006AFD74((uint64_t)v4, 0, 0, 0);
    }
    unint64_t v9 = *((void *)v4 + 3);
    if (v9)
    {
      int v10 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
      {
        LODWORD(__str.__r_.__value_.__l.__data_) = 138543362;
        *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Clearing resolved address for device \"%{public}@\"", (uint8_t *)&__str, 0xCu);
      }
      *((void *)v4 + 3) = 0;
      uint64_t v11 = *((void *)v4 + 2);
      if ((v11 & 0xFF000000000000) == 0 || (v11 & 0xFFC00000000000) == 0x1C00000000000)
      {
        sub_1000305AC(&__str, v3);
        sub_1006BABD8(a1, (unsigned __int8 *)&__str);
      }
      else
      {
        sub_100361908(*(void *)(a1 + 248), (uint64_t)v4);
      }
      if (v9 != *((void *)v4 + 2))
      {
        uint64_t v12 = *(void **)(a1 + 184);
        if (v12)
        {
          uint64_t v13 = (uint64_t *)(a1 + 184);
          do
          {
            unint64_t v14 = v12[4];
            BOOL v15 = v14 >= v9;
            if (v14 >= v9) {
              uint64_t v16 = v12;
            }
            else {
              uint64_t v16 = v12 + 1;
            }
            if (v15) {
              uint64_t v13 = v12;
            }
            uint64_t v12 = (void *)*v16;
          }
          while (*v16);
          if (v13 != (uint64_t *)(a1 + 184) && v9 >= v13[4])
          {
            sub_10004D3B8((uint64_t **)(a1 + 176), v13);
            operator delete(v13);
          }
        }
      }
    }
    if (v8 != (char *)v6) {
      sub_1006BAE00(a1, 1);
    }
  }
  sub_10003AFB4((uint64_t)v21);
}

void sub_1006BB7D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  sub_10003AFB4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_1006BB850(uint64_t a1, void *a2)
{
}

uint64_t sub_1006BB858(uint64_t a1, int a2, int a3)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 88);
  *(unsigned char *)(a1 + 164) = 1;
  *(_DWORD *)(a1 + 156) = a3;
  *(_DWORD *)(a1 + 160) = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = *(id *)(a1 + 168);
  id v7 = [v6 countByEnumeratingWithState:&v14 objects:v19 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v8) {
          objc_enumerationMutation(v6);
        }
        int v10 = [[*(id *)(a1 + 168) objectForKey:*(void *)(*((void *)&v14 + 1) + 8 * i)][v14];
        int v11 = v10[33];
        if (v11) {
          v10[33] = *(_DWORD *)(a1 + 160) + v11;
        }
        int v12 = v10[34];
        if (v12) {
          v10[34] = *(_DWORD *)(a1 + 156) + v12;
        }
      }
      id v7 = [v6 countByEnumeratingWithState:&v14 objects:v19 count:16];
    }
    while (v7);
  }

  return sub_10003AFB4((uint64_t)v18);
}

void sub_1006BB9A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006BB9CC(uint64_t a1, int a2, int a3)
{
  return sub_1006BB858(a1 - 32, a2, a3);
}

BOOL sub_1006BB9D4(uint64_t a1, void *a2)
{
  return sub_100030398(a1, a2) != 0;
}

BOOL sub_1006BB9F4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[3] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBA68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BBA88(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (unsigned int *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[35];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBAF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BBB14(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (unsigned int *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[36];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBB80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BBBA0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[19];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBC0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BBC2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (unsigned int *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[33];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BBCB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (unsigned int *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[65];
  }
  else {
    uint64_t v5 = 1;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBD24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_1006BBD44(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (double *)sub_100030398(a1, v3);
  if (v4) {
    double v5 = v4[51];
  }
  else {
    double v5 = 0.0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BBDD8(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = (double *)sub_100030398(a1, v5);
  if (v6) {
    v6[51] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BBE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_1006BBE64(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (double *)sub_100030398(a1, v3);
  if (v4) {
    double v5 = v4[52];
  }
  else {
    double v5 = 0.0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_1006BBEF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (double *)sub_100030398(a1, v3);
  if (v4) {
    double v5 = v4[53];
  }
  else {
    double v5 = 0.0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BBF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BBF8C(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = (double *)sub_100030398(a1, v5);
  if (v6) {
    v6[53] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BBFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_1006BC018(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (double *)sub_100030398(a1, v3);
  if (v4) {
    double v5 = v4[54];
  }
  else {
    double v5 = 0.0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BC08C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BC0AC(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = (double *)sub_100030398(a1, v5);
  if (v6) {
    v6[54] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BC118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_1006BC138(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (double *)sub_100030398(a1, v3);
  if (v4) {
    double v5 = v4[55];
  }
  else {
    double v5 = 0.0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BC1AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BC1CC(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = (double *)sub_100030398(a1, v5);
  if (v6) {
    v6[55] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BC238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BC258(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = (unsigned int *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[112];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BC2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BC2E4(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[112] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BC350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BC370(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[112] += a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BC3E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1006BC404(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[162] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BC478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BC498@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 88);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  uuid_clear((unsigned __int8 *)a3);
  if (a2)
  {
    uint64_t v8 = *(void **)(a1 + 232);
    id v7 = (const unsigned __int8 *)(a1 + 232);
    id v6 = v8;
    if (v8)
    {
      unint64_t v9 = v7;
      do
      {
        unint64_t v10 = v6[4];
        BOOL v11 = v10 >= a2;
        if (v10 >= a2) {
          int v12 = v6;
        }
        else {
          int v12 = v6 + 1;
        }
        if (v11) {
          unint64_t v9 = (const unsigned __int8 *)v6;
        }
        id v6 = (void *)*v12;
      }
      while (*v12);
      if (v9 != v7 && *((void *)v9 + 4) <= a2) {
        uuid_copy((unsigned __int8 *)a3, v9 + 40);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_1006BC540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1006BC558(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[196] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BC5C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1006BC5E4(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v2 + 384))(v2)) {
    return 0;
  }
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 88);
  id v3 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG)) {
    sub_1007932DC(a1, v3);
  }
  BOOL v4 = *(unsigned char *)(a1 + 320) != 0;
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

uint64_t sub_1006BC69C(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  id v5 = a2;
  v106[0] = 0;
  v106[1] = 0;
  sub_10003AED0((uint64_t)v106, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  id v7 = v6;
  if (!v6)
  {
    uint64_t v12 = 0;
    goto LABEL_193;
  }
  int v8 = (char)a3[23];
  if (v8 < 0)
  {
    if (*((void *)a3 + 1) != 24)
    {
      unint64_t v10 = qword_100A19E78;
      if (!os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_24;
      }
      goto LABEL_20;
    }
    unint64_t v9 = *(unsigned __int8 **)a3;
  }
  else
  {
    unint64_t v9 = a3;
    if (v8 != 24)
    {
      unint64_t v10 = qword_100A19E78;
      if (!os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
LABEL_23:
        *(_OWORD *)long long __p = *(_OWORD *)a3;
        uint64_t v103 = *((void *)a3 + 2);
        goto LABEL_25;
      }
      BOOL v11 = a3;
      goto LABEL_21;
    }
  }
  uint64_t v13 = *(void *)v9;
  uint64_t v14 = *((void *)v9 + 1);
  uint64_t v15 = *((void *)v9 + 2);
  if (v13 == 0x4144494C41564E49 && v14 == 0x454B5241435F4554 && v15 == 0x4543495645445F59)
  {
    sub_10004191C(v104, "PAIRED_FOR_ALISHA");
    uint64_t v34 = sub_10003156C((uint64_t)(v7 + 22), v104);
    if (v105 < 0) {
      operator delete((void *)v104[0]);
    }
    if (v7 + 23 != (void *)v34)
    {
      sub_10003AFE8((uint64_t)v106);
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009BEC00);
      }
      if (sub_100008DC4(qword_1009F7EC8, v5))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
          sub_1007933F8();
        }
      }
      else
      {
        sub_1006B7A50(a1, v5);
        __int16 v86 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "Sucessfully deleted INVALIDATE_CARKEY_DEVICE", buf, 2u);
        }
      }
    }
    goto LABEL_199;
  }
  unint64_t v10 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v11 = a3;
    if ((v8 & 0x80000000) == 0)
    {
LABEL_21:
      *(_DWORD *)int buf = 136446466;
      *(void *)&uint8_t buf[4] = v11;
      *(_WORD *)&unsigned char buf[12] = 2114;
      *(void *)&unsigned char buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" tag to device \"%{public}@\"", buf, 0x16u);
      LOBYTE(v8) = a3[23];
      goto LABEL_22;
    }
LABEL_20:
    BOOL v11 = *(unsigned __int8 **)a3;
    goto LABEL_21;
  }
LABEL_22:
  if ((v8 & 0x80) == 0) {
    goto LABEL_23;
  }
LABEL_24:
  sub_10003B098(__p, *(void **)a3, *((void *)a3 + 1));
LABEL_25:
  uint64_t v18 = sub_1006ADE18((uint64_t)v7, (uint64_t)__p);
  uint64_t v12 = v18;
  if (SHIBYTE(v103) < 0)
  {
    operator delete(__p[0]);
    if (!v12) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (v18)
  {
LABEL_29:
    sub_1000305AC(buf, v5);
    sub_1006BABD8(a1, buf);
  }
LABEL_30:
  sub_10003AFE8((uint64_t)v106);
  int v19 = a3[23];
  if ((char)a3[23] < 0)
  {
    uint64_t v23 = *((void *)a3 + 1);
    if (v23 != 16)
    {
      if (v23 != 18) {
        goto LABEL_62;
      }
      BOOL v24 = **(void **)a3 == 0x746C697542736148 && *(void *)(*(void *)a3 + 8) == 0x6369767265536E69;
      if (!v24 || *(_WORD *)(*(void *)a3 + 16) != 29541) {
        goto LABEL_62;
      }
      goto LABEL_58;
    }
    id v20 = *(uint64_t **)a3;
  }
  else
  {
    id v20 = (uint64_t *)a3;
    if (v19 != 16)
    {
      if (v19 != 18)
      {
LABEL_60:
        if (v19 != 12)
        {
LABEL_69:
          if (v19 != 35)
          {
LABEL_86:
            if (v19 != 25)
            {
LABEL_102:
              if (v19 != 14)
              {
                long long v44 = a3;
                if (v19 != 16) {
                  goto LABEL_129;
                }
                goto LABEL_117;
              }
              int v45 = 0;
              long long v46 = (uint64_t *)a3;
              goto LABEL_109;
            }
            id v35 = (uint64_t *)a3;
            goto LABEL_91;
          }
          char v33 = a3;
          goto LABEL_84;
        }
        char v29 = a3;
        goto LABEL_64;
      }
      if (*(void *)a3 != 0x746C697542736148
        || *((void *)a3 + 1) != 0x6369767265536E69
        || *((_WORD *)a3 + 8) != 29541)
      {
        goto LABEL_153;
      }
      goto LABEL_58;
    }
  }
  uint64_t v27 = *v20;
  uint64_t v26 = v20[1];
  if (v27 == 0x747541746F4E6F44 && v26 == 0x7463656E6E6F436FLL)
  {
LABEL_58:
    sub_1006BAE00(a1, 1);
    int v19 = a3[23];
  }
  if ((v19 & 0x80) == 0) {
    goto LABEL_60;
  }
LABEL_62:
  if (*((void *)a3 + 1) != 12) {
    goto LABEL_82;
  }
  char v29 = *(unsigned __int8 **)a3;
LABEL_64:
  uint64_t v30 = *(void *)v29;
  int v31 = *((_DWORD *)v29 + 2);
  if (v30 == 0x57656C7070417349 && v31 == 1751348321)
  {
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009BEC00);
    }
    sub_10070CD1C(qword_1009F7EC8, v5);
    int v19 = a3[23];
    if ((v19 & 0x80) == 0) {
      goto LABEL_69;
    }
  }
  else if ((v19 & 0x80) == 0)
  {
    goto LABEL_69;
  }
LABEL_82:
  if (*((void *)a3 + 1) != 35) {
    goto LABEL_89;
  }
  char v33 = *(unsigned __int8 **)a3;
LABEL_84:
  if (!memcmp(v33, "needsMFiAuthenticationCertClass2.0c", 0x23uLL))
  {
    uint64_t v36 = sub_100373068();
    (*(void (**)(uint64_t))(*(void *)v36 + 168))(v36);
    int v19 = a3[23];
    if ((v19 & 0x80) == 0) {
      goto LABEL_86;
    }
  }
  else if ((v19 & 0x80) == 0)
  {
    goto LABEL_86;
  }
LABEL_89:
  if (*((void *)a3 + 1) != 25) {
    goto LABEL_107;
  }
  id v35 = *(uint64_t **)a3;
LABEL_91:
  uint64_t v37 = *v35;
  uint64_t v38 = v35[1];
  uint64_t v39 = v35[2];
  int v40 = *((unsigned __int8 *)v35 + 24);
  if (v37 == 0x69464D736465656ELL && v38 == 0x69746E6568747541 && v39 == 0x2E346E6F69746163 && v40 == 48)
  {
    uint64_t v47 = sub_100373068();
    (*(void (**)(uint64_t))(*(void *)v47 + 168))(v47);
    int v19 = a3[23];
    if ((v19 & 0x80) == 0) {
      goto LABEL_102;
    }
  }
  else if ((v19 & 0x80) == 0)
  {
    goto LABEL_102;
  }
LABEL_107:
  uint64_t v48 = *((void *)a3 + 1);
  if (v48 != 14)
  {
LABEL_115:
    if (v48 != 16) {
      goto LABEL_128;
    }
    long long v44 = *(unsigned __int8 **)a3;
LABEL_117:
    uint64_t v53 = *(void *)v44;
    uint64_t v52 = *((void *)v44 + 1);
    if (v53 != 0x75616E5553434E41 || v52 != 0x64657A69726F6874) {
      goto LABEL_128;
    }
    goto LABEL_122;
  }
  long long v46 = *(uint64_t **)a3;
  int v45 = 1;
LABEL_109:
  uint64_t v49 = *v46;
  uint64_t v50 = *(uint64_t *)((char *)v46 + 6);
  if (v49 != 0x6874754153434E41 || v50 != 0x64657A69726F6874)
  {
    if (!v45) {
      goto LABEL_128;
    }
    uint64_t v48 = *((void *)a3 + 1);
    goto LABEL_115;
  }
LABEL_122:
  uint64_t v55 = sub_100019878();
  v98[0] = _NSConcreteStackBlock;
  v98[1] = 3321888768;
  v98[2] = sub_1006BD394;
  v98[3] = &unk_1009BEA78;
  id v99 = v5;
  if ((char)a3[23] < 0)
  {
    sub_10003B098(&v100, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v100 = *(_OWORD *)a3;
    uint64_t v101 = *((void *)a3 + 2);
  }
  sub_100013018(v55, v98);
  if (SHIBYTE(v101) < 0) {
    operator delete((void *)v100);
  }

  int v19 = a3[23];
LABEL_128:
  if ((v19 & 0x80) == 0)
  {
LABEL_129:
    if (v19 != 9) {
      goto LABEL_138;
    }
    long long v56 = a3;
    goto LABEL_133;
  }
  if (*((void *)a3 + 1) != 9) {
    goto LABEL_141;
  }
  long long v56 = *(unsigned __int8 **)a3;
LABEL_133:
  uint64_t v57 = *(void *)v56;
  int v58 = v56[8];
  if (v57 == 0x73756F4D454C7349 && v58 == 101)
  {
    uint64_t v61 = sub_100019878();
    v95[0] = _NSConcreteStackBlock;
    v95[1] = 3221225472;
    v95[2] = sub_1006BD45C;
    v95[3] = &unk_100998A38;
    uint64_t v97 = a1;
    id v96 = v5;
    sub_100013018(v61, v95);

    int v19 = a3[23];
    if ((v19 & 0x80) == 0)
    {
LABEL_138:
      __int16 v60 = (uint64_t *)a3;
      if (v19 != 17) {
        goto LABEL_153;
      }
      goto LABEL_143;
    }
  }
  else if ((v19 & 0x80) == 0)
  {
    goto LABEL_138;
  }
LABEL_141:
  if (*((void *)a3 + 1) != 17) {
    goto LABEL_153;
  }
  __int16 v60 = *(uint64_t **)a3;
LABEL_143:
  uint64_t v62 = *v60;
  uint64_t v63 = v60[1];
  int v64 = *((unsigned __int8 *)v60 + 16);
  if (v62 == 0x746F6F7465756C42 && v63 == 0x746F6D6552565468 && v64 == 101)
  {
    sub_10004191C(v93, "DoNotStopAutoConnecting");
    sub_1006ADE18((uint64_t)v7, (uint64_t)v93);
    if (v94 < 0) {
      operator delete(v93[0]);
    }
  }
LABEL_153:
  int v67 = (char)a3[23];
  if (v67 < 0)
  {
    if (*((void *)a3 + 1) != 5) {
      goto LABEL_172;
    }
    id v68 = *(unsigned __int8 **)a3;
  }
  else
  {
    id v68 = a3;
    if (v67 != 5) {
      goto LABEL_172;
    }
  }
  int v69 = *(_DWORD *)v68;
  int v70 = v68[4];
  BOOL v71 = v69 == 1416847688 && v70 == 83;
  if (v71 && sub_1006BDC1C(a1, v5) == 16)
  {
    if (qword_1009FB088 != -1) {
      dispatch_once(&qword_1009FB088, &stru_1009BEC80);
    }
    uint64_t v72 = qword_1009FB080;
    sub_10004191C(buf, "HasTS");
    sub_10004191C(v108, "External Lock Tagged HasTS setTag");
    sub_1004B7DA8(60.0, v72, (uint64_t *)buf, (uint64_t *)v108);
    if (v109 < 0) {
      operator delete(v108[0]);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_10079342C();
    }
  }
LABEL_172:
  if (_os_feature_enabled_impl())
  {
    int v73 = (char)a3[23];
    if ((v73 & 0x80000000) == 0)
    {
      uint64_t v74 = a3;
      if (v73 != 20) {
        goto LABEL_187;
      }
LABEL_178:
      uint64_t v75 = *(void *)v74;
      uint64_t v76 = *((void *)v74 + 1);
      int v77 = *((_DWORD *)v74 + 4);
      if (v75 == 0x525F4B53415F4144 && v76 == 0x45445F4E49415445 && v77 == 1162037590) {
        sub_1003617E4(*(void *)(a1 + 248), v7);
      }
      goto LABEL_187;
    }
    if (*((void *)a3 + 1) == 20)
    {
      uint64_t v74 = *(unsigned __int8 **)a3;
      goto LABEL_178;
    }
  }
LABEL_187:
  memset(buf, 0, sizeof(buf));
  *(_DWORD *)int buf = *(_DWORD *)(a1 + 288);
  sub_100040550(&buf[8], a1 + 296);
  v89._uint64_t os_unfair_lock_opaque = *(_DWORD *)buf;
  long long __dst = 0;
  uint64_t v92 = 0;
  long long v90 = 0;
  __int16 v80 = *(const void **)&buf[8];
  int64_t v81 = *(void *)&buf[16] - *(void *)&buf[8];
  if (*(void *)&buf[16] != *(void *)&buf[8])
  {
    sub_1000405B8(&v90, v81 >> 3);
    id v82 = (char *)__dst;
    memmove(__dst, v80, v81);
    long long __dst = &v82[8 * (v81 >> 3)];
  }
  v87[0] = _NSConcreteStackBlock;
  v87[1] = 3221225472;
  v87[2] = sub_1006BDCA8;
  v87[3] = &unk_1009BEAB0;
  id v88 = v5;
  sub_1006CF3A4(&v89, v87);
  if (v90)
  {
    long long __dst = v90;
    operator delete(v90);
  }

  id v6 = *(void **)&buf[8];
  if (*(void *)&buf[8])
  {
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    operator delete(*(void **)&buf[8]);
  }
LABEL_193:
  uint64_t v83 = sub_100030B78((uint64_t)v6, v5);
  if (!v83) {
    goto LABEL_200;
  }
  uint64_t v84 = sub_1003708B0();
  if (!(*(unsigned int (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v84 + 792))(v84, v83, a3))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG))
    {
      sub_100474E18(v83, buf);
      sub_100793358();
    }
LABEL_199:
    uint64_t v12 = 1;
    goto LABEL_200;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
  {
    sub_100474E18(v83, buf);
    sub_1007933A8();
  }
LABEL_200:
  sub_10003AFB4((uint64_t)v106);

  return v12;
}

void sub_1006BD27C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  sub_10003AFB4(v47 - 160);

  _Unwind_Resume(a1);
}

void sub_1006BD394(uint64_t a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009BEB80);
  }
  uint64_t v2 = off_1009F8780;
  id v3 = *(void **)(a1 + 32);
  BOOL v4 = (void *)(a1 + 40);
  int v5 = *(char *)(a1 + 63);
  if ((v5 & 0x80000000) == 0)
  {
    if (v5 != 14) {
      goto LABEL_14;
    }
LABEL_8:
    id v6 = (void *)*v4;
    uint64_t v7 = *(void *)((char *)v4 + 6);
    BOOL v9 = v6 == (void *)0x6874754153434E41 && v7 == 0x64657A69726F6874;
    goto LABEL_15;
  }
  if (*(void *)(a1 + 48) == 14)
  {
    BOOL v4 = (void *)*v4;
    goto LABEL_8;
  }
LABEL_14:
  BOOL v9 = 0;
LABEL_15:

  sub_100305FE4((uint64_t)v2, v3, v9);
}

void sub_1006BD45C(uint64_t a1)
{
}

void sub_1006BD468(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 360))(v4) & 1) == 0) {
    goto LABEL_66;
  }
  int v5 = (char *)sub_100030398(a1, v3);
  sub_10004191C(v46, "IsLEMouse");
  uint64_t v6 = sub_10003156C((uint64_t)(v5 + 176), v46);
  uint64_t v7 = v5 + 184;
  if (v47 < 0) {
    operator delete((void *)v46[0]);
  }
  int v8 = qword_100A19E78;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT);
  if (v7 != (char *)v6)
  {
    if (v9)
    {
      LODWORD(buf) = 138543362;
      *(void *)((char *)&buf + 4) = v3;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "HIDIdentification - The device \"%{public}@\" supports HID. SetLEHIDDeviceBehavior", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v10 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 272))(v10))
    {
      BOOL v11 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "HIDIdentification - limitedSupportForHID - Known Poor", (uint8_t *)&buf, 2u);
      }
      sub_10004191C(__p, "HIDDeviceKnownPoorBehavior");
      sub_1006ADE18((uint64_t)v5, (uint64_t)__p);
      if (v45 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_57;
    }
    if (v5[127] < 0)
    {
      sub_10003B098(&buf, *((void **)v5 + 13), *((void *)v5 + 14));
    }
    else
    {
      long long buf = *(_OWORD *)(v5 + 104);
      uint64_t v51 = *((void *)v5 + 15);
    }
    int v12 = SHIBYTE(v51);
    uint64_t v13 = (long long *)buf;
    NSStringEncoding v14 = +[NSString defaultCStringEncoding];
    if (v12 >= 0) {
      p_long long buf = &buf;
    }
    else {
      p_long long buf = v13;
    }
    long long v16 = +[NSString stringWithCString:p_buf encoding:v14];
    if (SHIBYTE(v51) < 0) {
      operator delete((void *)buf);
    }
    if ([(id)qword_100A1A2B0 containsObject:v16])
    {
      long long v17 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 138412290;
        *(void *)((char *)&buf + 4) = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "HIDIdentification - WAR for known good LE HID %@", (uint8_t *)&buf, 0xCu);
      }
      sub_10004191C(v42, "HIDDeviceKnownGoodBehavior");
      sub_1006ADE18((uint64_t)v5, (uint64_t)v42);
      if (v43 < 0) {
        operator delete(v42[0]);
      }
      goto LABEL_56;
    }
    id v18 = *((id *)v5 + 45);
    int v19 = [(id)qword_100A1A2A0 objectForKey:v16];
    id v20 = [(id)qword_100A1A2A8 objectForKey:v16];
    sub_10004191C(v40, "HIDDeviceKnownGoodBehavior");
    if (v7 == (char *)sub_10003156C((uint64_t)(v5 + 176), (const void **)v40))
    {
      sub_10004191C(v38, "HIDDeviceKnownPoorBehavior");
      BOOL v21 = v7 != (char *)sub_10003156C((uint64_t)(v5 + 176), (const void **)v38);
      if (v39 < 0) {
        operator delete(v38[0]);
      }
    }
    else
    {
      BOOL v21 = 1;
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    if (v21)
    {
      uint64_t v22 = qword_100A19E78;
      if (!os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
LABEL_55:

LABEL_56:
LABEL_57:
        uint64_t v26 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          if (v5[127] < 0)
          {
            sub_10003B098(&buf, *((void **)v5 + 13), *((void *)v5 + 14));
          }
          else
          {
            long long buf = *(_OWORD *)(v5 + 104);
            uint64_t v51 = *((void *)v5 + 15);
          }
          uint64_t v27 = &buf;
          if (v51 < 0) {
            uint64_t v27 = (long long *)buf;
          }
          *(_DWORD *)uint64_t v48 = 136315138;
          uint64_t v49 = v27;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Post leHIDBehaviorKnown for %s", v48, 0xCu);
          if (SHIBYTE(v51) < 0) {
            operator delete((void *)buf);
          }
        }
        id v28 = +[NSDistributedNotificationCenter defaultCenter];
        char v29 = +[NSNotification notificationWithName:@"com.apple.bluetooth.leHIDBehaviorKnown" object:0];
        [v28 postNotification:v29];

        goto LABEL_66;
      }
      LOWORD(buf) = 0;
      uint64_t v23 = "HIDIdentification - Device already identified as Good/Poor";
    }
    else
    {
      if ([v18 length] || !v5[368])
      {
        if ([v19 isEqualToData:v18])
        {
          sub_10004191C(v36, "HIDDeviceKnownPoorBehavior");
          sub_1006ADE18((uint64_t)v5, (uint64_t)v36);
          if ((v37 & 0x80000000) == 0) {
            goto LABEL_55;
          }
          BOOL v24 = (void *)v36[0];
        }
        else if ([v20 isEqualToData:v18])
        {
          sub_10004191C(v34, "HIDDeviceKnownGoodBehavior");
          sub_1006ADE18((uint64_t)v5, (uint64_t)v34);
          if ((v35 & 0x80000000) == 0) {
            goto LABEL_55;
          }
          BOOL v24 = (void *)v34[0];
        }
        else
        {
          char v25 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf) = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "HIDIdentification - Device not found in known good/poor device lists", (uint8_t *)&buf, 2u);
          }
          if (_os_feature_enabled_impl())
          {
            sub_10004191C(v32, "HIDDeviceUnknownBehavior");
            sub_10037EF3C((uint64_t **)v5 + 22, v32);
            if ((v33 & 0x80000000) == 0) {
              goto LABEL_55;
            }
            BOOL v24 = (void *)v32[0];
          }
          else
          {
            sub_10004191C(v30, "HIDDeviceUnknownBehavior");
            sub_1006ADE18((uint64_t)v5, (uint64_t)v30);
            if ((v31 & 0x80000000) == 0) {
              goto LABEL_55;
            }
            BOOL v24 = v30[0];
          }
        }
        operator delete(v24);
        goto LABEL_55;
      }
      uint64_t v22 = qword_100A19E78;
      if (!os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_55;
      }
      LOWORD(buf) = 0;
      uint64_t v23 = "HIDIdentification - No currently available identification data.";
    }
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, (uint8_t *)&buf, 2u);
    goto LABEL_55;
  }
  if (v9)
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Not a mouse - no need to setLEHIDDeviceBehavior", (uint8_t *)&buf, 2u);
  }
LABEL_66:
}

void sub_1006BDAD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1006BDC1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = *(unsigned int *)(v4 + 372);
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BDC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BDCA8(uint64_t a1, uint64_t (***a2)(void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), 2);
}

void sub_1006BDCDC(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_10004191C(__p, "HasTS");
  sub_1006BC69C(a1, v3, (unsigned __int8 *)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1006BDD40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

int64_t sub_1006BDD68(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_10004191C(__p, "HasTS");
  int64_t v4 = sub_100030A04(a1, v3, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_1006BDDD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1006BDDFC(uint64_t a1, uint64_t (***a2)(void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), 3);
}

id sub_1006BDE30(uint64_t a1, uint64_t a2)
{
  int64_t v4 = +[NSMutableArray array];
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = *(id *)(a1 + 168);
  id v6 = [v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = (char *)[*(id *)(a1 + 168) objectForKey:v9 __p[0] __p[1] v14];
        if (*(char *)(a2 + 23) < 0)
        {
          sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)a2;
          uint64_t v14 = *(void *)(a2 + 16);
        }
        uint64_t v11 = sub_10003156C((uint64_t)(v10 + 176), (const void **)__p);
        if (SHIBYTE(v14) < 0) {
          operator delete(__p[0]);
        }
        if (v10 + 184 != (char *)v11) {
          [v4 addObject:v9];
        }
      }
      id v6 = [v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v6);
  }

  sub_10003AFE8((uint64_t)v19);
  sub_10003AFB4((uint64_t)v19);

  return v4;
}

void sub_1006BDFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_10003AFB4((uint64_t)&a24);

  _Unwind_Resume(a1);
}

void sub_1006BE040(uint64_t a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  id v5 = a2;
  a3[2] = 0;
  a3[1] = 0;
  *a3 = (uint64_t)(a3 + 1);
  uint64_t v6 = sub_100030B78((uint64_t)v5, v5);
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 88);
  uint64_t v7 = (const void ***)sub_100030398(a1, v5);
  if (v7) {
    sub_10030BAAC(a3, v7[22], v7 + 23);
  }
  if (v6)
  {
    uint64_t v8 = sub_1003708B0();
    uint64_t v9 = (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 824))(v8, v6);
    uint64_t v10 = v9;
    if (v9)
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v11 = v9;
      id v12 = [v11 countByEnumeratingWithState:&v17 objects:v22 count:16];
      if (v12)
      {
        uint64_t v13 = *(void *)v18;
        do
        {
          uint64_t v14 = 0;
          do
          {
            if (*(void *)v18 != v13) {
              objc_enumerationMutation(v11);
            }
            sub_10004191C(__p, (char *)[*(id *)(*((void *)&v17 + 1) + 8 * (void)v14) UTF8String]);
            sub_1005B8FE8((uint64_t **)a3, (const void **)__p, (uint64_t)__p);
            if (v16 < 0) {
              operator delete(__p[0]);
            }
            uint64_t v14 = (char *)v14 + 1;
          }
          while (v12 != v14);
          id v12 = [v11 countByEnumeratingWithState:&v17 objects:v22 count:16];
        }
        while (v12);
      }
    }
  }
  sub_10003AFB4((uint64_t)v21);
}

void sub_1006BE210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_10003AFB4((uint64_t)&a25);
  sub_10004BA28(v26, *(char **)(v26 + 8));

  _Unwind_Resume(a1);
}

id sub_1006BE280(uint64_t a1, void *a2)
{
  id v3 = a2;
  int64_t v4 = +[NSMutableArray array];
  long long v15 = 0;
  char v16 = 0;
  uint64_t v17 = 0;
  sub_100360F84(*(void *)(a1 + 248), v3, (uint64_t)&v15);
  id v5 = v15;
  for (i = v16; v5 != i; id v5 = (long long *)((char *)v5 + 24))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = 0;
    if (*((char *)v5 + 23) < 0)
    {
      sub_10003B098(__p, *(void **)v5, *((void *)v5 + 1));
    }
    else
    {
      long long v7 = *v5;
      uint64_t v14 = *((void *)v5 + 2);
      *(_OWORD *)long long __p = v7;
    }
    id v8 = objc_alloc((Class)NSUUID);
    if (v14 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    uint64_t v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9, __p[0], __p[1], v14);
    id v11 = [v8 initWithUUIDString:v10];

    [v4 addObject:v11];
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = &v15;
  sub_100051568((void ***)__p);

  return v4;
}

void sub_1006BE3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

id sub_1006BE440(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4)
  {
    id v5 = sub_1006B2CCC((uint64_t)v4);
  }
  else
  {
    id v5 = &__NSArray0__struct;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BE4C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_1006BE4EC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 88);
  if (v5)
  {
    if (v6)
    {
      id v7 = sub_100030398(a1, v5);
      if (v7)
      {
        id v8 = sub_1006B2D0C((uint64_t)v7, v6);
        goto LABEL_10;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
    {
      sub_1007934C8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
  {
    sub_10077F5AC();
  }
  id v8 = 0;
LABEL_10:
  sub_10003AFB4((uint64_t)v10);

  return v8;
}

void sub_1006BE5E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BE60C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (v7)
  {
    if (v8 && (unint64_t)[v8 length] < 0x401)
    {
      if ((unint64_t)[v9 length] <= 0x400)
      {
        id v11 = sub_100030398(a1, v7);
        if (v11)
        {
          v13[0] = 0;
          v13[1] = 0;
          sub_10003AED0((uint64_t)v13, a1 + 88);
          if (sub_1006B2DA8((uint64_t)v11, v8, v9))
          {
            sub_10003AFE8((uint64_t)v13);
            sub_1000305AC(v14, v7);
            sub_1006BABD8(a1, v14);
          }
          sub_10003AFB4((uint64_t)v13);
          uint64_t v10 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
            sub_1007934FC();
          }
          uint64_t v10 = 2;
        }
      }
      else
      {
        uint64_t v10 = 11;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
        sub_1007934C8();
      }
      uint64_t v10 = 10;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_10077F5AC();
    }
    uint64_t v10 = 1;
  }

  return v10;
}

void sub_1006BE7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1006BE7F4(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  id v6 = (char *)sub_100030398(a1, v5);
  if (v6)
  {
    if (v6[231] < 0)
    {
      sub_10003B098((unsigned char *)a3, *((void **)v6 + 26), *((void *)v6 + 27));
    }
    else
    {
      long long v7 = *((_OWORD *)v6 + 13);
      *(void *)(a3 + 16) = *((void *)v6 + 28);
      *(_OWORD *)a3 = v7;
    }
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
  }
  sub_10003AFB4((uint64_t)v8);
}

void sub_1006BE894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006BE8B4(uint64_t a1, void *a2, const std::string *a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = (char *)sub_100030398(a1, v5);
  if (v6)
  {
    std::string::operator=((std::string *)(v6 + 208), a3);
    sub_1000305AC(v8, v5);
    sub_1006BABD8(a1, v8);
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BE96C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006BE998(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4)
  {
    if (*((char *)v4 + 231) < 0) {
      uint64_t v5 = v4[27];
    }
    else {
      uint64_t v5 = *((unsigned __int8 *)v4 + 231);
    }
    BOOL v6 = v5 != 0;
  }
  else
  {
    BOOL v6 = 0;
  }
  sub_10003AFB4((uint64_t)v8);

  return v6;
}

void sub_1006BEA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_1006BEA3C(uint64_t a1, unsigned __int8 *a2)
{
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, a1 + 88);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v5 = *(id *)(a1 + 168);
  id v6 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (!v6) {
    goto LABEL_34;
  }
  uint64_t v7 = *(void *)v23;
  do
  {
    id v8 = 0;
    do
    {
      if (*(void *)v23 != v7) {
        objc_enumerationMutation(v5);
      }
      id v9 = *(void **)(*((void *)&v22 + 1) + 8 * (void)v8);
      uint64_t v10 = (char *)[*(id *)(a1 + 168) objectForKey:v9, __p[0]];
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v21 = 0;
      if (v10[231] < 0)
      {
        sub_10003B098(__p, *((void **)v10 + 26), *((void *)v10 + 27));
      }
      else
      {
        *(_OWORD *)long long __p = *((_OWORD *)v10 + 13);
        uint64_t v21 = *((void *)v10 + 28);
      }
      char v11 = HIBYTE(v21);
      id v12 = __p[1];
      if (v21 >= 0) {
        id v12 = (void *)HIBYTE(v21);
      }
      if (!v12) {
        goto LABEL_26;
      }
      uint64_t v13 = a2[23];
      uint64_t v14 = (v13 & 0x80u) == 0 ? (void *)a2[23] : (void *)*((void *)a2 + 1);
      if (v14 != v12) {
        goto LABEL_26;
      }
      if (v21 >= 0) {
        long long v15 = __p;
      }
      else {
        long long v15 = (void **)__p[0];
      }
      if ((v13 & 0x80) != 0)
      {
        if (memcmp(*(const void **)a2, v15, *((void *)a2 + 1))) {
          goto LABEL_26;
        }
      }
      else if (a2[23])
      {
        char v16 = a2;
        while (*v16 == *(unsigned __int8 *)v15)
        {
          ++v16;
          long long v15 = (void **)((char *)v15 + 1);
          if (!--v13) {
            goto LABEL_31;
          }
        }
LABEL_26:
        int v17 = 1;
        if ((v11 & 0x80) == 0) {
          goto LABEL_28;
        }
LABEL_27:
        operator delete(__p[0]);
        goto LABEL_28;
      }
LABEL_31:
      id v2 = v9;
      int v17 = 0;
      if (v21 < 0) {
        goto LABEL_27;
      }
LABEL_28:
      if (!v17) {
        goto LABEL_35;
      }
      id v8 = (char *)v8 + 1;
    }
    while (v8 != v6);
    id v18 = [v5 countByEnumeratingWithState:&v22 objects:v27 count:16];
    id v6 = v18;
  }
  while (v18);
LABEL_34:
  id v2 = 0;
LABEL_35:

  sub_10003AFB4((uint64_t)v26);

  return v2;
}

void sub_1006BEC5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006BEC8C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = (unsigned __int16 *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[128];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BECF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BED18(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[128] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BED84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BEDA4(uint64_t a1)
{
}

void sub_1006BEDAC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0) {
    sub_1006BAE00(a1, 1);
  }
}

uint64_t sub_1006BEDBC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = (unsigned __int8 *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[258];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BEE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BEE48(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  if ((a3 - 1) >= 7 && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT)) {
    sub_100793530();
  }
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[258] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BEEEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BEF0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = (unsigned __int8 *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[259];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BEF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BEF98(uint64_t a1, void *a2, unsigned int a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  if (a3 >= 4 && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT)) {
    sub_1007935A4();
  }
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[259] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BF038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BF058(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[264] != 0;
  }
  uint64_t v6 = (v4 != 0) & v5;
  sub_10003AFB4((uint64_t)v8);

  return v6;
}

void sub_1006BF0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BF0F4(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  uint64_t v6 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG)) {
    sub_100793618(a3, v6);
  }
  uint64_t v7 = sub_100030398(a1, v5);
  if (v7) {
    v7[264] = a3;
  }
  sub_10003AFB4((uint64_t)v8);
}

void sub_1006BF18C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BF1AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[265] != 0;
  }
  uint64_t v6 = (v4 != 0) & v5;
  sub_10003AFB4((uint64_t)v8);

  return v6;
}

void sub_1006BF228(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BF248(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[265] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BF2B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BF2D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    char v5 = v4[385];
  }
  else {
    char v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BF340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BF360(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[385] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BF3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BF3EC(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[384] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BF458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006BF478(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = (unsigned __int16 *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[197];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006BF4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BF504(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[197] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006BF570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006BF590(uint64_t a1, void *a2, char a3)
{
  v25[0] = 0;
  v25[1] = 0;
  id v18 = a2;
  sub_10003AED0((uint64_t)v25, a1 + 88);
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = v18;
  id v5 = [v4 countByEnumeratingWithState:&v21 objects:v30 count:16];
  if (v5)
  {
    uint64_t v19 = *(void *)v22;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v22 != v19) {
          objc_enumerationMutation(v4);
        }
        id v7 = *(id *)(*((void *)&v21 + 1) + 8 * i);
        id v9 = [v4 objectForKeyedSubscript:v7];
        id v10 = [v9 unsignedLongLongValue];

        char v11 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
        {
          id v12 = sub_1006AD3F0();
          *(_DWORD *)long long buf = 138543618;
          id v27 = v7;
          __int16 v28 = 2114;
          char v29 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Attempting to load paired device \"%{public}@\" (%{public}@) from the device cache", buf, 0x16u);
        }
        uint64_t v13 = sub_1003611B0(*(void *)(a1 + 248), v7, (uint64_t)v10, a3);
        if (v13)
        {
          sub_1006BF8C0(a1, v13);
          uint64_t v14 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
          {
            long long v15 = sub_1006AD3F0();
            *(_DWORD *)long long buf = 138543618;
            id v27 = v7;
            __int16 v28 = 2114;
            char v29 = v15;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Successfully reconciled paired device \"%{public}@\" (%{public}@)", buf, 0x16u);
          }
        }
        else
        {
          char v16 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
          {
            int v17 = sub_1006AD3F0();
            *(_DWORD *)long long buf = 138543362;
            id v27 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "could not find (%{public}@) in the paired devices database", buf, 0xCu);
          }
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v21 objects:v30 count:16];
    }
    while (v5);
  }

  sub_10003AFB4((uint64_t)v25);
}

void sub_1006BF85C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006BF8C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
  {
    sub_10079375C();
    uint64_t v3 = a1;
  }
  id v4 = *(id *)a2;
  v51[0] = 0;
  v51[1] = 0;
  sub_10003AED0((uint64_t)v51, v3 + 88);
  id v5 = [*(id *)(v3 + 168) objectForKey:v4];
  [*(id *)(v3 + 168) setObject:a2 forKey:v4];
  if (v5)
  {
    uint64_t v6 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = v5[60];
      uint64_t v8 = *(void *)(a2 + 480);
      *(_DWORD *)long long buf = 134218240;
      *(void *)&_DWORD buf[2] = v7;
      buf[6] = 2048;
      *(void *)&buf[7] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "MUC - Old device exist - copy current IDS user address 0x%llx in new device 0x%llx", (uint8_t *)buf, 0x16u);
    }
    sub_1006C2EE0(a2, (uint64_t)v5);
    sub_1006CFB8C((uint64_t)v5);
    operator delete();
  }
  *(void *)src = 0;
  uint64_t v74 = 0;
  sub_1000305AC(src, v4);
  *(void *)long long __p = *(void *)(a2 + 16);
  *(void *)long long buf = __p;
  uint64_t v46 = v3 + 176;
  id v9 = sub_1006D0698(v3 + 176, (unint64_t *)__p, (uint64_t)&unk_1007BE9D0, (void **)buf);
  uuid_copy((unsigned __int8 *)v9 + 40, src);
  if (*(void *)(a2 + 24))
  {
    *(void *)long long __p = *(void *)(a2 + 24);
    *(void *)long long buf = __p;
    id v10 = sub_1006D0698(v46, (unint64_t *)__p, (uint64_t)&unk_1007BE9D0, (void **)buf);
    uuid_copy((unsigned __int8 *)v10 + 40, src);
  }
  char v11 = (unsigned __int8 *)(v3 + 200);
  for (uint64_t i = *(unsigned __int8 **)(v3 + 208); i != v11; uint64_t i = (unsigned __int8 *)*((void *)i + 1))
  {
    if (!uuid_compare(i + 16, src))
    {
      if (i != v11)
      {
        uint64_t v13 = *(void *)i;
        *(void *)(v13 + 8) = *((void *)i + 1);
        **((void **)i + 1) = v13;
        --*(void *)(v3 + 216);
        operator delete(i);
      }
      break;
    }
  }
  uint64_t v14 = sub_100030690(v3 + 200, 0, 0, src);
  *uint64_t v14 = v11;
  long long v15 = *(void **)(v3 + 208);
  v14[1] = v15;
  *long long v15 = v14;
  uint64_t v16 = *(void *)(v3 + 216);
  *(void *)(v3 + 208) = v14;
  *(void *)(v3 + 216) = v16 + 1;
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  memset(buf, 0, sizeof(buf));
  unsigned int v17 = (unsigned __int16)(v16 + 1);
  if ((signed int)v17 > *(_DWORD *)(v3 + 152))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG))
    {
      sub_1007936D8();
      uint64_t v3 = a1;
    }
    int v18 = 0;
    unsigned __int16 v42 = 0;
    int v49 = 0;
    uint64_t v48 = 0;
    unsigned __int16 v47 = 0;
    unsigned __int16 v19 = 0;
    unsigned __int16 v20 = 0;
    uint64_t v43 = v3 + 256;
    if (v17 <= 1) {
      int v21 = 1;
    }
    else {
      int v21 = v17;
    }
    int v44 = v21;
    while (v44 != v18 + 1)
    {
      long long v22 = sub_100031234((const unsigned __int8 *)(*(void *)v11 + 16));
      long long v23 = [*(id *)(v3 + 168) objectForKey:v22];
      if (!v23)
      {
        long long v24 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
        {
          sub_100793694(v54, &v55, v24);
          uint64_t v3 = a1;
        }
      }
      __int16 v25 = v23[164];
      v20 += v25;
      v19 += v23[163];
      if (v23[163]) {
        LOBYTE(v25) = v25 | 2;
      }
      v47 += v23[160];
      if (v23[160]) {
        LOBYTE(v25) = v25 | 4;
      }
      if (v23[161]) {
        LOBYTE(v25) = v25 | 8;
      }
      int v26 = HIDWORD(v48);
      if (*((void *)v23 + 8)) {
        int v26 = HIDWORD(v48) + 1;
      }
      LOWORD(v48) = v48 + v23[161];
      HIDWORD(v48) = v26;
      if (*((void *)v23 + 8)) {
        LOBYTE(v25) = v25 | 0x10;
      }
      int v27 = v49;
      if (v23[528]) {
        int v27 = v49 + 1;
      }
      int v49 = v27;
      if (v23[528]) {
        LOBYTE(v25) = v25 | 0x20;
      }
      if (!(_BYTE)v25)
      {
        __int16 v28 = *(uint64_t **)(v3 + 200);
        uint64_t v29 = *v28;
        *(void *)(v29 + 8) = v28[1];
        *(void *)v28[1] = v29;
        --*(void *)(v3 + 216);
        operator delete(v28);
        if (*((void *)v23 + 3))
        {
          *(void *)long long __p = *((void *)v23 + 3);
          sub_1000517A4(v46, (unint64_t *)__p);
        }
        uint64_t v30 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
        {
          sub_1006B2368((uint64_t)v23);
          char v31 = __p;
          if (v58[1] < 0) {
            char v31 = *(unsigned char **)__p;
          }
          *(_DWORD *)uint64_t v52 = 136446210;
          uint64_t v53 = v31;
          _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "Device erased [%{public}s]", v52, 0xCu);
          if ((v58[1] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        *(void *)long long __p = *((void *)v23 + 2);
        sub_1000517A4(v46, (unint64_t *)__p);
        [*(id *)(v3 + 168) removeObjectForKey:v22];
        sub_1006C2F94((uint64_t)v23, v43);
        sub_1006CFB8C((uint64_t)v23);
        operator delete();
      }
      ++buf[v25];
      sub_1000305AC(__p, v22);
      sub_1000305B0(v3, __p);

      ++v42;
      ++v18;
      uint64_t v3 = a1;
    }
    id v32 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long __p = 67110656;
      *(_DWORD *)&__p[4] = v20;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v19;
      LOWORD(__p_14) = 1024;
      *(_DWORD *)((char *)&__p_14 + 2) = v47;
      HIWORD(__p_14) = 1024;
      *(_DWORD *)int v58 = (unsigned __int16)v48;
      *(_WORD *)&v58[4] = 1024;
      *(_DWORD *)&void v58[6] = WORD2(v48);
      __int16 v59 = 1024;
      *(_DWORD *)__int16 v60 = (unsigned __int16)v49;
      *(_WORD *)&v60[4] = 1024;
      *(_DWORD *)&v60[6] = v42;
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Device List Full with numConnected %d numConnecting %d numLEPaired %d numClassicPaired %d numOfFindMyDevices %d numOfFastLeConnection %d numConnectOrPaired %d", __p, 0x2Cu);
      id v32 = qword_100A19E78;
    }
    uint64_t v33 = 0;
    while (1)
    {
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        int v34 = (unsigned __int16)buf[v33];
        if (v33) {
          char v35 = "Y";
        }
        else {
          char v35 = "N";
        }
        *(_DWORD *)long long __p = 136316674;
        if ((v33 & 2) != 0) {
          uint64_t v36 = "Y";
        }
        else {
          uint64_t v36 = "N";
        }
        *(void *)&__p[4] = v35;
        if ((v33 & 4) != 0) {
          char v37 = "Y";
        }
        else {
          char v37 = "N";
        }
        *(_WORD *)&unsigned char __p[12] = 2080;
        if ((v33 & 8) != 0) {
          uint64_t v38 = "Y";
        }
        else {
          uint64_t v38 = "N";
        }
        __p_14 = v36;
        if ((v33 & 0x10) != 0) {
          char v39 = "Y";
        }
        else {
          char v39 = "N";
        }
        *(_WORD *)int v58 = 2080;
        if ((v33 & 0x20) != 0) {
          int v40 = "Y";
        }
        else {
          int v40 = "N";
        }
        *(void *)&void v58[2] = v37;
        __int16 v59 = 2080;
        *(void *)__int16 v60 = v38;
        *(_WORD *)&v60[8] = 2080;
        uint64_t v61 = v39;
        __int16 v62 = 2080;
        uint64_t v63 = v40;
        __int16 v64 = 1024;
        int v65 = v34;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Device List Full with connected %s connecting %s lePaired %s ClassicPaired %s UnexpiredFindMyDevice %s FastLeConnectionDevice %s - count %d", __p, 0x44u);
        id v32 = qword_100A19E78;
      }
      if (++v33 == 64)
      {
        uint64_t v41 = sub_100017768();
        sub_10004191C(v50, "");
        sub_1005C8AF4(v41, 3717, (uint64_t)v50, 1);
      }
    }
  }
  sub_10003AFB4((uint64_t)v51);
}

void sub_1006C01B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006C0274(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 248);
  id v5 = sub_100031234(a2);
  BOOL v6 = sub_100361698(v4, v5, a3) != 0;

  return v6;
}

void sub_1006C02D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C02E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  uint64_t v7 = sub_100030398(a1, v5);
  uint64_t v8 = (void *)v7[1];
  v7[1] = v6;

  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C0358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_1006C037C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 88);
  id v4 = *((id *)sub_100030398(a1, v3) + 1);
  sub_10003AFB4((uint64_t)v6);

  return v4;
}

void sub_1006C03F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C0414@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, unsigned __int8 *a3@<X8>)
{
  v27[0] = 0;
  v27[1] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 88);
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = a2[2];
  uint64_t v9 = a2[3];
  uint64_t v10 = a2[4];
  uint64_t v11 = a2[5];
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v12 = *(id *)(a1 + 168);
  id v13 = [v12 countByEnumeratingWithState:&v23 objects:v28 count:16];
  if (v13)
  {
    uint64_t v14 = (v6 << 40) | (v7 << 32) | (v8 << 24) | (v9 << 16) | (v10 << 8) | v11;
    uint64_t v15 = *(void *)v24;
    while (2)
    {
      for (uint64_t i = 0; i != v13; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v24 != v15) {
          objc_enumerationMutation(v12);
        }
        uint64_t v17 = *(void *)(*((void *)&v23 + 1) + 8 * i);
        int v18 = [*(id *)(a1 + 168) objectForKey:v17];
        uint64_t v19 = v18[3];
        if (!v19) {
          uint64_t v19 = v18[2];
        }
        if (v14 == v19)
        {
          sub_1000305AC(a3, v17);

          return sub_10003AFB4((uint64_t)v27);
        }
      }
      id v13 = [v12 countByEnumeratingWithState:&v23 objects:v28 count:16];
      if (v13) {
        continue;
      }
      break;
    }
  }

  unsigned __int16 v20 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long v22 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "BD Addr not in deviceMap, generating new UUID", v22, 2u);
  }
  uuid_clear(a3);
  return sub_10003AFB4((uint64_t)v27);
}

void sub_1006C05E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006C0618(uint64_t a1@<X0>, void *a2@<X1>, unsigned __int8 *a3@<X8>)
{
  id v5 = a2;
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  v24[0] = 0;
  v24[1] = 0;
  sub_1000305AC(v24, v5);
  unint64_t v6 = sub_1006C09AC(v24);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100793814();
    }
    goto LABEL_30;
  }
  uint64_t v7 = *(void **)(a1 + 184);
  if (v7)
  {
    uint64_t v8 = a1 + 184;
    do
    {
      unint64_t v9 = v7[4];
      BOOL v10 = v9 >= v6;
      if (v9 >= v6) {
        uint64_t v11 = v7;
      }
      else {
        uint64_t v11 = v7 + 1;
      }
      if (v10) {
        uint64_t v8 = (uint64_t)v7;
      }
      uint64_t v7 = (void *)*v11;
    }
    while (*v11);
    if (v8 != a1 + 184 && v6 >= *(void *)(v8 + 32))
    {
      uint64_t v15 = (unsigned __int8 *)(v8 + 40);
      uint64_t v16 = sub_100031234((const unsigned __int8 *)(v8 + 40));
      unsigned __int8 v17 = [v5 isEqual:v16];

      if (v17)
      {
        sub_1000305B0(a1, v15);
        uuid_copy(a3, v15);
        goto LABEL_31;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
      {
        sub_1006AD3F0();
        id v18 = (id)objc_claimAutoreleasedReturnValue();
        sub_100401EBC(v15, buf);
        sub_10079300C();
      }
LABEL_30:
      uuid_clear(a3);
      goto LABEL_31;
    }
  }
  id v12 = (void *)sub_100361428(*(void *)(a1 + 248), v5);
  id v13 = qword_100A19E78;
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG))
    {
      sub_1006AD3F0();
      objc_claimAutoreleasedReturnValue();
      sub_10079387C();
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = sub_1006AD3F0();
    *(_DWORD *)long long buf = 138543618;
    int v21 = v14;
    __int16 v22 = 2114;
    id v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Address \"%{public}@\" is already associated with device \"%{public}@\"", buf, 0x16u);
  }
  if ([*(id *)(a1 + 168) objectForKey:v5]
    && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
  {
    sub_1006AD3F0();
    objc_claimAutoreleasedReturnValue();
    sub_100792F84();
  }
  sub_1000305AC(a3, *v12);
LABEL_31:
  sub_10003AFB4((uint64_t)v19);
}

void sub_1006C0920(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

unint64_t sub_1006C09AC(const void *a1)
{
  *(_DWORD *)&v2[3] = 0;
  *(_DWORD *)id v2 = 0;
  if (sub_10010D250(a1, 16, (uint64_t)v2, 7)) {
    return 0;
  }
  else {
    return ((unint64_t)v2[1] << 40) | ((unint64_t)v2[2] << 32) | ((unint64_t)v2[3] << 24) | ((unint64_t)v2[4] << 16) | ((unint64_t)v2[5] << 8) | v2[6] | ((unint64_t)v2[0] << 48);
  }
}

void sub_1006C0A24(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  if ((a3 & 0xFF000000000000) != 0)
  {
    unint64_t v6 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
    {
      memset(out, 0, 37);
      uuid_unparse_upper(a2, (char *)out);
      sub_10004191C(__p, (char *)out);
      if (v11 >= 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)uuid_string_t out = 136446210;
      *(void *)&_OWORD out[4] = v9;
      _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Trying to remove duplicates of an address that is not public for device \"%{public}s\"", out, 0xCu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  uint64_t v7 = *(void *)(a1 + 248);
  uint64_t v8 = sub_100031234(a2);
  sub_100361318(v7, a3, v8);
}

void sub_1006C0B5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C0B74(uint64_t a1, const unsigned __int8 *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  id v4 = sub_100031234(a2);
  id v5 = sub_100030398(a1, v4);

  if (v5) {
    uint64_t v6 = v5[3];
  }
  else {
    uint64_t v6 = 0;
  }
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_1006C0BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1006C0C10(uint64_t a1, unsigned __int8 *a2, unint64_t a3)
{
  v22[1] = 0;
  unint64_t v23 = a3;
  v22[0] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 88);
  uint64_t v6 = sub_100031234(a2);
  uint64_t v7 = sub_100030398(a1, v6);

  if (v7)
  {
    if (BYTE6(a3)
      && (BYTE6(a3) != 1 || (~a3 & 0xC00000000000) != 0)
      && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
    {
      sub_100401EBC(a2, v21);
      sub_1007938C0();
    }
    uint64_t v8 = v7[3];
    if (v8)
    {
      if (v8 != v7[2])
      {
        unint64_t v9 = *(void **)(a1 + 184);
        if (v9)
        {
          BOOL v10 = (uint64_t *)(a1 + 184);
          do
          {
            unint64_t v11 = v9[4];
            BOOL v12 = v11 >= a3;
            if (v11 >= a3) {
              id v13 = v9;
            }
            else {
              id v13 = v9 + 1;
            }
            if (v12) {
              BOOL v10 = v9;
            }
            unint64_t v9 = (void *)*v13;
          }
          while (*v13);
          if (v10 != (uint64_t *)(a1 + 184) && v10[4] <= a3)
          {
            sub_10004D3B8((uint64_t **)(a1 + 176), v10);
            operator delete(v10);
          }
        }
      }
    }
    uint64_t v14 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
    {
      sub_1006AD3F0();
      id v15 = (id)objc_claimAutoreleasedReturnValue();
      memset(out, 0, 37);
      uuid_unparse_upper(a2, out);
      sub_10004191C(__p, out);
      if (v20 >= 0) {
        uint64_t v16 = __p;
      }
      else {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 138543618;
      id v25 = v15;
      __int16 v26 = 2082;
      int v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Now using resolved address \"%{public}@\" for resolvable device \"%{public}s\"", buf, 0x16u);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    v7[3] = a3;
    sub_1006BABD8(a1, a2);
    *(void *)uuid_string_t out = &v23;
    unsigned __int8 v17 = sub_1006AA33C(a1 + 176, &v23, (uint64_t)&unk_1007BE9D0, (void **)out);
    uuid_copy((unsigned __int8 *)v17 + 40, a2);
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_1006C0E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006C0EC4(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  id v5 = a2;
  for (uint64_t i = 0; i != 5; ++i)
  {
    uint64_t v7 = (char *)&unk_100A145C0 + 32 * i;
    uint64_t v8 = a3[23];
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = a3[23];
    }
    else {
      uint64_t v9 = *((void *)a3 + 1);
    }
    uint64_t v10 = v7[23];
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *((void *)v7 + 1);
    }
    if (v9 != v10) {
      continue;
    }
    if (v11 >= 0) {
      BOOL v12 = (unsigned __int8 *)&unk_100A145C0 + 32 * i;
    }
    else {
      BOOL v12 = *(unsigned __int8 **)v7;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a3, v12, *((void *)a3 + 1))) {
        continue;
      }
    }
    else if (a3[23])
    {
      id v13 = a3;
      while (*v13 == *v12)
      {
        ++v13;
        ++v12;
        if (!--v8) {
          goto LABEL_18;
        }
      }
      continue;
    }
LABEL_18:
    sub_10004191C(__p, "LEPhyDenylist");
    char v14 = sub_100030A04(a1, v5, (uint64_t)__p);
    char v15 = v14;
    if (v21 < 0)
    {
      operator delete(__p[0]);
      if (v15) {
        continue;
      }
    }
    else if (v14)
    {
      continue;
    }
    sub_10004191C(v18, "LEPhyDenylist");
    sub_1006BC69C(a1, v5, (unsigned __int8 *)v18);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    uint64_t v16 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v17 = a3;
      if ((char)a3[23] < 0) {
        unsigned __int8 v17 = *(const void **)a3;
      }
      *(_DWORD *)long long buf = 136315138;
      unint64_t v23 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "LEPhyDenylist: set tag for %s", buf, 0xCu);
    }
  }
}

void sub_1006C10BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_1006C1100(uint64_t a1, void *a2, _DWORD *a3)
{
  id v5 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    *a3 = v6[32];
  }
  BOOL v7 = v6 != 0;
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_1006C117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C119C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[98] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C1208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C1228(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    char v5 = v4[476];
  }
  else {
    char v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C1294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C12B4(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6)
  {
    v6[476] = a3;
    sub_1000527B8((uint64_t)v6, a3);
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C1328(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C1348(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[163] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C13B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C13D4(uint64_t a1, void *a2, int a3, uint64_t a4)
{
  id v7 = a2;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 88);
  uint64_t v8 = sub_100030398(a1, v7);
  uint64_t v9 = v8;
  if (v8)
  {
    sub_1006B1A34((uint64_t)v8, a3, a4);
    if (a3)
    {
      sub_10004191C(__p, "DoNotAutoConnect");
      uint64_t v10 = sub_10003156C((uint64_t)(v9 + 176), (const void **)__p);
      int v11 = v9 + 184;
      if (v17 < 0) {
        operator delete(__p[0]);
      }
      if (v11 != (char *)v10) {
        sub_1006B85C0(a1, v7, @"DoNotAutoConnect");
      }
    }
    else if (v9[488])
    {
      uint64_t v12 = sub_100019878();
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 3221225472;
      void v13[2] = sub_1006C1574;
      v13[3] = &unk_100998A38;
      uint64_t v15 = a1;
      id v14 = v7;
      sub_1004AFF58(v12, 1000, v13);
    }
  }
  sub_10003AFB4((uint64_t)v18);
}

void sub_1006C152C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  sub_10003AFB4(v22 - 64);
  _Unwind_Resume(a1);
}

void sub_1006C1574(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138543362;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "deleting pending device %{public}@", (uint8_t *)&v5, 0xCu);
  }
  sub_1006B7A50(v2, *(void **)(a1 + 32));
}

void sub_1006C1634(uint64_t a1, void *a2, int a3)
{
}

void sub_1006C163C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[165] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C16A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C16C8(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4, char *a5)
{
  id v9 = a2;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 88);
  uint64_t v10 = sub_100030398(a1, v9);
  if (v10)
  {
    *a3 = v10[165];
    *a4 = v10[529];
    if (v10[528]) {
      BOOL v11 = *((void *)v10 + 65) == 0;
    }
    else {
      BOOL v11 = 1;
    }
    char v12 = !v11;
    *a5 = v12;
  }
  sub_10003AFB4((uint64_t)v13);
}

void sub_1006C1768(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C1788(uint64_t a1)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 88);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v2 = *(id *)(a1 + 168);
  id v3 = [v2 countByEnumeratingWithState:&v12 objects:v17 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v13;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v13 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = (id *)[*(id *)(a1 + 168) objectForKey:*(void *)(*((void *)&v12 + 1) + 8 * (void)v5) withObject:v12];
        int v7 = *((unsigned __int8 *)v6 + 528);
        id v8 = v6[65];
        id v9 = v8;
        if (v7) {
          BOOL v10 = v8 == 0;
        }
        else {
          BOOL v10 = 1;
        }
        if (!v10) {
          sub_1006B008C((uint64_t *)v6, 1);
        }

        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v12 objects:v17 count:16];
    }
    while (v3);
  }

  return sub_10003AFB4((uint64_t)v16);
}

void sub_1006C18D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006C190C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    sub_1006B1A7C((uint64_t)v6, a3);
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C197C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C199C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = (unsigned int *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[42];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C1A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C1A28(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[86] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C1A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C1AB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = (unsigned __int16 *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[86];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C1B20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C1B40(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[232] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C1BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1006C1BCC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[232] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C1C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C1C60(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[233] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C1CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1006C1CEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[233] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C1D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C1D80(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[176] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C1DEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C1E0C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = (unsigned __int16 *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[176];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C1E78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C1E98(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[93] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C1F04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C1F24(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  int v7 = (id *)sub_100030398(a1, v5);
  if (v7) {
    objc_storeStrong(v7 + 47, a3);
  }
  sub_10003AFB4((uint64_t)v8);
}

void sub_1006C1FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_1006C1FC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = (id *)sub_100030398(a1, v3);
  if (v4) {
    id v5 = v4[47];
  }
  else {
    id v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C204C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_1006C206C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 88);
  id v4 = *((id *)sub_100030398(a1, v3) + 47);
  id v5 = v4;
  if (v4 && [v4 count])
  {
    uint64_t v6 = [v5 componentsJoinedByString:@","];
  }
  else
  {
    int v7 = sub_1006BDC1C(a1, v3);
    uint64_t v6 = +[NSString stringWithUTF8String:sub_10003DDA4(v7)];
  }
  id v8 = (void *)v6;

  sub_10003AFB4((uint64_t)v10);

  return v8;
}

void sub_1006C2144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006C233C(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 88);
  id v10 = sub_100030398(a1, v7);
  if (v10) {
    sub_1006AF530((uint64_t)v10, v8, v9);
  }
  sub_10003AFB4((uint64_t)v11);
}

void sub_1006C23CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C23F4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  id v7 = sub_100030398(a1, v5);
  if (v7) {
    sub_1006AF600((uint64_t)v7, v6);
  }
  sub_10003AFB4((uint64_t)v8);
}

void sub_1006C2470(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006C2494(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 88);
  id v7 = sub_100030398(a1, v5);
  if (v7) {
    id v8 = sub_1006AF85C((uint64_t)v7, v6);
  }
  else {
    id v8 = 0;
  }
  sub_10003AFB4((uint64_t)v10);

  return v8;
}

void sub_1006C2520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C2544(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 88);
  id v10 = sub_100030398(a1, v7);
  if (v10) {
    sub_1006AF908((uint64_t)v10, v8, v9);
  }
  sub_10003AFB4((uint64_t)v11);
}

void sub_1006C25D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C25FC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  id v7 = sub_100030398(a1, v5);
  if (v7) {
    sub_1006AF9D8((uint64_t)v7, v6);
  }
  sub_10003AFB4((uint64_t)v8);
}

void sub_1006C2678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006C269C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4)
  {
    id v5 = sub_1006AFA6C((uint64_t)v4);
  }
  else
  {
    id v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C2720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006C2740(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    id v7 = sub_1006AFCD8((uint64_t)v6, a3);
  }
  else {
    id v7 = 0;
  }
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_1006C27C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C27E0(uint64_t a1, void *a2, char a3, int a4, unsigned int a5)
{
  id v9 = a2;
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 88);
  id v10 = sub_100030398(a1, v9);
  if (v10)
  {
    uint64_t v15 = 0;
    sub_10010BB74((_DWORD *)&v15 + 1, (__darwin_suseconds_t *)&v15);
    BOOL v11 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138543874;
      id v18 = v9;
      __int16 v19 = 1024;
      int v20 = HIDWORD(v15);
      __int16 v21 = 1024;
      unsigned int v22 = a5;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" set last connected time to %d s offset %d ms", buf, 0x18u);
    }
    if (a4 == 1)
    {
      v10[36] = HIDWORD(v15);
    }
    else if (a4 == 2)
    {
      int v12 = *(_DWORD *)(a1 + 156) + 1;
      *(_DWORD *)(a1 + 156) = v12;
      int v13 = HIDWORD(v15);
      unsigned int v14 = HIDWORD(v15) - a5 / 0x3E8;
      v10[34] = v12;
      v10[35] = v14;
      if ((a3 & 1) == 0) {
        *((void *)v10 + 19) = 1000 * v13 - a5 + (int)v15 / 1000;
      }
    }
    sub_1000305AC(buf, v9);
    sub_1006BABD8(a1, buf);
  }
  sub_10003AFB4((uint64_t)v16);
}

void sub_1006C2998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1006C29C8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[65] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C2A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C2A54(uint64_t a1, void *a2)
{
  id v3 = a2;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4)
  {
    *(void *)std::string __str = 0;
    sub_100026C30((uint64_t)__str);
    uint64_t v5 = *(int *)__str;
    uint64_t v6 = *(__int16 *)&__str[4];
    v4[30] = *(int *)__str;
    v4[31] = v6;
    id v7 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG))
    {
      long long v18 = 0u;
      long long v19 = 0u;
      *(_OWORD *)std::string __str = 0u;
      long long v17 = 0u;
      snprintf(__str, 0x3FuLL, "%0llu.%0llu", v5, v6);
      sub_10004191C(__p, __str);
      if (v10 >= 0) {
        id v8 = __p;
      }
      else {
        id v8 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 138543618;
      id v13 = v3;
      __int16 v14 = 2080;
      uint64_t v15 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "device %{public}@ added to filter accept list at %s", buf, 0x16u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_10003AFB4((uint64_t)v11);
}

void sub_1006C2BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1006C2BE0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4)
  {
    v4[30] = 0;
    v4[31] = 0;
    uint64_t v5 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG))
    {
      *(void *)std::string __str = 0;
      sub_100026C30((uint64_t)__str);
      uint64_t v6 = *(int *)__str;
      uint64_t v7 = *(__int16 *)&__str[4];
      long long v18 = 0u;
      long long v19 = 0u;
      *(_OWORD *)std::string __str = 0u;
      long long v17 = 0u;
      snprintf(__str, 0x3FuLL, "%0llu.%0llu", v6, v7);
      sub_10004191C(__p, __str);
      if (v10 >= 0) {
        id v8 = __p;
      }
      else {
        id v8 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 138543618;
      id v13 = v3;
      __int16 v14 = 2080;
      uint64_t v15 = v8;
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "resetDeviceAddedToFilterAcceptListTime for device %{public}@ at %s", buf, 0x16u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  sub_10003AFB4((uint64_t)v11);
}

void sub_1006C2D3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1006C2D6C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6)
  {
    *(_OWORD *)a3 = *(_OWORD *)(v6 + 240);
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C2DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C2E04(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6)
  {
    v6[162] = a3;
    sub_1000305AC(v8, v5);
    sub_1006BABD8(a1, v8);
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C2EB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1006C2EE0(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a2 + 520);
  int v5 = *(unsigned __int8 *)(a2 + 528);
  char v6 = *(unsigned char *)(a2 + 544);
  id v9 = v4;
  if (v4) {
    BOOL v7 = v5 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  if (!v7)
  {
    int v8 = *(_DWORD *)(a2 + 532);
    sub_1006AFD74(a2, 0, 0, 0);
    sub_1006AFD74(a1, v5, v9, v8);
  }
  *(unsigned char *)(a1 + 544) = v6;
}

void sub_1006C2F80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006C2F94(uint64_t a1, uint64_t a2)
{
  if (_os_feature_enabled_impl())
  {
    if (*(char *)(a1 + 127) < 0)
    {
      sub_10003B098(__p, *(void **)(a1 + 104), *(void *)(a1 + 112));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(a1 + 104);
      *(void *)&long long v23 = *(void *)(a1 + 120);
    }
    if (SBYTE7(v23) < 0)
    {
      id v4 = __p[1];
      operator delete(__p[0]);
      if (!v4) {
        return;
      }
    }
    else if (!BYTE7(v23))
    {
      return;
    }
    double Current = CFAbsoluteTimeGetCurrent();
    double v6 = *(double *)(a1 + 400);
    double v7 = Current;
    if (!*(unsigned char *)(a1 + 164)) {
      double v7 = (double)*(int *)(a1 + 140);
    }
    if (v6 < v7) {
      double v6 = v7;
    }
    double v8 = Current + -7200.0;
    if (v6 >= Current + -7200.0)
    {
      long long v23 = 0u;
      long long v24 = 0u;
      *(_OWORD *)long long __p = 0u;
      sub_1006CA10C(a1, (uint64_t)__p);
      for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
      {
        if (sub_1006D0B28(i + 16, (uint64_t)__p))
        {
          if (i != a2)
          {
            char v10 = *(void **)i;
            v10[1] = *(void *)(i + 8);
            **(void **)(i + 8) = v10;
            --*(void *)(a2 + 16);
            sub_1006CF528(a2, (void **)i);
          }
          break;
        }
      }
      BOOL v11 = sub_1006D0BCC(a2, 0, 0, (uint64_t)__p);
      int v12 = v11;
      *(void *)BOOL v11 = a2;
      id v13 = *(char ***)(a2 + 8);
      *((void *)v11 + 1) = v13;
      *id v13 = v11;
      unint64_t v14 = *(void *)(a2 + 16) + 1;
      *(void *)(a2 + 8) = v11;
      *(void *)(a2 + 16) = v14;
      if (v14 < 0x191) {
        goto LABEL_35;
      }
      v21[0] = v21;
      v21[1] = v21;
      void v21[2] = 0;
      if (v11 == (char *)a2) {
        goto LABEL_39;
      }
      uint64_t v15 = a2;
      do
      {
        double v16 = *((double *)v12 + 2);
        if (v16 >= v8)
        {
          if (v16 < Current)
          {
            uint64_t v15 = (uint64_t)v12;
            double Current = *((double *)v12 + 2);
          }
          int v12 = (char *)*((void *)v12 + 1);
        }
        else
        {
          long long v17 = *(void **)v12;
          long long v18 = (char *)*((void *)v12 + 1);
          v17[1] = v18;
          **((void **)v12 + 1) = v17;
          --*(void *)(a2 + 16);
          sub_1006CF528(a2, (void **)v12);
          int v12 = v18;
        }
      }
      while (v12 != (char *)a2);
      unint64_t v19 = *(void *)(a2 + 16);
      if (v19 <= 0x190) {
        goto LABEL_34;
      }
      if (v15 == a2)
      {
LABEL_39:
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT)) {
          sub_100793914();
        }
      }
      else
      {
        int v20 = *(void **)v15;
        v20[1] = *(void *)(v15 + 8);
        **(void **)(v15 + 8) = v20;
        *(void *)(a2 + 16) = v19 - 1;
        sub_1006CF528(a2, (void **)v15);
      }
LABEL_34:
      sub_1006CF4C4(v21);
LABEL_35:
      if (SHIBYTE(v23) < 0) {
        operator delete(__p[1]);
      }
    }
  }
}

void sub_1006C31F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006C3228(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32));
}

void sub_1006C3258(uint64_t a1, void *a2, char a3)
{
  id v4 = a2;
  id v7 = v4;
  if (qword_1009F7EE0 == -1)
  {
    int v5 = v4;
  }
  else
  {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
    int v5 = v7;
  }
  double v6 = sub_100030398((uint64_t)off_1009F7ED8, v5);
  if (v6) {
    v6[237] = a3;
  }
}

void sub_1006C32E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006C32F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  id v3 = sub_100030398((uint64_t)off_1009F7ED8, v2);
  if (v3) {
    BOOL v4 = v3[237] != 0;
  }
  else {
    BOOL v4 = 0;
  }

  return v4;
}

void sub_1006C3370(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C3380(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v5 = v2;
  if (qword_1009F7EE0 == -1)
  {
    id v3 = v2;
  }
  else
  {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
    id v3 = v5;
  }
  id v4 = sub_100030398((uint64_t)off_1009F7ED8, v3);
  if (v4) {
    sub_1006AE4C8((uint64_t)v4);
  }
}

void sub_1006C3404(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_1006C3418(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 88);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = *(id *)(a1 + 168);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v19 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        double v8 = (char *)[*(id *)(a1 + 168) objectForKey:v7];
        sub_10004191C(__p, "HasBuiltinServices");
        uint64_t v9 = sub_10003156C((uint64_t)(v8 + 176), (const void **)__p);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
        if (v8 + 184 != (char *)v9) {
          [v2 addObject:v7];
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v14 objects:v19 count:16];
    }
    while (v4);
  }

  sub_10003AFE8((uint64_t)v18);
  char v10 = [v2 indexesOfObjectsPassingTest:&stru_1009BEAF0];
  [v2 removeObjectsAtIndexes:v10];

  sub_10003AFB4((uint64_t)v18);

  return v2;
}

void sub_1006C35E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_10003AFB4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

BOOL sub_1006C3648(id a1, NSUUID *a2, unint64_t a3, BOOL *a4)
{
  id v4 = a2;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BEC00);
  }
  BOOL v5 = !sub_100008DC4(qword_1009F7EC8, v4);

  return v5;
}

void sub_1006C36B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C36C0(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  BOOL v5 = sub_100030398((uint64_t)off_1009F7ED8, v4);
  if (v5)
  {
    sub_1006AE488(v5, a3);
  }
  else
  {
    double v6 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138543362;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updateRSSIStatForDevice - device not available %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_1006C37B8(_Unwind_Exception *exception_object)
{
}

void sub_1006C37D0(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  BOOL v5 = sub_100030398((uint64_t)off_1009F7ED8, v4);
  if (v5)
  {
    sub_1006AE4A8(v5, a3);
  }
  else
  {
    double v6 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138543362;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updatePERStatForDevice - device not available %{public}@", (uint8_t *)&v7, 0xCu);
    }
  }
}

void sub_1006C38C8(_Unwind_Exception *exception_object)
{
}

void sub_1006C38E0(uint64_t a1, void *a2, __int16 a3)
{
  id v4 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  *((_WORD *)sub_100030398((uint64_t)off_1009F7ED8, v4) + 16) = a3;
  uint64_t v5 = sub_1004AF8EC();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1006C39E8;
  v7[3] = &unk_1009BEB18;
  id v6 = v4;
  id v8 = v6;
  __int16 v9 = a3;
  sub_100013018(v5, v7);
}

void sub_1006C39C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C39E8()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_100052EB4() + 88);

  return v0();
}

void sub_1006C3A48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = sub_1006C3418(a1);
  if ([v4 indexOfObject:v3] != (id)0x7FFFFFFFFFFFFFFFLL)
  {
    uint64_t v5 = (char *)[*(id *)(a1 + 168) objectForKey:v3];
    sub_10004191C(__p, "HasBuiltinServices");
    uint64_t v6 = sub_10003156C((uint64_t)(v5 + 176), (const void **)__p);
    int v7 = v5 + 184;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v7 != (char *)v6)
    {
      sub_10004191C(v8, "DoNotAutoConnect");
      sub_1006BC69C(a1, v3, (unsigned __int8 *)v8);
      if (v9 < 0) {
        operator delete(v8[0]);
      }
    }
  }
}

void sub_1006C3B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1006C3B7C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[234] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C3BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1006C3C08(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[234] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C3C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C3C9C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[235] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C3D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1006C3D28(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[235] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C3D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C3DBC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6)
  {
    int v7 = v6[236];
    if ((v6[236] != 0) != a3)
    {
      v6[236] = a3;
      id v8 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543874;
        id v11 = v5;
        __int16 v12 = 1024;
        int v13 = v7;
        __int16 v14 = 1024;
        int v15 = a3;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "AutoReconnectEnabled changed - device %{public}@ enabled updated from %d to %d", buf, 0x18u);
      }
    }
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C3ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1006C3EF4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[236] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C3F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C3F88(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6)
  {
    if (!*((void *)v6 + 8)) {
      v6[238] = a3;
    }
    *(_OWORD *)long long v16 = 0u;
    long long v17 = 0u;
    LODWORD(v16[0]) = *(_DWORD *)(a1 + 288);
    sub_100040550(&v16[1], a1 + 296);
    sub_10003AFE8((uint64_t)v18);
    v12._uint64_t os_unfair_lock_opaque = (uint32_t)v16[0];
    long long __dst = 0;
    uint64_t v15 = 0;
    long long __p = 0;
    int v7 = v16[1];
    int64_t v8 = v17 - (unint64_t)v16[1];
    if ((void *)v17 != v16[1])
    {
      sub_1000405B8(&__p, v8 >> 3);
      char v9 = (char *)__dst;
      memmove(__dst, v7, v8);
      long long __dst = &v9[8 * (v8 >> 3)];
    }
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1006C4154;
    v10[3] = &unk_1009BEAB0;
    id v11 = v5;
    sub_1006CF3A4(&v12, v10);
    if (__p)
    {
      long long __dst = __p;
      operator delete(__p);
    }

    if (v16[1])
    {
      *(void **)&long long v17 = v16[1];
      operator delete(v16[1]);
    }
  }
  sub_10003AFB4((uint64_t)v18);
}

void sub_1006C40F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }
  sub_10003AFB4(v22 - 64);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C4154(uint64_t a1, uint64_t (***a2)(void, void, uint64_t))
{
  return (**a2)(a2, *(void *)(a1 + 32), 1);
}

void sub_1006C4188(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    sub_1006AF494((uint64_t)v4, 1);
  }
  sub_10003AFB4((uint64_t)v5);
}

void sub_1006C41EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006C420C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = sub_1006B2218((uint64_t)v4);
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C427C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C429C(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(a1 + 168);
  unsigned __int8 v3 = 0;
  id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v9;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v9 != v5) {
          objc_enumerationMutation(v2);
        }
        v3 += *((unsigned char *)[(*(id *)(a1 + 168)) objectForKey:*((void *)(*((void *)&v8 + 1) + 8 * i) + 237)];
      }
      id v4 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v4);
  }

  return v3;
}

void sub_1006C43A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C43CC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32));
}

uint64_t sub_1006C43FC(uint64_t a1)
{
  id v2 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Clearing all records of all devices", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v15 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 88);
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v3 = *(id *)(a1 + 168);
  id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v11;
    do
    {
      uint64_t v6 = 0;
      do
      {
        if (*(void *)v11 != v5) {
          objc_enumerationMutation(v3);
        }
        free([(*(id *)(a1 + 168)) objectForKey:v6]);
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [v3 countByEnumeratingWithState:&v10 objects:v16 count:16];
    }
    while (v4);
  }

  [*(id *)(a1 + 168) removeAllObjects];
  sub_1002B308C((void *)(a1 + 200));
  [*(id *)(a1 + 280) removeAllObjects];
  long long v8 = *(void **)(a1 + 184);
  int v7 = (void *)(a1 + 184);
  sub_1000486F0((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *int v7 = 0;
  v7[1] = 0;
  sub_1003619E8(v7[8]);
  return sub_10003AFB4((uint64_t)buf);
}

void sub_1006C4584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006C45B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  unint64_t v19 = a3;
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, a1 + 88);
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id v6 = *(id *)(a1 + 168);
  id v7 = [v6 countByEnumeratingWithState:&v22 objects:v27 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v23;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v23 != v8) {
        objc_enumerationMutation(v6);
      }
      long long v10 = (char *)[*(id *)(a1 + 168) objectForKey:*(void *)(*((void *)&v22 + 1) + 8 * v9)];
      long long v11 = v10;
      long long v12 = v10 + 208;
      if (v10[231] < 0)
      {
        sub_10003B098(__p, *((void **)v10 + 26), *((void *)v10 + 27));
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)v12;
        uint64_t v21 = *((void *)v10 + 28);
      }
      if (SHIBYTE(v21) < 0)
      {
        long long v13 = __p[1];
        operator delete(__p[0]);
        if (v13)
        {
LABEL_13:
          if (v11[231] < 0)
          {
            sub_10003B098(__p, *((void **)v11 + 26), *((void *)v11 + 27));
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)v12;
            uint64_t v21 = *((void *)v12 + 2);
          }
          if (v21 >= 0) {
            __int16 v14 = __p;
          }
          else {
            __int16 v14 = (void **)__p[0];
          }
          uint64_t v15 = +[NSString stringWithUTF8String:v14];
          unsigned int v16 = [v5 isEqualToString:v15];

          if (SHIBYTE(v21) < 0) {
            operator delete(__p[0]);
          }
          if (v16)
          {
            ((void (**)(id, char *))v19)[2](v19, v11);
            uint64_t v17 = 1;
            goto LABEL_26;
          }
        }
      }
      else if (HIBYTE(v21))
      {
        goto LABEL_13;
      }
      if (v7 == (id)++v9)
      {
        id v7 = [v6 countByEnumeratingWithState:&v22 objects:v27 count:16];
        if (v7) {
          goto LABEL_3;
        }
        break;
      }
    }
  }
  uint64_t v17 = 0;
LABEL_26:

  sub_10003AFB4((uint64_t)v26);
  return v17;
}

void sub_1006C47E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_10003AFB4((uint64_t)&a26);
  _Unwind_Resume(a1);
}

BOOL sub_1006C4850(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  id v7 = sub_100030398(a1, v5);
  if (v7) {
    v6[2](v6, v7);
  }
  sub_10003AFB4((uint64_t)v9);

  return v7 != 0;
}

void sub_1006C48E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C490C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 138543618;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS Manufacturer: %{public}@", v9, 0x16u);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  uint64_t v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 34, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C4A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_1006C4A48(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v8) = 138543362;
    *(void *)((char *)&v8 + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "DIS manufacturer name for device %{public}@", (uint8_t *)&v8, 0xCu);
  }
  long long v8 = 0uLL;
  sub_10003AED0((uint64_t)&v8, a1 + 88);
  id v5 = (id *)sub_100030398(a1, v3);
  if (v5) {
    id v6 = v5[34];
  }
  else {
    id v6 = 0;
  }
  sub_10003AFB4((uint64_t)&v8);

  return v6;
}

void sub_1006C4B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C4B78(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 138543618;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS Model number: %{public}@", v9, 0x16u);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 35, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C4C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C4CB4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 138543618;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2112;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS serial number: %@", v9, 0x16u);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 36, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C4DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C4DF0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 138543618;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS HW Revision: %{public}@", v9, 0x16u);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 37, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C4F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C4F2C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 138543618;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS FW Revision: %{public}@", v9, 0x16u);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 38, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C503C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C5068(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 138543618;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS SW Revision: %{public}@", v9, 0x16u);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 39, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C5178(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C51A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 138543618;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2114;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS systemID: %{public}@", v9, 0x16u);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 40, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C52B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C52E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v9 = 138543618;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2112;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS regulatory data: %@", v9, 0x16u);
  }
  *(void *)uint64_t v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 41, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C53F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C541C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long v11 = 138543618;
    *(void *)&void v11[4] = v5;
    *(_WORD *)&v11[12] = 2114;
    *(void *)&v11[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@ DIS PNP ID: %{public}@", v11, 0x16u);
  }
  *(void *)long long v11 = 0;
  *(void *)&v11[8] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  uint64_t v9 = v8;
  if (v8)
  {
    if (sub_1006B2218((uint64_t)v8) && sub_100050530())
    {
      uint64_t v10 = sub_100050530();
      (*(void (**)(uint64_t, void, id))(*(void *)v10 + 576))(v10, *((unsigned __int16 *)v9 + 128), v6);
    }
    objc_storeStrong(v9 + 42, a3);
    sub_1006C55B4(a1, v5);
  }
  sub_10003AFB4((uint64_t)v11);
}

void sub_1006C5588(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C55B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = (id *)sub_100030398(a1, v3);
  uint64_t v5 = (uint64_t)v4;
  if (v4)
  {
    id v6 = v4[42];
    id v7 = v6;
    if (!v6)
    {
LABEL_27:

      goto LABEL_28;
    }
    long long v8 = (char *)[v6 bytes];
    int v9 = *(unsigned __int16 *)(v8 + 1);
    int v10 = *(unsigned __int16 *)(v8 + 3);
    if (v9 != 1118) {
      goto LABEL_26;
    }
    if ((v10 - 2835) > 0xF || ((1 << (v10 - 19)) & 0xE001) == 0) {
      goto LABEL_26;
    }
    sub_10004191C(__p, "IsXboxBLEController");
    sub_1006ADE18(v5, (uint64_t)__p);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (v10 != 2835)
    {
LABEL_26:
      sub_1006C5BA0(a1, v3, v9, v10);
      goto LABEL_27;
    }
    id v12 = *(id *)(v5 + 304);
    if (!v12)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
        sub_100793948();
      }
      goto LABEL_25;
    }
    id v13 = [@"5.5.2641" compare:v12 options:64];
    __int16 v14 = qword_100A19E78;
    BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT);
    if (v13 == (id)1)
    {
      if (v15)
      {
        *(_DWORD *)long long buf = 138543874;
        id v26 = v12;
        __int16 v27 = 2114;
        CFStringRef v28 = @"5.5.2641";
        __int16 v29 = 2114;
        id v30 = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Firmware version: %{public}@ < minumum firmware version: %{public}@ for device %{public}@", buf, 0x20u);
      }
      sub_10004191C(v21, "XboxControllerRequiresFWUpdate");
      sub_1006ADE18(v5, (uint64_t)v21);
      if ((v22 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      unsigned int v16 = (void **)v21;
    }
    else
    {
      if (v15)
      {
        *(_DWORD *)long long buf = 138543874;
        id v26 = v12;
        __int16 v27 = 2114;
        CFStringRef v28 = @"5.5.2641";
        __int16 v29 = 2114;
        id v30 = v3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Firmware version: %{public}@ >= minumum firmware version: %{public}@ for device %{public}@", buf, 0x20u);
      }
      sub_10004191C(v19, "XboxControllerRequiresFWUpdate");
      sub_10037EF3C((uint64_t **)(v5 + 176), v19);
      if ((v20 & 0x80000000) == 0) {
        goto LABEL_24;
      }
      unsigned int v16 = (void **)v19;
    }
    operator delete(*v16);
LABEL_24:
    uint64_t v17 = +[NSDistributedNotificationCenter defaultCenter];
    long long v18 = +[NSNotification notificationWithName:@"com.apple.bluetooth.leDeviceFirmwareUpdateWarning" object:0];
    [v17 postNotification:v18];

LABEL_25:
    goto LABEL_26;
  }
LABEL_28:
}

void sub_1006C58A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_1006C5934(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v8) = 138543362;
    *(void *)((char *)&v8 + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "DIS for device %{public}@", (uint8_t *)&v8, 0xCu);
  }
  long long v8 = 0uLL;
  sub_10003AED0((uint64_t)&v8, a1 + 88);
  uint64_t v5 = (id *)sub_100030398(a1, v3);
  if (v5) {
    id v6 = v5[42];
  }
  else {
    id v6 = 0;
  }
  sub_10003AFB4((uint64_t)&v8);

  return v6;
}

void sub_1006C5A3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C5A64(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v9 = 138412546;
    *(void *)&void v9[4] = v5;
    *(_WORD *)&v9[12] = 2112;
    *(void *)&v9[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "DIS for device %@ DIS UDI: %@", v9, 0x16u);
  }
  *(void *)int v9 = 0;
  *(void *)&__int16 v9[8] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = (id *)sub_100030398(a1, v5);
  if (v8) {
    objc_storeStrong(v8 + 43, a3);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C5B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C5BA0(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  for (uint64_t i = 0; i != 160; i += 32)
  {
    if (*(unsigned __int16 *)((char *)&unk_100A145C0 + i + 24) == a3
      && *(unsigned __int16 *)((char *)&unk_100A145C0 + i + 26) == a4)
    {
      sub_10004191C(__p, "LEPhyDenylist");
      char v9 = sub_100030A04(a1, v7, (uint64_t)__p);
      char v10 = v9;
      if (v15 < 0)
      {
        operator delete(__p[0]);
        if (v10) {
          continue;
        }
      }
      else if (v9)
      {
        continue;
      }
      sub_10004191C(v12, "LEPhyDenylist");
      sub_1006BC69C(a1, v7, (unsigned __int8 *)v12);
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      long long v11 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        int v17 = a3;
        __int16 v18 = 1024;
        int v19 = a4;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "LEPhyDenylist: set tag for VID = 0x%04x, PID = 0x%04x", buf, 0xEu);
      }
    }
  }
}

void sub_1006C5D34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

int64_t sub_1006C5D78(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_10004191C(__p, "LEPhyDenylist");
  int64_t v4 = sub_100030A04(a1, v3, (uint64_t)__p);
  if (v7 < 0) {
    operator delete(__p[0]);
  }

  return v4;
}

void sub_1006C5DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1006C5E0C(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = (id *)sub_100030398(a1, v5);
  if (v6) {
    sub_1006AE72C(v6);
  }
  else {
    sub_10004191C(a3, "");
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C5E90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C5EB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 355);
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C5F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C5F3C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[355] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C5FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C5FC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = *(unsigned __int8 *)(v4 + 356);
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C6034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C6054(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[356] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C60C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C60E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = (unsigned __int8 *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[354];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C614C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C616C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[354] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C61D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C61F8(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[358] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006C6264(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_1006C6284(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[358] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C62F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C6318(uint64_t a1, void *a2, char a3, int a4)
{
  id v7 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = sub_100030398(a1, v7);
  if (v8)
  {
    v8[386] = a3;
    *((_DWORD *)v8 + 97) = a4;
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C63AC(uint64_t a1, void *a2, unsigned char *a3, _DWORD *a4)
{
  id v7 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  long long v8 = sub_100030398(a1, v7);
  if (v8)
  {
    *a3 = v8[386];
    *a4 = *((_DWORD *)v8 + 97);
  }
  sub_10003AFB4((uint64_t)v9);
}

void sub_1006C6428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

double sub_1006C6448(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = (double *)sub_100030398(a1, v3);
  if (v4) {
    double v5 = v4[50];
  }
  else {
    double v5 = 0.0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C64BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1006C64DC(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  if (sub_1006C65B8(a1, v5))
  {
    sub_1006C6648(a1, v5, 2u, a3);
  }
  else
  {
    uint64_t v6 = sub_100030DCC(a1, v5, 0);
    sub_1006D0844(a3, (unint64_t *)&v6, 1);
  }
}

void sub_1006C6598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006C65B8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = [*(id *)(a1 + 168) objectForKey:v3];
  if (v4) {
    BOOL v5 = sub_1006C7B60((uint64_t)v4);
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C6628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C6648(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  id v7 = a2;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 8) = 0;
  *(void *)a4 = a4 + 8;
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 88);
  long long v8 = (id *)[*(id *)(a1 + 168) objectForKey:v7];
  char v9 = v8;
  if (v8)
  {
    id v10 = v8[8];
    if (v10)
    {
      id v11 = v9[9];
      if ([v11 count])
      {
        if (!a3)
        {
          id v12 = [v10 lastConnectedLEMAC];
          *(void *)long long buf = sub_1006ADC58(v12);
          sub_100051620((uint64_t **)a4, (unint64_t *)buf, (uint64_t *)buf);
        }
        long long v20 = 0u;
        long long v21 = 0u;
        long long v18 = 0u;
        long long v19 = 0u;
        id v13 = v11;
        id v14 = [v13 countByEnumeratingWithState:&v18 objects:v24 count:16];
        if (v14)
        {
          uint64_t v15 = *(void *)v19;
LABEL_8:
          uint64_t v16 = 0;
          while (1)
          {
            if (*(void *)v19 != v15) {
              objc_enumerationMutation(v13);
            }
            *(void *)long long buf = sub_1006ADC58(*(void **)(*((void *)&v18 + 1) + 8 * v16));
            sub_100051620((uint64_t **)a4, (unint64_t *)buf, (uint64_t *)buf);
            if (a3)
            {
              if (*(void *)(a4 + 16) >= (unint64_t)a3) {
                break;
              }
            }
            if (v14 == (id)++v16)
            {
              id v14 = [v13 countByEnumeratingWithState:&v18 objects:v24 count:16];
              if (v14) {
                goto LABEL_8;
              }
              break;
            }
          }
        }
      }
      else
      {
        int v17 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "getDeviceExtraAddresses returning empty", buf, 2u);
        }
      }
    }
  }
  sub_10003AFB4((uint64_t)v23);
}

void sub_1006C6868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  sub_10003AFB4((uint64_t)va);
  sub_1000486F0(v12, *(void **)(v12 + 8));

  _Unwind_Resume(a1);
}

id sub_1006C68D4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  id v4 = (id *)[*(id *)(a1 + 168) objectForKey:v3];
  if (v4 && (id v5 = v4[8]) != 0)
  {
    uint64_t v6 = v5;
    id v7 = [v5 userIdentifier];
  }
  else
  {
    id v7 = 0;
  }
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_1006C6974(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1006C69A0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 88);
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  id v4 = *(id *)(a1 + 280);
  id v5 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v19;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v19 != v6) {
          objc_enumerationMutation(v4);
        }
        long long v8 = *(void **)(*((void *)&v18 + 1) + 8 * i);
        char v9 = [(id *)[*(id *)(a1 + 168) objectForKey:v8] v18];
        if (v9)
        {
          id v10 = v9[8];
          id v11 = v10;
          if (v10)
          {
            uint64_t v12 = [v10 serialNumber];
            BOOL v13 = [v12 length] == 0;

            if (!v13)
            {
              id v14 = [v11 serialNumber];
              unsigned __int8 v15 = [v3 isEqualToString:v14];

              if (v15)
              {
                id v16 = v8;

                goto LABEL_15;
              }
            }
          }
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v18 objects:v23 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
  id v16 = 0;
LABEL_15:

  sub_10003AFB4((uint64_t)v22);

  return v16;
}

void sub_1006C6B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1006C6BB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  id v14 = +[NSMutableArray array];
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 280);
  id v5 = [v4 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        id v9 = *((id *)[*(id *)(a1 + 168) objectForKey:v8] + 8);
        id v10 = v9;
        if (v9)
        {
          id v11 = [v9 groupIdentifier];
          unsigned int v12 = [v11 isEqual:v3];

          if (v12) {
            [v14 addObject:v8];
          }
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v5);
  }

  sub_10003AFB4((uint64_t)v19);

  return v14;
}

void sub_1006C6D4C(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_1006C6DAC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  id v4 = (id *)[*(id *)(a1 + 168) objectForKey:v3];
  if (v4 && (id v5 = v4[8]) != 0)
  {
    uint64_t v6 = v5;
    id v7 = [v5 groupIdentifier];
  }
  else
  {
    id v7 = 0;
  }
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_1006C6E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1006C6E78(uint64_t a1, void *a2)
{
  id v3 = sub_1006C6DAC(a1, a2);
  if (v3)
  {
    id v4 = sub_1006C6BB4(a1, v3);
  }
  else
  {
    id v4 = 0;
  }

  return v4;
}

void sub_1006C6EDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006C6EEC(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  id v4 = (id *)[*(id *)(a1 + 168) objectForKey:v3];
  if (v4 && (id v5 = v4[8]) != 0)
  {
    uint64_t v6 = v5;
    id v7 = [v5 serialNumber];
  }
  else
  {
    id v7 = 0;
  }
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_1006C6F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1006C6FB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  id v4 = (id *)[*(id *)(a1 + 168) objectForKey:v3];
  if (v4 && (id v5 = v4[8]) != 0)
  {
    uint64_t v6 = v5;
    id v7 = [v5 partIdentifier];
  }
  else
  {
    id v7 = 0;
  }
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_1006C7044(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

id sub_1006C7070(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  id v4 = (id *)[*(id *)(a1 + 168) objectForKey:v3];
  if (v4 && (id v5 = v4[8]) != 0)
  {
    uint64_t v6 = v5;
    id v7 = [v5 managedByFindMy];
  }
  else
  {
    id v7 = 0;
  }
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_1006C70FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_1006C7128(uint64_t a1, void *a2)
{
  id v3 = a2;
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 88);
  id v4 = [*(id *)(a1 + 168) objectForKey:v3];
  if (v4) {
    sub_1006AF300(v4);
  }
  sub_10003AFB4((uint64_t)v5);
}

void sub_1006C7188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C71A8()
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BECC0);
  }
  __int16 v29 = 0;
  long long __dst = 0;
  uint64_t v31 = 0;
  sub_1004AC984((uint64_t)off_1009F7EF8, 8212, &v29);
  id v26 = 0;
  __int16 v27 = 0;
  uint64_t v28 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BECC0);
  }
  sub_1004AC984((uint64_t)off_1009F7EF8, 8228, &v26);
  sub_1004BE988((uint64_t)&v29, (uint64_t)__dst, (char *)v26, v27, (v27 - (unsigned char *)v26) >> 3);
  long long v23 = 0;
  char v24 = 0;
  uint64_t v25 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BECC0);
  }
  sub_1004AC984((uint64_t)off_1009F7EF8, 8219, &v23);
  sub_1004BE988((uint64_t)&v29, (uint64_t)__dst, (char *)v23, v24, (v24 - (unsigned char *)v23) >> 3);
  long long v20 = 0;
  long long v21 = 0;
  uint64_t v22 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BECC0);
  }
  sub_1004AC984((uint64_t)off_1009F7EF8, 8224, &v20);
  sub_1004BE988((uint64_t)&v29, (uint64_t)__dst, (char *)v20, v21, (v21 - (unsigned char *)v20) >> 3);
  uint64_t v0 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = ((unsigned char *)__dst - (unsigned char *)v29) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "parseCurrentAACPInfo devices:%lu", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v37 = 0x4812000000;
  uint64_t v38 = sub_10004D194;
  char v39 = sub_10004CE70;
  int v40 = "";
  v42[0] = 0;
  v42[1] = 0;
  uint64_t v41 = v42;
  id v2 = (uint64_t *)v29;
  uint64_t v1 = (uint64_t *)__dst;
  if (v29 != __dst)
  {
    do
    {
      uint64_t v3 = *v2;
      if ((sub_100478B2C(*v2, 3) & 1) == 0) {
        break;
      }
      memset(&__p, 0, sizeof(__p));
      sub_100480344(v3, 3u, &v32);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type size = v32.__r_.__value_.__l.__size_;
        operator delete(v32.__r_.__value_.__l.__data_);
        if (size >= 2)
        {
LABEL_17:
          sub_100480344(v3, 3u, &v32);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          std::string __p = v32;
          memset(&__str, 0, sizeof(__str));
          sub_100480344(v3, 8u, &v32);
          if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          {
            std::string::size_type v5 = v32.__r_.__value_.__l.__size_;
            operator delete(v32.__r_.__value_.__l.__data_);
            if (v5 < 2) {
              goto LABEL_48;
            }
          }
          else if (HIBYTE(v32.__r_.__value_.__r.__words[2]) <= 1u)
          {
LABEL_48:
            uint64_t v14 = sub_1004AF8EC();
            v17[0] = _NSConcreteStackBlock;
            v17[1] = 3221225472;
            v17[2] = sub_1006C7890;
            v17[3] = &unk_100997528;
            _OWORD v17[4] = v3;
            sub_100013018(v14, v17);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            goto LABEL_50;
          }
          sub_100480344(v3, 8u, &v32);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
          std::string __str = v32;
          std::string::size_type v6 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
          if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v6 = __str.__r_.__value_.__l.__size_;
          }
          if (!v6)
          {
            sub_100480344(v3, 9u, &v32);
            if ((v32.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v7 = HIBYTE(v32.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v7 = v32.__r_.__value_.__l.__size_;
            }
            if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v32.__r_.__value_.__l.__data_);
            }
            if (v7 >= 2)
            {
              sub_100480344(v3, 9u, &v32);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              std::string __str = v32;
            }
          }
          std::string::size_type v8 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
          int v9 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v8 = __str.__r_.__value_.__l.__size_;
          }
          if (v8)
          {
            id v10 = qword_100A19E78;
            if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
            {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
              if (v9 >= 0) {
                p_str = &__str;
              }
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                p_p = &__p;
              }
              else {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              LODWORD(v32.__r_.__value_.__l.__data_) = 141558787;
              *(std::string::size_type *)((char *)v32.__r_.__value_.__r.__words + 4) = 1752392040;
              WORD2(v32.__r_.__value_.__r.__words[1]) = 2081;
              *(std::string::size_type *)((char *)&v32.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_str;
              HIWORD(v32.__r_.__value_.__r.__words[2]) = 2160;
              uint64_t v33 = 1752392040;
              __int16 v34 = 2081;
              char v35 = p_p;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "otherSN:%{private, mask.hash}s caseSN:%{private, mask.hash}s", (uint8_t *)&v32, 0x2Au);
            }
            v32.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
            BOOL v13 = sub_1006D0978((uint64_t **)(*((void *)&buf + 1) + 48), (const void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_1007BE9D0, (long long **)&v32);
            std::string::operator=((std::string *)(v13 + 7), &__str);
          }
          goto LABEL_48;
        }
      }
      else if (HIBYTE(v32.__r_.__value_.__r.__words[2]) > 1u)
      {
        goto LABEL_17;
      }
LABEL_50:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      ++v2;
    }
    while (v2 != v1);
  }
  uint64_t v15 = sub_100019878();
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  void v16[2] = sub_1006C78F8;
  v16[3] = &unk_1009995E0;
  v16[4] = &buf;
  sub_100013018(v15, v16);
  _Block_object_dispose(&buf, 8);
  sub_1006D08C4((uint64_t)&v41, v42[0]);
  if (v20)
  {
    long long v21 = (char *)v20;
    operator delete(v20);
  }
  if (v23)
  {
    char v24 = (char *)v23;
    operator delete(v23);
  }
  if (v26)
  {
    __int16 v27 = (char *)v26;
    operator delete(v26);
  }
  if (v29)
  {
    long long __dst = v29;
    operator delete(v29);
  }
}

void sub_1006C77B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Block_object_dispose((const void *)(v46 - 192), 8);
  sub_1006D08C4(a12, *(void **)(v46 - 136));
  if (a36) {
    operator delete(a36);
  }
  if (a39) {
    operator delete(a39);
  }
  if (a42) {
    operator delete(a42);
  }
  if (a45) {
    operator delete(a45);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006C7890(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BECC0);
  }
  id v2 = (os_unfair_lock_s *)off_1009F7EF8;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_1004AA04C(v2, v3, 15);
}

void sub_1006C78F8(uint64_t a1, __n128 a2)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 8);
  if (v2[8])
  {
    uint64_t v3 = (void *)v2[6];
    id v4 = v2 + 7;
    if (v3 != v2 + 7)
    {
      a2.n128_u64[0] = 141559043;
      __n128 v17 = a2;
      do
      {
        v28[0] = 0;
        v28[1] = 0;
        if (qword_1009F85C8 != -1) {
          dispatch_once(&qword_1009F85C8, &stru_1009BEC60);
        }
        std::string::size_type v5 = v3 + 7;
        std::string::size_type v6 = off_1009F85C0;
        if (*((char *)v3 + 79) < 0) {
          std::string::size_type v5 = (void *)*v5;
        }
        std::string::size_type v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v5, *(_OWORD *)&v17);
        BOOL v8 = sub_1006F4528((uint64_t)v6, v7, (uint64_t)v28);

        if (v8)
        {
          int v9 = v3 + 4;
          id v10 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
          {
            id v11 = v3 + 4;
            if (*((char *)v3 + 55) < 0) {
              id v11 = (void *)*v9;
            }
            *(_DWORD *)long long buf = v17.n128_u32[0];
            uint64_t v19 = 1752392040;
            __int16 v20 = 2081;
            long long v21 = v11;
            __int16 v22 = 2160;
            uint64_t v23 = 1752392040;
            __int16 v24 = 1041;
            int v25 = 16;
            __int16 v26 = 2097;
            __int16 v27 = v28;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Setting %{private, mask.hash}s encryption key to %{private, mask.hash}.16P", buf, 0x30u);
          }
          if (qword_1009F85C8 != -1) {
            dispatch_once(&qword_1009F85C8, &stru_1009BEC60);
          }
          unsigned int v12 = off_1009F85C0;
          if (*((char *)v3 + 55) < 0) {
            int v9 = (void *)*v9;
          }
          BOOL v13 = +[NSString stringWithUTF8String:v9];
          sub_1006F4198((uint64_t)v12, v13, (uint64_t)v28);
        }
        uint64_t v14 = (void *)v3[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v3[2];
            BOOL v16 = *v15 == (void)v3;
            uint64_t v3 = v15;
          }
          while (!v16);
        }
        uint64_t v3 = v15;
      }
      while (v15 != v4);
    }
  }
}

void sub_1006C7B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006C7B60(uint64_t a1)
{
  uint64_t v1 = [*(id *)(a1 + 64) longTermKeyMap];
  BOOL v2 = [v1 count] != 0;

  return v2;
}

void sub_1006C7BA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C7BB0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3) {
    goto LABEL_24;
  }
  id v4 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138543362;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Checking if device %{public}@ is Apple Device", buf, 0xCu);
  }
  *(_OWORD *)long long buf = 0uLL;
  sub_10003AED0((uint64_t)buf, a1 + 88);
  std::string::size_type v5 = (id *)sub_100030398(a1, v3);
  if (!v5)
  {
LABEL_23:
    sub_10003AFB4((uint64_t)buf);
LABEL_24:
    uint64_t v14 = 0;
    goto LABEL_25;
  }
  id v6 = v5[42];
  std::string::size_type v7 = v6;
  if (v6 && (unint64_t)[v6 length] >= 5)
  {
    BOOL v8 = (unsigned __int8 *)[v7 bytes];
    int v9 = *v8;
    int v10 = *(unsigned __int16 *)(v8 + 1);
    if (v9 == 2 && v10 == 1452) {
      goto LABEL_20;
    }
    if (v9 == 1 && v10 == 76) {
      goto LABEL_20;
    }
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  id v11 = off_1009F7ED8;
  sub_10004191C(__p, "IsAppleWatch");
  if (sub_100030A04((uint64_t)v11, v3, (uint64_t)__p))
  {
    if (v17 < 0) {
      operator delete(__p[0]);
    }
    goto LABEL_20;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  char v12 = sub_1006BDD68((uint64_t)off_1009F7ED8, v3);
  char v13 = v12;
  if (v17 < 0)
  {
    operator delete(__p[0]);
    if (v13) {
      goto LABEL_20;
    }
    goto LABEL_22;
  }
  if ((v12 & 1) == 0)
  {
LABEL_22:

    goto LABEL_23;
  }
LABEL_20:

  sub_10003AFB4((uint64_t)buf);
  uint64_t v14 = 1;
LABEL_25:

  return v14;
}

void sub_1006C7DC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_1006C7E14(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BEBA0);
  }
  BOOL v2 = sub_10004034C((uint64_t)off_1009F7EB8);
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 88);
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  id v3 = v2;
  id v4 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v20;
    while (2)
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v5) {
          objc_enumerationMutation(v3);
        }
        std::string::size_type v7 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        sub_10004191C(v17, "A1603");
        if (sub_100030A04(a1, v7, (uint64_t)v17))
        {
          char v8 = 1;
        }
        else
        {
          sub_10004191C(v15, "A2051");
          if (sub_100030A04(a1, v7, (uint64_t)v15))
          {
            char v8 = 1;
          }
          else
          {
            sub_10004191C(v13, "A3085");
            if (sub_100030A04(a1, v7, (uint64_t)v13))
            {
              char v8 = 1;
            }
            else
            {
              sub_10004191C(__p, "A2538");
              char v8 = sub_100030A04(a1, v7, (uint64_t)__p);
              if (v12 < 0) {
                operator delete(__p[0]);
              }
            }
            if (v14 < 0) {
              operator delete(v13[0]);
            }
          }
          if (v16 < 0) {
            operator delete(v15[0]);
          }
        }
        if (v18 < 0) {
          operator delete(v17[0]);
        }
        if (v8)
        {
          uint64_t v9 = 1;
          goto LABEL_27;
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v19 objects:v24 count:16];
      if (v4) {
        continue;
      }
      break;
    }
  }
  uint64_t v9 = 0;
LABEL_27:

  sub_10003AFB4((uint64_t)v23);
  return v9;
}

void sub_1006C8074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_10003AFB4((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_1006C8110(uint64_t a1, void *a2, int a3, void *a4, int a5)
{
  id v9 = a2;
  id v10 = a4;
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 88);
  id v11 = sub_100030398(a1, v9);
  if (v11) {
    uint64_t v12 = sub_1006AFD74((uint64_t)v11, a3, v10, a5);
  }
  else {
    uint64_t v12 = 8;
  }
  sub_10003AFB4((uint64_t)v14);

  return v12;
}

void sub_1006C81B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C81D8(uint64_t a1, void *a2)
{
  return sub_1006C8110(a1, a2, 0, 0, 0);
}

id sub_1006C81E8(uint64_t a1, int a2)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 88);
  id v4 = objc_opt_new();
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v5 = *(id *)(a1 + 168);
  id v6 = [v5 countByEnumeratingWithState:&v11 objects:v16 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = *(void *)(*((void *)&v11 + 1) + 8 * i);
        if (*((_DWORD *)objc_msgSend(*(id *)(a1 + 168), "objectForKey:", v9, (void)v11) + 133) == a2) {
          [v4 addObject:v9];
        }
      }
      id v6 = [v5 countByEnumeratingWithState:&v11 objects:v16 count:16];
    }
    while (v6);
  }

  sub_10003AFB4((uint64_t)v15);

  return v4;
}

void sub_1006C8348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006C8380(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = (unsigned int *)sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = v4[133];
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C83EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C840C(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    uint64_t v7 = sub_1006B0E04((uint64_t)v6, a3);
  }
  else {
    uint64_t v7 = 8;
  }
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_1006C848C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C84AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  uint64_t v7 = (id *)sub_100030398(a1, v5);
  if (v7) {
    objc_storeStrong(v7 + 25, a3);
  }
  sub_10003AFB4((uint64_t)v8);
}

void sub_1006C852C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C8550(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  if (v4) {
    uint64_t v5 = sub_1006B11C4((uint64_t)v4);
  }
  else {
    uint64_t v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1006C85C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C85E0(uint64_t a1, void *a2)
{
  id v3 = a2;
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 88);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  unint64_t v4 = sub_100030DCC((uint64_t)off_1009F7ED8, v3, 0);
  uint64_t v5 = sub_1002284B8(v4);
  int v13 = v5;
  char v15 = BYTE6(v5);
  __int16 v14 = WORD2(v5);
  id v6 = sub_100030398(a1, v3);
  uint64_t v7 = v6;
  unsigned __int8 v12 = v6[560];
  uint64_t v8 = v12;
  if (!v12)
  {
    __int16 v11 = *((_WORD *)v6 + 281);
    __int16 v10 = *((_WORD *)v6 + 282);
    memset(v17, 0, sizeof(v17));
    sub_10017E654(&v13, &v10, &v12, &v11);
    v7[560] = v12;
    *((_WORD *)v7 + 281) = v11;
    *((_WORD *)v7 + 282) = v10;
    sub_1003B8A60((uint64_t)v17);
    uint64_t v8 = v12;
  }
  sub_10003AFB4((uint64_t)v16);

  return v8;
}

void sub_1006C8750(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  sub_1003B8A60((uint64_t)va1);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1006C8790(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 88);
  id v6 = (id *)sub_100030398(a1, v5);
  uint64_t v7 = v6;
  if (v6)
  {
    sub_1006B173C(v6, 0);
    if ((*(_WORD *)(a3 + 80) & 8) != 0)
    {
      __int16 v10 = 0;
      __int16 v11 = 0;
      sub_1000335D8(&v10, (const void *)(a3 + 28), 0x10uLL);
      if (sub_100045F00((uint64_t)&v10))
      {
        uint64_t v8 = sub_10004A6E4((uint64_t)&v10);
        uint64_t v9 = +[NSData dataWithBytes:v8 length:sub_100045F00((uint64_t)&v10)];
        sub_1006B173C(v7, v9);
      }
      __int16 v10 = &off_100998428;
      if (v11) {
        sub_1000368F4(v11);
      }
    }
  }
  sub_10003AFB4((uint64_t)v12);
}

void sub_1006C88A0(_Unwind_Exception *a1, uint64_t a2, atomic_uint *a3, ...)
{
  va_start(va, a3);

  if (a3) {
    sub_1000368F4(a3);
  }
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

BOOL sub_1006C8904(uint64_t a1, void *a2, char a3, char a4, __int16 a5, __int16 a6, __int16 a7, char a8, char a9, char a10)
{
  id v17 = a2;
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 88);
  char v18 = sub_100030398(a1, v17);
  if (v18)
  {
    v18[566] = a3;
    v18[567] = a4;
    *((_WORD *)v18 + 284) = a5;
    *((_WORD *)v18 + 285) = a6;
    *((_WORD *)v18 + 286) = a7;
    v18[574] = a8;
    v18[575] = a9;
    v18[576] = a10;
  }
  BOOL v19 = v18 != 0;
  sub_10003AFB4((uint64_t)v21);

  return v19;
}

void sub_1006C89C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C89E4(uint64_t a1, void *a2, unsigned char *a3, unsigned char *a4, _WORD *a5, _WORD *a6, _WORD *a7, unsigned char *a8, unsigned char *a9, unsigned char *a10)
{
  id v17 = a2;
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 88);
  id v18 = sub_100030398(a1, v17);
  if (v18) {
    uint64_t v19 = sub_1006C8AC4((uint64_t)v18, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else {
    uint64_t v19 = 0;
  }
  sub_10003AFB4((uint64_t)v21);

  return v19;
}

void sub_1006C8AA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

uint64_t sub_1006C8AC4(uint64_t a1, unsigned char *a2, unsigned char *a3, _WORD *a4, _WORD *a5, _WORD *a6, unsigned char *a7, unsigned char *a8, unsigned char *a9)
{
  BOOL v9 = *(unsigned char *)(a1 + 566) != 0;
  if (*(unsigned char *)(a1 + 566)) {
    *a2 = *(unsigned char *)(a1 + 566);
  }
  if (*(unsigned char *)(a1 + 567))
  {
    *a3 = *(unsigned char *)(a1 + 567);
    BOOL v9 = 1;
  }
  if (*(_WORD *)(a1 + 568))
  {
    *a4 = *(_WORD *)(a1 + 568);
    BOOL v9 = 1;
  }
  if (*(_WORD *)(a1 + 570))
  {
    *a5 = *(_WORD *)(a1 + 570);
    BOOL v9 = 1;
  }
  if (*(_WORD *)(a1 + 572))
  {
    *a6 = *(_WORD *)(a1 + 572);
    BOOL v9 = 1;
  }
  if (*(unsigned char *)(a1 + 574))
  {
    *a7 = *(unsigned char *)(a1 + 574);
    BOOL v9 = 1;
  }
  if (*(unsigned char *)(a1 + 575))
  {
    *a8 = *(unsigned char *)(a1 + 575);
    BOOL v9 = 1;
  }
  if (*(unsigned char *)(a1 + 576))
  {
    *a9 = *(unsigned char *)(a1 + 576);
    return 1;
  }
  return v9;
}

uint64_t sub_1006C8B54(uint64_t a1, int a2)
{
  double Current = CFAbsoluteTimeGetCurrent();
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v5 = *(id *)(a1 + 168);
  unsigned __int16 v6 = 0;
  id v7 = [v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v7)
  {
    double v8 = Current - (double)(60 * a2);
    uint64_t v9 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v9) {
          objc_enumerationMutation(v5);
        }
        __int16 v11 = (double *)[*(id *)(a1 + 168) objectForKey:*(void *)(*((void *)&v15 + 1) + 8 * i) v15];
        double v12 = v11[50];
        BOOL v13 = v12 <= 0.0 || v12 < v8;
        if (!v13 || !a2 || *((unsigned char *)v11 + 160)) {
          ++v6;
        }
      }
      id v7 = [v5 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v7);
  }

  sub_10003AFB4((uint64_t)v19);
  return v6;
}

void sub_1006C8CB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_1006C8CE0(int a1)
{
  switch(a1)
  {
    case 2700:
      uint64_t result = "BT_ERROR_NAME_EMPTY";
      break;
    case 2701:
      uint64_t result = "BT_ERROR_NAME_IS_UUID";
      break;
    case 2702:
      uint64_t result = "BT_ERROR_NAME_IS_BDADDR";
      break;
    case 2703:
      uint64_t result = "BT_ERROR_NAME_START_OR_END_INVALID";
      break;
    case 2704:
      uint64_t result = "BT_ERROR_NAME_FAILED_TO_TOKENIZE";
      break;
    case 2705:
      uint64_t result = "BT_ERROR_NAME_LEXICON_FOUND_UNWANTED_WORDS";
      break;
    case 2706:
      uint64_t result = "BT_ERROR_NAME_LEXICON_TOO_MANY_INVALID_WORDS";
      break;
    case 2707:
      uint64_t result = "BT_ERROR_NAME_LEXICON_NO_VALID_WORD";
      break;
    case 2708:
      uint64_t result = "BT_ERROR_NAME_LEXICON_CAPITALIZED_WORDS";
      break;
    default:
      if (a1) {
        uint64_t result = "Unknown";
      }
      else {
        uint64_t result = "BT_SUCCESS";
      }
      break;
  }
  return result;
}

const char *sub_1006C8DB8(int a1)
{
  switch(a1)
  {
    case 2700:
      uint64_t result = "NameEmpty";
      break;
    case 2701:
      uint64_t result = "NameIsUUID";
      break;
    case 2702:
      uint64_t result = "NameIsBDADDR";
      break;
    case 2703:
      uint64_t result = "StartOrEndInvalid";
      break;
    case 2704:
      uint64_t result = "FailedToTokenize";
      break;
    case 2705:
      uint64_t result = "LexiconFailedToTokenize";
      break;
    case 2706:
      uint64_t result = "LexiconTooManyInvalidWords";
      break;
    case 2707:
      uint64_t result = "LexiconNoValidWords";
      break;
    case 2708:
      uint64_t result = "LexiconCapitalizedWords";
      break;
    default:
      if (a1) {
        uint64_t result = "Unknown";
      }
      else {
        uint64_t result = "Success";
      }
      break;
  }
  return result;
}

uint64_t sub_1006C8E90(void *a1, void *a2, int a3, uint64_t a4, unsigned __int16 *a5, _WORD *a6, unsigned char *a7, unsigned __int16 *a8, uint64_t a9)
{
  id v13 = a2;
  if ([v13 length])
  {
    uint64_t v14 = a1[41];
    if (!v14)
    {
      uint64_t v15 = +[NSMutableCharacterSet whitespaceAndNewlineCharacterSet];
      long long v16 = (void *)a1[41];
      a1[41] = v15;

      long long v17 = (void *)a1[41];
      long long v18 = +[NSCharacterSet punctuationCharacterSet];
      [v17 formUnionWithCharacterSet:v18];

      uint64_t v19 = (void *)a1[41];
      long long v20 = +[NSCharacterSet symbolCharacterSet];
      [v19 formUnionWithCharacterSet:v20];

      uint64_t v14 = a1[41];
    }
    long long v21 = [v13 componentsSeparatedByCharactersInSet:v14];
    long long v22 = +[NSSet setWithArray:v21];

    unsigned __int16 v23 = (unsigned __int16)[v22 count];
    *a8 = v23;
    if (v23)
    {
      __int16 v24 = +[NSLocale currentLocale];
      int v25 = [v24 localeIdentifier];

      unsigned int v26 = [(__CFString *)v25 hasPrefix:@"en"];
      if (v26) {
        __int16 v27 = v25;
      }
      else {
        __int16 v27 = @"en";
      }
      uint64_t v28 = v27;
      __int16 v29 = v28;
      if (!a1[42] && (a3 & 1) == 0)
      {
        uint64_t v28 = (__CFString *)sub_1006C9178((uint64_t)v28, v28);
        a1[42] = v28;
      }
      if (((a3 ^ 1 | v26) & 1) == 0 && !a1[43]) {
        a1[43] = sub_1006C9178((uint64_t)v28, v25);
      }
      uint64_t v30 = 42;
      if (a3) {
        uint64_t v30 = 43;
      }
      uint64_t v31 = a1[v30];
      if (v31)
      {
        v37[0] = _NSConcreteStackBlock;
        v37[1] = 3221225472;
        v37[2] = sub_1006C929C;
        v37[3] = &unk_1009BEB60;
        void v37[4] = a6;
        v37[5] = v31;
        v37[6] = a4;
        v37[7] = a9;
        v37[8] = a7;
        v37[9] = a5;
        [v22 enumerateObjectsUsingBlock:v37];
        if (*a7)
        {
          uint64_t v32 = 2705;
        }
        else if (*a5 == *a8)
        {
          if (*a6) {
            uint64_t v32 = 2708;
          }
          else {
            uint64_t v32 = 2707;
          }
        }
        else
        {
          uint64_t v32 = 0;
        }
      }
      else
      {
        uint64_t v32 = 2704;
      }
    }
    else
    {
      uint64_t v32 = 2704;
    }
  }
  else
  {
    uint64_t v32 = 2700;
  }

  return v32;
}

void sub_1006C9120(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C9178(uint64_t a1, void *a2)
{
  id v2 = a2;
  v6[0] = kLXLexiconLocaleKey;
  v6[1] = kLXLexiconEnumerateCachedOnlyOTAPaths;
  v7[0] = v2;
  v7[1] = &__kCFBooleanTrue;
  id v3 = +[NSDictionary dictionaryWithObjects:v7 forKeys:v6 count:2];
  uint64_t v4 = LXLexiconCreate();

  return v4;
}

void sub_1006C9278(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006C929C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v5 = 0;
  unsigned __int16 v6 = &v5;
  uint64_t v7 = 0x2020000000;
  char v8 = 0;
  if ([v3 rangeOfString:@"(?:^[A-Z][a-z]{3,}$)" options:1024] != (id)0x7FFFFFFFFFFFFFFFLL) {
    ++**(_WORD **)(a1 + 32);
  }
  id v4 = v3;
  LXLexiconEnumerateEntriesForString();
  if (!*((unsigned char *)v6 + 24)) {
    ++**(_WORD **)(a1 + 72);
  }

  _Block_object_dispose(&v5, 8);
}

void sub_1006C93C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Block_object_dispose((const void *)(v15 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_1006C93EC(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  id v5 = (id)LXEntryCopyString();
  **(_DWORD **)(a1 + 48) = LXEntryGetMetaFlags();
  if ([v5 caseInsensitiveCompare:*(void *)(a1 + 32)] && !**(_DWORD **)(a1 + 48))
  {
    std::string::assign(*(std::string **)(a1 + 56), (const std::string::value_type *)[*(id *)(a1 + 32) UTF8String]);
  }
  else
  {
    if ((LXEntryGetMetaFlags() & 0x3800000) != 0)
    {
      std::string::assign(*(std::string **)(a1 + 56), (const std::string::value_type *)[*(id *)(a1 + 32) UTF8String]);
      **(unsigned char **)(a1 + 64) = 1;
      *a3 = 1;
    }
    if ((LXEntryGetMetaFlags() & 0x86) == 0) {
      *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    }
  }
}

void sub_1006C94E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006C94FC(void *a1, void *a2, int a3)
{
  id v5 = a2;
  if ([v5 length])
  {
    if ([v5 rangeOfString:@"(?:[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12})" options:1024] == (id)0x7FFFFFFFFFFFFFFFLL)
    {
      if ([v5 rangeOfString:@"(?:[0-9A-Fa-f]{2}_|-){5}[0-9A-Fa-f]{2}" options:1024] == (id)0x7FFFFFFFFFFFFFFFLL)
      {
        unsigned __int16 v6 = +[NSCharacterSet characterSetWithCharactersInString:@"_.-"];
        uint64_t v7 = [v5 rangeOfCharacterFromSet:v6];
        if (v7 && v7 != (char *)[v5 length] - 1) {
          uint64_t v8 = 0;
        }
        else {
          uint64_t v8 = 2703;
        }
      }
      else
      {
        uint64_t v8 = 2702;
      }
    }
    else
    {
      uint64_t v8 = 2701;
    }
  }
  else
  {
    uint64_t v8 = 2700;
  }
  int v35 = 0;
  unsigned __int16 v34 = 0;
  unsigned __int8 v33 = 0;
  int v32 = 0;
  v30[0] = 0;
  v30[1] = 0;
  uint64_t v31 = 0;
  sub_10004191C(v30, "");
  uint64_t v9 = +[NSRegularExpression regularExpressionWithPattern:@"([a-z])([A-Z0-9])" options:0 error:0];
  __int16 v10 = [v9 stringByReplacingMatchesInString:v5 options:0 range:[v5 length] withTemplate:@"$1 $2"];
  if (!v8)
  {
    uint64_t v8 = sub_1006C8E90(a1, v10, 0, (uint64_t)&v35, &v34, &v32, &v33, (unsigned __int16 *)&v32 + 1, (uint64_t)v30);
    if (v8)
    {
      if (a1[43]) {
        uint64_t v8 = sub_1006C8E90(a1, v10, 1, (uint64_t)&v35, &v34, &v32, &v33, (unsigned __int16 *)&v32 + 1, (uint64_t)v30);
      }
    }
  }
  uint64_t v11 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 160))(v11))
  {
    if (a3)
    {
      if (v8 == 2700) {
        goto LABEL_37;
      }
      uint64_t v12 = qword_100A19E78;
      if (!os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      id v13 = [v5 UTF8String];
      int v14 = v35;
      sub_1006C9A20(v35);
      uint64_t v15 = sub_1006C8CE0(v8);
      if (v29 >= 0) {
        long long v16 = __p;
      }
      else {
        long long v16 = (void **)__p[0];
      }
      long long v17 = v30;
      if (v31 < 0) {
        long long v17 = (void **)v30[0];
      }
      *(_DWORD *)long long buf = 136317699;
      id v37 = v13;
      __int16 v38 = 2112;
      *(void *)char v39 = v10;
      *(_WORD *)&v39[8] = 1024;
      *(_DWORD *)&v39[10] = v8;
      __int16 v40 = 2080;
      *(void *)uint64_t v41 = v15;
      *(_WORD *)&v41[8] = 1024;
      *(_DWORD *)&v41[10] = v14;
      __int16 v42 = 2080;
      *(void *)uint64_t v43 = v16;
      *(_WORD *)&v43[8] = 1024;
      *(_DWORD *)int v44 = v34;
      *(_WORD *)&_OWORD v44[4] = 1024;
      *(_DWORD *)char v45 = (unsigned __int16)v32;
      *(_WORD *)&_OWORD v45[4] = 1024;
      *(_DWORD *)uint64_t v46 = v33;
      *(_WORD *)&v46[4] = 1024;
      *(_DWORD *)&v46[6] = HIWORD(v32);
      __int16 v47 = 2081;
      uint64_t v48 = v17;
      long long v18 = "statedump: isDeviceNameValidForDisplay deviceName:\"%s\" newDeviceName:\"%@\" result:%d(%s) flags:%d(%s) lex"
            "iconNonMatches:%d capitalizedCount:%d unwantedWord:%d tokenCount:%d outToken:%{private}s";
      uint64_t v19 = v12;
      uint32_t v20 = 88;
    }
    else
    {
      if (!v8) {
        goto LABEL_37;
      }
      if (v8 == 2700) {
        goto LABEL_37;
      }
      uint64_t v21 = qword_100A19E78;
      if (!os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_37;
      }
      id v22 = [v5 UTF8String];
      int v23 = v35;
      sub_1006C9A20(v35);
      __int16 v24 = sub_1006C8CE0(v8);
      if (v29 >= 0) {
        int v25 = __p;
      }
      else {
        int v25 = (void **)__p[0];
      }
      unsigned int v26 = v30;
      if (v31 < 0) {
        unsigned int v26 = (void **)v30[0];
      }
      *(_DWORD *)long long buf = 136317443;
      id v37 = v22;
      __int16 v38 = 1024;
      *(_DWORD *)char v39 = v8;
      *(_WORD *)&v39[4] = 2080;
      *(void *)&v39[6] = v24;
      __int16 v40 = 1024;
      *(_DWORD *)uint64_t v41 = v23;
      *(_WORD *)&v41[4] = 2080;
      *(void *)&v41[6] = v25;
      __int16 v42 = 1024;
      *(_DWORD *)uint64_t v43 = v34;
      *(_WORD *)&v43[4] = 1024;
      *(_DWORD *)&v43[6] = (unsigned __int16)v32;
      *(_WORD *)int v44 = 1024;
      *(_DWORD *)&v44[2] = v33;
      *(_WORD *)char v45 = 1024;
      *(_DWORD *)&void v45[2] = HIWORD(v32);
      *(_WORD *)uint64_t v46 = 2081;
      *(void *)&v46[2] = v26;
      long long v18 = "Warning: isDeviceNameValidForDisplay name:\"%s\" result:%d(%s) flags:%d(%s) lexiconNonMatches:%d capitalized"
            "Count:%d unwantedWord:%d tokenCount:%d outToken:%{private}s";
      uint64_t v19 = v21;
      uint32_t v20 = 78;
    }
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
    if (v29 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_37:

  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }

  return v8;
}

void sub_1006C99AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1006C9A20(int a1)
{
  uint64_t v16 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v5 = 0u;
  memset(v3, 0, sizeof(v3));
  sub_1000419CC((uint64_t)v3);
  sub_10003AB28((uint64_t)v3);
  if (a1) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 2) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 4) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 8) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x20) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x40) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x80) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x200000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x400000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x800000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x1000000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x2000000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x4000000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x8000000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x10000000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  if ((a1 & 0x20000000) != 0) {
    sub_10003AB28((uint64_t)v3);
  }
  sub_10003AB28((uint64_t)v3);
  std::stringbuf::str();
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006C9D18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__CFString *sub_1006C9D2C(uint64_t a1, unsigned int a2, int a3)
{
  id v3 = &stru_1009C1AC8;
  if (a2)
  {
    long long v6 = @"BT_GLOBAL_TCC_CENTER_LABEL_ONE_DEVICE";
    if (a3) {
      long long v6 = &stru_1009C1AC8;
    }
    long long v7 = v6;
    if (a2 <= 0x32)
    {
      if (a2 < 2)
      {
        long long v8 = @"%d device found";
LABEL_12:
        long long v11 = sub_100379650(v7, v8);
        if (a2 >= 0x32) {
          uint64_t v12 = 50;
        }
        else {
          uint64_t v12 = a2;
        }
        id v15 = 0;
        id v3 = +[NSString stringWithValidatedFormat:v11, @"%d", &v15, v12 validFormatSpecifiers error];
        id v13 = v15;

        goto LABEL_16;
      }
      long long v8 = @"%d devices found";
      long long v9 = @"BT_GLOBAL_TCC_CENTER_LABEL_MULTI_DEVICES";
    }
    else
    {
      long long v8 = @"More than %d devices found";
      long long v9 = @"BT_GLOBAL_TCC_CENTER_LABEL_MULTI_DEVICES_CAPPED";
    }
    if (a3) {
      long long v9 = &stru_1009C1AC8;
    }
    long long v10 = v9;

    long long v7 = v10;
    goto LABEL_12;
  }
LABEL_16:

  return v3;
}

void sub_1006C9E5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

double sub_1006C9E78(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v22 = v5;
  if ([v5 containsObject:v6])
  {
    *a3 = v6;
    double v7 = 1.5;
  }
  else
  {
    long long v26 = 0u;
    long long v27 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    id obj = v5;
    id v8 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
    if (v8)
    {
      uint64_t v9 = *(void *)v25;
      double v7 = 0.0;
      do
      {
        for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v25 != v9) {
            objc_enumerationMutation(obj);
          }
          long long v11 = *(void **)(*((void *)&v24 + 1) + 8 * i);
          for (unint64_t j = 1; ; ++j)
          {
            unsigned __int16 v13 = (unsigned __int16)[v11 length];
            unsigned __int16 v14 = (unsigned __int16)[v6 length];
            unint64_t v15 = v14 >= v13 ? v13 : v14;
            if (j >= v15) {
              break;
            }
            uint64_t v16 = [v11 substringWithRange:0, j];
            long long v17 = [v6 substringWithRange:0, j];
            unsigned __int8 v18 = [v16 isEqualToString:v17];

            if ((v18 & 1) == 0) {
              break;
            }
            id v19 = [v6 length];
            double v20 = (double)(unsigned __int16)j / (double)(unint64_t)v19
                + (double)(unsigned __int16)j / (double)(unint64_t)[v11 length];
            if (a3 && v20 > v7) {
              *a3 = v11;
            }
            if (v20 >= v7) {
              double v7 = v20;
            }
          }
        }
        id v8 = [obj countByEnumeratingWithState:&v24 objects:v28 count:16];
      }
      while (v8);
    }
    else
    {
      double v7 = 0.0;
    }
  }
  return v7;
}

void sub_1006CA0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1006CA10C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v23 = 0;
  __darwin_suseconds_t v22 = 0;
  sub_10010BB74(&v23, &v22);
  double Current = CFAbsoluteTimeGetCurrent();
  int v5 = *(_DWORD *)(a1 + 140);
  if (v5) {
    int v6 = v23 - v5;
  }
  else {
    int v6 = 0;
  }
  double v7 = Current - (double)v6;
  if (!v6) {
    double v7 = 0.0;
  }
  if (!*(unsigned char *)(a1 + 164)) {
    double Current = v7;
  }
  if (*(double *)(a1 + 400) >= Current) {
    double v8 = *(double *)(a1 + 400);
  }
  else {
    double v8 = Current;
  }
  uint64_t v9 = *(char **)(a1 + 584);
  long long v10 = *(char **)(a1 + 592);
  char v11 = -127;
  if (v9 != v10)
  {
    do
    {
      int v13 = *v9++;
      char v12 = v13;
      if (v11 <= v13) {
        char v11 = v12;
      }
    }
    while (v9 != v10);
    if (!v11) {
      char v11 = *(unsigned char *)(a1 + 476);
    }
  }
  if (*(char *)(a1 + 231) < 0)
  {
    if (*(void *)(a1 + 216)) {
      goto LABEL_19;
    }
  }
  else if (*(unsigned char *)(a1 + 231))
  {
LABEL_19:
    BOOL v14 = 1;
    goto LABEL_26;
  }
  sub_10004191C(__p, "HasTS");
  BOOL v14 = a1 + 184 != sub_10003156C(a1 + 176, (const void **)__p) || *(unsigned char *)(a1 + 608) || *(void *)(a1 + 64) != 0;
  if (v21 < 0) {
    operator delete(__p[0]);
  }
LABEL_26:
  if (*(char *)(a1 + 127) < 0)
  {
    sub_10003B098(v18, *(void **)(a1 + 104), *(void *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)unsigned __int8 v18 = *(_OWORD *)(a1 + 104);
    uint64_t v19 = *(void *)(a1 + 120);
  }
  int v15 = *(_DWORD *)(a1 + 128);
  *(double *)a2 = v8;
  uint64_t v16 = (unsigned char *)(a2 + 8);
  if (SHIBYTE(v19) < 0)
  {
    sub_10003B098(v16, v18[0], (unint64_t)v18[1]);
    int v17 = SHIBYTE(v19);
    *(unsigned char *)(a2 + 32) = v11;
    *(_DWORD *)(a2 + 36) = v15;
    *(unsigned char *)(a2 + 40) = v14;
    if (v17 < 0) {
      operator delete(v18[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)v18;
    *(void *)(a2 + 24) = v19;
    *(unsigned char *)(a2 + 32) = v11;
    *(_DWORD *)(a2 + 36) = v15;
    *(unsigned char *)(a2 + 40) = v14;
  }
}

void sub_1006CA2D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

id sub_1006CA304(uint64_t a1, uint64_t a2, unsigned int a3)
{
  id v157 = (id)objc_opt_new();
  if (_os_feature_enabled_impl())
  {
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v159 = objc_opt_new();
    uint64_t v4 = 0;
    v162[0] = 0;
    v162[1] = 0;
    uint64_t v161 = (uint64_t *)v162;
    long long v5 = 0uLL;
    long long v212 = 0u;
    memset(v213, 0, sizeof(v213));
    do
    {
      *(void *)&long long v6 = &v213[v4 - 1];
      *((void *)&v6 + 1) = (char *)&v213[v4] + 8;
      long long v7 = v6;
      vst3q_f64((double *)v6, *(float64x2x3_t *)(&v5 - 2));
      v4 += 3;
    }
    while (v4 != 6);
    v153 = objc_opt_new();
    for (int i = 2700; i != 2709; ++i)
    {
      *(_DWORD *)long long buf = i;
      __p[0] = buf;
      *((_WORD *)sub_1002CBDEC(&v161, (int *)buf, (uint64_t)&unk_1007BE9D0, (_DWORD **)__p) + 16) = 0;
    }
    uint64_t v9 = *(void *)(a2 + 8);
    if (v9 != a2)
    {
      uint64_t v152 = 0;
      double v10 = 0.0;
      double v11 = 0.0;
      while (1)
      {
        if (*(char *)(v9 + 47) < 0)
        {
          sub_10003B098(__p, *(void **)(v9 + 24), *(void *)(v9 + 32));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v9 + 24);
          __p[2] = *(void **)(v9 + 40);
        }
        if (SHIBYTE(__p[2]) >= 0) {
          char v12 = __p;
        }
        else {
          char v12 = (void **)__p[0];
        }
        int v13 = +[NSString stringWithUTF8String:v12];
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        LODWORD(v200[0]) = 0;
        LODWORD(v200[0]) = sub_1006C94FC((void *)a1, v13, 1);
        __p[0] = v200;
        BOOL v14 = sub_1002CBDEC(&v161, (int *)v200, (uint64_t)&unk_1007BE9D0, (_DWORD **)__p);
        ++*((_WORD *)v14 + 16);
        if (LODWORD(v200[0]) != 2700)
        {
          int v15 = HIDWORD(v152);
          if (*(_DWORD *)(v9 + 52) == 1) {
            int v15 = HIDWORD(v152) + 1;
          }
          HIDWORD(v152) = v15;
        }
        double v16 = *(double *)(v9 + 16);
        if (v16 > 0.0)
        {
          double v17 = Current - v16;
          BOOL v18 = v11 < v17 || v11 == 0.0;
          if (v18) {
            double v11 = v17;
          }
          if (v10 == 0.0)
          {
            double v10 = v17;
          }
          else if (v17 < v10)
          {
            double v10 = v17;
          }
        }
        if ((LODWORD(v200[0]) - 2707) >= 2 && LODWORD(v200[0])) {
          goto LABEL_49;
        }
        id v160 = 0;
        double v19 = sub_1006C9E78(v153, v13, &v160);
        id v20 = v160;
        float v21 = v19;
        if (v21 >= 1.5)
        {
          int v23 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
          {
            sub_1006CC024(v9 + 16);
            long long v24 = buf;
            if ((buf[23] & 0x80u) != 0) {
              long long v24 = *(uint8_t **)buf;
            }
            LODWORD(__p[0]) = 136381443;
            *(void **)((char *)__p + 4) = v24;
            WORD2(__p[1]) = 2048;
            *(double *)((char *)&__p[1] + 6) = v21;
            HIWORD(__p[2]) = 2048;
            __p[3] = (void *)0x3FF8000000000000;
            LOWORD(v184) = 2113;
            *(void *)((char *)&v184 + 2) = v20;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "_retrieveRecentDevicesInfo nameSimilarToReportedName %{private}s similarity %f > %f already reported as %{private}@", (uint8_t *)__p, 0x2Au);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
          }
          LOWORD(v152) = v152 + 1;
          goto LABEL_48;
        }
        [v153 addObject:v13];
        if (*(unsigned char *)(v9 + 56))
        {
          unsigned int v22 = 0;
        }
        else
        {
          int v25 = v200[0];
          if (LODWORD(v200[0]))
          {
            if (LODWORD(v200[0]) == 2707)
            {
              unsigned int v22 = 3;
            }
            else
            {
              if (LODWORD(v200[0]) != 2708)
              {
                char v29 = qword_100A19E78;
                if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
                {
                  LODWORD(__p[0]) = 67109120;
                  HIDWORD(__p[0]) = v25;
                  _os_log_fault_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_FAULT, "_retrieveRecentDevicesInfo invalid code path sanityCheckResult:%d", (uint8_t *)__p, 8u);
                }
                goto LABEL_48;
              }
              unsigned int v22 = 2;
            }
          }
          else
          {
            unsigned int v22 = 1;
          }
        }
        long long v26 = (char **)&v213[-1] + 3 * v22;
        long long v27 = sub_1006D0BCC((uint64_t)v26, 0, 0, v9 + 16);
        *((void *)v27 + 1) = v26;
        uint64_t v28 = *v26;
        *(void *)long long v27 = *v26;
        *((void *)v28 + 1) = v27;
        *long long v26 = v27;
        ++v26[2];
LABEL_48:

LABEL_49:
        uint64_t v9 = *(void *)(v9 + 8);
        if (v9 == a2) {
          goto LABEL_55;
        }
      }
    }
    uint64_t v152 = 0;
    double v11 = 0.0;
    double v10 = 0.0;
LABEL_55:
    uint64_t v30 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 160))(v30))
    {
      for (uint64_t j = 0; j != 4; ++j)
      {
        int v32 = (char *)&v213[-1] + 24 * j;
        for (uint64_t k = *((void *)v32 + 1); (char *)k != v32; uint64_t k = *(void *)(k + 8))
        {
          unsigned __int16 v34 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
          {
            int v35 = "Unknown";
            if (j <= 4u) {
              int v35 = off_1009BED48[(char)j];
            }
            sub_1006CC024(k + 16);
            uint64_t v36 = __p;
            if (SHIBYTE(__p[2]) < 0) {
              uint64_t v36 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v35;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&unsigned char buf[14] = v36;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "_retrieveRecentDevicesInfo deviceBucket[%s]:%s", buf, 0x16u);
            if (SHIBYTE(__p[2]) < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
    }
    unsigned int v37 = 0;
    uint64_t v38 = 0;
    int v39 = 0;
    uint64_t v211 = 0;
    uint64_t v210 = 0;
    v200[0] = 0x200000000;
    long long v202 = 0u;
    long long v203 = 0u;
    long long v204 = 0u;
    *(double *)&v200[1] = Current;
    *(double *)&v200[2] = Current + -1800.0;
    uint64_t v201 = 1;
    __int16 v40 = (unsigned __int8 *)(a1 + 374);
    WORD2(v201) = *(unsigned __int8 *)(a1 + 374);
    *(double *)&long long v202 = Current;
    *((double *)&v202 + 1) = Current + -1800.0;
    LODWORD(v203) = 2;
    WORD2(v203) = WORD2(v201);
    *((double *)&v203 + 1) = Current;
    *(double *)&long long v204 = Current + -1800.0;
    DWORD2(v204) = 3;
    WORD6(v204) = WORD2(v201);
    double v205 = Current;
    double v206 = Current + -1800.0;
    uint64_t v208 = 0;
    uint64_t v207 = 4;
    uint64_t v209 = 0;
    do
    {
      uint64_t v41 = (char *)&v213[-1] + 24 * v37;
      uint64_t v42 = *((void *)v41 + 1);
      if ((char *)v42 != v41)
      {
        unsigned int v158 = WORD2(v200[3 * v38]);
        uint64_t v43 = v37;
        int v44 = &v200[3 * v38];
        char v45 = (double *)(v44 + 2);
        uint64_t v46 = (double *)(v44 + 1);
        uint64_t v156 = (int)v37;
        do
        {
          double v47 = *(double *)(v42 + 16);
          if (v47 > 0.0)
          {
            double v48 = *v45;
            if (*v45 != 0.0 && v47 <= *v46 && v47 >= v48 && *v46 != 0.0)
            {
              ++*((_WORD *)&v210 + v43);
              if (*v40 > (unsigned __int16)objc_msgSend(v157, "count", v48))
              {
                unsigned int v50 = *((unsigned __int16 *)&v211 + v43);
                if (v50 < v158)
                {
                  *((_WORD *)&v211 + v43) = v50 + 1;
                  uint64_t v51 = objc_opt_new();
                  if (*(char *)(v42 + 47) < 0)
                  {
                    sub_10003B098(__p, *(void **)(v42 + 24), *(void *)(v42 + 32));
                  }
                  else
                  {
                    *(_OWORD *)std::string __p = *(_OWORD *)(v42 + 24);
                    __p[2] = *(void **)(v42 + 40);
                  }
                  if (SHIBYTE(__p[2]) >= 0) {
                    uint64_t v52 = __p;
                  }
                  else {
                    uint64_t v52 = (void **)__p[0];
                  }
                  uint64_t v53 = +[NSString stringWithUTF8String:v52];
                  [v51 setObject:v53 forKeyedSubscript:@"mapLabelCalloutTitleKey"];

                  if (SHIBYTE(__p[2]) < 0) {
                    operator delete(__p[0]);
                  }
                  unsigned int v54 = *(unsigned __int8 *)(v42 + 48);
                  if ((v54 + 127) > 0x93u)
                  {
                    uint64_t v55 = 25;
                  }
                  else if ((char)v54 <= -65)
                  {
                    if (v54 <= 0xB4) {
                      uint64_t v55 = 25;
                    }
                    else {
                      uint64_t v55 = 50;
                    }
                  }
                  else
                  {
                    uint64_t v55 = 100;
                  }
                  long long v56 = +[NSString stringWithFormat:@"%d", v55];
                  [v51 setObject:v56 forKeyedSubscript:@"mapLabelCalloutPercentageValue"];

                  uint64_t v57 = +[NSString stringWithFormat:@"%d", *(char *)(v42 + 48)];
                  [v51 setObject:v57 forKeyedSubscript:@"rssiValue"];

                  int v58 = "Unknown";
                  if (v43 < 5) {
                    int v58 = off_1009BED48[v156];
                  }
                  __int16 v59 = +[NSString stringWithUTF8String:v58];
                  [v51 setObject:v59 forKeyedSubscript:@"bucketName"];

                  if (v47 > 0.0)
                  {
                    __int16 v60 = +[NSString stringWithFormat:@"%f", (Current - v47) / 60.0];
                    [v51 setObject:v60 forKeyedSubscript:@"seenMinutesAgo"];
                  }
                  [v157 addObject:v51];
                }
              }
            }
          }
          uint64_t v42 = *(void *)(v42 + 8);
        }
        while ((char *)v42 != v41);
      }
      uint64_t v38 = ++v39;
      unsigned int v37 = v200[3 * v39];
    }
    while (v37 != 4);
    if ((unint64_t)[v157 count] > *v40)
    {
      uint64_t v61 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT)) {
        sub_100793A34((unsigned __int16)[v157 count], v40, v199, v61);
      }
    }
    [v159 setObject:&off_1009E11C0 forKeyedSubscript:@"DeviceAgeThresholdMinutes"];
    __int16 v62 = &xpc_activity_set_state_ptr;
    uint64_t v63 = +[NSNumber numberWithInt:a3];
    [v159 setObject:v63 forKeyedSubscript:@"MetricSourceTrigger"];

    __int16 v64 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:", [v157 count]);
    [v159 setObject:v64 forKeyedSubscript:@"TotalReported"];

    int v65 = +[NSNumber numberWithUnsignedLong:*(void *)(a2 + 16)];
    [v159 setObject:v65 forKeyedSubscript:@"DiscoveredDevices"];

    int v66 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 152)];
    [v159 setObject:v66 forKeyedSubscript:@"DBSize"];

    long long v67 = +[NSNumber numberWithUnsignedShort:(unsigned __int16)v211];
    [v159 setObject:v67 forKeyedSubscript:@"ReportedMyAppleDevicesCount"];

    long long v68 = +[NSNumber numberWithUnsignedShort:WORD1(v211)];
    [v159 setObject:v68 forKeyedSubscript:@"ReportedOtherSanitizedLexicalCount"];

    long long v69 = +[NSNumber numberWithUnsignedShort:WORD2(v211)];
    [v159 setObject:v69 forKeyedSubscript:@"ReportedOtherSanitizedCapitalizedCount"];

    long long v70 = +[NSNumber numberWithUnsignedShort:HIWORD(v211)];
    [v159 setObject:v70 forKeyedSubscript:@"ReportedOtherSanitizedCount"];

    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BEC40);
    }
    long long v71 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)off_1009F8150 + 126)];
    [v159 setObject:v71 forKeyedSubscript:@"ActiveScansCount"];

    long long v72 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 368)];
    [v159 setObject:v72 forKeyedSubscript:@"ActiveScansForNameSearchCount"];

    int v73 = +[NSNumber numberWithUnsignedShort:0];
    [v159 setObject:v73 forKeyedSubscript:@"ScanRSPNamesCount"];

    uint64_t v74 = +[NSNumber numberWithUnsignedShort:WORD2(v152)];
    [v159 setObject:v74 forKeyedSubscript:@"ADVNameCount"];

    uint64_t v75 = +[NSNumber numberWithDouble:v11];
    [v159 setObject:v75 forKeyedSubscript:@"OldestDeviceAgeSeconds"];

    uint64_t v76 = +[NSNumber numberWithDouble:v10];
    [v159 setObject:v76 forKeyedSubscript:@"NewestDeviceAgeSeconds"];

    int v77 = +[NSNumber numberWithUnsignedShort:(unsigned __int16)v152];
    [v159 setObject:v77 forKeyedSubscript:@"DupNameDropCount"];

    long long v78 = +[NSNumber numberWithUnsignedLong:*(void *)(a1 + 272)];
    [v159 setObject:v78 forKeyedSubscript:@"CachedEvictedCount"];

    [v159 setObject:&off_1009E11D8 forKeyedSubscript:@"CachedEvictedMaxCount"];
    uint64_t v198 = 0;
    long long v196 = 0u;
    long long v197 = 0u;
    long long v194 = 0u;
    long long v195 = 0u;
    long long v192 = 0u;
    long long v193 = 0u;
    long long v190 = 0u;
    long long v191 = 0u;
    long long v188 = 0u;
    long long v189 = 0u;
    *(_OWORD *)v186 = 0u;
    long long v187 = 0u;
    long long v184 = 0u;
    long long v185 = 0u;
    memset(__p, 0, sizeof(__p));
    sub_1000419CC((uint64_t)__p);
    uint64_t v79 = 15;
    CFStringRef v80 = @"Bucket%dMin%s";
    do
    {
      for (uint64_t m = 0; m != 4; ++m)
      {
        id v82 = "Unknown";
        if (m <= 4u) {
          id v82 = off_1009BED48[(char)m];
        }
        uint64_t v83 = +[NSString stringWithFormat:](NSString, "stringWithFormat:", v80, v79, v82);
        uint64_t v84 = (char *)&v213[-1] + 24 * m;
        uint64_t v85 = *((void *)v84 + 1);
        if ((char *)v85 == v84)
        {
          unsigned __int16 v86 = 0;
        }
        else
        {
          unsigned __int16 v86 = 0;
          do
          {
            double v87 = *(double *)(v85 + 16);
            __int16 v88 = v87 >= 0.0;
            if (Current < v87) {
              __int16 v88 = 0;
            }
            if (Current - v87 > (double)(60 * (int)v79)) {
              __int16 v88 = 0;
            }
            v86 += v88;
            uint64_t v85 = *(void *)(v85 + 8);
          }
          while ((char *)v85 != v84);
        }
        os_unfair_lock_s v89 = [v62[258] numberWithUnsignedShort:v86];
        [v159 setObject:v89 forKeyedSubscript:v83];

        uint64_t v90 = sub_100017768();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v90 + 160))(v90))
        {
          uint64_t v91 = std::ostream::operator<<();
          uint64_t v92 = sub_10003AB28(v91);
          CFStringRef v93 = v80;
          char v94 = v62;
          int v95 = "Unknown";
          if (m <= 4u) {
            int v95 = off_1009BED48[(char)m];
          }
          strlen(v95);
          uint64_t v96 = sub_10003AB28(v92);
          __int16 v62 = v94;
          CFStringRef v80 = v93;
          sub_10003AB28(v96);
          uint64_t v97 = std::ostream::operator<<();
          sub_10003AB28(v97);
        }
      }
      BOOL v98 = v79 >= 0x2E;
      uint64_t v79 = (v79 + 15);
    }
    while (!v98);
    id v99 = v161;
    if (v161 != (uint64_t *)v162)
    {
      do
      {
        uint64_t v100 = *(uint64_t *)((char *)v99 + 28);
        uint64_t v101 = +[NSString stringWithFormat:@"NameError%s", sub_1006C8DB8(v100)];
        long long v102 = [v62[258] numberWithUnsignedShort:WORD2(v100)];
        [v159 setObject:v102 forKeyedSubscript:v101];

        uint64_t v103 = (uint64_t *)v99[1];
        if (v103)
        {
          do
          {
            long long v104 = v103;
            uint64_t v103 = (uint64_t *)*v103;
          }
          while (v103);
        }
        else
        {
          do
          {
            long long v104 = (uint64_t *)v99[2];
            BOOL v18 = *v104 == (void)v99;
            id v99 = v104;
          }
          while (!v18);
        }
        id v99 = v104;
      }
      while (v104 != (uint64_t *)v162);
    }
    uint64_t v105 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v105 + 160))(v105))
    {
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BEC40);
      }
      uint64_t v182 = 0;
      long long v180 = 0u;
      long long v181 = 0u;
      long long v178 = 0u;
      long long v179 = 0u;
      long long v176 = 0u;
      long long v177 = 0u;
      long long v174 = 0u;
      long long v175 = 0u;
      long long v172 = 0u;
      long long v173 = 0u;
      *(_OWORD *)uint64_t v170 = 0u;
      long long v171 = 0u;
      long long v168 = 0u;
      long long v169 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_1000419CC((uint64_t)buf);
      [v157 count];
      [v157 count];
      uint64_t v106 = std::ostream::operator<<();
      sub_10003AB28(v106);
      uint64_t v107 = std::ostream::operator<<();
      long long v108 = (uint64_t *)sub_10003AB28(v107);
      uint64_t v109 = *v108;
      *(uint64_t *)((char *)v108 + *(void *)(*v108 - 24) + 24) = 5;
      *(uint64_t *)((char *)v108 + *(void *)(v109 - 24) + 16) = 3;
      uint64_t v110 = std::ostream::operator<<();
      sub_10003AB28(v110);
      uint64_t v111 = std::ostream::operator<<();
      sub_10003AB28(v111);
      uint64_t v112 = std::ostream::operator<<();
      int v113 = (uint64_t *)sub_10003AB28(v112);
      uint64_t v114 = *v113;
      *(uint64_t *)((char *)v113 + *(void *)(*v113 - 24) + 24) = 5;
      *(uint64_t *)((char *)v113 + *(void *)(v114 - 24) + 16) = 3;
      uint64_t v115 = std::ostream::operator<<();
      sub_10003AB28(v115);
      uint64_t v116 = 0;
      long long v117 = v213;
      do
      {
        uint64_t v118 = sub_10003AB28((uint64_t)buf);
        uint64_t v119 = "Unknown";
        if (v116 <= 4u) {
          uint64_t v119 = off_1009BED48[v116];
        }
        strlen(v119);
        uint64_t v120 = sub_10003AB28(v118);
        sub_10003AB28(v120);
        uint64_t v121 = std::ostream::operator<<();
        sub_10003AB28(v121);
        uint64_t v122 = std::ostream::operator<<();
        sub_10003AB28(v122);
        std::ostream::operator<<();
        ++v116;
        long long v117 = (_OWORD *)((char *)v117 + 24);
      }
      while (v116 != 4);
      sub_10003AB28((uint64_t)buf);
      sub_10003AB28((uint64_t)buf);
      std::ostream::operator<<();
      sub_10003AB28((uint64_t)buf);
      sub_10003AB28((uint64_t)buf);
      std::ostream::operator<<();
      sub_10003AB28((uint64_t)buf);
      std::ostream::operator<<();
      sub_10003AB28((uint64_t)buf);
      uint64_t v123 = std::ostream::operator<<();
      sub_10003AB28(v123);
      std::ostream::operator<<();
      sub_10003AB28((uint64_t)buf);
      uint64_t v124 = std::ostream::operator<<();
      sub_10003AB28(v124);
      std::ostream::operator<<();
      sub_10003AB28((uint64_t)buf);
      uint64_t v125 = std::ostream::operator<<();
      sub_10003AB28(v125);
      uint64_t v126 = std::ostream::operator<<();
      char v127 = (uint64_t *)sub_10003AB28(v126);
      uint64_t v128 = *v127;
      *(uint64_t *)((char *)v127 + *(void *)(*v127 - 24) + 24) = 5;
      *(uint64_t *)((char *)v127 + *(void *)(v128 - 24) + 16) = 3;
      uint64_t v129 = std::ostream::operator<<();
      sub_10003AB28(v129);
      sub_10003AB28((uint64_t)buf);
      uint64_t v130 = std::ostream::operator<<();
      sub_10003AB28(v130);
      uint64_t v131 = std::ostream::operator<<();
      id v132 = (uint64_t *)sub_10003AB28(v131);
      uint64_t v133 = *v132;
      *(uint64_t *)((char *)v132 + *(void *)(*v132 - 24) + 24) = 5;
      *(uint64_t *)((char *)v132 + *(void *)(v133 - 24) + 16) = 3;
      uint64_t v134 = std::ostream::operator<<();
      sub_10003AB28(v134);
      sub_10003AB28((uint64_t)buf);
      id v135 = v161;
      if (v161 != (uint64_t *)v162)
      {
        do
        {
          id v136 = sub_1006C8CE0(*((_DWORD *)v135 + 7));
          strlen(v136);
          uint64_t v137 = sub_10003AB28((uint64_t)buf);
          sub_10003AB28(v137);
          uint64_t v138 = std::ostream::operator<<();
          v139 = (uint64_t *)sub_10003AB28(v138);
          uint64_t v140 = *v139;
          *(uint64_t *)((char *)v139 + *(void *)(*v139 - 24) + 24) = 5;
          *(uint64_t *)((char *)v139 + *(void *)(v140 - 24) + 16) = 3;
          uint64_t v141 = std::ostream::operator<<();
          sub_10003AB28(v141);
          id v142 = (uint64_t *)v135[1];
          if (v142)
          {
            do
            {
              id v143 = v142;
              id v142 = (uint64_t *)*v142;
            }
            while (v142);
          }
          else
          {
            do
            {
              id v143 = (uint64_t *)v135[2];
              BOOL v18 = *v143 == (void)v135;
              id v135 = v143;
            }
            while (!v18);
          }
          id v135 = v143;
        }
        while (v143 != (uint64_t *)v162);
      }
      uint64_t v144 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        if (v164 >= 0) {
          int v145 = v163;
        }
        else {
          int v145 = *(unsigned char **)v163;
        }
        *(_DWORD *)uint64_t v165 = 136315138;
        unsigned int v166 = v145;
        _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "statedump: _retrieveRecentDevicesInfo stats reported: %s", v165, 0xCu);
        if (v164 < 0) {
          operator delete(*(void **)v163);
        }
        uint64_t v144 = qword_100A19E78;
      }
      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        if (v164 >= 0) {
          int v146 = v163;
        }
        else {
          int v146 = *(unsigned char **)v163;
        }
        *(_DWORD *)uint64_t v165 = 136315138;
        unsigned int v166 = v146;
        _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "statedump: _retrieveRecentDevicesInfo time buckets: %s", v165, 0xCu);
        if (v164 < 0) {
          operator delete(*(void **)v163);
        }
        uint64_t v144 = qword_100A19E78;
      }
      if (os_log_type_enabled(v144, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)id v163 = 138477827;
        *(void *)&v163[4] = v157;
        _os_log_impl((void *)&_mh_execute_header, v144, OS_LOG_TYPE_DEFAULT, "statedump: _retrieveRecentDevicesInfo return dict: %{private}@", v163, 0xCu);
      }
      if (SHIBYTE(v171) < 0) {
        operator delete(v170[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
    }
    uint64_t v147 = sub_100050530();
    (*(void (**)(uint64_t, void *))(*(void *)v147 + 688))(v147, v159);
    if (SHIBYTE(v187) < 0) {
      operator delete(v186[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();

    for (uint64_t n = 72; n != -24; n -= 24)
      sub_1006CF4C4((void **)((char *)&v213[-1] + n));
    sub_1000486F0((uint64_t)&v161, v162[0]);
  }
  id v149 = v157;

  return v149;
}

void sub_1006CBDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_10027E318((uint64_t)&a35);
  sub_10027E318((uint64_t)&__p);

  for (uint64_t i = 72; i != -24; i -= 24)
    sub_1006CF4C4((void **)(v69 - 256 + i));
  sub_1000486F0((uint64_t)&a26, (void *)a27);

  _Unwind_Resume(a1);
}

uint64_t sub_1006CC024(uint64_t a1)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  memset(v7, 0, sizeof(v7));
  sub_1000419CC((uint64_t)v7);
  sub_10003AB28((uint64_t)v7);
  id v2 = v7;
  switch(*(_DWORD *)(a1 + 36))
  {
    case 1:
      id v2 = v7;
      break;
    case 2:
      break;
    case 3:
      id v2 = v7;
      break;
    case 4:
      id v2 = v7;
      break;
    default:
      id v2 = (_OWORD *)sub_10003AB28((uint64_t)v7);
      break;
  }
  sub_10003AB28((uint64_t)v2);
  uint64_t v3 = sub_10003AB28((uint64_t)v7);
  sub_10003AB28(v3);
  std::ostream::operator<<();
  uint64_t v4 = sub_10003AB28((uint64_t)v7);
  sub_10003AB28(v4);
  sub_10003AB28((uint64_t)v7);
  if (*(double *)a1 <= 0.0)
  {
    sub_10003AB28((uint64_t)v7);
  }
  else
  {
    CFAbsoluteTimeGetCurrent();
    uint64_t v5 = std::ostream::operator<<();
    sub_10003AB28(v5);
  }
  std::stringbuf::str();
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006CC368(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_1006CC390(void *a1, unsigned int a2)
{
  uint64_t v4 = objc_opt_new();
  if (_os_feature_enabled_impl())
  {
    v26[0] = 0;
    v26[1] = 0;
    sub_10003AED0((uint64_t)v26, (uint64_t)(a1 + 11));
    v24[0] = v24;
    v24[1] = v24;
    uint64_t v25 = 0;
    for (uint64_t i = a1[26]; (void *)i != a1 + 25; uint64_t i = *(void *)(i + 8))
    {
      long long v6 = (void *)a1[21];
      long long v7 = sub_100031234((const unsigned __int8 *)(i + 16));
      id v8 = [v6 objectForKey:v7];

      sub_1006CA10C((uint64_t)v8, (uint64_t)&v19);
      long long v9 = (char *)operator new(0x40uLL);
      *((void *)v9 + 2) = v19;
      *(_OWORD *)(v9 + 24) = __p;
      uint64_t v10 = v21;
      long long __p = 0uLL;
      uint64_t v21 = 0;
      uint64_t v11 = v22;
      *((void *)v9 + 5) = v10;
      *((void *)v9 + 6) = v11;
      v9[56] = v23;
      long long v12 = v24[0];
      *(void **)long long v9 = v24[0];
      *((void *)v9 + 1) = v24;
      v12[1] = v9;
      v24[0] = v9;
      ++v25;
      if (SHIBYTE(v21) < 0) {
        operator delete((void *)__p);
      }
    }
    for (uint64_t j = (void *)a1[33]; j != a1 + 32; uint64_t j = (void *)j[1])
    {
      long long v14 = sub_1006D0BCC((uint64_t)v24, 0, 0, (uint64_t)(j + 2));
      long long v15 = v24[0];
      *(void **)long long v14 = v24[0];
      *((void *)v14 + 1) = v24;
      v15[1] = v14;
      v24[0] = v14;
      ++v25;
    }
    sub_1006D0C68((char **)v18, (uint64_t)v24);
    uint64_t v16 = sub_1006CA304((uint64_t)a1, (uint64_t)v18, a2);

    sub_1006CF4C4(v18);
    sub_1006CF4C4(v24);
    sub_10003AFB4((uint64_t)v26);
    uint64_t v4 = (void *)v16;
  }

  return v4;
}

void sub_1006CC584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_1006CF4C4((void **)&a9);
  sub_1006CF4C4(&a21);
  sub_10003AFB4((uint64_t)&a24);

  _Unwind_Resume(a1);
}

void sub_1006CC5F0(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a1 + 352) == a2)
  {
    uint64_t v9 = sub_100019878();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1006CC694;
    v10[3] = &unk_1009AA618;
    int v11 = a3;
    void v10[4] = a1;
    v10[5] = a4;
    void v10[6] = a5;
    sub_100013018(v9, v10);
  }
}

void sub_1006CC694(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unsigned __int16 v3 = 60 * arc4random_uniform(0xCu) + 720;
  *(_WORD *)(v2 + 372) = v3;
  uint64_t v4 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = *(void *)(a1 + 48);
    v11[0] = 67109888;
    v11[1] = v5;
    __int16 v12 = 2048;
    uint64_t v13 = v6;
    __int16 v14 = 2048;
    uint64_t v15 = v7;
    __int16 v16 = 1024;
    unsigned int v17 = v3 / 0x3Cu;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[BTGlobalTCCNames] LeDeviceManager::leScanComplete result:%d totalRXTimeMS:%llu BtMCRxTimeMS%llu nextScan in %d hours", (uint8_t *)v11, 0x22u);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BEBE0);
  }
  uint64_t v8 = qword_1009F8160;
  unint64_t v9 = sub_100019D1C(*(void *)(v2 + 352));
  int v10 = sub_10000A678(v8, v9);
  *(void *)(v2 + 352) = 0;
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100793A94();
    }
  }
}

void sub_1006CC810(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
}

uint64_t sub_1006CC818(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BEC40);
  }
  double v2 = *((double *)off_1009F8150 + 62);
  if (v2 == 0.0) {
    int v3 = 9999;
  }
  else {
    int v3 = (int)((CFAbsoluteTimeGetCurrent() - v2) / 60.0);
  }
  uint64_t v4 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(unsigned __int8 *)(a1 + 375);
    int v6 = *(unsigned __int8 *)(a1 + 321);
    int v7 = *(unsigned __int8 *)(a1 + 376);
    int v8 = *(unsigned __int8 *)(a1 + 377);
    int v9 = *(_DWORD *)(a1 + 368);
    v11[0] = 67110400;
    v11[1] = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    int v19 = v9;
    __int16 v20 = 1024;
    int v21 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "[BTGlobalTCCNames] LeDeviceManager::checkForBTTCCNamesCache fScreenState:%d fStackStarted:%d fDeviceFirstUnlocked:%d fDeviceLocked:%d fNameSearchActiveScanCounter:%d LastActiveScanTime:%d minutes ago", (uint8_t *)v11, 0x26u);
  }
  return 0;
}

uint64_t sub_1006CC96C(uint64_t a1)
{
  double v2 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[BTGlobalTCCNames] LeDeviceManager::startNameScan", (uint8_t *)__p, 2u);
  }
  if (*(void *)(a1 + 352))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100793B80();
    }
    return 12;
  }
  unint64_t v10 = 0;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BEBE0);
  }
  uint64_t v3 = qword_1009F8160;
  sub_10004191C(__p, (char *)[*(id *)(a1 + 360) UTF8String]);
  int v4 = sub_100009254(v3, (uint64_t)__p);
  int v5 = v4;
  if (v9 < 0)
  {
    operator delete(__p[0]);
    if (v5)
    {
LABEL_10:
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
        sub_100793B4C();
      }
      return 12;
    }
  }
  else if (v4)
  {
    goto LABEL_10;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BEBE0);
  }
  uint64_t v7 = sub_100019C0C((void *)qword_1009F8160, v10);
  *(void *)(a1 + 352) = v7;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100793B18();
    }
    return 12;
  }
  if (*(unsigned char *)(a1 + 321)) {
    operator new();
  }
  return 0;
}

void sub_1006CCBC0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t sub_1006CCBFC(uint64_t a1)
{
  double v2 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "[BTGlobalTCCNames] LeDeviceManager::stopNameScan", v7, 2u);
  }
  if (*(void *)(a1 + 352))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100793B80();
    }
    return 12;
  }
  else
  {
    if (*(unsigned char *)(a1 + 321))
    {
      if (qword_1009F85C8 != -1) {
        dispatch_once(&qword_1009F85C8, &stru_1009BEC60);
      }
      if (sub_1006E1A9C((uint64_t)off_1009F85C0, *(void *)(a1 + 352), 1, 1, 0)
        && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
      {
        sub_100793C50();
      }
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009BEBE0);
    }
    uint64_t v4 = qword_1009F8160;
    unint64_t v5 = sub_100019D1C(*(void *)(a1 + 352));
    uint64_t v3 = sub_10000A678(v4, v5);
    if (v3 && os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
      sub_100793BE8();
    }
    *(void *)(a1 + 352) = 0;
  }
  return v3;
}

void sub_1006CCD9C(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[608] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1006CCE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_1006CCE28(uint64_t a1, void *a2)
{
  id v3 = a2;
  v168[0] = 0;
  v168[1] = 0;
  sub_10003AED0((uint64_t)v168, a1 + 88);
  id v4 = sub_100030398(a1, v3);
  long long v263 = 0u;
  long long v264 = 0u;
  memset(v262, 0, sizeof(v262));
  long long v260 = 0u;
  memset(v261, 0, sizeof(v261));
  long long v258 = 0u;
  long long v259 = 0u;
  long long v256 = 0u;
  memset(v257, 0, sizeof(v257));
  long long v254 = 0u;
  long long v255 = 0u;
  long long data = 0u;
  long long v253 = 0u;
  *(_DWORD *)&__dst[3] = 0;
  *(_DWORD *)long long __dst = 0;
  long long __p = 0;
  uint64_t v165 = 0;
  unsigned int v166 = 0;
  long long v250 = xmmword_1007BA730;
  int v251 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v250);
  id v5 = (char *)sub_10003767C((uint64_t)&v166, 1uLL);
  uint64_t v7 = &v5[20 * v6];
  long long v8 = *(_OWORD *)buf;
  *((_DWORD *)v5 + 4) = *(_DWORD *)&buf[16];
  *(_OWORD *)id v5 = v8;
  char v9 = v5 + 20;
  int v11 = (char *)__p;
  unint64_t v10 = v165;
  if (v165 != __p)
  {
    do
    {
      long long v12 = *(_OWORD *)(v10 - 20);
      *((_DWORD *)v5 - 1) = *((_DWORD *)v10 - 1);
      *(_OWORD *)(v5 - 20) = v12;
      v5 -= 20;
      v10 -= 20;
    }
    while (v10 != v11);
    unint64_t v10 = (char *)__p;
  }
  long long __p = v5;
  uint64_t v165 = v9;
  unsigned int v166 = v7;
  if (v10) {
    operator delete(v10);
  }
  uint64_t v165 = v9;
  uint64_t v161 = 0;
  v162 = 0;
  id v163 = 0;
  long long v248 = xmmword_1007BA744;
  int v249 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v248);
  int v13 = (char *)sub_10003767C((uint64_t)&v163, 1uLL);
  int v15 = &v13[20 * v14];
  long long v16 = *(_OWORD *)buf;
  *((_DWORD *)v13 + 4) = *(_DWORD *)&buf[16];
  *(_OWORD *)int v13 = v16;
  int v17 = v13 + 20;
  int v19 = (char *)v161;
  __int16 v18 = v162;
  if (v162 != v161)
  {
    do
    {
      long long v20 = *(_OWORD *)(v18 - 20);
      *((_DWORD *)v13 - 1) = *((_DWORD *)v18 - 1);
      *(_OWORD *)(v13 - 20) = v20;
      v13 -= 20;
      v18 -= 20;
    }
    while (v18 != v19);
    __int16 v18 = (char *)v161;
  }
  uint64_t v161 = v13;
  v162 = v17;
  id v163 = v15;
  if (v18) {
    operator delete(v18);
  }
  v162 = v17;
  if (*((unsigned char *)v4 + 357))
  {
    int v21 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Identification - metric has already been updated", buf, 2u);
    }
    uint64_t v22 = 3;
    goto LABEL_15;
  }
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BECE0);
  }
  if (sub_10063C4FC(qword_1009F7F08, v3, (long long **)&__p, 1, 0, 0))
  {
    BYTE3(data) = 1;
  }
  else
  {
    if (qword_1009F7F10 != -1) {
      dispatch_once(&qword_1009F7F10, &stru_1009BECE0);
    }
    if (!sub_10063C4FC(qword_1009F7F08, v3, (long long **)&v161, 1, 0, 0))
    {
      unsigned __int16 v34 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Identification - le metric only send for HIDs and GHSS, returning", buf, 2u);
      }
      uint64_t v22 = 1;
      goto LABEL_15;
    }
    BYTE8(v264) = 1;
  }
  if (*((unsigned char *)v4 + 359))
  {
    unint64_t v24 = *((void *)v4 + 3);
    if (v24)
    {
      unint64_t v25 = sub_10022A5E0(v24);
      *(_DWORD *)int v155 = v25;
      *(_WORD *)&v155[4] = WORD2(v25);
      LOWORD(data) = v25;
      BYTE2(data) = BYTE2(v25);
      long long v26 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 68289538;
        *(_DWORD *)&uint8_t buf[4] = 6;
        *(_WORD *)&uint8_t buf[8] = 2098;
        *(void *)&buf[10] = v155;
        *(_WORD *)&unsigned char buf[18] = 1042;
        *(_DWORD *)&buf[20] = 3;
        *(_WORD *)&uint8_t buf[24] = 2098;
        p_long long data = &data;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Identification - device has resolved address %{public}.6P and OUI %{public}.3P", buf, 0x22u);
        long long v26 = qword_100A19E78;
      }
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v27 = BYTE6(v24) == 1;
        uint64_t v28 = (v24 >> 40) & 0xC0;
        if (v28) {
          BOOL v29 = 0;
        }
        else {
          BOOL v29 = BYTE6(v24) == 1;
        }
        BOOL v30 = v28 == 64 && BYTE6(v24) == 1;
        if (v28 != 192) {
          BOOL v27 = 0;
        }
        if (BYTE6(v24)) {
          BOOL v32 = BYTE6(v24) == 1 && v28 != 128;
        }
        else {
          BOOL v32 = 1;
        }
        *(_DWORD *)long long buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = BYTE6(v24) == 0;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v30;
        *(_WORD *)&unsigned char buf[14] = 1024;
        *(_DWORD *)&_WORD buf[16] = v27;
        *(_WORD *)&buf[20] = 1024;
        *(_DWORD *)&unsigned char buf[22] = v29;
        LOWORD(p_data) = 1024;
        *(_DWORD *)((char *)&p_data + 2) = v32;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Identification - le device has address type %d, %d, %d, %d, %d", buf, 0x20u);
      }
      LOWORD(data) = -1;
      BYTE2(data) = -1;
    }
    else
    {
      unint64_t v24 = *((void *)v4 + 2);
      if (BYTE6(v24))
      {
        int v35 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v36 = BYTE6(v24) == 1;
          uint64_t v37 = (v24 >> 40) & 0xC0;
          if (v37) {
            BOOL v38 = 0;
          }
          else {
            BOOL v38 = BYTE6(v24) == 1;
          }
          *(_DWORD *)long long buf = 67110144;
          *(_DWORD *)&uint8_t buf[4] = 0;
          BOOL v39 = v37 == 64 && BYTE6(v24) == 1;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v39;
          BOOL v40 = v37 == 192 && BYTE6(v24) == 1;
          *(_WORD *)&unsigned char buf[14] = 1024;
          *(_DWORD *)&_WORD buf[16] = v40;
          if (v37 == 128) {
            BOOL v36 = 0;
          }
          *(_WORD *)&buf[20] = 1024;
          *(_DWORD *)&unsigned char buf[22] = v38;
          LOWORD(p_data) = 1024;
          *(_DWORD *)((char *)&p_data + 2) = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Identification - le device has address type %d, %d, %d, %d, %d, can not generate metric", buf, 0x20u);
        }
        memset(buf, 0, 24);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
        }
        sub_10003093C((uint64_t)off_1009F7ED8, v3, (uint64_t)buf);
        int v41 = std::string::compare((const std::string *)buf, "Arc Touch BT Mouse");
        if (v41)
        {
          *((unsigned char *)v4 + 368) = 0;
        }
        else
        {
          v148 = qword_100A19E78;
          if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v155 = 0;
            _os_log_impl((void *)&_mh_execute_header, v148, OS_LOG_TYPE_DEFAULT, "HIDIdentification - WAR for Arc Touch BT Mouse Identification", v155, 2u);
          }
          LOWORD(data) = -1;
          BYTE2(data) = -1;
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v41)
        {
          uint64_t v22 = 2;
          goto LABEL_15;
        }
      }
      else
      {
        unint64_t v42 = sub_10022A5E0(v24);
        *(_DWORD *)int v155 = v42;
        *(_WORD *)&v155[4] = WORD2(v42);
        LOWORD(data) = v42;
        BYTE2(data) = BYTE2(v42);
        uint64_t v43 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 68289538;
          *(_DWORD *)&uint8_t buf[4] = 6;
          *(_WORD *)&uint8_t buf[8] = 2098;
          *(void *)&buf[10] = v155;
          *(_WORD *)&unsigned char buf[18] = 1042;
          *(_DWORD *)&buf[20] = 3;
          *(_WORD *)&uint8_t buf[24] = 2098;
          p_long long data = &data;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Identification - device has public address %{public}.6P and OUI %{public}.3P", buf, 0x22u);
        }
      }
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BEB80);
    }
    uint64_t v152 = v3;
    int v44 = sub_1002F4800((uint64_t)off_1009F8780, v3);
    long long v159 = 0u;
    long long v160 = 0u;
    long long v157 = 0u;
    long long v158 = 0u;
    id v45 = v44;
    id v46 = [v45 countByEnumeratingWithState:&v157 objects:v247 count:16];
    if (v46)
    {
      uint64_t v47 = *(void *)v158;
LABEL_81:
      uint64_t v48 = 0;
      while (1)
      {
        if (*(void *)v158 != v47) {
          objc_enumerationMutation(v45);
        }
        int v49 = *(void **)(*((void *)&v157 + 1) + 8 * v48);
        if (([v49 isEqualToString:@"com.apple.BTLEServer"] & 1) == 0
          && ([v49 isEqualToString:@"com.apple.Preferences"] & 1) == 0)
        {
          break;
        }
        if (v46 == (id)++v48)
        {
          id v46 = [v45 countByEnumeratingWithState:&v157 objects:v247 count:16];
          if (v46) {
            goto LABEL_81;
          }
          goto LABEL_88;
        }
      }
      id v50 = v49;

      if (!v50) {
        goto LABEL_95;
      }
      uint64_t v51 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543618;
        *(void *)&uint8_t buf[4] = v50;
        *(_WORD *)&unsigned char buf[12] = 2114;
        *(void *)&unsigned char buf[14] = v3;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "%{public}@ bundleid found for uuid %{public}@", buf, 0x16u);
      }
      id v151 = v50;
      sub_10004191C(buf, (char *)[v151 UTF8String]);
      uint64_t v52 = v3;
      if (SHIBYTE(v257[2]) < 0) {
        operator delete(v257[0]);
      }
      *(_OWORD *)v257 = *(_OWORD *)buf;
      v257[2] = *(void **)&buf[16];
    }
    else
    {
LABEL_88:

LABEL_95:
      uint64_t v53 = qword_100A19E78;
      uint64_t v52 = v3;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        *(void *)&uint8_t buf[4] = v3;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "No bundleid found for uuid %{public}@", buf, 0xCu);
      }
      id v151 = 0;
    }
    id v54 = *((id *)v4 + 42);
    id v150 = v54;
    if (v54)
    {
      id v55 = v54;
      memcpy(__dst, [v55 bytes], (size_t)[v55 length]);
      int v56 = __dst[0];
      int v57 = *(unsigned __int16 *)&__dst[1];
      DWORD2(v254) = __dst[0];
      HIDWORD(v254) = *(unsigned __int16 *)&__dst[1];
      LODWORD(v255) = *(unsigned __int16 *)&__dst[3];
      DWORD1(v255) = *(unsigned __int16 *)&__dst[5];
      uint64_t v52 = v152;
    }
    else
    {
      int v56 = DWORD2(v254);
      int v57 = HIDWORD(v254);
    }
    if (v56 == 2 && v57 == 1452 || (char v58 = 0, v56 == 1) && v57 == 76)
    {
      __int16 v59 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Overriding LE OUI for apple devices", buf, 2u);
        int v56 = DWORD2(v254);
        int v57 = HIDWORD(v254);
      }
      LOWORD(data) = 2560;
      BYTE2(data) = 39;
      char v58 = 1;
    }
    if (v56 == 2 && v57 == 1118)
    {
      __int16 v60 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Overriding LE OUI for MSFT devices", buf, 2u);
      }
      LOWORD(data) = 7664;
      BYTE2(data) = -68;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
    }
    sub_10003093C((uint64_t)off_1009F7ED8, v52, (uint64_t)buf);
    if (SBYTE7(v264) < 0) {
      operator delete((void *)v263);
    }
    *(void *)&long long v264 = *(void *)&buf[16];
    long long v263 = *(_OWORD *)buf;
    uint64_t v61 = buf[23];
    if (buf[23] >= 0) {
      __int16 v62 = &v263;
    }
    else {
      __int16 v62 = (long long *)v263;
    }
    if (buf[23] < 0) {
      uint64_t v61 = *((void *)&v263 + 1);
    }
    buf[0] = 13;
    uint64_t v63 = sub_1004843C4(v62, (unsigned __int8 *)v62 + v61, buf);
    __int16 v64 = (char *)&v263 + BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0)
    {
      int v65 = (unsigned __int8 *)&v263;
    }
    else
    {
      __int16 v64 = (char *)(v263 + *((void *)&v263 + 1));
      int v65 = (unsigned __int8 *)v263;
    }
    std::string::erase((std::string *)&v263, v63 - v65, v64 - (char *)v63);
    uint64_t v66 = BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0) {
      long long v67 = &v263;
    }
    else {
      long long v67 = (long long *)v263;
    }
    if (SBYTE7(v264) < 0) {
      uint64_t v66 = *((void *)&v263 + 1);
    }
    buf[0] = 10;
    long long v68 = sub_1004843C4(v67, (unsigned __int8 *)v67 + v66, buf);
    uint64_t v69 = (char *)&v263 + BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0)
    {
      long long v70 = (unsigned __int8 *)&v263;
    }
    else
    {
      uint64_t v69 = (char *)(v263 + *((void *)&v263 + 1));
      long long v70 = (unsigned __int8 *)v263;
    }
    std::string::erase((std::string *)&v263, v68 - v70, v69 - (char *)v68);
    uint64_t v71 = BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0) {
      long long v72 = &v263;
    }
    else {
      long long v72 = (long long *)v263;
    }
    if (SBYTE7(v264) < 0) {
      uint64_t v71 = *((void *)&v263 + 1);
    }
    buf[0] = 44;
    int v73 = sub_1004843C4(v72, (unsigned __int8 *)v72 + v71, buf);
    uint64_t v74 = (char *)&v263 + BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0)
    {
      uint64_t v75 = (unsigned __int8 *)&v263;
    }
    else
    {
      uint64_t v74 = (char *)(v263 + *((void *)&v263 + 1));
      uint64_t v75 = (unsigned __int8 *)v263;
    }
    std::string::erase((std::string *)&v263, v73 - v75, v74 - (char *)v73);
    char v156 = 0;
    sub_10001B8E0(&v156);
    char v149 = v58;
    *(_DWORD *)&v155[3] = 0;
    *(_DWORD *)int v155 = 0;
    uint64_t v76 = sub_1002284B8(v24);
    *(_DWORD *)int v155 = v76;
    v155[6] = BYTE6(v76);
    *(_WORD *)&v155[4] = WORD2(v76);
    if (sub_10017E654(v155, (_WORD *)&data + 2, (unsigned char *)&data + 8, (_WORD *)&data + 3)
      && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
    {
      sub_100793D20();
    }
    if (sub_10017E5FC(v155, &v256) && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100793CB8();
    }
    sub_10001B910(&v156);
    id v77 = *((id *)v4 + 34);
    BOOL v78 = v77 == 0;

    if (!v78)
    {
      id v79 = *((id *)v4 + 34);
      sub_10004191C(buf, (char *)[v79 UTF8String]);
      if (SHIBYTE(v257[5]) < 0) {
        operator delete(v257[3]);
      }
      *(_OWORD *)&v257[3] = *(_OWORD *)buf;
      v257[5] = *(void **)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
    }
    id v80 = *((id *)v4 + 35);
    BOOL v81 = v80 == 0;

    if (!v81)
    {
      id v82 = *((id *)v4 + 35);
      sub_10004191C(buf, (char *)[v82 UTF8String]);
      if (SBYTE7(v259) < 0) {
        operator delete((void *)v258);
      }
      long long v258 = *(_OWORD *)buf;
      *(void *)&long long v259 = *(void *)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
    }
    id v83 = *((id *)v4 + 37);
    BOOL v84 = v83 == 0;

    if (!v84)
    {
      id v85 = *((id *)v4 + 37);
      sub_10004191C(buf, (char *)[v85 UTF8String]);
      if (SBYTE7(v261[1]) < 0) {
        operator delete(*(void **)&v261[0]);
      }
      v261[0] = *(_OWORD *)buf;
      *(void *)&v261[1] = *(void *)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
    }
    id v86 = *((id *)v4 + 38);
    BOOL v87 = v86 == 0;

    if (!v87)
    {
      id v88 = *((id *)v4 + 38);
      sub_10004191C(buf, (char *)[v88 UTF8String]);
      if (SHIBYTE(v261[2]) < 0) {
        operator delete(*((void **)&v261[1] + 1));
      }
      *(_OWORD *)((char *)&v261[1] + 8) = *(_OWORD *)buf;
      *((void *)&v261[2] + 1) = *(void *)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
    }
    id v89 = *((id *)v4 + 39);
    BOOL v90 = v89 == 0;

    if (!v90)
    {
      id v91 = *((id *)v4 + 39);
      sub_10004191C(buf, (char *)[v91 UTF8String]);
      if (SBYTE7(v262[1]) < 0) {
        operator delete(*(void **)&v262[0]);
      }
      v262[0] = *(_OWORD *)buf;
      *(void *)&v262[1] = *(void *)&buf[16];
      buf[23] = 0;
      buf[0] = 0;
    }
    uint64_t v92 = BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0) {
      CFStringRef v93 = &v263;
    }
    else {
      CFStringRef v93 = (long long *)v263;
    }
    if (SBYTE7(v264) < 0) {
      uint64_t v92 = *((void *)&v263 + 1);
    }
    buf[0] = 13;
    char v94 = sub_1004843C4(v93, (unsigned __int8 *)v93 + v92, buf);
    int v95 = (char *)&v263 + BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0)
    {
      uint64_t v96 = (unsigned __int8 *)&v263;
    }
    else
    {
      int v95 = (char *)(v263 + *((void *)&v263 + 1));
      uint64_t v96 = (unsigned __int8 *)v263;
    }
    std::string::erase((std::string *)&v263, v94 - v96, v95 - (char *)v94);
    uint64_t v97 = BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0) {
      BOOL v98 = &v263;
    }
    else {
      BOOL v98 = (long long *)v263;
    }
    if (SBYTE7(v264) < 0) {
      uint64_t v97 = *((void *)&v263 + 1);
    }
    buf[0] = 10;
    id v99 = sub_1004843C4(v98, (unsigned __int8 *)v98 + v97, buf);
    uint64_t v100 = (char *)&v263 + BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0)
    {
      uint64_t v101 = (unsigned __int8 *)&v263;
    }
    else
    {
      uint64_t v100 = (char *)(v263 + *((void *)&v263 + 1));
      uint64_t v101 = (unsigned __int8 *)v263;
    }
    std::string::erase((std::string *)&v263, v99 - v101, v100 - (char *)v99);
    uint64_t v102 = BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0) {
      uint64_t v103 = &v263;
    }
    else {
      uint64_t v103 = (long long *)v263;
    }
    if (SBYTE7(v264) < 0) {
      uint64_t v102 = *((void *)&v263 + 1);
    }
    buf[0] = 44;
    long long v104 = sub_1004843C4(v103, (unsigned __int8 *)v103 + v102, buf);
    uint64_t v105 = (char *)&v263 + BYTE7(v264);
    if ((SBYTE7(v264) & 0x80u) == 0)
    {
      uint64_t v106 = (unsigned __int8 *)&v263;
    }
    else
    {
      uint64_t v105 = (char *)(v263 + *((void *)&v263 + 1));
      uint64_t v106 = (unsigned __int8 *)v263;
    }
    std::string::erase((std::string *)&v263, v104 - v106, v105 - (char *)v104);
    unint64_t v107 = HIBYTE(v257[2]);
    if (SHIBYTE(v257[2]) < 0) {
      unint64_t v107 = (unint64_t)v257[1];
    }
    long long v108 = (char *)HIBYTE(v257[5]);
    if (SHIBYTE(v257[5]) < 0) {
      long long v108 = (char *)v257[4];
    }
    uint64_t v109 = &v108[v107];
    uint64_t v110 = BYTE7(v259);
    if (SBYTE7(v259) < 0) {
      uint64_t v110 = *((void *)&v258 + 1);
    }
    uint64_t v111 = (char *)malloc_type_calloc((size_t)&v109[v110 + 80], 1uLL, 0x100004077774924uLL);
    uint64_t v112 = v111;
    *(_OWORD *)uint64_t v111 = data;
    long long v113 = v253;
    long long v114 = v254;
    long long v115 = v256;
    *((_OWORD *)v111 + 3) = v255;
    *((_OWORD *)v111 + 4) = v115;
    *((_OWORD *)v111 + 1) = v113;
    *((_OWORD *)v111 + 2) = v114;
    if (v149)
    {
      unsigned int v116 = 80;
    }
    else
    {
      long long v117 = v111 + 80;
      if (SHIBYTE(v257[2]) >= 0) {
        uint64_t v118 = v257;
      }
      else {
        uint64_t v118 = (void **)v257[0];
      }
      if (SHIBYTE(v257[2]) >= 0) {
        size_t v119 = HIBYTE(v257[2]);
      }
      else {
        size_t v119 = (size_t)v257[1];
      }
      memcpy(v117, v118, v119);
      int v120 = HIBYTE(v257[2]);
      if (SHIBYTE(v257[2]) < 0) {
        int v120 = (int)v257[1];
      }
      unsigned int v116 = v120 + 80;
    }
    if (SHIBYTE(v257[5]) >= 0) {
      uint64_t v121 = &v257[3];
    }
    else {
      uint64_t v121 = (void **)v257[3];
    }
    if (SHIBYTE(v257[5]) >= 0) {
      size_t v122 = HIBYTE(v257[5]);
    }
    else {
      size_t v122 = (size_t)v257[4];
    }
    memcpy(&v112[v116], v121, v122);
    int v123 = HIBYTE(v257[5]);
    if (SHIBYTE(v257[5]) < 0) {
      int v123 = (int)v257[4];
    }
    int v124 = v123 + v116;
    if ((SBYTE7(v259) & 0x80u) == 0) {
      uint64_t v125 = &v258;
    }
    else {
      uint64_t v125 = (long long *)v258;
    }
    if ((SBYTE7(v259) & 0x80u) == 0) {
      size_t v126 = BYTE7(v259);
    }
    else {
      size_t v126 = *((void *)&v258 + 1);
    }
    memcpy(&v112[v124], v125, v126);
    int v127 = BYTE7(v259);
    if (SBYTE7(v259) < 0) {
      int v127 = DWORD2(v258);
    }
    CC_LONG v128 = v127 + v124;
    CC_SHA1(&data, v128, (unsigned __int8 *)&v262[1] + 8);
    uint64_t v129 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 68157954;
      *(_DWORD *)&uint8_t buf[4] = v128;
      *(_WORD *)&uint8_t buf[8] = 2098;
      *(void *)&buf[10] = &data;
      _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "Identification - LE raw serialized data dump {%{public}.*P}", buf, 0x12u);
      uint64_t v129 = qword_100A19E78;
    }
    if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v130 = (char *)&v259 + 8;
      if ((SBYTE7(v264) & 0x80u) == 0) {
        uint64_t v131 = &v263;
      }
      else {
        uint64_t v131 = (long long *)v263;
      }
      if (SHIBYTE(v257[2]) >= 0) {
        id v132 = v257;
      }
      else {
        id v132 = (void **)v257[0];
      }
      if (v260 < 0) {
        uint64_t v130 = (char *)*((void *)&v259 + 1);
      }
      uint64_t v133 = (void **)v257[3];
      if (SHIBYTE(v257[5]) >= 0) {
        uint64_t v133 = &v257[3];
      }
      uint64_t v134 = &v258;
      if (SBYTE7(v259) < 0) {
        uint64_t v134 = (long long *)v258;
      }
      id v135 = v261;
      if (SBYTE7(v261[1]) < 0) {
        id v135 = *(_OWORD **)&v261[0];
      }
      id v136 = (char *)&v261[1] + 8;
      if (v261[2] < 0) {
        id v136 = (char *)*((void *)&v261[1] + 1);
      }
      uint64_t v137 = *(_OWORD **)&v262[0];
      if ((SBYTE7(v262[1]) & 0x80u) == 0) {
        uint64_t v137 = v262;
      }
      *(_DWORD *)&uint8_t buf[4] = 20;
      p_long long data = &data;
      long long v172 = v131;
      int v174 = WORD2(data);
      int v178 = WORD3(data);
      uint64_t v182 = &v256;
      v186 = (char *)&v256 + 8;
      int v190 = WORD5(data);
      int v194 = HIWORD(data);
      int v198 = WORD1(v253);
      int v202 = WORD3(v253);
      int v206 = WORD5(v253);
      int v210 = HIWORD(v253);
      int v214 = WORD1(v254);
      int v218 = WORD3(v254);
      int v222 = HIDWORD(v254);
      int v226 = DWORD1(v255);
      int v230 = BYTE3(data);
      v232 = v132;
      *(void *)&buf[10] = (char *)&v262[1] + 8;
      *(_DWORD *)&buf[20] = 3;
      int v176 = BYTE8(data);
      *(_WORD *)&unsigned char buf[18] = 1042;
      __int16 v179 = 1042;
      __int16 v183 = 1042;
      int v180 = 8;
      int v184 = 8;
      *(_WORD *)&uint8_t buf[8] = 2098;
      *(_WORD *)&uint8_t buf[24] = 2098;
      __int16 v181 = 2098;
      __int16 v185 = 2098;
      v238 = v134;
      long long v240 = v135;
      long long v242 = v136;
      int v246 = BYTE8(v264);
      int v188 = HIDWORD(v255);
      int v192 = WORD6(data);
      int v196 = (unsigned __int16)v253;
      int v200 = WORD2(v253);
      int v204 = WORD4(v253);
      int v208 = WORD6(v253);
      int v212 = (unsigned __int16)v254;
      int v216 = WORD2(v254);
      int v220 = DWORD2(v254);
      int v224 = v255;
      int v228 = DWORD2(v255);
      v234 = v130;
      v236 = v133;
      __int16 v171 = 2082;
      __int16 v231 = 2082;
      __int16 v233 = 2082;
      __int16 v235 = 2082;
      __int16 v237 = 2082;
      __int16 v239 = 2082;
      __int16 v241 = 2082;
      __int16 v243 = 2082;
      long long v244 = v137;
      __int16 v173 = 1024;
      __int16 v175 = 1024;
      __int16 v177 = 1024;
      __int16 v187 = 1024;
      __int16 v189 = 1024;
      __int16 v191 = 1024;
      __int16 v193 = 1024;
      __int16 v195 = 1024;
      __int16 v197 = 1024;
      __int16 v199 = 1024;
      __int16 v201 = 1024;
      __int16 v203 = 1024;
      __int16 v205 = 1024;
      __int16 v207 = 1024;
      __int16 v209 = 1024;
      __int16 v211 = 1024;
      __int16 v213 = 1024;
      __int16 v215 = 1024;
      __int16 v217 = 1024;
      __int16 v219 = 1024;
      __int16 v221 = 1024;
      __int16 v223 = 1024;
      __int16 v225 = 1024;
      __int16 v227 = 1024;
      __int16 v229 = 1024;
      __int16 v245 = 1024;
      *(_DWORD *)long long buf = 68299266;
      _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "Identification - generating LE metric {%{public}.20P, %{public}.3P, %{public}s, 0x%x, 0x%x, 0x%x, %{public}.8P, %{public}.8P, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, 0x%x, %d, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %{public}s, %d}", buf, 0x12Eu);
    }
    free(v112);
    uint64_t v138 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v138 + 8))(v138) && (WORD1(v254) || BYTE3(data)))
    {
      int v145 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v146 = sub_100017768();
        int v147 = (*(uint64_t (**)(uint64_t))(*(void *)v146 + 8))(v146);
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v147;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = BYTE3(data);
        _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEFAULT, "Identification - routing LE friendly name: internal %d, le hid service present %d", buf, 0xEu);
      }
    }
    else
    {
      v139 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v140 = sub_100017768();
        int v141 = (*(uint64_t (**)(uint64_t))(*(void *)v140 + 8))(v140);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v141;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = BYTE3(data);
        *(_WORD *)&unsigned char buf[14] = 1024;
        *(_DWORD *)&_WORD buf[16] = BYTE8(v264);
        _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "Identification - clearing LE friendly name: internal %d, le hid service present %d, le ghs service present %d", buf, 0x14u);
      }
      if (SBYTE7(v264) < 0) {
        operator delete((void *)v263);
      }
      long long v263 = 0uLL;
      *(void *)&long long v264 = 0;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
    }
    id v142 = off_1009F7ED8;
    sub_10004191C(v153, "LeIdentificationHashExist");
    sub_1006BC69C((uint64_t)v142, v152, (unsigned __int8 *)v153);
    if (v154 < 0) {
      operator delete(v153[0]);
    }
    *((unsigned char *)v4 + 357) = 1;
    id v143 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", (char *)&v262[1] + 8, 20, v261);
    objc_storeStrong((id *)v4 + 45, v143);

    sub_10003AFE8((uint64_t)v168);
    uint64_t v144 = sub_100050530();
    (*(void (**)(uint64_t, long long *))(*(void *)v144 + 224))(v144, &data);
    sub_10001B8AC(&v156);

    uint64_t v22 = 0;
    id v3 = v152;
  }
  else
  {
    unsigned __int8 v33 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Identification - DI not yet completed, returning", buf, 2u);
    }
    uint64_t v22 = 4;
  }
LABEL_15:
  if (v161)
  {
    v162 = (char *)v161;
    operator delete(v161);
  }
  if (__p)
  {
    uint64_t v165 = (char *)__p;
    operator delete(__p);
  }
  sub_1003B8A60((uint64_t)&data);
  sub_10003AFB4((uint64_t)v168);

  return v22;
}

void sub_1006CE6E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  if (__p) {
    operator delete(__p);
  }
  if (a35) {
    operator delete(a35);
  }
  sub_1003B8A60((uint64_t)&STACK[0x2F0]);
  sub_10003AFB4((uint64_t)&a39);

  _Unwind_Resume(a1);
}

uint64_t sub_1006CE84C(uint64_t a1)
{
  v62[0] = 0;
  v62[1] = 0;
  sub_10003AED0((uint64_t)v62, a1 + 88);
  uint64_t v1 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ LE Device Manager -------------------", buf, 2u);
  }
  *(void *)long long buf = 0;
  sub_100026C30((uint64_t)buf);
  double v2 = qword_100A19E78;
  uint64_t v3 = a1;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Devices:", buf, 2u);
  }
  v61[0] = 0;
  v61[1] = 0;
  __int16 v60 = (uint64_t *)v61;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  id obj = *(id *)(a1 + 168);
  id v4 = [obj countByEnumeratingWithState:&v56 objects:v85 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v57;
    uint64_t v41 = *(void *)v57;
    do
    {
      uint64_t v6 = 0;
      id v43 = v4;
      do
      {
        if (*(void *)v57 != v5) {
          objc_enumerationMutation(obj);
        }
        uint64_t v7 = *(void **)(*((void *)&v56 + 1) + 8 * (void)v6);
        long long v8 = (unsigned __int8 *)[*(id *)(v3 + 168) objectForKey:v7];
        long long v55 = *((_OWORD *)v8 + 15);
        *(_DWORD *)__int16 v64 = sub_1006BDC1C(v3, v7);
        *(void *)long long buf = v64;
        __int16 v9 = *((_WORD *)sub_1006A994C(&v60, (unsigned int *)v64, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16);
        *(_DWORD *)__int16 v64 = *((_DWORD *)v8 + 93);
        *(void *)long long buf = v64;
        *((_WORD *)sub_1006A994C(&v60, (unsigned int *)v64, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf) + 16) = v9 + 1;
        uint64_t v10 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          sub_1006B2368((uint64_t)v8);
          if (v65 >= 0) {
            int v11 = v64;
          }
          else {
            int v11 = *(unsigned char **)v64;
          }
          sub_1006A9284((unint64_t *)&v55);
          log = v10;
          if (v54 >= 0) {
            long long v12 = &v53;
          }
          else {
            long long v12 = v53;
          }
          int v13 = v8[358];
          int v14 = *((_DWORD *)v8 + 93);
          int v15 = v8[355];
          int v16 = v8[356];
          int v45 = v8[488];
          unsigned int v17 = sub_1006B11C4((uint64_t)v8);
          __int16 v18 = sub_1006B11A0(v17);
          sub_1006B1B50((uint64_t)v8);
          p_p = &__p;
          if (v52 < 0) {
            p_p = __p;
          }
          *(_DWORD *)long long buf = 138545667;
          *(void *)&uint8_t buf[4] = v7;
          __int16 v67 = 2082;
          long long v68 = v11;
          __int16 v69 = 2082;
          long long v70 = v12;
          __int16 v71 = 1024;
          int v72 = v13;
          __int16 v73 = 1024;
          int v74 = v14;
          __int16 v75 = 1024;
          int v76 = v15;
          __int16 v77 = 1024;
          int v78 = v16;
          __int16 v79 = 1024;
          int v80 = v45;
          __int16 v81 = 2080;
          id v82 = v18;
          __int16 v83 = 2081;
          BOOL v84 = p_p;
          _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}@ → %{public}s (added to WL %{public}s ago) disableDisconnect:%d useCase:%d scanDutyCycle screenON:%d screenOFF:%d pendingDelete:%d type:%s FindMy:%{private}s ", buf, 0x52u);
          if (v52 < 0) {
            operator delete(__p);
          }
          uint64_t v3 = a1;
          id v4 = v43;
          uint64_t v5 = v41;
          if (v54 < 0) {
            operator delete(v53);
          }
          if (v65 < 0) {
            operator delete(*(void **)v64);
          }
        }
        uint64_t v6 = (char *)v6 + 1;
      }
      while (v4 != v6);
      id v4 = [obj countByEnumeratingWithState:&v56 objects:v85 count:16];
    }
    while (v4);
  }

  long long v20 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "statedump:    useCase map:", buf, 2u);
  }
  int v21 = v60;
  if (v60 != (uint64_t *)v61)
  {
    uint64_t v22 = qword_100A19E78;
    do
    {
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        char v23 = sub_10003DDA4(*((_DWORD *)v21 + 7));
        int v24 = *((unsigned __int16 *)v21 + 16);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v23;
        __int16 v67 = 1024;
        LODWORD(v68) = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "statedump:    \tuseCase:%{public}s count:%d", buf, 0x12u);
        uint64_t v22 = qword_100A19E78;
      }
      unint64_t v25 = (uint64_t *)v21[1];
      if (v25)
      {
        do
        {
          long long v26 = v25;
          unint64_t v25 = (uint64_t *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          long long v26 = (uint64_t *)v21[2];
          BOOL v27 = *v26 == (void)v21;
          int v21 = v26;
        }
        while (!v27);
      }
      int v21 = v26;
    }
    while (v26 != (uint64_t *)v61);
  }
  sub_100361A5C(*(void *)(a1 + 248));
  if (_os_feature_enabled_impl())
  {
    uint64_t v28 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 160))(v28))
    {
      BOOL v29 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "statedump: Device name check:", buf, 2u);
      }
      sub_1006CC390((void *)a1, 1u);
      long long v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      long long v48 = 0u;
      id v30 = (id)objc_claimAutoreleasedReturnValue();
      id v31 = [v30 countByEnumeratingWithState:&v47 objects:v63 count:16];
      if (v31)
      {
        uint64_t v32 = *(void *)v48;
        do
        {
          for (uint64_t i = 0; i != v31; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v48 != v32) {
              objc_enumerationMutation(v30);
            }
            unsigned __int16 v34 = qword_100A19E78;
            if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
            {
              int v35 = [*(id *)(*((void *)&v47 + 1) + 8 * i) objectForKeyedSubscript:@"mapLabelCalloutTitleKey"];
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v35;
              _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "statedump:    \"%@\"", buf, 0xCu);
            }
          }
          id v31 = [v30 countByEnumeratingWithState:&v47 objects:v63 count:16];
        }
        while (v31);
      }

      BOOL v36 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "statedump: evicted devices:", buf, 2u);
      }
      for (uint64_t j = *(void *)(a1 + 264); j != a1 + 256; uint64_t j = *(void *)(j + 8))
      {
        BOOL v38 = qword_100A19E78;
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
        {
          sub_1006CC024(j + 16);
          if (v69 >= 0) {
            BOOL v39 = buf;
          }
          else {
            BOOL v39 = *(unsigned char **)buf;
          }
          *(_DWORD *)__int16 v64 = 136380675;
          *(void *)&v64[4] = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "statedump:    \"%{private}s\"", v64, 0xCu);
          if (SHIBYTE(v69) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
    }
  }
  sub_1000486F0((uint64_t)&v60, v61[0]);
  return sub_10003AFB4((uint64_t)v62);
}

void sub_1006CEFE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49)
{
  sub_1000486F0((uint64_t)&a46, (void *)a47);
  sub_10003AFB4((uint64_t)&a49);
  _Unwind_Resume(a1);
}

uint64_t sub_1006CF09C(uint64_t a1)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 88);
  long long v21 = 0uLL;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = *(id *)(a1 + 168);
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v20 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        uint64_t v7 = (char *)[*(id *)(a1 + 168) objectForKey:v6, __p[0], __p[1], v12, v13, (void)v14];
        long long v19 = 0uLL;
        [v6 getUUIDBytes:&v19];
        long long v21 = v19;
        if (v7[164])
        {
          *(_DWORD *)((char *)&v13 + 3) = 0;
          LODWORD(v13) = 0;
          uint64_t v8 = sub_1002284B8(*((void *)v7 + 3));
          LODWORD(v13) = v8;
          BYTE6(v13) = BYTE6(v8);
          WORD2(v13) = WORD2(v8);
          if (v7[127] < 0)
          {
            sub_10003B098(__p, *((void **)v7 + 13), *((void *)v7 + 14));
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)(v7 + 104);
            uint64_t v12 = *((void *)v7 + 15);
          }
          if (v12 >= 0) {
            __int16 v9 = (char *)__p;
          }
          else {
            __int16 v9 = (char *)__p[0];
          }
          sub_1001164E4(&v13, v9, &v21);
          if (SHIBYTE(v12) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v14 objects:v20 count:16];
    }
    while (v3);
  }

  return sub_10003AFB4((uint64_t)v18);
}

void sub_1006CF264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_10003AFB4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

uint64_t sub_1006CF2B4(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 88);
  sub_1006CF318(a1 + 288, a2);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1006CF304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1006CF318(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1006D0D64(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1006CF3A4(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1006CF448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_1006CF474(uint64_t a1)
{
  sub_1006CFCAC(a1);

  operator delete();
}

void sub_1006CF4C4(void **a1)
{
  if (a1[2])
  {
    id v3 = (void **)*a1;
    id v2 = (void **)a1[1];
    uint64_t v4 = *v2;
    v4[1] = *((void *)*a1 + 1);
    *v3[1] = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        uint64_t v5 = (void **)v2[1];
        sub_1006CF528((int)a1, v2);
        id v2 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_1006CF528(int a1, void **__p)
{
  if (*((char *)__p + 47) < 0) {
    operator delete(__p[3]);
  }

  operator delete(__p);
}

void sub_1006CF56C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1006CF63C(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1006CF63C(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v20 = &v19[8 * v16];
    long long __p = v19;
    BOOL v27 = v20;
    uint64_t v28 = v20;
    BOOL v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        char v23 = (char *)sub_1000405F8(v8, v22);
        long long v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        BOOL v27 = v20;
        BOOL v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        BOOL v27 = v20;
      }
    }
    *(void *)long long v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    __int16 v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1006CF844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006CF87C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1006CF94C(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1006CF94C(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v20 = &v19[8 * v16];
    long long __p = v19;
    BOOL v27 = v20;
    uint64_t v28 = v20;
    BOOL v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        char v23 = (char *)sub_1000405F8(v8, v22);
        long long v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        BOOL v27 = v20;
        BOOL v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        BOOL v27 = v20;
      }
    }
    *(void *)long long v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    __int16 v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1006CFB54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006CFB8C(uint64_t a1)
{
  id v2 = *(void **)(a1 + 584);
  if (v2)
  {
    *(void *)(a1 + 592) = v2;
    operator delete(v2);
  }

  if (*(char *)(a1 + 231) < 0) {
    operator delete(*(void **)(a1 + 208));
  }

  sub_10004BA28(a1 + 176, *(char **)(a1 + 184));
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }

  return a1;
}

uint64_t sub_1006CFCAC(uint64_t a1)
{
  *(void *)a1 = off_1009BE7E0;
  *(void *)(a1 + 8) = off_1009BE888;
  *(void *)(a1 + 16) = off_1009BE8A8;
  *(void *)(a1 + 24) = off_1009BE8D0;
  *(void *)(a1 + 32) = &off_1009BE900;
  *(void *)(a1 + 40) = &off_1009BE918;
  *(void *)(a1 + 48) = &off_1009BE930;
  *(void *)(a1 + 56) = &off_1009BE948;
  *(void *)(a1 + 64) = &off_1009BE960;

  id v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }

  sub_1006CF4C4((void **)(a1 + 256));
  sub_1000486F0(a1 + 224, *(void **)(a1 + 232));
  sub_1002B308C((void *)(a1 + 200));
  sub_1000486F0(a1 + 176, *(void **)(a1 + 184));

  sub_100052DA4(a1 + 88);
  return a1;
}

void sub_1006CFE54(id a1)
{
}

void sub_1006CFE98()
{
}

void sub_1006CFEBC(id a1)
{
}

void sub_1006CFF00()
{
}

uint64_t *sub_1006CFF24(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1006CFF7C(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1006CFF64(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1006CFF7C(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_1006D0008(v5, v6, v4 + 25, v4 + 25);
      unint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1006D0008(uint64_t **a1, uint64_t *a2, unsigned __int8 *uu2, const unsigned __int8 *a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v6 = (uint64_t **)sub_1006D0098(a1, a2, &v10, &v9, uu2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006AA2C4((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, (uint64_t)v10, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

const unsigned __int8 *sub_1006D0098(void *a1, uint64_t *a2, const unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *uu2)
{
  uint64_t v9 = (const unsigned __int8 *)(a1 + 1);
  if (a1 + 1 == a2 || uuid_compare(uu2, (const unsigned __int8 *)a2 + 25) < 0)
  {
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v12 = (const unsigned __int8 *)a2;
    }
    else
    {
      int v11 = (const unsigned __int8 *)*a2;
      if (*a2)
      {
        do
        {
          uint64_t v12 = v11;
          int v11 = (const unsigned __int8 *)*((void *)v11 + 1);
        }
        while (v11);
      }
      else
      {
        uint64_t v16 = a2;
        do
        {
          uint64_t v12 = (const unsigned __int8 *)v16[2];
          BOOL v17 = *(void *)v12 == (void)v16;
          uint64_t v16 = (uint64_t *)v12;
        }
        while (v17);
      }
      if ((uuid_compare(v12 + 25, uu2) & 0x80000000) == 0) {
        goto LABEL_17;
      }
    }
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (const unsigned __int8 *)a2;
      return (const unsigned __int8 *)a2;
    }
  }
  if ((uuid_compare((const unsigned __int8 *)a2 + 25, uu2) & 0x80000000) == 0)
  {
    *a3 = (const unsigned __int8 *)a2;
    *a4 = (uint64_t)a2;
    return (const unsigned __int8 *)a4;
  }
  a4 = a2 + 1;
  uint64_t v13 = a2[1];
  if (v13)
  {
    unint64_t v14 = (const unsigned __int8 *)a2[1];
    do
    {
      uint64_t v15 = v14;
      unint64_t v14 = *(const unsigned __int8 **)v14;
    }
    while (v14);
  }
  else
  {
    long long v19 = (const unsigned __int8 *)a2;
    do
    {
      uint64_t v15 = (const unsigned __int8 *)*((void *)v19 + 2);
      BOOL v17 = *(void *)v15 == (void)v19;
      long long v19 = v15;
    }
    while (!v17);
  }
  if (v15 == v9)
  {
LABEL_29:
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (const unsigned __int8 *)a2;
    }
    return (const unsigned __int8 *)a4;
  }
  if (uuid_compare(uu2, v15 + 25) < 0)
  {
    uint64_t v13 = *a4;
    goto LABEL_29;
  }
LABEL_17:

  return (const unsigned __int8 *)sub_1006AA230((uint64_t)a1, a3, uu2);
}

void sub_1006D0230(id a1)
{
}

void sub_1006D0274()
{
}

void sub_1006D0298(id a1)
{
}

void sub_1006D02DC()
{
}

void sub_1006D0300(id a1)
{
}

void sub_1006D0344()
{
}

void sub_1006D0368(id a1)
{
}

void sub_1006D03AC()
{
}

void sub_1006D03D0(id a1)
{
}

void sub_1006D0560()
{
}

void sub_1006D0584(id a1)
{
}

void sub_1006D05C8()
{
}

void sub_1006D05EC(id a1)
{
}

void sub_1006D0630(id a1)
{
}

void sub_1006D0674()
{
}

uint64_t *sub_1006D0698(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_1006D075C(a1, a4, v11);
    sub_100036CA0((uint64_t **)a1, (uint64_t)v8, v6, v11[0]);
    return v11[0];
  }
  return (uint64_t *)v8;
}

void sub_1006D075C(uint64_t a1@<X0>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  *((void *)v6 + 4) = **a2;
  uuid_clear((unsigned __int8 *)v6 + 40);
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006D07C4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1006D07DC(id a1)
{
}

void sub_1006D0820()
{
}

uint64_t sub_1006D0844(uint64_t a1, unint64_t *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v4 = (void *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 8 * a3;
    do
    {
      sub_10033CEE8((uint64_t **)a1, v4, a2, (uint64_t *)a2);
      ++a2;
      v6 -= 8;
    }
    while (v6);
  }
  return a1;
}

void sub_1006D08AC(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1006D08C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006D08C4(a1, *a2);
    sub_1006D08C4(a1, a2[1]);
    sub_1006D0920((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1006D0920(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    id v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t *sub_1006D0978(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v11, a2);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1006D0A30((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1006D0AD0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1006D0A30@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_10003B098(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[7] = 0;
  v6[8] = 0;
  v6[9] = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006D0AB8(_Unwind_Exception *a1)
{
  sub_1006D0AD0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1006D0AD0(uint64_t a1, uint64_t a2)
{
  id v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1006D0920((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_1006D0B28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned __int8 *)(a1 + 31);
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 31);
  }
  else {
    uint64_t v3 = *(void *)(a1 + 16);
  }
  uint64_t v4 = *(unsigned __int8 *)(a2 + 31);
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 16);
  }
  if (v3 != v4) {
    return 0;
  }
  uint64_t v6 = (const void **)(a1 + 8);
  long long v9 = *(unsigned __int8 **)(a2 + 8);
  unint64_t v7 = (unsigned __int8 *)(a2 + 8);
  uint64_t v8 = v9;
  if (v5 < 0) {
    unint64_t v7 = v8;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*v6, v7, *(void *)(a1 + 16)) == 0;
  }
  if (!*(unsigned char *)(a1 + 31)) {
    return 1;
  }
  uint64_t v10 = v2 - 1;
  do
  {
    int v12 = *(unsigned __int8 *)v6;
    uint64_t v6 = (const void **)((char *)v6 + 1);
    int v11 = v12;
    int v14 = *v7++;
    int v13 = v14;
    BOOL v16 = v10-- != 0;
    uint64_t result = v11 == v13;
  }
  while (v11 == v13 && v16);
  return result;
}

char *sub_1006D0BCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (char *)operator new(0x40uLL);
  *(void *)unint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  *((void *)v7 + 2) = *(void *)a4;
  uint64_t v8 = v7 + 24;
  if (*(char *)(a4 + 31) < 0)
  {
    sub_10003B098(v8, *(void **)(a4 + 8), *(void *)(a4 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)(a4 + 8);
    *((void *)v7 + 5) = *(void *)(a4 + 24);
  }
  *((void *)v7 + 6) = *(void *)(a4 + 32);
  v7[56] = *(unsigned char *)(a4 + 40);
  return v7;
}

void sub_1006D0C54(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char **sub_1006D0C68(char **a1, uint64_t a2)
{
  *a1 = (char *)a1;
  a1[1] = (char *)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    int v5 = sub_1006D0BCC((uint64_t)a1, 0, 0, i + 16);
    uint64_t v6 = *a1;
    *(void *)int v5 = *a1;
    *((void *)v5 + 1) = a1;
    *((void *)v6 + 1) = v5;
    *a1 = v5;
    ++a1[2];
  }
  return a1;
}

void sub_1006D0CE8(_Unwind_Exception *a1)
{
  sub_1006CF4C4(v1);
  _Unwind_Resume(a1);
}

void sub_1006D0CFC(id a1)
{
}

void sub_1006D0D40()
{
}

char *sub_1006D0D64(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v20 = &v19[8 * v16];
    long long __p = v19;
    BOOL v27 = v20;
    uint64_t v28 = v20;
    BOOL v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        char v23 = (char *)sub_1000405F8(v8, v22);
        long long v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        BOOL v27 = v20;
        BOOL v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        BOOL v27 = v20;
      }
    }
    *(void *)long long v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    long long v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    int v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1006D0F6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006D0FA4(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2114;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_1006D0FCC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

void sub_1006D0FD8()
{
  for (uint64_t i = 0; i != -160; i -= 32)
  {
    if (*((char *)&unk_100A145C0 + i + 151) < 0) {
      operator delete(*(void **)((char *)&unk_100A145C0 + i + 128));
    }
  }
}

void sub_1006D1020()
{
  uint64_t v1 = sub_10004191C(qword_100A145C0, "CORSAIR HARPOON");
  *((_DWORD *)v1 + 6) = 454826846;
  sub_10004191C(v1 + 4, "CORSAIR IRONCLAW");
  dword_100A145F8 = 454826828;
  sub_10004191C(qword_100A14600, "DARK CORE RGB PRO SE");
  dword_100A14618 = 461249308;
  sub_10004191C(qword_100A14620, "DARK CORE RGB PRO");
  dword_100A14638 = 454826880;
  sub_10004191C(qword_100A14640, "KATAR PRO Wireless");
  dword_100A14658 = 454826926;
  __cxa_atexit((void (*)(void *))sub_1006D0FD8, 0, (void *)&_mh_execute_header);
}

void sub_1006D1128(_Unwind_Exception *a1)
{
  sub_100793D88(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1006D113C(uint64_t a1)
{
  *(void *)a1 = &off_1009BF5F0;
  *(void *)(a1 + 8) = off_1009BF628;
  *(void *)(a1 + 16) = &off_1009BDFD0;
  *(void *)(a1 + 24) = &off_1009BE000;
  *(void *)(a1 + 32) = &off_1009BE048;
  *(void *)(a1 + 40) = &off_1009BE018;
  *(void *)(a1 + 48) = off_1009BF690;
  uint64_t v2 = (void *)(a1 + 56);
  sub_10004191C(&__p, "LeObserver");
  sub_1004EEEF4(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  *(void *)a1 = off_1009BED80;
  *(void *)(a1 + 8) = &off_1009BEE78;
  *(void *)(a1 + 16) = off_1009BEEE0;
  *(void *)(a1 + 24) = &off_1009BEF10;
  *(void *)(a1 + 32) = off_1009BEF28;
  *(void *)(a1 + 40) = off_1009BEF78;
  *(void *)(a1 + 48) = off_1009BEFA8;
  *(void *)(a1 + 56) = &off_1009BF058;
  *(void *)(a1 + 112) = &off_1009BF070;
  *(void *)(a1 + 120) = &off_1009BF088;
  *(void *)(a1 + 128) = &off_1009BF0A0;
  *(void *)(a1 + 136) = &off_1009BF0D0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 1792) = 1;
  *(_OWORD *)(a1 + 1824) = 0u;
  *(_OWORD *)(a1 + 1800) = 0u;
  *(void *)(a1 + 1816) = a1 + 1824;
  *(_WORD *)(a1 + 1840) = 1;
  *(unsigned char *)(a1 + 1842) = 0;
  *(_DWORD *)(a1 + 1848) = -16777216;
  *(unsigned char *)(a1 + 1864) = 0;
  *(_DWORD *)(a1 + 1872) = 0;
  *(_OWORD *)(a1 + 1880) = 0u;
  *(void *)(a1 + 1928) = 0;
  *(_OWORD *)(a1 + 1912) = 0u;
  *(_OWORD *)(a1 + 1944) = 0u;
  *(_DWORD *)(a1 + 1852) = 0;
  *(void *)(a1 + 1896) = 0;
  *(_DWORD *)(a1 + 1904) = 0;
  *(void *)(a1 + 1936) = a1 + 1944;
  *(void *)(a1 + 1960) = 0;
  *(_OWORD *)(a1 + 2008) = 0u;
  *(void *)(a1 + 2000) = a1 + 2008;
  *(_OWORD *)(a1 + 2048) = 0u;
  *(_OWORD *)(a1 + 2024) = 0u;
  *(void *)(a1 + 2040) = a1 + 2048;
  *(_OWORD *)(a1 + 2072) = 0u;
  *(void *)(a1 + 2064) = a1 + 2072;
  *(_OWORD *)(a1 + 2088) = 0u;
  *(unsigned char *)(a1 + 2104) = 0;
  *(_OWORD *)(a1 + 2112) = 0u;
  *(void *)(a1 + 2128) = 300000;
  *(unsigned char *)(a1 + 2168) = 0;
  *(_OWORD *)(a1 + 2176) = 0u;
  *(_OWORD *)(a1 + 2192) = 0u;
  *(_OWORD *)(a1 + 2206) = 0u;
  *(unsigned char *)(a1 + 2244) = 1;
  *(unsigned char *)(a1 + 2247) = 0;
  *(_DWORD *)(a1 + 2292) = 0;
  *(void *)(a1 + 2344) = 0;
  *(unsigned char *)(a1 + 2352) = 0;
  *(void *)(a1 + 2272) = 0;
  *(_OWORD *)(a1 + 2256) = 0u;
  *(void *)(a1 + 3216) = 0x700000003;
  *(unsigned char *)(a1 + 3224) = 0;
  *(unsigned char *)(a1 + 3256) = 0;
  *(void *)(a1 + 3264) = 0;
  *(unsigned char *)(a1 + 4296) = 0;
  *(_OWORD *)(a1 + 4312) = 0u;
  *(void *)(a1 + 4304) = a1 + 4312;
  *(_OWORD *)(a1 + 4336) = 0u;
  *(void *)(a1 + 4328) = a1 + 4336;
  *(unsigned char *)(a1 + 4381) = 0;
  *(void *)(a1 + 4368) = 0;
  *(_OWORD *)(a1 + 4352) = 0u;
  *(_WORD *)(a1 + 4382) = 1;
  *(_WORD *)(a1 + 4385) = 1;
  uint64_t v3 = +[NSMutableSet set];
  uint64_t v4 = *(void **)(a1 + 3264);
  *(void *)(a1 + 3264) = v3;

  return a1;
}

void sub_1006D1578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  sub_1000486F0(v21, *(void **)(v19 + 4336));
  sub_1000486F0(v25, *(void **)(v19 + 4312));

  sub_100051568((void ***)&a19);
  sub_1006F5CE0(v26, *(void **)(v19 + 2072));
  sub_1000486F0(a12, *(void **)(v19 + 2048));
  sub_1006F5BF8(v23, *(void **)(v19 + 2008));
  sub_1000486F0(v22, *(void **)(v19 + 1944));
  uint64_t v28 = *(void **)(v19 + 1912);
  if (v28)
  {
    *(void *)(v19 + 1920) = v28;
    operator delete(v28);
  }
  BOOL v29 = *v24;
  if (*v24)
  {
    *(void *)(v19 + 1888) = v29;
    operator delete(v29);
  }
  sub_1000486F0(a11, *(void **)(v19 + 1824));

  sub_1004EF0E4(v20);
  _Unwind_Resume(a1);
}

void sub_1006D1670(uint64_t a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009BF788);
  }
  sub_100605CDC((uint64_t)off_1009F8780 + 192, a1);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BF7A8);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 16);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
  }
  sub_1004F9E94((uint64_t)off_1009F8150, a1 + 32);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BF7E8);
  }
  sub_100680938((uint64_t)off_1009F7EB8, a1 + 48, 0);
  if (qword_1009F85E8 != -1) {
    dispatch_once(&qword_1009F85E8, &stru_1009BF808);
  }
  sub_1003C2D20(qword_1009F85E0, a1 + 128);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BF828);
  }
  sub_1006CF2B4((uint64_t)off_1009F7ED8, a1 + 136);
  uint64_t v2 = sub_10003FFD4();
  sub_1006CF56C(v2 + 1128, a1 + 120);
  uint64_t v3 = sub_10003FFD4();
  sub_1006CF87C(v3 + 1088, a1 + 112);
  uint64_t v4 = *(void *)sub_100035F54();
  if (((*(uint64_t (**)(void))(v4 + 408))() & 1) == 0)
  {
    uint64_t v5 = sub_10003FFD4();
    sub_100471048(v5 + 728, a1 + 24);
  }
  uint64_t v6 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 152))(v6, a1 + 144);
  uint64_t v7 = *(void *)sub_100017768();
  *(unsigned char *)(a1 + 2168) = (*(uint64_t (**)(void))(v7 + 784))();
  uint64_t v8 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "EnableScanAgentPrints");
  uint64_t v134 = (unsigned __int8 *)(a1 + 4381);
  int v9 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v8 + 72))(v8, buf, __p, a1 + 4385);
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v9) {
      goto LABEL_23;
    }
  }
  else if (!v9)
  {
    goto LABEL_23;
  }
  uint64_t v10 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 4385);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "fEnableDebugScanAgent is now %d", buf, 8u);
  }
LABEL_23:
  uint64_t v12 = sub_100017768();
  sub_10004191C(buf, "ADVBUFF");
  sub_10004191C(__p, "UseDebugTypes");
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v12 + 72))(v12, buf, __p, a1 + 2104))
  {
    int v13 = *(unsigned __int8 *)(a1 + 2104);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v13)
    {
      unint64_t v14 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: Using debug types for ADV buffer", buf, 2u);
      }
    }
  }
  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  char v138 = 0;
  uint64_t v15 = sub_100017768();
  sub_10004191C(buf, "ADVBUFF");
  sub_10004191C(__p, "DisableENADVBuffers");
  int v16 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v15 + 72))(v15, buf, __p, &v138);
  if (v138) {
    int v17 = v16;
  }
  else {
    int v17 = 0;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v17) {
      goto LABEL_46;
    }
  }
  else if (!v17)
  {
    goto LABEL_46;
  }
  *(unsigned char *)(a1 + 1792) = 0;
  unint64_t v18 = qword_100A19FB0;
  if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Disabling EN ADV Buffers for this platform", buf, 2u);
  }
LABEL_46:
  for (int i = 256; i != 262; ++i)
  {
    v137[0] = i;
    *(void *)long long buf = v137;
    uint64_t v20 = sub_1006F620C((uint64_t **)(a1 + 1816), v137, (uint64_t)&unk_1007BE9D0, (char **)buf);
    *((_WORD *)v20 + 14) = 255;
    *((_WORD *)v20 + 15) = i;
    _OWORD v20[4] = 0;
    uint64_t v21 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = i;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = 255;
      *(_WORD *)&unsigned char buf[14] = 1024;
      *(_DWORD *)&_WORD buf[16] = 0;
      *(_WORD *)id v142 = 1024;
      *(_DWORD *)&v142[2] = 0;
      *(_WORD *)id v143 = 1024;
      *(_DWORD *)&v143[2] = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEBUG, "MATCH TABLE Setting up table entry handle:%d type:%d length:%d created:%d enabled:%d", buf, 0x20u);
    }
  }
  *(void *)uint64_t v137 = 0;
  uint64_t v22 = sub_100017768();
  sub_10004191C(buf, "ADVBUFF");
  sub_10004191C(__p, "OverrideAPWakeDebounceTimerSeconds");
  int v23 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v22 + 144))(v22, buf, __p, v137);
  if (*(void *)v137) {
    int v24 = v23;
  }
  else {
    int v24 = 0;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v24) {
      goto LABEL_61;
    }
  }
  else if (!v24)
  {
    goto LABEL_61;
  }
  uint64_t v25 = 1000 * *(void *)v137;
  *(void *)(a1 + 2128) = 1000 * *(void *)v137;
  uint64_t v26 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Warning: Overriding fApWakeReadADVBuffersDebounceDelta with %llu seconds", buf, 0xCu);
  }
LABEL_61:
  *(unsigned char *)(a1 + 2222) = 0;
  *(_OWORD *)(a1 + 2136) = 0u;
  *(_OWORD *)(a1 + 2152) = 0u;
  unsigned int v136 = 0;
  *(_WORD *)(a1 + 2232) = 0;
  *(unsigned char *)(a1 + 2234) = 0;
  *(_DWORD *)(a1 + 2224) = 0;
  *(_DWORD *)(a1 + 2227) = 0;
  uint64_t v27 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "IsScanParamsOverriden");
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v27 + 72))(v27, buf, __p, a1 + 2222))
  {
    int v28 = *(unsigned __int8 *)(a1 + 2222);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!v28) {
        goto LABEL_191;
      }
    }
    else if (!v28)
    {
      goto LABEL_191;
    }
    BOOL v29 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters.", buf, 2u);
    }
    uint64_t v30 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "Interval");
    int v31 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned int *))(*(void *)v30 + 88))(v30, buf, __p, &v136);
    if (v136) {
      int v32 = v31;
    }
    else {
      int v32 = 0;
    }
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v32)
    {
      unsigned int v33 = v136;
      *(_WORD *)(a1 + 2224) = v136;
      unsigned __int16 v34 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters Interval %d.", buf, 8u);
      }
    }
    uint64_t v35 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "WindowMainCoreELNAOn");
    int v36 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned int *))(*(void *)v35 + 88))(v35, buf, __p, &v136);
    if (v136) {
      int v37 = v36;
    }
    else {
      int v37 = 0;
    }
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v37)
    {
      unsigned int v38 = v136;
      *(_WORD *)(a1 + 2226) = v136;
      BOOL v39 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters WindowMainCoreELNAOn %d.", buf, 8u);
      }
    }
    uint64_t v40 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "WindowMainCoreELNABypass");
    int v41 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned int *))(*(void *)v40 + 88))(v40, buf, __p, &v136);
    if (v136) {
      int v42 = v41;
    }
    else {
      int v42 = 0;
    }
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v42)
    {
      unsigned int v43 = v136;
      *(_WORD *)(a1 + 2228) = v136;
      int v44 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v43;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters WindowMainCoreELNABypass %d.", buf, 8u);
      }
    }
    uint64_t v45 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "IsScanCoreELNAOn");
    id v46 = (unsigned __int8 *)(a1 + 2230);
    if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v45 + 72))(v45, buf, __p, a1 + 2230))
    {
      int v47 = *v46;
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      if ((v142[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v47)
      {
        long long v48 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters ScanCore ELNA is On", buf, 2u);
        }
      }
    }
    else
    {
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      if ((v142[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v49 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "WindowScanCore");
    int v50 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned int *))(*(void *)v49 + 88))(v49, buf, __p, &v136);
    if (v136) {
      int v51 = v50;
    }
    else {
      int v51 = 0;
    }
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v51)
    {
      unsigned int v52 = v136;
      *(_WORD *)(a1 + 2232) = v136;
      uint64_t v53 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v52;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters WindowScancore %d", buf, 8u);
      }
    }
    uint64_t v54 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "IsScanCoreELNAOn");
    if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v54 + 72))(v54, buf, __p, a1 + 2230))
    {
      int v55 = *v46;
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      if ((v142[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v55)
      {
        long long v56 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters ScanCore ELNA is On", buf, 2u);
        }
      }
    }
    else
    {
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      if ((v142[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v57 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "IsScanCoreConcurrent");
    if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v57 + 72))(v57, buf, __p, a1 + 2234))
    {
      int v58 = *(unsigned __int8 *)(a1 + 2234);
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      if ((v142[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (v58)
      {
        long long v59 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters ScanCore Concurrent", buf, 2u);
        }
      }
    }
    else
    {
      if (v140 < 0) {
        operator delete(__p[0]);
      }
      if ((v142[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
    *(unsigned char *)(a1 + 2235) = 0;
    uint64_t v60 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "IsScanCoreCompensated");
    int v61 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v60 + 72))(v60, buf, __p, a1 + 2238);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v61)
    {
      *(unsigned char *)(a1 + 2235) = 1;
      __int16 v62 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        if (*(unsigned char *)(a1 + 2238)) {
          uint64_t v63 = "Yes";
        }
        else {
          uint64_t v63 = "No";
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = v63;
        _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters ScanCore Compensated: %{public}s", buf, 0xCu);
      }
    }
    *(unsigned char *)(a1 + 2236) = 0;
    uint64_t v64 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "ScanCoreCompensationPercent");
    int v65 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned int *))(*(void *)v64 + 88))(v64, buf, __p, &v136);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v65)
    {
      unsigned int v66 = v136;
      if (v136 > 0x64)
      {
        __int16 v67 = qword_100A19E90;
        if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_171;
        }
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v66;
        long long v68 = "Overriding BLE ScanCore Compensation Percent %d failed (0<= ScanCoreCompensationPercent <=100)";
      }
      else
      {
        *(unsigned char *)(a1 + 2236) = 1;
        *(_WORD *)(a1 + 2240) = v66;
        __int16 v67 = qword_100A19E90;
        if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_171;
        }
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v66;
        long long v68 = "Overriding BLE ScanCore Compensation Percent %d";
      }
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, v68, buf, 8u);
    }
LABEL_171:
    *(unsigned char *)(a1 + 2237) = 0;
    uint64_t v69 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "ScanCoreCoexQueryPeriod");
    int v70 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned int *))(*(void *)v69 + 88))(v69, buf, __p, &v136);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (!v70) {
      goto LABEL_181;
    }
    unsigned int v71 = v136;
    if (v136 > 4 || v136 == 3)
    {
      int v72 = qword_100A19E90;
      if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
LABEL_181:
        int v74 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v75 = *(unsigned __int16 *)(a1 + 2224);
          unsigned int v76 = *(unsigned __int16 *)(a1 + 2226);
          unsigned int v77 = *(unsigned __int16 *)(a1 + 2228);
          int v78 = *(unsigned __int8 *)(a1 + 2230);
          unsigned int v79 = *(unsigned __int16 *)(a1 + 2232);
          double v80 = (double)v79 * 0.625;
          if (*(unsigned char *)(a1 + 2230))
          {
            double v81 = (double)v79 * 0.625;
            int v78 = *(unsigned __int16 *)(a1 + 2232);
            double v80 = 0.0;
            unsigned int v79 = 0;
          }
          else
          {
            double v81 = 0.0;
          }
          id v82 = "Yes";
          int v83 = *(unsigned __int16 *)(a1 + 2240);
          if (*(unsigned char *)(a1 + 2234)) {
            BOOL v84 = "Yes";
          }
          else {
            BOOL v84 = "No";
          }
          int v85 = *(unsigned __int16 *)(a1 + 2242);
          if (!*(unsigned char *)(a1 + 2235)) {
            id v82 = "No";
          }
          *(_DWORD *)long long buf = 67112450;
          *(_DWORD *)&uint8_t buf[4] = v75;
          *(_WORD *)&uint8_t buf[8] = 2048;
          *(double *)&buf[10] = (double)v75 * 0.625;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)id v142 = v76;
          *(_WORD *)&v142[4] = 1024;
          *(_DWORD *)id v143 = v77;
          *(_WORD *)&v143[4] = 1024;
          int v144 = v78;
          __int16 v145 = 1024;
          unsigned int v146 = v79;
          __int16 v147 = 2048;
          double v148 = (double)v76 * 0.625;
          __int16 v149 = 2048;
          double v150 = (double)v77 * 0.625;
          __int16 v151 = 2048;
          double v152 = v81;
          __int16 v153 = 2048;
          double v154 = v80;
          __int16 v155 = 2082;
          char v156 = v84;
          __int16 v157 = 2082;
          long long v158 = v82;
          __int16 v159 = 1024;
          int v160 = v83;
          __int16 v161 = 1024;
          int v162 = v85;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters Interval %d(%.2fms) Window %d/%d/%d/%d(%.2fms/%.2fms/%.2fms/%.2fms) Concurrent %{public}s Compensation %{public}s percent %d period %d", buf, 0x72u);
        }
        goto LABEL_191;
      }
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v71;
      __int16 v73 = "Overriding BLE ScanCore Query Period %d failed (period must be in {0, 1, 2, 4}";
    }
    else
    {
      *(unsigned char *)(a1 + 2237) = 1;
      *(_WORD *)(a1 + 2242) = v71;
      int v72 = qword_100A19E90;
      if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_181;
      }
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v71;
      __int16 v73 = "Overriding BLE ScanCore Query Period %d";
    }
    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, v73, buf, 8u);
    goto LABEL_181;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_191:
  char v135 = 0;
  uint64_t v86 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "IsScanCompensationDisabled");
  int v87 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v86 + 72))(v86, buf, __p, &v135);
  if (v135) {
    int v88 = v87;
  }
  else {
    int v88 = 0;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v88) {
      goto LABEL_203;
    }
  }
  else if (!v88)
  {
    goto LABEL_203;
  }
  id v89 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Disable ScanCore Compensation", buf, 2u);
  }
  *(unsigned char *)(a1 + 2244) = 0;
LABEL_203:
  uint64_t v90 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "ApplyRSSIOffset");
  id v91 = (int *)(a1 + 2292);
  if (!(*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v90 + 88))(v90, buf, __p, a1 + 2292)|| (int v92 = *v91) == 0|| v92 > 127)
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_217;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v92 < -128)
  {
LABEL_217:
    int *v91 = 0;
    goto LABEL_218;
  }
  CFStringRef v93 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v94 = *v91;
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v94;
    _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Warning: Applying RSSI offset of %d", buf, 8u);
  }
LABEL_218:
  *(unsigned char *)(a1 + 2245) = 0;
  uint64_t v95 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "IsScanCoreDebug");
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v95 + 72))(v95, buf, __p, a1 + 2245))
  {
    int v96 = *(unsigned __int8 *)(a1 + 2245);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v96)
    {
      uint64_t v97 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "Enabling ScanCore Debug prints", buf, 2u);
      }
    }
  }
  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  xpc_set_event_stream_handler("com.apple.alarm", 0, &stru_1009BF100);
  uint64_t v98 = sub_100017768();
  sub_10004191C(buf, "SCANDEBUG");
  sub_10004191C(__p, "DebugControllerConfigDispatchSequence");
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v98 + 72))(v98, buf, __p, v134))
  {
    int v99 = *v134;
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v99)
    {
      uint64_t v100 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "fDebugControllerConfigDispatchSequence is true, dispatching config after serial config", buf, 2u);
      }
    }
  }
  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  uint64_t v101 = sub_100017768();
  sub_10004191C(buf, "SCANDEBUG");
  sub_10004191C(__p, "ForceDispatchInsteadOfSerialConfig");
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v101 + 72))(v101, buf, __p, a1 + 4382))
  {
    int v102 = *(unsigned __int8 *)(a1 + 4382);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v102) {
        goto LABEL_255;
      }
    }
    else if (v102)
    {
      goto LABEL_255;
    }
    uint64_t v103 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "fForceDispatchInsteadOfSerialConfig is false, Forcing disable dispatch config", buf, 2u);
    }
  }
  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_255:
  uint64_t v104 = sub_100017768();
  sub_10004191C(buf, "SCANDEBUG");
  sub_10004191C(__p, "DebugScanConfigSequence");
  int v105 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v104 + 72))(v104, buf, __p, &byte_100A14714);
  if (byte_100A14714) {
    int v106 = v105;
  }
  else {
    int v106 = 0;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v106) {
      goto LABEL_266;
    }
  }
  else if (!v106)
  {
    goto LABEL_266;
  }
  unint64_t v107 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "gSniffScanDebug is true", buf, 2u);
  }
LABEL_266:
  uint64_t v108 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "DisablePrioritizationOverBT");
  int v109 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v108 + 72))(v108, buf, __p, &byte_100A14715);
  if (byte_100A14715) {
    int v110 = v109;
  }
  else {
    int v110 = 0;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v110) {
      goto LABEL_277;
    }
  }
  else if (!v110)
  {
    goto LABEL_277;
  }
  uint64_t v111 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "Disable Scan Prioritization over BT.", buf, 2u);
  }
LABEL_277:
  uint64_t v112 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "PrioritizationOverWiFiEnabled");
  int v113 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v112 + 72))(v112, buf, __p, &byte_100A14716);
  if (byte_100A14716) {
    int v114 = v113;
  }
  else {
    int v114 = 0;
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if ((v142[3] & 0x80000000) != 0)
  {
    operator delete(*(void **)buf);
    if (!v114) {
      goto LABEL_288;
    }
  }
  else if (!v114)
  {
    goto LABEL_288;
  }
  long long v115 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v115, OS_LOG_TYPE_DEFAULT, "Scan Prioritization over WiFi is supported.", buf, 2u);
  }
LABEL_288:
  *(_WORD *)(a1 + 2246) = 0;
  uint64_t v116 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "forcePassiveScan");
  long long v117 = (unsigned __int8 *)(a1 + 2246);
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v116 + 72))(v116, buf, __p, a1 + 2246))
  {
    int v118 = *v117;
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (!v118) {
        goto LABEL_305;
      }
    }
    else if (!v118)
    {
      goto LABEL_305;
    }
    uint64_t v119 = sub_100017768();
    sub_10004191C(buf, "BLESCAN");
    sub_10004191C(__p, "forcePassiveScanEnable");
    (*(void (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v119 + 72))(v119, buf, __p, a1 + 2247);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    int v120 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v121 = *v117;
      int v122 = *(unsigned __int8 *)(a1 + 2247);
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v121;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v122;
      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters to force passive scan to %d force to : %d", buf, 0xEu);
    }
  }
  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_305:
  *(unsigned char *)(a1 + 2248) = 0;
  uint64_t v123 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "enableMatchingRuleAndAddressBatched");
  if ((*(unsigned int (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v123 + 72))(v123, buf, __p, a1 + 2248))
  {
    int v124 = *(unsigned __int8 *)(a1 + 2248);
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v124)
    {
      uint64_t v125 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEFAULT, "Overriding BLE Scan Parameters to enable matching rules batched", buf, 2u);
      }
    }
  }
  else
  {
    if (v140 < 0) {
      operator delete(__p[0]);
    }
    if ((v142[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  *(_OWORD *)(a1 + 2312) = 0u;
  *(_OWORD *)(a1 + 2328) = 0u;
  *(_OWORD *)(a1 + 2296) = 0u;
  *(void *)(a1 + 2280) = 0;
  *(void *)(a1 + 2712) = 0;
  *(_DWORD *)(a1 + 2719) = 0;
  sub_1006D3718(a1);
  sub_1006D380C(a1);
  *(void *)(a1 + 3208) = 0;
  sub_1006D38C4(a1);
  sub_1006D3944(a1);
  sub_1006D3AF4(a1);
  uint64_t v126 = +[NSMutableArray array];
  int v127 = *(void **)(a1 + 4352);
  *(void *)(a1 + 4352) = v126;

  uint64_t v128 = +[NSMutableArray array];
  uint64_t v129 = *(void **)(a1 + 4360);
  *(void *)(a1 + 4360) = v128;

  uint64_t v130 = +[NSMutableArray array];
  uint64_t v131 = *(void **)(a1 + 4368);
  *(void *)(a1 + 4368) = v130;

  uint64_t v132 = +[NSMutableDictionary dictionary];
  uint64_t v133 = *(void **)(a1 + 2088);
  *(void *)(a1 + 2088) = v132;
}

void sub_1006D34E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006D35E4(id a1, void *a2)
{
  string = xpc_dictionary_get_string(a2, _xpc_event_key_name);
  xpc_set_event();
  uint64_t v3 = qword_100A19FB0;
  if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = +[NSDate date];
    int v5 = 138412546;
    uint64_t v6 = v4;
    __int16 v7 = 2082;
    uint64_t v8 = string;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "com.apple.alarm xpc event handler at %@ for %{public}s", (uint8_t *)&v5, 0x16u);
  }
  if (qword_1009FB798 != -1) {
    dispatch_once(&qword_1009FB798, &stru_1009BF848);
  }
  ++*((_WORD *)off_1009FB790 + 117);
}

void sub_1006D3718(uint64_t a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Reset BLE Scan Configuration Stat", v3, 2u);
  }
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2520) = 0u;
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2488) = 0u;
  *(_OWORD *)(a1 + 2504) = 0u;
  *(_OWORD *)(a1 + 2456) = 0u;
  *(_OWORD *)(a1 + 2472) = 0u;
  *(_OWORD *)(a1 + 2424) = 0u;
  *(_OWORD *)(a1 + 2440) = 0u;
  *(_OWORD *)(a1 + 2392) = 0u;
  *(_OWORD *)(a1 + 2408) = 0u;
  *(_OWORD *)(a1 + 2360) = 0u;
  *(_OWORD *)(a1 + 2376) = 0u;
  *(_DWORD *)(a1 + 2492) = 0xFFFF;
  *(CFAbsoluteTime *)(a1 + 2360) = CFAbsoluteTimeGetCurrent();
  *(_OWORD *)(a1 + 2536) = 0u;
  *(_OWORD *)(a1 + 2552) = 0u;
  *(_OWORD *)(a1 + 2568) = 0u;
  *(_OWORD *)(a1 + 2584) = 0u;
  *(_OWORD *)(a1 + 2600) = 0u;
  *(_OWORD *)(a1 + 2616) = 0u;
  *(_OWORD *)(a1 + 2632) = 0u;
  *(_OWORD *)(a1 + 2648) = 0u;
  *(_OWORD *)(a1 + 2664) = 0u;
  *(_OWORD *)(a1 + 2680) = 0u;
  *(_OWORD *)(a1 + 2696) = 0u;
  *(_OWORD *)(a1 + 2712) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_DWORD *)(a1 + 2668) = 0xFFFF;
  *(CFAbsoluteTime *)(a1 + 2536) = CFAbsoluteTimeGetCurrent();
}

void sub_1006D380C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Reset BLE Scan Stat", v3, 2u);
  }
  *(_OWORD *)(a1 + 3176) = 0u;
  *(_OWORD *)(a1 + 3192) = 0u;
  *(_OWORD *)(a1 + 3144) = 0u;
  *(_OWORD *)(a1 + 3160) = 0u;
  *(_OWORD *)(a1 + 3112) = 0u;
  *(_OWORD *)(a1 + 3128) = 0u;
  *(_OWORD *)(a1 + 3080) = 0u;
  *(_OWORD *)(a1 + 3096) = 0u;
  *(_OWORD *)(a1 + 3048) = 0u;
  *(_OWORD *)(a1 + 3064) = 0u;
  *(_OWORD *)(a1 + 3016) = 0u;
  *(_OWORD *)(a1 + 3032) = 0u;
  *(_OWORD *)(a1 + 2984) = 0u;
  *(_OWORD *)(a1 + 3000) = 0u;
  *(_OWORD *)(a1 + 2952) = 0u;
  *(_OWORD *)(a1 + 2968) = 0u;
  *(_OWORD *)(a1 + 2920) = 0u;
  *(_OWORD *)(a1 + 2936) = 0u;
  *(_OWORD *)(a1 + 2888) = 0u;
  *(_OWORD *)(a1 + 2904) = 0u;
  *(_OWORD *)(a1 + 2856) = 0u;
  *(_OWORD *)(a1 + 2872) = 0u;
  *(_OWORD *)(a1 + 2824) = 0u;
  *(_OWORD *)(a1 + 2840) = 0u;
  *(_OWORD *)(a1 + 2792) = 0u;
  *(_OWORD *)(a1 + 2808) = 0u;
  *(_OWORD *)(a1 + 2760) = 0u;
  *(_OWORD *)(a1 + 2776) = 0u;
  *(_OWORD *)(a1 + 2728) = 0u;
  *(_OWORD *)(a1 + 2744) = 0u;
  *(CFAbsoluteTime *)(a1 + 2728) = CFAbsoluteTimeGetCurrent();
}

void sub_1006D38C4(uint64_t a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Reset ScanCore BLE Connection Scan Stat", v3, 2u);
  }
  *(void *)(a1 + 3248) = 0;
  *(_OWORD *)(a1 + 3232) = 0u;
  *(CFAbsoluteTime *)(a1 + 3232) = CFAbsoluteTimeGetCurrent();
}

double sub_1006D3944(uint64_t a1)
{
  uint64_t v2 = a1 + 710;
  bzero((void *)(a1 + 200), 0x638uLL);
  *(_DWORD *)(a1 + 160) = 5046046;
  BOOL v3 = *(unsigned char *)(a1 + 2104) == 0;
  if (*(unsigned char *)(a1 + 2104)) {
    char v4 = 16;
  }
  else {
    char v4 = 18;
  }
  *(unsigned char *)(a1 + 164) = v4;
  if (v3) {
    char v5 = 14;
  }
  else {
    char v5 = 0;
  }
  *(unsigned char *)(a1 + 165) = v5;
  *(unsigned char *)(a1 + 172) = -1;
  *(_WORD *)(a1 + 170) = 0;
  *(_DWORD *)(a1 + 166) = 100;
  *(void *)(a1 + 181) = 0;
  *(void *)(a1 + 173) = 0;
  *(void *)(a1 + 188) = 0xFCB2160600000000;
  *(_DWORD *)(a1 + 196) = 25690112;
  *(unsigned char *)(a1 + 200) = 2;
  *(unsigned char *)(a1 + 229) = 1;
  *(unsigned char *)(a1 + 202) = 0;
  if (_os_feature_enabled_impl() && _os_feature_enabled_impl())
  {
    *(_DWORD *)(a1 + 260) = 25690112;
    *(_DWORD *)(a1 + 256) = -22407674;
    *(_WORD *)(a1 + 264) = 258;
    *(unsigned char *)(a1 + 292) = 1;
  }
  *(_DWORD *)(a1 + 704) = 5046158;
  BOOL v6 = *(unsigned char *)(a1 + 2104) == 0;
  if (*(unsigned char *)(a1 + 2104)) {
    char v7 = 16;
  }
  else {
    char v7 = 18;
  }
  *(unsigned char *)(a1 + 708) = v7;
  if (v6) {
    char v8 = 14;
  }
  else {
    char v8 = 0;
  }
  *(unsigned char *)(a1 + 709) = v8;
  *(unsigned char *)(a1 + 716) = -1;
  *(_WORD *)(a1 + 714) = 0;
  *(_DWORD *)uint64_t v2 = 100;
  *(void *)(a1 + 725) = 0;
  *(void *)(a1 + 717) = 0;
  *(void *)(a1 + 732) = 0xFCB2160600000000;
  *(_DWORD *)(a1 + 740) = 25690112;
  *(unsigned char *)(a1 + 744) = 2;
  *(_WORD *)(a1 + 772) = 511;
  *(_WORD *)(a1 + 745) = 257;
  *(_DWORD *)(a1 + 1248) = -43051482;
  *(unsigned char *)(a1 + 1260) = -1;
  *(void *)&double result = 13107200;
  *(void *)(v2 + 542) = 13107200;
  *(void *)(a1 + 1269) = 0;
  *(void *)(a1 + 1261) = 0;
  *(_DWORD *)(a1 + 1276) = 0;
  return result;
}

uint64_t sub_1006D3AF4(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 3272;
  do
  {
    uint64_t v4 = 0;
    uint64_t v5 = v3;
    do
    {
      for (uint64_t i = 0; i != 32; i += 16)
      {
        char v7 = (_DWORD *)(v5 + i);
        *(_DWORD *)((char *)v7 + 3) = 0;
        *char v7 = 0;
        v7[128] = 0;
        *(_DWORD *)(v5 + i + 515) = 0;
        uint64_t v8 = v5 + i + 520;
        void v7[2] = 0;
        *(_DWORD *)((char *)v7 + 11) = 0;
        v7[130] = 0;
        *(_DWORD *)(v8 + 3) = 0;
      }
      ++v4;
      v5 += 32;
    }
    while (v4 != 2);
    ++v2;
    v3 += 64;
  }
  while (v2 != 8);
  for (uint64_t j = 0; j != 2; ++j)
  {
    for (uint64_t k = 0; k != 2; ++k)
    {
      uint64_t v11 = 0;
      char v12 = 1;
      do
      {
        char v13 = v12;
        uint64_t v14 = sub_100035F54();
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 632))(v14);
        if ((result & 1) == 0)
        {
          uint64_t v16 = a1 + 32 * j + 16 * k + 8 * v11;
          *(_DWORD *)(v16 + 3528) = 43;
          *(_WORD *)(v16 + 3532) = 0;
          *(unsigned char *)(v16 + 3534) = 0;
          *(_DWORD *)(v16 + 3592) = 16;
          *(_WORD *)(v16 + 3596) = 0;
          *(unsigned char *)(v16 + 3598) = 0;
        }
        char v12 = 0;
        uint64_t v17 = a1 + 32 * j + 16 * k + 8 * v11;
        *(_DWORD *)(v17 + 3656) = 48;
        *(_WORD *)(v17 + 3660) = 0;
        *(unsigned char *)(v17 + 3662) = 0;
        uint64_t v11 = 1;
      }
      while ((v13 & 1) != 0);
    }
  }
  uint64_t v18 = 0;
  *(_DWORD *)(a1 + 3832) = 3145728;
  *(_WORD *)(a1 + 3836) = 0;
  char v19 = 1;
  *(unsigned char *)(a1 + 3838) = 1;
  *(_DWORD *)(a1 + 3840) = 3145728;
  *(_WORD *)(a1 + 3844) = 0;
  *(unsigned char *)(a1 + 3846) = 1;
  do
  {
    uint64_t v20 = a1 + 16 * v18;
    *(_DWORD *)(v20 + 4080) = 2818048;
    *(_WORD *)(v20 + 4084) = 0;
    char v21 = v19;
    *(unsigned char *)(v20 + 4086) = 0;
    *(_DWORD *)(v20 + 4072) = 0;
    *(_WORD *)(v20 + 4076) = 80;
    *(unsigned char *)(v20 + 4078) = 0;
    uint64_t v22 = a1 + 4040 + 16 * v18;
    *(_DWORD *)(v22 + 8) = 524331;
    *(_WORD *)(v22 + 12) = 0;
    *(unsigned char *)(v22 + 14) = 0;
    *(_DWORD *)uint64_t v22 = 43;
    *(_WORD *)(v22 + 4) = 16;
    uint64_t v18 = 1;
    *(unsigned char *)(v22 + 6) = 0;
    char v19 = 0;
  }
  while ((v21 & 1) != 0);
  uint64_t v23 = 0;
  char v24 = 1;
  do
  {
    uint64_t v25 = a1 + 16 * v23;
    *(_DWORD *)(v25 + 4144) = 0x100000;
    *(_WORD *)(v25 + 4148) = 0;
    char v26 = v24;
    *(unsigned char *)(v25 + 4150) = 0;
    *(_DWORD *)(v25 + 4136) = 0;
    *(_WORD *)(v25 + 4140) = 32;
    *(unsigned char *)(v25 + 4142) = 0;
    uint64_t v27 = a1 + 4104 + 16 * v23;
    *(_DWORD *)(v27 + 8) = 524304;
    *(_WORD *)(v27 + 12) = 0;
    *(unsigned char *)(v27 + 14) = 0;
    *(_DWORD *)uint64_t v27 = 16;
    *(_WORD *)(v27 + 4) = 16;
    uint64_t v23 = 1;
    *(unsigned char *)(v27 + 6) = 0;
    char v24 = 0;
  }
  while ((v26 & 1) != 0);
  for (uint64_t m = 0; m != 2; ++m)
  {
    for (uint64_t n = 0; n != 2; ++n)
    {
      uint64_t v30 = 0;
      char v31 = 1;
      do
      {
        uint64_t v32 = a1 + 32 * m + 16 * n + 8 * v30;
        *(_DWORD *)(v32 + 4168) = 32;
        *(_WORD *)(v32 + 4172) = 32;
        *(unsigned char *)(v32 + 4174) = 0;
        *(_DWORD *)(v32 + 3848) = 0;
        char v33 = v31;
        *(_WORD *)(v32 + 3852) = 16;
        *(unsigned char *)(v32 + 3854) = 0;
        uint64_t v30 = 1;
        char v31 = 0;
      }
      while ((v33 & 1) != 0);
    }
  }
  return result;
}

void sub_1006D3FDC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_100793DCC();
  }
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006D4080;
  v3[3] = &unk_100997528;
  _OWORD v3[4] = a1;
  sub_1000197D8(v2, v3);
}

uint64_t sub_1006D4080(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 4386) = 1;
  return result;
}

void sub_1006D4094(uint64_t a1)
{
}

void sub_1006D409C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    if (*(unsigned char *)(a1 + 144)) {
      uint64_t v3 = "On";
    }
    else {
      uint64_t v3 = "Off";
    }
    *(_DWORD *)long long buf = 136446210;
    char v7 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "LeObserver Power : system woke up, screen is %{public}s", buf, 0xCu);
  }
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1006D41B0;
  v5[3] = &unk_100997528;
  _OWORD v5[4] = a1;
  sub_1000197D8(v4, v5);
}

void sub_1006D41B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 4386) = 0;
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006D4234;
  v3[3] = &unk_100997528;
  _OWORD v3[4] = v1;
  sub_100013018(v2, v3);
}

uint64_t sub_1006D4234(uint64_t a1)
{
  return sub_100055B50(*(void *)(a1 + 32), 0);
}

void sub_1006D4240(uint64_t a1)
{
}

unsigned char *sub_1006D4248(uint64_t a1)
{
  char v9 = 0;
  sub_10001B8E0(&v9);
  if (sub_10022A2F0())
  {
    sub_10022688C(0x200000);
    sub_10001B910(&v9);
    uint64_t v2 = 0;
    uint64_t v3 = 167;
    do
    {
      if (*(unsigned char *)(a1 + v3))
      {
        uint64_t v4 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          CFStringRef v5 = @"UNKNOWN";
          if (v2 <= 2u) {
            CFStringRef v5 = off_1009BF9C8[v2];
          }
          *(_DWORD *)long long buf = 138412290;
          CFStringRef v11 = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Destroying stale ADVBUFF(%@):", buf, 0xCu);
        }
        sub_1006D4414(a1, v2);
      }
      ++v2;
      v3 += 544;
    }
    while (v2 != 3);
    *(unsigned char *)(a1 + 4384) = 0;
    uint64_t v6 = sub_100019878();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1006D48E4;
    void v8[3] = &unk_100997528;
    v8[4] = a1;
    sub_1000197D8(v6, v8);
  }
  return sub_10001B8AC(&v9);
}

void sub_1006D43F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

uint64_t sub_1006D4414(uint64_t a1, uint64_t a2)
{
  if (qword_100A14780 != -1) {
    dispatch_once(&qword_100A14780, &stru_1009BF4B8);
  }
  if (a2 < 3)
  {
    uint64_t v6 = a1 + 544 * a2;
    int v8 = *(unsigned __int8 *)(v6 + 167);
    uint64_t v7 = v6 + 167;
    *(unsigned char *)(v7 + 4) = 0;
    *(_WORD *)(v7 + 2) = 0;
    if (v8)
    {
      if (a2 <= 1 && byte_100A14778)
      {
        uint64_t v9 = sub_10003FB34();
        int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 2320))(v9);
        __int16 v31 = 0;
        int v30 = 0;
        if (v10)
        {
          char v11 = v10;
          unint64_t v12 = 0;
          uint64_t v13 = a1 + 544 * a2 + 228;
          do
          {
            if (*(_WORD *)(v13 - 34))
            {
              uint64_t v14 = sub_10003FB34();
              BYTE2(v29) = *(unsigned char *)(v13 - 28);
              LOWORD(v29) = *(_WORD *)(v13 - 30);
              int v15 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *, void, void, void, void, int, uint64_t, uint64_t))(*(void *)v14 + 2800))(v14, a2, *(unsigned __int8 *)(v13 - 36), &v30, *(unsigned __int8 *)(v13 - 35), *(unsigned __int16 *)(v13 - 34), *(unsigned __int8 *)(v13 - 32), *(unsigned __int8 *)(v13 - 31), v29, v13 - 27, v13);
              if (v15)
              {
                int v16 = v15;
                uint64_t v17 = qword_100A19E90;
                if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v18 = off_1009BF9C8[(char)a2];
                  *(_DWORD *)long long buf = 138543618;
                  char v33 = v18;
                  __int16 v34 = 1024;
                  int v35 = v16;
                  _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "ADVBUFF(%{public}@): Failed to remove ext buffer adv rule: %d", buf, 0x12u);
                }
              }
              else
              {
                --v11;
              }
            }
            if (v12 > 6) {
              break;
            }
            ++v12;
            v13 += 64;
          }
          while (v11);
        }
        uint64_t v19 = sub_10003FB34();
        (*(void (**)(uint64_t, uint64_t))(*(void *)v19 + 2808))(v19, a2);
      }
      uint64_t v20 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        char v21 = off_1009BF9C8[(char)a2];
        *(_DWORD *)long long buf = 138543362;
        char v33 = v21;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): Destroying ADV buffer", buf, 0xCu);
      }
      uint64_t v24 = sub_10003FB34();
      uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void, void))(*(void *)v24 + 2848))(v24, a2, 0, 0);
      uint64_t v25 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        char v26 = off_1009BF9C8[(char)a2];
        *(_DWORD *)long long buf = 138543618;
        char v33 = v26;
        __int16 v34 = 1024;
        int v35 = v5;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): advBufControl Disabled returned %d", buf, 0x12u);
      }
      if (v5)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100793E00();
        }
      }
      else
      {
        *(unsigned char *)uint64_t v7 = 0;
        uint64_t v27 = a1 + 544 * a2;
        *(unsigned char *)(v27 + 168) = 0;
        *(unsigned char *)(v27 + 172) = -1;
      }
    }
    else
    {
      uint64_t v22 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        uint64_t v23 = off_1009BF9C8[(char)a2];
        *(_DWORD *)long long buf = 138543362;
        char v33 = v23;
        uint64_t v5 = 12;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): destroyADVBuffer - not created", buf, 0xCu);
      }
      else
      {
        return 12;
      }
    }
  }
  else
  {
    uint64_t v4 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HW ADV Buffer handle out of range (%d), ignoring agent request", buf, 8u);
    }
    return 7;
  }
  return v5;
}

void sub_1006D48E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(_DWORD *)(v1 + 1960) = 1;
  *(void *)(v1 + 1840) = 0;
  *(_DWORD *)(v1 + 1847) = 0;
  uint64_t v2 = sub_10003FB34();
  sub_100353FC0(v2, v1 + 8);
  uint64_t v3 = *(void *)sub_10003FB34();
  (*(void (**)(void))(v3 + 632))();
  uint64_t v4 = *(void *)sub_10003FB34();
  (*(void (**)(void))(v4 + 984))();
  int v15 = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  uint64_t v5 = (void (***)(void, void **))sub_100370758();
  (**v5)(v5, &v15);
  uint64_t v6 = (uint64_t *)v15;
  if (v15 != v16)
  {
    while (1)
    {
      uint64_t v7 = *v6;
      v22[0] = 0;
      v22[1] = 0;
      uint64_t v8 = sub_100370758();
      int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v8 + 96))(v8, v7, 3, v22);
      int v10 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v7, __p);
        char v11 = __p;
        if (v14 < 0) {
          char v11 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446466;
        uint64_t v19 = v11;
        __int16 v20 = 1024;
        int v21 = v9;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Read encryption key for device %{public}s : result %d", buf, 0x12u);
        if (v14 < 0) {
          break;
        }
      }
      if (!v9) {
        goto LABEL_7;
      }
LABEL_9:
      if (++v6 == v16) {
        goto LABEL_10;
      }
    }
    operator delete(__p[0]);
    if (v9) {
      goto LABEL_9;
    }
LABEL_7:
    LOBYTE(__p[0]) = 0;
    *(_DWORD *)((char *)__p + 1) = *(_DWORD *)(v7 + 128);
    *(_WORD *)((char *)__p + 5) = *(_WORD *)(v7 + 132);
    sub_1006D4BEC(v1, (uint64_t)__p, (uint64_t)v22);
    goto LABEL_9;
  }
LABEL_10:
  uint64_t v12 = sub_10003FFD4();
  sub_10026B638(v12 + 368, v1 + 40);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BF7A8);
  }
  sub_1004E219C((uint64_t)off_1009F8068, v1 + 2216);
  sub_1006D4FDC(v1);
  *(unsigned char *)(v1 + 4383) = 0;
  if (v15)
  {
    int v16 = (uint64_t *)v15;
    operator delete(v15);
  }
}

void sub_1006D4BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006D4BEC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    if (a3)
    {
      uint64_t v5 = a2 + 1;
      uint64_t v6 = sub_1006AD3F0();
      if (![v6 length])
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100793F00();
        }
        goto LABEL_42;
      }
      uint64_t v7 = +[NSData dataWithBytes:a3 length:16];
      [*(id *)(a1 + 2088) setObject:v7 forKeyedSubscript:v6];

      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009BF8C8);
      }
      LODWORD(v20) = *(_DWORD *)v5;
      WORD2(v20) = *(_WORD *)(v5 + 4);
      uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v20, 1);
      if (!v8)
      {
LABEL_42:

        return;
      }
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      uint64_t v22 = 0;
      if (!sub_10047FF14(v8, (uint64_t)&v20)) {
        goto LABEL_41;
      }
      uint64_t v9 = v20;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3);
      if (v10 < 4) {
        goto LABEL_41;
      }
      char v11 = (void *)(v20 + 72);
      if (*(char *)(v20 + 95) < 0)
      {
        if (*(void *)(v20 + 80) <= 1uLL) {
          goto LABEL_23;
        }
        char v11 = (void *)*v11;
      }
      else if (*(unsigned __int8 *)(v20 + 95) <= 1u)
      {
        goto LABEL_23;
      }
      uint64_t v12 = +[NSString stringWithUTF8String:v11];
      if ([v12 length])
      {
        uint64_t v13 = +[NSData dataWithBytes:a3 length:16];
        [*(id *)(a1 + 2088) setObject:v13 forKeyedSubscript:v12];
      }
      uint64_t v9 = v20;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3);
LABEL_23:
      if (v10 < 9) {
        goto LABEL_41;
      }
      char v14 = (void *)(v9 + 192);
      if (*(char *)(v9 + 215) < 0)
      {
        if (*(void *)(v9 + 200) <= 1uLL) {
          goto LABEL_32;
        }
        char v14 = (void *)*v14;
      }
      else if (*(unsigned __int8 *)(v9 + 215) <= 1u)
      {
        goto LABEL_32;
      }
      int v15 = +[NSString stringWithUTF8String:v14];
      if ([v15 length])
      {
        int v16 = +[NSData dataWithBytes:a3 length:16];
        [*(id *)(a1 + 2088) setObject:v16 forKeyedSubscript:v15];
      }
      uint64_t v9 = v20;
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v21 - v20) >> 3);
LABEL_32:
      if (v10 >= 0xA)
      {
        uint64_t v17 = (void *)(v9 + 216);
        if ((*(char *)(v9 + 239) & 0x80000000) == 0)
        {
          if (*(unsigned __int8 *)(v9 + 239) <= 1u) {
            goto LABEL_41;
          }
LABEL_38:
          uint64_t v18 = +[NSString stringWithUTF8String:v17];
          if ([v18 length])
          {
            uint64_t v19 = +[NSData dataWithBytes:a3 length:16];
            [*(id *)(a1 + 2088) setObject:v19 forKeyedSubscript:v18];
          }
          goto LABEL_41;
        }
        if (*(void *)(v9 + 224) > 1uLL)
        {
          uint64_t v17 = (void *)*v17;
          goto LABEL_38;
        }
      }
LABEL_41:
      uint64_t v23 = (void **)&v20;
      sub_100051568(&v23);
      goto LABEL_42;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100793ECC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
  {
    sub_100793E98();
  }
}

void sub_1006D4F68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100051568(&a12);

  _Unwind_Resume(a1);
}

id sub_1006D4FDC(uint64_t a1)
{
  sub_1000486F0(a1 + 4328, *(void **)(a1 + 4336));
  *(void *)(a1 + 4328) = a1 + 4336;
  *(void *)(a1 + 4344) = 0;
  *(void *)(a1 + 4336) = 0;
  sub_1000486F0(a1 + 4304, *(void **)(a1 + 4312));
  *(void *)(a1 + 4304) = a1 + 4312;
  *(void *)(a1 + 4320) = 0;
  *(void *)(a1 + 4312) = 0;
  [*(id *)(a1 + 4352) removeAllObjects];
  [*(id *)(a1 + 4360) removeAllObjects];
  id result = [*(id *)(a1 + 4368) removeAllObjects];
  *(_DWORD *)(a1 + 4376) = 0;
  return result;
}

unsigned char *sub_1006D5060(uint64_t a1)
{
  return sub_1006D4248(a1 - 16);
}

void sub_1006D5068(uint64_t a1)
{
  if (qword_100A14738 != -1) {
    dispatch_once(&qword_100A14738, &stru_1009BF120);
  }
  if (!*(void *)(a1 + 2200)) {
    sub_1003733D8();
  }
}

void sub_1006D5188(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v4, "POWER");
  sub_10004191C(__p, "ForceWakeScanForClient");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A14730);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1006D522C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006D5260(uint64_t a1)
{
  if (qword_100A14748 != -1) {
    dispatch_once(&qword_100A14748, &stru_1009BF140);
  }
  uint64_t v2 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 3472))(v2) && !*(void *)(a1 + 2208)) {
    sub_1003733D8();
  }
  sub_1006D549C(a1);
}

void sub_1006D53C4(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v4, "POWER");
  sub_10004191C(__p, "ForceWakeScanConfig");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A14740);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1006D5468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006D549C(uint64_t a1)
{
  if (*(double *)(a1 + 2712) == 0.0)
  {
    *(CFAbsoluteTime *)(a1 + 2712) = CFAbsoluteTimeGetCurrent();
    unsigned int v2 = *(unsigned __int8 *)(a1 + 144);
    *(unsigned char *)(a1 + 2720) = v2;
    ++*(_DWORD *)(a1 + 176 * v2 + 2448);
    if (*(unsigned char *)(a1 + 1841))
    {
      uint64_t v3 = a1 + 176 * v2;
      ++*(_DWORD *)(v3 + 2452);
      uint64_t v4 = (_DWORD *)(v3 + 2456);
    }
    else
    {
      uint64_t v4 = (_DWORD *)(a1 + 176 * v2 + 2464);
    }
    ++*v4;
    if (*(unsigned char *)(a1 + 1843)) {
      ++*(_DWORD *)(a1 + 176 * v2 + 2472);
    }
    if (*(unsigned char *)(a1 + 1844)) {
      ++*(_DWORD *)(a1 + 176 * v2 + 2480);
    }
    if (*(unsigned char *)(a1 + 1845)) {
      ++*(_DWORD *)(a1 + 176 * v2 + 2484);
    }
    if (*(unsigned char *)(a1 + 1846)) {
      ++*(_DWORD *)(a1 + 176 * v2 + 2476);
    }
    if (*(unsigned char *)(a1 + 1847)) {
      ++*(_DWORD *)(a1 + 176 * v2 + 2488);
    }
    if (*(unsigned char *)(a1 + 2721)) {
      ++*(_DWORD *)(a1 + 176 * v2 + 2508);
    }
    if (*(unsigned char *)(a1 + 2722)) {
      ++*(_DWORD *)(a1 + 176 * v2 + 2520);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
  {
    sub_100793F34();
  }
}

unsigned char *sub_1006D5614(uint64_t a1)
{
  unsigned int v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeObserver::stackWillStop enter", buf, 2u);
  }
  char v7 = 0;
  sub_10001B8E0(&v7);
  if (sub_10022A2F0())
  {
    sub_10022688C(0);
    sub_10001B910(&v7);
    uint64_t v3 = sub_100019878();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_1006D5758;
    uint64_t v6[3] = &unk_100997528;
    void v6[4] = a1;
    sub_1000197D8(v3, v6);
    uint64_t v4 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "LeObserver::stackWillStop exit", buf, 2u);
    }
  }
  return sub_10001B8AC(&v7);
}

void sub_1006D5744(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1006D5758(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_10003FFD4();
  sub_1002C4188(v2 + 368, v1 + 40);
  uint64_t v3 = *(void *)sub_10003FB34();
  (*(void (**)(void))(v3 + 632))();
  uint64_t v4 = sub_10003FB34();
  sub_100354028(v4, v1 + 8);
  sub_1006D58DC(v1);
  char v5 = *(void **)(v1 + 2112);
  *(void *)(v1 + 2112) = 0;

  uint64_t v6 = *(void **)(v1 + 2120);
  *(void *)(v1 + 2120) = 0;

  *(void *)(v1 + 1960) = 0;
  char v7 = *(void **)(v1 + 2040);
  uint64_t v8 = (void *)(v1 + 2048);
  if (v7 != (void *)(v1 + 2048))
  {
    do
    {
      uint64_t v9 = v7[5];
      if (v9) {
        (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      }
      unint64_t v10 = (void *)v7[1];
      if (v10)
      {
        do
        {
          char v11 = v10;
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          char v11 = (void *)v7[2];
          BOOL v12 = *v11 == (void)v7;
          char v7 = v11;
        }
        while (!v12);
      }
      char v7 = v11;
    }
    while (v11 != v8);
  }
  sub_1000486F0(v1 + 2040, *(void **)(v1 + 2048));
  *(void *)(v1 + 2040) = v8;
  *(_OWORD *)(v1 + 2048) = 0u;
  sub_1006F5CE0(v1 + 2064, *(void **)(v1 + 2072));
  *(void *)(v1 + 2064) = v1 + 2072;
  *(void *)(v1 + 2080) = 0;
  *(void *)(v1 + 2072) = 0;
  sub_1000557F8(v1);
  sub_1006D5B0C((dispatch_object_t *)v1);
  sub_100054AA0(v1);

  sub_1004EF138(v1 + 56);
}

uint64_t sub_1006D58DC(uint64_t a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Destroying match table for all registered types", buf, 2u);
  }
  uint64_t v3 = *(void **)(a1 + 1816);
  uint64_t v17 = a1;
  uint64_t v4 = (void *)(a1 + 1824);
  if (v3 != (void *)(a1 + 1824))
  {
    char v5 = (uint64_t **)(a1 + 1816);
    do
    {
      int v6 = *((unsigned __int8 *)v3 + 28);
      char v7 = *((unsigned char *)v3 + 29);
      int v8 = *((unsigned __int16 *)v3 + 15);
      int v9 = *((unsigned __int16 *)v3 + 18);
      __int16 v10 = *((_WORD *)v3 + 19);
      char v11 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v8;
        __int16 v20 = 1024;
        int v21 = v6;
        __int16 v22 = 1024;
        int v23 = v9;
        _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "handle:%d type:%d length:%d setCreated(false) setEnabled(false)", buf, 0x14u);
      }
      unsigned __int8 v18 = v8;
      *(void *)long long buf = &v18;
      BOOL v12 = sub_1006F620C(v5, &v18, (uint64_t)&unk_1007BE9D0, (char **)buf);
      *((unsigned char *)v12 + 28) = v6;
      *((unsigned char *)v12 + 29) = v7;
      *((_WORD *)v12 + 15) = v8;
      *((_DWORD *)v12 + 8) = 0;
      *((_WORD *)v12 + 18) = v9;
      *((_WORD *)v12 + 19) = v10;
      uint64_t v13 = (void *)v3[1];
      if (v13)
      {
        do
        {
          char v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void *)v3[2];
          BOOL v15 = *v14 == (void)v3;
          uint64_t v3 = v14;
        }
        while (!v15);
      }
      uint64_t v3 = v14;
    }
    while (v14 != v4);
  }
  if (qword_1009F85E8 != -1) {
    dispatch_once(&qword_1009F85E8, &stru_1009BF808);
  }
  sub_1003C5CB4(qword_1009F85E0, &off_1009E18C0);
  *(unsigned char *)(v17 + 1855) = 0;
  sub_1006E7894((double *)v17, 22, 0);
  return 0;
}

uint64_t sub_1006D5B0C(dispatch_object_t *a1)
{
  uint64_t v2 = qword_100A19FB0;
  if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)char v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Disarming contactTracing timers", v7, 2u);
  }
  if (qword_1009FB798 != -1) {
    dispatch_once(&qword_1009FB798, &stru_1009BF848);
  }
  sub_10044E870((uint64_t)off_1009FB790);
  sub_1006D92DC((uint64_t)a1);
  sub_1006EB604((uint64_t)a1);
  uint64_t v3 = a1[284];
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(a1[284]);
    a1[284] = 0;
  }
  uint64_t v4 = a1[282];
  if (v4)
  {
    dispatch_source_cancel(v4);
    dispatch_release(a1[282]);
    a1[282] = 0;
  }
  char v5 = a1[283];
  if (v5)
  {
    dispatch_source_cancel(v5);
    dispatch_release(a1[283]);
    a1[283] = 0;
  }
  return xpc_set_event();
}

unsigned char *sub_1006D5C1C(uint64_t a1)
{
  return sub_1006D5614(a1 - 16);
}

void sub_1006D5C24(uint64_t a1, long long *a2)
{
  long long v2 = a2[1];
  long long v5 = *a2;
  long long v6 = v2;
  long long v7 = a2[2];
  uint64_t v8 = *((void *)a2 + 6);
  uint64_t v3 = sub_100019878();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1006D5CD4;
  v4[3] = &unk_1009B7470;
  sub_100013018(v3, v4);
}

void sub_1006D5CD4(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  v33[0] = *(_OWORD *)(a1 + 32);
  v33[1] = v2;
  long long v34 = *(_OWORD *)(a1 + 64);
  uint64_t v35 = *(void *)(a1 + 80);
  uint64_t v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_100794104(a1 + 32, v3);
  }
  unsigned int v4 = BYTE7(v34);
  long long v5 = qword_100A19E90;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG);
  if (BYTE7(v34))
  {
    if (v6)
    {
      char v11 = CUPrintAddress();
      *(_DWORD *)long long buf = 138413570;
      uint64_t v19 = v11;
      __int16 v20 = 1024;
      int v21 = BYTE7(v34);
      __int16 v22 = 1040;
      int v23 = 31;
      __int16 v24 = 2096;
      uint64_t v25 = (char *)v33 + 8;
      __int16 v26 = 1024;
      int v27 = SBYTE14(v34);
      __int16 v28 = 1024;
      int v29 = HIBYTE(v34);
      _os_log_debug_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEBUG, "aopReceivedDeviceFoundEvent: Parsing entry, address:%@ len:%d payload:%.31P rssi:%d channel:%d", buf, 0x2Eu);

      unsigned int v4 = BYTE7(v34);
    }
    if (v4 < 0x20)
    {
      bzero(buf, 0x1788uLL);
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v13 = 0u;
      sub_100008A18((uint64_t)&v13 + 2, (uint64_t)&v34 + 8, 6uLL);
      unint64_t v7 = ((unint64_t)BYTE2(v13) << 40) | ((unint64_t)BYTE3(v13) << 32) | ((unint64_t)BYTE4(v13) << 24) | ((unint64_t)BYTE5(v13) << 16) | ((unint64_t)BYTE6(v13) << 8) | BYTE7(v13);
      if (v7 && (!HIWORD(v7) || HIWORD(v7) == 1 && (BYTE2(v13) & 0xC0) != 0x80))
      {
        LOWORD(v13) = 256;
        WORD4(v13) = BYTE7(v34);
        *(void *)&long long v14 = (char *)v33 + 8;
        BYTE11(v15) = 0;
        BYTE8(v14) = BYTE14(v34);
        char v12 = 0;
        sub_10001B8E0(&v12);
        sub_100058C58((unsigned __int8 *)&v13, (uint64_t)buf, v9, v10);
        sub_10001B910(&v12);
        BYTE2(v21) = 0;
        char v31 = 0;
        char v32 = 1;
        char v30 = 0;
        sub_1000105D0();
      }
      uint64_t v8 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100794070(v7, v8);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
    {
      sub_100794004();
    }
  }
  else if (v6)
  {
    sub_100793FD0();
  }
}

void sub_1006D5FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1006D5FDC(uint64_t a1, void *a2)
{
  unsigned int v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 3);
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AOPBTBUFF: Read Event with %lu advertisements", (uint8_t *)&buf, 0xCu);
  }
  long long buf = 0uLL;
  uint64_t v15 = 0;
  sub_1003C84B4(&buf, (uint64_t)a2);
  uint64_t v6 = sub_100019878();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  void v10[2] = sub_1006D61D4;
  v10[3] = &unk_1009BF160;
  void v10[4] = a1;
  std::string __p = 0;
  long long __dst = 0;
  uint64_t v13 = 0;
  unint64_t v7 = (const void *)buf;
  int64_t v8 = *((void *)&buf + 1) - buf;
  if (*((void *)&buf + 1) != (void)buf)
  {
    sub_1003C8530(&__p, 0x6DB6DB6DB6DB6DB7 * (v8 >> 3));
    uint8x8_t v9 = (char *)__dst;
    memmove(__dst, v7, v8);
    long long __dst = &v9[8 * (v8 >> 3)];
  }
  sub_100013018(v6, v10);
  if (__p)
  {
    long long __dst = __p;
    operator delete(__p);
  }
  if ((void)buf)
  {
    *((void *)&buf + 1) = buf;
    operator delete((void *)buf);
  }
}

void sub_1006D6198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, void *a17, uint64_t a18)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006D61D4(uint64_t a1, uint64_t a2)
{
  long long v2 = (void *)__chkstk_darwin(a1, a2);
  uint64_t v35 = (unsigned __int8 *)v2[4];
  uint64_t v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "AOPBTBUFF: Read Event unpack devices", buf, 2u);
  }
  uint64_t v4 = v2[5];
  if (v2[6] != v4)
  {
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 39;
    do
    {
      unsigned int v8 = *(unsigned __int8 *)(v4 + v7);
      if (v8 < 0x20)
      {
        bzero(buf, 0x1788uLL);
        long long v40 = 0u;
        long long v41 = 0u;
        long long v38 = 0u;
        long long v39 = 0u;
        long long v37 = 0u;
        sub_100008A18((uint64_t)&v37 + 2, v4 + v7 + 1, 6uLL);
        BYTE1(v37) = 1;
        uint64_t v10 = BYTE2(v37);
        uint64_t v11 = BYTE3(v37);
        uint64_t v12 = BYTE4(v37);
        uint64_t v13 = BYTE5(v37);
        uint64_t v14 = BYTE6(v37);
        uint64_t v15 = BYTE7(v37);
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009BF868);
        }
        unint64_t v16 = (v11 << 32) | (v10 << 40) | (v12 << 24) | (v13 << 16) | (v14 << 8) | v15 | 0x1000000000000;
        if (!sub_100714E30(qword_1009F7EC8, v16, (uint64_t)&v37 + 1)
          && (unint64_t v16 = ((unint64_t)BYTE2(v37) << 40) | ((unint64_t)BYTE3(v37) << 32) | ((unint64_t)BYTE4(v37) << 24) | ((unint64_t)BYTE5(v37) << 16) | ((unint64_t)BYTE6(v37) << 8) | BYTE7(v37) | ((unint64_t)BYTE1(v37) << 48)) == 0
          || HIWORD(v16) && (HIWORD(v16) == 1 ? (BOOL v17 = (v16 & 0xC00000000000) == 0x800000000000) : (BOOL v17 = 1), v17))
        {
          unsigned __int8 v18 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
          {
            sub_10004BDF8();
            p_p = &__p;
            if (SBYTE3(v48) < 0) {
              p_p = __p;
            }
            *(_DWORD *)int v42 = 136315138;
            *(void *)&v42[4] = p_p;
            _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "AOPBTBUFF: Remote Bluetooth address \"%s\" is invalid!", v42, 0xCu);
            if (SBYTE3(v48) < 0) {
              operator delete(__p);
            }
          }
        }
        else
        {
          __int16 v20 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
          {
            uint64_t v21 = *(void *)(v2[5] + v7 - 39);
            sub_10004BDF8();
            int v22 = v43;
            int v23 = *(unsigned char **)v42;
            int v24 = *(unsigned __int8 *)(v2[5] + v7);
            uint64_t v25 = CUPrintHex();
            __int16 v26 = (void *)v25;
            int v27 = v42;
            if (v22 < 0) {
              int v27 = v23;
            }
            int v28 = *(char *)(v2[5] + v7 + 7);
            LODWORD(__p) = 67110402;
            HIDWORD(__p) = v6;
            __int16 v45 = 2048;
            uint64_t v46 = v21;
            __int16 v47 = 2080;
            long long v48 = v27;
            __int16 v49 = 1024;
            int v50 = v24;
            __int16 v51 = 2112;
            uint64_t v52 = v25;
            __int16 v53 = 1024;
            int v54 = v28;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "AOPBTBUFF: Parsing entry %d, TIMESTAMP %f, ADDR %s, LEN %d, PAYLOAD %@, RSSI %3d", (uint8_t *)&__p, 0x32u);
            if (v43 < 0) {
              operator delete(*(void **)v42);
            }
          }
        }
        LOBYTE(v37) = 3;
        int v29 = (unsigned __int8 *)(v2[5] + v7);
        WORD4(v37) = *v29;
        BYTE8(v38) = v29[7];
        *(void *)&long long v38 = v29 - 31;
        BYTE11(v39) = 0;
        LOBYTE(__p) = 0;
        sub_10001B8E0(&__p);
        sub_100058C58((unsigned __int8 *)&v37, (uint64_t)buf, v30, v31);
        sub_10001B910(&__p);
        char v57 = 0;
        uint64_t v32 = v2[5];
        uint64_t v59 = *(void *)(v32 + v7 - 39);
        if (*(void *)(v32 + v7 + 9)) {
          uint64_t v60 = *(void *)(v32 + v7 + 9);
        }
        char v58 = *(unsigned char *)(v32 + v7 + 8);
        uint64_t v33 = (unsigned __int128)((v2[6] - v32) * (__int128)0x4924924924924925) >> 64;
        BOOL v61 = v5 + (v33 >> 4) + ((unint64_t)v33 >> 63) > 1;
        char v62 = 1;
        sub_1000105D0();
      }
      uint8x8_t v9 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        unsigned int v56 = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Ignoring invalid data length %d", buf, 8u);
      }
      ++v6;
      uint64_t v4 = v2[5];
      v7 += 56;
      --v5;
    }
    while (0x6DB6DB6DB6DB6DB7 * ((v2[6] - v4) >> 3) > v6);
  }
  uint64_t v34 = sub_100019878();
  v36[0] = _NSConcreteStackBlock;
  v36[1] = 3221225472;
  void v36[2] = sub_1006D6790;
  v36[3] = &unk_100997528;
  v36[4] = v35;
  sub_100013018(v34, v36);
  v35[1854] = 0;
  v35[1864] = 0;
  sub_10000FE84(v35);
}

void sub_1006D675C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006D6790()
{
}

void sub_1006D6798()
{
  uint64_t v0 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "AOPBTBUFF Sending empty event", buf, 2u);
  }
  operator new();
}

void sub_1006D6A84(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
}

void *sub_1006D6B20(uint64_t a1, uint64_t a2)
{
  return sub_1003C84B4((void *)(a1 + 40), a2 + 40);
}

void sub_1006D6B2C(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_1006D6B44(uint64_t a1, void *a2)
{
}

void sub_1006D6B4C(uint64_t a1, uint64_t a2)
{
  if (sub_1006D6BF8(a1, a2))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_1007943A0();
    }
  }
  else if (sub_1006D6F68(a1, a2) && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
  {
    sub_10079432C();
  }
}

uint64_t sub_1006D6BF8(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Destroying match table for type %d", buf, 8u);
    uint64_t v4 = qword_100A19E90;
  }
  uint64_t v5 = *(void **)(a1 + 1816);
  if (v5 == (void *)(a1 + 1824)) {
    goto LABEL_24;
  }
  while (1)
  {
    int v6 = *((unsigned __int8 *)v5 + 28);
    int v7 = *((unsigned __int16 *)v5 + 15);
    int v8 = *((unsigned __int16 *)v5 + 16);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
    {
      int v12 = *((unsigned __int16 *)v5 + 18);
      BOOL v13 = *((unsigned __int16 *)v5 + 17) != 0;
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v7;
      __int16 v26 = 1024;
      int v27 = v6;
      __int16 v28 = 1024;
      int v29 = v12;
      __int16 v30 = 1024;
      BOOL v31 = v8 != 0;
      __int16 v32 = 1024;
      BOOL v33 = v13;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "handle:%d type:%d length:%d isCreated:%d isEnabled:%d", buf, 0x20u);
      uint64_t v4 = qword_100A19E90;
    }
    BOOL v9 = v6 != a2 || v8 == 0;
    if (!v9) {
      break;
    }
    uint64_t v10 = (void *)v5[1];
    if (v10)
    {
      do
      {
        uint64_t v11 = v10;
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        uint64_t v11 = (void *)v5[2];
        BOOL v9 = *v11 == (void)v5;
        uint64_t v5 = v11;
      }
      while (!v9);
    }
    uint64_t v5 = v11;
    if (v11 == (void *)(a1 + 1824)) {
      goto LABEL_24;
    }
  }
  if (!v7)
  {
LABEL_24:
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      sub_100794414();
    }
    return 3;
  }
  else
  {
    unsigned __int8 v24 = v7;
    *(void *)long long buf = &v24;
    uint64_t v14 = sub_1006F620C((uint64_t **)(a1 + 1816), &v24, (uint64_t)&unk_1007BE9D0, (char **)buf);
    __int16 v15 = *((_WORD *)v14 + 14);
    uint64_t v16 = *((unsigned __int16 *)v14 + 15);
    int v17 = *((_DWORD *)v14 + 9);
    unsigned __int8 v24 = v7;
    *(void *)long long buf = &v24;
    unsigned __int8 v18 = sub_1006F620C((uint64_t **)(a1 + 1816), &v24, (uint64_t)&unk_1007BE9D0, (char **)buf);
    *((_WORD *)v18 + 14) = v15;
    *((_WORD *)v18 + 15) = v16;
    *((_DWORD *)v18 + 8) = 0;
    *((_DWORD *)v18 + 9) = v17;
    uint64_t v19 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a2;
      __int16 v26 = 1024;
      int v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Destroying match table for type %d with handle %d", buf, 0xEu);
    }
    uint64_t v20 = sub_10003FB34();
    uint64_t v21 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v20 + 2848))(v20, v16, 0, 1);
    if (v21)
    {
      int v22 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = a2;
        __int16 v26 = 1024;
        int v27 = v7;
        __int16 v28 = 1024;
        int v29 = v21;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Failed to destroy match table for type %d on handle %d: %d", buf, 0x14u);
      }
    }
    else
    {
      sub_1006E7894((double *)a1, a2, 0);
    }
  }
  return v21;
}

uint64_t sub_1006D6F68(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v27 = 0;
  if (a2)
  {
    uint64_t v4 = 7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
      sub_1007945C8();
    }
    uint64_t v4 = 3;
  }
  uint64_t v5 = sub_1006E741C(a1, a2, 1, &v27);
  if (v5)
  {
    uint64_t v6 = v5;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100794560();
    }
  }
  else
  {
    uint64_t v7 = v27;
    unsigned __int8 v28 = v27;
    *(void *)long long buf = &v28;
    int v8 = sub_1006F620C((uint64_t **)(a1 + 1816), &v28, (uint64_t)&unk_1007BE9D0, (char **)buf);
    __int16 v25 = *((_WORD *)v8 + 15);
    char v23 = *((unsigned char *)v8 + 29);
    __int16 v24 = *((_WORD *)v8 + 17);
    BOOL v9 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Creating an AOP match table with handle %d for type %d", buf, 0xEu);
    }
    if (a2 == 22 && qword_100A14770 != -1) {
      dispatch_once(&qword_100A14770, &stru_1009BF498);
    }
    if (qword_1009F85E8 != -1) {
      dispatch_once(&qword_1009F85E8, &stru_1009BF808);
    }
    char v10 = sub_1003C5C2C(qword_1009F85E0, a2);
    if (a2 == 22 && *(double *)(a1 + 1856) == 0.0)
    {
      +[NSDate timeIntervalSinceReferenceDate];
      *(void *)(a1 + 1856) = v11;
    }
    uint64_t v12 = sub_10003FB34();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, char, void, _BYTE, void, void, _BYTE))(*(void *)v12 + 2824))(v12, v7, v4, 255, 76, a2, 0, 1, v10, 0, 0, 0, 0, 0);
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_1007944F0();
      }
    }
    else
    {
      long long v48 = 0u;
      memset(v49, 0, sizeof(v49));
      long long v46 = 0u;
      long long v47 = 0u;
      long long v44 = 0u;
      long long v45 = 0u;
      long long v42 = 0u;
      long long v43 = 0u;
      long long v40 = 0u;
      long long v41 = 0u;
      long long v38 = 0u;
      long long v39 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v37 = 0u;
      buf[6] = 2;
      uint64_t v13 = sub_10003FB34();
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, void, void, uint8_t *))(*(void *)v13 + 2872))(v13, v7, 0, 0, buf);
      if (v6)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100794480();
        }
      }
      else
      {
        if (a2 == 22)
        {
          __int16 v14 = 1;
        }
        else if (a2 == 7)
        {
          __int16 v14 = 4;
        }
        else if (a2)
        {
          __int16 v14 = 0;
        }
        else
        {
          __int16 v14 = 2;
        }
        unsigned __int8 v26 = v25;
        int v29 = (char *)&v26;
        __int16 v15 = sub_1006F620C((uint64_t **)(a1 + 1816), &v26, (uint64_t)&unk_1007BE9D0, &v29);
        *((unsigned char *)v15 + 28) = a2;
        *((unsigned char *)v15 + 29) = v23;
        *((_WORD *)v15 + 15) = v25;
        *((_WORD *)v15 + 16) = 1;
        *((_WORD *)v15 + 17) = v24;
        *((_WORD *)v15 + 18) = 1;
        *((_WORD *)v15 + 19) = v14;
        BOOL v16 = a2 != 22;
        if (*(unsigned char *)(a1 + 1855)) {
          BOOL v16 = 1;
        }
        if (!v16)
        {
          if (qword_1009F85E8 != -1) {
            dispatch_once(&qword_1009F85E8, &stru_1009BF808);
          }
          uint64_t v17 = qword_1009F85E0;
          v34[0] = @"type";
          v34[1] = @"descriptor";
          v35[0] = &off_1009E1208;
          CFStringRef v32 = @"conf";
          CFStringRef v30 = @"appleType";
          unsigned __int8 v18 = +[NSNumber numberWithUnsignedChar:22];
          BOOL v31 = v18;
          uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v31 forKeys:&v30 count:1];
          BOOL v33 = v19;
          uint64_t v20 = +[NSDictionary dictionaryWithObjects:&v33 forKeys:&v32 count:1];
          v35[1] = v20;
          uint64_t v21 = +[NSDictionary dictionaryWithObjects:v35 forKeys:v34 count:2];
          sub_1003C5CB4(v17, v21);

          *(unsigned char *)(a1 + 1855) = 1;
        }
      }
    }
  }
  return v6;
}

void sub_1006D7494(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006D74D0(uint64_t a1, uint64_t a2)
{
}

void sub_1006D74D8(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t v6 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ADVBUFF advBufferEvent length=%d", buf, 8u);
  }
  *(void *)long long buf = 0;
  uint64_t v13 = buf;
  uint64_t v14 = 0x2020000000;
  char v15 = 5;
  if (a3 == 244)
  {
    char v7 = 2;
    goto LABEL_7;
  }
  if (a3 == 219)
  {
    char v7 = *(unsigned char *)(a1 + 1796);
LABEL_7:
    char v15 = v7;
    int v8 = malloc_type_malloc(a3, 0x806DDABAuLL);
    memcpy(v8, a2, a3);
    uint64_t v9 = sub_100019878();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1006D76A4;
    v10[3] = &unk_1009BF198;
    void v10[4] = buf;
    void v10[5] = a1;
    __int16 v11 = a3;
    void v10[6] = v8;
    sub_100013018(v9, v10);
    goto LABEL_10;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
    sub_1007945FC();
  }
LABEL_10:
  _Block_object_dispose(buf, 8);
}

void sub_1006D7684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
}

void sub_1006D76A4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  uint64_t v3 = *(void *)(v2 + 40);
  uint64_t v4 = (os_log_t *)&qword_100A19E90;
  uint64_t v5 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    unint64_t v6 = *(char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
    if (v6 > 2) {
      CFStringRef v7 = @"UNKNOWN";
    }
    else {
      CFStringRef v7 = off_1009BF9C8[v6];
    }
    int v8 = *(unsigned __int8 *)(v3 + 1260);
    int v9 = *(unsigned __int8 *)(v3 + 172);
    int v10 = *(unsigned __int8 *)(v3 + 716);
    int v11 = *(unsigned __int8 *)(v3 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) + 169);
    int v12 = *(unsigned __int8 *)(v3 + 167);
    int v13 = *(unsigned __int8 *)(v3 + 711);
    int v14 = *(unsigned __int8 *)(v3 + 171);
    int v15 = *(unsigned __int8 *)(v3 + 715);
    *(_DWORD *)long long buf = 138414338;
    CFStringRef v153 = v7;
    __int16 v154 = 1024;
    int v155 = v8;
    __int16 v156 = 1024;
    int v157 = v9;
    __int16 v158 = 1024;
    *(_DWORD *)__int16 v159 = v10;
    *(_WORD *)&v159[4] = 1024;
    *(_DWORD *)&v159[6] = v11;
    *(_WORD *)int v160 = 1024;
    *(_DWORD *)&v160[2] = v12;
    LOWORD(v161) = 1024;
    *(_DWORD *)((char *)&v161 + 2) = v13;
    HIWORD(v161) = 1024;
    *(_DWORD *)int v162 = v14;
    *(_WORD *)&v162[4] = 1024;
    *(_DWORD *)id v163 = v15;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "ADVBUFF(%@): advBufferEvent expectedEntries EN:%d ObjDiscoveryWild:%d ObjectDiscoveryNO:%d pendingDraining:%d createdWild:%d createdNO:%d readInProgressWild:%d readInProgressNO:%d", buf, 0x3Cu);
  }
  unsigned int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
  if (*(unsigned char *)(v3 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) + 167))
  {
    if (*(unsigned __int8 *)(v3 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) + 172) == 255)
    {
      uint64_t v17 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "We were not expecting to get anything right now", buf, 2u);
        unsigned int v16 = *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
      }
    }
    if (v16 <= 1)
    {
      if (*(unsigned char *)(v3 + 544 * v16 + 172)
        && *(unsigned __int8 *)(v3 + 544 * v16 + 172) != 255
        && *(_WORD *)(v2 + 56) == 219)
      {
        *(unsigned char *)(v3 + 544 * v16 + 169) = 0;
        unsigned __int8 v18 = *(int **)(v2 + 48);
        int v190 = v18 + 1;
        __int16 v191 = (char *)v18 + 47;
        int v192 = (char *)v18 + 90;
        __int16 v193 = (char *)v18 + 133;
        uint64_t v125 = v18;
        int v194 = v18 + 44;
        if (*(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24))
        {
          if (*(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) == 1)
          {
            if (*(unsigned __int8 *)(v3 + 716) >= 5u) {
              int v19 = 5;
            }
            else {
              int v19 = *(unsigned __int8 *)(v3 + 716);
            }
            uint64_t v20 = sub_100050530();
            v133[0] = 0;
            v133[1] = v19;
            uint64_t v135 = 0;
            uint64_t v136 = 0;
            uint64_t v134 = 0;
            (*(void (**)(uint64_t, _DWORD *))(*(void *)v20 + 584))(v20, v133);
          }
        }
        else
        {
          if (*(unsigned __int8 *)(v3 + 172) >= 5u) {
            int v67 = 5;
          }
          else {
            int v67 = *(unsigned __int8 *)(v3 + 172);
          }
          uint64_t v68 = sub_100050530();
          int v128 = v67;
          uint64_t v129 = 0;
          uint64_t v131 = 0;
          uint64_t v130 = 0;
          int v132 = 0;
          (*(void (**)(uint64_t, int *))(*(void *)v68 + 584))(v68, &v128);
        }
        unsigned __int8 v69 = *(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
        uint64_t v70 = v3 + 544 * v69;
        unsigned int v73 = *(unsigned __int8 *)(v70 + 172);
        unsigned int v71 = (unsigned char *)(v70 + 172);
        unsigned int v72 = v73;
        if (v73 >= 5) {
          int v74 = 5;
        }
        else {
          int v74 = v72;
        }
        if (v74)
        {
          int v75 = 0;
          unint64_t v76 = 0;
          do
          {
            unsigned int v77 = *v4;
            int v78 = v4;
            if (os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
            {
              CFStringRef v79 = @"UNKNOWN";
              if (v69 <= 2u) {
                CFStringRef v79 = off_1009BF9C8[(char)v69];
              }
              uint64_t v80 = (uint64_t)(&v190)[v76];
              int v81 = *(unsigned __int8 *)(v80 + 6);
              int v82 = *(_DWORD *)(v80 + 38);
              int v83 = *(char *)(v80 + 42);
              *(_DWORD *)long long buf = 138414850;
              CFStringRef v153 = v79;
              __int16 v154 = 1024;
              int v155 = v76;
              __int16 v156 = 1040;
              int v157 = 43;
              __int16 v158 = 2096;
              *(void *)__int16 v159 = v80;
              *(_WORD *)&v159[8] = 1040;
              *(_DWORD *)int v160 = 6;
              *(_WORD *)&v160[4] = 2096;
              uint64_t v161 = v80;
              *(_WORD *)int v162 = 1024;
              *(_DWORD *)&v162[2] = v81;
              *(_WORD *)id v163 = 1040;
              *(_DWORD *)&v163[2] = 31;
              __int16 v164 = 2096;
              uint64_t v165 = v80 + 7;
              __int16 v166 = 1024;
              int v167 = v82;
              __int16 v168 = 1024;
              int v169 = v83;
              _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_INFO, "ADVBUFF(%@): Parsing entry %d entry_buff:%.43P address:%.6P len:%d payload:%.31P timestamp:%d rssi:%d", buf, 0x54u);
            }
            else
            {
              uint64_t v80 = (uint64_t)(&v190)[v76];
            }
            unsigned int v84 = *(unsigned __int8 *)(v80 + 6);
            if (v84 < 0x20)
            {
              bzero(buf, 0x1788uLL);
              *(_OWORD *)char v138 = 0u;
              memset(v137, 0, sizeof(v137));
              sub_100008A18((uint64_t)&v137[2], v80, 6uLL);
              unint64_t v86 = ((unint64_t)v137[2] << 40) | ((unint64_t)v137[3] << 32) | ((unint64_t)v137[4] << 24) | ((unint64_t)v137[5] << 16) | ((unint64_t)v137[6] << 8) | v137[7] | ((unint64_t)v137[1] << 48);
              if (!v86 || HIWORD(v86) && (HIWORD(v86) != 1 || (v137[2] & 0xC0) == 0x80))
              {
                int v87 = *v78;
                if (os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
                {
                  unint64_t v102 = *(char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
                  CFStringRef v123 = @"UNKNOWN";
                  if (v102 <= 2) {
                    CFStringRef v123 = off_1009BF9C8[v102];
                  }
                  uint64_t v103 = sub_1006AD3F0();
                  *(_DWORD *)__int16 v149 = 138412546;
                  *(void *)&v149[4] = v123;
                  *(_WORD *)&v149[12] = 2112;
                  *(void *)&v149[14] = v103;
                  _os_log_error_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "ADVBUFF(%@): Remote Bluetooth address \"%@\" is invalid!", v149, 0x16u);
                }
              }
              uint8_t v88 = sub_1000556EC(v3, *(char *)(v80 + 42));
              *(unsigned char *)(v80 + 42) = v88;
              *(_WORD *)uint64_t v137 = 259;
              *(_WORD *)&v137[8] = *(unsigned __int8 *)(v80 + 6);
              v137[24] = v88;
              *(void *)&v137[16] = v80 + 7;
              v137[43] = 0;
              char v127 = 0;
              sub_10001B8E0(&v127);
              sub_100058C58(v137, (uint64_t)buf, v89, v90);
              sub_10001B910(&v127);
              BYTE2(v155) = 0;
              uint64_t v91 = *(void *)(v2 + 32);
              BOOL v180 = v75 + *(unsigned __int8 *)(v3 + 544 * *(unsigned __int8 *)(*(void *)(v91 + 8) + 24) + 172) > 1;
              LOBYTE(v181) = 1;
              int v92 = *v125;
              unsigned int v93 = *(_DWORD *)(v80 + 38);
              if (*v125 < v93) {
                int v92 = *v125 + 0xFFFFFFF;
              }
              unsigned int v179 = v92 - v93;
              int v94 = *v78;
              if (os_log_type_enabled(*v78, OS_LOG_TYPE_INFO))
              {
                unint64_t v95 = *(char *)(*(void *)(v91 + 8) + 24);
                CFStringRef v96 = @"UNKNOWN";
                if (v95 <= 2) {
                  CFStringRef v96 = off_1009BF9C8[v95];
                }
                int v97 = *v125;
                int v98 = *(_DWORD *)(v80 + 38);
                *(_DWORD *)__int16 v149 = 138413826;
                *(void *)&v149[4] = v96;
                *(_WORD *)&v149[12] = 1040;
                *(_DWORD *)&v149[14] = 6;
                *(_WORD *)&v149[18] = 2096;
                *(void *)&v149[20] = &v137[2];
                *(_WORD *)&v149[28] = 1024;
                *(_DWORD *)&v149[30] = v97;
                *(_WORD *)&v149[34] = 1024;
                *(_DWORD *)&v149[36] = v98;
                *(_WORD *)&v149[40] = 1024;
                *(_DWORD *)&v149[42] = v179;
                *(_WORD *)&v149[46] = 1024;
                LODWORD(v150) = *(unsigned __int16 *)&v137[8];
                _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "ADVBUFF(%@): found %.6P now:%u event:%u delta:%u dataLen:%d", v149, 0x34u);
              }
              sub_1000105D0();
            }
            uint64_t v4 = v78;
            int v85 = *v78;
            if (os_log_type_enabled(*v78, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67109120;
              LODWORD(v153) = v84;
              _os_log_error_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "Ignoring invalid data length %d", buf, 8u);
            }
            ++v76;
            unsigned __int8 v69 = *(unsigned char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
            uint64_t v99 = v3 + 544 * v69;
            unsigned int v100 = *(unsigned __int8 *)(v99 + 172);
            unsigned int v71 = (unsigned char *)(v99 + 172);
            unsigned int v72 = v100;
            if (v100 >= 5) {
              unint64_t v101 = 5;
            }
            else {
              unint64_t v101 = v72;
            }
            --v75;
          }
          while (v76 < v101);
        }
        else
        {
          LOBYTE(v76) = 0;
        }
        *unsigned int v71 = v72 - v76;
        uint64_t v104 = *v4;
        if (os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
        {
          unint64_t v105 = *(char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
          if (v105 > 2) {
            CFStringRef v106 = @"UNKNOWN";
          }
          else {
            CFStringRef v106 = off_1009BF9C8[v105];
          }
          int v108 = *(unsigned __int8 *)(v3
                                    + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24)
                                    + 172);
          *(_DWORD *)long long buf = 138412546;
          CFStringRef v153 = v106;
          __int16 v154 = 1024;
          int v155 = v108;
          _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_INFO, "ADVBUFF(%@): after parsing, expectedEntries=%d ", buf, 0x12u);
        }
        unsigned int v109 = *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
        if (!*(unsigned char *)(v3 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) + 172))
        {
          int v110 = *v4;
          if (os_log_type_enabled(*v4, OS_LOG_TYPE_INFO))
          {
            if (v109 > 2) {
              CFStringRef v111 = @"UNKNOWN";
            }
            else {
              CFStringRef v111 = off_1009BF9C8[(char)v109];
            }
            int v119 = *(unsigned __int8 *)(v3 + 144);
            int v120 = *(unsigned __int8 *)(v3
                                      + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24)
                                      + 172);
            *(_DWORD *)long long buf = 138412802;
            CFStringRef v153 = v111;
            __int16 v154 = 1024;
            int v155 = v119;
            __int16 v156 = 1024;
            int v157 = v120;
            _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_INFO, "ADVBUFF(%@): We're done screenstate=%d fADVBufferExpectedEntries=%d", buf, 0x18u);
            unsigned int v109 = *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
          }
          *(unsigned char *)(v3 + 160 + 544 * v109 + 12) = -1;
          *(unsigned char *)(v3 + 160 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) + 11) = 0;
          uint64_t v121 = sub_100019878();
          v126[0] = _NSConcreteStackBlock;
          v126[1] = 3221225472;
          v126[2] = sub_1006D8A04;
          v126[3] = &unk_100997528;
          v126[4] = v3;
          sub_100013018(v121, v126);
        }
        goto LABEL_31;
      }
      goto LABEL_26;
    }
    if (v16 != 2 || !*(unsigned char *)(v3 + 1260) || *(unsigned __int8 *)(v3 + 1260) == 255)
    {
LABEL_26:
      char v23 = qword_100A19F90;
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
      {
        if (v16 > 2) {
          CFStringRef v24 = @"UNKNOWN";
        }
        else {
          CFStringRef v24 = off_1009BF9C8[(char)v16];
        }
        int v107 = *(unsigned __int8 *)(v3
                                  + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24)
                                  + 172);
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v153 = v24;
        __int16 v154 = 1024;
        int v155 = v107;
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "ADVBUFF(%@): invalid state expectedEntries=%d", buf, 0x12u);
      }
      goto LABEL_31;
    }
    unint64_t v25 = 0;
    uint64_t v26 = *(void *)(v2 + 48);
    int v190 = (_DWORD *)(v26 + 4);
    __int16 v191 = (char *)(v26 + 52);
    int v192 = (char *)(v26 + 100);
    __int16 v193 = (char *)(v26 + 148);
    int v194 = (_DWORD *)(v26 + 196);
    do
    {
      uint64_t v27 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 176))(v27))
      {
        unsigned __int8 v28 = qword_100A19FB0;
        if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEBUG))
        {
          unint64_t v52 = *(char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
          CFStringRef v53 = @"UNKNOWN";
          if (v52 <= 2) {
            CFStringRef v53 = off_1009BF9C8[v52];
          }
          uint64_t v54 = (uint64_t)(&v190)[v25];
          int v55 = *(unsigned __int8 *)(v54 + 6);
          int v56 = *(unsigned __int16 *)(v54 + 38);
          int v57 = *(unsigned __int16 *)(v54 + 40);
          int v58 = *(char *)(v54 + 46);
          int v59 = *(char *)(v54 + 47);
          *(_DWORD *)long long buf = 138415874;
          CFStringRef v153 = v53;
          __int16 v154 = 1024;
          int v155 = v25;
          __int16 v156 = 1040;
          int v157 = 48;
          __int16 v158 = 2096;
          *(void *)__int16 v159 = v54;
          *(_WORD *)&v159[8] = 1040;
          *(_DWORD *)int v160 = 6;
          *(_WORD *)&v160[4] = 2096;
          uint64_t v161 = v54;
          *(_WORD *)int v162 = 1024;
          *(_DWORD *)&v162[2] = v55;
          *(_WORD *)id v163 = 1040;
          *(_DWORD *)&v163[2] = 31;
          __int16 v164 = 2096;
          uint64_t v165 = v54 + 7;
          __int16 v166 = 1024;
          int v167 = v56;
          __int16 v168 = 1024;
          int v169 = v57;
          __int16 v170 = 1040;
          int v171 = 4;
          __int16 v172 = 2096;
          uint64_t v173 = v54 + 42;
          __int16 v174 = 1024;
          int v175 = v58;
          __int16 v176 = 1024;
          int v177 = v59;
          _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "ADVBUFF(%@): Parsing entry %d entry_buff:%.48P address:%.6P len:%d payload:%.31P first:%d last:%d rssi:%.4P maxRSSI:%d avgRSSI:%d", buf, 0x70u);
        }
      }
      uint64_t v29 = (uint64_t)(&v190)[v25];
      unsigned int v30 = *(unsigned __int8 *)(v29 + 6);
      if (v30 < 0x20)
      {
        bzero(buf, 0x1788uLL);
        long long v150 = 0u;
        long long v151 = 0u;
        memset(v149, 0, sizeof(v149));
        sub_100008A18((uint64_t)&v149[2], v29, 6uLL);
        unint64_t v32 = ((unint64_t)v149[2] << 40) | ((unint64_t)v149[3] << 32) | ((unint64_t)v149[4] << 24) | ((unint64_t)v149[5] << 16) | ((unint64_t)v149[6] << 8) | v149[7] | ((unint64_t)v149[1] << 48);
        if (!v32 || HIWORD(v32) && (HIWORD(v32) != 1 || (v149[2] & 0xC0) == 0x80))
        {
          BOOL v33 = qword_100A19F90;
          if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
          {
            unint64_t v60 = *(char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
            CFStringRef v124 = @"UNKNOWN";
            if (v60 <= 2) {
              CFStringRef v124 = off_1009BF9C8[v60];
            }
            BOOL v61 = sub_1006AD3F0();
            *(_DWORD *)uint64_t v137 = 138412546;
            *(void *)&v137[4] = v124;
            *(_WORD *)&v137[12] = 2112;
            *(void *)&v137[14] = v61;
            _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "ADVBUFF(%@): Remote Bluetooth address \"%@\" is invalid!", v137, 0x16u);
          }
        }
        *(unsigned char *)(v29 + 46) = sub_1000556EC(v3, *(char *)(v29 + 46));
        int v34 = sub_1000556EC(v3, *(char *)(v29 + 47));
        int v35 = v34;
        *(unsigned char *)(v29 + 47) = v34;
        int v36 = *(char *)(v29 + 46);
        if (v36 <= 0 && v34 < 1)
        {
          *(_WORD *)__int16 v149 = 259;
          *(_WORD *)&v149[8] = *(unsigned __int8 *)(v29 + 6);
          *(void *)&v149[16] = v29 + 7;
          v149[43] = 0;
          char v127 = 0;
          sub_10001B8E0(&v127);
          sub_100058C58(v149, (uint64_t)buf, v37, v38);
          sub_10001B910(&v127);
          uint64_t v39 = 0;
          BYTE2(v155) = 0;
          BOOL v180 = *(unsigned __int8 *)(v3
                                    + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24)
                                    + 172)
               - (int)v25 > 1;
          __int16 v181 = 257;
          char v186 = *(unsigned char *)(v29 + 46);
          char v187 = *(unsigned char *)(v29 + 47);
          char v178 = v186;
          do
          {
            *(&v182 + v39) = *(unsigned char *)(v29 + 42 + v39);
            ++v39;
          }
          while (v39 != 4);
          int v188 = *(unsigned __int16 *)(v29 + 38);
          int v189 = *(unsigned __int16 *)(v29 + 40);
          uint64_t v40 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v40 + 176))(v40))
          {
            long long v41 = qword_100A19FB0;
            if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_INFO))
            {
              unint64_t v44 = *(char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
              CFStringRef v45 = @"UNKNOWN";
              if (v44 <= 2) {
                CFStringRef v45 = off_1009BF9C8[v44];
              }
              LODWORD(v42) = v188;
              LODWORD(v43) = v189;
              *(_DWORD *)uint64_t v137 = 138415874;
              *(void *)&v137[4] = v45;
              *(_WORD *)&v137[12] = 1040;
              *(_DWORD *)&v137[14] = 6;
              *(_WORD *)&v137[18] = 2096;
              *(void *)&v137[20] = &v149[2];
              *(_WORD *)&v137[28] = 1040;
              *(_DWORD *)&v137[30] = 31;
              *(_WORD *)&v137[34] = 2096;
              *(void *)&v137[36] = *(void *)&v149[16];
              *(_WORD *)&v137[44] = 2048;
              *(double *)&v137[46] = (double)v42 * 0.02;
              *(_WORD *)&v137[54] = 2048;
              *(double *)&v137[56] = (double)v43 * 0.02;
              *(_WORD *)char v138 = 1024;
              *(_DWORD *)&void v138[2] = *(unsigned __int16 *)&v149[8];
              *(_WORD *)&v138[6] = 1024;
              *(_DWORD *)&v138[8] = v186;
              *(_WORD *)&v138[12] = 1024;
              *(_DWORD *)&v138[14] = v187;
              __int16 v139 = 1024;
              int v140 = v182;
              __int16 v141 = 1024;
              int v142 = v183;
              __int16 v143 = 1024;
              int v144 = v184;
              __int16 v145 = 1024;
              int v146 = v185;
              __int16 v147 = 1024;
              int v148 = v183 + v182 + 2 * v184;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "ADVBUFF(%@): found %.6P payload:%.31P first:%fs last:%fs dataLen:%d maxRSSI:%d avgRSSI:%d bin0:%d bin1:%d bin2:%d bin3:%d total:%d", v137, 0x70u);
            }
          }
          ++*(void *)(v3 + 2312);
          sub_1000105D0();
        }
        long long v46 = qword_100A19F90;
        if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
        {
          char v62 = sub_1006AD3F0();
          *(_DWORD *)uint64_t v137 = 67109634;
          *(_DWORD *)&v137[4] = v35;
          *(_WORD *)&v137[8] = 1024;
          *(_DWORD *)&v137[10] = v36;
          *(_WORD *)&v137[14] = 2112;
          *(void *)&v137[16] = v62;
          _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Ignoring invalid RSSI level (avg:%d/max:%d) received from device %@", v137, 0x18u);
        }
      }
      else
      {
        BOOL v31 = qword_100A19F90;
        if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          LODWORD(v153) = v30;
          _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Ignoring invalid data length %d", buf, 8u);
        }
      }
      ++v25;
      uint64_t v47 = v3 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
      unsigned int v50 = *(unsigned __int8 *)(v47 + 172);
      long long v48 = (unsigned char *)(v47 + 172);
      unsigned int v49 = v50;
      if (v50 >= 5) {
        unint64_t v51 = 5;
      }
      else {
        unint64_t v51 = v49;
      }
    }
    while (v25 < v51);
    unsigned char *v48 = v49 - v25;
    uint64_t v63 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_INFO))
    {
      unint64_t v65 = *(char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
      if (v65 > 2) {
        CFStringRef v66 = @"UNKNOWN";
      }
      else {
        CFStringRef v66 = off_1009BF9C8[v65];
      }
      int v112 = *(unsigned __int8 *)(v3 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) + 172);
      *(_DWORD *)long long buf = 138412546;
      CFStringRef v153 = v66;
      __int16 v154 = 1024;
      int v155 = v112;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_INFO, "ADVBUFF(%@): after parsing,expectedEntries=%d ", buf, 0x12u);
    }
    uint64_t v113 = v3 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
    int v115 = *(unsigned __int8 *)(v113 + 172);
    int v114 = (unsigned char *)(v113 + 172);
    if (!v115)
    {
      *int v114 = -1;
      uint64_t v116 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        unint64_t v117 = *(char *)(*(void *)(*(void *)(v2 + 32) + 8) + 24);
        if (v117 > 2) {
          CFStringRef v118 = @"UNKNOWN";
        }
        else {
          CFStringRef v118 = off_1009BF9C8[v117];
        }
        int v122 = *(unsigned __int8 *)(v3
                                  + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24)
                                  + 172);
        *(_DWORD *)long long buf = 138412546;
        CFStringRef v153 = v118;
        __int16 v154 = 1024;
        int v155 = v122;
        _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_INFO, "ADVBUFF(%@): We're done expectedEntries=%d", buf, 0x12u);
      }
      sub_1006D92DC(v3);
      sub_1006D9358(v3, *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24), 1);
      sub_1006D9934(v3);
      *(unsigned char *)(v3 + 544 * *(unsigned __int8 *)(*(void *)(*(void *)(v2 + 32) + 8) + 24) + 171) = 0;
    }
  }
  else
  {
    uint64_t v21 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      if (v16 > 2) {
        CFStringRef v22 = @"UNKNOWN";
      }
      else {
        CFStringRef v22 = off_1009BF9C8[(char)v16];
      }
      *(_DWORD *)long long buf = 138412290;
      CFStringRef v153 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "ADVBUFF(%@): Received AdvBufferEvent for a buffer that is not created, ignoring", buf, 0xCu);
    }
  }
LABEL_31:
  free(*(void **)(v2 + 48));
}

void sub_1006D89DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
}

void sub_1006D8A04(uint64_t a1)
{
}

void sub_1006D8A0C(uint64_t a1)
{
  if (qword_100A14758 != -1) {
    dispatch_once(&qword_100A14758, &stru_1009BF1E8);
  }
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "ADVBUFF readNextADVBuffer", buf, 2u);
  }
  if (sub_1006DB674(a1))
  {
    uint64_t v4 = 0;
    uint64_t v5 = (unsigned __int8 *)(a1 + 169);
    *(void *)&long long v3 = 138413058;
    long long v46 = v3;
    do
    {
      unint64_t v6 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        CFStringRef v7 = @"UNKNOWN";
        if (v4 <= 2u) {
          CFStringRef v7 = off_1009BF9C8[v4];
        }
        int v8 = *v5;
        int v9 = *(unsigned __int8 *)(a1 + v4 + 1793);
        *(_DWORD *)long long buf = 138412802;
        CFStringRef v51 = v7;
        __int16 v52 = 1024;
        *(_DWORD *)CFStringRef v53 = v8;
        *(_WORD *)&v53[4] = 1024;
        *(_DWORD *)&v53[6] = v9;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ADVBUFF(%@): pendingDraining:%d fObjectDiscoveryBuffersToRead:%d", buf, 0x18u);
      }
      if (*(unsigned char *)(a1 + v4 + 1793) && *v5)
      {
        *(unsigned char *)(a1 + v4 + 1793) = 0;
        int v10 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          CFStringRef v11 = @"UNKNOWN";
          if (v4 <= 2u) {
            CFStringRef v11 = off_1009BF9C8[v4];
          }
          int v12 = v5[3];
          int v13 = v5[2];
          *(_DWORD *)long long buf = 138412802;
          CFStringRef v51 = v11;
          __int16 v52 = 1024;
          *(_DWORD *)CFStringRef v53 = v12;
          *(_WORD *)&v53[4] = 1024;
          *(_DWORD *)&v53[6] = v13;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "ADVBUFF(%@): expectedEntries=%d readInProgress:%d", buf, 0x18u);
        }
        if (v5[3] == 255)
        {
          int v14 = qword_100A19E90;
        }
        else
        {
          int v14 = qword_100A19E90;
          if (!v5[2])
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
            {
              if (v4 > 2u) {
                CFStringRef v43 = @"UNKNOWN";
              }
              else {
                CFStringRef v43 = off_1009BF9C8[v4];
              }
              *(_DWORD *)long long buf = 138412290;
              CFStringRef v51 = v43;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "ADVBUFF(%@): Already reading ADV Buffer", buf, 0xCu);
            }
LABEL_77:
            unint64_t v44 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
            {
              if (v4 > 2u) {
                CFStringRef v45 = @"UNKNOWN";
              }
              else {
                CFStringRef v45 = off_1009BF9C8[(char)v4];
              }
              *(_DWORD *)long long buf = 138412546;
              CFStringRef v51 = v45;
              __int16 v52 = 1024;
              *(_DWORD *)CFStringRef v53 = v4;
              _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "ADVBUFF(%@): waiting for buffer %d events", buf, 0x12u);
            }
            return;
          }
        }
        if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
        {
          CFStringRef v15 = @"UNKNOWN";
          if (v4 <= 2u) {
            CFStringRef v15 = off_1009BF9C8[v4];
          }
          *(_DWORD *)long long buf = 138412290;
          CFStringRef v51 = v15;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "ADVBUFF(%@): Pausing ADV Buffers", buf, 0xCu);
        }
        if (sub_1006D9358(a1, v4, 0))
        {
          unsigned int v16 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
          {
            CFStringRef v17 = @"UNKNOWN";
            if (v4 <= 2u) {
              CFStringRef v17 = off_1009BF9C8[(char)v4];
            }
            *(_DWORD *)long long buf = 138412290;
            CFStringRef v51 = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "ADVBUFF(%@): could not disable ADV buffering", buf, 0xCu);
          }
        }
        else
        {
          void v5[2] = 1;
          sub_1006DB6E0(a1);
          sub_1006DB778(a1);
          unsigned __int8 v18 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
          {
            CFStringRef v19 = @"UNKNOWN";
            if (v4 <= 2u) {
              CFStringRef v19 = off_1009BF9C8[(char)v4];
            }
            *(_DWORD *)long long buf = 138412290;
            CFStringRef v51 = v19;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "ADVBUFF(%@): Trying to read", buf, 0xCu);
          }
          *(unsigned char *)(a1 + 1796) = v4;
          int v20 = sub_1006DB8D8(a1, v4);
          if (v4 == 1) {
            CFStringRef v21 = @"NearOwner";
          }
          else {
            CFStringRef v21 = @"Wild";
          }
          [*(id *)(a1 + 152) setObject:v21 forKeyedSubscript:@"AdvertisementBufferType" atIndex:v46];
          if (v5[3] == 255) {
            uint64_t v22 = 0;
          }
          else {
            uint64_t v22 = v5[3];
          }
          char v23 = +[NSNumber numberWithInt:v22];
          [*(id *)(a1 + 152) setObject:v23 forKeyedSubscript:@"CurrentCapacityAtDrain"];

          CFStringRef v24 = +[NSNumber numberWithInt:100];
          [*(id *)(a1 + 152) setObject:v24 forKeyedSubscript:@"MaxCapacity"];

          uint64_t v25 = mach_continuous_time() * dword_100A14750 / *(unsigned int *)algn_100A14754 / 0x3B9ACA00;
          uint64_t v26 = *(void *)(v5 + 15);
          if (v26) {
            uint64_t v27 = v25 - v26;
          }
          else {
            uint64_t v27 = 0;
          }
          unsigned __int8 v28 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
          {
            CFStringRef v38 = @"UNKNOWN";
            if (v4 <= 2u) {
              CFStringRef v38 = off_1009BF9C8[(char)v4];
            }
            uint64_t v39 = *(void *)(v5 + 15);
            *(_DWORD *)long long buf = v46;
            CFStringRef v51 = v38;
            __int16 v52 = 2048;
            *(void *)CFStringRef v53 = v39;
            *(_WORD *)&v53[8] = 2048;
            uint64_t v54 = v25;
            __int16 v55 = 2048;
            uint64_t v56 = v27;
            _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "ADVBUFF(%@): lastReadTimeStamp:%llu now:%llu delta:%llu", buf, 0x2Au);
          }
          *(void *)(v5 + 15) = v25;
          uint64_t v29 = +[NSNumber numberWithUnsignedLongLong:v27];
          [*(id *)(a1 + 152) setObject:v29 forKeyedSubscript:@"TimeSinceLastDrainInSeconds"];

          uint64_t v30 = sub_100050530();
          (*(void (**)(uint64_t, void))(*(void *)v30 + 376))(v30, *(void *)(a1 + 152));
          if (v4)
          {
            if (v4 == 1)
            {
              uint64_t v31 = sub_100050530();
              (*(void (**)(uint64_t))(*(void *)v31 + 592))(v31);
            }
          }
          else
          {
            uint64_t v32 = sub_100050530();
            (*(void (**)(uint64_t))(*(void *)v32 + 600))(v32);
          }
          BOOL v33 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
          {
            CFStringRef v34 = @"UNKNOWN";
            if (v4 <= 2u) {
              CFStringRef v34 = off_1009BF9C8[(char)v4];
            }
            int v35 = v5[3];
            *(_DWORD *)long long buf = 138412802;
            CFStringRef v51 = v34;
            __int16 v52 = 1024;
            *(_DWORD *)CFStringRef v53 = v20;
            *(_WORD *)&v53[4] = 1024;
            *(_DWORD *)&v53[6] = v35;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "ADVBUFF(%@): ReadADVBuffer returned %d, fADVBufferExpectedEntries:%d", buf, 0x18u);
          }
          if (v20 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT)) {
            sub_100794668(&v48, v49);
          }
          if (v5[3] != 255) {
            goto LABEL_77;
          }
          void v5[2] = 0;
        }
        if ((_os_feature_enabled_impl() & 1) == 0) {
          sub_1006DAF04();
        }
        int v36 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          CFStringRef v37 = @"UNKNOWN";
          if (v4 <= 2u) {
            CFStringRef v37 = off_1009BF9C8[(char)v4];
          }
          *(_DWORD *)long long buf = 138412290;
          CFStringRef v51 = v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "ADVBUFF(%@): trying to read the next buffer", buf, 0xCu);
        }
      }
      ++v4;
      v5 += 544;
    }
    while (v4 != 3);
    if (_os_feature_enabled_impl())
    {
      uint64_t v41 = sub_100019878();
      v47[0] = _NSConcreteStackBlock;
      v47[1] = 3221225472;
      v47[2] = sub_1006DBD4C;
      void v47[3] = &unk_100997528;
      v47[4] = a1;
      sub_100013018(v41, v47);
    }
    sub_100014900(a1);
  }
}

void sub_1006D92BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006D92DC(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006EB714;
  v3[3] = &unk_100997528;
  _OWORD v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1006D9358(uint64_t a1, uint64_t a2, int a3)
{
  if (a2 >= 3)
  {
    uint64_t v4 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v41 = 67109120;
      LODWORD(v42) = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "HW ADV Buffer handle out of range (%d), ignoring agent request", (uint8_t *)&v41, 8u);
    }
    return 7;
  }
  unsigned int v8 = a2;
  if (a3 && *(unsigned char *)(a1 + 544 * a2 + 170) && *(unsigned char *)(a1 + 544 * a2 + 167))
  {
    int v9 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      if (a2 > 2) {
        CFStringRef v10 = @"UNKNOWN";
      }
      else {
        CFStringRef v10 = off_1009BF9C8[(char)a2];
      }
      int v41 = 138543362;
      CFStringRef v42 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): created and pending destroy", (uint8_t *)&v41, 0xCu);
    }
    sub_1006D4414(a1, a2);
  }
  CFStringRef v11 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    if (a2 > 2) {
      CFStringRef v12 = @"UNKNOWN";
    }
    else {
      CFStringRef v12 = off_1009BF9C8[(char)a2];
    }
    uint64_t v13 = a1 + 544 * a2;
    int v14 = *(unsigned __int8 *)(v13 + 167);
    LODWORD(v13) = *(unsigned __int8 *)(v13 + 168);
    int v41 = 138544130;
    CFStringRef v42 = v12;
    __int16 v43 = 1024;
    *(_DWORD *)unint64_t v44 = a3;
    *(_WORD *)&_OWORD v44[4] = 1024;
    *(_DWORD *)&unsigned char v44[6] = v14;
    __int16 v45 = 1024;
    int v46 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): enableADVBuffering enable=%d created=%d enabled=%d", (uint8_t *)&v41, 0x1Eu);
  }
  if (!*(unsigned char *)(a1 + 544 * v8 + 167))
  {
    CFStringRef v21 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      if (a2 > 2) {
        CFStringRef v22 = @"UNKNOWN";
      }
      else {
        CFStringRef v22 = off_1009BF9C8[(char)a2];
      }
      int v41 = 138543362;
      CFStringRef v42 = v22;
      uint64_t v5 = 12;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): not created", (uint8_t *)&v41, 0xCu);
      return v5;
    }
    return 12;
  }
  uint64_t v15 = a1 + 544 * v8;
  int v17 = *(unsigned __int8 *)(v15 + 168);
  unsigned int v16 = (unsigned char *)(v15 + 168);
  unsigned __int8 v18 = qword_100A19E90;
  BOOL v19 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
  if (v17 == a3)
  {
    if (v19)
    {
      if (a2 > 2) {
        CFStringRef v20 = @"UNKNOWN";
      }
      else {
        CFStringRef v20 = off_1009BF9C8[(char)a2];
      }
      CFStringRef v24 = "paused";
      if (a3) {
        CFStringRef v24 = "active";
      }
      int v41 = 138543618;
      CFStringRef v42 = v20;
      __int16 v43 = 2082;
      *(void *)unint64_t v44 = v24;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): already %{public}s", (uint8_t *)&v41, 0x16u);
    }
    return 12;
  }
  if (v19)
  {
    if (a2 > 2) {
      CFStringRef v23 = @"UNKNOWN";
    }
    else {
      CFStringRef v23 = off_1009BF9C8[(char)a2];
    }
    uint64_t v25 = "pausing";
    if (a3) {
      uint64_t v25 = "activating";
    }
    int v41 = 138543618;
    CFStringRef v42 = v23;
    __int16 v43 = 2082;
    *(void *)unint64_t v44 = v25;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): mode change -> %{public}s ", (uint8_t *)&v41, 0x16u);
  }
  uint64_t v26 = sub_10003FB34();
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v26 + 2848))(v26, a2, 1, a3 ^ 1u);
  uint64_t v27 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    if (a2 > 2) {
      CFStringRef v28 = @"UNKNOWN";
    }
    else {
      CFStringRef v28 = off_1009BF9C8[(char)a2];
    }
    int v41 = 138543618;
    CFStringRef v42 = v28;
    __int16 v43 = 1024;
    *(_DWORD *)unint64_t v44 = v5;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): advBufMatchControl returned %d", (uint8_t *)&v41, 0x12u);
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_1007946A0();
    }
  }
  else
  {
    unsigned char *v16 = a3;
    uint64_t v29 = a1 + 544 * v8;
    char v31 = *(unsigned char *)(v29 + 169);
    uint64_t v30 = (unsigned char *)(v29 + 169);
    unsigned char *v30 = v31 | a3;
    uint64_t v32 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      if (a2 > 2) {
        CFStringRef v33 = @"UNKNOWN";
      }
      else {
        CFStringRef v33 = off_1009BF9C8[(char)a2];
      }
      int v34 = *v30;
      int v41 = 138543618;
      CFStringRef v42 = v33;
      __int16 v43 = 1024;
      *(_DWORD *)unint64_t v44 = v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): pendingDraining:%d", (uint8_t *)&v41, 0x12u);
    }
    if (a3)
    {
      uint64_t v35 = a1 + 544 * v8;
      *(CFAbsoluteTime *)(v35 + 176) = CFAbsoluteTimeGetCurrent();
      int v36 = (uint64_t *)(v35 + 176);
      CFStringRef v37 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        if (a2 > 2) {
          CFStringRef v38 = @"UNKNOWN";
        }
        else {
          CFStringRef v38 = off_1009BF9C8[(char)a2];
        }
        uint64_t v39 = *v36;
        int v41 = 138543618;
        CFStringRef v42 = v38;
        __int16 v43 = 2048;
        *(void *)unint64_t v44 = v39;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): setting start time to %f", (uint8_t *)&v41, 0x16u);
      }
    }
    return 0;
  }
  return v5;
}

void sub_1006D9934(uint64_t a1)
{
  if (!*(void *)(a1 + 2272))
  {
    uint64_t v2 = sub_100019878();
    long long v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v2 + 8));
    *(void *)(a1 + 2272) = v3;
    uint64_t v4 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "fContactTracingScanDeltaTimer Timer Armed!", buf, 2u);
      long long v3 = *(NSObject **)(a1 + 2272);
    }
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1006EBF40;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v3, handler);
    uint64_t v5 = *(NSObject **)(a1 + 2272);
    if (qword_1009FB798 != -1) {
      dispatch_once(&qword_1009FB798, &stru_1009BF848);
    }
    uint64_t v6 = sub_10044F0B0((uint64_t)off_1009FB790);
    dispatch_time_t v7 = dispatch_time(0x8000000000000000, 1000000 * v6);
    dispatch_source_set_timer(v5, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 2272));
    if (*(unsigned char *)(a1 + 1255))
    {
      if (qword_1009FB798 != -1) {
        dispatch_once(&qword_1009FB798, &stru_1009BF848);
      }
      uint64_t v8 = sub_10044EFB0((uint64_t)off_1009FB790);
    }
    else
    {
      if (qword_1009FB798 != -1) {
        dispatch_once(&qword_1009FB798, &stru_1009BF848);
      }
      uint64_t v8 = sub_10044F54C((uint64_t)off_1009FB790);
    }
    int v9 = +[NSDate date];
    [v9 timeIntervalSince1970];
    double v11 = v10;

    xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_date(v12, "Date", (uint64_t)((v11 + (double)v8) * 1000000000.0));
    uint64_t v13 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v16 = v8;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "XPC event com.apple.alarm for %llu seconds armed!", buf, 0xCu);
    }
    xpc_set_event();
    xpc_release(v12);
  }
}

void sub_1006D9BF4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006D9C0C(uint64_t a1, _OWORD *a2)
{
  uint64_t v4 = malloc_type_malloc(0xEEuLL, 0x1000040AEA256DBuLL);
  long long v6 = a2[1];
  long long v5 = a2[2];
  *uint64_t v4 = *a2;
  v4[1] = v6;
  void v4[2] = v5;
  long long v7 = a2[6];
  long long v9 = a2[3];
  long long v8 = a2[4];
  v4[5] = a2[5];
  v4[6] = v7;
  v4[3] = v9;
  void v4[4] = v8;
  long long v10 = a2[10];
  long long v12 = a2[7];
  long long v11 = a2[8];
  v4[9] = a2[9];
  v4[10] = v10;
  v4[7] = v12;
  v4[8] = v11;
  long long v14 = a2[12];
  long long v13 = a2[13];
  long long v15 = a2[11];
  *(_OWORD *)((char *)v4 + 222) = *(_OWORD *)((char *)a2 + 222);
  v4[12] = v14;
  v4[13] = v13;
  v4[11] = v15;
  uint64_t v16 = sub_100019878();
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1006D9CF8;
  v17[3] = &unk_100998260;
  _OWORD v17[4] = a1;
  void v17[5] = v4;
  sub_100013018(v16, v17);
}

void sub_1006D9CF8(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = __chkstk_darwin(a1, a2);
  uint64_t v2 = *(void *)(v39 + 32);
  long long v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    int v4 = *(unsigned __int8 *)(v2 + 1851);
    int v5 = *(unsigned __int8 *)(v2 + 1852);
    int buf = 67109376;
    int v59 = v4;
    __int16 v60 = 1024;
    int v61 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Match Buffer matchBufferEvent fMatchBufferExpectedEntries:%d fMatchBufferEntriesReceived:%d", (uint8_t *)&buf, 0xEu);
  }
  if (*(unsigned __int8 *)(v2 + 1851) == 255 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT)) {
    sub_100794808();
  }
  unsigned int v6 = *(unsigned __int8 *)(v2 + 1852);
  if (v6 <= 0x13 && *(unsigned __int8 *)(v2 + 1851) != 255)
  {
    unint64_t v7 = 0;
    uint64_t v8 = *(void *)(v39 + 40);
    v69[0] = v8 + 4;
    v69[1] = v8 + 22;
    v69[2] = v8 + 40;
    v69[3] = v8 + 58;
    v69[4] = v8 + 76;
    uint64_t v9 = v8 + 130;
    uint64_t v10 = v8 + 148;
    uint64_t v11 = v8 + 166;
    v69[5] = v8 + 94;
    v69[6] = v8 + 112;
    uint64_t v12 = v8 + 184;
    uint64_t v13 = v8 + 202;
    uint64_t v14 = v8 + 220;
    v69[7] = v9;
    v69[8] = v10;
    if (v6 >= 7) {
      unint64_t v15 = 20 - v6;
    }
    else {
      unint64_t v15 = 13;
    }
    v69[9] = v11;
    v69[10] = v12;
    v69[11] = v13;
    v69[12] = v14;
    do
    {
      unsigned __int8 v16 = *(unsigned char *)(v2 + 1852) + v7;
      int v17 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        int buf = 67109376;
        int v59 = v7;
        __int16 v60 = 1024;
        int v61 = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Match Buffer Parsing i:%d tableIndex:%d", (uint8_t *)&buf, 0xEu);
      }
      unsigned __int8 v18 = (unsigned __int8 *)v69[v7];
      int v19 = (char)v18[17];
      if (v18[17] && *(_DWORD *)(v18 + 13))
      {
        --*(unsigned char *)(v2 + 1851);
        bzero(&buf, 0x1788uLL);
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        [*(id *)(v2 + 2112) objectAtIndex:v16];
        CFStringRef v20 = [(id)objc_claimAutoreleasedReturnValue() objectForKeyedSubscript:@"MatchActionRulePeerAddress"];
        [v20 getBytes:&v41 + 2 range:0, 6];

        LOWORD(v41) = 259;
        WORD4(v41) = *v18 + 1;
        BYTE8(v42) = sub_1000556EC(v2, (char)v18[17]);
        *(void *)&long long v42 = v18;
        BYTE11(v43) = 0;
        char v40 = 0;
        sub_10001B8E0(&v40);
        sub_100058C58((unsigned __int8 *)&v41, (uint64_t)&buf, v21, v22);
        sub_10001B910(&v40);
        BOOL v67 = *(unsigned char *)(v2 + 1851) != 0;
        char v68 = 1;
        unsigned int v23 = **(_DWORD **)(v39 + 40);
        unsigned int v24 = *(_DWORD *)(v18 + 13);
        unsigned int v25 = v23 + 0xFFFFFFF;
        if (v23 >= v24) {
          unsigned int v25 = **(_DWORD **)(v39 + 40);
        }
        unsigned int v26 = v25 - v24;
        unsigned int v66 = v25 - v24;
        uint64_t v27 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)int v46 = 68158978;
          int v47 = 6;
          __int16 v48 = 2096;
          unsigned int v49 = (char *)&v41 + 2;
          __int16 v50 = 1024;
          unsigned int v51 = v23;
          __int16 v52 = 1024;
          unsigned int v53 = v24;
          __int16 v54 = 1024;
          unsigned int v55 = v26;
          __int16 v56 = 1024;
          int v57 = WORD4(v41);
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "ADV Buffer found %.6P now:%u event:%u delta:%u dataLen:%d", v46, 0x2Au);
        }
        sub_1000105D0();
      }
      CFStringRef v28 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
      {
        int v29 = *(_DWORD *)(v18 + 13);
        int buf = 67109888;
        int v59 = v7;
        __int16 v60 = 1024;
        int v61 = v16;
        __int16 v62 = 1024;
        int v63 = v19;
        __int16 v64 = 1024;
        LODWORD(v65) = v29;
        _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "Skipping entry i:%d tableIndex:%d rssi:%d timeStamp:%d", (uint8_t *)&buf, 0x1Au);
      }
      ++v7;
    }
    while (v7 < v15);
    unsigned __int8 v30 = *(unsigned char *)(v2 + 1852) + 13;
    *(unsigned char *)(v2 + 1852) = v30;
    char v31 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
    {
      int v38 = *(unsigned __int8 *)(v2 + 1851);
      int buf = 67109376;
      int v59 = v38;
      __int16 v60 = 1024;
      int v61 = v30;
      _os_log_debug_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEBUG, "Match Buffer after parsing,fMatchBufferExpectedEntries:%d fMatchBufferEntriesReceived:%d", (uint8_t *)&buf, 0xEu);
      unsigned __int8 v30 = *(unsigned char *)(v2 + 1852);
    }
    if (v30 >= 0x14u)
    {
      *(_WORD *)(v2 + 1851) = 255;
      uint64_t v32 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        int v33 = *(unsigned __int8 *)(v2 + 144);
        if (*(void *)(v2 + 2120)) {
          int v34 = "YES";
        }
        else {
          int v34 = "NO";
        }
        int buf = 67109890;
        int v59 = v33;
        __int16 v60 = 1024;
        int v61 = 255;
        __int16 v62 = 1024;
        int v63 = 0;
        __int16 v64 = 2082;
        unint64_t v65 = v34;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_INFO, "Match Buffer We're done screenstate=%d fMatchBufferExpectedEntries:%d fMatchBufferEntriesReceived:%d pendingRules:%{public}s", (uint8_t *)&buf, 0x1Eu);
      }
      *(unsigned char *)(v2 + 1853) = 0;
      uint64_t v35 = *(void *)(v2 + 2120);
      int v36 = qword_100A19E90;
      BOOL v37 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
      if (v35)
      {
        if (v37)
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Match Buffer Reconfiguring the table", (uint8_t *)&buf, 2u);
        }
        sub_1006DA38C(v2);
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
          sub_1007947A0();
        }
      }
      else
      {
        if (v37)
        {
          LOWORD(buf) = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Match Buffer enabling the buffer again after reading", (uint8_t *)&buf, 2u);
        }
        sub_1006DA91C(v2, 1);
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
          sub_100794738();
        }
      }
    }
  }
  free(*(void **)(v39 + 40));
}

void sub_1006DA354(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006DA38C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "configureMatchActionRulesTableInternal", buf, 2u);
  }
  long long v3 = (id *)(a1 + 2112);
  objc_storeStrong((id *)(a1 + 2112), *(id *)(a1 + 2120));
  int v4 = *(void **)(a1 + 2120);
  *(void *)(a1 + 2120) = 0;

  if (*(void *)(a1 + 2112) && [*(id *)(a1 + 2112) count])
  {
    unsigned __int16 v32 = 256;
    uint64_t v5 = sub_1006E7170(a1, &v32);
    unsigned int v6 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "createMatchActionRulesTable returned %d", buf, 8u);
    }
    if (v5 != 15 && v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100794848();
      }
    }
    else
    {
      if ((unint64_t)[*v3 count] > 0x13) {
        int v7 = 20;
      }
      else {
        int v7 = [*v3 count];
      }
      unsigned int v28 = v7;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
        sub_100794980();
      }
      unsigned int v27 = v32;
      unsigned int v11 = v28;
      if (v28)
      {
        unsigned int v12 = 0;
        unsigned __int8 v13 = 0;
        uint64_t v14 = qword_100A19E90;
        *(void *)&long long v10 = 67109120;
        long long v26 = v10;
        while (1)
        {
          unsigned __int8 v29 = v13;
          char v31 = v12;
          *(_OWORD *)((char *)v48 + 14) = 0u;
          if ((int)(v11 - v12) >= 14) {
            unsigned __int8 v15 = 14;
          }
          else {
            unsigned __int8 v15 = v11 - v12;
          }
          long long v47 = 0uLL;
          v48[0] = 0uLL;
          long long v45 = 0uLL;
          long long v46 = 0uLL;
          long long v43 = 0uLL;
          long long v44 = 0uLL;
          long long v42 = 0uLL;
          long long v40 = 0uLL;
          long long v41 = 0uLL;
          long long v38 = 0uLL;
          long long v39 = 0uLL;
          long long v36 = 0uLL;
          long long v37 = 0uLL;
          *(_OWORD *)int buf = 0uLL;
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int v33 = v26;
            LODWORD(v34) = v15;
            _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "count=%d", v33, 8u);
          }
          unsigned __int8 v30 = v15;
          if (v15)
          {
            uint64_t v16 = 0;
            uint64_t v17 = v12;
            uint64_t v18 = 17 * v15;
            do
            {
              int v19 = [*v3 objectAtIndex:v17 v26];
              CFStringRef v20 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)int v33 = 138412290;
                int v34 = v19;
                _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "rule=%@", v33, 0xCu);
              }
              uint8x8_t v21 = [v19 objectForKeyedSubscript:@"MatchActionRuleLocalToken"];
              [v21 getBytes:&buf[v16 + 7] range:0, 6];

              int16x8_t v22 = [v19 objectForKeyedSubscript:@"MatchActionRulePeerAddress"];
              [v22 getBytes:&buf[v16] range:0, 6];

              unsigned int v23 = &buf[v16];
              v23[6] = 1;
              v23[13] = 18;

              v16 += 17;
              ++v17;
            }
            while (v18 != v16);
          }
          uint64_t v24 = sub_10003FB34();
          unsigned __int8 v13 = v30 + v31;
          uint64_t v5 = (*(uint64_t (**)(uint64_t, void, void, void, uint8_t *))(*(void *)v24 + 2872))(v24, v27, v29, (v30 + v31 - 1), buf);
          uint64_t v14 = qword_100A19E90;
          if (v5) {
            break;
          }
          unsigned int v12 = (v30 + v31);
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)int v33 = v26;
            LODWORD(v34) = (v30 + v31);
            _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "entriesSent=%d", v33, 8u);
            uint64_t v14 = qword_100A19E90;
          }
          unsigned int v11 = v28;
          if (v28 <= v12)
          {
            unsigned int v27 = v32;
            goto LABEL_39;
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100794918();
        }
      }
      else
      {
LABEL_39:
        uint64_t v25 = sub_10003FB34();
        uint64_t v5 = (*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)v25 + 2848))(v25, v27, 1, 0);
        if (v5 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_1007948B0();
        }
      }
    }
  }
  else
  {
    uint64_t v8 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "new Match table rules are nil", buf, 2u);
    }
    return 0;
  }
  return v5;
}

void sub_1006DA8EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006DA91C(uint64_t a1, int a2)
{
  int v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    int v17 = 67109120;
    LODWORD(v18) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Match Buffer enableMatchBuffering enable=%d", (uint8_t *)&v17, 8u);
  }
  if (*(unsigned __int8 *)(a1 + 1851) == 255)
  {
    uint64_t v8 = *(void **)(a1 + 1816);
    if (v8 == (void *)(a1 + 1824))
    {
LABEL_16:
      unsigned int v12 = qword_100A19E90;
      uint64_t v6 = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v17) = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No table is configured", (uint8_t *)&v17, 2u);
        return 0;
      }
    }
    else
    {
      while (*((unsigned char *)v8 + 28) != 18)
      {
        uint64_t v9 = (void *)v8[1];
        if (v9)
        {
          do
          {
            long long v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            long long v10 = (void *)v8[2];
            BOOL v11 = *v10 == (void)v8;
            uint64_t v8 = v10;
          }
          while (!v11);
        }
        uint64_t v8 = v10;
        if (v10 == (void *)(a1 + 1824)) {
          goto LABEL_16;
        }
      }
      uint64_t v13 = *((unsigned __int16 *)v8 + 15);
      uint64_t v14 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        unsigned __int8 v15 = "pausing";
        if (a2) {
          unsigned __int8 v15 = "activating";
        }
        int v17 = 136446210;
        uint64_t v18 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Match Buffer mode change -> %{public}s ", (uint8_t *)&v17, 0xCu);
      }
      uint64_t v16 = sub_10003FB34();
      uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v16 + 2848))(v16, v13, 1, a2 ^ 1u);
      if (v6 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_1007949E8();
      }
    }
  }
  else
  {
    uint64_t v5 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "We're in the middle of reading it, we cant pause now", (uint8_t *)&v17, 2u);
    }
    return 12;
  }
  return v6;
}

void sub_1006DAB84(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = [objc_alloc((Class)NSData) initWithBytes:a2 length:*(unsigned __int8 *)(a2 + 1) + 4];
    [gCBDaemonServer aopMessageReceived:];
  }
}

void sub_1006DAC08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006DAC20(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    int v17 = 138412290;
    id v18 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Setting up match rules with %@", (uint8_t *)&v17, 0xCu);
  }
  uint64_t v5 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 704))(v5))
  {
    if (v3)
    {
      id v6 = v3;
    }
    else
    {
      id v6 = +[NSArray array];
    }
    uint64_t v9 = *(void **)(a1 + 2120);
    *(void *)(a1 + 2120) = v6;

    uint64_t v8 = sub_1006DA91C(a1, 0);
    if (!v8)
    {
      long long v10 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        LOWORD(v17) = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "succesfully paused", (uint8_t *)&v17, 2u);
      }
      int v11 = sub_1006DD0C0(a1);
      unsigned int v12 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        int v17 = 67109120;
        LODWORD(v18) = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "readMatchBuffers returned %d", (uint8_t *)&v17, 8u);
      }
      if (v11 == 12)
      {
        uint64_t v13 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          LOWORD(v17) = 0;
          uint64_t v14 = "Match buffer read already in progress";
          goto LABEL_21;
        }
LABEL_22:
        uint64_t v8 = 0;
        goto LABEL_26;
      }
      if (!v11)
      {
        uint64_t v13 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          LOWORD(v17) = 0;
          uint64_t v14 = "Match buffer read started";
LABEL_21:
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, v14, (uint8_t *)&v17, 2u);
          goto LABEL_22;
        }
        goto LABEL_22;
      }
      unsigned __int8 v15 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        LOWORD(v17) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "we need to reconfigure now", (uint8_t *)&v17, 2u);
      }
      uint64_t v8 = sub_1006DA38C(a1);
    }
  }
  else
  {
    int v7 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      LOWORD(v17) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "This hardware does not support MatchActioRules", (uint8_t *)&v17, 2u);
    }
    uint64_t v8 = 11;
  }
LABEL_26:

  return v8;
}

void sub_1006DAEEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006DAF04()
{
  uint64_t v0 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "ADVBUFF Sending empty event", buf, 2u);
  }
  operator new();
}

void sub_1006DB224(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33)
{
}

void sub_1006DB2C4(uint64_t a1, void (***a2)(void, uint64_t, void, uint64_t, uint64_t, void, void ***, const __CFString *))
{
  uint64_t v3 = *(void *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  int v4 = v5;
  (**a2)(a2, v3, 0, a1 + 40, a1 + 56, 0, &v4, @"default");
  sub_1000486F0((uint64_t)&v4, v5[0]);
}

void sub_1006DB350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

char *sub_1006DB368(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = &off_100998468;
  *(void *)(a1 + 48) = v4;
  if (v4) {
    sub_100037354(v4);
  }
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  return sub_100037564((char *)(a1 + 56), *(long long **)(a2 + 56), *(long long **)(a2 + 64), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 64) - *(void *)(a2 + 56)) >> 2));
}

void sub_1006DB3EC(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 40) = v2;
  uint64_t v4 = *(atomic_uint **)(v1 + 48);
  if (v4) {
    sub_1000368F4(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006DB408(void *a1)
{
  uint64_t v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  a1[5] = &off_100998468;
  uint64_t v3 = (atomic_uint *)a1[6];
  if (v3)
  {
    sub_1000368F4(v3);
  }
}

void sub_1006DB47C(uint64_t a1, void (***a2)(void, uint64_t, void, uint64_t, uint64_t, void, void ***, const __CFString *))
{
  uint64_t v3 = *(void *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = v5;
  (**a2)(a2, v3, 0, a1 + 40, a1 + 56, 0, &v4, @"default");
  sub_1000486F0((uint64_t)&v4, v5[0]);
}

void sub_1006DB508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_1006DB520(uint64_t a1, void (***a2)(void, uint64_t, void, uint64_t, uint64_t, void, void ***, const __CFString *))
{
  uint64_t v3 = *(void *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = v5;
  (**a2)(a2, v3, 0, a1 + 40, a1 + 56, 0, &v4, @"default");
  sub_1000486F0((uint64_t)&v4, v5[0]);
}

void sub_1006DB5AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_1006DB5C4(uint64_t a1, void (***a2)(void, uint64_t, void, uint64_t, uint64_t, void, void ***, const __CFString *))
{
  uint64_t v3 = *(void *)(a1 + 32);
  v5[0] = 0;
  v5[1] = 0;
  uint64_t v4 = v5;
  (**a2)(a2, v3, 0, a1 + 40, a1 + 56, 0, &v4, @"default");
  sub_1000486F0((uint64_t)&v4, v5[0]);
}

void sub_1006DB650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

void sub_1006DB668(id a1)
{
}

BOOL sub_1006DB674(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  do
  {
    BOOL result = *(unsigned char *)(*(void *)(v1[5] + 8) + 122) != 0;
    if (*(unsigned char *)(*(void *)(v1[5] + 8) + 122)) {
      break;
    }
    uint64_t v4 = (void *)v1[1];
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (void *)v1[2];
        BOOL v6 = *v5 == (void)v1;
        uint64_t v1 = v5;
      }
      while (!v6);
    }
    uint64_t v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t sub_1006DB6E0(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 1800);
  if (v1)
  {
    uint64_t v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fADVBufferPeriodicDrainTimer destroyed!", v5, 2u);
      uint64_t v1 = *(NSObject **)(a1 + 1800);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(a1 + 1800));
    *(void *)(a1 + 1800) = 0;
  }
  return 0;
}

uint64_t sub_1006DB778(uint64_t a1)
{
  if (!*(void *)(a1 + 1800))
  {
    uint64_t v2 = *(void *)(a1 + 2128);
    uint64_t v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 134217984;
      uint64_t v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fADVBufferPeriodicDrainTimer %llu ms Armed!", buf, 0xCu);
    }
    uint64_t v4 = sub_100019878();
    uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v4 + 8));
    *(void *)(a1 + 1800) = v5;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1006E7BA4;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    BOOL v6 = *(NSObject **)(a1 + 1800);
    dispatch_time_t v7 = dispatch_time(0x8000000000000000, 1000000 * v2);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 1800));
  }
  return 0;
}

uint64_t sub_1006DB8D8(uint64_t a1, unsigned int a2)
{
  if (a2 >= 3)
  {
    uint64_t v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      LODWORD(v29) = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HW ADV Buffer handle out of range (%d), ignoring agent request", buf, 8u);
    }
    return 7;
  }
  uint64_t v6 = a1 + 544 * a2;
  int v8 = *(unsigned __int8 *)(v6 + 172);
  dispatch_time_t v7 = (unsigned char *)(v6 + 172);
  if (v8 != 255)
  {
    uint64_t v9 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      if (a2 > 2) {
        CFStringRef v10 = @"UNKNOWN";
      }
      else {
        CFStringRef v10 = off_1009BF9C8[(char)a2];
      }
      *(_DWORD *)int buf = 138543362;
      CFStringRef v29 = v10;
      uint64_t v16 = "ADVBUFF(%{public}@): Cannot read ADV buffer since we're already in the process of reading it";
      uint64_t v4 = 12;
      int v17 = v9;
LABEL_15:
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, v16, buf, 0xCu);
      return v4;
    }
    return 12;
  }
  int v12 = *(unsigned __int8 *)(a1 + 544 * a2 + 167);
  uint64_t v13 = qword_100A19E90;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
  if (!v12)
  {
    if (v14)
    {
      if (a2 > 2) {
        CFStringRef v18 = @"UNKNOWN";
      }
      else {
        CFStringRef v18 = off_1009BF9C8[(char)a2];
      }
      *(_DWORD *)int buf = 138543362;
      CFStringRef v29 = v18;
      uint64_t v16 = "ADVBUFF(%{public}@): Cannot read ADV buffer since its not created yet";
      uint64_t v4 = 12;
      int v17 = v13;
      goto LABEL_15;
    }
    return 12;
  }
  if (v14)
  {
    if (a2 > 2) {
      CFStringRef v15 = @"UNKNOWN";
    }
    else {
      CFStringRef v15 = off_1009BF9C8[(char)a2];
    }
    *(_DWORD *)int buf = 138543362;
    CFStringRef v29 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): Reading ADV Buffer", buf, 0xCu);
  }
  uint64_t v19 = *(void *)sub_10003FB34();
  uint64_t v4 = (*(uint64_t (**)(void))(v19 + 2816))();
  CFStringRef v20 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 2) {
      CFStringRef v21 = @"UNKNOWN";
    }
    else {
      CFStringRef v21 = off_1009BF9C8[(char)a2];
    }
    *(_DWORD *)int buf = 138543874;
    CFStringRef v29 = v21;
    __int16 v30 = 1024;
    int v31 = v4;
    __int16 v32 = 1024;
    int v33 = 0;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "ADVBUFF(%{public}@): Read ADV buffer complete with status %d expectedEntries %d", buf, 0x18u);
    CFStringRef v20 = qword_100A19E90;
  }
  *dispatch_time_t v7 = 0;
  uint64_t v22 = a1 + 544 * a2;
  *(unsigned char *)(v22 + 173) = 0;
  *(_WORD *)(v22 + 174) = 0;
  if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
  {
    if (a2 > 2) {
      CFStringRef v23 = @"UNKNOWN";
    }
    else {
      CFStringRef v23 = off_1009BF9C8[(char)a2];
    }
    int v24 = *v7;
    *(_DWORD *)int buf = 138543874;
    CFStringRef v29 = v23;
    __int16 v30 = 1024;
    int v31 = v4;
    __int16 v32 = 1024;
    int v33 = v24;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): Read ADV buffer complete with status %d number of available entries %d", buf, 0x18u);
  }
  if (a2 == 2) {
    ++*(void *)(a1 + 2296);
  }
  if (!v4 && !*v7)
  {
    uint64_t v25 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      if (a2 > 2) {
        CFStringRef v26 = @"UNKNOWN";
      }
      else {
        CFStringRef v26 = off_1009BF9C8[(char)a2];
      }
      *(_DWORD *)int buf = 138543362;
      CFStringRef v29 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): Nothing in the ADV buffer, we're not expecing any events", buf, 0xCu);
    }
    *dispatch_time_t v7 = -1;
    *(unsigned char *)(a1 + 544 * a2 + 169) = 0;
  }
  return v4;
}

void sub_1006DBD4C()
{
}

uint64_t sub_1006DBD54(unsigned char *a1)
{
  if (!sub_1006DB674((uint64_t)a1))
  {
    if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
    {
LABEL_13:
      uint64_t v2 = sub_100019878();
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      void v4[2] = sub_1006DBE9C;
      v4[3] = &unk_100997528;
      void v4[4] = a1;
      sub_100013018(v2, v4);
      return 12;
    }
LABEL_12:
    sub_100794A50();
    goto LABEL_13;
  }
  if (!a1[167] && !a1[711])
  {
    if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (a1[1853] || a1[171] && a1[167] || a1[715] && a1[711])
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100794A84();
    }
    return 12;
  }
  sub_1006DBEA4((uint64_t)a1, 4);
  return 0;
}

void sub_1006DBE9C()
{
}

void sub_1006DBEA4(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1006DCC8C;
  v5[3] = &unk_100997570;
  _OWORD v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1006DBF28(uint64_t a1)
{
  if (sub_100054914(a1)) {
    int v2 = 1;
  }
  else {
    int v2 = sub_10005472C(a1);
  }
  uint64_t v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 1864);
    v8[0] = 67109376;
    v8[1] = v2;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "tryReadAOPBTProxCtxBuffers AOPBTProxContextBufferRequests:%d fAOPBTProxCtxBufferReadInProgress:%d", (uint8_t *)v8, 0xEu);
  }
  if (*(unsigned char *)(a1 + 1864))
  {
    uint64_t v5 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AOPBTProxCtxBuffers already being read, skipping", (uint8_t *)v8, 2u);
    }
  }
  else if (v2)
  {
    if (!sub_100054914(a1)) {
      goto LABEL_27;
    }
    int v6 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "AOPBTProxCtxBuffer read in progress, pause match All Types match table", (uint8_t *)v8, 2u);
    }
    if (sub_1006DC190(a1, 0, 0))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100794B20();
      }
    }
    else
    {
      if (!sub_10005472C(a1)) {
        goto LABEL_22;
      }
LABEL_27:
      dispatch_time_t v7 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        LOWORD(v8[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "AOPBTProxCtxBuffer read in progress, pause Proximity Pairing match table", (uint8_t *)v8, 2u);
      }
      if (sub_1006DC190(a1, 7, 0))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100794AB8();
        }
      }
      else
      {
LABEL_22:
        *(unsigned char *)(a1 + 1864) = 1;
        if (qword_1009F85E8 != -1) {
          dispatch_once(&qword_1009F85E8, &stru_1009BF808);
        }
        sub_1003C37C0(qword_1009F85E0);
      }
    }
  }
}

uint64_t sub_1006DC190(uint64_t a1, int a2, int a3)
{
  int v6 = (uint64_t **)(a1 + 1816);
  dispatch_time_t v7 = *(void **)(a1 + 1816);
  if (v7 == (void *)(a1 + 1824))
  {
LABEL_13:
    uint64_t v11 = 0;
  }
  else
  {
    while (1)
    {
      BOOL v8 = *((unsigned __int8 *)v7 + 28) != a2 || *((_WORD *)v7 + 16) == 0;
      if (!v8) {
        break;
      }
      __int16 v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          __int16 v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v7[2];
          BOOL v8 = *v10 == (void)v7;
          dispatch_time_t v7 = v10;
        }
        while (!v8);
      }
      dispatch_time_t v7 = v10;
      if (v10 == (void *)(a1 + 1824)) {
        goto LABEL_13;
      }
    }
    uint64_t v11 = *((unsigned __int16 *)v7 + 15);
  }
  int v12 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    unsigned __int8 v35 = v11;
    *(void *)int buf = &v35;
    int v13 = *((unsigned __int8 *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 28);
    unsigned __int8 v34 = v11;
    *(void *)int buf = &v34;
    BOOL v14 = *((_WORD *)sub_1006F620C(v6, &v34, (uint64_t)&unk_1007BE9D0, (char **)buf) + 16) != 0;
    unsigned __int8 v33 = v11;
    *(void *)int buf = &v33;
    BOOL v15 = *((_WORD *)sub_1006F620C(v6, &v33, (uint64_t)&unk_1007BE9D0, (char **)buf) + 17) != 0;
    *(_DWORD *)int buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = v11;
    __int16 v37 = 1024;
    int v38 = v13;
    __int16 v39 = 1024;
    *(_DWORD *)long long v40 = a3;
    *(_WORD *)&v40[4] = 1024;
    *(_DWORD *)&v40[6] = v14;
    __int16 v41 = 1024;
    BOOL v42 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "enableMatchTable handle:%d type:%d enable=%d created=%d enabled=%d", buf, 0x20u);
  }
  if ((unsigned __int16)(v11 - 262) > 0xFFF9u)
  {
    unsigned __int8 v35 = v11;
    *(void *)int buf = &v35;
    if (*((_WORD *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 16))
    {
      unsigned __int8 v35 = v11;
      *(void *)int buf = &v35;
      char v18 = (*((_WORD *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 17) != 0) ^ a3;
      uint64_t v19 = qword_100A19E90;
      BOOL v20 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
      if (v18)
      {
        if (v20)
        {
          unsigned __int8 v35 = v11;
          *(void *)int buf = &v35;
          int v21 = *((unsigned __int8 *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 28);
          uint64_t v22 = "pausing";
          *(_DWORD *)int buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v11;
          if (a3) {
            uint64_t v22 = "activating";
          }
          __int16 v37 = 1024;
          int v38 = v21;
          __int16 v39 = 2082;
          *(void *)long long v40 = v22;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Match Table handle:%d type:%d mode change -> %{public}s ", buf, 0x18u);
        }
        uint64_t v23 = sub_10003FB34();
        uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v23 + 2848))(v23, v11, 1, a3 ^ 1u);
        int v24 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          unsigned __int8 v35 = v11;
          *(void *)int buf = &v35;
          int v25 = *((unsigned __int8 *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 28);
          *(_DWORD *)int buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v11;
          __int16 v37 = 1024;
          int v38 = v25;
          __int16 v39 = 1024;
          *(_DWORD *)long long v40 = v17;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Match Table handle:%d type:%d advBufMatchControl returned %d", buf, 0x14u);
        }
        if (v17)
        {
          CFStringRef v26 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
          {
            unsigned __int8 v35 = v11;
            *(void *)int buf = &v35;
            int v27 = *((unsigned __int8 *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 28);
            *(_DWORD *)int buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = v11;
            __int16 v37 = 1024;
            int v38 = v27;
            __int16 v39 = 1024;
            *(_DWORD *)long long v40 = v17;
            _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Match Table handle:%d type:%d Failed to enable match table : %d", buf, 0x14u);
          }
        }
        else
        {
          unsigned __int8 v35 = v11;
          *(void *)int buf = &v35;
          *((_WORD *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 17) = a3;
        }
        sub_1006E7894((double *)a1, a2, a3);
      }
      else
      {
        if (v20)
        {
          unsigned __int8 v35 = v11;
          *(void *)int buf = &v35;
          int v29 = *((unsigned __int8 *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 28);
          __int16 v30 = "paused";
          *(_DWORD *)int buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v11;
          if (a3) {
            __int16 v30 = "active";
          }
          __int16 v37 = 1024;
          int v38 = v29;
          __int16 v39 = 2082;
          *(void *)long long v40 = v30;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Match Table handle:%d type:%d already %{public}s", buf, 0x18u);
        }
        return 0;
      }
    }
    else
    {
      unsigned int v28 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
      {
        unsigned __int8 v35 = v11;
        *(void *)int buf = &v35;
        int v32 = *((unsigned __int8 *)sub_1006F620C(v6, &v35, (uint64_t)&unk_1007BE9D0, (char **)buf) + 28);
        *(_DWORD *)int buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v11;
        __int16 v37 = 1024;
        int v38 = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Match Table handle:%d type:%d not created", buf, 0xEu);
      }
      return 12;
    }
  }
  else
  {
    uint64_t v16 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100794B88(a2, v11, v16);
    }
    return 7;
  }
  return v17;
}

void sub_1006DC788(uint64_t a1)
{
  int v2 = sub_1000548AC(a1);
  uint64_t v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 1854);
    v7[0] = 67109376;
    v7[1] = v2;
    __int16 v8 = 1024;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "tryReadAOPBTADPDBuffers haveAnyHwAOPBTADPDBufferRequests:%d fAOPBTBufferReadInProgress:%d", (uint8_t *)v7, 0xEu);
  }
  if (*(unsigned char *)(a1 + 1854))
  {
    uint64_t v5 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "AOPBTADPDBuff Already being read, skipping", (uint8_t *)v7, 2u);
    }
  }
  else if (v2)
  {
    int v6 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      LOWORD(v7[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "AOPBTADPDBuff read in progress", (uint8_t *)v7, 2u);
    }
    if (sub_1006DC190(a1, 22, 0))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100794C04();
      }
    }
    else
    {
      *(unsigned char *)(a1 + 1854) = 1;
      sub_1006DC95C(a1);
      sub_1006DC9F4(a1);
      if (qword_1009F85E8 != -1) {
        dispatch_once(&qword_1009F85E8, &stru_1009BF808);
      }
      sub_1003C39D8(qword_1009F85E0);
    }
  }
}

uint64_t sub_1006DC95C(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 1808);
  if (v1)
  {
    uint64_t v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fAOPBTBufferPeriodicDrainTimer destroyed!", v5, 2u);
      uint64_t v1 = *(NSObject **)(a1 + 1808);
    }
    dispatch_source_cancel(v1);
    dispatch_release(*(dispatch_object_t *)(a1 + 1808));
    *(void *)(a1 + 1808) = 0;
  }
  return 0;
}

uint64_t sub_1006DC9F4(uint64_t a1)
{
  if (!*(void *)(a1 + 1808))
  {
    int v2 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Arming fAOPBTBufferPeriodicDrainTimer", buf, 2u);
    }
    uint64_t v3 = sub_100019878();
    int v4 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v3 + 8));
    *(void *)(a1 + 1808) = v4;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1006E7ADC;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v4, handler);
    uint64_t v5 = *(NSObject **)(a1 + 1808);
    dispatch_time_t v6 = dispatch_time(0x8000000000000000, 300000000000);
    dispatch_source_set_timer(v5, v6, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 1808));
  }
  return 0;
}

void sub_1006DCB10(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1006DCB94;
  v5[3] = &unk_100997570;
  _OWORD v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1006DCB94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    uint64_t v5 = "On";
    if (!*(unsigned char *)(v2 + 144)) {
      uint64_t v5 = "Off";
    }
    v6[0] = 67109378;
    v6[1] = v4;
    __int16 v7 = 2082;
    __int16 v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "tryReadAOPBTBuffers reason:%d fScreenState:%{public}s", (uint8_t *)v6, 0x12u);
  }
  if (*(_DWORD *)(a1 + 40) == 1) {
    sub_1006DBF28(v2);
  }
  sub_1006DC788(v2);
}

void sub_1006DCC8C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_100035F54();
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 704))(v3);
  uint64_t v5 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(_DWORD *)(a1 + 40);
    int v7 = *(unsigned __int8 *)(v2 + 1851);
    if (*(unsigned char *)(v2 + 144)) {
      __int16 v8 = "On";
    }
    else {
      __int16 v8 = "Off";
    }
    int v9 = (unsigned __int16)[*(id *)(v2 + 2112) count];
    BOOL v10 = sub_1006DB674(v2);
    int v11 = *(unsigned __int8 *)(v2 + 172);
    int v12 = *(unsigned __int8 *)(v2 + 171);
    int v13 = *(unsigned __int8 *)(v2 + 715);
    int v14 = *(unsigned __int8 *)(v2 + 1853);
    int v27 = 67111426;
    int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v7;
    __int16 v31 = 2082;
    int v32 = v8;
    __int16 v33 = 1024;
    int v34 = v9;
    __int16 v35 = 1024;
    int v36 = v4;
    __int16 v37 = 1024;
    BOOL v38 = v10;
    __int16 v39 = 1024;
    int v40 = v11;
    __int16 v41 = 1024;
    int v42 = v12;
    __int16 v43 = 1024;
    int v44 = v13;
    __int16 v45 = 1024;
    int v46 = v14;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TryReadMatchAndADVBuffers reason:%d fMatchBufferExpectedEntries:0x%d fScreenState:%{public}s fMatchActionTableRulesCount:%d supportedADVBuffers:%d haveAnyHwObjectDiscoveryRequests:%d fADVBufferExpectedEntries:%d readInProgress[Wild]:%d readInProgress[NearOwner]:%d fMatchBufferReadInProgress:%d", (uint8_t *)&v27, 0x42u);
  }
  if (*(unsigned char *)(v2 + 1853)
    || *(unsigned char *)(v2 + 171) && *(unsigned char *)(v2 + 167)
    || *(unsigned char *)(v2 + 715) && *(unsigned char *)(v2 + 711))
  {
    BOOL v15 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v27) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Already reading buffers, skipping", (uint8_t *)&v27, 2u);
    }
  }
  else
  {
    sub_1006DB6E0(v2);
    if (*(unsigned __int8 *)(v2 + 1851) == 255)
    {
      if ([*(id *)(v2 + 2112) count])
      {
        uint64_t v20 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 704))(v20))
        {
          *(unsigned char *)(v2 + 1853) = 1;
          int v21 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
          {
            LOWORD(v27) = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Match Buffer Reading ADV Buff", (uint8_t *)&v27, 2u);
          }
          int v22 = sub_1006DA91C(v2, 0);
          uint64_t v23 = qword_100A19E90;
          if (v22)
          {
            int v24 = v22;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
            {
              int v27 = 67109120;
              int v28 = v24;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_INFO, "Failed to pause match buffers with result %d", (uint8_t *)&v27, 8u);
            }
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
              sub_100794CF8(v2, v2 + 1851, v23);
            }
            if (*(unsigned __int8 *)(v2 + 1851) == 255)
            {
              CFStringRef v26 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
              {
                LOWORD(v27) = 0;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Buffer is empty, we need to re-enable the match tables now", (uint8_t *)&v27, 2u);
                CFStringRef v26 = qword_100A19E90;
              }
              *(unsigned char *)(v2 + 1853) = 0;
              if (os_log_type_enabled(v26, OS_LOG_TYPE_DEBUG)) {
                sub_100794C6C(v2, v26);
              }
            }
          }
        }
      }
    }
    *(unsigned char *)(v2 + 1795) = 0;
    *(_WORD *)(v2 + 1793) = 0;
    if (sub_1006DB674(v2))
    {
      uint64_t v16 = objc_opt_new();
      uint64_t v17 = *(void **)(v2 + 152);
      *(void *)(v2 + 152) = v16;

      uint64_t v18 = *(int *)(a1 + 40);
      if (v18 <= 4) {
        [*(id *)(v2 + 152) setObject:*((void *)&off_1009BF908 + v18) forKeyedSubscript:@"DrainReason"];
      }
      BOOL v19 = *(unsigned __int8 *)(v2 + 172) == 255 && *(unsigned char *)(v2 + 167) != 0;
      *(unsigned char *)(v2 + 1793) = v19;
      BOOL v25 = *(unsigned __int8 *)(v2 + 716) == 255 && *(unsigned char *)(v2 + 711) != 0;
      *(unsigned char *)(v2 + 1794) = v25;
    }
    sub_1006D8A0C(v2);
  }
}

uint64_t sub_1006DD0C0(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 1851) != 255)
  {
    uint64_t v1 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "Match Buffer Cannot read Match buffer since we're already in the process of reading it", (uint8_t *)&v20, 2u);
    }
    return 12;
  }
  id v4 = [*(id *)(a1 + 2112) count];
  uint64_t v5 = qword_100A19E90;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
  if (!v4)
  {
    if (v6)
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Match Buffer Cannot read Match buffer since we do not have any rules set up", (uint8_t *)&v20, 2u);
    }
    return 18;
  }
  if (v6)
  {
    LOWORD(v20) = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Match Buffer Reading Match Buffer", (uint8_t *)&v20, 2u);
  }
  int v7 = *(void **)(a1 + 1816);
  if (v7 == (void *)(a1 + 1824))
  {
LABEL_17:
    int v12 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v20) = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No table is configured", (uint8_t *)&v20, 2u);
    }
    return 17;
  }
  else
  {
    __int16 v8 = (unsigned char *)(a1 + 1851);
    while (*((unsigned char *)v7 + 28) != 18)
    {
      int v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (void *)v7[2];
          BOOL v11 = *v10 == (void)v7;
          int v7 = v10;
        }
        while (!v11);
      }
      int v7 = v10;
      if (v10 == (void *)(a1 + 1824)) {
        goto LABEL_17;
      }
    }
    uint64_t v13 = *((unsigned __int16 *)v7 + 15);
    int v14 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      int v20 = 67109120;
      int v21 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Match Buffer reading handle %d", (uint8_t *)&v20, 8u);
    }
    *(unsigned char *)(a1 + 1852) = 0;
    uint64_t v15 = sub_10003FB34();
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 2888))(v15, v13, a1 + 1851);
    uint64_t v16 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      int v17 = *v8;
      int v20 = 67109376;
      int v21 = v2;
      __int16 v22 = 1024;
      int v23 = v17;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "Match Buffer Read Match buffer complete with status %d number of available entries %d", (uint8_t *)&v20, 0xEu);
    }
    if (!v2)
    {
      if (*v8) {
        return 0;
      }
      BOOL v19 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        LOWORD(v20) = 0;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Match Buffer Nothing in the ADV buffer, we're not expecing any events", (uint8_t *)&v20, 2u);
      }
      *__int16 v8 = -1;
      return 18;
    }
  }
  return v2;
}

void sub_1006DD3E0(uint64_t a1, const void *a2)
{
  memcpy(v5, a2, sizeof(v5));
  uint64_t v3 = sub_100019878();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1006DD470;
  v4[3] = &unk_1009BF208;
  void v4[4] = a1;
  sub_100013018(v3, v4);
}

void sub_1006DD470(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 2144) + *(unsigned int *)(a1 + 68);
  *(void *)(v2 + 2144) = v3;
  uint64_t v4 = *(void *)(v2 + 2136) + *(unsigned int *)(a1 + 72);
  *(void *)(v2 + 2136) = v4;
  uint64_t v5 = *(void *)(v2 + 2160) + *(unsigned int *)(a1 + 60);
  *(void *)(v2 + 2160) = v5;
  uint64_t v6 = *(void *)(v2 + 2152) + *(unsigned int *)(a1 + 64);
  *(void *)(v2 + 2152) = v6;
  int v7 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a1 + 80);
    int v9 = *(_DWORD *)(a1 + 84);
    int v10 = *(_DWORD *)(a1 + 88);
    int v11 = *(_DWORD *)(a1 + 92);
    int v12 = *(_DWORD *)(a1 + 96);
    int v13 = *(_DWORD *)(a1 + 100);
    int v14 = *(_DWORD *)(a1 + 104);
    int v15 = *(_DWORD *)(a1 + 108);
    int v16 = *(_DWORD *)(a1 + 112);
    int v17 = *(_DWORD *)(a1 + 116);
    int v18 = *(_DWORD *)(a1 + 120);
    int v19 = *(_DWORD *)(a1 + 124);
    int v20 = *(_DWORD *)(a1 + 128);
    int v21 = *(_DWORD *)(a1 + 132);
    int v22 = *(_DWORD *)(a1 + 136);
    int v23 = *(_DWORD *)(a1 + 140);
    int v24 = *(_DWORD *)(a1 + 144);
    int v25 = *(_DWORD *)(a1 + 148);
    int v26 = *(_DWORD *)(a1 + 152);
    int v27 = *(_DWORD *)(a1 + 156);
    int v28 = *(_DWORD *)(a1 + 160);
    int v88 = *(_DWORD *)(a1 + 164);
    int v89 = *(_DWORD *)(a1 + 168);
    int v90 = *(_DWORD *)(a1 + 172);
    *(_DWORD *)int buf = 134224896;
    *(void *)int v92 = v3;
    *(_WORD *)&v92[8] = 2048;
    uint64_t v93 = v4;
    *(_WORD *)int v94 = 2048;
    *(void *)&v94[2] = v5;
    __int16 v95 = 2048;
    *(void *)CFStringRef v96 = v6;
    *(_WORD *)&v96[8] = 1024;
    *(_DWORD *)int v97 = v8;
    *(_WORD *)&v97[4] = 1024;
    *(_DWORD *)int v98 = v9;
    *(_WORD *)&void v98[4] = 1024;
    *(_DWORD *)uint64_t v99 = v10;
    *(_WORD *)&v99[4] = 1024;
    *(_DWORD *)unsigned int v100 = v11;
    *(_WORD *)&v100[4] = 1024;
    *(_DWORD *)unint64_t v101 = v12;
    *(_WORD *)&v101[4] = 1024;
    *(_DWORD *)unint64_t v102 = v13;
    *(_WORD *)&v102[4] = 1024;
    *(_DWORD *)uint64_t v103 = v14;
    *(_WORD *)&v103[4] = 1024;
    *(_DWORD *)uint64_t v104 = v15;
    *(_WORD *)&v104[4] = 1024;
    *(_DWORD *)unint64_t v105 = v16;
    *(_WORD *)&_OWORD v105[4] = 1024;
    *(_DWORD *)CFStringRef v106 = v17;
    *(_WORD *)&v106[4] = 1024;
    *(_DWORD *)int v107 = v18;
    *(_WORD *)&v107[4] = 1024;
    *(_DWORD *)int v108 = v19;
    *(_WORD *)&v108[4] = 1024;
    *(_DWORD *)unsigned int v109 = v20;
    *(_WORD *)&v109[4] = 1024;
    *(_DWORD *)int v110 = v21;
    *(_WORD *)&v110[4] = 1024;
    *(_DWORD *)CFStringRef v111 = v22;
    *(_WORD *)&v111[4] = 1024;
    *(_DWORD *)int v112 = v23;
    *(_WORD *)&v112[4] = 1024;
    int v113 = v24;
    __int16 v114 = 1024;
    int v115 = v25;
    __int16 v116 = 1024;
    int v117 = v26;
    __int16 v118 = 1024;
    int v119 = v27;
    __int16 v120 = 1024;
    int v121 = v28;
    __int16 v122 = 1024;
    int v123 = v88;
    __int16 v124 = 1024;
    int v125 = v89;
    __int16 v126 = 1024;
    int v127 = v90;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LEStats: BMC:%lld LP:%lld, MC: %lld  %lld  ]  RxL:%05d:%05d:%05d  EAdv:%04d:%04d:%04d LeLR:%04d:%04d:%04d Aux:%04d:%04d:%04d Arsp:%04d:%04d:%04d cd:%04d:%04d:%04d aCrc:%05d:%05d:%05d def:%04d:%04d:%04d", buf, 0xBAu);
    int v7 = qword_100A19E90;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v29 = *(_DWORD *)(a1 + 176);
    int v30 = *(_DWORD *)(a1 + 180);
    int v31 = *(_DWORD *)(a1 + 184);
    int v32 = *(_DWORD *)(a1 + 188);
    int v33 = *(_DWORD *)(a1 + 192);
    int v34 = *(_DWORD *)(a1 + 196);
    int v35 = *(_DWORD *)(a1 + 200);
    int v36 = *(_DWORD *)(a1 + 204);
    int v37 = *(_DWORD *)(a1 + 208);
    int v38 = *(_DWORD *)(a1 + 212);
    int v39 = *(_DWORD *)(a1 + 216);
    int v40 = *(_DWORD *)(a1 + 220);
    int v41 = *(_DWORD *)(a1 + 224);
    int v42 = *(_DWORD *)(a1 + 228);
    int v43 = *(_DWORD *)(a1 + 232);
    int v44 = *(_DWORD *)(a1 + 236);
    int v45 = *(_DWORD *)(a1 + 240);
    int v46 = *(_DWORD *)(a1 + 244);
    int v47 = *(_DWORD *)(a1 + 248);
    int v48 = *(_DWORD *)(a1 + 252);
    int v49 = *(_DWORD *)(a1 + 256);
    int v50 = *(_DWORD *)(a1 + 260);
    int v51 = *(_DWORD *)(a1 + 264);
    *(_DWORD *)int buf = 67114752;
    *(_DWORD *)int v92 = v29;
    *(_WORD *)&v92[4] = 1024;
    *(_DWORD *)&v92[6] = v30;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v31;
    HIWORD(v93) = 1024;
    *(_DWORD *)int v94 = v32;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v33;
    __int16 v95 = 1024;
    *(_DWORD *)CFStringRef v96 = v34;
    *(_WORD *)&v96[4] = 1024;
    *(_DWORD *)&v96[6] = v35;
    *(_WORD *)int v97 = 1024;
    *(_DWORD *)&_DWORD v97[2] = v36;
    *(_WORD *)int v98 = 1024;
    *(_DWORD *)&v98[2] = v37;
    *(_WORD *)uint64_t v99 = 1024;
    *(_DWORD *)&v99[2] = v38;
    *(_WORD *)unsigned int v100 = 1024;
    *(_DWORD *)&v100[2] = v39;
    *(_WORD *)unint64_t v101 = 1024;
    *(_DWORD *)&v101[2] = v40;
    *(_WORD *)unint64_t v102 = 1024;
    *(_DWORD *)&v102[2] = v41;
    *(_WORD *)uint64_t v103 = 1024;
    *(_DWORD *)&v103[2] = v42;
    *(_WORD *)uint64_t v104 = 1024;
    *(_DWORD *)&v104[2] = v43;
    *(_WORD *)unint64_t v105 = 1024;
    *(_DWORD *)&v105[2] = v44;
    *(_WORD *)CFStringRef v106 = 1024;
    *(_DWORD *)&void v106[2] = v45;
    *(_WORD *)int v107 = 1024;
    *(_DWORD *)&v107[2] = v46;
    *(_WORD *)int v108 = 1024;
    *(_DWORD *)&v108[2] = v47;
    *(_WORD *)unsigned int v109 = 1024;
    *(_DWORD *)&v109[2] = v48;
    *(_WORD *)int v110 = 1024;
    *(_DWORD *)&v110[2] = v49;
    *(_WORD *)CFStringRef v111 = 1024;
    *(_DWORD *)&v111[2] = v50;
    *(_WORD *)int v112 = 1024;
    *(_DWORD *)&v112[2] = v51;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "LEStats2: Rxa=%04d tSr=%04d tASr=%04d rSr=%04d tCi=%04d tCr=%04d rsRsp=%04d rsi=%04d rcr=%04d nba=%04d:%04d:%04d:%04d tot:%04d:%04d cden=%04d:%04d:%04d:%04d totAdv=%04d:%04d:%04d:%04d", buf, 0x8Cu);
    int v7 = qword_100A19E90;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v52 = *(_DWORD *)(v2 + 2748);
    int v53 = *(_DWORD *)(v2 + 2752);
    int v54 = *(_DWORD *)(v2 + 2756);
    int v55 = *(_DWORD *)(a1 + 60) + v52;
    int v56 = *(_DWORD *)(a1 + 68) + v53;
    int v57 = *(_DWORD *)(a1 + 44) + v54;
    *(_DWORD *)int buf = 67110400;
    *(_DWORD *)int v92 = v52;
    *(_WORD *)&v92[4] = 1024;
    *(_DWORD *)&v92[6] = v53;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v54;
    HIWORD(v93) = 1024;
    *(_DWORD *)int v94 = v55;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v56;
    __int16 v95 = 1024;
    *(_DWORD *)CFStringRef v96 = v57;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BLEScanStat: MainCoreELNAOn [numAdvs, numAdvsBeforeFiltering, totalTime] [%d, %d, %d] -> [%d, %d, %d]", buf, 0x26u);
    int v7 = qword_100A19E90;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v58 = *(_DWORD *)(v2 + 2760);
    int v59 = *(_DWORD *)(v2 + 2764);
    int v60 = *(_DWORD *)(v2 + 2768);
    int v61 = *(_DWORD *)(a1 + 64) + v58;
    int v62 = *(_DWORD *)(a1 + 72) + v59;
    int v63 = *(_DWORD *)(a1 + 48) + v60;
    *(_DWORD *)int buf = 67110400;
    *(_DWORD *)int v92 = v58;
    *(_WORD *)&v92[4] = 1024;
    *(_DWORD *)&v92[6] = v59;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v60;
    HIWORD(v93) = 1024;
    *(_DWORD *)int v94 = v61;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v62;
    __int16 v95 = 1024;
    *(_DWORD *)CFStringRef v96 = v63;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BLEScanStat: MainCoreELNABypass [numAdvs, numAdvsBeforeFiltering, totalTime] [%d, %d, %d] -> [%d, %d, %d]", buf, 0x26u);
    int v7 = qword_100A19E90;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v64 = *(_DWORD *)(v2 + 2772);
    int v65 = *(_DWORD *)(v2 + 2776);
    int v66 = *(_DWORD *)(v2 + 2780);
    int v67 = *(_DWORD *)(a1 + 252) + v64;
    int v68 = *(_DWORD *)(a1 + 260) + v65;
    int v69 = *(_DWORD *)(a1 + 228) + v66;
    *(_DWORD *)int buf = 67110400;
    *(_DWORD *)int v92 = v64;
    *(_WORD *)&v92[4] = 1024;
    *(_DWORD *)&v92[6] = v65;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v66;
    HIWORD(v93) = 1024;
    *(_DWORD *)int v94 = v67;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v68;
    __int16 v95 = 1024;
    *(_DWORD *)CFStringRef v96 = v69;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BLEScanStat: ScanCoreELNAOn [numAdvs, numAdvsBeforeFiltering, totalTime] [%d, %d, %d] -> [%d, %d, %d]", buf, 0x26u);
    int v7 = qword_100A19E90;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v70 = *(_DWORD *)(v2 + 2784);
    int v71 = *(_DWORD *)(v2 + 2788);
    int v72 = *(_DWORD *)(v2 + 2792);
    int v73 = *(_DWORD *)(a1 + 256) + v70;
    int v74 = *(_DWORD *)(a1 + 264) + v71;
    int v75 = *(_DWORD *)(a1 + 232) + v72;
    *(_DWORD *)int buf = 67110400;
    *(_DWORD *)int v92 = v70;
    *(_WORD *)&v92[4] = 1024;
    *(_DWORD *)&v92[6] = v71;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v72;
    HIWORD(v93) = 1024;
    *(_DWORD *)int v94 = v73;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v74;
    __int16 v95 = 1024;
    *(_DWORD *)CFStringRef v96 = v75;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BLEScanStat: ScanCoreELNABypass [numAdvs, numAdvsBeforeFiltering, totalTime] [%d, %d, %d] -> [%d, %d, %d]", buf, 0x26u);
    int v7 = qword_100A19E90;
  }
  *(_DWORD *)(v2 + 2748) += *(_DWORD *)(a1 + 60);
  *(_DWORD *)(v2 + 2752) += *(_DWORD *)(a1 + 68);
  *(_DWORD *)(v2 + 2756) += *(_DWORD *)(a1 + 44);
  *(_DWORD *)(v2 + 2760) += *(_DWORD *)(a1 + 64);
  *(_DWORD *)(v2 + 2764) += *(_DWORD *)(a1 + 72);
  *(_DWORD *)(v2 + 2768) += *(_DWORD *)(a1 + 48);
  *(_DWORD *)(v2 + 2772) += *(_DWORD *)(a1 + 252);
  *(_DWORD *)(v2 + 2776) += *(_DWORD *)(a1 + 260);
  *(_DWORD *)(v2 + 2780) += *(_DWORD *)(a1 + 228);
  *(_DWORD *)(v2 + 2784) += *(_DWORD *)(a1 + 256);
  *(_DWORD *)(v2 + 2788) += *(_DWORD *)(a1 + 264);
  *(_DWORD *)(v2 + 2792) += *(_DWORD *)(a1 + 232);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG))
  {
    int v76 = *(_DWORD *)(v2 + 3184);
    int v77 = *(_DWORD *)(v2 + 3188);
    int v78 = *(_DWORD *)(v2 + 3192);
    int v79 = *(_DWORD *)(v2 + 3196);
    int v80 = *(_DWORD *)(v2 + 3200);
    int v81 = *(_DWORD *)(v2 + 3204);
    int v82 = *(_DWORD *)(a1 + 284) + v76;
    int v83 = *(_DWORD *)(a1 + 288) + v77;
    int v84 = *(_DWORD *)(a1 + 292) + v78;
    int v85 = *(_DWORD *)(a1 + 296) + v79;
    int v86 = *(_DWORD *)(a1 + 276) + v80;
    int v87 = *(_DWORD *)(a1 + 280) + v81;
    *(_DWORD *)int buf = 67111936;
    *(_DWORD *)int v92 = v76;
    *(_WORD *)&v92[4] = 1024;
    *(_DWORD *)&v92[6] = v77;
    LOWORD(v93) = 1024;
    *(_DWORD *)((char *)&v93 + 2) = v78;
    HIWORD(v93) = 1024;
    *(_DWORD *)int v94 = v79;
    *(_WORD *)&v94[4] = 1024;
    *(_DWORD *)&v94[6] = v80;
    __int16 v95 = 1024;
    *(_DWORD *)CFStringRef v96 = v81;
    *(_WORD *)&v96[4] = 1024;
    *(_DWORD *)&v96[6] = v82;
    *(_WORD *)int v97 = 1024;
    *(_DWORD *)&_DWORD v97[2] = v83;
    *(_WORD *)int v98 = 1024;
    *(_DWORD *)&v98[2] = v84;
    *(_WORD *)uint64_t v99 = 1024;
    *(_DWORD *)&v99[2] = v85;
    *(_WORD *)unsigned int v100 = 1024;
    *(_DWORD *)&v100[2] = v86;
    *(_WORD *)unint64_t v101 = 1024;
    *(_DWORD *)&v101[2] = v87;
    _os_log_debug_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEBUG, "BLEScanStat: ScanCoreCompensation [numAdvsELNAOn, numAdvsELNABypass, totalTimeELNAOn, totalTimeELNABypass, txBlankingBTMC, txBlankingWLAN] [%d, %d, %d, %d, %d, %d] -> [%d, %d, %d, %d, %d, %d]", buf, 0x4Au);
    int v7 = qword_100A19E90;
  }
  *(int32x4_t *)(v2 + 3184) = vaddq_s32(*(int32x4_t *)(v2 + 3184), *(int32x4_t *)(a1 + 284));
  *(int32x2_t *)(v2 + 3200) = vadd_s32(*(int32x2_t *)(v2 + 3200), *(int32x2_t *)(a1 + 276));
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEBUG)) {
    sub_100794D94(a1, v7);
  }
}

void sub_1006DDC50(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1006DDD48;
  void v8[3] = &unk_100998A58;
  v8[4] = a1;
  char v9 = a2;
  sub_100013018(v4, v8);
  if (*(unsigned char *)(a1 + 2245))
  {
    sub_1006DEC50(a1);
    sub_1006DF6DC(a1);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  double v6 = *(double *)(a1 + 2728);
  if (Current > v6 && Current - v6 > 604800.0) {
    sub_1006D380C(a1);
  }
  double v7 = *(double *)(a1 + 3232);
  if (Current > v7 && Current - v7 > 604800.0) {
    sub_1006D38C4(a1);
  }
}

void sub_1006DDD48(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(unsigned __int8 *)(a1 + 40);
  *(unsigned char *)(v1 + 144) = v2;
  uint64_t v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(v1 + 1851);
    if (v2) {
      uint64_t v5 = "On";
    }
    else {
      uint64_t v5 = "Off";
    }
    int v6 = (unsigned __int16)[*(id *)(v1 + 2112) count];
    uint64_t v7 = *(void *)sub_100035F54();
    int v8 = (*(uint64_t (**)(void))(v7 + 704))();
    *(_DWORD *)int buf = 67110402;
    *(_DWORD *)int v89 = v4;
    *(_WORD *)&v89[4] = 2082;
    *(void *)&v89[6] = v5;
    *(_WORD *)&v89[14] = 1024;
    *(_DWORD *)&v89[16] = v6;
    *(_WORD *)&v89[20] = 1024;
    *(_DWORD *)&v89[22] = v8;
    *(_WORD *)&v89[26] = 1024;
    *(_DWORD *)int v90 = sub_1006DB674(v1);
    *(_WORD *)&v90[4] = 1024;
    *(_DWORD *)&v90[6] = sub_100010068(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "screenStateChanged fMatchBufferExpectedEntries:0x%d fScreenState:%{public}s fMatchActionTableRulesCount:%d supportedADVBuffers:%d haveAnyHwObjectDiscoveryRequests:%d haveAnyHwAOPBTBufferRequests:%d", buf, 0x2Au);
    int v2 = *(unsigned __int8 *)(v1 + 144);
  }
  if (v2)
  {
    sub_1006DBEA4(v1, 1);
    sub_1006DCB10(v1, 1);
  }
  else
  {
    if ([*(id *)(v1 + 2112) count])
    {
      uint64_t v9 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 704))(v9))
      {
        if (*(unsigned __int8 *)(v1 + 1851) == 255)
        {
          int v41 = sub_1006DA91C(v1, 1);
          if (v41)
          {
            int v42 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)int buf = 67109120;
              *(_DWORD *)int v89 = v41;
              _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_INFO, "enableMatchActionRulesBuffering failed with result %d", buf, 8u);
            }
          }
        }
      }
    }
    sub_100014900((unsigned __int8 *)v1);
    sub_10000FE84((unsigned __int8 *)v1);
  }
  if (sub_1006DEBD0(v1))
  {
    *(unsigned char *)(v1 + 1840) = 1;
    int v10 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(_DWORD *)(v1 + 1960);
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)int v89 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Restarting scans since the screen is transitioning while there is a request for active scans fState:%d", buf, 8u);
    }
  }
  int v12 = *(void **)(v1 + 2040);
  if (v12 == (void *)(v1 + 2048))
  {
LABEL_37:
    char v23 = 0;
  }
  else
  {
    char v13 = 0;
    while (1)
    {
      uint64_t v14 = *(void *)(v12[5] + 8);
      if (*(_DWORD *)(v14 + 168)) {
        break;
      }
      id v15 = *(id *)(v14 + 176);
      long long v84 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v87 = 0u;
      id v16 = v15;
      id v17 = [v16 countByEnumeratingWithState:&v84 objects:v122 count:16];
      if (v17)
      {
        uint64_t v18 = *(void *)v85;
        while (2)
        {
          for (uint64_t i = 0; i != v17; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v85 != v18) {
              objc_enumerationMutation(v16);
            }
            if ([*(id *)(*((void *)&v84 + 1) + 8 * i) intValue])
            {
              char v13 = 1;
              goto LABEL_28;
            }
          }
          id v17 = [v16 countByEnumeratingWithState:&v84 objects:v122 count:16];
          if (v17) {
            continue;
          }
          break;
        }
      }
LABEL_28:

      int v20 = (void *)v12[1];
      if (v20)
      {
        do
        {
          int v21 = v20;
          int v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          int v21 = (void *)v12[2];
          BOOL v22 = *v21 == (void)v12;
          int v12 = v21;
        }
        while (!v22);
      }
      int v12 = v21;
      if (v21 == (void *)(v1 + 2048))
      {
        if ((v13 & 1) == 0) {
          goto LABEL_37;
        }
        break;
      }
    }
    char v23 = 1;
    *(unsigned char *)(v1 + 1840) = 1;
    int v24 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(v1 + 1960);
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)int v89 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Restarting scans since the screen is transitioning while there are scan agents with specific usecases fState:%d", buf, 8u);
    }
  }
  if (*(_DWORD *)(v1 + 1964) != 2 && ((v23 & 1) != 0 || *(unsigned char *)(v1 + 1840))) {
    sub_100055B50(v1, 1);
  }
  uint64_t v26 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v26 + 664))(v26))
  {
    uint64_t v27 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v27 + 720))(v27, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100794E20();
      }
    }
  }
  else
  {
    uint64_t v28 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v28 + 624))(v28) & 1) != 0
      || (uint64_t v29 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v29 + 648))(v29)))
    {
      uint64_t v30 = sub_100035F54();
      uint64_t v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 656))(v30);
      int v32 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = *(_DWORD *)(v1 + 1960);
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)int v89 = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Call LP Core statistic VSC scren:%d", buf, 8u);
      }
      uint64_t v83 = 0;
      uint64_t v82 = 0;
      uint64_t v81 = 0;
      uint64_t v80 = 0;
      uint64_t v79 = 0;
      uint64_t v78 = 0;
      uint64_t v77 = 0;
      uint64_t v76 = 0;
      uint64_t v75 = 0;
      uint64_t v74 = 0;
      uint64_t v73 = 0;
      uint64_t v72 = 0;
      uint64_t v71 = 0;
      uint64_t v70 = 0;
      uint64_t v69 = 0;
      uint64_t v68 = 0;
      uint64_t v67 = 0;
      uint64_t v65 = 0;
      uint64_t v66 = 0;
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v61 = 0;
      uint64_t v62 = 0;
      uint64_t v59 = 0;
      uint64_t v60 = 0;
      uint64_t v57 = 0;
      uint64_t v58 = 0;
      uint64_t v56 = 0;
      int v55 = 0;
      uint64_t v34 = sub_10003FB34();
      int v35 = (*(uint64_t (**)(uint64_t, uint64_t, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, int *))(*(void *)v34 + 712))(v34, v31, (char *)&v83 + 4, &v83, (char *)&v82 + 4, &v82, (char *)&v81 + 4, &v81, (char *)&v80 + 4, &v80, (char *)&v79 + 4, &v79, (char *)&v78 + 4, &v78, (char *)&v77 + 4, &v77, (char *)&v76 + 4, &v76, (char *)&v75 + 4,
              &v75,
              (char *)&v74 + 4,
              &v74,
              (char *)&v73 + 4,
              &v73,
              (char *)&v72 + 4,
              &v72,
              (char *)&v71 + 4,
              &v71,
              (char *)&v70 + 4,
              &v70,
              (char *)&v69 + 4,
              &v69,
              (char *)&v68 + 4,
              &v68,
              (char *)&v67 + 4,
              &v67,
              (char *)&v66 + 4,
              &v66,
              (char *)&v65 + 4,
              &v65,
              (char *)&v64 + 4,
              &v64,
              (char *)&v63 + 4,
              &v63,
              (char *)&v62 + 4,
              &v62,
              (char *)&v61 + 4,
              &v61,
              (char *)&v60 + 4,
              &v60,
              (char *)&v59 + 4,
              &v59,
              (char *)&v58 + 4,
              &v58,
              (char *)&v57 + 4,
              &v57,
              (char *)&v56 + 4,
              &v56,
              &v55);
      int v36 = qword_100A19E90;
      if (v35 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)int buf = 67109120;
        *(_DWORD *)int v89 = v35;
        _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "Error reading getLPCoreStats %{bluetooth:OI_STATUS}u", buf, 8u);
        int v36 = qword_100A19E90;
      }
      uint64_t v37 = *(void *)(v1 + 2144) + v80;
      *(void *)(v1 + 2144) = v37;
      uint64_t v38 = *(void *)(v1 + 2136) + HIDWORD(v79);
      *(void *)(v1 + 2136) = v38;
      uint64_t v39 = *(void *)(v1 + 2160) + v81;
      *(void *)(v1 + 2160) = v39;
      uint64_t v40 = *(void *)(v1 + 2152) + HIDWORD(v80);
      *(void *)(v1 + 2152) = v40;
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 134224896;
        *(void *)int v89 = v37;
        *(_WORD *)&v89[8] = 2048;
        *(void *)&v89[10] = v38;
        *(_WORD *)&v89[18] = 2048;
        *(void *)&v89[20] = v39;
        *(_WORD *)int v90 = 2048;
        *(void *)&v90[2] = v40;
        *(_WORD *)&unsigned char v90[10] = 1024;
        *(_DWORD *)uint64_t v91 = HIDWORD(v78);
        *(_WORD *)&v91[4] = 1024;
        *(_DWORD *)int v92 = v78;
        *(_WORD *)&v92[4] = 1024;
        *(_DWORD *)uint64_t v93 = HIDWORD(v77);
        *(_WORD *)&v93[4] = 1024;
        *(_DWORD *)int v94 = v77;
        *(_WORD *)&v94[4] = 1024;
        *(_DWORD *)__int16 v95 = HIDWORD(v76);
        *(_WORD *)&void v95[4] = 1024;
        *(_DWORD *)CFStringRef v96 = v76;
        *(_WORD *)&v96[4] = 1024;
        *(_DWORD *)int v97 = HIDWORD(v75);
        *(_WORD *)&v97[4] = 1024;
        *(_DWORD *)int v98 = v75;
        *(_WORD *)&void v98[4] = 1024;
        *(_DWORD *)uint64_t v99 = HIDWORD(v74);
        *(_WORD *)&v99[4] = 1024;
        *(_DWORD *)unsigned int v100 = v74;
        *(_WORD *)&v100[4] = 1024;
        *(_DWORD *)unint64_t v101 = HIDWORD(v73);
        *(_WORD *)&v101[4] = 1024;
        *(_DWORD *)unint64_t v102 = v73;
        *(_WORD *)&v102[4] = 1024;
        *(_DWORD *)uint64_t v103 = HIDWORD(v72);
        *(_WORD *)&v103[4] = 1024;
        *(_DWORD *)uint64_t v104 = v72;
        *(_WORD *)&v104[4] = 1024;
        *(_DWORD *)unint64_t v105 = HIDWORD(v71);
        *(_WORD *)&_OWORD v105[4] = 1024;
        *(_DWORD *)CFStringRef v106 = v71;
        *(_WORD *)&v106[4] = 1024;
        int v107 = HIDWORD(v70);
        __int16 v108 = 1024;
        int v109 = v70;
        __int16 v110 = 1024;
        int v111 = HIDWORD(v69);
        __int16 v112 = 1024;
        int v113 = v69;
        __int16 v114 = 1024;
        int v115 = HIDWORD(v68);
        __int16 v116 = 1024;
        int v117 = v68;
        __int16 v118 = 1024;
        int v119 = HIDWORD(v67);
        __int16 v120 = 1024;
        int v121 = v67;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "LEStats: BMC:%lld LP:%lld, MC: %lld  %lld  ]  RxL:%05d:%05d:%05d  EAdv:%04d:%04d:%04d LeLR:%04d:%04d:%04d Aux:%04d:%04d:%04d Arsp:%04d:%04d:%04d cd:%04d:%04d:%04d aCrc:%05d:%05d:%05d def:%04d:%04d:%04d", buf, 0xBAu);
        int v36 = qword_100A19E90;
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 67114752;
        *(_DWORD *)int v89 = HIDWORD(v66);
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = v66;
        *(_WORD *)&v89[10] = 1024;
        *(_DWORD *)&unsigned char v89[12] = HIDWORD(v65);
        *(_WORD *)&v89[16] = 1024;
        *(_DWORD *)&v89[18] = v65;
        *(_WORD *)&v89[22] = 1024;
        *(_DWORD *)&v89[24] = HIDWORD(v64);
        *(_WORD *)int v90 = 1024;
        *(_DWORD *)&v90[2] = v64;
        *(_WORD *)&v90[6] = 1024;
        *(_DWORD *)&v90[8] = HIDWORD(v63);
        *(_WORD *)uint64_t v91 = 1024;
        *(_DWORD *)&v91[2] = v63;
        *(_WORD *)int v92 = 1024;
        *(_DWORD *)&v92[2] = HIDWORD(v62);
        *(_WORD *)uint64_t v93 = 1024;
        *(_DWORD *)&v93[2] = v62;
        *(_WORD *)int v94 = 1024;
        *(_DWORD *)&v94[2] = HIDWORD(v61);
        *(_WORD *)__int16 v95 = 1024;
        *(_DWORD *)&v95[2] = v61;
        *(_WORD *)CFStringRef v96 = 1024;
        *(_DWORD *)&v96[2] = HIDWORD(v60);
        *(_WORD *)int v97 = 1024;
        *(_DWORD *)&_DWORD v97[2] = v60;
        *(_WORD *)int v98 = 1024;
        *(_DWORD *)&v98[2] = HIDWORD(v59);
        *(_WORD *)uint64_t v99 = 1024;
        *(_DWORD *)&v99[2] = v59;
        *(_WORD *)unsigned int v100 = 1024;
        *(_DWORD *)&v100[2] = HIDWORD(v58);
        *(_WORD *)unint64_t v101 = 1024;
        *(_DWORD *)&v101[2] = v58;
        *(_WORD *)unint64_t v102 = 1024;
        *(_DWORD *)&v102[2] = HIDWORD(v57);
        *(_WORD *)uint64_t v103 = 1024;
        *(_DWORD *)&v103[2] = v57;
        *(_WORD *)uint64_t v104 = 1024;
        *(_DWORD *)&v104[2] = HIDWORD(v56);
        *(_WORD *)unint64_t v105 = 1024;
        *(_DWORD *)&v105[2] = v56;
        *(_WORD *)CFStringRef v106 = 1024;
        *(_DWORD *)&void v106[2] = v55;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "LEStats2: Rxa=%04d tSr=%04d tASr=%04d rSr=%04d tCi=%04d tCr=%04d rsRsp=%04d rsi=%04d rcr=%04d nba=%04d:%04d:%04d:%04d tot:%04d:%04d cden=%04d:%04d:%04d:%04d totAdv=%04d:%04d:%04d:%04d", buf, 0x8Cu);
        int v36 = qword_100A19E90;
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        int v43 = *(_DWORD *)(v1 + 2748);
        int v44 = *(_DWORD *)(v1 + 2752);
        int v45 = *(_DWORD *)(v1 + 2756);
        *(_DWORD *)int buf = 67110400;
        *(_DWORD *)int v89 = v43;
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = v44;
        *(_WORD *)&v89[10] = 1024;
        *(_DWORD *)&unsigned char v89[12] = v45;
        *(_WORD *)&v89[16] = 1024;
        *(_DWORD *)&v89[18] = v81 + v43;
        *(_WORD *)&v89[22] = 1024;
        *(_DWORD *)&v89[24] = v80 + v44;
        *(_WORD *)int v90 = 1024;
        *(_DWORD *)&v90[2] = v83 + v45;
        _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "BLEScanStat: MainCoreELNAOn [numAdvs, numAdvsBeforeFiltering, totalTime] [%d, %d, %d] -> [%d, %d, %d]", buf, 0x26u);
        int v36 = qword_100A19E90;
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        int v46 = *(_DWORD *)(v1 + 2760);
        int v47 = *(_DWORD *)(v1 + 2764);
        int v48 = *(_DWORD *)(v1 + 2768);
        *(_DWORD *)int buf = 67110400;
        *(_DWORD *)int v89 = v46;
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = v47;
        *(_WORD *)&v89[10] = 1024;
        *(_DWORD *)&unsigned char v89[12] = v48;
        *(_WORD *)&v89[16] = 1024;
        *(_DWORD *)&v89[18] = HIDWORD(v80) + v46;
        *(_WORD *)&v89[22] = 1024;
        *(_DWORD *)&v89[24] = HIDWORD(v79) + v47;
        *(_WORD *)int v90 = 1024;
        *(_DWORD *)&v90[2] = HIDWORD(v82) + v48;
        _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "BLEScanStat: MainCoreELNABypass [numAdvs, numAdvsBeforeFiltering, totalTime] [%d, %d, %d] -> [%d, %d, %d]", buf, 0x26u);
        int v36 = qword_100A19E90;
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        int v49 = *(_DWORD *)(v1 + 2772);
        int v50 = *(_DWORD *)(v1 + 2776);
        int v51 = *(_DWORD *)(v1 + 2780);
        *(_DWORD *)int buf = 67110400;
        *(_DWORD *)int v89 = v49;
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = v50;
        *(_WORD *)&v89[10] = 1024;
        *(_DWORD *)&unsigned char v89[12] = v51;
        *(_WORD *)&v89[16] = 1024;
        *(_DWORD *)&v89[18] = v57 + v49;
        *(_WORD *)&v89[22] = 1024;
        *(_DWORD *)&v89[24] = v56 + v50;
        *(_WORD *)int v90 = 1024;
        *(_DWORD *)&v90[2] = v60 + v51;
        _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "BLEScanStat: ScanCoreELNAOn [numAdvs, numAdvsBeforeFiltering, totalTime] [%d, %d, %d] -> [%d, %d, %d]", buf, 0x26u);
        int v36 = qword_100A19E90;
      }
      if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
      {
        int v52 = *(_DWORD *)(v1 + 2784);
        int v53 = *(_DWORD *)(v1 + 2788);
        int v54 = *(_DWORD *)(v1 + 2792);
        *(_DWORD *)int buf = 67110400;
        *(_DWORD *)int v89 = v52;
        *(_WORD *)&v89[4] = 1024;
        *(_DWORD *)&v89[6] = v53;
        *(_WORD *)&v89[10] = 1024;
        *(_DWORD *)&unsigned char v89[12] = v54;
        *(_WORD *)&v89[16] = 1024;
        *(_DWORD *)&v89[18] = HIDWORD(v56) + v52;
        *(_WORD *)&v89[22] = 1024;
        *(_DWORD *)&v89[24] = v55 + v53;
        *(_WORD *)int v90 = 1024;
        *(_DWORD *)&v90[2] = HIDWORD(v59) + v54;
        _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "BLEScanStat: ScanCoreELNABypass [numAdvs, numAdvsBeforeFiltering, totalTime] [%d, %d, %d] -> [%d, %d, %d]", buf, 0x26u);
      }
      *(_DWORD *)(v1 + 2748) += v81;
      *(_DWORD *)(v1 + 2752) += v80;
      *(_DWORD *)(v1 + 2756) += v83;
      *(_DWORD *)(v1 + 2760) += HIDWORD(v80);
      *(_DWORD *)(v1 + 2764) += HIDWORD(v79);
      *(_DWORD *)(v1 + 2768) += HIDWORD(v82);
      *(_DWORD *)(v1 + 2772) += v57;
      *(_DWORD *)(v1 + 2776) += v56;
      *(_DWORD *)(v1 + 2780) += v60;
      *(_DWORD *)(v1 + 2784) += HIDWORD(v56);
      *(_DWORD *)(v1 + 2788) += v55;
      *(_DWORD *)(v1 + 2792) += HIDWORD(v59);
    }
  }
}

void sub_1006DEBAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006DEBD0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  int v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  while (1)
  {
    BOOL result = sub_1006F77BC(v1[5]);
    if (result) {
      break;
    }
    int v4 = (void *)v1[1];
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        int v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (void *)v1[2];
        BOOL v6 = *v5 == (void)v1;
        uint64_t v1 = v5;
      }
      while (!v6);
    }
    uint64_t v1 = v5;
    if (v5 == v2) {
      return result;
    }
  }
  return 1;
}

void sub_1006DEC50(uint64_t a1)
{
  int v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: BLE Scan Stat:", buf, 2u);
    int v2 = qword_100A19E90;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    double v3 = *(double *)(a1 + 2728);
    *(_DWORD *)int buf = 134217984;
    double v47 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \tLast Stat Start Time: %f sec", buf, 0xCu);
  }
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v5 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    double v6 = *(double *)(a1 + 2728);
    double v7 = Current - v6;
    BOOL v8 = Current < v6;
    double v9 = 0.0;
    if (!v8) {
      double v9 = v7;
    }
    *(_DWORD *)int buf = 134217984;
    double v47 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tStat Measurement Duration: %f sec", buf, 0xCu);
    uint64_t v5 = qword_100A19E90;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(_DWORD *)(a1 + 2736);
    *(_DWORD *)int buf = 67109120;
    LODWORD(v47) = v10;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tNum Range Scan Requests: %u", buf, 8u);
    uint64_t v5 = qword_100A19E90;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(_DWORD *)(a1 + 2740);
    *(_DWORD *)int buf = 67109120;
    LODWORD(v47) = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tNum Priority Critical Scan Requests: %u", buf, 8u);
    uint64_t v5 = qword_100A19E90;
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(_DWORD *)(a1 + 2744);
    *(_DWORD *)int buf = 67109120;
    LODWORD(v47) = v12;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tNum Scan Requests: %u", buf, 8u);
  }
  uint64_t v13 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v13 + 624))(v13) & 1) != 0
    || (uint64_t v14 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v14 + 648))(v14)))
  {
    id v15 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \tMainCoreELNAOnStat:", buf, 2u);
      id v15 = qword_100A19E90;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 2748);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsAfterFiltering: %u", buf, 8u);
      id v15 = qword_100A19E90;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(_DWORD *)(a1 + 2752);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsBeforeFiltering: %u", buf, 8u);
      id v15 = qword_100A19E90;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(_DWORD *)(a1 + 2756);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \t\ttotalTime: %u msec", buf, 8u);
      id v15 = qword_100A19E90;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \tMainCoreELNABypassStat:", buf, 2u);
      id v15 = qword_100A19E90;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(_DWORD *)(a1 + 2760);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v19;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsAfterFiltering: %u", buf, 8u);
      id v15 = qword_100A19E90;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(_DWORD *)(a1 + 2764);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v20;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsBeforeFiltering: %u", buf, 8u);
      id v15 = qword_100A19E90;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(_DWORD *)(a1 + 2768);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v21;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump: \t\ttotalTime: %u msec", buf, 8u);
    }
  }
  uint64_t v22 = sub_100035F54();
  int v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 648))(v22);
  int v24 = qword_100A19E90;
  if (v23)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \tScanCoreELNAOnStat:", buf, 2u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(_DWORD *)(a1 + 2772);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsAfterFiltering: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = *(_DWORD *)(a1 + 2776);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v26;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsBeforeFiltering: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = *(_DWORD *)(a1 + 2780);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\ttotalTime: %u msec", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \tScanCoreELNABypassStat:", buf, 2u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = *(_DWORD *)(a1 + 2784);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsAfterFiltering: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = *(_DWORD *)(a1 + 2788);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsBeforeFiltering: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = *(_DWORD *)(a1 + 2792);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v30;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\ttotalTime: %u msec", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \tScanCoreCompsensationStat:", buf, 2u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = *(_DWORD *)(a1 + 3184);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v31;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\tnumAdvsELNAOn: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v32 = *(_DWORD *)(a1 + 3188);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v32;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\numAdvsELNABypass: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v33 = *(_DWORD *)(a1 + 3192);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v33;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\totalTimeELNAOn: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v34 = *(_DWORD *)(a1 + 3196);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v34;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\totalTimeELNABypass: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = *(_DWORD *)(a1 + 3200);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v35;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\txBlankingTimeByBTMC: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      int v36 = *(_DWORD *)(a1 + 3204);
      *(_DWORD *)int buf = 67109120;
      LODWORD(v47) = v36;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\txBlankingTimeByWLAN: %u", buf, 8u);
      int v24 = qword_100A19E90;
    }
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \tTotal Scan Time per Type:", buf, 2u);
    int v24 = qword_100A19E90;
  }
  uint64_t v37 = 0;
  uint64_t v38 = a1 + 2800;
  do
  {
    uint64_t v39 = 0;
    uint64_t v45 = v38;
    do
    {
      uint64_t v40 = 0;
      if (v39) {
        int v41 = "Active ";
      }
      else {
        int v41 = "Passive";
      }
      do
      {
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(double *)&int v42 = COERCE_DOUBLE("Unknown Scan Agent Type");
          if (v40 <= 2u) {
            int v42 = off_1009BF968[v40];
          }
          int v43 = "Unknown Duty Cycle Type";
          if (v37 <= 6u) {
            int v43 = off_1009BF930[(char)v37];
          }
          uint64_t v44 = *(void *)(v38 + 8 * v40);
          *(_DWORD *)int buf = 136446978;
          double v47 = *(double *)&v42;
          __int16 v48 = 2082;
          int v49 = v41;
          __int16 v50 = 2080;
          int v51 = v43;
          __int16 v52 = 2048;
          uint64_t v53 = v44;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "statedump: \t\t%{public}s %{public}s %-37s: %f sec", buf, 0x2Au);
          int v24 = qword_100A19E90;
        }
        ++v40;
      }
      while (v40 != 3);
      ++v39;
      v38 += 24;
    }
    while (v39 != 2);
    ++v37;
    uint64_t v38 = v45 + 48;
  }
  while (v37 != 7);
}

void sub_1006DF6DC(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 648))(v2))
  {
    double v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: BLE Connection Scan Stat (ScanCore):", (uint8_t *)&v12, 2u);
    }
    double Current = CFAbsoluteTimeGetCurrent();
    uint64_t v5 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      double v6 = *(double *)(a1 + 3232);
      double v7 = Current - v6;
      if (Current < v6) {
        double v7 = 0.0;
      }
      int v12 = 134217984;
      CFAbsoluteTime v13 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tLast Stat Start Time: %f sec", (uint8_t *)&v12, 0xCu);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      CFAbsoluteTime v8 = CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 3232);
      int v12 = 134217984;
      CFAbsoluteTime v13 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tStat Measurement Duration: %f sec", (uint8_t *)&v12, 0xCu);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(_DWORD *)(a1 + 3240);
      int v12 = 67109120;
      LODWORD(v13) = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tNum Connections made with MainCore while ScanCore Enabled:%u", (uint8_t *)&v12, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = *(_DWORD *)(a1 + 3244);
      int v12 = 67109120;
      LODWORD(v13) = v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tNum Connections made with ScanCore while ScanCore Enabled:%u", (uint8_t *)&v12, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(_DWORD *)(a1 + 3248);
      int v12 = 67109120;
      LODWORD(v13) = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tNum ScanCore Enabled for Connection Scan:%u", (uint8_t *)&v12, 8u);
    }
  }
}

void sub_1006DF948(uint64_t a1, char a2)
{
}

__n128 sub_1006DF950(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 2152);
  __n128 result = *(__n128 *)(a1 + 2136);
  *(__n128 *)a2 = result;
  return result;
}

void sub_1006DF968(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BF7A8);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 16);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009BF788);
  }
  uint64_t v2 = (char *)off_1009F8780 + 192;

  sub_100052718((uint64_t)v2, a1);
}

uint64_t sub_1006DFA0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 2168);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      int v4 = *(long long **)(a1 + 2176);
      int v42 = *(long long **)(a1 + 2184);
      if (v4 == v42)
      {
        char v22 = 1;
        return v22 & 1;
      }
      char v5 = 0;
      while (1)
      {
        __p[1] = 0;
        uint64_t v48 = 0;
        __p[0] = 0;
        if (*((char *)v4 + 23) < 0)
        {
          sub_10003B098(__p, *(void **)v4, *((void *)v4 + 1));
        }
        else
        {
          long long v6 = *v4;
          uint64_t v48 = *((void *)v4 + 2);
          *(_OWORD *)std::string __p = v6;
        }
        sub_10003AE4C(v2, (uint64_t)&v44);
        unsigned __int8 v7 = v46;
        CFAbsoluteTime v8 = v44;
        int v9 = (v46 & 0x80u) == 0 ? &v44 : (void **)v44;
        char v10 = HIBYTE(v48);
        int v11 = v48 >= 0 ? __p : (void **)__p[0];
        int v12 = v48 >= 0 ? (void *)HIBYTE(v48) : __p[1];
        if (v12) {
          break;
        }
        uint64_t v16 = 0;
        if ((v46 & 0x80) != 0) {
          goto LABEL_36;
        }
LABEL_37:
        BOOL v21 = v16 != -1;
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        v5 |= v21;
        int v4 = (long long *)((char *)v4 + 24);
        if (v4 == v42)
        {
          char v22 = v5 ^ 1;
          return v22 & 1;
        }
      }
      if ((v46 & 0x80u) == 0) {
        uint64_t v13 = v46;
      }
      else {
        uint64_t v13 = v45;
      }
      uint64_t v14 = (char *)v9 + v13;
      if (v13 >= (uint64_t)v12)
      {
        uint64_t v40 = v44;
        int v17 = *(unsigned __int8 *)v11;
        int v18 = v9;
        do
        {
          uint64_t v19 = v13 - (void)v12;
          if (v19 == -1) {
            break;
          }
          int v20 = (char *)memchr(v18, v17, v19 + 1);
          if (!v20) {
            break;
          }
          id v15 = v20;
          if (!memcmp(v20, v11, (size_t)v12)) {
            goto LABEL_31;
          }
          int v18 = (void **)(v15 + 1);
          uint64_t v13 = v14 - (v15 + 1);
        }
        while (v13 >= (uint64_t)v12);
        id v15 = v14;
LABEL_31:
        CFAbsoluteTime v8 = v40;
        uint64_t v2 = a2;
      }
      else
      {
        id v15 = (char *)v9 + v13;
      }
      if (v15 == v14) {
        uint64_t v16 = -1;
      }
      else {
        uint64_t v16 = v15 - (char *)v9;
      }
      if ((v7 & 0x80) == 0) {
        goto LABEL_37;
      }
LABEL_36:
      operator delete(v8);
      char v10 = HIBYTE(v48);
      goto LABEL_37;
    }
LABEL_78:
    char v22 = 0;
    return v22 & 1;
  }
  int v23 = *(long long **)(a1 + 2176);
  int v43 = *(long long **)(a1 + 2184);
  if (v23 == v43) {
    goto LABEL_78;
  }
  do
  {
    __p[1] = 0;
    uint64_t v48 = 0;
    __p[0] = 0;
    if (*((char *)v23 + 23) < 0)
    {
      sub_10003B098(__p, *(void **)v23, *((void *)v23 + 1));
    }
    else
    {
      long long v24 = *v23;
      uint64_t v48 = *((void *)v23 + 2);
      *(_OWORD *)std::string __p = v24;
    }
    sub_10003AE4C(v2, (uint64_t)&v44);
    unsigned __int8 v25 = v46;
    int v26 = v44;
    if ((v46 & 0x80u) == 0) {
      int v27 = (char *)&v44;
    }
    else {
      int v27 = (char *)v44;
    }
    char v28 = HIBYTE(v48);
    if (v48 >= 0) {
      int v29 = __p;
    }
    else {
      int v29 = (void **)__p[0];
    }
    if (v48 >= 0) {
      int64_t v30 = HIBYTE(v48);
    }
    else {
      int64_t v30 = (int64_t)__p[1];
    }
    if (v30)
    {
      if ((v46 & 0x80u) == 0) {
        uint64_t v31 = v46;
      }
      else {
        uint64_t v31 = v45;
      }
      int v32 = &v27[v31];
      if (v31 >= v30)
      {
        int v35 = *(unsigned __int8 *)v29;
        int v36 = v27;
        do
        {
          uint64_t v37 = v31 - v30;
          if (v37 == -1) {
            break;
          }
          uint64_t v38 = (char *)memchr(v36, v35, v37 + 1);
          if (!v38) {
            break;
          }
          int v33 = v38;
          if (!memcmp(v38, v29, v30)) {
            goto LABEL_67;
          }
          int v36 = v33 + 1;
          uint64_t v31 = v32 - (v33 + 1);
        }
        while (v31 >= v30);
        int v33 = v32;
LABEL_67:
        uint64_t v2 = a2;
      }
      else
      {
        int v33 = &v27[v31];
      }
      if (v33 == v32) {
        uint64_t v34 = -1;
      }
      else {
        uint64_t v34 = v33 - v27;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    char v22 = v34 != -1;
    if ((v25 & 0x80) != 0)
    {
      operator delete(v26);
      if (v48 < 0) {
LABEL_77:
      }
        operator delete(__p[0]);
    }
    else if (v28 < 0)
    {
      goto LABEL_77;
    }
    if (v34 != -1) {
      break;
    }
    int v23 = (long long *)((char *)v23 + 24);
  }
  while (v23 != v43);
  return v22 & 1;
}

void sub_1006DFD24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006DFD44(uint64_t a1, uint64_t *a2, int a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    unint64_t v3 = a2[1];
    if (!v3) {
      return 3;
    }
    a2 = (uint64_t *)*a2;
  }
  else
  {
    unint64_t v3 = *((unsigned __int8 *)a2 + 23);
    if (!*((unsigned char *)a2 + 23)) {
      return 3;
    }
  }
  if (v3 >= 9) {
    unint64_t v3 = 9;
  }
  int v4 = (uint64_t *)((char *)a2 + v3);
  char v5 = a2;
  long long v6 = v4;
  do
  {
    if (*(unsigned char *)v5 == 99)
    {
      uint64_t v7 = &_mh_execute_header.magic + 1;
      while (v7 != 9)
      {
        if ((uint64_t *)((char *)v5 + v7) == v4) {
          return (v6 == v4 || v6 != a2) && a3 != 32;
        }
        int v8 = *((unsigned __int8 *)v5 + v7);
        int v9 = aComApple_0[v7++];
        if (v8 != v9) {
          goto LABEL_10;
        }
      }
      long long v6 = v5;
    }
LABEL_10:
    char v5 = (uint64_t *)((char *)v5 + 1);
  }
  while (v5 != v4);
  return (v6 == v4 || v6 != a2) && a3 != 32;
}

uint64_t sub_1006DFDF8(uint64_t a1)
{
  return (*(unsigned char *)(a1 + 711) + *(unsigned char *)(a1 + 167));
}

uint64_t sub_1006DFE0C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v18 = a2;
  if (!*(_DWORD *)(a1 + 1960)) {
    return 105;
  }
  if (!sub_1006DFA0C(a1, a2))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BF788);
    }
    sub_1002F4750((uint64_t)off_1009F8780, a2);
    memset(v17, 0, sizeof(v17));
    sub_100037564((char *)v17, *(long long **)(a3 + 8), *(long long **)(a3 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a3 + 16) - *(void *)(a3 + 8)) >> 2));
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BF788);
    }
    sub_1002F45B8((uint64_t)off_1009F8780, v18);
    char v10 = (id *)(a3 + 152);
    id v11 = *(id *)(a3 + 152);
    BOOL v12 = [v11 count] == 0;

    if (v12)
    {
      uint64_t v13 = +[NSSet setWithObject:@"com.apple.bluetooth"];
      objc_storeStrong(v10, v13);
    }
    uint64_t v14 = *(void **)(a1 + 2048);
    if (v14)
    {
      do
      {
        if (v14[4] >= v18) {
          id v15 = v14;
        }
        else {
          id v15 = v14 + 1;
        }
        uint64_t v14 = (void *)*v15;
      }
      while (*v15);
    }
    operator new();
  }
  long long v6 = qword_100A19E90;
  uint64_t v7 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if ((SBYTE7(v20) & 0x80u) == 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    int v9 = *(unsigned __int8 *)(a1 + 2168);
    buf[0] = 136446466;
    *(void *)&buf[1] = v8;
    __int16 v22 = 1024;
    int v23 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Rejecting the custom Scan for %{public}s for list type %d", (uint8_t *)buf, 0x12u);
    if (SBYTE7(v20) < 0) {
      operator delete(__p[0]);
    }
    return 0;
  }
  return v7;
}

void sub_1006E18AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47)
{
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (a47) {
    operator delete(a47);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006E1A9C(uint64_t a1, unint64_t a2, int a3, int a4, char a5)
{
  if (!*(_DWORD *)(a1 + 1960)) {
    return 105;
  }
  long long v6 = *(void **)(a1 + 2048);
  if (!v6) {
    return 401;
  }
  int v8 = (uint64_t *)(a1 + 2048);
  do
  {
    unint64_t v9 = v6[4];
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      id v11 = v6;
    }
    else {
      id v11 = v6 + 1;
    }
    if (v10) {
      int v8 = v6;
    }
    long long v6 = (void *)*v11;
  }
  while (*v11);
  if (v8 == (uint64_t *)(a1 + 2048) || v8[4] > a2) {
    return 401;
  }
  uint64_t v74 = (uint64_t **)(a1 + 2040);
  uint64_t v79 = v8[5];
  uint64_t v93 = 0;
  long long v91 = 0u;
  long long v92 = 0u;
  sub_10003AE4C(a2, (uint64_t)__p);
  sub_1004B8D4C((uint64_t)&v91, (long long *)__p, *(unsigned char *)(v79 + 81), *(_DWORD *)(v79 + 120));
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if (qword_1009FB260 != -1) {
    dispatch_once(&qword_1009FB260, &stru_1009BF888);
  }
  sub_1000504D8();
  if (*(unsigned char *)(a1 + 4386))
  {
    uint64_t v13 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(a2, (uint64_t)&buf);
      int v69 = SHIBYTE(v99);
      p_long long buf = (long long *)buf;
      uint64_t v71 = v89;
      sub_100551B04(a2, v89);
      if (v69 >= 0) {
        p_long long buf = &buf;
      }
      if (v90 < 0) {
        uint64_t v71 = (void **)v89[0];
      }
      uint64_t v72 = sub_10003E508(*(_DWORD *)(*(void *)(v79 + 8) + 168));
      *(_DWORD *)std::string __p = 136446722;
      *(void *)&__p[4] = p_buf;
      *(_WORD *)&unsigned char __p[12] = 2082;
      *(void *)&unsigned char __p[14] = v71;
      *(_WORD *)&__p[22] = 2082;
      __int16 v95 = v72;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WILLSLEEP violation! Session %{public}s(%{public}s) %{public}s asking to stop scan", __p, 0x20u);
      if (v90 < 0) {
        operator delete(v89[0]);
      }
      if (SHIBYTE(v99) < 0) {
        operator delete((void *)buf);
      }
    }
  }
  uint64_t v14 = sub_10004104C(v79);
  id v15 = [v14 cuFilteredArrayUsingBlock:&stru_1009BF268];
  uint64_t v76 = +[NSMutableSet setWithArray:v15];

  if (sub_100041058(v79))
  {
    uint64_t v16 = +[NSNumber numberWithUnsignedInt:sub_100041058(v79)];
    [v76 addObject:v16];
  }
  uint64_t v78 = a1;
  long long v87 = 0u;
  long long v88 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  id v17 = v76;
  id v18 = [v17 countByEnumeratingWithState:&v85 objects:v97 count:16];
  if (v18)
  {
    uint64_t v19 = *(void *)v86;
    do
    {
      long long v20 = 0;
      do
      {
        if (*(void *)v86 != v19) {
          objc_enumerationMutation(v17);
        }
        BOOL v21 = *(void **)(*((void *)&v85 + 1) + 8 * (void)v20);
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
        }
        sub_1004FF278((uint64_t)off_1009F8150, [v21 longLongValue]);
        long long v20 = (char *)v20 + 1;
      }
      while (v18 != v20);
      id v18 = [v17 countByEnumeratingWithState:&v85 objects:v97 count:16];
    }
    while (v18);
  }

  if (sub_1006F782C(v79)) {
    *(unsigned char *)(v78 + 1843) = 1;
  }
  if (sub_1006F7854(v79)) {
    *(unsigned char *)(v78 + 1845) = 1;
  }
  if (sub_1006F7D20(v79)) {
    *(unsigned char *)(v78 + 1844) = 1;
  }
  __int16 v22 = (void *)sub_1006F78F0(v79);
  if (v22[1] != *v22 || sub_1006F7868(v79)) {
    *(unsigned char *)(v78 + 1846) = 1;
  }
  if (sub_10003AE20(v79)) {
    *(unsigned char *)(v78 + 1847) = 1;
  }
  uint64_t v23 = *(void *)(v79 + 8);
  uint64_t v25 = *(void *)(v23 + 64);
  uint64_t v24 = *(void *)(v23 + 72);
  if (v25 != v24)
  {
    do
    {
      if (*(unsigned char *)(v25 + 64))
      {
        int v26 = *(unsigned __int8 *)(v25 + 8);
        int v27 = sub_1006D6BF8(v78, v26);
        if ((v27 & 0xFFFFFFFD) != 0)
        {
          char v28 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string __p = 67109376;
            *(_DWORD *)&__p[4] = v26;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = v27;
            _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "Failed to destroy a match table for type %d with error %d", __p, 0xEu);
          }
        }
      }
      v25 += 96;
    }
    while (v25 != v24);
    uint64_t v23 = *(void *)(v79 + 8);
  }
  if (*(unsigned char *)(v23 + 143))
  {
    int v29 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      int64_t v30 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v30;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "session %{public}s no longer needs to do Exposure Notification", (uint8_t *)&buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_1006D5B0C((dispatch_object_t *)v78);
    *(void *)(v78 + 2280) = 0;
    *(_OWORD *)(v78 + 2296) = 0u;
    *(_OWORD *)(v78 + 2312) = 0u;
    *(_OWORD *)(v78 + 2328) = 0u;
    if (*(unsigned char *)(v78 + 1255)) {
      sub_1006D4414(v78, 2);
    }
  }
  BOOL v31 = *(_DWORD *)(v78 + 1964) != 2 || *(unsigned char *)(*(void *)(v79 + 8) + 3) != 0;
  uint64_t v32 = sub_100035F54();
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v32 + 824))(v32);
  if (byte_100A14715) {
    int v34 = 0;
  }
  else {
    int v34 = v33;
  }
  if (v34 != 1)
  {
    unsigned int v36 = 0;
LABEL_77:
    unsigned int v39 = 0;
    goto LABEL_78;
  }
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
  }
  int v35 = sub_1000400A8();
  unsigned int v36 = (v35 & 0xFFFFFFFD) != 1;
  if ((sub_100040DF4(v78, v79) & 1) == 0 && !*(unsigned char *)(*(void *)(v79 + 8) + 200)
    || v35 == 2 && (uint64_t v37 = sub_10003FB34(), !(*(unsigned int (**)(uint64_t))(*(void *)v37 + 2656))(v37)))
  {
    unsigned int v36 = 0;
  }
  if (!byte_100A14716)
  {
    uint64_t v33 = sub_100040774(v78, v79);
    if (!v33) {
      goto LABEL_77;
    }
  }
  uint64_t v38 = sub_10003FB34();
  uint64_t v33 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 2664))(v38);
  unsigned int v39 = v33 | v36;
LABEL_78:
  int v84 = 0;
  if (sub_1006E3560(v33, v79, &v84))
  {
    v82[0] = _NSConcreteStackBlock;
    v82[1] = 3221225472;
    void v82[2] = sub_1006E3F50;
    v82[3] = &unk_1009BF228;
    int v83 = v84;
    sub_100048744((os_unfair_lock_s *)(v78 + 1872), v82);
  }
  sub_1006E37C4(v78, a2, v36, v39);
  if (a5) {
    goto LABEL_101;
  }
  uint64_t v40 = *(void *)(v79 + 8);
  if (!*(_DWORD *)(v40 + 188) && !*(_DWORD *)(v40 + 192)) {
    goto LABEL_101;
  }
  if (!*(unsigned char *)(v40 + 196)) {
    goto LABEL_101;
  }
  long long buf = 0uLL;
  uint64_t v99 = 0;
  v81[0] = _NSConcreteStackBlock;
  v81[1] = 3221225472;
  void v81[2] = sub_1006E3F84;
  v81[3] = &unk_1009BF288;
  v81[4] = v78;
  int v41 = objc_retainBlock(v81);
  int v42 = v41;
  uint64_t v43 = *((void *)&buf + 1);
  if (*((void *)&buf + 1) >= (unint64_t)v99)
  {
    unint64_t v45 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&buf + 1) - buf) >> 3);
    unint64_t v46 = v45 + 1;
    if (v45 + 1 > 0x666666666666666) {
      abort();
    }
    if (0x999999999999999ALL * ((uint64_t)&v99[-buf] >> 3) > v46) {
      unint64_t v46 = 0x999999999999999ALL * ((uint64_t)&v99[-buf] >> 3);
    }
    unint64_t v47 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v99[-buf] >> 3) >= 0x333333333333333 ? 0x666666666666666 : v46;
    v96[0] = &v99;
    uint64_t v48 = (char *)sub_10026C508((uint64_t)&v99, v47);
    __int16 v50 = &v48[40 * v45];
    *((void *)v50 + 1) = 0;
    *((void *)v50 + 2) = 0;
    *(void *)__int16 v50 = a2;
    *((_DWORD *)v50 + 6) = 0;
    *((void *)v50 + 4) = v42;
    uint64_t v51 = *((void *)&buf + 1);
    uint64_t v52 = buf;
    if (*((void *)&buf + 1) == (void)buf)
    {
      uint64_t v52 = *((void *)&buf + 1);
      int v54 = &v48[40 * v45];
    }
    else
    {
      uint64_t v53 = *((void *)&buf + 1);
      int v54 = &v48[40 * v45];
      do
      {
        long long v55 = *(_OWORD *)(v53 - 40);
        *(_OWORD *)(v54 - 28) = *(_OWORD *)(v53 - 28);
        *(_OWORD *)(v54 - 40) = v55;
        uint64_t v56 = *(void *)(v53 - 8);
        *(void *)(v53 - 8) = 0;
        *((void *)v54 - 1) = v56;
        v54 -= 40;
        v53 -= 40;
      }
      while (v53 != v52);
    }
    uint64_t v44 = v50 + 40;
    *(void *)&long long buf = v54;
    *((void *)&buf + 1) = v50 + 40;
    uint64_t v57 = v99;
    uint64_t v99 = &v48[40 * v49];
    *(void *)&__p[16] = v51;
    __int16 v95 = v57;
    *(void *)std::string __p = v52;
    *(void *)&__p[8] = v52;
    sub_1006F6464((uint64_t)__p);
  }
  else
  {
    *(void *)(*((void *)&buf + 1) + 8) = 0;
    *(void *)(v43 + 16) = 0;
    *(void *)uint64_t v43 = a2;
    *(_DWORD *)(v43 + 24) = 0;
    uint64_t v44 = (char *)(v43 + 40);
    *(void *)(v43 + 32) = v41;
  }
  *((void *)&buf + 1) = v44;
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
  }
  uint64_t v58 = off_1009F8150;
  memset(v80, 0, sizeof(v80));
  sub_1006F64B8(v80, (long long *)buf, *((long long **)&buf + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&buf + 1) - buf) >> 3));
  sub_1004FDA04((uint64_t)v58, v80);
  *(void *)std::string __p = v80;
  sub_1006F63DC((void ***)__p);
  *(void *)std::string __p = &buf;
  sub_1006F63DC((void ***)__p);
  if (v79) {
LABEL_101:
  }
    (*(void (**)(uint64_t))(*(void *)v79 + 8))(v79);
  int v59 = v31 & a3;
  sub_10004D3B8(v74, v8);
  operator delete(v8);
  uint64_t v60 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)&buf);
    int v61 = SHIBYTE(v99);
    uint64_t v62 = (long long *)buf;
    sub_100551B04(a2, v89);
    uint64_t v63 = &buf;
    if (v61 < 0) {
      uint64_t v63 = v62;
    }
    uint64_t v64 = (void **)v89[0];
    uint64_t v65 = "NO";
    if (v90 >= 0) {
      uint64_t v64 = v89;
    }
    *(_DWORD *)std::string __p = 136446978;
    *(void *)&__p[4] = v63;
    if (a3) {
      uint64_t v66 = "YES";
    }
    else {
      uint64_t v66 = "NO";
    }
    *(_WORD *)&unsigned char __p[12] = 2082;
    *(void *)&unsigned char __p[14] = v64;
    if (v59) {
      uint64_t v65 = "YES";
    }
    *(_WORD *)&__p[22] = 2082;
    __int16 v95 = v66;
    LOWORD(v96[0]) = 2082;
    *(void *)((char *)v96 + 2) = v65;
    _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Received 'stop scan' request from session \"%{public}s\" (%{public}s) updateScanParams:%{public}s shouldUpdateState:%{public}s", __p, 0x2Au);
    if (v90 < 0) {
      operator delete(v89[0]);
    }
    if (SHIBYTE(v99) < 0) {
      operator delete((void *)buf);
    }
  }
  if (!sub_1006DB674(v78) && a4 && (_os_feature_enabled_impl() & 1) == 0)
  {
    uint64_t v67 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "ADVBUFF Legacy mode", __p, 2u);
    }
    if (!sub_1006DB674(v78))
    {
      sub_1006D4414(v78, 0);
      sub_1006D4414(v78, 1);
      sub_1006DB6E0(v78);
    }
  }
  if (v59)
  {
    *(unsigned char *)(v78 + 1840) = 1;
    sub_100055B50(v78, 0);
  }
  else
  {
    uint64_t v68 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Not updating state", __p, 2u);
    }
  }

  if (SHIBYTE(v92) < 0) {
    operator delete(*((void **)&v91 + 1));
  }
  return 0;
}

void sub_1006E268C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *__p,uint64_t a45,int a46,__int16 a47,char a48,char a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  sub_1006F63DC((void ***)&a52);
  a40 = v57 - 128;
  sub_1006F63DC((void ***)&a40);

  if (a49 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006E2798(uint64_t a1, uint64_t a2)
{
  if (a2 >= 3)
  {
    unint64_t v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v39) = a2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HW ADV Buffer handle out of range (%d), ignoring agent request", buf, 8u);
    }
    return 7;
  }
  uint64_t v6 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 704))(v6))
  {
    uint64_t v13 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2) {
        CFStringRef v14 = @"UNKNOWN";
      }
      else {
        CFStringRef v14 = off_1009BF9C8[(char)a2];
      }
      *(_DWORD *)long long buf = 138543362;
      CFStringRef v39 = v14;
      id v18 = "HW ADV for %{public}@ not supported on this hardware, ignoring agent request";
      goto LABEL_23;
    }
    return 11;
  }
  if (a2 == 2)
  {
    uint64_t v7 = sub_10003FB34();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 2328))(v7) & 1) == 0)
    {
      uint64_t v13 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        CFStringRef v39 = @"EN";
        id v18 = "HW ADV Buffers for %{public}@ not supported on this hardware, ignoring agent request";
LABEL_23:
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v18, buf, 0xCu);
        return 11;
      }
      return 11;
    }
  }
  uint64_t v8 = a1 + 544 * a2;
  int v10 = *(unsigned __int8 *)(v8 + 167);
  unint64_t v9 = (unsigned char *)(v8 + 167);
  if (v10)
  {
    id v11 = qword_100A19E90;
    if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO)) {
      return 12;
    }
    if (a2 > 2) {
      CFStringRef v12 = @"UNKNOWN";
    }
    else {
      CFStringRef v12 = off_1009BF9C8[(char)a2];
    }
    *(_DWORD *)long long buf = 138543362;
    CFStringRef v39 = v12;
    uint64_t v4 = 12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): already created", buf, 0xCu);
    return v4;
  }
  unsigned int v15 = a2;
  __int16 v37 = 0;
  int v36 = 0;
  uint64_t v16 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    if (a2 > 2) {
      CFStringRef v17 = @"UNKNOWN";
    }
    else {
      CFStringRef v17 = off_1009BF9C8[(char)a2];
    }
    *(_DWORD *)long long buf = 138543362;
    CFStringRef v39 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): sending advBufConfig", buf, 0xCu);
  }
  uint64_t v19 = sub_10003FB34();
  uint64_t v20 = a1 + 544 * a2;
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *, void, void, void, void, _BYTE))(*(void *)v19 + 2784))(v19, a2, *(v9 - 7), &v36, *(unsigned __int8 *)(v20 + 161), *(unsigned __int16 *)(v20 + 162), *(unsigned __int8 *)(v20 + 164), *(unsigned __int8 *)(v20 + 165), *(unsigned char *)(v20 + 166));
  BOOL v21 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    if (a2 > 2) {
      CFStringRef v22 = @"UNKNOWN";
    }
    else {
      CFStringRef v22 = off_1009BF9C8[(char)a2];
    }
    *(_DWORD *)long long buf = 138543618;
    CFStringRef v39 = v22;
    __int16 v40 = 1024;
    int v41 = v4;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): ADVBufConfig returned %d", buf, 0x12u);
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_1007951C4();
    }
    return v4;
  }
  uint64_t v23 = *(void *)sub_10003FB34();
  if (a2 <= 1)
  {
    int v24 = (*(uint64_t (**)(void))(v23 + 2320))();
    if (v24)
    {
      char v25 = v24;
      unint64_t v26 = 0;
      uint64_t v4 = 0;
      uint64_t v27 = a1 + 544 * a2 + 228;
      do
      {
        if (*(_WORD *)(v27 - 34))
        {
          uint64_t v28 = sub_10003FB34();
          BYTE2(v35) = *(unsigned char *)(v27 - 28);
          LOWORD(v35) = *(_WORD *)(v27 - 30);
          uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void, int *, void, void, void, void, int, uint64_t, uint64_t))(*(void *)v28 + 2792))(v28, a2, *(unsigned __int8 *)(v27 - 36), &v36, *(unsigned __int8 *)(v27 - 35), *(unsigned __int16 *)(v27 - 34), *(unsigned __int8 *)(v27 - 32), *(unsigned __int8 *)(v27 - 31), v35, v27 - 27, v27);
          if (v4)
          {
            int v29 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
            {
              int64_t v30 = off_1009BF9C8[(char)a2];
              *(_DWORD *)long long buf = 138543618;
              CFStringRef v39 = v30;
              __int16 v40 = 1024;
              int v41 = v4;
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "ADVBUFF(%{public}@): Failed to configure ext buffer adv rule: %d", buf, 0x12u);
            }
          }
          else
          {
            --v25;
          }
        }
        if (v26 > 6) {
          break;
        }
        ++v26;
        v27 += 64;
      }
      while (v25);
    }
    else
    {
      uint64_t v4 = 0;
    }
LABEL_59:
    unsigned char *v9 = 1;
    *(_WORD *)(a1 + 544 * v15 + 170) = 0;
    return v4;
  }
  uint64_t v4 = (*(uint64_t (**)(void))(v23 + 2856))();
  BOOL v31 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 138543618;
    CFStringRef v39 = @"EN";
    __int16 v40 = 1024;
    int v41 = v4;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): advBufRSSIBinsThreshold returned %d", buf, 0x12u);
  }
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_10079514C();
    }
  }
  else
  {
    uint64_t v32 = sub_10003FB34();
    uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v32 + 2864))(v32, a2, 0);
    uint64_t v33 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 138543618;
      CFStringRef v39 = @"EN";
      __int16 v40 = 1024;
      int v41 = v4;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_INFO, "ADVBUFF(%{public}@): advBufConfigTimeSlice returned %d", buf, 0x12u);
    }
    if (!v4) {
      goto LABEL_59;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
    sub_10079514C();
  }
  return v4;
}

void sub_1006E2EB4(uint64_t a1)
{
  if (!*(void *)(a1 + 2256))
  {
    *(unsigned char *)(a1 + 2288) = 0;
    if (qword_1009FB798 != -1) {
      dispatch_once(&qword_1009FB798, &stru_1009BF848);
    }
    uint64_t v2 = sub_10044F184((uint64_t)off_1009FB790);
    unint64_t v3 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fContactTracingScanDurationTimer Timer %llu ms Armed!", buf, 0xCu);
    }
    sub_1006EB510(a1);
    sub_1006EB82C(a1);
    if (qword_1009FB798 != -1) {
      dispatch_once(&qword_1009FB798, &stru_1009BF848);
    }
    sub_10044E7A8();
    uint64_t v4 = sub_100019878();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    void v10[2] = sub_1006EBDA4;
    v10[3] = &unk_100998260;
    void v10[4] = a1;
    void v10[5] = v2;
    sub_100013018(v4, v10);
    uint64_t v5 = sub_100019878();
    uint64_t v6 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v5 + 8));
    *(void *)(a1 + 2256) = v6;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1006EBE50;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v6, handler);
    uint64_t v7 = *(NSObject **)(a1 + 2256);
    dispatch_time_t v8 = dispatch_time(0x8000000000000000, 1000000 * v2);
    dispatch_source_set_timer(v7, v8, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 2256));
  }
}

void sub_1006E30E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 384))(v4) & 1) == 0)
  {
    uint64_t v5 = *(void *)(a3 + 8);
    if (!*(unsigned char *)(v5 + 137))
    {
      if (!*(unsigned char *)(v5 + 143)) {
        operator new();
      }
      uint64_t v6 = qword_100A19FB0;
      if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)uint64_t v7 = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "ExposureNotification client does not have a decay timer", v7, 2u);
      }
    }
  }
}

uint64_t sub_1006E322C(uint64_t a1, uint64_t a2, int a3)
{
  unsigned __int16 v21 = 0;
  uint64_t v6 = sub_1006E741C(a1, a2, 1, &v21);
  if (v6)
  {
    uint64_t v7 = v6;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_1007952C4();
    }
  }
  else
  {
    dispatch_time_t v8 = (uint64_t **)(a1 + 1816);
    uint64_t v9 = v21;
    unsigned __int8 v22 = v21;
    *(void *)long long buf = &v22;
    int v10 = sub_1006F620C(v8, &v22, (uint64_t)&unk_1007BE9D0, (char **)buf);
    char v11 = *((unsigned char *)v10 + 29);
    __int16 v12 = *((_WORD *)v10 + 15);
    uint64_t v13 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a2;
      *(_WORD *)&unsigned char buf[14] = 1024;
      LODWORD(v25) = a3;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Creating a match table with handle %x for type %d and mask: %d", buf, 0x14u);
    }
    uint64_t v14 = sub_10003FB34();
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, _BYTE, void, char, void, void, _BYTE))(*(void *)v14 + 2824))(v14, v9, 7, 255, 76, a2, 0, 1, 0, 0, 16, 0, 0, 0);
    if (!v7)
    {
      long long v36 = 0u;
      memset(v37, 0, sizeof(v37));
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      long long v30 = 0u;
      long long v31 = 0u;
      long long v28 = 0u;
      long long v29 = 0u;
      long long v26 = 0u;
      long long v27 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v25 = 0u;
      buf[6] = 2;
      uint64_t v15 = *(void *)sub_10003FB34();
      uint64_t v16 = (*(uint64_t (**)(void))(v15 + 2872))();
      if (v16)
      {
        uint64_t v7 = v16;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100794918();
        }
      }
      else
      {
        unsigned __int8 v20 = v12;
        uint64_t v23 = (char *)&v20;
        CFStringRef v17 = sub_1006F620C(v8, &v20, (uint64_t)&unk_1007BE9D0, &v23);
        *((unsigned char *)v17 + 28) = a2;
        *((unsigned char *)v17 + 29) = v11;
        *((_WORD *)v17 + 15) = v12;
        *((_DWORD *)v17 + 8) = 65537;
        *((_WORD *)v17 + 18) = 1;
        *((_WORD *)v17 + 19) = a3;
        uint64_t v18 = *(void *)sub_10003FB34();
        uint64_t v7 = (*(uint64_t (**)(void))(v18 + 2848))();
        if (v7 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_10079525C();
        }
      }
    }
  }
  return v7;
}

uint64_t sub_1006E3560(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = sub_100035F54();
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 960))(v5);
  uint64_t v7 = 0;
  if (a2 && v6)
  {
    if (*(void *)(a2 + 8))
    {
      dispatch_time_t v8 = sub_10004104C(a2);
      if (sub_100041058(a2) == 589824)
      {
        *a3 = sub_100041058(a2);
LABEL_6:
        uint64_t v7 = 1;
      }
      else
      {
        if (v8 && [v8 count])
        {
          long long v17 = 0u;
          long long v18 = 0u;
          long long v15 = 0u;
          long long v16 = 0u;
          id v9 = v8;
          id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
          if (v10)
          {
            uint64_t v11 = *(void *)v16;
            while (2)
            {
              for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
              {
                if (*(void *)v16 != v11) {
                  objc_enumerationMutation(v9);
                }
                uint64_t v13 = *(void **)(*((void *)&v15 + 1) + 8 * i);
                if (objc_msgSend(v13, "longLongValue", (void)v15) == 589824)
                {
                  *a3 = [v13 longLongValue];

                  goto LABEL_6;
                }
              }
              id v10 = [v9 countByEnumeratingWithState:&v15 objects:v19 count:16];
              if (v10) {
                continue;
              }
              break;
            }
          }
        }
        uint64_t v7 = 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return v7;
}

void sub_1006E3714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006E3740(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 72))(a2, *(unsigned int *)(a1 + 32), 1);
}

id sub_1006E3774(id a1, NSNumber *a2)
{
  uint64_t v2 = a2;
  if ([(NSNumber *)v2 integerValue] <= 0) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = v2;
  }
  uint64_t v4 = v3;

  return v4;
}

void sub_1006E37B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006E37C4(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4)
{
  uint64_t v5 = *(void **)(a1 + 2048);
  if (!v5) {
    goto LABEL_12;
  }
  int v6 = (void *)(a1 + 2048);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      id v9 = v5;
    }
    else {
      id v9 = v5 + 1;
    }
    if (v8) {
      int v6 = v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 != (void *)(a1 + 2048) && v6[4] <= a2)
  {
    long long v15 = sub_1006FC860(v6[5]);
    long long v16 = +[NSMutableDictionary dictionaryWithDictionary:v15];

    __int16 v50 = 0;
    uint64_t v51 = 0;
    uint64_t v52 = 0;
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BF788);
    }
    sub_10030755C((uint64_t)off_1009F8780, a2, &v50);
    uint64_t v43 = +[NSMutableString string];
    long long v17 = (unsigned __int8 *)v50;
    if (v50 == v51)
    {
      unsigned __int16 v19 = 0;
      unsigned __int16 v18 = 0;
    }
    else
    {
      unsigned __int16 v18 = 0;
      unsigned __int16 v19 = 0;
      do
      {
        sub_1000417A8((uint64_t)v17, __p);
        if (v49 >= 0) {
          unsigned __int8 v20 = __p;
        }
        else {
          unsigned __int8 v20 = (void **)__p[0];
        }
        unsigned __int16 v21 = +[NSString stringWithUTF8String:v20];
        unsigned __int8 v22 = +[NSString stringWithFormat:@"%@ ", v21];
        [v43 appendString:v22];

        if (v49 < 0) {
          operator delete(__p[0]);
        }
        int v24 = *v17;
        v17 += 20;
        int v23 = v24;
        if (v24 == 16) {
          ++v18;
        }
        if (v23 == 2) {
          ++v19;
        }
      }
      while (v17 != v51);
    }
    [v16 setObject:v43 forKeyedSubscript:@"DAPlistServiceUUID"];
    long long v25 = +[NSNumber numberWithUnsignedShort:v19];
    [v16 setObject:v25 forKeyedSubscript:@"DAPlistNumberOf16bitUUID"];

    long long v26 = +[NSNumber numberWithUnsignedShort:v18];
    [v16 setObject:v26 forKeyedSubscript:@"DAPlistNumberOf128bitUUID"];

    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BF788);
    }
    BOOL v27 = sub_100307368((uint64_t)off_1009F8780, a2);
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BF788);
    }
    if (sub_1003073C4((uint64_t)off_1009F8780, a2)) {
      unsigned int v28 = 2;
    }
    else {
      unsigned int v28 = v27;
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BF788);
    }
    if (sub_100307420((uint64_t)off_1009F8780, a2)) {
      uint64_t v29 = 4;
    }
    else {
      uint64_t v29 = v28;
    }
    long long v30 = +[NSNumber numberWithUnsignedInt:v29];
    [v16 setObject:v30 forKeyedSubscript:@"DASessionType"];

    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BF788);
    }
    if (sub_1002F29B8((uint64_t)off_1009F8780, a2))
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BF788);
      }
      BOOL v31 = sub_100307304((uint64_t)off_1009F8780, a2);
    }
    else
    {
      BOOL v31 = 0;
    }
    long long v32 = +[NSNumber numberWithBool:v31];
    [v16 setObject:v32 forKeyedSubscript:@"SupportsStateRestoration"];

    long long v33 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 140)];
    [v16 setObject:v33 forKeyedSubscript:@"ClientType"];

    long long v34 = +[NSNumber numberWithBool:a3];
    [v16 setObject:v34 forKeyedSubscript:@"IsPrioritizedOverBT"];

    long long v35 = +[NSNumber numberWithBool:a4];
    [v16 setObject:v35 forKeyedSubscript:@"IsPrioritizedOverWiFi"];

    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    id v36 = *(id *)(*(void *)(v6[5] + 8) + 152);
    id v37 = [v36 countByEnumeratingWithState:&v44 objects:v57 count:16];
    if (v37)
    {
      uint64_t v38 = *(void *)v45;
      do
      {
        for (uint64_t i = 0; i != v37; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v45 != v38) {
            objc_enumerationMutation(v36);
          }
          [v16 setObject:*(void *)(*((void *)&v44 + 1) + 8 * i) forKeyedSubscript:@"BundleID"];
          uint64_t v40 = sub_100050530();
          (*(void (**)(uint64_t, void *))(*(void *)v40 + 304))(v40, v16);
        }
        id v37 = [v36 countByEnumeratingWithState:&v44 objects:v57 count:16];
      }
      while (v37);
    }

    if (v50)
    {
      uint64_t v51 = (unsigned __int8 *)v50;
      operator delete(v50);
    }
  }
  else
  {
LABEL_12:
    id v10 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(a2, (uint64_t)&v50);
      int v11 = SHIBYTE(v52);
      __int16 v12 = (void **)v50;
      sub_100551B04(a2, __p);
      uint64_t v13 = &v50;
      if (v11 < 0) {
        uint64_t v13 = v12;
      }
      if (v49 >= 0) {
        uint64_t v14 = __p;
      }
      else {
        uint64_t v14 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446466;
      int v54 = v13;
      __int16 v55 = 2082;
      uint64_t v56 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sendSessionScanMetricStats could not find an agent for %{public}s(%{public}s)", buf, 0x16u);
      if (v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v52) < 0) {
        operator delete(v50);
      }
    }
  }
}

void sub_1006E3E00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

id sub_1006E3F00(id a1, NSNumber *a2)
{
  uint64_t v2 = a2;
  if ([(NSNumber *)v2 integerValue] <= 0) {
    unint64_t v3 = 0;
  }
  else {
    unint64_t v3 = v2;
  }
  uint64_t v4 = v3;

  return v4;
}

void sub_1006E3F40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006E3F50(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 72))(a2, *(unsigned int *)(a1 + 32), 0);
}

void sub_1006E3F84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

void sub_1006E3F8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  uint64_t v12 = sub_100019878();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1006F098C;
  v13[3] = &unk_1009BDF30;
  int v14 = a6;
  void v13[4] = a1;
  void v13[5] = a2;
  v13[6] = a3;
  v13[7] = a4;
  v13[8] = a5;
  sub_100013018(v12, v13);
}

uint64_t sub_1006E4038(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (!*(_DWORD *)(a1 + 1960)) {
    return 105;
  }
  uint64_t v4 = *(void **)(a1 + 2048);
  if (!v4) {
    goto LABEL_29;
  }
  uint64_t v6 = a1 + 2048;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      id v9 = v4;
    }
    else {
      id v9 = v4 + 1;
    }
    if (v8) {
      uint64_t v6 = (uint64_t)v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 == a1 + 2048 || *(void *)(v6 + 32) > a2)
  {
LABEL_29:
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_10079532C();
    }
    return 401;
  }
  uint64_t v11 = *(void *)(v6 + 40);
  if (((*(void *)(*(void *)(v11 + 8) + (((unint64_t)a3 >> 3) & 0x18) + 240) >> a3) & 1) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100795360();
    }
    return 401;
  }
  sub_1006FB648(v11, a3);
  uint64_t v22 = 0;
  memset(v21, 0, sizeof(v21));
  uint64_t v12 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 600))(v12, v13, v14, v15, v16, v17, v18))
  {
    uint64_t v19 = sub_10003FB34();
    int v20 = (*(uint64_t (**)(uint64_t, _OWORD *, void, uint64_t, uint64_t))(*(void *)v19 + 744))(v19, v21, 0, 1, a3);
  }
  else
  {
    int v20 = sub_100055B50(a1, 1);
  }
  if (v20 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
    sub_100795394();
  }
  return 0;
}

uint64_t sub_1006E423C(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v7 + 736))(v7, a2, a3, a4)&& os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
  {
    sub_1007953FC();
  }
  return 0;
}

uint64_t sub_1006E42E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 744))(v9, a2, a3, a4, a5)&& os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
  {
    sub_100795464();
  }
  return 0;
}

uint64_t sub_1006E438C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, unsigned int a8, unsigned __int8 a9, uint64_t a10, __int16 a11, char a12, char a13, char a14)
{
  uint64_t v20 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v20 + 592))(v20)
    || (uint64_t v21 = sub_10003FB34(),
        BYTE4(v23) = a14,
        BYTE3(v23) = a13,
        BYTE2(v23) = a12,
        LOWORD(v23) = a11,
        (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, void, void, uint64_t, uint64_t))(*(void *)v21 + 680))(v21, a3, a4, a5, a6, a7, a8, a9, a10, v23)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_1007954CC();
    }
  }
  return 0;
}

uint64_t sub_1006E44E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9, uint64_t a10, __int16 a11, char a12)
{
  uint64_t v18 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v18 + 592))(v18)
    || (uint64_t v19 = sub_10003FB34(),
        BYTE2(v21) = a12,
        LOWORD(v21) = a11,
        (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, int))(*(void *)v19 + 696))(v19, a3, a4, a5, a6, a7, a8, a9, a10, v21)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100795534();
    }
  }
  return 0;
}

uint64_t sub_1006E4628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 592))(v4))
  {
    uint64_t v5 = sub_10003FB34();
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 728))(v5, a3);
    if (!v6) {
      return v6;
    }
  }
  else
  {
    uint64_t v6 = 11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
    sub_10079559C();
  }
  return v6;
}

uint64_t sub_1006E46F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 592))(v5)
    || (uint64_t v6 = sub_10003FB34(),
        (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 704))(v6, a2, a3)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100795604();
    }
  }
  return 0;
}

uint64_t sub_1006E47C0(uint64_t a1)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  uint64_t v2 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1006E4884;
  v5[3] = &unk_100999720;
  _OWORD v5[4] = &v6;
  void v5[5] = a1;
  sub_1000197D8(v2, v5);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_1006E486C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E4884(uint64_t result)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(_DWORD *)(*(void *)(result + 40) + 1960) == 3;
  return result;
}

uint64_t sub_1006E48A0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 2048);
  if (v2)
  {
    uint64_t v3 = (void *)(a1 + 2048);
    do
    {
      unint64_t v4 = v2[4];
      BOOL v5 = v4 >= a2;
      if (v4 >= a2) {
        uint64_t v6 = v2;
      }
      else {
        uint64_t v6 = v2 + 1;
      }
      if (v5) {
        uint64_t v3 = v2;
      }
      uint64_t v2 = (void *)*v6;
    }
    while (*v6);
    if (v3 != (void *)(a1 + 2048) && v3[4] <= a2 && *(void *)(v3[5] + 8)) {
      operator new();
    }
  }
  return 0;
}

void sub_1006E4944()
{
}

void sub_1006E4968(uint64_t a1, int a2)
{
  sub_100054AA0(a1);
  int v4 = *(_DWORD *)(a1 + 1960);
  if (v4)
  {
    if (v4 != 2)
    {
      BOOL v5 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT)) {
        sub_1007956D4(v5);
      }
    }
    uint64_t v6 = qword_100A19E90;
    if (a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_10079566C();
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scanning started successfully", buf, 2u);
      }
      *(void *)(a1 + 2096) = 0;
      *(_DWORD *)(a1 + 1960) = 3;
      sub_100031668(a1, 0);
    }
  }
  else
  {
    uint64_t v7 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Ignoring late scan started event", v8, 2u);
    }
  }
}

void sub_1006E4AA0(uint64_t a1, uint64_t a2, int a3)
{
  if ((unint64_t)sub_100045F00(*(void *)(a2 + 8) + 48) >= 0x19)
  {
    uint64_t v6 = sub_10004A6E4(*(void *)(a2 + 8) + 48);
    BOOL v7 = *(_WORD *)v6 == 76 && *(unsigned char *)(v6 + 2) == 2;
    if (v7)
    {
      uint64_t v8 = v6;
      if (*(unsigned __int8 *)(v6 + 3) >= 0x15u)
      {
        uint64_t v9 = sub_10003FB34();
        if ((*(int (**)(uint64_t))(*(void *)v9 + 3512))(v9) <= a3)
        {
          uint64_t v26 = 0;
          uint64_t v27 = 0;
          uint64_t v28 = 0;
          id v10 = *(void **)(a1 + 2000);
          if (v10 != (void *)(a1 + 2008))
          {
            do
            {
              uint64_t v11 = (unsigned __int8 *)sub_10004A6E4((uint64_t)(v10 + 4));
              unint64_t v12 = sub_100045F00((uint64_t)(v10 + 4));
              uint64_t v13 = (unsigned __int8 *)sub_10004A6E4((uint64_t)(v10 + 6));
              unint64_t v14 = sub_100045F00((uint64_t)(v10 + 6));
              if (v12 >= v14) {
                unint64_t v15 = v14;
              }
              else {
                unint64_t v15 = v12;
              }
              if (v15)
              {
                uint64_t v16 = (unsigned __int8 *)(v8 + 4);
                while (1)
                {
                  int v18 = *v16++;
                  int v17 = v18;
                  int v19 = *v13++;
                  int v20 = v19 & v17;
                  int v21 = *v11++;
                  if (v20 != v21) {
                    break;
                  }
                  if (!--v15) {
                    goto LABEL_17;
                  }
                }
              }
              else
              {
LABEL_17:
                sub_1006E636C(&v26, (uint64_t)(v10 + 4));
              }
              uint64_t v22 = (void *)v10[1];
              if (v22)
              {
                do
                {
                  uint64_t v23 = v22;
                  uint64_t v22 = (void *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  uint64_t v23 = (void *)v10[2];
                  BOOL v7 = *v23 == (void)v10;
                  id v10 = v23;
                }
                while (!v7);
              }
              id v10 = v23;
            }
            while (v23 != (void *)(a1 + 2008));
            uint64_t v24 = v26;
            uint64_t v25 = v27;
            if (v27 != v26)
            {
              do
              {
                sub_1006F6EA4((uint64_t **)(a1 + 2000), v24);
                v24 += 32;
              }
              while (v24 != v25);
              sub_1006E5FE4(a1);
            }
          }
          uint64_t v29 = (void **)&v26;
          sub_1006F6BD8(&v29);
        }
      }
    }
  }
}

void sub_1006E4C70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1006F6BD8(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E4CA4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(*(void *)a2 + 32))(a2, *(void *)(a1 + 40), *(void *)(a1 + 32), a1 + 48);
}

uint64_t *sub_1006E4CD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = &off_100998468;
  *(void *)(a1 + 64) = v4;
  if (v4) {
    sub_100037354(v4);
  }
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  sub_100037564((char *)(a1 + 72), *(long long **)(a2 + 72), *(long long **)(a2 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 80) - *(void *)(a2 + 72)) >> 2));
  return sub_10004A2F8((uint64_t *)(a1 + 96), a2 + 96);
}

void sub_1006E4D6C(_Unwind_Exception *exception_object)
{
  BOOL v5 = *v3;
  if (*v3)
  {
    v1[10] = v5;
    operator delete(v5);
  }
  v1[7] = v2;
  uint64_t v6 = (atomic_uint *)v1[8];
  if (v6) {
    sub_1000368F4(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006E4DA0(uint64_t a1)
{
  sub_1000486F0(a1 + 96, *(void **)(a1 + 104));
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  *(void *)(a1 + 56) = &off_100998468;
  uint64_t v3 = *(atomic_uint **)(a1 + 64);
  if (v3)
  {
    sub_1000368F4(v3);
  }
}

uint64_t sub_1006E4E20(uint64_t a1, uint64_t (***a2)(void, void, void, uint64_t, uint64_t, void, uint64_t, void))
{
  return (**a2)(a2, *(void *)(a1 + 48), *(void *)(a1 + 32), a1 + 56, a1 + 72, *(unsigned __int8 *)(a1 + 120), a1 + 96, *(void *)(a1 + 40));
}

id sub_1006E4E64(uint64_t a1)
{
  if (*(void *)(a1 + 64) == *(void *)(a1 + 72) || !*(void *)(a1 + 160))
  {
    id v1 = *(id *)(a1 + 152);
  }
  else
  {
    +[NSSet setWithObject:](NSSet, "setWithObject:");
    id v1 = (id)objc_claimAutoreleasedReturnValue();
  }

  return v1;
}

id sub_1006E4EB8(uint64_t a1, uint64_t a2)
{
  id v3 = objc_alloc_init((Class)NSMutableString);
  unint64_t v4 = sub_100045F00(a2);
  BOOL v5 = (_WORD *)sub_10004A6E4(a2);
  uint64_t v6 = v5;
  if (v4 > 2)
  {
    if (v4 != 3)
    {
      LODWORD(v7) = 2;
      uint64_t v8 = 3;
      do
      {
        uint64_t v9 = *((unsigned __int8 *)v6 + v8);
        id v10 = "Invalid";
        switch(*((unsigned char *)v6 + (int)v7))
        {
          case 0:
            break;
          case 1:
            id v10 = "Hash";
            break;
          case 2:
            id v10 = "iBeacon";
            break;
          case 3:
            id v10 = "AirPrint";
            break;
          case 4:
            id v10 = "LegacyATVSetup";
            break;
          case 5:
            id v10 = "AirDrop";
            break;
          case 6:
            id v10 = "HomeKitV1";
            break;
          case 7:
            id v10 = "ProxPairing";
            break;
          case 8:
            id v10 = "HeySiri";
            break;
          case 9:
            id v10 = "AirPlayTarget";
            break;
          case 0xA:
            id v10 = "AirPlaySource";
            break;
          case 0xB:
            id v10 = "MagicSwitch";
            break;
          case 0xC:
            id v10 = "Continuity";
            break;
          case 0xD:
            id v10 = "TetheringTarget";
            break;
          case 0xE:
            id v10 = "TetheringSource";
            break;
          case 0xF:
            id v10 = "NearbyAction";
            break;
          case 0x10:
            id v10 = "NearbyInfo";
            break;
          case 0x11:
            id v10 = "HomeKitV2";
            break;
          case 0x12:
            id v10 = "ObjectDiscovery";
            break;
          case 0x13:
            id v10 = "SpatialInteraction";
            break;
          case 0x14:
            id v10 = "DCKit";
            break;
          case 0x15:
            id v10 = "NearbyActionV2";
            break;
          case 0x16:
            id v10 = "NearbyInfoV2";
            break;
          case 0x17:
          case 0x19:
            goto LABEL_10;
          case 0x18:
            id v10 = "DSInfo";
            break;
          case 0x1A:
            id v10 = "NearbyActionNoWake";
            break;
          default:
            if (*((unsigned char *)v6 + (int)v7) == 100) {
              id v10 = "FastLEConnection";
            }
            else {
LABEL_10:
            }
              id v10 = "?";
            break;
        }
        uint64_t v11 = +[NSString stringWithUTF8String:v10];
        [v3 appendFormat:@"%@,", v11];

        uint64_t v7 = (int)v7 + 2 + v9;
        uint64_t v8 = v7 + 1;
      }
      while (v4 > v7 + 1);
    }
  }
  else if (*v5 != 76)
  {
    [v3 appendFormat:@"Others,"];
  }

  return v3;
}

void sub_1006E5138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006E51CC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1006E520C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a1 + 1960))
  {
    if (a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100795C7C();
      }
      uint64_t v30 = sub_100017768();
      sub_10004191C(v31, "");
      sub_1005C8AF4(v30, a2, (uint64_t)v31, 1);
    }
    int v33 = 0;
    uint64_t v4 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 568))(v4))
    {
      uint64_t v5 = sub_10003FB34();
      (*(void (**)(uint64_t, int *))(*(void *)v5 + 1024))(v5, &v33);
    }
    uint64_t v6 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 2096);
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v33;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scanning stopped successfully.  %llu Advertising Events, %u dropped pkts", buf, 0x12u);
    }
    int v8 = *(_DWORD *)(a1 + 1964);
    if (*(unsigned char *)(a1 + 1840) || v8 == 1)
    {
      if (*(unsigned char *)(a1 + 1840)) {
        BOOL v9 = v8 == 1;
      }
      else {
        BOOL v9 = 1;
      }
      int v10 = v9;
      sub_1006E5734((unsigned char *)a1, v10);
    }
    *(_DWORD *)(a1 + 1960) = 1;
    uint64_t v11 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(int *)(a1 + 1964);
      if (v12 > 3) {
        uint64_t v13 = "UNKNOWN";
      }
      else {
        uint64_t v13 = off_1009BF9A8[v12];
      }
      *(_DWORD *)long long buf = 136446466;
      *(void *)&uint8_t buf[4] = "Idle";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "handleScanStoppedEvent state=%{public}s observerState=%{public}s", buf, 0x16u);
    }
    unint64_t v15 = *(unsigned __int8 **)(a1 + 2064);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4812000000;
    id v36 = sub_10004D1D0;
    id v37 = sub_10004CE80;
    uint64_t v38 = "";
    v40[0] = 0;
    v40[1] = 0;
    CFStringRef v39 = v40;
    if (v15 != (unsigned __int8 *)(a1 + 2072))
    {
      uint64_t v16 = (void *)(a1 + 2048);
      do
      {
        memset(dst, 0, sizeof(dst));
        uuid_copy(dst, v15 + 32);
        int v17 = *(void **)(a1 + 2040);
        if (v17 == v16)
        {
LABEL_41:
          sub_1006AA1A4((uint64_t **)(*(void *)&buf[8] + 48), dst, dst);
          uint64_t v25 = (unsigned __int8 *)*((void *)v15 + 1);
          uint64_t v26 = v15;
          if (v25)
          {
            do
            {
              uint64_t v24 = (unsigned __int8 **)v25;
              uint64_t v25 = *(unsigned __int8 **)v25;
            }
            while (v25);
          }
          else
          {
            do
            {
              uint64_t v24 = (unsigned __int8 **)*((void *)v26 + 2);
              BOOL v9 = *v24 == v26;
              uint64_t v26 = (unsigned __int8 *)v24;
            }
            while (!v9);
          }
          sub_10004D3B8((uint64_t **)(a1 + 2064), (uint64_t *)v15);
          sub_1006F5D3C((void *)v15 + 4);
          operator delete(v15);
        }
        else
        {
          char v18 = 0;
          while (1)
          {
            uint64_t v19 = v17[5];
            uint64_t v20 = sub_1000308C0(v19 + 104, dst);
            if (v19 + 112 != v20) {
              break;
            }
            int v21 = (void *)v17[1];
            if (v21)
            {
              do
              {
                uint64_t v22 = v21;
                int v21 = (void *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                uint64_t v22 = (void *)v17[2];
                BOOL v9 = *v22 == (void)v17;
                int v17 = v22;
              }
              while (!v9);
            }
            v18 |= v19 + 112 != v20;
            int v17 = v22;
            if (v22 == v16)
            {
              if ((v18 & 1) == 0) {
                goto LABEL_41;
              }
              break;
            }
          }
          uint64_t v23 = (unsigned __int8 *)*((void *)v15 + 1);
          if (v23)
          {
            do
            {
              uint64_t v24 = (unsigned __int8 **)v23;
              uint64_t v23 = *(unsigned __int8 **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              uint64_t v24 = (unsigned __int8 **)*((void *)v15 + 2);
              BOOL v9 = *v24 == v15;
              unint64_t v15 = (unsigned __int8 *)v24;
            }
            while (!v9);
          }
        }
        unint64_t v15 = (unsigned __int8 *)v24;
      }
      while (v24 != (unsigned __int8 **)(a1 + 2072));
    }
    uint64_t v27 = sub_100019878();
    v32[0] = _NSConcreteStackBlock;
    v32[1] = 3221225472;
    v32[2] = sub_1006E59AC;
    v32[3] = &unk_1009995E0;
    v32[4] = buf;
    sub_100013018(v27, v32);
    int v28 = *(_DWORD *)(a1 + 1964);
    if (v28 == 3)
    {
      unsigned int v29 = 0;
    }
    else
    {
      if (v28 != 1)
      {
        sub_100031668(a1, 0);
        goto LABEL_54;
      }
      unsigned int v29 = 2;
    }
    sub_1006E5A94((os_unfair_lock_s *)a1, v29);
LABEL_54:
    _Block_object_dispose(buf, 8);
    sub_1000486F0((uint64_t)&v39, v40[0]);
    return;
  }
  unint64_t v14 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Ignoring late scan stopped event", buf, 2u);
  }
}

void sub_1006E56E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006E5734(unsigned char *a1, int a2)
{
  uint64_t v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = "NO";
    if (a2) {
      uint64_t v6 = "YES";
    }
    else {
      uint64_t v6 = "NO";
    }
    if (a1[1849]) {
      uint64_t v7 = "YES";
    }
    else {
      uint64_t v7 = "NO";
    }
    int v8 = a1[1848];
    int v9 = a1[1850];
    if (a1[1843]) {
      int v10 = "YES";
    }
    else {
      int v10 = "NO";
    }
    int v18 = 136447234;
    if (v8) {
      uint64_t v11 = "YES";
    }
    else {
      uint64_t v11 = "NO";
    }
    uint64_t v19 = v6;
    __int16 v20 = 2082;
    if (v9) {
      uint64_t v5 = "YES";
    }
    int v21 = v7;
    __int16 v22 = 2082;
    uint64_t v23 = v10;
    __int16 v24 = 2082;
    uint64_t v25 = v11;
    __int16 v26 = 2082;
    uint64_t v27 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Trying to remove scan filters with forceRemove=%{public}s fHaveZoneFilters:%{public}s fZoneScansHaveChanged:%{public}s fHaveUUIDFilters:%{public}s fHaveRuleFilters:%{public}s", (uint8_t *)&v18, 0x34u);
  }
  if (a1[1849])
  {
    if (a1[1843] || (a2 & 1) != 0) {
      goto LABEL_22;
    }
  }
  else if (a2)
  {
LABEL_22:
    uint64_t v12 = sub_10003FB34();
    (*(void (**)(uint64_t))(*(void *)v12 + 624))(v12);
    uint64_t v13 = sub_10003FB34();
    (*(void (**)(uint64_t, void))(*(void *)v13 + 632))(v13, 0);
    a1[1849] = 0;
    a1[1842] = 0;
  }
  if (a1[1848] || a2)
  {
    uint64_t v14 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 408))(v14, 1);
    a1[1848] = 0;
    a1[1842] = 0;
  }
  if (a1[1850] || a2)
  {
    uint64_t v15 = sub_10003FB34();
    (*(void (**)(uint64_t))(*(void *)v15 + 640))(v15);
    uint64_t v16 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v16 + 784))(v16, v17);
    a1[1850] = 0;
    a1[1842] = 0;
  }
}

void sub_1006E59AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v2 = *(unsigned __int8 **)(v1 + 48);
  if (v2 != (unsigned __int8 *)(v1 + 56))
  {
    do
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BF828);
      }
      sub_1006BABD8((uint64_t)off_1009F7ED8, v2 + 25);
      uint64_t v4 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (unsigned __int8 *)*((void *)v2 + 2);
          BOOL v6 = *(void *)v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != (unsigned __int8 *)(v1 + 56));
    uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  int v8 = *(void **)(v1 + 56);
  uint64_t v7 = (void *)(v1 + 56);
  sub_1000486F0((uint64_t)(v7 - 1), v8);
  *(v7 - 1) = v7;
  *uint64_t v7 = 0;
  v7[1] = 0;
}

uint64_t sub_1006E5A94(os_unfair_lock_s *a1, unsigned int a2)
{
  uint64_t v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t os_unfair_lock_opaque = (int)a1[490]._os_unfair_lock_opaque;
    if (os_unfair_lock_opaque > 4) {
      BOOL v6 = "UNKNOWN";
    }
    else {
      BOOL v6 = off_1009BF980[os_unfair_lock_opaque];
    }
    unsigned int v7 = a1[491]._os_unfair_lock_opaque;
    if (v7 > 3) {
      int v8 = "UNKNOWN";
    }
    else {
      int v8 = off_1009BF9A8[v7];
    }
    if (a2 > 3) {
      int v9 = "UNKNOWN";
    }
    else {
      int v9 = off_1009BF9A8[a2];
    }
    int v13 = 136447234;
    uint64_t v14 = v6;
    __int16 v15 = 2082;
    uint64_t v16 = v8;
    __int16 v17 = 1024;
    unsigned int v18 = v7;
    __int16 v19 = 2082;
    __int16 v20 = v9;
    __int16 v21 = 1024;
    unsigned int v22 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "scan state:%{public}s, changing ObserverState %{public}s(%d) --> %{public}s(%d)", (uint8_t *)&v13, 0x2Cu);
  }
  a1[491]._uint64_t os_unfair_lock_opaque = a2;
  switch(a2)
  {
    case 0u:
      sub_1004EF138((uint64_t)&a1[14]);
      int v10 = a1 + 468;
      uint64_t v11 = &stru_1009BF5A0;
      goto LABEL_16;
    case 1u:
    case 3u:
      sub_1004EF214((uint64_t)&a1[14]);
      break;
    case 2u:
      int v10 = a1 + 468;
      uint64_t v11 = &stru_1009BF580;
LABEL_16:
      sub_100048744(v10, v11);
      break;
    default:
      return sub_100055B50(a1, 0);
  }
  return sub_100055B50(a1, 0);
}

void sub_1006E5C50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((unint64_t)sub_100045F00(a2) <= 0x15 && (unint64_t v6 = sub_100045F00(a2), v6 <= sub_100045F00(a3)))
  {
    int v8 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      sub_10004C2C4(a2, buf);
      int v9 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)__int16 v17 = 136446210;
      *(void *)&_OWORD v17[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Received zone lost event for zone %{public}s", v17, 0xCu);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
    dispatch_time_t v10 = dispatch_time(0, 0);
    dispatch_time_t v11 = *(void *)(a1 + 2024);
    if (v10 <= v11)
    {
      memset(buf, 0, sizeof(buf));
      sub_1006F59A8(buf, a2, a3);
      if ((void *)(a1 + 2008) == sub_1006F6804(a1 + 2000, (uint64_t)buf))
      {
        dispatch_time_t v14 = dispatch_time(0, 30000000000);
        *(void *)__int16 v17 = buf;
        sub_1006F6908((uint64_t **)(a1 + 2000), (uint64_t)buf, (uint64_t)&unk_1007BE9D0, (uint64_t *)v17)[8] = v14;
        sub_1006E5FE4(a1);
      }
      *(void *)&uint8_t buf[16] = &off_100998428;
      if (*(void *)&buf[24]) {
        sub_1000368F4(*(atomic_uint **)&buf[24]);
      }
      *(void *)long long buf = &off_100998428;
      if (*(void *)&buf[8]) {
        sub_1000368F4(*(atomic_uint **)&buf[8]);
      }
    }
    else
    {
      dispatch_time_t v12 = v10;
      int v13 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 134218240;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 2048;
        *(void *)&unsigned char buf[14] = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "We are beyond the zone lost timeout (%lld).  Sending directly to clients.  Now %lld", buf, 0x16u);
      }
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3221225472;
      void v15[2] = sub_1006E5FB4;
      v15[3] = &unk_1009BF350;
      v15[4] = a2;
      v15[5] = a3;
      sub_100048744((os_unfair_lock_s *)(a1 + 1872), v15);
      if (*(_DWORD *)(sub_10003FB34() + 712) == 1) {
        sub_100055B50(a1, 1);
      }
    }
  }
  else
  {
    unsigned int v7 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 134218240;
      *(void *)&uint8_t buf[4] = sub_100045F00(a2);
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = sub_100045F00(a3);
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Zone Lost event has invalid sizes.  zoneLength:%zu maskLength:%zu", buf, 0x16u);
    }
  }
}

void sub_1006E5F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1006E60E8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E5FB4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1006E5FE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2016);
  id v3 = *(NSObject **)(a1 + 2032);
  if (v2)
  {
    if (v3)
    {
      dispatch_suspend(v3);
    }
    else
    {
      uint64_t v4 = sub_100019878();
      uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v4 + 8));
      *(void *)(a1 + 2032) = v5;
      dispatch_source_set_event_handler(v5, &stru_1009BF370);
    }
    unint64_t v6 = *(void **)(a1 + 2000);
    dispatch_time_t v7 = -1;
    if (v6 != (void *)(a1 + 2008))
    {
      do
      {
        if (v7 >= v6[8]) {
          dispatch_time_t v7 = v6[8];
        }
        int v8 = (void *)v6[1];
        if (v8)
        {
          do
          {
            int v9 = v8;
            int v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            int v9 = (void *)v6[2];
            BOOL v10 = *v9 == (void)v6;
            unint64_t v6 = v9;
          }
          while (!v10);
        }
        unint64_t v6 = v9;
      }
      while (v9 != (void *)(a1 + 2008));
    }
    dispatch_source_set_timer(*(dispatch_source_t *)(a1 + 2032), v7, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_time_t v11 = *(NSObject **)(a1 + 2032);
    dispatch_resume(v11);
  }
  else if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 2032));
    *(void *)(a1 + 2032) = 0;
  }
}

void *sub_1006E60E8(void *a1)
{
  a1[2] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[3];
  if (v2) {
    sub_1000368F4(v2);
  }
  *a1 = &off_100998428;
  id v3 = (atomic_uint *)a1[1];
  if (v3) {
    sub_1000368F4(v3);
  }
  return a1;
}

void sub_1006E6160(id a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BF768);
  }
  uint64_t v1 = off_1009F85C0;

  sub_1006E61B4((uint64_t)v1);
}

void sub_1006E61B4(uint64_t a1)
{
  dispatch_time_t v2 = dispatch_time(0, 0);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  id v3 = *(void **)(a1 + 2000);
  if (v3 != (void *)(a1 + 2008))
  {
    dispatch_time_t v4 = v2;
    do
    {
      if (v3[8] <= v4)
      {
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        void v10[2] = sub_1006E6338;
        v10[3] = &unk_1009BF390;
        void v10[4] = v3 + 4;
        sub_100048744((os_unfair_lock_s *)(a1 + 1872), v10);
        sub_1006E636C(&v11, (uint64_t)(v3 + 4));
      }
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          unint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          id v3 = v6;
        }
        while (!v7);
      }
      id v3 = v6;
    }
    while (v6 != (void *)(a1 + 2008));
    uint64_t v8 = v11;
    uint64_t v9 = v12;
    while (v8 != v9)
    {
      sub_1006F6EA4((uint64_t **)(a1 + 2000), v8);
      v8 += 32;
    }
  }
  sub_1006E5FE4(a1);
  dispatch_time_t v14 = (void **)&v11;
  sub_1006F6BD8(&v14);
}

void sub_1006E6314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, void **a18)
{
  a18 = (void **)&a15;
  sub_1006F6BD8(&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1006E6338(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32), *(void *)(a1 + 32) + 16);
}

void *sub_1006E636C(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 5;
    if ((unint64_t)(v10 + 1) >> 59) {
      abort();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 4;
    if (v11 >> 4 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v13 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      dispatch_time_t v14 = (char *)sub_1002B6234(v4, v13);
    }
    else {
      dispatch_time_t v14 = 0;
    }
    __int16 v15 = v14;
    uint64_t v16 = &v14[32 * v10];
    unsigned int v18 = &v14[32 * v13];
    sub_1006F6ADC(v16, a2);
    __int16 v17 = v16 + 32;
    sub_1006F6CFC(a1, &v15);
    uint64_t v9 = a1[1];
    __n128 result = sub_1006F6E28(&v15);
  }
  else
  {
    __n128 result = sub_1006F6ADC(*(void **)(v4 - 8), a2);
    uint64_t v9 = v7 + 32;
    a1[1] = v7 + 32;
  }
  a1[1] = v9;
  return result;
}

void sub_1006E645C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void sub_1006E647C(int a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006E64F8;
  v3[3] = &unk_100998300;
  int v4 = a1;
  sub_100013018(v2, v3);
}

void sub_1006E64F8(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BF768);
  }
  uint64_t v2 = off_1009F85C0;
  int v3 = *(_DWORD *)(a1 + 32);

  sub_1006E4968((uint64_t)v2, v3);
}

uint64_t sub_1006E655C(int a1, const void *a2, size_t __n, uint64_t a4)
{
  uint64_t result = 161;
  if (a2)
  {
    if (__n)
    {
      uint64_t result = 161;
      if (a1 == 18)
      {
        if (a4)
        {
          if (__n < 0x1E)
          {
            uint64_t v9 = a4 + 5072 + 56 * *(unsigned __int8 *)(a4 + 5632);
            *(_DWORD *)(v9 + 16) = 0;
            *(_OWORD *)uint64_t v9 = xmmword_1007BA8EC;
            uint64_t v10 = (unsigned char *)(a4 + 5072 + 56 * *(unsigned __int8 *)(a4 + 5632));
            v10[20] = 1;
            v10[21] = __n < 4;
            memcpy(v10 + 22, a2, __n);
            uint64_t result = 0;
            unsigned __int8 v11 = *(unsigned char *)(a4 + 5632);
            *(_WORD *)(a4 + 5072 + 56 * v11 + 52) = __n + 2;
            *(unsigned char *)(a4 + 5632) = v11 + 1;
          }
          else
          {
            uint64_t v8 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
              sub_100795CE4(__n, v8);
            }
            return 162;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1006E6664(int a1, uint64_t a2, unint64_t a3, BOOL *a4)
{
  uint64_t result = 161;
  if (a2 && a3 && a1 == 18)
  {
    if (a4)
    {
      uint64_t result = 0;
      *a4 = a3 < 3;
    }
  }
  return result;
}

void sub_1006E6694(id a1)
{
}

void sub_1006E66A0(int a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006E671C;
  v3[3] = &unk_100998300;
  int v4 = a1;
  sub_100013018(v2, v3);
}

void sub_1006E671C(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BF768);
  }
  uint64_t v2 = off_1009F85C0;
  uint64_t v3 = *(unsigned int *)(a1 + 32);

  sub_1006E520C((uint64_t)v2, v3);
}

void sub_1006E6780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(atomic_uint **)(a2 + 8);
  dispatch_time_t v14 = &off_100998428;
  __int16 v15 = v4;
  if (v4) {
    sub_100037354((uint64_t)v4);
  }
  unint64_t v5 = *(atomic_uint **)(a3 + 8);
  uint64_t v12 = &off_100998428;
  unint64_t v13 = v5;
  if (v5) {
    sub_100037354((uint64_t)v5);
  }
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_1006E6974;
  v7[3] = &unk_1009BF400;
  uint64_t v8 = &off_100998428;
  uint64_t v9 = v15;
  if (v15) {
    sub_100037354((uint64_t)v15);
  }
  uint64_t v10 = &off_100998428;
  unsigned __int8 v11 = v13;
  if (v13) {
    sub_100037354((uint64_t)v13);
  }
  sub_100013018(v6, v7);
  uint64_t v10 = &off_100998428;
  if (v11) {
    sub_1000368F4(v11);
  }
  uint64_t v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  uint64_t v12 = &off_100998428;
  if (v13) {
    sub_1000368F4(v13);
  }
  dispatch_time_t v14 = &off_100998428;
  if (v15) {
    sub_1000368F4(v15);
  }
}

void sub_1006E6910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, atomic_uint *a14, uint64_t a15, uint64_t a16, uint64_t a17, atomic_uint *a18)
{
  if (a14) {
    sub_1000368F4(a14);
  }
  if (a18) {
    sub_1000368F4(a18);
  }
  *(void *)(v19 - 64) = v18;
  __int16 v21 = *(atomic_uint **)(v19 - 56);
  if (v21) {
    sub_1000368F4(v21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006E6974(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BF768);
  }
  uint64_t v2 = off_1009F85C0;

  sub_1006E5C50((uint64_t)v2, a1 + 32, a1 + 48);
}

void sub_1006E69DC(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  a1[4] = &off_100998428;
  a1[5] = v4;
  if (v4) {
    sub_100037354(v4);
  }
  uint64_t v5 = *(void *)(a2 + 56);
  a1[6] = &off_100998428;
  a1[7] = v5;
  if (v5) {
    sub_100037354(v5);
  }
}

void sub_1006E6A64(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 32) = v2;
  uint64_t v4 = *(atomic_uint **)(v1 + 40);
  if (v4) {
    sub_1000368F4(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006E6A80(void *a1)
{
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }
  a1[4] = &off_100998428;
  uint64_t v3 = (atomic_uint *)a1[5];
  if (v3)
  {
    sub_1000368F4(v3);
  }
}

void sub_1006E6B14()
{
  uint64_t v0 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Stream state changed, re-evaluating scan params", v2, 2u);
  }
  uint64_t v1 = sub_100019878();
  sub_100013018(v1, &stru_1009BF430);
}

void sub_1006E6B8C(id a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BF768);
  }
  uint64_t v1 = off_1009F85C0;

  sub_100055B50((uint64_t)v1, 0);
}

void sub_1006E6BE4()
{
}

void sub_1006E6BEC(uint64_t a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "scanRxConfigured", buf, 2u);
  }
  uint64_t v3 = sub_100019878();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1006E6CAC;
  v4[3] = &unk_100997528;
  void v4[4] = a1;
  sub_100013018(v3, v4);
}

uint64_t sub_1006E6CAC(uint64_t a1)
{
  return sub_100055B50(*(void *)(a1 + 32), 0);
}

void sub_1006E6CB8(uint64_t a1)
{
}

void sub_1006E6CC0()
{
  uint64_t v0 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "BT ACL protect mode changed, re-evaluating scan params", v2, 2u);
  }
  uint64_t v1 = sub_100019878();
  sub_100013018(v1, &stru_1009BF450);
}

void sub_1006E6D38(id a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BF768);
  }
  uint64_t v1 = off_1009F85C0;

  sub_100055B50((uint64_t)v1, 0);
}

void sub_1006E6D90()
{
}

void sub_1006E6D98(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v9 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDP Progress Changed inProgress=%d", buf, 8u);
  }
  uint64_t v5 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1006E6EA0;
  uint64_t v6[3] = &unk_100998A58;
  void v6[4] = a1;
  char v7 = a2;
  sub_100013018(v5, v6);
}

uint64_t sub_1006E6EA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 4384) = *(unsigned char *)(a1 + 40);
  return sub_100055B50(v1, 0);
}

void sub_1006E6EBC(uint64_t a1, int a2)
{
}

void sub_1006E6EC4(uint64_t a1, unint64_t a2, uint64_t a3, char a4, char a5)
{
  *((void *)&v9 + 1) = a3;
  *(void *)&long long v9 = bswap64(a2);
  unint64_t v8 = v9 >> 16;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BF828);
  }
  *(void *)uuid_t uu = 0;
  uint64_t v19 = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, v8, 0, 1u, 0, 0, uu);
  if (uuid_is_null(uu))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100795D78();
    }
  }
  else
  {
    uint64_t v10 = sub_100031234(uu);
    uint64_t v11 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_1006E707C;
    v13[3] = &unk_1009AA5D8;
    uint64_t v15 = a1;
    id v12 = v10;
    id v14 = v12;
    char v16 = a4;
    char v17 = a5;
    sub_100013018(v11, v13);
  }
}

void sub_1006E7054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006E707C(uint64_t a1)
{
  uint64_t v2 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 1872);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006E712C;
  v3[3] = &unk_1009BF478;
  id v4 = *(id *)(a1 + 32);
  __int16 v5 = *(_WORD *)(a1 + 48);
  sub_100048744(v2, v3);
}

void sub_1006E7118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006E712C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 40))(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40), *(unsigned __int8 *)(a1 + 41));
}

void sub_1006E7164(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
}

uint64_t sub_1006E7170(uint64_t a1, unsigned __int16 *a2)
{
  unsigned __int16 v23 = 0;
  uint64_t v4 = sub_1006E741C(a1, 18, 20, &v23);
  uint64_t v5 = v23;
  *a2 = v23;
  if (v4)
  {
    uint64_t v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_1007952C4();
    }
  }
  else
  {
    char v7 = (uint64_t **)(a1 + 1816);
    unsigned __int8 v22 = v5;
    *(void *)long long buf = &v22;
    unint64_t v8 = sub_1006F620C(v7, &v22, (uint64_t)&unk_1007BE9D0, (char **)buf);
    char v9 = *((unsigned char *)v8 + 29);
    __int16 v10 = *((_WORD *)v8 + 15);
    __int16 v11 = *((_WORD *)v8 + 17);
    __int16 v12 = *((_WORD *)v8 + 19);
    unint64_t v13 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v5;
      __int16 v25 = 1024;
      int v26 = 18;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Creating a match table with handle %d for type %d", buf, 0xEu);
    }
    uint64_t v14 = sub_10003FB34();
    char v21 = 0;
    char v20 = 0;
    int v19 = 0;
    char v18 = 0;
    uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void, uint64_t, char, void, char, void, void, char))(*(void *)v14 + 2824))(v14, v5, 23, 255, 76, 18, 0, 20, v18, 0, v20, 0, 0, v21);
    if (!v6)
    {
      unsigned __int8 v22 = v10;
      *(void *)long long buf = &v22;
      uint64_t v15 = sub_1006F620C(v7, &v22, (uint64_t)&unk_1007BE9D0, (char **)buf);
      *((unsigned char *)v15 + 28) = 18;
      *((unsigned char *)v15 + 29) = v9;
      *((_WORD *)v15 + 15) = v10;
      *((_WORD *)v15 + 16) = 1;
      *((_WORD *)v15 + 17) = v11;
      *((_WORD *)v15 + 18) = 20;
      *((_WORD *)v15 + 19) = v12;
      *a2 = v5;
      uint64_t v16 = *(void *)sub_10003FB34();
      uint64_t v6 = (*(uint64_t (**)(void))(v16 + 2880))();
      if (v6)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100795E68();
        }
      }
    }
  }
  return v6;
}

uint64_t sub_1006E741C(uint64_t a1, int a2, int a3, _WORD *a4)
{
  *a4 = 0;
  uint64_t v4 = *(void **)(a1 + 1816);
  uint64_t v5 = (void *)(a1 + 1824);
  if (v4 == (void *)(a1 + 1824))
  {
    char v7 = 0;
LABEL_40:
    int v21 = 0;
LABEL_41:
    unsigned __int8 v22 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109120;
      int v45 = v21;
      _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "MATCH TABLE nextHandle:%d", buf, 8u);
      if (!*a4) {
        return 4;
      }
    }
    else if (!v21)
    {
      return 4;
    }
    if (v7 != 5) {
      return 0;
    }
    unsigned __int16 v23 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_100795ED0(v23, v24, v25, v26, v27, v28, v29, v30);
    }
    return 4;
  }
  char v7 = 0;
  unint64_t v8 = *(void **)(a1 + 1816);
  do
  {
    if (*((_WORD *)v8 + 16)) {
      ++v7;
    }
    char v9 = (void *)v8[1];
    if (v9)
    {
      do
      {
        __int16 v10 = v9;
        char v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        __int16 v10 = (void *)v8[2];
        BOOL v16 = *v10 == (void)v8;
        unint64_t v8 = v10;
      }
      while (!v16);
    }
    unint64_t v8 = v10;
  }
  while (v10 != v5);
  if (v4 == v5) {
    goto LABEL_40;
  }
  while (1)
  {
    int v11 = *((unsigned __int8 *)v4 + 28);
    int v12 = *((unsigned __int16 *)v4 + 15);
    int v13 = *((unsigned __int16 *)v4 + 16);
    int v14 = *((unsigned __int16 *)v4 + 18);
    uint64_t v15 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
      break;
    }
    if (!v13) {
      goto LABEL_24;
    }
LABEL_14:
    BOOL v16 = v11 == 255 || v14 == 0;
    if (v16 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT)) {
      sub_1007960A4(&v40, v41);
    }
    if (v11 == a2)
    {
      long long v32 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)long long buf = 67109632;
        int v45 = a2;
        __int16 v46 = 1024;
        int v47 = v12;
        __int16 v48 = 1024;
        int v49 = v14;
        _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "MATCH TABLE table for type:%d is already created with handle %d and size:%d", buf, 0x14u);
      }
      *a4 = v12;
      return 15;
    }
LABEL_32:
    int v19 = (void *)v4[1];
    if (v19)
    {
      do
      {
        char v20 = v19;
        int v19 = (void *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        char v20 = (void *)v4[2];
        BOOL v16 = *v20 == (void)v4;
        uint64_t v4 = v20;
      }
      while (!v16);
    }
    uint64_t v4 = v20;
    if (v20 == v5)
    {
      int v21 = (unsigned __int16)*a4;
      goto LABEL_41;
    }
  }
  int v17 = *((unsigned __int16 *)v4 + 17);
  *(_DWORD *)long long buf = 67110144;
  int v45 = v12;
  __int16 v46 = 1024;
  int v47 = v11;
  __int16 v48 = 1024;
  int v49 = v14;
  __int16 v50 = 1024;
  BOOL v51 = v13 != 0;
  __int16 v52 = 1024;
  BOOL v53 = v17 != 0;
  _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "MATCH TABLE handle:%d type:%d length:%d isCreated:%d isEnabled:%d", buf, 0x20u);
  if (v13) {
    goto LABEL_14;
  }
LABEL_24:
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_10079606C(&v38, v39);
  }
  if (v11 != a2)
  {
    if (v11 == 255 && !*a4)
    {
      char v18 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
        sub_100796024(v42, v43, v18);
      }
      *a4 = v12;
    }
    goto LABEL_32;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_100795FBC();
  }
  long long v34 = qword_100A19E90;
  BOOL v35 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG);
  if (v14 != a3)
  {
    if (v35)
    {
      *(_DWORD *)long long buf = 67109632;
      int v45 = a2;
      __int16 v46 = 1024;
      int v47 = v12;
      __int16 v48 = 1024;
      int v49 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEBUG, "MATCH TABLE so close! table for type:%d is already registered with handle %d and size:%d", buf, 0x14u);
    }
    *a4 = 0;
    return 15;
  }
  if (v35) {
    sub_100795F44();
  }
  uint64_t result = 0;
  *a4 = v12;
  return result;
}

double *sub_1006E7894(double *result, int a2, int a3)
{
  if (a2 == 22)
  {
    uint64_t v12[3] = v3;
    _OWORD v12[4] = v4;
    uint64_t v5 = result;
    double v6 = result[232];
    if (a3)
    {
      if (v6 == 0.0)
      {
        uint64_t result = (double *)+[NSDate timeIntervalSinceReferenceDate];
        *((void *)v5 + 232) = v7;
      }
    }
    else if (v6 > 0.0)
    {
      v12[0] = 0;
      if (qword_1009F85E8 != -1) {
        dispatch_once(&qword_1009F85E8, &stru_1009BF808);
      }
      sub_1003C5B78(qword_1009F85E0, 0x16u, (_DWORD *)v12 + 1, v12);
      uint64_t v8 = sub_100050530();
      v9.n128_f64[0] = v5[232];
      v10.n128_u32[0] = HIDWORD(v12[0]);
      v11.n128_u32[0] = v12[0];
      uint64_t result = (double *)(*(uint64_t (**)(__n128, __n128, __n128))(*(void *)v8 + 448))(v9, v10, v11);
      v5[232] = 0.0;
    }
  }
  return result;
}

void sub_1006E797C(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v5, "MatchTable");
  sub_10004191C(__p, "ADPDBufferDupNumEntries");
  (*(void (**)(uint64_t, void **, void **, int *))(*(void *)v1 + 128))(v1, v5, __p, &dword_1009FBF00);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v2 = sub_100017768();
  sub_10004191C(v5, "MatchTable");
  sub_10004191C(__p, "ADPDBufferDupClearTimeoutSeconds");
  (*(void (**)(uint64_t, void **, void **, int *))(*(void *)v2 + 128))(v2, v5, __p, &dword_1009FBF04);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
}

void sub_1006E7AA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006E7ADC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(v1 + 144);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "fAOPBTBufferPeriodicDrainTimer Timer expired! screenState:%d", (uint8_t *)v4, 8u);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 1808));
  dispatch_release(*(dispatch_object_t *)(v1 + 1808));
  *(void *)(v1 + 1808) = 0;
  sub_1006DCB10(v1, 2);
}

void sub_1006E7BA4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(v1 + 144);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "fADVBufferPeriodicDrainTimer Timer expired! screenState:%d", (uint8_t *)v4, 8u);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 1800));
  dispatch_release(*(dispatch_object_t *)(v1 + 1800));
  *(void *)(v1 + 1800) = 0;
  if (!*(unsigned char *)(v1 + 144)) {
    sub_1006DBEA4(v1, 3);
  }
}

void sub_1006E7C74(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v4, "ADVBUFF");
  sub_10004191C(__p, "TestRemoevAndClearOnBufferDestroy");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A14778);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1006E7D18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

id sub_1006E7D4C(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  id v6 = [v4 mutableCopy];
  uint64_t v7 = [v4 objectForKeyedSubscript:@"bypassFilterDuplicate"];
  unsigned __int8 v8 = [v7 unsignedIntValue];

  __n128 v9 = [v5 objectForKeyedSubscript:@"bypassFilterDuplicate"];
  LOBYTE(v7) = [v9 unsignedIntValue];

  __n128 v10 = [v4 objectForKeyedSubscript:@"rssi"];
  unsigned int v11 = [v10 intValue];

  int v12 = [v5 objectForKeyedSubscript:@"rssi"];
  unsigned int v13 = [v12 intValue];

  BOOL v14 = (v8 | v7) != 0;
  if ((int)(v11 << 24) >= (int)(v13 << 24)) {
    unsigned __int8 v15 = v13;
  }
  else {
    unsigned __int8 v15 = v11;
  }
  BOOL v16 = +[NSNumber numberWithUnsignedChar:v14];
  [v6 setObject:v16 forKeyedSubscript:@"bypassFilterDuplicate"];

  int v17 = +[NSNumber numberWithChar:v15];
  [v6 setObject:v17 forKeyedSubscript:@"rssi"];

  char v18 = [v4 objectForKeyedSubscript:@"mask"];
  uint64_t v19 = [v5 objectForKeyedSubscript:@"mask"];
  char v20 = (void *)v19;
  memset(v27, 0, sizeof(v27));
  char v28 = 0;
  if (v18)
  {
    if (v19)
    {
      id v21 = [v18 length];
      if (v21 == [v20 length] && objc_msgSend(v18, "length") && objc_msgSend(v20, "length"))
      {
        unsigned __int8 v22 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v27, [v18 length]);
        if ([v18 isEqual:v22])
        {
        }
        else
        {
          unsigned __int16 v23 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v27, [v20 length]);
          unsigned int v24 = [v20 isEqual:v23];

          if (!v24) {
            goto LABEL_13;
          }
        }
      }
    }
  }
  [v6 setObject:0 forKeyedSubscript:@"mask"];
  [v6 setObject:0 forKeyedSubscript:@"data"];
LABEL_13:
  id v25 = [v6 copy];

  return v25;
}

void sub_1006E8028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006E80C4(uint64_t a1, void *a2)
{
  id v2 = a2;
  char v3 = [v2 objectForKeyedSubscript:@"data"];
  unsigned __int16 v4 = (unsigned __int16)[v3 length];

  id v5 = [v2 objectForKeyedSubscript:@"mask"];
  unsigned __int16 v6 = (unsigned __int16)[v5 length];

  uint64_t v7 = sub_10003FB34();
  int v8 = v4;
  if (v4 <= (*(unsigned int (**)(uint64_t))(*(void *)v7 + 3528))(v7)
    && (uint64_t v9 = sub_10003FB34(), v6 <= (*(unsigned int (**)(uint64_t))(*(void *)v9 + 3528))(v9)))
  {
    uint64_t v11 = 1;
  }
  else
  {
    __n128 v10 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
    {
      unsigned int v13 = [v2 objectForKeyedSubscript:@"puckType"];
      v14[0] = 67109890;
      v14[1] = v8;
      __int16 v15 = 1024;
      int v16 = v6;
      __int16 v17 = 2112;
      char v18 = v13;
      __int16 v19 = 2112;
      id v20 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "The blobLen(%d) and maskLen(%d) are not support for this rule type %@, %@ ", (uint8_t *)v14, 0x22u);
    }
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_1006E8290(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006E82C0(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int16 v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    int v5 = *(unsigned __int8 *)(a1 + 144);
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "addUniqueUUIDRulesToDictionary %@ fScreenState:%d", buf, 0x12u);
  }
  if (*(unsigned char *)(a1 + 144))
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x3032000000;
    uint64_t v30 = sub_1006E865C;
    BOOL v31 = sub_1006E866C;
    id v32 = 0;
    unsigned __int16 v6 = *(void **)(a1 + 4360);
    __int16 v19 = _NSConcreteStackBlock;
    uint64_t v20 = 3221225472;
    id v21 = sub_1006E8674;
    unsigned __int8 v22 = &unk_1009BF4E0;
    id v7 = v3;
    id v23 = v7;
    unsigned int v24 = buf;
    [v6 enumerateObjectsUsingBlock:&v19];
    id v8 = [v7 mutableCopy:v19, v20, v21, v22];
    if (*(void *)(*(void *)&buf[8] + 40))
    {
      [*(id *)(a1 + 4360) removeObject:];
      uint64_t v9 = objc_opt_new();
      [v8 setObject:v9 forKeyedSubscript:@"data"];

      __n128 v10 = objc_opt_new();
      [v8 setObject:v10 forKeyedSubscript:@"mask"];

      uint64_t v11 = [*(id *)(*(void *)&buf[8] + 40) objectForKeyedSubscript:@"rssi"];
      signed __int8 v12 = [v11 intValue];
      unsigned int v13 = [v7 objectForKeyedSubscript:@"rssi"];
      signed __int8 v14 = [v13 intValue];
      if (v14 >= v12) {
        unsigned __int8 v15 = v12;
      }
      else {
        unsigned __int8 v15 = v14;
      }
      int v16 = +[NSNumber numberWithChar:v15];
      [v8 setObject:v16 forKeyedSubscript:@"rssi"];

      __int16 v17 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        uint64_t v18 = *(void *)(*(void *)&buf[8] + 40);
        *(_DWORD *)id v25 = 138412546;
        uint64_t v26 = v18;
        __int16 v27 = 2112;
        id v28 = v8;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "addUniqueUUIDRulesToDictionary removing [%@] and replacing with [%@]", v25, 0x16u);
      }
    }
    [*(id *)(a1 + 4360) addObject:v8];

    _Block_object_dispose(buf, 8);
  }
  else
  {
    [*(id *)(a1 + 4360) addObject:v3];
  }
}

void sub_1006E85CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006E865C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_1006E866C(uint64_t a1)
{
}

void sub_1006E8674(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v7 = a2;
  id v8 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"uuid"];
  uint64_t v9 = [v7 objectForKeyedSubscript:@"uuid"];
  unsigned int v10 = [v8 isEqual:v9];

  if (v10)
  {
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), a2);
    *a4 = 1;
    uint64_t v11 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      uint64_t v12 = *(void *)(a1 + 32);
      uint64_t v13 = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      int v14 = 138412546;
      uint64_t v15 = v13;
      __int16 v16 = 2112;
      uint64_t v17 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "addUniqueUUIDRulesToDictionary found existing rule [%@] with same uuid as new rule [%@]", (uint8_t *)&v14, 0x16u);
    }
  }
}

void sub_1006E87C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006E87F4(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v68 = +[NSMutableArray array];
  if (sub_1006E80C4((uint64_t)v68, v2))
  {
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    id obj = *(id *)(a1 + 4352);
    id v3 = [obj countByEnumeratingWithState:&v76 objects:v90 count:16];
    if (v3)
    {
      uint64_t v70 = *(void *)v77;
      *(void *)&long long v4 = 67109632;
      long long v62 = v4;
      do
      {
        id v71 = v3;
        for (uint64_t i = 0; i != v71; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v77 != v70) {
            objc_enumerationMutation(obj);
          }
          unsigned __int16 v6 = *(void **)(*((void *)&v76 + 1) + 8 * i);
          id v7 = [v6 objectForKeyedSubscript:@"puckType" v62];
          id v8 = [v2 objectForKeyedSubscript:@"puckType"];
          unsigned int v9 = [v7 isEqual:v8];

          if (!v9) {
            continue;
          }
          unsigned int v10 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
          {
            uint64_t v11 = [v6 objectForKeyedSubscript:@"puckType"];
            uint64_t v12 = [v2 objectForKeyedSubscript:@"shouldConsolidateRule"];
            unsigned int v13 = [v12 BOOLValue];
            *(_DWORD *)long long buf = 138413058;
            *(void *)&uint8_t buf[4] = v11;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v13;
            *(_WORD *)&unsigned char buf[18] = 2112;
            *(void *)&unsigned char buf[20] = v6;
            *(_WORD *)&buf[28] = 2112;
            *(void *)&buf[30] = v2;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Already have this rule for type %@ consolidate %d %@ new rule %@.", buf, 0x26u);
          }
          int v14 = [v6 objectForKeyedSubscript:@"bypassFilterDuplicate"];
          uint64_t v15 = [v2 objectForKeyedSubscript:@"bypassFilterDuplicate"];
          if (([v14 isEqualToNumber:v15] & 1) == 0)
          {

LABEL_14:
            __int16 v19 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
            {
              uint64_t v20 = [v6 objectForKeyedSubscript:@"puckType"];
              id v21 = [v6 objectForKeyedSubscript:@"bypassFilterDuplicate"];
              unsigned __int8 v22 = [v6 objectForKeyedSubscript:@"rssi"];
              id v23 = [v2 objectForKeyedSubscript:@"bypassFilterDuplicate"];
              unsigned int v24 = [v2 objectForKeyedSubscript:@"rssi"];
              *(_DWORD *)long long buf = 138413314;
              *(void *)&uint8_t buf[4] = v20;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&unsigned char buf[14] = v21;
              *(_WORD *)&unsigned char buf[22] = 2112;
              *(void *)&unsigned char buf[24] = v22;
              *(_WORD *)&uint8_t buf[32] = 2112;
              *(void *)&unsigned char buf[34] = v23;
              __int16 v88 = 2112;
              int v89 = v24;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_INFO, "Consolidate rules type %@ old bypassFilterDuplicate %@ rssi %@ new bypassFilterDuplicate %@ rssi %@", buf, 0x34u);
            }
            goto LABEL_16;
          }
          __int16 v16 = [v6 objectForKeyedSubscript:@"rssi"];
          uint64_t v17 = [v2 objectForKeyedSubscript:@"rssi"];
          unsigned __int8 v18 = [v16 isEqualToNumber:v17];

          if ((v18 & 1) == 0) {
            goto LABEL_14;
          }
LABEL_16:
          id v25 = [v2 objectForKeyedSubscript:@"shouldConsolidateRule"];
          if (v25)
          {
            uint64_t v26 = [v2 objectForKeyedSubscript:@"shouldConsolidateRule"];
            unsigned int v27 = [v26 BOOLValue];

            int v28 = v27 ^ 1;
          }
          else
          {
            int v28 = 0;
          }

          uint64_t v29 = [v6 objectForKeyedSubscript:@"shouldConsolidateRule"];
          if (v29)
          {
            uint64_t v30 = [v6 objectForKeyedSubscript:@"shouldConsolidateRule"];
            unsigned int v31 = [v30 BOOLValue];

            int v32 = v31 ^ 1;
          }
          else
          {
            int v32 = 0;
          }

          if ((v28 | v32) != 1) {
            goto LABEL_35;
          }
          int v33 = [v2 objectForKeyedSubscript:@"data"];
          uint64_t v34 = [v6 objectForKeyedSubscript:@"data"];
          BOOL v35 = (void *)v34;
          if (!v33 || !v34) {
            goto LABEL_34;
          }
          memset(buf, 0, 25);
          uint64_t v67 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, [v33 length]);
          id v36 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", buf, [v35 length]);
          if (([v35 isEqualToData:v36] & 1) != 0
            || ([v33 isEqualToData:v67] & 1) != 0
            || ([v35 isEqualToData:v33] & 1) != 0)
          {
            if (([v35 isEqualToData:v33] & 1) != 0
              || ([v6 objectForKeyedSubscript:@"matchAllDevices"],
                  id v37 = objc_claimAutoreleasedReturnValue(),
                  [v2 objectForKeyedSubscript:@"matchAllDevices"],
                  char v38 = objc_claimAutoreleasedReturnValue(),
                  unsigned __int8 v39 = [v37 isEqualToNumber:v38],
                  v38,
                  v37,
                  (v39 & 1) != 0))
            {
              char v40 = [v6 objectForKeyedSubscript:@"rssi"];
              int v41 = [v2 objectForKeyedSubscript:@"rssi"];
              unsigned __int8 v42 = [v40 isEqualToNumber:v41];

              uint64_t v43 = qword_100A19E90;
              if (v42)
              {
                if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v65 = [v2 objectForKeyedSubscript:@"puckType"];
                  unsigned int v64 = [v65 intValue];
                  __int16 v52 = [v2 objectForKeyedSubscript:@"rssi"];
                  unsigned int v63 = [v52 intValue];
                  BOOL v53 = [v2 objectForKeyedSubscript:@"shouldConsolidateRule"];
                  unsigned int v54 = [v53 intValue];
                  *(_DWORD *)uint64_t v81 = v62;
                  unsigned int v82 = v64;
                  __int16 v83 = 1024;
                  unsigned int v84 = v63;
                  __int16 v85 = 1024;
                  unsigned int v86 = v54;
                  _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "New rule for type %d rssi:%d shouldConsolidate:%d is the same - consolidating", v81, 0x14u);
                }
LABEL_34:

LABEL_35:
                [v68 addObject:v6];
                continue;
              }
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
              {
                long long v44 = [v2 objectForKeyedSubscript:@"puckType"];
                unsigned int v45 = [v44 intValue];
                *(_DWORD *)uint64_t v81 = 67109120;
                unsigned int v82 = v45;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "rssi is different for type %d - ignore consolidating", v81, 8u);
              }
            }
            else
            {
              __int16 v46 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
              {
                int v47 = [v2 objectForKeyedSubscript:@"puckType"];
                unsigned int v48 = [v47 intValue];
                *(_DWORD *)uint64_t v81 = 67109120;
                unsigned int v82 = v48;
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "device filer is different for type %d - ignore consolidating", v81, 8u);
              }
            }
          }
          else
          {
            int v49 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
            {
              __int16 v50 = [v2 objectForKeyedSubscript:@"puckType"];
              unsigned int v51 = [v50 intValue];
              *(_DWORD *)uint64_t v81 = 67109120;
              unsigned int v82 = v51;
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "non-zero data is different for type %d - ignore consolidating", v81, 8u);
            }
          }
        }
        id v3 = [obj countByEnumeratingWithState:&v76 objects:v90 count:16];
      }
      while (v3);
    }

    if ([v68 count])
    {
      id v55 = [v2 copy];
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      id v56 = v68;
      id v57 = [v56 countByEnumeratingWithState:&v72 objects:v80 count:16];
      id v58 = v57;
      if (v57)
      {
        uint64_t v59 = *(void *)v73;
        do
        {
          uint64_t v60 = 0;
          int v61 = v55;
          do
          {
            if (*(void *)v73 != v59) {
              objc_enumerationMutation(v56);
            }
            sub_1006E7D4C((uint64_t)v57, *(void **)(*((void *)&v72 + 1) + 8 * (void)v60), v61);
            id v55 = (id)objc_claimAutoreleasedReturnValue();

            uint64_t v60 = (char *)v60 + 1;
            int v61 = v55;
          }
          while (v58 != v60);
          id v57 = [v56 countByEnumeratingWithState:&v72 objects:v80 count:16];
          id v58 = v57;
        }
        while (v57);
      }

      [*(id *)(a1 + 4352) removeObjectsInArray:v56];
      [*(id *)(a1 + 4352) addObject:v55];
    }
    else
    {
      [*(id *)(a1 + 4352) addObject:v2];
    }
  }
}

void sub_1006E915C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006E9360(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 592))(v2))
  {
    id v3 = *(void **)(a1 + 2040);
    if (v3 != (void *)(a1 + 2048))
    {
      char v4 = 0;
      while (1)
      {
        if (sub_10003FB78(v3[5]) && !sub_10003AE20(v3[5]))
        {
          uint64_t v5 = v3[5];
          if (!*(unsigned char *)(*(void *)(v5 + 8) + 143) || !*(unsigned char *)(a1 + 1255)) {
            break;
          }
        }
LABEL_16:
        id v8 = (void *)v3[1];
        if (v8)
        {
          do
          {
            unsigned int v9 = v8;
            id v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            unsigned int v9 = (void *)v3[2];
            BOOL v10 = *v9 == (void)v3;
            id v3 = v9;
          }
          while (!v10);
        }
        id v3 = v9;
        if (v9 == (void *)(a1 + 2048)) {
          goto LABEL_25;
        }
      }
      int v6 = *(unsigned __int8 *)(v5 + 81);
      if (v6 != 16 && v6 != 32)
      {
        if (!sub_100049724(v5))
        {
LABEL_14:
          if (*(unsigned char *)(*(void *)(v3[5] + 8) + 272)) {
            char v4 = 1;
          }
          goto LABEL_16;
        }
        uint64_t v5 = v3[5];
      }
      id v7 = (void *)sub_1006F78F0(v5);
      if (v7[1] != *v7 && (sub_10003AE34(v3[5]) & 1) != 0) {
        goto LABEL_24;
      }
      goto LABEL_14;
    }
LABEL_24:
    char v4 = 0;
LABEL_25:
    uint64_t v11 = v4 & 1;
  }
  else
  {
    uint64_t v11 = 0;
  }
  uint64_t v12 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    v14[0] = 67109120;
    v14[1] = v11;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "overrideEnableGlobalDupFilter:%d", (uint8_t *)v14, 8u);
  }
  return v11;
}

void sub_1006E9524(uint64_t a1)
{
  int v142 = (unsigned char *)(a1 + 4296);
  int v143 = *(unsigned __int8 *)(a1 + 4382);
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_100796494();
  }
  if (v142[85])
  {
    uint64_t v1 = sub_10003FB34();
    (*(void (**)(uint64_t))(*(void *)v1 + 624))(v1);
    uint64_t v2 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 408))(v2, 1);
    uint64_t v3 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 400))(v3, 1);
    uint64_t v4 = sub_10003FB34();
    (*(void (**)(uint64_t))(*(void *)v4 + 640))(v4);
    uint64_t v5 = sub_10003FB34();
    (*(void (**)(uint64_t))(*(void *)v5 + 784))(v5);
  }
  sub_1006D4FDC(a1);
  *int v142 = 1;
  uint64_t v195 = 0;
  int v194 = 0;
  __int16 v193 = (uint64_t *)&v194;
  unint64_t v192 = 0;
  __int16 v191 = 0;
  int v190 = (uint64_t *)&v191;
  int v6 = *(void **)(a1 + 2040);
  int v160 = (void *)(a1 + 2048);
  if (v6 == (void *)(a1 + 2048)) {
    goto LABEL_233;
  }
  do
  {
    uint64_t v7 = v6[5];
    memset(__dst, 0, 24);
    uint64_t v157 = v7;
    sub_1000A9504(__dst, *(void *)(*(void *)(v7 + 8) + 64), *(void *)(*(void *)(v7 + 8) + 72), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(*(void *)(v7 + 8) + 72) - *(void *)(*(void *)(v7 + 8) + 64)) >> 5));
    uint64_t v8 = *(void *)__dst;
    if (*(void *)__dst == *(void *)&__dst[8])
    {
      LOBYTE(v11) = 0;
    }
    else
    {
      do
      {
        id v9 = *(id *)(v8 + 56);
        long long v186 = 0u;
        long long v187 = 0u;
        long long v188 = 0u;
        long long v189 = 0u;
        id v10 = v9;
        id v11 = [v10 countByEnumeratingWithState:&v186 objects:v213 count:16];
        if (v11)
        {
          uint64_t v12 = *(void *)v187;
          while (2)
          {
            unsigned int v13 = 0;
            do
            {
              if (*(void *)v187 != v12) {
                objc_enumerationMutation(v10);
              }
              int v14 = *(void **)(*((void *)&v186 + 1) + 8 * (void)v13);
              *(void *)std::string __p = 0;
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BF828);
              }
              *(void *)std::string __p = sub_100030DCC((uint64_t)off_1009F7ED8, v14, 0);
              if (*(void *)__p)
              {
                sub_100051620(&v190, (unint64_t *)__p, (uint64_t *)__p);
                if (v192 >= 0x1F)
                {
                  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
                    sub_100796468(&v184, v185);
                  }
                  LOBYTE(v11) = 1;
                  goto LABEL_25;
                }
              }
              else
              {
                uint64_t v15 = qword_100A19E90;
                if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
                {
                  *(_WORD *)long long buf = 0;
                  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "Tried to add device to matching list that was not present", buf, 2u);
                }
              }
              unsigned int v13 = (char *)v13 + 1;
            }
            while (v11 != v13);
            id v11 = [v10 countByEnumeratingWithState:&v186 objects:v213 count:16];
            if (v11) {
              continue;
            }
            break;
          }
        }
LABEL_25:

        v8 += 96;
        if (v8 == *(void *)&__dst[8]) {
          char v17 = 1;
        }
        else {
          char v17 = (char)v11;
        }
      }
      while ((v17 & 1) == 0);
    }
    unsigned __int8 v18 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
    {
      id v23 = sub_1006F6F00((void *)(*(void *)(v157 + 8) + 208));
      sub_10003AE4C(v6[4], (uint64_t)__p);
      unsigned int v24 = __p;
      if (v211 < 0) {
        unsigned int v24 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 134218242;
      *(void *)&uint8_t buf[4] = v23;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&unsigned char buf[14] = v24;
      _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "bypassFilterDuplicateTable 0x%0256llx  %{public}s", buf, 0x16u);
      if (v211 < 0) {
        operator delete(*(void **)__p);
      }
    }
    *(void *)std::string __p = __dst;
    sub_1000A8BDC((void ***)__p);
    __int16 v19 = (void *)v6[1];
    if (v19)
    {
      do
      {
        uint64_t v20 = v19;
        __int16 v19 = (void *)*v19;
      }
      while (v19);
    }
    else
    {
      do
      {
        uint64_t v20 = (void *)v6[2];
        BOOL v21 = *v20 == (void)v6;
        int v6 = v20;
      }
      while (!v21);
    }
    if (v20 == v160) {
      char v22 = 1;
    }
    else {
      char v22 = (char)v11;
    }
    int v6 = v20;
  }
  while ((v22 & 1) == 0);
  if ((v11 & 1) == 0)
  {
LABEL_233:
    if (!v143 || v142[85])
    {
      id v25 = v190;
      if (v190 != (uint64_t *)&v191)
      {
        do
        {
          uint64_t v26 = sub_10003FB34();
          (*(void (**)(uint64_t, uint64_t))(*(void *)v26 + 768))(v26, v25[4]);
          unsigned int v27 = (uint64_t *)v25[1];
          if (v27)
          {
            do
            {
              int v28 = v27;
              unsigned int v27 = (uint64_t *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              int v28 = (uint64_t *)v25[2];
              BOOL v21 = *v28 == (void)v25;
              id v25 = v28;
            }
            while (!v21);
          }
          id v25 = v28;
        }
        while (v28 != (uint64_t *)&v191);
      }
    }
    if ((uint64_t **)(a1 + 4304) != &v190) {
      sub_1006F7070((uint64_t **)(a1 + 4304), v190, &v191);
    }
    int v158 = 0;
  }
  else
  {
    int v158 = 1;
  }
  uint64_t v29 = *(void **)(a1 + 2040);
  if (v29 != v160)
  {
    do
    {
      uint64_t v30 = v29[5];
      if (!sub_10003FB78(v30)) {
        goto LABEL_160;
      }
      unsigned int v31 = *(unsigned __int8 *)(v30 + 81);
      if (v31 > 0x20) {
        goto LABEL_160;
      }
      if (((1 << v31) & 0x114) != 0)
      {
        if (!sub_100049724(v30)) {
          goto LABEL_160;
        }
        if (!*(unsigned char *)(v30 + 224)) {
          goto LABEL_160;
        }
        int v32 = (uint64_t *)sub_1006F78F0(v30);
        uint64_t v33 = *v32;
        uint64_t v34 = v32[1];
        if (*v32 == v34) {
          goto LABEL_160;
        }
        unsigned __int16 v35 = 0;
        while (1)
        {
          uint64_t v36 = *(void *)(v30 + 8);
          if (*(unsigned char *)(v36 + 143) && !*(void *)(a1 + 2344))
          {
            unsigned int v45 = qword_100A19FB0;
            if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
            {
              sub_1000417A8(v33, __dst);
              __int16 v46 = __dst;
              if ((__dst[23] & 0x80u) != 0) {
                __int16 v46 = *(uint8_t **)__dst;
              }
              *(_DWORD *)std::string __p = 136446210;
              *(void *)&__p[4] = v46;
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "skipping adding %{public}s to filters", __p, 0xCu);
              if ((char)__dst[23] < 0) {
                operator delete(*(void **)__dst);
              }
            }
          }
          else
          {
            if (*(unsigned __int8 *)(v36 + 203) < ++v35)
            {
              long long v62 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
              {
                sub_10003AE4C(v29[4], (uint64_t)__p);
                int v63 = v211;
                unsigned int v64 = *(unsigned char **)__p;
                uint64_t v65 = (void *)sub_1006F78F0(v30);
                uint64_t v66 = __p;
                if (v63 < 0) {
                  uint64_t v66 = v64;
                }
                uint64_t v67 = (uint64_t)(v65[1] - *v65) >> 2;
                *(_DWORD *)long long __dst = 136446722;
                *(void *)&__dst[4] = v66;
                *(_WORD *)&__dst[12] = 1024;
                *(_DWORD *)&__dst[14] = v35;
                *(_WORD *)&__dst[18] = 2048;
                *(void *)&__dst[20] = 0xCCCCCCCCCCCCCCCDLL * v67;
                _os_log_error_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_ERROR, "\"%{public}s\" asked to scan for more than %d (%ld) UUID's.", __dst, 0x1Cu);
                if (v211 < 0) {
                  operator delete(*(void **)__p);
                }
              }
              goto LABEL_160;
            }
            long long v37 = *(_OWORD *)v33;
            int v204 = *(_DWORD *)(v33 + 16);
            long long v203 = v37;
            char v38 = sub_1006F78FC(v30, (unsigned __int8 *)&v203);
            unsigned __int8 v39 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
            {
              sub_1000417A8(v33, __dst);
              char v40 = __dst;
              if ((__dst[23] & 0x80u) != 0) {
                char v40 = *(uint8_t **)__dst;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = v40;
              *(_WORD *)&unsigned char __p[12] = 2112;
              *(void *)&unsigned char __p[14] = v38;
              _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_INFO, "addFilters aUUID:%s enhancedRules:%@", __p, 0x16u);
              if ((char)__dst[23] < 0) {
                operator delete(*(void **)__dst);
              }
            }
            if ([v38 count])
            {
              long long v174 = 0u;
              long long v175 = 0u;
              long long v172 = 0u;
              long long v173 = 0u;
              id v41 = v38;
              id v42 = [v41 countByEnumeratingWithState:&v172 objects:v202 count:16];
              if (v42)
              {
                uint64_t v43 = *(void *)v173;
                do
                {
                  for (uint64_t i = 0; i != v42; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v173 != v43) {
                      objc_enumerationMutation(v41);
                    }
                    sub_1006E82C0(a1, *(void **)(*((void *)&v172 + 1) + 8 * i));
                  }
                  id v42 = [v41 countByEnumeratingWithState:&v172 objects:v202 count:16];
                }
                while (v42);
              }
            }
            else
            {
              sub_100045F18(&v193, (unsigned __int8 *)v33, v33);
            }
          }
          v33 += 20;
          if (v33 == v34) {
            goto LABEL_160;
          }
        }
      }
      if (((1 << v31) & 0x100010000) == 0) {
        goto LABEL_160;
      }
      *(unsigned char *)(a1 + 1849) |= sub_1006F782C(v30);
      *(unsigned char *)(a1 + 1850) |= sub_1006F7854(v30);
      if (!sub_1006F7868(v30))
      {
        if (*(unsigned char *)(v30 + 224))
        {
          int v47 = (uint64_t *)sub_1006F78F0(v30);
          uint64_t v48 = *v47;
          uint64_t v49 = v47[1];
          if (*v47 != v49)
          {
            unsigned __int16 v50 = 0;
            do
            {
              uint64_t v51 = *(void *)(v30 + 8);
              if (*(unsigned char *)(v51 + 143) && !*(void *)(a1 + 2344))
              {
                uint64_t v60 = qword_100A19FB0;
                if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_INFO))
                {
                  sub_1000417A8(v48, __dst);
                  int v61 = __dst;
                  if ((__dst[23] & 0x80u) != 0) {
                    int v61 = *(uint8_t **)__dst;
                  }
                  *(_DWORD *)std::string __p = 136446210;
                  *(void *)&__p[4] = v61;
                  _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_INFO, "skipping adding %{public}s to filters", __p, 0xCu);
                  if ((char)__dst[23] < 0) {
                    operator delete(*(void **)__dst);
                  }
                }
              }
              else
              {
                if (*(unsigned __int8 *)(v51 + 203) < ++v50)
                {
                  uint64_t v68 = qword_100A19E90;
                  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
                  {
                    sub_10003AE4C(v29[4], (uint64_t)__p);
                    int v69 = v211;
                    uint64_t v70 = *(unsigned char **)__p;
                    id v71 = (void *)sub_1006F78F0(v30);
                    long long v72 = __p;
                    if (v69 < 0) {
                      long long v72 = v70;
                    }
                    uint64_t v73 = (uint64_t)(v71[1] - *v71) >> 2;
                    *(_DWORD *)long long __dst = 136446722;
                    *(void *)&__dst[4] = v72;
                    *(_WORD *)&__dst[12] = 1024;
                    *(_DWORD *)&__dst[14] = v50;
                    *(_WORD *)&__dst[18] = 2048;
                    *(void *)&__dst[20] = 0xCCCCCCCCCCCCCCCDLL * v73;
                    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "\"%{public}s\" asked to scan for more than %d (%ld) UUID's.", __dst, 0x1Cu);
                    if (v211 < 0) {
                      operator delete(*(void **)__p);
                    }
                  }
                  break;
                }
                long long v52 = *(_OWORD *)v48;
                int v208 = *(_DWORD *)(v48 + 16);
                long long v207 = v52;
                BOOL v53 = sub_1006F78FC(v30, (unsigned __int8 *)&v207);
                unsigned int v54 = qword_100A19E90;
                if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
                {
                  sub_1000417A8(v48, __dst);
                  id v55 = __dst;
                  if ((__dst[23] & 0x80u) != 0) {
                    id v55 = *(uint8_t **)__dst;
                  }
                  *(_DWORD *)std::string __p = 136315394;
                  *(void *)&__p[4] = v55;
                  *(_WORD *)&unsigned char __p[12] = 2112;
                  *(void *)&unsigned char __p[14] = v53;
                  _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "addFilters aUUID:%s enhancedRules:%@", __p, 0x16u);
                  if ((char)__dst[23] < 0) {
                    operator delete(*(void **)__dst);
                  }
                }
                if ([v53 count])
                {
                  long long v182 = 0u;
                  long long v183 = 0u;
                  long long v180 = 0u;
                  long long v181 = 0u;
                  id v56 = v53;
                  id v57 = [v56 countByEnumeratingWithState:&v180 objects:v206 count:16];
                  if (v57)
                  {
                    uint64_t v58 = *(void *)v181;
                    do
                    {
                      for (uint64_t j = 0; j != v57; uint64_t j = (char *)j + 1)
                      {
                        if (*(void *)v181 != v58) {
                          objc_enumerationMutation(v56);
                        }
                        sub_1006E82C0(a1, *(void **)(*((void *)&v180 + 1) + 8 * (void)j));
                      }
                      id v57 = [v56 countByEnumeratingWithState:&v180 objects:v206 count:16];
                    }
                    while (v57);
                  }
                }
                else
                {
                  sub_100045F18(&v193, (unsigned __int8 *)v48, v48);
                }
              }
              v48 += 20;
            }
            while (v48 != v49);
          }
        }
      }
      if (*(unsigned char *)(a1 + 1843))
      {
        if (!v143 || v142[85]) {
          sub_1006FB074(v30);
        }
        long long v74 = sub_1006FC15C(v30);
        long long v75 = v74;
        if (v74 && [v74 count]) {
          [*(id *)(a1 + 4368) addObjectsFromArray:v75];
        }
      }
      long long v76 = sub_1006FC3A0(v30, v158, (_DWORD *)(a1 + 4376));
      long long v178 = 0u;
      long long v179 = 0u;
      long long v176 = 0u;
      long long v177 = 0u;
      id v77 = v76;
      id v78 = [v77 countByEnumeratingWithState:&v176 objects:v205 count:16];
      if (v78)
      {
        uint64_t v79 = *(void *)v177;
        do
        {
          uint64_t v80 = 0;
          do
          {
            if (*(void *)v177 != v79) {
              objc_enumerationMutation(v77);
            }
            uint64_t v81 = *(void **)(*((void *)&v176 + 1) + 8 * (void)v80);
            unsigned int v82 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
            {
              if (*(char *)(v30 + 255) < 0)
              {
                sub_10003B098(__dst, *(void **)(v30 + 232), *(void *)(v30 + 240));
              }
              else
              {
                *(_OWORD *)long long __dst = *(_OWORD *)(v30 + 232);
                *(void *)&__dst[16] = *(void *)(v30 + 248);
              }
              __int16 v83 = __dst;
              if ((__dst[23] & 0x80u) != 0) {
                __int16 v83 = *(uint8_t **)__dst;
              }
              *(_DWORD *)std::string __p = 136315394;
              *(void *)&__p[4] = v83;
              *(_WORD *)&unsigned char __p[12] = 2112;
              *(void *)&unsigned char __p[14] = v81;
              _os_log_debug_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "addUniqueRulesToDictionary: %s rule %@", __p, 0x16u);
              if ((char)__dst[23] < 0) {
                operator delete(*(void **)__dst);
              }
            }
            sub_1006E87F4(a1, v81);
            uint64_t v80 = (char *)v80 + 1;
          }
          while (v78 != v80);
          id v84 = [v77 countByEnumeratingWithState:&v176 objects:v205 count:16];
          id v78 = v84;
        }
        while (v84);
      }

LABEL_160:
      __int16 v85 = (void *)v29[1];
      if (v85)
      {
        do
        {
          unsigned int v86 = v85;
          __int16 v85 = (void *)*v85;
        }
        while (v85);
      }
      else
      {
        do
        {
          unsigned int v86 = (void *)v29[2];
          BOOL v21 = *v86 == (void)v29;
          uint64_t v29 = v86;
        }
        while (!v21);
      }
      uint64_t v29 = v86;
    }
    while (v86 != v160);
  }
  if (![*(id *)(a1 + 4352) count])
  {
    memset(__dst, 0, 22);
    uint64_t v87 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v87 + 616))(v87)) {
      uint64_t v88 = 3;
    }
    else {
      uint64_t v88 = 1;
    }
    int v89 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(void *)std::string __p = 0xFF04000200;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = -87;
      _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Adding bogus rule for type %d and RSSI %d", __p, 0xEu);
    }
    char v90 = +[NSMutableDictionary dictionary];
    long long v91 = +[NSData dataWithBytes:__dst length:22];
    [v90 setObject:v91 forKeyedSubscript:@"data"];

    long long v92 = +[NSData dataWithBytes:__dst length:22];
    [v90 setObject:v92 forKeyedSubscript:@"mask"];

    uint64_t v93 = +[NSNumber numberWithChar:169];
    [v90 setObject:v93 forKeyedSubscript:@"rssi"];

    int v94 = +[NSNumber numberWithUnsignedChar:255];
    [v90 setObject:v94 forKeyedSubscript:@"puckType"];

    __int16 v95 = +[NSNumber numberWithUnsignedChar:2];
    [v90 setObject:v95 forKeyedSubscript:@"matchAllDevices"];

    CFStringRef v96 = +[NSNumber numberWithUnsignedLongLong:0];
    [v90 setObject:v96 forKeyedSubscript:@"address"];

    int v97 = +[NSNumber numberWithBool:0];
    [v90 setObject:v97 forKeyedSubscript:@"bypassFilterDuplicate"];

    int v98 = +[NSNumber numberWithUnsignedChar:v88];
    [v90 setObject:v98 forKeyedSubscript:@"targetCore"];

    uint64_t v99 = +[NSNumber numberWithUnsignedChar:1];
    [v90 setObject:v99 forKeyedSubscript:@"rssithresholdOrder"];

    unsigned int v100 = +[NSNumber numberWithBool:1];
    [v90 setObject:v100 forKeyedSubscript:@"report127dBm"];

    unint64_t v101 = +[NSNumber numberWithBool:1];
    [v90 setObject:v101 forKeyedSubscript:@"report27dBm"];

    sub_1006E87F4(a1, v90);
    *(unsigned char *)(a1 + 1850) = 1;
  }
  if (!v143 || v142[85])
  {
    long long v170 = 0u;
    long long v171 = 0u;
    long long v168 = 0u;
    long long v169 = 0u;
    id obj = *(id *)(a1 + 4352);
    id v146 = [obj countByEnumeratingWithState:&v168 objects:v201 count:16];
    if (v146)
    {
      uint64_t v145 = *(void *)v169;
LABEL_177:
      uint64_t v162 = 0;
      while (1)
      {
        if (*(void *)v169 != v145) {
          objc_enumerationMutation(obj);
        }
        unint64_t v102 = *(void **)(*((void *)&v168 + 1) + 8 * v162);
        *(void *)&unsigned __int8 __dst[8] = 0;
        *(void *)long long __dst = 0;
        id v103 = [v102 objectForKeyedSubscript:@"data"];
        id v104 = [v103 bytes];
        unint64_t v105 = [v102 objectForKeyedSubscript:@"data"];
        sub_1000335D8(__dst, v104, (size_t)[v105 length]);

        *(void *)&__p[8] = 0;
        *(void *)std::string __p = 0;
        id v106 = [v102 objectForKeyedSubscript:@"mask"];
        id v107 = [v106 bytes];
        __int16 v108 = [v102 objectForKeyedSubscript:@"mask"];
        sub_1000335D8(__p, v107, (size_t)[v108 length]);

        uint64_t v109 = sub_10003FB34();
        uint64_t v161 = sub_10004A6E4((uint64_t)__dst);
        unsigned __int16 v159 = sub_100045F00((uint64_t)__dst);
        uint64_t v156 = sub_10004A6E4((uint64_t)__p);
        unsigned __int16 v155 = sub_100045F00((uint64_t)__p);
        double v152 = [v102 objectForKeyedSubscript:@"rssi"];
        signed __int8 v154 = [v152 intValue];
        long long v151 = [v102 objectForKeyedSubscript:@"puckType"];
        unsigned __int8 v153 = [v151 unsignedIntValue];
        long long v150 = [v102 objectForKeyedSubscript:@"matchAllDevices"];
        unsigned __int8 v110 = [v150 unsignedIntValue];
        __int16 v149 = [v102 objectForKeyedSubscript:@"address"];
        id v111 = [v149 unsignedLongLongValue];
        int v148 = [v102 objectForKeyedSubscript:@"bypassFilterDuplicate"];
        LOBYTE(v107) = [v148 unsignedIntValue];
        __int16 v147 = [v102 objectForKeyedSubscript:@"targetCore"];
        unsigned __int8 v112 = [v147 unsignedIntValue];
        int v113 = [v102 objectForKeyedSubscript:@"rssithresholdOrder"];
        unsigned __int8 v114 = [v113 unsignedIntValue];
        int v115 = [v102 objectForKeyedSubscript:@"report127dBm"];
        unsigned __int8 v116 = [v115 unsignedIntValue];
        int v117 = [v102 objectForKeyedSubscript:@"report27dBm"];
        BYTE4(v141) = [v117 unsignedIntValue];
        BYTE3(v141) = v116;
        BYTE2(v141) = v114;
        BYTE1(v141) = v112;
        LOBYTE(v141) = (_BYTE)v107;
        int v118 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, void, void, void, void, id, uint64_t))(*(void *)v109 + 680))(v109, v161, v159, v156, v155, v154, v153, v110, v111, v141);

        if (v118)
        {
          int v119 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v118;
            _os_log_error_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_ERROR, "Failed to add rule with result %d", buf, 8u);
          }
        }
        *(void *)std::string __p = &off_100998428;
        if (*(void *)&__p[8]) {
          sub_1000368F4(*(atomic_uint **)&__p[8]);
        }
        *(void *)long long __dst = &off_100998428;
        if (*(void *)&__dst[8]) {
          sub_1000368F4(*(atomic_uint **)&__dst[8]);
        }
        if (v118) {
          break;
        }
        if (v146 == (id)++v162)
        {
          id v146 = [obj countByEnumeratingWithState:&v168 objects:v201 count:16];
          if (v146) {
            goto LABEL_177;
          }
          break;
        }
      }
    }

    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
      sub_1007963FC();
    }
    uint64_t v120 = sub_10003FB34();
    (*(void (**)(uint64_t, void))(*(void *)v120 + 752))(v120, *(unsigned int *)(a1 + 4376));
    if (*(unsigned char *)(a1 + 1849) && (!v143 || v142[85]))
    {
      uint64_t v121 = sub_10003FB34();
      (*(void (**)(uint64_t, uint64_t))(*(void *)v121 + 632))(v121, 1);
    }
  }
  if (!v195 && ![*(id *)(a1 + 4360) count])
  {
    sub_10071D1C4((uint64_t)__dst, &xmmword_1007C0667, 16);
    sub_100045F18(&v193, __dst, (uint64_t)__dst);
  }
  if (!v143 || v142[85])
  {
    uint64_t v122 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 400))(v122, 1);
    int v123 = v193;
    if (v193 != (uint64_t *)&v194)
    {
      while (1)
      {
        uint64_t v124 = sub_10003FB34();
        long long v199 = *(_OWORD *)((char *)v123 + 28);
        int v200 = *((_DWORD *)v123 + 11);
        if ((*(unsigned int (**)(uint64_t, long long *, void, uint64_t, uint64_t, uint64_t))(*(void *)v124 + 416))(v124, &v199, 0, 169, 1, 1))
        {
          break;
        }
        int v125 = (uint64_t *)v123[1];
        if (v125)
        {
          do
          {
            __int16 v126 = v125;
            int v125 = (uint64_t *)*v125;
          }
          while (v125);
        }
        else
        {
          do
          {
            __int16 v126 = (uint64_t *)v123[2];
            BOOL v21 = *v126 == (void)v123;
            int v123 = v126;
          }
          while (!v21);
        }
        int v123 = v126;
        if (v126 == (uint64_t *)&v194) {
          goto LABEL_212;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
      {
        sub_1000417A8((uint64_t)v123 + 28, __dst);
        sub_1007963A4();
      }
    }
LABEL_212:
    long long v166 = 0u;
    long long v167 = 0u;
    long long v164 = 0u;
    long long v165 = 0u;
    id v127 = *(id *)(a1 + 4360);
    id v128 = [v127 countByEnumeratingWithState:&v164 objects:v198 count:16];
    if (v128)
    {
      uint64_t v129 = *(void *)v165;
      while (2)
      {
        for (uint64_t k = 0; k != v128; uint64_t k = (char *)k + 1)
        {
          if (*(void *)v165 != v129) {
            objc_enumerationMutation(v127);
          }
          uint64_t v131 = *(void **)(*((void *)&v164 + 1) + 8 * (void)k);
          memset(buf, 0, 20);
          id v132 = [v131 objectForKeyedSubscript:@"uuid"];
          uint64_t v133 = (int8x16_t *)[v132 bytes];
          uint64_t v134 = [v131 objectForKeyedSubscript:@"uuid"];
          sub_10071D1C4((uint64_t)buf, v133, [v134 length]);

          uint64_t v135 = sub_10003FB34();
          long long v196 = *(_OWORD *)buf;
          int v197 = *(_DWORD *)&buf[16];
          uint64_t v136 = [v131 objectForKeyedSubscript:@"data"];
          LOBYTE(v134) = [v136 length];
          id v137 = [v131 objectForKeyedSubscript:@"data"];
          id v138 = [v137 bytes];
          id v139 = [v131 objectForKeyedSubscript:@"mask"];
          LOBYTE(v140) = 1;
          LODWORD(v134) = (*(uint64_t (**)(uint64_t, long long *, void, uint64_t, uint64_t, void, id, id, int))(*(void *)v135 + 424))(v135, &v196, 0, 169, 1, v134, v138, [v139 bytes], v140);

          if (v134)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
            {
              sub_1000417A8((uint64_t)buf, __p);
              sub_10079634C();
            }
            goto LABEL_223;
          }
        }
        id v128 = [v127 countByEnumeratingWithState:&v164 objects:v198 count:16];
        if (v128) {
          continue;
        }
        break;
      }
    }
LABEL_223:
  }
  if ((uint64_t **)(a1 + 4328) != &v193) {
    sub_100643FC0((uint64_t **)(a1 + 4328), v193, &v194);
  }
  *(unsigned char *)(a1 + 1848) = 1;
  if (v143 || v142[85]) {
    sub_1006EB2E8(a1, *(unsigned char *)(a1 + 1843));
  }
  else {
    *int v142 = 0;
  }
  *(unsigned char *)(a1 + 1847) = 0;
  *(_DWORD *)(a1 + 1843) = 0;
  sub_1000486F0((uint64_t)&v190, v191);
  sub_1000486F0((uint64_t)&v193, v194);
}

void sub_1006EAF84(_Unwind_Exception *a1)
{
}

void sub_1006EB2E8(uint64_t a1, char a2)
{
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_100796538();
  }
  uint64_t v4 = sub_1004AFC64();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1006EF0FC;
  v5[3] = &unk_100998A58;
  _OWORD v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

BOOL sub_1006EB3A4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  do
  {
    BOOL result = *(unsigned char *)(*(void *)(v1[5] + 8) + 3) != 0;
    if (*(unsigned char *)(*(void *)(v1[5] + 8) + 3)) {
      break;
    }
    uint64_t v4 = (void *)v1[1];
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (void *)v1[2];
        BOOL v6 = *v5 == (void)v1;
        uint64_t v1 = v5;
      }
      while (!v6);
    }
    uint64_t v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t sub_1006EB410(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  if (v1 != (void *)(a1 + 2048))
  {
    do
    {
      uint64_t v2 = *(void *)(v1[5] + 8);
      uint64_t v3 = *(void *)(v2 + 96);
      uint64_t v4 = *(void *)(v2 + 104);
      while (v3 != v4)
      {
        if (*(_DWORD *)(v3 + 104) == 2) {
          return 1;
        }
        v3 += 112;
      }
      uint64_t v5 = (void *)v1[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (void *)v1[2];
          BOOL v7 = *v6 == (void)v1;
          uint64_t v1 = v6;
        }
        while (!v7);
      }
      uint64_t v1 = v6;
    }
    while (v6 != (void *)(a1 + 2048));
  }
  return 0;
}

uint64_t sub_1006EB490(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  if (v1 != (void *)(a1 + 2048))
  {
    do
    {
      uint64_t v2 = *(void *)(v1[5] + 8);
      uint64_t v3 = *(void *)(v2 + 96);
      uint64_t v4 = *(void *)(v2 + 104);
      while (v3 != v4)
      {
        if (*(_DWORD *)(v3 + 104) == 3) {
          return 1;
        }
        v3 += 112;
      }
      uint64_t v5 = (void *)v1[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (void *)v1[2];
          BOOL v7 = *v6 == (void)v1;
          uint64_t v1 = v6;
        }
        while (!v7);
      }
      uint64_t v1 = v6;
    }
    while (v6 != (void *)(a1 + 2048));
  }
  return 0;
}

uint64_t sub_1006EB510(uint64_t result)
{
  if (!*(void *)(result + 2344)) {
    sub_1003733D8();
  }
  return result;
}

void sub_1006EB604(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2344);
  if (v1)
  {
    uint64_t v3 = qword_100A19F40;
    if (!os_log_type_enabled((os_log_t)qword_100A19F40, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1),
          int v5 = 136446210,
          uint64_t v6 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v5, 0xCu), (uint64_t v1 = *(void *)(a1 + 2344)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
    *(void *)(a1 + 2344) = 0;
  }
}

void sub_1006EB714(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1003731C0();
  (*(void (**)(uint64_t, void, void, void, void, double))(*(void *)v2 + 64))(v2, *(void *)(v1 + 2296), *(void *)(v1 + 2304), *(void *)(v1 + 2312), *(void *)(v1 + 2320), *(double *)(v1 + 2328));
  uint64_t v3 = qword_100A19FB0;
  if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(v1 + 2296);
    uint64_t v5 = *(void *)(v1 + 2304);
    uint64_t v6 = *(void *)(v1 + 2312);
    uint64_t v7 = *(void *)(v1 + 2320);
    uint64_t v8 = *(void *)(v1 + 2328);
    int v9 = 134219008;
    uint64_t v10 = v4;
    __int16 v11 = 2048;
    uint64_t v12 = v5;
    __int16 v13 = 2048;
    uint64_t v14 = v6;
    __int16 v15 = 2048;
    uint64_t v16 = v7;
    __int16 v17 = 2048;
    uint64_t v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "reportExposureNotificationStats numOfScans:%llu duration:%llu numOfENReports:%llu numOfOtherReports:%llu lastENScanTS:%f", (uint8_t *)&v9, 0x34u);
  }
}

void sub_1006EB82C(uint64_t a1)
{
  if (*(void *)(a1 + 2344))
  {
    if (qword_1009FB798 != -1) {
      dispatch_once(&qword_1009FB798, &stru_1009BF848);
    }
    uint64_t v2 = sub_10044F3CC((uint64_t)off_1009FB790);
    uint64_t v3 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      v12[0] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "armContactTracingScanWithDuplicatesDurationTimer Timer %llu ms Armed!", buf, 0xCu);
    }
    uint64_t v4 = sub_100019878();
    uint64_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v4 + 8));
    *(void *)(a1 + 2264) = v5;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_1006EBA2C;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    uint64_t v6 = *(NSObject **)(a1 + 2264);
    dispatch_time_t v7 = dispatch_time(0x8000000000000000, 1000000 * v2);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0);
    dispatch_activate(*(dispatch_object_t *)(a1 + 2264));
    ++*(unsigned char *)(a1 + 2288);
  }
  else
  {
    uint64_t v8 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_INFO))
    {
      int v9 = *(unsigned __int8 *)(a1 + 2288);
      *(_DWORD *)long long buf = 67109376;
      LODWORD(v12[0]) = v9;
      WORD2(v12[0]) = 1024;
      *(_DWORD *)((char *)v12 + 6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "fContactTracingScanDupClearDeltaTimer fContactTracingScanDupfilterClearCounter=%d isPowerAssertForContactTracingScanCreated=%d", buf, 0xEu);
    }
  }
}

uint64_t sub_1006EBA2C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19FB0;
  if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "fContactTracingScanWithDuplicatesDurationTimer Timer expired!", v4, 2u);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 2264));
  dispatch_release(*(dispatch_object_t *)(v1 + 2264));
  *(void *)(v1 + 2264) = 0;
  *(unsigned char *)(v1 + 2352) = 0;
  sub_1006EBAD0(v1);
  sub_1006EBC34(v1, 0);
  return sub_100055B50(v1, 1);
}

void sub_1006EBAD0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 != (void *)(a1 + 2048))
  {
    do
    {
      uint64_t v3 = v1[5];
      if (*(unsigned char *)(*(void *)(v3 + 8) + 143))
      {
        uint64_t v4 = qword_100A19FB0;
        if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v1[4], (uint64_t)__p);
          uint64_t v5 = v12 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136446210;
          uint64_t v14 = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Clearing scan agent sw dup filter map for session %{public}s", buf, 0xCu);
          if (v12 < 0) {
            operator delete(__p[0]);
          }
        }
        dispatch_time_t v7 = *(void **)(v3 + 112);
        uint64_t v6 = (void *)(v3 + 112);
        sub_1006F71D4((uint64_t)(v6 - 1), v7);
        *(v6 - 1) = v6;
        void *v6 = 0;
        v6[1] = 0;
      }
      uint64_t v8 = (void *)v1[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v1[2];
          BOOL v10 = *v9 == (void)v1;
          uint64_t v1 = v9;
        }
        while (!v10);
      }
      uint64_t v1 = v9;
    }
    while (v9 != v2);
  }
}

void sub_1006EBC34(uint64_t a1, int a2)
{
  uint64_t v2 = *(void **)(a1 + 2040);
  uint64_t v3 = (void *)(a1 + 2048);
  if (v2 != (void *)(a1 + 2048))
  {
    do
    {
      uint64_t v5 = v2[5];
      uint64_t v6 = *(unsigned char **)(v5 + 8);
      if (v6[143])
      {
        dispatch_time_t v7 = qword_100A19FB0;
        if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v2[4], (uint64_t)__p);
          uint64_t v8 = __p;
          if (v13 < 0) {
            uint64_t v8 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446466;
          __int16 v15 = v8;
          __int16 v16 = 1024;
          int v17 = a2;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting scan agent for session:%{public}s allowdups:%d", buf, 0x12u);
          if (v13 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v6 = *(unsigned char **)(v5 + 8);
        }
        unsigned char *v6 = a2;
      }
      int v9 = (void *)v2[1];
      if (v9)
      {
        do
        {
          BOOL v10 = v9;
          int v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          BOOL v10 = (void *)v2[2];
          BOOL v11 = *v10 == (void)v2;
          uint64_t v2 = v10;
        }
        while (!v11);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v3);
  }
}

double sub_1006EBDA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  ++*(void *)(v2 + 2296);
  if (qword_1009FB798 != -1) {
    dispatch_once(&qword_1009FB798, &stru_1009BF848);
  }
  double result = (double)*(unint64_t *)(v2 + 2304)
         + (double)(*(void *)(a1 + 40) / 0x3E8uLL)
         * (48.0
          / (double)sub_10044F4E8((uint64_t)off_1009FB790));
  *(void *)(v2 + 2304) = (unint64_t)result;
  return result;
}

void sub_1006EBE50(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19FB0;
  if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "fContactTracingScanDurationTimer Timer expired!", v4, 2u);
  }
  dispatch_source_cancel(*(dispatch_source_t *)(v1 + 2256));
  dispatch_release(*(dispatch_object_t *)(v1 + 2256));
  *(void *)(v1 + 2256) = 0;
  *(unsigned char *)(v1 + 1840) = 1;
  *(unsigned char *)(v1 + 2352) = 1;
  sub_100055B50(v1, 1);
  if (qword_1009FB798 != -1) {
    dispatch_once(&qword_1009FB798, &stru_1009BF848);
  }
  sub_10044E870((uint64_t)off_1009FB790);
  sub_1006D92DC(v1);
  sub_1006D9934(v1);
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  *(CFAbsoluteTime *)(v1 + 2328) = Current;
  *(CFAbsoluteTime *)(v1 + 2280) = Current;
  sub_1006EB604(v1);
}

void sub_1006EBF40(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19FB0;
  if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v15) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "fContactTracingScanDeltaTimer Timer expired!", (uint8_t *)&v15, 2u);
  }
  uint64_t v3 = *(NSObject **)(v1 + 2272);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(v1 + 2272));
    *(void *)(v1 + 2272) = 0;
  }
  *(unsigned char *)(v1 + 1840) = 1;
  if (!*(unsigned char *)(v1 + 1255))
  {
    sub_1006E2EB4(v1);
    sub_1006EBC34(v1, 1);
    sub_1006EBAD0(v1);
    sub_100055B50(v1, 1);
    return;
  }
  if (*(double *)(v1 + 2336) != 0.0)
  {
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    *(void *)(v1 + 2304) = (unint64_t)(Current
                                              - *(double *)(v1 + 2336)
                                              + (double)*(unint64_t *)(v1 + 2304));
    *(CFAbsoluteTime *)(v1 + 2336) = Current;
  }
  if (sub_100055AE4(v1) && *(unsigned char *)(v1 + 1255))
  {
    uint64_t v5 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = 138543362;
      CFStringRef v16 = @"EN";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ADVBUFF(%{public}@): Pausing ADV Buffers", (uint8_t *)&v15, 0xCu);
    }
    if (*(unsigned __int8 *)(v1 + 1260) != 255)
    {
      uint64_t v6 = qword_100A19FB0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_20;
      }
      int v15 = 138543362;
      CFStringRef v16 = @"EN";
      dispatch_time_t v7 = "Already reading ADVBUFF(%{public}@):";
      goto LABEL_19;
    }
    int v8 = sub_1006D9358(v1, 2, 0);
    uint64_t v6 = qword_100A19FB0;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT);
    if (!v8)
    {
      if (v9)
      {
        int v10 = *(unsigned __int8 *)(v1 + 1260);
        int v15 = 138543618;
        CFStringRef v16 = @"EN";
        __int16 v17 = 1024;
        int v18 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ADVBUFF(%{public}@): Trying to read, current expectedEntries=%d", (uint8_t *)&v15, 0x12u);
      }
      int v11 = sub_1006DB8D8(v1, 2u);
      char v12 = qword_100A19FB0;
      if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(unsigned __int8 *)(v1 + 1260);
        int v15 = 138543874;
        CFStringRef v16 = @"EN";
        __int16 v17 = 1024;
        int v18 = v11;
        __int16 v19 = 1024;
        int v20 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "ADVBUFF(%{public}@): ReadADVBuffer returned %d, expectedEntries:%d", (uint8_t *)&v15, 0x18u);
      }
      if (v11)
      {
        uint64_t v14 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT)) {
          sub_100796658(v14);
        }
      }
      if (*(unsigned __int8 *)(v1 + 1260) == 255)
      {
        sub_1006D9358(v1, 2, 1);
        if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEBUG)) {
          sub_1007965F0();
        }
        sub_1006D9934(v1);
      }
      goto LABEL_20;
    }
    if (v9)
    {
      int v15 = 138543362;
      CFStringRef v16 = @"EN";
      dispatch_time_t v7 = "ADVBUFF(%{public}@): could not disable ADV buffering";
LABEL_19:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v15, 0xCu);
    }
  }
LABEL_20:
  if (*(unsigned __int8 *)(v1 + 1260) == 255) {
    sub_1006D92DC(v1);
  }
}

uint64_t sub_1006EC2D4(uint64_t a1, uint64_t a2, int a3, uint64_t a4, unsigned __int8 *a5)
{
  uint64_t v9 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 888))(v9);
  switch(a3)
  {
    case 5:
      if (result == 3)
      {
        unsigned int v15 = *((unsigned __int16 *)a5 + 1);
        if (a5[1])
        {
          if (*(unsigned __int16 *)(a2 + 2) < v15)
          {
            *(_WORD *)(a2 + 2) = v15;
            goto LABEL_20;
          }
        }
        else if (*(unsigned __int16 *)(a2 + 4) < v15)
        {
          *(_WORD *)(a2 + 4) = v15;
          *(_WORD *)(a2 + 2) = 0;
        }
      }
      break;
    case 3:
      if (!(*(unsigned __int16 *)(a2 + 4) | *(unsigned __int16 *)(a2 + 2)))
      {
        unint64_t v16 = 1374389535 * (*(unsigned __int16 *)(a4 + 4) - *(unsigned __int16 *)(a4 + 6)) * *a5;
        *(_WORD *)(a2 + 4) = (v16 >> 37) + (v16 >> 63);
      }
      if (result != 3) {
        goto LABEL_20;
      }
      break;
    case 2:
      unsigned int v11 = *(unsigned __int16 *)(a2 + 4);
      if (!*(_WORD *)(a2 + 4) && !*(_WORD *)(a2 + 2))
      {
        uint64_t v12 = 1374389535 * (*(unsigned __int16 *)(a4 + 4) - *(unsigned __int16 *)(a4 + 6)) * *a5;
        unsigned __int16 v13 = (v12 >> 37) + ((unint64_t)v12 >> 63);
        unsigned int v11 = v13;
        *(_WORD *)(a2 + 4) = v13;
      }
      if (result != 2 || v11 < 0x11)
      {
        if ((int)result > 1) {
          return result;
        }
LABEL_20:
        *(_WORD *)(a2 + 4) = 0;
        return result;
      }
      *(_WORD *)(a2 + 4) = (unsigned __int16)((20976 * *a5) >> 16) >> 1;
      break;
  }
  return result;
}

uint64_t sub_1006EC450(uint64_t a1, uint64_t a2)
{
  if (!a2 || !*(void *)(a2 + 8)) {
    return 0;
  }
  if (sub_100041058(a2) == 22)
  {
    uint64_t v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = sub_100041058(a2);
      *(_DWORD *)long long buf = 136315138;
      BOOL v21 = sub_10003E508(v4);
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ScanCore offloading is allowed while throttling due to SDP for %s", buf, 0xCu);
    }
    return 1;
  }
  else
  {
    uint64_t v6 = sub_10004104C(a2);
    dispatch_time_t v7 = v6;
    if (v6 && [v6 count])
    {
      long long v17 = 0u;
      long long v18 = 0u;
      long long v15 = 0u;
      long long v16 = 0u;
      id v8 = v7;
      uint64_t v5 = (uint64_t)[v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
      if (v5)
      {
        uint64_t v9 = *(void *)v16;
        while (2)
        {
          for (uint64_t i = 0; i != v5; ++i)
          {
            if (*(void *)v16 != v9) {
              objc_enumerationMutation(v8);
            }
            unsigned int v11 = *(void **)(*((void *)&v15 + 1) + 8 * i);
            if (objc_msgSend(v11, "longLongValue", (void)v15) == 22)
            {
              uint64_t v12 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
              {
                unsigned __int16 v13 = sub_10003E508((int)[v11 longLongValue]);
                *(_DWORD *)long long buf = 136315138;
                BOOL v21 = v13;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "ScanCore offloading is allowed while throttling due to SDP for %s", buf, 0xCu);
              }
              uint64_t v5 = 1;
              goto LABEL_23;
            }
          }
          uint64_t v5 = (uint64_t)[v8 countByEnumeratingWithState:&v15 objects:v19 count:16];
          if (v5) {
            continue;
          }
          break;
        }
      }
LABEL_23:
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  return v5;
}

void sub_1006EC670(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006EC6A0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_100035F54();
  unsigned int v224 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 616))(v3);
  uint64_t v4 = *(void *)sub_100035F54();
  unsigned int v223 = (*(uint64_t (**)(void))(v4 + 648))();
  uint64_t v5 = *(void *)sub_100035F54();
  int v225 = (*(uint64_t (**)(void))(v5 + 824))();
  uint64_t v6 = *(void *)sub_10003FB34();
  int v221 = (*(uint64_t (**)(void))(v6 + 2664))();
  *(_WORD *)a2 = 1;
  a2[2] = 0;
  *((_WORD *)a2 + 4) = 0;
  a2[15] = 1;
  v238 = a2;
  *((_WORD *)a2 + 12) = 0;
  __int16 v237 = +[NSMutableArray array];
  __int16 v235 = +[NSMutableDictionary dictionary];
  dispatch_time_t v7 = *(void **)(a1 + 2040);
  id v8 = &xpc_activity_set_state_ptr;
  uint64_t v9 = v238;
  if (v7 != (void *)(a1 + 2048))
  {
    BOOL v231 = 0;
    int v232 = 0;
    int v10 = 0;
    unsigned int v220 = 0;
    uint64_t v226 = 0;
    char v234 = 0;
    int v222 = 0;
    uint64_t v219 = 0;
    int v229 = 1;
    char v230 = 0;
    uint64_t v227 = 3;
    uint64_t v11 = 30;
    uint64_t v228 = 300;
    while (1)
    {
      uint64_t v12 = *(void *)(v7[5] + 8);
      memset(&v253[16], 0, 88);
      *(_OWORD *)long long v253 = 0u;
      uint64_t v13 = *(void *)(v7[5] + 8);
      long long v14 = *(_OWORD *)(v13 + 296);
      *(_OWORD *)long long v253 = *(_OWORD *)(v13 + 280);
      int v15 = *(_DWORD *)(v12 + 168);
      *(_OWORD *)&v253[16] = v14;
      *(_OWORD *)&v253[28] = *(_OWORD *)(v13 + 308);
      *(void *)&v253[56] = 0;
      *(void *)&v253[48] = 0;
      sub_1000375CC(&v253[48], *(void *)(v13 + 328), *(void *)(v13 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v13 + 336) - *(void *)(v13 + 328)) >> 5));
      memset(&v253[72], 0, 24);
      sub_100037564(&v253[72], *(long long **)(v13 + 352), *(long long **)(v13 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v13 + 360) - *(void *)(v13 + 352)) >> 2));
      uint64_t v239 = v11;
      v253[96] = *(unsigned char *)(v13 + 376);
      __int16 v241 = +[NSMutableDictionary dictionary];
      long long v16 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(v7[5] + 8) + 3)];
      [v241 setObject:v16 forKeyedSubscript:@"isAllowedInPaused"];

      long long v17 = +[NSNumber numberWithBool:sub_10003AE34(v7[5])];
      [v241 setObject:v17 forKeyedSubscript:@"allowDupes"];

      long long v18 = +[NSNumber numberWithUnsignedInt:0];
      [v241 setObject:v18 forKeyedSubscript:@"window"];

      __int16 v19 = +[NSNumber numberWithUnsignedInt:0];
      [v241 setObject:v19 forKeyedSubscript:@"interval"];

      int v20 = +[NSNumber numberWithBool:0];
      [v241 setObject:v20 forKeyedSubscript:@"active"];

      BOOL v21 = +[NSNumber numberWithBool:sub_10003B140(v7[5])];
      [v241 setObject:v21 forKeyedSubscript:@"requiresActiveScan"];

      char v22 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v7[5] + 81) == 32];
      [v241 setObject:v22 forKeyedSubscript:@"daemon"];

      id v23 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v7[5] + 81) == 16];
      [v241 setObject:v23 forKeyedSubscript:@"ForegroundApp"];

      unsigned int v24 = +[NSNumber numberWithBool:sub_10003AE20(v7[5])];
      [v241 setObject:v24 forKeyedSubscript:@"isAnyHWObjectDiscoveryEnabled"];

      [v241 setObject:&off_1009E1220 forKeyedSubscript:@"HWADVBufferWindowMs"];
      [v241 setObject:&off_1009E1220 forKeyedSubscript:@"HWADVBufferIntervalMs"];
      id v25 = +[NSNumber numberWithBool:sub_10003B134(v7[5])];
      [v241 setObject:v25 forKeyedSubscript:@"isRangeScan"];

      uint64_t v26 = +[NSNumber numberWithBool:sub_10003AE40(v7[5])];
      [v241 setObject:v26 forKeyedSubscript:@"isPriorityCritical"];

      unsigned int v27 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(v7[5] + 8) + 142)];
      [v241 setObject:v27 forKeyedSubscript:@"holdPowerAssert"];

      int v28 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(v7[5] + 8) + 143)];
      [v241 setObject:v28 forKeyedSubscript:@"isContactTracing"];

      uint64_t v29 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v7[5] + 208)];
      [v241 setObject:v29 forKeyedSubscript:@"scanAgentType"];

      uint64_t v30 = +[NSNumber numberWithInt:*(unsigned int *)(v7[5] + 96)];
      [v241 setObject:v30 forKeyedSubscript:@"agentScanLevel"];

      unsigned int v31 = +[NSString stringWithUTF8String:sub_10003E508(v15)];
      [v241 setObject:v31 forKeyedSubscript:@"usecase"];

      if (v253[8])
      {
        sub_100041198((uint64_t)v253);
        int v32 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
        uint64_t v33 = +[NSString stringWithUTF8String:v32];
        [v241 setObject:v33 forKeyedSubscript:@"usecaseParams"];

        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      sub_10003AE4C(v7[4], (uint64_t)__p);
      if (__p[23] >= 0) {
        uint64_t v34 = __p;
      }
      else {
        uint64_t v34 = *(unsigned char **)__p;
      }
      unsigned __int16 v35 = +[NSString stringWithUTF8String:v34];
      [v235 setObject:v241 forKeyedSubscript:v35];

      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      if (!sub_10003FB78(v7[5])) {
        goto LABEL_150;
      }
      ++v234;
      uint64_t v36 = v7[5];
      if (!*(unsigned char *)(*(void *)(v36 + 8) + 3) && *(_DWORD *)(a1 + 1964) == 2) {
        goto LABEL_150;
      }
      BOOL v37 = sub_10003AE20(v36);
      char v38 = qword_100A19E90;
      if (v37)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_10079681C(&v247, v248);
        }
        uint64_t v39 = 0;
        uint64_t v40 = 0;
        uint64_t v236 = 0;
        id v41 = &xpc_activity_set_state_ptr;
        goto LABEL_144;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        int v42 = *(unsigned __int8 *)(v7[5] + 81);
        *(_DWORD *)std::string __p = 67109120;
        *(_DWORD *)&__p[4] = v42;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "state %d", __p, 8u);
      }
      if (sub_1006F782C(v7[5]) || sub_1006F7854(v7[5]))
      {
        uint64_t v236 = 0;
      }
      else
      {
        uint64_t v43 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v44 = v7[5];
          if (*(char *)(v44 + 255) < 0)
          {
            sub_10003B098(buf, *(void **)(v44 + 232), *(void *)(v44 + 240));
            uint64_t v44 = v7[5];
          }
          else
          {
            *(_OWORD *)long long buf = *(_OWORD *)(v44 + 232);
            *(void *)&uint8_t buf[16] = *(void *)(v44 + 248);
          }
          unsigned int v45 = buf[23] >= 0 ? buf : *(unsigned char **)buf;
          BOOL v46 = sub_1006F782C(v44);
          BOOL v47 = sub_1006F7854(v7[5]);
          *(_DWORD *)std::string __p = 136315650;
          *(void *)&__p[4] = v45;
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&unsigned char __p[14] = v46;
          *(_WORD *)&__p[18] = 1024;
          *(_DWORD *)&__p[20] = v47;
          _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "Upgrading %s to active scan hasZoneScan:%d hasMatchingRulesScan:%d", __p, 0x18u);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        v10 |= sub_10003AE34(v7[5]);
        uint64_t v236 = 1;
      }
      if (sub_1006F7820(v7[5]))
      {
        uint64_t v48 = sub_1006FC3A0(v7[5], 0, (_DWORD *)(a1 + 4376));
        long long v251 = 0u;
        long long v252 = 0u;
        long long v249 = 0u;
        long long v250 = 0u;
        id obj = v48;
        id v49 = [obj countByEnumeratingWithState:&v249 objects:v275 count:16];
        if (v49)
        {
          uint64_t v50 = *(void *)v250;
          unsigned int v51 = v15 & 0xFFFF0000;
          do
          {
            for (uint64_t i = 0; i != v49; uint64_t i = (char *)i + 1)
            {
              if (*(void *)v250 != v50) {
                objc_enumerationMutation(obj);
              }
              BOOL v53 = [*(id *)(*((void *)&v249 + 1) + 8 * i) objectForKeyedSubscript:@"puckType"];
              if (v53)
              {
                objc_opt_class();
                if ((objc_opt_isKindOfClass() & 1) != 0 && [v53 integerValue] == (id)8)
                {
                  unsigned int v54 = qword_100A19E90;
                  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
                  {
                    int v55 = sub_10003AE34(v7[5]);
                    *(_DWORD *)std::string __p = 67109120;
                    *(_DWORD *)&__p[4] = v55;
                    _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "HS is asking for duplicates? %d", __p, 8u);
                  }
                  v10 |= sub_10003AE34(v7[5]);
                }
              }
              if (v51 == 0x10000)
              {
                id v56 = qword_100A19E90;
                if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v57 = v7[5];
                  int v58 = *(_DWORD *)(*(void *)(v57 + 8) + 168);
                  int v59 = sub_10003AE34(v57);
                  uint64_t v60 = sub_10003E508(v58);
                  *(_DWORD *)std::string __p = 136315394;
                  int v61 = "No";
                  if (v59) {
                    int v61 = "Yes";
                  }
                  *(void *)&__p[4] = v60;
                  *(_WORD *)&unsigned char __p[12] = 2080;
                  *(void *)&unsigned char __p[14] = v61;
                  _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Findmy usecase \"%s\" is asking for duplicates? %s", __p, 0x16u);
                }
                v10 |= sub_10003AE34(v7[5]);
              }
              uint64_t v62 = *(void *)(v7[5] + 8);
              uint64_t v63 = *(void *)(v62 + 64);
              uint64_t v64 = *(void *)(v62 + 72);
              while (v63 != v64)
              {
                if (*(unsigned char *)(v63 + 8) == 16 && *(unsigned char *)(v63 + 50) == 1)
                {
                  uint64_t v65 = qword_100A19E90;
                  int v10 = 1;
                  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
                  {
                    *(void *)std::string __p = 0x104000100;
                    _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "NearbyInfo asking for duplicates? %d", __p, 8u);
                  }
                }
                v63 += 96;
              }
            }
            id v49 = [obj countByEnumeratingWithState:&v249 objects:v275 count:16];
          }
          while (v49);
        }
      }
      uint64_t v66 = qword_100A19E90;
      id v41 = &xpc_activity_set_state_ptr;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v67 = v7[5];
        if (*(char *)(v67 + 255) < 0)
        {
          sub_10003B098(buf, *(void **)(v67 + 232), *(void *)(v67 + 240));
          uint64_t v67 = v7[5];
        }
        else
        {
          *(_OWORD *)long long buf = *(_OWORD *)(v67 + 232);
          *(void *)&uint8_t buf[16] = *(void *)(v67 + 248);
        }
        int v68 = buf[23];
        int v69 = *(unsigned char **)buf;
        int v70 = sub_10003AE34(v67);
        *(_DWORD *)std::string __p = 136315906;
        id v71 = buf;
        if (v68 < 0) {
          id v71 = v69;
        }
        *(void *)&__p[4] = v71;
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)&unsigned char __p[14] = v10 & 1;
        *(_WORD *)&__p[18] = 1024;
        *(_DWORD *)&__p[20] = v70;
        __int16 v273 = 1024;
        int v274 = v236;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "%s allowDupes:%d, agentAllowDupes:%d, active:%d", __p, 0x1Eu);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v72 = v7[5];
      uint64_t v73 = *(void *)(v72 + 8);
      int v74 = *(unsigned __int8 *)(v73 + 120);
      if (*(unsigned char *)(v73 + 120))
      {
        uint64_t v39 = *(unsigned int *)(v73 + 128);
        uint64_t v40 = *(unsigned int *)(v73 + 132);
        uint64_t v236 = *(unsigned __int8 *)(v73 + 136);
      }
      else
      {
        uint64_t v39 = 0;
        uint64_t v40 = 0;
      }
      long long v75 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(v72 + 255) < 0)
        {
          sub_10003B098(__p, *(void **)(v72 + 232), *(void *)(v72 + 240));
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)(v72 + 232);
          *(void *)&__p[16] = *(void *)(v72 + 248);
        }
        long long v76 = __p;
        if (__p[23] < 0) {
          long long v76 = *(unsigned char **)__p;
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v76;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v236;
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "%s active %d", buf, 0x12u);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      BOOL v231 = (v236 | v231) != 0;
      if (v74)
      {
        if (v236)
        {
          id v77 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)std::string __p = 67109634;
            *(_DWORD *)&__p[4] = v40;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = v39;
            *(_WORD *)&unsigned char __p[14] = 2082;
            *(void *)&__p[16] = "active";
            _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "Daemon is requesting scan parameters %d/%d (%{public}s)", __p, 0x18u);
          }
        }
        if (sub_100041C28(v7[5]))
        {
          BOOL v78 = v40 >= v239 || v40 == 0;
          if (v78) {
            uint64_t v79 = v239;
          }
          else {
            uint64_t v79 = v40;
          }
          uint64_t v239 = v79;
          if (v39 >= v228 || v39 == 0) {
            uint64_t v81 = v228;
          }
          else {
            uint64_t v81 = v39;
          }
          uint64_t v228 = v81;
        }
        if (*(unsigned char *)(*(void *)(v7[5] + 8) + 273))
        {
          if (qword_1009F8158 != -1) {
            dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
          }
          if (sub_100053DA0((uint64_t)off_1009F8150))
          {
            unsigned int v82 = v220;
            if (v220)
            {
              int v83 = v219;
              if ((int)(v220 / v219) < (int)(v228 / v239))
              {
                int v83 = v239;
                unsigned int v82 = v228;
              }
              unsigned int v220 = v82;
              LODWORD(v219) = v83;
              BYTE4(v219) = 1;
            }
            else
            {
              LODWORD(v219) = v239;
              BYTE4(v219) = 1;
              unsigned int v220 = v228;
            }
          }
        }
      }
      else
      {
        int v84 = *(_DWORD *)(v7[5] + 96);
        uint64_t v85 = (int)v227 >= v84 ? v84 : v227;
        uint64_t v227 = v85;
      }
      uint64_t v86 = v7[5];
      if (*(unsigned char *)(*(void *)(v86 + 8) + 3)) {
        BYTE4(v226) |= *(_DWORD *)(a1 + 1964) == 2;
      }
      char v87 = sub_10003AE40(v86);
      int v88 = v225;
      if (byte_100A14715) {
        int v88 = 0;
      }
      if (v88 == 1) {
        break;
      }
LABEL_141:
      v230 |= v87;
      if (v229) {
        int v229 = sub_10003B134(v7[5]);
      }
      else {
        int v229 = 0;
      }
LABEL_144:
      __int16 v95 = v41[269];
      sub_10003AE4C(v7[4], (uint64_t)__p);
      int v96 = __p[23];
      int v97 = *(unsigned char **)__p;
      id v98 = [v41[269] defaultCStringEncoding];
      if (v96 >= 0) {
        uint64_t v99 = __p;
      }
      else {
        uint64_t v99 = v97;
      }
      unsigned int v100 = [v95 stringWithCString:v99 encoding:v98];
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      unint64_t v101 = v41[269];
      uint64_t v102 = v7[5];
      uint64_t v103 = *(unsigned __int8 *)(*(void *)(v102 + 8) + 3);
      uint64_t v104 = sub_10003AE34(v102);
      unsigned int v105 = sub_10003B140(v7[5]);
      id v106 = [v101 stringWithFormat:@"[%@] AP:%d AD:%d(%d/%d) AS:%d RAS:%d DMN:%d FG:%d ADVBF:%d pBT:%d", v100, v103, v104, v40, v39, v236, v105, *(unsigned __int8 *)(v7[5] + 81) == 32, *(unsigned __int8 *)(v7[5] + 81) == 16, sub_10003AE20(v7[5]), v232 & 1];
      [v237 addObject:v106];

LABEL_150:
      if (*(void *)&v253[72])
      {
        *(void *)&v253[80] = *(void *)&v253[72];
        operator delete(*(void **)&v253[72]);
      }
      *(void *)std::string __p = &v253[48];
      sub_100035EAC((void ***)__p);
      id v107 = (void *)v7[1];
      uint64_t v9 = v238;
      uint64_t v11 = v239;
      id v8 = &xpc_activity_set_state_ptr;
      if (v107)
      {
        do
        {
          __int16 v108 = v107;
          id v107 = (void *)*v107;
        }
        while (v107);
      }
      else
      {
        do
        {
          __int16 v108 = (void *)v7[2];
          BOOL v78 = *v108 == (void)v7;
          dispatch_time_t v7 = v108;
        }
        while (!v78);
      }
      dispatch_time_t v7 = v108;
      if (v108 == (void *)(a1 + 2048)) {
        goto LABEL_161;
      }
    }
    if ((sub_100040DF4(a1, v7[5]) & 1) == 0)
    {
      if (!*(unsigned char *)(*(void *)(v7[5] + 8) + 200))
      {
LABEL_123:
        if (byte_100A14716 || sub_100040774(a1, v7[5])) {
          LODWORD(v226) = v221 | v232;
        }
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
        }
        uint64_t v90 = sub_1000400A8();
        if ((v232 & 1) == 0)
        {
LABEL_136:
          int v232 = 0;
          goto LABEL_139;
        }
        int v91 = v90 & 0xFFFFFFFD;
        if (v90 == 2)
        {
          uint64_t v92 = sub_10003FB34();
          uint64_t v90 = (*(uint64_t (**)(uint64_t))(*(void *)v92 + 2656))(v92);
          if (v91 == 1) {
            char v93 = 0;
          }
          else {
            char v93 = v90;
          }
          if ((v93 & 1) == 0) {
            goto LABEL_134;
          }
        }
        else if (v91 == 1)
        {
LABEL_134:
          LODWORD(v226) = v221 & v226;
          int v94 = qword_100A19E90;
          uint64_t v90 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT);
          int v232 = 0;
          if ((v90 & 1) == 0) {
            goto LABEL_139;
          }
          *(_WORD *)std::string __p = 0;
          _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization is not enabled with HIDs connected.", __p, 2u);
          goto LABEL_136;
        }
        int v232 = 1;
LABEL_139:
        if (*(unsigned char *)(a1 + 4384)) {
          v222 |= sub_1006EC450(v90, v7[5]);
        }
        goto LABEL_141;
      }
      int v89 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v89, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization for double boost with allowed use cases.", __p, 2u);
      }
    }
    int v232 = 1;
    goto LABEL_123;
  }
  BOOL v231 = 0;
  int v232 = 0;
  LOBYTE(v222) = 0;
  char v234 = 0;
  uint64_t v219 = 0;
  unsigned int v220 = 0;
  LOBYTE(v10) = 0;
  uint64_t v228 = 300;
  uint64_t v11 = 30;
  uint64_t v226 = 0;
  uint64_t v227 = 3;
  int v229 = 1;
  char v230 = 0;
LABEL_161:
  [v8[269] stringWithFormat:@"AD:%d AS:%d MSL:%d (%d/%d) PSV:%d", v10 & 1, v231, v227, v11, v228, *v9];
  id obja = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v109 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v110 = *(void *)(a1 + 2056);
    *(_DWORD *)long long v253 = 134218242;
    *(void *)&v253[4] = v110;
    *(_WORD *)&v253[12] = 2114;
    *(void *)&v253[14] = obja;
    _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "ScanParams: numScanAgents %lu, combined params %{public}@", v253, 0x16u);
  }
  BOOL v242 = v234 != 0;
  uint64_t v240 = v11;
  int v111 = [v237 count];
  if (v111 >= -1)
  {
    uint64_t v112 = 0;
    int v113 = v111 - 1;
    uint64_t v114 = ((v111 - 1) / 3 + 1);
    int v115 = 2;
    int v116 = 1;
    do
    {
      if (v115 >= v113) {
        int v117 = v113;
      }
      else {
        int v117 = v115;
      }
      int v118 = [v237 subarrayWithRange:v112, v117 + v116];
      int v119 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        id v120 = [v118 componentsJoinedByString:@"|"];
        *(_DWORD *)long long v253 = 138543362;
        *(void *)&v253[4] = v120;
        _os_log_impl((void *)&_mh_execute_header, v119, OS_LOG_TYPE_DEFAULT, "ScanParams: %{public}@", v253, 0xCu);
      }
      v115 += 3;
      v116 -= 3;
      v112 += 3;
      --v114;
    }
    while (v114);
  }
  switch((int)v227)
  {
    case 1:
      unsigned __int16 v121 = 64;
      goto LABEL_174;
    case 2:
      unsigned __int16 v121 = 96;
LABEL_174:
      *((_DWORD *)v238 + 1) = v121 | 0x300000;
      if (!v231) {
        goto LABEL_179;
      }
      goto LABEL_178;
    case 3:
      *((_DWORD *)v238 + 1) = 3146208;
      goto LABEL_177;
    case 4:
      *((_DWORD *)v238 + 1) = 3147273;
      unsigned __int8 *v238 = 1;
      if (!v231) {
        goto LABEL_179;
      }
      goto LABEL_178;
    default:
LABEL_177:
      if (v231) {
LABEL_178:
      }
        unsigned __int8 *v238 = 0;
LABEL_179:
      unsigned int v122 = *((unsigned __int16 *)v238 + 2);
      unsigned int v123 = *((unsigned __int16 *)v238 + 3);
      if ((int)(v228 / v240) <= (int)(v122 / v123))
      {
        unsigned int v122 = (int)((double)(int)v228 / 0.625);
        *((_WORD *)v238 + 2) = v122;
        unsigned int v123 = (int)((double)(int)v240 / 0.625);
        *((_WORD *)v238 + 3) = v123;
      }
      *(_DWORD *)std::string __p = 100;
      BOOL v124 = (v219 & 0x100000000) != 0 && v220 / v219 == v122 / v123;
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
      }
      if (sub_100053C90(off_1009F8150)) {
        goto LABEL_196;
      }
      unsigned int v125 = 100 * v123 / v122;
      if (v125 < 0x32)
      {
        if (v125 < 0x21) {
          goto LABEL_196;
        }
        uint64_t v130 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          LOWORD(v131) = *((_WORD *)v238 + 3);
          LOWORD(v132) = *((_WORD *)v238 + 2);
          *(_DWORD *)long long v253 = 134219264;
          *(double *)&v253[4] = (double)v131 * 0.625;
          *(_WORD *)&v253[12] = 2048;
          *(double *)&v253[14] = (double)v132 * 0.625;
          *(_WORD *)&v253[22] = 1024;
          *(_DWORD *)&v253[24] = v125;
          *(_WORD *)&v253[28] = 2048;
          *(void *)&v253[30] = 0x403E000000000000;
          *(_WORD *)&v253[38] = 2048;
          *(void *)&v253[40] = 0x4056800000000000;
          *(_WORD *)&v253[48] = 1024;
          *(_DWORD *)&v253[50] = v227;
          _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_INFO, "Limiting scan duty cycle based on other activities from %.2fms/%.2fms (scanPercentage %d)to %.2fms/%.2fms minScanLevel %d", v253, 0x36u);
        }
        __int16 v129 = 144;
      }
      else
      {
        __int16 v126 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          LOWORD(v127) = *((_WORD *)v238 + 3);
          LOWORD(v128) = *((_WORD *)v238 + 2);
          *(_DWORD *)long long v253 = 134219264;
          *(double *)&v253[4] = (double)v127 * 0.625;
          *(_WORD *)&v253[12] = 2048;
          *(double *)&v253[14] = (double)v128 * 0.625;
          *(_WORD *)&v253[22] = 1024;
          *(_DWORD *)&v253[24] = v125;
          *(_WORD *)&v253[28] = 2048;
          *(void *)&v253[30] = 0x403E000000000000;
          *(_WORD *)&v253[38] = 2048;
          *(void *)&v253[40] = 0x404E000000000000;
          *(_WORD *)&v253[48] = 1024;
          *(_DWORD *)&v253[50] = v227;
          _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_INFO, "Limiting scan duty cycle based on other activities from %.2fms/%.2fms (scanPercentage %d)to %.2fms/%.2fms minScanLevel %d", v253, 0x36u);
        }
        __int16 v129 = 96;
      }
      *((_WORD *)v238 + 2) = v129;
      *((_WORD *)v238 + 3) = 48;
LABEL_196:
      if (v231 || (v10 & 1) == 0)
      {
        BOOL v133 = !v231;
        unsigned __int8 *v238 = v133;
      }
      else
      {
        BOOL v133 = 0;
      }
      v238[3] = v133;
      if ((v224 | v223) == 1
        && (*((unsigned __int16 *)v238 + 3) == 0xFFFF || !*((_WORD *)v238 + 3))
        && sub_1000373BC(a1))
      {
        *((_WORD *)v238 + 2) = 4800;
      }
      unsigned int v134 = *((unsigned __int16 *)v238 + 3);
      unsigned int v135 = *((unsigned __int16 *)v238 + 2);
      if (*(unsigned char *)(a1 + 4384))
      {
        double v136 = (double)v134 * 100.0 / (double)v135;
        id v137 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long v253 = 67110144;
          *(_DWORD *)&v253[4] = v134;
          *(_WORD *)&v253[8] = 1024;
          *(_DWORD *)&v253[10] = v135;
          *(_WORD *)&v253[14] = 2048;
          *(double *)&v253[16] = (double)v134 * 100.0 / (double)v135;
          *(_WORD *)&v253[24] = 2048;
          *(void *)&v253[26] = 0x4008DAB7EC1DD343;
          *(_WORD *)&v253[34] = 1024;
          *(_DWORD *)&v253[36] = v136 > 3.10679612;
          _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "Checking if throttling down our scan during SDP is needed window:%d interval:%d dutyCycle:%f throttledDutyCycle:%f needToThrottle:%d", v253, 0x28u);
        }
        if (v136 <= 3.10679612)
        {
          unsigned int v134 = *((unsigned __int16 *)v238 + 3);
          unsigned int v135 = *((unsigned __int16 *)v238 + 2);
        }
        else
        {
          id v138 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v253 = 0;
            _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "Throttling down our scan during SDP", v253, 2u);
          }
          *((_DWORD *)v238 + 1) = 3147273;
          if (v222)
          {
            *(_DWORD *)std::string __p = 72745216;
            BOOL v124 = 1;
          }
          unsigned int v134 = 48;
          unsigned int v135 = 1545;
        }
      }
      if (100 * v134 / v135 < 0x1E)
      {
        if ((v232 | v226))
        {
          id v139 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
          {
            int v140 = "No";
            if (v232) {
              uint64_t v141 = "Yes";
            }
            else {
              uint64_t v141 = "No";
            }
            *(_DWORD *)long long v253 = 136315650;
            *(void *)&v253[4] = v141;
            if (v226) {
              int v140 = "Yes";
            }
            *(_WORD *)&v253[12] = 2080;
            *(void *)&v253[14] = v140;
            *(_WORD *)&v253[22] = 1024;
            *(_DWORD *)&v253[24] = 100 * v134 / v135;
            _os_log_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_DEFAULT, "Do not prioritize scanning over BT %s WiFi %s for scan duty cycle %u.", v253, 0x1Cu);
            unsigned int v134 = *((unsigned __int16 *)v238 + 3);
            unsigned int v135 = *((unsigned __int16 *)v238 + 2);
          }
        }
      }
      else
      {
        v238[24] = v232 & 1;
        v238[25] = v226 & 1;
      }
      int v142 = v238;
      if (v135 != 48 && v135 && v134 && v134 == v135)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
        {
          sub_100796768(v135);
          int v142 = v238;
        }
        *((_DWORD *)v142 + 1) = 3145776;
      }
      if (*v142) {
        BOOL v143 = v124;
      }
      else {
        BOOL v143 = 0;
      }
      if (!v143)
      {
        __p[0] = 0;
        *(_WORD *)&__p[2] = 0;
      }
      sub_100054BEC(a1, v142, v224, v223, v230 & 1, v242 & v229, (uint64_t)__p, 0);
      uint64_t v144 = sub_10003FB34();
      if ((*(unsigned int (**)(uint64_t, void, void))(*(void *)v144 + 2672))(v144, *((unsigned __int16 *)v142 + 2), *((unsigned __int16 *)v142 + 3)))
      {
        v142[25] = 1;
      }
      if (*(unsigned char *)(a1 + 2246)) {
        *int v142 = *(unsigned char *)(a1 + 2247);
      }
      uint64_t v145 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v146 = *((unsigned __int16 *)v142 + 3);
        __int16 v147 = v142;
        unsigned int v148 = *((unsigned __int16 *)v142 + 2);
        unsigned int v149 = *((unsigned __int16 *)v147 + 4);
        unsigned int v150 = *((unsigned __int16 *)v147 + 6);
        unsigned int v151 = *((unsigned __int16 *)v147 + 5);
        int v152 = v147[14];
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
        }
        int v153 = *((unsigned __int8 *)off_1009F8150 + 204);
        BOOL v154 = sub_100053C90(off_1009F8150);
        unsigned __int16 v155 = "unspported";
        uint64_t v156 = "supported";
        if (v223) {
          unsigned __int16 v155 = "supported";
        }
        int v157 = *(unsigned __int8 *)(a1 + 144);
        int v158 = "concurrent";
        int v159 = *v238;
        *(_DWORD *)long long v253 = 134223106;
        if (!v152) {
          int v158 = "non-concurrent";
        }
        int v160 = v238[3];
        uint64_t v161 = *(void *)(a1 + 2344);
        int v162 = v238[24];
        if (!v224) {
          uint64_t v156 = "unsupported";
        }
        int v163 = v238[25];
        *(double *)&v253[4] = (double)v146 * 0.625;
        *(_WORD *)&v253[12] = 2048;
        BOOL v78 = v159 == 0;
        *(double *)&v253[14] = (double)v148 * 0.625;
        long long v164 = "passive";
        *(_WORD *)&v253[22] = 2048;
        if (v78) {
          long long v164 = "active";
        }
        *(double *)&v253[24] = (double)v149 * 0.625;
        BOOL v78 = v160 == 0;
        *(_WORD *)&v253[32] = 2048;
        long long v165 = "Disabled";
        *(double *)&v253[34] = (double)v148 * 0.625;
        if (!v78) {
          long long v165 = "Enabled";
        }
        *(void *)&v253[44] = v156;
        long long v166 = "Y";
        *(_WORD *)&v253[42] = 2080;
        *(_WORD *)&v253[52] = 2048;
        if (!v161) {
          long long v166 = "N";
        }
        *(double *)&v253[54] = (double)v150 * 0.625;
        *(_WORD *)&v253[62] = 2048;
        *(double *)&v253[64] = (double)v151 * 0.625;
        *(_WORD *)&v253[72] = 2080;
        *(void *)&v253[74] = v158;
        *(_WORD *)&v253[82] = 2080;
        *(void *)&v253[84] = v155;
        *(_WORD *)&v253[92] = 1024;
        *(_DWORD *)&v253[94] = v240;
        *(_WORD *)&v253[98] = 1024;
        *(_DWORD *)&v253[100] = v228;
        *(_WORD *)long long v254 = 1024;
        *(_DWORD *)&v254[2] = v153;
        *(_WORD *)long long v255 = 1024;
        *(_DWORD *)&v255[2] = v154;
        __int16 v256 = 1024;
        int v257 = BYTE4(v226) & 1;
        __int16 v258 = 1024;
        int v259 = v157;
        __int16 v260 = 2082;
        long long v261 = v164;
        __int16 v262 = 2080;
        long long v263 = v165;
        __int16 v264 = 1024;
        int v265 = v227;
        __int16 v266 = 2080;
        v267 = v166;
        __int16 v268 = 1024;
        int v269 = v162;
        __int16 v270 = 1024;
        int v271 = v163;
        _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_DEFAULT, "Returning scan parameters: Main:%.2fms/%.2fms LP:%.2fms/%.2fms(%s) SC:%.2fms/%.2fms/%s(%s) Dm:(m:%d/%d) Cond:%d:%d:%d Sc:%d (%{public}s) Dupfilter:%s minScanLevel:%d ENAssertion:%s Pri:%d/%d", v253, 0xB0u);
      }
      if (*(unsigned char *)(a1 + 2222))
      {
        unsigned int v167 = *(unsigned __int16 *)(a1 + 2224);
        *((_WORD *)v238 + 2) = v167;
        unsigned int v168 = *(unsigned __int16 *)(a1 + 2226);
        *((_WORD *)v238 + 3) = v168;
        unsigned int v169 = *(unsigned __int16 *)(a1 + 2228);
        *((_WORD *)v238 + 4) = v169;
        unsigned __int16 v170 = *(unsigned char *)(a1 + 2230) ? *(_WORD *)(a1 + 2232) : 0;
        unsigned __int16 v171 = *(unsigned char *)(a1 + 2230) ? 0 : *(_WORD *)(a1 + 2232);
        *((_WORD *)v238 + 6) = v170;
        *((_WORD *)v238 + 5) = v171;
        int v172 = *(unsigned __int8 *)(a1 + 2234);
        v238[14] = v172;
        BOOL v173 = *(unsigned char *)(a1 + 2235) && *(unsigned char *)(a1 + 2238) != 0;
        v238[18] = v173;
        int v174 = *(unsigned char *)(a1 + 2236) ? *(unsigned __int16 *)(a1 + 2240) : 0;
        *((_WORD *)v238 + 10) = v174;
        int v175 = *(unsigned char *)(a1 + 2237) ? *(unsigned __int16 *)(a1 + 2242) : 0;
        *((_WORD *)v238 + 11) = v175;
        long long v176 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long v253 = 67112450;
          long long v177 = "Yes";
          *(_DWORD *)&v253[4] = v167;
          *(_WORD *)&v253[8] = 2048;
          if (v172) {
            long long v178 = "Yes";
          }
          else {
            long long v178 = "No";
          }
          *(double *)&v253[10] = (double)v167 * 0.625;
          *(_WORD *)&v253[18] = 1024;
          *(_DWORD *)&v253[20] = v168;
          if (!v173) {
            long long v177 = "No";
          }
          *(_WORD *)&v253[24] = 1024;
          *(_DWORD *)&v253[26] = v169;
          *(_WORD *)&v253[30] = 1024;
          *(_DWORD *)&v253[32] = v170;
          *(_WORD *)&v253[36] = 1024;
          *(_DWORD *)&v253[38] = v171;
          *(_WORD *)&v253[42] = 2048;
          *(double *)&v253[44] = (double)v168 * 0.625;
          *(_WORD *)&v253[52] = 2048;
          *(double *)&v253[54] = (double)v169 * 0.625;
          *(_WORD *)&v253[62] = 2048;
          *(double *)&v253[64] = (double)v170 * 0.625;
          *(_WORD *)&v253[72] = 2048;
          *(double *)&v253[74] = (double)v171 * 0.625;
          *(_WORD *)&v253[82] = 2080;
          *(void *)&v253[84] = v178;
          *(_WORD *)&v253[92] = 2080;
          *(void *)&v253[94] = v177;
          *(_WORD *)&v253[102] = 1024;
          *(_DWORD *)long long v254 = v174;
          *(_WORD *)&v254[4] = 1024;
          *(_DWORD *)long long v255 = v175;
          _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_DEFAULT, "Returning scan parameters (overridden with ScanCore) Interval %d(%.2fms) Window %d/%d/%d/%d(%.2fms/%.2fms/%.2fms/%.2fms) Concurrent %s Compensation %s percent %d query %d", v253, 0x72u);
        }
      }
      int v179 = *((unsigned __int16 *)v238 + 3);
      unsigned int v180 = *((unsigned __int16 *)v238 + 2);
      long long v181 = +[NSMutableDictionary dictionary];
      long long v182 = +[NSNumber numberWithBool:*v238];
      [v181 setObject:v182 forKeyedSubscript:@"scanParams.passive"];

      long long v183 = +[NSNumber numberWithBool:v238[1]];
      [v181 setObject:v183 forKeyedSubscript:@"scanParams.limited"];

      char v184 = +[NSNumber numberWithBool:v238[3]];
      [v181 setObject:v184 forKeyedSubscript:@"scanParams.filterDups"];

      LOWORD(v185) = *((_WORD *)v238 + 2);
      long long v186 = +[NSNumber numberWithDouble:(double)v185 * 0.625];
      [v181 setObject:v186 forKeyedSubscript:@"scanParams.interval"];

      LOWORD(v187) = *((_WORD *)v238 + 3);
      long long v188 = +[NSNumber numberWithDouble:(double)v187 * 0.625];
      [v181 setObject:v188 forKeyedSubscript:@"scanParams.window"];

      LOWORD(v189) = *((_WORD *)v238 + 4);
      int v190 = +[NSNumber numberWithDouble:(double)v189 * 0.625];
      [v181 setObject:v190 forKeyedSubscript:@"scanParams.windowLPCore"];

      LOWORD(v191) = *((_WORD *)v238 + 5);
      unint64_t v192 = +[NSNumber numberWithDouble:(double)v191 * 0.625];
      [v181 setObject:v192 forKeyedSubscript:@"scanParams.windowScanCoreELNABypass"];

      LOWORD(v193) = *((_WORD *)v238 + 6);
      int v194 = +[NSNumber numberWithDouble:(double)v193 * 0.625];
      [v181 setObject:v194 forKeyedSubscript:@"scanParams.windowScanCoreELNAOn"];

      uint64_t v195 = +[NSNumber numberWithBool:v238[14]];
      [v181 setObject:v195 forKeyedSubscript:@"scanParams.concurrencyMode"];

      long long v196 = +[NSNumber numberWithUnsignedChar:v238[15]];
      [v181 setObject:v196 forKeyedSubscript:@"scanParams.scanningPhys"];

      int v197 = +[NSNumber numberWithBool:v238[16]];
      [v181 setObject:v197 forKeyedSubscript:@"scanParams.retainDuplicates"];

      int v198 = +[NSNumber numberWithUnsignedChar:v238[17]];
      [v181 setObject:v198 forKeyedSubscript:@"scanParams.priorityConfig"];

      long long v199 = +[NSNumber numberWithBool:v238[18]];
      [v181 setObject:v199 forKeyedSubscript:@"scanParams.isScanCoreCompensated"];

      int v200 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)v238 + 10)];
      [v181 setObject:v200 forKeyedSubscript:@"scanParams.scanCoreCompensationPercent"];

      __int16 v201 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)v238 + 11)];
      [v181 setObject:v201 forKeyedSubscript:@"scanParams.scanCoreCoexQueryPeriod"];

      int v202 = +[NSNumber numberWithBool:v238[24]];
      [v181 setObject:v202 forKeyedSubscript:@"scanParams.isPrioritizedOverBT"];

      long long v203 = +[NSNumber numberWithBool:v238[25]];
      [v181 setObject:v203 forKeyedSubscript:@"scanParams.isPrioritizedOverWiFi"];

      int v204 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 144)];
      [v181 setObject:v204 forKeyedSubscript:@"fScreenState"];

      __int16 v205 = +[NSNumber numberWithInt:v228];
      [v181 setObject:v205 forKeyedSubscript:@"daemonInterval"];

      int v206 = +[NSNumber numberWithInt:v240];
      [v181 setObject:v206 forKeyedSubscript:@"daemonWindow"];

      long long v207 = +[NSNumber numberWithInt:v227];
      [v181 setObject:v207 forKeyedSubscript:@"minScanLevel"];

      int v208 = +[NSNumber numberWithUnsignedInt:100 * v179 / v180];
      [v181 setObject:v208 forKeyedSubscript:@"scanPercentage"];

      __int16 v209 = +[NSNumber numberWithBool:BYTE4(v226) & 1];
      [v181 setObject:v209 forKeyedSubscript:@"allowInPause"];

      int v210 = +[NSNumber numberWithBool:v224];
      [v181 setObject:v210 forKeyedSubscript:@"scanLPCoreEnable"];

      char v211 = +[NSNumber numberWithBool:v223];
      [v181 setObject:v211 forKeyedSubscript:@"isScanCoreEnabled"];

      int v212 = +[NSNumber numberWithBool:v242 & v229];
      [v181 setObject:v212 forKeyedSubscript:@"isRangeScan"];

      __int16 v213 = +[NSNumber numberWithBool:v230 & 1];
      [v181 setObject:v213 forKeyedSubscript:@"isPriorityCritical"];

      int v214 = +[NSNumber numberWithBool:v232 & 1];
      [v181 setObject:v214 forKeyedSubscript:@"isPrioritizedOverBT"];

      __int16 v215 = +[NSNumber numberWithBool:v226 & 1];
      [v181 setObject:v215 forKeyedSubscript:@"isPrioritizedOverWiFi"];

      int v216 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 1964)];
      [v181 setObject:v216 forKeyedSubscript:@"fObserverState"];

      [v235 setObject:v181 forKeyedSubscript:@"Controller"];
      v245[0] = _NSConcreteStackBlock;
      v245[1] = 3221225472;
      v245[2] = sub_1006EF054;
      v245[3] = &unk_1009BF508;
      id v217 = v235;
      id v246 = v217;
      sub_100048744((os_unfair_lock_s *)(a1 + 1872), v245);

      return 1;
  }
}

void sub_1006EECA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *a53)
{
  sub_1000A7FA4((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t sub_1006EF054(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(void *)(a1 + 32));
}

uint64_t sub_1006EF084(uint64_t a1, unsigned int a2, int a3)
{
  uint64_t result = 7;
  if (a2 && a3)
  {
    unsigned int v4 = 100 * a3 / a2;
    if (v4 <= 0x4B)
    {
      if (v4 <= 0x32)
      {
        if (v4 <= 0x22)
        {
          if (v4 <= 0xA)
          {
            if (v4 <= 4)
            {
              if (v4 > 1) {
                return 5;
              }
              else {
                return 6;
              }
            }
            else
            {
              return 4;
            }
          }
          else
          {
            return 3;
          }
        }
        else
        {
          return 2;
        }
      }
      else
      {
        return 1;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_1006EF0FC(uint64_t a1)
{
  uint64_t v111 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v111 + 2248))
  {
    uint64_t v2 = sub_10003FB34();
    int v105 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2776))(v2);
  }
  else
  {
    int v105 = 0;
  }
  if ([*(id *)(v111 + 4368) count] && *(unsigned char *)(a1 + 40))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
      sub_100796A68();
    }
    long long v133 = 0u;
    long long v134 = 0u;
    long long v131 = 0u;
    long long v132 = 0u;
    id obj = *(id *)(v111 + 4368);
    id v3 = [obj countByEnumeratingWithState:&v131 objects:v144 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v132;
LABEL_10:
      uint64_t v5 = 0;
      while (1)
      {
        if (*(void *)v132 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v131 + 1) + 8 * v5);
        uint64_t v7 = sub_10003FB34();
        id v8 = v6;
        if ((*(unsigned int (**)(uint64_t, id, void, uint64_t))(*(void *)v7 + 608))(v7, [v8 bytes], (unsigned __int16)objc_msgSend(v8, "length"), 240))
        {
          break;
        }
        if (v3 == (id)++v5)
        {
          id v3 = [obj countByEnumeratingWithState:&v131 objects:v144 count:16];
          if (v3) {
            goto LABEL_10;
          }
          break;
        }
      }
    }

    uint64_t v9 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 632))(v9, 1);
    char v10 = 1;
  }
  else
  {
    char v10 = 0;
  }
  uint64_t v11 = *(void *)(v111 + 4320);
  if (v11)
  {
    uint64_t v12 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
      sub_1007969FC(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    if (v105) {
      __int16 v19 = malloc_type_malloc(8 * *(void *)(v111 + 4320), 0x100004000313F17uLL);
    }
    else {
      __int16 v19 = 0;
    }
    int v20 = *(void **)(v111 + 4304);
    if (v20 != (void *)(v111 + 4312))
    {
      int v21 = 0;
      if (v19) {
        int v22 = v105;
      }
      else {
        int v22 = 0;
      }
      do
      {
        if (v22)
        {
          v19[v21++] = v20[4];
        }
        else
        {
          uint64_t v23 = sub_10003FB34();
          (*(void (**)(uint64_t, void))(*(void *)v23 + 768))(v23, v20[4]);
        }
        unsigned int v24 = (void *)v20[1];
        if (v24)
        {
          do
          {
            id v25 = v24;
            unsigned int v24 = (void *)*v24;
          }
          while (v24);
        }
        else
        {
          do
          {
            id v25 = (void *)v20[2];
            BOOL v26 = *v25 == (void)v20;
            int v20 = v25;
          }
          while (!v26);
        }
        int v20 = v25;
      }
      while (v25 != (void *)(v111 + 4312));
    }
    int v27 = v105;
    if (!v19) {
      int v27 = 0;
    }
    if (v27 == 1)
    {
      unint64_t v28 = *(void *)(v111 + 4320);
      if (v28)
      {
        uint64_t v29 = 0;
        int v30 = 0;
        do
        {
          int v31 = v28 - v30;
          if (v31 >= 25) {
            int v32 = 25;
          }
          else {
            int v32 = v31;
          }
          uint64_t v33 = sub_10003FB34();
          (*(void (**)(uint64_t, void, void *))(*(void *)v33 + 792))(v33, v32, &v19[v29]);
          v30 += v32;
          uint64_t v29 = v30;
          unint64_t v28 = *(void *)(v111 + 4320);
        }
        while (v28 > v30);
      }
      free(v19);
    }
    char v10 = 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_100796990();
  }
  if ([*(id *)(v111 + 4352) count])
  {
    if (v105) {
      uint64_t v109 = (char *)malloc_type_malloc(62 * (void)[*(id *)(v111 + 4352) count], 0x1000040A55EBD55uLL);
    }
    else {
      uint64_t v109 = 0;
    }
    long long v129 = 0u;
    long long v130 = 0u;
    long long v127 = 0u;
    long long v128 = 0u;
    id obja = *(id *)(v111 + 4352);
    id v108 = [obja countByEnumeratingWithState:&v127 objects:v143 count:16];
    if (v108)
    {
      int v110 = 0;
      int v34 = v105;
      if (!v109) {
        int v34 = 0;
      }
      int v106 = v34;
      uint64_t v107 = *(void *)v128;
LABEL_58:
      uint64_t v35 = 0;
      while (1)
      {
        if (*(void *)v128 != v107) {
          objc_enumerationMutation(obja);
        }
        uint64_t v119 = v35;
        uint64_t v36 = *(void **)(*((void *)&v127 + 1) + 8 * v35);
        *(_OWORD *)long long buf = 0uLL;
        id v37 = [v36 objectForKeyedSubscript:@"data"];
        id v38 = [v37 bytes];
        uint64_t v39 = [v36 objectForKeyedSubscript:@"data"];
        sub_1000335D8(buf, v38, (size_t)[v39 length]);

        long long v138 = 0uLL;
        id v40 = [v36 objectForKeyedSubscript:@"mask"];
        id v41 = [v40 bytes];
        int v42 = [v36 objectForKeyedSubscript:@"mask"];
        sub_1000335D8(&v138, v41, (size_t)[v42 length]);

        uint64_t v43 = [v36 objectForKeyedSubscript:@"rssi"];
        unsigned __int8 v44 = [v43 intValue];

        unsigned int v45 = [v36 objectForKeyedSubscript:@"puckType"];
        unsigned __int8 v117 = [v45 unsignedIntValue];

        BOOL v46 = [v36 objectForKeyedSubscript:@"bypassFilterDuplicate"];
        unsigned __int8 v116 = [v46 unsignedIntValue];

        BOOL v47 = [v36 objectForKeyedSubscript:@"targetCore"];
        unsigned __int8 v115 = [v47 unsignedIntValue];

        uint64_t v48 = [v36 objectForKeyedSubscript:@"rssithresholdOrder"];
        unsigned __int8 v49 = [v48 unsignedIntValue];

        uint64_t v50 = [v36 objectForKeyedSubscript:@"matchAllDevices"];
        unsigned __int8 v51 = [v50 unsignedIntValue];

        long long v52 = [v36 objectForKeyedSubscript:@"address"];
        id v53 = [v52 unsignedLongLongValue];

        unsigned int v54 = [v36 objectForKeyedSubscript:@"report127dBm"];
        unsigned int v55 = [v54 unsignedIntValue];
        BOOL v56 = v55 != 0;

        uint64_t v57 = [v36 objectForKeyedSubscript:@"report27dBm"];
        unsigned int v58 = [v57 unsignedIntValue];
        BOOL v59 = v58 != 0;

        if (v106)
        {
          uint64_t v60 = (unsigned __int8 *)&v109[62 * v110];
          *(_OWORD *)(v60 + 7) = 0u;
          *(_WORD *)(v60 + 55) = 0;
          *(_OWORD *)(v60 + 39) = 0u;
          *(_OWORD *)(v60 + 23) = 0u;
          int v61 = (const void *)sub_10004A6E4((uint64_t)&v138);
          if ((unint64_t)sub_100045F00((uint64_t)&v138) <= 0x19) {
            size_t v62 = sub_100045F00((uint64_t)&v138);
          }
          else {
            size_t v62 = 25;
          }
          memcpy(v60 + 32, v61, v62);
          int v70 = (const void *)sub_10004A6E4((uint64_t)buf);
          if ((unint64_t)sub_100045F00((uint64_t)buf) <= 0x19)
          {
            size_t v72 = sub_100045F00((uint64_t)buf);
            unsigned __int8 v71 = v44;
          }
          else
          {
            unsigned __int8 v71 = v44;
            size_t v72 = 25;
          }
          memcpy(v60 + 7, v70, v72);
          *uint64_t v60 = v51;
          uint64_t v73 = &v109[62 * v110];
          *(_DWORD *)(v73 + 1) = 0;
          *(_WORD *)(v73 + 5) = 0;
          v73[57] = v117;
          v73[58] = v71;
          v73[59] = v116;
          v73[60] = v115;
          char v74 = v49 | 2;
          if (v55) {
            char v74 = v49;
          }
          if (!v58) {
            v74 |= 4u;
          }
          v73[61] = v74;
          ++v110;
          int v69 = 9;
        }
        else
        {
          signed __int8 v63 = v44;
          uint64_t v64 = sub_10003FB34();
          uint64_t v65 = sub_10004A6E4((uint64_t)buf);
          unsigned __int16 v66 = sub_100045F00((uint64_t)buf);
          uint64_t v67 = sub_10004A6E4((uint64_t)&v138);
          unsigned __int16 v68 = sub_100045F00((uint64_t)&v138);
          BYTE4(v104) = v59;
          BYTE3(v104) = v56;
          BYTE2(v104) = v49;
          BYTE1(v104) = v115;
          LOBYTE(v104) = v116;
          if ((*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t, void, void, void, void, id, uint64_t))(*(void *)v64 + 680))(v64, v65, v66, v67, v68, v63, v117, v51, v53, v104))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
              sub_100796964(&v125, v126);
            }
            int v69 = 8;
          }
          else
          {
            int v69 = 0;
          }
        }
        *(void *)&long long v138 = &off_100998428;
        if (*((void *)&v138 + 1)) {
          sub_1000368F4(*((atomic_uint **)&v138 + 1));
        }
        *(void *)long long buf = &off_100998428;
        if (*(void *)&buf[8]) {
          sub_1000368F4(*(atomic_uint **)&buf[8]);
        }
        if (v69 != 9 && v69) {
          break;
        }
        uint64_t v35 = v119 + 1;
        if (v108 == (id)(v119 + 1))
        {
          id v108 = [obja countByEnumeratingWithState:&v127 objects:v143 count:16];
          if (v108) {
            goto LABEL_58;
          }
          break;
        }
      }
    }

    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
      sub_1007963FC();
    }
    uint64_t v75 = sub_10003FB34();
    (*(void (**)(uint64_t, void))(*(void *)v75 + 752))(v75, *(unsigned int *)(v111 + 4376));
    int v76 = v105;
    if (!v109) {
      int v76 = 0;
    }
    if (v76 == 1)
    {
      if ([*(id *)(v111 + 4352) count])
      {
        uint64_t v77 = 0;
        int v78 = 0;
        do
        {
          if ((int)([*(id *)(v111 + 4352) count] - v78) <= 4) {
            int v79 = [*(id *)(v111 + 4352) count] - v78;
          }
          else {
            int v79 = 4;
          }
          uint64_t v80 = sub_10003FB34();
          (*(void (**)(uint64_t, void, uint64_t, char *))(*(void *)v80 + 688))(v80, v79, 25, &v109[62 * v77]);
          v78 += v79;
          uint64_t v77 = v78;
        }
        while ((unint64_t)[*(id *)(v111 + 4352) count] > v78);
      }
      free(v109);
    }
    char v10 = 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_1007968F8();
  }
  if (*(void *)(v111 + 4344) || [*(id *)(v111 + 4360) count])
  {
    uint64_t v81 = sub_10003FB34();
    (*(void (**)(uint64_t, uint64_t))(*(void *)v81 + 400))(v81, 1);
    unsigned int v82 = *(void **)(v111 + 4328);
    id v120 = (void *)(v111 + 4336);
    if (v82 != (void *)(v111 + 4336))
    {
      while (1)
      {
        uint64_t v83 = sub_10003FB34();
        uint64_t v84 = (uint64_t)v82 + 28;
        long long v141 = *(_OWORD *)((char *)v82 + 28);
        int v142 = *((_DWORD *)v82 + 11);
        if ((*(unsigned int (**)(uint64_t, long long *, void, uint64_t, uint64_t, uint64_t))(*(void *)v83 + 416))(v83, &v141, 0, 169, 1, 1))
        {
          break;
        }
        uint64_t v85 = (void *)v82[1];
        if (v85)
        {
          do
          {
            uint64_t v86 = v85;
            uint64_t v85 = (void *)*v85;
          }
          while (v85);
        }
        else
        {
          do
          {
            uint64_t v86 = (void *)v82[2];
            BOOL v26 = *v86 == (void)v82;
            unsigned int v82 = v86;
          }
          while (!v26);
        }
        unsigned int v82 = v86;
        if (v86 == v120) {
          goto LABEL_114;
        }
      }
      char v87 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100796848(v84, v87);
      }
    }
LABEL_114:
    long long v123 = 0u;
    long long v124 = 0u;
    long long v121 = 0u;
    long long v122 = 0u;
    id objb = *(id *)(v111 + 4360);
    id v88 = [objb countByEnumeratingWithState:&v121 objects:v140 count:16];
    if (v88)
    {
      uint64_t v118 = *(void *)v122;
      while (2)
      {
        for (uint64_t i = 0; i != v88; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v122 != v118) {
            objc_enumerationMutation(objb);
          }
          uint64_t v90 = *(void **)(*((void *)&v121 + 1) + 8 * i);
          long long v138 = 0uLL;
          int v139 = 0;
          id v91 = [v90 objectForKeyedSubscript:@"uuid"];
          uint64_t v92 = (int8x16_t *)[v91 bytes];
          char v93 = [v90 objectForKeyedSubscript:@"uuid"];
          sub_10071D1C4((uint64_t)&v138, v92, [v93 length]);

          if (v120 == (void *)sub_10042D258(v111 + 4328, (unsigned __int8 *)&v138))
          {
            uint64_t v95 = sub_10003FB34();
            long long v136 = v138;
            int v137 = v139;
            int v96 = [v90 objectForKeyedSubscript:@"rssi"];
            unsigned __int8 v97 = [v96 intValue];
            id v98 = [v90 objectForKeyedSubscript:@"data"];
            unsigned __int8 v99 = [v98 length];
            id v100 = [v90 objectForKeyedSubscript:@"data"];
            id v101 = [v100 bytes];
            id v102 = [v90 objectForKeyedSubscript:@"mask"];
            LOBYTE(v103) = 1;
            LODWORD(v101) = (*(uint64_t (**)(uint64_t, long long *, void, void, uint64_t, void, id, id, int))(*(void *)v95 + 424))(v95, &v136, 0, v97, 1, v99, v101, [v102 bytes], v103);

            if (v101)
            {
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
              {
                sub_1000417A8((uint64_t)&v138, buf);
                sub_10079634C();
              }
              goto LABEL_128;
            }
          }
          else
          {
            int v94 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)long long buf = 138412290;
              *(void *)&uint8_t buf[4] = v90;
              _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_INFO, "Skip adding %@ as its uuid was already added without blob/mask", buf, 0xCu);
            }
          }
        }
        id v88 = [objb countByEnumeratingWithState:&v121 objects:v140 count:16];
        if (v88) {
          continue;
        }
        break;
      }
    }
LABEL_128:

    char v10 = 1;
  }
  sub_1006F019C(v111, v10);
}

void sub_1006EFFDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

void sub_1006F019C(uint64_t a1, char a2)
{
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_100796AD4();
  }
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1006F0254;
  v5[3] = &unk_100998A58;
  _OWORD v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1006F0254(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
    sub_100796B54();
  }
  sub_1006D4FDC(v2);
  *(unsigned char *)(v2 + 4296) = 0;
  *(unsigned char *)(v2 + 1842) = *(unsigned char *)(a1 + 40);
  return sub_100055B50(v2, 1);
}

void sub_1006F02D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a2)
  {
    uint64_t v6 = *(void *)(a2 + 8);
    if (*(unsigned char *)(v6 + 288))
    {
      char v10 = +[NSMutableDictionary dictionary];
      [v10 setObject:@"Discovery" forKeyedSubscript:@"ScanType"];
      int v11 = *(_DWORD *)(*(void *)(a2 + 8) + 168);
      uint64_t v12 = +[NSString stringWithUTF8String:sub_10003E508(v11)];
      [v10 setObject:v12 forKeyedSubscript:@"CBUseCase"];

      id v47 = *(id *)(*(void *)(a2 + 8) + 152);
      uint64_t v13 = [v47 allObjects];
      uint64_t v14 = +[NSArray arrayWithArray:v13];

      uint64_t v15 = [v14 sortedArrayUsingSelector:"compare:"];

      uint64_t v16 = [v15 componentsJoinedByString:@","];
      [v10 setObject:v16 forKeyedSubscript:@"BundleID"];

      uint64_t v17 = sub_100035F54();
      uint64_t v18 = +[NSNumber numberWithBool:(*(uint64_t (**)(uint64_t))(*(void *)v17 + 840))(v17)];
      [v10 setObject:v18 forKeyedSubscript:@"IsFWBased"];

      [v10 setObject:@"NotApplicable" forKeyedSubscript:@"InitialConnScanParamsType"];
      __int16 v19 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v6 + 290)];
      [v10 setObject:v19 forKeyedSubscript:@"IsWiFiCoexCriticalProtected"];

      int v20 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v6 + 291)];
      [v10 setObject:v20 forKeyedSubscript:@"IsBTAudioProtected"];

      int v21 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v6 + 292)];
      [v10 setObject:v21 forKeyedSubscript:@"IsWiFi2_4GHzProtected"];

      if ((v11 - 65548) < 2)
      {
        uint64_t v22 = 63;
      }
      else if (v11 == 268)
      {
        uint64_t v22 = -1;
      }
      else if (v11 == 265)
      {
        uint64_t v22 = 111;
      }
      else
      {
        uint64_t v22 = 0;
      }
      uint64_t v23 = +[NSNumber numberWithUnsignedLongLong:v22];
      [v10 setObject:v23 forKeyedSubscript:@"WiFiCriticalDefinition"];

      unsigned int v24 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v6 + 304)];
      [v10 setObject:v24 forKeyedSubscript:@"ScanDurationReqMsec"];

      id v25 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v6 + 296)];
      [v10 setObject:v25 forKeyedSubscript:@"ActualScanTimeReqMsec"];

      BOOL v26 = +[NSNumber numberWithUnsignedLongLong:*(void *)(v6 + 296)];
      [v10 setObject:v26 forKeyedSubscript:@"ActualScanTimeMCReqMsec"];

      int v27 = +[NSNumber numberWithUnsignedLongLong:a5];
      [v10 setObject:v27 forKeyedSubscript:@"ScanDurationMsec"];

      unint64_t v28 = +[NSNumber numberWithUnsignedLongLong:a3];
      [v10 setObject:v28 forKeyedSubscript:@"ActualScanTimeMsec"];

      uint64_t v29 = +[NSNumber numberWithUnsignedLongLong:a4];
      [v10 setObject:v29 forKeyedSubscript:@"ActualScanTimeMCMsec"];

      unint64_t v30 = *(void *)(v6 + 304);
      if (v30) {
        unint64_t v31 = (100 * a5) / v30;
      }
      else {
        LODWORD(v31) = 0;
      }
      if (v31 <= 0x63) {
        uint64_t v32 = v31;
      }
      else {
        uint64_t v32 = 100;
      }
      unint64_t v33 = *(void *)(v6 + 296);
      if (v33)
      {
        unint64_t v34 = (100 * a3) / v33;
        BOOL v35 = v34 > 0x63;
        if (v34 <= 0x63) {
          uint64_t v36 = v34;
        }
        else {
          uint64_t v36 = 100;
        }
        unint64_t v37 = (100 * a4) / v33;
      }
      else
      {
        uint64_t v36 = 0;
        BOOL v35 = 0;
        LODWORD(v37) = 0;
      }
      if (v37 <= 0x63) {
        uint64_t v38 = v37;
      }
      else {
        uint64_t v38 = 100;
      }
      uint64_t v39 = +[NSNumber numberWithUnsignedInt:v32];
      [v10 setObject:v39 forKeyedSubscript:@"ScanDurationMsecPercentage"];

      id v40 = +[NSNumber numberWithUnsignedInt:v36];
      [v10 setObject:v40 forKeyedSubscript:@"ActualScanTimeMsecPercentage"];

      id v41 = +[NSNumber numberWithUnsignedInt:v38];
      [v10 setObject:v41 forKeyedSubscript:@"ActualScanTimeMCMsecPercentage"];

      int v42 = +[NSNumber numberWithBool:v31 > 0x63];
      [v10 setObject:v42 forKeyedSubscript:@"HasScanDurationReqMet"];

      uint64_t v43 = +[NSNumber numberWithBool:v35];
      [v10 setObject:v43 forKeyedSubscript:@"HasActualScanTimeReqMet"];

      unsigned __int8 v44 = +[NSNumber numberWithBool:v37 > 0x63];
      [v10 setObject:v44 forKeyedSubscript:@"HasActualScanTimeMCReqMet"];

      unsigned int v45 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138543362;
        unsigned __int8 v49 = v10;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Sending CloseLoopScanningStats :%{public}@", buf, 0xCu);
      }
      uint64_t v46 = sub_100050530();
      (*(void (**)(uint64_t, void *))(*(void *)v46 + 384))(v46, v10);
    }
  }
}

void sub_1006F08D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1006F098C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(a1 + 72);
  if (v3 == 2) {
    int v4 = 20;
  }
  else {
    int v4 = 1;
  }
  if (v3 == 1) {
    int v5 = 342;
  }
  else {
    int v5 = v4;
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_1006F0B80;
  v19[3] = &unk_1009BF528;
  int v19[4] = *(void *)(a1 + 40);
  int v21 = v5;
  long long v20 = *(_OWORD *)(a1 + 48);
  sub_100048744((os_unfair_lock_s *)(v2 + 1872), v19);
  uint64_t v7 = *(void **)(v2 + 2048);
  if (v7)
  {
    unint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = (void *)(v2 + 2048);
    do
    {
      unint64_t v10 = v7[4];
      BOOL v11 = v10 >= v8;
      if (v10 >= v8) {
        uint64_t v12 = v7;
      }
      else {
        uint64_t v12 = v7 + 1;
      }
      if (v11) {
        uint64_t v9 = v7;
      }
      uint64_t v7 = (void *)*v12;
    }
    while (*v12);
    if (v9 != (void *)(v2 + 2048) && v8 >= v9[4])
    {
      uint64_t v13 = v9[5];
      if (*(_DWORD *)(a1 + 72) == 1)
      {
        sub_1006F02D0(v6, v13, *(void *)(a1 + 48), *(void *)(a1 + 56), *(void *)(a1 + 64));
        unint64_t v8 = *(void *)(a1 + 40);
      }
      uint64_t v14 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v8, (uint64_t)__p);
        if (v18 >= 0) {
          uint64_t v15 = __p;
        }
        else {
          uint64_t v15 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v23 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "stopping scan for %{public}s", buf, 0xCu);
        if (v18 < 0) {
          operator delete(__p[0]);
        }
        unint64_t v8 = *(void *)(a1 + 40);
      }
      uint64_t v16 = *(void *)(v13 + 8);
      *(_DWORD *)(v16 + 188) = 0;
      *(_DWORD *)(v16 + 192) = 0;
      sub_1006E1A9C(v2, v8, 1, 1, 0);
    }
  }
}

uint64_t sub_1006F0B80(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)a2 + 56))(a2, *(void *)(a1 + 32), *(unsigned int *)(a1 + 56), *(void *)(a1 + 40), *(void *)(a1 + 48));
}

void sub_1006F0BB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
}

uint64_t sub_1006F0BC0(uint64_t result, unint64_t a2, uint64_t a3)
{
  int v3 = *(void **)(result + 2048);
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v6 = result + 2048;
    do
    {
      unint64_t v7 = v3[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = v3;
      }
      else {
        uint64_t v9 = v3 + 1;
      }
      if (v8) {
        uint64_t v6 = (uint64_t)v3;
      }
      int v3 = (void *)*v9;
    }
    while (*v9);
    if (v6 != result + 2048 && *(void *)(v6 + 32) <= a2)
    {
      uint64_t v10 = *(void *)(v6 + 40);
      if (*(void *)(v10 + 88) == a3 && !*(unsigned char *)(*(void *)(v10 + 8) + 143))
      {
        int v11 = *(_DWORD *)(v10 + 96);
        uint64_t v12 = qword_100A19E90;
        if (v11 >= 3 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT))
        {
          *(_DWORD *)std::string __p = 136446210;
          *(void *)&__p[4] = "level < kNumScanLevels";
          _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", __p, 0xCu);
          uint64_t v12 = qword_100A19E90;
        }
        BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_INFO);
        if (v13)
        {
          sub_10003AE4C(a2, (uint64_t)__p);
          uint64_t v14 = v16 >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)long long buf = 136446466;
          char v18 = v14;
          __int16 v19 = 1024;
          int v20 = v11 + 1;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is now at scan level %d", buf, 0x12u);
          if (v16 < 0) {
            operator delete(*(void **)__p);
          }
        }
        *(_DWORD *)(v10 + 96) = v11 + 1;
        if (v11 > 1) {
          *(void *)(v10 + 88) = 0;
        }
        else {
          sub_1006E30E0(v13, a2, v10);
        }
        return sub_100055B50(v5, 0);
      }
    }
  }
  return result;
}

void sub_1006F0DA8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 3256))
  {
    int v2 = *(_DWORD *)(a1 + 3248) + 1;
    *(_DWORD *)(a1 + 3248) = v2;
    int v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109120;
      v4[1] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "ScanCoreBLEConnectionScanStat: ScanCore is enabled for Connection Scan %d times", (uint8_t *)v4, 8u);
    }
  }
  *(unsigned char *)(a1 + 3256) = 1;
}

void sub_1006F0E70(uint64_t a1)
{
}

void sub_1006F0E78(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 3256))
  {
    int v2 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ScanCore is disabled for Connection Scan", v3, 2u);
    }
  }
  *(unsigned char *)(a1 + 3256) = 0;
}

void sub_1006F0EF0(uint64_t a1)
{
}

uint64_t sub_1006F0EF8(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(int *)(a1 + 1960);
    if (v5 > 4) {
      uint64_t v6 = "UNKNOWN";
    }
    else {
      uint64_t v6 = off_1009BF980[v5];
    }
    uint64_t v7 = *(int *)(a1 + 1964);
    if (v7 > 3) {
      BOOL v8 = "UNKNOWN";
    }
    else {
      BOOL v8 = off_1009BF9A8[v7];
    }
    int v21 = 136446466;
    uint64_t v22 = v6;
    __int16 v23 = 2082;
    unsigned int v24 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "pauseScans State: %{public}s, ObserverState: %{public}s", (uint8_t *)&v21, 0x16u);
  }
  int v9 = *(_DWORD *)(a1 + 1964);
  if ((v9 - 1) < 2)
  {
    uint64_t v12 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = *(int *)(a1 + 1960);
      uint64_t v14 = "UNKNOWN";
      uint64_t v15 = "UNKNOWN";
      if (v13 <= 4) {
        uint64_t v15 = off_1009BF980[v13];
      }
      if (v9 == 1) {
        uint64_t v14 = "Pausing";
      }
      if (v9 == 2) {
        uint64_t v14 = "Paused";
      }
      int v21 = 136446466;
      uint64_t v22 = v15;
      __int16 v23 = 2082;
      unsigned int v24 = v14;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Already Paused Scans State: %{public}s, ObserverState: %{public}s", (uint8_t *)&v21, 0x16u);
    }
    uint64_t v11 = 401;
  }
  else
  {
    if (v9 == 3)
    {
      uint64_t v11 = 1;
      goto LABEL_29;
    }
    if (!v9)
    {
      sub_1006E5A94((os_unfair_lock_s *)a1, 1u);
      int v10 = *(_DWORD *)(a1 + 1960);
      if (v10 == 1 || v10 == 3 && sub_1006EB3A4(a1)) {
        sub_1006E5A94((os_unfair_lock_s *)a1, 2u);
      }
    }
    uint64_t v11 = 0;
  }
  [*(id *)(a1 + 3264) addObject:v3];
  char v16 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = (const char *)[v3 UTF8String];
    char v18 = (const char *)[*(id *)(a1 + 3264) count];
    uint64_t v19 = *(void *)(a1 + 3264);
    int v21 = 136315650;
    uint64_t v22 = v17;
    __int16 v23 = 2048;
    unsigned int v24 = v18;
    __int16 v25 = 2112;
    uint64_t v26 = v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Added Paused Client: %s, Clients(Count: %lu): %@", (uint8_t *)&v21, 0x20u);
  }
LABEL_29:

  return v11;
}

void sub_1006F1198(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006F11B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 3264) removeObject:v3];
  if ([*(id *)(a1 + 3264) count])
  {
    int v4 = qword_100A19E90;
    uint64_t v5 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v6 = (const char *)[*(id *)(a1 + 3264) count];
      uint64_t v7 = *(int *)(a1 + 1960);
      if (v7 > 4) {
        BOOL v8 = "UNKNOWN";
      }
      else {
        BOOL v8 = off_1009BF980[v7];
      }
      uint64_t v12 = *(int *)(a1 + 1964);
      if (v12 > 3) {
        uint64_t v13 = "UNKNOWN";
      }
      else {
        uint64_t v13 = off_1009BF9A8[v12];
      }
      uint64_t v14 = *(void *)(a1 + 3264);
      int v19 = 134218754;
      int v20 = v6;
      __int16 v21 = 2082;
      uint64_t v22 = v8;
      __int16 v23 = 2082;
      unsigned int v24 = v13;
      __int16 v25 = 2112;
      uint64_t v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cannot Resume Scans we have %lu clients required to be paused, State: %{public}s, ObserverState: %{public}s, clients: %@", (uint8_t *)&v19, 0x2Au);
LABEL_13:
      uint64_t v5 = 0;
    }
  }
  else
  {
    [*(id *)(a1 + 3264) removeAllObjects];
    int v9 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = *(int *)(a1 + 1960);
      if (v10 > 4) {
        uint64_t v11 = "UNKNOWN";
      }
      else {
        uint64_t v11 = off_1009BF980[v10];
      }
      uint64_t v15 = *(int *)(a1 + 1964);
      if (v15 > 3) {
        char v16 = "UNKNOWN";
      }
      else {
        char v16 = off_1009BF9A8[v15];
      }
      int v19 = 136446466;
      int v20 = v11;
      __int16 v21 = 2082;
      uint64_t v22 = v16;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "resumeScans State: %{public}s, ObserverState: %{public}s", (uint8_t *)&v19, 0x16u);
    }
    unsigned int v17 = *(_DWORD *)(a1 + 1964);
    uint64_t v5 = 1;
    if (v17 >= 2 && v17 != 3)
    {
      if (v17 == 2)
      {
        sub_1006E5A94((os_unfair_lock_s *)a1, 3u);
        *(unsigned char *)(a1 + 1840) = 1;
        if ((*(_DWORD *)(a1 + 1960) | 2) == 3) {
          sub_1006E5A94((os_unfair_lock_s *)a1, 0);
        }
      }
      goto LABEL_13;
    }
  }

  return v5;
}

void sub_1006F1408(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006F1424(id a1, LeObserverListener *a2)
{
}

void sub_1006F144C(id a1, LeObserverListener *a2)
{
}

uint64_t sub_1006F1474(uint64_t a1)
{
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  sub_1000419CC((uint64_t)v12);
  uint64_t v2 = sub_10003AB28((uint64_t)v12);
  sub_10003AB28(v2);
  uint64_t v3 = sub_10003AB28((uint64_t)v12);
  uint64_t v4 = *(int *)(a1 + 1960);
  if (v4 > 4) {
    uint64_t v5 = "UNKNOWN";
  }
  else {
    uint64_t v5 = off_1009BF980[v4];
  }
  strlen(v5);
  uint64_t v6 = sub_10003AB28(v3);
  sub_10003AB28(v6);
  uint64_t v7 = sub_10003AB28((uint64_t)v12);
  uint64_t v8 = *(int *)(a1 + 1964);
  if (v8 > 3) {
    int v9 = "UNKNOWN";
  }
  else {
    int v9 = off_1009BF9A8[v8];
  }
  strlen(v9);
  uint64_t v10 = sub_10003AB28(v7);
  sub_10003AB28(v10);
  std::stringbuf::str();
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_1006F16B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006F16CC(uint64_t a1)
{
  return sub_1006F1474(a1 - 56);
}

void sub_1006F16D4(uint64_t a1)
{
  uint64_t v1 = (unsigned char *)(a1 + 4296);
  uint64_t v2 = (os_log_t *)&qword_100A19E90;
  uint64_t v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: -------------------- LE Observer ---------------------", buf, 2u);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(int *)(a1 + 1960);
    if (v4 > 4) {
      uint64_t v5 = "UNKNOWN";
    }
    else {
      uint64_t v5 = off_1009BF980[v4];
    }
    uint64_t v6 = *(int *)(a1 + 1964);
    if (v6 > 3) {
      uint64_t v7 = "UNKNOWN";
    }
    else {
      uint64_t v7 = off_1009BF9A8[v6];
    }
    int v8 = v1[90];
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v7;
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: State: %{public}s, ObserverState: %{public}s fSystemWillSleep: %d", buf, 0x1Cu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = sub_1000068A0(a1);
    uint64_t v10 = "NO";
    if (v9) {
      uint64_t v10 = "YES";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: haveAnyValidScanRequests:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v11 = sub_1006DEBD0(a1);
    uint64_t v12 = "NO";
    if (v11) {
      uint64_t v12 = "YES";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: haveAnyActiveScanRequests:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v13 = sub_1006EB3A4(a1);
    long long v14 = "NO";
    if (v13) {
      long long v14 = "YES";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: haveAnyValidScanRequestsInPaused:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v15 = sub_1006DB674(a1);
    long long v16 = "NO";
    if (v15) {
      long long v16 = "YES";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: haveAnyValidHWObjectDiscovery:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = sub_1000373BC(a1);
    long long v18 = "NO";
    if (v17) {
      long long v18 = "YES";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v18;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: objectDiscoveryHwAdvBufferOnly:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v19 = sub_100010068(a1);
    long long v20 = "NO";
    if (v19) {
      long long v20 = "YES";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v20;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: haveAnyHwAOPBTBufferRequests:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v21 = sub_100054794(a1);
    long long v22 = "NO";
    uint64_t v23 = *(void *)(a1 + 2200);
    if (v21) {
      long long v22 = "YES";
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v22;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v23;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: haveClientPowerAssertion:%{public}s, fScanningPowerAssertion:%llx", buf, 0x16u);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 2208)) {
      long long v24 = "YES";
    }
    else {
      long long v24 = "NO";
    }
    uint64_t v25 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 3472))(v25)) {
      uint64_t v26 = "YES";
    }
    else {
      uint64_t v26 = "NO";
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v24;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v26;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: configPowerAssert:%{public}s needsScanconfigPowerAssertions:%{public}s", buf, 0x16u);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v27 = "YES";
    if (*(unsigned char *)(a1 + 1840)) {
      unint64_t v28 = "YES";
    }
    else {
      unint64_t v28 = "NO";
    }
    if (!*(unsigned char *)(a1 + 1843)) {
      int v27 = "NO";
    }
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v27;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fScanFiltersNeedUpdating:%{public}s fZoneScansHaveChanged:%{public}s ", buf, 0x16u);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = "YES";
    if (*(unsigned char *)(a1 + 1848)) {
      unint64_t v30 = "YES";
    }
    else {
      unint64_t v30 = "NO";
    }
    int v31 = *(unsigned __int8 *)(a1 + 1850);
    if (*(unsigned char *)(a1 + 1849)) {
      uint64_t v32 = "YES";
    }
    else {
      uint64_t v32 = "NO";
    }
    *(_DWORD *)long long buf = 136446722;
    if (!v31) {
      uint64_t v29 = "NO";
    }
    *(void *)&uint8_t buf[4] = v30;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v32;
    *(_WORD *)&unsigned char buf[22] = 2082;
    *(void *)&unsigned char buf[24] = v29;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fHaveUUIDFilters:%{public}s fHaveZoneFilters:%{public}s fHaveRuleFilters:%{public}s", buf, 0x20u);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = *(void *)(a1 + 2128);
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v33;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fApWakeReadADVBuffersDebounceDelta:%llu", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v34 = *(_DWORD *)(a1 + 2292);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v34;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fRSSIOffset:%d", buf, 8u);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v35 = v1[88];
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v35;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fScanThrottlingRequired:%d", buf, 8u);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 2352)) {
      uint64_t v36 = "YES";
    }
    else {
      uint64_t v36 = "NO";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v36;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fShouldRetainDupsNextUpdate:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = sub_100035F54();
    int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v37 + 704))(v37);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v38;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Num of supported ObjectDiscovery HW ADV Buffers:%d", buf, 8u);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A14714) {
      uint64_t v39 = "YES";
    }
    else {
      uint64_t v39 = "NO";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v39;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: gSniffScanDebug:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19E90;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    id v40 = "YES";
    if (*v1) {
      id v41 = "YES";
    }
    else {
      id v41 = "NO";
    }
    int v42 = *(_DWORD *)(a1 + 4376);
    if (v1[84]) {
      uint64_t v43 = "YES";
    }
    else {
      uint64_t v43 = "NO";
    }
    if (v1[86]) {
      unsigned __int8 v44 = "YES";
    }
    else {
      unsigned __int8 v44 = "NO";
    }
    if (!v1[85]) {
      id v40 = "NO";
    }
    *(_DWORD *)long long buf = 136447490;
    *(void *)&uint8_t buf[4] = v41;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v42;
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&unsigned char buf[20] = v43;
    *(_WORD *)&buf[28] = 2082;
    *(void *)&buf[30] = v44;
    *(_WORD *)&unsigned char buf[38] = 2082;
    *(void *)&uint8_t buf[40] = v40;
    LOWORD(v167) = 2082;
    *(void *)((char *)&v167 + 2) = v44;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fControllerConfigInProgress:%{public}s fBypassFilterMask:%04x fGlobalDuplicateFilter:%{public}s shouldDispatchConfig():%{public}s fDebugControllerConfigDispatchSequence:%{public}s fForceDispatchInsteadOfSerialConfig:%{public}s", buf, 0x3Au);
  }
  uint64_t v45 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 8))(v45))
  {
    uint64_t v46 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "statedump: fFilterPeripherals:", buf, 2u);
    }
    id v47 = *(void **)(a1 + 4304);
    if (v47 != (void *)(a1 + 4312))
    {
      do
      {
        uint64_t v48 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          sub_1006ACF44();
          unsigned __int8 v49 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)unsigned int v151 = 136446210;
          *(void *)&v151[4] = v49;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "    %{public}s", v151, 0xCu);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
        uint64_t v50 = (void *)v47[1];
        if (v50)
        {
          do
          {
            unsigned __int8 v51 = v50;
            uint64_t v50 = (void *)*v50;
          }
          while (v50);
        }
        else
        {
          do
          {
            unsigned __int8 v51 = (void *)v47[2];
            BOOL v52 = *v51 == (void)v47;
            id v47 = v51;
          }
          while (!v52);
        }
        id v47 = v51;
      }
      while (v51 != (void *)(a1 + 4312));
    }
    id v53 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "statedump: fAllUuids:", buf, 2u);
    }
    unsigned int v54 = *(void **)(a1 + 4328);
    if (v54 != (void *)(a1 + 4336))
    {
      do
      {
        unsigned int v55 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          sub_1000417A8((uint64_t)v54 + 28, buf);
          BOOL v56 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)unsigned int v151 = 136446210;
          *(void *)&v151[4] = v56;
          _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "    %{public}s", v151, 0xCu);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
        uint64_t v57 = (void *)v54[1];
        if (v57)
        {
          do
          {
            unsigned int v58 = v57;
            uint64_t v57 = (void *)*v57;
          }
          while (v57);
        }
        else
        {
          do
          {
            unsigned int v58 = (void *)v54[2];
            BOOL v52 = *v58 == (void)v54;
            unsigned int v54 = v58;
          }
          while (!v52);
        }
        unsigned int v54 = v58;
      }
      while (v58 != (void *)(a1 + 4336));
    }
  }
  BOOL v59 = qword_100A19E90;
  if (*(_DWORD *)(a1 + 1960) == 3)
  {
    *(void *)&uint8_t buf[8] = 0;
    *(void *)long long buf = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v151 = 0;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "statedump: Scan configuration:", v151, 2u);
    }
    LOWORD(v60) = *(_WORD *)(a1 + 1972);
    snprintf((char *)buf, 0x10uLL, "%.02fms", (double)v60 * 0.625);
    int v61 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unsigned int v151 = 136446210;
      *(void *)&v151[4] = buf;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "statedump:    Interval: %{public}s", v151, 0xCu);
    }
    LOWORD(v62) = *(_WORD *)(a1 + 1974);
    snprintf((char *)buf, 0x10uLL, "%.02fms", (double)v62 * 0.625);
    BOOL v59 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)unsigned int v151 = 136446210;
      *(void *)&v151[4] = buf;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "statedump:    Window: %{public}s", v151, 0xCu);
      BOOL v59 = qword_100A19E90;
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 1968)) {
        signed __int8 v63 = "Passive";
      }
      else {
        signed __int8 v63 = "Active";
      }
      *(_DWORD *)unsigned int v151 = 136446210;
      *(void *)&v151[4] = v63;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "statedump:    Type: %{public}s", v151, 0xCu);
      BOOL v59 = qword_100A19E90;
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 1971)) {
        uint64_t v64 = "No";
      }
      else {
        uint64_t v64 = "Yes";
      }
      *(_DWORD *)unsigned int v151 = 136446210;
      *(void *)&v151[4] = v64;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "statedump:    Duplicates: %{public}s", v151, 0xCu);
      BOOL v59 = qword_100A19E90;
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 1970)) {
        uint64_t v65 = "Yes";
      }
      else {
        uint64_t v65 = "No";
      }
      *(_DWORD *)unsigned int v151 = 136446210;
      *(void *)&v151[4] = v65;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "statedump:    Filter Accept List: %{public}s", v151, 0xCu);
      BOOL v59 = qword_100A19E90;
    }
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      if (*(unsigned char *)(a1 + 1848)) {
        unsigned __int16 v66 = "Disabled";
      }
      else {
        unsigned __int16 v66 = "Enabled";
      }
      *(_DWORD *)unsigned int v151 = 136446210;
      *(void *)&v151[4] = v66;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "statedump:    HW Filtering: %{public}s", v151, 0xCu);
      BOOL v59 = qword_100A19E90;
    }
  }
  if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "statedump: Scan agents:", buf, 2u);
  }
  if (v1[89])
  {
    uint64_t v67 = *(void **)(a1 + 2040);
    if (v67 != (void *)(a1 + 2048))
    {
      do
      {
        uint64_t v134 = *(void *)(v67[5] + 8);
        unsigned __int16 v68 = v67;
        int v69 = *v2;
        long long v133 = v67;
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v68[4], (uint64_t)buf);
          if ((buf[23] & 0x80u) == 0) {
            int v70 = buf;
          }
          else {
            int v70 = *(uint8_t **)buf;
          }
          *(_DWORD *)unsigned int v151 = 136446210;
          *(void *)&v151[4] = v70;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "statedump:    \"%{public}s\"", v151, 0xCu);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
          int v69 = *v2;
        }
        if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
        {
          unsigned __int8 v71 = "Yes";
          if (!*(unsigned char *)v134) {
            unsigned __int8 v71 = "No";
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v71;
          _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "statedump:       Duplicates: %{public}s", buf, 0xCu);
        }
        uint64_t v144 = 0;
        uint64_t v145 = 0;
        BOOL v143 = 0;
        sub_100037564((char *)&v143, *(long long **)(v134 + 8), *(long long **)(v134 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v134 + 16) - *(void *)(v134 + 8)) >> 2));
        uint64_t v181 = 0;
        long long v179 = 0u;
        long long v180 = 0u;
        long long v177 = 0u;
        long long v178 = 0u;
        long long v175 = 0u;
        long long v176 = 0u;
        long long v173 = 0u;
        long long v174 = 0u;
        long long v171 = 0u;
        long long v172 = 0u;
        *(_OWORD *)unsigned int v169 = 0u;
        long long v170 = 0u;
        long long v167 = 0u;
        long long v168 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_10004C67C((uint64_t)buf);
        size_t v72 = (char *)v143;
        if (v144 != v143)
        {
          do
          {
            sub_1000417A8((uint64_t)v72, v151);
            uint64_t v73 = sub_10003AB28((uint64_t)&buf[16]);
            sub_10003AB28(v73);
            if (SBYTE7(v152[0]) < 0) {
              operator delete(*(void **)v151);
            }
            v72 += 20;
          }
          while (v72 != v144);
          char v74 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
          {
            std::stringbuf::str();
            uint64_t v75 = (SBYTE7(v152[0]) & 0x80u) == 0 ? v151 : *(uint8_t **)v151;
            *(_DWORD *)unsigned int v146 = 136446210;
            *(void *)&v146[4] = v75;
            _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "statedump:       Services: %{public}s", v146, 0xCu);
            if (SBYTE7(v152[0]) < 0) {
              operator delete(*(void **)v151);
            }
          }
        }
        if (&v143 != (void **)(v134 + 32)) {
          sub_10003366C(&v143, *(long long **)(v134 + 32), *(long long **)(v134 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v134 + 40) - *(void *)(v134 + 32)) >> 2));
        }
        memset(v151, 0, sizeof(v151));
        *(void *)&v152[0] = 0;
        std::string::operator=((std::string *)&v169[1], (const std::string *)v151);
        sub_100359064((uint64_t)&buf[24]);
        if (SBYTE7(v152[0]) < 0) {
          operator delete(*(void **)v151);
        }
        int v76 = (char *)v143;
        uint64_t v77 = v144;
        while (v76 != v77)
        {
          sub_1000417A8((uint64_t)v76, v151);
          uint64_t v78 = sub_10003AB28((uint64_t)&buf[16]);
          sub_10003AB28(v78);
          if (SBYTE7(v152[0]) < 0) {
            operator delete(*(void **)v151);
          }
          v76 += 20;
        }
        int v79 = *v2;
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
        {
          std::stringbuf::str();
          if ((SBYTE7(v152[0]) & 0x80u) == 0) {
            uint64_t v80 = v151;
          }
          else {
            uint64_t v80 = *(uint8_t **)v151;
          }
          *(_DWORD *)unsigned int v146 = 136446210;
          *(void *)&v146[4] = v80;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "statedump:       Solicited Services: %{public}s", v146, 0xCu);
          if (SBYTE7(v152[0]) < 0) {
            operator delete(*(void **)v151);
          }
          int v79 = *v2;
        }
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v81 = "YES";
          if (!*(unsigned char *)(v134 + 2)) {
            uint64_t v81 = "NO";
          }
          *(_DWORD *)unsigned int v151 = 136446210;
          *(void *)&v151[4] = v81;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "statedump:       Requires active scan:%{public}s", v151, 0xCu);
          int v79 = *v2;
        }
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          int v82 = *(_DWORD *)(v133[5] + 96);
          *(_DWORD *)unsigned int v151 = 67109120;
          *(_DWORD *)&v151[4] = v82;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "statedump:       scan level:%d", v151, 8u);
          int v79 = *v2;
        }
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v83 = "YES";
          if (!*(unsigned char *)(*(void *)(v133[5] + 8) + 3)) {
            uint64_t v83 = "NO";
          }
          *(_DWORD *)unsigned int v151 = 136446210;
          *(void *)&v151[4] = v83;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "statedump:       Allowed in paused:%{public}s", v151, 0xCu);
          int v79 = *v2;
        }
        if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v84 = "YES";
          if (!*(unsigned char *)(*(void *)(v133[5] + 8) + 142)) {
            uint64_t v84 = "NO";
          }
          *(_DWORD *)unsigned int v151 = 136446210;
          *(void *)&v151[4] = v84;
          _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "statedump:       Power assertion:%{public}s", v151, 0xCu);
        }
        uint64_t v85 = qword_100A19FB0;
        if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v86 = "YES";
          if (!*(unsigned char *)(*(void *)(v133[5] + 8) + 143)) {
            uint64_t v86 = "NO";
          }
          *(_DWORD *)unsigned int v151 = 136446210;
          *(void *)&v151[4] = v86;
          _os_log_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_DEFAULT, "statedump:       Exposure Notification:%{public}s", v151, 0xCu);
        }
        if (*(unsigned char *)(v134 + 120))
        {
          char v87 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
          {
            int v88 = *(unsigned __int8 *)(v134 + 136);
            int v90 = *(_DWORD *)(v134 + 128);
            int v89 = *(_DWORD *)(v134 + 132);
            *(_DWORD *)unsigned int v151 = 67109632;
            *(_DWORD *)&v151[4] = v90;
            *(_WORD *)&v151[8] = 1024;
            *(_DWORD *)&v151[10] = v89;
            *(_WORD *)&v151[14] = 1024;
            LODWORD(v152[0]) = v88;
            _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "statedump:       requested interval:%d window:%d active:%d", v151, 0x14u);
          }
        }
        char v91 = *(unsigned char *)(v134 + 122);
        if (v91)
        {
          uint64_t v92 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)unsigned int v151 = 0;
            _os_log_impl((void *)&_mh_execute_header, v92, OS_LOG_TYPE_DEFAULT, "statedump:       HW ObjectDiscovery Wild", v151, 2u);
            char v91 = *(unsigned char *)(v134 + 122);
          }
        }
        if ((v91 & 2) != 0)
        {
          char v93 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)unsigned int v151 = 0;
            _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "statedump:       HW ObjectDiscovery Near Owner", v151, 2u);
          }
        }
        __int16 v94 = *(_WORD *)(v134 + 124);
        if (v94)
        {
          uint64_t v95 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)unsigned int v151 = 0;
            _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "statedump:       HW AOP BT Buffer ADPD", v151, 2u);
            __int16 v94 = *(_WORD *)(v134 + 124);
          }
        }
        if ((v94 & 2) != 0)
        {
          int v96 = *v2;
          if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)unsigned int v151 = 0;
            _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "statedump:       HW AOP BT Buffer All", v151, 2u);
          }
        }
        uint64_t v98 = *(void *)(v134 + 64);
        uint64_t v97 = *(void *)(v134 + 72);
        uint64_t v138 = v97;
        while (v98 != v97)
        {
          unsigned __int8 v99 = *v2;
          if (*(unsigned char *)(v98 + 64) && os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
          {
            int v100 = *(unsigned __int8 *)(v98 + 8);
            *(_DWORD *)unsigned int v151 = 67109120;
            *(_DWORD *)&v151[4] = v100;
            _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "statedump:       ObjectLocator type %x", v151, 8u);
            unsigned __int8 v99 = *v2;
          }
          if (os_log_type_enabled(v99, OS_LOG_TYPE_DEFAULT))
          {
            int v101 = *(unsigned __int8 *)(v98 + 8);
            int v102 = *(_DWORD *)(v98 + 80);
            int v103 = *(_DWORD *)(v98 + 84);
            int v104 = *(_DWORD *)(v98 + 88);
            *(_DWORD *)unsigned int v151 = 67109888;
            *(_DWORD *)&v151[4] = v101;
            *(_WORD *)&v151[8] = 1024;
            *(_DWORD *)&v151[10] = v102;
            *(_WORD *)&v151[14] = 1024;
            LODWORD(v152[0]) = v103;
            WORD2(v152[0]) = 1024;
            *(_DWORD *)((char *)v152 + 6) = v104;
            _os_log_impl((void *)&_mh_execute_header, v99, OS_LOG_TYPE_DEFAULT, "statedump:       Puck: %d  %d/%d/%d", v151, 0x1Au);
          }
          id v105 = *(id *)(v98 + 72);
          if (v105)
          {
            int v106 = v105;
            uint64_t v107 = v2;
            id v108 = *(id *)(v98 + 72);
            BOOL v109 = [v108 count] == 0;

            uint64_t v2 = v107;
            if (!v109)
            {
              uint64_t v165 = 0;
              long long v163 = 0u;
              long long v164 = 0u;
              long long v161 = 0u;
              long long v162 = 0u;
              long long v159 = 0u;
              long long v160 = 0u;
              long long v157 = 0u;
              long long v158 = 0u;
              long long v155 = 0u;
              long long v156 = 0u;
              *(_OWORD *)std::string __p = 0u;
              long long v154 = 0u;
              memset(v152, 0, sizeof(v152));
              *(_OWORD *)unsigned int v151 = 0u;
              sub_10004C67C((uint64_t)v151);
              long long v141 = 0u;
              long long v142 = 0u;
              long long v139 = 0u;
              long long v140 = 0u;
              id v110 = *(id *)(v98 + 72);
              id v111 = [v110 countByEnumeratingWithState:&v139 objects:v150 count:16];
              if (v111)
              {
                uint64_t v112 = *(void *)v140;
                do
                {
                  for (uint64_t i = 0; i != v111; uint64_t i = (char *)i + 1)
                  {
                    if (*(void *)v140 != v112) {
                      objc_enumerationMutation(v110);
                    }
                    uint64_t v114 = sub_10003E508((int)[*(id *)(*((void *)&v139 + 1) + 8 * i) longLongValue]);
                    strlen(v114);
                    uint64_t v115 = sub_10003AB28((uint64_t)v152);
                    sub_10003AB28(v115);
                  }
                  id v111 = [v110 countByEnumeratingWithState:&v139 objects:v150 count:16];
                }
                while (v111);
              }

              uint64_t v2 = v107;
              unsigned __int8 v116 = *v107;
              if (os_log_type_enabled(*v107, OS_LOG_TYPE_DEFAULT))
              {
                std::stringbuf::str();
                unsigned __int8 v117 = v146;
                if (v147 < 0) {
                  unsigned __int8 v117 = *(unsigned char **)v146;
                }
                *(_DWORD *)unsigned int v148 = 136315138;
                unsigned int v149 = v117;
                _os_log_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEFAULT, "statedump:             UseCaseList: %s", v148, 0xCu);
                if (v147 < 0) {
                  operator delete(*(void **)v146);
                }
              }
              *(void *)unsigned int v151 = v135;
              *(void *)&v151[*(void *)(v135 - 24)] = v136;
              *(void *)&v152[0] = v137;
              if (SHIBYTE(v154) < 0) {
                operator delete(__p[1]);
              }
              std::streambuf::~streambuf();
              std::iostream::~basic_iostream();
              std::ios::~ios();
            }
          }
          v98 += 96;
          uint64_t v97 = v138;
        }
        uint64_t v118 = *v2;
        if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v119 = "YES";
          if (!*(unsigned char *)(v134 + 200)) {
            uint64_t v119 = "NO";
          }
          *(_DWORD *)unsigned int v151 = 136446210;
          *(void *)&v151[4] = v119;
          _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_DEFAULT, "statedump:       Requires double boost scan: %{public}s", v151, 0xCu);
        }
        id v120 = v133;
        sub_1006FBB0C(v133[5]);
        *(void *)long long buf = v135;
        *(void *)&buf[*(void *)(v135 - 24)] = v136;
        *(void *)&uint8_t buf[16] = v137;
        if (SHIBYTE(v170) < 0) {
          operator delete(v169[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
        if (v143)
        {
          uint64_t v144 = (char *)v143;
          operator delete(v143);
        }
        long long v121 = (void *)v133[1];
        if (v121)
        {
          do
          {
            long long v122 = v121;
            long long v121 = (void *)*v121;
          }
          while (v121);
        }
        else
        {
          do
          {
            long long v122 = (void *)v120[2];
            BOOL v52 = *v122 == (void)v120;
            id v120 = v122;
          }
          while (!v52);
        }
        uint64_t v67 = v122;
      }
      while (v122 != (void *)(a1 + 2048));
    }
  }
  long long v123 = *v2;
  if (os_log_type_enabled(*v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "statedump: Configured ObjectLocator MatchTables:", buf, 2u);
    long long v123 = *v2;
  }
  long long v124 = *(void **)(a1 + 1816);
  if (v124 != (void *)(a1 + 1824))
  {
    do
    {
      if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
      {
        int v125 = *((unsigned __int16 *)v124 + 18);
        int v126 = *((unsigned __int16 *)v124 + 15);
        int v127 = *((unsigned __int8 *)v124 + 28);
        BOOL v128 = *((_WORD *)v124 + 16) != 0;
        BOOL v129 = *((unsigned __int16 *)v124 + 17) != 0;
        *(_DWORD *)long long buf = 67110144;
        *(_DWORD *)&uint8_t buf[4] = v127;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v126;
        *(_WORD *)&unsigned char buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v125;
        *(_WORD *)&unsigned char buf[20] = 1024;
        *(_DWORD *)&unsigned char buf[22] = v128;
        *(_WORD *)&unsigned char buf[26] = 1024;
        *(_DWORD *)&buf[28] = v129;
        _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "statedump: \tType:%x handle:%d Length:%d created:%d enabled:%d", buf, 0x20u);
        long long v123 = *v2;
      }
      long long v130 = (void *)v124[1];
      if (v130)
      {
        do
        {
          long long v131 = v130;
          long long v130 = (void *)*v130;
        }
        while (v130);
      }
      else
      {
        do
        {
          long long v131 = (void *)v124[2];
          BOOL v52 = *v131 == (void)v124;
          long long v124 = v131;
        }
        while (!v52);
      }
      long long v124 = v131;
    }
    while (v131 != (void *)(a1 + 1824));
  }
  if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "statedump: Configured Payload encryption keys:", buf, 2u);
  }
  [*(id *)(a1 + 2088) enumerateKeysAndObjectsWithOptions:1 usingBlock:&stru_1009BF5C0];
  sub_1006F37FC(a1);
  sub_1006DEC50(a1);
  sub_1006DF6DC(a1);
  sub_1006F3FC4(a1);
}

void sub_1006F3464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,void *a44)
{
  STACK[0x300] = a29;
  *(unint64_t *)((char *)&STACK[0x300] + *(void *)(a29 - 24)) = a30;
  STACK[0x310] = a31;
  if (SLOBYTE(STACK[0x36F]) < 0) {
    operator delete((void *)STACK[0x358]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  if (a44) {
    operator delete(a44);
  }
  _Unwind_Resume(a1);
}

void sub_1006F3724(id a1, id a2, id a3, BOOL *a4)
{
  uint64_t v6 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 141558787;
    uint64_t v8 = 1752392040;
    __int16 v9 = 2113;
    id v10 = a2;
    __int16 v11 = 2160;
    uint64_t v12 = 1752392040;
    __int16 v13 = 2113;
    id v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump:       %{private, mask.hash}@ --> %{private, mask.hash}@", (uint8_t *)&v7, 0x2Au);
  }
}

void sub_1006F37FC(uint64_t a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: BLE Scan Configuration Stat:", buf, 2u);
  }
  sub_1006F4B84(a1);
  double Current = CFAbsoluteTimeGetCurrent();
  uint64_t v4 = 0;
  uint64_t v5 = qword_100A19E90;
  char v6 = 1;
  do
  {
    char v7 = v6;
    double v8 = *(double *)(a1 + 176 * v4 + 2360);
    if (Current >= v8) {
      double v9 = Current - v8;
    }
    else {
      double v9 = 0.0;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      id v10 = "screen off";
      if (v7) {
        id v10 = "screen on";
      }
      *(_DWORD *)long long buf = 136315138;
      double v33 = *(double *)&v10;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \t=================== LE Scan Configuration Stats when %s ===================", buf, 0xCu);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      double v33 = v9;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Stats started %f sec ago", buf, 0xCu);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(_DWORD *)(a1 + 176 * v4 + 2448);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count: %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v12 = *(_DWORD *)(a1 + 176 * v4 + 2452);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v12;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count hasParamUpdate : %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = *(_DWORD *)(a1 + 176 * v4 + 2456);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v13;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count needFWScanRestart : %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = *(_DWORD *)(a1 + 176 * v4 + 2464);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v14;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count needNoFWScanRestart : %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v15 = *(_DWORD *)(a1 + 176 * v4 + 2484);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v15;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count hasMatchingRuleUpdate : %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = *(_DWORD *)(a1 + 176 * v4 + 2480);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v16;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count hasMatchingAddressUpdate : %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v17 = *(_DWORD *)(a1 + 176 * v4 + 2476);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v17;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count hasPCFUpdate : %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v18 = *(_DWORD *)(a1 + 176 * v4 + 2472);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v18;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count hasZoneUpdate : %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = *(_DWORD *)(a1 + 176 * v4 + 2488);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v19;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count hasAdvMatchBufUpdate : %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = *(unsigned __int16 *)(a1 + 176 * v4 + 2492);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v20;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Min: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v21 = *(unsigned __int16 *)(a1 + 176 * v4 + 2494);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v21;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Max: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v22 = *(unsigned __int16 *)(a1 + 176 * v4 + 2496);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v22;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Average: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = *(unsigned __int16 *)(a1 + 176 * v4 + 2498);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v23;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration 5 Percentile: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(unsigned __int16 *)(a1 + 176 * v4 + 2500);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v24;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration 25 Percentile: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = *(unsigned __int16 *)(a1 + 176 * v4 + 2502);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v25;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration 50 Percentile: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = *(unsigned __int16 *)(a1 + 176 * v4 + 2504);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v26;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration 75 Percentile: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v27 = *(unsigned __int16 *)(a1 + 176 * v4 + 2506);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v27;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration 95 Percentile: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v28 = *(unsigned __int16 *)(a1 + 176 * v4 + 2516);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v28;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Average HeySiri UseCase: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = *(_DWORD *)(a1 + 176 * v4 + 2508);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v29;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count HeySiri UseCase: %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v30 = *(unsigned __int16 *)(a1 + 176 * v4 + 2528);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v30;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Average Sharing UseCases: %u ms", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v31 = *(_DWORD *)(a1 + 176 * v4 + 2520);
      *(_DWORD *)long long buf = 67109120;
      LODWORD(v33) = v31;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count Sharing UseCase: %u", buf, 8u);
      uint64_t v5 = qword_100A19E90;
    }
    char v6 = 0;
    uint64_t v4 = 1;
  }
  while ((v7 & 1) != 0);
}

void sub_1006F3FC4(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = qword_100A19E90;
  uint64_t v4 = -1632;
  do
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      CFStringRef v5 = @"UNKNOWN";
      if (v2 <= 2u) {
        CFStringRef v5 = off_1009BF9C8[v2];
      }
      uint64_t v6 = a1 + v4;
      int v7 = *(unsigned __int8 *)(a1 + v4 + 1792);
      int v8 = *(unsigned __int8 *)(a1 + v4 + 1793);
      int v9 = *(unsigned __int16 *)(a1 + v4 + 1794);
      int v10 = *(unsigned __int8 *)(a1 + v4 + 1796);
      int v11 = *(unsigned __int8 *)(a1 + v4 + 1797);
      int v12 = *(unsigned __int8 *)(a1 + v4 + 1798);
      if (*(unsigned char *)(a1 + v4 + 1799)) {
        int v13 = "YES";
      }
      else {
        int v13 = "NO";
      }
      if (*(unsigned char *)(v6 + 1800)) {
        int v14 = "YES";
      }
      else {
        int v14 = "NO";
      }
      int v15 = *(unsigned __int8 *)(v6 + 1804);
      int v16 = *(unsigned __int8 *)(v6 + 1805);
      int v17 = *(unsigned __int16 *)(v6 + 1806);
      uint64_t v18 = *(void *)(v6 + 1808);
      *(_DWORD *)long long buf = 138546434;
      CFStringRef v20 = v5;
      __int16 v21 = 1024;
      int v22 = v7;
      __int16 v23 = 1024;
      int v24 = v8;
      __int16 v25 = 1024;
      int v26 = v9;
      __int16 v27 = 1024;
      int v28 = v10;
      __int16 v29 = 1024;
      int v30 = v11;
      __int16 v31 = 1024;
      int v32 = v12;
      __int16 v33 = 2082;
      int v34 = v13;
      __int16 v35 = 2082;
      uint64_t v36 = v14;
      __int16 v37 = 1024;
      int v38 = v15;
      __int16 v39 = 1024;
      int v40 = v16;
      __int16 v41 = 1024;
      int v42 = v17;
      __int16 v43 = 2048;
      uint64_t v44 = v18;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: ADVBUFF(%{public}@): mask:0x%x advADType:0x%x advCompanyID:0x%x advType:0x%x minPayloadSize:%d buffEntries:%d created:%{public}s enabled:%{public}s expectedEntries:%d statusMask:0x%x overflows:%d enabledTS:%f", buf, 0x60u);
      uint64_t v3 = qword_100A19E90;
    }
    ++v2;
    v4 += 544;
  }
  while (v4);
}

void sub_1006F4198(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (v5)
  {
    if (a3)
    {
      uint64_t v6 = +[NSData dataWithBytes:a3 length:16];
      [*(id *)(a1 + 2088) setObject:v6 forKeyedSubscript:v5];
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
    {
      sub_100793ECC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
  {
    sub_100792768();
  }
}

void sub_1006F425C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006F4278(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = *(void **)(a1 + 2088);
  id v5 = sub_1006AD3F0();
  [v4 removeObjectForKey:v5];

  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BF8C8);
  }
  LODWORD(v15) = *(_DWORD *)v3;
  WORD2(v15) = *(_WORD *)(v3 + 4);
  uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v15, 1);
  if (v6)
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    uint64_t v17 = 0;
    if (!sub_10047FF14(v6, (uint64_t)&v15)) {
      goto LABEL_32;
    }
    uint64_t v7 = v15;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
    if (v8 < 4) {
      goto LABEL_32;
    }
    int v9 = (void *)(v15 + 72);
    if (*(char *)(v15 + 95) < 0)
    {
      if (*(void *)(v15 + 80) <= 1uLL) {
        goto LABEL_14;
      }
      int v9 = (void *)*v9;
    }
    else if (*(unsigned __int8 *)(v15 + 95) <= 1u)
    {
      goto LABEL_14;
    }
    int v10 = +[NSString stringWithUTF8String:v9];
    if ([v10 length]) {
      [*(id *)(a1 + 2088) removeObjectForKey:v10];
    }

    uint64_t v7 = v15;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
LABEL_14:
    if (v8 < 9) {
      goto LABEL_32;
    }
    int v11 = (void *)(v7 + 192);
    if (*(char *)(v7 + 215) < 0)
    {
      if (*(void *)(v7 + 200) <= 1uLL) {
        goto LABEL_23;
      }
      int v11 = (void *)*v11;
    }
    else if (*(unsigned __int8 *)(v7 + 215) <= 1u)
    {
      goto LABEL_23;
    }
    int v12 = +[NSString stringWithUTF8String:v11];
    if ([v12 length]) {
      [*(id *)(a1 + 2088) removeObjectForKey:v12];
    }

    uint64_t v7 = v15;
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3);
LABEL_23:
    if (v8 >= 0xA)
    {
      int v13 = (void *)(v7 + 216);
      if ((*(char *)(v7 + 239) & 0x80000000) == 0)
      {
        if (*(unsigned __int8 *)(v7 + 239) <= 1u) {
          goto LABEL_32;
        }
LABEL_29:
        int v14 = +[NSString stringWithUTF8String:v13];
        if ([v14 length]) {
          [*(id *)(a1 + 2088) removeObjectForKey:v14];
        }

        goto LABEL_32;
      }
      if (*(void *)(v7 + 224) > 1uLL)
      {
        int v13 = (void *)*v13;
        goto LABEL_29;
      }
    }
LABEL_32:
    uint64_t v18 = (void **)&v15;
    sub_100051568(&v18);
  }
}

void sub_1006F44E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100051568(&a12);
  _Unwind_Resume(a1);
}

BOOL sub_1006F4528(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [*(id *)(a1 + 2088) objectForKey:v5];
  uint64_t v7 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    int v10 = 141558787;
    uint64_t v11 = 1752392040;
    __int16 v12 = 2113;
    id v13 = v5;
    __int16 v14 = 2160;
    uint64_t v15 = 1752392040;
    __int16 v16 = 2113;
    uint64_t v17 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "getDeviceEncryptionKey SN:%{private, mask.hash}@ key:%{private, mask.hash}@", (uint8_t *)&v10, 0x2Au);
  }
  id v8 = [v6 length];
  if (v8) {
    [v6 getBytes:a3 length:16];
  }

  return v8 != 0;
}

void sub_1006F4650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006F4674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)(a1 + 2088);
  id v5 = sub_1006AD3F0();
  uint64_t v6 = [v4 objectForKey:v5];

  uint64_t v7 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    id v8 = sub_1006AD3F0();
    int v11 = 138412803;
    __int16 v12 = v8;
    __int16 v13 = 2160;
    uint64_t v14 = 1752392040;
    __int16 v15 = 2113;
    __int16 v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "getDeviceEncryptionKey address:%@ key:%{private, mask.hash}@", (uint8_t *)&v11, 0x20u);
  }
  id v9 = [v6 length];
  if (v9) {
    [v6 getBytes:a3 length:16];
  }

  return v9 != 0;
}

void sub_1006F47B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006F47DC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (sub_1006F4674(a1, a2, a3)) {
    return 1;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BF828);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, a2, 0, 1u, 0, 0, v11);
  uint64_t v7 = sub_100031234(v11);
  if (!v7) {
    goto LABEL_10;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BF828);
  }
  id v8 = sub_1006C6EEC((uint64_t)off_1009F7ED8, v7);
  BOOL v9 = sub_1006F4528(a1, v8, a3);

  if (v9) {
    uint64_t v6 = 1;
  }
  else {
LABEL_10:
  }
    uint64_t v6 = 0;

  return v6;
}

void sub_1006F4920(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006F4944(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1006F4A10;
  uint64_t v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_1006F49F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1006F4A10(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)(v1 + 2040);
  id v3 = (void *)(v1 + 2048);
  if (v2 != (void *)(v1 + 2048))
  {
    do
    {
      id v5 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        sub_10003AE4C(v2[4], (uint64_t)__p);
        uint64_t v6 = v12 >= 0 ? __p : (void **)__p[0];
        uint64_t v7 = *(void *)(a1 + 32);
        *(_DWORD *)long long buf = 136446466;
        uint64_t v14 = v6;
        __int16 v15 = 2114;
        uint64_t v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "session %{public}s device %{public}@ invalidated", buf, 0x16u);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_1006FD4C4(v2[5], *(void **)(a1 + 32));
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v3);
  }
}

void sub_1006F4B7C(uint64_t a1, void *a2)
{
}

uint64_t sub_1006F4B84(uint64_t result)
{
  uint64_t v1 = 0;
  uint64_t v29 = result + 2368;
  char v2 = 1;
  uint64_t v30 = result;
  do
  {
    char v3 = v2;
    uint64_t v4 = result + 176 * v1;
    unsigned int v5 = *(_DWORD *)(v4 + 2448);
    if (v5)
    {
      char v32 = v3;
      uint64_t v6 = 0;
      int v7 = 0;
      int v8 = 0;
      int v9 = 0;
      int v10 = 0;
      int v11 = 0;
      unsigned int v12 = 0;
      unsigned int v13 = 0;
      __int16 v31 = (unsigned int *)(v4 + 2448);
      unsigned int v38 = v5 / 0x14;
      unsigned int v37 = v5 >> 2;
      unsigned int v36 = v5 >> 1;
      unsigned int v35 = (3 * v5) >> 2;
      unsigned int v34 = 19 * v5 / 0x14;
      uint64_t v14 = qword_100A19E90;
      uint64_t v33 = v1;
      uint64_t v15 = v29 + 176 * v1;
      int v16 = 10;
      do
      {
        unsigned int v39 = v12;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          int v17 = *(_DWORD *)(v15 + 4 * v6);
          *(_DWORD *)long long buf = 67109376;
          int v41 = v6;
          __int16 v42 = 1024;
          int v43 = v17;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "statedump: \tBLE Scan Configuration Count Bucket %d Count: %u", buf, 0xEu);
          uint64_t v14 = qword_100A19E90;
        }
        int v18 = *(_DWORD *)(v15 + 4 * v6);
        unsigned int v12 = v39 + ((v16 * v18) >> 1);
        v13 += v18;
        if (v11) {
          BOOL v19 = 0;
        }
        else {
          BOOL v19 = v13 >= v38;
        }
        if (v19) {
          int v11 = v6;
        }
        if (v10) {
          BOOL v20 = 0;
        }
        else {
          BOOL v20 = v13 >= v37;
        }
        if (v20) {
          int v10 = v6;
        }
        if (v9) {
          BOOL v21 = 0;
        }
        else {
          BOOL v21 = v13 >= v36;
        }
        if (v21) {
          int v9 = v6;
        }
        if (v8) {
          BOOL v22 = 0;
        }
        else {
          BOOL v22 = v13 >= v35;
        }
        if (v22) {
          int v8 = v6;
        }
        if (v7) {
          BOOL v23 = 0;
        }
        else {
          BOOL v23 = v13 >= v34;
        }
        if (v23) {
          int v7 = v6;
        }
        ++v6;
        v16 += 20;
      }
      while (v6 != 20);
      uint64_t result = v30;
      uint64_t v24 = v30 + 176 * v33;
      *(_WORD *)(v24 + 2498) = 10 * v11 + 5;
      *(_WORD *)(v24 + 2500) = 10 * v10 + 5;
      *(_WORD *)(v24 + 2502) = 10 * v9 + 5;
      *(_WORD *)(v24 + 2504) = 10 * v8 + 5;
      *(_WORD *)(v24 + 2506) = 10 * v7 + 5;
      unsigned int v25 = *v31;
      *(_WORD *)(v24 + 2496) = v12 / *v31;
      unsigned int v26 = *(_DWORD *)(v24 + 2508);
      if (v26) {
        *(_WORD *)(v30 + 176 * v33 + 2516) = *(_DWORD *)(v30 + 176 * v33 + 2512) / v26;
      }
      unsigned int v27 = *(_DWORD *)(v30 + 176 * v33 + 2520);
      if (v27) {
        *(_WORD *)(v30 + 176 * v33 + 2528) = *(_DWORD *)(v30 + 176 * v33 + 2524) / v27;
      }
      uint64_t v28 = v30 + 176 * v33;
      *(unsigned char *)(v28 + 2460) = 100 * *(_DWORD *)(v28 + 2456) / v25;
      *(unsigned char *)(v28 + 2468) = 100 * *(_DWORD *)(v28 + 2464) / v25;
      char v3 = v32;
    }
    char v2 = 0;
    uint64_t v1 = 1;
  }
  while ((v3 & 1) != 0);
  return result;
}

void sub_1006F4E44(uint64_t a1)
{
  char v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Send BLE Scan Configuration Daily Stat for Metric", v31, 2u);
  }
  sub_1006F4B84(a1);
  uint64_t v3 = 0;
  char v4 = 1;
  do
  {
    char v5 = v4;
    uint64_t v6 = objc_opt_new();
    int v7 = v6;
    if (v5) {
      CFStringRef v8 = @"ScreenOff";
    }
    else {
      CFStringRef v8 = @"ScreenOn";
    }
    [v6 setObject:v8 forKeyedSubscript:@"ScreenState"];
    int v9 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2448)];
    [v7 setObject:v9 forKeyedSubscript:@"ScanConfigCount"];

    int v10 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2452)];
    [v7 setObject:v10 forKeyedSubscript:@"ScanConfigCountHasParamsUpdate"];

    int v11 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 176 * v3 + 2460)];
    [v7 setObject:v11 forKeyedSubscript:@"ScanConfigPercentageNeedFWScanRestart"];

    unsigned int v12 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 176 * v3 + 2468)];
    [v7 setObject:v12 forKeyedSubscript:@"ScanConfigPercentageNeedNoFWScanRestart"];

    unsigned int v13 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2484)];
    [v7 setObject:v13 forKeyedSubscript:@"ScanConfigCountHasMatchingRuleRequested"];

    uint64_t v14 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2480)];
    [v7 setObject:v14 forKeyedSubscript:@"ScanConfigCountHasMatchingAddressRequested"];

    uint64_t v15 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2476)];
    [v7 setObject:v15 forKeyedSubscript:@"ScanConfigCountHasPCFRequested"];

    int v16 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2472)];
    [v7 setObject:v16 forKeyedSubscript:@"ScanConfigCountHasZoneRequested"];

    int v17 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2488)];
    [v7 setObject:v17 forKeyedSubscript:@"ScanConfigCountHasAdvMatchBufRequested"];

    int v18 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2492)];
    [v7 setObject:v18 forKeyedSubscript:@"ScanConfigTimeMin"];

    BOOL v19 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2494)];
    [v7 setObject:v19 forKeyedSubscript:@"ScanConfigTimeMax"];

    BOOL v20 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2496)];
    [v7 setObject:v20 forKeyedSubscript:@"ScanConfigTimeAvg"];

    BOOL v21 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2498)];
    [v7 setObject:v21 forKeyedSubscript:@"ScanConfigTimePercentile5"];

    BOOL v22 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2500)];
    [v7 setObject:v22 forKeyedSubscript:@"ScanConfigTimePercentile25"];

    BOOL v23 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2502)];
    [v7 setObject:v23 forKeyedSubscript:@"ScanConfigTimePercentile50"];

    uint64_t v24 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2504)];
    [v7 setObject:v24 forKeyedSubscript:@"ScanConfigTimePercentile75"];

    unsigned int v25 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2506)];
    [v7 setObject:v25 forKeyedSubscript:@"ScanConfigTimePercentile95"];

    unsigned int v26 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2516)];
    [v7 setObject:v26 forKeyedSubscript:@"ScanConfigTimeAvgHeySiriUseCase"];

    unsigned int v27 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2508)];
    [v7 setObject:v27 forKeyedSubscript:@"ScanConfigCountHeySiriUseCase"];

    uint64_t v28 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 176 * v3 + 2528)];
    [v7 setObject:v28 forKeyedSubscript:@"ScanConfigTimeAvgSharingUseCase"];

    uint64_t v29 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176 * v3 + 2520)];
    [v7 setObject:v29 forKeyedSubscript:@"ScanConfigCountSharingUseCase"];

    uint64_t v30 = sub_100050530();
    (*(void (**)(uint64_t, void *))(*(void *)v30 + 312))(v30, v7);

    char v4 = 0;
    uint64_t v3 = 1;
  }
  while ((v5 & 1) != 0);
  sub_1006D3718(a1);
}

void sub_1006F5368(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__n128 sub_1006F53D4(uint64_t a1, uint64_t a2)
{
  char v4 = (float64x2_t *)(a1 + 3024);
  uint64_t v5 = a1 + 2748;
  uint64_t v6 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Get BLE Scan Stat for Metric", v19, 2u);
  }
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  double v8 = *(double *)(a1 + 2728);
  unsigned int v9 = ((Current - v8) * 1000.0);
  if (Current < v8) {
    unsigned int v9 = 0;
  }
  *(_DWORD *)a2 = v9;
  *(_OWORD *)(a2 + 4) = *(_OWORD *)v5;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(v5 + 16);
  *(_OWORD *)(a2 + 36) = *(_OWORD *)(v5 + 32);
  float64x2_t v10 = (float64x2_t)vdupq_n_s64(0x408F400000000000uLL);
  int32x4_t v11 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 52), v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 68), v10)));
  float64x2_t v12 = vmulq_f64(*(float64x2_t *)(v5 + 84), v10);
  *(void *)(a2 + 52) = *(void *)(a1 + 2736);
  int32x4_t v13 = (int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 100), v10));
  *(_DWORD *)(a2 + 60) = *(_DWORD *)(a1 + 2744);
  *(int32x4_t *)(a2 + 64) = v11;
  *(int32x4_t *)(a2 + 80) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(v12), v13);
  int32x4_t v14 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 148), v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 164), v10)));
  *(int32x4_t *)(a2 + 96) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 116), v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 132), v10)));
  *(int32x4_t *)(a2 + 112) = v14;
  int32x4_t v15 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 212), v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 228), v10)));
  *(int32x4_t *)(a2 + 128) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 180), v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 196), v10)));
  *(int32x4_t *)(a2 + 144) = v15;
  int32x4_t v16 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(*v4, v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(v4[1], v10)));
  *(int32x4_t *)(a2 + 160) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 244), v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(v5 + 260), v10)));
  *(int32x4_t *)(a2 + 176) = v16;
  int32x4_t v17 = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(v4[4], v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(v4[5], v10)));
  *(int32x4_t *)(a2 + 192) = vuzp1q_s32((int32x4_t)vcvtq_u64_f64(vmulq_f64(v4[2], v10)), (int32x4_t)vcvtq_u64_f64(vmulq_f64(v4[3], v10)));
  *(int32x4_t *)(a2 + 208) = v17;
  *(int32x2_t *)(a2 + 224) = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_f64(*(float64x2_t *)(a1 + 3120), v10)));
  sub_1006D380C(a1);
  return result;
}

uint64_t sub_1006F55F8()
{
  return 1;
}

void sub_1006F5604(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006F5B78;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1006F5680(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1006F5B84;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1006F5700()
{
  return 1;
}

void sub_1006F570C(uint64_t a1)
{
}

void sub_1006F5714(uint64_t a1)
{
}

void sub_1006F571C(uint64_t *a1)
{
  if (*a1)
  {
    sub_100035F00((uint64_t)a1, *a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t sub_1006F5758(uint64_t a1, long long **a2, long long **a3, char a4, char a5)
{
  *(unsigned char *)a1 = a4 & 1;
  *(unsigned char *)(a1 + 1) = (a4 & 2) != 0;
  *(unsigned char *)(a1 + 2) = 0;
  *(unsigned char *)(a1 + 3) = a5;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  sub_100037564((char *)(a1 + 8), *a2, a2[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a2[1] - (char *)*a2) >> 2));
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  sub_100037564((char *)(a1 + 32), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
  *(_WORD *)(a1 + 121) = 0;
  *(_WORD *)(a1 + 124) = 0;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 142) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(void *)(a1 + 188) = 0;
  *(unsigned char *)(a1 + 196) = 0;
  *(_WORD *)(a1 + 197) = 257;
  *(_DWORD *)(a1 + 199) = 0;
  *(unsigned char *)(a1 + 203) = 8;
  *(unsigned char *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(unsigned char *)(a1 + 281) = 1;
  *(_DWORD *)(a1 + 282) = 0;
  *(unsigned char *)(a1 + 286) = 1;
  *(_DWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 287) = 0;
  *(_WORD *)(a1 + 291) = 0;
  *(void *)(a1 + 309) = 0;
  *(void *)(a1 + 294) = 0;
  *(void *)(a1 + 302) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(unsigned char *)(a1 + 376) = 1;
  *(_DWORD *)(a1 + 384) = 0;
  *(void *)(a1 + 456) = 0;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 408) = 0u;
  uint64_t v7 = +[NSMutableArray array];
  double v8 = *(void **)(a1 + 88);
  *(void *)(a1 + 88) = v7;

  *(unsigned char *)(a1 + 4) = 0;
  uint64_t v9 = +[NSSet set];
  float64x2_t v10 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v9;

  return a1;
}

void sub_1006F58FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  int32x4_t v13 = *v11;
  if (*v11)
  {
    *(void *)(v10 + 16) = v13;
    operator delete(v13);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1006F59A8(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 + 8);
  *a1 = &off_100998428;
  a1[1] = v5;
  if (v5) {
    sub_100037354(v5);
  }
  uint64_t v6 = *(void *)(a3 + 8);
  a1[2] = &off_100998428;
  a1[3] = v6;
  if (v6) {
    sub_100037354(v6);
  }
  return a1;
}

void sub_1006F5A30(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  char v4 = (atomic_uint *)v1[1];
  if (v4) {
    sub_1000368F4(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006F5A4C(uint64_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = *a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & ~v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      uint64_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)~v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> -(char)a3) & ~*a1));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

void sub_1006F5AFC()
{
}

uint64_t sub_1006F5B10(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BF768);
  }
  uint64_t v2 = off_1009F85C0;
  unint64_t v3 = *(void *)(a1 + 24);

  return sub_1006F0BC0((uint64_t)v2, v3, a1);
}

uint64_t sub_1006F5B78(uint64_t a1)
{
  return sub_100055B50(*(void *)(a1 + 32), 0);
}

uint64_t sub_1006F5B84(uint64_t a1)
{
  return sub_100055B50(*(void *)(a1 + 32), 0);
}

void sub_1006F5B90(id a1)
{
}

void sub_1006F5BD4()
{
}

void sub_1006F5BF8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006F5BF8(a1, *a2);
    sub_1006F5BF8(a1, a2[1]);
    sub_1006F5C54(a2 + 4);
    operator delete(a2);
  }
}

void sub_1006F5C54(void *a1)
{
  a1[2] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[3];
  if (v2) {
    sub_1000368F4(v2);
  }
  *a1 = &off_100998428;
  unint64_t v3 = (atomic_uint *)a1[1];
  if (v3)
  {
    sub_1000368F4(v3);
  }
}

void sub_1006F5CE0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006F5CE0(a1, *a2);
    sub_1006F5CE0(a1, a2[1]);
    sub_1006F5D3C(a2 + 4);
    operator delete(a2);
  }
}

void sub_1006F5D3C(void *a1)
{
  a1[10] = &off_100998468;
  uint64_t v2 = (atomic_uint *)a1[11];
  if (v2) {
    sub_1000368F4(v2);
  }
  a1[8] = &off_100998468;
  unint64_t v3 = (atomic_uint *)a1[9];
  if (v3) {
    sub_1000368F4(v3);
  }
  a1[6] = &off_100998468;
  unint64_t v4 = (atomic_uint *)a1[7];
  if (v4) {
    sub_1000368F4(v4);
  }
  a1[4] = &off_100998468;
  uint64_t v5 = (atomic_uint *)a1[5];
  if (v5) {
    sub_1000368F4(v5);
  }
  a1[2] = &off_100998468;
  uint8x8_t v6 = (atomic_uint *)a1[3];
  if (v6)
  {
    sub_1000368F4(v6);
  }
}

void sub_1006F5E50(id a1)
{
}

void sub_1006F5E94()
{
}

void sub_1006F5EB8(id a1)
{
}

void sub_1006F5EFC()
{
}

void sub_1006F5F20(id a1)
{
}

void sub_1006F60B0()
{
}

void sub_1006F60D4(id a1)
{
}

void sub_1006F6118()
{
}

void sub_1006F613C(id a1)
{
}

void sub_1006F6180()
{
}

void sub_1006F61A4(id a1)
{
}

void sub_1006F61E8()
{
}

uint64_t **sub_1006F620C(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, char **a4)
{
  uint64_t v7 = a1 + 1;
  uint8x8_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint8x8_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 26);
        if (v8 >= v10) {
          break;
        }
        uint8x8_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint8x8_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint8x8_t v9 = a1 + 1;
LABEL_10:
    int32x4_t v11 = (char *)operator new(0x28uLL);
    v11[26] = **a4;
    v11[28] = -1;
    *((_WORD *)v11 + 19) = 0;
    *(void *)(v11 + 30) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1006F62DC(id a1)
{
}

void sub_1006F6320()
{
}

void sub_1006F6344(id a1)
{
}

void sub_1006F6388()
{
}

void sub_1006F63AC(id a1)
{
}

void sub_1006F63DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (id *)**a1;
  if (v2)
  {
    unint64_t v4 = (id *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint8x8_t v6 = v4 - 5;

        unint64_t v4 = v6;
      }
      while (v6 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1006F6464(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 40;
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_1006F64B8(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint8x8_t v6 = result;
    __n128 result = sub_100503320(result, a4);
    uint64_t v7 = v6[1];
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(_OWORD *)(v7 + 12) = *(long long *)((char *)a2 + 12);
      *(_OWORD *)uint64_t v7 = v8;
      __n128 result = objc_retainBlock(*((id *)a2 + 4));
      *(void *)(v7 + 32) = result;
      v7 += 40;
      a2 = (long long *)((char *)a2 + 40);
    }
    v6[1] = v7;
  }
  return result;
}

uint64_t sub_1006F6530@<X0>(uint64_t a1@<X0>, const unsigned __int8 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint8x8_t v6 = operator new(0x80uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1006F65A4((uint64_t)v6 + 32, *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006F658C(_Unwind_Exception *a1)
{
  sub_1006F666C(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1006F65A4(uint64_t a1, const unsigned __int8 *a2)
{
  *(void *)(a1 + 16) = &off_100998468;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = &off_100998468;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &off_100998468;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = &off_100998468;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = &off_100998468;
  *(void *)(a1 + 88) = 0;
  return a1;
}

void sub_1006F666C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1006F5D3C(v2 + 4);
    }
    operator delete(v2);
  }
}

_OWORD *sub_1006F66C4(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v14 = 0;
  uint8x8_t v6 = (void **)sub_1000314CC((uint64_t)a1, &v14, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v13 = 0;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    uint8x8_t v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    void *v9 = 0;
    *((void *)v7 + 9) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 7) = v7 + 4;
    LOBYTE(v13) = 1;
    sub_100036CA0(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_100616DF8((uint64_t)v12, 0);
  }
  return v7;
}

void sub_1006F679C(id a1)
{
}

void sub_1006F67E0()
{
}

void *sub_1006F6804(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint8x8_t v6 = (void *)(a1 + 8);
  do
  {
    BOOL v7 = sub_1006F6894(v5, (uint64_t)(v3 + 4), a2);
    long long v8 = v3 + 1;
    if (!v7)
    {
      long long v8 = v3;
      uint8x8_t v6 = v3;
    }
    uint64_t v3 = (void *)*v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1006F6894(v5, a2, (uint64_t)(v6 + 4))) {
    return v2;
  }
  return v6;
}

BOOL sub_1006F6894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (sub_100653984(a2, a3)) {
    return 1;
  }
  if (sub_100653984(a3, a2)) {
    return 0;
  }

  return sub_100653984(a2 + 16, a3 + 16);
}

uint64_t *sub_1006F6908(uint64_t **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v11 = 0;
  uint8x8_t v6 = (uint64_t **)sub_1006F69C0((uint64_t)a1, &v11, a2);
  BOOL v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1006F6A60((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, v10[0]);
    BOOL v7 = v10[0];
    v10[0] = 0;
    sub_1006F6B80((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_1006F69C0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  unint64_t v4 = *(void **)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        long long v8 = v4;
        uint64_t v9 = (uint64_t)(v4 + 4);
        if (!sub_1006F6894(v7, a3, (uint64_t)(v4 + 4))) {
          break;
        }
        unint64_t v4 = (void *)*v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_1006F6894(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      unint64_t v4 = (void *)v8[1];
    }
    while (v4);
  }
  else
  {
    long long v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

void *sub_1006F6A60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint8x8_t v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1006F6ADC(v6 + 4, *a2);
  v6[8] = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006F6AC4(_Unwind_Exception *a1)
{
  sub_1006F6B80(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1006F6ADC(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = &off_100998428;
  a1[1] = v4;
  if (v4) {
    sub_100037354(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = &off_100998428;
  a1[3] = v5;
  if (v5) {
    sub_100037354(v5);
  }
  return a1;
}

void sub_1006F6B64(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (atomic_uint *)v1[1];
  if (v4) {
    sub_1000368F4(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006F6B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1006F5C54(v2 + 4);
    }
    operator delete(v2);
  }
}

void sub_1006F6BD8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 4;
        sub_1006F6C70((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1006F6C70(uint64_t a1, void *a2)
{
  a2[2] = &off_100998428;
  uint64_t v3 = (atomic_uint *)a2[3];
  if (v3) {
    sub_1000368F4(v3);
  }
  *a2 = &off_100998428;
  uint64_t v4 = (atomic_uint *)a2[1];
  if (v4)
  {
    sub_1000368F4(v4);
  }
}

void *sub_1006F6CFC(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = (void *)a2[1];
  while (v4 != v5)
  {
    v4 -= 32;
    uint64_t result = sub_1006F6D84(result - 4, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void *sub_1006F6D84(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *a1 = &off_100998428;
  a1[1] = v4;
  if (v4) {
    sub_100037354(v4);
  }
  uint64_t v5 = *(void *)(a2 + 24);
  a1[2] = &off_100998428;
  a1[3] = v5;
  if (v5) {
    sub_100037354(v5);
  }
  return a1;
}

void sub_1006F6E0C(_Unwind_Exception *exception_object)
{
  *uint64_t v1 = v2;
  uint64_t v4 = (atomic_uint *)v1[1];
  if (v4) {
    sub_1000368F4(v4);
  }
  _Unwind_Resume(exception_object);
}

void **sub_1006F6E28(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1006F6E5C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 32;
    sub_1006F6C70(v4, (void *)(i - 32));
  }
}

uint64_t sub_1006F6EA4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_1006F6804((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10004D3B8(a1, v3);
  sub_1006F5C54(v4 + 4);
  operator delete(v4);
  return 1;
}

void *sub_1006F6F00(void *a1)
{
  if (a1 + 4 == sub_1006F6F74(a1 + 1, 0, 0xC0uLL) && v2 == 0) {
    return (void *)*a1;
  }
  uint64_t v4 = (const char *)sub_1006F6F54("bitset to_ullong overflow error");
  return sub_1006F6F54(v4);
}

void *sub_1006F6F54(const char *a1)
{
  std::__libcpp_verbose_abort("overflow_error was thrown in -fno-exceptions mode with message \"%s\"", a1);
  return sub_1006F6F74(v1, v2, v3);
}

void *sub_1006F6F74(void *result, unsigned int a2, unint64_t a3)
{
  if (!a2)
  {
LABEL_8:
    if (a3 >= 0x40)
    {
      do
      {
        if (*result) {
          break;
        }
        ++result;
        a3 -= 64;
      }
      while (a3 > 0x3F);
    }
    return result;
  }
  unint64_t v3 = 64 - a2;
  if (v3 >= a3) {
    unint64_t v4 = a3;
  }
  else {
    unint64_t v4 = 64 - a2;
  }
  if (((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & *result) != 0) {
    return result;
  }
  if (v3 < a3)
  {
    a3 -= v4;
    ++result;
    goto LABEL_8;
  }
  unint64_t v5 = a2 + a3;
  uint64_t v6 = v5 - 63;
  if ((uint64_t)(v5 - 63) < 0) {
    uint64_t v6 = a2 + a3;
  }
  uint64_t v7 = v6 >> 6;
  unint64_t v8 = v5 >> 6;
  if ((a3 & 0x8000000000000000) != 0) {
    unint64_t v8 = v7;
  }
  result += v8;
  return result;
}

uint64_t **sub_1006F7070(uint64_t **result, void *a2, void *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    void *result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      unint64_t v8 = v6;
    }
    uint64_t v14 = result;
    int32x4_t v15 = v8;
    int32x4_t v16 = v8;
    if (v8)
    {
      int32x4_t v15 = sub_1002D8040((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          v8[4] = v9[4];
          sub_1002E6C1C(v5, v8);
          unint64_t v8 = v15;
          int32x4_t v16 = v15;
          if (v15) {
            int32x4_t v15 = sub_1002D8040((uint64_t)v15);
          }
          uint64_t v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              uint64_t v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002D8094((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1002E6C8C(v5, a2 + 4);
      float64x2_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          float64x2_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_1006F71C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D8094((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006F71D4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006F71D4(a1, *a2);
    sub_1006F71D4(a1, a2[1]);
    a2[6] = &off_100998468;
    unint64_t v4 = (atomic_uint *)a2[7];
    if (v4) {
      sub_1000368F4(v4);
    }
    operator delete(a2);
  }
}

void sub_1006F7254(id a1)
{
}

void sub_1006F7298()
{
}

void sub_1006F72BC(id a1)
{
}

void sub_1006F7300()
{
}

double sub_1006F7324(double a1)
{
  return a1 * 0.625;
}

void sub_1006F7380()
{
  sub_10071D1C4((uint64_t)&unk_100A14700, &xmmword_1007C0654, 16);
}

uint64_t sub_1006F73D0(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  *(void *)a1 = &off_1009BF9F0;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 80) = a3;
  *(unsigned char *)(a1 + 81) = a4;
  *(unsigned char *)(a1 + 82) = a5;
  *(void *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 1;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = a1 + 128;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 136) = a1 + 128;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 176) = 200;
  *(unsigned char *)(a1 + 178) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(_DWORD *)(a1 + 208) = 3;
  *(_WORD *)(a1 + 224) = 257;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  uint64_t v6 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 384))(v6)) {
    *(_DWORD *)(a1 + 96) = 3;
  }
  int v16 = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "LESCAN");
  sub_10004191C(__p, "MaxReportsInMap");
  int v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v7 + 88))(v7, buf, __p, &v16);
  if (v16 > 0) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v10 = qword_100A19E90;
  if (v9)
  {
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT);
    __int16 v12 = v16;
    if (v11)
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) for max number of ADV reports in map", buf, 8u);
      __int16 v12 = v16;
      uint64_t v10 = qword_100A19E90;
    }
    *(_WORD *)(a1 + 176) = v12;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEBUG)) {
    sub_100796BDC();
  }
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)(a1 + 216) = sub_10010BABC();
  *(unsigned char *)(a1 + 64) = *(unsigned char *)(a1 + 81) == 16;
  return a1;
}

void sub_1006F7658(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t sub_1006F76E4(uint64_t a1)
{
  *(void *)a1 = &off_1009BF9F0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2)
  {
    sub_1000A7EA8(v2);
    operator delete();
  }
  if (*(char *)(a1 + 255) < 0) {
    operator delete(*(void **)(a1 + 232));
  }
  sub_1006FD980(a1 + 184, *(void **)(a1 + 192));
  sub_1000486F0(a1 + 152, *(void **)(a1 + 160));
  sub_1002B308C((void *)(a1 + 128));
  sub_1006F71D4(a1 + 104, *(void **)(a1 + 112));
  return a1;
}

void sub_1006F7784(uint64_t a1)
{
  sub_1006F76E4(a1);

  operator delete();
}

BOOL sub_1006F77BC(uint64_t a1)
{
  uint64_t v1 = *(unsigned char **)(a1 + 8);
  if (v1[288])
  {
    int v2 = v1[283];
    return v2 != 0;
  }
  int v4 = *(unsigned __int8 *)(a1 + 81);
  if (v4 != 16)
  {
    if (v4 != 32) {
      return 0;
    }
    if (v1[1] && v1[120])
    {
      int v2 = v1[136];
      return v2 != 0;
    }
  }
  return *(int *)(a1 + 96) < 4;
}

uint64_t sub_1006F7820(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 1);
}

BOOL sub_1006F782C(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 8) + 88) count] != 0;
}

BOOL sub_1006F7854(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 8) + 64) != *(void *)(*(void *)(a1 + 8) + 72);
}

BOOL sub_1006F7868(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (*(unsigned char *)(a1 + 81) == 32)
  {
    if (*(unsigned char *)(v1 + 1))
    {
      if (*(void *)(v1 + 8) == *(void *)(v1 + 16))
      {
        if ([*(id *)(v1 + 88) count]) {
          return 0;
        }
        uint64_t v1 = *(void *)(a1 + 8);
        if (*(void *)(v1 + 64) != *(void *)(v1 + 72)) {
          return 0;
        }
      }
    }
  }
  if (*(void *)(v1 + 8) == *(void *)(v1 + 16)) {
    return 1;
  }
  return *(void *)(v1 + 32) != *(void *)(v1 + 40);
}

uint64_t sub_1006F78F0(uint64_t a1)
{
  return *(void *)(a1 + 8) + 8;
}

id sub_1006F78FC(uint64_t a1, unsigned __int8 *a2)
{
  id v25 = +[NSMutableArray array];
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v6 = *(void *)(v4 + 96);
  for (uint64_t i = *(void *)(v4 + 104); v6 != i; v6 += 112)
  {
    uint64_t v7 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      sub_1000417A8((uint64_t)a2, v30);
      int v8 = v32;
      int v9 = (void **)v30[0];
      sub_1005B6910(v6);
      uint64_t v10 = v30;
      if (v8 < 0) {
        uint64_t v10 = v9;
      }
      BOOL v11 = __p;
      if (v29 < 0) {
        BOOL v11 = *(unsigned char **)__p;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v10;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "enhancedUUIDRulesForUUID uuid:%s filter:%s", buf, 0x16u);
      if (v29 < 0) {
        operator delete(*(void **)__p);
      }
      if (v32 < 0) {
        operator delete(v30[0]);
      }
    }
    if (*(_DWORD *)(v6 + 104) == 1)
    {
      long long v12 = *(_OWORD *)(v6 + 20);
      int v31 = *(_DWORD *)(v6 + 36);
      *(_OWORD *)uint64_t v30 = v12;
      if (sub_10022A44C((unsigned __int8 *)v30, a2))
      {
        uint64_t v13 = +[NSMutableDictionary dictionary];
        int v14 = *(char *)(v6 + 72);
        int v15 = *a2;
        if (v15 == 2 || v15 == 16)
        {
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          sub_10071D240(a2, buf);
          if (sub_100045F00(v6 + 40))
          {
            if (sub_100045F00(v6 + 56) && *(unsigned char *)(v6 + 79))
            {
              if (v14 >= 0) {
                LOBYTE(v14) = -87;
              }
              int v16 = +[NSData dataWithBytes:buf length:*a2];
              [v13 setObject:v16 forKeyedSubscript:@"uuid"];

              uint64_t v17 = sub_10004A6E4(v6 + 40);
              char v18 = +[NSData dataWithBytes:v17 length:sub_100045F00(v6 + 40)];
              [v13 setObject:v18 forKeyedSubscript:@"data"];

              uint64_t v19 = sub_10004A6E4(v6 + 56);
              BOOL v20 = +[NSData dataWithBytes:v19 length:sub_100045F00(v6 + 56)];
              [v13 setObject:v20 forKeyedSubscript:@"mask"];

              BOOL v21 = +[NSNumber numberWithChar:v14];
              [v13 setObject:v21 forKeyedSubscript:@"rssi"];

              [v25 addObject:v13];
              BOOL v22 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
              {
                sub_1005B6910(v6);
                BOOL v23 = v30;
                if (v32 < 0) {
                  BOOL v23 = (void **)v30[0];
                }
                *(_DWORD *)std::string __p = 136315394;
                *(void *)&__p[4] = v23;
                __int16 v27 = 2112;
                uint64_t v28 = v13;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "enhancedRule %s converted to %@", __p, 0x16u);
                if (v32 < 0) {
                  operator delete(v30[0]);
                }
              }
            }
          }
        }
      }
    }
  }

  return v25;
}

void sub_1006F7CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006F7D20(uint64_t a1)
{
  return sub_1006F7D28(*(void *)(a1 + 8));
}

BOOL sub_1006F7D28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 64);
  uint64_t v2 = *(void *)(a1 + 72);
  if (v1 == v2) {
    return 0;
  }
  uint64_t v3 = v1 + 96;
  do
  {
    id v4 = *(id *)(v3 - 40);
    id v5 = [v4 count];
    BOOL v6 = v5 != 0;

    if (v5) {
      BOOL v7 = 1;
    }
    else {
      BOOL v7 = v3 == v2;
    }
    v3 += 96;
  }
  while (!v7);
  return v6;
}

void sub_1006F7DA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1006F7DB0(uint64_t a1)
{
  return *(unsigned __int16 *)(*(void *)(a1 + 8) + 124) - 1 < 0xFF;
}

uint64_t sub_1006F7DC8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(*(void *)(a1 + 8) + 56) count]
    && [*(id *)(*(void *)(a1 + 8) + 56) containsObject:v3])
  {
    id v4 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138543362;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Peer %{public}@ matched the peripheral filter", (uint8_t *)&v7, 0xCu);
    }
    uint64_t v5 = 1;
  }
  else
  {
    uint64_t v5 = 0;
  }

  return v5;
}

void sub_1006F7EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006F7EC8(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  if (!*(unsigned char *)(*(void *)(a1 + 8) + 137)) {
    return 0;
  }
  uuid_copy(dst, a2);
  uuid_t uu = (unsigned __int8 *)a2;
  memset(&dst[16], 0, 48);
  *(_OWORD *)std::string __p = 0u;
  long long v32 = 0u;
  int v35 = 0;
  char v36 = 0;
  memset(v33, 0, sizeof(v33));
  uint64_t v5 = sub_1006FDB54((uint64_t **)(a1 + 184), dst, (uint64_t)dst);
  sub_1006FD8D8(&dst[16]);
  sub_1006FD8D8(__p);
  *(void *)uuid_t dst = 0;
  sub_100026C30((uint64_t)dst);
  uint64_t v6 = *(__int16 *)&dst[4];
  unint64_t v7 = *(__int16 *)&dst[4] + 1000 * *(int *)dst;
  BOOL v8 = v7 >= 0x3E8;
  unint64_t v9 = v7 - 1000;
  if (v8) {
    unint64_t v10 = v9;
  }
  else {
    unint64_t v10 = 0;
  }
  int v11 = *(unsigned __int8 *)(*(void *)(a3 + 8) + 216);
  if (v11 != 127)
  {
    *(void *)uuid_t dst = *(int *)dst;
    *(void *)&dst[8] = v6;
    dst[16] = v11;
    sub_1006FAFD8((uint64_t)(v5 + 6), (__n128 *)dst);
    *((_DWORD *)v5 + 24) += *(char *)(*(void *)(a3 + 8) + 216);
  }
  uint64_t v12 = v5[11];
  if (!v12) {
    goto LABEL_17;
  }
  while (1)
  {
    unint64_t v13 = v12 + v5[10] - 1;
    uint64_t v14 = *(void *)(v5[7] + 8 * (v13 / 0xAA));
    unint64_t v15 = v13 % 0xAA;
    int v16 = (void *)(v14 + 24 * (v13 % 0xAA));
    *(void *)uuid_t dst = 0;
    *(_DWORD *)uuid_t dst = *v16;
    *(_WORD *)&dst[4] = v16[1];
    LODWORD(__p[0]) = v10 / 0x3E8;
    HIDWORD(__p[0]) = v10 % 0x3E8;
    if ((int)sub_100262894((uint64_t)dst, (uint64_t)__p) > 0) {
      break;
    }
    uint64_t v17 = v5[11];
    *((_DWORD *)v5 + 24) -= *(char *)(v14 + 24 * v15 + 16);
    v5[11] = v17 - 1;
    sub_1006FE054(v5 + 6, 1);
    uint64_t v12 = v5[11];
    if (!v12) {
      goto LABEL_17;
    }
  }
  uint64_t v18 = v5[11];
  if ((unint64_t)v18 < 0xA)
  {
LABEL_17:
    uint64_t result = 0;
    *((unsigned char *)v5 + 100) = 0;
    return result;
  }
  uint64_t v19 = *((unsigned __int8 *)v5 + 100);
  uint64_t v20 = *(void *)(a3 + 8);
  uint64_t v21 = *((int *)v5 + 24) / v18;
  if (*(unsigned char *)(v20 + 42)) {
    LOBYTE(v21) = v21 - *(unsigned char *)(v20 + 43);
  }
  if (*((unsigned char *)v5 + 100))
  {
    if (byte_1007C06A0[(v19 - 1)] >= (char)v21)
    {
      if ((char)v21 + 3 >= byte_1007C06A0[v19]) {
        goto LABEL_33;
      }
      char v22 = 1;
    }
    else
    {
      char v22 = -1;
    }
    unsigned __int8 v24 = v19 + v22;
    *((unsigned char *)v5 + 100) = v19 + v22;
  }
  else
  {
    if (v21 == 127)
    {
      unsigned __int8 v24 = 0;
    }
    else
    {
      unsigned __int8 v24 = 0;
      do
        *((unsigned char *)v5 + 100) = ++v24;
      while (byte_1007C06A0[v24] > (char)v21);
    }
    if (!v24) {
      goto LABEL_33;
    }
  }
  id v25 = qword_100A19E90;
  LOBYTE(v19) = v24;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    memset(dst, 0, 37);
    uuid_unparse_upper(uu, dst);
    sub_10004191C(__p, dst);
    if ((SBYTE7(v32) & 0x80u) == 0) {
      unsigned int v26 = __p;
    }
    else {
      unsigned int v26 = (void **)__p[0];
    }
    int v27 = *((unsigned __int8 *)v5 + 100);
    *(_DWORD *)uuid_t dst = 136446722;
    *(void *)&dst[4] = v26;
    *(_WORD *)&dst[12] = 1024;
    *(_DWORD *)&dst[14] = v27;
    *(_WORD *)&dst[18] = 1024;
    *(_DWORD *)&dst[20] = (char)v21;
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Device %{public}s is now at proximity level %u with an average RSSI of %d dB", dst, 0x18u);
    if (SBYTE7(v32) < 0) {
      operator delete(__p[0]);
    }
    LOBYTE(v19) = *((unsigned char *)v5 + 100);
  }
LABEL_33:
  if ((v19 - 1) >= 3u)
  {
    uint64_t v28 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)uuid_t dst = 136446210;
      *(void *)&dst[4] = "(info.proximityLevel > 0) && (info.proximityLevel < kRSSIThresholdsSize)";
      _os_log_fault_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", dst, 0xCu);
      LOBYTE(v19) = *((unsigned char *)v5 + 100);
    }
  }
  if (*(unsigned __int8 *)(*(void *)(a1 + 8) + 137) < v19) {
    return 0;
  }
  *(unsigned char *)(*(void *)(a3 + 8) + 218) = v19;
  return 1;
}

void sub_1006F8310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1006FD8D8(v3);
  sub_1006FD8D8((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006F833C(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v172 = a5;
  uint64_t v177 = a1;
  if (*(void *)(*(void *)(a1 + 8) + 96) == *(void *)(*(void *)(a1 + 8) + 104))
  {
    uint64_t v110 = 1;
  }
  else
  {
    v216[0] = 0;
    v216[1] = 0;
    int v214 = 0;
    __int16 v215 = v216;
    uint64_t v179 = a3;
    unint64_t v7 = *(void **)(a3 + 8);
    int v212 = 0;
    __int16 v213 = 0;
    long long v174 = v7;
    if (v7[16])
    {
      BOOL v8 = (void *)v7[14];
      unint64_t v9 = v7 + 15;
      if (v8 != v7 + 15)
      {
        unint64_t v10 = 0;
        do
        {
          int v11 = (long long *)(v8 + 4);
          if (v10 >= v214)
          {
            unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v10 - (unsigned char *)v212) >> 2);
            unint64_t v14 = v13 + 1;
            if (v13 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              abort();
            }
            if (0x999999999999999ALL * ((v214 - (unsigned char *)v212) >> 2) > v14) {
              unint64_t v14 = 0x999999999999999ALL * ((v214 - (unsigned char *)v212) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v214 - (unsigned char *)v212) >> 2) >= 0x666666666666666) {
              unint64_t v15 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15) {
              int v16 = (char *)sub_10003767C((uint64_t)&v214, v15);
            }
            else {
              int v16 = 0;
            }
            uint64_t v17 = &v16[20 * v13];
            long long v18 = *v11;
            *((_DWORD *)v17 + 4) = *((_DWORD *)v8 + 12);
            *(_OWORD *)uint64_t v17 = v18;
            uint64_t v20 = (char *)v212;
            uint64_t v19 = v213;
            uint64_t v21 = v17;
            if (v213 != v212)
            {
              do
              {
                long long v22 = *(_OWORD *)(v19 - 20);
                *((_DWORD *)v21 - 1) = *((_DWORD *)v19 - 1);
                *(_OWORD *)(v21 - 20) = v22;
                v21 -= 20;
                v19 -= 20;
              }
              while (v19 != v20);
              uint64_t v19 = (char *)v212;
            }
            unint64_t v10 = v17 + 20;
            int v212 = v21;
            __int16 v213 = v17 + 20;
            int v214 = &v16[20 * v15];
            if (v19) {
              operator delete(v19);
            }
          }
          else
          {
            long long v12 = *v11;
            *((_DWORD *)v10 + 4) = *((_DWORD *)v8 + 12);
            *(_OWORD *)unint64_t v10 = v12;
            v10 += 20;
          }
          __int16 v213 = v10;
          BOOL v23 = (void *)v8[1];
          if (v23)
          {
            do
            {
              unsigned __int8 v24 = v23;
              BOOL v23 = (void *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              unsigned __int8 v24 = (void *)v8[2];
              BOOL v25 = *v24 == (void)v8;
              BOOL v8 = v24;
            }
            while (!v25);
          }
          BOOL v8 = v24;
        }
        while (v24 != v9);
      }
    }
    uint64_t v26 = sub_10003FB34();
    int v189 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 2384))(v26);
    uint64_t v209 = 0;
    uint64_t v210 = 0;
    uint64_t v211 = 0;
    sub_1006FA610(*(void *)(v177 + 8), &v209);
    uint64_t v27 = v209;
    uint64_t v192 = v210;
    if (v210 != v209)
    {
      unint64_t v185 = (uint64_t *)(v177 + 232);
      do
      {
        uint64_t v28 = *(void *)(a3 + 8);
        uint64_t v29 = *(void *)(v28 + 64);
        uint64_t v30 = *(void *)(v28 + 72);
        int v31 = (unsigned __int8 **)(v28 + 64);
        if (v30 != v29)
        {
          *(_OWORD *)uuid_string_t out = *(_OWORD *)(v27 + 20);
          *(_DWORD *)&out[16] = *(_DWORD *)(v27 + 36);
          long long v32 = operator new(0x14uLL);
          *(void *)&__p[8] = v32 + 5;
          *(void *)&__p[16] = v32 + 5;
          *(_OWORD *)long long v32 = *(_OWORD *)out;
          v32[4] = *(_DWORD *)&out[16];
          *(void *)std::string __p = v32;
          char v33 = sub_1006FA6E0((uint64_t)v32, a2, (uint64_t)__p, v31);
          operator delete(v32);
          if (v33) {
            goto LABEL_33;
          }
        }
        if (v213 == v212) {
          goto LABEL_34;
        }
        *(_OWORD *)uuid_string_t out = *(_OWORD *)(v27 + 20);
        *(_DWORD *)&out[16] = *(_DWORD *)(v27 + 36);
        int v35 = operator new(0x14uLL);
        *(void *)&__p[8] = v35 + 5;
        *(void *)&__p[16] = v35 + 5;
        *(_OWORD *)int v35 = *(_OWORD *)out;
        _OWORD v35[4] = *(_DWORD *)&out[16];
        *(void *)std::string __p = v35;
        char v36 = sub_1006FA6E0((uint64_t)v35, a2, (uint64_t)__p, (unsigned __int8 **)&v212);
        operator delete(v35);
        if ((v36 & 1) == 0)
        {
LABEL_34:
          uint64_t v38 = *(void *)(a3 + 8);
          uint64_t v39 = *(void *)(v38 + 88);
          uint64_t v40 = *(void *)(v38 + 96);
          int v41 = (unsigned __int8 **)(v38 + 88);
          if (v40 == v39)
          {
            int v196 = 0;
            goto LABEL_40;
          }
          *(_OWORD *)uuid_string_t out = *(_OWORD *)(v27 + 20);
          *(_DWORD *)&out[16] = *(_DWORD *)(v27 + 36);
          __int16 v42 = operator new(0x14uLL);
          *(void *)&__p[8] = v42 + 5;
          *(void *)&__p[16] = v42 + 5;
          *(_OWORD *)__int16 v42 = *(_OWORD *)out;
          uint8_t v42[4] = *(_DWORD *)&out[16];
          *(void *)std::string __p = v42;
          int v37 = sub_1006FA6E0((uint64_t)v42, a2, (uint64_t)__p, v41);
          operator delete(v42);
        }
        else
        {
LABEL_33:
          int v37 = 1;
        }
        if ((v189 & v37) == 1) {
          int v196 = sub_1006FA8B0(v34, *(char *)(*(void *)(a3 + 8) + 216), *(char *)(v27 + 72), *(unsigned __int8 *)(v27 + 76));
        }
        else {
          int v196 = (v189 ^ 1) & v37;
        }
LABEL_40:
        id v43 = *(id *)v27;
        sub_10004191C(__p, (char *)[v43 UTF8String]);
        uint64_t v44 = (char **)sub_10003156C((uint64_t)&v215, (const void **)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }

        if (v216 == v44)
        {
          id v45 = *(id *)v27;
          sub_10004191C(__p, (char *)[v45 UTF8String]);
          *(void *)uuid_string_t out = __p;
          *((unsigned char *)sub_10030CB90((uint64_t **)&v215, (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)out) + 56) = v196;
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        else
        {
          id v45 = *(id *)v27;
          sub_10004191C(__p, (char *)[v45 UTF8String]);
          *(void *)uuid_string_t out = __p;
          uint64_t v46 = sub_10030CB90((uint64_t **)&v215, (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)out);
          char v47 = v196;
          if (!*((unsigned char *)v46 + 56)) {
            char v47 = 0;
          }
          *((unsigned char *)v46 + 56) = v47;
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        uint64_t v48 = qword_100A19E90;
        BOOL v49 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
        a3 = v179;
        if (v189)
        {
          if (v49)
          {
            uint64_t v50 = v177 + 232;
            if (*(char *)(v177 + 255) < 0) {
              uint64_t v50 = *v185;
            }
            memset(out, 0, sizeof(out));
            uuid_unparse_upper(a2, out);
            sub_10004191C(&v206, out);
            if (v208 >= 0) {
              unsigned __int8 v51 = &v206;
            }
            else {
              unsigned __int8 v51 = v206;
            }
            long long v52 = *(_OWORD *)(v27 + 20);
            int v219 = *(_DWORD *)(v27 + 36);
            long long v218 = v52;
            sub_1000417A8((uint64_t)&v218, out);
            if (out[23] >= 0) {
              id v53 = out;
            }
            else {
              id v53 = *(char **)out;
            }
            int v54 = *(char *)(*(void *)(v179 + 8) + 216);
            if (*(unsigned char *)(v27 + 76)) {
              CFStringRef v55 = @">";
            }
            else {
              CFStringRef v55 = @"<";
            }
            int v56 = *(char *)(v27 + 72);
            id v57 = *(id *)v27;
            id v58 = *(id *)v27;
            sub_10004191C(&v231, (char *)[v58 UTF8String]);
            v204[0] = &v231;
            int v59 = *((unsigned __int8 *)sub_10030CB90((uint64_t **)&v215, (const void **)&v231, (uint64_t)&unk_1007BE9D0, (_OWORD **)v204)+ 56);
            *(_DWORD *)std::string __p = 136317186;
            *(void *)&__p[4] = v50;
            *(_WORD *)&unsigned char __p[12] = 2080;
            *(void *)&unsigned char __p[14] = v51;
            *(_WORD *)&unsigned char __p[22] = 2080;
            *(void *)unsigned int v224 = v53;
            *(_WORD *)&v224[8] = 1024;
            *(_DWORD *)int v225 = v54;
            *(_WORD *)&v225[4] = 2112;
            *(void *)&v225[6] = v55;
            *(_WORD *)&v225[14] = 1024;
            *(_DWORD *)&v225[16] = v56;
            *(_WORD *)&v225[20] = 1024;
            *(_DWORD *)&v225[22] = v196;
            *(_WORD *)&v225[26] = 2112;
            *(void *)&v225[28] = v57;
            *(_WORD *)&v225[36] = 1024;
            *(_DWORD *)&v225[38] = v59;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "filterByEnhancedRules uuidWithoutBlobAndMask session:%s device:%s uuid:%s rssi:%d (%@%d?) match:%d matchMap[%@]:%d", __p, 0x4Cu);
            if (SHIBYTE(v232) < 0) {
              operator delete((void *)v231);
            }

            if (out[23] < 0) {
              operator delete(*(void **)out);
            }
            if (SHIBYTE(v208) < 0) {
              operator delete(v206);
            }
LABEL_85:

            a3 = v179;
          }
        }
        else if (v49)
        {
          uint64_t v60 = v177 + 232;
          if (*(char *)(v177 + 255) < 0) {
            uint64_t v60 = *v185;
          }
          memset(out, 0, sizeof(out));
          uuid_unparse_upper(a2, out);
          sub_10004191C(&v206, out);
          if (v208 >= 0) {
            int v61 = &v206;
          }
          else {
            int v61 = v206;
          }
          long long v62 = *(_OWORD *)(v27 + 20);
          int v219 = *(_DWORD *)(v27 + 36);
          long long v218 = v62;
          sub_1000417A8((uint64_t)&v218, out);
          if (out[23] >= 0) {
            signed __int8 v63 = out;
          }
          else {
            signed __int8 v63 = *(char **)out;
          }
          id v57 = *(id *)v27;
          id v64 = *(id *)v27;
          sub_10004191C(&v231, (char *)[v64 UTF8String]);
          v204[0] = &v231;
          int v65 = *((unsigned __int8 *)sub_10030CB90((uint64_t **)&v215, (const void **)&v231, (uint64_t)&unk_1007BE9D0, (_OWORD **)v204)+ 56);
          *(_DWORD *)std::string __p = 136316418;
          *(void *)&__p[4] = v60;
          *(_WORD *)&unsigned char __p[12] = 2080;
          *(void *)&unsigned char __p[14] = v61;
          *(_WORD *)&unsigned char __p[22] = 2080;
          *(void *)unsigned int v224 = v63;
          *(_WORD *)&v224[8] = 1024;
          *(_DWORD *)int v225 = v196;
          *(_WORD *)&v225[4] = 2112;
          *(void *)&v225[6] = v57;
          *(_WORD *)&v225[14] = 1024;
          *(_DWORD *)&v225[16] = v65;
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "filterByEnhancedRules uuidWithoutBlobAndMask session:%s device:%s uuid:%s match:%d matchMap[%@]:%d", __p, 0x36u);
          if (SHIBYTE(v232) < 0) {
            operator delete((void *)v231);
          }

          if (out[23] < 0) {
            operator delete(*(void **)out);
          }
          if (SHIBYTE(v208) < 0) {
            operator delete(v206);
          }
          goto LABEL_85;
        }
        v27 += 112;
      }
      while (v27 != v192);
    }
    int v206 = 0;
    long long v207 = 0;
    uint64_t v208 = 0;
    sub_1006FA9A0(*(void *)(v177 + 8), (uint64_t *)&v206);
    long long v173 = v207;
    unint64_t v193 = (char *)v206;
    if (v207 != v206 && v174[16])
    {
      long long v182 = v174 + 15;
      long long v178 = (uint64_t *)(v177 + 232);
      while (1)
      {
        unsigned __int16 v66 = (void *)v174[14];
        if (v66 != v182) {
          break;
        }
LABEL_183:
        v193 += 112;
        if (v193 == v173) {
          goto LABEL_184;
        }
      }
      int v67 = 0;
      long long v186 = (long long *)(v193 + 20);
      uint64_t v183 = (uint64_t)(v193 + 40);
      uint64_t v181 = (uint64_t)(v193 + 56);
      while (1)
      {
        long long v231 = *v186;
        LODWORD(v232) = *((_DWORD *)v193 + 9);
        unsigned __int16 v68 = operator new(0x14uLL);
        *(void *)&__p[8] = v68 + 5;
        *(void *)&__p[16] = v68 + 5;
        *(_OWORD *)unsigned __int16 v68 = v231;
        void v68[4] = v232;
        *(void *)std::string __p = v68;
        long long v218 = *((_OWORD *)v66 + 2);
        int v219 = *((_DWORD *)v66 + 12);
        int v69 = operator new(0x14uLL);
        *(void *)&out[8] = v69 + 5;
        *(void *)&out[16] = v69 + 5;
        *(_OWORD *)int v69 = v218;
        v69[4] = v219;
        *(void *)uuid_string_t out = v69;
        if (!sub_1006FA6E0((uint64_t)v69, a2, (uint64_t)__p, (unsigned __int8 **)out)) {
          goto LABEL_94;
        }
        int v70 = (unsigned __int8 *)sub_10004A6E4((uint64_t)(v66 + 7));
        size_t v71 = sub_100045F00((uint64_t)(v66 + 7));
        size_t v72 = sub_100045F00(v183);
        uint64_t v73 = (unsigned __int8 *)sub_10004A6E4(v181);
        char v74 = (unsigned __int8 *)sub_10004A6E4(v183);
        BOOL v75 = sub_1006FAA70((uint64_t)v74, v70, v71, v72, v73, v74);
        int v69 = *(_DWORD **)out;
        v67 |= v75;
        if (*(void *)out) {
LABEL_94:
        }
          operator delete(v69);
        uint64_t v76 = *(void *)__p;
        if (*(void *)__p) {
          operator delete(*(void **)__p);
        }
        if ((v189 & v67) == 1) {
          int v197 = sub_1006FA8B0(v76, *(char *)(*(void *)(v179 + 8) + 216), v193[72], v193[76]);
        }
        else {
          int v197 = (v189 ^ 1) & v67;
        }
        id v77 = *(id *)v193;
        sub_10004191C(__p, (char *)[v77 UTF8String]);
        uint64_t v78 = (char **)sub_10003156C((uint64_t)&v215, (const void **)__p);
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }

        if (v216 == v78)
        {
          id v79 = *(id *)v193;
          sub_10004191C(__p, (char *)[v79 UTF8String]);
          *(void *)uuid_string_t out = __p;
          *((unsigned char *)sub_10030CB90((uint64_t **)&v215, (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)out) + 56) = v197;
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        else
        {
          id v79 = *(id *)v193;
          sub_10004191C(__p, (char *)[v79 UTF8String]);
          *(void *)uuid_string_t out = __p;
          uint64_t v80 = sub_10030CB90((uint64_t **)&v215, (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)out);
          char v81 = v197;
          if (!*((unsigned char *)v80 + 56)) {
            char v81 = 0;
          }
          *((unsigned char *)v80 + 56) = v81;
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }

        int v82 = qword_100A19E90;
        BOOL v83 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
        int v67 = v197;
        if (v189)
        {
          if (v83)
          {
            uint64_t v84 = v177 + 232;
            if (*(char *)(v177 + 255) < 0) {
              uint64_t v84 = *v178;
            }
            memset(out, 0, sizeof(out));
            uuid_unparse_upper(a2, out);
            sub_10004191C(&v231, out);
            if (v232 >= 0) {
              uint64_t v85 = &v231;
            }
            else {
              uint64_t v85 = (long long *)v231;
            }
            long long v221 = *v186;
            int v222 = *((_DWORD *)v193 + 9);
            sub_1000417A8((uint64_t)&v221, out);
            if (out[23] >= 0) {
              uint64_t v86 = out;
            }
            else {
              uint64_t v86 = *(char **)out;
            }
            int v87 = *(char *)(*(void *)(v179 + 8) + 216);
            if (v193[76]) {
              CFStringRef v88 = @">";
            }
            else {
              CFStringRef v88 = @"<";
            }
            int v89 = v193[72];
            sub_10004C2C4((uint64_t)(v66 + 7), &v218);
            if (v220 >= 0) {
              int v90 = &v218;
            }
            else {
              int v90 = (long long *)v218;
            }
            sub_10004C2C4(v183, v204);
            long long v175 = v90;
            long long v176 = v82;
            char v91 = v85;
            if (v205 >= 0) {
              uint64_t v92 = v204;
            }
            else {
              uint64_t v92 = (void **)v204[0];
            }
            sub_10004C2C4(v181, v202);
            if (v203 >= 0) {
              char v93 = v202;
            }
            else {
              char v93 = (void **)v202[0];
            }
            id v180 = *(id *)v193;
            id v94 = *(id *)v193;
            sub_10004191C(v200, (char *)[v94 UTF8String]);
            id v217 = v200;
            int v95 = *((unsigned __int8 *)sub_10030CB90((uint64_t **)&v215, (const void **)v200, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v217)+ 56);
            *(_DWORD *)std::string __p = 136317954;
            *(void *)&__p[4] = v84;
            *(_WORD *)&unsigned char __p[12] = 2080;
            *(void *)&unsigned char __p[14] = v91;
            *(_WORD *)&unsigned char __p[22] = 2080;
            *(void *)unsigned int v224 = v86;
            *(_WORD *)&v224[8] = 1024;
            *(_DWORD *)int v225 = v87;
            *(_WORD *)&v225[4] = 2112;
            *(void *)&v225[6] = v88;
            *(_WORD *)&v225[14] = 1024;
            *(_DWORD *)&v225[16] = v89;
            *(_WORD *)&v225[20] = 2080;
            *(void *)&v225[22] = v175;
            *(_WORD *)&v225[30] = 2080;
            *(void *)&v225[32] = v92;
            *(_WORD *)&v225[40] = 2080;
            *(void *)&v225[42] = v93;
            *(_WORD *)&v225[50] = 1024;
            int v226 = v197;
            __int16 v227 = 2112;
            id v228 = v180;
            __int16 v229 = 1024;
            int v230 = v95;
            _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_INFO, "filterByEnhancedRules uuidWithBlobAndMask session:%s device:%s uuid:%s rssi:%d (%@%d?) data:%s blob:%s mask:%s match:%d matchMap[%@]:%d", __p, 0x6Au);
            if (v201 < 0) {
              operator delete(v200[0]);
            }

            if (v203 < 0) {
              operator delete(v202[0]);
            }
            if (v205 < 0) {
              operator delete(v204[0]);
            }
            if (v220 < 0) {
              operator delete((void *)v218);
            }
            if (out[23] < 0) {
              operator delete(*(void **)out);
            }
            if (SHIBYTE(v232) < 0) {
              operator delete((void *)v231);
            }

LABEL_176:
            int v67 = v197;
          }
        }
        else if (v83)
        {
          uint64_t v96 = v177 + 232;
          if (*(char *)(v177 + 255) < 0) {
            uint64_t v96 = *v178;
          }
          memset(out, 0, sizeof(out));
          uuid_unparse_upper(a2, out);
          sub_10004191C(&v231, out);
          if (v232 >= 0) {
            uint64_t v97 = &v231;
          }
          else {
            uint64_t v97 = (long long *)v231;
          }
          long long v221 = *v186;
          int v222 = *((_DWORD *)v193 + 9);
          sub_1000417A8((uint64_t)&v221, out);
          if (out[23] >= 0) {
            uint64_t v98 = out;
          }
          else {
            uint64_t v98 = *(char **)out;
          }
          sub_10004C2C4((uint64_t)(v66 + 7), &v218);
          if (v220 >= 0) {
            unsigned __int8 v99 = &v218;
          }
          else {
            unsigned __int8 v99 = (long long *)v218;
          }
          sub_10004C2C4(v183, v204);
          if (v205 >= 0) {
            int v100 = v204;
          }
          else {
            int v100 = (void **)v204[0];
          }
          sub_10004C2C4(v181, v202);
          if (v203 >= 0) {
            int v101 = v202;
          }
          else {
            int v101 = (void **)v202[0];
          }
          id v102 = *(id *)v193;
          id v103 = *(id *)v193;
          sub_10004191C(v200, (char *)[v103 UTF8String]);
          id v217 = v200;
          int v104 = *((unsigned __int8 *)sub_10030CB90((uint64_t **)&v215, (const void **)v200, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v217)+ 56);
          *(_DWORD *)std::string __p = 136317186;
          *(void *)&__p[4] = v96;
          *(_WORD *)&unsigned char __p[12] = 2080;
          *(void *)&unsigned char __p[14] = v97;
          *(_WORD *)&unsigned char __p[22] = 2080;
          *(void *)unsigned int v224 = v98;
          *(_WORD *)&v224[8] = 2080;
          *(void *)int v225 = v99;
          *(_WORD *)&v225[8] = 2080;
          *(void *)&v225[10] = v100;
          *(_WORD *)&v225[18] = 2080;
          *(void *)&v225[20] = v101;
          *(_WORD *)&v225[28] = 1024;
          *(_DWORD *)&v225[30] = v197;
          *(_WORD *)&v225[34] = 2112;
          *(void *)&v225[36] = v102;
          *(_WORD *)&v225[44] = 1024;
          *(_DWORD *)&v225[46] = v104;
          _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_INFO, "filterByEnhancedRules uuidWithBlobAndMask session:%s device:%s uuid:%s data:%s blob:%s mask:%s match:%d matchMap[%@]:%d", __p, 0x54u);
          if (v201 < 0) {
            operator delete(v200[0]);
          }

          if (v203 < 0) {
            operator delete(v202[0]);
          }
          if (v205 < 0) {
            operator delete(v204[0]);
          }
          if (v220 < 0) {
            operator delete((void *)v218);
          }
          if (out[23] < 0) {
            operator delete(*(void **)out);
          }
          if (SHIBYTE(v232) < 0) {
            operator delete((void *)v231);
          }

          goto LABEL_176;
        }
        id v105 = (void *)v66[1];
        if (v105)
        {
          do
          {
            int v106 = v105;
            id v105 = (void *)*v105;
          }
          while (v105);
        }
        else
        {
          do
          {
            int v106 = (void *)v66[2];
            BOOL v25 = *v106 == (void)v66;
            unsigned __int16 v66 = v106;
          }
          while (!v25);
        }
        unsigned __int16 v66 = v106;
        if (v106 == v182) {
          goto LABEL_183;
        }
      }
    }
LABEL_184:
    uint64_t v107 = *(void *)(v177 + 8);
    uint64_t v108 = *(void *)(v107 + 96);
    uint64_t v109 = *(void *)(v107 + 104);
    if (v108 != v109)
    {
      while (*(_DWORD *)(v108 + 104) != 2)
      {
        v108 += 112;
        if (v108 == v109) {
          goto LABEL_241;
        }
      }
      size_t v187 = sub_100045F00(*(void *)(v179 + 8) + 48);
      char v184 = (unsigned __int8 *)sub_10004A6E4(*(void *)(v179 + 8) + 48);
      if (v187 >= 2 && *(_WORD *)v184 != 76)
      {
        long long v231 = 0uLL;
        uint64_t v232 = 0;
        sub_1006FAE60(*(void *)(v177 + 8), (uint64_t *)&v231);
        uint64_t v190 = *((void *)&v231 + 1);
        uint64_t v111 = v231;
        if ((void)v231 != *((void *)&v231 + 1))
        {
          int v198 = *(unsigned __int16 *)v184;
          do
          {
            if (v198 == *(unsigned __int16 *)(v111 + 16))
            {
              if (sub_100013DCC(v111 + 40))
              {
                BOOL v112 = 1;
              }
              else
              {
                BOOL v112 = sub_100013DCC(v111 + 56);
                char v113 = v187 < 3 || v112;
                if ((v113 & 1) == 0)
                {
                  size_t v114 = sub_100045F00(v111 + 40);
                  uint64_t v115 = (unsigned __int8 *)sub_10004A6E4(v111 + 56);
                  unsigned __int8 v116 = (unsigned __int8 *)sub_10004A6E4(v111 + 40);
                  BOOL v112 = sub_1006FAA70((uint64_t)v116, v184 + 2, v187 - 2, v114, v115, v116);
                }
              }
              BOOL v194 = v112;
              id v117 = *(id *)v111;
              sub_10004191C(__p, (char *)[v117 UTF8String]);
              uint64_t v118 = (char **)sub_10003156C((uint64_t)&v215, (const void **)__p);
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }

              if (v216 == v118)
              {
                id v119 = *(id *)v111;
                sub_10004191C(__p, (char *)[v119 UTF8String]);
                *(void *)uuid_string_t out = __p;
                *((unsigned char *)sub_10030CB90((uint64_t **)&v215, (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)out)
                + 56) = v194;
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }
              else
              {
                id v119 = *(id *)v111;
                sub_10004191C(__p, (char *)[v119 UTF8String]);
                *(void *)uuid_string_t out = __p;
                id v120 = sub_10030CB90((uint64_t **)&v215, (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)out);
                BOOL v121 = v194;
                if (!*((unsigned char *)v120 + 56)) {
                  BOOL v121 = 0;
                }
                *((unsigned char *)v120 + 56) = v121;
                if ((__p[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__p);
                }
              }

              long long v122 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
              {
                uint64_t v123 = v177 + 232;
                if (*(char *)(v177 + 255) < 0) {
                  uint64_t v123 = *(void *)(v177 + 232);
                }
                memset(out, 0, sizeof(out));
                uuid_unparse_upper(a2, out);
                sub_10004191C(&v218, out);
                if (v220 >= 0) {
                  long long v124 = &v218;
                }
                else {
                  long long v124 = (long long *)v218;
                }
                int v125 = *(unsigned __int16 *)(v111 + 16);
                sub_1000335D8(&v221, v184, v187);
                sub_10004C2C4((uint64_t)&v221, out);
                if (out[23] >= 0) {
                  int v126 = out;
                }
                else {
                  int v126 = *(char **)out;
                }
                sub_10004C2C4(v111 + 40, v204);
                if (v205 >= 0) {
                  int v127 = v204;
                }
                else {
                  int v127 = (void **)v204[0];
                }
                sub_10004C2C4(v111 + 56, v202);
                if (v203 >= 0) {
                  BOOL v128 = v202;
                }
                else {
                  BOOL v128 = (void **)v202[0];
                }
                id v129 = *(id *)v111;
                id v130 = *(id *)v111;
                sub_10004191C(v200, (char *)[v130 UTF8String]);
                id v217 = v200;
                int v131 = *((unsigned __int8 *)sub_10030CB90((uint64_t **)&v215, (const void **)v200, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v217)+ 56);
                *(_DWORD *)std::string __p = 136317442;
                *(void *)&__p[4] = v123;
                *(_WORD *)&unsigned char __p[12] = 2080;
                *(void *)&unsigned char __p[14] = v124;
                *(_WORD *)&unsigned char __p[22] = 1024;
                *(_DWORD *)unsigned int v224 = v125;
                *(_WORD *)&v224[4] = 1024;
                *(_DWORD *)&v224[6] = v198;
                *(_WORD *)int v225 = 2080;
                *(void *)&v225[2] = v126;
                *(_WORD *)&v225[10] = 2080;
                *(void *)&v225[12] = v127;
                *(_WORD *)&v225[20] = 2080;
                *(void *)&v225[22] = v128;
                *(_WORD *)&v225[30] = 1024;
                *(_DWORD *)&v225[32] = v194;
                *(_WORD *)&v225[36] = 2112;
                *(void *)&v225[38] = v129;
                *(_WORD *)&v225[46] = 1024;
                *(_DWORD *)&v225[48] = v131;
                _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_INFO, "filterByEnhancedRules NonAppleManufacturerData session:%s device:%s filterMfgrID:%04X payloadMfgrId:%04X payload:%s blob:%s mask:%s match:%d matchMap[%@]:%d", __p, 0x56u);
                if (v201 < 0) {
                  operator delete(v200[0]);
                }

                if (v203 < 0) {
                  operator delete(v202[0]);
                }
                if (v205 < 0) {
                  operator delete(v204[0]);
                }
                if (out[23] < 0) {
                  operator delete(*(void **)out);
                }
                *(void *)&long long v221 = &off_100998428;
                if (*((void *)&v221 + 1)) {
                  sub_1000368F4(*((atomic_uint **)&v221 + 1));
                }
                if (v220 < 0) {
                  operator delete((void *)v218);
                }
              }
            }
            v111 += 112;
          }
          while (v111 != v190);
        }
        *(void *)std::string __p = &v231;
        sub_1000A7FF0((void ***)__p);
      }
    }
LABEL_241:
    uint64_t v132 = *(void *)(v177 + 8);
    uint64_t v133 = *(void *)(v132 + 96);
    uint64_t v134 = *(char ***)(v132 + 104);
    while (1)
    {
      if ((char **)v133 == v134) {
        goto LABEL_311;
      }
      if (*(_DWORD *)(v133 + 104) == 3) {
        break;
      }
      v133 += 112;
    }
    long long v231 = 0uLL;
    uint64_t v232 = 0;
    sub_1006FAF1C(v132, (uint64_t *)&v231);
    uint64_t v191 = *((void *)&v231 + 1);
    for (uint64_t i = v231; i != v191; i += 112)
    {
      uint64_t v136 = *(void *)(v179 + 8);
      if (*(char *)(v136 + 39) < 0)
      {
        sub_10003B098(__p, *(void **)(v136 + 16), *(void *)(v136 + 24));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v136 + 16);
        *(void *)&__p[16] = *(void *)(v136 + 32);
      }
      if (__p[23] >= 0) {
        uint64_t v137 = __p;
      }
      else {
        uint64_t v137 = *(unsigned char **)__p;
      }
      long long v199 = +[NSString stringWithUTF8String:v137];
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
      id v195 = *(id *)(i + 96);
      id v138 = [v195 length];
      if (v138 <= [v199 length])
      {
        unsigned int v139 = 0;
        int v140 = *(_DWORD *)(i + 80);
        if (v140 > 1)
        {
          if (v140 != 2)
          {
            if (v140 == 1000)
            {
              uint64_t v142 = *(void *)(i + 88);
              if ((v142 & 2) != 0) {
                unsigned int v139 = [v199 compare:v195 options:v142 range:[v199 length]] == 0;
              }
              else {
                unsigned int v139 = [v199 rangeOfString:v195 options:v142 range:[v199 length]] != (id)0x7FFFFFFFFFFFFFFFLL;
              }
            }
            goto LABEL_287;
          }
          uint64_t v144 = *(void *)(v179 + 8);
          if (*(char *)(v144 + 39) < 0)
          {
            sub_10003B098(__p, *(void **)(v144 + 16), *(void *)(v144 + 24));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v144 + 16);
            *(void *)&__p[16] = *(void *)(v144 + 32);
          }
          if (__p[23] >= 0) {
            unsigned int v149 = __p;
          }
          else {
            unsigned int v149 = *(unsigned char **)__p;
          }
          unsigned int v150 = +[NSString stringWithUTF8String:v149];
          unsigned int v139 = [v150 hasSuffix:v195];

          goto LABEL_285;
        }
        if (!v140)
        {
          uint64_t v143 = *(void *)(v179 + 8);
          if (*(char *)(v143 + 39) < 0)
          {
            sub_10003B098(__p, *(void **)(v143 + 16), *(void *)(v143 + 24));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v143 + 16);
            *(void *)&__p[16] = *(void *)(v143 + 32);
          }
          if (__p[23] >= 0) {
            char v147 = __p;
          }
          else {
            char v147 = *(unsigned char **)__p;
          }
          unsigned int v148 = +[NSString stringWithUTF8String:v147];
          unsigned int v139 = [v148 containsString:v195];

LABEL_285:
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
          goto LABEL_287;
        }
        if (v140 == 1)
        {
          uint64_t v141 = *(void *)(v179 + 8);
          if (*(char *)(v141 + 39) < 0)
          {
            sub_10003B098(__p, *(void **)(v141 + 16), *(void *)(v141 + 24));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v141 + 16);
            *(void *)&__p[16] = *(void *)(v141 + 32);
          }
          if (__p[23] >= 0) {
            uint64_t v145 = __p;
          }
          else {
            uint64_t v145 = *(unsigned char **)__p;
          }
          unsigned int v146 = +[NSString stringWithUTF8String:v145];
          unsigned int v139 = [v146 hasPrefix:v195];

          goto LABEL_285;
        }
      }
      else
      {
        unsigned int v139 = 0;
      }
LABEL_287:
      id v151 = *(id *)i;
      sub_10004191C(__p, (char *)[v151 UTF8String]);
      int v152 = (char **)sub_10003156C((uint64_t)&v215, (const void **)__p);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }

      if (v216 == v152)
      {
        id v153 = *(id *)i;
        sub_10004191C(__p, (char *)[v153 UTF8String]);
        *(void *)uuid_string_t out = __p;
        *((unsigned char *)sub_10030CB90((uint64_t **)&v215, (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)out) + 56) = v139;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }
      else
      {
        id v153 = *(id *)i;
        sub_10004191C(__p, (char *)[v153 UTF8String]);
        *(void *)uuid_string_t out = __p;
        long long v154 = sub_10030CB90((uint64_t **)&v215, (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)out);
        if (*((unsigned char *)v154 + 56)) {
          char v155 = v139;
        }
        else {
          char v155 = 0;
        }
        *((unsigned char *)v154 + 56) = v155;
        if ((__p[23] & 0x80000000) != 0) {
          operator delete(*(void **)__p);
        }
      }

      long long v156 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        uint64_t v157 = v177 + 232;
        if (*(char *)(v177 + 255) < 0) {
          uint64_t v157 = *(void *)(v177 + 232);
        }
        memset(out, 0, sizeof(out));
        uuid_unparse_upper(a2, out);
        sub_10004191C(&v218, out);
        if (v220 >= 0) {
          long long v158 = &v218;
        }
        else {
          long long v158 = (long long *)v218;
        }
        id v159 = *(id *)(i + 96);
        int v160 = *(_DWORD *)(i + 80);
        int v161 = *(_DWORD *)(i + 88);
        id v162 = *(id *)i;
        id v163 = *(id *)i;
        sub_10004191C(out, (char *)[v163 UTF8String]);
        v204[0] = out;
        int v164 = *((unsigned __int8 *)sub_10030CB90((uint64_t **)&v215, (const void **)out, (uint64_t)&unk_1007BE9D0, (_OWORD **)v204)+ 56);
        *(_DWORD *)std::string __p = 136316930;
        *(void *)&__p[4] = v157;
        *(_WORD *)&unsigned char __p[12] = 2080;
        *(void *)&unsigned char __p[14] = v158;
        *(_WORD *)&unsigned char __p[22] = 2112;
        *(void *)unsigned int v224 = v159;
        *(_WORD *)&v224[8] = 1024;
        *(_DWORD *)int v225 = v160;
        *(_WORD *)&v225[4] = 1024;
        *(_DWORD *)&v225[6] = v161;
        *(_WORD *)&v225[10] = 1024;
        *(_DWORD *)&v225[12] = v139;
        *(_WORD *)&v225[16] = 2112;
        *(void *)&v225[18] = v162;
        *(_WORD *)&v225[26] = 1024;
        *(_DWORD *)&v225[28] = v164;
        _os_log_impl((void *)&_mh_execute_header, v156, OS_LOG_TYPE_INFO, "filterByEnhancedRules Name session:%s device:%s filterNameSubstr:%@ matchOption:%d NSStringCompareOptions:%d match:%d matchMap[%@]:%d", __p, 0x42u);
        if (out[23] < 0) {
          operator delete(*(void **)out);
        }

        if (v220 < 0) {
          operator delete((void *)v218);
        }
      }
    }
    *(void *)std::string __p = &v231;
    sub_1000A7FF0((void ***)__p);
LABEL_311:
    uint64_t v165 = (uint64_t *)v215;
    if (v215 == v216)
    {
LABEL_319:
      int v168 = 0;
    }
    else
    {
      while (!*((unsigned char *)v165 + 56))
      {
        long long v166 = (char *)v165[1];
        if (v166)
        {
          do
          {
            long long v167 = (char **)v166;
            long long v166 = *(char **)v166;
          }
          while (v166);
        }
        else
        {
          do
          {
            long long v167 = (char **)v165[2];
            BOOL v25 = *v167 == (char *)v165;
            uint64_t v165 = (uint64_t *)v167;
          }
          while (!v25);
        }
        uint64_t v165 = (uint64_t *)v167;
        uint64_t v134 = v216;
        if (v167 == v216) {
          goto LABEL_319;
        }
      }
      unsigned int v169 = v165 + 4;
      if (*((char *)v165 + 55) < 0) {
        unsigned int v169 = (void *)*v169;
      }
      long long v170 = +[NSString stringWithUTF8String:v169];
      [v172 setString:v170];

      LODWORD(v134) = *((unsigned char *)v165 + 56) != 0;
      int v168 = 1;
    }
    uint64_t v110 = v168 & v134;
    *(void *)std::string __p = &v206;
    sub_1000A7FF0((void ***)__p);
    *(void *)std::string __p = &v209;
    sub_1000A7FF0((void ***)__p);
    if (v212)
    {
      __int16 v213 = (char *)v212;
      operator delete(v212);
    }
    sub_10004BA28((uint64_t)&v215, v216[0]);
  }

  return v110;
}

void sub_1006FA018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,uint64_t a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,void *a61,uint64_t a62,uint64_t a63)
{
  a69 = &a47;
  sub_1000A7FF0((void ***)&a69);
  a69 = &a50;
  sub_1000A7FF0((void ***)&a69);
  if (__p)
  {
    a54 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10004BA28((uint64_t)&a56, (char *)a57);

  _Unwind_Resume(a1);
}

uint64_t sub_1006FA5BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (*(unsigned char *)v4 || [*(id *)(v4 + 88) count]) {
    return 1;
  }
  else {
    return sub_100653EE4(*(void *)(a3 + 8), *(void *)(a4 + 8)) ^ 1;
  }
}

uint64_t sub_1006FA610@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)(result + 96);
  uint64_t v4 = *(void *)(result + 104);
  if (v3 != v4)
  {
    uint64_t v5 = v3 + 56;
    do
    {
      if (*(_DWORD *)(v5 + 48) == 1)
      {
        if (sub_100013DCC(v5 - 16) || (uint64_t result = sub_100013DCC(v5), result))
        {
          uint64_t v6 = v5 - 56;
          unint64_t v7 = a2[1];
          if (v7 >= a2[2])
          {
            uint64_t result = sub_1006FD6B4(a2, v6);
          }
          else
          {
            sub_1006FD7CC(a2[1], v6);
            uint64_t result = v7 + 112;
            a2[1] = v7 + 112;
          }
          a2[1] = result;
        }
      }
      v5 += 112;
    }
    while (v5 - 56 != v4);
  }
  return result;
}

void sub_1006FA6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_1000A7FF0(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FA6E0(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, unsigned __int8 **a4)
{
  uint64_t v4 = *(unsigned __int8 **)a3;
  if (*(void *)a3 == *(void *)(a3 + 8)) {
    return 0;
  }
  BOOL v8 = a4[1];
  while (1)
  {
    unint64_t v9 = *a4;
    if (*a4 == v8)
    {
      unint64_t v9 = v8;
    }
    else
    {
      while (!sub_10022A44C(v9, v4))
      {
        v9 += 20;
        if (v9 == v8)
        {
          unint64_t v9 = v8;
          break;
        }
      }
      BOOL v8 = a4[1];
    }
    if (v9 != v8) {
      break;
    }
    v4 += 20;
    if (v4 == *(unsigned __int8 **)(a3 + 8)) {
      return 0;
    }
  }
  uint64_t v11 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    sub_1000417A8((uint64_t)v4, v16);
    if (v17 >= 0) {
      long long v12 = v16;
    }
    else {
      long long v12 = (void **)v16[0];
    }
    memset(out, 0, 37);
    uuid_unparse_upper(a2, out);
    sub_10004191C(__p, out);
    if (v15 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446466;
    uint64_t v19 = v12;
    __int16 v20 = 2082;
    uint64_t v21 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Matched UUID %{public}s for device \"%{public}s\"", buf, 0x16u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0) {
      operator delete(v16[0]);
    }
  }
  return 1;
}

void sub_1006FA88C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

uint64_t sub_1006FA8B0(uint64_t a1, int a2, int a3, int a4)
{
  if (a4 == 1) {
    return a2 > a3;
  }
  if (!a4) {
    return a2 < a3;
  }
  BOOL v8 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109632;
    v9[1] = a2;
    __int16 v10 = 1024;
    int v11 = a3;
    __int16 v12 = 1024;
    int v13 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: matchRssiThreshold rssi:%d threshold:%d thresholdOrder:%d - unsupported threshold order value, no RSSI filtering", (uint8_t *)v9, 0x14u);
  }
  return 1;
}

uint64_t sub_1006FA9A0@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)(result + 96);
  uint64_t v4 = *(void *)(result + 104);
  if (v3 != v4)
  {
    uint64_t v5 = v3 + 56;
    do
    {
      if (*(_DWORD *)(v5 + 48) == 1)
      {
        uint64_t result = sub_100013DCC(v5 - 16);
        if ((result & 1) == 0)
        {
          uint64_t result = sub_100013DCC(v5);
          if ((result & 1) == 0)
          {
            uint64_t v6 = v5 - 56;
            unint64_t v7 = a2[1];
            if (v7 >= a2[2])
            {
              uint64_t result = sub_1006FD6B4(a2, v6);
            }
            else
            {
              sub_1006FD7CC(a2[1], v6);
              uint64_t result = v7 + 112;
              a2[1] = v7 + 112;
            }
            a2[1] = result;
          }
        }
      }
      v5 += 112;
    }
    while (v5 - 56 != v4);
  }
  return result;
}

void sub_1006FAA4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  *(void *)(v10 + 8) = v11;
  a10 = (void **)v10;
  sub_1000A7FF0(&a10);
  _Unwind_Resume(a1);
}

BOOL sub_1006FAA70(uint64_t a1, unsigned __int8 *a2, size_t a3, size_t a4, unsigned __int8 *a5, unsigned __int8 *a6)
{
  uint64_t v10 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    sub_1000335D8(&v30, a2, a3);
    sub_10004C2C4((uint64_t)&v30, v32);
    if (v33 >= 0) {
      uint64_t v11 = v32;
    }
    else {
      uint64_t v11 = (void **)v32[0];
    }
    sub_1000335D8(&v26, a6, a4);
    sub_10004C2C4((uint64_t)&v26, v28);
    if (v29 >= 0) {
      __int16 v12 = v28;
    }
    else {
      __int16 v12 = (void **)v28[0];
    }
    sub_1000335D8(&v22, a5, a4);
    sub_10004C2C4((uint64_t)&v22, __p);
    if (v25 >= 0) {
      int v13 = __p;
    }
    else {
      int v13 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315650;
    int v35 = v11;
    __int16 v36 = 2080;
    *(void *)int v37 = v12;
    *(_WORD *)&v37[8] = 2080;
    uint64_t v38 = v13;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "matchMaskAndBlob data:%s blob:%s mask:%s", buf, 0x20u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
    long long v22 = &off_100998428;
    if (v23) {
      sub_1000368F4(v23);
    }
    if (v29 < 0) {
      operator delete(v28[0]);
    }
    uint64_t v26 = &off_100998428;
    if (v27) {
      sub_1000368F4(v27);
    }
    if (v33 < 0) {
      operator delete(v32[0]);
    }
    uint64_t v30 = &off_100998428;
    if (v31) {
      sub_1000368F4(v31);
    }
  }
  if (a3 >= a4)
  {
    if (a4)
    {
      BOOL v14 = 0;
      char v15 = 0;
      int v16 = qword_100A19E90;
      do
      {
        int v17 = *((unsigned __int8 *)v15 + (void)a2);
        int v18 = *((unsigned __int8 *)v15 + (void)a5);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          int v19 = *((unsigned __int8 *)v15 + (void)a6);
          *(_DWORD *)long long buf = 134219008;
          int v35 = v15;
          __int16 v36 = 1024;
          *(_DWORD *)int v37 = v17;
          *(_WORD *)&void v37[4] = 1024;
          *(_DWORD *)&v37[6] = v18;
          LOWORD(v38) = 1024;
          *(_DWORD *)((char *)&v38 + 2) = v19;
          HIWORD(v38) = 1024;
          int v39 = v18 & v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "matchMaskAndBlob byteIndex:%zu data:0x%02X mask:0x%02X blob:0x%02X result:0x%02X", buf, 0x24u);
          int v16 = qword_100A19E90;
        }
        if ((v18 & v17) != *((unsigned __int8 *)v15 + (void)a6)) {
          break;
        }
        char v15 = (void **)((char *)v15 + 1);
        BOOL v14 = (unint64_t)v15 >= a4;
      }
      while ((void **)a4 != v15);
    }
    else
    {
      return 1;
    }
  }
  else
  {
    return 0;
  }
  return v14;
}

void sub_1006FAD8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, atomic_uint *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,atomic_uint *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a13) {
    sub_1000368F4(a13);
  }
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18) {
    sub_1000368F4(a18);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26) {
    sub_1000368F4(a26);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006FAE60@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void *)(result + 96);
  uint64_t v3 = *(void *)(result + 104);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      if (*(_DWORD *)(v2 + 104) == 2)
      {
        if (v5 >= a2[2])
        {
          uint64_t result = sub_1006FD6B4(a2, v2);
          unint64_t v5 = result;
        }
        else
        {
          uint64_t result = sub_1006FD7CC(v5, v2);
          v5 += 112;
          a2[1] = v5;
        }
        a2[1] = v5;
      }
      v2 += 112;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1006FAEF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A7FF0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FAF1C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(void *)(result + 96);
  uint64_t v3 = *(void *)(result + 104);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      if (*(_DWORD *)(v2 + 104) == 3)
      {
        if (v5 >= a2[2])
        {
          uint64_t result = sub_1006FD6B4(a2, v2);
          unint64_t v5 = result;
        }
        else
        {
          uint64_t result = sub_1006FD7CC(v5, v2);
          v5 += 112;
          a2[1] = v5;
        }
        a2[1] = v5;
      }
      v2 += 112;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_1006FAFB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A7FF0((void ***)va);
  _Unwind_Resume(a1);
}

__n128 sub_1006FAFD8(uint64_t a1, __n128 *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_1006FDD38((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v6 = (void *)(v5 + 8 * (v4 / 0xAA));
  uint64_t v7 = *v6 + 24 * (v4 % 0xAA);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4080;
  }
  __n128 result = *a2;
  *(__n128 *)(v7 - 24) = *a2;
  *(unsigned char *)(v7 - 8) = a2[1].n128_u8[0];
  uint64_t v9 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 - 1;
  *(void *)(a1 + 40) = v9;
  return result;
}

void sub_1006FB074(uint64_t a1)
{
  if ([*(id *)(*(void *)(a1 + 8) + 88) count])
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v2 = *(id *)(*(void *)(a1 + 8) + 88);
    id v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
    if (v3)
    {
      uint64_t v4 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v4) {
            objc_enumerationMutation(v2);
          }
          id v6 = *(id *)(*((void *)&v16 + 1) + 8 * i);
          id v7 = [v6 bytes];
          id v8 = [v6 length];
          if (v8) {
            BOOL v9 = v7 == 0;
          }
          else {
            BOOL v9 = 1;
          }
          if (v9)
          {
            uint64_t v10 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
              sub_100796C94(&v14, v15, v10);
            }
          }
          else
          {
            if ((unint64_t)v8 >= 0x15) {
              unsigned __int16 v11 = 21;
            }
            else {
              unsigned __int16 v11 = (unsigned __int16)v8;
            }
            __int16 v12 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 138412290;
              id v21 = v6;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Adding zone %@", buf, 0xCu);
            }
            uint64_t v13 = sub_10003FB34();
            if ((*(unsigned int (**)(uint64_t, id, void, uint64_t))(*(void *)v13 + 608))(v13, v7, v11, 240))
            {
              goto LABEL_22;
            }
          }
        }
        id v3 = [v2 countByEnumeratingWithState:&v16 objects:v22 count:16];
      }
      while (v3);
    }
LABEL_22:
  }
}

void sub_1006FB27C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006FB2A4(const unsigned __int8 **a1, unsigned int a2)
{
  uint64_t v39 = 0;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  *(_OWORD *)uint64_t v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v22 = 0u;
  sub_10004C67C((uint64_t)&v22);
  id v3 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[2];
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: _printAdvMap %lu items in map", buf, 0xCu);
  }
  id v7 = *a1;
  uint64_t v5 = a1 + 1;
  id v6 = v7;
  if (v7 != (const unsigned __int8 *)v5)
  {
    do
    {
      id v8 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, sizeof(buf));
        uuid_unparse_upper(v6 + 32, buf);
        sub_10004191C(__p, buf);
        int v9 = v21;
        uint64_t v10 = (void **)__p[0];
        sub_1000130F8(*((void *)v6 + 7));
        unsigned __int16 v11 = __p;
        if (v9 < 0) {
          unsigned __int16 v11 = v10;
        }
        __int16 v12 = buf;
        if (buf[23] < 0) {
          __int16 v12 = *(unsigned char **)buf;
        }
        BOOL v13 = (*(void *)(*((void *)v6 + 7) + 8 * ((unint64_t)a2 >> 6) + 168) & (1 << a2)) != 0;
        *(_DWORD *)uint64_t v40 = 136315906;
        int v41 = v11;
        __int16 v42 = 2080;
        id v43 = v12;
        __int16 v44 = 1024;
        unsigned int v45 = a2;
        __int16 v46 = 1024;
        BOOL v47 = v13;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump:    %s:%s hasType(%d):%d", v40, 0x22u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
      uint8_t v14 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v14)
      {
        do
        {
          char v15 = (const unsigned __int8 **)v14;
          uint8_t v14 = *(unsigned __int8 **)v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          char v15 = (const unsigned __int8 **)*((void *)v6 + 2);
          BOOL v16 = *v15 == v6;
          id v6 = (const unsigned __int8 *)v15;
        }
        while (!v16);
      }
      id v6 = (const unsigned __int8 *)v15;
    }
    while (v15 != v5);
  }
  *(void *)((char *)&v22
  *(void *)&long long v23 = v17;
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1006FB614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

void sub_1006FB648(uint64_t a1, unsigned int a2)
{
  if (qword_100A14790 != -1) {
    dispatch_once(&qword_100A14790, &stru_1009BFA00);
  }
  long long v22 = 0;
  v23[0] = 0;
  v23[1] = 0;
  sub_1006FE0CC((uint64_t *)&v22, a1 + 104);
  id v3 = v22;
  if (v22 != (const unsigned __int8 *)v23)
  {
    do
    {
      if ((*(void *)(*((void *)v3 + 7) + 8 * ((unint64_t)a2 >> 6) + 168) & (1 << a2)) != 0) {
        sub_1006FDA58((uint64_t **)(a1 + 104), (unsigned __int8 *)v3 + 32);
      }
      uint64_t v4 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          uint64_t v5 = (const unsigned __int8 **)v4;
          uint64_t v4 = *(unsigned __int8 **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (const unsigned __int8 **)*((void *)v3 + 2);
          BOOL v6 = *v5 == v3;
          id v3 = (const unsigned __int8 *)v5;
        }
        while (!v6);
      }
      id v3 = (const unsigned __int8 *)v5;
    }
    while (v5 != (const unsigned __int8 **)v23);
  }
  if (byte_100A14788)
  {
    id v7 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: clearAdvDataCacheForAppleType before removal", buf, 2u);
    }
    sub_1006FB2A4(&v22, a2);
    id v8 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: clearAdvDataCacheForAppleType after removal", buf, 2u);
    }
    sub_1006FB2A4((const unsigned __int8 **)(a1 + 104), a2);
    int v9 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump: clearAdvDataCacheForAppleType removed items with type %d", buf, 8u);
    }
    uint64_t v10 = v22;
    if (v22 != (const unsigned __int8 *)v23)
    {
      do
      {
        if (a1 + 112 == sub_1000308C0(a1 + 104, (unsigned __int8 *)v10 + 32))
        {
          unsigned __int16 v11 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
          {
            *(_OWORD *)long long buf = 0u;
            memset(v33, 0, sizeof(v33));
            uuid_unparse_upper(v10 + 32, (char *)buf);
            sub_10004191C(__p, (char *)buf);
            int v12 = v21;
            BOOL v13 = (void **)__p[0];
            sub_1000130F8(*((void *)v10 + 7));
            uint8_t v14 = __p;
            if (v12 < 0) {
              uint8_t v14 = v13;
            }
            char v15 = buf;
            if (v33[7] < 0) {
              char v15 = *(uint8_t **)buf;
            }
            BOOL v16 = (*(void *)(*((void *)v10 + 7) + 8 * ((unint64_t)a2 >> 6) + 168) & (1 << a2)) != 0;
            *(_DWORD *)long long v24 = 136315906;
            long long v25 = v14;
            __int16 v26 = 2080;
            uint64_t v27 = v15;
            __int16 v28 = 1024;
            unsigned int v29 = a2;
            __int16 v30 = 1024;
            BOOL v31 = v16;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "statedump:    %s:%s hasType(%d):%d", v24, 0x22u);
            if ((v33[7] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v21 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        uint64_t v17 = (unsigned __int8 *)*((void *)v10 + 1);
        if (v17)
        {
          do
          {
            long long v18 = (const unsigned __int8 **)v17;
            uint64_t v17 = *(unsigned __int8 **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            long long v18 = (const unsigned __int8 **)*((void *)v10 + 2);
            BOOL v6 = *v18 == v10;
            uint64_t v10 = (const unsigned __int8 *)v18;
          }
          while (!v6);
        }
        uint64_t v10 = (const unsigned __int8 *)v18;
      }
      while (v18 != (const unsigned __int8 **)v23);
    }
  }
  sub_1006F71D4((uint64_t)&v22, v23[0]);
}

void sub_1006FB9F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20)
{
}

void sub_1006FBA34(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v4, "LE");
  sub_10004191C(__p, "LeScanAgentDebugClearAdvDataCache");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A14788);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_1006FBAD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006FBB0C(uint64_t a1)
{
  id v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 80)) {
      char v3 = "YES";
    }
    else {
      char v3 = "NO";
    }
    int v4 = *(unsigned __int8 *)(a1 + 81);
    if (*(unsigned char *)(a1 + 83)) {
      char v5 = "YES";
    }
    else {
      char v5 = "NO";
    }
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v4;
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&unsigned char buf[20] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \t\tfSupportsBackgrounding:%{public}s fSessionState:%d, fhasEntitlementBTCentralBackground:%{public}s", buf, 0x1Cu);
    id v2 = qword_100A19E90;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(void *)(a1 + 88)) {
      BOOL v6 = "YES";
    }
    else {
      BOOL v6 = "NO";
    }
    int v7 = *(_DWORD *)(a1 + 96);
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v7;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \t\thasDecayTimer:%{public}s fCurrentScanLevel:%d", buf, 0x12u);
    id v2 = qword_100A19E90;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 120);
    uint64_t v9 = *(void *)(a1 + 144);
    int v10 = *(unsigned __int16 *)(a1 + 176);
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&unsigned char buf[14] = v9;
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = v10;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \t\tfAdvDataMap.size:%lu fAdvLRUList.size:%lu fMaxNumOfReportsInMap:%d", buf, 0x1Cu);
    id v2 = qword_100A19E90;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(_DWORD *)(a1 + 208);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: \t\tfScanAgentType:%d", buf, 8u);
  }
  if (*(unsigned char *)(a1 + 178))
  {
    long long v37 = 0;
    long long v38 = 0;
    uint64_t v39 = 0;
    sub_1006FE0CC((uint64_t *)&v37, a1 + 104);
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    sub_1006FE328(&v34, a1 + 128);
    BOOL v31 = 0;
    long long v32 = 0;
    uint64_t v33 = 0;
    sub_1006FE3BC((uint64_t *)&v31, a1 + 152);
    int v12 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v36;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump: \t\t--- fAdvLRUList (size:%lu) ---------", buf, 0xCu);
    }
    for (uint64_t i = v35; (uint64_t *)i != &v34; uint64_t i = *(void *)(i + 8))
    {
      uint8_t v14 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper((const unsigned __int8 *)(i + 16), (char *)buf);
        sub_10004191C(__p, (char *)buf);
        char v15 = v30 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)uint64_t v40 = 136446210;
        int v41 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "statedump: \t\t %{public}s", v40, 0xCu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    BOOL v16 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v33;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "statedump: \t\t--- fAdvLRUListMap (size:%lu) ---------", buf, 0xCu);
    }
    uint64_t v17 = v31;
    if (v31 != (const unsigned __int8 *)&v32)
    {
      do
      {
        long long v18 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(v17 + 32, (char *)buf);
          sub_10004191C(__p, (char *)buf);
          long long v19 = v30 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)uint64_t v40 = 136446210;
          int v41 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "statedump: \t\t %{public}s", v40, 0xCu);
          if (v30 < 0) {
            operator delete(__p[0]);
          }
        }
        __int16 v20 = (unsigned __int8 *)*((void *)v17 + 1);
        if (v20)
        {
          do
          {
            char v21 = (const unsigned __int8 **)v20;
            __int16 v20 = *(unsigned __int8 **)v20;
          }
          while (v20);
        }
        else
        {
          do
          {
            char v21 = (const unsigned __int8 **)*((void *)v17 + 2);
            BOOL v22 = *v21 == v17;
            uint64_t v17 = (const unsigned __int8 *)v21;
          }
          while (!v22);
        }
        uint64_t v17 = (const unsigned __int8 *)v21;
      }
      while (v21 != (const unsigned __int8 **)&v32);
    }
    long long v23 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      *(void *)&uint8_t buf[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "statedump: \t\t--- fAdvDataMap (size:%lu) ---------", buf, 0xCu);
    }
    long long v24 = v37;
    if (v37 != (const unsigned __int8 *)&v38)
    {
      do
      {
        long long v25 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(v24 + 32, (char *)buf);
          sub_10004191C(__p, (char *)buf);
          __int16 v26 = v30 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)uint64_t v40 = 136446210;
          int v41 = v26;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "statedump: \t\t %{public}s", v40, 0xCu);
          if (v30 < 0) {
            operator delete(__p[0]);
          }
        }
        uint64_t v27 = (unsigned __int8 *)*((void *)v24 + 1);
        if (v27)
        {
          do
          {
            __int16 v28 = (const unsigned __int8 **)v27;
            uint64_t v27 = *(unsigned __int8 **)v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            __int16 v28 = (const unsigned __int8 **)*((void *)v24 + 2);
            BOOL v22 = *v28 == v24;
            long long v24 = (const unsigned __int8 *)v28;
          }
          while (!v22);
        }
        long long v24 = (const unsigned __int8 *)v28;
      }
      while (v28 != (const unsigned __int8 **)&v38);
    }
    sub_1000486F0((uint64_t)&v31, v32);
    sub_1002B308C(&v34);
    sub_1006F71D4((uint64_t)&v37, v38);
  }
}

void sub_1006FC110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21)
{
}

id sub_1006FC15C(uint64_t a1)
{
  id v2 = +[NSMutableArray array];
  if ([*(id *)(*(void *)(a1 + 8) + 88) count])
  {
    long long v18 = 0u;
    long long v19 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    id v3 = *(id *)(*(void *)(a1 + 8) + 88);
    id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v17;
      do
      {
        for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v17 != v5) {
            objc_enumerationMutation(v3);
          }
          id v7 = *(id *)(*((void *)&v16 + 1) + 8 * i);
          id v8 = [v7 bytes];
          if ([v7 length]) {
            BOOL v9 = v8 == 0;
          }
          else {
            BOOL v9 = 1;
          }
          if (v9)
          {
            int v10 = qword_100A19E90;
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
              sub_100796C94(&v14, v15, v10);
            }
          }
          else if ((unint64_t)[v7 length] < 0x16)
          {
            [v2 addObject:v7];
          }
          else
          {
            int v11 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", [v7 bytes], 21);
            [v2 addObject:v11];
          }
        }
        id v4 = [v3 countByEnumeratingWithState:&v16 objects:v20 count:16];
      }
      while (v4);
    }

    id v12 = v2;
  }
  else
  {
    id v12 = 0;
  }

  return v12;
}

void sub_1006FC360(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1006FC3A0(uint64_t a1, int a2, _DWORD *a3)
{
  uint64_t v4 = +[NSMutableArray array];
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v6 = *(void *)(v5 + 72);
  id v37 = (id)v4;
  uint64_t v38 = v6;
  while (v7 != v6)
  {
    uint64_t v8 = *(unsigned __int8 *)(v7 + 48);
    unsigned int v42 = *(unsigned __int8 *)(v7 + 8);
    int v9 = *(unsigned __int8 *)(v7 + 49);
    uint64_t v10 = *(unsigned __int8 *)(v7 + 50);
    uint64_t v11 = *(unsigned __int8 *)(v7 + 51);
    uint64_t v12 = *(unsigned __int8 *)(v7 + 52);
    id v13 = *(id *)(v7 + 56);
    if (*(unsigned char *)(v7 + 68))
    {
      int v39 = v9;
      int v14 = *(unsigned __int8 *)(v7 + 65);
      id v41 = v13;
      id v15 = [v13 count];
      int v40 = v14;
      int v16 = a2;
      if (!v15) {
        int v16 = 1;
      }
      if (v16) {
        unsigned __int8 v17 = 2;
      }
      else {
        unsigned __int8 v17 = 3;
      }
      long long v18 = +[NSMutableDictionary dictionary];
      uint64_t v19 = sub_10004A6E4(v7 + 16);
      __int16 v20 = +[NSData dataWithBytes:v19 length:sub_100045F00(v7 + 16)];
      [v18 setObject:v20 forKeyedSubscript:@"data"];

      uint64_t v21 = sub_10004A6E4(v7 + 32);
      BOOL v22 = +[NSData dataWithBytes:v21 length:sub_100045F00(v7 + 32)];
      [v18 setObject:v22 forKeyedSubscript:@"mask"];

      long long v23 = +[NSNumber numberWithChar:v8];
      [v18 setObject:v23 forKeyedSubscript:@"rssi"];

      long long v24 = +[NSNumber numberWithUnsignedChar:v42];
      [v18 setObject:v24 forKeyedSubscript:@"puckType"];

      long long v25 = +[NSNumber numberWithUnsignedChar:v17];
      [v18 setObject:v25 forKeyedSubscript:@"matchAllDevices"];

      __int16 v26 = +[NSNumber numberWithUnsignedLongLong:0];
      [v18 setObject:v26 forKeyedSubscript:@"address"];

      uint64_t v27 = +[NSNumber numberWithUnsignedChar:v10];
      [v18 setObject:v27 forKeyedSubscript:@"bypassFilterDuplicate"];

      __int16 v28 = +[NSNumber numberWithUnsignedChar:v11];
      [v18 setObject:v28 forKeyedSubscript:@"targetCore"];

      unsigned int v29 = +[NSNumber numberWithUnsignedChar:v12];
      [v18 setObject:v29 forKeyedSubscript:@"rssithresholdOrder"];

      char v30 = +[NSNumber numberWithBool:v40 != 0];
      [v18 setObject:v30 forKeyedSubscript:@"shouldConsolidateRule"];

      BOOL v31 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v7 + 66)];
      [v18 setObject:v31 forKeyedSubscript:@"report127dBm"];

      long long v32 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v7 + 67)];
      [v18 setObject:v32 forKeyedSubscript:@"report27dBm"];

      [v37 addObject:v18];
      int v33 = 1 << v42;
      if (!v39) {
        int v33 = 0;
      }
      *a3 |= v33;

      id v13 = v41;
    }

    v7 += 96;
    uint64_t v6 = v38;
  }

  return v37;
}

void sub_1006FC76C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006FC7D0(uint64_t a1)
{
  uint64_t result = sub_10010BABC();
  uint64_t v3 = result - *(void *)(a1 + 216);
  *(void *)(a1 + 216) = result;
  *(void *)(a1 + 56) += v3;
  unsigned int v4 = *(unsigned __int8 *)(a1 + 81);
  if (v4 <= 0x20)
  {
    if (((1 << v4) & 0x100010002) != 0)
    {
      uint64_t v5 = (void *)(a1 + 48);
    }
    else
    {
      if (((1 << v4) & 0x110) == 0) {
        return result;
      }
      uint64_t v5 = (void *)(a1 + 40);
    }
    *v5 += v3;
  }
  return result;
}

id sub_1006FC860(uint64_t a1)
{
  sub_1006FC7D0(a1);
  *(unsigned char *)(a1 + 65) = *(unsigned char *)(a1 + 81) == 16;
  id v2 = *(const unsigned __int8 **)(a1 + 104);
  if (v2 != (const unsigned __int8 *)(a1 + 112))
  {
    do
    {
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009BFA20);
      }
      uint64_t v3 = qword_1009F7EC8;
      unsigned int v4 = sub_100031234(v2 + 32);
      LODWORD(v3) = sub_100008DC4(v3, v4);

      if (v3) {
        ++*(void *)(a1 + 72);
      }
      uint64_t v5 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 **)v5;
          uint64_t v5 = *(unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v7 = *v6 == v2;
          id v2 = (const unsigned __int8 *)v6;
        }
        while (!v7);
      }
      id v2 = (const unsigned __int8 *)v6;
    }
    while (v6 != (const unsigned __int8 **)(a1 + 112));
  }
  id v62 = +[NSMutableDictionary dictionary];
  signed __int8 v63 = +[NSMutableString string];
  uint64_t v8 = *(void *)(a1 + 8);
  size_t v71 = 0;
  uint64_t v72 = 0;
  int v70 = 0;
  sub_100037564((char *)&v70, *(long long **)(v8 + 8), *(long long **)(v8 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v8 + 16) - *(void *)(v8 + 8)) >> 2));
  uint64_t v10 = (unsigned __int8 *)v70;
  int v9 = v71;
  if (v70 == v71)
  {
    unsigned __int16 v12 = 0;
    unsigned __int16 v11 = 0;
  }
  else
  {
    unsigned __int16 v11 = 0;
    unsigned __int16 v12 = 0;
    do
    {
      sub_1000417A8((uint64_t)v10, __p);
      if (v69 >= 0) {
        id v13 = __p;
      }
      else {
        id v13 = (void **)__p[0];
      }
      int v14 = +[NSString stringWithUTF8String:v13];
      id v15 = +[NSString stringWithFormat:@"%@ ", v14];
      [v63 appendString:v15];

      if (v69 < 0) {
        operator delete(__p[0]);
      }
      int v17 = *v10;
      v10 += 20;
      int v16 = v17;
      if (v17 == 16) {
        ++v12;
      }
      if (v16 == 2) {
        ++v11;
      }
    }
    while (v10 != v9);
  }
  uint64_t v18 = *(void *)(a1 + 8);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = *(void *)(v18 + 72);
  if (v19 == v20)
  {
    unsigned __int16 v21 = 0;
  }
  else
  {
    unsigned __int16 v21 = 0;
    do
    {
      id v22 = *(id *)(v19 + 56);
      unsigned __int16 v23 = (unsigned __int16)[v22 count];

      v21 += v23;
      v19 += 96;
    }
    while (v19 != v20);
  }
  [v62 setObject:v63 forKeyedSubscript:@"ServiceUUID"];
  long long v24 = +[NSNumber numberWithUnsignedShort:v11];
  [v62 setObject:v24 forKeyedSubscript:@"NumberOf16bitUUID"];

  long long v25 = +[NSNumber numberWithUnsignedShort:v12];
  [v62 setObject:v25 forKeyedSubscript:@"NumberOf128bitUUID"];

  __int16 v26 = +[NSNumber numberWithUnsignedLong:0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(*(void *)(a1 + 8) + 72) - *(void *)(*(void *)(a1 + 8) + 64)) >> 5)];
  [v62 setObject:v26 forKeyedSubscript:@"NumberOfPuckType"];

  uint64_t v27 = +[NSNumber numberWithUnsignedShort:v21];
  [v62 setObject:v27 forKeyedSubscript:@"NumberOfPeers"];

  __int16 v28 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(*(void *)(a1 + 8) + 122)];
  [v62 setObject:v28 forKeyedSubscript:@"ObjectDiscoveryMask"];

  unsigned int v29 = +[NSNumber numberWithBool:](NSNumber, "numberWithBool:", [*(id *)(*(void *)(a1 + 8) + 88) count] != 0);
  [v62 setObject:v29 forKeyedSubscript:@"HasZoneFilter"];

  char v30 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(a1 + 8) + 143)];
  [v62 setObject:v30 forKeyedSubscript:@"isContactTracing"];

  BOOL v31 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 24)];
  [v62 setObject:v31 forKeyedSubscript:@"NumberOfEventsInBackground"];

  long long v32 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 32)];
  [v62 setObject:v32 forKeyedSubscript:@"NumberOfEventsInForeground"];

  int v33 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 120)];
  [v62 setObject:v33 forKeyedSubscript:@"NumberOfUniqueDevicesFound"];

  uint64_t v34 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 72)];
  [v62 setObject:v34 forKeyedSubscript:@"NumberOfUniquePairedDevicesFound"];

  uint64_t v35 = +[NSNumber numberWithBool:**(unsigned __int8 **)(a1 + 8)];
  [v62 setObject:v35 forKeyedSubscript:@"AllowsDuplicates"];

  uint64_t v36 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 40)];
  [v62 setObject:v36 forKeyedSubscript:@"TimeSpentInBackground"];

  id v37 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 48)];
  [v62 setObject:v37 forKeyedSubscript:@"TimeSpentInForeground"];

  uint64_t v38 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a1 + 56)];
  [v62 setObject:v38 forKeyedSubscript:@"DurationInMS"];

  int v39 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 64)];
  [v62 setObject:v39 forKeyedSubscript:@"AppInForegroundAtStart"];

  int v40 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 65)];
  [v62 setObject:v40 forKeyedSubscript:@"AppInForegroundAtStop"];

  id v41 = +[NSNumber numberWithBool:sub_100049724(a1)];
  [v62 setObject:v41 forKeyedSubscript:@"AllowedInBackground"];

  unsigned int v42 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 82)];
  [v62 setObject:v42 forKeyedSubscript:@"ScreenState"];

  id v43 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v44 = *(void *)(a1 + 8);
  if (*(_DWORD *)(v44 + 168))
  {
    unsigned int v45 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
    [v43 addObject:v45];

    uint64_t v44 = *(void *)(a1 + 8);
  }
  uint64_t v46 = *(void *)(v44 + 64);
  uint64_t v47 = *(void *)(v44 + 72);
  while (v46 != v47)
  {
    id v48 = *(id *)(v46 + 72);
    long long v64 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    id v49 = v48;
    id v50 = [v49 countByEnumeratingWithState:&v64 objects:v73 count:16];
    if (v50)
    {
      uint64_t v51 = *(void *)v65;
      do
      {
        for (uint64_t i = 0; i != v50; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v65 != v51) {
            objc_enumerationMutation(v49);
          }
          if ([*(id *)(*((void *)&v64 + 1) + 8 * i) longLongValue])
          {
            id v53 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
            [v43 addObject:v53];
          }
        }
        id v50 = [v49 countByEnumeratingWithState:&v64 objects:v73 count:16];
      }
      while (v50);
    }

    v46 += 96;
  }
  if ([v43 count])
  {
    int v54 = [v43 allObjects];
    CFStringRef v55 = +[NSMutableArray array];
    int v56 = [v54 sortedArrayUsingSelector:"compare:"];

    for (unint64_t j = 0; j < (unint64_t)[v56 count]; ++j)
    {
      id v58 = [v56 objectAtIndex:j];
      int v59 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", sub_10003EC6C((int)[v58 longLongValue]));
      [v55 addObject:v59];
    }
    uint64_t v60 = [v55 componentsJoinedByString:@","];
    [v62 setObject:v60 forKeyedSubscript:@"CBUseCase"];
  }
  else
  {
    int v56 = +[NSString stringWithUTF8String:"Unspecified"];
    [v62 setObject:v56 forKeyedSubscript:@"CBUseCase"];
  }

  if (v70)
  {
    size_t v71 = (unsigned __int8 *)v70;
    operator delete(v70);
  }

  return v62;
}

void sub_1006FD0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1006FD4C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  *(void *)std::string uu2 = 0;
  uint64_t v6 = 0;
  sub_1000305AC(uu2, v3);
  if (a1 + 112 != sub_1000308C0(a1 + 104, uu2))
  {
    sub_1006FDA58((uint64_t **)(a1 + 104), uu2);
    unsigned int v4 = (uint64_t *)sub_1000308C0(a1 + 152, uu2);
    if ((uint64_t *)(a1 + 160) != v4)
    {
      sub_10004D3B8((uint64_t **)(a1 + 152), v4);
      operator delete(v4);
    }
    sub_1006FD5C4(a1 + 128, uu2);
  }
}

void sub_1006FD5A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1006FD5C4(uint64_t a1, unsigned __int8 *uu2)
{
  v10[0] = (uint64_t)v10;
  v10[1] = (uint64_t)v10;
  void v10[2] = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2 != a1)
  {
    do
    {
      int v5 = uuid_compare((const unsigned __int8 *)(v2 + 16), uu2);
      uint64_t v6 = *(void *)(v2 + 8);
      if (!v5)
      {
        if (v6 == a1)
        {
          BOOL v8 = 1;
LABEL_8:
          uint64_t v6 = a1;
        }
        else
        {
          while (1)
          {
            int v7 = uuid_compare((const unsigned __int8 *)(v6 + 16), uu2);
            BOOL v8 = v7 == 0;
            if (v7) {
              break;
            }
            uint64_t v6 = *(void *)(v6 + 8);
            if (v6 == a1) {
              goto LABEL_8;
            }
          }
        }
        sub_1004B6F90((uint64_t)v10, v10, a1, (void *)v2, (void *)v6);
        if (!v8) {
          uint64_t v6 = *(void *)(v6 + 8);
        }
      }
      uint64_t v2 = v6;
    }
    while (v6 != a1);
  }
  return sub_1002B308C(v10);
}

void sub_1006FD698(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FD6B4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x249249249249249) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v8 - v2) >> 4);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x124924924924924) {
    unint64_t v10 = 0x249249249249249;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    unsigned __int16 v11 = (char *)sub_1000A8930(v7, v10);
  }
  else {
    unsigned __int16 v11 = 0;
  }
  int v14 = v11;
  id v15 = &v11[112 * v3];
  int v17 = &v11[112 * v10];
  sub_1006FD7CC((uint64_t)v15, a2);
  int v16 = v15 + 112;
  sub_1000A8890(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1000A897C(&v14);
  return v12;
}

void sub_1006FD7B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A897C((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FD7CC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + 8) = *(id *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = &off_100998428;
  *(void *)(a1 + 48) = v5;
  if (v5) {
    sub_100037354(v5);
  }
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = &off_100998428;
  *(void *)(a1 + 64) = v6;
  if (v6) {
    sub_100037354(v6);
  }
  long long v7 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)(a1 + 72) = v7;
  *(void *)(a1 + 96) = *(id *)(a2 + 96);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  return a1;
}

void sub_1006FD8A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v2;
  uint64_t v4 = *(atomic_uint **)(v1 + 48);
  if (v4) {
    sub_1000368F4(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1006FD8D8(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    long long v7 = *v2++;
    operator delete(v7);
  }

  return sub_1002B303C((uint64_t)a1);
}

void sub_1006FD980(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006FD980(a1, *a2);
    sub_1006FD980(a1, a2[1]);
    sub_1006FD8D8(a2 + 6);
    operator delete(a2);
  }
}

void sub_1006FD9DC(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  unint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, *a2);
  *((void *)v6 + 6) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006FDA40(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FDA58(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t *)sub_1000308C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_1006FDAA0(a1, v3);
  return 1;
}

uint64_t *sub_1006FDAA0(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_10004D3B8(a1, a2);
  a2[6] = (uint64_t)&off_100998468;
  unint64_t v4 = (atomic_uint *)a2[7];
  if (v4) {
    sub_1000368F4(v4);
  }
  operator delete(a2);
  return v3;
}

uint64_t sub_1006FDB00(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t *)sub_1000308C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  unint64_t v4 = v3;
  sub_10004D3B8(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t *sub_1006FDB54(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3)
{
  uint64_t v10 = 0;
  unint64_t v5 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v10, uu1);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = v5;
    memset(v9, 0, sizeof(v9));
    sub_1006FDBF4((uint64_t)a1, a3, v9);
    sub_100036CA0(a1, v10, v7, v9[0]);
    uint64_t v6 = v9[0];
    v9[0] = 0;
    sub_1006FDCE0((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_1006FDBF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x68uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1006FDC68((uint64_t)v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006FDC50(_Unwind_Exception *a1)
{
  sub_1006FDCE0(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FDC68(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  int v4 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v4;
  return a1;
}

void sub_1006FDCE0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1006FD8D8(v2 + 6);
    }
    operator delete(v2);
  }
}

void sub_1006FDD38(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = (v3 - v2) >> 3;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = 170 * v4 - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0xAA)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    uint64_t v8 = a1[3];
    unint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10 >> 3)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      uint64_t v46 = a1 + 3;
      std::string __p = sub_1000405F8(v7, v11);
      id v43 = (char *)__p;
      uint64_t v44 = (char *)__p;
      unsigned int v45 = (char *)__p + 8 * v12;
      id v41 = operator new(0xFF0uLL);
      sub_1002B51DC(&__p, &v41);
      id v13 = (char *)a1[1];
      int v14 = v44;
      if (v13 == a1[2])
      {
        int v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              long long v24 = (char *)sub_1000405F8((uint64_t)v46, v23);
              __int16 v26 = v43;
              int v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                int v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                unsigned int v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)unsigned int v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              BOOL v31 = __p;
              std::string __p = v24;
              id v43 = &v24[8 * (v23 >> 2)];
              uint64_t v44 = v14;
              unsigned int v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                int v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                int v14 = v43;
              }
              id v22 = &v14[-8 * (v19 >> 1)];
              int v14 = &v20[v21];
              id v43 = v22;
              uint64_t v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)int v14 = v32;
          int v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        int v33 = (char *)a1[1];
      }
      uint64_t v36 = *a1;
      id v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      std::string __p = v36;
      id v43 = v33;
      uint64_t v38 = (char *)a1[3];
      int v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      uint64_t v44 = v13;
      unsigned int v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 85;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        uint64_t v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        std::string __p = operator new(0xFF0uLL);
        sub_1002B4FA4(a1, &__p);
        uint64_t v34 = a1[2];
        std::string __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        std::string __p = operator new(0xFF0uLL);
      }
      sub_1002B50BC((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 85;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 170;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 170;
    std::string __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002B50BC((uint64_t)a1, &__p);
  }
}

void sub_1006FE008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006FE054(void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

uint64_t *sub_1006FE0CC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1006FE124(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1006FE10C(_Unwind_Exception *a1)
{
  sub_1006F71D4(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1006FE124(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_1006FE1B0(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      int v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1006FE1B0(uint64_t **a1, uint64_t *a2, unsigned __int8 *uu2, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v6 = (uint64_t **)sub_1006AC9E4(a1, a2, &v10, &v9, uu2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006FE240((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

uint64_t sub_1006FE240@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  int v7 = operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_1006FE2D0((uint64_t)v7 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1006FE2B4(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_10004A610(v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FE2D0(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100998468;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    sub_100037354(v4);
  }
  return a1;
}

uint64_t *sub_1006FE328(uint64_t *a1, uint64_t a2)
{
  *a1 = (uint64_t)a1;
  a1[1] = (uint64_t)a1;
  a1[2] = 0;
  for (uint64_t i = *(void *)(a2 + 8); i != a2; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v5 = sub_100030690((uint64_t)a1, 0, 0, (const unsigned __int8 *)(i + 16));
    uint64_t v6 = *a1;
    *uint64_t v5 = *a1;
    v5[1] = a1;
    *(void *)(v6 + 8) = v5;
    *a1 = (uint64_t)v5;
    ++a1[2];
  }
  return a1;
}

void sub_1006FE3A8(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_1006FE3BC(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1006FE414(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_1006FE3FC(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1006FE414(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      uint64_t result = sub_1006FE4A0(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      int v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1006FE4A0(uint64_t **a1, uint64_t *a2, unsigned __int8 *uu2, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v6 = (uint64_t **)sub_1006AC9E4(a1, a2, &v10, &v9, uu2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006FE530((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, (uint64_t)v10, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_1006FE530(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = (unsigned __int8 *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (unsigned __int8 *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v6 + 32, (const unsigned __int8 *)a2);
  *((void *)v6 + 6) = *(void *)(a2 + 16);
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1006FE598(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

void sub_1006FE5B0(id a1)
{
}

void sub_1006FE5F4()
{
}

void sub_1006FE618(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

_OWORD *sub_1006FE634(_OWORD *a1, uint64_t a2, int a3)
{
  if (a3 == 34)
  {
    unint64_t v4 = 0;
    while (1)
    {
      int v5 = *(unsigned __int8 *)(a2 + v4);
      uint64_t v6 = a1;
      if (v5 == 114) {
        goto LABEL_6;
      }
      if (v5 == 99) {
        break;
      }
LABEL_7:
      if (v4 >= 0x22)
      {
        a1[10] = 0u;
        a1[11] = 0u;
        a1[8] = 0u;
        a1[9] = 0u;
        a1[6] = 0u;
        a1[7] = 0u;
        a1[4] = 0u;
        a1[5] = 0u;
        a1[2] = 0u;
        a1[3] = 0u;
        return a1;
      }
    }
    uint64_t v6 = a1 + 1;
LABEL_6:
    _OWORD *v6 = *(_OWORD *)(v4 + a2 + 1);
    v4 += 17;
    goto LABEL_7;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
    sub_100796E54();
  }
  return a1;
}

void sub_1006FE6F4(uint64_t a1, _WORD *a2)
{
  *a2 = 34;
  operator new[]();
}

uint64_t sub_1006FE750(uint64_t a1)
{
  *(void *)a1 = off_1009BFA50;
  *(void *)(a1 + 8) = &off_1009BFAB0;
  *(void *)(a1 + 16) = &off_1009BFAC8;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 41) = 0;
  sub_100052DA8(a1 + 48);
  *(_OWORD *)(a1 + 120) = 0u;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 216) = 0;
  *(unsigned char *)(a1 + 424) = 1;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = a1 + 448;
  *(void *)(a1 + 464) = a1 + 472;
  *(_OWORD *)(a1 + 496) = 0u;
  *(void *)(a1 + 488) = a1 + 496;
  *(_OWORD *)(a1 + 520) = 0u;
  *(void *)(a1 + 512) = a1 + 520;
  *(void *)(a1 + 536) = a1 + 544;
  *(_WORD *)(a1 + 594) = 0;
  *(unsigned char *)(a1 + 596) = 0;
  *(unsigned char *)(a1 + 3718) = 0;
  *(unsigned char *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 3720) = 0u;
  *(_WORD *)(a1 + 3736) = 25;
  *(void *)(a1 + 3752) = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "CloudPair");
  if ((*(unsigned int (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v2 + 72))(v2, buf, __p, a1 + 424))
  {
    int v3 = *(unsigned __int8 *)(a1 + 424);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0)
    {
      operator delete(*(void **)buf);
      if (v3) {
        goto LABEL_14;
      }
    }
    else if (v3)
    {
      goto LABEL_14;
    }
    unint64_t v4 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: Cloud pairing disabled by defaults write", buf, 2u);
    }
  }
  else
  {
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_14:
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LESecuredConnectionDebugKeys");
  uint64_t v6 = (unsigned __int8 *)(a1 + 592);
  if ((*(unsigned int (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v5 + 72))(v5, buf, __p, a1 + 592))
  {
    int v7 = *v6;
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0)
    {
      operator delete(*(void **)buf);
      if (v7) {
        goto LABEL_28;
      }
    }
    else if (v7)
    {
      goto LABEL_28;
    }
    uint64_t v8 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Using LE 4.2 Secured Conenctions DEBUG KEYS !!!!!!!!", buf, 2u);
    }
    sub_1002404F8(*v6);
  }
  else
  {
    if (v11 < 0) {
      operator delete(__p[0]);
    }
    if (v13 < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_28:
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BFD28);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1);
  *(void *)(a1 + 3744) = 0;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 0;
  return a1;
}

void sub_1006FEAE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void **a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }

  int v33 = *(void **)(v25 + 568);
  if (v33)
  {
    *(void *)(v25 + 576) = v33;
    operator delete(v33);
  }
  sub_1002CBCC8(v27 + 424, *v28);
  sub_10071AF54(v26, *v29);
  sub_10071AF54(v27 + 376, *a11);
  sub_10071AF54(a12, *v31);
  sub_10071AF54(v27 + 328, *v32);
  sub_10071AE90(v27, *v30);
  sub_100052DA4(a13);

  _Unwind_Resume(a1);
}

uint64_t sub_1006FEBD0(uint64_t a1)
{
  *(void *)a1 = off_1009BFA50;
  *(void *)(a1 + 8) = &off_1009BFAB0;
  *(void *)(a1 + 16) = &off_1009BFAC8;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BFD28);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1);

  uint64_t v2 = *(void **)(a1 + 568);
  if (v2)
  {
    *(void *)(a1 + 576) = v2;
    operator delete(v2);
  }
  sub_1002CBCC8(a1 + 536, *(void **)(a1 + 544));
  sub_10071AF54(a1 + 512, *(void **)(a1 + 520));
  sub_10071AF54(a1 + 488, *(void **)(a1 + 496));
  sub_10071AF54(a1 + 464, *(void **)(a1 + 472));
  sub_10071AF54(a1 + 440, *(void **)(a1 + 448));
  sub_10071AE90(a1 + 112, *(void **)(a1 + 120));
  sub_100052DA4(a1 + 48);

  return a1;
}

void sub_1006FED04(_Unwind_Exception *a1)
{
  int v3 = *(void **)(v1 + 568);
  if (v3)
  {
    *(void *)(v1 + 576) = v3;
    operator delete(v3);
  }
  sub_1002CBCC8(v1 + 536, *(void **)(v1 + 544));
  sub_10071AF54(v1 + 512, *(void **)(v1 + 520));
  sub_10071AF54(v1 + 488, *(void **)(v1 + 496));
  sub_10071AF54(v1 + 464, *(void **)(v1 + 472));
  sub_10071AF54(v1 + 440, *(void **)(v1 + 448));
  sub_10071AE90(v1 + 112, *(void **)(v1 + 120));
  sub_100052DA4(v1 + 48);

  _Unwind_Resume(a1);
}

void sub_1006FED8C(uint64_t a1)
{
  sub_1006FEBD0(a1);

  operator delete();
}

uint64_t sub_1006FEDC4(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 48);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 3718);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1006FEE0C(uint64_t a1)
{
  unsigned int v9 = 0;
  __int16 v8 = 0;
  int v7 = 0;
  int v2 = sub_100313364(19, (UInt8 *)&v7, 6, &v9);
  if (v2 == -34019)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100796EBC();
    }
    return 130;
  }
  int v3 = v2;
  uint64_t result = 103;
  if (!v3 && v9 == 6)
  {
    *(void *)(a1 + 240) = ((unint64_t)v7 << 40) | ((unint64_t)BYTE1(v7) << 32) | ((unint64_t)BYTE2(v7) << 24) | ((unint64_t)HIBYTE(v7) << 16) | ((unint64_t)v8 << 8) | HIBYTE(v8) | 0x1000000000000;
    int v5 = sub_100313364(17, (UInt8 *)(a1 + 152), 16, &v9);
    if (v5 == -34019)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
        sub_100796EF0();
      }
      return 130;
    }
    int v6 = v5;
    uint64_t result = 103;
    if (!v6 && v9 == 16)
    {
      uint64_t result = sub_100180D78((long long *)(a1 + 152), 1, 0, (void *)(a1 + 224));
      if (result)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
          sub_100796F24();
        }
        return 130;
      }
    }
  }
  return result;
}

uint64_t sub_1006FEF98(__n128 *a1)
{
  __int16 v10 = 0;
  int v9 = 0;
  unsigned __int8 v8 = 1;
  arc4random_buf(&v9, 6uLL);
  LOBYTE(v9) = v9 | 0xC0;
  int v2 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Generating new non connectable identity address", v7, 2u);
  }
  if (sub_100313540(0x13u, (const UInt8 *)&v9, 6u))
  {
    int v3 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v7 = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Failed to set new non connectable static random address!", v7, 2u);
      int v3 = qword_100A19E80;
    }
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR)) {
      sub_100796FC0();
    }
    return 130;
  }
  a1[15].n128_u64[0] = ((unint64_t)v9 << 40) | ((unint64_t)BYTE1(v9) << 32) | ((unint64_t)BYTE2(v9) << 24) | ((unint64_t)HIBYTE(v9) << 16) | ((unint64_t)v10 << 8) | HIBYTE(v10) | ((unint64_t)v8 << 48);
  arc4random_buf(&a1[9].n128_i8[8], 0x10uLL);
  unint64_t v4 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Generating new non connectable identity root", v7, 2u);
  }
  if (sub_100313540(0x11u, &a1[9].n128_u8[8], 0x10u))
  {
    int v5 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)int v7 = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Failed to set new non connectable identity root!", v7, 2u);
      int v5 = qword_100A19E80;
    }
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
      sub_100796F8C();
    }
    return 130;
  }
  if (sub_100180D78((long long *)&a1[9].n128_i8[8], 1, 0, &a1[14]))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100796F24();
    }
    return 130;
  }
  sub_100313540(0x12u, (const UInt8 *)&a1[14], 0x10u);
  if (a1[2].n128_u8[9])
  {
    v7[0] = 0;
    sub_10001B8E0(v7);
    sub_1001F0814(a1 + 14);
    sub_10001B8AC(v7);
  }
  return 0;
}

void sub_1006FF230(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_1006FF244(uint64_t a1)
{
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 48);
  uint64_t v2 = sub_100035F54();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 432))(v2);
  unint64_t v4 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v25 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "createTemporaryRootKeys in diagnostic mode :%d", buf, 8u);
  }
  if (v3)
  {
    arc4random_buf((void *)(a1 + 136), 0x10uLL);
    arc4random_buf((void *)(a1 + 168), 0x10uLL);
    if (sub_100180D78((long long *)(a1 + 136), 1, 0, (void *)(a1 + 184)))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
        sub_1007970C4();
      }
LABEL_22:
      uint64_t v6 = 130;
      goto LABEL_23;
    }
    if (sub_100180D78((long long *)(a1 + 136), 3, 0, (void *)(a1 + 200)))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
        sub_10079705C();
      }
      goto LABEL_22;
    }
    __int16 v22 = 0;
    int v21 = 0;
    unsigned __int8 v20 = 1;
    arc4random_buf(&v21, 6uLL);
    unsigned __int8 v7 = v21 | 0xC0;
    LOBYTE(v21) = v21 | 0xC0;
    unsigned __int8 v8 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "TTD: Generating new local static random", buf, 2u);
      unsigned __int8 v7 = v21;
    }
    *(void *)(a1 + 216) = ((unint64_t)v7 << 40) | ((unint64_t)BYTE1(v21) << 32) | ((unint64_t)BYTE2(v21) << 24) | ((unint64_t)HIBYTE(v21) << 16) | ((unint64_t)v22 << 8) | HIBYTE(v22) | ((unint64_t)v20 << 48);
    sub_10010D22C((long long *)(a1 + 136), (__n128 *)(a1 + 168));
    sub_100232C64(*(void *)(a1 + 216));
    __int16 v19 = 0;
    int v18 = 0;
    unsigned __int8 v17 = 1;
    arc4random_buf(&v18, 6uLL);
    unsigned __int8 v9 = v18 | 0xC0;
    LOBYTE(v18) = v18 | 0xC0;
    __int16 v10 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "TTD: Generating new non connectable identity address", buf, 2u);
      unsigned __int8 v9 = v18;
    }
    *(void *)(a1 + 240) = ((unint64_t)v9 << 40) | ((unint64_t)BYTE1(v18) << 32) | ((unint64_t)BYTE2(v18) << 24) | ((unint64_t)HIBYTE(v18) << 16) | ((unint64_t)v19 << 8) | HIBYTE(v19) | ((unint64_t)v17 << 48);
    arc4random_buf((void *)(a1 + 152), 0x10uLL);
    char v11 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "TTD: Generating new non connectable identity root", buf, 2u);
    }
    if (sub_100180D78((long long *)(a1 + 152), 1, 0, (void *)(a1 + 224)))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
        sub_100796FF4();
      }
      goto LABEL_22;
    }
    if (*(unsigned char *)(a1 + 41))
    {
      buf[0] = 0;
      sub_10001B8E0(buf);
      sub_1001F0814((__n128 *)(a1 + 224));
      sub_10001B8AC(buf);
    }
    char v13 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BDF8();
      int v14 = v16 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)long long buf = 68225283;
      int v25 = 16;
      __int16 v26 = 2097;
      uint64_t v27 = a1 + 184;
      __int16 v28 = 1041;
      int v29 = 16;
      __int16 v30 = 2097;
      uint64_t v31 = a1 + 200;
      __int16 v32 = 1041;
      int v33 = 16;
      __int16 v34 = 2097;
      uint64_t v35 = a1 + 136;
      __int16 v36 = 1041;
      int v37 = 16;
      __int16 v38 = 2097;
      uint64_t v39 = a1 + 168;
      __int16 v40 = 2080;
      id v41 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "TTD: created temporary IRK=%{private}.16P DHK=%{private}.16P IR=%{private}.16P ER=%{private}.16P fLocalStaticRandomAddress:%s", buf, 0x4Cu);
      if (v16 < 0) {
        operator delete(__p);
      }
    }
    uint64_t v6 = 0;
    *(unsigned char *)(a1 + 3718) = 1;
  }
  else
  {
    int v5 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "TTD: Not in Diagnostics mode, return", buf, 2u);
    }
    uint64_t v6 = 152;
  }
LABEL_23:
  sub_10003AFB4((uint64_t)v23);
  return v6;
}

void sub_1006FF734(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006FF770(uint64_t a1)
{
  v28[0] = 0;
  v28[1] = 0;
  sub_10003AED0((uint64_t)v28, a1 + 48);
  unsigned int v27 = 0;
  uint64_t v2 = sub_100035F54();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 432))(v2);
  unint64_t v4 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "readRootKeys diagnostics mode:%d", buf, 8u);
  }
  if (v3)
  {
    uint64_t v5 = sub_1006FF244(a1);
    goto LABEL_96;
  }
  int v6 = sub_100313364(2, (UInt8 *)(a1 + 136), 16, &v27);
  if (v6 == -34019)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
    goto LABEL_95;
  }
  if (v6) {
    BOOL v7 = 0;
  }
  else {
    BOOL v7 = v27 == 16;
  }
  int v8 = !v7;
  if (!v7)
  {
    arc4random_buf((void *)(a1 + 136), 0x10uLL);
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_1007974A0();
    }
    if (sub_100313540(2u, (const UInt8 *)(a1 + 136), 0x10u))
    {
      unsigned __int8 v9 = qword_100A19E80;
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Failed to set new identity root!", buf, 2u);
        unsigned __int8 v9 = qword_100A19E80;
      }
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        sub_10079746C();
      }
      goto LABEL_95;
    }
  }
  int v10 = sub_100313364(1, (UInt8 *)(a1 + 168), 16, &v27);
  if (v10 == -34019)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      goto LABEL_37;
    }
    goto LABEL_95;
  }
  if (v10 || v27 != 16)
  {
    arc4random_buf((void *)(a1 + 168), 0x10uLL);
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100797438();
    }
    if (sub_100313540(1u, (const UInt8 *)(a1 + 168), 0x10u))
    {
      char v11 = qword_100A19E80;
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_FAULT, "Failed to set new encryption root!", buf, 2u);
        char v11 = qword_100A19E80;
      }
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        sub_100797404();
      }
      goto LABEL_95;
    }
    int v8 = 1;
  }
  int v12 = sub_100313364(5, (UInt8 *)(a1 + 312), 96, &v27);
  if (v12 == -34019)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
LABEL_37:
    }
      sub_100796EF0();
LABEL_95:
    uint64_t v5 = 130;
    goto LABEL_96;
  }
  if (v12 || v27 != 96)
  {
    buf[0] = 96;
    if (sub_1001818CC((_OWORD *)(a1 + 248), (_OWORD *)(a1 + 312)))
    {
      if (!os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
        goto LABEL_95;
      }
LABEL_45:
      sub_10079739C();
      goto LABEL_95;
    }
    if (sub_100313540(5u, (const UInt8 *)(a1 + 312), 0x60u))
    {
      if (!os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT)) {
        goto LABEL_95;
      }
    }
    else
    {
      if (!sub_100313540(6u, (const UInt8 *)(a1 + 248), 0x40u)) {
        goto LABEL_48;
      }
      if (!os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT)) {
        goto LABEL_95;
      }
    }
LABEL_80:
    sub_100797368();
    goto LABEL_95;
  }
  int v13 = sub_100313364(6, (UInt8 *)(a1 + 248), 64, &v27);
  if (v13 == -34019)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_1007973D0();
    }
    goto LABEL_95;
  }
  if (v13 || v27 != 64)
  {
    buf[0] = 96;
    if (sub_1001818CC((_OWORD *)(a1 + 248), (_OWORD *)(a1 + 312)))
    {
      if (!os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
        goto LABEL_95;
      }
      goto LABEL_45;
    }
    if (sub_100313540(5u, (const UInt8 *)(a1 + 312), 0x60u))
    {
      if (!os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT)) {
        goto LABEL_95;
      }
    }
    else
    {
      if (!sub_100313540(6u, (const UInt8 *)(a1 + 248), 0x40u)) {
        goto LABEL_48;
      }
      if (!os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT)) {
        goto LABEL_95;
      }
    }
    goto LABEL_80;
  }
LABEL_48:
  int v14 = sub_100313364(7, (UInt8 *)(a1 + 408), 16, &v27);
  if (v14 == -34019)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_10079712C();
    }
    goto LABEL_95;
  }
  if (v14 || v27 != 16)
  {
    arc4random_buf((void *)(a1 + 408), 0x10uLL);
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100797334();
    }
    if (sub_100313540(7u, (const UInt8 *)(a1 + 408), 0x10u))
    {
      int64_t v15 = qword_100A19E80;
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Failed to set new Cloud Nonce!", buf, 2u);
        int64_t v15 = qword_100A19E80;
      }
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        sub_100797300();
      }
      goto LABEL_95;
    }
  }
  if (sub_100180D78((long long *)(a1 + 136), 1, 0, (void *)(a1 + 184)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100797298();
    }
    goto LABEL_95;
  }
  sub_100313540(8u, (const UInt8 *)(a1 + 184), 0x10u);
  if (sub_100180D78((long long *)(a1 + 136), 3, 0, (void *)(a1 + 200)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100797230();
    }
    goto LABEL_95;
  }
  if (v8 && sub_1007000D4(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100797160();
    }
    sub_1007001D0();
    uint64_t v21 = sub_100017768();
    sub_1005C99C8(v21, 1);
  }
  __int16 v26 = 0;
  int v25 = 0;
  unsigned __int8 v24 = 1;
  int v16 = sub_100313364(16, (UInt8 *)&v25, 6, &v27);
  if (v16 == -34019)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100797194();
    }
    goto LABEL_95;
  }
  if (v16 || v27 != 6)
  {
    arc4random_buf(&v25, 6uLL);
    LOBYTE(v25) = v25 | 0xC0;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_1007971FC();
    }
    if (sub_100313540(0x10u, (const UInt8 *)&v25, 6u))
    {
      unsigned __int8 v17 = qword_100A19E80;
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Failed to set new local static random address!", buf, 2u);
        unsigned __int8 v17 = qword_100A19E80;
      }
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_1007971C8();
      }
      goto LABEL_95;
    }
  }
  *(void *)(a1 + 216) = ((unint64_t)v25 << 40) | ((unint64_t)BYTE1(v25) << 32) | ((unint64_t)BYTE2(v25) << 24) | ((unint64_t)HIBYTE(v25) << 16) | ((unint64_t)v26 << 8) | HIBYTE(v26) | ((unint64_t)v24 << 48);
  sub_10010D22C((long long *)(a1 + 136), (__n128 *)(a1 + 168));
  sub_100232C64(*(void *)(a1 + 216));
  uint64_t v5 = sub_1006FEE0C(a1);
  if (v5 != 130)
  {
    if (v5 != 103 || (uint64_t v5 = sub_1006FEF98((__n128 *)a1), !v5))
    {
      __int16 v19 = qword_100A19E80;
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
      {
        sub_10004BDF8();
        unsigned __int8 v20 = v23 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)long long buf = 68225283;
        int v30 = 16;
        __int16 v31 = 2097;
        uint64_t v32 = a1 + 184;
        __int16 v33 = 1041;
        int v34 = 16;
        __int16 v35 = 2097;
        uint64_t v36 = a1 + 200;
        __int16 v37 = 1041;
        int v38 = 16;
        __int16 v39 = 2097;
        uint64_t v40 = a1 + 136;
        __int16 v41 = 1041;
        int v42 = 16;
        __int16 v43 = 2097;
        uint64_t v44 = a1 + 168;
        __int16 v45 = 2080;
        uint64_t v46 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "IRK=%{private}.16P DHK=%{private}.16P IR=%{private}.16P ER=%{private}.16P fLocalStaticRandomAddress:%s", buf, 0x4Cu);
        if (v23 < 0) {
          operator delete(__p);
        }
      }
      *(unsigned char *)(a1 + 3718) = 1;
      sub_10070024C(a1);
      uint64_t v5 = 0;
    }
  }
LABEL_96:
  sub_10003AFB4((uint64_t)v28);
  return v5;
}

void sub_1007000A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_1007000D4(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 48);
  if (!*(void *)(a1 + 456) || (uint64_t v2 = *(const unsigned __int8 **)(a1 + 440), v2 == (const unsigned __int8 *)(a1 + 448)))
  {
    BOOL v4 = 0;
  }
  else
  {
    while (1)
    {
      int v3 = sub_100031234(v2 + 32);
      BOOL v4 = sub_100008DC4(a1, v3);

      if (v4) {
        break;
      }
      uint64_t v5 = (unsigned __int8 *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          int v6 = (const unsigned __int8 **)v5;
          uint64_t v5 = *(unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (const unsigned __int8 **)*((void *)v2 + 2);
          BOOL v7 = *v6 == v2;
          uint64_t v2 = (const unsigned __int8 *)v6;
        }
        while (!v7);
      }
      uint64_t v2 = (const unsigned __int8 *)v6;
      if (v6 == (const unsigned __int8 **)(a1 + 448)) {
        goto LABEL_13;
      }
    }
    BOOL v4 = 1;
  }
LABEL_13:
  sub_10003AFB4((uint64_t)v9);
  return v4;
}

void sub_1007001B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1007001D0()
{
  uint64_t v0 = sub_100017768();
  sub_10004191C(__p, "LeSecurityManager hit a keychain problem.");
  sub_1005C9A14(v0, (uint64_t *)__p, 3172327085);
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100700230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10070024C(uint64_t a1)
{
  *(_DWORD *)&size[1] = 0;
  char v2 = (UInt8 *)(a1 + 32);
  if (sub_100313364(11, (UInt8 *)(a1 + 32), 4, (unsigned int *)&size[1]) || *(_DWORD *)&size[1] != 4)
  {
    *(_DWORD *)char v2 = 144;
    int v3 = qword_100A19F98;
    if (os_log_type_enabled((os_log_t)qword_100A19F98, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "readTEKsFromKeychain empty fEKRollingPeriod", buf, 2u);
    }
    sub_100313540(0xBu, v2, 4u);
  }
  uint64_t v4 = +[NSMutableArray array];
  uint64_t v5 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v4;

  size[0] = 301;
  if (sub_100313364(13, (UInt8 *)size, 2, (unsigned int *)&size[1]) || *(_DWORD *)&size[1] != 2)
  {
    uint64_t v12 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 176))(v12))
    {
      int v13 = qword_100A19F98;
      if (os_log_type_enabled((os_log_t)qword_100A19F98, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "reading old TEK Keychain storage", buf, 2u);
      }
    }
    size[0] = 301;
    long long v48 = 0u;
    memset(v49, 0, sizeof(v49));
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    memset(buf, 0, sizeof(buf));
    if (sub_100313364(10, buf, 301, (unsigned int *)&size[1]) || *(_DWORD *)&size[1] != 301)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_1007974D4();
      }
    }
    else if (buf[0])
    {
      uint64_t v14 = 0;
      uint64_t v15 = 20 * buf[0];
      do
      {
        *(_OWORD *)&size[3] = *(_OWORD *)&buf[v14 + 1];
        int v31 = *(_DWORD *)&buf[v14 + 17];
        char v32 = *(_DWORD *)(a1 + 32);
        int v16 = *(void **)(a1 + 24);
        unsigned __int8 v17 = +[NSData dataWithBytes:&size[3] length:21];
        [v16 addObject:v17];

        v14 += 20;
      }
      while (v15 != v14);
    }
    sub_100716E1C(a1);
  }
  else if (size[0])
  {
    int v6 = (UInt8 *)malloc_type_malloc(size[0], 0x6DC56CA0uLL);
    if (sub_100313364(14, v6, size[0], (unsigned int *)&size[1]) || *(_DWORD *)&size[1] != size[0])
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_100797508();
      }
    }
    else if (size[0])
    {
      uint64_t v7 = 0;
      do
      {
        uint64_t v8 = v6[v7];
        uint64_t v9 = v7 + 1;
        int v10 = *(void **)(a1 + 24);
        char v11 = +[NSData dataWithBytes:&v6[v7 + 1] length:v8];
        [v10 addObject:v11];

        uint64_t v7 = v9 + v8;
      }
      while (v9 + v8 < (unint64_t)size[0]);
    }
    free(v6);
  }
  sub_10071754C(a1);
  if ([*(id *)(a1 + 24) count])
  {
    id v18 = [*(id *)(a1 + 24) objectAtIndex:0];
    int v19 = *((unsigned __int8 *)[v18 bytes] + 16);
    id v20 = [*(id *)(a1 + 24) objectAtIndex:0];
    int v21 = *((unsigned __int8 *)[v20 bytes] + 17);
    id v22 = [*(id *)(a1 + 24) objectAtIndex:0];
    int v23 = *((unsigned __int8 *)[v22 bytes] + 18);
    id v24 = [*(id *)(a1 + 24) objectAtIndex:0];
    *(_DWORD *)(a1 + 36) = v19 | (v21 << 8) | (v23 << 16) | (*((unsigned __int8 *)[v24 bytes] + 19) << 24);
  }
  uint64_t v25 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 184))(v25))
  {
    __int16 v26 = qword_100A19F98;
    if (os_log_type_enabled((os_log_t)qword_100A19F98, OS_LOG_TYPE_INFO))
    {
      uint64_t v27 = *(void *)(a1 + 24);
      int v28 = *(_DWORD *)(a1 + 36);
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v27;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "readTEKsFromKeychain fTEKArray %@ fENIntervalNumber=%d", buf, 0x12u);
    }
  }
  return 0;
}

void sub_100700710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100700764(uint64_t a1)
{
  uint64_t v1 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 432))(v1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_10079753C();
    }
    return;
  }
  uint64_t v27 = +[NSMutableDictionary dictionary];
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, a1 + 48);
  __int16 v26 = sub_100312698(0);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
  }
  sub_1006BF590((uint64_t)off_1009F7ED8, v26, 0);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  id v2 = v26;
  id v3 = [v2 countByEnumeratingWithState:&v31 objects:v40 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v32;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v32 != v4) {
          objc_enumerationMutation(v2);
        }
        int v6 = *(void **)(*((void *)&v31 + 1) + 8 * (void)v5);
        uint64_t v8 = [v2 objectForKeyedSubscript:v6];
        id v9 = [v8 unsignedLongLongValue];

        int v10 = qword_100A19E80;
        if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
        {
          char v11 = sub_1006AD3F0();
          *(_DWORD *)long long buf = 138543874;
          *(void *)&uint8_t buf[4] = v11;
          *(_WORD *)&unsigned char buf[12] = 2114;
          *(void *)&unsigned char buf[14] = v6;
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v39 = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "MUC - BTAddr %{public}@, BTUUID %{public}@, HostAddr to use 0x%llx", buf, 0x20u);
        }
        if (sub_100700DE4(a1, (unint64_t)v9, v6))
        {
          *(void *)uuid_t uu = 0;
          uint64_t v37 = 0;
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
          }
          sub_100014B58((uint64_t)off_1009F7ED8, (unint64_t)v9, 0, 1u, 0, 0, uu);
          if (uuid_is_null(uu))
          {
            if (uuid_is_null(uu) && os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
            {
              sub_1006AD3F0();
              objc_claimAutoreleasedReturnValue();
              sub_100797570();
            }
            goto LABEL_23;
          }
          memset(buf, 0, sizeof(buf));
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
          }
          uint64_t v12 = off_1009F7ED8;
          int v13 = sub_100031234(uu);
          sub_1006BE7F4((uint64_t)v12, v13, (uint64_t)buf);

          if ((char)buf[23] < 0)
          {
            if (*(void *)&buf[8])
            {
              uint64_t v14 = *(uint8_t **)buf;
LABEL_32:
              uint64_t v15 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v14, v26);
              int v16 = sub_100031234(uu);
              [v27 setObject:v15 forKeyedSubscript:v16];
            }
          }
          else if (buf[23])
          {
            uint64_t v14 = buf;
            goto LABEL_32;
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
          }
          unsigned __int8 v17 = off_1009F7ED8;
          sub_10004191C(__p, "_HIDEINSETTINGS_");
          int v18 = sub_100030A04((uint64_t)v17, v6, (uint64_t)__p);
          int v19 = v18;
          if (v30 < 0)
          {
            operator delete(__p[0]);
            if (!v19) {
              goto LABEL_42;
            }
          }
          else if (!v18)
          {
LABEL_42:
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
            goto LABEL_23;
          }
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
          }
          sub_1006C3F88((uint64_t)off_1009F7ED8, v6, 1);
          goto LABEL_42;
        }
        if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR))
        {
          sub_1006AD3F0();
          objc_claimAutoreleasedReturnValue();
          sub_1007975C0();
        }
        sub_1003131C8((uint64_t)v9, 0, 1);
LABEL_23:
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v20 = [v2 countByEnumeratingWithState:&v31 objects:v40 count:16];
      id v3 = v20;
    }
    while (v20);
  }

  int v21 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    id v22 = [v2 count];
    id v23 = [v2 count];
    id v24 = "s";
    uint64_t v25 = *(void *)(a1 + 456);
    *(_DWORD *)long long buf = 134218498;
    if (v23 == (id)1) {
      id v24 = "";
    }
    *(void *)&uint8_t buf[4] = v22;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v24;
    *(_WORD *)&unsigned char buf[22] = 2048;
    uint64_t v39 = v25;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Found %lu paired LE device%{public}s in local keychain, loaded %lu", buf, 0x20u);
  }

  sub_10003AFB4((uint64_t)v35);
}

void sub_100700D18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_10003AFB4((uint64_t)&a30);
  _Unwind_Resume(a1);
}

uint64_t sub_100700DE4(uint64_t a1, unint64_t a2, void *a3)
{
  id v5 = a3;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 48);
  *(void *)uuid_t uu = 0;
  uint64_t v10 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, a2, 0, 1u, 0, 0, uu);
  if (!uuid_is_null(uu))
  {
    v7[0] = 0;
    v7[1] = 0;
    sub_100702234(a1, v7);
  }
  if (uuid_is_null(uu) && os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
  {
    sub_1006AD3F0();
    objc_claimAutoreleasedReturnValue();
    sub_10079766C();
  }
  sub_10003AFB4((uint64_t)v8);

  return 1;
}

void sub_100701304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, atomic_uint *a5, ...)
{
  va_start(va, a5);
  if (*(char *)(v6 - 121) < 0) {
    operator delete(*(void **)(v6 - 144));
  }
  if (a5) {
    sub_1000368F4(a5);
  }
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1007013E8(uint64_t a1)
{
  uint64_t v1 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 432))(v1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_10079753C();
    }
  }
  else
  {
    uint64_t v2 = sub_100035F54();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 352))(v2))
    {
      v36[0] = 0;
      v36[1] = 0;
      sub_10003AED0((uint64_t)v36, a1 + 48);
      int v28 = sub_1003126AC();
      id v3 = qword_100A19E80;
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
      {
        id v4 = [v28 count];
        id v5 = [v28 count];
        uint64_t v6 = "s";
        if (v5 == (id)1) {
          uint64_t v6 = "";
        }
        *(_DWORD *)long long buf = 134218242;
        *(void *)&uint8_t buf[4] = v4;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&unsigned char buf[14] = v6;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Found %lu paired LE device%{public}s in synchronized keychain", buf, 0x16u);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
      }
      sub_1006BF590((uint64_t)off_1009F7ED8, v28, 1);
      long long v34 = 0u;
      long long v35 = 0u;
      long long v32 = 0u;
      long long v33 = 0u;
      id v7 = v28;
      id v8 = [v7 countByEnumeratingWithState:&v32 objects:v45 count:16];
      if (v8)
      {
        uint64_t v9 = *(void *)v33;
        do
        {
          uint64_t v10 = 0;
          do
          {
            if (*(void *)v33 != v9) {
              objc_enumerationMutation(v7);
            }
            char v11 = *(void **)(*((void *)&v32 + 1) + 8 * (void)v10);
            int v13 = [v7 objectForKeyedSubscript:v11];
            id v14 = [v13 unsignedLongLongValue];

            *(void *)uuid_t uu = 0;
            uint64_t v44 = 0;
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
            }
            sub_100014B58((uint64_t)off_1009F7ED8, (unint64_t)v14, 0, 1u, 0, 0, uu);
            if (uuid_is_null(uu))
            {
              uint64_t v15 = qword_100A19E80;
              if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
              {
                int v16 = sub_1006AD3F0();
                *(_DWORD *)long long buf = 138543362;
                *(void *)&uint8_t buf[4] = v16;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Failed to retrieve UUID for paired address %{public}@, this is a synced key from another device, we don't really care about it on this device.", buf, 0xCu);
              }
            }
            else
            {
              unsigned __int8 v17 = sub_100031234(uu);
              unsigned __int8 v18 = [v11 isEqual:v17];

              if (v18)
              {
                sub_100700DE4(a1, (unint64_t)v14, v11);
                if (!sub_100008DC4(a1, v11))
                {
                  if (qword_1009F7EE0 != -1) {
                    dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
                  }
                  int v19 = off_1009F7ED8;
                  id v20 = sub_100031234(uu);
                  int v21 = (uint64_t *)sub_100030398((uint64_t)v19, v20);
                  sub_1006B1588(v21, 0);

                  id v22 = qword_100A19E80;
                  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
                  {
                    id v23 = sub_1006AD3F0();
                    *(_DWORD *)long long buf = 138543618;
                    *(void *)&uint8_t buf[4] = v11;
                    *(_WORD *)&unsigned char buf[12] = 2114;
                    *(void *)&unsigned char buf[14] = v23;
                    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" (%{public}@) is not really paired, its just a previously paired watch", buf, 0x16u);
                  }
                }
              }
              else
              {
                id v24 = qword_100A19E80;
                if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1006AD3F0();
                  id v25 = (id)objc_claimAutoreleasedReturnValue();
                  memset(buf, 0, 37);
                  uuid_unparse_upper(uu, (char *)buf);
                  sub_10004191C(__p, (char *)buf);
                  __int16 v26 = __p;
                  if (v31 < 0) {
                    __int16 v26 = (void **)__p[0];
                  }
                  *(_DWORD *)uint64_t v37 = 138543874;
                  long long v38 = v11;
                  __int16 v39 = 2114;
                  id v40 = v25;
                  __int16 v41 = 2082;
                  long long v42 = v26;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Device \"%{public}@\" (%{public}@) UUID from keychain is different than in local database(\"%{public}s\"). Ignoring keychain copy.", v37, 0x20u);
                  if (v31 < 0) {
                    operator delete(__p[0]);
                  }
                }
              }
            }
            uint64_t v10 = (char *)v10 + 1;
          }
          while (v8 != v10);
          id v8 = [v7 countByEnumeratingWithState:&v32 objects:v45 count:16];
        }
        while (v8);
      }

      sub_10003AFB4((uint64_t)v36);
    }
    else
    {
      uint64_t v27 = qword_100A19E80;
      if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "skipping synchronized keychain read since this is not a phone.", buf, 2u);
      }
    }
  }
}

void sub_1007019BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_10003AFB4((uint64_t)&a29);
  _Unwind_Resume(a1);
}

BOOL sub_100701A48(uint64_t a1, uint64_t a2, int a3)
{
  id v5 = 0;
  uint64_t v6 = 0;
  sub_1003BC0D4(*(void *)(a2 + 8), a3, &v5);
  BOOL v3 = sub_100013DCC((uint64_t)&v5);
  id v5 = &off_100998428;
  if (v6) {
    sub_1000368F4(v6);
  }
  return !v3;
}

void sub_100701ABC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100701AF0(uint64_t a1, uint64_t a2)
{
  BOOL v3 = *(atomic_uint **)(a2 + 8);
  __int16 v39 = &off_1009B4578;
  id v40 = v3;
  if (v3) {
    sub_100037354((uint64_t)v3);
  }
  BOOL v4 = sub_100701A48((uint64_t)v3, (uint64_t)&v39, 0);
  __int16 v39 = &off_1009B4578;
  if (v40) {
    sub_1000368F4(v40);
  }
  id v5 = *(atomic_uint **)(a2 + 8);
  uint64_t v37 = &off_1009B4578;
  long long v38 = v5;
  if (v5) {
    sub_100037354((uint64_t)v5);
  }
  BOOL v6 = sub_100701A48((uint64_t)v5, (uint64_t)&v37, 3);
  uint64_t v37 = &off_1009B4578;
  if (v38) {
    sub_1000368F4(v38);
  }
  id v7 = *(atomic_uint **)(a2 + 8);
  long long v35 = &off_1009B4578;
  long long v36 = v7;
  if (v7) {
    sub_100037354((uint64_t)v7);
  }
  BOOL v8 = sub_100701A48((uint64_t)v7, (uint64_t)&v35, 4);
  long long v35 = &off_1009B4578;
  if (v36) {
    sub_1000368F4(v36);
  }
  uint64_t v9 = *(atomic_uint **)(a2 + 8);
  long long v33 = &off_1009B4578;
  long long v34 = v9;
  if (v9) {
    sub_100037354((uint64_t)v9);
  }
  uint64_t v10 = sub_100701A48((uint64_t)v9, (uint64_t)&v33, 5);
  long long v33 = &off_1009B4578;
  if (v34) {
    sub_1000368F4(v34);
  }
  char v11 = *(atomic_uint **)(a2 + 8);
  char v31 = &off_1009B4578;
  long long v32 = v11;
  if (v11) {
    sub_100037354((uint64_t)v11);
  }
  BOOL v12 = sub_100701A48((uint64_t)v11, (uint64_t)&v31, 9);
  char v31 = &off_1009B4578;
  if (v32) {
    sub_1000368F4(v32);
  }
  int v13 = *(atomic_uint **)(a2 + 8);
  int v29 = &off_1009B4578;
  char v30 = v13;
  if (v13) {
    sub_100037354((uint64_t)v13);
  }
  BOOL v14 = sub_100701A48((uint64_t)v13, (uint64_t)&v29, 9);
  int v29 = &off_1009B4578;
  if (v30) {
    sub_1000368F4(v30);
  }
  uint64_t v27 = 0;
  int v28 = 0;
  sub_1003BC0D4(*(void *)(a2 + 8), 7, &v27);
  BOOL v15 = !sub_100013DCC((uint64_t)&v27)
     && (*(unsigned char *)sub_10004A6E4((uint64_t)&v27) == 2 || *(unsigned char *)sub_10004A6E4((uint64_t)&v27) == 3);
  int v16 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67110656;
    *(_DWORD *)&uint8_t buf[4] = v10;
    LOWORD(v45) = 1024;
    *(_DWORD *)((char *)&v45 + 2) = v12;
    HIWORD(v45) = 1024;
    BOOL v46 = v14;
    __int16 v47 = 1024;
    BOOL v48 = v4;
    __int16 v49 = 1024;
    BOOL v50 = v8;
    __int16 v51 = 1024;
    BOOL v52 = v6;
    __int16 v53 = 1024;
    BOOL v54 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "hasLocalLTK=%d hasLocalRAND=%d hasLocalEDIV=%d hasRemoteLTK=%d hasRemoteRand=%d hasRemoteEDIV=%d securedConnection=%d", buf, 0x2Cu);
  }
  if (!v15)
  {
    if (!v4 && !v8 && !v6)
    {
      uint64_t v10 = v12 ^ v14 ^ 1u;
      goto LABEL_62;
    }
    *(void *)long long buf = 0;
    long long v45 = 0;
    sub_1003BC0D4(*(void *)(a2 + 8), 1, buf);
    if (sub_100045F00((uint64_t)buf) && *(unsigned char *)sub_10004A6E4((uint64_t)buf) == 16)
    {
      long long v43 = xmmword_1007BA9F0;
      id v25 = 0;
      __int16 v26 = 0;
      sub_1000335D8(&v25, &v43, 0x10uLL);
      sub_1003BC0D4(*(void *)(a2 + 8), 0, &v41);
      BOOL v17 = sub_100653904((uint64_t)&v25, (uint64_t)&v41);
      __int16 v41 = &off_100998428;
      if (v42) {
        sub_1000368F4(v42);
      }
      if (v17)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
          sub_1007976B4();
        }
        BOOL v18 = 1;
      }
      else
      {
        __int16 v41 = 0;
        long long v42 = 0;
        sub_100008A18((uint64_t)&v41, (uint64_t)&v43, 0x10uLL);
        id v23 = 0;
        id v24 = 0;
        sub_1000335D8(&v23, &v41, 0x10uLL);
        sub_1003BC0D4(*(void *)(a2 + 8), 0, &v21);
        BOOL v18 = sub_100653904((uint64_t)&v23, (uint64_t)&v21);
        int v21 = &off_100998428;
        if (v22) {
          sub_1000368F4(v22);
        }
        if (v18)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
            sub_1007976B4();
          }
          BOOL v18 = 1;
        }
        id v23 = &off_100998428;
        if (v24) {
          sub_1000368F4(v24);
        }
      }
      id v25 = &off_100998428;
      if (v26) {
        sub_1000368F4(v26);
      }
      if (v18 || !v4) {
        goto LABEL_59;
      }
    }
    else if (!v4)
    {
LABEL_59:
      uint64_t v10 = 0;
LABEL_60:
      *(void *)long long buf = &off_100998428;
      if (v45) {
        sub_1000368F4(v45);
      }
      goto LABEL_62;
    }
    uint64_t v10 = v6 & v8;
    goto LABEL_60;
  }
LABEL_62:
  uint64_t v27 = &off_100998428;
  if (v28) {
    sub_1000368F4(v28);
  }
  return v10;
}

void sub_100702074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10, uint64_t a11, atomic_uint *a12, uint64_t a13, atomic_uint *a14, uint64_t a15, atomic_uint *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  if (a12) {
    sub_1000368F4(a12);
  }
  if (a14) {
    sub_1000368F4(a14);
  }
  *(void *)(v30 - 160) = &off_100998428;
  long long v32 = *(atomic_uint **)(v30 - 152);
  if (v32) {
    sub_1000368F4(v32);
  }
  if (a16) {
    sub_1000368F4(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100702234(uint64_t a1@<X0>, void *a2@<X8>)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1 + 48);
  *a2 = 0;
  a2[1] = 0;
  operator new();
}

void sub_100702FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25)
{
  *id v25 = v26;
  int v28 = (atomic_uint *)v25[1];
  if (v28) {
    sub_1000368F4(v28);
  }
  sub_10003AFB4((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_1007030CC()
{
}

uint64_t sub_1007030D4(uint64_t a1, uint64_t a2, _WORD *a3)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 48);
  uint64_t v5 = *(void *)(a2 + 8);
  if (!a3 || !v5)
  {
    BOOL v6 = qword_100A19E80;
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_FAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Invalid params dict and keys should always be valid", buf, 2u);
      uint64_t v5 = *(void *)(a2 + 8);
    }
  }
  *(void *)long long buf = 0;
  char v11 = 0;
  sub_1003BC0D4(v5, 6, buf);
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, a3 + 22, 1uLL);
    sub_1003BC0D4(*(void *)(a2 + 8), 7, &v8);
    sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
    BOOL v8 = &off_100998428;
    if (v9) {
      sub_1000368F4(v9);
    }
    if (!sub_100013DCC((uint64_t)buf))
    {
      sub_100052430((uint64_t)buf, (char *)a3 + 45, 1uLL);
      sub_1003BC0D4(*(void *)(a2 + 8), 5, &v8);
      sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
      BOOL v8 = &off_100998428;
      if (v9) {
        sub_1000368F4(v9);
      }
      if (!sub_100013DCC((uint64_t)buf)) {
        sub_100052430((uint64_t)buf, a3 + 14, 0x10uLL);
      }
    }
    a3[40] |= 8u;
  }
  sub_1003BC0D4(*(void *)(a2 + 8), 8, &v8);
  sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
  BOOL v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, a3 + 23, 2uLL);
    a3[40] |= 0x10u;
  }
  sub_1003BC0D4(*(void *)(a2 + 8), 9, &v8);
  sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
  BOOL v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, a3 + 24, 8uLL);
    a3[40] |= 0x20u;
  }
  sub_1003BC0D4(*(void *)(a2 + 8), 0, &v8);
  sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
  BOOL v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, a3, 0x10uLL);
    sub_1003BC0D4(*(void *)(a2 + 8), 1, &v8);
    sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
    BOOL v8 = &off_100998428;
    if (v9) {
      sub_1000368F4(v9);
    }
    if (!sub_100013DCC((uint64_t)buf)) {
      sub_100052430((uint64_t)buf, a3 + 8, 1uLL);
    }
    sub_1003BC0D4(*(void *)(a2 + 8), 2, &v8);
    sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
    BOOL v8 = &off_100998428;
    if (v9) {
      sub_1000368F4(v9);
    }
    if (!sub_100013DCC((uint64_t)buf)) {
      sub_100052430((uint64_t)buf, (char *)a3 + 17, 1uLL);
    }
    a3[40] |= 1u;
  }
  sub_1003BC0D4(*(void *)(a2 + 8), 3, &v8);
  sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
  BOOL v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, a3 + 9, 2uLL);
    a3[40] |= 2u;
  }
  sub_1003BC0D4(*(void *)(a2 + 8), 4, &v8);
  sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
  BOOL v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, a3 + 10, 8uLL);
    a3[40] |= 4u;
  }
  sub_1003BC0D4(*(void *)(a2 + 8), 10, &v8);
  sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
  BOOL v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, a3 + 28, 0x10uLL);
    a3[40] |= 0x40u;
  }
  sub_1003BC0D4(*(void *)(a2 + 8), 11, &v8);
  sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
  BOOL v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, a3 + 36, 7uLL);
    a3[40] |= 0x80u;
  }
  sub_1003BC0D4(*(void *)(a2 + 8), 16, &v8);
  sub_100049EE0((uint64_t)buf, (uint64_t)&v8);
  BOOL v8 = &off_100998428;
  if (v9) {
    sub_1000368F4(v9);
  }
  if (!sub_100013DCC((uint64_t)buf))
  {
    sub_100052430((uint64_t)buf, (char *)a3 + 79, 1uLL);
    a3[40] |= 0x100u;
  }
  *(void *)long long buf = &off_100998428;
  if (v11) {
    sub_1000368F4(v11);
  }
  return sub_10003AFB4((uint64_t)v12);
}

void sub_1007036F0(_Unwind_Exception *a1, uint64_t a2, atomic_uint *a3, uint64_t a4, atomic_uint *a5, ...)
{
  va_start(va, a5);
  if (a3) {
    sub_1000368F4(a3);
  }
  if (a5) {
    sub_1000368F4(a5);
  }
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1007037E0(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 432))(v2))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_10079753C();
    }
  }
  else
  {
    BOOL v3 = +[NSMutableSet set];
    if (*(void *)(a1 + 456))
    {
      BOOL v4 = *(const unsigned __int8 **)(a1 + 440);
      if (v4 != (const unsigned __int8 *)(a1 + 448))
      {
        do
        {
          uint64_t v5 = sub_100031234(v4 + 32);
          [v3 addObject:v5];

          BOOL v6 = (unsigned __int8 *)*((void *)v4 + 1);
          if (v6)
          {
            do
            {
              id v7 = (const unsigned __int8 **)v6;
              BOOL v6 = *(unsigned __int8 **)v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              id v7 = (const unsigned __int8 **)*((void *)v4 + 2);
              BOOL v8 = *v7 == v4;
              BOOL v4 = (const unsigned __int8 *)v7;
            }
            while (!v8);
          }
          BOOL v4 = (const unsigned __int8 *)v7;
        }
        while (v7 != (const unsigned __int8 **)(a1 + 448));
      }
    }
    sub_1007013E8(a1);
    if (*(unsigned char *)(a1 + 41))
    {
      uint64_t v9 = *(const unsigned __int8 **)(a1 + 440);
      if (v9 != (const unsigned __int8 *)(a1 + 448))
      {
        do
        {
          uint64_t v10 = sub_100031234(v9 + 32);
          unsigned __int8 v11 = [v3 containsObject:v10];

          uint64_t v27 = 0;
          int v28 = 0;
          sub_1003BC0D4(*((void *)v9 + 7), 10, &v27);
          if (!sub_100013DCC((uint64_t)&v27))
          {
            BOOL v12 = sub_100031234(v9 + 32);
            char v13 = sub_100008DC4(a1, v12) | v11;

            if ((v13 & 1) == 0)
            {
              uint64_t v14 = sub_10003FB34();
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
              }
              BOOL v15 = off_1009F7ED8;
              int v16 = sub_100031234(v9 + 32);
              uint64_t v17 = sub_100030DCC((uint64_t)v15, v16, 0);
              uint64_t v18 = sub_10004A6E4((uint64_t)&v27);
              int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 368))(v14, v17, v18, 1);

              id v20 = sub_100031234(v9 + 32);
              sub_100703BE0((uint64_t)v20, v20, v19);

              sub_1003BC0D4(*((void *)v9 + 7), 11, &v25);
              int v21 = (int *)sub_10004A6E4((uint64_t)&v25);
              id v22 = (_OWORD *)sub_10004A6E4((uint64_t)&v27);
              sub_100703C48(a1, v21, v22);
              id v25 = &off_100998428;
              if (v26) {
                sub_1000368F4(v26);
              }
            }
          }
          uint64_t v27 = &off_100998428;
          if (v28) {
            sub_1000368F4(v28);
          }
          id v23 = (unsigned __int8 *)*((void *)v9 + 1);
          if (v23)
          {
            do
            {
              id v24 = (const unsigned __int8 **)v23;
              id v23 = *(unsigned __int8 **)v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              id v24 = (const unsigned __int8 **)*((void *)v9 + 2);
              BOOL v8 = *v24 == v9;
              uint64_t v9 = (const unsigned __int8 *)v24;
            }
            while (!v8);
          }
          uint64_t v9 = (const unsigned __int8 *)v24;
        }
        while (v24 != (const unsigned __int8 **)(a1 + 448));
      }
    }
  }
}

void sub_100703B2C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100703BE0(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  if (a3 && os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
    sub_1007976E8();
  }
}

BOOL sub_100703C48(uint64_t a1, int *a2, _OWORD *a3)
{
  unint64_t v6 = ((unint64_t)*((unsigned __int8 *)a2 + 1) << 40) | ((unint64_t)*((unsigned __int8 *)a2 + 2) << 32) | ((unint64_t)*((unsigned __int8 *)a2 + 3) << 24) | ((unint64_t)*((unsigned __int8 *)a2 + 4) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + 5) << 8) | *((unsigned __int8 *)a2 + 6) | ((unint64_t)*(unsigned __int8 *)a2 << 48);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
  }
  *(void *)uuid_t uu = 0;
  uint64_t v27 = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, v6, 0, 1u, 0, 0, uu);
  id v7 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v8 = v19;
    sub_10004BDF8();
    if (v20 < 0) {
      BOOL v8 = (void **)v19[0];
    }
    if (uuid_is_null(uu))
    {
      *(_DWORD *)long long buf = 136446466;
      id v23 = v8;
      __int16 v24 = 2082;
      id v25 = "NONE";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" (%{public}s) to the cache.", buf, 0x16u);
    }
    else
    {
      memset(out, 0, 37);
      uuid_unparse_upper(uu, out);
      sub_10004191C(__p, out);
      if (v18 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446466;
      id v23 = v8;
      __int16 v24 = 2082;
      id v25 = (const char *)v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adding \"%{public}s\" (%{public}s) to the cache.", buf, 0x16u);
      if (v18 < 0) {
        operator delete(__p[0]);
      }
    }
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
  if (uuid_is_null(uu))
  {
    int v10 = 0;
  }
  else
  {
    unsigned __int8 v11 = sub_100031234(uu);
    BOOL v12 = sub_100008DC4(a1, v11);

    int v10 = !v12;
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  int v13 = sub_100235368(a2, a3, v10);
  sub_10001B910(__p);
  uint64_t v14 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BDF8();
    if (v20 >= 0) {
      BOOL v15 = v19;
    }
    else {
      BOOL v15 = (void **)v19[0];
    }
    *(_DWORD *)uuid_string_t out = 136447235;
    *(void *)&_OWORD out[4] = v15;
    *(_WORD *)&out[12] = 1041;
    *(_DWORD *)&out[14] = 16;
    *(_WORD *)&out[18] = 2097;
    *(void *)&out[20] = a3;
    *(_WORD *)&out[28] = 1024;
    *(_DWORD *)&out[30] = v10;
    *(_WORD *)&out[34] = 1024;
    *(_DWORD *)&out[36] = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Added \"%{public}s\" to the cache (irk=%{private}.16P, okToRePair=%d) status=%d", out, 0x28u);
    if (v20 < 0) {
      operator delete(v19[0]);
    }
  }
  sub_10001B8AC(__p);
  return v13 == 0;
}

void sub_100703F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100703FD8(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BFD48);
  }
  int v2 = *((_DWORD *)off_1009F7ED8 + 38);
  unsigned int v3 = *(unsigned __int16 *)(a1 + 3736);
  if (v3 < (unsigned __int16)v2)
  {
    LOWORD(v3) = v2 - 25;
    *(_WORD *)(a1 + 3736) = v2 - 25;
  }
  id v4 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "We can have up to %d paired devices", buf, 8u);
  }
  uint64_t v5 = sub_1006FF770(a1);
  if (v5)
  {
    sub_1007001D0();
    uint64_t v19 = sub_100017768();
    sub_10004191C(v27, "");
    sub_1005C8AF4(v19, v5, (uint64_t)v27, 1);
  }
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, a1 + 48);
  sub_100700764(a1);
  sub_1007013E8(a1);
  uint64_t v6 = sub_100035F54();
  int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 440))(v6);
  *(unsigned char *)(a1 + 3717) = v7;
  sub_1001F10A4(v7 ^ 1u);
  if (*(unsigned char *)(a1 + 3717)) {
    sub_100240530();
  }
  out_tokeuint64_t n = 0;
  BOOL v8 = *(NSObject **)(sub_100019878() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10070445C;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  uint32_t v9 = notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", &out_token, v8, handler);
  int v10 = qword_100A19E80;
  if (v9)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_ERROR)) {
      sub_100797750();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Successfully registered for MKB first unlock notification", buf, 2u);
  }
  unsigned __int8 v11 = *(NSObject **)(sub_100019878() + 8);
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 3221225472;
  void v23[2] = sub_10070459C;
  v23[3] = &unk_1009A7640;
  v23[4] = a1;
  notify_register_dispatch("com.apple.purplebuddy.setupdone", &out_token, v11, v23);
  char v22 = 0;
  uint64_t v12 = sub_100017768();
  sub_10004191C(buf, "CT");
  sub_10004191C(__p, "UseCTPrefixForCTCrypto");
  int v13 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v12 + 72))(v12, buf, __p, &v22);
  if (v22) {
    int v14 = v13;
  }
  else {
    int v14 = 0;
  }
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  if (v29 < 0)
  {
    operator delete(*(void **)buf);
    if (!v14) {
      goto LABEL_27;
    }
  }
  else if (!v14)
  {
    goto LABEL_27;
  }
  BOOL v15 = qword_100A19E80;
  if (os_log_type_enabled((os_log_t)qword_100A19E80, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: using the CT- prefix instead of EN- prefix for ContactTracing", buf, 2u);
  }
  *(unsigned char *)(a1 + 40) = 1;
LABEL_27:
  uint64_t v16 = +[NSMutableArray array];
  uint64_t v17 = *(void **)(a1 + 3752);
  *(void *)(a1 + 3752) = v16;

  sub_100704610(a1);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BFD68);
  }
  sub_100680938((uint64_t)off_1009F7EB8, a1 + 16, 0);
  return sub_10003AFB4((uint64_t)v26);
}