void sub_1005D908C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  void *v15;
  void *v16;
  void *v17;

  _Unwind_Resume(a1);
}

void sub_1005D9124(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B96A8);
  }
  uint64_t v4 = sub_100030DCC((uint64_t)off_1009F7ED8, v3, 0);
  uint64_t v5 = sub_10003FB34();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v5 + 848))(v5, v4, a1 + 19, a1 + 20);
  [*(id *)(a1 + 56) removeObject:v3];
  v6 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = [*(id *)(a1 + 56) count];
    int v8 = *(unsigned __int8 *)(a1 + 19);
    int v9 = *(unsigned __int8 *)(a1 + 20);
    int v10 = 134218496;
    id v11 = v7;
    __int16 v12 = 1024;
    int v13 = v8;
    __int16 v14 = 1024;
    int v15 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "stopTrackingForDevice - tracked devices: %lu, total: %d, remaining: %d", (uint8_t *)&v10, 0x18u);
  }
}

void sub_1005D9298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005D92B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    *(_DWORD *)__p = 138543618;
    *(void *)&__p[4] = v3;
    __int16 v16 = 2048;
    uint64_t v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "removeSessionFromTrackingSessions %{public}@, number of currently tracking sessions: %lu", __p, 0x16u);
  }
  if (v3)
  {
    v6 = *(uint64_t **)(a1 + 24);
    if (v6 != *(uint64_t **)(a1 + 32))
    {
      uint64_t v7 = -(uint64_t)v6;
      while (1)
      {
        sub_10003AE4C(*v6, (uint64_t)__p);
        if (v18 >= 0) {
          int v8 = __p;
        }
        else {
          int v8 = *(unsigned char **)__p;
        }
        int v9 = +[NSString stringWithUTF8String:v8];
        if (v18 < 0) {
          operator delete(*(void **)__p);
        }
        if ([v9 isEqualToString:v3]) {
          break;
        }

        ++v6;
        v7 -= 8;
        if (v6 == *(uint64_t **)(a1 + 32)) {
          goto LABEL_17;
        }
      }
      uint64_t v10 = -v7;
      id v11 = (const void *)(8 - v7);
      size_t v12 = *(void *)(a1 + 32) - (8 - v7);
      if (v12) {
        memmove((void *)v10, v11, v12);
      }
      *(void *)(a1 + 32) = v10 + v12;

LABEL_17:
      int v13 = qword_100A19FC0;
      if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
        *(_DWORD *)__p = 134217984;
        *(void *)&__p[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Now tracking sessions: %lu", __p, 0xCu);
      }
    }
  }
}

void sub_1005D94A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1005D94DC(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v9 = a3;
  uint64_t v6 = sub_1005D7FA4((uint64_t)v9, v9, *(void **)(a1 + 32));
  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  int v8 = *(void **)(v7 + 40);
  *(void *)(v7 + 40) = v6;

  if (*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40)) {
    *a4 = 1;
  }
}

void sub_1005D9560(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005D9574(uint64_t a1, uint64_t a2, void *a3)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v9;
    while (2)
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v9 != v6) {
          objc_enumerationMutation(v4);
        }
        if (objc_msgSend(*(id *)(*((void *)&v8 + 1) + 8 * i), "rssiIncreaseScanThreshold", (void)v8))
        {
          *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
          goto LABEL_11;
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v8 objects:v12 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:
}

void sub_1005D9680(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005D96A4(uint64_t a1, uint64_t a2, void *a3)
{
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = a3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      for (i = 0; i != v5; i = (char *)i + 1)
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        long long v8 = *(void **)(*((void *)&v10 + 1) + 8 * i);
        if (objc_msgSend(v8, "rssiIncreaseScanThreshold", (void)v10))
        {
          unsigned int v9 = [v8 rssiIncreaseScanThreshold];
          if (v9 < [*(id *)(a1 + 32) rssiIncreaseScanThreshold])
          {
            objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40), v8);
            *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = 1;
          }
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }

  [*(id *)(a1 + 32) setRssiIncreaseScanThreshold:[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) rssiIncreaseScanThreshold]];
  [*(id *)(a1 + 32) setRssiIncreaseScanWindowThreshold:[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) rssiIncreaseScanWindowThreshold]];
  [*(id *)(a1 + 32) setRssiIncreaseScanIntervalThreshold:[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) rssiIncreaseScanIntervalThreshold]];
  [*(id *)(a1 + 32) setRssiIncreaseScanTimeoutThreshold:[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) rssiIncreaseScanTimeoutThreshold]];
  [*(id *)(a1 + 32) setSensorTimeoutBetweenIncreaseScan:[*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) sensorTimeoutBetweenIncreaseScan]];
}

void sub_1005D987C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1005D98A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    *(_DWORD *)__p = 138543618;
    *(void *)&__p[4] = v3;
    __int16 v13 = 2048;
    uint64_t v14 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sessionFromSessionIDString: %{public}@ from tracking sessions: %lu", __p, 0x16u);
  }
  if (!v3 || (uint64_t v6 = *(uint64_t **)(a1 + 24), v6 == *(uint64_t **)(a1 + 32)))
  {
LABEL_12:
    uint64_t v7 = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v7 = *v6;
      sub_10003AE4C(*v6, (uint64_t)__p);
      long long v8 = v15 >= 0 ? __p : *(unsigned char **)__p;
      unsigned int v9 = +[NSString stringWithUTF8String:v8];
      if (v15 < 0) {
        operator delete(*(void **)__p);
      }
      unsigned __int8 v10 = [v9 isEqualToString:v3];

      if (v10) {
        break;
      }
      if (++v6 == *(uint64_t **)(a1 + 32)) {
        goto LABEL_12;
      }
    }
  }

  return v7;
}

void sub_1005D9A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  _Unwind_Resume(a1);
}

void sub_1005D9A50(uint64_t a1, void *a2, int a3, char a4)
{
  id v7 = a2;
  long long v8 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    if ((a3 - 1) > 2) {
      CFStringRef v9 = @"Not Set";
    }
    else {
      CFStringRef v9 = off_1009B96C8[(char)(a3 - 1)];
    }
    uint64_t v10 = *(void *)(a1 + 48);
    *(_DWORD *)buf = 138543874;
    id v19 = v7;
    __int16 v20 = 2114;
    CFStringRef v21 = v9;
    __int16 v22 = 2114;
    uint64_t v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "leSensorStateChanged received %{public}@ with state: %{public}@ with currently tracked requests %{public}@", buf, 0x20u);
  }
  long long v11 = *(void **)(a1 + 48);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1005D9BE8;
  v13[3] = &unk_1009B9568;
  id v14 = v7;
  uint64_t v15 = a1;
  char v16 = a3;
  char v17 = a4;
  id v12 = v7;
  [v11 enumerateKeysAndObjectsUsingBlock:v13];
}

void sub_1005D9BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1005D9BE8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = sub_1005D98A8(*(void *)(a1 + 40), v5);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005D9CD4;
  v9[3] = &unk_1009B9540;
  id v8 = *(id *)(a1 + 32);
  __int16 v12 = *(_WORD *)(a1 + 48);
  id v10 = v8;
  uint64_t v11 = v7;
  [v6 enumerateObjectsUsingBlock:v9];
}

void sub_1005D9CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1005D9CD4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [v3 deviceUUID];
  unsigned int v5 = [v4 isEqual:*(void *)(a1 + 32)];

  if (v5)
  {
    unsigned int v6 = [v3 currentState];
    [v3 setCurrentState:*(unsigned __int8 *)(a1 + 48)];
    if (v6 == 2)
    {
      if ((*(unsigned __int8 *)(a1 + 48) | 2) != 3) {
        goto LABEL_19;
      }
    }
    else if ((v6 & 0xFFFFFFFD) != 1 || *(unsigned char *)(a1 + 48) != 2)
    {
      goto LABEL_19;
    }
    uint64_t v7 = [v3 appleTypes];
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3221225472;
    v18[2] = sub_1005D9F88;
    v18[3] = &unk_1009B9518;
    long long v12 = *(_OWORD *)(a1 + 32);
    id v8 = (id)v12;
    long long v19 = v12;
    char v20 = *(unsigned char *)(a1 + 48);
    [v7 enumerateObjectsUsingBlock:v18];

    if (*(unsigned char *)(a1 + 49))
    {
      char v16 = &off_100998428;
      char v17 = 0;
      uint64_t v9 = sub_1003731C0();
      p_p = &__p;
      sub_100551758(*(void *)(a1 + 40), &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v11 = *(void *)(a1 + 32);
      __int16 v13 = &off_100998428;
      id v14 = v17;
      if (v17) {
        sub_100037354((uint64_t)v17);
      }
      (*(void (**)(uint64_t, uint64_t, std::string *, uint64_t, uint64_t (***)()))(*(void *)v9 + 40))(v9, 7, p_p, v11, &v13);
      __int16 v13 = &off_100998428;
      if (v14) {
        sub_1000368F4(v14);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      char v16 = &off_100998428;
      if (v17) {
        sub_1000368F4(v17);
      }
    }
  }
LABEL_19:
}

void sub_1005D9F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, atomic_uint *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    sub_1000368F4(a20);
  }

  _Unwind_Resume(a1);
}

void sub_1005D9F88(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (qword_1009F8788 != -1)
  {
    dispatch_once(&qword_1009F8788, &stru_1009B9688);
    id v3 = v4;
  }
  sub_1002FDF88((uint64_t)off_1009F8780, *(void *)(a1 + 40), *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 48), [v3 intValue]);
}

void sub_1005DA02C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1005DA040(uint64_t a1, void *a2, int a3, char a4)
{
}

void sub_1005DA048(uint64_t a1)
{
  v2 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Sensor Tracking Manager -------------------", (uint8_t *)&v8, 2u);
    v2 = qword_100A19FC0;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(a1 + 48) count];
    uint64_t v4 = (uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3;
    int v8 = 134218240;
    id v9 = v3;
    __int16 v10 = 2048;
    uint64_t v11 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Tracking Requests: %lu %lu", (uint8_t *)&v8, 0x16u);
  }
  [*(id *)(a1 + 48) enumerateKeysAndObjectsUsingBlock:&stru_1009B95A8];
  unsigned int v5 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [*(id *)(a1 + 56) count];
    int v8 = 134217984;
    id v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump: Total Devices currently tracked: %lu", (uint8_t *)&v8, 0xCu);
  }
  [*(id *)(a1 + 56) enumerateObjectsUsingBlock:&stru_1009B9628];
  uint64_t v7 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v8) = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ Sensor Tracking Manager END -------------------", (uint8_t *)&v8, 2u);
  }
}

void sub_1005DA1FC(id a1, NSString *a2, NSMutableSet *a3, BOOL *a4)
{
  unsigned int v5 = a3;
  id v6 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 138543362;
    int v8 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "statedump: --------- %{public}@ ---------", (uint8_t *)&v7, 0xCu);
  }
  [(NSMutableSet *)v5 enumerateObjectsUsingBlock:&stru_1009B95E8];
}

void sub_1005DA2C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005DA2DC(id a1, TrackingDevice *a2, BOOL *a3)
{
  id v3 = a2;
  uint64_t v4 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = [(TrackingDevice *)v3 deviceUUID];
    int v11 = 138543362;
    CFStringRef v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tDevice: %{public}@", (uint8_t *)&v11, 0xCu);

    uint64_t v4 = qword_100A19FC0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    id v6 = [(TrackingDevice *)v3 appleTypes];
    int v7 = [v6 allObjects];
    int v11 = 138543362;
    CFStringRef v12 = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tTypes: %{public}@", (uint8_t *)&v11, 0xCu);

    uint64_t v4 = qword_100A19FC0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v8 = [(TrackingDevice *)v3 currentState] - 1;
    if (v8 > 2) {
      CFStringRef v9 = @"Not Set";
    }
    else {
      CFStringRef v9 = off_1009B96C8[(char)v8];
    }
    int v11 = 138543362;
    CFStringRef v12 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tCurrentState: %{public}@", (uint8_t *)&v11, 0xCu);
    uint64_t v4 = qword_100A19FC0;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = [(TrackingDevice *)v3 timeoutValue];
    int v11 = 67109120;
    LODWORD(v12) = v10;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tTimeout: %d", (uint8_t *)&v11, 8u);
  }
}

void sub_1005DA4E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005DA510(id a1, NSUUID *a2, BOOL *a3)
{
  id v3 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B96A8);
  }
  sub_100030DCC((uint64_t)off_1009F7ED8, v3, 0);
  uint64_t v4 = qword_100A19FC0;
  if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = sub_1006AD3F0();
    int v6 = 138543618;
    int v7 = v3;
    __int16 v8 = 2114;
    CFStringRef v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: \tDevice: %{public}@ - %{public}@", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1005DA624(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1005DA650(id a1)
{
}

void sub_1005DA694()
{
}

void sub_1005DA6B8(id a1)
{
}

void sub_1005DA6FC()
{
}

void sub_1005DA720(id a1)
{
}

void sub_1005DA764()
{
}

void sub_1005DA788(id a1)
{
}

void sub_1005DA7CC()
{
}

uint64_t sub_1005DA7F0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  uint64_t v4 = sub_100035F54();
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, 2);
  if (v5) {
    LOBYTE(v5) = sub_10047EF58(a2);
  }
  *(unsigned char *)(a1 + 8) = v5;
  return a1;
}

uint64_t sub_1005DA85C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)(a1 + 8))
  {
    unsigned __int16 v6 = 0;
    uint64_t v7 = sub_100372E50();
    switch((int)a2)
    {
      case 1:
        uint64_t v10 = sub_10047F16C(*(void *)a1);
        unsigned __int16 v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, 4294967294, v10);
        goto LABEL_12;
      case 2:
        uint64_t v11 = sub_10047F6B8(*(void *)a1, 0);
        uint64_t v12 = sub_10047F16C(*(void *)a1);
        unsigned __int16 v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 16))(v7, v11, v12);
        goto LABEL_12;
      case 3:
      case 4:
      case 5:
      case 6:
      case 7:
        if (!sub_10047F0DC(*(void *)a1)) {
          return 0;
        }
        unsigned __int16 v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 24))(v7, a2);
        if (a3 >= v8) {
          return v8;
        }
        else {
          return (unsigned __int16)a3;
        }
      case 8:
        if (!sub_10047F16C(*(void *)a1)) {
          return 0;
        }
        unsigned __int16 v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 32))(v7);
LABEL_12:
        unsigned __int16 v6 = v9;
        break;
      case 11:
        unsigned __int16 v6 = 1;
        break;
      default:
        return v6;
    }
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t sub_1005DAA0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  if (!*(unsigned char *)(a1 + 8)) {
    goto LABEL_15;
  }
  uint64_t v14 = sub_100372E50();
  uint64_t v15 = v14;
  switch((int)a2)
  {
    case 1:
      uint64_t v19 = sub_10047F16C(*(void *)a1);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 40))(v15, 4294967294, v19, a3, a4, a5, a7);
      break;
    case 2:
      uint64_t v20 = sub_10047F6B8(*(void *)a1, 0);
      uint64_t v21 = sub_10047F16C(*(void *)a1);
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 40))(v15, v20, v21, a3, a4, a5, a7);
      break;
    case 3:
    case 4:
    case 5:
    case 7:
      int v16 = sub_10047F0DC(*(void *)a1);
      if (a4 >= a6 || !v16) {
        goto LABEL_15;
      }
      unsigned __int16 v17 = a6 - a4;
      if ((int)(a6 - a4) >= (int)a5) {
        unsigned __int16 v17 = a5;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)v15 + 48))(v15, a2, a4, v17);
      break;
    case 8:
      if (!sub_10047F16C(*(void *)a1)) {
        goto LABEL_15;
      }
      uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v15 + 56))(v15, a4, a5);
      break;
    case 11:
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 64))(v14);
      break;
    default:
      goto LABEL_15;
  }
  if (!result) {
LABEL_15:
  }
    operator new();
  return result;
}

void sub_1005DAC30()
{
}

uint64_t sub_1005DAC80(uint64_t a1, uint64_t a2, int a3)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v6 = sub_100372E50();
  uint64_t v7 = v6;
  switch((int)a2)
  {
    case 2:
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)v6 + 80);
      uint64_t result = v10();
      break;
    case 3:
    case 4:
    case 5:
    case 7:
      if (!sub_10047F0DC(*(void *)a1)) {
        return 0;
      }
      unsigned __int16 v8 = *(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v7 + 48);
      uint64_t result = v8(v7, a2, (a3 - 1), 1);
      break;
    case 8:
      if (!sub_10047F16C(*(void *)a1)) {
        return 0;
      }
      uint64_t v11 = *(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)v7 + 56);
      uint64_t result = v11(v7, (a3 - 1), 1);
      break;
    default:
      return 0;
  }
  return result;
}

uint64_t sub_1005DAE24(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v11 = sub_100372E50();
  if (a2 != 2) {
    return 0;
  }
  uint64_t v12 = v11;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v16 = *(void *)(a3 + 16);
  }
  uint64_t v13 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 88))(v12, __p, a4, a5, a6);
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v13;
}

void sub_1005DAF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DAF20(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v13 = sub_100372E50();
  if (a2 != 2) {
    return 0;
  }
  uint64_t v14 = v13;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v18 = *(void *)(a3 + 16);
  }
  uint64_t v15 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v14 + 96))(v14, __p, a4, a5, a6, a7);
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[0]);
  }
  return v15;
}

void sub_1005DB010(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DB02C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  v1 = *(uint64_t (**)(void))(*(void *)sub_100372E50() + 104);

  return v1();
}

uint64_t sub_1005DB09C(uint64_t a1, uint64_t a2)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  id v3 = (uint64_t (***)(void, uint64_t, void))sub_100372EE4();
  if (a2 > 8) {
    return 0;
  }
  uint64_t v4 = 0;
  if (((1 << a2) & 0x1BC) != 0) {
    return (**v3)(v3, a2, 0);
  }
  return v4;
}

uint64_t sub_1005DB138(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 8) && ((uint64_t v3 = sub_100372EE4(), a2 == 8) || a2 == 2)) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 8))(v3, a2);
  }
  else {
    return 0;
  }
}

uint64_t sub_1005DB1A8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8)) {
    return 0;
  }
  uint64_t v1 = sub_100372EE4();
  return (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1);
}

void sub_1005DB1FC(uint64_t a1)
{
  sub_1005DB2B0(a1);

  operator delete();
}

uint64_t sub_1005DB234()
{
  return 0;
}

uint64_t sub_1005DB23C()
{
  return 0;
}

uint64_t sub_1005DB244(uint64_t a1, size_t count)
{
  *(void *)a1 = off_1009B9720;
  *(_WORD *)(a1 + 8) = count;
  *(void *)(a1 + 16) = 0;
  if (count) {
    *(void *)(a1 + 16) = malloc_type_calloc(count, 8uLL, 0x2004093837F09uLL);
  }
  return a1;
}

uint64_t sub_1005DB2B0(uint64_t a1)
{
  *(void *)a1 = off_1009B9720;
  v2 = *(void **)(a1 + 16);
  if (v2)
  {
    unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
    if (*(_WORD *)(a1 + 8))
    {
      unint64_t v4 = 0;
      do
      {
        uint64_t v5 = *(void *)(*(void *)(a1 + 16) + 8 * v4);
        if (v5)
        {
          (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
          unsigned int v3 = *(unsigned __int16 *)(a1 + 8);
        }
        ++v4;
      }
      while (v4 < v3);
      v2 = *(void **)(a1 + 16);
    }
    free(v2);
  }
  return a1;
}

uint64_t sub_1005DB354(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 8);
}

uint64_t sub_1005DB35C(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= a2) {
    return 0;
  }
  uint64_t result = *(void *)(*(void *)(a1 + 16) + 8 * a2);
  if (!result)
  {
    uint64_t v4 = a2;
    *(void *)(*(void *)(a1 + 16) + 8 * a2) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 24))(a1);
    return *(void *)(*(void *)(a1 + 16) + 8 * v4);
  }
  return result;
}

uint64_t sub_1005DB3D8(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 8) <= a2)
  {
    uint64_t v4 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_FAULT)) {
      sub_100782118(v4);
    }
  }
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t result = *(void *)(v5 + 8 * a2);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    uint64_t v5 = *(void *)(a1 + 16);
  }
  *(void *)(v5 + 8 * a2) = 0;
  return result;
}

uint64_t sub_1005DB474(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 768);
  switch(v2)
  {
    case 1:
    case 4:
      operator new();
    case 2:
      operator new();
    case 3:
    case 5:
    case 6:
    case 7:
      break;
    case 8:
      operator new();
    default:
      if (v2 == 16) {
        operator new();
      }
      if (v2 == 32)
      {
        uint64_t v12 = 0;
        long long v11 = 0u;
        memset(v10, 0, sizeof(v10));
        long long v8 = 0u;
        *(_OWORD *)std::string __p = 0u;
        long long v6 = 0u;
        *(_OWORD *)uint64_t v7 = 0u;
        long long v4 = 0u;
        *(_OWORD *)uint64_t v5 = 0u;
        sub_1006161E0((uint64_t)&v4 + 1);
        BYTE2(v5[0]) = 0;
        BYTE4(v5[0]) = 0;
        BYTE2(v7[0]) = 0;
        BYTE4(v7[0]) = 0;
        DWORD1(v10[1]) = 0;
        long long v6 = 0uLL;
        v5[1] = 0;
        LOBYTE(v7[0]) = 0;
        long long v8 = 0uLL;
        v7[1] = 0;
        LOBYTE(__p[0]) = 0;
        memset(v10, 0, 19);
        __p[1] = 0;
        BYTE8(v10[1]) = 1;
        BYTE2(v12) = 0;
        *(void *)((char *)&v10[1] + 14) = 0;
        *(void *)((char *)&v10[1] + 9) = 0;
        long long v11 = 0uLL;
        *((void *)&v10[2] + 1) = 0;
        LOBYTE(v12) = 0;
        operator new();
      }
      return result;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
    sub_10078219C();
  }
  return 0;
}

void sub_1005DB6EC()
{
}

double sub_1005DB774(uint64_t a1)
{
  *(void *)&double result = 0x200000000;
  *(void *)(a1 + 8) = 0x200000000;
  *(void *)a1 = off_1009B9750;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_1005DB7B0(uint64_t a1)
{
  *(void *)a1 = off_1009B9750;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DB800(uint64_t a1)
{
  *(void *)a1 = off_1009B9750;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

uint64_t sub_1005DB870(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B9D40);
  }
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  sub_1004B4550((uint64_t)off_1009F7EA8, (uint64_t)&__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  sub_10004191C(v9, (char *)p_p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::operator+<char>();
  unsigned int v3 = std::string::append(&__p, "\"");
  std::string::size_type v4 = v3->__r_.__value_.__r.__words[0];
  v11[0] = v3->__r_.__value_.__l.__size_;
  *(void *)((char *)v11 + 7) = *(std::string::size_type *)((char *)&v3->__r_.__value_.__r.__words[1] + 7);
  char v5 = HIBYTE(v3->__r_.__value_.__r.__words[2]);
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  uint64_t v6 = v11[0];
  *(void *)(a1 + 16) = v4;
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 31) = *(void *)((char *)v11 + 7);
  *(unsigned char *)(a1 + 39) = v5;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  return 1;
}

void sub_1005DB9C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005DBA10(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10004191C(&v26, "\r\n");
  if (*(_DWORD *)(a1 + 40) == 1) {
    std::string::size_type v4 = "+CGMI: ";
  }
  else {
    std::string::size_type v4 = "+GMI: ";
  }
  char v5 = std::string::append(&v26, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unsigned __int16 v9 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    long long v11 = (const std::string::value_type *)v8;
  }
  else {
    long long v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v8 + 8);
  }
  uint64_t v13 = std::string::append(&v27, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v24, "\r\n");
  if ((v25 & 0x80u) == 0) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v16 = v25;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v24[1];
  }
  unsigned __int16 v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v20 = v23;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  uint64_t v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1005DBBBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DBC50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 40) = a2;
  return result;
}

double sub_1005DBC58(uint64_t a1)
{
  *(void *)&double result = 0x200000001;
  *(void *)(a1 + 8) = 0x200000001;
  *(void *)a1 = off_1009B9780;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_1005DBC94(uint64_t a1)
{
  *(void *)a1 = off_1009B9780;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DBCE4(uint64_t a1)
{
  *(void *)a1 = off_1009B9780;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

uint64_t sub_1005DBD54(uint64_t a1)
{
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009B9D40);
  }
  sub_1004B4448((uint64_t)off_1009F7EA8, (uint64_t)__p);
  if (v5 >= 0) {
    int v2 = __p;
  }
  else {
    int v2 = (void **)__p[0];
  }
  std::string::assign((std::string *)(a1 + 16), (const std::string::value_type *)v2);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return 1;
}

void sub_1005DBDE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005DBE00(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10004191C(&v26, "\r\n");
  if (*(_DWORD *)(a1 + 40) == 1) {
    std::string::size_type v4 = "+CGMM: ";
  }
  else {
    std::string::size_type v4 = "+GMM: ";
  }
  char v5 = std::string::append(&v26, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  unsigned __int16 v9 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    long long v11 = (const std::string::value_type *)v8;
  }
  else {
    long long v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v8 + 8);
  }
  uint64_t v13 = std::string::append(&v27, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v24, "\r\n");
  if ((v25 & 0x80u) == 0) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v16 = v25;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v24[1];
  }
  unsigned __int16 v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v20 = v23;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  uint64_t v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1005DBFAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005DC040(uint64_t a1)
{
  *(void *)&double result = 0x200000002;
  *(void *)(a1 + 8) = 0x200000002;
  *(void *)a1 = off_1009B97B0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_1005DC078(uint64_t a1)
{
  *(void *)a1 = off_1009B97B0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DC0C8(uint64_t a1)
{
  *(void *)a1 = off_1009B97B0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

uint64_t sub_1005DC138(uint64_t a1)
{
  char v9 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(v7, "HFP");
  sub_10004191C(__p, "HideGeneralRevision");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v2 + 72))(v2, v7, __p, &v9);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0) {
    operator delete(v7[0]);
  }
  if (v9)
  {
    std::string::assign((std::string *)(a1 + 16), "Unknown");
  }
  else
  {
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009B9D40);
    }
    sub_1004B44CC((uint64_t)off_1009F7EA8, (uint64_t)v7);
    if (v8 >= 0) {
      unsigned int v3 = v7;
    }
    else {
      unsigned int v3 = (void **)v7[0];
    }
    std::string::assign((std::string *)(a1 + 16), (const std::string::value_type *)v3);
    if (v8 < 0) {
      operator delete(v7[0]);
    }
  }
  return 1;
}

void sub_1005DC264(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005DC29C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10004191C(&v26, "\r\n");
  if (*(_DWORD *)(a1 + 40) == 1) {
    std::string::size_type v4 = "+CGMR: ";
  }
  else {
    std::string::size_type v4 = "+GMR: ";
  }
  char v5 = std::string::append(&v26, v4);
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  char v9 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v8 = a1 + 16;
  uint64_t v7 = v9;
  int v10 = *(char *)(v8 + 23);
  if (v10 >= 0) {
    long long v11 = (const std::string::value_type *)v8;
  }
  else {
    long long v11 = v7;
  }
  if (v10 >= 0) {
    std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
  }
  else {
    std::string::size_type v12 = *(void *)(v8 + 8);
  }
  uint64_t v13 = std::string::append(&v27, v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v24, "\r\n");
  if ((v25 & 0x80u) == 0) {
    uint64_t v15 = v24;
  }
  else {
    uint64_t v15 = (void **)v24[0];
  }
  if ((v25 & 0x80u) == 0) {
    std::string::size_type v16 = v25;
  }
  else {
    std::string::size_type v16 = (std::string::size_type)v24[1];
  }
  unsigned __int16 v17 = std::string::append(&v28, (const std::string::value_type *)v15, v16);
  long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
  v17->__r_.__value_.__l.__size_ = 0;
  v17->__r_.__value_.__r.__words[2] = 0;
  v17->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v23 & 0x80u) == 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  if ((v23 & 0x80u) == 0) {
    std::string::size_type v20 = v23;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  uint64_t v21 = std::string::append(&v29, (const std::string::value_type *)v19, v20);
  *a2 = *v21;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  if ((char)v23 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if ((char)v25 < 0) {
    operator delete(v24[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
}

void sub_1005DC448(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005DC4DC(uint64_t a1)
{
  *(void *)&double result = 0x200000003;
  *(void *)(a1 + 8) = 0x200000003;
  *(void *)a1 = off_1009B97E0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  return result;
}

uint64_t sub_1005DC518(uint64_t a1)
{
  *(void *)a1 = off_1009B97E0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DC568(uint64_t a1)
{
  *(void *)a1 = off_1009B97E0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

BOOL sub_1005DC5D8()
{
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B9D60);
  }
  return sub_10062F01C((uint64_t)off_1009FB118) == 0;
}

void sub_1005DC638(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
LABEL_3:
    sub_10004191C(&v24, "\r\n");
    if (*(_DWORD *)(a1 + 40) == 1) {
      std::string::size_type v4 = "+CGSN: ";
    }
    else {
      std::string::size_type v4 = "+GSN: ";
    }
    char v5 = std::string::append(&v24, v4);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    int v7 = *(char *)(a1 + 39);
    if (v7 >= 0) {
      uint64_t v8 = (const std::string::value_type *)(a1 + 16);
    }
    else {
      uint64_t v8 = *(const std::string::value_type **)(a1 + 16);
    }
    if (v7 >= 0) {
      std::string::size_type v9 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      std::string::size_type v9 = *(void *)(a1 + 24);
    }
    int v10 = std::string::append(&v25, v8, v9);
    long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    sub_10004191C(v22, "\r\n");
    if ((v23 & 0x80u) == 0) {
      std::string::size_type v12 = v22;
    }
    else {
      std::string::size_type v12 = (void **)v22[0];
    }
    if ((v23 & 0x80u) == 0) {
      std::string::size_type v13 = v23;
    }
    else {
      std::string::size_type v13 = (std::string::size_type)v22[1];
    }
    long long v14 = std::string::append(&v26, (const std::string::value_type *)v12, v13);
    long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    sub_10004191C(__p, "\r\nOK\r\n");
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v16 = __p;
    }
    else {
      std::string::size_type v16 = (void **)__p[0];
    }
    if ((v21 & 0x80u) == 0) {
      std::string::size_type v17 = v21;
    }
    else {
      std::string::size_type v17 = (std::string::size_type)__p[1];
    }
    long long v18 = std::string::append(&v27, (const std::string::value_type *)v16, v17);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if ((char)v21 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v27.__r_.__value_.__l.__data_);
    }
    if ((char)v23 < 0) {
      operator delete(v22[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    return;
  }

  sub_10004191C(a2, "\r\nERROR\r\n");
}

void sub_1005DC828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DC8BC(uint64_t a1, uint64_t a2, int a3, char *__s)
{
  *(_DWORD *)(a1 + 8) = 4;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)a1 = off_1009B9810;
  *(void *)(a1 + 16) = 1;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  if (a3 == 2)
  {
    std::string __p = 0;
    std::string::size_type v27 = 0;
    uint64_t v28 = 0;
    sub_10004191C(&__p, __s);
    uint64_t v5 = 0;
    while (1)
    {
      int v6 = SHIBYTE(dword_100A139B0[v5 + 15]);
      unint64_t v7 = v28 >= 0 ? HIBYTE(v28) : v27;
      uint64_t v8 = v28 >= 0 ? &__p : (void **)__p;
      unint64_t v9 = v6 >= 0 ? HIBYTE(dword_100A139B0[v5 + 15]) : *(void *)&dword_100A139B0[v5 + 12];
      int v10 = v6 >= 0 ? &dword_100A139B0[v5 + 10] : *(int **)&dword_100A139B0[v5 + 10];
      size_t v11 = v9 >= v7 ? v7 : v9;
      if (!memcmp(v8, v10, v11) && v9 == v7) {
        break;
      }
      std::operator+<char>();
      std::string::size_type v13 = std::string::append(&v24, "\"");
      std::string v25 = *v13;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      int v14 = SHIBYTE(v25.__r_.__value_.__r.__words[2]);
      long long v15 = (void *)v25.__r_.__value_.__r.__words[0];
      if (v28 >= 0) {
        std::string::size_type v16 = HIBYTE(v28);
      }
      else {
        std::string::size_type v16 = v27;
      }
      if (v28 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v25.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v25.__r_.__value_.__l.__size_;
      }
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v19 = &v25;
      }
      else {
        long long v19 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      if (size >= v16) {
        size_t v20 = v16;
      }
      else {
        size_t v20 = size;
      }
      BOOL v21 = memcmp(p_p, v19, v20) == 0;
      BOOL v22 = size == v16 && v21;
      if (v14 < 0) {
        operator delete(v15);
      }
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v24.__r_.__value_.__l.__data_);
      }
      if (v22) {
        break;
      }
      v5 += 8;
      if (v5 == 40) {
        goto LABEL_48;
      }
    }
    *(_DWORD *)(a1 + 16) = dword_100A139B0[v5 + 8];
LABEL_48:
    if (SHIBYTE(v28) < 0) {
      operator delete(__p);
    }
  }
  return a1;
}

void sub_1005DCA94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005DCAD0()
{
}

uint64_t sub_1005DCAE4(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 12);
  if (v1 == 2)
  {
    int v4 = *(_DWORD *)(a1 + 16);
    if (v4 != 1)
    {
      *(_DWORD *)(*(void *)(a1 + 32) + 768) = v4;
      return 1;
    }
    return 0;
  }
  if (v1 == 1)
  {
    *(_DWORD *)(a1 + 16) = *(_DWORD *)(*(void *)(a1 + 32) + 768);
    return 1;
  }
  if (v1) {
    return 0;
  }
  int32x2_t v2 = *(int32x2_t *)(a1 + 20);
  int32x2_t v3 = vadd_s32(v2, (int32x2_t)0x500000005);
  v2.i32[0] |= 0x3Eu;
  v2.i32[1] = v3.i32[1];
  *(int32x2_t *)(a1 + 20) = v2;
  return 1;
}

void sub_1005DCB4C(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  memset(&v25, 0, sizeof(v25));
  int v4 = "\r\nERROR\r\n";
  switch(a1[3])
  {
    case 0:
      sub_10004191C(&__p, "\r\n");
      if ((v24 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v6 = v24;
      }
      else {
        std::string::size_type v6 = v23;
      }
      std::string::append(&v25, p_p, v6);
      if ((char)v24 < 0) {
        operator delete(__p);
      }
      std::string::append(&v25, "+CSCS: (");
      uint64_t v7 = 0;
      int v8 = 0;
      do
      {
        if ((dword_100A139B0[v7] & a1[5]) != 0)
        {
          if (v8) {
            std::string::append(&v25, ",");
          }
          int v9 = SHIBYTE(dword_100A139B0[v7 + 7]);
          if (v9 >= 0) {
            int v10 = (const std::string::value_type *)&dword_100A139B0[v7 + 2];
          }
          else {
            int v10 = *(const std::string::value_type **)&dword_100A139B0[v7 + 2];
          }
          if (v9 >= 0) {
            std::string::size_type v11 = HIBYTE(dword_100A139B0[v7 + 7]);
          }
          else {
            std::string::size_type v11 = *(void *)&dword_100A139B0[v7 + 4];
          }
          std::string::append(&v25, v10, v11);
          ++v8;
        }
        v7 += 8;
      }
      while (v7 != 48);
      std::string::append(&v25, ")");
      goto LABEL_41;
    case 1:
      sub_10004191C(&__p, "\r\n");
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v12 = (const std::string::value_type *)&__p;
      }
      else {
        std::string::size_type v12 = (const std::string::value_type *)__p;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v13 = v24;
      }
      else {
        std::string::size_type v13 = v23;
      }
      std::string::append(&v25, v12, v13);
      if ((char)v24 < 0) {
        operator delete(__p);
      }
      std::string::append(&v25, "+CSCS: ");
      for (uint64_t i = 0; i != 48; i += 8)
      {
        if (a1[4] == dword_100A139B0[i])
        {
          int v15 = SHIBYTE(dword_100A139B0[i + 7]);
          if (v15 >= 0) {
            std::string::size_type v16 = (const std::string::value_type *)&dword_100A139B0[i + 2];
          }
          else {
            std::string::size_type v16 = *(const std::string::value_type **)&dword_100A139B0[i + 2];
          }
          if (v15 >= 0) {
            std::string::size_type v17 = HIBYTE(dword_100A139B0[i + 7]);
          }
          else {
            std::string::size_type v17 = *(void *)&dword_100A139B0[i + 4];
          }
          std::string::append(&v25, v16, v17);
        }
      }
      goto LABEL_41;
    case 2:
      if (a1[4] != 1) {
        int v4 = "\r\nOK\r\n";
      }
      goto LABEL_60;
    case 3:
LABEL_60:
      sub_10004191C(a2, v4);
      break;
    default:
LABEL_41:
      sub_10004191C(&__p, "\r\n");
      if ((v24 & 0x80u) == 0) {
        long long v18 = (const std::string::value_type *)&__p;
      }
      else {
        long long v18 = (const std::string::value_type *)__p;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v19 = v24;
      }
      else {
        std::string::size_type v19 = v23;
      }
      std::string::append(&v25, v18, v19);
      if ((char)v24 < 0) {
        operator delete(__p);
      }
      sub_10004191C(&__p, "\r\nOK\r\n");
      if ((v24 & 0x80u) == 0) {
        size_t v20 = (const std::string::value_type *)&__p;
      }
      else {
        size_t v20 = (const std::string::value_type *)__p;
      }
      if ((v24 & 0x80u) == 0) {
        std::string::size_type v21 = v24;
      }
      else {
        std::string::size_type v21 = v23;
      }
      std::string::append(&v25, v20, v21);
      if ((char)v24 < 0) {
        operator delete(__p);
      }
      *a2 = v25;
      memset(&v25, 0, sizeof(v25));
      break;
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1005DCE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005DCE78(void *a1)
{
  *(void *)&double result = 0x200000005;
  a1[1] = 0x200000005;
  *a1 = off_1009B9840;
  a1[3] = 0;
  a1[4] = 0;
  a1[2] = 0;
  return result;
}

uint64_t sub_1005DCEAC(uint64_t a1)
{
  *(void *)a1 = off_1009B9840;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DCEFC(uint64_t a1)
{
  *(void *)a1 = off_1009B9840;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

BOOL sub_1005DCF6C()
{
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B9D60);
  }
  return sub_10062EFF4((uint64_t)off_1009FB118) == 0;
}

void sub_1005DCFCC(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(char *)(a1 + 39) < 0)
  {
    if (*(void *)(a1 + 24)) {
      goto LABEL_3;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
LABEL_3:
    sub_10004191C(&v23, "\r\n");
    int v4 = std::string::append(&v23, "+CIMI: ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v24.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v24.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    int v6 = *(char *)(a1 + 39);
    if (v6 >= 0) {
      uint64_t v7 = (const std::string::value_type *)(a1 + 16);
    }
    else {
      uint64_t v7 = *(const std::string::value_type **)(a1 + 16);
    }
    if (v6 >= 0) {
      std::string::size_type v8 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      std::string::size_type v8 = *(void *)(a1 + 24);
    }
    int v9 = std::string::append(&v24, v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_10004191C(v21, "\r\n");
    if ((v22 & 0x80u) == 0) {
      std::string::size_type v11 = v21;
    }
    else {
      std::string::size_type v11 = (void **)v21[0];
    }
    if ((v22 & 0x80u) == 0) {
      std::string::size_type v12 = v22;
    }
    else {
      std::string::size_type v12 = (std::string::size_type)v21[1];
    }
    std::string::size_type v13 = std::string::append(&v25, (const std::string::value_type *)v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    sub_10004191C(__p, "\r\nOK\r\n");
    if ((v20 & 0x80u) == 0) {
      int v15 = __p;
    }
    else {
      int v15 = (void **)__p[0];
    }
    if ((v20 & 0x80u) == 0) {
      std::string::size_type v16 = v20;
    }
    else {
      std::string::size_type v16 = (std::string::size_type)__p[1];
    }
    std::string::size_type v17 = std::string::append(&v26, (const std::string::value_type *)v15, v16);
    long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v17->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    if ((char)v20 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v26.__r_.__value_.__l.__data_);
    }
    if ((char)v22 < 0) {
      operator delete(v21[0]);
    }
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v25.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v23.__r_.__value_.__l.__data_);
    }
    return;
  }

  sub_10004191C(a2, "\r\nERROR\r\n");
}

void sub_1005DD1A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DD23C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = 7;
  *(_DWORD *)(result + 12) = a2;
  *(void *)double result = off_1009B9870;
  return result;
}

void sub_1005DD268()
{
}

uint64_t sub_1005DD27C()
{
  return 1;
}

void sub_1005DD284(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
      sub_10004191C(&v26, "\r\n");
      int32x2_t v3 = std::string::append(&v26, "+CREG: 1");
      long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v4;
      v3->__r_.__value_.__l.__size_ = 0;
      v3->__r_.__value_.__r.__words[2] = 0;
      v3->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(&v23, "\r\n");
      if ((v25 & 0x80u) == 0) {
        long long v5 = (const std::string::value_type *)&v23;
      }
      else {
        long long v5 = (const std::string::value_type *)v23;
      }
      if ((v25 & 0x80u) == 0) {
        std::string::size_type v6 = v25;
      }
      else {
        std::string::size_type v6 = v24;
      }
      uint64_t v7 = std::string::append(&v27, v5, v6);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(&__p, "\r\nOK\r\n");
      if ((v22 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v22 & 0x80u) == 0) {
        std::string::size_type v10 = v22;
      }
      else {
        std::string::size_type v10 = v21;
      }
      goto LABEL_27;
    case 1:
      sub_10004191C(&v26, "\r\n");
      std::string::size_type v12 = std::string::append(&v26, "+CREG: 1,1");
      long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(&v23, "\r\n");
      if ((v25 & 0x80u) == 0) {
        long long v14 = (const std::string::value_type *)&v23;
      }
      else {
        long long v14 = (const std::string::value_type *)v23;
      }
      if ((v25 & 0x80u) == 0) {
        std::string::size_type v15 = v25;
      }
      else {
        std::string::size_type v15 = v24;
      }
      std::string::size_type v16 = std::string::append(&v27, v14, v15);
      long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
      v28.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
      v16->__r_.__value_.__l.__size_ = 0;
      v16->__r_.__value_.__r.__words[2] = 0;
      v16->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(&__p, "\r\nOK\r\n");
      if ((v22 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v22 & 0x80u) == 0) {
        std::string::size_type v10 = v22;
      }
      else {
        std::string::size_type v10 = v21;
      }
LABEL_27:
      long long v18 = std::string::append(&v28, p_p, v10);
      long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
      a2[2] = *((void *)&v18->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v19;
      v18->__r_.__value_.__l.__size_ = 0;
      v18->__r_.__value_.__r.__words[2] = 0;
      v18->__r_.__value_.__r.__words[0] = 0;
      if ((char)v22 < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v28.__r_.__value_.__l.__data_);
      }
      if ((char)v25 < 0) {
        operator delete(v23);
      }
      if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v27.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v26.__r_.__value_.__l.__data_);
      }
      return;
    case 2:
      std::string::size_type v11 = "\r\nOK\r\n";
      goto LABEL_39;
    default:
      std::string::size_type v11 = "\r\nERROR\r\n";
LABEL_39:
      sub_10004191C(a2, v11);
      return;
  }
}

void sub_1005DD4EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DD58C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = 8;
  *(_DWORD *)(result + 12) = a2;
  *(void *)double result = off_1009B98A0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_1005DD5BC(uint64_t a1)
{
  *(void *)a1 = off_1009B98A0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DD60C(uint64_t a1)
{
  *(void *)a1 = off_1009B98A0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

BOOL sub_1005DD67C(uint64_t a1)
{
  memset(__p, 0, sizeof(__p));
  sub_10004191C(&__p[1], "");
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B9D60);
  }
  int v2 = sub_10062F044((uint64_t)off_1009FB118);
  if (!v2)
  {
    if (SHIBYTE(__p[3]) < 0)
    {
      sub_10003B098(&v5, __p[1], (unint64_t)__p[2]);
    }
    else
    {
      long long v5 = *(_OWORD *)&__p[1];
      std::string::size_type v6 = __p[3];
    }
    int32x2_t v3 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v3);
    }
    *(_OWORD *)int32x2_t v3 = v5;
    *(void *)(a1 + 32) = v6;
  }
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  return v2 == 0;
}

void sub_1005DD770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005DD790@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  std::string::size_type v6 = sub_10004191C((void *)a3, "\r\nERROR\r\n");
  switch(*(_DWORD *)(a1 + 12))
  {
    case 0:
    case 3:
      sub_10004191C(&v33, "\r\nERROR\r\n");
      goto LABEL_40;
    case 1:
      uint64_t v8 = sub_1005DB474((uint64_t)v6, a2);
      sub_10004191C(&v30, "\r\n");
      int v9 = std::string::append(&v30, "+COPS: 0,0,");
      long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      sub_1002E53B8(v8, (const char *)(a1 + 16), &v29);
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v11 = &v29;
      }
      else {
        std::string::size_type v11 = (std::string *)v29.__r_.__value_.__r.__words[0];
      }
      if ((v29.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(v29.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = v29.__r_.__value_.__l.__size_;
      }
      long long v13 = std::string::append(&v31, (const std::string::value_type *)v11, size);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(v27, "\r\n");
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v15 = v27;
      }
      else {
        std::string::size_type v15 = (void **)v27[0];
      }
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v16 = v28;
      }
      else {
        std::string::size_type v16 = (std::string::size_type)v27[1];
      }
      long long v17 = std::string::append(&v32, (const std::string::value_type *)v15, v16);
      long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(__p, "\r\nOK\r\n");
      if ((v26 & 0x80u) == 0) {
        long long v19 = __p;
      }
      else {
        long long v19 = (void **)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v20 = v26;
      }
      else {
        std::string::size_type v20 = (std::string::size_type)__p[1];
      }
      std::string::size_type v21 = std::string::append(&v33, (const std::string::value_type *)v19, v20);
      std::string::size_type v22 = v21->__r_.__value_.__r.__words[0];
      v34[0] = v21->__r_.__value_.__l.__size_;
      *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v21->__r_.__value_.__r.__words[1] + 7);
      char v23 = HIBYTE(v21->__r_.__value_.__r.__words[2]);
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      uint64_t v24 = v34[0];
      *(void *)a3 = v22;
      *(void *)(a3 + 8) = v24;
      *(void *)(a3 + 15) = *(void *)((char *)v34 + 7);
      *(unsigned char *)(a3 + 23) = v23;
      if ((char)v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((char)v28 < 0) {
        operator delete(v27[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
      }
      break;
    case 2:
      sub_10004191C(&v33, "\r\nOK\r\n");
LABEL_40:
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      double result = *(double *)&v33.__r_.__value_.__l.__data_;
      *(std::string *)a3 = v33;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1005DDA8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v46 - 73) < 0) {
    operator delete(*(void **)(v46 - 96));
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (*(char *)(v45 + 23) < 0) {
    operator delete(*(void **)v45);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005DDB70(void *a1)
{
  *(void *)&double result = 0x200000009;
  a1[1] = 0x200000009;
  *a1 = off_1009B98D0;
  return result;
}

void sub_1005DDBA0()
{
}

uint64_t sub_1005DDBB4()
{
  return 1;
}

void sub_1005DDBBC(std::string *a1@<X8>)
{
  sub_10004191C(&v15, "\r\n");
  int v2 = std::string::append(&v15, "+CPAS: READY");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v13, "\r\n");
  if ((v14 & 0x80u) == 0) {
    long long v4 = v13;
  }
  else {
    long long v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  std::string::size_type v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  long long v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1005DDD04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005DDD80(void *a1)
{
  *(void *)&double result = 0x20000000ALL;
  a1[1] = 0x20000000ALL;
  *a1 = off_1009B9900;
  return result;
}

void sub_1005DDDB0()
{
}

uint64_t sub_1005DDDC4()
{
  return 1;
}

void sub_1005DDDCC(std::string *a1@<X8>)
{
  sub_10004191C(&v15, "\r\n");
  int v2 = std::string::append(&v15, "+CPIN: READY");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v13, "\r\n");
  if ((v14 & 0x80u) == 0) {
    long long v4 = v13;
  }
  else {
    long long v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  std::string::size_type v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  long long v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1005DDF14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1005DDF90(void *a1)
{
  a1[1] = 0x20000000BLL;
  *a1 = off_1009B9930;
  sub_10004191C(a1 + 2, "0,0");
  return a1;
}

uint64_t sub_1005DDFE8(uint64_t a1)
{
  *(void *)a1 = off_1009B9930;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DE038(uint64_t a1)
{
  *(void *)a1 = off_1009B9930;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

uint64_t sub_1005DE0A8(uint64_t a1)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  sub_1000419CC((uint64_t)v9);
  __int16 v8 = 0;
  uint64_t v2 = sub_10003FFD4();
  (*(void (**)(uint64_t, char *, __int16 *))(*(void *)v2 + 96))(v2, (char *)&v8 + 1, &v8);
  uint64_t v3 = std::ostream::operator<<();
  sub_10003AB28(v3);
  std::ostream::operator<<();
  std::stringbuf::str();
  long long v4 = (void **)(a1 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*v4);
  }
  *(_OWORD *)long long v4 = v6;
  *(void *)(a1 + 32) = v7;
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return 1;
}

void sub_1005DE274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10027E318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005DE28C(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10004191C(&v25, "\r\n");
  long long v4 = std::string::append(&v25, "+CBC: ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v26.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v26.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  __int16 v8 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v7 = a1 + 16;
  long long v6 = v8;
  int v9 = *(char *)(v7 + 23);
  if (v9 >= 0) {
    long long v10 = (const std::string::value_type *)v7;
  }
  else {
    long long v10 = v6;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v7 + 8);
  }
  long long v12 = std::string::append(&v26, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v27.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v23, "\r\n");
  if ((v24 & 0x80u) == 0) {
    long long v14 = v23;
  }
  else {
    long long v14 = (void **)v23[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v15 = v24;
  }
  else {
    std::string::size_type v15 = (std::string::size_type)v23[1];
  }
  long long v16 = std::string::append(&v27, (const std::string::value_type *)v14, v15);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v22 & 0x80u) == 0) {
    long long v18 = __p;
  }
  else {
    long long v18 = (void **)__p[0];
  }
  if ((v22 & 0x80u) == 0) {
    std::string::size_type v19 = v22;
  }
  else {
    std::string::size_type v19 = (std::string::size_type)__p[1];
  }
  long long v20 = std::string::append(&v28, (const std::string::value_type *)v18, v19);
  *a2 = *v20;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  if ((char)v22 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if ((char)v24 < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
}

void sub_1005DE424(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1005DE4B8(void *a1)
{
  a1[1] = 0x20000000CLL;
  *a1 = off_1009B9960;
  sub_10004191C(a1 + 2, "0");
  return a1;
}

uint64_t sub_1005DE510(uint64_t a1)
{
  *(void *)a1 = off_1009B9960;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DE560(uint64_t a1)
{
  *(void *)a1 = off_1009B9960;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

uint64_t sub_1005DE5D0(uint64_t a1)
{
  int v7 = 0;
  char v6 = 0;
  *(_WORD *)__s = 0;
  if (qword_1009FB120 != -1) {
    dispatch_once(&qword_1009FB120, &stru_1009B9D60);
  }
  sub_10062F094((uint64_t)off_1009FB118);
  int v7 = 31;
  sprintf(__s, "%2d", 31);
  uint64_t v2 = (void *)(a1 + 16);
  std::string::assign((std::string *)(a1 + 16), __s);
  uint64_t v3 = qword_100A19EF0;
  if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v2 = (void *)*v2;
    }
    *(_DWORD *)buf = 67109634;
    int v9 = v7;
    __int16 v10 = 2082;
    std::string::size_type v11 = __s;
    __int16 v12 = 2082;
    long long v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Reporting signal quality %i (== %{public}s == %{public}s)", buf, 0x1Cu);
  }
  return 1;
}

void sub_1005DE748(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10004191C(&v27, "\r\n");
  long long v4 = std::string::append(&v27, "+CSQ: ");
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v28.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  __int16 v8 = *(const std::string::value_type **)(a1 + 16);
  uint64_t v7 = a1 + 16;
  char v6 = v8;
  int v9 = *(char *)(v7 + 23);
  if (v9 >= 0) {
    __int16 v10 = (const std::string::value_type *)v7;
  }
  else {
    __int16 v10 = v6;
  }
  if (v9 >= 0) {
    std::string::size_type v11 = *(unsigned __int8 *)(v7 + 23);
  }
  else {
    std::string::size_type v11 = *(void *)(v7 + 8);
  }
  __int16 v12 = std::string::append(&v28, v10, v11);
  long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  long long v14 = std::string::append(&v29, ",99");
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v30.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v25, "\r\n");
  if ((v26 & 0x80u) == 0) {
    long long v16 = v25;
  }
  else {
    long long v16 = (void **)v25[0];
  }
  if ((v26 & 0x80u) == 0) {
    std::string::size_type v17 = v26;
  }
  else {
    std::string::size_type v17 = (std::string::size_type)v25[1];
  }
  long long v18 = std::string::append(&v30, (const std::string::value_type *)v16, v17);
  long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v18->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v19;
  v18->__r_.__value_.__l.__size_ = 0;
  v18->__r_.__value_.__r.__words[2] = 0;
  v18->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v24 & 0x80u) == 0) {
    long long v20 = __p;
  }
  else {
    long long v20 = (void **)__p[0];
  }
  if ((v24 & 0x80u) == 0) {
    std::string::size_type v21 = v24;
  }
  else {
    std::string::size_type v21 = (std::string::size_type)__p[1];
  }
  unsigned __int8 v22 = std::string::append(&v31, (const std::string::value_type *)v20, v21);
  *a2 = *v22;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if ((char)v24 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if ((char)v26 < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void sub_1005DE924(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 41) < 0) {
    operator delete(*(void **)(v40 - 64));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v40 - 73) < 0) {
    operator delete(*(void **)(v40 - 96));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DE9D0(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  *(_DWORD *)(a1 + 8) = 13;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)a1 = off_1009B9A80;
  *(void *)(a1 + 16) = a2;
  *(void *)(a1 + 24) = 0;
  uint64_t v6 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, 2) && *(_DWORD *)(a1 + 12) == 2)
  {
    uint64_t v7 = 0;
    if (*a4 == 34) {
      ++a4;
    }
    while (strncmp(a4, *(const char **)&dword_1009B9980[v7 + 2], 2uLL))
    {
      v7 += 4;
      if (v7 == 60) {
        return a1;
      }
    }
    *(_DWORD *)(a1 + 24) = dword_1009B9980[v7];
  }
  return a1;
}

void sub_1005DEAB8()
{
}

uint64_t sub_1005DEACC(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, 2);
  if (result)
  {
    uint64_t result = 1;
    switch(*(_DWORD *)(a1 + 12))
    {
      case 0:
        return result;
      case 1:
        *(_DWORD *)(a1 + 24) = sub_1005E36FC(a2, *(void *)(a1 + 16));
        *(_DWORD *)(a1 + 28) = sub_1005E3734((uint64_t)a2, *(void *)(a1 + 16));
        goto LABEL_5;
      case 2:
        if (sub_1005E357C((uint64_t)a2, *(void *)(a1 + 16), *(_DWORD *)(a1 + 24)))
        {
LABEL_5:
          uint64_t result = 1;
        }
        else
        {
          *(_DWORD *)(a1 + 24) = 0;
LABEL_7:
          uint64_t result = 0;
        }
        break;
      default:
        goto LABEL_7;
    }
  }
  return result;
}

void sub_1005DEBA8(_DWORD *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v4 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, 2))
  {
    memset(&v15, 0, sizeof(v15));
    sub_10004191C(&v15, "\r\n");
    std::string::append(&v15, "+CPBS: ");
    long long v5 = "\r\nERROR\r\n";
    uint64_t v6 = "(\"SM\",\"ON\",\"ME\",\"DC\",\"MC\",\"RC\")";
    switch(a1[3])
    {
      case 0:
        goto LABEL_14;
      case 1:
        std::string::append(&v15, "\"");
        uint64_t v7 = 0;
        break;
      case 2:
        if (a1[6])
        {
          long long v5 = "\r\nOK\r\n";
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
            sub_1007821D0();
          }
          long long v5 = "\r\n+CME ERROR: 22\r\n";
        }
        goto LABEL_35;
      case 3:
LABEL_35:
        sub_10004191C(a2, v5);
        goto LABEL_36;
      default:
        goto LABEL_15;
    }
    while (a1[6] != dword_1009B9980[v7])
    {
      v7 += 4;
      if (v7 == 60) {
        goto LABEL_13;
      }
    }
    std::string::append(&v15, *(const std::string::value_type **)&dword_1009B9980[v7 + 2]);
LABEL_13:
    std::string::append(&v15, "\",");
    int v17 = 0;
    *(void *)__str = 0;
    snprintf(__str, 0xCuLL, "%d", a1[7]);
    std::string::append(&v15, __str);
    std::string::append(&v15, ",");
    uint64_t v6 = __str;
    snprintf(__str, 0xCuLL, "%d", a1[7] + 100);
LABEL_14:
    std::string::append(&v15, v6);
LABEL_15:
    sub_10004191C(&__p, "\r\n");
    if ((v14 & 0x80u) == 0) {
      p_p = (const std::string::value_type *)&__p;
    }
    else {
      p_p = (const std::string::value_type *)__p;
    }
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v9 = v14;
    }
    else {
      std::string::size_type v9 = v13;
    }
    std::string::append(&v15, p_p, v9);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
    sub_10004191C(&__p, "\r\nOK\r\n");
    if ((v14 & 0x80u) == 0) {
      __int16 v10 = (const std::string::value_type *)&__p;
    }
    else {
      __int16 v10 = (const std::string::value_type *)__p;
    }
    if ((v14 & 0x80u) == 0) {
      std::string::size_type v11 = v14;
    }
    else {
      std::string::size_type v11 = v13;
    }
    std::string::append(&v15, v10, v11);
    if ((char)v14 < 0) {
      operator delete(__p);
    }
    *a2 = v15;
    memset(&v15, 0, sizeof(v15));
LABEL_36:
    if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v15.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_10004191C(a2, "\r\nERROR\r\n");
  }
}

void sub_1005DEEAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005DEF08(uint64_t a1, uint64_t a2, int a3, const char *a4)
{
  *(_DWORD *)(a1 + 8) = 14;
  *(_DWORD *)(a1 + 12) = a3;
  *(void *)a1 = off_1009B9AB0;
  *(void *)(a1 + 16) = a2;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v6 = (unsigned int *)(a1 + 24);
  *(_OWORD *)(a1 + 40) = 0u;
  *(void *)(a1 + 56) = 0;
  uint64_t v7 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, 2) & 1) != 0
    && *(_DWORD *)(a1 + 12) == 2)
  {
    __int16 v14 = 0;
    *(void *)__dst = 0;
    strlcpy(__dst, a4, 0xAuLL);
    HIBYTE(v14) = 0;
    __int16 v8 = strtok(__dst, ",");
    if (v8)
    {
      unsigned int *v6 = atoi(v8);
      std::string::size_type v9 = strtok(0, ",");
      if (!v9)
      {
        unsigned int v11 = *v6;
        goto LABEL_8;
      }
      unsigned int v10 = atoi(v9);
      unsigned int v11 = *(_DWORD *)(a1 + 24);
      *(_DWORD *)(a1 + 28) = v10;
      if (v10 < v11)
      {
        unsigned int *v6 = v10;
LABEL_8:
        *(_DWORD *)(a1 + 28) = v11;
      }
    }
  }
  return a1;
}

void sub_1005DF054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 40);
  sub_1005E2360(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_1005DF078(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, 2)) {
    return 0;
  }
  int v5 = *(_DWORD *)(a1 + 12);
  if (v5 != 2)
  {
    if (!v5)
    {
      uint64_t v6 = *(void *)(a1 + 16);
      return sub_1005E3880(a2, v6, (_DWORD *)(a1 + 24), (_DWORD *)(a1 + 28), (_DWORD *)(a1 + 32), (_DWORD *)(a1 + 36));
    }
    return 0;
  }
  unsigned int v8 = *(_DWORD *)(a1 + 24);
  unsigned int v9 = *(_DWORD *)(a1 + 28);
  if (v9 - v8 > 0x32) {
    return 0;
  }
  uint64_t v10 = *(void *)(a1 + 16);

  return sub_1005E3A04(a2, v10, v8, v9, (uint64_t *)(a1 + 40));
}

void *sub_1005DF14C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, 2))
  {
    uint64_t v62 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v58 = 0u;
    long long v59 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v54 = 0u;
    long long v55 = 0u;
    long long v52 = 0u;
    long long v53 = 0u;
    long long v50 = 0u;
    long long v51 = 0u;
    memset(v49, 0, sizeof(v49));
    uint64_t v7 = sub_1000419CC((uint64_t)v49);
    switch(*(_DWORD *)(a1 + 12))
    {
      case 0:
        if (*(_DWORD *)(a1 + 28))
        {
          sub_10004191C(v45, "\r\n");
          uint64_t v8 = sub_10003AB28((uint64_t)v49);
          sub_10003AB28(v8);
          uint64_t v9 = std::ostream::operator<<();
          sub_10003AB28(v9);
          uint64_t v10 = std::ostream::operator<<();
          sub_10003AB28(v10);
          uint64_t v11 = std::ostream::operator<<();
          sub_10003AB28(v11);
          uint64_t v12 = std::ostream::operator<<();
        }
        else
        {
          sub_10004191C(v45, "\r\n");
          uint64_t v42 = sub_10003AB28((uint64_t)v49);
          uint64_t v12 = sub_10003AB28(v42);
        }
        sub_10004191C(&__p, "\r\n");
        sub_10003AB28(v12);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v45[2]) < 0) {
          operator delete(v45[0]);
        }
        goto LABEL_133;
      case 1:
      case 3:
        goto LABEL_9;
      case 2:
        if ((*(_DWORD *)(a1 + 28) - *(_DWORD *)(a1 + 24)) > 0x32)
        {
LABEL_9:
          sub_10004191C(a3, "\r\nERROR\r\n");
          goto LABEL_136;
        }
        uint64_t v43 = sub_1005DB474(v7, a2);
        unsigned int v47 = 0;
        if (sub_10047FDE8(a2, (int *)&v47))
        {
          int v14 = sub_10047FC00(a2);
          unsigned int v15 = v47;
          if (v14)
          {
            unsigned int v15 = v47 - 2;
            v47 -= 2;
          }
          *(void *)(v43 + 16) = v15;
        }
        uint64_t v16 = *(void *)(a1 + 40);
        if (*(void *)(a1 + 48) != v16)
        {
          unint64_t v17 = 0;
          while (1)
          {
            uint64_t v46 = 0;
            memset(v45, 0, sizeof(v45));
            uint64_t v18 = v16 + 72 * v17;
            LODWORD(v45[0]) = *(_DWORD *)v18;
            long long v19 = (void **)(v18 + 8);
            if (*(char *)(v18 + 31) < 0)
            {
              sub_10003B098(&v45[1], *v19, *(void *)(v16 + 72 * v17 + 16));
            }
            else
            {
              long long v20 = *(_OWORD *)v19;
              v45[3] = *(void **)(v18 + 24);
              *(_OWORD *)&v45[1] = v20;
            }
            uint64_t v21 = v16 + 72 * v17;
            LODWORD(v45[4]) = *(_DWORD *)(v21 + 32);
            unsigned __int8 v22 = (void **)(v21 + 40);
            if (*(char *)(v18 + 63) < 0)
            {
              sub_10003B098(&v45[5], *v22, *(void *)(v16 + 72 * v17 + 48));
            }
            else
            {
              long long v23 = *(_OWORD *)v22;
              v45[7] = v22[2];
              *(_OWORD *)&v45[5] = v23;
            }
            LODWORD(v46) = *(_DWORD *)(v16 + 72 * v17 + 64);
            sub_10004191C(&__p, "\r\n");
            uint64_t v24 = sub_10003AB28((uint64_t)v49);
            sub_10003AB28(v24);
            uint64_t v25 = std::ostream::operator<<();
            sub_10003AB28(v25);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (LODWORD(v45[4]) == 2)
            {
              sub_10003AB28((uint64_t)v49);
              goto LABEL_90;
            }
            memset(&__p, 0, sizeof(__p));
            if (SHIBYTE(v45[3]) < 0) {
              sub_10003B098(&__p, v45[1], (unint64_t)v45[2]);
            }
            else {
              std::string __p = *(std::string *)&v45[1];
            }
            for (unsigned int i = 0; ; unsigned int i = v27 + 1)
            {
              uint64_t v27 = i;
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                break;
              }
              std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
              p_p = &__p;
              if (i >= HIBYTE(__p.__r_.__value_.__r.__words[2])) {
                goto LABEL_80;
              }
LABEL_34:
              __darwin_ct_rune_t v30 = p_p->__r_.__value_.__s.__data_[i];
              if (p_p->__r_.__value_.__s.__data_[i] < 0) {
                __uint32_t v31 = __maskrune(p_p->__r_.__value_.__s.__data_[i], 0x100uLL);
              }
              else {
                __uint32_t v31 = _DefaultRuneLocale.__runetype[p_p->__r_.__value_.__s.__data_[i]] & 0x100;
              }
              if (v31)
              {
                unsigned int v32 = __tolower(v30);
                if (v32 > 0x63)
                {
                  if (v32 > 0x66)
                  {
                    if (v32 > 0x69)
                    {
                      if (v32 > 0x6C)
                      {
                        if (v32 > 0x6F)
                        {
                          if (v32 > 0x73)
                          {
                            if (v32 > 0x76)
                            {
                              if (v32 > 0x7A) {
                                continue;
                              }
                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                uint64_t v33 = &__p;
                              }
                              else {
                                uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
                              }
                              char v34 = 57;
                            }
                            else
                            {
                              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                                uint64_t v33 = &__p;
                              }
                              else {
                                uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
                              }
                              char v34 = 56;
                            }
                          }
                          else
                          {
                            if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                              uint64_t v33 = &__p;
                            }
                            else {
                              uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
                            }
                            char v34 = 55;
                          }
                        }
                        else
                        {
                          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                            uint64_t v33 = &__p;
                          }
                          else {
                            uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
                          }
                          char v34 = 54;
                        }
                      }
                      else
                      {
                        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                          uint64_t v33 = &__p;
                        }
                        else {
                          uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
                        }
                        char v34 = 53;
                      }
                    }
                    else
                    {
                      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                        uint64_t v33 = &__p;
                      }
                      else {
                        uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
                      }
                      char v34 = 52;
                    }
                  }
                  else
                  {
                    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      uint64_t v33 = &__p;
                    }
                    else {
                      uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
                    }
                    char v34 = 51;
                  }
                }
                else
                {
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                    uint64_t v33 = &__p;
                  }
                  else {
                    uint64_t v33 = (std::string *)__p.__r_.__value_.__r.__words[0];
                  }
                  char v34 = 50;
                }
                v33->__r_.__value_.__s.__data_[v27] = v34;
              }
            }
            std::string::size_type size = __p.__r_.__value_.__l.__size_;
            p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
            if (__p.__r_.__value_.__l.__size_ > i) {
              goto LABEL_34;
            }
LABEL_80:
            if (size)
            {
              std::string::size_type v35 = 0;
              while (memchr("1234567890#*+,", p_p->__r_.__value_.__s.__data_[v35], 0xEuLL))
              {
                if (size == ++v35) {
                  goto LABEL_84;
                }
              }
              while (v35 != -1)
              {
                std::string::erase(&__p, v35, 1uLL);
                uint64_t v40 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__p
                    : (std::string *)__p.__r_.__value_.__r.__words[0];
                std::string::size_type v41 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? HIBYTE(__p.__r_.__value_.__r.__words[2])
                    : __p.__r_.__value_.__l.__size_;
                if (!v41) {
                  break;
                }
                std::string::size_type v35 = 0;
                while (memchr("1234567890#*+,", v40->__r_.__value_.__s.__data_[v35], 0xEuLL))
                {
                  if (v41 == ++v35) {
                    goto LABEL_84;
                  }
                }
              }
            }
LABEL_84:
            if (!sub_10047F9F0(a2))
            {
              std::string::size_type v36 = std::string::find(&__p, 44, 0);
              std::string::basic_string(&v44, &__p, 0, v36, (std::allocator<char> *)v63);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              std::string __p = v44;
            }
            sub_10003AB28((uint64_t)v49);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
LABEL_90:
            sub_10003AB28((uint64_t)v49);
            if (LODWORD(v45[4]) <= 2) {
              sub_10003AB28((uint64_t)v49);
            }
            memset(&__p, 0, sizeof(__p));
            if (SHIBYTE(v45[7]) < 0) {
              sub_10003B098(&__p, v45[5], (unint64_t)v45[6]);
            }
            else {
              std::string __p = *(std::string *)&v45[5];
            }
            if (sub_10047FC00(a2) && (v46 - 1) < 3) {
              std::string::append(&__p, off_1009B9DD8[(int)v46 - 1]);
            }
            if (*(unsigned char *)(v43 + 8))
            {
              uint64_t v37 = sub_10003AB28((uint64_t)v49);
              sub_1002E53B8(v43, (const char *)&__p, &v44);
              sub_10003AB28(v37);
            }
            else
            {
              uint64_t v38 = sub_10003AB28((uint64_t)v49);
              sub_1002E53B8(v43, (const char *)&__p, &v44);
              uint64_t v39 = sub_10003AB28(v38);
              sub_10003AB28(v39);
            }
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v44.__r_.__value_.__l.__data_);
            }
            sub_10004191C(&v44, "\r\n");
            sub_10003AB28((uint64_t)v49);
            if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v44.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v45[7]) < 0) {
              operator delete(v45[5]);
            }
            if (SHIBYTE(v45[3]) < 0) {
              operator delete(v45[1]);
            }
            ++v17;
            uint64_t v16 = *(void *)(a1 + 40);
            if (v17 >= 0x8E38E38E38E38E39 * ((*(void *)(a1 + 48) - v16) >> 3)) {
              goto LABEL_132;
            }
          }
        }
        if (!v43) {
          goto LABEL_133;
        }
LABEL_132:
        (*(void (**)(uint64_t))(*(void *)v43 + 8))(v43);
LABEL_133:
        sub_10004191C(v45, "\r\nOK\r\n");
        sub_10003AB28((uint64_t)v49);
        if (SHIBYTE(v45[2]) < 0) {
          operator delete(v45[0]);
        }
        std::stringbuf::str();
LABEL_136:
        if (SHIBYTE(v51) < 0) {
          operator delete(*((void **)&v50 + 1));
        }
        std::streambuf::~streambuf();
        std::ostream::~ostream();
        uint64_t result = (void *)std::ios::~ios();
        break;
      default:
        goto LABEL_133;
    }
  }
  else
  {
    return sub_10004191C(a3, "\r\nERROR\r\n");
  }
  return result;
}

void sub_1005DFBF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_10027E318((uint64_t)&a43);
  _Unwind_Resume(a1);
}

uint64_t sub_1005DFCFC(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1005DFD40(uint64_t result, int a2)
{
  *(_DWORD *)(result + 8) = 15;
  *(_DWORD *)(result + 12) = a2;
  *(void *)uint64_t result = off_1009B9AE0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t sub_1005DFD70(uint64_t a1)
{
  *(void *)a1 = off_1009B9AE0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1005DFDC0(uint64_t a1)
{
  *(void *)a1 = off_1009B9AE0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

uint64_t sub_1005DFE30(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 40))(v2, a1 + 16, 1);
  return 1;
}

void sub_1005DFE84(uint64_t a1@<X0>, void *a2@<X8>)
{
  switch(*(_DWORD *)(a1 + 12))
  {
    case 1:
      sub_10004191C(&v29, "\r\n");
      int v5 = std::string::append(&v29, "+CCLK: \"");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      v30.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      uint64_t v9 = *(const std::string::value_type **)(a1 + 16);
      uint64_t v8 = a1 + 16;
      uint64_t v7 = v9;
      int v10 = *(char *)(v8 + 23);
      if (v10 >= 0) {
        uint64_t v11 = (const std::string::value_type *)v8;
      }
      else {
        uint64_t v11 = v7;
      }
      if (v10 >= 0) {
        std::string::size_type v12 = *(unsigned __int8 *)(v8 + 23);
      }
      else {
        std::string::size_type v12 = *(void *)(v8 + 8);
      }
      std::string::size_type v13 = std::string::append(&v30, v11, v12);
      long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      unsigned int v15 = std::string::append(&v31, "\"");
      long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(v27, "\r\n");
      if ((v28 & 0x80u) == 0) {
        unint64_t v17 = v27;
      }
      else {
        unint64_t v17 = (void **)v27[0];
      }
      if ((v28 & 0x80u) == 0) {
        std::string::size_type v18 = v28;
      }
      else {
        std::string::size_type v18 = (std::string::size_type)v27[1];
      }
      long long v19 = std::string::append(&v32, (const std::string::value_type *)v17, v18);
      long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(__p, "\r\nOK\r\n");
      if ((v26 & 0x80u) == 0) {
        uint64_t v21 = __p;
      }
      else {
        uint64_t v21 = (void **)__p[0];
      }
      if ((v26 & 0x80u) == 0) {
        std::string::size_type v22 = v26;
      }
      else {
        std::string::size_type v22 = (std::string::size_type)__p[1];
      }
      long long v23 = std::string::append(&v33, (const std::string::value_type *)v21, v22);
      long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      a2[2] = *((void *)&v23->__r_.__value_.__l + 2);
      *(_OWORD *)a2 = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      if ((char)v26 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v33.__r_.__value_.__l.__data_);
      }
      if ((char)v28 < 0) {
        operator delete(v27[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v32.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v29.__r_.__value_.__l.__data_);
      }
      break;
    case 2:
      uint64_t v3 = "\r\nOK\r\n";
      goto LABEL_37;
    default:
      uint64_t v3 = "\r\nERROR\r\n";
LABEL_37:
      sub_10004191C(a2, v3);
      break;
  }
}

void sub_1005E00C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v40 - 41) < 0) {
    operator delete(*(void **)(v40 - 64));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v40 - 73) < 0) {
    operator delete(*(void **)(v40 - 96));
  }
  if (a40 < 0) {
    operator delete(a35);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005E0184(void *a1)
{
  *(void *)&double result = 0x200000010;
  a1[1] = 0x200000010;
  *a1 = off_1009B9B10;
  return result;
}

void sub_1005E01B4()
{
}

uint64_t sub_1005E01C8()
{
  return 1;
}

void *sub_1005E01D0@<X0>(void *a1@<X8>)
{
  return sub_10004191C(a1, "\r\nOK\r\n");
}

double sub_1005E01E0(void *a1)
{
  *(void *)&double result = 0x200000011;
  a1[1] = 0x200000011;
  *a1 = off_1009B9B40;
  return result;
}

void sub_1005E0210()
{
}

uint64_t sub_1005E0224()
{
  return 1;
}

void sub_1005E022C(std::string *a1@<X8>)
{
  sub_10004191C(&v15, "\r\n");
  uint64_t v2 = std::string::append(&v15, "+CGATT: 0");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v13, "\r\n");
  if ((v14 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  long long v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  int v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1005E0374(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005E03F0(void *a1)
{
  *(void *)&double result = 0x200000012;
  a1[1] = 0x200000012;
  *a1 = off_1009B9B70;
  return result;
}

void sub_1005E0420()
{
}

uint64_t sub_1005E0434()
{
  return 1;
}

void sub_1005E043C(std::string *a1@<X8>)
{
  sub_10004191C(&v15, "\r\n");
  uint64_t v2 = std::string::append(&v15, "+VTS: (\"0\",\"1\",\"2\",\"3\",\"4\",\"5\",\"6\",\"7\",\"8\",\"9\",\"*\",\"#\"),(0 - 600)");
  long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
  v16.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v16.__r_.__value_.__l.__data_ = v3;
  v2->__r_.__value_.__l.__size_ = 0;
  v2->__r_.__value_.__r.__words[2] = 0;
  v2->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(v13, "\r\n");
  if ((v14 & 0x80u) == 0) {
    uint64_t v4 = v13;
  }
  else {
    uint64_t v4 = (void **)v13[0];
  }
  if ((v14 & 0x80u) == 0) {
    std::string::size_type v5 = v14;
  }
  else {
    std::string::size_type v5 = (std::string::size_type)v13[1];
  }
  long long v6 = std::string::append(&v16, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v17.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v17.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  sub_10004191C(__p, "\r\nOK\r\n");
  if ((v12 & 0x80u) == 0) {
    uint64_t v8 = __p;
  }
  else {
    uint64_t v8 = (void **)__p[0];
  }
  if ((v12 & 0x80u) == 0) {
    std::string::size_type v9 = v12;
  }
  else {
    std::string::size_type v9 = (std::string::size_type)__p[1];
  }
  int v10 = std::string::append(&v17, (const std::string::value_type *)v8, v9);
  *a1 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if ((char)v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
  if ((char)v14 < 0) {
    operator delete(v13[0]);
  }
  if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v16.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
}

void sub_1005E0584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

double sub_1005E0600(void *a1)
{
  *(void *)&double result = 0x200000013;
  a1[1] = 0x200000013;
  *a1 = off_1009B9BA0;
  return result;
}

void sub_1005E0630()
{
}

uint64_t sub_1005E0644()
{
  return 1;
}

void *sub_1005E064C@<X0>(void *a1@<X8>)
{
  return sub_10004191C(a1, "\r\nOK\r\n");
}

uint64_t sub_1005E065C(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x200000014;
  *(void *)a1 = off_1009B9BD0;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 32) = 0;
  uint64_t v4 = (std::string *)(a1 + 32);
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  memset(v8, 0, sizeof(v8));
  *(unsigned char *)(a1 + 24) = 0;
  strlcpy((char *)v8, a2, 0x100uLL);
  std::string::size_type v5 = strtok((char *)v8, ",");
  if (v5)
  {
    std::string::assign(v4, v5);
    long long v6 = strtok(0, ",");
    if (v6)
    {
      *(_DWORD *)(a1 + 56) = atoi(v6);
      *(unsigned char *)(a1 + 24) = 1;
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR))
    {
      sub_10078226C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR))
  {
    sub_100782204();
  }
  return a1;
}

void sub_1005E07C8(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1005E07F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 24))
  {
    *(_WORD *)(*(void *)(a1 + 16) + 576) = 257;
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009B9D80);
    }
    sub_100454958(off_1009F7EE8, *(void *)(a1 + 16));
  }
  return 1;
}

void sub_1005E0868(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(int *)(a1 + 56) < 8) {
      goto LABEL_14;
    }
    if (qword_1009FB130 != -1) {
      dispatch_once(&qword_1009FB130, &stru_1009B9DA0);
    }
    if (sub_1002DDF8C(qword_1009FB128, *(void *)(a1 + 16)))
    {
      uint64_t v4 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "AT+APLSIRI response enabled", (uint8_t *)&buf, 2u);
      }
      sub_10004191C(&v17, "\r\n");
      std::string::size_type v5 = std::string::insert(&v17, 0, "\r\n+XAPL=iPhone,15");
      long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v6;
      v5->__r_.__value_.__l.__size_ = 0;
      v5->__r_.__value_.__r.__words[2] = 0;
      v5->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(&__p, "\r\nOK\r\n");
      if ((v16 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v16 & 0x80u) == 0) {
        std::string::size_type v8 = v16;
      }
      else {
        std::string::size_type v8 = v15;
      }
    }
    else
    {
LABEL_14:
      std::string::size_type v9 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "AT+APLSIRI response disabled", (uint8_t *)&buf, 2u);
      }
      sub_10004191C(&v17, "\r\n");
      int v10 = std::string::insert(&v17, 0, "\r\n+XAPL=iPhone,7");
      long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      buf.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      sub_10004191C(&__p, "\r\nOK\r\n");
      if ((v16 & 0x80u) == 0) {
        p_p = (const std::string::value_type *)&__p;
      }
      else {
        p_p = (const std::string::value_type *)__p;
      }
      if ((v16 & 0x80u) == 0) {
        std::string::size_type v8 = v16;
      }
      else {
        std::string::size_type v8 = v15;
      }
    }
    unsigned __int8 v12 = std::string::append(&buf, p_p, v8);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((char)v16 < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v17.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_10004191C(a2, "\r\nERROR\r\n");
  }
}

void sub_1005E0AC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005E0B1C(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x200000015;
  *(void *)a1 = off_1009B9C00;
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = 1;
  *(_DWORD *)(a1 + 28) = 0;
  memset(v11, 0, sizeof(v11));
  strlcpy((char *)v11, a2, 0x100uLL);
  uint64_t v4 = strtok((char *)v11, ",");
  if (v4)
  {
    int v5 = atoi(v4);
    long long v6 = strtok(0, ",");
    long long v7 = strtok(0, ",");
    if (v6 && v7)
    {
      while (*v6 - 49 < 5)
      {
        char v8 = *v7;
        uint64_t v9 = *(int *)(a1 + 28);
        *(_DWORD *)(a1 + 4 * v9 + 32) = (*v6 - 49) + 1;
        *(unsigned char *)(a1 + v9 + 288) = v8;
        ++*(_DWORD *)(a1 + 28);
        long long v6 = strtok(0, ",");
        long long v7 = strtok(0, ",");
        if (!v6 || !v7) {
          goto LABEL_13;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
        sub_1007823A4();
      }
    }
LABEL_13:
    if (v5 != *(_DWORD *)(a1 + 28))
    {
      *(unsigned char *)(a1 + 24) = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
        sub_10078233C();
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_1007822D4();
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL sub_1005E0D34(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v2 + 576))
  {
    if (!*(unsigned char *)(a1 + 24) || sub_100475E4C(v2, 0x80000u) == 4) {
      return 0;
    }
    if (*(int *)(a1 + 28) >= 1)
    {
      uint64_t v4 = 0;
      uint64_t v5 = a1 + 288;
      do
      {
        switch(*(_DWORD *)(v5 + 4 * v4 - 256))
        {
          case 1:
            sub_10047E170(*(void *)(a1 + 16), (10 * *(unsigned char *)(v5 + v4) + 42) & 0xFE);
            if (qword_1009F7EF0 != -1) {
              dispatch_once(&qword_1009F7EF0, &stru_1009B9D80);
            }
            sub_1004552FC((uint64_t)off_1009F7EE8, *(void *)(a1 + 16));
            goto LABEL_25;
          case 2:
            int v6 = *(unsigned __int8 *)(v5 + v4);
            if (v6 == 49)
            {
              sub_10047E310(*(void *)(a1 + 16), 1);
            }
            else if (v6 == 48)
            {
              sub_10047E310(*(void *)(a1 + 16), 0);
              if (qword_1009F7EF0 != -1) {
                dispatch_once(&qword_1009F7EF0, &stru_1009B9D80);
              }
              sub_1004550AC((uint64_t)off_1009F7EE8, *(void *)(a1 + 16));
            }
            goto LABEL_25;
          case 3:
            uint64_t v7 = qword_100A19EF0;
            if (!os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO)) {
              goto LABEL_25;
            }
            __int16 v15 = 0;
            char v8 = (uint8_t *)&v15;
            uint64_t v9 = v7;
            int v10 = "A65 rebooting";
            break;
          case 4:
            uint64_t v11 = qword_100A19EF0;
            if (!os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO)) {
              goto LABEL_25;
            }
            __int16 v14 = 0;
            char v8 = (uint8_t *)&v14;
            uint64_t v9 = v11;
            int v10 = "Button 1 action";
            break;
          case 5:
            uint64_t v12 = qword_100A19EF0;
            if (!os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO)) {
              goto LABEL_25;
            }
            __int16 v13 = 0;
            char v8 = (uint8_t *)&v13;
            uint64_t v9 = v12;
            int v10 = "Button 2 action";
            break;
          default:
            if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
              sub_100782440();
            }
            BOOL result = 0;
            *(unsigned char *)(a1 + 24) = 0;
            return result;
        }
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v10, v8, 2u);
LABEL_25:
        ++v4;
      }
      while (v4 < *(int *)(a1 + 28));
    }
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10078240C();
      return 0;
    }
  }
  return result;
}

void *sub_1005E0FDC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(unsigned char *)(a2 + 576))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_10078240C();
    }
    return sub_10004191C(a3, "\r\nERROR\r\n");
  }
  if (!*(unsigned char *)(a1 + 24))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_100782474();
    }
    return sub_10004191C(a3, "\r\nERROR\r\n");
  }

  return sub_10004191C(a3, "\r\nOK\r\n");
}

uint64_t sub_1005E1094(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x200000017;
  *(void *)a1 = off_1009B9C30;
  *(void *)(a1 + 16) = a3;
  *(unsigned char *)(a1 + 24) = 0;
  memset(v5, 0, sizeof(v5));
  strlcpy((char *)v5, a2, 0x100uLL);
  if (LOBYTE(v5[0]) == 49) {
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL sub_1005E1168(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(v1 + 576);
  if (*(unsigned char *)(v1 + 576))
  {
    *(unsigned char *)(v1 + 577) = *(unsigned char *)(a1 + 24);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR))
  {
    sub_1007824A8();
  }
  return v2 != 0;
}

void *sub_1005E11CC@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 576))
  {
    return sub_10004191C(a2, "\r\nOK\r\n");
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_1007824A8();
    }
    return sub_10004191C(a2, "\r\nERROR\r\n");
  }
}

std::string *sub_1005E1254(std::string *a1, const std::string::value_type *a2, std::string::size_type a3)
{
  a1->__r_.__value_.__l.__size_ = 0x200000016;
  a1->__r_.__value_.__r.__words[0] = (std::string::size_type)off_1009B9C60;
  a1->__r_.__value_.__r.__words[2] = a3;
  a1[1].__r_.__value_.__r.__words[0] = 0;
  a1[1].__r_.__value_.__l.__size_ = 0;
  a1[1].__r_.__value_.__r.__words[2] = 0;
  std::string::assign(a1 + 1, a2);
  return a1;
}

void sub_1005E12C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1005E12E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(v1 + 576);
  if (!*(unsigned char *)(v1 + 576) && os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
    sub_1007824DC();
  }
  return v2 != 0;
}

void *sub_1005E1338@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (*(unsigned char *)(a1 + 576))
  {
    return sub_10004191C(a2, "\r\nOK\r\n");
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_1007824DC();
    }
    return sub_10004191C(a2, "\r\nERROR\r\n");
  }
}

uint64_t sub_1005E13C0(uint64_t a1, const char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x200000018;
  *(void *)a1 = off_1009B9C90;
  *(void *)(a1 + 16) = a3;
  memset(v11, 0, sizeof(v11));
  strlcpy((char *)v11, a2, 0x100uLL);
  uint64_t v4 = strtok((char *)v11, ",");
  if (v4)
  {
    int v5 = atoi(v4);
    int v6 = strtok(0, ",");
    uint64_t v7 = strtok(0, ",");
    if (v6 && v7)
    {
      while (*v6 - 49 < 3)
      {
        char v8 = *v7;
        uint64_t v9 = *(int *)(a1 + 28);
        *(_DWORD *)(a1 + 4 * v9 + 32) = (*v6 - 49) + 1;
        *(unsigned char *)(a1 + v9 + 288) = v8;
        ++*(_DWORD *)(a1 + 28);
        int v6 = strtok(0, ",");
        uint64_t v7 = strtok(0, ",");
        if (!v6 || !v7) {
          goto LABEL_13;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
        sub_1007825E0();
      }
    }
LABEL_13:
    if (v5 != *(_DWORD *)(a1 + 28))
    {
      *(unsigned char *)(a1 + 24) = 0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
        sub_100782578();
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_100782510();
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  return a1;
}

BOOL sub_1005E15CC(uint64_t a1)
{
  if (!*(unsigned char *)(*(void *)(a1 + 16) + 576))
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100782648();
    return 0;
  }
  if (!*(unsigned char *)(a1 + 24)) {
    return 0;
  }
  if (*(int *)(a1 + 28) < 1) {
    return 1;
  }
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 288;
  while (1)
  {
    int v4 = *(_DWORD *)(v3 + 4 * v2 - 256);
    if (v4 == 3)
    {
      int v5 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)char v8 = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "A65 rebooting", v8, 2u);
      }
      goto LABEL_19;
    }
    if (v4 == 2)
    {
      int v6 = *(unsigned __int8 *)(v3 + v2);
      if (v6 == 49)
      {
        sub_10047E310(*(void *)(a1 + 16), 1);
      }
      else if (v6 == 48)
      {
        sub_10047E310(*(void *)(a1 + 16), 0);
        if (qword_1009F7EF0 != -1) {
          dispatch_once(&qword_1009F7EF0, &stru_1009B9D80);
        }
        sub_1004550AC((uint64_t)off_1009F7EE8, *(void *)(a1 + 16));
      }
      goto LABEL_19;
    }
    if (v4 != 1) {
      break;
    }
    sub_10047E170(*(void *)(a1 + 16), (10 * *(unsigned char *)(v3 + v2) + 42) & 0xFE);
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_1009B9D80);
    }
    sub_1004552FC((uint64_t)off_1009F7EE8, *(void *)(a1 + 16));
LABEL_19:
    if (++v2 >= *(int *)(a1 + 28)) {
      return 1;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
    sub_10078267C();
  }
  BOOL result = 0;
  *(unsigned char *)(a1 + 24) = 0;
  return result;
}

void *sub_1005E17D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (!*(unsigned char *)(a2 + 576))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_10078240C();
    }
    return sub_10004191C(a3, "\r\nERROR\r\n");
  }
  if (!*(unsigned char *)(a1 + 24))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_100782474();
    }
    return sub_10004191C(a3, "\r\nERROR\r\n");
  }

  return sub_10004191C(a3, "\r\nOK\r\n");
}

double sub_1005E1888(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&double result = 0x200000019;
  *(void *)(a1 + 8) = 0x200000019;
  *(void *)a1 = off_1009B9CC0;
  *(void *)(a1 + 16) = a3;
  *(_DWORD *)(a1 + 24) = 0;
  return result;
}

BOOL sub_1005E18BC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  int v2 = *(unsigned __int8 *)(v1 + 576);
  if (*(unsigned char *)(v1 + 576))
  {
    if (qword_1009FB130 != -1) {
      dispatch_once(&qword_1009FB130, &stru_1009B9DA0);
    }
    *(_DWORD *)(a1 + 24) = sub_1002DDF8C(qword_1009FB128, *(void *)(a1 + 16));
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR))
  {
    sub_1007826B0();
  }
  return v2 != 0;
}

void sub_1005E1958(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(*(void *)(a1 + 16) + 576))
  {
    *(_WORD *)__s = 0;
    sprintf(__s, "%1d", *(_DWORD *)(a1 + 24));
    sub_10004191C(&v19, "\r\n");
    uint64_t v3 = std::string::append(&v19, "+APLSIRI:");
    long long v4 = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v3->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v4;
    v3->__r_.__value_.__l.__size_ = 0;
    v3->__r_.__value_.__r.__words[2] = 0;
    v3->__r_.__value_.__r.__words[0] = 0;
    int v5 = std::string::append(&v20, __s);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    sub_10004191C(v17, "\r\n");
    if ((v18 & 0x80u) == 0) {
      uint64_t v7 = v17;
    }
    else {
      uint64_t v7 = (void **)v17[0];
    }
    if ((v18 & 0x80u) == 0) {
      std::string::size_type v8 = v18;
    }
    else {
      std::string::size_type v8 = (std::string::size_type)v17[1];
    }
    uint64_t v9 = std::string::append(&v21, (const std::string::value_type *)v7, v8);
    long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    sub_10004191C(__p, "\r\nOK\r\n");
    if ((v16 & 0x80u) == 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      std::string::size_type v12 = v16;
    }
    else {
      std::string::size_type v12 = (std::string::size_type)__p[1];
    }
    __int16 v13 = std::string::append(&v22, (const std::string::value_type *)v11, v12);
    long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    a2[2] = *((void *)&v13->__r_.__value_.__l + 2);
    *(_OWORD *)a2 = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v22.__r_.__value_.__l.__data_);
    }
    if ((char)v18 < 0) {
      operator delete(v17[0]);
    }
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v21.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    sub_10004191C(a2, "\r\nERROR\r\n");
  }
}

void sub_1005E1B28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v33 - 25) < 0) {
    operator delete(*(void **)(v33 - 48));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (*(char *)(v33 - 57) < 0) {
    operator delete(*(void **)(v33 - 80));
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005E1BBC(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x20000001ALL;
  *(void *)a1 = off_1009B9CF0;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 256;
  if (!a2 || !*(unsigned char *)(a3 + 576))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR))
    {
      sub_1007826E4();
      if (!a2) {
        return a1;
      }
    }
    else if (!a2)
    {
      return a1;
    }
  }
  if (*a2 == 49) {
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL sub_1005E1C74(uint64_t a1)
{
  int v2 = qword_100A19EF0;
  if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 24)) {
      uint64_t v3 = "enabled";
    }
    else {
      uint64_t v3 = "disabled";
    }
    int v5 = 136315138;
    long long v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Siri eyes free mode set to %s", (uint8_t *)&v5, 0xCu);
  }
  if (*(unsigned char *)(*(void *)(a1 + 16) + 576) && *(unsigned char *)(a1 + 25))
  {
    if (qword_1009FB130 != -1) {
      dispatch_once(&qword_1009FB130, &stru_1009B9DA0);
    }
    sub_1002DE5F0(qword_1009FB128, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100782718();
      return 0;
    }
  }
  return result;
}

void *sub_1005E1DB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(*(void *)(a1 + 16) + 576) && *(unsigned char *)(a1 + 25))
  {
    uint64_t v3 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Responding with AT_OK for APLEFM", v5, 2u);
    }
    return sub_10004191C(a2, "\r\nOK\r\n");
  }
  else
  {
    return sub_10004191C(a2, "\r\nERROR\r\n");
  }
}

uint64_t sub_1005E1E74(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0x20000001BLL;
  *(void *)a1 = off_1009B9D20;
  *(void *)(a1 + 16) = a3;
  *(_WORD *)(a1 + 24) = 256;
  if (!a2 || !*(unsigned char *)(a3 + 576))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR))
    {
      sub_10078274C();
      if (!a2) {
        return a1;
      }
    }
    else if (!a2)
    {
      return a1;
    }
  }
  if (*a2 == 49) {
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

BOOL sub_1005E1F2C(uint64_t a1)
{
  if (*(unsigned char *)(*(void *)(a1 + 16) + 576) && *(unsigned char *)(a1 + 25))
  {
    if (qword_1009FB130 != -1) {
      dispatch_once(&qword_1009FB130, &stru_1009B9DA0);
    }
    sub_1002DE684(qword_1009FB128, *(void *)(a1 + 16), *(unsigned __int8 *)(a1 + 24));
    return 1;
  }
  else
  {
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100782780();
      return 0;
    }
  }
  return result;
}

void *sub_1005E1FD0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(unsigned char *)(*(void *)(a1 + 16) + 576) && *(unsigned char *)(a1 + 25))
  {
    uint64_t v3 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Responsding with AT_OK for APLNRSTAT", v5, 2u);
    }
    return sub_10004191C(a2, "\r\nOK\r\n");
  }
  else
  {
    return sub_10004191C(a2, "\r\nERROR\r\n");
  }
}

uint64_t sub_1005E208C(uint64_t a1)
{
  *(void *)a1 = off_1009B9AB0;
  uint64_t v3 = (void **)(a1 + 40);
  sub_1005E2360(&v3);
  return a1;
}

void sub_1005E20E4(uint64_t a1)
{
  *(void *)a1 = off_1009B9AB0;
  uint64_t v1 = (void **)(a1 + 40);
  sub_1005E2360(&v1);
  operator delete();
}

uint64_t sub_1005E2150(uint64_t a1)
{
  *(void *)a1 = off_1009B9BD0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

void sub_1005E21A0(uint64_t a1)
{
  *(void *)a1 = off_1009B9BD0;
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  operator delete();
}

void sub_1005E2214()
{
}

void sub_1005E222C()
{
}

uint64_t sub_1005E2240(uint64_t a1)
{
  *(void *)a1 = off_1009B9C60;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_1005E2290(uint64_t a1)
{
  *(void *)a1 = off_1009B9C60;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  operator delete();
}

void sub_1005E2304()
{
}

void sub_1005E231C()
{
}

void sub_1005E2334()
{
}

void sub_1005E234C()
{
}

void sub_1005E2360(void ***a1)
{
  uint64_t v1 = *a1;
  int v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_1005E23F8((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1005E23F8(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0) {
    operator delete(*(void **)(a2 + 40));
  }
  if (*(char *)(a2 + 31) < 0)
  {
    uint64_t v3 = *(void **)(a2 + 8);
    operator delete(v3);
  }
}

void sub_1005E2450(id a1)
{
}

void sub_1005E2494()
{
}

void sub_1005E24B8(id a1)
{
}

void sub_1005E24FC()
{
}

void sub_1005E2520(id a1)
{
}

void sub_1005E2564()
{
}

void sub_1005E2588(id a1)
{
}

void sub_1005E25CC()
{
}

void sub_1005E25F0()
{
  for (uint64_t i = 0; i != -48; i -= 8)
  {
    if (SHIBYTE(dword_100A139B0[i + 47]) < 0) {
      operator delete(*(void **)&dword_100A139B0[i + 42]);
    }
  }
}

void sub_1005E2638()
{
  dword_100A139B0[0] = 1;
  sub_10004191C(qword_100A139B8, "");
  dword_100A139D0 = 2;
  sub_10004191C(qword_100A139D8, "\"GSM\"");
  dword_100A139F0 = 4;
  sub_10004191C(qword_100A139F8, "\"ASCII\"");
  dword_100A13A10 = 8;
  sub_10004191C(qword_100A13A18, "\"8859-1\"");
  dword_100A13A30 = 16;
  sub_10004191C(qword_100A13A38, "\"UCS2\"");
  dword_100A13A50 = 32;
  sub_10004191C(qword_100A13A58, "\"UTF-8\"");
  __cxa_atexit((void (*)(void *))sub_1005E25F0, 0, (void *)&_mh_execute_header);
}

void sub_1005E2748(_Unwind_Exception *a1)
{
  sub_1007827B4(v1);
  _Unwind_Resume(a1);
}

void *sub_1005E275C(void *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  int v5 = "TEST";
  switch(*(_DWORD *)a3)
  {
    case 0:
      goto LABEL_4;
    case 1:
      int v5 = "READ";
      goto LABEL_4;
    case 2:
      int v5 = "CMD";
LABEL_4:
      __int16 v23 = 0;
      long long v21 = 0u;
      long long v22 = 0u;
      *(_OWORD *)__dst = 0u;
      long long v6 = *(const char **)(a3 + 24);
      int64_t v7 = *(void *)(*(void *)(a3 + 32) + 8) - (void)v6 + *(unsigned __int16 *)(*(void *)(a3 + 32) + 18);
      if (v7 >= 1)
      {
        if ((unint64_t)v7 >= 0x32)
        {
          std::string::size_type v8 = qword_100A19EF0;
          if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
          {
            LOWORD(v14) = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Truncating data when copying into params", (uint8_t *)&v14, 2u);
            long long v6 = *(const char **)(a3 + 24);
          }
          int64_t v7 = 49;
        }
        strncpy(__dst, v6, v7);
      }
      uint64_t v9 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = *(void *)(a3 + 8);
        int v14 = 136446722;
        __int16 v15 = v5;
        __int16 v16 = 2082;
        uint64_t v17 = v10;
        __int16 v18 = 2082;
        std::string v19 = __dst;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received AT %{public}s command %{public}s %{public}s", (uint8_t *)&v14, 0x20u);
      }
      uint64_t v11 = *(const char **)(a3 + 8);
      if (!strncmp(v11, "+CGMI", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CGMM", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CGMR", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CGSN", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CSCS", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CIMI", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+GMI", 4uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+GMM", 4uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+GMR", 4uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+GSN", 4uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CREG", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+COPS", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CPAS", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CPIN", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CBC", 4uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CSQ", 4uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CPBS", 5uLL)) {
        operator new();
      }
      if (!strncmp(v11, "+CPBR", 5uLL)) {
        operator new();
      }
      if (strncmp(v11, "+CPBF", 5uLL) && strncmp(v11, "+CPBW", 5uLL))
      {
        if (!strncmp(v11, "+CCLK", 5uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+CMEE", 5uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+CGATT", 6uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+VTS", 4uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+VTD", 4uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+XAPL", 5uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+IPHONEACCEV", 0xCuLL)) {
          operator new();
        }
        if (!strncmp(v11, "+IPHONEEV", 9uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+IPHONEACCINDICATOR", 0x13uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+IPHONEACCNAME", 0xEuLL)) {
          operator new();
        }
        if (!strncmp(v11, "+APLSIRI", 8uLL)) {
          operator new();
        }
        if (!strncmp(v11, "+APLNRSTAT", 0xAuLL)) {
          operator new();
        }
        if (!strncmp(v11, "+APLEFM", 7uLL)) {
          operator new();
        }
      }
      return result;
    case 3:
      return a1;
    default:
      std::string::size_type v12 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
        sub_1007827F8(v12);
      }
      break;
  }
  return a1;
}

void sub_1005E316C()
{
}

uint64_t *sub_1005E32EC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

uint64_t sub_1005E333C(uint64_t a1, uint64_t a2)
{
  if (!*(void *)a1) {
    return 0;
  }
  if ((*(_DWORD *)(*(void *)a1 + 8) - 13) <= 1)
  {
    uint64_t v4 = sub_100035F54();
    uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, 2);
    if (v5) {
      sub_1005E3408(v5, a2);
    }
  }
  long long v6 = *(uint64_t (**)(void))(**(void **)a1 + 16);

  return v6();
}

void sub_1005E3408(uint64_t a1, uint64_t a2)
{
  if ((sub_10047E08C(a2) & 1) == 0)
  {
    uint64_t v3 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      if (v6 >= 0) {
        uint64_t v4 = __p;
      }
      else {
        uint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      std::string::size_type v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Device %{public}s now supports contact sync", buf, 0xCu);
      if (v6 < 0) {
        operator delete(__p[0]);
      }
    }
    sub_10047EE40(a2);
    sub_10047D63C(a2);
  }
}

void *sub_1005E3500@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (a2 && (uint64_t v3 = *a1) != 0) {
    return (void *)(*(uint64_t (**)(void))(*(void *)v3 + 24))();
  }
  else {
    return sub_10004191C(a3, "\r\nERROR\r\n");
  }
}

uint64_t sub_1005E3540(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1005E333C(a3, a2);
}

void *sub_1005E3550@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X2>, void *a3@<X8>)
{
  return sub_1005E3500(a2, a1, a3);
}

uint64_t sub_1005E3558(uint64_t a1, int a2)
{
  if ((a2 - 1) > 0xE) {
    return 0;
  }
  else {
    return dword_1007BFD50[a2 - 1];
  }
}

uint64_t sub_1005E357C(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 1;
  *(_DWORD *)(a1 + 16) = 1;
  *(_WORD *)(a1 + 20) = 0;
  *(void *)(a1 + 24) = 0;
  if (*(_DWORD *)a1 != a3)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7)
    {
      *(_DWORD *)a1 = 0;
      uint64_t v7 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 8))(v7);
      *(void *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 1;
      *(_WORD *)(a1 + 20) = 0;
      *(void *)(a1 + 24) = 0;
    }
    uint64_t v3 = sub_1005E3558(v7, a3);
    if (v3)
    {
      v11[0] = 0;
      v11[1] = 0;
      sub_1005DA858(v11, a2);
      uint64_t v8 = sub_1005DAA0C((uint64_t)v11, v3, 2, 0, 0xFFFFLL, 0x14u, 1);
      *(void *)(a1 + 8) = v8;
      uint64_t v3 = v8 != 0;
      if (v8)
      {
        *(_DWORD *)a1 = a3;
      }
      else
      {
        uint64_t v9 = qword_100A19EF0;
        if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
          sub_10078283C(v9);
        }
      }
    }
  }
  return v3;
}

uint64_t sub_1005E3698(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 8);
  if (result)
  {
    *(_DWORD *)a1 = 0;
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
    *(void *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 1;
    *(_WORD *)(a1 + 20) = 0;
    *(void *)(a1 + 24) = 0;
  }
  return result;
}

uint64_t sub_1005E36FC(void *a1, uint64_t a2)
{
  if (!a1[1]) {
    sub_1005E357C((uint64_t)a1, a2, 11);
  }
  return *(unsigned int *)a1;
}

uint64_t sub_1005E3734(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (!v4)
  {
    sub_1005E357C(a1, a2, 11);
    uint64_t v4 = *(void *)(a1 + 8);
    if (!v4) {
      return 0;
    }
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 16))(v4);
  if (v5 >= 0x3E9)
  {
    sub_100475F84(a2, (uint64_t)__s1);
    if (v12 < 0)
    {
      uint64_t v7 = *(void **)__s1;
      int v8 = strncmp(*(const char **)__s1, "MB PhoneSystem", 0xEuLL);
      operator delete(v7);
      if (v8) {
        return v5;
      }
    }
    else if (*(void *)__s1 != 0x656E6F685020424DLL || *(void *)&__s1[6] != 0x6D6574737953656ELL)
    {
      return v5;
    }
    uint64_t v9 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__s1 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Restricting contacts to 1000 on kit matching \"MB PhoneSystem\"", __s1, 2u);
    }
    return 1000;
  }
  return v5;
}

uint64_t sub_1005E3880(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5, _DWORD *a6)
{
  if (!*(void *)(a1 + 8)) {
    sub_1005E357C(a1, a2, 11);
  }
  int v12 = sub_1005E3734(a1, a2);
  *a4 = v12;
  *a3 = v12 != 0;
  *a5 = 50;
  *a6 = 50;
  return 1;
}

uint64_t sub_1005E3908(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 16) <= a2)
  {
    unsigned __int16 v4 = *(_WORD *)(a1 + 20);
  }
  else
  {
    unsigned __int16 v4 = 0;
    *(_DWORD *)(a1 + 16) = 1;
    *(_WORD *)(a1 + 20) = 0;
    *(void *)(a1 + 24) = 0;
  }
  for (char i = 1; ; char i = 0)
  {
    while (1)
    {
      uint64_t v6 = sub_1005DB35C(*(void *)(a1 + 8), v4);
      if (!v6) {
        break;
      }
      if (*(void *)(a1 + 24) < (unint64_t)(0x6DB6DB6DB6DB6DB7
                                                   * ((uint64_t)(*(void *)(v6 + 240) - *(void *)(v6 + 232)) >> 3)))
      {
        int v7 = *(_DWORD *)(a1 + 16);
        if (v7 == a2) {
          return 1;
        }
        *(_DWORD *)(a1 + 16) = v7 + 1;
        char i = 1;
      }
      sub_1005DB3D8(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      unsigned __int16 v4 = *(_WORD *)(a1 + 20) + 1;
      *(_WORD *)(a1 + 20) = v4;
    }
    if ((i & 1) == 0) {
      break;
    }
    unsigned __int16 v4 = 0;
    *(_WORD *)(a1 + 20) = 0;
    ++*(void *)(a1 + 24);
  }
  return 0;
}

uint64_t sub_1005E3A04(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t *a5)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v9 = (uint64_t)(a5 + 2);
    while (sub_1005E3908(a1, a3))
    {
      uint64_t v10 = sub_1005DB35C(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      uint64_t v52 = 0;
      long long v50 = 0u;
      *(_OWORD *)long long v51 = 0u;
      *(_OWORD *)v49 = 0u;
      sub_10036C478((void *)v10, *(void *)(a1 + 24), (uint64_t)v49);
      uint64_t v11 = v49;
      if (SBYTE7(v50) < 0) {
        uint64_t v11 = (void **)v49[0];
      }
      BOOL v12 = *(unsigned __int8 *)v11 != 43;
      if (DWORD2(v50) == 4) {
        int v13 = 3;
      }
      else {
        int v13 = 0;
      }
      if (DWORD2(v50) == 3) {
        int v14 = 2;
      }
      else {
        int v14 = v13;
      }
      if ((DWORD2(v50) - 1) < 2) {
        int v15 = 1;
      }
      else {
        int v15 = v14;
      }
      memset(&__dst, 0, sizeof(__dst));
      if (*(char *)(v10 + 39) < 0) {
        sub_10003B098(&__dst, *(void **)(v10 + 16), *(void *)(v10 + 24));
      }
      else {
        std::string __dst = *(std::string *)(v10 + 16);
      }
      std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __dst.__r_.__value_.__l.__size_;
      }
      if (size)
      {
        uint64_t v17 = (void *)HIBYTE(v52);
        if (v52 < 0) {
          uint64_t v17 = v51[1];
        }
        if (v17)
        {
          std::operator+<char>();
          __int16 v18 = std::string::append(&v53, ")");
          long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
          *(void *)&buf[16] = *((void *)&v18->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v19;
          v18->__r_.__value_.__l.__size_ = 0;
          v18->__r_.__value_.__r.__words[2] = 0;
          v18->__r_.__value_.__r.__words[0] = 0;
          if (buf[23] >= 0) {
            std::string v20 = buf;
          }
          else {
            std::string v20 = *(const std::string::value_type **)buf;
          }
          if (buf[23] >= 0) {
            std::string::size_type v21 = buf[23];
          }
          else {
            std::string::size_type v21 = *(void *)&buf[8];
          }
          std::string::append(&__dst, v20, v21);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v53.__r_.__value_.__l.__data_);
          }
        }
      }
      long long v22 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
      {
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        int v24 = *(unsigned __int16 *)(a1 + 20);
        uint64_t v25 = *(void *)(a1 + 24);
        *(_DWORD *)std::string buf = 67109890;
        *(_DWORD *)&uint8_t buf[4] = a3;
        *(_WORD *)&buf[8] = 2082;
        *(void *)&buf[10] = p_dst;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v24;
        *(_WORD *)long long v57 = 2048;
        *(void *)&v57[2] = v25;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Found index #%u (\"%{public}s\") at entry <%u,%zu>", buf, 0x22u);
      }
      if (SBYTE7(v50) < 0)
      {
        sub_10003B098(v46, v49[0], (unint64_t)v49[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v46 = *(_OWORD *)v49;
        uint64_t v47 = v50;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        sub_10003B098(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = __dst;
      }
      sub_1005E4040((uint64_t)buf, a3, (long long *)v46, v12, &__p, v15);
      unint64_t v26 = a5[1];
      unint64_t v27 = a5[2];
      if (v26 >= v27)
      {
        unint64_t v30 = 0x8E38E38E38E38E39 * ((uint64_t)(v26 - *a5) >> 3);
        unint64_t v31 = v30 + 1;
        if (v30 + 1 > 0x38E38E38E38E38ELL) {
          abort();
        }
        unint64_t v32 = 0x8E38E38E38E38E39 * ((uint64_t)(v27 - *a5) >> 3);
        if (2 * v32 > v31) {
          unint64_t v31 = 2 * v32;
        }
        if (v32 >= 0x1C71C71C71C71C7) {
          unint64_t v33 = 0x38E38E38E38E38ELL;
        }
        else {
          unint64_t v33 = v31;
        }
        uint64_t v55 = v9;
        char v34 = (char *)sub_1005E418C(v9, v33);
        std::string::size_type v35 = (std::string::size_type)&v34[72 * v30];
        v53.__r_.__value_.__r.__words[0] = (std::string::size_type)v34;
        v53.__r_.__value_.__l.__size_ = v35;
        long long v54 = &v34[72 * v36];
        *(_DWORD *)std::string::size_type v35 = *(_DWORD *)buf;
        long long v37 = *(_OWORD *)&buf[8];
        *(void *)(v35 + 24) = *(void *)v57;
        *(_OWORD *)(v35 + 8) = v37;
        *(void *)&buf[16] = 0;
        *(void *)long long v57 = 0;
        *(void *)&buf[8] = 0;
        *(_DWORD *)(v35 + 32) = *(_DWORD *)&v57[8];
        long long v38 = v58;
        *(void *)(v35 + 56) = v59;
        *(_OWORD *)(v35 + 40) = v38;
        uint64_t v59 = 0;
        long long v58 = 0uLL;
        *(_DWORD *)(v35 + 64) = v60;
        v53.__r_.__value_.__r.__words[2] = v35 + 72;
        sub_1005E40F4(a5, &v53);
        uint64_t v39 = a5[1];
        sub_1005E41D8((void **)&v53.__r_.__value_.__l.__data_);
        int v40 = SHIBYTE(v59);
        a5[1] = v39;
        if (v40 < 0) {
          operator delete((void *)v58);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v26 = *(_DWORD *)buf;
        long long v28 = *(_OWORD *)&buf[8];
        *(void *)(v26 + 24) = *(void *)v57;
        *(_OWORD *)(v26 + 8) = v28;
        *(void *)&buf[16] = 0;
        *(void *)long long v57 = 0;
        *(void *)&buf[8] = 0;
        *(_DWORD *)(v26 + 32) = *(_DWORD *)&v57[8];
        long long v29 = v58;
        *(void *)(v26 + 56) = v59;
        *(_OWORD *)(v26 + 40) = v29;
        uint64_t v59 = 0;
        long long v58 = 0uLL;
        *(_DWORD *)(v26 + 64) = v60;
        a5[1] = v26 + 72;
      }
      if ((v57[7] & 0x80000000) != 0) {
        operator delete(*(void **)&buf[8]);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v47) < 0) {
        operator delete(v46[0]);
      }
      sub_1005DB3D8(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 20));
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v52) < 0) {
        operator delete(v51[0]);
      }
      if (SBYTE7(v50) < 0) {
        operator delete(v49[0]);
      }
      if (++a3 > a4) {
        return 1;
      }
    }
    std::string::size_type v41 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      int v42 = *(unsigned __int16 *)(a1 + 20);
      uint64_t v43 = *(void *)(a1 + 24);
      *(_DWORD *)std::string buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = v42;
      *(_WORD *)&buf[14] = 2048;
      *(void *)&buf[16] = v43;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Could not find entry for index #%u (curEntryIndex=%u, curNumberDepth=%zu)", buf, 0x18u);
    }
  }
  return 1;
}

void sub_1005E3F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  sub_100376850((uint64_t)&a34);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E4040(uint64_t a1, int a2, long long *a3, int a4, std::string *__str, int a6)
{
  *(_DWORD *)a1 = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 8), *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v10 = *a3;
    *(void *)(a1 + 24) = *((void *)a3 + 2);
    *(_OWORD *)(a1 + 8) = v10;
  }
  *(_DWORD *)(a1 + 32) = a4;
  std::string::basic_string((std::string *)(a1 + 40), __str, 0, 0x1F4uLL, (std::allocator<char> *)&v12);
  *(_DWORD *)(a1 + 64) = a6;
  return a1;
}

void sub_1005E40D8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1005E40F4(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    int v5 = *(_DWORD *)(v2 - 72);
    v2 -= 72;
    *(_DWORD *)(v4 - 72) = v5;
    v4 -= 72;
    long long v6 = *(_OWORD *)(v2 + 8);
    *(void *)(v4 + 24) = *(void *)(v2 + 24);
    *(_OWORD *)(v4 + 8) = v6;
    *(void *)(v2 + 16) = 0;
    *(void *)(v2 + 24) = 0;
    *(void *)(v2 + 8) = 0;
    *(_DWORD *)(v4 + 32) = *(_DWORD *)(v2 + 32);
    long long v7 = *(_OWORD *)(v2 + 40);
    *(void *)(v4 + 56) = *(void *)(v2 + 56);
    *(_OWORD *)(v4 + 40) = v7;
    *(void *)(v2 + 48) = 0;
    *(void *)(v2 + 56) = 0;
    *(void *)(v2 + 40) = 0;
    *(_DWORD *)(v4 + 64) = *(_DWORD *)(v2 + 64);
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_1005E418C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    sub_1000616DC();
  }
  return operator new(72 * a2);
}

void **sub_1005E41D8(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1005E420C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 72;
    sub_1005E23F8(v4, i - 72);
  }
}

uint64_t sub_1005E4254(uint64_t a1)
{
  *(void *)a1 = off_1009B9E00;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

BOOL sub_1005E42D8(uint64_t a1, uint64_t a2, unsigned __int16 a3, _WORD *a4)
{
  *a4 = 0;
  uint64_t v8 = (const std::string *)(a1 + 16);
  std::string::size_type v9 = *(void *)(a1 + 40);
  while (1)
  {
    uint64_t v10 = *(unsigned __int8 *)(a1 + 39);
    uint64_t v11 = *(char *)(a1 + 39) < 0 ? *(void *)(a1 + 24) : *(unsigned __int8 *)(a1 + 39);
    if (v9 == v11) {
      break;
    }
    if (!a3) {
      goto LABEL_21;
    }
LABEL_15:
    if ((v10 & 0x80) != 0) {
      uint64_t v10 = *(void *)(a1 + 24);
    }
    std::string::size_type v14 = *(void *)(a1 + 40);
    unint64_t v15 = v10 - v14;
    if (v15 >= a3) {
      std::string::size_type v16 = a3;
    }
    else {
      std::string::size_type v16 = v15;
    }
    std::string::copy(v8, (std::string::value_type *)(a2 + (unsigned __int16)*a4), v16, v14);
    std::string::size_type v9 = *(void *)(a1 + 40) + v16;
    *(void *)(a1 + 40) = v9;
    *a4 += v16;
    a3 -= v16;
  }
  *(void *)(a1 + 40) = 0;
  (*(void (**)(uint64_t))(*(void *)a1 + 16))(a1);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 39);
  if (*(char *)(a1 + 39) < 0) {
    uint64_t v12 = *(void *)(a1 + 24);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(a1 + 39);
  }
  if (v12) {
    BOOL v13 = a3 == 0;
  }
  else {
    BOOL v13 = 1;
  }
  if (!v13) {
    goto LABEL_15;
  }
LABEL_21:
  if ((v10 & 0x80) != 0) {
    uint64_t v10 = *(void *)(a1 + 24);
  }
  return v10 != 0;
}

double sub_1005E4400(uint64_t a1, uint64_t a2, char a3, __int16 a4)
{
  double result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)a1 = off_1009B9E28;
  *(void *)(a1 + 8) = a2;
  *(unsigned char *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = 0;
  *(_WORD *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 58) = a4;
  return result;
}

void sub_1005E4438(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 52))
  {
    case 0:
      uint64_t v2 = (void *)(a1 + 16);
      std::string::assign((std::string *)(a1 + 16), "<?xml version=\"1.0\"?>\n<!DOCTYPE vcard-listing SYSTEM \"vcard-listing.dtd\">\n<vCard-listing version=\"1.0\">\n");
      uint64_t v3 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 39) < 0) {
          uint64_t v2 = (void *)*v2;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Sending header:\n\n%s", buf, 0xCu);
      }
      *(_DWORD *)(a1 + 52) = 1;
      break;
    case 1:
      uint64_t v4 = sub_1005DB35C(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 56));
      if (!v4)
      {
        *(_DWORD *)(a1 + 52) = 2;
        goto LABEL_12;
      }
      uint64_t v5 = v4;
      uint64_t v39 = 0;
      long long v37 = 0u;
      long long v38 = 0u;
      long long v35 = 0u;
      long long v36 = 0u;
      long long v33 = 0u;
      long long v34 = 0u;
      long long v31 = 0u;
      long long v32 = 0u;
      long long v29 = 0u;
      long long v30 = 0u;
      *(_OWORD *)unint64_t v27 = 0u;
      long long v28 = 0u;
      long long v25 = 0u;
      long long v26 = 0u;
      *(_OWORD *)std::string buf = 0u;
      long long v24 = 0u;
      sub_1000419CC((uint64_t)buf);
      sub_10003AB28((uint64_t)buf);
      uint64_t v8 = (void *)sub_10003AB28((uint64_t)buf);
      *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
      std::string::size_type v9 = (void *)std::ostream::operator<<();
      *(_DWORD *)((char *)v9 + *(void *)(*v9 - 24) + 8) = *(_DWORD *)((unsigned char *)v9 + *(void *)(*v9 - 24) + 8) & 0xFFFFFFB5 | 2;
      sub_10003AB28((uint64_t)v9);
      memset(&v19, 0, sizeof(v19));
      if (*(char *)(v5 + 39) < 0) {
        sub_10003B098(&v19, *(void **)(v5 + 16), *(void *)(v5 + 24));
      }
      else {
        std::string v19 = *(std::string *)(v5 + 16);
      }
      std::string::size_type v10 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      char v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      std::string::size_type size = v19.__r_.__value_.__l.__size_;
      if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v13 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v13 = v19.__r_.__value_.__l.__size_;
      }
      if (!v13 && *(unsigned char *)(a1 + 48))
      {
        uint64_t v22 = 0;
        *(_OWORD *)std::string __p = 0u;
        memset(__str, 0, sizeof(__str));
        sub_10036C478((void *)v5, 0, (uint64_t)__str);
        std::string::operator=(&v19, (const std::string *)__str);
        if (SHIBYTE(v22) < 0) {
          operator delete(__p[0]);
        }
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        std::string::size_type v10 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
        std::string::size_type size = v19.__r_.__value_.__l.__size_;
        char v11 = HIBYTE(v19.__r_.__value_.__r.__words[2]);
      }
      if (v11 < 0) {
        std::string::size_type v10 = size;
      }
      if (v10)
      {
        uint64_t v14 = sub_10003AB28((uint64_t)buf);
        sub_10044A49C((uint64_t)&v19, (std::string *)__str);
        uint64_t v15 = sub_10003AB28(v14);
        sub_10003AB28(v15);
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
      }
      sub_10003AB28((uint64_t)buf);
      std::stringbuf::str();
      std::string::size_type v16 = (void **)(a1 + 16);
      if (*(char *)(a1 + 39) < 0) {
        operator delete(*v16);
      }
      *(_OWORD *)std::string::size_type v16 = *(_OWORD *)__str;
      *(void *)(a1 + 32) = *(void *)&__str[16];
      uint64_t v17 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
      {
        int v18 = *(unsigned __int16 *)(a1 + 56);
        if (*(char *)(a1 + 39) < 0) {
          std::string::size_type v16 = (void **)*v16;
        }
        *(_DWORD *)__str = 67109378;
        *(_DWORD *)&__str[4] = v18;
        *(_WORD *)&char __str[8] = 2080;
        *(void *)&__str[10] = v16;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Sending card #%u:\n\n%s", __str, 0x12u);
      }
      sub_1005DB3D8(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 56));
      ++*(_WORD *)(a1 + 56);
      if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v19.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v28) < 0) {
        operator delete(v27[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      break;
    case 2:
LABEL_12:
      long long v6 = (void *)(a1 + 16);
      std::string::assign((std::string *)(a1 + 16), "</vCard-listing>\n");
      long long v7 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
      {
        if (*(char *)(a1 + 39) < 0) {
          long long v6 = (void *)*v6;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Sending footer:\n\n%s", buf, 0xCu);
      }
      *(_DWORD *)(a1 + 52) = 3;
      break;
    case 3:
      if (*(char *)(a1 + 39) < 0)
      {
        **(unsigned char **)(a1 + 16) = 0;
        *(void *)(a1 + 24) = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 16) = 0;
        *(unsigned char *)(a1 + 39) = 0;
      }
      break;
    default:
      return;
  }
}

void sub_1005E49CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10027E318((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E4A4C(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(void *)a1 = off_1009B9E50;
  *(void *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 52) = a4;
  *(_WORD *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 58) = sub_10047F9F0(a5);
  return a1;
}

void sub_1005E4AA8(_Unwind_Exception *a1)
{
  sub_1005E4254(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E4AC0(uint64_t a1)
{
  uint64_t result = sub_1005DB35C(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 56));
  if (result)
  {
    (*(void (**)(unsigned char *__return_ptr))(*(void *)result + 16))(v6);
    uint64_t v3 = (void **)(a1 + 16);
    if (*(char *)(a1 + 39) < 0) {
      operator delete(*v3);
    }
    *(_OWORD *)uint64_t v3 = *(_OWORD *)v6;
    *(void *)(a1 + 32) = *(void *)&v6[16];
    uint64_t v4 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
    {
      int v5 = *(unsigned __int16 *)(a1 + 56);
      if (*(char *)(a1 + 39) < 0) {
        uint64_t v3 = (void **)*v3;
      }
      *(_DWORD *)long long v6 = 67109378;
      *(_DWORD *)&v6[4] = v5;
      *(_WORD *)&v6[8] = 2080;
      *(void *)&v6[10] = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending vCard #%u:\n\n%s", v6, 0x12u);
    }
    uint64_t result = sub_1005DB3D8(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 56));
    ++*(_WORD *)(a1 + 56);
  }
  else if (*(char *)(a1 + 39) < 0)
  {
    **(unsigned char **)(a1 + 16) = 0;
    *(void *)(a1 + 24) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 16) = 0;
    *(unsigned char *)(a1 + 39) = 0;
  }
  return result;
}

void sub_1005E4C34(uint64_t a1)
{
  sub_1005E4254(a1);

  operator delete();
}

void sub_1005E4C70(uint64_t a1)
{
  sub_1005E4254(a1);

  operator delete();
}

uint64_t sub_1005E4CA8(uint64_t a1, int a2, io_service_t a3)
{
  *(void *)(a1 + 16) = 0;
  int v5 = (void *)(a1 + 16);
  *(_DWORD *)a1 = a2;
  long long v6 = (IOCFPlugInInterface ***)(a1 + 8);
  CFUUIDRef v7 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0x53u, 0xEAu, 0x67u, 0x34u, 0xC7u, 0xEu, 0x46u, 0x35u, 0x9Cu, 0xF5u, 0x4Fu, 0xAFu, 5u, 0xB4u, 0xF2u, 0x30u);
  CFUUIDRef v8 = CFUUIDGetConstantUUIDWithBytes(0, 0xC2u, 0x44u, 0xE8u, 0x58u, 0x10u, 0x9Cu, 0x11u, 0xD4u, 0x91u, 0xD4u, 0, 0x50u, 0xE4u, 0xC6u, 0x42u, 0x6Fu);
  uint64_t v9 = IOCreatePlugInInterfaceForService(a3, v7, v8, v6, &theScore);
  if (!v9)
  {
    char v11 = *v6;
    QueryInterface = (*v11)->QueryInterface;
    CFUUIDRef v13 = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorSystemDefault, 0xA6u, 0x7Au, 0x69u, 0x95u, 0x23u, 0x6Bu, 0x44u, 0xDEu, 0x97u, 0xB5u, 0x27u, 0xB9u, 0xB1u, 0xE6u, 0x6Fu, 0x2Fu);
    CFUUIDBytes v14 = CFUUIDGetUUIDBytes(v13);
    ((void (*)(IOCFPlugInInterface **, void, void, void *))QueryInterface)(v11, *(void *)&v14.byte0, *(void *)&v14.byte8, v5);
    if (*v5)
    {
      uint64_t v9 = (*(uint64_t (**)(void))(*(void *)*v5 + 64))(*v5);
      if (v9)
      {
        if (dword_1009FBDC8 <= 90 && (dword_1009FBDC8 != -1 || _LogCategory_Initialize())) {
          LogPrintF_safe();
        }
      }
      else
      {
        *(_DWORD *)(a1 + 24) = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16));
      }
    }
    else
    {
      if (dword_1009FBDC8 <= 90 && (dword_1009FBDC8 != -1 || _LogCategory_Initialize())) {
        LogPrintF_safe();
      }
      return 0;
    }
  }
  return v9;
}

uint64_t sub_1005E4F00(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4) {
    return 0;
  }
  (*(void (**)(uint64_t))(*(void *)v4 + 96))(v4);
  __chkstk_darwin();
  CFUUIDRef v8 = &v13[-v7];
  bzero(&v13[-v7], v9);
  uint64_t v10 = **(void **)(a1 + 16);
  if (*(void *)(a1 + 32))
  {
    if ((*(unsigned int (**)(void))(v10 + 104))())
    {
      if (dword_1009FBDC8 <= 90 && (dword_1009FBDC8 != -1 || _LogCategory_Initialize())) {
        LogPrintF_safe();
      }
      return 0;
    }
  }
  else if ((*(unsigned int (**)(void))(v10 + 112))() {
         && dword_1009FBDC8 <= 90
  }
         && (dword_1009FBDC8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
  uint64_t v15 = 0;
  uint64_t v11 = 0;
  if (a3)
  {
    while ((*(unsigned int (**)(void, unsigned char *, uint64_t, const void **, void, void))(**(void **)(a1 + 16) + 128))(*(void *)(a1 + 16), v8, a1 + 40, &v15, 0, 0))
    {
      memcpy(a2, v15, *(unsigned int *)(a1 + 24));
      int v14 = 0;
      (*(void (**)(void, unsigned char *, void, int *))(**(void **)(a1 + 16) + 136))(*(void *)(a1 + 16), v8, *(void *)(a1 + 40), &v14);
      if (v14)
      {
        if (dword_1009FBDC8 <= 90 && (dword_1009FBDC8 != -1 || _LogCategory_Initialize())) {
          LogPrintF_safe();
        }
        NSLog(@"Read %u, corrupt %u", v11, 1);
        return v11;
      }
      uint64_t v11 = (v11 + 1);
      a2 += *(unsigned int *)(a1 + 24);
      if (a3 == v11) {
        return a3;
      }
    }
  }
  return v11;
}

uint64_t sub_1005E51FC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  uint64_t v10 = *(void **)(a1 + 80);
  uint64_t v11 = (void *)(a1 + 88);
  if (v10 != (void *)(a1 + 88))
  {
    uint64_t v12 = a5;
    do
    {
      uint64_t v13 = v10[4];
      if (v13)
      {
        if (*(unsigned char *)(*(void *)(v13 + 64) + 160))
        {
          xpc_object_t v14 = xpc_dictionary_create(0, 0, 0);
          uint64_t v15 = v14;
          if (v14)
          {
            xpc_dictionary_set_uint64(v14, "kCBMsgArgID", *(void *)(v13 + 40));
            xpc_dictionary_set_uint64(v15, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgEvent", a3);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgBTDevice", a4);
            xpc_dictionary_set_uint64(v15, "kCBMsgArgState", v12);
            sub_1002D7B48(*(void *)(v13 + 64), "kCBMsgIdAccessoryEvent", v15, 1);
          }
        }
      }
      std::string::size_type v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          std::string::size_type v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          uint64_t v10 = v17;
        }
        while (!v18);
      }
      uint64_t v10 = v17;
    }
    while (v17 != v11);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1005E536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005E5380(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, const void *a6, unsigned int a7)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 8);
  xpc_object_t v14 = *(void **)(a1 + 80);
  uint64_t v15 = (void *)(a1 + 88);
  if (v14 != (void *)(a1 + 88))
  {
    uint64_t v16 = a5;
    do
    {
      uint64_t v17 = v14[4];
      if (v17)
      {
        if (*(unsigned char *)(*(void *)(v17 + 64) + 160))
        {
          xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
          std::string v19 = v18;
          if (v18)
          {
            xpc_dictionary_set_uint64(v18, "kCBMsgArgID", *(void *)(v17 + 40));
            xpc_dictionary_set_uint64(v19, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgSetupType", a4);
            xpc_dictionary_set_uint64(v19, "kCBMsgArgOPType", v16);
            xpc_dictionary_set_data(v19, "kCBMsgArgData", a6, a7);
            sub_1002D7B48(*(void *)(v17 + 64), "kCBMsgIdAccessorySetupCommand", v19, 1);
          }
        }
      }
      std::string v20 = (void *)v14[1];
      if (v20)
      {
        do
        {
          std::string::size_type v21 = v20;
          std::string v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          std::string::size_type v21 = (void *)v14[2];
          BOOL v22 = *v21 == (void)v14;
          xpc_object_t v14 = v21;
        }
        while (!v22);
      }
      xpc_object_t v14 = v21;
    }
    while (v21 != v15);
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_1005E550C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005E5520(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int a5, const void *a6, unsigned int a7)
{
  int bytes = a4;
  __int16 v25 = WORD2(a4);
  v23[0] = 0;
  v23[1] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 8);
  uint64_t v13 = *(void **)(a1 + 80);
  xpc_object_t v14 = (void *)(a1 + 88);
  if (v13 != (void *)(a1 + 88))
  {
    size_t v15 = a7;
    do
    {
      uint64_t v16 = v13[4];
      if (v16)
      {
        if (*(unsigned char *)(*(void *)(v16 + 64) + 160))
        {
          xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
          xpc_object_t v18 = v17;
          if (v17)
          {
            xpc_dictionary_set_uint64(v17, "kCBMsgArgID", *(void *)(v16 + 40));
            xpc_dictionary_set_uint64(v18, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v18, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_data(v18, "kCBMsgArgAddressBytes", &bytes, 6uLL);
            xpc_dictionary_set_uint64(v18, "kCBMsgArgRelayMsgType", a5);
            xpc_dictionary_set_data(v18, "kCBMsgArgData", a6, v15);
            sub_1002D7B48(*(void *)(v16 + 64), "kCBMsgIdAccessoryRelayMsgRecv", v18, 1);
          }
        }
      }
      std::string v19 = (void *)v13[1];
      if (v19)
      {
        do
        {
          std::string v20 = v19;
          std::string v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          std::string v20 = (void *)v13[2];
          BOOL v21 = *v20 == (void)v13;
          uint64_t v13 = v20;
        }
        while (!v21);
      }
      uint64_t v13 = v20;
    }
    while (v20 != v14);
  }
  return sub_10003AFB4((uint64_t)v23);
}

void sub_1005E56B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E56CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5, unsigned int a6)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 8);
  uint64_t v12 = *(void **)(a1 + 80);
  if (v12 != (void *)(a1 + 88))
  {
    uint64_t v13 = a6;
    do
    {
      uint64_t v14 = v12[4];
      if (v14)
      {
        if (*(unsigned char *)(*(void *)(v14 + 64) + 160))
        {
          xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
          uint64_t v16 = v15;
          if (v15)
          {
            xpc_dictionary_set_uint64(v15, "kCBMsgArgID", *(void *)(v14 + 40));
            xpc_dictionary_set_uint64(v16, "kCBMsgArgAccessoryManagerID", a2);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgBTDevice", a3);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgCmdReqType", a4);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgResult", a5);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgReason", v13);
            sub_1002D7B48(*(void *)(v14 + 64), "kCBMsgIdAccessoryCommandStatus", v16, 1);
          }
        }
      }
      xpc_object_t v17 = (void *)v12[1];
      if (v17)
      {
        do
        {
          xpc_object_t v18 = v17;
          xpc_object_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          xpc_object_t v18 = (void *)v12[2];
          BOOL v19 = *v18 == (void)v12;
          uint64_t v12 = v18;
        }
        while (!v19);
      }
      uint64_t v12 = v18;
    }
    while (v18 != (void *)(a1 + 88));
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1005E5854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005E5868(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, size_t a6, uint64_t a7)
{
  uint64_t v13 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)unint64_t v27 = 134218752;
    *(void *)&v27[4] = a2;
    *(_WORD *)&v27[12] = 2048;
    *(void *)&v27[14] = a3;
    __int16 v28 = 1024;
    unsigned int v29 = a4;
    __int16 v30 = 2048;
    size_t v31 = a6;
    _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "BTAccessoryMsgHandler::BTAccessoryCustomCallbackHandler manager:%llX device:%llX type:%X dataSize:%zu", v27, 0x26u);
  }
  *(void *)unint64_t v27 = 0;
  *(void *)&v27[8] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 8);
  uint64_t v14 = *(void **)(a1 + 80);
  if (v14 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v15 = v14[4];
      if (v15 && *(unsigned char *)(*(void *)(v15 + 64) + 160) && *(_DWORD *)(v15 + 48) == a4)
      {
        uint64_t v16 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v22 = *(void *)(v15 + 40);
          *(_DWORD *)std::string buf = 134217984;
          uint64_t v26 = v22;
          _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "BTAccessoryMsgHandler::BTAccessoryCustomCallbackHandler cbid:%llu", buf, 0xCu);
        }
        xpc_object_t v17 = xpc_dictionary_create(0, 0, 0);
        xpc_object_t v18 = v17;
        if (v17)
        {
          xpc_dictionary_set_uint64(v17, "kCBMsgArgID", *(void *)(v15 + 40));
          xpc_dictionary_set_uint64(v18, "kCBMsgArgAccessoryManagerID", a2);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgBTDevice", a3);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgCustomMessageType", a4);
          xpc_dictionary_set_data(v18, "kCBMsgArgData", a5, a6);
          xpc_dictionary_set_uint64(v18, "kCBMsgArgUserData", a7);
          sub_1002D7B48(*(void *)(v15 + 64), "kCBMsgIdAccessoryCustomMessage", v18, 1);
        }
      }
      BOOL v19 = (void *)v14[1];
      if (v19)
      {
        do
        {
          std::string v20 = v19;
          BOOL v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          std::string v20 = (void *)v14[2];
          BOOL v21 = *v20 == (void)v14;
          uint64_t v14 = v20;
        }
        while (!v21);
      }
      uint64_t v14 = v20;
    }
    while (v20 != (void *)(a1 + 88));
  }
  return sub_10003AFB4((uint64_t)v27);
}

void sub_1005E5AFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_1005E5B18(uint64_t result, unsigned int a2, uint64_t a3, unsigned int a4, uint64_t a5)
{
  if (a5) {
    return sub_1005E51FC(a5, result, a2, a3, a4);
  }
  return result;
}

uint64_t sub_1005E5B3C(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, const void *a5, unsigned int a6, uint64_t a7)
{
  if (a7) {
    return sub_1005E5380(a7, result, a2, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_1005E5B68(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4, const void *a5, unsigned int a6, uint64_t a7)
{
  if (a7) {
    return sub_1005E5520(a7, result, a2, a3 & 0xFFFFFFFFFFFFLL, a4, a5, a6);
  }
  return result;
}

uint64_t sub_1005E5B98(uint64_t result, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, uint64_t a6)
{
  if (a6) {
    return sub_1005E56CC(a6, result, a2, a3, a4, a5);
  }
  return result;
}

uint64_t sub_1005E5BC0(uint64_t a1, uint64_t a2, unsigned int a3, const void *a4, size_t a5, uint64_t *a6)
{
  uint64_t v12 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    int v15 = 134219008;
    uint64_t v16 = a1;
    __int16 v17 = 2048;
    uint64_t v18 = a2;
    __int16 v19 = 1024;
    unsigned int v20 = a3;
    __int16 v21 = 2048;
    size_t v22 = a5;
    __int16 v23 = 2048;
    long long v24 = a6;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "BTAccessoryMsgHandler::BTAccessoryCustomMessageCallback manager:%llX device:%llX type:%X dataSize:%zu userData:%p", (uint8_t *)&v15, 0x30u);
  }
  uint64_t result = *a6;
  if (*a6)
  {
    uint64_t v14 = *a6;
    if (a3 == 64) {
      uint64_t v14 = a6[1];
    }
    return sub_1005E5868(result, a1, a2, a3, a4, a5, v14);
  }
  return result;
}

void *sub_1005E5CEC(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_1004EEEA8(a1, a2);
  *uint64_t v3 = &off_1009B9E78;
  v3[11] = 0;
  v3[12] = 0;
  v3[10] = v3 + 11;
  *((_WORD *)v3 + 52) = 0;
  if (qword_100A13A70 != -1) {
    dispatch_once(&qword_100A13A70, &stru_1009B9E98);
  }
  return a1;
}

void sub_1005E5D6C(id a1)
{
  v77 = "kCBMsgIdAccessoryGetDefaultMsg";
  uint64_t v78 = 30;
  v79 = &v77;
  uint64_t v1 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v1[4] = sub_1005E7050;
  v1[5] = 0;
  v77 = "kCBMsgIdAccessoryAddCallbacksMsg";
  uint64_t v78 = 32;
  v79 = &v77;
  uint64_t v2 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v2[4] = sub_1005E71AC;
  v2[5] = 0;
  v77 = "kCBMsgIdAccessoryRemoveCallbacksMsg";
  uint64_t v78 = 35;
  v79 = &v77;
  uint64_t v3 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v3[4] = sub_1005E74DC;
  v3[5] = 0;
  v77 = "kCBMsgIdAccessoryRegisterDeviceMsg";
  uint64_t v78 = 34;
  v79 = &v77;
  uint64_t v4 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v4[4] = sub_1005E77B4;
  v4[5] = 0;
  v77 = "kCBMsgIdAccessoryPlugInDeviceMsg";
  uint64_t v78 = 32;
  v79 = &v77;
  int v5 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v5[4] = sub_1005E7970;
  v5[5] = 0;
  v77 = "kCBMsgIdAccessoryUnplugDeviceMsg";
  uint64_t v78 = 32;
  v79 = &v77;
  long long v6 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v6[4] = sub_1005E7A5C;
  v6[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceStateMsg";
  uint64_t v78 = 34;
  v79 = &v77;
  uint64_t v7 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v7[4] = sub_1005E7B48;
  v7[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDevicesMsg";
  uint64_t v78 = 30;
  v79 = &v77;
  CFUUIDRef v8 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v8[4] = sub_1005E7C58;
  v8[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceBatteryLevelMsg";
  uint64_t v78 = 41;
  v79 = &v77;
  size_t v9 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  _OWORD v9[4] = sub_1005E7E24;
  v9[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceBatteryStatusMsg";
  uint64_t v78 = 42;
  v79 = &v77;
  uint64_t v10 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v10[4] = sub_1005E7F34;
  v10[5] = 0;
  v77 = "kCBMsgIdAccessoryGetTimeSyncIdMsg";
  uint64_t v78 = 33;
  v79 = &v77;
  uint64_t v11 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v11[4] = sub_1005E8128;
  v11[5] = 0;
  v77 = "kCBMsgIdAccessoryIsAccessoryMsg";
  uint64_t v78 = 31;
  v79 = &v77;
  uint64_t v12 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v12[4] = sub_1005E8238;
  v12[5] = 0;
  v77 = "kCBMsgIdAccessoryGenerateLinkKeyMsg";
  uint64_t v78 = 35;
  v79 = &v77;
  uint64_t v13 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  void v13[4] = sub_1005E8348;
  v13[5] = 0;
  v77 = "kCBMsgIdAccessorySetLinkKeyExMsg";
  uint64_t v78 = 32;
  v79 = &v77;
  uint64_t v14 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v14[4] = sub_1005E84E8;
  v14[5] = 0;
  v77 = "kCBMsgIdAccessorySetFirstSettingMsg";
  uint64_t v78 = 35;
  v79 = &v77;
  int v15 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v15[4] = sub_1005E8704;
  v15[5] = 0;
  v77 = "kCBMsgIdAccessorySetSecondSettingMsg";
  uint64_t v78 = 36;
  v79 = &v77;
  uint64_t v16 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v16[4] = sub_1005E8808;
  v16[5] = 0;
  v77 = "kCBMsgIdAccessoryGetFirstSettingMsg";
  uint64_t v78 = 35;
  v79 = &v77;
  __int16 v17 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v17[4] = sub_1005E890C;
  v17[5] = 0;
  v77 = "kCBMsgIdAccessorySetRemoteTimeSyncMsg";
  uint64_t v78 = 37;
  v79 = &v77;
  uint64_t v18 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  void v18[4] = sub_1005E8A1C;
  v18[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSecondSettingMsg";
  uint64_t v78 = 36;
  v79 = &v77;
  __int16 v19 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v19[4] = sub_1005E8B20;
  v19[5] = 0;
  v77 = "kCBMsgIdAccessoryRegisterCustomMessageClientMsg";
  uint64_t v78 = 47;
  v79 = &v77;
  unsigned int v20 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v20[4] = sub_1005E8C30;
  v20[5] = 0;
  v77 = "kCBMsgIdAccessoryDeregisterCustomMessageClientMsg";
  uint64_t v78 = 49;
  v79 = &v77;
  __int16 v21 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v21[4] = sub_1005E9020;
  v21[5] = 0;
  v77 = "kCBMsgIdAccessorySendCustomMessageMsg";
  uint64_t v78 = 37;
  v79 = &v77;
  size_t v22 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v22[4] = sub_1005E9304;
  v22[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceDiagnosticsMsg";
  uint64_t v78 = 40;
  v79 = &v77;
  __int16 v23 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v23[4] = sub_1005E943C;
  v23[5] = 0;
  v77 = "kCBMsgIdAccessorySendRequestPeriodicallyMsg";
  uint64_t v78 = 43;
  v79 = &v77;
  long long v24 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v24[4] = sub_1005E95D8;
  v24[5] = 0;
  v77 = "kCBMsgIdAccessoryCancelRequestPeriodicallyMsg";
  uint64_t v78 = 45;
  v79 = &v77;
  __int16 v25 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v25[4] = sub_1005E96FC;
  v25[5] = 0;
  v77 = "kCBMsgIdAccessorySendControlCommandMsg";
  uint64_t v78 = 38;
  v79 = &v77;
  uint64_t v26 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v26[4] = sub_1005E9800;
  v26[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDoubleTapActionMsg";
  uint64_t v78 = 38;
  v79 = &v77;
  unint64_t v27 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v27[4] = sub_1005E9924;
  v27[5] = 0;
  v77 = "kCBMsgIdAccessoryGetControlCommandMsg";
  uint64_t v78 = 37;
  v79 = &v77;
  __int16 v28 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v28[4] = sub_1005E9A34;
  v28[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDoubleTapActionExMsg";
  uint64_t v78 = 40;
  v79 = &v77;
  unsigned int v29 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v29[4] = sub_1005E9B7C;
  v29[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDoubleTapCapabilityMsg";
  uint64_t v78 = 42;
  v79 = &v77;
  __int16 v30 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v30[4] = sub_1005E9CA4;
  v30[5] = 0;
  v77 = "kCBMsgIdAccessoryGetInEarStatusMsg";
  uint64_t v78 = 34;
  v79 = &v77;
  size_t v31 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v31[4] = sub_1005E9DB4;
  v31[5] = 0;
  v77 = "kCBMsgIdAccessoryGetFeatureCapabilityMsg";
  uint64_t v78 = 40;
  v79 = &v77;
  long long v32 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v32[4] = sub_1005E9EE0;
  v32[5] = 0;
  v77 = "kCBMsgIdAccessorySetDoubleTapActionMsg";
  uint64_t v78 = 38;
  v79 = &v77;
  long long v33 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v33[4] = sub_1005EA008;
  v33[5] = 0;
  v77 = "kCBMsgIdAccessorySetDoubleTapActionExMsg";
  uint64_t v78 = 40;
  v79 = &v77;
  long long v34 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v34[4] = sub_1005EA10C;
  v34[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSettingFeatureBitMaskMsg";
  uint64_t v78 = 44;
  v79 = &v77;
  long long v35 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v35[4] = sub_1005EA230;
  v35[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAccessoryInfoMsg";
  uint64_t v78 = 36;
  v79 = &v77;
  long long v36 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v36[4] = sub_1005EA340;
  v36[5] = 0;
  v77 = "kCBMsgIdAccessoryReadDeviceVersionInfoMsg";
  uint64_t v78 = 41;
  v79 = &v77;
  long long v37 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v37[4] = sub_1005EA4DC;
  v37[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceColorMsg";
  uint64_t v78 = 34;
  v79 = &v77;
  long long v38 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v38[4] = sub_1005EA8D8;
  v38[5] = 0;
  v77 = "kCBMsgIdAccessoryGetWirelessSharingSpatialMsg";
  uint64_t v78 = 45;
  v79 = &v77;
  uint64_t v39 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v39[4] = sub_1005EA9E8;
  v39[5] = 0;
  v77 = "kCBMsgIdAccessorySetupCommandMsg";
  uint64_t v78 = 32;
  v79 = &v77;
  int v40 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v40[4] = sub_1005EAAF8;
  v40[5] = 0;
  v77 = "kCBMsgIdAccessorySendRelayMsgMsg";
  uint64_t v78 = 32;
  v79 = &v77;
  std::string::size_type v41 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v41[4] = sub_1005EAC48;
  v41[5] = 0;
  v77 = "kCBMsgIdAccessoryUpdateConnPriorityListMsg";
  uint64_t v78 = 42;
  v79 = &v77;
  int v42 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v42[4] = sub_1005EADF4;
  v42[5] = 0;
  v77 = "kCBMsgIdAccessoryGetNonAppleHAEPairedDevicesMsg";
  uint64_t v78 = 47;
  v79 = &v77;
  uint64_t v43 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v43[4] = sub_1005EAFF0;
  v43[5] = 0;
  v77 = "kCBMsgIdAccessorySmartRouteModeMsg";
  uint64_t v78 = 34;
  v79 = &v77;
  std::string v44 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v44[4] = sub_1005EB1D8;
  v44[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSmartRouteModeMsg";
  uint64_t v78 = 37;
  v79 = &v77;
  uint64_t v45 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v45[4] = sub_1005EB2DC;
  v45[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSmartRouteSupportMsg";
  uint64_t v78 = 40;
  v79 = &v77;
  uint64_t v46 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v46[4] = sub_1005EB3EC;
  v46[5] = 0;
  v77 = "kCBMsgIdAccessorySetDeviceStateOnPeerSrcMsg";
  uint64_t v78 = 43;
  v79 = &v77;
  uint64_t v47 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v47[4] = sub_1005EB4FC;
  v47[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSpatialAudioPlatformSupportMsg";
  uint64_t v78 = 50;
  v79 = &v77;
  v48 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v48[4] = sub_1005EB684;
  v48[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceSoundProfileSupportMsg";
  uint64_t v78 = 48;
  v79 = &v77;
  v49 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v49[4] = sub_1005EB794;
  v49[5] = 0;
  v77 = "kCBMsgIdAccessoryGetDeviceSoundProfileAllowedMsg";
  uint64_t v78 = 48;
  v79 = &v77;
  long long v50 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v50[4] = sub_1005EB8B0;
  v50[5] = 0;
  v77 = "kCBMsgIdAccessorySetDeviceSoundProfileAllowedMsg";
  uint64_t v78 = 48;
  v79 = &v77;
  long long v51 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v51[4] = sub_1005EB9D0;
  v51[5] = 0;
  v77 = "kCBMsgIdAccessoryGetCallManagementConfigMsg";
  uint64_t v78 = 43;
  v79 = &v77;
  uint64_t v52 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v52[4] = sub_1005EBAE0;
  v52[5] = 0;
  v77 = "kCBMsgIdAccessoryGetFeatureProxCardStatusMsg";
  uint64_t v78 = 44;
  v79 = &v77;
  std::string v53 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v53[4] = sub_1005EBC78;
  v53[5] = 0;
  v77 = "kCBMsgIdAccessorySetFeatureProxCardStatusMsg";
  uint64_t v78 = 44;
  v79 = &v77;
  long long v54 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v54[4] = sub_1005EBD94;
  v54[5] = 0;
  v77 = "kCBMsgIdAccessoryGetStereoHFPSupportMsg";
  uint64_t v78 = 39;
  v79 = &v77;
  uint64_t v55 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v55[4] = sub_1005EBEA4;
  v55[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAnnounceMessagesSupportMsg";
  uint64_t v78 = 46;
  v79 = &v77;
  long long v56 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v56[4] = sub_1005EBFB4;
  v56[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAACPCapabilityBitsMsg";
  uint64_t v78 = 41;
  v79 = &v77;
  long long v57 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v57[4] = sub_1005EC0C4;
  v57[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAACPCapabilityIntegerMsg";
  uint64_t v78 = 44;
  v79 = &v77;
  long long v58 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v58[4] = sub_1005EC260;
  v58[5] = 0;
  v77 = "kCBMsgIdAccessorySensorStreamTimeSyncEnableMsg";
  uint64_t v78 = 46;
  v79 = &v77;
  uint64_t v59 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v59[4] = sub_1005EC388;
  v59[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAnnounceCallsSupportMsg";
  uint64_t v78 = 43;
  v79 = &v77;
  int v60 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v60[4] = sub_1005EC48C;
  v60[5] = 0;
  v77 = "kCBMsgIdAccessorySpatialAudioModeMsg";
  uint64_t v78 = 36;
  v79 = &v77;
  long long v61 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v61[4] = sub_1005EC59C;
  v61[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSpatialAudioModeMsg";
  uint64_t v78 = 39;
  v79 = &v77;
  uint64_t v62 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v62[4] = sub_1005EC6E4;
  v62[5] = 0;
  v77 = "kCBMsgIdAccessorySpatialAudioAllowedMsg";
  uint64_t v78 = 39;
  v79 = &v77;
  v63 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v63[4] = sub_1005EC838;
  v63[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSpatialAudioAllowedMsg";
  uint64_t v78 = 42;
  v79 = &v77;
  v64 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v64[4] = sub_1005EC940;
  v64[5] = 0;
  v77 = "kCBMsgIdAccessoryGetAdaptiveLatencyJitterBufferLevelMsg";
  uint64_t v78 = 55;
  v79 = &v77;
  v65 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v65[4] = sub_1005ECA50;
  v65[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSpatialAudioActiveMsg";
  uint64_t v78 = 41;
  v79 = &v77;
  v66 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v66[4] = sub_1005ECB88;
  v66[5] = 0;
  v77 = "kCBMsgIdAccessorySetIsHiddenMsg";
  uint64_t v78 = 31;
  v79 = &v77;
  v67 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v67[4] = sub_1005ECC98;
  v67[5] = 0;
  v77 = "kCBMsgIdAccessoryGetGyroInformationMsg";
  uint64_t v78 = 38;
  v79 = &v77;
  v68 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v68[4] = sub_1005ECD9C;
  v68[5] = 0;
  v77 = "kCBMsgIdAccessoryGetSensorStreamingFrequencyMsg";
  uint64_t v78 = 47;
  v79 = &v77;
  v69 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v69[4] = sub_1005ECECC;
  v69[5] = 0;
  v77 = "kCBMsgIdAccessoryGetCaseSerialNumbersForAppleProductIdMsg";
  uint64_t v78 = 57;
  v79 = &v77;
  v70 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v70[4] = sub_1005ECFDC;
  v70[5] = 0;
  v77 = "kCBMsgIdAccessoryGetCaseSerialNumbersForAppleProductIdsMsg";
  uint64_t v78 = 58;
  v79 = &v77;
  v71 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v71[4] = sub_1005ED178;
  v71[5] = 0;
  v77 = "kCBMsgIdAccessoryGetPrimaryBudSideMsg";
  uint64_t v78 = 37;
  v79 = &v77;
  v72 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v72[4] = sub_1005ED368;
  v72[5] = 0;
  v77 = "kCBMsgIdAccessoryGetHeadphoneFeatureValueMsg";
  uint64_t v78 = 44;
  v79 = &v77;
  v73 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v73[4] = sub_1005ED480;
  v73[5] = 0;
  v77 = "kCBMsgIdAccessorySetHeadphoneFeatureValueMsg";
  uint64_t v78 = 44;
  v79 = &v77;
  v74 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v74[4] = sub_1005ED5A8;
  v74[5] = 0;
  v77 = "kCBMsgIdAccessorySendAdaptiveVolumeMessageMsg";
  uint64_t v78 = 45;
  v79 = &v77;
  v75 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v75[4] = sub_1005ED6CC;
  v75[5] = 0;
  v77 = "kCBMsgIdAccessorySendPMEConfigMessageMsg";
  uint64_t v78 = 40;
  v79 = &v77;
  v76 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v77, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v79);
  v76[4] = sub_1005ED838;
  v76[5] = 0;
}

void sub_1005E7050(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782880();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v6 = 7;
    goto LABEL_10;
  }
  if (!uint64) {
    goto LABEL_9;
  }
LABEL_3:
  uint64_t v13 = 0;
  LODWORD(v6) = sub_1004582A8(uint64, &v13);
  uint64_t uint64 = 0;
  if (!v6)
  {
    uint64_t uint64 = v13;
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(_DWORD *)(v7 + 40);
    au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    if (qword_1009F8168 != -1)
    {
      au_asid_t v12 = asid;
      dispatch_once(&qword_1009F8168, &stru_1009B9EB8);
      au_asid_t asid = v12;
    }
    sub_100553778(qword_1009F8160, v13, v8, asid);
  }
  uint64_t v6 = (int)v6;
LABEL_10:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgAccessoryManagerID", uint64);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

uint64_t sub_1005E71AC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_1007828E8();
  }
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 8);
  if (!uint64) {
    goto LABEL_20;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B9EB8);
  }
  if (sub_100553A48(qword_1009F8160, uint64, v8, asid))
  {
    uint64_t v11 = *(void **)(a1 + 80);
    if (v11 == (void *)(a1 + 88))
    {
LABEL_18:
      uint64_t v16 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040EB02D296uLL);
      *(void *)std::string buf = v16;
      v16[5] = v6;
      v16[7] = uint64;
      *uint64_t v16 = sub_1005E5B18;
      v16[1] = sub_1005E5B3C;
      v16[2] = sub_1005E5B68;
      v16[3] = sub_1005E5B98;
      v16[8] = *(void *)(a1 + 72);
      sub_100051620((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
      if (*(unsigned char *)(a1 + 105))
      {
        int v17 = 0;
      }
      else
      {
        int v17 = sub_100458314(uint64, *(long long **)buf, a1);
        *(unsigned char *)(a1 + 105) = 1;
      }
    }
    else
    {
      while (1)
      {
        uint64_t v12 = v11[4];
        if (*(void *)(v12 + 40) == v6 && *(void *)(v12 + 56) == uint64) {
          break;
        }
        uint64_t v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }
          while (!v15);
        }
        uint64_t v11 = v14;
        if (v14 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }
      int v17 = 1;
    }
  }
  else
  {
LABEL_20:
    int v17 = 7;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  __int16 v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v19);
    xpc_release(v19);
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1005E74B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005E74DC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100782984();
  }
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  if (!uint64) {
    goto LABEL_21;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 2048;
    uint64_t v25 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B9EB8);
  }
  if (sub_100553A48(qword_1009F8160, uint64, v8, asid))
  {
    uint64_t v11 = *(void **)(a1 + 80);
    if (v11 == (void *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100782950();
      }
      int v16 = 0;
    }
    else
    {
      while (1)
      {
        uint64_t v12 = v11[4];
        if (*(void *)(v12 + 40) == v6 && *(void *)(v12 + 56) == uint64) {
          break;
        }
        uint64_t v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }
          while (!v15);
        }
        uint64_t v11 = v14;
        if (v14 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }
      *(void *)std::string buf = v11[4];
      if (*(unsigned char *)(a1 + 105))
      {
        int v16 = sub_1004583B0(uint64, (long long *)v12);
        *(unsigned char *)(a1 + 105) = 0;
      }
      else
      {
        int v16 = 0;
      }
      sub_1000517A4(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }
  else
  {
LABEL_21:
    int v16 = 7;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v18);
    xpc_release(v18);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1005E7790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1005E77B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  size_t length = 0;
  data = (int *)xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v7 = data;
    string = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgName");
    uint64_t v9 = xpc_dictionary_get_uint64(v4, "kCBMsgArgClassOfDevice");
    uint64_t v10 = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgPincode");
    uint64_t value = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_1007829EC();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v11 = (int)sub_100458438(uint64, v7, string, v9, v10, &value);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      uint64_t v13 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
      uint64_t v15 = value;
      uint64_t v14 = "kCBMsgArgBTDevice";
      xpc_object_t v12 = v13;
      goto LABEL_13;
    }
    uint64_t v11 = 7;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
    sub_1007601A4();
  }
  xpc_object_t v12 = xpc_dictionary_create_reply(xdict);
  if (v12)
  {
    uint64_t v13 = v12;
    uint64_t v14 = "kCBMsgArgResult";
    uint64_t v15 = 8;
LABEL_13:
    xpc_dictionary_set_uint64(v12, v14, v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_1005E7970(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782A54();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100458928(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E7A5C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782ABC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100458BE0(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E7B48(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782B24();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100458CC0(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgState", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E7C58(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  int v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  unint64_t v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100782B8C();
  }
  if (v6 <= 0x100)
  {
    if (uint64) {
      int v10 = sub_100458DC0(uint64, v8, &v15, v6);
    }
    else {
      int v10 = 7;
    }
  }
  else
  {
    int v10 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (unint64_t i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1005E7E24(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LOBYTE(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782BF4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100458F54(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercent", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E7F34(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t v12 = 0;
  *(_OWORD *)uint64_t value = 0u;
  *(_OWORD *)uint64_t v11 = 0u;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782C5C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100459054(uint64, v6, (uint64_t)value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentSingle", LOBYTE(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentLeft", LOBYTE(v11[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentRight", LOBYTE(value[1]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentCase", LOBYTE(v11[1]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBatteryPercentCombined", v12);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingSingle", HIDWORD(value[0]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingLeft", HIDWORD(v11[0]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingRight", HIDWORD(value[1]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingCase", HIDWORD(v11[1]) != 0);
    xpc_dictionary_set_BOOL(v9, "kCBMsgArgBatteryIsChargingCombined", HIDWORD(v12) != 0);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E8128(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t value = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782CC4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045A8F8(uint64, v6, (uint64_t *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgID", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E8238(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782D2C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100459154(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgIsAccessory", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E8348(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  size_t v12 = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &v12);
  if (v12 == 6)
  {
    uint64_t v7 = (uint64_t)data;
    bytes[0] = 0;
    bytes[1] = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100782D94();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_10045924C(uint64, v7, bytes);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      int v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
      xpc_dictionary_set_data(v10, "kCBMsgArgLinkKey", bytes, 0x10uLL);
      goto LABEL_13;
    }
    uint64_t v8 = 7;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
    sub_1007601A4();
  }
  xpc_object_t v9 = xpc_dictionary_create_reply(xdict);
  if (v9)
  {
    int v10 = v9;
    xpc_dictionary_set_uint64(v9, "kCBMsgArgResult", 8uLL);
LABEL_13:
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005E84E8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  size_t length = 0;
  data = (int *)xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v7 = data;
    string = (char *)xpc_dictionary_get_string(v4, "kCBMsgArgName");
    uint64_t v9 = xpc_dictionary_get_uint64(v4, "kCBMsgArgClassOfDevice");
    int v10 = xpc_dictionary_get_uint64(v4, "kCBMsgArgServiceMask");
    size_t v19 = 0;
    uint64_t v11 = (long long *)xpc_dictionary_get_data(v4, "kCBMsgArgLinkKey", &v19);
    uint64_t value = 0;
    long long v21 = 0uLL;
    if (v11)
    {
      if (v19) {
        long long v21 = *v11;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100782DFC();
      if (uint64) {
        goto LABEL_7;
      }
    }
    else if (uint64)
    {
LABEL_7:
      uint64_t v12 = (int)sub_100459358(uint64, v7, string, v9, v10, &v21, &value);
LABEL_14:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      uint64_t v14 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
      uint64_t v16 = value;
      unint64_t v15 = "kCBMsgArgBTDevice";
      xpc_object_t v13 = v14;
      goto LABEL_16;
    }
    uint64_t v12 = 7;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
    sub_1007601A4();
  }
  xpc_object_t v13 = xpc_dictionary_create_reply(xdict);
  if (v13)
  {
    uint64_t v14 = v13;
    unint64_t v15 = "kCBMsgArgResult";
    uint64_t v16 = 8;
LABEL_16:
    xpc_dictionary_set_uint64(v13, v15, v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1005E8704(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgMicMode");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782E64();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045A144(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005E8808(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782ECC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045A9E8(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005E890C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782F34();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045BAB8(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgMicMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E8A1C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100782F9C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045A8E8(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005E8B20(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783004();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045BC58(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarDetect", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

uint64_t sub_1005E8C30(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgEventType");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgUserData");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_1007830A0();
  }
  v27[0] = 0;
  v27[1] = 0;
  sub_10003AED0((uint64_t)v27, a1 + 8);
  if (!uint64)
  {
    int v21 = 7;
    goto LABEL_28;
  }
  uint64_t v9 = *(void *)(a1 + 72);
  int v10 = *(_DWORD *)(v9 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v9 + 16));
  uint64_t v12 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)std::string buf = 134218496;
    uint64_t v29 = uint64;
    __int16 v30 = 1024;
    *(_DWORD *)size_t v31 = v10;
    *(_WORD *)&v31[4] = 2048;
    *(void *)&v31[6] = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEBUG, "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B9EB8);
  }
  if (!sub_100553A48(qword_1009F8160, uint64, v10, asid)) {
    goto LABEL_27;
  }
  xpc_object_t v13 = *(void **)(a1 + 80);
  if (v13 != (void *)(a1 + 88))
  {
    while (1)
    {
      uint64_t v14 = (void *)v13[4];
      if (v14[5] == v7 && v14[7] == uint64 && v14[6] == v6) {
        break;
      }
      unint64_t v15 = (void *)v13[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          unint64_t v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v13[2];
          BOOL v17 = *v16 == (void)v13;
          xpc_object_t v13 = v16;
        }
        while (!v17);
      }
      xpc_object_t v13 = v16;
      if (v16 == (void *)(a1 + 88)) {
        goto LABEL_19;
      }
    }
LABEL_27:
    int v21 = 1;
    goto LABEL_28;
  }
LABEL_19:
  uint64_t v18 = malloc_type_calloc(1uLL, 0x60uLL, 0x10A0040EB02D296uLL);
  uint64_t v26 = v18;
  v18[6] = v6;
  v18[7] = uint64;
  void v18[4] = sub_1005E5BC0;
  v18[5] = v7;
  v18[8] = *(void *)(a1 + 72);
  v18[9] = a1;
  if (v8) {
    int v19 = -1;
  }
  else {
    int v19 = 0;
  }
  *((_DWORD *)v18 + 22) = (int)(v6 << 25) >> 31;
  *((_DWORD *)v18 + 23) = v19;
  sub_100051620((uint64_t **)(a1 + 80), (unint64_t *)&v26, (uint64_t *)&v26);
  unsigned int v20 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v25 = *(void *)(a1 + 96);
    *(_DWORD *)std::string buf = 134219008;
    uint64_t v29 = uint64;
    __int16 v30 = 2048;
    *(void *)size_t v31 = v26 + 4;
    *(_WORD *)&v31[8] = 2048;
    *(void *)&v31[10] = v7;
    __int16 v32 = 2048;
    uint64_t v33 = v6;
    __int16 v34 = 2048;
    uint64_t v35 = v25;
    _os_log_debug_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEBUG, "BTAccessoryMsgHandler::handleBTAccessoryRegisterCustomMessageClientMsg accessoryManager:%llx callbacks:%p cbid:%llu messageType:%llX fBTAccessoryCallbacks.size():%lu", buf, 0x34u);
  }
  if (*(unsigned char *)(a1 + 104))
  {
    int v21 = 0;
  }
  else
  {
    int v21 = sub_10045BFC0(uint64, v26 + 4, -1, (uint64_t)(v26 + 9));
    if (v21)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078306C();
      }
    }
    else
    {
      *(unsigned char *)(a1 + 104) = 1;
    }
  }
LABEL_28:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  int v23 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v21);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v23);
    xpc_release(v23);
  }
  return sub_10003AFB4((uint64_t)v27);
}

void sub_1005E8FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005E9020(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100783108();
  }
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  if (uint64)
  {
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(_DWORD *)(v7 + 40);
    au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    int v10 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 134218496;
      *(void *)&uint8_t buf[4] = uint64;
      __int16 v22 = 1024;
      int v23 = v8;
      __int16 v24 = 2048;
      uint64_t v25 = asid;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping accessoryManagerID:%llx pid:%d asid:%llx", buf, 0x1Cu);
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B9EB8);
    }
    if (sub_100553A48(qword_1009F8160, uint64, v8, asid))
    {
      uint64_t v11 = *(void **)(a1 + 80);
      if (v11 == (void *)(a1 + 88))
      {
LABEL_18:
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_100782950();
        }
        int v16 = 0;
      }
      else
      {
        while (1)
        {
          uint64_t v12 = (uint64_t *)v11[4];
          if (v12[5] == v6 && v12[7] == uint64) {
            break;
          }
          xpc_object_t v13 = (void *)v11[1];
          if (v13)
          {
            do
            {
              uint64_t v14 = v13;
              xpc_object_t v13 = (void *)*v13;
            }
            while (v13);
          }
          else
          {
            do
            {
              uint64_t v14 = (void *)v11[2];
              BOOL v15 = *v14 == (void)v11;
              uint64_t v11 = v14;
            }
            while (!v15);
          }
          uint64_t v11 = v14;
          if (v14 == (void *)(a1 + 88)) {
            goto LABEL_18;
          }
        }
        *(void *)std::string buf = v11[4];
        if (*(unsigned char *)(a1 + 104))
        {
          int v16 = sub_10045C094(uint64, v12 + 4);
          *(unsigned char *)(a1 + 104) = 0;
        }
        else
        {
          int v16 = 0;
        }
        sub_1000517A4(a1 + 80, (unint64_t *)buf);
        free(*(void **)buf);
      }
    }
    else
    {
      int v16 = 1;
    }
  }
  else
  {
    int v16 = 7;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v18);
    xpc_release(v18);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1005E92E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1005E9304(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgClientType");
  size_t length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783170();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_10045C14C(uint64, v7, v6, (uint64_t)data, length);
    goto LABEL_6;
  }
  uint64_t v9 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005E943C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  int v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  size_t v14 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007831D8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    int v11 = sub_10045C670(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }
  int v11 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11) {
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_1005E95D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  unsigned __int16 v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgInterval");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783240();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_10045C854(uint64, v6, v7, v8);
    goto LABEL_6;
  }
  uint64_t v9 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005E96FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007832A8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045C9C8(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005E9800(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgValue");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783310();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_10045CB34(uint64, v6, v8, v7);
    goto LABEL_6;
  }
  uint64_t v9 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005E9924(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783378();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045B6E4(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapAction", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E9A34(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgType");
  unsigned __int16 v8 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSubType");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007833E0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_10045CDD4(uint64, v6, v7, v8, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v9 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005E9B7C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t value = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783448();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045B878(uint64, v6, (_DWORD *)&value + 1, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapActionLeft", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapActionRight", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E9CA4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007834B0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100459CD0(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgDoubleTapCapability", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E9DB4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  value[0] = 0x300000003;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783518();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045AD10(uint64, v6, (int *)value + 1, (int *)value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarStatusPrimary", HIDWORD(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgInEarStatusSecondary", LODWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005E9EE0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgFeature");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783580();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_100459E68(uint64, v6, v7, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgSupported", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EA008(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapAction");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007835E8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_100459748(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EA10C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapActionLeft");
  unsigned int v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgDoubleTapActionRight");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783650();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_1004599F4(uint64, v6, v7, v8);
    goto LABEL_6;
  }
  uint64_t v9 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005EA230(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007836B8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045DC88(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMSgArgFeatureBitMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EA340(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  int v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  size_t v14 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783720();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    int v11 = sub_10045DF54(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }
  int v11 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11) {
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_1005EA4DC(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v41 = a1;
  xpc_object_t v48 = xdict;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v3 = xpc_dictionary_get_uint64(value, "kCBMsgArgAddressStringBuffSize");
  uint64_t v4 = xpc_dictionary_get_uint64(value, "kCBMsgArgNameBuffSize");
  uint64_t v5 = xpc_dictionary_get_uint64(value, "kCBMsgArgManufacturerBuffSize");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgModelNumberBuffSize");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgSerialNumberBuffSize");
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgFWVersionBuffSize");
  uint64_t v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgHWVersionBuffSize");
  __chkstk_darwin(v9, v10);
  uint64_t v12 = (char *)&v40 - v11;
  size_t v46 = v3;
  bzero((char *)&v40 - v11, v3);
  __chkstk_darwin(v13, v14);
  int v16 = (char *)&v40 - v15;
  size_t v45 = v4;
  bzero((char *)&v40 - v15, v4);
  __chkstk_darwin(v17, v18);
  unsigned int v20 = (char *)&v40 - v19;
  size_t v44 = v5;
  bzero((char *)&v40 - v19, v5);
  __chkstk_darwin(v21, v22);
  __int16 v24 = (char *)&v40 - v23;
  size_t v43 = v6;
  bzero((char *)&v40 - v23, v6);
  __chkstk_darwin(v25, v26);
  __int16 v28 = (char *)&v40 - v27;
  size_t v42 = v7;
  bzero((char *)&v40 - v27, v7);
  __chkstk_darwin(v29, v30);
  __int16 v32 = (char *)&v40 - v31;
  bzero((char *)&v40 - v31, v8);
  __chkstk_darwin(v33, v34);
  long long v36 = (char *)&v40 - v35;
  bzero((char *)&v40 - v35, v9);
  *uint64_t v12 = 0;
  *int v16 = 0;
  *unsigned int v20 = 0;
  *__int16 v24 = 0;
  *__int16 v28 = 0;
  *__int16 v32 = 0;
  *long long v36 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100783788();
  }
  int v37 = sub_10045E5F4(uint64, v12, v46, v16, v45, v20, v44, v24, v43, v28, v42, v32, v8, v36, v9);
  xpc_object_t reply = xpc_dictionary_create_reply(v48);
  if (reply)
  {
    uint64_t v39 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v37);
    if (!v37)
    {
      xpc_dictionary_set_string(v39, "kCBMsgArgAddressString", v12);
      xpc_dictionary_set_string(v39, "kCBMsgArgName", v16);
      xpc_dictionary_set_string(v39, "kCBMsgArgManufacturer", v20);
      xpc_dictionary_set_string(v39, "kCBMsgArgModelNumber", v24);
      xpc_dictionary_set_string(v39, "kCBMsgArgSerialNumber", v28);
      xpc_dictionary_set_string(v39, "kCBMsgArgFWVersion", v32);
      xpc_dictionary_set_string(v39, "kCBMsgArgHWVersion", v36);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(v41 + 72) + 16), v39);
    xpc_release(v39);
  }
}

void sub_1005EA8D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007837C8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045E6D0(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgColor", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EA9E8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783830();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100461DB0(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgWSSpatial", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EAAF8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgSetupType");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgOPType");
  size_t length = 0;
  data = (unsigned __int16 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783898();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v10 = (int)sub_10045AEA8(uint64, v6, v7, v8, data, (unsigned __int16)length);
    goto LABEL_6;
  }
  uint64_t v10 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1005EAC48(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgRelayMsgType");
  size_t length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v9 = (uint64_t)data;
    size_t v15 = 0;
    uint64_t v10 = xpc_dictionary_get_data(value, "kCBMsgArgData", &v15);
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100783900();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v11 = (int)sub_10045B1AC(uint64, v6, v9, v7, v10, (unsigned __int16)v15);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      uint64_t v13 = reply;
      uint64_t v14 = v11;
      goto LABEL_13;
    }
    uint64_t v11 = 7;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
    sub_1007601A4();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    uint64_t v14 = 8;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_1005EADF4(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v21 = a1;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v20 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v5 = xpc_dictionary_get_uint64(value, "kCBMsgArgCmdReqType");
  xpc_object_t array = xpc_dictionary_get_array(value, "kCBMsgArgDeviceArray");
  size_t count = xpc_array_get_count(array);
  unsigned __int8 v8 = count;
  uint64_t v9 = (unsigned __int16)count;
  __chkstk_darwin(count, 6 * (unsigned __int16)count);
  uint64_t v11 = (int *)((char *)&v20 - v10);
  bzero((char *)&v20 - v10, v12);
  if (v9)
  {
    size_t v13 = 0;
    uint64_t v14 = v11;
    do
    {
      size_t length = 0;
      data = xpc_array_get_data(array, v13, &length);
      if (length >= 6) {
        size_t v16 = 6;
      }
      else {
        size_t v16 = length;
      }
      memcpy(v14, data, v16);
      ++v13;
      uint64_t v14 = (int *)((char *)v14 + 6);
    }
    while (v9 != v13);
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783968();
    if (uint64) {
      goto LABEL_9;
    }
  }
  else if (uint64)
  {
LABEL_9:
    uint64_t v17 = (int)sub_10045B450(uint64, v20, v5, v11, v8);
    goto LABEL_12;
  }
  uint64_t v17 = 7;
LABEL_12:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v19 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(v21 + 72) + 16), v19);
    xpc_release(v19);
  }
}

void sub_1005EAFF0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  if (v6 > 0x3E7)
  {
    unint64_t v7 = 1000;
  }
  else
  {
    uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
    unint64_t v7 = v6;
  }
  unint64_t v15 = 0;
  __chkstk_darwin(v6, 8 * v7);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007839D0();
    if (uint64) {
      goto LABEL_6;
    }
  }
  else if (uint64)
  {
LABEL_6:
    uint64_t v10 = (int)sub_10045E83C(uint64, (unint64_t *)v9, &v15, v7);
    goto LABEL_9;
  }
  uint64_t v10 = 7;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (v15)
    {
      for (unint64_t i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, *(void *)&v9[8 * i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1005EB1D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783A38();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045FE54(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EB2DC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783AA0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045FF28(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EB3EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783B08();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1004602CC(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EB4FC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  size_t length = 0;
  data = xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v8 = (uint64_t)data;
    int v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryDeviceState");
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100783B70();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v10 = (int)sub_10046067C(uint64, v6, v8, v9);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      size_t v12 = reply;
      uint64_t v13 = v10;
      goto LABEL_13;
    }
    uint64_t v10 = 7;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
    sub_1007601A4();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v12 = reply;
    uint64_t v13 = 8;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1005EB684(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783BD8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046090C(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EB794(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = 0;
  if (v4)
  {
    int v5 = v4;
    uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100783C40();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_100461060(uint64, v7, (int *)&value);
      goto LABEL_8;
    }
    uint64_t v8 = 7;
  }
  else
  {
    uint64_t v8 = 3;
  }
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EB8B0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = -1;
  if (v4)
  {
    int v5 = v4;
    uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100783CA8();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_100461184(uint64, v7, (int *)&value);
      goto LABEL_8;
    }
    uint64_t v8 = 7;
  }
  else
  {
    uint64_t v8 = 3;
  }
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EB9D0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    int v5 = value;
    uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    int v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBool");
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100783D10();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v9 = (int)sub_1004613A8(uint64, v7, v8);
      goto LABEL_8;
    }
    uint64_t v9 = 7;
  }
  else
  {
    uint64_t v9 = 3;
  }
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005EBAE0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  memset(v14, 0, 7);
  if (!value)
  {
    unsigned int v9 = 0;
    uint64_t v8 = 3;
    goto LABEL_11;
  }
  int v5 = value;
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783D78();
    if (uint64) {
      goto LABEL_4;
    }
LABEL_10:
    unsigned int v9 = 0;
    uint64_t v8 = 7;
    goto LABEL_11;
  }
  if (!uint64) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v8 = (int)sub_100460BF4(uint64, v7, v14);
  unsigned int v9 = v14[0];
  if (LOBYTE(v14[0]) == 1)
  {
    unint64_t v11 = v14[0] | ((unint64_t)(LOWORD(v14[1]) | (BYTE2(v14[1]) << 16)) << 32);
    unsigned int v10 = (v14[0] >> 20) & 0xF0 | (v11 >> 24) & 0xF00 | (v11 >> 28) & 0xF000 | HIDWORD(v11) & 0xF0000 | 1;
    goto LABEL_12;
  }
  if (LOBYTE(v14[0]))
  {
    unsigned int v10 = 0;
    goto LABEL_12;
  }
LABEL_11:
  unsigned int v10 = (v9 >> 4) & 0xF0 | (v9 >> 8) & 0xF00;
LABEL_12:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v13, "kCBMsgArgCallManagementMessage", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_1005EBC78(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t value = 0;
  if (v4)
  {
    int v5 = v4;
    uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100783DE0();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_100460D8C(uint64, v7, (uint64_t *)&value);
      goto LABEL_8;
    }
    uint64_t v8 = 7;
  }
  else
  {
    uint64_t v8 = 3;
  }
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    unsigned int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgFeatureProxCardStatusMessage", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EBD94(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    int v5 = value;
    uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
    uint64_t v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgBTDevice");
    uint64_t v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgFeatureProxCardStatusMessage");
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100783E48();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v9 = (int)sub_100460F70(uint64, v7, v8);
      goto LABEL_8;
    }
    uint64_t v9 = 7;
  }
  else
  {
    uint64_t v9 = 3;
  }
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    unint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005EBEA4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  LODWORD(value) = 0;
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783EB0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100460A44(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStereoHFPSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EBFB4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783F18();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100459F84(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAnnounceMsgSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EC0C4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  unsigned int v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  size_t v14 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783F80();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    int v11 = sub_10045E418(uint64, v6, v10, &v14, v7);
    goto LABEL_6;
  }
  int v11 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11) {
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_1005EC260(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAACPCapabilityInteger");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100783FE8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045E534(uint64, v6, v7, &value);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    unsigned int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EC388(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100784050();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045A8F0(uint64, v7, v6);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    unsigned int v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EC48C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007840B8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100461578(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAnnounceCallsSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005EC59C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  string = xpc_dictionary_get_string(value, "kCBMsgArgAccessoryBundleID");
  int v9 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryHeadTrackingStatus");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100784120();
    if (string)
    {
LABEL_3:
      if (uint64) {
        uint64_t v10 = (int)sub_10045F5A0(uint64, v6, (uint64_t)string, v7, v9);
      }
      else {
        uint64_t v10 = 7;
      }
      goto LABEL_8;
    }
  }
  else if (string)
  {
    goto LABEL_3;
  }
  uint64_t v10 = 3;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1005EC6E4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(v4, "kCBMsgArgAccessoryBundleID");
  value[0] = 0xFFFFFFFFFFLL;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100784188();
    if (string)
    {
LABEL_3:
      if (uint64) {
        uint64_t v8 = (int)sub_10045FA64(uint64, v6, (uint64_t)string, (int *)value + 1, (int *)value);
      }
      else {
        uint64_t v8 = 7;
      }
      goto LABEL_8;
    }
  }
  else if (string)
  {
    goto LABEL_3;
  }
  uint64_t v8 = 3;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgAccessoryGenericConfigMode", HIDWORD(value[0]));
    xpc_dictionary_set_uint64(v10, "kCBMsgArgAccessoryHeadTrackingStatus", LODWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EC838(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryGenericConfigMode");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007841F0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045EDFC(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005EC940(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100784274();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045F208(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005ECA50(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LOWORD(value) = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryJBL");
  uint64_t v10 = v6;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007842F4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046172C(uint64, &v10, (unsigned __int16 *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryJBL", (unsigned __int16)value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBTDevice", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005ECB88(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10078435C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10045E9F8(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgAccessoryGenericConfigMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005ECC98(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007843C4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10045BDFC(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005ECD9C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  memset(length, 0, sizeof(length));
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10078442C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    int v7 = sub_100461BD4(uint64, v6, &length[1], length);
    goto LABEL_6;
  }
  int v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    if (!v7 && *(void *)&length[1]) {
      xpc_dictionary_set_data(v9, "kCBMsgArgData", *(const void **)&length[1], length[0]);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
  if (*(void *)&length[1]) {
    free(*(void **)&length[1]);
  }
}

void sub_1005ECECC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100784494();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100461A44(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgSensorStreamingFrequency", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005ECFDC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgProductId");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v7, v8);
  uint64_t v10 = (char *)&v14 - v9;
  bzero((char *)&v14 - v9, v7);
  size_t v14 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007844FC();
    if (v6) {
      goto LABEL_3;
    }
  }
  else if (v6)
  {
LABEL_3:
    int v11 = sub_100461F44(v6, uint64, v10, &v14, v7);
    goto LABEL_6;
  }
  int v11 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    if (!v11) {
      xpc_dictionary_set_data(v13, "kCBMsgArgData", v10, v14);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v13);
    xpc_release(v13);
  }
}

void sub_1005ED178(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_object_t v5 = xpc_dictionary_get_value(value, "kCBMsgArgProductIds");
  size_t count = xpc_array_get_count(v5);
  uint64_t v7 = malloc_type_malloc(4 * count, 0x100004052888210uLL);
  if (count)
  {
    for (size_t i = 0; i != count; ++i)
      v7[i] = xpc_array_get_uint64(v5, i);
  }
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v10 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v10, v11);
  uint64_t v13 = (char *)&v17 - v12;
  bzero((char *)&v17 - v12, v10);
  size_t v17 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100784564();
    if (uint64) {
      goto LABEL_6;
    }
  }
  else if (uint64)
  {
LABEL_6:
    int v14 = sub_100462288(uint64, (uint64_t)v7, count, v13, &v17, v10);
    goto LABEL_9;
  }
  int v14 = 7;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v16 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    if (!v14) {
      xpc_dictionary_set_data(v16, "kCBMsgArgData", v13, v17);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v16);
    xpc_release(v16);
  }
  free(v7);
}

void sub_1005ED368(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 3;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007845CC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    int v7 = sub_1004625F4(uint64, v6, (int *)&value);
    goto LABEL_6;
  }
  int v7 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    if (!v7) {
      xpc_dictionary_set_uint64(v9, "kCBMsgArgPrimarySide", value);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1005ED480(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(v4, "kCBMsgArgHeadphoneFeatureType");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100784634();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1004627F8(uint64, v6, v7, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v8 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgHeadphoneFeatureValue", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1005ED5A8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgHeadphoneFeatureType");
  int v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgHeadphoneFeatureValue");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10078469C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_100462CDC(uint64, v6, v7, v8);
    goto LABEL_6;
  }
  uint64_t v9 = 7;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1005ED6CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int16 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgAVMsgLen");
  size_t length = 0;
  data = (unsigned __int8 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == v7)
  {
    uint64_t v9 = data;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_100784704();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v10 = (int)sub_10045C3F0(uint64, v6, v7, v9);
      goto LABEL_10;
    }
    uint64_t v10 = 7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078476C();
    }
    uint64_t v10 = 3;
  }
LABEL_10:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1005ED838(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAccessoryManagerID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned __int16 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgPMEMsgLen");
  size_t length = 0;
  data = (unsigned __int8 *)xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == v7)
  {
    uint64_t v9 = data;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_1007847D4();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v10 = (int)sub_10045C530(uint64, v6, v7, v9);
      goto LABEL_10;
    }
    uint64_t v10 = 7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078483C();
    }
    uint64_t v10 = 3;
  }
LABEL_10:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

uint64_t sub_1005ED9A8(uint64_t a1)
{
  uint64_t v2 = a1 + 80;
  uint64_t v3 = *(void **)(a1 + 80);
  xpc_object_t v4 = (void *)(a1 + 88);
  if (v3 != (void *)(a1 + 88))
  {
    do
    {
      xpc_object_t v5 = (int64x2_t *)v3[4];
      int64x2_t v14 = 0u;
      int64x2_t v15 = 0u;
      int64x2_t v6 = v5[1];
      int64x2_t v14 = *v5;
      int64x2_t v15 = v6;
      uint64_t v7 = v5[2].i64[0];
      uint64_t v13 = v7;
      unint64_t v8 = v5[3].u64[1];
      if (vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v14), (int32x4_t)vceqzq_s64(v6))))))
      {
        sub_1004583B0(v8, (long long *)v14.i8);
      }
      else if (v7 && *(unsigned char *)(a1 + 104))
      {
        sub_10045C094(v8, &v13);
        *(unsigned char *)(a1 + 104) = 0;
      }
      free(v5);
      uint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != v4);
  }
  sub_1000486F0(v2, *(void **)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = v4;
  sub_1000486F0(v2, 0);
  *(void *)a1 = &off_1009AB480;
  sub_100052DA4(a1 + 8);
  return a1;
}

void sub_1005EDAE8(_Unwind_Exception *a1)
{
  sub_1000486F0(v2, *(void **)(v1 + 88));
  *(void *)uint64_t v1 = &off_1009AB480;
  sub_100052DA4(v1 + 8);
  _Unwind_Resume(a1);
}

void sub_1005EDB28(uint64_t a1)
{
  sub_1005ED9A8(a1);

  operator delete();
}

BOOL sub_1005EDB60(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  BOOL v11 = string;
  size_t v12 = strlen(string);
  xpc_object_t v5 = sub_1003C2560(&xmmword_100A1A050, (uint64_t)&v11);
  if (v5)
  {
    BOOL v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    int64x2_t v6 = sub_1005EDD9C((uint64_t)&xmmword_100A1A050, (uint64_t)&v11, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v13);
    uint64_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if (v8) {
      uint64_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }
  return v5 != 0;
}

uint64_t sub_1005EDC5C(uint64_t a1)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 8);
  uint64_t v2 = *(void **)(a1 + 80);
  uint64_t v3 = (void *)(a1 + 88);
  if (v2 != (void *)(a1 + 88))
  {
    do
    {
      xpc_object_t v4 = (int64x2_t *)v2[4];
      int64x2_t v13 = 0u;
      int64x2_t v14 = 0u;
      int64x2_t v5 = v4[1];
      int64x2_t v13 = *v4;
      int64x2_t v14 = v5;
      uint64_t v6 = v4[2].i64[0];
      uint64_t v12 = v6;
      unint64_t v7 = v4[3].u64[1];
      if ((vmaxv_u16((uint16x4_t)vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64(v13), (int32x4_t)vceqzq_s64(v5))))) & 1) != 0&& *(unsigned char *)(a1 + 105))
      {
        sub_1004583B0(v7, (long long *)v13.i8);
        *(unsigned char *)(a1 + 105) = 0;
      }
      else if (v6 && *(unsigned char *)(a1 + 104))
      {
        sub_10045C094(v7, &v12);
        *(unsigned char *)(a1 + 104) = 0;
      }
      free(v4);
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v3);
  }
  sub_1000486F0(a1 + 80, *(void **)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = v3;
  return sub_10003AFB4((uint64_t)v15);
}

void sub_1005EDD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1005EDD9C(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003C208C((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    int64x2_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      int64x2_t v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        int64x2_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12) {
              break;
            }
          }
          int64x2_t v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  int64x2_t v14 = operator new(0x30uLL);
  *(void *)int64x2_t v14 = 0;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_1000A9204(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)int64x2_t v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }
  *(void *)int64x2_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1005EDFF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1005EE008(id a1)
{
}

void sub_1005EE04C()
{
}

void sub_1005EE08C()
{
  xmmword_100A1A050 = 0u;
  unk_100A1A060 = 0u;
  dword_100A1A070 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1005E51F8, &xmmword_100A1A050, (void *)&_mh_execute_header);
}

uint64_t sub_1005EE0F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  free(*(void **)(a1 + 24));
  return a1;
}

uint64_t sub_1005EE150(uint64_t a1)
{
  uint64_t v2 = (void *)sub_100283C88(a1, 7);
  void *v2 = off_1009B9EE8;
  sub_100052DA8(v2 + 32);
  *(void *)(a1 + 320) = 0;
  return a1;
}

void sub_1005EE1A4(_Unwind_Exception *a1)
{
  sub_100283DC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005EE1BC(void *a1)
{
  *a1 = off_1009B9EE8;
  sub_100052DA4(a1 + 32);

  return sub_100283DC8((uint64_t)a1);
}

void sub_1005EE214(void *a1)
{
  *a1 = off_1009B9EE8;
  sub_100052DA4(a1 + 32);
  sub_100283DC8((uint64_t)a1);

  operator delete();
}

BOOL sub_1005EE280()
{
  long long v3 = off_1009B9F88;
  char v2 = 0;
  sub_10001B8E0(&v2);
  BOOL v0 = sub_100168344(0, (uint64_t)sub_1005EE834, (uint64_t)sub_1005EE9E4, (uint64_t)sub_1005EEA8C, (uint64_t)&off_1009B9F48, (uint64_t)&v3, 0, 9, 15) != 0;
  sub_10001B8AC(&v2);
  return v0;
}

void sub_1005EE328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005EE33C(int a1, int a2, int a3, int a4, void *__src, size_t __len, __int16 a7, __int16 a8, uint64_t a9, __int16 a10)
{
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v30 = 0;
  sub_1002E5698(__dst, __src, __len);
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009BA018);
  }
  size_t v16 = off_1009FB940;
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3321888768;
  v18[2] = sub_1005F0AB4;
  v18[3] = &unk_1009B9FC8;
  int v22 = a1;
  int v23 = a2;
  int v24 = a3;
  int v25 = a4;
  if (SHIBYTE(v30) < 0)
  {
    sub_10003B098(&__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    long long __p = *(_OWORD *)__dst;
    uint64_t v20 = v30;
  }
  __int16 v26 = a7;
  __int16 v27 = a8;
  uint64_t v21 = a9;
  __int16 v28 = a10;
  sub_1004C9DF0((uint64_t)v16, v18);
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__dst[0]);
  }
  return 0;
}

void sub_1005EE494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005EE4C8(int a1, int a2, uint64_t *a3, int a4, __int16 a5, __int16 a6, uint64_t a7, __int16 a8)
{
  uint64_t v15 = *a3;
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009BA018);
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_1005F0B34;
  v17[3] = &unk_1009B1058;
  int v18 = a1;
  int v19 = a2;
  uint64_t v20 = v15;
  int v21 = a4;
  __int16 v22 = a5;
  __int16 v23 = a6;
  v17[4] = a7;
  __int16 v24 = a8;
  sub_1004C9DF0((uint64_t)off_1009FB940, v17);
  return 0;
}

uint64_t sub_1005EE5C0(int a1, int a2, int a3, uint64_t *a4, int a5, uint64_t a6, __int16 a7)
{
  uint64_t v13 = *a4;
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009BA018);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1005F0BB0;
  v15[3] = &unk_1009B1058;
  int v16 = a1;
  int v17 = a2;
  uint64_t v18 = v13;
  int v19 = a5;
  int v20 = a3;
  v15[4] = a6;
  __int16 v21 = a7;
  sub_1004C9DF0((uint64_t)off_1009FB940, v15);
  return 0;
}

void sub_1005EE6AC(uint64_t a1, __int16 a2, int a3)
{
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009BA018);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005F0C24;
  v6[3] = &unk_1009AD2E0;
  v6[4] = a1;
  __int16 v8 = a2;
  int v7 = a3;
  sub_1004C9DF0((uint64_t)off_1009FB940, v6);
}

uint64_t sub_1005EE76C(uint64_t a1, __int16 a2, uint64_t a3, __int16 a4)
{
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009BA018);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  v9[2] = sub_1005F0C8C;
  v9[3] = &unk_100998280;
  __int16 v10 = a2;
  _OWORD v9[4] = a1;
  v9[5] = a3;
  __int16 v11 = a4;
  sub_1004C9DF0((uint64_t)off_1009FB940, v9);
  return 0;
}

void sub_1005EE834(int *a1, char a2, const void *a3, unsigned int a4, __int16 a5)
{
  int v17 = *a1;
  __int16 v18 = *((_WORD *)a1 + 2);
  uint64_t v15 = 0;
  int v16 = 0;
  sub_1000335D8(&v15, a3, a4);
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009BA018);
  }
  int v7 = off_1009FB940;
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3321888768;
  v8[2] = sub_1005F0978;
  v8[3] = &unk_1009B9F98;
  int v12 = v17;
  __int16 v13 = v18;
  char v14 = a2;
  unint64_t v9 = &off_100998428;
  __int16 v10 = v16;
  if (v16) {
    sub_100037354((uint64_t)v16);
  }
  __int16 v11 = a5;
  sub_1004C9DF0((uint64_t)v7, v8);
  unint64_t v9 = &off_100998428;
  if (v10) {
    sub_1000368F4(v10);
  }
  uint64_t v15 = &off_100998428;
  if (v16) {
    sub_1000368F4(v16);
  }
}

void sub_1005EE994(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v15 - 56) = &off_100998428;
  int v17 = *(atomic_uint **)(v15 - 48);
  if (v17) {
    sub_1000368F4(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005EE9E4(__int16 a1)
{
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009BA018);
  }
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_1005F09E8;
  v2[3] = &unk_1009AD7F0;
  __int16 v3 = a1;
  sub_1004C9DF0((uint64_t)off_1009FB940, v2);
}

void sub_1005EEA8C(__int16 a1, int a2, int a3)
{
  if (qword_1009FB948 != -1) {
    dispatch_once(&qword_1009FB948, &stru_1009BA018);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1005F0A4C;
  v6[3] = &unk_1009A0B58;
  __int16 v9 = a1;
  int v7 = a2;
  int v8 = a3;
  sub_1004C9DF0((uint64_t)off_1009FB940, v6);
}

BOOL sub_1005EEB48()
{
  char v2 = 0;
  sub_10001B8E0(&v2);
  BOOL v0 = sub_100168C28() != 0;
  sub_10001B8AC(&v2);
  return v0;
}

void sub_1005EEB90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

BOOL sub_1005EEBA4(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 256);
  uint64_t v4 = *(void *)(a1 + 320);
  if (v4 && *(void *)v4 == a2)
  {
    unsigned int v6 = *(unsigned __int16 *)(v4 + 8);
    sub_10003AFE8((uint64_t)v9);
    char v8 = 0;
    sub_10001B8E0(&v8);
    BOOL v5 = sub_1001696FC(v6) != 0;
    sub_10001B8AC(&v8);
  }
  else
  {
    BOOL v5 = 1;
  }
  sub_10003AFB4((uint64_t)v9);
  return v5;
}

void sub_1005EEC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

uint64_t sub_1005EEC60(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 256);
  uint64_t v6 = *(void *)(a1 + 320);
  if (v6 && *(void *)v6 == a2)
  {
    char v10 = 0;
    sub_10001B8E0(&v10);
    int v8 = sub_10011484C(*(unsigned __int16 *)(v6 + 8), a3);
    sub_10001B8AC(&v10);
    if (v8) {
      uint64_t v7 = 312;
    }
    else {
      uint64_t v7 = 0;
    }
  }
  else
  {
    uint64_t v7 = 312;
  }
  sub_10003AFB4((uint64_t)v11);
  return v7;
}

void sub_1005EED00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

unsigned char *sub_1005EED24(void *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B9FF8);
  }
  LODWORD(v31) = *(_DWORD *)a2;
  WORD2(v31) = *(_WORD *)(a2 + 4);
  uint64_t v10 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v31, 1);
  v28[0] = 0;
  v28[1] = 0;
  sub_1005DA858(v28, v10);
  char v11 = sub_1005DA85C((uint64_t)v28, 6, 0x64u);
  int v12 = sub_1004BDDAC((uint64_t)a1, v10);
  char v27 = 0;
  sub_10001B8E0(&v27);
  if ((a3 & v12) == 1)
  {
    __int16 v13 = (const void *)sub_10004A6E4(a4);
    unsigned __int8 v14 = sub_100045F00(a4);
    int v15 = sub_100168F7C(a5, v13, v14, "0000");
    int v12 = 1;
  }
  else
  {
    uint64_t v39 = 0;
    long long v38 = 0u;
    memset(v37, 0, sizeof(v37));
    long long v35 = 0u;
    *(_OWORD *)long long v36 = 0u;
    long long v33 = 0u;
    *(_OWORD *)uint64_t v34 = 0u;
    long long v31 = 0u;
    *(_OWORD *)__int16 v32 = 0u;
    sub_1006161E0((uint64_t)&v31 + 1);
    BYTE2(v32[0]) = 0;
    BYTE4(v32[0]) = 0;
    BYTE2(v34[0]) = 0;
    BYTE4(v34[0]) = 0;
    DWORD1(v37[1]) = 0;
    long long v33 = 0uLL;
    v32[1] = 0;
    LOBYTE(v34[0]) = 0;
    long long v35 = 0uLL;
    v34[1] = 0;
    LOBYTE(v36[0]) = 0;
    memset(v37, 0, 19);
    v36[1] = 0;
    BYTE8(v37[1]) = 1;
    BYTE2(v39) = 0;
    *(void *)((char *)&v37[1] + 14) = 0;
    *(void *)((char *)&v37[1] + 9) = 0;
    long long v38 = 0uLL;
    *((void *)&v37[2] + 1) = 0;
    LOBYTE(v39) = 0;
    sub_1004783B8(v10, (uint64_t)&v31);
    char v26 = 0;
    uint64_t v16 = sub_100017768();
    sub_10004191C(v24, "PBAP");
    sub_10004191C(__p, "BypassRCP");
    (*(void (**)(uint64_t, void **, unsigned char *, char *))(*(void *)v16 + 72))(v16, v24, __p, &v26);
    if (v30 < 0) {
      operator delete(*(void **)__p);
    }
    if (v25 < 0) {
      operator delete(v24[0]);
    }
    if (BYTE11(v38) || ((char v17 = sub_10047F1FC(v10), v26) ? (v18 = 1) : (v18 = v17), (v18 & 1) != 0))
    {
      int v19 = 0;
    }
    else
    {
      __int16 v22 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v10, v24);
        __int16 v23 = v25 >= 0 ? v24 : (void **)v24[0];
        *(_DWORD *)long long __p = 136446210;
        *(void *)&__p[4] = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Phonebook connection to device %{public}s is unauthorized as user has not yet responded to Rental Car Privacy dialog", __p, 0xCu);
        if (v25 < 0) {
          operator delete(v24[0]);
        }
      }
      int v12 = 0;
      *(unsigned char *)(v10 + 1324) = 1;
      int v19 = 1742;
    }
    int v15 = sub_100168DE8(a5, v11, v12, v19);
    if (SHIBYTE(v37[0]) < 0) {
      operator delete(v36[1]);
    }
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[1]);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(v32[1]);
    }
    nullsub_95((char *)&v31 + 1);
  }
  sub_10001B910(&v27);
  if (v15) {
    int v20 = 0;
  }
  else {
    int v20 = v12;
  }
  if (v20 == 1) {
    sub_1004BD554(a1, v10);
  }
  if ((sub_10047E08C(v10) & 1) == 0)
  {
    sub_10047EE40(v10);
    sub_1004BE7AC();
  }
  return sub_10001B8AC(&v27);
}

void sub_1005EF178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char a28)
{
}

unsigned char *sub_1005EF1F8(uint64_t a1, int a2)
{
  char v7 = 0;
  sub_10001B8E0(&v7);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 256);
  uint64_t v4 = *(void *)(a1 + 320);
  if (v4 && *(unsigned __int16 *)(v4 + 8) == a2)
  {
    sub_1005EE0F8(v4);
    operator delete();
  }
  sub_10003AFB4((uint64_t)v6);
  return sub_10001B8AC(&v7);
}

void sub_1005EF2AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  sub_10001B8AC((unsigned char *)(v2 - 17));
  _Unwind_Resume(a1);
}

unsigned char *sub_1005EF2D0(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  uint64_t v5 = *(void *)(a1 + 320);
  if (v5 && *(unsigned __int16 *)(v5 + 8) == a2)
  {
    uint64_t v8 = *(void *)v5;
    v29[0] = 0;
    v29[1] = 0;
    sub_1005DA858(v29, v8);
    if (a3 == 1)
    {
      if (a4) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = 10;
      }
    }
    else if (a3 || a4 >= 6)
    {
      uint64_t v9 = 0;
    }
    else
    {
      uint64_t v9 = dword_1007BFD98[a4];
    }
    char v18 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      int v19 = "Invalid";
      int v20 = "Sim";
      if (a3 != 1) {
        int v20 = "Invalid";
      }
      if (a3) {
        __int16 v21 = v20;
      }
      else {
        __int16 v21 = "Local";
      }
      if (a4 <= 5) {
        int v19 = off_1009BA070[a4];
      }
      sub_100474E18(v8, &__p);
      if (v33 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = v21;
      __int16 v35 = 2080;
      long long v36 = v19;
      __int16 v37 = 2082;
      long long v38 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received 'get size' request for '%s'/'%s' from device %{public}s", buf, 0x20u);
      if (v33 < 0) {
        operator delete(__p);
      }
    }
    int v16 = sub_1005DA85C((uint64_t)v29, v9, 0x64u);
    uint64_t v15 = sub_1005DB09C((uint64_t)v29, v9);
    uint64_t v14 = v23;
    uint64_t v13 = sub_1005DB138((uint64_t)v29, v9);
    uint64_t v12 = v24;
    uint64_t v11 = sub_1005DB1A8((uint64_t)v29);
    uint64_t v10 = v25;
    char v26 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v8, buf);
      char v27 = buf;
      if (v37 < 0) {
        char v27 = *(unsigned char **)buf;
      }
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = v16;
      __int16 v31 = 2082;
      __int16 v32 = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Sending response (%u entries) to device %{public}s", (uint8_t *)&__p, 0x12u);
      if (SHIBYTE(v37) < 0) {
        operator delete(*(void **)buf);
      }
    }
    int v17 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    LOWORD(v16) = 0;
    int v17 = 1715;
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  sub_100169034(a2, v16, v15, v14, v13, v12, v11, v10, v17);
  return sub_10001B8AC(buf);
}

void sub_1005EF5B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_1005EF5D0(uint64_t a1, int a2, unsigned int a3, unsigned int a4, unsigned int a5, long long *a6, uint64_t a7, unsigned int a8, void (*a9)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16), unsigned __int16 a10)
{
  uint64_t v10 = *(void *)(a1 + 320);
  if (!v10)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
LABEL_9:
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = 1715;
    goto LABEL_10;
  }
  if (*(unsigned __int16 *)(v10 + 8) != a10)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v10 = 0;
    goto LABEL_9;
  }
  uint64_t v17 = *(void *)v10;
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v54 = v17;
  sub_1005DA858(v61, v17);
  if (a2 == 1)
  {
    if (a3) {
      unsigned int v18 = 0;
    }
    else {
      unsigned int v18 = 10;
    }
  }
  else
  {
    if (a2 || a3 >= 6)
    {
      unsigned int v55 = 0;
      goto LABEL_16;
    }
    unsigned int v18 = dword_1007BFD98[a3];
  }
  unsigned int v55 = v18;
LABEL_16:
  if (a4 > 2) {
    unsigned int v53 = 0;
  }
  else {
    unsigned int v53 = dword_1007BFD8C[a4];
  }
  int v26 = *((char *)a6 + 23);
  if (v26 >= 0) {
    uint64_t v27 = *((unsigned __int8 *)a6 + 23);
  }
  else {
    uint64_t v27 = *((void *)a6 + 1);
  }
  __int16 v28 = qword_100A19EF0;
  BOOL v29 = os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT);
  if (!v27)
  {
    if (v29)
    {
      __int16 v37 = "Invalid";
      long long v38 = "Sim";
      if (a2 != 1) {
        long long v38 = "Invalid";
      }
      if (a2) {
        uint64_t v39 = v38;
      }
      else {
        uint64_t v39 = "Local";
      }
      if (a3 <= 5) {
        __int16 v37 = off_1009BA070[a3];
      }
      sub_100474E18(v54, v71);
      if (v74 >= 0) {
        uint64_t v40 = v71;
      }
      else {
        uint64_t v40 = *(uint8_t **)v71;
      }
      *(_DWORD *)std::string buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = a8;
      *(_WORD *)&buf[8] = 1024;
      *(_DWORD *)&buf[10] = a7;
      *(_WORD *)v63 = 2080;
      *(void *)&v63[2] = v39;
      *(_WORD *)v64 = 2080;
      *(void *)&v64[2] = v37;
      __int16 v65 = 2082;
      v66 = v40;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received 'list' request (offset = %u, size_t count = %u) for '%s'/'%s' from device %{public}s", buf, 0x2Cu);
      if (v74 < 0) {
        operator delete(*(void **)v71);
      }
    }
    uint64_t v36 = v55;
    uint64_t v41 = sub_1005DAA0C((uint64_t)v61, v55, v53, a8, a7, 0x64u, 0);
    uint64_t v42 = v41;
    if (v41) {
      uint64_t v24 = 0;
    }
    else {
      uint64_t v24 = 1715;
    }
    if (v41) {
LABEL_77:
    }
      operator new();
    goto LABEL_61;
  }
  if (v29)
  {
    char v30 = "Invalid";
    __int16 v31 = "Invalid";
    if (a5 <= 2) {
      __int16 v31 = off_1009BA058[a5];
    }
    __int16 v32 = *(void **)a6;
    if (v26 >= 0) {
      __int16 v32 = a6;
    }
    uint64_t v52 = v32;
    char v33 = "Sim";
    if (a2 != 1) {
      char v33 = "Invalid";
    }
    if (a2) {
      uint64_t v34 = v33;
    }
    else {
      uint64_t v34 = "Local";
    }
    if (a3 <= 5) {
      char v30 = off_1009BA070[a3];
    }
    sub_100474E18(v54, v71);
    if (v74 >= 0) {
      __int16 v35 = v71;
    }
    else {
      __int16 v35 = *(uint8_t **)v71;
    }
    *(_DWORD *)std::string buf = 136316674;
    *(void *)&uint8_t buf[4] = v31;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)v63 = v52;
    *(_WORD *)&v63[8] = 1024;
    *(_DWORD *)v64 = a8;
    *(_WORD *)&v64[4] = 1024;
    *(_DWORD *)&v64[6] = a7;
    __int16 v65 = 2080;
    v66 = (void *)v34;
    __int16 v67 = 2080;
    v68 = v30;
    __int16 v69 = 2082;
    v70 = v35;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Received 'search' request (%s ~= \"%s\", offset = %u, size_t count = %u) in '%s'/'%s' from device %{public}s", buf, 0x40u);
    if (v74 < 0) {
      operator delete(*(void **)v71);
    }
  }
  if (a5 == 1)
  {
    uint64_t v36 = v55;
    if (*((char *)a6 + 23) < 0)
    {
      sub_10003B098(&v57, *(void **)a6, *((void *)a6 + 1));
    }
    else
    {
      long long v57 = *a6;
      uint64_t v58 = *((void *)a6 + 2);
    }
    uint64_t v42 = sub_1005DAF20((uint64_t)v61, v55, (uint64_t)&v57, v53, a8, a7, 0);
    if ((SHIBYTE(v58) & 0x80000000) == 0) {
      goto LABEL_72;
    }
    p_dst = (void **)&v57;
    goto LABEL_71;
  }
  uint64_t v36 = v55;
  if (a5)
  {
    uint64_t v42 = 0;
    char v43 = 0;
    unsigned int v44 = 1743;
    goto LABEL_73;
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_10003B098(&__dst, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long __dst = *a6;
    uint64_t v60 = *((void *)a6 + 2);
  }
  uint64_t v42 = sub_1005DAE24((uint64_t)v61, v55, (uint64_t)&__dst, v53, a8, a7);
  if (SHIBYTE(v60) < 0)
  {
    p_dst = (void **)&__dst;
LABEL_71:
    operator delete(*p_dst);
  }
LABEL_72:
  unsigned int v44 = 0;
  char v43 = 1;
LABEL_73:
  if ((v43 & (v42 == 0)) != 0) {
    uint64_t v24 = 1724;
  }
  else {
    uint64_t v24 = v44;
  }
  if (v42) {
    goto LABEL_77;
  }
LABEL_61:
  uint64_t v23 = sub_1005DB09C((uint64_t)v61, v36);
  uint64_t v22 = v46;
  uint64_t v21 = sub_1005DB138((uint64_t)v61, v36);
  uint64_t v10 = v47;
  uint64_t v20 = sub_1005DB1A8((uint64_t)v61);
  uint64_t v19 = v48;
  v49 = qword_100A19EF0;
  if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
  {
    if (v42) {
      LODWORD(v42) = sub_1005DB354(v42);
    }
    sub_100474E18(v54, buf);
    long long v51 = buf;
    if (v63[9] < 0) {
      long long v51 = *(unsigned char **)buf;
    }
    *(_DWORD *)v71 = 67109378;
    *(_DWORD *)&v71[4] = v42;
    __int16 v72 = 2082;
    v73 = v51;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Building response (%u entries) for device %{public}s", v71, 0x12u);
    if ((v63[9] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_10:
  buf[0] = 0;
  sub_10001B8E0(buf);
  a9(0, v23, v22, v21, v10, v20, v19, v24, a10);
  return sub_10001B8AC(buf);
}

void sub_1005EFBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005EFC48(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7, void (*a8)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16), unsigned __int16 a9)
{
  uint64_t v9 = *(void *)(a1 + 320);
  if (!v9 || *(unsigned __int16 *)(v9 + 8) != a9)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    goto LABEL_8;
  }
  uint64_t v16 = *(void *)v9;
  v44[0] = 0;
  v44[1] = 0;
  uint64_t v42 = v16;
  sub_1005DA858(v44, v16);
  if (a2 == 1)
  {
    if (a3) {
      unsigned int v17 = 0;
    }
    else {
      unsigned int v17 = 10;
    }
    goto LABEL_13;
  }
  if (!a2 && a3 < 6)
  {
    unsigned int v17 = dword_1007BFD98[a3];
LABEL_13:
    unsigned int v41 = v17;
    goto LABEL_14;
  }
  unsigned int v41 = 0;
LABEL_14:
  if (a5 == 1) {
    int v25 = 135;
  }
  else {
    int v25 = 133;
  }
  if (a4) {
    int v26 = v25 | HIDWORD(a4);
  }
  else {
    int v26 = -1;
  }
  uint64_t v27 = qword_100A19EF0;
  if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v28 = "Invalid";
    BOOL v29 = "Sim";
    if (a2 != 1) {
      BOOL v29 = "Invalid";
    }
    if (a2) {
      char v30 = v29;
    }
    else {
      char v30 = "Local";
    }
    if (a3 <= 5) {
      __int16 v28 = off_1009BA070[a3];
    }
    sub_100474E18(v42, &__p);
    if (v48 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)std::string buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = a7;
    __int16 v50 = 1024;
    int v51 = a6;
    __int16 v52 = 1024;
    int v53 = v26;
    __int16 v54 = 2080;
    unsigned int v55 = v30;
    __int16 v56 = 2080;
    long long v57 = v28;
    __int16 v58 = 2082;
    uint64_t v59 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Received 'open' request (offset = %u, size_t count = %u, attributes = %x) for '%s'/'%s' from device %{public}s", buf, 0x32u);
    if (v48 < 0) {
      operator delete(__p);
    }
  }
  if (a3 - 5 >= 0xFFFFFFFC && (v26 & 8) != 0)
  {
    __int16 v32 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Ignoring request for contact photos for call history", buf, 2u);
    }
  }
  sub_100475EE0(v42, (uint64_t)buf);
  if (!std::string::compare((const std::string *)buf, "HandsFreeLink"))
  {
    char v33 = sub_10047936C(v42);
    if (SBYTE1(v55) < 0) {
      operator delete(*(void **)buf);
    }
    if ((v33 & 1) == 0)
    {
      uint64_t v34 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Workaround: disabling contact photos for this device", buf, 2u);
      }
    }
  }
  else if (SBYTE1(v55) < 0)
  {
    operator delete(*(void **)buf);
  }
  uint64_t v35 = sub_1005DAA0C((uint64_t)v44, v41, 2, a7, a6, 0x64u, 0);
  if (v35) {
    operator new();
  }
  uint64_t v23 = sub_1005DB09C((uint64_t)v44, v41);
  uint64_t v22 = v36;
  uint64_t v21 = sub_1005DB138((uint64_t)v44, v41);
  uint64_t v20 = v37;
  uint64_t v19 = sub_1005DB1A8((uint64_t)v44);
  uint64_t v18 = v38;
  uint64_t v39 = qword_100A19EF0;
  if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v42, buf);
    uint64_t v40 = buf;
    if (SBYTE1(v55) < 0) {
      uint64_t v40 = *(uint8_t **)buf;
    }
    LODWORD(__p) = 67109378;
    HIDWORD(__p) = v35;
    __int16 v46 = 2082;
    uint64_t v47 = v40;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Building response (%u entries) for device %{public}s", (uint8_t *)&__p, 0x12u);
    if (SBYTE1(v55) < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_8:
  buf[0] = 0;
  sub_10001B8E0(buf);
  a8(0, v23, v22, v21, v20, v19, v18, 1715, a9);
  return sub_10001B8AC(buf);
}

void sub_1005F011C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005F0170(uint64_t a1, int a2, unsigned int a3, uint64_t a4, int a5, int a6, void (*a7)(void, void, void, void, void, uint64_t, uint64_t, uint64_t, __int16), int a8)
{
  __int16 v8 = a8;
  uint64_t v10 = *(void *)(a1 + 320);
  if (v10 && *(unsigned __int16 *)(v10 + 8) == a8)
  {
    uint64_t v16 = *(void *)v10;
    v35[0] = 0;
    v35[1] = 0;
    uint64_t v34 = v16;
    sub_1005DA858(v35, v16);
    if (a2 == 1)
    {
      if (a3) {
        uint64_t v17 = 0;
      }
      else {
        uint64_t v17 = 10;
      }
    }
    else if (a2 || a3 >= 6)
    {
      uint64_t v17 = 0;
    }
    else
    {
      uint64_t v17 = dword_1007BFD98[a3];
    }
    if (a5 == 1) {
      int v22 = 135;
    }
    else {
      int v22 = 133;
    }
    if (a4) {
      int v23 = v22 | HIDWORD(a4);
    }
    else {
      int v23 = -1;
    }
    uint64_t v24 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v33 = v17;
      int v25 = "Invalid";
      int v26 = "Sim";
      if (a2 != 1) {
        int v26 = "Invalid";
      }
      if (a2) {
        uint64_t v27 = v26;
      }
      else {
        uint64_t v27 = "Local";
      }
      if (a3 <= 5) {
        int v25 = off_1009BA070[a3];
      }
      sub_100474E18(v34, &__p);
      if (v39 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)std::string buf = 67110146;
      *(_DWORD *)&uint8_t buf[4] = a6;
      __int16 v41 = 1024;
      int v42 = v23;
      __int16 v43 = 2080;
      unsigned int v44 = v27;
      __int16 v45 = 2080;
      __int16 v46 = v25;
      __int16 v47 = 2082;
      char v48 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Received 'open card' request (uid = %u, attributes = %x) for '%s'/'%s' from device %{public}s", buf, 0x2Cu);
      if (v39 < 0) {
        operator delete(__p);
      }
      uint64_t v17 = v33;
    }
    uint64_t v29 = sub_1005DAC80((uint64_t)v35, v17, a6);
    if (v29) {
      operator new();
    }
    uint64_t v20 = 1724;
    uint64_t v19 = sub_1005DB1A8((uint64_t)v35);
    uint64_t v18 = v30;
    __int16 v31 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v34, buf);
      if (SHIBYTE(v44) >= 0) {
        __int16 v32 = buf;
      }
      else {
        __int16 v32 = *(uint8_t **)buf;
      }
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = v29;
      __int16 v37 = 2082;
      uint64_t v38 = v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Building response (%u entries) for device %{public}s", (uint8_t *)&__p, 0x12u);
      if (SHIBYTE(v44) < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 1715;
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  a7(0, 0, 0, 0, 0, v19, v18, v20, v8);
  return sub_10001B8AC(buf);
}

void sub_1005F04F8()
{
}

void sub_1005F0534(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = *(void *)(a1 + 320);
  if (v3 && *(unsigned __int16 *)(v3 + 8) == a3)
  {
    uint64_t v5 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(*(void *)v3, __p);
      uint64_t v6 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received 'close' request from device %{public}s", buf, 0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    if (*(void *)(v3 + 16) == a2)
    {
      char v7 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(*(void *)v3, __p);
        if (v10 >= 0) {
          __int16 v8 = __p;
        }
        else {
          __int16 v8 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446210;
        uint64_t v12 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Closing response for device %{public}s", buf, 0xCu);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        a2 = *(void *)(v3 + 16);
      }
      if (a2) {
        (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
      }
      *(void *)(v3 + 16) = 0;
    }
  }
}

unsigned char *sub_1005F06E4(uint64_t a1, uint64_t a2, unsigned int a3, void (*a4)(uint64_t, void *, void, uint64_t, uint64_t), uint64_t a5)
{
  uint64_t v7 = *(void *)(a1 + 320);
  if (v7 && *(unsigned __int16 *)(v7 + 8) == a5)
  {
    unsigned __int16 v21 = 0;
    uint64_t v9 = *(void *)v7;
    char v10 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
    {
      sub_100474E18(v9, &__p);
      uint64_t v11 = SBYTE3(v30) >= 0 ? &__p : (void **)__p;
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = a3;
      __int16 v23 = 2082;
      uint64_t v24 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Received 'read' request (%u bytes) from device %{public}s", buf, 0x12u);
      if (SBYTE3(v30) < 0) {
        operator delete(__p);
      }
    }
    uint64_t v12 = *(void *)(v7 + 16);
    if (v12)
    {
      uint64_t v13 = *(void **)(v7 + 24);
      if (*(void *)(v7 + 32) < (unint64_t)a3)
      {
        uint64_t v13 = malloc_type_realloc(*(void **)(v7 + 24), a3, 0x682E794BuLL);
        *(void *)(v7 + 24) = v13;
        *(void *)(v7 + 32) = a3;
      }
      BOOL v14 = sub_1005E42D8(v12, (uint64_t)v13, a3, &v21);
      if (v14) {
        uint64_t v15 = 0;
      }
      else {
        uint64_t v15 = 135;
      }
    }
    else
    {
      BOOL v14 = 0;
      uint64_t v13 = 0;
      uint64_t v15 = 135;
    }
    uint64_t v17 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_INFO))
    {
      int v18 = v21;
      if (v14) {
        uint64_t v19 = "continue";
      }
      else {
        uint64_t v19 = "eof";
      }
      sub_100474E18(v9, buf);
      if (v25 >= 0) {
        uint64_t v20 = buf;
      }
      else {
        uint64_t v20 = *(uint8_t **)buf;
      }
      LODWORD(__p) = 67109634;
      HIDWORD(__p) = v18;
      __int16 v27 = 2080;
      __int16 v28 = v19;
      __int16 v29 = 2082;
      uint64_t v30 = v20;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_INFO, "Sending response (%u bytes, %s) to device %{public}s", (uint8_t *)&__p, 0x1Cu);
      if (v25 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    unsigned __int16 v21 = 0;
    uint64_t v15 = 1715;
  }
  LOBYTE(__p) = 0;
  sub_10001B8E0(&__p);
  a4(v12, v13, v21, v15, a5);
  return sub_10001B8AC(&__p);
}

void sub_1005F095C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_1005F0978(uint64_t a1)
{
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA038);
  }
  uint64_t v2 = off_1009FB9F0;
  int v3 = *(unsigned __int8 *)(a1 + 56);
  unsigned int v4 = *(unsigned __int16 *)(a1 + 48);

  return sub_1005EED24(v2, a1 + 50, v3, a1 + 32, v4);
}

unsigned char *sub_1005F09E8(uint64_t a1)
{
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA038);
  }
  uint64_t v2 = off_1009FB9F0;
  int v3 = *(unsigned __int16 *)(a1 + 32);

  return sub_1005EF1F8((uint64_t)v2, v3);
}

unsigned char *sub_1005F0A4C(uint64_t a1)
{
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA038);
  }
  uint64_t v2 = off_1009FB9F0;
  uint64_t v3 = *(unsigned __int16 *)(a1 + 40);
  int v4 = *(_DWORD *)(a1 + 32);
  unsigned int v5 = *(_DWORD *)(a1 + 36);

  return sub_1005EF2D0((uint64_t)v2, v3, v4, v5);
}

unsigned char *sub_1005F0AB4(uint64_t a1)
{
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA038);
  }
  return sub_1005EF5D0((uint64_t)off_1009FB9F0, *(_DWORD *)(a1 + 64), *(_DWORD *)(a1 + 68), *(_DWORD *)(a1 + 72), *(_DWORD *)(a1 + 76), (long long *)(a1 + 32), *(unsigned __int16 *)(a1 + 80), *(unsigned __int16 *)(a1 + 82), *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16))(a1 + 56), *(_WORD *)(a1 + 84));
}

unsigned char *sub_1005F0B34(uint64_t a1)
{
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA038);
  }
  return sub_1005EFC48((uint64_t)off_1009FB9F0, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(void *)(a1 + 48), *(_DWORD *)(a1 + 56), *(unsigned __int16 *)(a1 + 60), *(unsigned __int16 *)(a1 + 62), *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned __int16))(a1 + 32), *(_WORD *)(a1 + 64));
}

unsigned char *sub_1005F0BB0(uint64_t a1)
{
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA038);
  }
  uint64_t v2 = off_1009FB9F0;
  int v3 = *(_DWORD *)(a1 + 40);
  unsigned int v4 = *(_DWORD *)(a1 + 44);
  uint64_t v5 = *(void *)(a1 + 48);
  int v6 = *(_DWORD *)(a1 + 56);
  int v7 = *(_DWORD *)(a1 + 60);
  __int16 v8 = *(void (**)(void, void, void, void, void, uint64_t, uint64_t, uint64_t, __int16))(a1 + 32);
  int v9 = *(unsigned __int16 *)(a1 + 64);

  return sub_1005F0170((uint64_t)v2, v3, v4, v5, v6, v7, v8, v9);
}

void sub_1005F0C24(uint64_t a1)
{
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA038);
  }
  uint64_t v2 = off_1009FB9F0;
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int16 *)(a1 + 44);

  sub_1005F0534((uint64_t)v2, v3, v4);
}

unsigned char *sub_1005F0C8C(uint64_t a1, uint64_t a2)
{
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA038);
  }
  uint64_t v3 = off_1009FB9F0;
  unsigned int v4 = *(unsigned __int16 *)(a1 + 48);
  uint64_t v5 = *(void (**)(uint64_t, void *, void, uint64_t, uint64_t))(a1 + 40);
  uint64_t v6 = *(unsigned __int16 *)(a1 + 50);

  return sub_1005F06E4((uint64_t)v3, a2, v4, v5, v6);
}

uint64_t sub_1005F0CF8()
{
  return 0;
}

uint64_t sub_1005F0D00()
{
  return 2;
}

void sub_1005F0D08(id a1)
{
}

void sub_1005F0D4C()
{
}

void sub_1005F0D70(id a1)
{
}

void sub_1005F0DB4()
{
}

void sub_1005F0DD8(id a1)
{
}

void sub_1005F0E1C()
{
}

uint64_t sub_1005F0E40(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "PhonebookService", 2) = &off_1009BA0B0;
  if (qword_1009FB9F8 != -1) {
    dispatch_once(&qword_1009FB9F8, &stru_1009BA1A0);
  }
  sub_1004C9E90(a1, (uint64_t)off_1009FB9F0);
  return a1;
}

void sub_1005F0EC8(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F0EE0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = 0;
  sub_100026C30((uint64_t)&v5);
  *(void *)&long long v4 = (int)v5;
  *((void *)&v4 + 1) = SWORD2(v5);
  return sub_100477F4C(a2, 2u, 1, &v4, 0);
}

void sub_1005F0F3C(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

void sub_1005F0F74(id a1)
{
}

void sub_1005F0FB8()
{
}

uint64_t sub_1005F0FDC(uint64_t a1)
{
  char v6 = 0;
  sub_10001B8E0(&v6);
  if (sub_1001432C4((uint64_t)off_1009BA1C0))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_1007849F8();
    }
    goto LABEL_15;
  }
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 328))(v2)) {
    int v3 = 465;
  }
  else {
    int v3 = 17;
  }
  if (sub_100148A6C((uint64_t)&off_1009BA1F0, v3, 0, (uint64_t *)&off_1009BA218))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784990();
    }
LABEL_14:
    sub_10014344C();
LABEL_15:
    uint64_t v4 = 1;
    goto LABEL_16;
  }
  if (sub_1000F6B00((uint64_t)off_1009BA228, 2, (uint64_t)&off_1009BA218))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784928();
    }
    sub_100149738();
    goto LABEL_14;
  }
  atomic_store(0, (unsigned __int8 *)(a1 + 545));
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009BA698);
  }
  sub_1005FDDB8(qword_1009F8410 + 464, a1 + 272);
  uint64_t v4 = 0;
LABEL_16:
  sub_10001B8AC(&v6);
  return v4;
}

void sub_1005F118C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005F11A4(uint64_t a1)
{
  char v4 = 0;
  sub_10001B8E0(&v4);
  if (sub_100149738())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784B30();
    }
LABEL_10:
    uint64_t v2 = 1;
    goto LABEL_11;
  }
  if (sub_1000F6F54())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784AC8();
    }
    goto LABEL_10;
  }
  if (sub_10014344C())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784A60();
    }
    goto LABEL_10;
  }
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009BA698);
  }
  sub_100052718(qword_1009F8410 + 464, a1 + 272);
  uint64_t v2 = 0;
LABEL_11:
  sub_10001B8AC(&v4);
  return v2;
}

void sub_1005F12D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1005F12E8(uint64_t a1, uint64_t a2)
{
  int v3 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    char v4 = v21 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Connecting AVRCP profile to device %{public}s", buf, 0xCu);
    if (SHIBYTE(v21) < 0) {
      operator delete(__p);
    }
  }
  uint64_t v5 = sub_100035F54();
  uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 328))(v5);
  if (v6)
  {
    long long v18 = xmmword_1007BFE00;
    long long __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    if (sub_1005F15EC(v6, a2, 0x110Fu) >= 0x104
      && sub_10047AE08(a2, (uint64_t)&v18, 0x311u, &__p))
    {
      long long v17 = *(_OWORD *)__p;
      if ((BYTE8(v17) & 0x40) != 0)
      {
        __int16 v8 = qword_100A19EA8;
        BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          sub_100474E18(a2, buf);
          int v10 = v23;
          uint64_t v11 = *(unsigned char **)buf;
          int v13 = sub_1005F16DC(v12, a2);
          BOOL v14 = buf;
          if (v10 < 0) {
            BOOL v14 = v11;
          }
          *(_DWORD *)uint64_t v24 = 136446466;
          char v25 = v14;
          __int16 v26 = 1024;
          int v27 = v13;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Browsing is supported on device %{public}s, isBrowsingBroken %d", v24, 0x12u);
          if (v23 < 0) {
            operator delete(*(void **)buf);
          }
        }
        char v7 = sub_1005F16DC(v9, a2) ^ 1;
      }
      else
      {
        char v7 = 0;
      }
      sub_1002D5394(&v17);
    }
    else
    {
      char v7 = 0;
    }
    if (__p)
    {
      uint64_t v20 = __p;
      operator delete(__p);
    }
  }
  else
  {
    char v7 = 0;
  }
  v24[0] = 0;
  sub_10001B8E0(v24);
  if (sub_1001434D8((int *)(a2 + 128), (uint64_t)&unk_1007BFDB0, v7))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a2, &__p);
      sub_100784B98();
    }
    uint64_t v15 = 1;
  }
  else
  {
    uint64_t v15 = 0;
  }
  sub_10001B8AC(v24);
  return v15;
}

void sub_1005F1594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a14) {
    operator delete(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005F15EC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v12[0] = 131075;
  v12[1] = a3;
  long long __p = 0;
  int v10 = 0;
  uint64_t v11 = 0;
  int v3 = sub_10047AE08(a2, (uint64_t)v12, 9u, &__p);
  char v4 = __p;
  if (!v3)
  {
    LOWORD(v6) = 0;
    if (!__p) {
      return (unsigned __int16)v6;
    }
    goto LABEL_10;
  }
  uint64_t v5 = *((void *)__p + 1);
  if (*(_DWORD *)(v5 + 8) == 4366) {
    int v6 = *(_DWORD *)(v5 + 24);
  }
  else {
    LOWORD(v6) = 0;
  }
  if (__p == v10) {
    goto LABEL_10;
  }
  do
  {
    long long v8 = *v4;
    sub_1002D5394(&v8);
    ++v4;
  }
  while (v4 != v10);
  char v4 = __p;
  if (__p)
  {
LABEL_10:
    int v10 = v4;
    operator delete(v4);
  }
  return (unsigned __int16)v6;
}

void sub_1005F16BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005F16DC(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v9 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v7 = 0u;
  *(_OWORD *)long long v8 = 0u;
  long long v5 = 0u;
  *(_OWORD *)int v6 = 0u;
  sub_1006161E0((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  long long v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  long long v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(void *)((char *)&v11[1] + 14) = 0;
  *(void *)((char *)&v11[1] + 9) = 0;
  long long v12 = 0uLL;
  *((void *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  LODWORD(a2) = sub_1004783B8(a2, (uint64_t)&v5);
  int v3 = BYTE14(v11[2]);
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  if (v3) {
    a2 = a2;
  }
  else {
    a2 = 0;
  }
  nullsub_95((char *)&v5 + 1);
  return a2;
}

void sub_1005F1814(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1005F1830(uint64_t a1, uint64_t a2)
{
  char v4 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v10 >= 0) {
      long long v5 = __p;
    }
    else {
      long long v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    long long v12 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Disconnecting AVRCP profile to device %{public}s", buf, 0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  char v8 = 0;
  sub_10001B8E0(&v8);
  if (sub_100143698((int *)(a2 + 128)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
LABEL_9:
      sub_100474E18(a2, __p);
      sub_100784BE8();
    }
  }
  else
  {
    if (!*(void *)(a1 + 528) || !sub_1000F8504(*(unsigned __int16 *)(a1 + 536)))
    {
      uint64_t v6 = 0;
      goto LABEL_16;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      goto LABEL_9;
    }
  }
  uint64_t v6 = 1;
LABEL_16:
  sub_10001B8AC(&v8);
  return v6;
}

void sub_1005F19D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_1005F19F4(void *a1, uint64_t a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  int v5 = sub_1004BDDAC((uint64_t)a1, v4);
  uint64_t v6 = qword_100A19EA8;
  if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_11;
  }
  long long v7 = v5 ? "Accepting" : "Rejecting";
  sub_100474E18(v4, __p);
  char v8 = SHIBYTE(__p[2]) >= 0 ? __p : (void **)__p[0];
  *(_DWORD *)std::string buf = 136446466;
  *(void *)&uint8_t buf[4] = v7;
  __int16 v28 = 2082;
  __int16 v29 = v8;
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%{public}s incoming connection attempt from device %{public}s", buf, 0x16u);
  if (SHIBYTE(__p[2]) < 0)
  {
    operator delete(__p[0]);
    if (v5)
    {
LABEL_12:
      uint64_t v9 = sub_100035F54();
      uint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 328))(v9);
      if (v10)
      {
        long long v24 = xmmword_1007BFE00;
        memset(__p, 0, sizeof(__p));
        if (sub_1005F15EC(v10, v4, 0x110Fu) >= 0x104
          && sub_10047AE08(v4, (uint64_t)&v24, 0x311u, __p))
        {
          long long v23 = *(_OWORD *)__p[0];
          if ((BYTE8(v23) & 0x40) != 0)
          {
            long long v12 = qword_100A19EA8;
            BOOL v13 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
            if (v13)
            {
              sub_100474E18(v4, buf);
              int v14 = v30;
              uint64_t v15 = *(unsigned char **)buf;
              int v17 = sub_1005F16DC(v16, v4);
              long long v18 = buf;
              if (v14 < 0) {
                long long v18 = v15;
              }
              *(_DWORD *)__int16 v31 = 136446466;
              __int16 v32 = v18;
              __int16 v33 = 1024;
              int v34 = v17;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Browsing is supported on device %{public}s, isBrowsingBroken %d", v31, 0x12u);
              if (v30 < 0) {
                operator delete(*(void **)buf);
              }
            }
            sub_1005F16DC(v13, v4);
          }
          sub_1002D5394(&v23);
        }
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
      }
      sub_1004BD554(a1, v4);
    }
  }
  else
  {
LABEL_11:
    if (v5) {
      goto LABEL_12;
    }
  }
  uint64_t result = sub_1001435B8((int *)a2, 0, 0);
  int v19 = result;
  if (result)
  {
    uint64_t v20 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      uint64_t v21 = v5 ? "accept" : "reject";
      sub_100474E18(v4, buf);
      int v22 = v30 >= 0 ? buf : *(unsigned char **)buf;
      LODWORD(__p[0]) = 136446722;
      *(void **)((char *)__p + 4) = v21;
      WORD2(__p[1]) = 2082;
      *(void **)((char *)&__p[1] + 6) = v22;
      HIWORD(__p[2]) = 1024;
      int v26 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to %{public}s connection attempt from device %{public}s - result was %{bluetooth:OI_STATUS}u", (uint8_t *)__p, 0x1Cu);
      if (v30 < 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_1004BD6C8((uint64_t)a1, v4, 1);
  }
  return result;
}

void sub_1005F1DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005F1E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p) = *(_DWORD *)a2;
  WORD2(__p) = *(_WORD *)(a2 + 4);
  unint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&__p, 1);
  long long v7 = qword_100A19EA8;
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(v6, &__p);
      long long v23 = v28 >= 0 ? &__p : (void **)__p;
      buf[0] = 136446466;
      *(void *)&buf[1] = v23;
      __int16 v25 = 1024;
      int v26 = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Failed to connect to device %{public}s - result was %{bluetooth:OI_STATUS}u", (uint8_t *)buf, 0x12u);
      if (v28 < 0) {
        operator delete(__p);
      }
    }
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009BA6D8);
    }
    int v8 = sub_1004E2340((uint64_t)off_1009F8068, a3, 20000);
    sub_1004BD6C8(a1, v6, v8);
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, &__p);
    uint64_t v9 = v28 >= 0 ? &__p : (void **)__p;
    buf[0] = 136446466;
    *(void *)&buf[1] = v9;
    __int16 v25 = 1024;
    int v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "RemoteClient connect confirm device %{public}s with result %{bluetooth:OI_STATUS}u", (uint8_t *)buf, 0x12u);
    if (v28 < 0) {
      operator delete(__p);
    }
  }
  uint64_t v10 = *(void **)(a1 + 352);
  if (v10)
  {
    uint64_t v11 = a1 + 352;
    do
    {
      unint64_t v12 = v10[4];
      BOOL v13 = v12 >= v6;
      if (v12 >= v6) {
        int v14 = v10;
      }
      else {
        int v14 = v10 + 1;
      }
      if (v13) {
        uint64_t v11 = (uint64_t)v10;
      }
      uint64_t v10 = (void *)*v14;
    }
    while (*v14);
    if (v11 != a1 + 352 && v6 >= *(void *)(v11 + 32))
    {
      uint64_t v15 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
        sub_100784C38(v15, v16, v17, v18, v19, v20, v21, v22);
      }
    }
  }
  operator new();
}

void sub_1005F21F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005F2234(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1005F15EC(a1, a2, 0x110Cu);
  if (v3)
  {
    unsigned int v4 = v3;
    uint64_t v5 = sub_10048174C(a2, v3);
  }
  else
  {
    uint64_t v5 = sub_100481684(a2);
    unsigned int v4 = v5;
  }
  if (v4 < 0x104 || (sub_1005F2C68(v5, a2) & 1) != 0)
  {
    unint64_t v6 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      int v7 = v15;
      int v8 = *(unsigned char **)__p;
      int v10 = sub_1005F2C68(v9, a2);
      uint64_t v11 = __p;
      *(_DWORD *)std::string buf = 136446722;
      if (v7 < 0) {
        uint64_t v11 = v8;
      }
      *(void *)&uint8_t buf[4] = v11;
      __int16 v17 = 1024;
      unsigned int v18 = v4;
      __int16 v19 = 1024;
      int v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Skipping capability check for device %{public}s with remote control version 0x%x, brokenAbs %d", buf, 0x18u);
      if (v15 < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  else
  {
    unint64_t v12 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, buf);
      BOOL v13 = v20 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)long long __p = 136446210;
      *(void *)&__p[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Querying capabilities of remote device %{public}s to see if they support absolute volume", __p, 0xCu);
      if (SHIBYTE(v20) < 0) {
        operator delete(*(void **)buf);
      }
    }
    buf[0] = 0;
    if (sub_100144CA8(a2 + 128, buf) && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784CB0();
    }
  }
}

void sub_1005F2430(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005F2454(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  unint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v14 = v8;
  uint64_t v9 = qword_100A19EA8;
  if (a3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(v8, __p);
      if (v13 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      *(void *)uint64_t v16 = v10;
      *(_WORD *)&v16[8] = 1024;
      *(_DWORD *)&v16[10] = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to establish browsing channel with device %{public}s: %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v8, __p);
      uint64_t v11 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 67109378;
      *(_DWORD *)uint64_t v16 = a4;
      *(_WORD *)&v16[4] = 2082;
      *(void *)&v16[6] = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Browsing channel (MTU = %u) established with device %{public}s", buf, 0x12u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    __p[0] = &v14;
    *((_WORD *)sub_1004BEBFC((uint64_t **)(a1 + 504), &v14, (uint64_t)&unk_1007BE9D0, (void **)__p) + 20) = a4;
  }
}

void sub_1005F2650(uint64_t a1, uint64_t a2, __int16 a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  uint64_t v9 = qword_100A19EA8;
  if (a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(v8, __p);
      if (v13 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446466;
      char v15 = v10;
      __int16 v16 = 1024;
      int v17 = a4;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to establish BIP cover art channel with device %{public}s: %{bluetooth:OI_STATUS}u", buf, 0x12u);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v8, __p);
      uint64_t v11 = v13 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446210;
      char v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BIP cover art channel established with device %{public}s", buf, 0xCu);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    *(void *)(a1 + 528) = v8;
    *(_WORD *)(a1 + 536) = a3;
  }
}

void sub_1005F281C(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  uint64_t v5 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v4, __p);
    unint64_t v6 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    unsigned int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BIP cover art channel disestablished with device %{public}s", buf, 0xCu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v4 != *(void *)(a1 + 528))
  {
    int v7 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
      sub_100784D18(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  *(void *)(a1 + 528) = 0;
}

void sub_1005F2984(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(v23[0]) = *(_DWORD *)a2;
  WORD2(v23[0]) = *(_WORD *)(a2 + 4);
  unint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v23, 1);
  unint64_t v24 = v4;
  uint64_t v5 = *(void **)(a1 + 352);
  if (!v5) {
    goto LABEL_44;
  }
  uint64_t v6 = a1 + 352;
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= v4;
    if (v7 >= v4) {
      uint64_t v9 = v5;
    }
    else {
      uint64_t v9 = v5 + 1;
    }
    if (v8) {
      uint64_t v6 = (uint64_t)v5;
    }
    uint64_t v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 != a1 + 352 && v4 >= *(void *)(v6 + 32))
  {
    v23[0] = 0;
    v23[1] = 0;
    sub_10003AED0((uint64_t)v23, a1 + 280);
    uint64_t v10 = *sub_1004AD7B8(a1 + 344, &v24);
    if (v10) {
      (*(void (**)(uint64_t))(*(void *)v10 + 64))(v10);
    }
    sub_1000517A4(a1 + 344, &v24);
    sub_1000517A4(a1 + 504, &v24);
    sub_10003AFE8((uint64_t)v23);
    v22[0] = 0;
    v22[1] = 0;
    sub_10003AED0((uint64_t)v22, a1 + 392);
    sub_1000517A4(a1 + 456, &v24);
    sub_10003AFE8((uint64_t)v22);
    uint64_t v12 = *(void **)(a1 + 488);
    uint64_t v13 = v24;
    if (v12)
    {
      uint64_t v14 = a1 + 488;
      do
      {
        unint64_t v15 = v12[4];
        BOOL v16 = v15 >= v24;
        if (v15 >= v24) {
          int v17 = v12;
        }
        else {
          int v17 = v12 + 1;
        }
        if (v16) {
          uint64_t v14 = (uint64_t)v12;
        }
        uint64_t v12 = (void *)*v17;
      }
      while (*v17);
      if (v14 != a1 + 488 && v24 >= *(void *)(v14 + 32))
      {
        unsigned int v18 = *(void **)(v14 + 40);
        if (v18 != (void *)(v14 + 48))
        {
          do
          {
            if (*((unsigned char *)v18 + 33) == 32) {
              sub_1005F2C1C(v11, (char *)v18[5]);
            }
            __int16 v19 = (void *)v18[1];
            if (v19)
            {
              do
              {
                int v20 = v19;
                __int16 v19 = (void *)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                int v20 = (void *)v18[2];
                BOOL v21 = *v20 == (void)v18;
                unsigned int v18 = v20;
              }
              while (!v21);
            }
            unsigned int v18 = v20;
          }
          while (v20 != (void *)(v14 + 48));
        }
        sub_1003B9B30((uint64_t **)(a1 + 480), v14);
        uint64_t v13 = v24;
      }
    }
    if (v13 == *(void *)(a1 + 552)) {
      *(void *)(a1 + 552) = 0;
    }
    sub_1004BE538(a1, v13, 0);
    sub_10003AFB4((uint64_t)v22);
    sub_10003AFB4((uint64_t)v23);
  }
  else
  {
LABEL_44:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784D90();
    }
  }
}

void sub_1005F2BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1005F2C1C(uint64_t a1, char *a2)
{
  for (uint64_t i = 8; i != 200; i += 24)
    free(*(void **)&a2[i]);

  free(a2);
}

uint64_t sub_1005F2C68(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = 0;
  long long v12 = 0u;
  memset(v11, 0, sizeof(v11));
  long long v9 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v7 = 0u;
  *(_OWORD *)BOOL v8 = 0u;
  long long v5 = 0u;
  *(_OWORD *)uint64_t v6 = 0u;
  sub_1006161E0((uint64_t)&v5 + 1);
  BYTE2(v6[0]) = 0;
  BYTE4(v6[0]) = 0;
  BYTE2(v8[0]) = 0;
  BYTE4(v8[0]) = 0;
  DWORD1(v11[1]) = 0;
  long long v7 = 0uLL;
  v6[1] = 0;
  LOBYTE(v8[0]) = 0;
  long long v9 = 0uLL;
  v8[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v11, 0, 19);
  __p[1] = 0;
  BYTE8(v11[1]) = 1;
  BYTE2(v13) = 0;
  *(void *)((char *)&v11[1] + 14) = 0;
  *(void *)((char *)&v11[1] + 9) = 0;
  long long v12 = 0uLL;
  *((void *)&v11[2] + 1) = 0;
  LOBYTE(v13) = 0;
  LODWORD(a2) = sub_1004783B8(a2, (uint64_t)&v5);
  int v3 = BYTE13(v11[2]);
  if (SHIBYTE(v11[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[1]);
  }
  if (v3) {
    a2 = a2;
  }
  else {
    a2 = 0;
  }
  nullsub_95((char *)&v5 + 1);
  return a2;
}

void sub_1005F2DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1005F2DBC(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    long long v7 = v12 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446466;
    uint64_t v14 = v7;
    __int16 v15 = 1024;
    int v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "RemoteClient queryComplete for device %{public}s with result %d", buf, 0x12u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a3 != 307)
  {
    if (!a3)
    {
      *(unsigned char *)(a1 + 544) = 0;
      LOBYTE(__p[0]) = 0;
      sub_10001B8E0(__p);
      sub_1005F2234(a1, a2);
      sub_10001B910(__p);
      sub_10001B8AC(__p);
      return;
    }
    if ((a3 - 316) >= 0x13)
    {
      unsigned int v8 = *(unsigned __int8 *)(a1 + 544);
      if (v8 <= 3)
      {
        unsigned int v9 = v8 + 1;
        *(unsigned char *)(a1 + 544) = v8 + 1;
        uint64_t v10 = qword_100A19EA8;
        if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p[0]) = 67109120;
          HIDWORD(__p[0]) = v9;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "RemoteClient retrying with sdpAttempts %d", (uint8_t *)__p, 8u);
        }
        if (qword_1009FB698 != -1) {
          dispatch_once(&qword_1009FB698, &stru_1009BA6F8);
        }
        sub_1004C8250(qword_1009FB690, a2);
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
    sub_100784DC4();
  }
  *(unsigned char *)(a1 + 544) = 0;
}

void sub_1005F2FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_1005F2FDC(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_1005F2FE4(uint64_t a1, unint64_t a2, float *a3)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 392);
  uint64_t v6 = *(void **)(a1 + 464);
  if (!v6) {
    goto LABEL_12;
  }
  long long v7 = (int *)(a1 + 464);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      long long v7 = (int *)v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 != (int *)(a1 + 464) && *((void *)v7 + 4) <= a2)
  {
    *a3 = (float)v7[10] / 127.0;
    uint64_t v11 = 1;
  }
  else
  {
LABEL_12:
    uint64_t v11 = 0;
  }
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

void sub_1005F309C(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)long long __p = *(_DWORD *)a2;
  *(_WORD *)&__p[4] = *(_WORD *)(a2 + 4);
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v23 = v8;
  BOOL v9 = "Previous Track";
  uint64_t v10 = 504;
  unsigned __int8 v11 = 9;
  switch(a4 & 0x7F)
  {
    case 'A':
      BOOL v9 = "Volume Up";
      uint64_t v10 = 506;
      goto LABEL_12;
    case 'B':
      BOOL v9 = "Volume Down";
      uint64_t v10 = 507;
      goto LABEL_12;
    case 'C':
      BOOL v9 = "Mute";
      uint64_t v10 = 508;
      goto LABEL_12;
    case 'D':
      sub_1002B7C60(7);
      BOOL v9 = "Play";
      uint64_t v10 = 501;
      goto LABEL_10;
    case 'E':
      sub_1002B7C60(7);
      BOOL v9 = "Stop";
      uint64_t v10 = 503;
      goto LABEL_10;
    case 'F':
      sub_1002B7C60(7);
      BOOL v9 = "Pause";
      uint64_t v10 = 502;
LABEL_10:
      unsigned __int8 v11 = 9;
      break;
    case 'H':
      if (a4 >= 0) {
        uint64_t v10 = 511;
      }
      else {
        uint64_t v10 = 512;
      }
      BOOL v9 = "Rewind";
      break;
    case 'I':
      if (a4 >= 0) {
        uint64_t v10 = 509;
      }
      else {
        uint64_t v10 = 510;
      }
      BOOL v9 = "Fast Forward";
      break;
    case 'K':
      BOOL v9 = "Next Track";
      uint64_t v10 = 505;
      break;
    case 'L':
      break;
    default:
      uint64_t v10 = 0;
      BOOL v9 = "Unknown";
LABEL_12:
      unsigned __int8 v11 = 8;
      break;
  }
  if (sub_10014985C(a2, a3, a4, v11) && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_100784E2C();
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  if ((a4 & 0x80) == 0 || (a4 & 0xFE) == 0xC8)
  {
    char v12 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v8, __p);
      uint64_t v13 = v27 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)std::string buf = 136446466;
      __int16 v29 = v9;
      __int16 v30 = 2082;
      __int16 v31 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received AVRCP %{public}s command from device %{public}s", buf, 0x16u);
      if (v27 < 0) {
        operator delete(*(void **)__p);
      }
    }
    int v14 = sub_100476054(v8);
    uint64_t v15 = sub_100052EB4();
    int v16 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 64))(v15);
    int v17 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned __int8 v18 = atomic_load((unsigned __int8 *)(a1 + 545));
      *(_DWORD *)long long __p = 67109632;
      *(_DWORD *)&__p[4] = v16;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v18 & 1;
      __int16 v25 = 1024;
      int v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "CoP: %d, call related session:%d delayPlay:%d", __p, 0x14u);
      uint64_t v8 = v23;
    }
    if (v8 && sub_1004764A0(v8))
    {
      unsigned __int8 v19 = atomic_load((unsigned __int8 *)(a1 + 545));
      if ((v19 & 1) == 0 || v14 != 22 && v14 != 17) {
        goto LABEL_51;
      }
      if ((v10 - 502) < 2)
      {
        int v20 = qword_100A19EA8;
        if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long __p = 136315138;
          *(void *)&__p[4] = v9;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "AVRCP %s received during call session, ignoring", __p, 0xCu);
        }
        return;
      }
      if (v10 != 501)
      {
LABEL_51:
        uint64_t v22 = sub_1004AD7B8(a1 + 344, &v23);
        (*(void (**)(void, unint64_t, uint64_t))(**(void **)(*v22 + 8) + 8))(*(void *)(*v22 + 8), v23, v10);
        return;
      }
      BOOL v21 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long __p = 136315138;
        *(void *)&__p[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "AVRCP %s received during call session, queueing resumption after session ends", __p, 0xCu);
      }
      *(void *)(a1 + 552) = v23;
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100784DF8();
    }
  }
}

void sub_1005F3578(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AFB34();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1005F35FC;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1005F35FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  atomic_store(*(unsigned char *)(a1 + 40), (unsigned __int8 *)(v1 + 545));
  return sub_1005F3614(v1);
}

uint64_t sub_1005F3614(uint64_t result)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(result + 545));
  if ((v1 & 1) == 0)
  {
    uint64_t v2 = result;
    uint64_t result = sub_1004764A0(*(void *)(result + 552));
    if (result)
    {
      int v3 = *(void **)(v2 + 352);
      if (v3)
      {
        unint64_t v4 = *(void *)(v2 + 552);
        long long v5 = (void *)(v2 + 352);
        do
        {
          unint64_t v6 = v3[4];
          BOOL v7 = v6 >= v4;
          if (v6 >= v4) {
            uint64_t v8 = v3;
          }
          else {
            uint64_t v8 = v3 + 1;
          }
          if (v7) {
            long long v5 = v3;
          }
          int v3 = (void *)*v8;
        }
        while (*v8);
        if (v5 != (void *)(v2 + 352) && v4 >= v5[4])
        {
          BOOL v9 = qword_100A19EA8;
          if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v4, __p);
            if (v12 >= 0) {
              uint64_t v10 = __p;
            }
            else {
              uint64_t v10 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136446210;
            int v14 = v10;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "An AVRCP Play command was pending for device %{public}s, sending to MediaRemote", buf, 0xCu);
            if (v12 < 0) {
              operator delete(__p[0]);
            }
            unint64_t v4 = *(void *)(v2 + 552);
          }
          uint64_t result = (*(uint64_t (**)(void, unint64_t, uint64_t))(**(void **)(v5[5] + 8) + 8))(*(void *)(v5[5] + 8), v4, 501);
        }
      }
      *(void *)(v2 + 552) = 0;
    }
  }
  return result;
}

void sub_1005F3790(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  int v15 = 6488;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v7 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  uint64_t v8 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v9 = "unknown";
    if (a4 == 3) {
      BOOL v9 = "supported events";
    }
    if (a4 == 2) {
      uint64_t v10 = "company ID";
    }
    else {
      uint64_t v10 = v9;
    }
    sub_100474E18(v7, __p);
    if (v14 >= 0) {
      unsigned __int8 v11 = __p;
    }
    else {
      unsigned __int8 v11 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    int v17 = v10;
    __int16 v18 = 2082;
    unsigned __int8 v19 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'get capabilities' (%{public}s) request from device %{public}s", buf, 0x16u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a4 == 2)
  {
    int v12 = sub_100145E90(a2, a3, 1, (uint64_t)&v15);
  }
  else
  {
    if (a4 == 3)
    {
      sub_100146FE0(a2, a3, 7, (uint64_t)&unk_1007BFDD0);
      return;
    }
    int v12 = sub_100145D18(a2, a3, 16, 3306);
  }
  if (v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784E94();
    }
  }
}

void sub_1005F3994(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v5 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v6 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v5, __p);
    uint64_t v7 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446210;
    unsigned __int8 v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received 'list player attributes' request from device %{public}s", buf, 0xCu);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_100147044(a2, a3, 2, (uint64_t)&unk_1007BFDD7))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784EFC();
    }
  }
}

void sub_1005F3B10(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  uint64_t v7 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  uint64_t v8 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    char v9 = "unsupported";
    if (a4 == 3) {
      char v9 = "shuffle mode";
    }
    if (a4 == 2) {
      uint64_t v10 = "repeat mode";
    }
    else {
      uint64_t v10 = v9;
    }
    sub_100474E18(v7, __p);
    if (v22 >= 0) {
      unsigned __int8 v11 = __p;
    }
    else {
      unsigned __int8 v11 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446466;
    unint64_t v24 = v10;
    __int16 v25 = 2082;
    int v26 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received 'list player attribute value' (%{public}s) request from device %{public}s", buf, 0x16u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  switch(a4)
  {
    case 0:
    case 1:
    case 4:
      uint64_t v12 = a2;
      unsigned int v13 = a3;
      int v14 = 3301;
      goto LABEL_17;
    case 2:
      int v16 = &unk_1007BFDD9;
      uint64_t v17 = a2;
      unsigned int v18 = a3;
      uint64_t v19 = 2;
      int v20 = 3;
      goto LABEL_20;
    case 3:
      int v16 = &unk_1007BFDDC;
      uint64_t v17 = a2;
      unsigned int v18 = a3;
      uint64_t v19 = 3;
      int v20 = 2;
LABEL_20:
      int v15 = sub_100147098(v17, v18, v19, v20, (uint64_t)v16);
      break;
    default:
      uint64_t v12 = a2;
      unsigned int v13 = a3;
      int v14 = 3306;
LABEL_17:
      int v15 = sub_100145D18(v12, v13, 18, v14);
      break;
  }
  if (v15)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100784F64();
    }
  }
}

void sub_1005F3D58(uint64_t a1, uint64_t a2, char a3, unsigned int a4, const void *a5)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)a2;
  LOWORD(v27) = *(_WORD *)(a2 + 4);
  unint64_t v10 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  unint64_t v24 = 0;
  unint64_t v25 = v10;
  unint64_t v23 = 0;
  sub_1000335D8(&v23, a5, a4);
  unsigned __int8 v11 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v10, __p);
    uint64_t v12 = "s";
    if (a4 == 1) {
      uint64_t v12 = "";
    }
    *(_DWORD *)std::string buf = 67109634;
    if (v22 >= 0) {
      unsigned int v13 = __p;
    }
    else {
      unsigned int v13 = (void **)__p[0];
    }
    unsigned int v27 = a4;
    __int16 v28 = 2082;
    __int16 v29 = v12;
    __int16 v30 = 2082;
    __int16 v31 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'get player attribute value' (%u value%{public}s) request from device %{public}s", buf, 0x1Cu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v14 = *(void *)(*sub_1004AD7B8(a1 + 344, &v25) + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  void v15[2] = sub_1005F403C;
  v15[3] = &unk_1009BA270;
  char v19 = a4;
  int v16 = &off_100998428;
  uint64_t v17 = v24;
  if (v24) {
    sub_100037354((uint64_t)v24);
  }
  unint64_t v18 = v25;
  char v20 = a3;
  (*(void (**)(uint64_t, void *))(*(void *)v14 + 16))(v14, v15);
  int v16 = &off_100998428;
  if (v17) {
    sub_1000368F4(v17);
  }
  unint64_t v23 = &off_100998428;
  if (v24) {
    sub_1000368F4(v24);
  }
}

void sub_1005F3FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,atomic_uint *a21)
{
  if (a21) {
    sub_1000368F4(a21);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005F403C(uint64_t a1, uint64_t a2, int a3, int a4)
{
  int v29 = 0;
  if (*(unsigned char *)(a1 + 56))
  {
    uint8_t v5 = a4;
    uint8_t v6 = a3;
    unint64_t v7 = 0;
    int v8 = 0;
    uint64_t v26 = (a4 - 1);
    uint64_t v25 = (a3 - 1);
    uint64_t v9 = 3301;
    do
    {
      if (v8 >= 2u)
      {
        LOBYTE(__p[0]) = 0;
        sub_10001B8E0(__p);
        goto LABEL_23;
      }
      uint64_t v10 = v9;
      uint64_t v9 = 3301;
      switch(sub_1006537C0(a1 + 32, v7))
      {
        case 0u:
        case 1u:
        case 4u:
          break;
        case 2u:
          uint8_t v11 = sub_1006537C0(a1 + 32, v7);
          uint64_t v12 = &buf[2 * v8 - 4];
          *uint64_t v12 = v11;
          v12[1] = v6;
          ++v8;
          uint64_t v13 = qword_100A19EA8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_16;
          }
          uint64_t v14 = off_1009BA240[v25];
          sub_100474E18(*(void *)(a1 + 48), __p);
          int v15 = __p;
          if (v28 < 0) {
            int v15 = (void **)__p[0];
          }
          *(_DWORD *)std::string buf = 136446466;
          __int16 v31 = v14;
          __int16 v32 = 2082;
          __int16 v33 = v15;
          int v16 = v13;
          uint64_t v17 = "Sending repeat mode status '%{public}s' to device %{public}s";
          goto LABEL_14;
        case 3u:
          uint8_t v18 = sub_1006537C0(a1 + 32, v7);
          char v19 = &buf[2 * v8 - 4];
          *char v19 = v18;
          v19[1] = v5;
          ++v8;
          uint64_t v20 = qword_100A19EA8;
          if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
          {
            BOOL v21 = off_1009BA258[v26];
            sub_100474E18(*(void *)(a1 + 48), __p);
            char v22 = __p;
            if (v28 < 0) {
              char v22 = (void **)__p[0];
            }
            *(_DWORD *)std::string buf = 136446466;
            __int16 v31 = v21;
            __int16 v32 = 2082;
            __int16 v33 = v22;
            int v16 = v20;
            uint64_t v17 = "Sending shuffle mode status '%{public}s' to device %{public}s";
LABEL_14:
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v17, buf, 0x16u);
            if (v28 < 0) {
              operator delete(__p[0]);
            }
          }
LABEL_16:
          uint64_t v9 = v10;
          break;
        default:
          uint64_t v9 = 3306;
          break;
      }
      ++v7;
    }
    while (v7 < *(unsigned __int8 *)(a1 + 56));
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    if (!(_BYTE)v8) {
      goto LABEL_21;
    }
LABEL_23:
    int v23 = sub_1001470EC(*(void *)(a1 + 48) + 128, *(unsigned __int8 *)(a1 + 57), v8, (uint64_t)&v29);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    LODWORD(v9) = 3301;
LABEL_21:
    int v23 = sub_100145D18(*(void *)(a1 + 48) + 128, *(unsigned __int8 *)(a1 + 57), 19, v9);
  }
  if (v23 && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
    sub_100784FCC();
  }
  return sub_10001B8AC(__p);
}

void sub_1005F4350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_1005F4380(uint64_t a1, uint64_t a2, unsigned int a3, int a4, uint64_t a5)
{
  LODWORD(v6) = a4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  unint64_t v10 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  uint64_t v34 = v10;
  uint8_t v11 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = v6 == 1 ? "" : "s";
    sub_100474E18(v10, v35);
    uint64_t v13 = v38 >= 0 ? v35 : *(unsigned char **)v35;
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v12;
    __int16 v40 = 2082;
    __int16 v41 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'set player attribute value' (%d value%{public}s) request from device %{public}s", buf, 0x1Cu);
    if (v38 < 0)
    {
      operator delete(*(void **)v35);
      if (v6) {
        goto LABEL_12;
      }
LABEL_33:
      LODWORD(v18) = 3301;
      goto LABEL_34;
    }
  }
  if (!v6) {
    goto LABEL_33;
  }
LABEL_12:
  uint64_t v32 = a1;
  unsigned int v33 = a3;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  char v16 = 0;
  uint64_t v6 = v6;
  uint64_t v17 = (unsigned __int8 *)(a5 + 1);
  uint64_t v18 = 3301;
  do
  {
    uint64_t v19 = v18;
    uint64_t v18 = 3301;
    switch(*(v17 - 1))
    {
      case 0u:
      case 1u:
      case 4u:
        break;
      case 2u:
        uint64_t v15 = *v17;
        if ((v15 - 1) > 2) {
          goto LABEL_22;
        }
        uint64_t v20 = qword_100A19EA8;
        if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_21;
        }
        BOOL v21 = off_1009BA240[(v15 - 1)];
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v21;
        char v22 = v20;
        int v23 = "Setting repeat mode to '%{public}s'";
        goto LABEL_20;
      case 3u:
        uint64_t v14 = *v17;
        if ((v14 - 1) > 1) {
          goto LABEL_22;
        }
        uint64_t v24 = qword_100A19EA8;
        if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v25 = off_1009BA258[(v14 - 1)];
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v25;
          char v22 = v24;
          int v23 = "Setting shuffle mode to '%{public}s'";
LABEL_20:
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, buf, 0xCu);
        }
LABEL_21:
        ++v16;
        uint64_t v18 = v19;
        break;
      default:
LABEL_22:
        uint64_t v18 = 3306;
        break;
    }
    v17 += 2;
    --v6;
  }
  while (v6);
  BOOL v26 = v16 == 0;
  a3 = v33;
  if (!v26)
  {
    unsigned int v27 = sub_1004AD7B8(v32 + 344, (unint64_t *)&v34);
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*v27 + 8) + 40))(*(void *)(*v27 + 8), v15, v14);
    int v28 = sub_100145D18(a2, v33, 20, 0);
    if (v28)
    {
      int v29 = v28;
      __int16 v30 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v34, buf);
        if (SBYTE3(v41) >= 0) {
          __int16 v31 = buf;
        }
        else {
          __int16 v31 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v35 = 136446466;
        *(void *)&v35[4] = v31;
        __int16 v36 = 1024;
        int v37 = v29;
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to respond to set attribute value request on device %{public}s - result was %{bluetooth:OI_STATUS}u", v35, 0x12u);
        if (SBYTE3(v41) < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    return;
  }
LABEL_34:
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
    sub_10078509C();
  }
  if (sub_100145D18(a2, a3, 20, v18) && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
    sub_100785034();
  }
}

uint64_t sub_1005F47B4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  uint64_t v13 = 0;
  __p[0] = *(_DWORD *)a2;
  LOWORD(__p[1]) = *(_WORD *)(a2 + 4);
  uint64_t v7 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  uint64_t v13 = v7;
  if (a4 <= 0xC && ((1 << a4) & 0x1F06) != 0) {
    operator new();
  }
  if (a4 - 1 >= 0xD) {
    int v8 = 3306;
  }
  else {
    int v8 = 3301;
  }
  uint64_t v9 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    if (a4 - 1 >= 0xD) {
      uint8_t v11 = "invalid";
    }
    else {
      uint8_t v11 = "unimplemented";
    }
    sub_100474E18(v7, buf);
    if (v15 >= 0) {
      uint64_t v12 = buf;
    }
    else {
      uint64_t v12 = *(uint8_t **)buf;
    }
    __p[0] = 136446722;
    *(void *)&__p[1] = v11;
    __int16 v17 = 1024;
    unsigned int v18 = a4;
    __int16 v19 = 2082;
    uint64_t v20 = v12;
    _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Received notification registration request for %{public}s event %d from device %{public}s", (uint8_t *)__p, 0x1Cu);
    if (v15 < 0) {
      operator delete(*(void **)buf);
    }
  }
  return sub_100145D18(a2, a3, 49, v8);
}

uint64_t sub_1005F4E68(uint64_t a1, unsigned int a2, int a3, unint64_t a4, int *a5)
{
  v25[0] = 0;
  v25[1] = 0;
  sub_10003AED0((uint64_t)v25, a1 + 280);
  unint64_t v10 = *(void **)(a1 + 352);
  if (!v10) {
    goto LABEL_31;
  }
  uint8_t v11 = (void *)(a1 + 352);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= a4;
    if (v12 >= a4) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v10 + 1;
    }
    if (v13) {
      uint8_t v11 = v10;
    }
    unint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 != (void *)(a1 + 352) && v11[4] <= a4)
  {
    int v15 = *a5;
    __int16 v24 = *((_WORD *)a5 + 2);
    int v23 = v15;
    unsigned int v16 = *((unsigned __int8 *)a5 + 6);
    if (a3) {
      operator delete();
    }
    sub_10003AFE8((uint64_t)v25);
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    __int16 v17 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v18 = a2 > 4 ? "unknown" : (&off_1009BA718)[a2];
      sub_100474E18(a4, __p);
      *(_DWORD *)std::string buf = 136446722;
      __int16 v19 = v22 >= 0 ? __p : (void **)__p[0];
      unsigned int v27 = "interim";
      __int16 v28 = 2082;
      int v29 = v18;
      __int16 v30 = 2082;
      __int16 v31 = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for playback state '%{public}s' to device %{public}s", buf, 0x20u);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(v32) = 1;
    LOBYTE(v33) = a2;
    if (a2 <= 2) {
      sub_1002B7C60(8);
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_1001471F0((uint64_t)&v23, v16, (uint64_t)&v32, 0);
    sub_10001B910(buf);
    sub_10001B8AC(buf);
  }
  else
  {
LABEL_31:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a4, buf);
      sub_100785104();
    }
  }
  return sub_10003AFB4((uint64_t)v25);
}

void sub_1005F50D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

const char *sub_1005F510C(unsigned int a1)
{
  if (a1 > 4) {
    return "unknown";
  }
  else {
    return (&off_1009BA718)[a1];
  }
}

uint64_t sub_1005F5130(uint64_t a1, unsigned int a2, int a3, unint64_t a4, int *a5)
{
  return sub_1005F4E68(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_1005F5138(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int *a5)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 280);
  unint64_t v10 = *(void **)(a1 + 352);
  if (!v10) {
    goto LABEL_26;
  }
  uint8_t v11 = (void *)(a1 + 352);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= a4;
    if (v12 >= a4) {
      uint64_t v14 = v10;
    }
    else {
      uint64_t v14 = v10 + 1;
    }
    if (v13) {
      uint8_t v11 = v10;
    }
    unint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 != (void *)(a1 + 352) && v11[4] <= a4)
  {
    int v15 = *a5;
    __int16 v23 = *((_WORD *)a5 + 2);
    int v22 = v15;
    unsigned int v16 = *((unsigned __int8 *)a5 + 6);
    if (a3) {
      operator delete();
    }
    sub_10003AFE8((uint64_t)v24);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    __int16 v17 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a4, __p);
      *(_DWORD *)std::string buf = 136446722;
      unsigned int v18 = v21 >= 0 ? __p : (void **)__p[0];
      BOOL v26 = "interim";
      __int16 v27 = 2048;
      uint64_t v28 = a2;
      __int16 v29 = 2082;
      __int16 v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for track ID [%llu] to device %{public}s", buf, 0x20u);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(v31) = 2;
    uint64_t v32 = a2;
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_1001471F0((uint64_t)&v22, v16, (uint64_t)&v31, 0);
    sub_10001B910(buf);
    sub_10001B8AC(buf);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a4, buf);
      sub_100785104();
    }
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_1005F536C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F53A4(uint64_t a1, uint64_t a2, int a3, unint64_t a4, int *a5)
{
  return sub_1005F5138(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_1005F53AC(uint64_t a1, int a2, int a3, int a4, unint64_t a5, int *a6)
{
  v29[0] = 0;
  v29[1] = 0;
  sub_10003AED0((uint64_t)v29, a1 + 280);
  unint64_t v12 = *(void **)(a1 + 352);
  if (!v12) {
    goto LABEL_26;
  }
  BOOL v13 = (void *)(a1 + 352);
  do
  {
    unint64_t v14 = v12[4];
    BOOL v15 = v14 >= a5;
    if (v14 >= a5) {
      unsigned int v16 = v12;
    }
    else {
      unsigned int v16 = v12 + 1;
    }
    if (v15) {
      BOOL v13 = v12;
    }
    unint64_t v12 = (void *)*v16;
  }
  while (*v16);
  if (v13 != (void *)(a1 + 352) && v13[4] <= a5)
  {
    int v17 = *a6;
    __int16 v28 = *((_WORD *)a6 + 2);
    int v27 = v17;
    unsigned int v18 = *((unsigned __int8 *)a6 + 6);
    if (a4) {
      operator delete();
    }
    sub_10003AFE8((uint64_t)v29);
    int v26 = 196610;
    BYTE1(v26) = a2;
    HIBYTE(v26) = a3;
    uint64_t v38 = 0;
    char v39 = 0;
    uint64_t v40 = 0;
    __int16 v19 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = off_1009BA240[a2 - 1];
      char v21 = off_1009BA258[a3 - 1];
      sub_100474E18(a5, __p);
      *(_DWORD *)std::string buf = 136446978;
      int v22 = v25 >= 0 ? __p : (void **)__p[0];
      uint64_t v31 = "interim";
      __int16 v32 = 2082;
      uint64_t v33 = v20;
      __int16 v34 = 2082;
      uint64_t v35 = v21;
      __int16 v36 = 2082;
      int v37 = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for player settings '%{public}s'/'%{public}s' to device %{public}s", buf, 0x2Au);
      if (v25 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(v38) = 8;
    char v39 = &v26;
    LOBYTE(v40) = 2;
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_1001471F0((uint64_t)&v27, v18, (uint64_t)&v38, 0);
    sub_10001B910(buf);
    sub_10001B8AC(buf);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a5, buf);
      sub_100785104();
    }
  }
  return sub_10003AFB4((uint64_t)v29);
}

void sub_1005F5630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F5668(uint64_t a1, int a2, int a3, int a4, unint64_t a5, int *a6)
{
  return sub_1005F53AC(a1 - 264, a2, a3, a4, a5, a6);
}

uint64_t sub_1005F5670(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 280);
  int v8 = *(void **)(a1 + 352);
  if (!v8) {
    goto LABEL_26;
  }
  uint64_t v9 = (void *)(a1 + 352);
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= a3;
    if (v10 >= a3) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    int v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 != (void *)(a1 + 352) && v9[4] <= a3)
  {
    int v13 = *a4;
    __int16 v19 = *((_WORD *)a4 + 2);
    int v18 = v13;
    unsigned int v14 = *((unsigned __int8 *)a4 + 6);
    if (a2) {
      operator delete();
    }
    sub_10003AFE8((uint64_t)v21);
    memset(v20, 0, sizeof(v20));
    BOOL v15 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a3, __p);
      unsigned int v16 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446466;
      char v25 = "interim";
      __int16 v26 = 2082;
      int v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for now playing content to device %{public}s", buf, 0x16u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(v20[0]) = 9;
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    sub_1001471F0((uint64_t)&v18, v14, (uint64_t)v20, 0);
    sub_10001B910(__p);
    sub_10001B8AC(__p);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a3, v20);
      sub_100785104();
    }
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1005F5890(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F58C8(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  return sub_1005F5670(a1 - 264, a2, a3, a4);
}

uint64_t sub_1005F58D0(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 280);
  int v8 = *(void **)(a1 + 352);
  if (!v8) {
    goto LABEL_26;
  }
  uint64_t v9 = (void *)(a1 + 352);
  do
  {
    unint64_t v10 = v8[4];
    BOOL v11 = v10 >= a3;
    if (v10 >= a3) {
      unint64_t v12 = v8;
    }
    else {
      unint64_t v12 = v8 + 1;
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    int v8 = (void *)*v12;
  }
  while (*v12);
  if (v9 != (void *)(a1 + 352) && v9[4] <= a3)
  {
    int v13 = *a4;
    __int16 v19 = *((_WORD *)a4 + 2);
    int v18 = v13;
    unsigned int v14 = *((unsigned __int8 *)a4 + 6);
    if (a2) {
      operator delete();
    }
    sub_10003AFE8((uint64_t)v21);
    memset(v20, 0, sizeof(v20));
    BOOL v15 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a3, __p);
      unsigned int v16 = v23 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)std::string buf = 136446466;
      char v25 = "interim";
      __int16 v26 = 2082;
      int v27 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for available players to device %{public}s", buf, 0x16u);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(v20[0]) = 10;
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    sub_1001471F0((uint64_t)&v18, v14, (uint64_t)v20, 0);
    sub_10001B910(__p);
    sub_10001B8AC(__p);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a3, v20);
      sub_100785104();
    }
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1005F5AF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F5B28(uint64_t a1, int a2, unint64_t a3, int *a4)
{
  return sub_1005F58D0(a1 - 264, a2, a3, a4);
}

uint64_t sub_1005F5B30(uint64_t a1, int a2, __int16 a3, int a4, unint64_t a5, int *a6)
{
  v26[0] = 0;
  v26[1] = 0;
  sub_10003AED0((uint64_t)v26, a1 + 280);
  unint64_t v12 = *(void **)(a1 + 352);
  if (!v12) {
    goto LABEL_26;
  }
  int v13 = (void *)(a1 + 352);
  do
  {
    unint64_t v14 = v12[4];
    BOOL v15 = v14 >= a5;
    if (v14 >= a5) {
      unsigned int v16 = v12;
    }
    else {
      unsigned int v16 = v12 + 1;
    }
    if (v15) {
      int v13 = v12;
    }
    unint64_t v12 = (void *)*v16;
  }
  while (*v16);
  if (v13 != (void *)(a1 + 352) && v13[4] <= a5)
  {
    int v17 = *a6;
    __int16 v25 = *((_WORD *)a6 + 2);
    int v24 = v17;
    unsigned int v18 = *((unsigned __int8 *)a6 + 6);
    if (a4) {
      operator delete();
    }
    sub_10003AFE8((uint64_t)v26);
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    uint64_t v35 = 0;
    __int16 v19 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a5, __p);
      *(_DWORD *)std::string buf = 136446722;
      uint64_t v20 = v23 >= 0 ? __p : (void **)__p[0];
      __int16 v28 = "interim";
      __int16 v29 = 1024;
      int v30 = a2;
      __int16 v31 = 2082;
      __int16 v32 = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for player addressed %u to device %{public}s", buf, 0x1Cu);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(v33) = 11;
    LOWORD(v34) = a2;
    WORD1(v34) = a3;
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_1001471F0((uint64_t)&v24, v18, (uint64_t)&v33, 0);
    sub_10001B910(buf);
    sub_10001B8AC(buf);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a5, buf);
      sub_100785104();
    }
  }
  return sub_10003AFB4((uint64_t)v26);
}

void sub_1005F5D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F5DAC(uint64_t a1, int a2, __int16 a3, int a4, unint64_t a5, int *a6)
{
  return sub_1005F5B30(a1 - 264, a2, a3, a4, a5, a6);
}

uint64_t sub_1005F5DB4(uint64_t a1, int a2, int a3, unint64_t a4, int *a5)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 280);
  unint64_t v10 = *(void **)(a1 + 352);
  if (!v10) {
    goto LABEL_26;
  }
  BOOL v11 = (void *)(a1 + 352);
  do
  {
    unint64_t v12 = v10[4];
    BOOL v13 = v12 >= a4;
    if (v12 >= a4) {
      unint64_t v14 = v10;
    }
    else {
      unint64_t v14 = v10 + 1;
    }
    if (v13) {
      BOOL v11 = v10;
    }
    unint64_t v10 = (void *)*v14;
  }
  while (*v14);
  if (v11 != (void *)(a1 + 352) && v11[4] <= a4)
  {
    int v15 = *a5;
    __int16 v23 = *((_WORD *)a5 + 2);
    int v22 = v15;
    unsigned int v16 = *((unsigned __int8 *)a5 + 6);
    if (a3) {
      operator delete();
    }
    sub_10003AFE8((uint64_t)v24);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v17 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a4, __p);
      *(_DWORD *)std::string buf = 136446722;
      unsigned int v18 = v21 >= 0 ? __p : (void **)__p[0];
      __int16 v26 = "interim";
      __int16 v27 = 1024;
      int v28 = a2;
      __int16 v29 = 2082;
      int v30 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Sending %{public}s notification for uidCounter %u to device %{public}s", buf, 0x1Cu);
      if (v21 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(v31) = 12;
    LOWORD(v32) = a2;
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_1001471F0((uint64_t)&v22, v16, (uint64_t)&v31, 0);
    sub_10001B910(buf);
    sub_10001B8AC(buf);
  }
  else
  {
LABEL_26:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a4, buf);
      sub_100785104();
    }
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_1005F5FE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005F6020(uint64_t a1, int a2, int a3, unint64_t a4, int *a5)
{
  return sub_1005F5DB4(a1 - 264, a2, a3, a4, a5);
}

uint64_t sub_1005F6028(uint64_t a1, uint64_t a2, char a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  unint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v15 = v6;
  uint64_t v7 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    if (v14 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    int v17 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received 'get play status' request from device %{public}s", buf, 0xCu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v9 = *(void *)(*sub_1004AD7B8(a1 + 344, &v15) + 8);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1005F61F4;
  _OWORD v11[3] = &unk_1009BA2A0;
  v11[4] = v15;
  char v12 = a3;
  return (*(uint64_t (**)(uint64_t, void *))(*(void *)v9 + 32))(v9, v11);
}

unsigned char *sub_1005F61F4(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5)
{
  v15[1] = a4;
  v15[0] = a3;
  void v15[2] = a5;
  uint64_t v9 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_INFO))
  {
    unint64_t v10 = a5 > 4 ? "unknown" : (&off_1009BA718)[a5];
    sub_100474E18(*(void *)(a1 + 32), __p);
    BOOL v11 = v14 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136446978;
    int v17 = v10;
    __int16 v18 = 1024;
    int v19 = a4;
    __int16 v20 = 1024;
    int v21 = a3;
    __int16 v22 = 2082;
    __int16 v23 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Sending current play status (%{public}s - %u of %ums) to device %{public}s", buf, 0x22u);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (sub_100147140(*(void *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), (uint64_t)v15)
    && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_100785158();
  }
  return sub_10001B8AC(buf);
}

void sub_1005F6388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_1005F63A4(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  char v5 = a3;
  v22[0] = 0;
  v22[1] = 0;
  int v8 = sub_10014724C(a2, a3, a4, v22);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  unint64_t v9 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v21 = v9;
  unint64_t v10 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(v9, __p);
    BOOL v11 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    *(_DWORD *)int v24 = a4;
    *(_WORD *)&uint8_t v24[4] = 2082;
    *(void *)&v24[6] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Received 'continue' command for PDU 0x%x from device %{public}s", buf, 0x12u);
    if (v20 < 0) {
      operator delete(__p[0]);
    }
  }
  if (v8 != 3304)
  {
    if (v8)
    {
      int v17 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v9, __p);
        __int16 v18 = v20 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446466;
        *(void *)int v24 = v18;
        *(_WORD *)&v24[8] = 1024;
        *(_DWORD *)&v24[10] = v8;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to continue response for device %{public}s - result was %{bluetooth:OI_STATUS}u", buf, 0x12u);
        if (v20 < 0)
        {
          unsigned int v16 = (uint64_t *)__p[0];
LABEL_15:
          operator delete(v16);
        }
      }
    }
    else
    {
      __p[0] = &v21;
      char v12 = sub_1002CC204((uint64_t **)(a1 + 480), &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
      LOBYTE(__p[0]) = v5;
      BYTE1(__p[0]) = a4;
      BOOL v13 = sub_1005FE320((uint64_t)(v12 + 5), (unsigned __int8 *)__p);
      __p[0] = &v21;
      char v14 = sub_1002CC204((uint64_t **)(a1 + 480), &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
      if (v14 + 6 != v13)
      {
        if (a4 == 32) {
          sub_1005F2C1C((uint64_t)v14, (char *)v13[5]);
        }
        __p[0] = &v21;
        unint64_t v15 = sub_1002CC204((uint64_t **)(a1 + 480), &v21, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
        sub_10004D3B8((uint64_t **)v15 + 5, v13);
        unsigned int v16 = v13;
        goto LABEL_15;
      }
    }
  }
}

uint64_t sub_1005F6660(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  unint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v19 = v8;
  unint64_t v9 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_INFO))
  {
    sub_100474E18(v8, __p);
    unint64_t v10 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    int v21 = a4;
    __int16 v22 = 2082;
    __int16 v23 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "Received 'abort' command for PDU 0x%x from device %{public}s", buf, 0x12u);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
  BOOL v11 = (uint64_t **)(a1 + 480);
  __p[0] = &v19;
  char v12 = sub_1002CC204(v11, &v19, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
  LOBYTE(__p[0]) = a3;
  BYTE1(__p[0]) = a4;
  BOOL v13 = sub_1005FE320((uint64_t)(v12 + 5), (unsigned __int8 *)__p);
  __p[0] = &v19;
  char v14 = sub_1002CC204(v11, &v19, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
  if (v14 + 6 != v13)
  {
    if (a4 == 32) {
      sub_1005F2C1C((uint64_t)v14, (char *)v13[5]);
    }
    __p[0] = &v19;
    unint64_t v15 = sub_1002CC204(v11, &v19, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
    sub_10004D3B8((uint64_t **)v15 + 5, v13);
    operator delete(v13);
  }
  return sub_100145D18(a2, a3, 65, 0);
}

uint64_t sub_1005F6880(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  unint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v17 = v8;
  unint64_t v9 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v8, __p);
    if (v16 >= 0) {
      unint64_t v10 = __p;
    }
    else {
      unint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v19 = a4;
    __int16 v20 = 2082;
    int v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'SetAddressedPlayer' request (id - %u) from device %{public}s", buf, 0x12u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v11 = *(void *)(*sub_1004AD7B8(a1 + 344, &v17) + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1005F6A60;
  v13[3] = &unk_1009BA2C0;
  void v13[4] = a1;
  v13[5] = v17;
  char v14 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v11 + 104))(v11, a4, v13);
}

unsigned char *sub_1005F6A60(uint64_t a1, int a2)
{
  uint64_t v17 = 0x1000060581900;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  unint64_t v4 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 40), __p);
    char v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    int v14 = a2;
    __int16 v15 = 2082;
    char v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'SetAddressedPlayer' response (result - %02x) to device %{public}s", buf, 0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  HIBYTE(v17) = a2;
  if (a2 == 4) {
    char v6 = 9;
  }
  else {
    char v6 = 10;
  }
  LOBYTE(v10) = v6;
  *(_WORD *)((char *)&v10 + 1) = 9;
  BYTE3(v10) = 0;
  uint64_t v11 = &v17;
  LOWORD(v12) = 8;
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  if (sub_1001498DC(*(void *)(a1 + 40) + 128, *(unsigned __int8 *)(a1 + 48), (unsigned __int8 *)&v10)
    && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_1007851C0();
  }
  return sub_10001B8AC(__p);
}

void sub_1005F6BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_1005F6C04(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  unint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v17 = v8;
  char v9 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v8, __p);
    if (v16 >= 0) {
      uint64_t v10 = __p;
    }
    else {
      uint64_t v10 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 67109378;
    int v19 = a4;
    __int16 v20 = 2082;
    int v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'SetBrowsedPlayer' request (id - %u) from device %{public}s", buf, 0x12u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v11 = *(void *)(*sub_1004AD7B8(a1 + 344, &v17) + 8);
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  void v13[2] = sub_1005F6DE4;
  v13[3] = &unk_1009BA2E0;
  void v13[4] = v17;
  char v14 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v11 + 112))(v11, a4, v13);
}

unsigned char *sub_1005F6DE4(uint64_t a1, int a2, __int16 a3, int a4, uint64_t a5)
{
  if (a2 == 4)
  {
    uint64_t v10 = *(void *)(a5 + 8);
    unsigned __int16 v11 = 13;
    while (v10 != a5)
    {
      if (*(char *)(v10 + 39) < 0) {
        uint64_t v12 = *(void *)(v10 + 24);
      }
      else {
        LOWORD(v12) = *(unsigned __int8 *)(v10 + 39);
      }
      v11 += v12 + 2;
      uint64_t v10 = *(void *)(v10 + 8);
    }
  }
  else
  {
    unsigned __int16 v11 = 4;
  }
  BOOL v13 = qword_100A19EA8;
  BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    sub_100474E18(*(void *)(a1 + 32), v37);
    unsigned __int16 v15 = v11;
    if (v38 >= 0) {
      char v16 = v37;
    }
    else {
      char v16 = (void **)v37[0];
    }
    *(_DWORD *)std::string buf = 67109890;
    int v40 = a2;
    __int16 v41 = 1024;
    int v42 = a4;
    __int16 v43 = 1024;
    int v44 = v11;
    __int16 v45 = 2082;
    __int16 v46 = v16;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Sending 'SetBrowsedPlayer' response (result - %02x, nbItems - %u, length - %u) to device %{public}s", buf, 0x1Eu);
    if (v38 < 0) {
      operator delete(v37[0]);
    }
  }
  else
  {
    unsigned __int16 v15 = v11;
  }
  __chkstk_darwin(v14, v11);
  char v18 = (char *)&v37[-1] - v17;
  bzero((char *)&v37[-1] - v17, v19);
  *char v18 = 112;
  v18[2] = v15 - 3;
  v18[1] = (unsigned __int16)(v15 - 3) >> 8;
  v18[3] = a2;
  if (a2 == 4)
  {
    v18[5] = a3;
    void v18[4] = HIBYTE(a3);
    v18[9] = a4;
    v18[8] = BYTE1(a4);
    v18[7] = BYTE2(a4);
    v18[6] = HIBYTE(a4);
    *((_WORD *)v18 + 5) = 27136;
    uint64_t v20 = *(void *)(a5 + 8);
    v18[12] = *(void *)(a5 + 16);
    int v21 = 13;
    while (v20 != a5)
    {
      int v22 = *(char *)(v20 + 39);
      if (v22 < 0)
      {
        __int16 v26 = &v18[(unsigned __int16)v21];
        v26[1] = *(void *)(v20 + 24);
        *__int16 v26 = BYTE1(*(void *)(v20 + 24));
        int v25 = v21 + 2;
        memcpy(&v18[(unsigned __int16)(v21 + 2)], *(const void **)(v20 + 16), *(void *)(v20 + 24));
        uint64_t v23 = *(void *)(v20 + 24);
      }
      else
      {
        LODWORD(v23) = *(unsigned __int8 *)(v20 + 39);
        int v24 = &v18[(unsigned __int16)v21];
        v24[1] = v22;
        *int v24 = 0;
        int v25 = v21 + 2;
        memcpy(&v18[(unsigned __int16)(v21 + 2)], (const void *)(v20 + 16), v22);
      }
      int v21 = v25 + v23;
      uint64_t v20 = *(void *)(v20 + 8);
    }
  }
  else
  {
    LOWORD(v21) = 4;
  }
  if ((unsigned __int16)v21 != v11)
  {
    __int16 v27 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
      sub_100785290(v27, v28, v29, v30, v31, v32, v33, v34);
    }
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (sub_100149934(*(void *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), v18, v11)
    && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_100785228();
  }
  return sub_10001B8AC(buf);
}

void sub_1005F70D8(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 128));
  _Unwind_Resume(a1);
}

uint64_t sub_1005F70F4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, int a5, uint64_t *a6)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)a2;
  LOWORD(v25) = *(_WORD *)(a2 + 4);
  unint64_t v12 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  unint64_t v23 = v12;
  uint64_t v13 = *a6;
  BOOL v14 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    if (a5) {
      unsigned __int16 v15 = "down";
    }
    else {
      unsigned __int16 v15 = "up";
    }
    sub_100474E18(v12, __p);
    if (v22 >= 0) {
      char v16 = __p;
    }
    else {
      char v16 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315650;
    int v25 = v15;
    __int16 v26 = 1024;
    int v27 = a4;
    __int16 v28 = 2082;
    uint64_t v29 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Received 'ChangePath(%s)' request (uidCounter - %u) from device %{public}s", buf, 0x1Cu);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v17 = *(void *)(*sub_1004AD7B8(a1 + 344, &v23) + 8);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  v19[2] = sub_1005F7324;
  v19[3] = &unk_1009BA300;
  v19[4] = v23;
  char v20 = a3;
  return (*(uint64_t (**)(uint64_t, uint64_t, BOOL, uint64_t, void *))(*(void *)v17 + 120))(v17, a4, a5 == 0, v13, v19);
}

unsigned char *sub_1005F7324(uint64_t a1, int a2, unsigned int a3)
{
  if (a2 == 4) {
    size_t v6 = 8;
  }
  else {
    size_t v6 = 4;
  }
  uint64_t v7 = qword_100A19EA8;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    sub_100474E18(*(void *)(a1 + 32), v24);
    uint64_t v10 = v25 >= 0 ? v24 : (void **)v24[0];
    *(_DWORD *)std::string buf = 67109634;
    int v27 = a2;
    __int16 v28 = 1024;
    unsigned int v29 = a3;
    __int16 v30 = 2082;
    uint64_t v31 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending 'ChangePath' response (result - %02x, nbItems - %u) to device %{public}s", buf, 0x18u);
    if (v25 < 0) {
      operator delete(v24[0]);
    }
  }
  __chkstk_darwin(v8, v9);
  unint64_t v12 = (char *)&v24[-1] - v11;
  bzero((char *)&v24[-1] - v11, v6);
  *(_WORD *)unint64_t v12 = 114;
  void v12[2] = v6 - 3;
  v12[3] = a2;
  if (a2 == 4)
  {
    *((_DWORD *)v12 + 1) = bswap32(a3);
    int v13 = 8;
  }
  else
  {
    int v13 = 4;
  }
  if (v13 != v6)
  {
    BOOL v14 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
      sub_100785290(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (sub_100149934(*(void *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), v12, v6)
    && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_100785308();
  }
  return sub_10001B8AC(buf);
}

void sub_1005F751C(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 96));
  _Unwind_Resume(a1);
}

void *sub_1005F7538(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)a2;
  LOWORD(v28) = *(_WORD *)(a2 + 4);
  unint64_t v14 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  unint64_t v26 = v14;
  uint64_t v15 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a4 > 3 ? "Unknown" : (&off_1009BA780)[(char)a4];
    sub_100474E18(v14, __p);
    uint64_t v17 = v25 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315906;
    __int16 v28 = v16;
    __int16 v29 = 1024;
    int v30 = a5;
    __int16 v31 = 1024;
    int v32 = a6;
    __int16 v33 = 2082;
    uint64_t v34 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received 'GetFolderItems(%s)' request (startItem - %u, endItem - %u) from device %{public}s", buf, 0x22u);
    if (v25 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a4 > 3)
  {
    *(_DWORD *)std::string buf = 167837809;
    return (void *)sub_100149934(a2, a3, buf, 4uLL);
  }
  else
  {
    uint64_t v18 = *(void *)(*sub_1004AD7B8(a1 + 344, &v26) + 8);
    sub_1005F77E0(a8, a7, buf);
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    void v22[2] = sub_1005F79DC;
    v22[3] = &unk_1009BA320;
    v22[4] = a1;
    v22[5] = v26;
    char v23 = a3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, void *))(*(void *)v18 + 128))(v18, a4, a5, a6, buf, v22);
    return sub_1002B308C(buf);
  }
}

void sub_1005F77C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1005F77E0(uint64_t a1@<X1>, unsigned int a2@<W2>, void *a3@<X8>)
{
  *a3 = a3;
  a3[1] = a3;
  a3[2] = 0;
  if (a2)
  {
    if (a1)
    {
      uint64_t v4 = 0;
      char v5 = (unsigned __int8 *)(a1 + 3);
      size_t v6 = a3;
      uint64_t v7 = a2;
      do
      {
        int v8 = *v5;
        int v9 = *(v5 - 1);
        int v10 = *(v5 - 2);
        int v11 = *(v5 - 3);
        unint64_t v12 = operator new(0x18uLL);
        v12[4] = v8 | (v9 << 8) | (v10 << 16) | (v11 << 24);
        v5 += 4;
        *(void *)unint64_t v12 = v6;
        *((void *)v12 + 1) = a3;
        *((void *)v6 + 1) = v12;
        *a3 = v12;
        a3[2] = ++v4;
        size_t v6 = v12;
      }
      while (v7 != v4);
    }
  }
  else
  {
    int v13 = operator new(0x18uLL);
    void v13[4] = 1;
    *(void *)int v13 = a3;
    *((void *)v13 + 1) = a3;
    *a3 = v13;
    a3[1] = v13;
    a3[2] = 1;
    unint64_t v14 = operator new(0x18uLL);
    v14[4] = 2;
    *(void *)unint64_t v14 = v13;
    *((void *)v14 + 1) = a3;
    *((void *)v13 + 1) = v14;
    *a3 = v14;
    a3[2] = 2;
    uint64_t v15 = operator new(0x18uLL);
    void v15[4] = 3;
    *(void *)uint64_t v15 = v14;
    *((void *)v15 + 1) = a3;
    *((void *)v14 + 1) = v15;
    *a3 = v15;
    a3[2] = 3;
    uint64_t v16 = operator new(0x18uLL);
    v16[4] = 4;
    *(void *)uint64_t v16 = v15;
    *((void *)v16 + 1) = a3;
    *((void *)v15 + 1) = v16;
    *a3 = v16;
    a3[2] = 4;
    uint64_t v17 = operator new(0x18uLL);
    v17[4] = 5;
    *(void *)uint64_t v17 = v16;
    *((void *)v17 + 1) = a3;
    *((void *)v16 + 1) = v17;
    *a3 = v17;
    a3[2] = 5;
    uint64_t v18 = operator new(0x18uLL);
    void v18[4] = 6;
    *(void *)uint64_t v18 = v17;
    *((void *)v18 + 1) = a3;
    *((void *)v17 + 1) = v18;
    *a3 = v18;
    a3[2] = 6;
    uint64_t v19 = operator new(0x18uLL);
    v19[4] = 7;
    *(void *)uint64_t v19 = v18;
    *((void *)v19 + 1) = a3;
    *((void *)v18 + 1) = v19;
    *a3 = v19;
    a3[2] = 7;
    uint64_t v20 = operator new(0x18uLL);
    v20[4] = 8;
    *(void *)uint64_t v20 = v19;
    *((void *)v20 + 1) = a3;
    *((void *)v19 + 1) = v20;
    *a3 = v20;
    a3[2] = 8;
  }
}

void sub_1005F79A8(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

void sub_1005F79DC(uint64_t a1, int a2, __int16 a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = (uint64_t *)(a1 + 40);
  size_t v6 = *(void **)(v4 + 512);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = a4;
  int v11 = (void *)(v4 + 512);
  unint64_t v12 = *v5;
  int v13 = (void *)(v4 + 512);
  do
  {
    unint64_t v14 = v6[4];
    BOOL v15 = v14 >= v12;
    if (v14 >= v12) {
      uint64_t v16 = v6;
    }
    else {
      uint64_t v16 = v6 + 1;
    }
    if (v15) {
      int v13 = v6;
    }
    size_t v6 = (void *)*v16;
  }
  while (*v16);
  if (v13 != v11 && v12 >= v13[4])
  {
    if (a2 == 4)
    {
      uint64_t v18 = *(void *)(a4 + 8);
      if (v18 == a4)
      {
        unsigned __int16 v19 = 0;
        LOWORD(v20) = 8;
        uint64_t v18 = a4;
      }
      else
      {
        unsigned __int16 v19 = 0;
        unsigned int v20 = *((unsigned __int16 *)v13 + 20);
        unsigned __int16 v21 = 8;
        while (1)
        {
          __int16 v22 = (*(uint64_t (**)(void))(**(void **)(v18 + 16) + 16))(*(void *)(v18 + 16));
          unsigned __int16 v23 = v22 + v21;
          if (v18 != *(void *)(v7 + 8) && v20 < v23) {
            break;
          }
          ++v19;
          uint64_t v18 = *(void *)(v18 + 8);
          v21 += v22;
          if (v18 == v7)
          {
            uint64_t v18 = v7;
            LOWORD(v20) = v23;
            goto LABEL_27;
          }
        }
        if (v20 >= v21)
        {
          LOWORD(v20) = v21;
        }
        else if (v19 == 1)
        {
          unsigned __int16 v19 = 1;
        }
        else
        {
          __int16 v47 = qword_100A19EA8;
          if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
            sub_1007854E4(v47, v48, v49, v50, v51, v52, v53, v54);
          }
        }
      }
    }
    else
    {
      uint64_t v18 = 0;
      unsigned __int16 v19 = 0;
      LOWORD(v20) = 4;
    }
LABEL_27:
    int v24 = qword_100A19EA8;
    BOOL v25 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
    if (v25)
    {
      sub_100474E18(*v5, v57);
      __int16 v26 = v20;
      if (v58 >= 0) {
        int v27 = v57;
      }
      else {
        int v27 = *(unsigned char **)v57;
      }
      *(_DWORD *)std::string buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = a2;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v19;
      *(_WORD *)&unsigned char buf[14] = 1024;
      LODWORD(v60[0]) = (unsigned __int16)v20;
      WORD2(v60[0]) = 2082;
      *(void *)((char *)v60 + 6) = v27;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Sending 'GetFolderItems' response (result - %02x, nbItems - %u, length - %u) to device %{public}s", buf, 0x1Eu);
      if (v58 < 0) {
        operator delete(*(void **)v57);
      }
    }
    else
    {
      __int16 v26 = v20;
    }
    v55[1] = v55;
    __chkstk_darwin(v25, (unsigned __int16)v20);
    __int16 v29 = (char *)v55 - v28;
    bzero((char *)v55 - v28, v30);
    *__int16 v29 = 113;
    void v29[2] = v26 - 3;
    v29[1] = (unsigned __int16)(v26 - 3) >> 8;
    v29[3] = a2;
    if (a2 == 4)
    {
      v29[5] = a3;
      v29[4] = HIBYTE(a3);
      v29[7] = v19;
      v29[6] = HIBYTE(v19);
      unsigned __int16 v32 = 8;
      *(void *)&long long v31 = 136315138;
      long long v56 = v31;
      do
      {
        uint64_t v7 = *(void *)(v7 + 8);
        if (v7 == v18) {
          break;
        }
        __int16 v33 = qword_100A19EA8;
        if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = *(void *)(v7 + 16);
          if (*(char *)(v34 + 47) < 0)
          {
            sub_10003B098(buf, *(void **)(v34 + 24), *(void *)(v34 + 32));
          }
          else
          {
            *(_OWORD *)std::string buf = *(_OWORD *)(v34 + 24);
            v60[0] = *(void *)(v34 + 40);
          }
          uint64_t v35 = buf;
          if (v60[0] < 0) {
            uint64_t v35 = *(uint8_t **)buf;
          }
          *(_DWORD *)long long v57 = v56;
          *(void *)&v57[4] = v35;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Sending item \"%s\"", v57, 0xCu);
          if (SHIBYTE(v60[0]) < 0) {
            operator delete(*(void **)buf);
          }
        }
        uint64_t v36 = *(void *)(v7 + 16);
        unsigned __int16 v37 = (unsigned __int16)v20 >= v32 ? v20 - v32 : 0;
        if ((*(unsigned int (**)(void))(*(void *)v36 + 24))(*(void *)(v7 + 16)) > v37) {
          break;
        }
        int v38 = (*(uint64_t (**)(uint64_t, char *, void))(*(void *)v36 + 32))(v36, &v29[v32], v37);
        v32 += v38;
      }
      while (v38);
    }
    else
    {
      unsigned __int16 v32 = 4;
    }
    if (v32 > (unsigned __int16)v20)
    {
      char v39 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
        sub_10078546C(v39, v40, v41, v42, v43, v44, v45, v46);
      }
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    if (sub_100149934(*(void *)(a1 + 40) + 128, *(unsigned __int8 *)(a1 + 48), v29, v32)
      && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100785404();
    }
    sub_10001B8AC(buf);
  }
  else
  {
LABEL_12:
    uint64_t v17 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100785370(v5, v17);
    }
  }
}

void sub_1005F7EB8(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 128));
  _Unwind_Resume(a1);
}

void *sub_1005F7ED4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7, uint64_t a8)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)a2;
  LOWORD(v29) = *(_WORD *)(a2 + 4);
  unint64_t v14 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  unint64_t v27 = v14;
  BOOL v15 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a4 > 3 ? "Unknown" : (&off_1009BA780)[(char)a4];
    sub_100474E18(v14, __p);
    uint64_t v17 = v26 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315650;
    __int16 v29 = v16;
    __int16 v30 = 1024;
    int v31 = a6;
    __int16 v32 = 2082;
    __int16 v33 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Received 'GetItemAttributes(%s)' request (uidCounter - %u) from device %{public}s", buf, 0x1Cu);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((a4 - 1) > 2)
  {
    *(_DWORD *)std::string buf = 167837811;
    return (void *)sub_100149934(a2, a3, buf, 4uLL);
  }
  else
  {
    uint64_t v18 = *a5;
    uint64_t v19 = *(void *)(*sub_1004AD7B8(a1 + 344, &v27) + 8);
    sub_1005F77E0(a8, a7, buf);
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    void v23[2] = sub_1005F817C;
    v23[3] = &unk_1009BA340;
    v23[4] = a1;
    v23[5] = v27;
    char v24 = a3;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, void *))(*(void *)v19 + 136))(v19, a4, v18, a6, buf, v23);
    return sub_1002B308C(buf);
  }
}

void sub_1005F8160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_1005F817C(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = (uint64_t *)(a1 + 40);
  char v5 = *(void **)(v3 + 512);
  if (!v5) {
    goto LABEL_12;
  }
  unint64_t v9 = *v4;
  int v10 = (void *)(v3 + 512);
  do
  {
    unint64_t v11 = v5[4];
    BOOL v12 = v11 >= v9;
    if (v11 >= v9) {
      int v13 = v5;
    }
    else {
      int v13 = v5 + 1;
    }
    if (v12) {
      int v10 = v5;
    }
    char v5 = (void *)*v13;
  }
  while (*v13);
  if (v10 == (void *)(v3 + 512) || v9 < v10[4])
  {
LABEL_12:
    uint64_t v14 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_10078555C(v4, v14);
    }
    return;
  }
  if (a2 != 4)
  {
    uint64_t v19 = 0;
    unsigned __int8 v16 = 0;
    uint64_t v17 = 4;
    goto LABEL_33;
  }
  uint64_t v15 = *(void *)(a3 + 8);
  if (v15 == a3)
  {
    unsigned __int8 v16 = 0;
    uint64_t v17 = 5;
    uint64_t v19 = a3;
    goto LABEL_33;
  }
  unsigned __int8 v16 = 0;
  uint64_t v17 = *((unsigned __int16 *)v10 + 20);
  uint64_t v18 = 5;
  uint64_t v19 = *(void *)(a3 + 8);
  while (1)
  {
    uint64_t v20 = *(void *)(v19 + 16);
    if (*(_DWORD *)(v20 + 4) == 8 && v9 != *(void *)(v3 + 528)) {
      goto LABEL_25;
    }
    if (*(char *)(v20 + 31) < 0) {
      uint64_t v20 = *(void *)(v20 + 16);
    }
    else {
      LODWORD(v20) = *(unsigned __int8 *)(v20 + 31);
    }
    uint64_t v21 = (v18 + v20 + 8);
    if (v19 != v15 && v17 < (unsigned __int16)v21) {
      break;
    }
    ++v16;
    uint64_t v18 = v21;
LABEL_25:
    uint64_t v19 = *(void *)(v19 + 8);
    if (v19 == a3)
    {
      uint64_t v19 = a3;
LABEL_32:
      uint64_t v17 = v18;
      goto LABEL_33;
    }
  }
  if (v17 >= (unsigned __int16)v18) {
    goto LABEL_32;
  }
  if (v16 == 1)
  {
    unsigned __int8 v16 = 1;
  }
  else
  {
    uint64_t v49 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
      sub_100785658(v49, v50, v51, v52, v53, v54, v55, v56);
    }
  }
LABEL_33:
  __int16 v22 = qword_100A19EA8;
  BOOL v23 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
  uint64_t v59 = v17;
  if (v23)
  {
    sub_100474E18(*v4, v60);
    __int16 v24 = v59;
    if (v63 >= 0) {
      BOOL v25 = v60;
    }
    else {
      BOOL v25 = *(unsigned char **)v60;
    }
    *(_DWORD *)std::string buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v16;
    *(_WORD *)&unsigned char buf[14] = 1024;
    LODWORD(v65[0]) = (unsigned __int16)v59;
    WORD2(v65[0]) = 2082;
    *(void *)((char *)v65 + 6) = v25;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Sending 'GetItemAttributes' response (result - %02x, nbAttributes - %u, length - %u) to device %{public}s", buf, 0x1Eu);
    if (v63 < 0) {
      operator delete(*(void **)v60);
    }
    LOWORD(v17) = v59;
  }
  else
  {
    __int16 v24 = v17;
  }
  v57[1] = v57;
  __chkstk_darwin(v23, (unsigned __int16)v17);
  unint64_t v27 = (char *)v57 - v26;
  bzero((char *)v57 - v26, v28);
  *unint64_t v27 = 115;
  void v27[2] = v24 - 3;
  v27[1] = (unsigned __int16)(v24 - 3) >> 8;
  v27[3] = a2;
  if (a2 == 4)
  {
    v27[4] = v16;
    uint64_t v30 = *(void *)(a3 + 8);
    unsigned __int16 v31 = 5;
    if (v30 != v19)
    {
      *(void *)&long long v29 = 136315394;
      long long v58 = v29;
      do
      {
        uint64_t v32 = *(void *)(v30 + 16);
        int v33 = *(_DWORD *)(v32 + 4);
        if (v33 != 8 || *v4 == *(void *)(v3 + 528))
        {
          uint64_t v34 = qword_100A19EA8;
          if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
          {
            unsigned int v35 = v33 - 1;
            uint64_t v36 = "Unknown";
            if (v35 <= 7) {
              uint64_t v36 = (&off_1009BA740)[v35];
            }
            if (*(char *)(v32 + 31) < 0)
            {
              sub_10003B098(buf, *(void **)(v32 + 8), *(void *)(v32 + 16));
            }
            else
            {
              long long v37 = *(_OWORD *)(v32 + 8);
              v65[0] = *(void *)(v32 + 24);
              *(_OWORD *)std::string buf = v37;
            }
            int v38 = buf;
            if (v65[0] < 0) {
              int v38 = *(uint8_t **)buf;
            }
            *(_DWORD *)uint64_t v60 = v58;
            *(void *)&v60[4] = v36;
            __int16 v61 = 2080;
            uint64_t v62 = v38;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Sending '%s' attribute: \"%s\"", v60, 0x16u);
            if (SHIBYTE(v65[0]) < 0) {
              operator delete(*(void **)buf);
            }
            uint64_t v32 = *(void *)(v30 + 16);
          }
          unsigned int v39 = (unsigned __int16)v59 >= v31 ? (unsigned __int16)v59 - v31 : 0;
          int v40 = sub_10037DAD4(v32, (uint64_t)&v27[v31], v39);
          v31 += v40;
          if (!v40) {
            break;
          }
        }
        uint64_t v30 = *(void *)(v30 + 8);
      }
      while (v30 != v19);
    }
  }
  else
  {
    unsigned __int16 v31 = 4;
  }
  if (v31 > (unsigned __int16)v59)
  {
    uint64_t v41 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
      sub_10078546C(v41, v42, v43, v44, v45, v46, v47, v48);
    }
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (sub_100149934(*(void *)(a1 + 40) + 128, *(unsigned __int8 *)(a1 + 48), v27, v31)
    && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_1007855F0();
  }
  sub_10001B8AC(buf);
}

void sub_1005F8654(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 128));
  _Unwind_Resume(a1);
}

void sub_1005F8670(uint64_t a1, uint64_t a2, unsigned int a3, int a4, unsigned int a5, void *a6)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__dst[0]) = *(_DWORD *)a2;
  WORD2(__dst[0]) = *(_WORD *)(a2 + 4);
  unint64_t v12 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__dst, 1);
  uint64_t v24 = 0;
  unint64_t v25 = v12;
  __dst[0] = 0;
  __dst[1] = 0;
  sub_1002E5698(__dst, a6, a5);
  int v13 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = SHIBYTE(v24);
    uint64_t v15 = (void **)__dst[0];
    sub_100474E18(v12, __p);
    unsigned __int8 v16 = __dst;
    if (v14 < 0) {
      unsigned __int8 v16 = v15;
    }
    if (v22 >= 0) {
      uint64_t v17 = __p;
    }
    else {
      uint64_t v17 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    unint64_t v27 = v16;
    __int16 v28 = 2082;
    long long v29 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received 'Search(\"%s\")' request from device %{public}s", buf, 0x16u);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a4 == 106)
  {
    uint64_t v18 = *(void *)(*sub_1004AD7B8(a1 + 344, &v25) + 8);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1005F88F8;
    v19[3] = &unk_1009BA360;
    v19[4] = v25;
    char v20 = a3;
    (*(void (**)(uint64_t, void **, void *))(*(void *)v18 + 144))(v18, __dst, v19);
  }
  else
  {
    LODWORD(__p[0]) = 16842880;
    sub_100149934(a2, a3, __p, 4uLL);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_1005F88CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005F88F8(uint64_t a1, int a2, __int16 a3, int a4)
{
  char v5 = HIBYTE(a3);
  if (a2 == 4) {
    size_t v8 = 10;
  }
  else {
    size_t v8 = 4;
  }
  unint64_t v9 = qword_100A19EA8;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_100474E18(*(void *)(a1 + 32), v26);
    unint64_t v12 = v27 >= 0 ? v26 : (void **)v26[0];
    *(_DWORD *)std::string buf = 67109634;
    int v29 = a2;
    __int16 v30 = 1024;
    int v31 = a4;
    __int16 v32 = 2082;
    int v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending 'Search' response (result - %02x, nbItems - %u) to device %{public}s", buf, 0x18u);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
  __chkstk_darwin(v10, v11);
  int v14 = (char *)&v26[-1] - v13;
  bzero((char *)&v26[-1] - v13, v8);
  *(_WORD *)int v14 = 128;
  _DWORD v14[2] = v8 - 3;
  v14[3] = a2;
  if (a2 == 4)
  {
    v14[5] = v5;
    v14[4] = 0;
    v14[9] = a4;
    v14[8] = BYTE1(a4);
    v14[7] = BYTE2(a4);
    int v15 = 10;
    v14[6] = HIBYTE(a4);
  }
  else
  {
    int v15 = 4;
  }
  if (v15 != v8)
  {
    unsigned __int8 v16 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
      sub_100785290(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (sub_100149934(*(void *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), v14, v8)
    && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_1007856D0();
  }
  return sub_10001B8AC(buf);
}

void sub_1005F8B14(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_1005F8B30(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a2;
  WORD2(__p[0]) = *(_WORD *)(a2 + 4);
  unint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  unint64_t v18 = v8;
  unint64_t v9 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v10 = a4 > 3 ? "Unknown" : (&off_1009BA780)[(char)a4];
    sub_100474E18(v8, __p);
    uint64_t v11 = v17 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v20 = v10;
    __int16 v21 = 2082;
    uint64_t v22 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'GetTotalNumberOfItems(%s)' request from device %{public}s", buf, 0x16u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  if (a4 > 3)
  {
    LODWORD(__p[0]) = 167837813;
    return sub_100149934(a2, a3, __p, 4uLL);
  }
  else
  {
    uint64_t v12 = *(void *)(*sub_1004AD7B8(a1 + 344, &v18) + 8);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    _DWORD v14[2] = sub_1005F8D68;
    v14[3] = &unk_1009BA360;
    v14[4] = v18;
    char v15 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v12 + 152))(v12, a4, v14);
  }
}

unsigned char *sub_1005F8D68(uint64_t a1, int a2, __int16 a3, int a4)
{
  char v5 = HIBYTE(a3);
  if (a2 == 4) {
    size_t v8 = 10;
  }
  else {
    size_t v8 = 4;
  }
  unint64_t v9 = qword_100A19EA8;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    sub_100474E18(*(void *)(a1 + 32), v26);
    uint64_t v12 = v27 >= 0 ? v26 : (void **)v26[0];
    *(_DWORD *)std::string buf = 67109634;
    int v29 = a2;
    __int16 v30 = 1024;
    int v31 = a4;
    __int16 v32 = 2082;
    int v33 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending 'GetTotalNumberOfItems' response (result - %02x, nbItems - %u) to device %{public}s", buf, 0x18u);
    if (v27 < 0) {
      operator delete(v26[0]);
    }
  }
  __chkstk_darwin(v10, v11);
  int v14 = (char *)&v26[-1] - v13;
  bzero((char *)&v26[-1] - v13, v8);
  *(_WORD *)int v14 = 117;
  _DWORD v14[2] = v8 - 3;
  v14[3] = a2;
  if (a2 == 4)
  {
    void v14[5] = v5;
    v14[4] = 0;
    v14[9] = a4;
    v14[8] = BYTE1(a4);
    v14[7] = BYTE2(a4);
    int v15 = 10;
    v14[6] = HIBYTE(a4);
  }
  else
  {
    int v15 = 4;
  }
  if (v15 != v8)
  {
    unsigned __int8 v16 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_FAULT)) {
      sub_100785290(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  if (sub_100149934(*(void *)(a1 + 32) + 128, *(unsigned __int8 *)(a1 + 40), v14, v8)
    && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_100785738();
  }
  return sub_10001B8AC(buf);
}

void sub_1005F8F84(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 96));
  _Unwind_Resume(a1);
}

uint64_t sub_1005F8FA0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  unint64_t v12 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  unint64_t v21 = v12;
  uint64_t v13 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = a4 > 3 ? "Unknown" : (&off_1009BA780)[(char)a4];
    sub_100474E18(v12, __p);
    int v15 = v23 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = v14;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a6;
    *(_WORD *)&unsigned char buf[18] = 2082;
    *(void *)&buf[20] = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received 'PlayItem(%s)' request (uidCounter - %u) from device %{public}s", buf, 0x1Cu);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((a4 - 1) > 2)
  {
    __p[0] = (void *)0xA01000074581900;
    *(void *)std::string buf = 2314;
    *(void *)&uint8_t buf[8] = __p;
    *(void *)&uint8_t buf[16] = 8;
    return sub_1001498DC(a2, a3, buf);
  }
  else
  {
    uint64_t v16 = *a5;
    uint64_t v17 = *(void *)(*sub_1004AD7B8(a1 + 344, &v21) + 8);
    v19[0] = _NSConcreteStackBlock;
    v19[1] = 3221225472;
    v19[2] = sub_1005F9224;
    v19[3] = &unk_1009BA2C0;
    v19[4] = a1;
    void v19[5] = v21;
    char v20 = a3;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v17 + 160))(v17, a4, v16, a6, v19);
  }
}

unsigned char *sub_1005F9224(uint64_t a1, int a2)
{
  uint64_t v17 = 0x1000074581900;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v4 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*(void *)(a1 + 40), __p);
    char v5 = v9 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)std::string buf = 67109378;
    int v14 = a2;
    __int16 v15 = 2082;
    uint64_t v16 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'play item' response (result - %02x) to device %{public}s", buf, 0x12u);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
  }
  HIBYTE(v17) = a2;
  if (a2 == 4) {
    char v6 = 9;
  }
  else {
    char v6 = 10;
  }
  LOBYTE(v10) = v6;
  *(_WORD *)((char *)&v10 + 1) = 9;
  BYTE3(v10) = 0;
  uint64_t v11 = &v17;
  LOWORD(v12) = 8;
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  if (sub_1001498DC(*(void *)(a1 + 40) + 128, *(unsigned __int8 *)(a1 + 48), (unsigned __int8 *)&v10)
    && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_1007857A0();
  }
  return sub_10001B8AC(__p);
}

void sub_1005F93AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_1005F93C8(uint64_t a1, uint64_t a2, __int16 a3, char *a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(v27[0]) = *(_DWORD *)a2;
  WORD2(v27[0]) = *(_WORD *)(a2 + 4);
  unint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v27, 1);
  uint64_t v28 = 0;
  unint64_t v29 = v8;
  v27[0] = 0;
  v27[1] = 0;
  sub_10004191C(v27, a4);
  char v9 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = SHIBYTE(v28);
    uint64_t v11 = (void **)v27[0];
    sub_100474E18(v8, __p);
    uint64_t v12 = v27;
    if (v10 < 0) {
      uint64_t v12 = v11;
    }
    if (v26 >= 0) {
      uint64_t v13 = __p;
    }
    else {
      uint64_t v13 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'GetImageProperties(%s)' request from device %{public}s", buf, 0x16u);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 280);
  int v14 = *(void **)(a1 + 352);
  if (!v14) {
    goto LABEL_33;
  }
  __int16 v15 = (void *)(a1 + 352);
  do
  {
    unint64_t v16 = v14[4];
    BOOL v17 = v16 >= v8;
    if (v16 >= v8) {
      uint64_t v18 = v14;
    }
    else {
      uint64_t v18 = v14 + 1;
    }
    if (v17) {
      __int16 v15 = v14;
    }
    int v14 = (void *)*v18;
  }
  while (*v18);
  if (v15 != (void *)(a1 + 352) && v8 >= v15[4])
  {
    uint64_t v19 = *(void *)(*sub_1004AD7B8(a1 + 344, &v29) + 8);
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3321888768;
    void v20[2] = sub_1005F9710;
    void v20[3] = &unk_1009BA380;
    v20[4] = a1;
    if (SHIBYTE(v28) < 0)
    {
      sub_10003B098(&v21, v27[0], (unint64_t)v27[1]);
    }
    else
    {
      long long v21 = *(_OWORD *)v27;
      uint64_t v22 = v28;
    }
    unint64_t v23 = v29;
    __int16 v24 = a3;
    (*(void (**)(uint64_t, void **, void *))(*(void *)v19 + 168))(v19, v27, v20);
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)v21);
    }
  }
  else
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(v8, __p);
      sub_100785808();
    }
  }
  sub_10003AFB4((uint64_t)buf);
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
}

void sub_1005F96BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4(v31 - 112);
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void sub_1005F9710(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  char v6 = qword_100A19EA8;
  if (*(void *)(*(void *)(a1 + 32) + 528))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2) {
        uint64_t v11 = "UNKNOWN";
      }
      else {
        uint64_t v11 = (&off_1009BA7A0)[(char)a2];
      }
      uint64_t v12 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        uint64_t v12 = (void *)*v12;
      }
      sub_100474E18(*(void *)(a1 + 64), __p);
      if (v16 >= 0) {
        uint64_t v13 = __p;
      }
      else {
        uint64_t v13 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v18 = v11;
      __int16 v19 = 2080;
      char v20 = v12;
      __int16 v21 = 2082;
      uint64_t v22 = v13;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'GetImageProperties' response (result - %s, handle - %s) to device %{public}s", buf, 0x20u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    int v14 = (const char *)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      int v14 = *(const char **)v14;
    }
    if (sub_1000F8164(*(unsigned __int16 *)(a1 + 72), v14, *a3, *a4, *a5, a3[1] - *a3))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
        sub_1007858F0();
      }
    }
    sub_10001B8AC(buf);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_10078585C(a1, (uint64_t)v6);
  }
}

void sub_1005F98F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_1005F990C(uint64_t a1, uint64_t a2, __int16 a3, char *a4, uint64_t a5, uint64_t a6)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)a2;
  LOWORD(v35) = *(_WORD *)(a2 + 4);
  unint64_t v12 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  uint64_t v32 = 0;
  unint64_t v33 = v12;
  v31[0] = 0;
  v31[1] = 0;
  sub_10004191C(v31, a4);
  uint64_t v13 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = SHIBYTE(v32);
    __int16 v15 = (void **)v31[0];
    sub_100474E18(v12, __p);
    char v16 = v31;
    if (v14 < 0) {
      char v16 = v15;
    }
    if (v30 >= 0) {
      BOOL v17 = __p;
    }
    else {
      BOOL v17 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315906;
    unsigned int v35 = v16;
    __int16 v36 = 1024;
    int v37 = a5;
    __int16 v38 = 1024;
    int v39 = a6;
    __int16 v40 = 2082;
    uint64_t v41 = v17;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Received 'GetImage(%s)' request (width - %d, height - %d) from device %{public}s", buf, 0x22u);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1 + 280);
  uint64_t v18 = *(void **)(a1 + 352);
  if (!v18) {
    goto LABEL_33;
  }
  __int16 v19 = (void *)(a1 + 352);
  do
  {
    unint64_t v20 = v18[4];
    BOOL v21 = v20 >= v12;
    if (v20 >= v12) {
      uint64_t v22 = v18;
    }
    else {
      uint64_t v22 = v18 + 1;
    }
    if (v21) {
      __int16 v19 = v18;
    }
    uint64_t v18 = (void *)*v22;
  }
  while (*v22);
  if (v19 != (void *)(a1 + 352) && v12 >= v19[4])
  {
    uint64_t v23 = *(void *)(*sub_1004AD7B8(a1 + 344, &v33) + 8);
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3321888768;
    void v24[2] = sub_1005F9C78;
    v24[3] = &unk_1009BA3B0;
    uint8_t v24[4] = a1;
    if (SHIBYTE(v32) < 0)
    {
      sub_10003B098(&v25, v31[0], (unint64_t)v31[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)v31;
      uint64_t v26 = v32;
    }
    unint64_t v27 = v33;
    __int16 v28 = a3;
    (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void *))(*(void *)v23 + 176))(v23, v31, a5, a6, v24);
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
  }
  else
  {
LABEL_33:
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(v12, buf);
      sub_100785808();
    }
  }
  sub_10003AFB4((uint64_t)__p);
  if (SHIBYTE(v32) < 0) {
    operator delete(v31[0]);
  }
}

void sub_1005F9C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a23);
  if (a31 < 0) {
    operator delete(a26);
  }
  _Unwind_Resume(a1);
}

void sub_1005F9C78(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char v5 = qword_100A19EA8;
  if (*(void *)(*(void *)(a1 + 32) + 528))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2) {
        char v9 = "UNKNOWN";
      }
      else {
        char v9 = (&off_1009BA7A0)[(char)a2];
      }
      int v10 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        int v10 = (void *)*v10;
      }
      sub_100474E18(*(void *)(a1 + 64), __p);
      if (v13 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      __int16 v15 = v9;
      __int16 v16 = 2080;
      BOOL v17 = v10;
      __int16 v18 = 2048;
      uint64_t v19 = a4;
      __int16 v20 = 2082;
      BOOL v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending 'GetImage' response (result - %s, handle - %s, length - %zu) to device %{public}s", buf, 0x2Au);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    if (sub_1000F835C(*(unsigned __int16 *)(a1 + 72), a3, a4))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
        sub_1007859EC();
      }
    }
    sub_10001B8AC(buf);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_100785958(a1, (uint64_t)v5);
  }
}

void sub_1005F9E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_1005F9E5C(uint64_t a1, uint64_t a2, __int16 a3, char *a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  LODWORD(v22[0]) = *(_DWORD *)a2;
  WORD2(v22[0]) = *(_WORD *)(a2 + 4);
  unint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v22, 1);
  unint64_t v24 = v8;
  v22[0] = 0;
  v22[1] = 0;
  uint64_t v23 = 0;
  sub_10004191C(v22, a4);
  char v9 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = SHIBYTE(v23);
    uint64_t v11 = (void **)v22[0];
    sub_100474E18(v8, __p);
    unint64_t v12 = v22;
    if (v10 < 0) {
      unint64_t v12 = v11;
    }
    if (v21 >= 0) {
      char v13 = __p;
    }
    else {
      char v13 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v26 = v12;
    __int16 v27 = 2082;
    __int16 v28 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Received 'GetLinkedThumbnail(%s)' request from device %{public}s", buf, 0x16u);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v14 = *(void *)(*sub_1004AD7B8(a1 + 344, &v24) + 8);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3321888768;
  void v15[2] = sub_1005FA100;
  _DWORD v15[3] = &unk_1009BA3B0;
  void v15[4] = a1;
  if (SHIBYTE(v23) < 0)
  {
    sub_10003B098(&v16, v22[0], (unint64_t)v22[1]);
  }
  else
  {
    long long v16 = *(_OWORD *)v22;
    uint64_t v17 = v23;
  }
  unint64_t v18 = v24;
  __int16 v19 = a3;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v14 + 184))(v14, v22, v15);
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
}

void sub_1005FA0C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1005FA100(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  char v5 = qword_100A19EA8;
  if (*(void *)(*(void *)(a1 + 32) + 528))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2 > 2) {
        char v9 = "UNKNOWN";
      }
      else {
        char v9 = (&off_1009BA7A0)[(char)a2];
      }
      int v10 = (void *)(a1 + 40);
      if (*(char *)(a1 + 63) < 0) {
        int v10 = (void *)*v10;
      }
      sub_100474E18(*(void *)(a1 + 64), __p);
      if (v13 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315906;
      __int16 v15 = v9;
      __int16 v16 = 2080;
      uint64_t v17 = v10;
      __int16 v18 = 2048;
      uint64_t v19 = a4;
      __int16 v20 = 2082;
      char v21 = v11;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Sending 'GetLinkedThumbnail' response (result - %s, handle - %s, length - %zu) to device %{public}s", buf, 0x2Au);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    if (sub_1000F8434(*(unsigned __int16 *)(a1 + 72), a3, a4))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
        sub_100785AE8();
      }
    }
    sub_10001B8AC(buf);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
  {
    sub_100785A54(a1, (uint64_t)v5);
  }
}

void sub_1005FA2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_1005FA2E4(uint64_t a1, uint64_t a2, char a3, uint64_t a4, unsigned int a5, const void *a6)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  *(_DWORD *)std::string buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  unint64_t v11 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  uint64_t v26 = 0;
  unint64_t v27 = v11;
  long long v25 = &off_100998428;
  unint64_t v12 = qword_100A19EA8;
  BOOL v13 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT);
  if (a5)
  {
    if (v13)
    {
      sub_100474E18(v11, __p);
      uint64_t v14 = "s";
      if (a5 == 1) {
        uint64_t v14 = "";
      }
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a5;
      if (v29 >= 0) {
        __int16 v15 = __p;
      }
      else {
        __int16 v15 = *(unsigned char **)__p;
      }
      *(_WORD *)uint64_t v31 = 2080;
      *(void *)&v31[2] = v14;
      __int16 v32 = 2082;
      unint64_t v33 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received 'get element attributes' (%d attribute%s) request from device %{public}s", buf, 0x1Cu);
      if (v29 < 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_1000335D8(buf, a6, 4 * a5);
    sub_100049EE0((uint64_t)&v25, (uint64_t)buf);
  }
  else
  {
    if (v13)
    {
      sub_100474E18(v11, buf);
      __int16 v16 = SBYTE3(v33) >= 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)long long __p = 136446210;
      *(void *)&__p[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Received 'get element attributes' (all attributes) request from device %{public}s", __p, 0xCu);
      if (SBYTE3(v33) < 0) {
        operator delete(*(void **)buf);
      }
    }
    if (*(void *)(a1 + 528) == v11) {
      LOBYTE(a5) = 8;
    }
    else {
      LOBYTE(a5) = 7;
    }
    if (*(void *)(a1 + 528) == v11) {
      size_t v17 = 32;
    }
    else {
      size_t v17 = 28;
    }
    sub_1000335D8(buf, &unk_1007BFDE0, v17);
    sub_100049EE0((uint64_t)&v25, (uint64_t)buf);
  }
  *(void *)std::string buf = &off_100998428;
  if (*(void *)v31) {
    sub_1000368F4(*(atomic_uint **)v31);
  }
  uint64_t v18 = *(void *)(*sub_1004AD7B8(a1 + 344, &v27) + 8);
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3321888768;
  v19[2] = sub_1005FA6EC;
  v19[3] = &unk_1009BA3E0;
  v19[4] = a1;
  char v23 = a5;
  __int16 v20 = &off_100998428;
  char v21 = v26;
  if (v26) {
    sub_100037354((uint64_t)v26);
  }
  unint64_t v22 = v27;
  char v24 = a3;
  (*(void (**)(uint64_t, void *))(*(void *)v18 + 24))(v18, v19);
  __int16 v20 = &off_100998428;
  if (v21) {
    sub_1000368F4(v21);
  }
  long long v25 = &off_100998428;
  if (v26) {
    sub_1000368F4(v26);
  }
}

void sub_1005FA670(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, atomic_uint *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a19) {
    sub_1000368F4(a19);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_1005FA6EC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v47 = *(void *)(a1 + 32);
  char v5 = (char *)malloc_type_calloc(8uLL, 0x18uLL, 0x1010040D8983CCAuLL);
  if (*(unsigned char *)(a1 + 64))
  {
    uint64_t v6 = 0;
    unsigned __int8 v7 = 0;
    while (2)
    {
      int v8 = *(_DWORD *)(sub_10004A6E4(a1 + 40) + 4 * v6);
      switch(v8)
      {
        case 1:
          if (*((char *)a3 + 39) >= 0) {
            char v9 = (const char *)(a3 + 4);
          }
          else {
            char v9 = (const char *)*((void *)a3 + 2);
          }
          uint64_t v10 = qword_100A19EA8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_64;
          }
          sub_100474E18(*(void *)(a1 + 56), buf);
          unint64_t v11 = buf;
          if (v50 < 0) {
            unint64_t v11 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 136315394;
          *(void *)uint64_t v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(void *)&v52[10] = v11;
          unint64_t v12 = v10;
          BOOL v13 = "Sending attribute 'title: %s' to device %{public}s";
          goto LABEL_62;
        case 2:
          if (*((char *)a3 + 63) >= 0) {
            char v9 = (const char *)(a3 + 10);
          }
          else {
            char v9 = (const char *)*((void *)a3 + 5);
          }
          uint64_t v20 = qword_100A19EA8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_64;
          }
          sub_100474E18(*(void *)(a1 + 56), buf);
          char v21 = buf;
          if (v50 < 0) {
            char v21 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 136315394;
          *(void *)uint64_t v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(void *)&v52[10] = v21;
          unint64_t v12 = v20;
          BOOL v13 = "Sending attribute 'artist: %s' to device %{public}s";
          goto LABEL_62;
        case 3:
          if (*((char *)a3 + 87) >= 0) {
            char v9 = (const char *)(a3 + 16);
          }
          else {
            char v9 = (const char *)*((void *)a3 + 8);
          }
          uint64_t v22 = qword_100A19EA8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_64;
          }
          sub_100474E18(*(void *)(a1 + 56), buf);
          char v23 = buf;
          if (v50 < 0) {
            char v23 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 136315394;
          *(void *)uint64_t v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(void *)&v52[10] = v23;
          unint64_t v12 = v22;
          BOOL v13 = "Sending attribute 'album: %s' to device %{public}s";
          goto LABEL_62;
        case 4:
          int v14 = *a3;
          uint64_t v24 = qword_100A19EA8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_48;
          }
          sub_100474E18(*(void *)(a1 + 56), buf);
          long long v25 = buf;
          if (v50 < 0) {
            long long v25 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 67109378;
          *(_DWORD *)uint64_t v52 = v14;
          *(_WORD *)&v52[4] = 2082;
          *(void *)&v52[6] = v25;
          size_t v17 = v24;
          uint64_t v18 = "Sending attribute 'track number: %u' to device %{public}s";
          goto LABEL_46;
        case 5:
          int v14 = a3[1];
          uint64_t v15 = qword_100A19EA8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_48;
          }
          sub_100474E18(*(void *)(a1 + 56), buf);
          __int16 v16 = buf;
          if (v50 < 0) {
            __int16 v16 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 67109378;
          *(_DWORD *)uint64_t v52 = v14;
          *(_WORD *)&v52[4] = 2082;
          *(void *)&v52[6] = v16;
          size_t v17 = v15;
          uint64_t v18 = "Sending attribute 'total tracks: %u' to device %{public}s";
          goto LABEL_46;
        case 6:
          if (*((char *)a3 + 111) >= 0) {
            char v9 = (const char *)(a3 + 22);
          }
          else {
            char v9 = (const char *)*((void *)a3 + 11);
          }
          uint64_t v26 = qword_100A19EA8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_64;
          }
          sub_100474E18(*(void *)(a1 + 56), buf);
          unint64_t v27 = buf;
          if (v50 < 0) {
            unint64_t v27 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 136315394;
          *(void *)uint64_t v52 = v9;
          *(_WORD *)&v52[8] = 2082;
          *(void *)&v52[10] = v27;
          unint64_t v12 = v26;
          BOOL v13 = "Sending attribute 'genre: %s' to device %{public}s";
          goto LABEL_62;
        case 7:
          int v14 = a3[2];
          uint64_t v28 = qword_100A19EA8;
          if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_48;
          }
          sub_100474E18(*(void *)(a1 + 56), buf);
          char v29 = buf;
          if (v50 < 0) {
            char v29 = *(uint8_t **)buf;
          }
          *(_DWORD *)uint64_t v51 = 67109378;
          *(_DWORD *)uint64_t v52 = v14;
          *(_WORD *)&v52[4] = 2082;
          *(void *)&v52[6] = v29;
          size_t v17 = v28;
          uint64_t v18 = "Sending attribute 'playing time: %ums' to device %{public}s";
LABEL_46:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, v51, 0x12u);
          if (v50 < 0) {
            operator delete(*(void **)buf);
          }
LABEL_48:
          int v30 = v7;
          uint64_t v31 = &v5[24 * v7];
          *(_DWORD *)uint64_t v31 = v8;
          *((_WORD *)v31 + 2) = 106;
          goto LABEL_69;
        case 8:
          uint64_t v32 = *(void *)(a1 + 56);
          if (v32 == *(void *)(v47 + 528))
          {
            if (*((char *)a3 + 135) >= 0) {
              char v9 = (const char *)(a3 + 28);
            }
            else {
              char v9 = (const char *)*((void *)a3 + 14);
            }
            uint64_t v35 = qword_100A19EA8;
            if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(v32, buf);
              __int16 v36 = buf;
              if (v50 < 0) {
                __int16 v36 = *(uint8_t **)buf;
              }
              *(_DWORD *)uint64_t v51 = 136315394;
              *(void *)uint64_t v52 = v9;
              *(_WORD *)&v52[8] = 2082;
              *(void *)&v52[10] = v36;
              unint64_t v12 = v35;
              BOOL v13 = "Sending attribute 'image handle: %s' to device %{public}s";
LABEL_62:
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, v51, 0x16u);
              if (v50 < 0) {
                operator delete(*(void **)buf);
              }
            }
LABEL_64:
            int v30 = v7;
            int v37 = &v5[24 * v7];
            *(_DWORD *)int v37 = v8;
            *((_WORD *)v37 + 2) = 106;
            if (v9)
            {
              size_t v38 = strlen(v9);
              uint64_t v39 = 256;
              if (v38 < 0x100) {
                uint64_t v39 = v38;
              }
              size_t v40 = v39 + 1;
              uint64_t v41 = (char *)malloc_type_malloc(v39 + 1, 0x44D99EA1uLL);
              *(void *)&v5[24 * v7 + 8] = v41;
              strlcpy(v41, v9, v40);
            }
            else
            {
              int v14 = 0;
LABEL_69:
              uint64_t v42 = (char *)malloc_type_malloc(0xBuLL, 0xC589C341uLL);
              *(void *)&v5[24 * v30 + 8] = v42;
              if (v14) {
                snprintf(v42, 0xBuLL, "%u", v14);
              }
              else {
                *uint64_t v42 = 0;
              }
            }
            *(_DWORD *)&v5[24 * v30 + 16] = strlen(*(const char **)&v5[24 * v30 + 8]);
            ++v7;
          }
          else
          {
            unint64_t v33 = qword_100A19EA8;
            if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
            {
              sub_100474E18(v32, buf);
              uint64_t v34 = buf;
              if (v50 < 0) {
                uint64_t v34 = *(uint8_t **)buf;
              }
              *(_DWORD *)uint64_t v51 = 136446210;
              *(void *)uint64_t v52 = v34;
              _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Ignoring 'image handle' attribute request as device %{public}s did not establish BIP", v51, 0xCu);
              if (v50 < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
LABEL_73:
          if (++v6 < (unint64_t)*(unsigned __int8 *)(a1 + 64) && v7 < 9u) {
            continue;
          }
          char v48 = 0;
          sub_10001B8E0(&v48);
          if (!v7) {
            goto LABEL_78;
          }
          uint64_t v43 = sub_10014719C(*(void *)(a1 + 56) + 128, *(unsigned __int8 *)(a1 + 65), v7, (uint64_t)v5);
          break;
        default:
          uint64_t v19 = qword_100A19EA8;
          if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v8;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Request for unknown attribute attributeID %d", buf, 8u);
          }
          goto LABEL_73;
      }
      break;
    }
  }
  else
  {
    char v48 = 0;
    sub_10001B8E0(&v48);
LABEL_78:
    uint64_t v43 = sub_100145D18(*(void *)(a1 + 56) + 128, *(unsigned __int8 *)(a1 + 65), 32, 3306);
  }
  if (!v43) {
    goto LABEL_86;
  }
  if (v43 != 3304)
  {
    uint64_t v43 = os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR);
    if (v43)
    {
      sub_100474E18(*(void *)(a1 + 56), buf);
      sub_100785B50();
    }
LABEL_86:
    sub_1005F2C1C(v43, v5);
    return sub_10001B8AC(&v48);
  }
  uint64_t v44 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_INFO, "Message too big, sent only the first chunk of data. Wait for next request from CT", buf, 2u);
  }
  *(void *)std::string buf = a1 + 56;
  uint64_t v45 = sub_1002CC204((uint64_t **)(v47 + 480), (unint64_t *)(a1 + 56), (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
  v51[0] = *(unsigned char *)(a1 + 65);
  v51[1] = 32;
  *(void *)std::string buf = v51;
  *((void *)sub_1005FE3B0((uint64_t **)v45 + 5, v51, (uint64_t)&unk_1007BE9D0, (_WORD **)buf) + 5) = v5;
  return sub_10001B8AC(&v48);
}

void sub_1005FAF78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28)
{
}

void sub_1005FAFBC(uint64_t a1, uint64_t a2, uint64_t a3, char *a4, int a5, uint64_t a6, int a7)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA6B8);
  }
  uint64_t v58 = 0;
  int v70 = *(_DWORD *)a2;
  __int16 v71 = *(_WORD *)(a2 + 4);
  uint64_t v12 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v70, 1);
  long long v57 = 0;
  uint64_t v58 = v12;
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  bzero(&v70, 0x201uLL);
  if (a7)
  {
    if (a7 != 3301)
    {
      uint64_t v15 = qword_100A19EA8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
        return;
      }
      sub_100474E18(v12, __p);
      if (__p[23] >= 0) {
        uint64_t v41 = __p;
      }
      else {
        uint64_t v41 = *(unsigned char **)__p;
      }
      *(_DWORD *)std::string buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = a5;
      *(_WORD *)&uint8_t buf[8] = 2082;
      *(void *)&buf[10] = v41;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = a7;
      size_t v17 = "Received invalid response for PDU 0x%02x from device %{public}s - result was %{bluetooth:OI_STATUS}u";
      goto LABEL_75;
    }
    BOOL v13 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(v12, buf);
      size_t v40 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      *(_DWORD *)long long __p = 67109378;
      *(_DWORD *)&__p[4] = a5;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = v40;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Received 'not implemented' response for PDU 0x%02x from device %{public}s", __p, 0x12u);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  int v14 = sub_100144F7C((uint64_t)a4, a5, (uint64_t)&v55, &v70);
  if (v14)
  {
    uint64_t v15 = qword_100A19EA8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      return;
    }
    sub_100474E18(v58, __p);
    if (__p[23] >= 0) {
      __int16 v16 = __p;
    }
    else {
      __int16 v16 = *(unsigned char **)__p;
    }
    *(_DWORD *)std::string buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = a5;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v16;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v14;
    size_t v17 = "Failed to unmarshal response for PDU 0x%02x from device %{public}s - result was %{bluetooth:OI_STATUS}u";
LABEL_75:
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v17, buf, 0x18u);
    if ((__p[23] & 0x80000000) != 0)
    {
      size_t v38 = *(void **)__p;
      goto LABEL_77;
    }
    return;
  }
  switch(a5)
  {
    case 80:
      if (*a4 != 9)
      {
        uint64_t v39 = qword_100A19EA8;
        if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
          sub_100785C58(&v58, v39);
        }
        return;
      }
      *(void *)std::string buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1 + 392);
      int v29 = v56;
      *(void *)long long __p = &v58;
      *((_DWORD *)sub_1005031E0((uint64_t **)(a1 + 456), (unint64_t *)&v58, (uint64_t)&unk_1007BE9D0, (void **)__p)+ 10) = v29;
      if (qword_1009F8418 != -1) {
        dispatch_once(&qword_1009F8418, &stru_1009BA698);
      }
      LOBYTE(v30) = (_BYTE)v56;
      sub_100414154((void *)qword_1009F8410, v58, *a4, (float)v30 / 127.0);
      goto LABEL_46;
    case 49:
      int v21 = *v56;
      if (v21 == 13)
      {
        if ((*a4 | 2) != 0xF)
        {
          uint64_t v42 = sub_1004AFB34();
          v48[0] = _NSConcreteStackBlock;
          v48[1] = 3221225472;
          v48[2] = sub_1005FBB00;
          v48[3] = &unk_100997528;
          v48[4] = v58;
          sub_100013018(v42, v48);
          return;
        }
        int v22 = v56[8];
        char v23 = qword_100A19EA8;
        if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(v58, __p);
          uint64_t v24 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)std::string buf = 67109634;
          *(_DWORD *)&uint8_t buf[4] = v22;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = (3302700 * v22) >> 22;
          *(_WORD *)&unsigned char buf[14] = 2082;
          *(void *)&uint8_t buf[16] = v24;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received notification for absolute volume 0x%02x (~%d%%) from device %{public}s", buf, 0x18u);
          if ((__p[23] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        v53[0] = 0;
        v53[1] = 0;
        sub_10003AED0((uint64_t)v53, a1 + 392);
        *(void *)std::string buf = &v58;
        *((_DWORD *)sub_1005031E0((uint64_t **)(a1 + 456), (unint64_t *)&v58, (uint64_t)&unk_1007BE9D0, (void **)buf)+ 10) = v22;
        sub_10003AFE8((uint64_t)v53);
        uint64_t v68 = 0;
        long long v67 = 0u;
        memset(v66, 0, sizeof(v66));
        long long v64 = 0u;
        long long v65 = 0u;
        long long v62 = 0u;
        long long v63 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_1006161E0((uint64_t)&buf[1]);
        unsigned char buf[18] = 0;
        buf[20] = 0;
        BYTE2(v63) = 0;
        BYTE4(v63) = 0;
        HIDWORD(v66[2]) = 0;
        long long v62 = 0uLL;
        *(void *)&unsigned char buf[24] = 0;
        LOBYTE(v63) = 0;
        long long v64 = 0uLL;
        *((void *)&v63 + 1) = 0;
        LOBYTE(v65) = 0;
        v66[0] = 0;
        v66[1] = 0;
        *((void *)&v65 + 1) = 0;
        *(_DWORD *)((char *)&v66[1] + 7) = 0;
        LOBYTE(v66[3]) = 1;
        BYTE2(v68) = 0;
        *(void *)((char *)&v66[3] + 6) = 0;
        *(void *)((char *)&v66[3] + 1) = 0;
        long long v67 = 0uLL;
        v66[5] = 0;
        LOBYTE(v68) = 0;
        BOOL v25 = sub_1004783B8(v58, (uint64_t)buf);
        if (BYTE10(v67)) {
          BOOL v26 = v25;
        }
        else {
          BOOL v26 = 0;
        }
        if (v26)
        {
          unint64_t v27 = qword_100A19EA8;
          if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v58, v59);
            uint64_t v28 = v60 >= 0 ? v59 : (void **)v59[0];
            *(_DWORD *)long long __p = 67109634;
            *(_DWORD *)&__p[4] = v22;
            *(_WORD *)&__p[8] = 1024;
            *(_DWORD *)&__p[10] = (3302700 * v22) >> 22;
            *(_WORD *)&unsigned char __p[14] = 2082;
            *(void *)&__p[16] = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Ignoring notification for absolute volume 0x%02x (~%d%%) from device %{public}s", __p, 0x18u);
            if (v60 < 0) {
              operator delete(v59[0]);
            }
          }
        }
        else
        {
          char v43 = *a4;
          uint64_t v44 = sub_1004AFB34();
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 3221225472;
          v50[2] = sub_1005FBA84;
          v50[3] = &unk_1009A6D98;
          v50[4] = v58;
          int v51 = v22;
          char v52 = v43;
          sub_100013018(v44, v50);
        }
        if (*a4 == 13)
        {
          unsigned __int8 v49 = 0;
          if (sub_100144CF8(a2, &v49, 13))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
            {
              sub_100474E18(v58, __p);
              sub_100785C08();
            }
          }
        }
        if (SHIBYTE(v66[1]) < 0) {
          operator delete(*((void **)&v65 + 1));
        }
        if (SHIBYTE(v64) < 0) {
          operator delete(*((void **)&v63 + 1));
        }
        if (SHIBYTE(v62) < 0) {
          operator delete(*(void **)&buf[24]);
        }
        nullsub_95(&buf[1]);
        uint64_t v31 = (uint8_t *)v53;
        goto LABEL_91;
      }
      uint64_t v32 = qword_100A19EA8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
        return;
      }
      sub_100474E18(v58, buf);
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v35 = buf;
      }
      else {
        uint64_t v35 = *(uint8_t **)buf;
      }
      *(_DWORD *)long long __p = 67109378;
      *(_DWORD *)&__p[4] = v21;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = v35;
      uint64_t v34 = "Received notification with unknown id 0x%02x from device %{public}s";
      break;
    case 16:
      if (*a4 == 12 && v56 == 3)
      {
        uint64_t v18 = BYTE1(v56);
        if (!BYTE1(v56)) {
          return;
        }
        uint64_t v19 = v57;
        while (1)
        {
          int v20 = *v19++;
          if (v20 == 13) {
            break;
          }
          if (!--v18) {
            return;
          }
        }
        uint64_t v45 = qword_100A19EA8;
        if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(v58, buf);
          uint64_t v46 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)long long __p = 136446210;
          *(void *)&__p[4] = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Registering for absolute volume change notifications on device %{public}s", __p, 0xCu);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
        LOBYTE(v53[0]) = 0;
        if (sub_100144CF8(a2, (unsigned __int8 *)v53, 13))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
            sub_100785BA0();
          }
          return;
        }
        *(void *)std::string buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        sub_10003AED0((uint64_t)buf, a1 + 392);
        *(void *)long long __p = &v58;
        *((_DWORD *)sub_1005031E0((uint64_t **)(a1 + 456), (unint64_t *)&v58, (uint64_t)&unk_1007BE9D0, (void **)__p)+ 10) = 30;
        sub_10003AFE8((uint64_t)buf);
        uint64_t v47 = sub_1004AFB34();
        v54[0] = _NSConcreteStackBlock;
        v54[1] = 3221225472;
        v54[2] = sub_1005FBA1C;
        v54[3] = &unk_100997528;
        v54[4] = v58;
        sub_100013018(v47, v54);
LABEL_46:
        uint64_t v31 = buf;
LABEL_91:
        sub_10003AFB4((uint64_t)v31);
        return;
      }
      uint64_t v32 = qword_100A19EA8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
        return;
      }
      sub_100474E18(v58, buf);
      if ((buf[23] & 0x80u) == 0) {
        __int16 v36 = buf;
      }
      else {
        __int16 v36 = *(uint8_t **)buf;
      }
      int v37 = *a4;
      *(_DWORD *)long long __p = 136446466;
      *(void *)&__p[4] = v36;
      *(_WORD *)&unsigned char __p[12] = 1024;
      *(_DWORD *)&unsigned char __p[14] = v37;
      uint64_t v34 = "Received error response for get capabilities request from device %{public}s - response was 0x%02x";
      break;
    default:
      uint64_t v32 = qword_100A19EA8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
        return;
      }
      sub_100474E18(v58, buf);
      if ((buf[23] & 0x80u) == 0) {
        unint64_t v33 = buf;
      }
      else {
        unint64_t v33 = *(uint8_t **)buf;
      }
      *(_DWORD *)long long __p = 67109378;
      *(_DWORD *)&__p[4] = a5;
      *(_WORD *)&__p[8] = 2082;
      *(void *)&__p[10] = v33;
      uint64_t v34 = "Received response for unsupported PDU 0x%02x from device %{public}s";
      break;
  }
  _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, v34, __p, 0x12u);
  if ((char)buf[23] < 0)
  {
    size_t v38 = *(void **)buf;
LABEL_77:
    operator delete(v38);
  }
}

void sub_1005FB9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

uint64_t sub_1005FBA1C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009BA698);
  }
  uint64_t v2 = (void *)qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_100413F5C(v2, v3, 1);
}

uint64_t sub_1005FBA84(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009BA698);
  }
  uint64_t v2 = (void *)qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);
  float v4 = (float)*(int *)(a1 + 40) / 127.0;
  int v5 = *(unsigned __int8 *)(a1 + 44);

  return sub_100414154(v2, v3, v5, v4);
}

uint64_t sub_1005FBB00(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009BA698);
  }
  uint64_t v2 = (void *)qword_1009F8410;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_100413F5C(v2, v3, 0);
}

void sub_1005FBB68(float a1, uint64_t a2, uint64_t a3)
{
  char v18 = 0;
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "PTS");
  sub_10004191C(__p, "AVRCPControllerHack");
  char v6 = (*(uint64_t (**)(uint64_t, uint8_t *, unsigned char *, char *))(*(void *)v5 + 72))(v5, buf, __p, &v18);
  if (v24 < 0) {
    operator delete(*(void **)__p);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(*(void **)buf);
  }
  char v18 = v6;
  if (a3)
  {
    char v7 = v6 ^ 1;
    if (a1 != 0.0) {
      char v7 = 1;
    }
    if (v7)
    {
      uint64_t v12 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a3, __p);
        BOOL v13 = v24 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = (int)(float)(a1 * 127.0);
        __int16 v26 = 1024;
        int v27 = (int)(float)(a1 * 100.0);
        __int16 v28 = 2082;
        int v29 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setting absolute volume to 0x%02x (~%d%%) on device %{public}s", buf, 0x18u);
        if (v24 < 0) {
          operator delete(*(void **)__p);
        }
      }
      buf[0] = 0;
      sub_10001B8E0(buf);
      int v10 = sub_1000F7298(a3 + 128, (int)(float)(a1 * 127.0));
      unint64_t v11 = buf;
    }
    else
    {
      LOBYTE(v16[0]) = 0;
      int v8 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a3, buf);
        char v9 = SHIBYTE(v29) >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)long long __p = 136446210;
        *(void *)&__p[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Setting absolute volume to zero (muted) on device %{public}s", __p, 0xCu);
        if (SHIBYTE(v29) < 0) {
          operator delete(*(void **)buf);
        }
      }
      v19[0] = 0;
      sub_10001B8E0(v19);
      if (sub_1000F7068(a3 + 128, (unsigned __int8 *)v16, 67)
        && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a3, buf);
        sub_100785D3C();
      }
      int v10 = sub_1000F7068(a3 + 128, (unsigned __int8 *)v16, 195);
      if (v10 && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a3, __p);
        sub_100785CEC();
      }
      unint64_t v11 = v19;
    }
    sub_10001B8AC(v11);
    if (v10)
    {
      int v14 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a3, v16);
        if (v17 >= 0) {
          uint64_t v15 = v16;
        }
        else {
          uint64_t v15 = (void **)v16[0];
        }
        *(_DWORD *)uint64_t v19 = 136446466;
        int v20 = v15;
        __int16 v21 = 1024;
        int v22 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Failed to set absolute volume on device %{public}s - result was %{bluetooth:OI_STATUS}u", v19, 0x12u);
        if (v17 < 0) {
          operator delete(v16[0]);
        }
      }
    }
  }
}

void sub_1005FBF14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
}

uint64_t sub_1005FBF74(uint64_t a1, uint64_t a2, __int16 *a3)
{
  uint64_t v3 = sub_100133728(a2, xmmword_1007BFDB0, (uint64_t)xmmword_1007BFDB0, a3);
  if (v3 && os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
    sub_100785D8C();
  }
  return v3;
}

uint64_t sub_1005FBFE0(uint64_t a1, uint64_t a2, __int16 *a3, __int16 *a4)
{
  sub_100011B98(a2, 3);
  sub_100011B98(a2, 2);
  sub_10001195C(a2, 104);
  sub_100011B98(a2, 16);
  sub_100011B98(a2, 2);
  sub_10001195C(a2, 103);
  __int16 v11 = 0;
  char v10 = 0;
  __int16 v9 = 0;
  uint64_t v7 = sub_1001DF230((unsigned __int16)*a3, &v9, &v11, &v10);
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_100785DF4();
    }
  }
  else
  {
    sub_100011B98(a2, 1);
    sub_100011B98(a2, 7);
    sub_10001195C(a2, *a3);
    sub_10001195C(a2, v9);
    sub_10001195C(a2, v11);
    sub_100011B98(a2, v10);
  }
  if (*a4)
  {
    uint64_t v7 = sub_1001DF230((unsigned __int16)*a4, &v9, &v11, &v10);
    if (v7)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
        sub_100785DC0();
      }
    }
    else
    {
      sub_100011B98(a2, 17);
      sub_100011B98(a2, 7);
      sub_10001195C(a2, *a4);
      sub_10001195C(a2, v9);
      sub_10001195C(a2, v11);
      sub_100011B98(a2, v10);
    }
  }
  return v7;
}

void sub_1005FC18C()
{
}

void sub_1005FC5B8()
{
}

void sub_1005FC5F8(void *a1, uint64_t a2)
{
  float v4 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v7 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    __int16 v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Fast Connect AVRCP Report Connection attempt for %{public}s", buf, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1004BD554(a1, a2);
}

void sub_1005FC6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = qword_100A19EA8;
  if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fast Connect AVRCP Setup Complete result %d", (uint8_t *)v8, 8u);
  }
  if (a3)
  {
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009BA6D8);
    }
    int v7 = sub_1004E2340((uint64_t)off_1009F8068, a3, 20000);
    sub_1004BD6C8(a1, a2, v7);
  }
  sub_1004BD6C8(a1, a2, 0);
}

void sub_1005FC82C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_1005FC848(uint64_t a1, unint64_t a2, unsigned int a3, unsigned int a4, int a5)
{
  v20[1] = 0;
  unint64_t v21 = a2;
  v20[0] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 280);
  char v10 = *(void **)(a1 + 352);
  if (v10)
  {
    __int16 v11 = (void *)(a1 + 352);
    do
    {
      unint64_t v12 = v10[4];
      BOOL v13 = v12 >= a2;
      if (v12 >= a2) {
        int v14 = v10;
      }
      else {
        int v14 = v10 + 1;
      }
      if (v13) {
        __int16 v11 = v10;
      }
      char v10 = (void *)*v14;
    }
    while (*v14);
    if (v11 != (void *)(a1 + 352) && v11[4] <= a2)
    {
      uint64_t v15 = *sub_1004AD7B8(a1 + 344, &v21);
      if (v15) {
        (*(void (**)(uint64_t))(*(void *)v15 + 64))(v15);
      }
      sub_1000517A4(a1 + 344, &v21);
    }
  }
  sub_10003AFE8((uint64_t)v20);
  char v19 = 0;
  sub_10001B8E0(&v19);
  if (a5)
  {
    __int16 v16 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      v18[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "fastConnectCleanAVRCP OI_AVRCP_FastConnect_DisconnectTable", (uint8_t *)v18, 2u);
    }
    sub_100143828(v21 + 128);
  }
  sub_1001339BC(v21 + 128, a3, a4);
  sub_10001B8AC(&v19);
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1005FC9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FC9E4(uint64_t result, unint64_t a2)
{
  unint64_t v12 = a2;
  uint64_t v3 = *(void **)(result + 376);
  if (!v3) {
    goto LABEL_12;
  }
  float v4 = (void *)(result + 376);
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      int v7 = v3;
    }
    else {
      int v7 = v3 + 1;
    }
    if (v6) {
      float v4 = v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (void *)(result + 376) || v4[4] > a2)
  {
LABEL_12:
    int v8 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      if (v11 >= 0) {
        __int16 v9 = __p;
      }
      else {
        __int16 v9 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      int v14 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Workaround RemoteMediaInfo for device %{public}s created", buf, 0xCu);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    operator new();
  }
  return result;
}

void sub_1005FCB50()
{
}

uint64_t sub_1005FCB7C(uint64_t a1, unint64_t a2)
{
  return sub_1005FC9E4(a1 - 272, a2);
}

uint64_t sub_1005FCB84(uint64_t result, unint64_t a2)
{
  unint64_t v14 = a2;
  uint64_t v2 = *(void **)(result + 376);
  if (v2)
  {
    uint64_t v4 = result + 368;
    uint64_t v5 = result + 376;
    do
    {
      unint64_t v6 = v2[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        int v8 = v2;
      }
      else {
        int v8 = v2 + 1;
      }
      if (v7) {
        uint64_t v5 = (uint64_t)v2;
      }
      uint64_t v2 = (void *)*v8;
    }
    while (*v8);
    if (v5 != result + 376 && *(void *)(v5 + 32) <= a2)
    {
      __int16 v9 = qword_100A19EA8;
      if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        char v10 = v13 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)std::string buf = 136446210;
        __int16 v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Workaround RemoteMediaInfo for device %{public}s deleted", buf, 0xCu);
        if (v13 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v11 = *sub_1004AD7B8(v4, &v14);
      if (v11) {
        (*(void (**)(uint64_t))(*(void *)v11 + 64))(v11);
      }
      return sub_1000517A4(v4, &v14);
    }
  }
  return result;
}

uint64_t sub_1005FCCEC(uint64_t a1, unint64_t a2)
{
  return sub_1005FCB84(a1 - 272, a2);
}

uint64_t sub_1005FCCF4(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = a2;
  uint64_t result = sub_1004764A0(a2);
  if (result)
  {
    uint64_t v5 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      if (v9 >= 0) {
        unint64_t v6 = __p;
      }
      else {
        unint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136446210;
      unint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Play command for device %{public}s forwarded", buf, 0xCu);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
    }
    BOOL v7 = sub_1004AD7B8(a1 + 368, (unint64_t *)&v10);
    return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(*v7 + 8) + 8))(*(void *)(*v7 + 8), v10, 501);
  }
  return result;
}

uint64_t sub_1005FCE24(uint64_t a1, uint64_t a2)
{
  return sub_1005FCCF4(a1 - 272, a2);
}

void sub_1005FCE30(uint64_t a1)
{
  sub_1005FE084(a1);

  operator delete();
}

uint64_t sub_1005FCE68()
{
  return 3;
}

uint64_t sub_1005FCE70(uint64_t a1)
{
  return sub_1005FE084(a1 - 256);
}

void sub_1005FCE78(uint64_t a1)
{
  sub_1005FE084(a1 - 256);

  operator delete();
}

uint64_t sub_1005FCEB4(uint64_t a1)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v2 = off_1009FB210;

  return sub_1005F19F4(v2, a1);
}

void sub_1005FCF18(uint64_t a1)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v2 = off_1009FB210;

  sub_1005F2984((uint64_t)v2, a1);
}

void sub_1005FCF84(uint64_t a1, uint64_t a2)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v4 = off_1009FB210;

  sub_1005F1E00((uint64_t)v4, a1, a2);
}

void sub_1005FCFF0(uint64_t a1, int a2, int a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unint64_t v6 = off_1009FB210;

  sub_1005F2454((uint64_t)v6, a1, a2, a3);
}

void sub_1005FD06C(uint64_t a1, __int16 a2, int a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unint64_t v6 = off_1009FB210;

  sub_1005F2650((uint64_t)v6, a1, a2, a3);
}

void sub_1005FD0E8(uint64_t a1)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v2 = off_1009FB210;

  sub_1005F281C((uint64_t)v2, a1);
}

void sub_1005FD14C(id a1)
{
}

void sub_1005FD190()
{
}

void sub_1005FD1B4(uint64_t a1, unsigned int a2, char a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unint64_t v6 = off_1009FB210;

  sub_1005F309C((uint64_t)v6, a1, a2, a3);
}

void sub_1005FD230(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }

  sub_1005F3790(a1, a1, a2, a3);
}

void sub_1005FD2A4(uint64_t a1, unsigned int a2)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }

  sub_1005F3994(a1, a1, a2);
}

void sub_1005FD308(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }

  sub_1005F3B10(a1, a1, a2, a3);
}

void sub_1005FD37C(uint64_t a1, char a2, unsigned int a3, const void *a4)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  int v8 = off_1009FB210;

  sub_1005F3D58((uint64_t)v8, a1, a2, a3, a4);
}

void sub_1005FD400(uint64_t a1, unsigned int a2, int a3, uint64_t a4)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  int v8 = off_1009FB210;

  sub_1005F4380((uint64_t)v8, a1, a2, a3, a4);
}

void sub_1005FD484(uint64_t a1, char a2, uint64_t a3, uint64_t a4, const void *a5)
{
  unsigned int v6 = a4;
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  char v9 = off_1009FB210;

  sub_1005FA2E4((uint64_t)v9, a1, a2, a4, v6, a5);
}

uint64_t sub_1005FD508(uint64_t a1, char a2)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v4 = off_1009FB210;

  return sub_1005F6028((uint64_t)v4, a1, a2);
}

uint64_t sub_1005FD574(uint64_t a1, unsigned int a2, unsigned int a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unsigned int v6 = off_1009FB210;

  return sub_1005F47B4((uint64_t)v6, a1, a2, a3);
}

void sub_1005FD5F0(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unsigned int v6 = off_1009FB210;

  sub_1005F63A4((uint64_t)v6, a1, a2, a3);
}

uint64_t sub_1005FD674(uint64_t a1, unsigned int a2, int a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unsigned int v6 = off_1009FB210;

  return sub_1005F6660((uint64_t)v6, a1, a2, a3);
}

uint64_t sub_1005FD6F0(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unsigned int v6 = off_1009FB210;

  return sub_1005F6880((uint64_t)v6, a1, a2, a3);
}

uint64_t sub_1005FD76C(uint64_t a1, char a2, uint64_t a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unsigned int v6 = off_1009FB210;

  return sub_1005F6C04((uint64_t)v6, a1, a2, a3);
}

void *sub_1005FD7E8(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unint64_t v14 = off_1009FB210;

  return sub_1005F7538((uint64_t)v14, a1, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_1005FD894(uint64_t a1, char a2, uint64_t a3, int a4, uint64_t *a5)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v10 = off_1009FB210;

  return sub_1005F70F4((uint64_t)v10, a1, a2, a3, a4, a5);
}

void *sub_1005FD928(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5, unsigned int a6, uint64_t a7)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unint64_t v14 = off_1009FB210;

  return sub_1005F7ED4((uint64_t)v14, a1, a2, a3, a4, a5, a6, a7);
}

void sub_1005FD9D4(uint64_t a1, unsigned int a2, int a3, unsigned int a4, void *a5)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v10 = off_1009FB210;

  sub_1005F8670((uint64_t)v10, a1, a2, a3, a4, a5);
}

uint64_t sub_1005FDA68(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unsigned int v6 = off_1009FB210;

  return sub_1005F8B30((uint64_t)v6, a1, a2, a3);
}

uint64_t sub_1005FDAE4(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v10 = off_1009FB210;

  return sub_1005F8FA0((uint64_t)v10, a1, a2, a3, a4, a5);
}

void sub_1005FDB78(uint64_t a1, __int16 a2, char *a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unsigned int v6 = off_1009FB210;

  sub_1005F93C8((uint64_t)v6, a1, a2, a3);
}

void sub_1005FDBF4(uint64_t a1, __int16 a2, char *a3, uint64_t a4, uint64_t a5)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v10 = off_1009FB210;

  sub_1005F990C((uint64_t)v10, a1, a2, a3, a4, a5);
}

void sub_1005FDC88(uint64_t a1, __int16 a2, char *a3)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  unsigned int v6 = off_1009FB210;

  sub_1005F9E5C((uint64_t)v6, a1, a2, a3);
}

void sub_1005FDD04()
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
}

void sub_1005FDD2C(uint64_t a1, uint64_t a2, char *a3, int a4, uint64_t a5, int a6)
{
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA568);
  }
  uint64_t v10 = off_1009FB210;

  sub_1005FAFBC((uint64_t)v10, a1, 0, a3, a4, 0, a6);
}

void sub_1005FDDB8(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1005FDE44(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1005FDE44(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    char v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      char v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      char v19 = 0;
    }
    int v20 = &v19[8 * v16];
    long long __p = v19;
    int v27 = v20;
    __int16 v28 = v20;
    int v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        char v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        int v27 = v20;
        int v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        int v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    __int16 v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    char v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1005FE04C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1005FE084(uint64_t a1)
{
  *(void *)a1 = off_1009BA420;
  *(void *)(a1 + 256) = off_1009BA4E0;
  *(void *)(a1 + 264) = off_1009BA508;
  *(void *)(a1 + 272) = &off_1009BA550;
  sub_1000486F0(a1 + 504, *(void **)(a1 + 512));
  sub_1002CBCC8(a1 + 480, *(void **)(a1 + 488));
  sub_1000486F0(a1 + 456, *(void **)(a1 + 464));
  sub_100052DA4(a1 + 392);
  sub_1000486F0(a1 + 368, *(void **)(a1 + 376));
  sub_1000486F0(a1 + 344, *(void **)(a1 + 352));
  sub_100052DA4(a1 + 280);

  return sub_100283DC8(a1);
}

void sub_1005FE180(id a1)
{
}

void sub_1005FE1C4()
{
}

void sub_1005FE1E8(id a1)
{
}

void sub_1005FE22C()
{
}

void sub_1005FE250(id a1)
{
}

void sub_1005FE294()
{
}

void sub_1005FE2B8(id a1)
{
}

void sub_1005FE2FC()
{
}

uint64_t *sub_1005FE320(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  uint64_t v2 = (uint64_t *)(a1 + 8);
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  unsigned int v5 = *a2;
  unsigned int v6 = a2[1];
  unint64_t v7 = v2;
  do
  {
    unsigned int v8 = *((unsigned __int8 *)v3 + 32);
    if (v8 >= v5)
    {
      if (v5 >= v8)
      {
        if (*((unsigned __int8 *)v3 + 33) < v6) {
          ++v3;
        }
        else {
          unint64_t v7 = v3;
        }
      }
      else
      {
        unint64_t v7 = v3;
      }
    }
    else
    {
      ++v3;
    }
    uint64_t v3 = (uint64_t *)*v3;
  }
  while (v3);
  if (v7 == v2) {
    return v2;
  }
  unsigned int v9 = *((unsigned __int8 *)v7 + 32);
  if (v5 < v9 || v9 >= v5 && v6 < *((unsigned __int8 *)v7 + 33)) {
    return v2;
  }
  return v7;
}

_WORD *sub_1005FE3B0(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v10 = 0;
  unsigned int v6 = sub_1005FE440((uint64_t)a1, &v10, a2);
  unint64_t v7 = (_WORD *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    unint64_t v7 = operator new(0x30uLL);
    v7[16] = **a4;
    *((void *)v7 + 5) = 0;
    sub_100036CA0(a1, v10, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_1005FE440(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        unsigned int v8 = v4;
        unsigned int v9 = *((unsigned __int8 *)v4 + 32);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        uint64_t v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        unsigned int v10 = *((unsigned __int8 *)v8 + 33);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      uint64_t v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  unsigned int v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

void sub_1005FE4A8(int a1)
{
  if (a1 <= 1)
  {
    if (qword_100A13A98 != -1) {
      dispatch_once(&qword_100A13A98, &stru_1009BA7B8);
    }
    atomic_store(0, (unsigned __int8 *)&byte_100A13A78[a1]);
  }
}

BOOL sub_1005FE50C(unsigned int a1)
{
  if (a1 > 2) {
    return 0;
  }
  if (qword_100A13A98 != -1) {
    dispatch_once(&qword_100A13A98, &stru_1009BA7B8);
  }
  return (atomic_exchange(&byte_100A13A78[a1], 1u) & 1) == 0;
}

uint64_t sub_1005FE584(int a1)
{
  if (qword_100A13A98 != -1) {
    dispatch_once(&qword_100A13A98, &stru_1009BA7B8);
  }
  return qword_100A13A80[a1];
}

uint64_t sub_1005FE5D8()
{
  if (qword_100A13A98 != -1) {
    dispatch_once(&qword_100A13A98, &stru_1009BA7B8);
  }
  return qword_100A13A90;
}

void sub_1005FE61C(id a1)
{
  qword_100A13A90 = (uint64_t)os_log_create("com.apple.bluetooth", "CBSignpost");
  byte_100A13A78[0] = 1;
  qword_100A13A80[0] = os_signpost_id_generate((os_log_t)qword_100A13A90);
  byte_100A13A79 = 1;
  qword_100A13A88 = os_signpost_id_generate((os_log_t)qword_100A13A90);
  uint64_t v1 = qword_100A13A90;
  if (os_log_type_enabled((os_log_t)qword_100A13A90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "SingpostUtils initialized", v2, 2u);
  }
}

void sub_1005FE6D0(void *a1)
{
  *a1 = &off_1009BA7E8;
  a1[3] = 0;
  a1[2] = a1 + 3;
  a1[4] = 0;
  a1[6] = 0;
  a1[5] = a1 + 6;
  a1[9] = 0;
  a1[8] = a1 + 9;
  a1[7] = 0;
  a1[10] = 0;
  a1[12] = 0;
  a1[11] = a1 + 12;
  a1[13] = 0;
  a1[15] = 0;
  a1[14] = a1 + 15;
  a1[16] = 0;
  a1[19] = 0;
  a1[18] = 0;
  a1[17] = a1 + 18;
  a1[21] = 0;
  a1[20] = a1 + 21;
  a1[22] = 0;
  sub_100373300();
}

void sub_1005FE7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, uint64_t a14)
{
  sub_1000486F0(v20, *v17);
  sub_1000486F0(v19, *v21);
  sub_1000486F0(v18, *v16);
  sub_1000486F0(a10, *v15);
  sub_1000486F0(a11, *v14);
  sub_1000486F0(a12, *v22);
  sub_1000486F0(a14, *a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1005FE840(uint64_t a1)
{
  *(void *)a1 = &off_1009BA7E8;
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2 != (void *)(a1 + 24))
  {
    do
    {
      if (v2[5]) {
        operator delete();
      }
      uint64_t v3 = (void *)v2[1];
      if (v3)
      {
        do
        {
          uint64_t v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          uint64_t v4 = (void *)v2[2];
          BOOL v5 = *v4 == (void)v2;
          uint64_t v2 = v4;
        }
        while (!v5);
      }
      uint64_t v2 = v4;
    }
    while (v4 != (void *)(a1 + 24));
  }
  unsigned int v6 = *(void **)(a1 + 40);
  if (v6 != (void *)(a1 + 48))
  {
    do
    {
      if (v6[5]) {
        operator delete();
      }
      unsigned int v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          unsigned int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (void *)v6[2];
          BOOL v5 = *v8 == (void)v6;
          unsigned int v6 = v8;
        }
        while (!v5);
      }
      unsigned int v6 = v8;
    }
    while (v8 != (void *)(a1 + 48));
  }
  unsigned int v9 = *(void **)(a1 + 64);
  if (v9 != (void *)(a1 + 72))
  {
    do
    {
      if (v9[5]) {
        operator delete();
      }
      unsigned int v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          unsigned int v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v9[2];
          BOOL v5 = *v11 == (void)v9;
          unsigned int v9 = v11;
        }
        while (!v5);
      }
      unsigned int v9 = v11;
    }
    while (v11 != (void *)(a1 + 72));
  }
  uint64_t v12 = *(void **)(a1 + 88);
  if (v12 != (void *)(a1 + 96))
  {
    do
    {
      if (v12[5]) {
        operator delete();
      }
      char v13 = (void *)v12[1];
      if (v13)
      {
        do
        {
          unint64_t v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unint64_t v14 = (void *)v12[2];
          BOOL v5 = *v14 == (void)v12;
          uint64_t v12 = v14;
        }
        while (!v5);
      }
      uint64_t v12 = v14;
    }
    while (v14 != (void *)(a1 + 96));
  }
  uint64_t v15 = *(void **)(a1 + 112);
  if (v15 != (void *)(a1 + 120))
  {
    do
    {
      if (v15[5]) {
        operator delete();
      }
      uint64_t v16 = (void *)v15[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (void *)v15[2];
          BOOL v5 = *v17 == (void)v15;
          uint64_t v15 = v17;
        }
        while (!v5);
      }
      uint64_t v15 = v17;
    }
    while (v17 != (void *)(a1 + 120));
  }
  uint64_t v18 = *(void **)(a1 + 136);
  if (v18 != (void *)(a1 + 144))
  {
    do
    {
      if (v18[5]) {
        operator delete();
      }
      uint64_t v19 = (void *)v18[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          uint64_t v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v18[2];
          BOOL v5 = *v20 == (void)v18;
          uint64_t v18 = v20;
        }
        while (!v5);
      }
      uint64_t v18 = v20;
    }
    while (v20 != (void *)(a1 + 144));
  }
  unint64_t v21 = *(void **)(a1 + 160);
  if (v21 != (void *)(a1 + 168))
  {
    do
    {
      if (v21[5]) {
        operator delete();
      }
      unint64_t v22 = (void *)v21[1];
      if (v22)
      {
        do
        {
          char v23 = v22;
          unint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          char v23 = (void *)v21[2];
          BOOL v5 = *v23 == (void)v21;
          unint64_t v21 = v23;
        }
        while (!v5);
      }
      unint64_t v21 = v23;
    }
    while (v23 != (void *)(a1 + 168));
  }
  sub_1000486F0(a1 + 160, *(void **)(a1 + 168));
  sub_1000486F0(a1 + 136, *(void **)(a1 + 144));
  sub_1000486F0(a1 + 112, *(void **)(a1 + 120));
  sub_1000486F0(a1 + 88, *(void **)(a1 + 96));
  sub_1000486F0(a1 + 64, *(void **)(a1 + 72));
  sub_1000486F0(a1 + 40, *(void **)(a1 + 48));
  sub_1000486F0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_1005FEBD8(_Unwind_Exception *a1)
{
  sub_1000486F0((uint64_t)(v1 + 20), v1[21]);
  sub_1000486F0((uint64_t)(v1 + 17), v1[18]);
  sub_1000486F0((uint64_t)(v1 + 14), v1[15]);
  sub_1000486F0((uint64_t)(v1 + 11), v1[12]);
  sub_1000486F0((uint64_t)(v1 + 8), v1[9]);
  sub_1000486F0((uint64_t)(v1 + 5), v1[6]);
  sub_1000486F0((uint64_t)(v1 + 2), v1[3]);
  _Unwind_Resume(a1);
}

void sub_1005FEC3C(uint64_t a1)
{
  sub_1005FE840(a1);

  operator delete();
}

uint64_t *sub_1005FEC74(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v13 = a3;
  BOOL v5 = *(void **)(a2 + 8);
  if (!v5) {
    goto LABEL_12;
  }
  unsigned int v6 = (void *)(a2 + 8);
  do
  {
    unint64_t v7 = v5[4];
    BOOL v8 = v7 >= a3;
    if (v7 >= a3) {
      unsigned int v9 = v5;
    }
    else {
      unsigned int v9 = v5 + 1;
    }
    if (v8) {
      unsigned int v6 = v5;
    }
    BOOL v5 = (void *)*v9;
  }
  while (*v9);
  if (v6 != (void *)(a2 + 8) && v6[4] <= a3)
  {
    uint64_t v12 = (uint64_t *)v6[5];
    uint64_t v11 = v6 + 5;
    uint64_t result = v12;
    if (v12) {
      operator delete();
    }
  }
  else
  {
LABEL_12:
    unint64_t v14 = &v13;
    uint64_t result = sub_1000097B0((uint64_t **)a2, &v13, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v14);
    uint64_t v11 = result + 5;
  }
  *uint64_t v11 = a4;
  return result;
}

uint64_t sub_1005FED28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 48))();
}

void sub_1005FED50(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  unint64_t v23 = a4;
  uint64_t v20 = (uint64_t *)&v21;
  unint64_t v21 = 0;
  if (a3)
  {
    uint64_t v8 = a1 + 16;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    sub_1005FFBB4((uint64_t *)&v17, a1 + 16);
    unsigned int v10 = *(void **)(a1 + 24);
    unsigned int v9 = (void *)(a1 + 24);
    sub_1000486F0(v8, v10);
    *(v9 - 1) = v9;
    *unsigned int v9 = 0;
    v9[1] = 0;
    sub_1000486F0((uint64_t)&v20, v21);
    uint64_t v11 = v18;
    uint64_t v20 = v17;
    unint64_t v21 = v18;
    uint64_t v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      uint64_t v17 = (uint64_t *)&v18;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v20 = (uint64_t *)&v21;
    }
    sub_1000486F0((uint64_t)&v17, v11);
  }
  else
  {
    sub_1005FEC74(a1, a1 + 16, a4, a5);
    uint64_t v17 = (uint64_t *)&v23;
    sub_1000097B0(&v20, &v23, (uint64_t)&unk_1007BE9D0, &v17)[5] = a5;
  }
  unint64_t v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BA830);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1009FB210 + 120))(off_1009FB210, a2, a3, v13[4], v13[5]);
      unint64_t v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          unint64_t v13 = v15;
        }
        while (!v16);
      }
      unint64_t v13 = v15;
    }
    while (v15 != (uint64_t *)&v21);
  }
  sub_1000486F0((uint64_t)&v20, v21);
}

void sub_1005FEF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_1005FEF3C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 56))();
}

void sub_1005FEF64(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  unint64_t v23 = a4;
  uint64_t v20 = (uint64_t *)&v21;
  unint64_t v21 = 0;
  if (a3)
  {
    uint64_t v8 = a1 + 40;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    sub_1005FFBB4((uint64_t *)&v17, a1 + 40);
    unsigned int v10 = *(void **)(a1 + 48);
    unsigned int v9 = (void *)(a1 + 48);
    sub_1000486F0(v8, v10);
    *(v9 - 1) = v9;
    *unsigned int v9 = 0;
    v9[1] = 0;
    sub_1000486F0((uint64_t)&v20, v21);
    uint64_t v11 = v18;
    uint64_t v20 = v17;
    unint64_t v21 = v18;
    uint64_t v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      uint64_t v17 = (uint64_t *)&v18;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v20 = (uint64_t *)&v21;
    }
    sub_1000486F0((uint64_t)&v17, v11);
  }
  else
  {
    sub_1005FEC74(a1, a1 + 40, a4, a5);
    uint64_t v17 = (uint64_t *)&v23;
    sub_1000097B0(&v20, &v23, (uint64_t)&unk_1007BE9D0, &v17)[5] = a5;
  }
  unint64_t v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BA830);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1009FB210 + 128))(off_1009FB210, a2, a3, v13[4], v13[5]);
      unint64_t v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          unint64_t v13 = v15;
        }
        while (!v16);
      }
      unint64_t v13 = v15;
    }
    while (v15 != (uint64_t *)&v21);
  }
  sub_1000486F0((uint64_t)&v20, v21);
}

void sub_1005FF130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_1005FF150(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 64))();
}

void sub_1005FF178(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v24 = 0;
  unint64_t v25 = a5;
  uint64_t v22 = (uint64_t *)&v23;
  unint64_t v23 = 0;
  if (a4)
  {
    uint64_t v10 = a1 + 64;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    sub_1005FFBB4((uint64_t *)&v19, a1 + 64);
    uint64_t v12 = *(void **)(a1 + 72);
    uint64_t v11 = (void *)(a1 + 72);
    sub_1000486F0(v10, v12);
    *(v11 - 1) = v11;
    *uint64_t v11 = 0;
    v11[1] = 0;
    sub_1000486F0((uint64_t)&v22, v23);
    unint64_t v13 = v20;
    uint64_t v22 = v19;
    unint64_t v23 = v20;
    uint64_t v24 = v21;
    if (v21)
    {
      void v20[2] = &v23;
      uint64_t v19 = (uint64_t *)&v20;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v13 = 0;
    }
    else
    {
      uint64_t v22 = (uint64_t *)&v23;
    }
    sub_1000486F0((uint64_t)&v19, v13);
  }
  else
  {
    sub_1005FEC74(a1, a1 + 64, a5, a6);
    uint64_t v19 = (uint64_t *)&v25;
    sub_1000097B0(&v22, &v25, (uint64_t)&unk_1007BE9D0, &v19)[5] = a6;
  }
  uint64_t v15 = v22;
  if (v22 != (uint64_t *)&v23)
  {
    do
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BA830);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1009FB210 + 136))(off_1009FB210, a2, a3, a4, v15[4], v15[5]);
      BOOL v16 = (uint64_t *)v15[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          BOOL v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v15[2];
          BOOL v18 = *v17 == (void)v15;
          uint64_t v15 = v17;
        }
        while (!v18);
      }
      uint64_t v15 = v17;
    }
    while (v17 != (uint64_t *)&v23);
  }
  sub_1000486F0((uint64_t)&v22, v23);
}

void sub_1005FF354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_1005FF374(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 72))();
}

void sub_1005FF39C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0;
  unint64_t v21 = a3;
  BOOL v18 = (uint64_t *)&v19;
  uint64_t v19 = 0;
  if (a2)
  {
    uint64_t v6 = a1 + 88;
    uint64_t v15 = 0;
    BOOL v16 = 0;
    uint64_t v17 = 0;
    sub_1005FFBB4((uint64_t *)&v15, a1 + 88);
    uint64_t v8 = *(void **)(a1 + 96);
    unint64_t v7 = (void *)(a1 + 96);
    sub_1000486F0(v6, v8);
    *(v7 - 1) = v7;
    *unint64_t v7 = 0;
    v7[1] = 0;
    sub_1000486F0((uint64_t)&v18, v19);
    unsigned int v9 = v16;
    BOOL v18 = v15;
    uint64_t v19 = v16;
    uint64_t v20 = v17;
    if (v17)
    {
      v16[2] = &v19;
      uint64_t v15 = (uint64_t *)&v16;
      BOOL v16 = 0;
      uint64_t v17 = 0;
      unsigned int v9 = 0;
    }
    else
    {
      BOOL v18 = (uint64_t *)&v19;
    }
    sub_1000486F0((uint64_t)&v15, v9);
  }
  else
  {
    sub_1005FEC74(a1, a1 + 88, a3, a4);
    uint64_t v15 = (uint64_t *)&v21;
    sub_1000097B0(&v18, &v21, (uint64_t)&unk_1007BE9D0, &v15)[5] = a4;
  }
  uint64_t v11 = v18;
  if (v18 != (uint64_t *)&v19)
  {
    do
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BA830);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)off_1009FB210 + 144))(off_1009FB210, a2, v11[4], v11[5]);
      uint64_t v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (uint64_t *)v11[2];
          BOOL v14 = *v13 == (void)v11;
          uint64_t v11 = v13;
        }
        while (!v14);
      }
      uint64_t v11 = v13;
    }
    while (v13 != (uint64_t *)&v19);
  }
  sub_1000486F0((uint64_t)&v18, v19);
}

void sub_1005FF558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_1005FF578(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 80))();
}

void sub_1005FF5A0(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v20 = 0;
  unint64_t v21 = a3;
  BOOL v18 = (uint64_t *)&v19;
  uint64_t v19 = 0;
  if (a2)
  {
    uint64_t v6 = a1 + 112;
    uint64_t v15 = 0;
    BOOL v16 = 0;
    uint64_t v17 = 0;
    sub_1005FFBB4((uint64_t *)&v15, a1 + 112);
    uint64_t v8 = *(void **)(a1 + 120);
    unint64_t v7 = (void *)(a1 + 120);
    sub_1000486F0(v6, v8);
    *(v7 - 1) = v7;
    *unint64_t v7 = 0;
    v7[1] = 0;
    sub_1000486F0((uint64_t)&v18, v19);
    unsigned int v9 = v16;
    BOOL v18 = v15;
    uint64_t v19 = v16;
    uint64_t v20 = v17;
    if (v17)
    {
      v16[2] = &v19;
      uint64_t v15 = (uint64_t *)&v16;
      BOOL v16 = 0;
      uint64_t v17 = 0;
      unsigned int v9 = 0;
    }
    else
    {
      BOOL v18 = (uint64_t *)&v19;
    }
    sub_1000486F0((uint64_t)&v15, v9);
  }
  else
  {
    sub_1005FEC74(a1, a1 + 112, a3, a4);
    uint64_t v15 = (uint64_t *)&v21;
    sub_1000097B0(&v18, &v21, (uint64_t)&unk_1007BE9D0, &v15)[5] = a4;
  }
  uint64_t v11 = v18;
  if (v18 != (uint64_t *)&v19)
  {
    do
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BA830);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)off_1009FB210 + 152))(off_1009FB210, a2, v11[4], v11[5]);
      uint64_t v12 = (uint64_t *)v11[1];
      if (v12)
      {
        do
        {
          unint64_t v13 = v12;
          uint64_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          unint64_t v13 = (uint64_t *)v11[2];
          BOOL v14 = *v13 == (void)v11;
          uint64_t v11 = v13;
        }
        while (!v14);
      }
      uint64_t v11 = v13;
    }
    while (v13 != (uint64_t *)&v19);
  }
  sub_1000486F0((uint64_t)&v18, v19);
}

void sub_1005FF75C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_1005FF77C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 88))();
}

void sub_1005FF7A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v24 = 0;
  unint64_t v25 = a5;
  uint64_t v22 = (uint64_t *)&v23;
  unint64_t v23 = 0;
  if (a4)
  {
    uint64_t v10 = a1 + 136;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    sub_1005FFBB4((uint64_t *)&v19, a1 + 136);
    uint64_t v12 = *(void **)(a1 + 144);
    uint64_t v11 = (void *)(a1 + 144);
    sub_1000486F0(v10, v12);
    *(v11 - 1) = v11;
    *uint64_t v11 = 0;
    v11[1] = 0;
    sub_1000486F0((uint64_t)&v22, v23);
    unint64_t v13 = v20;
    uint64_t v22 = v19;
    unint64_t v23 = v20;
    uint64_t v24 = v21;
    if (v21)
    {
      void v20[2] = &v23;
      uint64_t v19 = (uint64_t *)&v20;
      uint64_t v20 = 0;
      uint64_t v21 = 0;
      unint64_t v13 = 0;
    }
    else
    {
      uint64_t v22 = (uint64_t *)&v23;
    }
    sub_1000486F0((uint64_t)&v19, v13);
  }
  else
  {
    sub_1005FEC74(a1, a1 + 136, a5, a6);
    uint64_t v19 = (uint64_t *)&v25;
    sub_1000097B0(&v22, &v25, (uint64_t)&unk_1007BE9D0, &v19)[5] = a6;
  }
  uint64_t v15 = v22;
  if (v22 != (uint64_t *)&v23)
  {
    do
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BA830);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1009FB210 + 160))(off_1009FB210, a2, a3, a4, v15[4], v15[5]);
      BOOL v16 = (uint64_t *)v15[1];
      if (v16)
      {
        do
        {
          uint64_t v17 = v16;
          BOOL v16 = (uint64_t *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          uint64_t v17 = (uint64_t *)v15[2];
          BOOL v18 = *v17 == (void)v15;
          uint64_t v15 = v17;
        }
        while (!v18);
      }
      uint64_t v15 = v17;
    }
    while (v17 != (uint64_t *)&v23);
  }
  sub_1000486F0((uint64_t)&v22, v23);
}

void sub_1005FF980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_1005FF9A0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 8) + 96))();
}

void sub_1005FF9C8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v22 = 0;
  unint64_t v23 = a4;
  uint64_t v20 = (uint64_t *)&v21;
  uint64_t v21 = 0;
  if (a3)
  {
    uint64_t v8 = a1 + 160;
    uint64_t v17 = 0;
    BOOL v18 = 0;
    uint64_t v19 = 0;
    sub_1005FFBB4((uint64_t *)&v17, a1 + 160);
    uint64_t v10 = *(void **)(a1 + 168);
    unsigned int v9 = (void *)(a1 + 168);
    sub_1000486F0(v8, v10);
    *(v9 - 1) = v9;
    *unsigned int v9 = 0;
    v9[1] = 0;
    sub_1000486F0((uint64_t)&v20, v21);
    uint64_t v11 = v18;
    uint64_t v20 = v17;
    uint64_t v21 = v18;
    uint64_t v22 = v19;
    if (v19)
    {
      v18[2] = &v21;
      uint64_t v17 = (uint64_t *)&v18;
      BOOL v18 = 0;
      uint64_t v19 = 0;
      uint64_t v11 = 0;
    }
    else
    {
      uint64_t v20 = (uint64_t *)&v21;
    }
    sub_1000486F0((uint64_t)&v17, v11);
  }
  else
  {
    sub_1005FEC74(a1, a1 + 160, a4, a5);
    uint64_t v17 = (uint64_t *)&v23;
    sub_1000097B0(&v20, &v23, (uint64_t)&unk_1007BE9D0, &v17)[5] = a5;
  }
  unint64_t v13 = v20;
  if (v20 != (uint64_t *)&v21)
  {
    do
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BA830);
      }
      (*(void (**)(void *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)off_1009FB210 + 168))(off_1009FB210, a2, a3, v13[4], v13[5]);
      BOOL v14 = (uint64_t *)v13[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          BOOL v14 = (uint64_t *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (uint64_t *)v13[2];
          BOOL v16 = *v15 == (void)v13;
          unint64_t v13 = v15;
        }
        while (!v16);
      }
      unint64_t v13 = v15;
    }
    while (v15 != (uint64_t *)&v21);
  }
  sub_1000486F0((uint64_t)&v20, v21);
}

void sub_1005FFB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t *sub_1005FFBB4(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1002DF4DC(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_1005FFBF4(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1005FFC0C(id a1)
{
}

void sub_1005FFC50()
{
}

uint64_t sub_1005FFC74(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "RemoteService", 8) = &off_1009BA860;
  if (qword_1009FB218 != -1) {
    dispatch_once(&qword_1009FB218, &stru_1009BA950);
  }
  sub_1004C9E90(a1, (uint64_t)off_1009FB210);
  return a1;
}

void sub_1005FFCFC(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

void sub_1005FFD18(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

uint64_t sub_1005FFD50(uint64_t a1, uint64_t a2)
{
  long long v9 = xmmword_1007BFE10;
  long long v10 = xmmword_1007BFE00;
  long long v8 = xmmword_1007BEA00;
  if (sub_10047B300(a2))
  {
    if (sub_100478F30(a2, &v10, 9u))
    {
      int v4 = 4;
      if (sub_100478F30(a2, &v9, 9u))
      {
        if (sub_100478F30(a2, &v8, 9u)) {
          int v4 = 4;
        }
        else {
          int v4 = 1;
        }
      }
    }
    else
    {
      int v4 = 1;
    }
  }
  else
  {
    int v4 = 0;
  }
  unsigned int v5 = *(_DWORD *)(a1 + 32);
  uint64_t v11 = 0;
  sub_100026C30((uint64_t)&v11);
  *(void *)&long long v7 = (int)v11;
  *((void *)&v7 + 1) = SWORD2(v11);
  return sub_100477F4C(a2, v5, v4, &v7, 0);
}

void sub_1005FFE44(id a1)
{
}

void sub_1005FFE88()
{
}

uint64_t sub_1005FFEAC(unint64_t a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v10 = 0;
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v8 = sub_10060A8A0(off_1009F8760, a1, &v10, a4);
  if (!v8) {
    sub_100606714(v10, (unint64_t *)*a4, a2, a3);
  }
  return v8;
}

uint64_t sub_1005FFF4C(unint64_t *a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  sub_10060ABEC(off_1009F8760, *a1);
  *a1 = 0;
  return 0;
}

uint64_t sub_1005FFFAC(unint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v2 = sub_10060AEF8(off_1009F8760, a1);
  if (!v2) {
    return 7;
  }

  return sub_1006069B4(v2, a1);
}

uint64_t sub_10060002C(unint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v2 = sub_10060AEF8(off_1009F8760, a1);
  if (!v2) {
    return 7;
  }

  return sub_100606558(v2, a1);
}

uint64_t sub_1006000AC(uint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v2 = sub_10060AEF8(off_1009F8760, a1);
  if (!v2) {
    return 7;
  }

  return sub_100607F30(v2);
}

uint64_t sub_100600128(uint64_t a1, unint64_t a2, char *a3)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v6 = sub_10060AEF8(off_1009F8760, a1);
  if (v6)
  {
    uint64_t v7 = v6;
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009BA990);
    }
    unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
    if (v8)
    {
      unint64_t v9 = v8;
      v11[0] = 0;
      v11[1] = 0;
      char v12 = 0;
      sub_1006161E0((uint64_t)v11);
      if (*a3) {
        sub_1006162A4((char *)v11, a3);
      }
      sub_100607F98(v7, v9);
    }
  }
  return 7;
}

void sub_100600258(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100600274(uint64_t a1, unint64_t a2, int a3)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v6 = sub_10060AEF8(off_1009F8760, a1);
  if (!v6) {
    return 7;
  }
  uint64_t v7 = v6;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA990);
  }
  unint64_t v8 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v8) {
    return 7;
  }

  return sub_1006081F0(v7, v8, a3);
}

uint64_t sub_100600350(uint64_t a1, unint64_t a2)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BA9B0);
  }
  *(void *)uu = 0;
  uint64_t v33 = 0;
  sub_1006BC498((uint64_t)off_1009F7ED8, a2, (uint64_t)uu);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA990);
  }
  int v4 = (unsigned __int8 *)sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v5 = sub_10060AEF8(off_1009F8760, a1);
  if (!v5)
  {
    uint64_t v21 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v26 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "PairingAgent is NULL", v26, 2u);
    }
    return 7;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BA9D0);
  }
  uint64_t v6 = sub_100019C0C((void *)qword_1009F8160, v5);
  BOOL v7 = sub_1004764A0((uint64_t)v4);
  if (v6) {
    BOOL v8 = v7;
  }
  else {
    BOOL v8 = 0;
  }
  if (!v8) {
    goto LABEL_35;
  }
  if (sub_10053FF64())
  {
    CTGreenTeaOsLogHandle = getCTGreenTeaOsLogHandle();
    uint64_t v10 = CTGreenTeaOsLogHandle;
    if (CTGreenTeaOsLogHandle)
    {
      if (os_log_type_enabled(CTGreenTeaOsLogHandle, OS_LOG_TYPE_INFO))
      {
        sub_10003AE4C(v6, (uint64_t)v26);
        int v11 = v27;
        char v12 = *(uint8_t **)v26;
        sub_100474E18((uint64_t)v4, __p);
        unint64_t v13 = v26;
        if (v11 < 0) {
          unint64_t v13 = v12;
        }
        if (v25 >= 0) {
          BOOL v14 = __p;
        }
        else {
          BOOL v14 = (void **)__p[0];
        }
        *(_DWORD *)std::string buf = 136446466;
        int v29 = v13;
        __int16 v30 = 2082;
        uint64_t v31 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is asking to delete pairing for device \"%{public}s\"", buf, 0x16u);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
        if (v27 < 0) {
          operator delete(*(void **)v26);
        }
      }
    }
  }
  uint64_t v15 = qword_100A19E50;
  if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_35;
  }
  sub_10003AE4C(v6, (uint64_t)v26);
  int v16 = v27;
  uint64_t v17 = *(uint8_t **)v26;
  sub_100474E18((uint64_t)v4, __p);
  BOOL v18 = v26;
  if (v16 < 0) {
    BOOL v18 = v17;
  }
  if (v25 >= 0) {
    uint64_t v19 = __p;
  }
  else {
    uint64_t v19 = (void **)__p[0];
  }
  *(_DWORD *)std::string buf = 136446466;
  int v29 = v18;
  __int16 v30 = 2082;
  uint64_t v31 = v19;
  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" is asking to delete pairing for device \"%{public}s\"", buf, 0x16u);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0)
  {
    operator delete(*(void **)v26);
    if (v4) {
      return sub_100607D90(v5, v4);
    }
  }
  else
  {
LABEL_35:
    if (v4) {
      return sub_100607D90(v5, v4);
    }
  }
  if (uuid_is_null(uu)) {
    return 7;
  }
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BA9F0);
  }
  uint64_t v22 = qword_1009F7EC8;
  unint64_t v23 = sub_100031234(uu);
  sub_10070BF0C(v22, v23);

  return 0;
}

void sub_100600724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100600758(uint64_t a1, int a2)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  if (!sub_10060AEF8(off_1009F8760, a1)) {
    return 7;
  }
  if (a2 > 3) {
    return 3;
  }
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BAA10);
  }
  uint64_t v5 = off_1009F8770;

  return sub_100619020((uint64_t)v5, a2);
}

uint64_t sub_10060081C(uint64_t a1, unint64_t a2)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v4 = sub_10060AEF8(off_1009F8760, a1);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA990);
  }
  unint64_t v5 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  if (!v4) {
    return 7;
  }
  unint64_t v6 = v5;
  if (!v5) {
    return 7;
  }
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BAA10);
  }
  BOOL v7 = off_1009F8770;

  return sub_100619BFC((uint64_t)v7, v6);
}

uint64_t sub_100600914(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  uint64_t v12 = sub_10060AEF8(off_1009F8760, a1);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BA990);
  }
  unint64_t v13 = sub_1004A930C((uint64_t)off_1009F7EF8, a2);
  BOOL v14 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 141560835;
    uint64_t v17 = 1752392040;
    __int16 v18 = 1041;
    int v19 = 16;
    __int16 v20 = 2097;
    uint64_t v21 = a3;
    __int16 v22 = 2160;
    uint64_t v23 = 1752392040;
    __int16 v24 = 1041;
    int v25 = 16;
    __int16 v26 = 2097;
    uint64_t v27 = a4;
    __int16 v28 = 2160;
    uint64_t v29 = 1752392040;
    __int16 v30 = 1041;
    int v31 = 16;
    __int16 v32 = 2097;
    uint64_t v33 = a5;
    __int16 v34 = 2160;
    uint64_t v35 = 1752392040;
    __int16 v36 = 1041;
    int v37 = 16;
    __int16 v38 = 2097;
    uint64_t v39 = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "BTPairingAgentSetOOBDataForDevice C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", (uint8_t *)&v16, 0x6Au);
  }
  uint64_t result = 7;
  if (v12 && v13)
  {
    if (qword_1009F8778 != -1) {
      dispatch_once(&qword_1009F8778, &stru_1009BAA10);
    }
    return sub_1006197BC((uint64_t)off_1009F8770, v13, a3, a4, a5, a6);
  }
  return result;
}

uint64_t sub_100600B20(uint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BA970);
  }
  if (!sub_10060AEF8(off_1009F8760, a1)) {
    return 7;
  }
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BAA10);
  }
  uint64_t v2 = off_1009F8770;

  return sub_100619D40((uint64_t)v2);
}

void sub_100600BCC(id a1)
{
}

void sub_100600C10()
{
}

void sub_100600C34(id a1)
{
}

void sub_100600C78()
{
}

void sub_100600C9C(id a1)
{
}

void sub_100600CE0()
{
}

void sub_100600D04(id a1)
{
}

void sub_100600D48()
{
}

void sub_100600D6C(id a1)
{
}

void sub_100600DB0()
{
}

void sub_100600DD4(id a1)
{
}

void sub_100600E18()
{
}

uint64_t sub_100600E3C(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  return result;
}

__n128 sub_100600E48(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  return result;
}

uint64_t sub_100600E5C(uint64_t result, _OWORD *a2, unsigned int a3)
{
  *(_OWORD *)__n128 result = *a2;
  if (a3 <= 8) {
    *(_DWORD *)(result + 16) = a3;
  }
  return result;
}

__n128 sub_100600E74(__n128 *a1, __n128 *a2, unsigned __int32 a3)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u32[0] = a3;
  return result;
}

uint64_t sub_100600E84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t sub_100600E8C(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 16);
  if (v1 >= 9) {
    return 4;
  }
  else {
    return v1;
  }
}

BOOL sub_100600EA0(unsigned char *a1)
{
  if (*a1) {
    return 0;
  }
  unint64_t v2 = 0;
  do
  {
    unint64_t v3 = v2;
    if (v2 == 15) {
      break;
    }
    ++v2;
  }
  while (!a1[v3 + 1]);
  return v3 > 0xE;
}

uint64_t sub_100600EDC()
{
  return 16;
}

void sub_100600FA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10060102C(void *a1)
{
  *a1 = off_1009BAA40;
  a1[1] = off_1009BAB00;
  a1[2] = off_1009BAB28;
  a1[3] = off_1009BABD8;
  a1[4] = 0;
  a1[10] = 0;
  a1[7] = 0;
  a1[8] = 0;
  a1[6] = 0;
  unint64_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, -1);
  a1[5] = dispatch_queue_create("com.apple.AuthorizationManagerSerialQueue", v2);
  return a1;
}

void sub_100601100(uint64_t a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009BAC48);
  }
  sub_100605CDC((uint64_t)off_1009F8780 + 192, a1 + 24);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BAC68);
  }
  sub_100680938((uint64_t)off_1009F7EB8, a1 + 16, 0);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BAC88);
  }
  sub_100708564((void *)qword_1009F7EC8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BACA8);
  }
  unint64_t v2 = (char *)off_1009F8068 + 64;

  sub_10026B36C((uint64_t)v2, a1);
}

void sub_100601218(uint64_t a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009BAC48);
  }
  sub_100052718((uint64_t)off_1009F8780 + 192, a1 + 24);
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BAC68);
  }
  sub_100680A44((uint64_t)off_1009F7EB8, a1 + 16);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BAC88);
  }
  sub_1007086AC(qword_1009F7EC8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BACA8);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1);
  unint64_t v2 = *(NSObject **)(a1 + 40);

  dispatch_release(v2);
}

void sub_100601334(uint64_t a1)
{
  unsigned int v1 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006013A8;
  block[3] = &unk_100997528;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1006013A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received 'stackDidStart' listener", buf, 2u);
  }
  uint64_t v3 = +[NSMutableArray array];
  uint64_t v4 = *(void **)(v1 + 48);
  *(void *)(v1 + 48) = v3;

  uint64_t v5 = +[NSMutableDictionary dictionary];
  unint64_t v6 = *(void **)(v1 + 56);
  *(void *)(v1 + 56) = v5;

  BOOL v7 = *(void **)(v1 + 32);
  *(void *)(v1 + 32) = 0;

  *(unsigned char *)(v1 + 72) = 0;
  +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", @"COGITO", @"LG Watch Sport 5148", @"HUAWEI WATCH 2 0738", @"LG Urbane A94D", @"fenix 5", @"ASUS ZenWatch3 3419", @"Polar Loop 2", @"Polar M600 761E", @"Charge 2", @"Gear Fit2 (98D9)", @"The Mission 4349", @"vívoactive3", @"Ionic", @"fenix 3", @"TicWatch Pro 1291", @"Moto 360 109D", @"Charge 3",
    @"Versa",
  uint64_t v27 = 0);
  __int16 v26 = +[NSNumber numberWithInt:1];
  BOOL v8 = +[NSNumber numberWithInt:2];
  unint64_t v9 = +[NSNumber numberWithInt:3];
  uint64_t v29 = +[NSNumber numberWithInt:4];
  int v25 = +[NSNumber numberWithInt:5];
  __int16 v24 = +[NSNumber numberWithInt:6];
  uint64_t v23 = +[NSNumber numberWithInt:7];
  __int16 v22 = +[NSNumber numberWithInt:8];
  uint64_t v21 = +[NSNumber numberWithInt:9];
  __int16 v20 = +[NSNumber numberWithInt:10];
  uint64_t v10 = +[NSNumber numberWithInt:11];
  int v19 = +[NSNumber numberWithInt:12];
  int v11 = +[NSNumber numberWithInt:13];
  __int16 v18 = +[NSNumber numberWithInt:14];
  __int16 v28 = +[NSNumber numberWithInt:15];
  uint64_t v17 = +[NSNumber numberWithInt:16];
  uint64_t v12 = +[NSNumber numberWithInt:17];
  unint64_t v13 = +[NSNumber numberWithInt:18];
  +[NSArray arrayWithObjects:](NSArray, "arrayWithObjects:", v26, v8, v9, v29, v25, v24, v23, v22, v21, v20, v10, v19, v11, v18, v28, v17, v12,
    v13,
  int v16 = 0);

  id v14 = [objc_alloc((Class)NSDictionary) initWithObjects:v16 forKeys:v27];
  uint64_t v15 = (void *)qword_100A13AA0;
  qword_100A13AA0 = (uint64_t)v14;
}

void sub_100601804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,void *a28,uint64_t a29,void *a30,void *a31,void *a32,void *a33)
{
  int v37 = *(void **)(v35 - 128);
  __int16 v36 = *(void **)(v35 - 120);

  _Unwind_Resume(a1);
}

void sub_1006018CC()
{
}

void sub_1006018D8()
{
}

void sub_1006018E4()
{
}

void sub_1006018F0()
{
}

void sub_1006018FC()
{
}

void sub_100601908()
{
}

void sub_100601914()
{
}

void sub_100601920()
{
}

void sub_10060192C()
{
}

void sub_100601938()
{
}

void sub_100601944()
{
}

void sub_100601950()
{
}

void sub_10060195C()
{
}

void sub_100601964()
{
}

void sub_10060196C()
{
  JUMPOUT(0x1006018BCLL);
}

void sub_100601978(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1006019EC;
  block[3] = &unk_100997528;
  block[4] = a1;
  dispatch_async(v1, block);
}

void sub_1006019EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unint64_t v2 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received 'stackWillStop' listener", v5, 2u);
  }
  [*(id *)(v1 + 48) removeAllObjects];
  [*(id *)(v1 + 56) removeAllObjects];
  uint64_t v3 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = 0;

  uint64_t v4 = (void *)qword_100A13AA0;
  qword_100A13AA0 = 0;

  sub_100601A8C(v1);
}

void sub_100601A8C(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = qword_100A19F18;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Deregistering FrontBoard services", buf, 2u);
      unint64_t v2 = *(void **)(a1 + 32);
    }
    [v2 setHandler:0];
    [*(id *)(a1 + 32) invalidate];
    uint64_t v5 = *(void **)(a1 + 32);
    *(void *)(a1 + 32) = 0;
  }
  else if (v4)
  {
    *(_WORD *)unint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unable to deregister FrontBoard services as fDisplayLayoutMonitor is NULL", v6, 2u);
  }
}

void sub_100601B5C(uint64_t a1, void *a2)
{
  id v3 = a2;
  BOOL v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100601BF4;
  v6[3] = &unk_100998A38;
  id v7 = v3;
  uint64_t v8 = a1;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100601BF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v28 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'lePairingCompleted' listener for device '%@'", buf, 0xCu);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
  }
  id v5 = off_1009F7ED8;
  unint64_t v6 = *(void **)(a1 + 32);
  sub_10004191C(__p, "RequiresANCSAuth");
  int v7 = sub_100030A04((uint64_t)v5, v6, (uint64_t)__p);
  if (v25 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v8 = qword_100A19F18;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    if (v9)
    {
      uint64_t v10 = *(void *)(a1 + 32);
      *(_DWORD *)std::string buf = 138412290;
      uint64_t v28 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device '%@' has the tag 'RequiresANCSAuth', Check if the current bundleIdentifier is present in the device's bundle identifier list", buf, 0xCu);
    }
    int v11 = sub_100601F1C(v2, *(void **)(a1 + 32));
    if (v11)
    {
      uint64_t v12 = qword_100A19F18;
      if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 138412546;
        uint64_t v28 = v13;
        __int16 v29 = 2112;
        __int16 v30 = v11;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "bundle identifier list for device '%@': %@", buf, 0x16u);
      }
      long long v22 = 0u;
      long long v23 = 0u;
      long long v20 = 0u;
      long long v21 = 0u;
      id v14 = v11;
      id v15 = [v14 countByEnumeratingWithState:&v20 objects:v26 count:16];
      if (v15)
      {
        uint64_t v16 = *(void *)v21;
        while (2)
        {
          for (uint64_t i = 0; i != v15; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v21 != v16) {
              objc_enumerationMutation(v14);
            }
            __int16 v18 = *(void **)(*((void *)&v20 + 1) + 8 * i);
            if (objc_msgSend(v18, "isEqualToString:", *(void *)(v2 + 80), (void)v20))
            {
              *(unsigned char *)(v2 + 73) = 1;
              sub_1006020E0(v2, *(void **)(a1 + 32), v18);
              goto LABEL_25;
            }
          }
          id v15 = [v14 countByEnumeratingWithState:&v20 objects:v26 count:16];
          if (v15) {
            continue;
          }
          break;
        }
      }
LABEL_25:
    }
  }
  else if (v9)
  {
    uint64_t v19 = *(void *)(a1 + 32);
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v28 = v19;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device '%@' does not have the tag 'RequiresANCSAuth', not adding it to the authorization queue.", buf, 0xCu);
  }
}

void sub_100601EE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _Unwind_Resume(a1);
}

id sub_100601F1C(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v4 = *(id *)(a1 + 48);
  id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v15;
    while (2)
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        BOOL v9 = [v8 device:v14];
        uint64_t v10 = [v9 UUIDString];
        int v11 = [v3 UUIDString];
        unsigned int v12 = [v10 isEqualToString:v11];

        if (v12)
        {
          id v5 = [v8 bundleIdentifiers];
          goto LABEL_11;
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v14 objects:v18 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v5;
}

void sub_100602098(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006020E0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10060443C;
  block[3] = &unk_1009996F8;
  id v12 = v6;
  uint64_t v13 = a1;
  id v11 = v5;
  id v8 = v6;
  id v9 = v5;
  dispatch_async(v7, block);
}

void sub_1006021A4(uint64_t a1, void *a2)
{
}

void sub_1006021AC(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100602244;
  v6[3] = &unk_100998A38;
  id v7 = v3;
  uint64_t v8 = a1;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100602244(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = 138412290;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'leDeviceUnpaired' listener for device '%@'", (uint8_t *)&v5, 0xCu);
  }
  sub_100602304(v2, *(void **)(a1 + 32));
}

void sub_100602304(uint64_t a1, void *a2)
{
  id v23 = a2;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  id obj = *(id *)(a1 + 48);
  id v3 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v29;
    while (2)
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v29 != v4) {
          objc_enumerationMutation(obj);
        }
        long long v22 = *(void **)(*((void *)&v28 + 1) + 8 * i);
        uint64_t v6 = [v22 device];
        id v7 = [v6 UUIDString];
        uint64_t v8 = [v23 UUIDString];
        unsigned int v9 = [v7 isEqualToString:v8];

        if (v9)
        {
          long long v26 = 0u;
          long long v27 = 0u;
          long long v24 = 0u;
          long long v25 = 0u;
          uint64_t v10 = [v22 bundleIdentifiers];
          id v11 = [v10 countByEnumeratingWithState:&v24 objects:v32 count:16];
          if (v11)
          {
            uint64_t v12 = *(void *)v25;
            do
            {
              for (j = 0; j != v11; j = (char *)j + 1)
              {
                if (*(void *)v25 != v12) {
                  objc_enumerationMutation(v10);
                }
                uint64_t v14 = *(void *)(*((void *)&v24 + 1) + 8 * (void)j);
                long long v15 = [*(id *)(a1 + 56) objectForKey:v14];
                BOOL v16 = v15 == 0;

                if (!v16)
                {
                  long long v17 = [*(id *)(a1 + 56) valueForKey:v14];
                  unsigned int v18 = [v17 intValue];

                  uint64_t v19 = *(void **)(a1 + 56);
                  if (v18 == 1)
                  {
                    [*(id *)(a1 + 56) removeObjectForKey:v14];
                  }
                  else
                  {
                    long long v20 = +[NSNumber numberWithInt:v18 - 1];
                    [v19 setValue:v20 forKey:v14];
                  }
                }
              }
              id v11 = [v10 countByEnumeratingWithState:&v24 objects:v32 count:16];
            }
            while (v11);
          }

          [*(id *)(a1 + 48) removeObject:v22];
          goto LABEL_22;
        }
      }
      id v3 = [obj countByEnumeratingWithState:&v28 objects:v33 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_22:

  if (![*(id *)(a1 + 48) count])
  {
    [*(id *)(a1 + 56) removeAllObjects];
    sub_100601A8C(a1);
  }
}

void sub_10060259C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100602628(uint64_t a1, void *a2)
{
}

void sub_100602630(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_1006026C8;
  v6[3] = &unk_100998A38;
  id v7 = v3;
  uint64_t v8 = a1;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_1006026C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    *(_DWORD *)std::string buf = 138412290;
    uint64_t v21 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'leLinkReady' listener for device '%@'", buf, 0xCu);
  }
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BAC88);
  }
  id v5 = sub_10070CA20(qword_1009F7EC8);
  id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      uint64_t v8 = 0;
      do
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(v5);
        }
        unsigned int v9 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v8);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
        }
        uint64_t v10 = off_1009F7ED8;
        sub_10004191C(__p, "RequiresANCSAuth");
        int v11 = sub_100030A04((uint64_t)v10, v9, (uint64_t)__p);
        int v12 = v11;
        if (v14 < 0)
        {
          operator delete(__p[0]);
          if (!v12) {
            goto LABEL_17;
          }
LABEL_16:
          sub_10060290C(v2, v9, 0);
          goto LABEL_17;
        }
        if (v11) {
          goto LABEL_16;
        }
LABEL_17:
        uint64_t v8 = (char *)v8 + 1;
      }
      while (v6 != v8);
      id v6 = [v5 countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }
}

void sub_1006028D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_10060290C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  uint64_t v21 = a1;
  id v22 = a3;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  id v6 = (DeviceObject *)*(id *)(a1 + 48);
  id v7 = [(DeviceObject *)v6 countByEnumeratingWithState:&v23 objects:v31 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v24;
LABEL_3:
    uint64_t v9 = 0;
    while (1)
    {
      if (*(void *)v24 != v8) {
        objc_enumerationMutation(v6);
      }
      uint64_t v10 = *(void **)(*((void *)&v23 + 1) + 8 * v9);
      int v11 = [v10 device];
      int v12 = [v11 UUIDString];
      uint64_t v13 = [v5 UUIDString];
      unsigned int v14 = [v12 isEqualToString:v13];

      if (v14) {
        break;
      }
      if (v7 == (id)++v9)
      {
        id v7 = [(DeviceObject *)v6 countByEnumeratingWithState:&v23 objects:v31 count:16];
        if (v7) {
          goto LABEL_3;
        }
        goto LABEL_9;
      }
    }
    long long v16 = qword_100A19F18;
    if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412546;
      id v28 = v5;
      __int16 v29 = 2112;
      id v30 = v22;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Device '%@' is present in the authorization queue, adding the bundleIdentifier '%@' to its list", buf, 0x16u);
    }
    if (v22)
    {
      long long v17 = [v10 bundleIdentifiers];
      unsigned __int8 v18 = [v17 containsObject:v22];

      uint64_t v19 = qword_100A19F18;
      if ((v18 & 1) == 0)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 138412546;
          id v28 = v22;
          __int16 v29 = 2112;
          id v30 = v5;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Added the bundle identifier '%@' to device '%@' bundle identifier list", buf, 0x16u);
        }
        long long v20 = [v10 bundleIdentifiers];
        [v20 addObject:v22];

        goto LABEL_22;
      }
    }
    else
    {
      uint64_t v19 = qword_100A19F18;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412546;
      id v28 = v22;
      __int16 v29 = 2112;
      id v30 = v5;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Bundle identifier '%@' already part of the device '%@' bundle identifier list", buf, 0x16u);
    }
  }
  else
  {
LABEL_9:

    long long v15 = qword_100A19F18;
    if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 138412546;
      id v28 = v5;
      __int16 v29 = 2112;
      id v30 = v22;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Device '%@' is not present in the authorization queue, creating device object and adding it to the queue for the bundleIdentifier '%@'", buf, 0x16u);
    }
    id v6 = [[DeviceObject alloc] initWithDevice:v5 andBundleIdentifier:v22];
    [*(id *)(v21 + 48) addObject:v6];
  }
LABEL_22:

  if (!*(void *)(v21 + 32)) {
    sub_100603C94(v21);
  }
}

void sub_100602C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100602CF4(uint64_t a1, void *a2)
{
}

void sub_100602CFC(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100602D94;
  v6[3] = &unk_100998A38;
  id v7 = v3;
  uint64_t v8 = a1;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100602D94(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  id v3 = qword_100A19F18;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    id v5 = *(void **)(a1 + 32);
    *(_DWORD *)std::string buf = 138412290;
    id v34 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'deviceSubscribedForANCSNotification' listener for device '%@'", buf, 0xCu);
  }
  if (sub_1006031E8(v4, *(void **)(a1 + 32)))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    id v6 = off_1009F7ED8;
    id v7 = *(void **)(a1 + 32);
    sub_10004191C(__p, "RequiresANCSAuth");
    int v8 = sub_100030A04((uint64_t)v6, v7, (uint64_t)__p);
    if (v32 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v9 = qword_100A19F18;
    BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT);
    if (v8)
    {
      if (v10)
      {
        int v11 = *(void **)(a1 + 32);
        *(_DWORD *)std::string buf = 138412290;
        id v34 = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device '%@' already has the tag 'RequiresANCSAuth'", buf, 0xCu);
      }
    }
    else
    {
      if (v10)
      {
        int v12 = *(void **)(a1 + 32);
        *(_DWORD *)std::string buf = 138412290;
        id v34 = v12;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Device '%@' does not have the tag 'RequiresANCSAuth'. Setting the tag.", buf, 0xCu);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
      }
      uint64_t v13 = off_1009F7ED8;
      unsigned int v14 = *(void **)(a1 + 32);
      sub_10004191C(v29, "RequiresANCSAuth");
      sub_1006BC69C((uint64_t)v13, v14, (unsigned __int8 *)v29);
      if (v30 < 0) {
        operator delete(v29[0]);
      }
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BAC48);
    }
    sub_1002F4800((uint64_t)off_1009F8780, *(void **)(a1 + 32));
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v15 = (id)objc_claimAutoreleasedReturnValue();
    id v16 = [v15 countByEnumeratingWithState:&v25 objects:v37 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v26;
LABEL_21:
      uint64_t v18 = 0;
      while (1)
      {
        if (*(void *)v26 != v17) {
          objc_enumerationMutation(v15);
        }
        uint64_t v19 = *(void **)(*((void *)&v25 + 1) + 8 * v18);
        if ((objc_msgSend(v19, "isEqualToString:", @"com.apple.BTLEServer", (void)v25) & 1) == 0) {
          break;
        }
        if (v16 == (id)++v18)
        {
          id v16 = [v15 countByEnumeratingWithState:&v25 objects:v37 count:16];
          if (v16) {
            goto LABEL_21;
          }
          goto LABEL_27;
        }
      }
      id v20 = v19;

      if (!v20) {
        goto LABEL_32;
      }
      uint64_t v21 = qword_100A19F18;
      if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v22 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 138412546;
        id v34 = v20;
        __int16 v35 = 2112;
        uint64_t v36 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "%@ is interetsed in device %@", buf, 0x16u);
      }
      sub_100603428(v2, v20);
      sub_10060290C(v2, *(void **)(a1 + 32), v20);
    }
    else
    {
LABEL_27:

LABEL_32:
      long long v23 = qword_100A19F18;
      if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
      {
        long long v24 = *(void **)(a1 + 32);
        *(_DWORD *)std::string buf = 138412290;
        id v34 = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "No session interetsed in device %@", buf, 0xCu);
      }
      id v20 = 0;
      sub_10060290C(v2, *(void **)(a1 + 32), 0);
    }
  }
}

void sub_10060318C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006031E8(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
  }
  id v3 = off_1009F7ED8;
  sub_10004191C(v18, "ANCSAuthorized");
  if (sub_100030A04((uint64_t)v3, v2, (uint64_t)v18))
  {
    char v4 = 1;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    id v5 = off_1009F7ED8;
    sub_10004191C(__p, "ANCSUnauthorized");
    char v4 = sub_100030A04((uint64_t)v5, v2, (uint64_t)__p);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  if ((v19 & 0x80000000) == 0)
  {
    if (v4) {
      goto LABEL_21;
    }
LABEL_13:
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    id v6 = off_1009F7ED8;
    sub_10004191C(v14, "IsHearingAid");
    int v7 = sub_100030A04((uint64_t)v6, v2, (uint64_t)v14);
    int v8 = v7;
    if (v15 < 0)
    {
      operator delete(v14[0]);
      if (v8) {
        goto LABEL_17;
      }
    }
    else if (v7)
    {
LABEL_17:
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
      }
      uint64_t v9 = off_1009F7ED8;
      sub_10004191C(v12, "ANCSAuthorized");
      sub_1006BC69C((uint64_t)v9, v2, (unsigned __int8 *)v12);
      if (v13 < 0) {
        operator delete(v12[0]);
      }
      goto LABEL_21;
    }
    uint64_t v10 = 1;
    goto LABEL_24;
  }
  operator delete(v18[0]);
  if ((v4 & 1) == 0) {
    goto LABEL_13;
  }
LABEL_21:
  uint64_t v10 = 0;
LABEL_24:

  return v10;
}

void sub_1006033C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100603428(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = [[*(id *)(a1 + 56) objectForKey:];

  if (v3)
  {
    char v4 = [*(id *)(a1 + 56) valueForKey:v8];
    uint64_t v5 = [v4 intValue] + 1;

    id v6 = *(void **)(a1 + 56);
    int v7 = +[NSNumber numberWithInt:v5];
    [v6 setValue:v7 forKey:v8];
  }
  else
  {
    int v7 = +[NSNumber numberWithInt:1];
    [*(id *)(a1 + 56) setValue:v7 forKey:v8];
  }
}

void sub_10060350C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10060353C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100603604;
  block[3] = &unk_1009996F8;
  id v12 = v5;
  uint64_t v13 = a1;
  id v11 = v6;
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void sub_100603604(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = qword_100A19F18;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = *(void *)(a1 + 40);
    *(_DWORD *)std::string buf = 138412546;
    uint64_t v21 = v5;
    __int16 v22 = 2112;
    uint64_t v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'appRequestedANCSAuthorizationForDevice' listener for device '%@' and bundleIdentifier '%@'", buf, 0x16u);
  }
  if (sub_1006031E8(v4, *(void **)(a1 + 32)))
  {
    sub_100603428(v2, *(void **)(a1 + 40));
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    int v7 = off_1009F7ED8;
    id v8 = *(void **)(a1 + 32);
    sub_10004191C(__p, "RequiresANCSAuth");
    int v9 = sub_100030A04((uint64_t)v7, v8, (uint64_t)__p);
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v10 = qword_100A19F18;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v11)
      {
        uint64_t v12 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 138412290;
        uint64_t v21 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device '%@' already has the tag 'RequiresANCSAuth'", buf, 0xCu);
      }
    }
    else
    {
      if (v11)
      {
        uint64_t v13 = *(void *)(a1 + 32);
        *(_DWORD *)std::string buf = 138412290;
        uint64_t v21 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Device '%@' does not have the tag 'RequiresANCSAuth'. Setting the tag.", buf, 0xCu);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
      }
      unsigned int v14 = off_1009F7ED8;
      char v15 = *(void **)(a1 + 32);
      sub_10004191C(v16, "RequiresANCSAuth");
      sub_1006BC69C((uint64_t)v14, v15, (unsigned __int8 *)v16);
      if (v17 < 0) {
        operator delete(v16[0]);
      }
    }
    sub_10060290C(v2, *(void **)(a1 + 32), *(void **)(a1 + 40));
  }
}

void sub_10060384C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_100603888(uint64_t a1, void *a2, void *a3)
{
}

void sub_100603890(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  int v7 = *(NSObject **)(a1 + 40);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100603958;
  block[3] = &unk_1009996F8;
  id v12 = v5;
  uint64_t v13 = a1;
  id v11 = v6;
  id v8 = v5;
  id v9 = v6;
  dispatch_async(v7, block);
}

void sub_100603958(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  id v3 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void *)(a1 + 40);
    int v12 = 138412546;
    uint64_t v13 = v4;
    __int16 v14 = 2112;
    uint64_t v15 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received 'appSessionChangedInterestInDevice' listener for device '%@' and bundleIdentifier '%@'", (uint8_t *)&v12, 0x16u);
  }
  int v6 = sub_100603AE4(v2, *(void **)(a1 + 32));
  int v7 = qword_100A19F18;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      uint64_t v9 = *(void *)(a1 + 32);
      uint64_t v10 = *(void *)(a1 + 40);
      int v12 = 138412546;
      uint64_t v13 = v9;
      __int16 v14 = 2112;
      uint64_t v15 = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device '%@ is present in authorization queue. Adding '%@' to the bundleIdentifier list for this device.", (uint8_t *)&v12, 0x16u);
    }
    sub_100603428(v2, *(void **)(a1 + 40));
    sub_10060290C(v2, *(void **)(a1 + 32), *(void **)(a1 + 40));
  }
  else if (v8)
  {
    uint64_t v11 = *(void *)(a1 + 32);
    int v12 = 138412290;
    uint64_t v13 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Device '%@ is not present in authorization queue. Ignore appSessionChangedInterestInDevice listener", (uint8_t *)&v12, 0xCu);
  }
}

uint64_t sub_100603AE4(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v4 = *(id *)(a1 + 48);
  uint64_t v5 = (uint64_t)[v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v14;
    while (2)
    {
      for (uint64_t i = 0; i != v5; ++i)
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v4);
        }
        BOOL v8 = [*(id *)(*((void *)&v13 + 1) + 8 * i) device:v13];
        uint64_t v9 = [v8 UUIDString];
        uint64_t v10 = [v3 UUIDString];
        unsigned __int8 v11 = [v9 isEqualToString:v10];

        if (v11)
        {
          uint64_t v5 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v5 = (uint64_t)[v4 countByEnumeratingWithState:&v13 objects:v17 count:16];
      if (v5) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v5;
}

void sub_100603C40(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100603C88(uint64_t a1, void *a2, void *a3)
{
}

void sub_100603C94(uint64_t a1)
{
  uint64_t v2 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering FrontBoard services", buf, 2u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100603D6C;
  v5[3] = &unk_1009A4C80;
  v5[4] = a1;
  id v3 = [objc_alloc((Class)FBSDisplayLayoutMonitor) initWithDisplayType:0 handler:v5];
  id v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v3;
}

void sub_100603D6C(uint64_t a1, void *a2)
{
}

void sub_100603D74(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(NSObject **)(a1 + 40);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100603E0C;
  v6[3] = &unk_100998A38;
  id v7 = v3;
  uint64_t v8 = a1;
  id v5 = v3;
  dispatch_async(v4, v6);
}

void sub_100603E0C(uint64_t a1)
{
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v1 = *(void *)(a1 + 40);
  id obj = [*(id *)(a1 + 32) elements];
  id v2 = [obj countByEnumeratingWithState:&v25 objects:v33 count:16];
  if (v2)
  {
    uint64_t v3 = *(void *)v26;
LABEL_3:
    uint64_t v4 = 0;
    while (1)
    {
      if (*(void *)v26 != v3) {
        objc_enumerationMutation(obj);
      }
      id v5 = *(void **)(*((void *)&v25 + 1) + 8 * v4);
      uint64_t v6 = [v5 bundleIdentifier];
      id v7 = *(void **)(v1 + 80);
      *(void *)(v1 + 80) = v6;

      uint64_t v8 = [v5 identifier];
      if ([v8 isEqualToString:@"com.apple.springboard.home-screen"]) {
        break;
      }
      uint64_t v9 = [v5 bundleIdentifier];
      unsigned int v10 = [v9 isEqualToString:@"com.apple.Preferences"];

      if (v10) {
        goto LABEL_13;
      }
      unsigned __int8 v11 = *(void **)(v1 + 56);
      int v12 = [v5 bundleIdentifier];
      long long v13 = [v11 objectForKey:v12];
      LOBYTE(v11) = v13 == 0;

      if ((v11 & 1) == 0)
      {
        char v17 = [v5 bundleIdentifier];
        long long v15 = sub_100604224(v1, v17);

        if (v15)
        {
          if (qword_1009F7ED0 != -1) {
            dispatch_once(&qword_1009F7ED0, &stru_1009BAC88);
          }
          BOOL v18 = sub_100008DC4(qword_1009F7EC8, v15);
          char v19 = qword_100A19F18;
          BOOL v20 = os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT);
          if (v18)
          {
            if (v20)
            {
              uint64_t v21 = [v5 bundleIdentifier];
              *(_DWORD *)std::string buf = 138412290;
              char v30 = v21;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "User is in %@", buf, 0xCu);
            }
            __int16 v22 = [v5 bundleIdentifier];
            sub_1006020E0(v1, v15, v22);

            *(_WORD *)(v1 + 72) = 256;
          }
          else if (v20)
          {
            uint64_t v23 = [v5 bundleIdentifier];
            *(_DWORD *)std::string buf = 138412546;
            char v30 = v23;
            __int16 v31 = 2112;
            char v32 = v15;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "User is in %@ but the device '%@' is not paired yet. Not showing authorization alert", buf, 0x16u);
          }
        }
        goto LABEL_26;
      }
      *(_WORD *)(v1 + 72) = 0;
      if (v2 == (id)++v4)
      {
        id v2 = [obj countByEnumeratingWithState:&v25 objects:v33 count:16];
        if (v2) {
          goto LABEL_3;
        }
        goto LABEL_27;
      }
    }

LABEL_13:
    long long v14 = qword_100A19F18;
    if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "User is in SpringBoard or Settings App.", buf, 2u);
    }
    if ([*(id *)(v1 + 48) count])
    {
      *(_WORD *)(v1 + 72) = 1;
      long long v15 = [*(id *)(v1 + 48) objectAtIndexedSubscript:0];
      long long v16 = [v15 device];
      sub_1006020E0(v1, v16, 0);

LABEL_26:
    }
  }
LABEL_27:
}

void sub_1006041AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_100604224(uint64_t a1, void *a2)
{
  id v3 = a2;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  id v4 = *(id *)(a1 + 48);
  id v5 = [v4 countByEnumeratingWithState:&v19 objects:v24 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v20;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v20 != v6) {
          objc_enumerationMutation(v4);
        }
        uint64_t v8 = *(void **)(*((void *)&v19 + 1) + 8 * i);
        long long v15 = 0u;
        long long v16 = 0u;
        long long v17 = 0u;
        long long v18 = 0u;
        uint64_t v9 = [v8 bundleIdentifiers];
        id v10 = [v9 countByEnumeratingWithState:&v15 objects:v23 count:16];
        if (v10)
        {
          uint64_t v11 = *(void *)v16;
          while (2)
          {
            for (j = 0; j != v10; j = (char *)j + 1)
            {
              if (*(void *)v16 != v11) {
                objc_enumerationMutation(v9);
              }
              if ([*(id *)(*((void *)&v15 + 1) + 8 * (void)j) isEqualToString:v3])
              {
                long long v13 = [v8 device];

                goto LABEL_19;
              }
            }
            id v10 = [v9 countByEnumeratingWithState:&v15 objects:v23 count:16];
            if (v10) {
              continue;
            }
            break;
          }
        }
      }
      id v5 = [v4 countByEnumeratingWithState:&v19 objects:v24 count:16];
      long long v13 = 0;
    }
    while (v5);
  }
  else
  {
    long long v13 = 0;
  }
LABEL_19:

  return v13;
}

void sub_1006043FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10060443C(void *a1)
{
  uint64_t v2 = a1[6];
  id v3 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[4];
    uint64_t v5 = a1[5];
    *(_DWORD *)std::string buf = 138412546;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&unsigned char buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "In showAuthorizationAlert %@ and bundle identifier '%@'", buf, 0x16u);
  }
  if (!*(void *)(v2 + 64))
  {
    uint64_t v6 = qword_100A19F18;
    if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = a1[4];
      uint64_t v8 = a1[5];
      *(_DWORD *)std::string buf = 138412546;
      *(void *)&uint8_t buf[4] = v7;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&unsigned char buf[14] = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Display ANCS Authorization alert for %@ and bundle identifier '%@'", buf, 0x16u);
    }
    uint64_t v9 = [[UserNotification alloc] initWithType:5 device:a1[4] bundleID:a1[5]];
    id v10 = *(void **)(v2 + 64);
    *(void *)(v2 + 64) = v9;

    memset(buf, 0, 24);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    uint64_t v11 = off_1009F7ED8;
    int v12 = [*(id *)(v2 + 64) device];
    sub_10003093C((uint64_t)v11, v12, (uint64_t)__p);
    if ((v43 & 0x80u) == 0) {
      unint64_t v13 = v43;
    }
    else {
      unint64_t v13 = (unint64_t)__p[1];
    }
    if (v13)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
      }
      long long v14 = off_1009F7ED8;
      long long v15 = [*(id *)(v2 + 64) device];
      sub_10003093C((uint64_t)v14, v15, (uint64_t)buf);
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
      }
      long long v16 = off_1009F7ED8;
      long long v15 = [*(id *)(v2 + 64) device];
      sub_100030DCC((uint64_t)v16, v15, 0);
      sub_1006AD3F0();
      id v17 = objc_claimAutoreleasedReturnValue();
      sub_10004191C(buf, (char *)[v17 UTF8String]);
    }
    if ((char)v43 < 0) {
      operator delete(__p[0]);
    }

    uint64_t v18 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v18 + 360))(v18)) {
      CFStringRef v19 = @"IPAD";
    }
    else {
      CFStringRef v19 = @"IPHONE";
    }
    if ((buf[23] & 0x80u) == 0) {
      long long v20 = buf;
    }
    else {
      long long v20 = *(uint8_t **)buf;
    }
    uint64_t v39 = +[NSString stringWithUTF8String:v20];
    long long v21 = [@"ANCS_TITLE_" stringByAppendingString:v19];
    long long v22 = [@"ANCS_AUTHORIZATION_MESSAGE_" stringByAppendingString:v19];
    uint64_t v23 = sub_100379650(v21, v21);
    id v41 = 0;
    long long v24 = +[NSString stringWithValidatedFormat:v23, @"%@", &v41, v39 validFormatSpecifiers error];
    id v25 = v41;

    if (v24)
    {
      long long v26 = sub_100379650(v22, v22);
      id v40 = v25;
      long long v27 = +[NSString stringWithValidatedFormat:v26, @"%@", &v40, v39 validFormatSpecifiers error];
      id v38 = v40;

      if (v27)
      {
        int v37 = sub_100379650(@"AUTHORIZE", @"Allow");
        long long v28 = sub_100379650(@"UNAUTHORIZE", @"Don't Allow");
        id v29 = v37;
        id v30 = v28;
        v44[0] = kCFUserNotificationAlertTopMostKey;
        v44[1] = SBUserNotificationAllowMenuButtonDismissal;
        v45[0] = &__kCFBooleanTrue;
        v45[1] = &__kCFBooleanTrue;
        void v44[2] = SBUserNotificationDismissOnLock;
        v44[3] = kCFUserNotificationAlertHeaderKey;
        v45[2] = &__kCFBooleanTrue;
        v45[3] = v24;
        __int16 v31 = +[NSDictionary dictionaryWithObjects:v45 forKeys:v44 count:4];
        id v32 = [v31 mutableCopy];

        [v32 setObject:v27 forKey:kCFUserNotificationAlertMessageKey];
        [v32 setObject:v29 forKey:kCFUserNotificationDefaultButtonTitleKey];
        if (v30) {
          [v32 setObject:v30 forKey:kCFUserNotificationAlternateButtonTitleKey];
        }
        CFUserNotificationRef v33 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0x10003uLL, 0, (CFDictionaryRef)v32);
        [*(id *)(v2 + 64) setNotification:v33];
        CFRelease(v33);
        CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v33, (CFUserNotificationCallBack)sub_100604B4C, 0);
        [*(id *)(v2 + 64) setRunLoopSource:RunLoopSource];
        CFRelease(RunLoopSource);
      }
      else
      {
        uint64_t v36 = qword_100A19F18;
        if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_ERROR)) {
          sub_100785EA8((uint64_t)v38, v36);
        }
      }

      id v25 = v38;
    }
    else
    {
      __int16 v35 = qword_100A19F18;
      if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_ERROR)) {
        sub_100785EA8((uint64_t)v25, v35);
      }
    }

    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
}

void sub_100604A34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v28 - 105) < 0) {
    operator delete(*(void **)(v28 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100604B4C(uint64_t a1, uint64_t a2)
{
  if (qword_1009FBC88 != -1) {
    dispatch_once(&qword_1009FBC88, &stru_1009BAC28);
  }
  id v3 = *((void *)off_1009FBC80 + 5);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100604BF8;
  v4[3] = &unk_100998260;
  v4[4] = off_1009FBC80;
  v4[5] = a2;
  dispatch_async(v3, v4);
}

void sub_100604BF8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = [*(id *)(v2 + 64) device];
    uint64_t v5 = (void *)v4;
    uint64_t v6 = *(void *)(a1 + 40);
    uint64_t v7 = "unknown";
    if (v6 == 1) {
      uint64_t v7 = "unauthorize";
    }
    *(_DWORD *)std::string buf = 138412802;
    uint64_t v31 = v4;
    if (!v6) {
      uint64_t v7 = "authorize";
    }
    __int16 v32 = 2082;
    CFUserNotificationRef v33 = v7;
    __int16 v34 = 2048;
    uint64_t v35 = v6;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "User responded to authorization notification for device \"%@\" with %{public}s (%ld) button", buf, 0x20u);
  }
  uint64_t v8 = *(void *)(a1 + 40);
  if (v8 == 1)
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    long long v15 = off_1009F7ED8;
    long long v16 = [*(id *)(v2 + 64) device];
    sub_1006B85C0((uint64_t)v15, v16, @"RequiresANCSAuth");

    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    id v17 = off_1009F7ED8;
    uint64_t v18 = [*(id *)(v2 + 64) device];
    sub_10004191C(v26, "ANCSUnauthorized");
    sub_1006BC69C((uint64_t)v17, v18, (unsigned __int8 *)v26);
    if (v27 < 0) {
      operator delete(v26[0]);
    }

    CFStringRef v19 = [*(id *)(v2 + 64) device];
    sub_100602304(v2, v19);

    int v14 = 1;
  }
  else if (v8)
  {
    long long v20 = qword_100A19F18;
    if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_ERROR)) {
      sub_100785F20(v20);
    }
    int v14 = 0xFFFF;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    uint64_t v9 = off_1009F7ED8;
    id v10 = [*(id *)(v2 + 64) device];
    sub_1006B85C0((uint64_t)v9, v10, @"RequiresANCSAuth");

    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
    }
    uint64_t v11 = off_1009F7ED8;
    int v12 = [*(id *)(v2 + 64) device];
    sub_10004191C(__p, "ANCSAuthorized");
    sub_1006BC69C((uint64_t)v11, v12, (unsigned __int8 *)__p);
    if (v29 < 0) {
      operator delete(__p[0]);
    }

    unint64_t v13 = [*(id *)(v2 + 64) device];
    sub_100602304(v2, v13);

    int v14 = 0;
  }
  long long v21 = [*(id *)(v2 + 64) bundleID];
  long long v22 = [*(id *)(v2 + 64) device];
  sub_10060504C(v2, v22, 0, 0xFFFF, v14);

  uint64_t v23 = *(void **)(v2 + 64);
  *(void *)(v2 + 64) = 0;

  if ([*(id *)(v2 + 48) count])
  {
    if (*(unsigned char *)(v2 + 73))
    {
      long long v24 = sub_100604224(v2, v21);
      if (v24) {
        sub_1006020E0(v2, v24, v21);
      }
      goto LABEL_32;
    }
    if (*(unsigned char *)(v2 + 72))
    {
      long long v24 = [*(id *)(v2 + 48) objectAtIndexedSubscript:0];
      id v25 = [v24 device];
      sub_1006020E0(v2, v25, 0);

LABEL_32:
    }
  }
}

void sub_100604FE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_10060504C(uint64_t a1, void *a2, int a3, int a4, int a5)
{
  id v9 = a2;
  id v10 = *(NSObject **)(a1 + 40);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_100605108;
  v12[3] = &unk_1009BAC08;
  id v13 = v9;
  uint64_t v14 = a1;
  int v15 = a3;
  int v16 = a4;
  int v17 = a5;
  id v11 = v9;
  dispatch_async(v10, v12);
}

void sub_100605108(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
  }
  int v17 = 0;
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_10003093C((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), (uint64_t)&v17);
  if (SHIBYTE(v19) < 0)
  {
    if (v18)
    {
      id v3 = v17;
      goto LABEL_8;
    }
LABEL_10:
    int v7 = 0;
    goto LABEL_13;
  }
  if (!HIBYTE(v19)) {
    goto LABEL_10;
  }
  id v3 = &v17;
LABEL_8:
  uint64_t v4 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v3, +[NSString defaultCStringEncoding]);
  uint64_t v5 = [(id)qword_100A13AA0 objectForKey:v4];
  uint64_t v6 = v5;
  if (v5) {
    int v7 = [v5 intValue];
  }
  else {
    int v7 = 0xFFFF;
  }

LABEL_13:
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BAC68);
  }
  uint64_t v8 = off_1009F7EB8;
  id v9 = [*(id *)(v2 + 64) device];
  sub_1000305AC(buf, v9);
  sub_1000307A4((uint64_t)v8, buf);

  id v10 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = &v17;
    if (v19 < 0) {
      id v11 = v17;
    }
    int v12 = *(_DWORD *)(a1 + 48);
    int v13 = *(_DWORD *)(a1 + 52);
    int v14 = *(_DWORD *)(a1 + 56);
    *(_DWORD *)std::string buf = 136447490;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v12;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v13;
    *(_WORD *)&unsigned char buf[24] = 1024;
    *(_DWORD *)&buf[26] = v14;
    *(_WORD *)&buf[30] = 1024;
    LODWORD(v21) = v7;
    WORD2(v21) = 1024;
    *(_DWORD *)((char *)&v21 + 6) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Push AWD stats ANCS for %{public}s : triggerLoc: %u, prevPermission: %u, currPermission: %u, deviceCategory = %u, connectedTransport = %u", buf, 0x2Au);
  }
  long long v21 = 0u;
  long long v22 = 0u;
  memset(buf, 0, sizeof(buf));
  if (v19 >= 0) {
    int v15 = (char *)&v17;
  }
  else {
    int v15 = (char *)v17;
  }
  sub_10004191C(&__p, v15);
  sub_10030B3C0(buf, &__p, 1, *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52), *(_DWORD *)(a1 + 56), v7, 0, 0xFFFF);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (qword_1009FB260 != -1) {
    dispatch_once(&qword_1009FB260, &stru_1009BACE8);
  }
  sub_1000504D8();
  if ((char)buf[31] < 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v17);
  }
}

void sub_1006053E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100605464(uint64_t a1)
{
  uint64_t v30 = a1;
  uint64_t v2 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ---------------- ANCS Authorization Manager ----------------", (uint8_t *)&buf, 2u);
    uint64_t v2 = qword_100A19F18;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = [*(id *)(v30 + 48) count];
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: pendingAuthorizationDevicesQueue: %ld devices", (uint8_t *)&buf, 0xCu);
  }
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  id obj = *(id *)(v30 + 48);
  id v4 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
  if (v4)
  {
    uint64_t v34 = *(void *)v45;
    do
    {
      id v35 = v4;
      for (uint64_t i = 0; i != v35; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v45 != v34) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v44 + 1) + 8 * i);
        int v7 = qword_100A19F18;
        if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
          }
          uint64_t v8 = off_1009F7ED8;
          id v9 = [v6 device:v30];
          sub_10003093C((uint64_t)v8, v9, (uint64_t)&buf);
          if ((v49 & 0x80u) == 0) {
            uint64_t v10 = v49;
          }
          else {
            uint64_t v10 = *((void *)&buf + 1);
          }
          if (v10)
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
            }
            id v11 = off_1009F7ED8;
            uint64_t v1 = [v6 device];
            sub_10003093C((uint64_t)v11, v1, (uint64_t)__p);
            if (v43 >= 0) {
              int v12 = __p;
            }
            else {
              int v12 = (void **)__p[0];
            }
          }
          else
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
            }
            int v13 = off_1009F7ED8;
            uint64_t v31 = [v6 device];
            sub_100030DCC((uint64_t)v13, v31, 0);
            sub_1006AD3F0();
            id v33 = objc_claimAutoreleasedReturnValue();
            int v12 = (void **)[v33 UTF8String];
          }
          int v14 = [v6 device];
          *(_DWORD *)char v50 = 136315394;
          int v51 = v12;
          __int16 v52 = 2112;
          uint64_t v53 = v14;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump: Device: %s (%@)", v50, 0x16u);

          if (v10)
          {
            if (v43 < 0) {
              operator delete(__p[0]);
            }
          }
          else
          {
          }
          if ((char)v49 < 0) {
            operator delete((void *)buf);
          }

          int v7 = qword_100A19F18;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = [v6 bundleIdentifiers];
          LODWORD(buf) = 138412290;
          *(void *)((char *)&buf + 4) = v15;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    BundleIdentifiers: %@", (uint8_t *)&buf, 0xCu);

          int v7 = qword_100A19F18;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
          }
          int v16 = off_1009F7ED8;
          int v17 = [v6 device:v30];
          sub_10004191C(v40, "RequiresANCSAuth");
          int v18 = sub_100030A04(v16, v17, v40);
          uint64_t v19 = "No";
          if (v18) {
            uint64_t v19 = "Yes";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v19;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    RequiresANCSAuth: %s", (uint8_t *)&buf, 0xCu);
          if (v41 < 0) {
            operator delete(v40[0]);
          }

          int v7 = qword_100A19F18;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
          }
          long long v20 = off_1009F7ED8;
          long long v21 = [v6 device:v30];
          sub_10004191C(v38, "ANCSAuthorized");
          int v22 = sub_100030A04(v20, v21, v38);
          uint64_t v23 = "No";
          if (v22) {
            uint64_t v23 = "Yes";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v23;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    ANCSAuthorized: %s", (uint8_t *)&buf, 0xCu);
          if (v39 < 0) {
            operator delete(v38[0]);
          }

          int v7 = qword_100A19F18;
        }
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BACC8);
          }
          long long v24 = off_1009F7ED8;
          id v25 = [v6 device:v30];
          sub_10004191C(v36, "ANCSUnauthorized");
          int v26 = sub_100030A04(v24, v25, v36);
          char v27 = "No";
          if (v26) {
            char v27 = "Yes";
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v27;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "statedump:    ANCSUnauthorized: %s", (uint8_t *)&buf, 0xCu);
          if (v37 < 0) {
            operator delete(v36[0]);
          }
        }
      }
      id v4 = [obj countByEnumeratingWithState:&v44 objects:v54 count:16];
    }
    while (v4);
  }

  uint64_t v28 = qword_100A19F18;
  if (os_log_type_enabled((os_log_t)qword_100A19F18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = *(void *)(v30 + 56);
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump:    appBundleIndentifiers: %@", (uint8_t *)&buf, 0xCu);
  }
}

void sub_100605B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,void *__p,uint64_t a54,int a55,__int16 a56,char a57,char a58)
{
  _Unwind_Resume(a1);
}

void sub_100605C7C(id *a1)
{
  sub_100605FE0(a1);

  operator delete();
}

void sub_100605CDC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  id v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100605D68(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100605D68(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  id v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    int v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    long long v20 = &v19[8 * v16];
    std::string __p = v19;
    char v27 = v20;
    uint64_t v28 = v20;
    uint64_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        long long v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        char v27 = v20;
        uint64_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        char v27 = v20;
      }
    }
    *(void *)long long v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    id v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    id v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    id v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)id v4 = *(void *)v3;
  }
  return v4;
}

void sub_100605F70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100605FA8(id a1)
{
}

id *sub_100605FE0(id *a1)
{
  return a1;
}

void sub_10060602C(id a1)
{
}

void sub_100606070()
{
}

void sub_100606094(id a1)
{
}

void sub_1006060D8()
{
}

void sub_1006060FC(id a1)
{
}

void sub_100606140()
{
}

void sub_100606164(id a1)
{
}

void sub_1006061A8()
{
}

void sub_1006061CC(id a1)
{
}

void sub_100606210()
{
}

void sub_100606234(id a1)
{
}

uint64_t sub_100606264(uint64_t a1)
{
  *(void *)a1 = off_1009BAD18;
  sub_100052DA8(a1 + 8);
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(unsigned char *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = 0;
  sub_100052DA8(a1 + 136);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  return a1;
}

void sub_10060630C(_Unwind_Exception *a1)
{
  sub_1000486F0(v2, *v4);
  sub_1000486F0(v3, *v5);
  sub_100052DA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10060633C(uint64_t a1)
{
  *(void *)a1 = off_1009BAD18;
  sub_100606558(a1, 0);
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 8);
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2 != (void *)(a1 + 96))
  {
    do
    {
      uint64_t v3 = v2[5];
      if (v3)
      {
        nullsub_95(v3);
        operator delete();
      }
      id v4 = (void *)v2[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          id v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v2[2];
          BOOL v6 = *v5 == (void)v2;
          uint64_t v2 = v5;
        }
        while (!v6);
      }
      uint64_t v2 = v5;
    }
    while (v5 != (void *)(a1 + 96));
  }
  unint64_t v7 = *(void **)(a1 + 112);
  if (v7 != (void *)(a1 + 120))
  {
    do
    {
      uint64_t v8 = v7[5];
      if (v8)
      {
        sub_100608FD8(v7[5], *(void **)(v8 + 8));
        operator delete();
      }
      id v9 = (void *)v7[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          id v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v7[2];
          BOOL v6 = *v10 == (void)v7;
          unint64_t v7 = v10;
        }
        while (!v6);
      }
      unint64_t v7 = v10;
    }
    while (v10 != (void *)(a1 + 120));
  }
  sub_1000486F0(a1 + 224, *(void **)(a1 + 232));
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 0;
  sub_10003AFB4((uint64_t)v13);
  sub_1000486F0(a1 + 224, *(void **)(a1 + 232));
  id v11 = *(void **)(a1 + 200);
  if (v11)
  {
    *(void *)(a1 + 208) = v11;
    operator delete(v11);
  }
  sub_100052DA4(a1 + 136);
  sub_1000486F0(a1 + 112, *(void **)(a1 + 120));
  sub_1000486F0(a1 + 88, *(void **)(a1 + 96));
  sub_100052DA4(a1 + 8);
  return a1;
}

void sub_100606504(_Unwind_Exception *a1)
{
  sub_1000486F0(v1 + 224, *(void **)(v1 + 232));
  uint64_t v3 = *(void **)(v1 + 200);
  if (v3)
  {
    *(void *)(v1 + 208) = v3;
    operator delete(v3);
  }
  sub_100052DA4(v1 + 136);
  sub_1000486F0(v1 + 112, *(void **)(v1 + 120));
  sub_1000486F0(v1 + 88, *(void **)(v1 + 96));
  sub_100052DA4(v1 + 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100606558(uint64_t a1, unint64_t a2)
{
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 8);
  if (*(unsigned char *)(a1 + 72))
  {
    if (a2)
    {
      id v4 = *(void **)(a1 + 232);
      if (v4)
      {
        uint64_t v5 = a1 + 232;
        do
        {
          unint64_t v6 = v4[4];
          BOOL v7 = v6 >= a2;
          if (v6 >= a2) {
            uint64_t v8 = v4;
          }
          else {
            uint64_t v8 = v4 + 1;
          }
          if (v7) {
            uint64_t v5 = (uint64_t)v4;
          }
          id v4 = (void *)*v8;
        }
        while (*v8);
        if (v5 != a1 + 232 && *(void *)(v5 + 32) <= a2 && *(unsigned char *)(v5 + 40)) {
          *(unsigned char *)(v5 + 40) = 0;
        }
      }
    }
    else
    {
      id v9 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)id v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Stopping pairing agent...", v11, 2u);
      }
      if (*(void *)(a1 + 80))
      {
        sub_10003AFE8((uint64_t)v12);
        sub_100606E08(a1, 161);
        sub_10003AF00((uint64_t)v12);
      }
      *(unsigned char *)(a1 + 72) = 0;
      sub_10003AFE8((uint64_t)v12);
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009BAE68);
      }
      sub_10060F428((uint64_t)off_1009F8760);
    }
    sub_100606AA4(a1, 1u, 0, 0, a2);
  }
  sub_10003AFB4((uint64_t)v12);
  return 0;
}

void sub_1006066C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1006066DC(uint64_t a1)
{
  sub_10060633C(a1);

  operator delete();
}

uint64_t sub_100606714(uint64_t a1, unint64_t *a2, _OWORD *a3, uint64_t a4)
{
  v17[1] = 0;
  unint64_t v18 = a2;
  v17[0] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 8);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 136);
  id v9 = *(unint64_t ***)(a1 + 200);
  unint64_t v8 = *(void *)(a1 + 208);
  long long v10 = a3[1];
  v25[0] = *a3;
  v25[1] = v10;
  void v25[2] = a3[2];
  if (v9 != (unint64_t **)v8)
  {
    while (*v9 != a2 || memcmp(v25, v9 + 1, 0x30uLL))
    {
      v9 += 9;
      if (v9 == (unint64_t **)v8) {
        goto LABEL_7;
      }
    }
  }
  if (v9 == (unint64_t **)v8)
  {
LABEL_7:
    long long v11 = a3[1];
    long long v20 = *a3;
    long long v21 = v11;
    long long v22 = a3[2];
    uint64_t v19 = a2;
    int v23 = -1;
    uint64_t v24 = a4;
    if (v8 >= *(void *)(a1 + 216))
    {
      uint64_t v14 = sub_100609034((uint64_t *)(a1 + 200), (uint64_t)&v19);
    }
    else
    {
      *(void *)unint64_t v8 = a2;
      long long v12 = v20;
      long long v13 = v21;
      *(_OWORD *)(v8 + 40) = v22;
      *(_OWORD *)(v8 + 24) = v13;
      *(_OWORD *)(v8 + 8) = v12;
      *(_DWORD *)(v8 + 56) = -1;
      *(void *)(v8 + 64) = a4;
      uint64_t v14 = v8 + 72;
    }
    *(void *)(a1 + 208) = v14;
  }
  uint64_t v19 = (unint64_t *)&v18;
  *((unsigned char *)sub_1004AEFA8((uint64_t **)(a1 + 224), (unint64_t *)&v18, (uint64_t)&unk_1007BE9D0, &v19) + 40) = 0;
  sub_10003AFB4((uint64_t)v16);
  sub_10003AFB4((uint64_t)v17);
  return 0;
}

void sub_10060689C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006068C0(uint64_t a1, unint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 136);
  uint64_t v4 = sub_1006092A8(*(void *)(a1 + 200), *(void *)(a1 + 208), a2);
  sub_100609260(a1 + 200, v4, *(void *)(a1 + 208));
  uint64_t v5 = *(void **)(a1 + 232);
  if (v5)
  {
    uint64_t v6 = a1 + 232;
    do
    {
      unint64_t v7 = v5[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        id v9 = v5;
      }
      else {
        id v9 = v5 + 1;
      }
      if (v8) {
        uint64_t v6 = (uint64_t)v5;
      }
      uint64_t v5 = (void *)*v9;
    }
    while (*v9);
    if (v6 != a1 + 232 && *(void *)(v6 + 32) <= a2)
    {
      if (*(unsigned char *)(v6 + 40)) {
        sub_100606558(a1, a2);
      }
      sub_10004D3B8((uint64_t **)(a1 + 224), (uint64_t *)v6);
      operator delete((void *)v6);
    }
  }
  sub_10003AFB4((uint64_t)v11);
  return 0;
}

void sub_10060699C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006069B4(uint64_t a1, unint64_t a2)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 8);
  uint64_t v4 = *(void **)(a1 + 232);
  if (!v4) {
    goto LABEL_12;
  }
  uint64_t v5 = a1 + 232;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      BOOL v8 = v4;
    }
    else {
      BOOL v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    uint64_t v4 = (void *)*v8;
  }
  while (*v8);
  if (v5 != a1 + 232 && *(void *)(v5 + 32) <= a2)
  {
    if (*(unsigned char *)(v5 + 40))
    {
      uint64_t v9 = 160;
    }
    else
    {
      *(unsigned char *)(v5 + 40) = 1;
      if (!*(unsigned char *)(a1 + 72))
      {
        *(unsigned char *)(a1 + 72) = 1;
        *(void *)(a1 + 80) = 0;
      }
      sub_10003AFE8((uint64_t)v11);
      sub_100606AA4(a1, 0, 0, 0, a2);
      uint64_t v9 = 0;
    }
  }
  else
  {
LABEL_12:
    uint64_t v9 = 7;
  }
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

void sub_100606A90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100606AA4(uint64_t a1, unsigned int a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a2 > 3) {
    uint64_t v9 = "unknown";
  }
  else {
    uint64_t v9 = off_1009BAEE8[a2];
  }
  long long v10 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Sending '%{public}s' event with result %d", buf, 0x12u);
  }
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 136);
  uint64_t v11 = *(void *)(a1 + 200);
  uint64_t v12 = *(void *)(a1 + 208);
  if (v11 == v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785F64();
    }
    uint64_t v16 = 106;
  }
  else
  {
    memset(buf, 0, sizeof(buf));
    sub_100609684((char *)buf, v11, v12, 0x8E38E38E38E38E39 * ((v12 - v11) >> 3));
    sub_10003AFE8((uint64_t)v18);
    long long v13 = *(unint64_t **)buf;
    if (*(void *)buf != *(void *)&buf[8])
    {
      do
      {
        if (v13[1] && (!a5 || *v13 == a5))
        {
          if (a3)
          {
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009BAE88);
            }
            unint64_t v14 = sub_1004A93A0((uint64_t)off_1009F7EF8, *v13, a3);
          }
          else
          {
            unint64_t v14 = 4294901761;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009BAEA8);
          }
          if (sub_1000181D0(qword_1009F8160, *v13) && v14)
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009BAEC8);
            }
            operator new();
          }
          sub_10003AF00((uint64_t)v18);
          uint64_t v15 = sub_1006092A8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v13);
          sub_100609260(a1 + 200, v15, *(void *)(a1 + 208));
          sub_10003AFE8((uint64_t)v18);
        }
        v13 += 9;
      }
      while (v13 != *(unint64_t **)&buf[8]);
      long long v13 = *(unint64_t **)buf;
    }
    if (v13)
    {
      *(void *)&uint8_t buf[8] = v13;
      operator delete(v13);
    }
    uint64_t v16 = 0;
  }
  sub_10003AFB4((uint64_t)v18);
  return v16;
}

void sub_100606DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100606E08(uint64_t a1, int a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 8);
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (v4)
    {
      *(void *)(a1 + 80) = 0;
      sub_10003AFE8((uint64_t)v9);
      uint64_t v5 = sub_100606AA4(a1, 3u, v4, a2, 0);
    }
    else
    {
      uint64_t v5 = 0;
    }
  }
  else
  {
    unint64_t v6 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pairing agent is not started - ignoring pairing attempt", v8, 2u);
    }
    uint64_t v5 = 162;
  }
  sub_10003AFB4((uint64_t)v9);
  return v5;
}

void sub_100606EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100606EF8(uint64_t a1, uint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 8);
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v4 = *(void *)(a1 + 80);
    if (v4) {
      BOOL v5 = v4 == a2;
    }
    else {
      BOOL v5 = 1;
    }
    if (!v5)
    {
      sub_10003AFE8((uint64_t)v13);
      unint64_t v6 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(*(void *)(a1 + 80), __p);
        if (v12 >= 0) {
          BOOL v7 = __p;
        }
        else {
          BOOL v7 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v15 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pairing already in progress for device %{public}s", buf, 0xCu);
        if (v12 < 0) {
          operator delete(__p[0]);
        }
      }
      sub_100606E08(a1, 161);
      sub_10003AF00((uint64_t)v13);
    }
    *(void *)(a1 + 80) = a2;
    sub_10003AFE8((uint64_t)v13);
    uint64_t v8 = sub_100606AA4(a1, 2u, a2, 0, 0);
  }
  else
  {
    uint64_t v9 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Pairing agent is not started - ignoring pairing attempt", (uint8_t *)__p, 2u);
    }
    uint64_t v8 = 162;
  }
  sub_10003AFB4((uint64_t)v13);
  return v8;
}

void sub_10060709C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006070BC(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  if (!*(unsigned char *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785F98();
    }
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (!v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785FCC();
    }
LABEL_8:
    uint64_t v3 = 162;
    goto LABEL_9;
  }
  sub_10003AFE8((uint64_t)v5);
  uint64_t v3 = sub_100607198(a1, v2);
LABEL_9:
  sub_10003AFB4((uint64_t)v5);
  return v3;
}

void sub_100607184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100607198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    BOOL v5 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'pincode request' pairing event for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p);
    }
  }
  *(_OWORD *)long long buf = 0uLL;
  sub_10003AED0((uint64_t)buf, a1 + 136);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v7 = *(void *)(a1 + 208);
  if (v6 == v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785F64();
    }
    uint64_t v11 = 106;
  }
  else
  {
    std::string __p = 0;
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_100609684((char *)&__p, v6, v7, 0x8E38E38E38E38E39 * ((v7 - v6) >> 3));
    sub_10003AFE8((uint64_t)buf);
    uint64_t v8 = (unint64_t *)__p;
    if (__p != v14)
    {
      do
      {
        if (v8[2])
        {
          if (a2)
          {
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009BAE88);
            }
            unint64_t v9 = sub_1004A93A0((uint64_t)off_1009F7EF8, *v8, a2);
          }
          else
          {
            unint64_t v9 = 4294901761;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009BAEA8);
          }
          if (sub_1000181D0(qword_1009F8160, *v8) && v9)
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009BAEC8);
            }
            operator new();
          }
          sub_10003AF00((uint64_t)buf);
          uint64_t v10 = sub_1006092A8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v8);
          sub_100609260(a1 + 200, v10, *(void *)(a1 + 208));
          sub_10003AFE8((uint64_t)buf);
        }
        v8 += 9;
      }
      while (v8 != v14);
      uint64_t v8 = (unint64_t *)__p;
    }
    if (v8)
    {
      unint64_t v14 = v8;
      operator delete(v8);
    }
    uint64_t v11 = 0;
  }
  sub_10003AFB4((uint64_t)buf);
  return v11;
}

void sub_1006074AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1006074E8(uint64_t a1, uint64_t a2, int a3)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 8);
  if (!*(unsigned char *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785F98();
    }
    goto LABEL_8;
  }
  uint64_t v6 = *(void *)(a1 + 80);
  if (!v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785FCC();
    }
LABEL_8:
    uint64_t v7 = 162;
    goto LABEL_9;
  }
  sub_10003AFE8((uint64_t)v9);
  uint64_t v7 = sub_1006075D8(a1, v6, a2, a3);
LABEL_9:
  sub_10003AFB4((uint64_t)v9);
  return v7;
}

void sub_1006075C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006075D8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v7 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = a4 ? "numeric comparison" : "user confirmation";
    sub_100474E18(a2, &__p);
    unint64_t v9 = v19 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v8;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Sending '%{public}s request' pairing event for device %{public}s", buf, 0x16u);
    if (SHIBYTE(v19) < 0) {
      operator delete(__p);
    }
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 136);
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 208);
  if (v10 == v11)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785F64();
    }
    uint64_t v15 = 106;
  }
  else
  {
    std::string __p = 0;
    unint64_t v18 = 0;
    uint64_t v19 = 0;
    sub_100609684((char *)&__p, v10, v11, 0x8E38E38E38E38E39 * ((v11 - v10) >> 3));
    sub_10003AFE8((uint64_t)buf);
    char v12 = (unint64_t *)__p;
    if (__p != v18)
    {
      do
      {
        if (v12[2])
        {
          if (a2)
          {
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009BAE88);
            }
            unint64_t v13 = sub_1004A93A0((uint64_t)off_1009F7EF8, *v12, a2);
          }
          else
          {
            unint64_t v13 = 4294901761;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009BAEA8);
          }
          if (sub_1000181D0(qword_1009F8160, *v12) && v13)
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009BAEC8);
            }
            operator new();
          }
          sub_10003AF00((uint64_t)buf);
          uint64_t v14 = sub_1006092A8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v12);
          sub_100609260(a1 + 200, v14, *(void *)(a1 + 208));
          sub_10003AFE8((uint64_t)buf);
        }
        v12 += 9;
      }
      while (v12 != v18);
      char v12 = (unint64_t *)__p;
    }
    if (v12)
    {
      unint64_t v18 = v12;
      operator delete(v12);
    }
    uint64_t v15 = 0;
  }
  sub_10003AFB4((uint64_t)buf);
  return v15;
}

void sub_10060791C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100607958(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  if (!*(unsigned char *)(a1 + 72))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785F98();
    }
    goto LABEL_8;
  }
  uint64_t v2 = *(void *)(a1 + 80);
  if (!v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785FCC();
    }
LABEL_8:
    uint64_t v3 = 162;
    goto LABEL_9;
  }
  sub_10003AFE8((uint64_t)v5);
  uint64_t v3 = sub_100607A40(a1, v2);
LABEL_9:
  sub_10003AFB4((uint64_t)v5);
  return v3;
}

void sub_100607A2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100607A40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    BOOL v5 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'passkey display request' pairing event for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p);
    }
  }
  *(_OWORD *)long long buf = 0uLL;
  sub_10003AED0((uint64_t)buf, a1 + 136);
  uint64_t v6 = *(void *)(a1 + 200);
  uint64_t v7 = *(void *)(a1 + 208);
  if (v6 == v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785F64();
    }
    uint64_t v11 = 106;
  }
  else
  {
    std::string __p = 0;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    sub_100609684((char *)&__p, v6, v7, 0x8E38E38E38E38E39 * ((v7 - v6) >> 3));
    sub_10003AFE8((uint64_t)buf);
    uint64_t v8 = (unint64_t *)__p;
    if (__p != v14)
    {
      do
      {
        if (v8[2])
        {
          if (a2)
          {
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009BAE88);
            }
            unint64_t v9 = sub_1004A93A0((uint64_t)off_1009F7EF8, *v8, a2);
          }
          else
          {
            unint64_t v9 = 4294901761;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009BAEA8);
          }
          if (sub_1000181D0(qword_1009F8160, *v8) && v9)
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009BAEC8);
            }
            operator new();
          }
          sub_10003AF00((uint64_t)buf);
          uint64_t v10 = sub_1006092A8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v8);
          sub_100609260(a1 + 200, v10, *(void *)(a1 + 208));
          sub_10003AFE8((uint64_t)buf);
        }
        v8 += 9;
      }
      while (v8 != v14);
      uint64_t v8 = (unint64_t *)__p;
    }
    if (v8)
    {
      uint64_t v14 = v8;
      operator delete(v8);
    }
    uint64_t v11 = 0;
  }
  sub_10003AFB4((uint64_t)buf);
  return v11;
}

void sub_100607D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100607D90(uint64_t a1, unsigned __int8 *a2)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 8);
  uint64_t v4 = *(void **)(a1 + 96);
  if (v4)
  {
    BOOL v5 = (uint64_t *)(a1 + 96);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= (unint64_t)a2;
      if (v6 >= (unint64_t)a2) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (v7) {
        BOOL v5 = v4;
      }
      uint64_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 != (uint64_t *)(a1 + 96) && v5[4] <= (unint64_t)a2)
    {
      uint64_t v9 = v5[5];
      if (v9)
      {
        nullsub_95(v9);
        operator delete();
      }
      sub_10004D3B8((uint64_t **)(a1 + 88), v5);
      operator delete(v5);
    }
  }
  char v12 = *(void **)(a1 + 120);
  uint64_t v11 = (uint64_t *)(a1 + 120);
  uint64_t v10 = v12;
  if (v12)
  {
    unint64_t v13 = (uint64_t **)(v11 - 1);
    uint64_t v14 = v11;
    do
    {
      unint64_t v15 = v10[4];
      BOOL v16 = v15 >= (unint64_t)a2;
      if (v15 >= (unint64_t)a2) {
        uint64_t v17 = v10;
      }
      else {
        uint64_t v17 = v10 + 1;
      }
      if (v16) {
        uint64_t v14 = v10;
      }
      uint64_t v10 = (void *)*v17;
    }
    while (*v17);
    if (v14 != v11 && v14[4] <= (unint64_t)a2)
    {
      uint64_t v18 = v14[5];
      if (v18)
      {
        sub_100608FD8(v14[5], *(void **)(v18 + 8));
        operator delete();
      }
      sub_10004D3B8(v13, v14);
      operator delete(v14);
    }
  }
  sub_10003AFE8((uint64_t)v21);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BAE68);
  }
  uint64_t v19 = sub_100611000((uint64_t)off_1009F8760, a2);
  sub_10003AFB4((uint64_t)v21);
  return v19;
}

void sub_100607F1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100607F30(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72)) {
    return 0;
  }
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BAE68);
  }
  uint64_t v1 = off_1009F8760;

  return sub_10060F428((uint64_t)v1);
}

void sub_100607F98(uint64_t a1, unint64_t a2)
{
  v12[1] = 0;
  void v12[2] = a2;
  v12[0] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 8);
  unint64_t v6 = *(void **)(a1 + 96);
  BOOL v5 = (uint64_t *)(a1 + 96);
  uint64_t v4 = v6;
  if (v6)
  {
    BOOL v7 = v5;
    do
    {
      unint64_t v8 = v4[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = v4;
      }
      else {
        uint64_t v10 = v4 + 1;
      }
      if (v9) {
        BOOL v7 = v4;
      }
      uint64_t v4 = (void *)*v10;
    }
    while (*v10);
    if (v7 != v5 && v7[4] <= a2)
    {
      uint64_t v11 = v7[5];
      if (v11)
      {
        nullsub_95(v11);
        operator delete();
      }
      sub_10004D3B8((uint64_t **)v5 - 1, v7);
      operator delete(v7);
    }
  }
  operator new();
}

void sub_100608100()
{
}

uint64_t sub_100608134(uint64_t a1, unint64_t a2, __n128 *a3)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 8);
  unint64_t v8 = *(void **)(a1 + 96);
  BOOL v7 = (void *)(a1 + 96);
  unint64_t v6 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  BOOL v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      char v12 = v6;
    }
    else {
      char v12 = v6 + 1;
    }
    if (v11) {
      BOOL v9 = v6;
    }
    unint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 != v7 && v9[4] <= a2)
  {
    sub_100616288(a3, (__n128 *)v9[5]);
    uint64_t v13 = 0;
  }
  else
  {
LABEL_12:
    uint64_t v13 = 1;
  }
  sub_10003AFB4((uint64_t)v15);
  return v13;
}

void sub_1006081DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006081F0(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BAE68);
  }
  BOOL v5 = off_1009F8760;

  return sub_10060FAF0((uint64_t)v5, a2, a3);
}

uint64_t sub_10060825C(uint64_t a1, unint64_t a2, uint64_t a3)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 8);
  unint64_t v8 = *(void **)(a1 + 120);
  BOOL v7 = (void *)(a1 + 120);
  unint64_t v6 = v8;
  if (!v8) {
    goto LABEL_14;
  }
  BOOL v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      char v12 = v6;
    }
    else {
      char v12 = v6 + 1;
    }
    if (v11) {
      BOOL v9 = v6;
    }
    unint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v7 || v9[4] > a2 || (uint64_t v13 = v9[5], v14 = sub_1006093E8(v13, a3), (void *)(v13 + 8) == v14)) {
LABEL_14:
  }
    uint64_t v15 = 0;
  else {
    uint64_t v15 = *((unsigned int *)v14 + 12);
  }
  sub_10003AFB4((uint64_t)v17);
  return v15;
}

void sub_100608314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100608328(uint64_t a1, unint64_t a2, __n128 *a3)
{
  v16[1] = 0;
  void v16[2] = a2;
  v16[0] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 8);
  unint64_t v8 = *(void **)(a1 + 120);
  BOOL v7 = (void *)(a1 + 120);
  unint64_t v6 = v8;
  if (!v8) {
    goto LABEL_12;
  }
  BOOL v9 = v7;
  do
  {
    unint64_t v10 = v6[4];
    BOOL v11 = v10 >= a2;
    if (v10 >= a2) {
      char v12 = v6;
    }
    else {
      char v12 = v6 + 1;
    }
    if (v11) {
      BOOL v9 = v6;
    }
    unint64_t v6 = (void *)*v12;
  }
  while (*v12);
  if (v9 == v7 || v9[4] > a2) {
LABEL_12:
  }
    operator new();
  uint64_t v15 = (uint64_t **)v9[5];
  uint64_t v17 = a3;
  uint64_t v13 = sub_100609464(v15, (uint64_t)a3, (uint64_t)&unk_1007BE9D0, &v17);
  ++*((_DWORD *)v13 + 12);
  return sub_10003AFB4((uint64_t)v16);
}

void sub_100608440(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100608454(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v9 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 68159490;
    *(_DWORD *)&uint8_t buf[4] = 16;
    LOWORD(v19) = 2096;
    *(void *)((char *)&v19 + 2) = a2;
    WORD5(v19) = 1040;
    HIDWORD(v19) = 16;
    __int16 v20 = 2096;
    uint64_t v21 = a3;
    __int16 v22 = 1040;
    int v23 = 16;
    __int16 v24 = 2096;
    uint64_t v25 = a4;
    __int16 v26 = 1040;
    int v27 = 16;
    __int16 v28 = 2096;
    uint64_t v29 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Sending 'local OOB Data Ready' event C192:{private, mask.hash}%.16P R192:{private, mask.hash}%.16P C256:{private, mask.hash}%.16P R256:{private, mask.hash}%.16P", buf, 0x42u);
  }
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 136);
  uint64_t v10 = *(void *)(a1 + 200);
  uint64_t v11 = *(void *)(a1 + 208);
  if (v10 == v11)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100785F64();
    }
    uint64_t v14 = 106;
  }
  else
  {
    *(void *)long long buf = 0;
    long long v19 = 0uLL;
    sub_100609684((char *)buf, v10, v11, 0x8E38E38E38E38E39 * ((v11 - v10) >> 3));
    sub_10003AFE8((uint64_t)v17);
    char v12 = *(unint64_t **)buf;
    if (*(void *)buf != (void)v19)
    {
      do
      {
        if (v12[6])
        {
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009BAEA8);
          }
          if (sub_1000181D0(qword_1009F8160, *v12))
          {
            if (qword_1009FB160 != -1) {
              dispatch_once(&qword_1009FB160, &stru_1009BAEC8);
            }
            operator new();
          }
          sub_10003AF00((uint64_t)v17);
          uint64_t v13 = sub_1006092A8(*(void *)(a1 + 200), *(void *)(a1 + 208), *v12);
          sub_100609260(a1 + 200, v13, *(void *)(a1 + 208));
          sub_10003AFE8((uint64_t)v17);
        }
        v12 += 9;
      }
      while (v12 != (unint64_t *)v19);
      char v12 = *(unint64_t **)buf;
    }
    if (v12)
    {
      *(void *)&long long v19 = v12;
      operator delete(v12);
    }
    uint64_t v14 = 0;
  }
  sub_10003AFB4((uint64_t)v17);
  return v14;
}

void sub_10060874C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void *sub_100608784(void *result)
{
  *__n128 result = off_1009BAD38;
  return result;
}

void sub_1006087A4(void *a1)
{
  *a1 = off_1009BAD38;
  operator delete();
}

uint64_t sub_1006087D4(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_100608844(a1, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t result = sub_100608844(a1, *(void *)(a1 + 56));
    if (result) {
      return sub_10045821C(a2, a3, *(void *)(a1 + 40), *(unsigned int *)(a1 + 48), *(void *)(a1 + 56), *(unsigned int *)(a1 + 64), a4);
    }
  }
  return result;
}

BOOL sub_100608844(uint64_t a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BAEA8);
  }
  uint64_t v3 = qword_1009F8160;

  return sub_10055363C(v3, a2);
}

void *sub_1006088A8(void *result)
{
  *uint64_t result = off_1009BAD78;
  return result;
}

void sub_1006088C8(void *a1)
{
  *a1 = off_1009BAD78;
  operator delete();
}

uint64_t sub_1006088F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_100608844(a1, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t result = sub_100608844(a1, *(void *)(a1 + 48));
    if (result) {
      return sub_10046A7A0(a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned __int8 *)(a1 + 56), a4);
    }
  }
  return result;
}

void *sub_100608960(void *result)
{
  *uint64_t result = off_1009BADB8;
  return result;
}

void sub_100608980(void *a1)
{
  *a1 = off_1009BADB8;
  operator delete();
}

uint64_t sub_1006089B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_100608844(a1, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t result = sub_100608844(a1, *(void *)(a1 + 48));
    if (result) {
      return sub_10045821C(a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), -*(char *)(a1 + 60), a4);
    }
  }
  return result;
}

void *sub_100608A20(void *result)
{
  *uint64_t result = off_1009BADF8;
  return result;
}

void sub_100608A40(void *a1)
{
  *a1 = off_1009BADF8;
  operator delete();
}

uint64_t sub_100608A70(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_100608844(a1, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t result = sub_100608844(a1, *(void *)(a1 + 48));
    if (result) {
      return sub_10046A7A0(a2, a3, *(void *)(a1 + 40), *(void *)(a1 + 48), *(unsigned int *)(a1 + 56), a4);
    }
  }
  return result;
}

void *sub_100608AD8(void *result)
{
  *uint64_t result = &off_1009BAE38;
  return result;
}

void sub_100608AF8(void *a1)
{
  *a1 = &off_1009BAE38;
  operator delete();
}

uint64_t sub_100608B28(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t), uint64_t a4)
{
  uint64_t result = sub_100608844(a1, *(void *)(a1 + 40));
  if (result) {
    return sub_100458288(a2, a3, *(void *)(a1 + 40), a1 + 48, a1 + 64, a1 + 80, a1 + 96, a4);
  }
  return result;
}

void sub_100608B8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  uint64_t v4 = (size_t *)(a2 + 8);
  sub_10004191C((void *)a2, "");
  if (*(char *)(a2 + 23) >= 0) {
    size_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v5 = *v4;
  }
  memset(&v14, 0, sizeof(v14));
  unint64_t v6 = &v14;
  sub_1002EA240((uint64_t)&v14, v5 + 12);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    unint64_t v6 = (std::string *)v14.__r_.__value_.__r.__words[0];
  }
  if (v5)
  {
    if (*(char *)(a2 + 23) >= 0) {
      BOOL v7 = (const void *)a2;
    }
    else {
      BOOL v7 = *(const void **)a2;
    }
    memmove(v6, v7, v5);
  }
  strcpy((char *)v6 + v5, "\t\tfStarted: ");
  if (*(unsigned char *)(a1 + 72)) {
    unint64_t v8 = "YES";
  }
  else {
    unint64_t v8 = "NO";
  }
  BOOL v9 = std::string::append(&v14, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v15.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v15.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = std::string::append(&v15, "\n");
  std::string::size_type v12 = v11->__r_.__value_.__r.__words[0];
  v16[0] = v11->__r_.__value_.__l.__size_;
  *(void *)((char *)v16 + 7) = *(std::string::size_type *)((char *)&v11->__r_.__value_.__r.__words[1] + 7);
  char v13 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v12;
  *uint64_t v4 = v16[0];
  *(void *)(a2 + 15) = *(void *)((char *)v16 + 7);
  *(unsigned char *)(a2 + 23) = v13;
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
}

void sub_100608D48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100608D94(unint64_t *a1)
{
  uint64_t result = sub_100608844((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    unint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_100608E08(unint64_t *a1)
{
  uint64_t result = sub_100608844((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    unint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_100608E7C(unint64_t *a1)
{
  uint64_t result = sub_100608844((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    unint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_100608EF0(unint64_t *a1)
{
  uint64_t result = sub_100608844((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    unint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

uint64_t sub_100608F64(unint64_t *a1)
{
  uint64_t result = sub_100608844((uint64_t)a1, a1[2]);
  if (result)
  {
    unint64_t v3 = a1[2];
    unint64_t v4 = a1[3];
    unint64_t v5 = a1[4];
    unint64_t v6 = *(uint64_t (**)(unint64_t *, unint64_t, unint64_t, unint64_t))(*a1 + 40);
    return v6(a1, v3, v4, v5);
  }
  return result;
}

void sub_100608FD8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100608FD8(a1, *a2);
    sub_100608FD8(a1, a2[1]);
    nullsub_95((char *)a2 + 28);
    operator delete(a2);
  }
}

uint64_t sub_100609034(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0x8E38E38E38E38E39 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x38E38E38E38E38ELL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x8E38E38E38E38E39 * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x1C71C71C71C71C7) {
    unint64_t v10 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v22 = v7;
  uint64_t v11 = (char *)sub_1005E418C(v7, v10);
  std::string::size_type v12 = &v11[72 * v3];
  std::string __p = v11;
  long long v19 = v12;
  uint64_t v21 = &v11[72 * v13];
  *(void *)std::string::size_type v12 = *(void *)a2;
  long long v14 = *(_OWORD *)(a2 + 8);
  long long v15 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(v12 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(v12 + 24) = v15;
  *(_OWORD *)(v12 + 8) = v14;
  *((_DWORD *)v12 + 14) = *(_DWORD *)(a2 + 56);
  *((void *)v12 + 8) = *(void *)(a2 + 64);
  __int16 v20 = v12 + 72;
  sub_1006091E0(a1, &__p);
  uint64_t v16 = a1[1];
  if (v20 != v19) {
    __int16 v20 = &v19[(v20 - v19 - 72) % 0x48uLL];
  }
  if (__p) {
    operator delete(__p);
  }
  return v16;
}

void sub_10060918C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1006091E0(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  uint64_t v4 = a2[1];
  while (v2 != v3)
  {
    uint64_t v5 = *(void *)(v2 - 72);
    v2 -= 72;
    *(void *)(v4 - 72) = v5;
    v4 -= 72;
    long long v6 = *(_OWORD *)(v2 + 8);
    long long v7 = *(_OWORD *)(v2 + 24);
    *(_OWORD *)(v4 + 40) = *(_OWORD *)(v2 + 40);
    *(_OWORD *)(v4 + 24) = v7;
    *(_OWORD *)(v4 + 8) = v6;
    *(_DWORD *)(v4 + 56) = *(_DWORD *)(v2 + 56);
    *(void *)(v4 + 64) = *(void *)(v2 + 64);
  }
  a2[1] = v4;
  uint64_t v8 = *result;
  *uint64_t result = v4;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100609260(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_100609324(a3, *(void *)(a1 + 8), a2);
    *(void *)(a1 + 8) = v5;
  }
  return a2;
}

uint64_t sub_1006092A8(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    if (result == a2) {
      return a2;
    }
    if (*(void *)result == a3) {
      break;
    }
    result += 72;
  }
  if (result != a2)
  {
    for (uint64_t i = result + 72; i != a2; i += 72)
    {
      if (*(void *)i != a3)
      {
        *(void *)uint64_t result = *(void *)i;
        long long v4 = *(_OWORD *)(i + 8);
        long long v5 = *(_OWORD *)(i + 24);
        *(_OWORD *)(result + 40) = *(_OWORD *)(i + 40);
        *(_OWORD *)(result + 24) = v5;
        *(_OWORD *)(result + 8) = v4;
        *(_DWORD *)(result + 56) = *(_DWORD *)(i + 56);
        *(void *)(result + 64) = *(void *)(i + 64);
        result += 72;
      }
    }
  }
  return result;
}

uint64_t sub_100609324(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return a1;
  }
  do
  {
    *(void *)a3 = *(void *)a1;
    long long v3 = *(_OWORD *)(a1 + 8);
    long long v4 = *(_OWORD *)(a1 + 24);
    *(_OWORD *)(a3 + 40) = *(_OWORD *)(a1 + 40);
    *(_OWORD *)(a3 + 24) = v4;
    *(_OWORD *)(a3 + 8) = v3;
    *(_DWORD *)(a3 + 56) = *(_DWORD *)(a1 + 56);
    *(void *)(a3 + 64) = *(void *)(a1 + 64);
    a3 += 72;
    a1 += 72;
  }
  while (a1 != a2);
  return a2;
}

void sub_100609380(id a1)
{
}

void sub_1006093C4()
{
}

void *sub_1006093E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)(a1 + 8);
  long long v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  long long v5 = (void *)(a1 + 8);
  do
  {
    int v6 = sub_1006162CC((uint64_t)v3 + 28, a2);
    long long v7 = v3 + 1;
    if (!v6)
    {
      long long v7 = v3;
      long long v5 = v3;
    }
    long long v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2 || sub_1006162CC(a2, (uint64_t)v5 + 28)) {
    return v2;
  }
  return v5;
}

char *sub_100609464(uint64_t **a1, uint64_t a2, uint64_t a3, __n128 **a4)
{
  uint64_t v11 = 0;
  int v6 = (char **)sub_10060951C((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1006095B0((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, (uint64_t *)v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_10060962C(v10, 0);
  }
  return v7;
}

void *sub_10060951C(uint64_t a1, void *a2, uint64_t a3)
{
  long long v5 = (void *)(a1 + 8);
  long long v4 = *(void **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        long long v7 = v4;
        uint64_t v8 = (uint64_t)v4 + 28;
        if (!sub_1006162CC(a3, (uint64_t)v4 + 28)) {
          break;
        }
        long long v4 = (void *)*v7;
        long long v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_1006162CC(v8, a3)) {
        break;
      }
      long long v5 = v7 + 1;
      long long v4 = (void *)v7[1];
    }
    while (v4);
  }
  else
  {
    long long v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void sub_1006095B0(uint64_t a1@<X0>, __n128 **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = (char *)operator new(0x38uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  sub_100616288((__n128 *)(v6 + 28), *a2);
  *((_DWORD *)v6 + 12) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_100609614(_Unwind_Exception *a1)
{
  sub_10060962C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_10060962C(char **a1, char *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      nullsub_95(v2 + 28);
    }
    operator delete(v2);
  }
}

char *sub_100609684(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    uint64_t result = sub_100609710(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      *(void *)uint64_t v7 = *(void *)a2;
      long long v8 = *(_OWORD *)(a2 + 8);
      long long v9 = *(_OWORD *)(a2 + 24);
      *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 40);
      *(_OWORD *)(v7 + 24) = v9;
      *(_OWORD *)(v7 + 8) = v8;
      *(_DWORD *)(v7 + 56) = *(_DWORD *)(a2 + 56);
      *(void *)(v7 + 64) = *(void *)(a2 + 64);
      v7 += 72;
      a2 += 72;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

char *sub_100609710(void *a1, unint64_t a2)
{
  if (a2 >= 0x38E38E38E38E38FLL) {
    abort();
  }
  uint64_t result = (char *)sub_1005E418C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[72 * v4];
  return result;
}

void sub_100609764(id a1)
{
}

void sub_1006097A8()
{
}

void sub_1006097CC(id a1)
{
}

void sub_100609810()
{
}

void sub_100609834(id a1)
{
}

void sub_100609878()
{
}

uint64_t sub_10060989C(uint64_t a1)
{
  *(void *)a1 = off_1009BAF18;
  *(void *)(a1 + 8) = off_1009BAFA0;
  *(void *)(a1 + 16) = off_1009BAFC0;
  *(void *)(a1 + 24) = off_1009BAFF8;
  *(void *)(a1 + 32) = off_1009BB020;
  *(void *)(a1 + 40) = 0;
  sub_100052DA8(a1 + 48);
  *(void *)(a1 + 112) = 0;
  sub_100052DA8(a1 + 120);
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  sub_100052DA8(a1 + 208);
  *(unsigned char *)(a1 + 272) = 0;
  sub_100052DA8(a1 + 280);
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 408) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = &off_1009BB1B0;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(_DWORD *)(a1 + 400) = 0;
  sub_100052DA8(a1 + 416);
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 504) = a1 + 512;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = 0;
  sub_100052DA8(a1 + 536);
  *(void *)(a1 + 632) = 0;
  *(_OWORD *)(a1 + 600) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  return a1;
}

void sub_100609A34(_Unwind_Exception *a1)
{
  uint64_t v11 = v9;
  std::string::size_type v12 = v6;
  sub_1000486F0(v11, *v10);
  long long v14 = *v12;
  if (*v12)
  {
    v1[61] = v14;
    operator delete(v14);
  }
  sub_100052DA4(v7);
  long long v15 = (void *)v1[43];
  if (v15)
  {
    v1[44] = v15;
    operator delete(v15);
  }
  sub_100052DA4(v5);
  sub_100052DA4(v4);
  uint64_t v16 = *v8;
  if (*v8)
  {
    v1[24] = v16;
    operator delete(v16);
  }
  sub_100052DA4(v3);
  sub_100052DA4(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100609AD8(uint64_t a1)
{
  *(void *)a1 = off_1009BAF18;
  *(void *)(a1 + 8) = off_1009BAFA0;
  *(void *)(a1 + 16) = off_1009BAFC0;
  *(void *)(a1 + 24) = off_1009BAFF8;
  *(void *)(a1 + 32) = off_1009BB020;
  uint64_t v2 = *(void **)(a1 + 608);
  if (v2)
  {
    *(void *)(a1 + 616) = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 536);
  sub_1000486F0(a1 + 504, *(void **)(a1 + 512));
  uint64_t v3 = *(void **)(a1 + 480);
  if (v3)
  {
    *(void *)(a1 + 488) = v3;
    operator delete(v3);
  }
  sub_100052DA4(a1 + 416);
  uint64_t v4 = *(void **)(a1 + 344);
  if (v4)
  {
    *(void *)(a1 + 352) = v4;
    operator delete(v4);
  }
  sub_100052DA4(a1 + 280);
  sub_100052DA4(a1 + 208);
  uint64_t v5 = *(void **)(a1 + 184);
  if (v5)
  {
    *(void *)(a1 + 192) = v5;
    operator delete(v5);
  }
  sub_100052DA4(a1 + 120);
  sub_100052DA4(a1 + 48);
  return a1;
}

uint64_t sub_100609C18(uint64_t a1)
{
  return sub_100609AD8(a1 - 16);
}

void sub_100609C20(uint64_t a1)
{
  sub_100609AD8(a1);

  operator delete();
}

void sub_100609C58(uint64_t a1)
{
  sub_100609AD8(a1 - 16);

  operator delete();
}

void sub_100609C94(uint64_t a1, int *a2, uint64_t a3, int a4, _OWORD *a5, char a6)
{
  std::string::size_type v12 = malloc_type_malloc(0x10uLL, 0xD94A48C2uLL);
  int v16 = *a2;
  __int16 v17 = *((_WORD *)a2 + 2);
  *std::string::size_type v12 = *a5;
  uint64_t v13 = *(void *)(a1 + 40);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  _DWORD v14[2] = sub_100609D6C;
  v14[3] = &unk_1009BB040;
  int v15 = a4;
  char v18 = a6;
  v14[4] = v12;
  void v14[5] = a2;
  v14[6] = a3;
  sub_100013018(v13, v14);
}

unsigned char *sub_100609D6C(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB1E8);
  }
  *(_DWORD *)long long buf = *(_DWORD *)(a1 + 60);
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a1 + 64);
  uint64_t v2 = (unsigned __int8 *)sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  uint64_t v3 = qword_100A19EB8;
  if (v2)
  {
    if (!os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_15;
    }
    sub_100475F84((uint64_t)v2, (uint64_t)__p);
    if (v25 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    goto LABEL_12;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_FAULT, "Oh no, we have no device !", buf, 2u);
    uint64_t v3 = qword_100A19EB8;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void **)"UNKNOWN";
LABEL_12:
    int v5 = *(_DWORD *)(a1 + 56);
    uint64_t v6 = *(void *)(a1 + 32);
    int v7 = *(unsigned __int8 *)(a1 + 66);
    *(_DWORD *)long long buf = 136316419;
    *(void *)&uint8_t buf[4] = v4;
    __int16 v30 = 1024;
    int v31 = v5;
    __int16 v32 = 2160;
    uint64_t v33 = 1752392040;
    __int16 v34 = 1041;
    int v35 = 16;
    __int16 v36 = 2097;
    uint64_t v37 = v6;
    __int16 v38 = 1024;
    int v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Classic SMP pairing completed to %s with status %d IRK:%{private, mask.hash}.16P useH7=%d", buf, 0x32u);
    if (v2 && v25 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_15:
  if (!*(_DWORD *)(a1 + 56))
  {
    long long v28 = 0uLL;
    __n128 v26 = 0uLL;
    int v27 = 0;
    sub_100600E3C((uint64_t)&v26);
    if (qword_1009F8778 != -1) {
      dispatch_once(&qword_1009F8778, &stru_1009BB228);
    }
    if (sub_100618630((uint64_t)off_1009F8770, v2, &v26))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
        sub_100786068();
      }
    }
    else
    {
      int v8 = sub_100600E8C((uint64_t)&v26);
      char v23 = 0;
      sub_10001B8E0(&v23);
      uint64_t v9 = nullsub_95(&v26);
      unsigned __int8 v10 = sub_100600EDC();
      LODWORD(v9) = sub_1001F05E0(v9, v10, &v28, *(unsigned __int8 *)(a1 + 66));
      sub_10001B910(&v23);
      if (v9)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
          sub_100786000();
        }
      }
      else
      {
        int v11 = v8;
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009BB248);
        }
        std::string::size_type v12 = *(unsigned __int8 **)(a1 + 40);
        uint64_t v21 = *(_OWORD **)(a1 + 32);
        uint64_t v22 = qword_1009F7EC8;
        uint64_t v13 = *v12;
        uint64_t v14 = v12[1];
        uint64_t v15 = v12[2];
        uint64_t v16 = v12[3];
        uint64_t v17 = v12[4];
        uint64_t v18 = v12[5];
        int v19 = *(unsigned __int8 *)(a1 + 66);
        sub_100475F84((uint64_t)v2, (uint64_t)buf);
        sub_100715204(v22, (v13 << 40) | (v14 << 32) | (v15 << 24) | (v16 << 16) | (v17 << 8) | v18, 1, &v28, v21, v19 != 0, v11 == 8, (uint64_t)buf);
        if (SBYTE3(v33) < 0) {
          operator delete(*(void **)buf);
        }
      }
      sub_10001B8AC(&v23);
    }
    nullsub_95(&v26);
  }
  free(*(void **)(a1 + 32));
  buf[0] = 0;
  sub_10001B8E0(buf);
  sub_100188C50(*(void *)(a1 + 48), 3);
  return sub_10001B8AC(buf);
}

void sub_10060A140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a15);
  nullsub_95(&a19);
  _Unwind_Resume(a1);
}

void sub_10060A1A0(uint64_t a1)
{
  v1[0] = 0;
  v1[1] = 0;
  sub_10003AED0((uint64_t)v1, a1 + 208);
  operator new();
}

void sub_10060A374()
{
}

uint64_t sub_10060A3AC(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BB2A8);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 32);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB228);
  }
  sub_1006191C4((uint64_t)off_1009F8770, a1 + 16);
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BB268);
  }
  sub_100052718(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009BB288);
  }
  sub_100052718((uint64_t)off_1009F87A0 + 24, a1 + 24);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 48);
  uint64_t v2 = *(unint64_t **)(a1 + 184);
  if (v2 != *(unint64_t **)(a1 + 192))
  {
    do
    {
      unint64_t v3 = *v2;
      uint64_t v4 = *(void *)(a1 + 112);
      if (v4) {
        sub_1006068C0(v4, *v2);
      }
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009BB268);
      }
      sub_1005536D8(qword_1009F8160, v3);
      ++v2;
    }
    while (v2 != *(unint64_t **)(a1 + 192));
    uint64_t v2 = *(unint64_t **)(a1 + 184);
  }
  *(void *)(a1 + 192) = v2;
  uint64_t v5 = *(void *)(a1 + 112);
  if (v5)
  {
    uint64_t v6 = qword_100A19EB8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT)
      || (LOWORD(v9[0]) = 0,
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "PairingManager is terminating. Deleting fAgent!", (uint8_t *)v9, 2u), (uint64_t v5 = *(void *)(a1 + 112)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
    *(void *)(a1 + 112) = 0;
  }
  sub_10003AFE8((uint64_t)v10);
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 208);
  *(unsigned char *)(a1 + 272) = 0;
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7)
  {
    sub_1004AFF30(v7);
    operator delete();
  }
  *(void *)(a1 + 40) = 0;
  sub_10003AFB4((uint64_t)v9);
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10060A62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060A648(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 120);
  if (a2)
  {
    uint64_t v3 = *(void *)(a2 + 40);
    if (v3)
    {
      uint64_t v4 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)uint64_t v6 = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Cancelling existing pairing timeout event", v6, 2u);
      }
      *(unsigned char *)(v3 + 9) = 1;
      *(void *)(a2 + 40) = 0;
    }
  }
  return sub_10003AFB4((uint64_t)v7);
}

uint64_t sub_10060A6EC(uint64_t a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 120);
  if (a2)
  {
    sub_10060A648(a1, a2);
    uint64_t v4 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Creating a new pairing timeout event", v6, 2u);
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_1007860D0();
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_10060A888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060A8A0(void *a1, unint64_t a2, void *a3, unint64_t *a4)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BB268);
  }
  uint64_t v8 = sub_100019C0C((void *)qword_1009F8160, a2);
  v31[0] = 0;
  v31[1] = 0;
  sub_10003AED0((uint64_t)v31, (uint64_t)(a1 + 6));
  if (!a1[14])
  {
    uint64_t v9 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "allocating fAgent", (uint8_t *)__p, 2u);
    }
    operator new();
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BB268);
  }
  unint64_t v10 = sub_1005532C4(qword_1009F8160, a2);
  *a4 = v10;
  if (v10)
  {
    *a3 = a1[14];
    unint64_t v11 = a1[25];
    std::string::size_type v12 = (unint64_t *)a1[24];
    if ((unint64_t)v12 >= v11)
    {
      uint64_t v15 = a1[23];
      uint64_t v16 = ((uint64_t)v12 - v15) >> 3;
      if ((unint64_t)(v16 + 1) >> 61) {
        abort();
      }
      uint64_t v17 = v11 - v15;
      uint64_t v18 = v17 >> 2;
      if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
        uint64_t v18 = v16 + 1;
      }
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v19 = v18;
      }
      if (v19) {
        __int16 v20 = (char *)sub_1000405F8((uint64_t)(a1 + 25), v19);
      }
      else {
        __int16 v20 = 0;
      }
      uint64_t v21 = (unint64_t *)&v20[8 * v16];
      uint64_t v22 = &v20[8 * v19];
      *uint64_t v21 = *a4;
      uint64_t v13 = v21 + 1;
      __int16 v24 = (char *)a1[23];
      char v23 = (char *)a1[24];
      if (v23 != v24)
      {
        do
        {
          unint64_t v25 = *((void *)v23 - 1);
          v23 -= 8;
          *--uint64_t v21 = v25;
        }
        while (v23 != v24);
        char v23 = (char *)a1[23];
      }
      a1[23] = v21;
      a1[24] = v13;
      a1[25] = v22;
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *std::string::size_type v12 = *a4;
      uint64_t v13 = v12 + 1;
    }
    a1[24] = v13;
    __n128 v26 = qword_100A19EB8;
    uint64_t v14 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      if (v8)
      {
        sub_10003AE4C(v8, (uint64_t)__p);
        if (v30 >= 0) {
          int v27 = __p;
        }
        else {
          int v27 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        uint64_t v33 = (const char *)v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Creating pairing agent for session %{public}s", buf, 0xCu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 136446210;
        uint64_t v33 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Creating pairing agent for session %{public}s", buf, 0xCu);
      }
      uint64_t v14 = 0;
    }
  }
  else
  {
    uint64_t v14 = 7;
  }
  sub_10003AFB4((uint64_t)v31);
  return v14;
}

void sub_10060ABAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060ABEC(void *a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BB268);
  }
  uint64_t v4 = sub_100019C0C((void *)qword_1009F8160, a2);
  uint64_t v5 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_10003AE4C(v4, (uint64_t)__p);
      if (v19 >= 0) {
        uint64_t v6 = __p;
      }
      else {
        uint64_t v6 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136446210;
      uint64_t v21 = (const char *)v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Destroying pairing agent for session %{public}s", buf, 0xCu);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v21 = "(NULL)";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Destroying pairing agent for session %{public}s", buf, 0xCu);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, (uint64_t)(a1 + 6));
  uint64_t v8 = a1[23];
  uint64_t v7 = (void *)a1[24];
  if ((void *)v8 != v7)
  {
    uint64_t v9 = -v8;
    while (*(void *)v8 != a2)
    {
      v8 += 8;
      v9 -= 8;
      if ((void *)v8 == v7) {
        goto LABEL_23;
      }
    }
    uint64_t v10 = a1[14];
    if (v10) {
      sub_1006068C0(v10, a2);
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009BB268);
    }
    sub_1005536D8(qword_1009F8160, a2);
    uint64_t v11 = -v9;
    std::string::size_type v12 = (const void *)(8 - v9);
    size_t v13 = a1[24] - (8 - v9);
    if (v13) {
      memmove((void *)v11, v12, v13);
    }
    uint64_t v7 = (void *)(v11 + v13);
    a1[24] = v11 + v13;
  }
LABEL_23:
  if (a1[14] && v7 == (void *)a1[23])
  {
    uint64_t v14 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
    {
      uint64_t v15 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        uint64_t v21 = "destroyAgent";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s - deleting fAgent as fHandleList size is 0", buf, 0xCu);
      }
    }
    uint64_t v16 = a1[14];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    a1[14] = 0;
  }
  sub_10003AFE8((uint64_t)__p);
  return sub_10003AFB4((uint64_t)__p);
}

void sub_10060AED8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060AEF8(void *a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, (uint64_t)(a1 + 6));
  for (uint64_t i = (void *)a1[23]; ; ++i)
  {
    if (i == (void *)a1[24])
    {
      uint64_t v5 = 0;
      goto LABEL_7;
    }
    if (*i == a2) {
      break;
    }
  }
  uint64_t v5 = a1[14];
LABEL_7:
  sub_10003AFB4((uint64_t)v7);
  return v5;
}

uint64_t sub_10060AF70(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 208);
  if (!*(unsigned char *)(a1 + 272))
  {
    sub_1004AF98C(*(void *)(a1 + 40), QOS_CLASS_USER_INITIATED);
    *(unsigned char *)(a1 + 272) = 1;
    *(void *)(a1 + 352) = *(void *)(a1 + 344);
    sub_10003AFE8((uint64_t)v4);
    char v3 = 0;
    sub_10001B8E0(&v3);
    sub_10025346C(1);
    sub_10001B910(&v3);
    sub_10001B8AC(&v3);
  }
  return sub_10003AFB4((uint64_t)v4);
}

void sub_10060B000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060B028(uint64_t a1)
{
  return sub_10060AF70(a1 - 32);
}

void sub_10060B030(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 528))
  {
    uint64_t v1 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Classic SMP Disabled", buf, 2u);
    }
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    int v2 = sub_10018C298((uint64_t (*)(void, void, void, void, void))sub_10060B358);
    sub_10001B910(__p);
    char v3 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Classic_SMPInit returned %d", buf, 8u);
    }
    sub_10001B8AC(__p);
  }
  char v15 = 0;
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "Pairing");
  sub_10004191C(__p, "DisableH7");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v4 + 72))(v4, buf, __p, &v15);
  if (v15) {
    int v6 = v5;
  }
  else {
    int v6 = 0;
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v6) {
      goto LABEL_19;
    }
  }
  else if (!v6)
  {
    goto LABEL_19;
  }
  uint64_t v7 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Warning: Disabling Classic SMP local H7 support!", buf, 2u);
  }
  sub_10018C8EC();
LABEL_19:
  char v12 = 0;
  uint64_t v8 = sub_100017768();
  sub_10004191C(buf, "Pairing");
  sub_10004191C(__p, "ForceReplyH7");
  int v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v8 + 72))(v8, buf, __p, &v12);
  if (v12) {
    int v10 = v9;
  }
  else {
    int v10 = 0;
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if (v17 < 0)
  {
    operator delete(*(void **)buf);
    if (!v10) {
      return;
    }
  }
  else if (!v10)
  {
    return;
  }
  uint64_t v11 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Warning: Forcing Classic SMP to reply with H7!", buf, 2u);
  }
  sub_10018C8FC();
}

void sub_10060B304(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_10060B358(uint64_t a1, int a2, _OWORD *a3, int a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB1E8);
  }
  *(_DWORD *)long long buf = *(_DWORD *)a1;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a1 + 4);
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  int v9 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    if (v8)
    {
      sub_100475F84(v8, (uint64_t)__p);
      if (v12 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136316419;
      *(void *)&uint8_t buf[4] = v10;
      __int16 v14 = 1024;
      int v15 = a2;
      __int16 v16 = 2160;
      uint64_t v17 = 1752392040;
      __int16 v18 = 1041;
      int v19 = 16;
      __int16 v20 = 2097;
      uint64_t v21 = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "_Classic_SMP_PairingComplete device:%s status %d IRK:%{private, mask.hash}.16P useH7=%d", buf, 0x32u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 136316419;
      *(void *)&uint8_t buf[4] = "UNKNOWN";
      __int16 v14 = 1024;
      int v15 = a2;
      __int16 v16 = 2160;
      uint64_t v17 = 1752392040;
      __int16 v18 = 1041;
      int v19 = 16;
      __int16 v20 = 2097;
      uint64_t v21 = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "_Classic_SMP_PairingComplete device:%s status %d IRK:%{private, mask.hash}.16P useH7=%d", buf, 0x32u);
    }
  }
  *(void *)long long buf = 0;
  sub_10017E2D4(a1, (uint64_t *)buf);
  sub_1001876F0(a1, 0);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB208);
  }
  sub_100609C94((uint64_t)off_1009F8760, (int *)a1, *(uint64_t *)buf, a2, a3, a4);
}

void sub_10060B5D0(uint64_t a1)
{
}

uint64_t sub_10060B5D8(uint64_t a1)
{
  int v2 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "PairingManager::stackWillStop enter", buf, 2u);
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 208);
  if (*(unsigned char *)(a1 + 272))
  {
    *(unsigned char *)(a1 + 272) = 0;
    if (!*(unsigned char *)(a1 + 528))
    {
      buf[0] = 0;
      sub_10001B8E0(buf);
      sub_10018C460();
      sub_10001B910(buf);
      sub_10001B8AC(buf);
    }
    v10[0] = 0;
    v10[1] = 0;
    sub_10003AED0((uint64_t)v10, a1 + 280);
    *(void *)long long buf = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    sub_100040550(buf, a1 + 344);
    *(void *)(a1 + 352) = *(void *)(a1 + 344);
    sub_10003AFE8((uint64_t)v10);
    for (uint64_t i = *(unsigned __int8 ***)buf; i != v8; ++i)
      sub_10060B7AC(a1, *i, 0xA1u);
    sub_1004AFEC4(*(void *)(a1 + 40));
    sub_10003AFE8((uint64_t)v11);
    uint64_t v4 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "PairingManager::stackWillStop exit", v6, 2u);
    }
    if (*(void *)buf)
    {
      uint64_t v8 = *(unsigned __int8 ***)buf;
      operator delete(*(void **)buf);
    }
    sub_10003AFB4((uint64_t)v10);
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_10060B758(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  sub_10003AFB4(v15 - 48);
  _Unwind_Resume(a1);
}

uint64_t sub_10060B7AC(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  v50[1] = 0;
  uint64_t v51 = 0;
  uint64_t v5 = (uint64_t)(a2 + 128);
  uint64_t v4 = a2[128];
  uint64_t v6 = a2[129];
  uint64_t v7 = a2[130];
  uint64_t v8 = a2[131];
  uint64_t v9 = a2[132];
  uint64_t v10 = a2[133];
  v50[0] = 0;
  sub_10003AED0((uint64_t)v50, a1 + 280);
  sub_1004A83C4((char **)(a1 + 344), (uint64_t)a2);
  uint64_t v11 = *(void **)(a1 + 512);
  if (v11)
  {
    char v12 = (uint64_t *)(a1 + 512);
    do
    {
      unint64_t v13 = v11[4];
      BOOL v14 = v13 >= (unint64_t)a2;
      if (v13 >= (unint64_t)a2) {
        uint64_t v15 = v11;
      }
      else {
        uint64_t v15 = v11 + 1;
      }
      if (v14) {
        char v12 = v11;
      }
      uint64_t v11 = (void *)*v15;
    }
    while (*v15);
    if (v12 != (uint64_t *)(a1 + 512) && v12[4] <= (unint64_t)a2)
    {
      sub_10060A648(a1, v12[5]);
      uint64_t v16 = v12[5];
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      sub_10004D3B8((uint64_t **)(a1 + 504), v12);
      operator delete(v12);
    }
  }
  sub_10003AFE8((uint64_t)v50);
  v49[0] = 0;
  v49[1] = 0;
  sub_10003AED0((uint64_t)v49, a1 + 48);
  uint64_t v17 = *(void *)(a1 + 112);
  if (v17) {
    sub_100606E08(v17, a3);
  }
  unint64_t v18 = (v4 << 40) | (v6 << 32) | (v7 << 24) | (v8 << 16) | (v9 << 8) | v10;
  uint64_t v19 = a1;
  unint64_t v43 = v18;
  if (v18)
  {
    __int16 v20 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, __p);
      uint64_t v21 = v54[3] >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Pairing complete for device %{public}s", buf, 0xCu);
      if ((v54[3] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    if (*(unsigned char *)(a1 + 272))
    {
      char v48 = 0;
      sub_10001B8E0(&v48);
      sub_100253298(v5, 0);
      unint64_t v22 = sub_10022A5E0(v43);
      int v46 = v22;
      __int16 v47 = WORD2(v22);
      if (sub_10017E2D4((uint64_t)&v46, &v51)) {
        BOOL v23 = 0;
      }
      else {
        BOOL v23 = sub_1001976C8(v51);
      }
      int v25 = sub_100197708(v51);
      sub_10001B910(&v48);
      __n128 v26 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)a2, buf);
        int v27 = v60 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)std::string __p = 136446722;
        *(void *)&__p[4] = v27;
        *(_WORD *)&unsigned char __p[12] = 1024;
        *(_DWORD *)uint64_t v53 = v23;
        *(_WORD *)&v53[4] = 1024;
        *(_DWORD *)uint64_t v54 = v25;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Device %{public}s ClassicSMPSupported:%d encryptionMode:%d", __p, 0x18u);
        if (v60 < 0) {
          operator delete(*(void **)buf);
        }
      }
      sub_10001B8AC(&v48);
    }
    else
    {
      __int16 v24 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Stack shutting down, ignore pairing timeout", __p, 2u);
      }
      int v25 = 0;
      BOOL v23 = 0;
    }
    long long v28 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      int v29 = sub_10048CB38((uint64_t)a2);
      int v30 = *(unsigned __int8 *)(a1 + 528);
      int v31 = a2[1121];
      __int16 v32 = sub_1006ACEAC();
      *(_DWORD *)std::string __p = 67110402;
      *(_DWORD *)&__p[4] = a3;
      *(_WORD *)&__p[8] = 1024;
      *(_DWORD *)&__p[10] = v29;
      *(_WORD *)uint64_t v53 = 1024;
      *(_DWORD *)&void v53[2] = v23;
      *(_WORD *)uint64_t v54 = 1024;
      *(_DWORD *)&v54[2] = v30;
      __int16 v55 = 1024;
      int v56 = v31;
      __int16 v57 = 2112;
      uint64_t v58 = v32;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "pairingComplete result:%d device->isDerivedFromLE:%d connectionSupportsClassicSMP:%d fCTKDDisabled:%d isPendingClassicSMP:%d address:%@", __p, 0x2Au);

      uint64_t v19 = a1;
    }
    if (a3 || !*(unsigned char *)(v19 + 272) || (sub_10048CB38((uint64_t)a2) & 1) != 0) {
      goto LABEL_41;
    }
    if (*(unsigned char *)(a1 + 528) || !v23) {
      goto LABEL_41;
    }
    if (a2[1121])
    {
      sub_1001876F0(v5, 1);
      __int16 v38 = qword_100A19EB8;
      if (v25 == 2)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18((uint64_t)a2, __p);
          int v39 = v54[3] >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v39;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Initiating Classic SMP with device %{public}s", buf, 0xCu);
          if ((v54[3] & 0x80000000) != 0) {
            operator delete(*(void **)__p);
          }
        }
        a2[1121] = 0;
        buf[0] = 0;
        sub_10001B8E0(buf);
        int v40 = sub_10018C4A8(v51);
        sub_10001B910(buf);
        if (v40)
        {
          if (v40 == 4821)
          {
            char v41 = qword_100A19EB8;
            if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string __p = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Failed to start Classic SMP Pairing, waiting for other side to initiate", __p, 2u);
            }
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
              sub_100786104();
            }
            sub_1002B804C(buf);
            sub_1001876F0(v5, 0);
            sub_10001B910(buf);
          }
        }
        uint64_t v42 = buf;
        goto LABEL_85;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
        sub_10078616C();
      }
      __p[0] = 0;
      sub_10001B8E0(__p);
      sub_1001876F0(v5, 0);
      sub_10001B910(__p);
    }
    else
    {
      a2[1121] = 1;
      __p[0] = 0;
      sub_10001B8E0(__p);
      sub_1001876F0(v5, 1);
      sub_10001B910(__p);
    }
    uint64_t v42 = __p;
LABEL_85:
    sub_10001B8AC(v42);
LABEL_41:
    *(_OWORD *)long long buf = 0uLL;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
    }
    sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133], 1u, 0, 0, 0, buf);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
    }
    uint64_t v33 = off_1009F7ED8;
    __int16 v34 = sub_100031234(buf);
    *((unsigned char *)sub_100030398((uint64_t)v33, v34) + 161) = 1;

    if (_os_feature_enabled_impl())
    {
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009BB248);
      }
      uint64_t v35 = qword_1009F7EC8;
      sub_10004191C(__p, "");
      sub_100715204(v35, v43, 0, 0, 0, 0, 0, (uint64_t)__p);
      if ((v54[3] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
  }
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009BB288);
  }
  sub_10046F0F0((uint64_t)off_1009F87A0);
  sub_10060C9B0(a1, a2, a3);
  if (a3 && !sub_10047D61C((uint64_t)a2))
  {
    if (qword_1009F8778 != -1) {
      dispatch_once(&qword_1009F8778, &stru_1009BB228);
    }
    sub_100618F98((uint64_t)off_1009F8770, (uint64_t)a2);
  }
  sub_10003AFB4((uint64_t)v49);
  return sub_10003AFB4((uint64_t)v50);
}

void sub_10060BFB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
}

uint64_t sub_10060C068(uint64_t a1)
{
  return sub_10060B5D8(a1 - 32);
}

uint64_t sub_10060C070(void *a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(a1 + 52));
  uint64_t v4 = (void *)a1[60];
  uint64_t v5 = (void *)a1[61];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = (void *)a1[61];
        break;
      }
    }
  }
  if (v6 == v5)
  {
    unint64_t v7 = a1[62];
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v7 - (void)v4;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        unint64_t v13 = (char *)sub_1000405F8((uint64_t)(a1 + 62), v12);
      }
      else {
        unint64_t v13 = 0;
      }
      BOOL v14 = &v13[8 * v9];
      uint64_t v15 = &v13[8 * v12];
      *(void *)BOOL v14 = a2;
      uint64_t v8 = v14 + 8;
      uint64_t v17 = (char *)a1[60];
      uint64_t v16 = (char *)a1[61];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        uint64_t v16 = (char *)a1[60];
      }
      a1[60] = v14;
      a1[61] = v8;
      a1[62] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *uint64_t v5 = a2;
      uint64_t v8 = v5 + 1;
    }
    a1[61] = v8;
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_10060C198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10060C1AC(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 416);
  uint64_t v5 = *(char **)(a1 + 480);
  uint64_t v4 = *(char **)(a1 + 488);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 488);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 488) = &v5[v6];
  }
  return sub_10003AFB4((uint64_t)v8);
}

BOOL sub_10060C248(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009BB2C8);
  }
  if (!sub_100454734((uint64_t)off_1009F7EE8, a2)) {
    return 0;
  }
  int v4 = 0;
  if (qword_1009F7EF0 != -1) {
    dispatch_once(&qword_1009F7EF0, &stru_1009BB2C8);
  }
  return !sub_1004551AC((uint64_t)off_1009F7EE8, a2, &v4) && v4 == 1;
}

uint64_t sub_10060C308(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (!a2) {
    return v2;
  }
  uint64_t v19 = 0;
  long long v18 = 0u;
  *(_OWORD *)uint64_t v16 = 0u;
  memset(v17, 0, sizeof(v17));
  *(_OWORD *)BOOL v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)unint64_t v12 = 0u;
  long long v13 = 0u;
  long long v11 = 0u;
  sub_1006161E0((uint64_t)&v11 + 1);
  BYTE2(v12[0]) = 0;
  BYTE4(v12[0]) = 0;
  BYTE2(v14[0]) = 0;
  BYTE4(v14[0]) = 0;
  DWORD1(v17[1]) = 0;
  long long v13 = 0uLL;
  v12[1] = 0;
  LOBYTE(v14[0]) = 0;
  long long v15 = 0uLL;
  v14[1] = 0;
  LOBYTE(v16[0]) = 0;
  memset(v17, 0, 19);
  v16[1] = 0;
  BYTE8(v17[1]) = 1;
  BYTE2(v19) = 0;
  *(void *)((char *)&v17[1] + 14) = 0;
  *(void *)((char *)&v17[1] + 9) = 0;
  long long v18 = 0uLL;
  *((void *)&v17[2] + 1) = 0;
  LOBYTE(v19) = 0;
  BOOL v4 = sub_1004783B8(v2, (uint64_t)&v11);
  if (BYTE10(v17[1])) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5 || sub_10047D61C(v2))
  {
    std::string __p = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    if (sub_10060C508(a1, (uint64_t **)&__p))
    {
      uint64_t v2 = 0;
      if (!__p) {
        goto LABEL_17;
      }
    }
    else
    {
      int64_t v6 = __p;
      if (__p != v9)
      {
        while (*v6 != v2)
        {
          if (++v6 == v9)
          {
            int64_t v6 = v9;
            break;
          }
        }
      }
      uint64_t v2 = v9 != v6;
      if (!__p) {
        goto LABEL_17;
      }
    }
    uint64_t v9 = __p;
    operator delete(__p);
  }
  else
  {
    uint64_t v2 = 0;
  }
LABEL_17:
  if (SHIBYTE(v17[0]) < 0) {
    operator delete(v16[1]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[1]);
  }
  nullsub_95((char *)&v11 + 1);
  return v2;
}

void sub_10060C4D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_100276384((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_10060C508(uint64_t a1, uint64_t **a2)
{
  __int16 v32 = 0;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB228);
  }
  uint64_t v4 = sub_100618318(off_1009F8770, (char **)&v32);
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_1007861A0();
    }
  }
  else
  {
    BOOL v5 = (uint64_t *)v32;
    int64_t v6 = v33;
    if (v32 != v33)
    {
      do
      {
        uint64_t v7 = *v5;
        buf[0] = 0;
        uint64_t v8 = sub_1003708B0();
        sub_10004191C(__p, "HasTS");
        int v9 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *, uint8_t *))(*(void *)v8 + 784))(v8, v7, __p, buf);
        if (SHIBYTE(v41) < 0) {
          operator delete(*(void **)__p);
        }
        uint64_t v10 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEBUG))
        {
          sub_100474E18(v7, v30);
          BOOL v23 = v30;
          if (v31 < 0) {
            BOOL v23 = (void **)v30[0];
          }
          *(_DWORD *)std::string __p = 136446722;
          *(void *)&__p[4] = v23;
          __int16 v38 = 1024;
          int v39 = buf[0];
          __int16 v40 = 1024;
          int v41 = v9;
          _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "%{public}s hasTS: %d, res: %d", __p, 0x18u);
          if (v31 < 0) {
            operator delete(v30[0]);
          }
        }
        if (!buf[0])
        {
          unint64_t v12 = a2[1];
          unint64_t v11 = (unint64_t)a2[2];
          if ((unint64_t)v12 >= v11)
          {
            uint64_t v14 = v12 - *a2;
            if ((unint64_t)(v14 + 1) >> 61) {
              abort();
            }
            uint64_t v15 = v11 - (void)*a2;
            uint64_t v16 = v15 >> 2;
            if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
              uint64_t v16 = v14 + 1;
            }
            if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v17 = v16;
            }
            if (v17) {
              long long v18 = (char *)sub_1000405F8((uint64_t)(a2 + 2), v17);
            }
            else {
              long long v18 = 0;
            }
            uint64_t v19 = (uint64_t *)&v18[8 * v14];
            *uint64_t v19 = v7;
            long long v13 = v19 + 1;
            uint64_t v21 = (char *)*a2;
            __int16 v20 = (char *)a2[1];
            if (v20 != (char *)*a2)
            {
              do
              {
                uint64_t v22 = *((void *)v20 - 1);
                v20 -= 8;
                *--uint64_t v19 = v22;
              }
              while (v20 != v21);
              __int16 v20 = (char *)*a2;
            }
            *a2 = v19;
            a2[1] = v13;
            a2[2] = (uint64_t *)&v18[8 * v17];
            if (v20) {
              operator delete(v20);
            }
          }
          else
          {
            *unint64_t v12 = v7;
            long long v13 = v12 + 1;
          }
          a2[1] = v13;
        }
        ++v5;
      }
      while (v5 != v6);
    }
    v30[0] = 0;
    v30[1] = 0;
    sub_10003AED0((uint64_t)v30, a1 + 536);
    if (*(void *)(a1 + 600))
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009BB1E8);
      }
      uint64_t v24 = sub_100030F10((uint64_t)off_1009F7EF8, *(void *)(a1 + 600), 0);
      sub_10003AFE8((uint64_t)v30);
      if (v24)
      {
        int v25 = (char *)a2[1];
        __n128 v26 = *a2;
        if (*a2 != (uint64_t *)v25)
        {
          while (*v26 != v24)
          {
            if (++v26 == (uint64_t *)v25)
            {
              __n128 v26 = a2[1];
              break;
            }
          }
        }
        if (v26 != (uint64_t *)v25)
        {
          int v27 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(v24, __p);
            if (v41 >= 0) {
              long long v28 = __p;
            }
            else {
              long long v28 = *(unsigned char **)__p;
            }
            *(_DWORD *)long long buf = 136446210;
            __int16 v36 = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Currently unpairing device %{public}s. Don't send it as part of the paired devices list", buf, 0xCu);
            if (SHIBYTE(v41) < 0) {
              operator delete(*(void **)__p);
            }
            int v25 = (char *)a2[1];
          }
          if (v25 != (char *)(v26 + 1)) {
            memmove(v26, v26 + 1, v25 - (char *)(v26 + 1));
          }
          a2[1] = (uint64_t *)(v25 - 8);
        }
      }
    }
    sub_10003AFB4((uint64_t)v30);
  }
  if (v32)
  {
    uint64_t v33 = (uint64_t *)v32;
    operator delete(v32);
  }
  return v4;
}

void sub_10060C944(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (__p)
  {
    a17 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10060C9B0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int64_t v6 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)a2, &__p);
    uint64_t v7 = v20 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'pairing complete' event for device %{public}s with result %d", buf, 0x12u);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p);
    }
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 416);
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  sub_100040550(&__p, a1 + 480);
  sub_10003AFE8((uint64_t)buf);
  for (uint64_t i = __p; i != v19; ++i)
    (*(void (**)(void, unsigned __int8 *, uint64_t))(*(void *)*i + 24))(*i, a2, a3);
  if (!a3)
  {
    uint64_t v9 = a2[128];
    uint64_t v10 = a2[129];
    uint64_t v11 = a2[130];
    uint64_t v12 = a2[131];
    uint64_t v13 = a2[132];
    uint64_t v14 = a2[133];
    uint64_t v15 = sub_1004AF8EC();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_1006121D4;
    _OWORD v17[3] = &unk_100997528;
    v17[4] = (v9 << 40) | (v10 << 32) | (v11 << 24) | (v12 << 16) | (v13 << 8) | v14;
    sub_100013018(v15, v17);
  }
  if (__p)
  {
    uint64_t v19 = __p;
    operator delete(__p);
  }
  return sub_10003AFB4((uint64_t)buf);
}

void sub_10060CBBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

void sub_10060CBF8()
{
}

void sub_10060CCA4()
{
}

void sub_10060CCE8()
{
}

void sub_10060CD94()
{
}

void sub_10060CDD8()
{
}

void sub_10060CE84()
{
}

void sub_10060CEC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 141560835;
    uint64_t v11 = 1752392040;
    __int16 v12 = 1041;
    int v13 = 16;
    __int16 v14 = 2097;
    uint64_t v15 = a2;
    __int16 v16 = 2160;
    uint64_t v17 = 1752392040;
    __int16 v18 = 1041;
    int v19 = 16;
    __int16 v20 = 2097;
    uint64_t v21 = a3;
    __int16 v22 = 2160;
    uint64_t v23 = 1752392040;
    __int16 v24 = 1041;
    int v25 = 16;
    __int16 v26 = 2097;
    uint64_t v27 = a4;
    __int16 v28 = 2160;
    uint64_t v29 = 1752392040;
    __int16 v30 = 1041;
    int v31 = 16;
    __int16 v32 = 2097;
    uint64_t v33 = a5;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "PairingManager::localOOBDataGenerated C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", (uint8_t *)&v10, 0x6Au);
  }
  operator new();
}

void sub_10060D068(void *a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(a1 + 26));
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, (uint64_t)(a1 + 35));
  uint64_t v4 = *(void *)(a2 + 8);
  int64_t v6 = (void *)a1[44];
  unint64_t v5 = a1[45];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[43];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      int v13 = (char *)sub_1000405F8((uint64_t)(a1 + 45), v12);
    }
    else {
      int v13 = 0;
    }
    __int16 v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)__int16 v14 = v4;
    uint64_t v7 = v14 + 8;
    uint64_t v17 = (char *)a1[43];
    __int16 v16 = (char *)a1[44];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      __int16 v16 = (char *)a1[43];
    }
    a1[43] = v14;
    a1[44] = v7;
    a1[45] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = v4;
    uint64_t v7 = v6 + 1;
  }
  a1[44] = v7;
  operator new();
}

void sub_10060DA94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18, uint64_t a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_100276384((uint64_t)&a33);
  nullsub_95(v38 - 128);
  sub_10003AFB4((uint64_t)&a12);
  sub_10001B8AC(&a17);
  sub_10003AFB4((uint64_t)&a18);
  sub_10003AFB4((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_10060DB90(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    int v8 = v16;
    uint64_t v9 = (void **)__p[0];
    int v10 = (*(uint64_t (**)(void *))(*a2 + 48))(a2);
    uint64_t v11 = __p;
    if (v8 < 0) {
      uint64_t v11 = v9;
    }
    unint64_t v12 = "for self-initiated pairing to";
    *(_DWORD *)long long buf = 136315650;
    if (a3) {
      unint64_t v12 = "for incoming pairing from";
    }
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v11;
    *(_WORD *)&unsigned char buf[22] = 1024;
    int v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Notifying 'pairing started' %s %{public}s for Auth type %d", buf, 0x1Cu);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1 + 416);
  memset(buf, 0, sizeof(buf));
  sub_100040550(buf, a1 + 480);
  sub_10003AFE8((uint64_t)__p);
  int v13 = *(void **)buf;
  if (*(void *)buf != *(void *)&buf[8])
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v13 + 16))(*v13, v6, a3);
      ++v13;
    }
    while (v13 != *(void **)&buf[8]);
    int v13 = *(void **)buf;
  }
  if (v13)
  {
    *(void *)&uint8_t buf[8] = v13;
    operator delete(v13);
  }
  return sub_10003AFB4((uint64_t)__p);
}

void sub_10060DD74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10060DDC4(void *a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(a1 + 26));
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, (uint64_t)(a1 + 35));
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = (void *)a1[44];
  unint64_t v5 = a1[45];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[43];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      int v13 = (char *)sub_1000405F8((uint64_t)(a1 + 45), v12);
    }
    else {
      int v13 = 0;
    }
    __int16 v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)__int16 v14 = v4;
    uint64_t v7 = v14 + 8;
    uint64_t v17 = (char *)a1[43];
    char v16 = (char *)a1[44];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      char v16 = (char *)a1[43];
    }
    a1[43] = v14;
    a1[44] = v7;
    a1[45] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = v4;
    uint64_t v7 = v6 + 1;
  }
  a1[44] = v7;
  operator new();
}

void sub_10060E558(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_10003AFB4((uint64_t)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10060E5EC(void *a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(a1 + 26));
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, (uint64_t)(a1 + 35));
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v6 = (void *)a1[44];
  unint64_t v5 = a1[45];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = a1[43];
    uint64_t v9 = ((uint64_t)v6 - v8) >> 3;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v10 = v5 - v8;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      int v13 = (char *)sub_1000405F8((uint64_t)(a1 + 45), v12);
    }
    else {
      int v13 = 0;
    }
    __int16 v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)__int16 v14 = v4;
    uint64_t v7 = v14 + 8;
    uint64_t v17 = (char *)a1[43];
    char v16 = (char *)a1[44];
    if (v16 != v17)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *((void *)v14 - 1) = v18;
        v14 -= 8;
      }
      while (v16 != v17);
      char v16 = (char *)a1[43];
    }
    a1[43] = v14;
    a1[44] = v7;
    a1[45] = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    void *v6 = v4;
    uint64_t v7 = v6 + 1;
  }
  a1[44] = v7;
  operator new();
}

void sub_10060EA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  sub_10003AFB4((uint64_t)va);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10060EB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 208);
  uint64_t v10 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141560835;
    *(void *)&uint8_t buf[4] = 1752392040;
    *(_WORD *)&unsigned char buf[12] = 1041;
    *(_DWORD *)&unsigned char buf[14] = 16;
    __int16 v15 = 2097;
    uint64_t v16 = a2;
    __int16 v17 = 2160;
    uint64_t v18 = 1752392040;
    __int16 v19 = 1041;
    int v20 = 16;
    __int16 v21 = 2097;
    uint64_t v22 = a3;
    __int16 v23 = 2160;
    uint64_t v24 = 1752392040;
    __int16 v25 = 1041;
    int v26 = 16;
    __int16 v27 = 2097;
    uint64_t v28 = a4;
    __int16 v29 = 2160;
    uint64_t v30 = 1752392040;
    __int16 v31 = 1041;
    int v32 = 16;
    __int16 v33 = 2097;
    uint64_t v34 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "PairingManager::notifyLocalOOBDataReady C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", buf, 0x6Au);
  }
  if (*(unsigned char *)(a1 + 272))
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003AED0((uint64_t)buf, a1 + 48);
    uint64_t v11 = *(void *)(a1 + 112);
    if (v11)
    {
      sub_100608454(v11, a2, a3, a4, a5);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
    {
      sub_100786208();
    }
    sub_10003AFB4((uint64_t)buf);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
  {
    sub_100786338();
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_10060ECE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_10060ED0C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (!a3)
  {
    uint64_t v29 = 0;
    uint64_t v8 = a2 + 128;
    int v27 = *(_DWORD *)(a2 + 128);
    __int16 v28 = *(_WORD *)(a2 + 132);
    int v26 = sub_10017E2D4((uint64_t)&v27, &v29);
    uint64_t v55 = 0;
    long long v54 = 0u;
    memset(v53, 0, sizeof(v53));
    long long v51 = 0u;
    *(_OWORD *)__int16 v52 = 0u;
    long long v49 = 0u;
    *(_OWORD *)char v50 = 0u;
    long long v47 = 0u;
    *(_OWORD *)char v48 = 0u;
    sub_1006161E0((uint64_t)&v47 + 1);
    BYTE2(v48[0]) = 0;
    BYTE4(v48[0]) = 0;
    BYTE2(v50[0]) = 0;
    BYTE4(v50[0]) = 0;
    DWORD1(v53[1]) = 0;
    long long v49 = 0uLL;
    v48[1] = 0;
    LOBYTE(v50[0]) = 0;
    long long v51 = 0uLL;
    v50[1] = 0;
    LOBYTE(v52[0]) = 0;
    memset(v53, 0, 19);
    v52[1] = 0;
    BYTE8(v53[1]) = 1;
    BYTE2(v55) = 0;
    *(void *)((char *)&v53[1] + 14) = 0;
    *(void *)((char *)&v53[1] + 9) = 0;
    long long v54 = 0uLL;
    *((void *)&v53[2] + 1) = 0;
    LOBYTE(v55) = 0;
    BOOL v9 = sub_1004783B8(a2, (uint64_t)&v47);
    if (BYTE2(v55)) {
      BOOL v10 = v9;
    }
    else {
      BOOL v10 = 0;
    }
    uint64_t v11 = qword_100A19EB8;
    if (v10 && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, &__p);
      if ((v38 & 0x8000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = p_p;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Force No Clasic SMP support for device %{public}s", buf, 0xCu);
      if (SBYTE1(v38) < 0) {
        operator delete(__p);
      }
      uint64_t v11 = qword_100A19EB8;
    }
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = v8;
      int v13 = *(unsigned __int8 *)(a2 + 1121);
      int v14 = *(unsigned __int8 *)(a1 + 528);
      int v15 = sub_100040630((unsigned __int8 *)a2);
      BOOL v16 = sub_1004A8390(a1 + 344, a2);
      sub_1004A82EC((unsigned __int8 *)&v27, buf);
      __int16 v17 = buf;
      if (v31 < 0) {
        __int16 v17 = *(unsigned char **)buf;
      }
      LODWORD(__p) = 67110914;
      HIDWORD(__p) = v26;
      __int16 v33 = 1024;
      int v34 = a4;
      __int16 v35 = 1024;
      int v36 = v13;
      __int16 v37 = 1024;
      int v38 = v14;
      __int16 v39 = 1024;
      int v40 = v15;
      __int16 v41 = 1024;
      BOOL v42 = v16;
      __int16 v43 = 1024;
      BOOL v44 = v10;
      __int16 v45 = 2082;
      int v46 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "encryptionComplete status:%d encryptionMode:%d pendingClassicSMP:%d fCTKDDisabled=%d isPaired:%d isPairing:%d disableRemoteCTKDSupport:%d address:%{public}s", (uint8_t *)&__p, 0x36u);
      if (v31 < 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v8 = v25;
    }
    if (a4 == 2 && !v26 && !*(unsigned char *)(a1 + 528) && !v10)
    {
      sub_1001876F0(v8, 1);
      if (*(unsigned char *)(a2 + 1121))
      {
        __int16 v19 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, &__p);
          int v20 = (v38 & 0x8000) == 0 ? &__p : (void **)__p;
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Initiating Classic SMP with device %{public}s", buf, 0xCu);
          if (SBYTE1(v38) < 0) {
            operator delete(__p);
          }
        }
        *(unsigned char *)(a2 + 1121) = 0;
        int v21 = sub_10018C4A8(v29);
        if (v21)
        {
          if (v21 == 4821)
          {
            uint64_t v22 = qword_100A19EB8;
            if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p) = 0;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Failed to start Classic SMP Pairing, waiting for other side to initiate", (uint8_t *)&__p, 2u);
            }
          }
          else
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
              sub_100786104();
            }
            sub_1001876F0(v8, 0);
          }
        }
      }
      else if (sub_1004A8390(a1 + 344, a2) || (sub_100040630((unsigned __int8 *)a2) & 1) == 0)
      {
        *(unsigned char *)(a2 + 1121) = 1;
      }
    }
    if (SHIBYTE(v53[0]) < 0) {
      operator delete(v52[1]);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(v50[1]);
    }
    if (SHIBYTE(v49) < 0) {
      operator delete(v48[1]);
    }
    nullsub_95((char *)&v47 + 1);
  }
  uint64_t v23 = sub_100050530();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 640))(v23, a3, 1);
}

void sub_10060F1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_10060F1E4(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = (unsigned __int8 *)a3;
  v16[1] = 0;
  __int16 v17 = (unsigned __int8 *)a3;
  v16[0] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 280);
  BOOL v5 = sub_1004A83C4((char **)(a1 + 344), (uint64_t)v3);
  if (v5 && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
  {
    sub_100474E18((uint64_t)v3, v15);
    sub_1007863C0();
  }
  uint64_t v6 = *(void **)(a1 + 512);
  if (!v6) {
    goto LABEL_25;
  }
  uint64_t v7 = a1 + 512;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= (unint64_t)v3;
    if (v8 >= (unint64_t)v3) {
      BOOL v10 = v6;
    }
    else {
      BOOL v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (uint64_t)v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 != a1 + 512 && *(void *)(v7 + 32) <= (unint64_t)v3 && (uint64_t v11 = *(void *)(v7 + 40)) != 0)
  {
    unint64_t v12 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "pairing timedout, rejecting pairing request", v14, 2u);
    }
    sub_1000517A4(a1 + 504, (unint64_t *)&v17);
    sub_10060A648(a1, v11);
    (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    char v3 = v17;
  }
  else
  {
LABEL_25:
    if (v5 && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18((uint64_t)v3, v14);
      sub_10078636C();
    }
  }
  sub_10060B7AC(a1, v3, 0xA1u);
  return sub_10003AFB4((uint64_t)v16);
}

void sub_10060F400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060F428(uint64_t a1)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 208);
  uint64_t v2 = qword_100A19EB8;
  if (*(unsigned char *)(a1 + 272))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Cancelling all currently pending pairing attempts", buf, 2u);
    }
    v13[0] = 0;
    v13[1] = 0;
    sub_10003AED0((uint64_t)v13, a1 + 280);
    *(void *)long long buf = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    sub_100040550(buf, a1 + 344);
    *(void *)(a1 + 352) = *(void *)(a1 + 344);
    sub_10003AFE8((uint64_t)v13);
    sub_10003AFE8((uint64_t)v14);
    char v3 = *(unsigned __int8 ***)buf;
    if (*(unsigned __int8 ***)buf != v11)
    {
      do
      {
        BOOL v9 = *v3;
        sub_10003AF00((uint64_t)v13);
        *(void *)int v15 = &v9;
        uint64_t v4 = sub_1000097B0((uint64_t **)(a1 + 504), (unint64_t *)&v9, (uint64_t)&unk_1007BE9D0, (uint64_t **)v15)[5];
        sub_10003AFE8((uint64_t)v13);
        if (v4)
        {
          uint64_t v6 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int v15 = 0;
            _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Pairing cancelled, rejecting pairing request", v15, 2u);
          }
          uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 32))(v4);
        }
        sub_10060F684(v5, (uint64_t)v9);
        sub_10060B7AC(a1, v9, 0xA1u);
        ++v3;
      }
      while (v3 != v11);
      char v3 = *(unsigned __int8 ***)buf;
    }
    if (v3)
    {
      uint64_t v11 = v3;
      operator delete(v3);
    }
    sub_10003AFB4((uint64_t)v13);
    uint64_t v7 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100786414();
    }
    uint64_t v7 = 1;
  }
  sub_10003AFB4((uint64_t)v14);
  return v7;
}

void sub_10060F640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16)
{
}

BOOL sub_10060F684(uint64_t a1, uint64_t a2)
{
  char v3 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v8 >= 0) {
      uint64_t v4 = __p;
    }
    else {
      uint64_t v4 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    BOOL v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Blocking pairing for device %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  BOOL v5 = sub_10025331C(a2 + 128, 1) != 0;
  sub_10001B8AC(__p);
  return v5;
}

void sub_10060F78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_10060F7A8(uint64_t a1, unint64_t a2, __n128 *a3)
{
  uint64_t v6 = qword_100A19EB8;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT);
  if (v7)
  {
    sub_100616338((unsigned __int8 *)a3, v18);
    int v8 = SBYTE7(v19);
    BOOL v9 = (void **)v18[0];
    sub_100474E18(a2, __p);
    BOOL v10 = v18;
    if (v8 < 0) {
      BOOL v10 = v9;
    }
    if (v24 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting pincode %s for device %{public}s", buf, 0x16u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
    if (SBYTE7(v19) < 0) {
      operator delete(v18[0]);
    }
  }
  if (sub_10060C248(v7, a2)) {
    return 0;
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 208);
  if (*(unsigned char *)(a1 + 272))
  {
    if ((unint64_t)sub_100616330((uint64_t)a3) > 3)
    {
      __p[0] = 0;
      __p[1] = 0;
      sub_10003AED0((uint64_t)__p, a1 + 280);
      if (sub_1004A8390(a1 + 344, a2))
      {
        sub_10003AFE8((uint64_t)__p);
        uint64_t v15 = *(void *)(a1 + 112);
        if (v15)
        {
          sub_10060825C(v15, a2, (uint64_t)a3);
          sub_100608328(v15, a2, a3);
        }
        uint64_t v22 = 0;
        long long v20 = 0u;
        long long v21 = 0u;
        *(_OWORD *)uint64_t v18 = 0u;
        long long v19 = 0u;
        sub_1006171C8(v18, a2, 0);
        if (sub_10047D61C(a2)
          && (uint64_t v16 = sub_100370758(),
              uint64_t v12 = (*(uint64_t (**)(uint64_t, unint64_t, __n128 *))(*(void *)v16 + 16))(v16, a2, a3), v12))
        {
          sub_100617334(v18);
        }
        else
        {
          sub_100617294(v18, a3);
          uint64_t v12 = 0;
        }
        sub_1006171CC(v18);
      }
      else
      {
        uint64_t v12 = 0;
      }
      sub_10003AFB4((uint64_t)__p);
    }
    else
    {
      uint64_t v22 = 0;
      long long v20 = 0u;
      long long v21 = 0u;
      *(_OWORD *)uint64_t v18 = 0u;
      long long v19 = 0u;
      sub_1006171C8(v18, a2, 0);
      int v13 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v14 = sub_100616330((uint64_t)a3);
        sub_100786448((uint8_t *)__p, v14, v13);
      }
      sub_100617334(v18);
      sub_1006171CC(v18);
      uint64_t v12 = 159;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  sub_10003AFB4((uint64_t)buf);
  return v12;
}

void sub_10060FA78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_10003AFB4((uint64_t)&a22);
  sub_10003AFB4(v22 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_10060FAF0(uint64_t a1, uint64_t a2, int a3)
{
  v15[1] = 0;
  uint64_t v16 = a2;
  v15[0] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 280);
  if (sub_1004A8390(a1 + 344, a2))
  {
    __p[0] = &v16;
    uint64_t v6 = sub_1000097B0((uint64_t **)(a1 + 504), (unint64_t *)&v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)[5];
    sub_10060A648(a1, v6);
    sub_1000517A4(a1 + 504, (unint64_t *)&v16);
    sub_10003AFE8((uint64_t)v15);
    if (v6)
    {
      BOOL v7 = qword_100A19EB8;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT);
      if (a3)
      {
        if (v8)
        {
          sub_100474E18(v16, __p);
          if (v14 >= 0) {
            BOOL v9 = __p;
          }
          else {
            BOOL v9 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136446210;
          uint64_t v18 = v9;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Rejecting SSP request for device %{public}s", buf, 0xCu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 32))(v6);
      }
      else
      {
        if (v8)
        {
          sub_100474E18(v16, __p);
          uint64_t v11 = v14 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)long long buf = 136446210;
          uint64_t v18 = v11;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Accepting SSP request for device %{public}s", buf, 0xCu);
          if (v14 < 0) {
            operator delete(__p[0]);
          }
        }
        (*(void (**)(uint64_t))(*(void *)v6 + 40))(v6);
      }
      (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
      uint64_t v10 = 0;
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v16, __p);
        sub_1007864A4();
      }
      uint64_t v10 = 1;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a2, __p);
      sub_1007864F8();
    }
    uint64_t v10 = 165;
  }
  sub_10003AFB4((uint64_t)v15);
  return v10;
}

void sub_10060FDB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10060FDE8(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 272))
  {
    uint64_t v3 = *(void *)(a1 + 40);
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_10060FE64;
    v4[3] = &unk_100997570;
    v4[4] = a2;
    int v5 = a3;
    sub_100013018(v3, v4);
  }
}

uint64_t sub_10060FE64(uint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB208);
  }
  uint64_t v2 = off_1009F8760;
  uint64_t v3 = *(unsigned __int8 **)(a1 + 32);
  unsigned int v4 = *(_DWORD *)(a1 + 40);

  return sub_10060FECC((uint64_t)v2, v3, v4);
}

uint64_t sub_10060FECC(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  __n128 v22 = 0uLL;
  char v23 = 0;
  sub_1006161E0((uint64_t)&v22);
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 280);
  if (sub_1004A8390(a1 + 344, (uint64_t)a2))
  {
    sub_10003AFE8((uint64_t)v12);
    uint64_t v6 = qword_100A19EB8;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR);
    if (v7)
    {
      if (a2)
      {
        sub_100474E18((uint64_t)a2, v11);
        sub_100786598();
      }
      else
      {
        sub_10078654C(buf, v6);
      }
    }
    sub_100610178(v7, (uint64_t)a2);
    uint64_t v8 = *(void *)(a1 + 112);
    if (!v8
      || sub_100608134(v8, (unint64_t)a2, &v22)
      || (unint64_t)sub_100616330((uint64_t)&v22) > 3)
    {
      uint64_t v21 = 0;
      long long v20 = 0u;
      memset(v19, 0, sizeof(v19));
      long long v17 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v15 = 0u;
      *(_OWORD *)uint64_t v16 = 0u;
      *(_OWORD *)long long buf = 0u;
      *(_OWORD *)char v14 = 0u;
      sub_1006161E0((uint64_t)&buf[1]);
      BYTE2(v14[0]) = 0;
      BYTE4(v14[0]) = 0;
      BYTE2(v16[0]) = 0;
      BYTE4(v16[0]) = 0;
      HIDWORD(v19[2]) = 0;
      long long v15 = 0uLL;
      v14[1] = 0;
      LOBYTE(v16[0]) = 0;
      long long v17 = 0uLL;
      v16[1] = 0;
      LOBYTE(__p[0]) = 0;
      v19[0] = 0;
      v19[1] = 0;
      __p[1] = 0;
      *(_DWORD *)((char *)&v19[1] + 7) = 0;
      LOBYTE(v19[3]) = 1;
      BYTE2(v21) = 0;
      *(void *)((char *)&v19[3] + 6) = 0;
      *(void *)((char *)&v19[3] + 1) = 0;
      long long v20 = 0uLL;
      void v19[5] = 0;
      LOBYTE(v21) = 0;
      if (sub_1004783B8((uint64_t)a2, (uint64_t)buf) && BYTE2(v14[0]) && BYTE2(v16[0]) && !BYTE3(v14[0]) && BYTE3(v16[0]))
      {
        sub_10060F428(a1);
      }
      else
      {
        if (a3) {
          unsigned __int8 v9 = a2[1352] + 1;
        }
        else {
          unsigned __int8 v9 = 0;
        }
        a2[1352] = v9;
        sub_10060B7AC(a1, a2, a3);
      }
      if (SHIBYTE(v19[1]) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(v17) < 0) {
        operator delete(v16[1]);
      }
      if (SHIBYTE(v15) < 0) {
        operator delete(v14[1]);
      }
      nullsub_95(&buf[1]);
    }
    else
    {
      sub_10060B7AC(a1, a2, 0x9Eu);
    }
  }
  sub_10003AFB4((uint64_t)v12);
  return nullsub_95(&v22);
}

void sub_100610134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  nullsub_95(v5 - 80);
  _Unwind_Resume(a1);
}

BOOL sub_100610178(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, __p);
    if (v8 >= 0) {
      unsigned int v4 = __p;
    }
    else {
      unsigned int v4 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Unblocking pairing for device %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  LOBYTE(__p[0]) = 0;
  sub_10001B8E0(__p);
  BOOL v5 = sub_10025331C(a2 + 128, 0) != 0;
  sub_10001B8AC(__p);
  return v5;
}

void sub_100610280(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_10061029C(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = sub_1004AF8EC();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  void v10[2] = sub_100610428;
  _OWORD v10[3] = &unk_1009ADA90;
  v10[4] = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(&v11, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    uint64_t v12 = *((void *)a3 + 2);
  }
  sub_100013018(v5, v10);
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  void v7[2] = sub_1006104BC;
  v7[3] = &unk_1009ADA90;
  v7[4] = a2;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v9 = *((void *)a3 + 2);
  }
  sub_100013018(v6, v7);
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_1006103F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100610428(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB1E8);
  }
  uint64_t v2 = sub_100030F10((uint64_t)off_1009F7EF8, *(void *)(a1 + 32), 1);
  uint64_t v5 = 0;
  sub_100026C30((uint64_t)&v5);
  *(void *)&long long v4 = (int)v5;
  *((void *)&v4 + 1) = SWORD2(v5);
  return sub_100476E14(v2, a1 + 40, &v4);
}

void sub_1006104BC(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
  }
  v5[0] = 0;
  v5[1] = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, *(void *)(a1 + 32), 1u, 0, 0, 0, (unsigned __int8 *)v5);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
  }
  uint64_t v2 = off_1009F7ED8;
  if (*(char *)(a1 + 63) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 56);
  }
  sub_1006B7F8C((uint64_t)v2, (unsigned __int8 *)v5, (uint64_t)__p, 2);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1006105E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100610604(uint64_t a1, unint64_t a2, __n128 *a3, uint64_t a4)
{
  char v8 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141558787;
    *(void *)&uint8_t buf[4] = 1752392040;
    *(_WORD *)&unsigned char buf[12] = 1041;
    *(_DWORD *)&unsigned char buf[14] = 16;
    *(_WORD *)&unsigned char buf[18] = 2097;
    *(void *)&buf[20] = nullsub_95(a3);
    __int16 v39 = 1024;
    int v40 = sub_100600E8C((uint64_t)a3);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "PairingManager::leDevicePaired LK:%{private, mask.hash}.16P LKype:%d", buf, 0x22u);
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB1E8);
  }
  uint64_t v9 = (unsigned __int8 *)sub_100030F10((uint64_t)off_1009F7EF8, a2, 1);
  __int16 v35 = 0;
  int v34 = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BB2A8);
  }
  sub_1004E219C((uint64_t)off_1009F8068, (uint64_t)&v34);
  if ((sub_100040630(v9) & 1) == 0)
  {
    sub_100475F84((uint64_t)v9, (uint64_t)buf);
    if (buf[23] >= 0) {
      uint64_t v10 = buf[23];
    }
    else {
      uint64_t v10 = *(void *)&buf[8];
    }
    if ((buf[23] & 0x80000000) != 0)
    {
      operator delete(*(void **)buf);
      if (v10) {
        goto LABEL_16;
      }
    }
    else if (v10)
    {
      goto LABEL_16;
    }
    __p[0] = 0;
    sub_100026C30((uint64_t)__p);
    *(void *)long long buf = SLODWORD(__p[0]);
    *(void *)&uint8_t buf[8] = SWORD2(__p[0]);
    sub_100476E14((uint64_t)v9, a4, buf);
    buf[0] = 0;
    sub_10001B8E0(buf);
    sub_10017DB50((uint64_t)sub_100610D08, (uint64_t)(v9 + 128));
    sub_10001B8AC(buf);
  }
LABEL_16:
  sub_10048CB30((uint64_t)v9, 1);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB228);
  }
  sub_100618730((uint64_t)off_1009F8770, v9, a3, 0);
  v37[0] = 0;
  v37[1] = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, a2, 1u, 0, 0, 0, (unsigned __int8 *)v37);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
  }
  long long v11 = off_1009F7ED8;
  uint64_t v12 = sub_100031234((const unsigned __int8 *)v37);
  *((unsigned char *)sub_100030398((uint64_t)v11, v12) + 161) = 1;

  memset(buf, 0, 24);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
  }
  int v13 = off_1009F7ED8;
  char v14 = sub_100031234((const unsigned __int8 *)v37);
  sub_1006BE040((uint64_t)v13, v14, (uint64_t *)buf);

  uint64_t v30 = a1;
  long long v15 = *(unsigned char **)buf;
  if (*(unsigned char **)buf != &buf[8])
  {
    do
    {
      uint64_t v16 = sub_1003708B0();
      long long v17 = v15 + 32;
      int v18 = (*(uint64_t (**)(uint64_t, unsigned __int8 *, unsigned char *))(*(void *)v16 + 792))(v16, v9, v15 + 32);
      long long v19 = qword_100A19EB8;
      if (v18)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
        {
          if ((char)v15[55] < 0) {
            long long v17 = (void *)*v17;
          }
          sub_100474E18((uint64_t)v9, __p);
          if (v33 >= 0) {
            long long v20 = __p;
          }
          else {
            long long v20 = (void **)__p[0];
          }
          *(_DWORD *)int v36 = 136446466;
          *(void *)&v36[4] = v17;
          *(_WORD *)&v36[12] = 2082;
          *(void *)&v36[14] = v20;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Unable to set tag:\"%{public}s\" for valid classicDevice %{public}s after LE device paired", v36, 0x16u);
LABEL_40:
          if (v33 < 0) {
            operator delete(__p[0]);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        if ((char)v15[55] < 0) {
          long long v17 = (void *)*v17;
        }
        sub_100474E18((uint64_t)v9, __p);
        if (v33 >= 0) {
          uint64_t v21 = __p;
        }
        else {
          uint64_t v21 = (void **)__p[0];
        }
        *(_DWORD *)int v36 = 136446466;
        *(void *)&v36[4] = v17;
        *(_WORD *)&v36[12] = 2082;
        *(void *)&v36[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Set tag:\"%{public}s\" for valid classicDevice %{public}s after LE device paired", v36, 0x16u);
        goto LABEL_40;
      }
      __n128 v22 = (void *)*((void *)v15 + 1);
      if (v22)
      {
        do
        {
          char v23 = v22;
          __n128 v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          char v23 = (unsigned char *)*((void *)v15 + 2);
          BOOL v26 = *(void *)v23 == (void)v15;
          long long v15 = v23;
        }
        while (!v26);
      }
      long long v15 = v23;
    }
    while (v23 != &buf[8]);
  }
  *(void *)int v36 = 0;
  *(void *)&v36[8] = 0;
  sub_10003AED0((uint64_t)v36, v30 + 48);
  uint64_t v24 = *(void *)(v30 + 112);
  if (v24) {
    sub_100606E08(v24, 0);
  }
  if (qword_1009F87A8 != -1) {
    dispatch_once(&qword_1009F87A8, &stru_1009BB288);
  }
  sub_10046F0F0((uint64_t)off_1009F87A0);
  sub_10060C9B0(v30, v9, 0);
  if (_os_feature_enabled_impl())
  {
    char v31 = 0;
    uint64_t v25 = sub_1003708B0();
    sub_10004191C(__p, "_PENDING_PRIVACY_SYNC_POPUP_");
    if ((*(unsigned int (**)(uint64_t, unsigned __int8 *, void **, char *))(*(void *)v25 + 784))(v25, v9, __p, &v31))
    {
      BOOL v26 = 1;
    }
    else
    {
      BOOL v26 = v31 == 0;
    }
    int v27 = !v26;
    if (v33 < 0)
    {
      operator delete(__p[0]);
      if (!v27) {
        goto LABEL_66;
      }
    }
    else if (!v27)
    {
      goto LABEL_66;
    }
    __int16 v28 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "_CTKD_ device pending for contacts/favorites sync, popping up dialog", (uint8_t *)__p, 2u);
    }
    sub_100610E30(v30, (uint64_t)v9);
  }
LABEL_66:
  sub_10003AFB4((uint64_t)v36);
  sub_10004BA28((uint64_t)buf, *(char **)&buf[8]);
  return 0;
}

void sub_100610C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29)
{
}

void sub_100610D08(int a1, unsigned __int8 *a2, char *__s)
{
  if (!a1)
  {
    uint64_t v3 = *a2;
    uint64_t v4 = a2[1];
    uint64_t v5 = a2[2];
    uint64_t v6 = a2[3];
    uint64_t v7 = a2[4];
    uint64_t v8 = a2[5];
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v13 = 0;
    uint64_t v9 = sub_10004191C(v12, __s);
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009BB208);
    }
    if (SHIBYTE(v13) < 0)
    {
      uint64_t v9 = sub_10003B098(__p, v12[0], (unint64_t)v12[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)v12;
      uint64_t v11 = v13;
    }
    sub_10061029C((uint64_t)v9, (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8, (long long *)__p);
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(v12[0]);
    }
  }
}

void sub_100610DFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100610E30(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  uint64_t v9 = &v8;
  uint64_t v10 = 0x2020000000;
  int v11 = 0;
  if (_os_feature_enabled_impl())
  {
    uint64_t v4 = sub_1004AF8EC();
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100612EC8;
    v7[3] = &unk_100998860;
    void v7[5] = a1;
    v7[6] = a2;
    v7[4] = &v8;
    sub_100013018(v4, v7);
  }
  uint64_t v5 = *((unsigned int *)v9 + 6);
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_100610F00(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100610F18(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB1E8);
  }
  uint64_t v4 = (unsigned __int8 *)sub_100030F10((uint64_t)off_1009F7EF8, a2, 1);
  if (v4)
  {
    uint64_t v5 = v4;
    if (sub_100610F9C((uint64_t)v4, v4)) {
      sub_100611000(a1, v5);
    }
  }
  return 0;
}

uint64_t sub_100610F9C(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB228);
  }
  uint64_t v3 = off_1009F8770;

  return sub_100040694((uint64_t)v3, a2);
}

uint64_t sub_100611000(uint64_t a1, unsigned __int8 *a2)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009BB308);
  }
  char v4 = *((unsigned char *)off_1009F8098 + 431);
  if (sub_100475E4C((uint64_t)a2, 0x80000u) != 4) {
    goto LABEL_12;
  }
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009BB308);
  }
  if (sub_100290CEC((uint64_t)off_1009F8098, (uint64_t)a2))
  {
    uint64_t v5 = qword_100A19ED8;
    if (!os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    sub_100474E18((uint64_t)a2, __p);
    if (v14 >= 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v16 = v6;
    uint64_t v7 = "Easy Unpairing device %{public}s - Wait for Easy Unpair to complete before tearing down link";
  }
  else
  {
LABEL_12:
    uint64_t v5 = qword_100A19EB8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_19;
    }
    sub_100474E18((uint64_t)a2, __p);
    if (v14 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = (void **)__p[0];
    }
    *(_DWORD *)long long buf = 136446210;
    uint64_t v16 = v8;
    uint64_t v7 = "Unpairing device %{public}s - defer unpairing";
  }
  _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, buf, 0xCu);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
LABEL_19:
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1 + 536);
  *(void *)(a1 + 600) = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  sub_10003AFE8((uint64_t)__p);
  if (a2[960])
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009BB1E8);
    }
    sub_1004AD808((uint64_t)off_1009F7EF8);
  }
  uint64_t v9 = *(void *)(a1 + 40);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1006112D0;
  void v11[3] = &unk_1009A0160;
  v11[4] = a1;
  void v11[5] = a2;
  char v12 = v4;
  sub_1004AFF58(v9, 500, v11);
  sub_10003AFB4((uint64_t)__p);
  return 0;
}

void sub_1006112B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
}

uint64_t sub_1006112D0(uint64_t a1)
{
  return sub_1006112E0(*(void *)(a1 + 32), *(unsigned __int8 **)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_1006112E0(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  if (*(unsigned char *)(a1 + 272))
  {
    uint64_t v5 = a2[128];
    uint64_t v6 = a2[129];
    uint64_t v7 = a2[130];
    uint64_t v8 = a2[131];
    uint64_t v9 = a2[132];
    uint64_t v10 = a2[133];
    __n128 v42 = 0uLL;
    int v43 = 0;
    sub_100600E3C((uint64_t)&v42);
    if (qword_1009F8778 != -1) {
      dispatch_once(&qword_1009F8778, &stru_1009BB228);
    }
    if (sub_100618630((uint64_t)off_1009F8770, a2, &v42))
    {
      int v11 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18((uint64_t)a2, &__p);
        if (v36 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        *(_DWORD *)long long buf = 136446210;
        *(void *)&uint8_t buf[4] = p_p;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Device %{public}s -  already unpaired", buf, 0xCu);
        if (SHIBYTE(v36) < 0) {
          operator delete(__p);
        }
      }
      long long __p = 0;
      __int16 v35 = 0;
      sub_10003AED0((uint64_t)&__p, a1 + 536);
      *(void *)(a1 + 600) = 0;
      sub_10003AFB4((uint64_t)&__p);
    }
    else
    {
      sub_100611A00(a1, a2, 0, a3);
      uint64_t v28 = v10;
      long long v15 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = &__p;
        sub_100474E18((uint64_t)a2, &__p);
        if (v36 < 0) {
          uint64_t v16 = __p;
        }
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009BB308);
        }
        long long v17 = sub_100291680((uint64_t)off_1009F8098, a3);
        *(_DWORD *)long long buf = 136446466;
        *(void *)&uint8_t buf[4] = v16;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&unsigned char buf[14] = v17;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Unpairing device %{public}s - disconnecting and removing link key with unpair type - %s", buf, 0x16u);
        if (SHIBYTE(v36) < 0) {
          operator delete(__p);
        }
      }
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009BB328);
      }
      sub_1004D2D54((uint64_t)off_1009F8088, (uint64_t)a2, 1);
      sub_10048CB30((uint64_t)a2, 0);
      uint64_t v18 = (v5 << 40) | (v6 << 32) | (v7 << 24) | (v8 << 16) | (v9 << 8) | v28;
      long long __p = 0;
      __int16 v35 = &__p;
      uint64_t v36 = 0x4012000000;
      __int16 v37 = sub_10004D11C;
      int v38 = nullsub_26;
      __int16 v39 = "";
      v40[0] = 0;
      v40[1] = 0;
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
      }
      sub_100014B58(v40, off_1009F7ED8, v18, 0, 0, 0, 0);
      if (uuid_is_null((const unsigned __int8 *)v35 + 48)) {
        goto LABEL_39;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
      }
      long long v19 = off_1009F7ED8;
      long long v20 = sub_100031234((const unsigned __int8 *)v35 + 48);
      sub_10004191C(v31, "_CTKD_");
      int v21 = sub_100030A04((uint64_t)v19, v20, (uint64_t)v31);
      if (v32 < 0) {
        operator delete(v31[0]);
      }

      if (!v21)
      {
LABEL_39:
        BOOL v26 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
        {
          int v27 = sub_1006ACEAC();
          sub_1007866D8(v27, (uint64_t)v33, v26);
        }
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009BB248);
        }
        sub_100715DB8(qword_1009F7EC8, v18, 0);
      }
      else
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BB2E8);
        }
        __n128 v22 = off_1009F7ED8;
        char v23 = sub_100031234((const unsigned __int8 *)v35 + 48);
        uint64_t v24 = sub_100030398((uint64_t)v22, v23);
        v24[161] = 0;
        if (!v24[160]) {
          v24[162] = 0;
        }

        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009BB248);
        }
        sub_100715DB8(qword_1009F7EC8, v18, 1);
        uint64_t v25 = sub_100019878();
        v30[0] = _NSConcreteStackBlock;
        v30[1] = 3221225472;
        v30[2] = sub_100611C68;
        v30[3] = &unk_1009BB068;
        v30[4] = &__p;
        sub_100013018(v25, v30);
      }
      sub_10047D614((uint64_t)a2, 0);
      if (qword_1009F8778 != -1) {
        dispatch_once(&qword_1009F8778, &stru_1009BB228);
      }
      sub_100618F98((uint64_t)off_1009F8770, (uint64_t)a2);
      if (qword_1009F8778 != -1) {
        dispatch_once(&qword_1009F8778, &stru_1009BB228);
      }
      if (sub_100618A68((uint64_t)off_1009F8770, a2, a3))
      {
        sub_10047D614((uint64_t)a2, 1);
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
          sub_1007866A4();
        }
      }
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      sub_10003AED0((uint64_t)buf, a1 + 536);
      *(void *)(a1 + 600) = 0;
      sub_10003AFE8((uint64_t)buf);
      sub_10003AFB4((uint64_t)buf);
      _Block_object_dispose(&__p, 8);
    }
    nullsub_95(&v42);
    return 0;
  }
  else
  {
    uint64_t v13 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_1007865EC((uint64_t)a2, v13);
    }
    long long __p = 0;
    __int16 v35 = 0;
    sub_10003AED0((uint64_t)&__p, a1 + 536);
    *(void *)(a1 + 600) = 0;
    sub_10003AFB4((uint64_t)&__p);
    return 111;
  }
}

void sub_100611960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  _Block_object_dispose(&a24, 8);
  nullsub_95(v36 - 128);
  _Unwind_Resume(a1);
}

uint64_t sub_100611A00(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)a2, __p);
    uint64_t v9 = v24 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a4;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = a3;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Sending 'device unpaired' event for device %{public}s with UnpairInitiatorType %d, result %d", buf, 0x18u);
    if (v24 < 0) {
      operator delete(__p[0]);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, a1 + 416);
  memset(buf, 0, sizeof(buf));
  sub_100040550(buf, a1 + 480);
  sub_10003AFE8((uint64_t)__p);
  for (uint64_t i = *(void **)buf; i != *(void **)&buf[8]; ++i)
    uint64_t v10 = (*(uint64_t (**)(void, unsigned __int8 *, uint64_t))(*(void *)*i + 32))(*i, a2, a3);
  uint64_t v12 = a2[128];
  uint64_t v13 = a2[129];
  uint64_t v14 = a2[130];
  uint64_t v15 = a2[131];
  uint64_t v16 = a2[132];
  uint64_t v17 = a2[133];
  char v18 = sub_100612240(v10, a4);
  uint64_t v19 = sub_1004AF8EC();
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 3221225472;
  void v21[2] = sub_1006122B0;
  v21[3] = &unk_100998A58;
  v21[4] = (v12 << 40) | (v13 << 32) | (v14 << 24) | (v15 << 16) | (v16 << 8) | v17;
  char v22 = v18;
  sub_100013018(v19, v21);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  return sub_10003AFB4((uint64_t)__p);
}

void sub_100611C2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_100611C68(uint64_t a1)
{
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BB348);
  }
  uint64_t v2 = qword_1009F7F08;
  sub_100031234((const unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 48));
  id v3 = (id)objc_claimAutoreleasedReturnValue();
  sub_1006386B4(v2, v3);
}

void sub_100611CF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

BOOL sub_100611D0C()
{
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB228);
  }
  BOOL v0 = off_1009F8770;

  return sub_1006185D0((uint64_t)v0);
}

uint64_t sub_100611D60(uint64_t result, unsigned __int8 *a2, char a3)
{
  if ((a3 & 1) == 0)
  {
    char v4 = (void *)result;
    v19[0] = 0;
    v19[1] = 0;
    sub_10003AED0((uint64_t)v19, result + 280);
    uint64_t v5 = (char **)(v4 + 43);
    if (!sub_1004A8390((uint64_t)(v4 + 43), (uint64_t)a2))
    {
      uint64_t v7 = (unsigned __int8 **)v4[44];
      unint64_t v6 = v4[45];
      if ((unint64_t)v7 >= v6)
      {
        uint64_t v9 = ((char *)v7 - *v5) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          abort();
        }
        uint64_t v10 = v6 - (void)*v5;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_1000405F8((uint64_t)(v4 + 45), v12);
        }
        else {
          uint64_t v13 = 0;
        }
        uint64_t v14 = (unsigned __int8 **)&v13[8 * v9];
        uint64_t v15 = &v13[8 * v12];
        *uint64_t v14 = a2;
        uint64_t v8 = v14 + 1;
        uint64_t v17 = (char *)v4[43];
        uint64_t v16 = (char *)v4[44];
        if (v16 != v17)
        {
          do
          {
            char v18 = (unsigned __int8 *)*((void *)v16 - 1);
            v16 -= 8;
            *--uint64_t v14 = v18;
          }
          while (v16 != v17);
          uint64_t v16 = *v5;
        }
        v4[43] = v14;
        v4[44] = v8;
        v4[45] = v15;
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *uint64_t v7 = a2;
        uint64_t v8 = v7 + 1;
      }
      v4[44] = v8;
    }
    sub_10003AFE8((uint64_t)v19);
    sub_10060B7AC((uint64_t)v4, a2, 0);
    return sub_10003AFB4((uint64_t)v19);
  }
  return result;
}

void sub_100611E88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100611E9C(uint64_t a1, unsigned __int8 *a2, char a3)
{
  return sub_100611D60(a1 - 16, a2, a3);
}

uint64_t sub_100611EB0(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 416);
  char v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_100040550(&v4, a1 + 480);
  sub_10003AFE8((uint64_t)v7);
  uint64_t v2 = v4;
  if (v4 != v5)
  {
    do
    {
      (*(void (**)(void))(**(void **)v2 + 40))();
      v2 += 8;
    }
    while (v2 != v5);
    uint64_t v2 = v4;
  }
  if (v2)
  {
    uint64_t v5 = v2;
    operator delete(v2);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100611F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100611F94(uint64_t a1)
{
  return sub_100611EB0(a1 - 16);
}

uint64_t sub_100611F9C(uint64_t a1, uint64_t a2)
{
  sub_100611FF0(a1, a2, 1);
  uint64_t result = *(void *)(a1 + 112);
  if (result)
  {
    return sub_100606EF8(result, a2);
  }
  return result;
}

uint64_t sub_100611FF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a3 ? "incoming device" : "device";
    sub_100474E18(a2, &__p);
    uint64_t v8 = v13 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446466;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&unsigned char buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Sending 'pairing started' event for %{public}s %s", buf, 0x16u);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p);
    }
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 416);
  long long __p = 0;
  unint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_100040550(&__p, a1 + 480);
  sub_10003AFE8((uint64_t)buf);
  uint64_t v9 = __p;
  if (__p != v12)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v9 + 16))(*v9, a2, a3);
      ++v9;
    }
    while (v9 != v12);
    uint64_t v9 = __p;
  }
  if (v9)
  {
    unint64_t v12 = v9;
    operator delete(v9);
  }
  return sub_10003AFB4((uint64_t)buf);
}

void sub_100612194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1006121CC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_10060C9B0(a1, a2, 0);
}

uint64_t sub_1006121D4(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BB368);
  }
  uint64_t v2 = off_1009F8150;
  uint64_t v3 = *(void *)(a1 + 32);

  return sub_1004FA594((uint64_t)v2, 1, v3, 1);
}

uint64_t sub_100612240(uint64_t a1, unsigned int a2)
{
  if (a2 >= 4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100786724();
    }
    LOBYTE(v2) = 0;
  }
  else
  {
    return (0xC9CBCAC8 >> (8 * a2));
  }
  return v2;
}

uint64_t sub_1006122B0(uint64_t a1)
{
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BB368);
  }
  int v2 = off_1009F8150;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 40);

  return sub_1004FA594((uint64_t)v2, 0, v3, v4);
}

void *sub_10061231C(void *a1)
{
  *a1 = off_1009BB098;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100612388(void *a1)
{
  *a1 = off_1009BB098;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

void sub_100612414(uint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB208);
  }
  uint64_t v2 = off_1009F8760;
  uint64_t v3 = *(void *)(a1 + 16);

  sub_10060D068(v2, v3);
}

void *sub_100612478(void *a1)
{
  *a1 = off_1009BB0D0;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_1006124E4(void *a1)
{
  *a1 = off_1009BB0D0;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

void sub_100612570(uint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB208);
  }
  uint64_t v2 = off_1009F8760;
  uint64_t v3 = *(void *)(a1 + 16);

  sub_10060DDC4(v2, v3);
}

void *sub_1006125D4(void *a1)
{
  *a1 = off_1009BB108;
  uint64_t v2 = a1[2];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  return a1;
}

void sub_100612640(void *a1)
{
  *a1 = off_1009BB108;
  uint64_t v1 = a1[2];
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }

  operator delete();
}

void sub_1006126CC(uint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB208);
  }
  uint64_t v2 = off_1009F8760;
  uint64_t v3 = *(void *)(a1 + 16);

  sub_10060E5EC(v2, v3);
}

void sub_100612734()
{
}

uint64_t sub_100612748(uint64_t a1)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB208);
  }
  uint64_t v2 = off_1009F8760;

  return sub_10060EB10((uint64_t)v2, a1 + 10, a1 + 26, a1 + 42, a1 + 58);
}

void sub_1006127B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1004AF8EC();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100612838;
  v6[3] = &unk_100998260;
  void v6[4] = a1;
  void v6[5] = a3;
  sub_100013018(v5, v6);
}

void sub_100612838(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(void *)(v1 + 616);
  uint64_t v4 = *(void *)(v3 - 8);
  *(void *)(v1 + 616) = v3 - 8;
  uint64_t v5 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v4, __p);
    uint64_t v6 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315394;
    uint64_t v15 = v6;
    __int16 v16 = 1024;
    BOOL v17 = v2 == 1;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "privacySyncAlertCB for device %s allow:%d", buf, 0x12u);
    if (v13 < 0)
    {
      operator delete(__p[0]);
      if (v4) {
        goto LABEL_7;
      }
LABEL_24:
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
        sub_10078678C();
      }
      goto LABEL_26;
    }
  }
  if (!v4) {
    goto LABEL_24;
  }
LABEL_7:
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB1E8);
  }
  sub_1004ABE38((uint64_t)off_1009F7EF8, v4, 0, v2 == 1, v2 == 1, v2 == 1, v2 == 1);
  buf[0] = 0;
  uint64_t v7 = sub_1003708B0();
  sub_10004191C(__p, "_PENDING_PRIVACY_SYNC_POPUP_");
  if ((*(unsigned int (**)(uint64_t, uint64_t, void **, uint8_t *))(*(void *)v7 + 784))(v7, v4, __p, buf)) {
    BOOL v8 = 1;
  }
  else {
    BOOL v8 = buf[0] == 0;
  }
  int v9 = !v8;
  if (v13 < 0)
  {
    operator delete(__p[0]);
    if (!v9) {
      goto LABEL_26;
    }
  }
  else if (!v9)
  {
    goto LABEL_26;
  }
  uint64_t v10 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "_CTKD_ device pending for contacts/favorites sync, removing tag", (uint8_t *)__p, 2u);
  }
  uint64_t v11 = sub_1003708B0();
  sub_10004191C(__p, "_PENDING_PRIVACY_SYNC_POPUP_");
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v11 + 800))(v11, v4, __p);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
LABEL_26:
  CFRelease(*(CFTypeRef *)(v1 + 632));
  *(void *)(v1 + 632) = 0;
}

void sub_100612AEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100612B14(uint64_t a1)
{
  if (*(void *)(a1 + 632)) {
    return 0;
  }
  if (!*(void *)(*(void *)(a1 + 616) - 8))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_1007867C0();
    }
    return 0;
  }
  uint64_t v3 = sub_100379650(@"SYNC_CONTACTS_TITLE", @"Allow Contacts and Favorites Sync?");
  uint64_t v4 = sub_100379650(@"SYNC_ALLOW_BUTTON", @"Allow");
  uint64_t v5 = sub_100379650(@"SYNC_DISALLOW_BUTTON", @"Don’t Allow");
  uint64_t v6 = sub_100379650(@"SYNC_CONTACTS_MESSAGE", @"Your car may request your contacts, phone favorites, and recent phone calls over Bluetooth. Do you wish to allow this? CarPlay will work without syncing.");
  v15[0] = kCFUserNotificationAlertTopMostKey;
  v15[1] = SBUserNotificationAllowMenuButtonDismissal;
  v16[0] = &__kCFBooleanTrue;
  v16[1] = &__kCFBooleanTrue;
  void v15[2] = SBUserNotificationDismissOnLock;
  void v15[3] = kCFUserNotificationAlertHeaderKey;
  void v16[2] = &__kCFBooleanTrue;
  void v16[3] = v3;
  uint64_t v7 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:4];
  id v8 = [v7 mutableCopy];

  [v8 setObject:v6 forKey:kCFUserNotificationAlertMessageKey];
  [v8 setObject:v5 forKey:kCFUserNotificationDefaultButtonTitleKey];
  [v8 setObject:v4 forKey:kCFUserNotificationAlternateButtonTitleKey];
  int v9 = CFUserNotificationCreate(kCFAllocatorDefault, 0.0, 0x10003uLL, 0, (CFDictionaryRef)v8);
  *(void *)(a1 + 632) = v9;
  if (v9)
  {
    uint64_t v1 = 0;
  }
  else
  {
    uint64_t v10 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Failed to create Privacy Sync notification", v14, 2u);
      int v9 = *(__CFUserNotification **)(a1 + 632);
    }
    else
    {
      int v9 = 0;
    }
    uint64_t v1 = 1;
  }
  CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v9, (CFUserNotificationCallBack)sub_100612E64, 0);
  if (!RunLoopSource)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_1007867F4();
    }
    CFRelease(*(CFTypeRef *)(a1 + 632));
    uint64_t v1 = 1;
  }
  Main = CFRunLoopGetMain();
  CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
  CFRelease(RunLoopSource);

  return v1;
}

void sub_100612E0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100612E64(uint64_t a1, uint64_t a2)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB208);
  }
  uint64_t v3 = off_1009F8760;

  sub_1006127B8((uint64_t)v3, a2, a2);
}

uint64_t sub_100612EC8(void *a1)
{
  uint64_t v2 = (void *)a1[5];
  uint64_t v3 = (void *)v2[77];
  unint64_t v4 = v2[78];
  if ((unint64_t)v3 >= v4)
  {
    uint64_t v6 = v2[76];
    uint64_t v7 = ((uint64_t)v3 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61) {
      abort();
    }
    uint64_t v8 = v4 - v6;
    uint64_t v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1)) {
      uint64_t v9 = v7 + 1;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v10 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v9;
    }
    if (v10) {
      uint64_t v11 = (char *)sub_1000405F8((uint64_t)(v2 + 78), v10);
    }
    else {
      uint64_t v11 = 0;
    }
    unint64_t v12 = &v11[8 * v7];
    char v13 = &v11[8 * v10];
    *(void *)unint64_t v12 = a1[6];
    uint64_t v5 = v12 + 8;
    uint64_t v14 = (char *)v2[77];
    uint64_t v15 = (char *)v2[76];
    if (v14 != v15)
    {
      do
      {
        uint64_t v16 = *((void *)v14 - 1);
        v14 -= 8;
        *((void *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      uint64_t v14 = (char *)v2[76];
    }
    v2[76] = v12;
    v2[77] = v5;
    v2[78] = v13;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *uint64_t v3 = a1[6];
    uint64_t v5 = v3 + 1;
  }
  v2[77] = v5;
  uint64_t result = sub_100612B14((uint64_t)v2);
  *(_DWORD *)(*(void *)(a1[4] + 8) + 24) = result;
  return result;
}

void sub_100612FC8()
{
}

uint64_t sub_100612FDC(uint64_t a1, uint64_t a2)
{
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB208);
  }
  uint64_t v3 = off_1009F8760;
  unint64_t v4 = *(void *)(a1 + 24);

  return sub_10060F1E4((uint64_t)v3, a2, v4);
}

double sub_100613040@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  unint64_t v4 = (std::string *)sub_10004191C((void *)a2, "");
  std::string::assign(v4, "\nPairingManager STATUS :{\n");
  uint64_t v5 = (void *)(a2 + 8);
  if (*(char *)(a2 + 23) >= 0) {
    size_t v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v6 = *(void *)(a2 + 8);
  }
  memset(&v30, 0, sizeof(v30));
  uint64_t v7 = &v30;
  sub_1002EA240((uint64_t)&v30, v6 + 16);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v7 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v6)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v8 = (const void *)a2;
    }
    else {
      uint64_t v8 = *(const void **)a2;
    }
    memmove(v7, v8, v6);
  }
  strcpy((char *)v7 + v6, "\tfStackStarted: ");
  if (*(unsigned char *)(a1 + 272)) {
    uint64_t v9 = "YES";
  }
  else {
    uint64_t v9 = "NO";
  }
  unint64_t v10 = std::string::append(&v30, v9);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  unint64_t v12 = std::string::append(&v31, "\n");
  std::string::size_type v13 = v12->__r_.__value_.__r.__words[0];
  *(void *)&long long __p = v12->__r_.__value_.__l.__size_;
  *(void *)((char *)&__p + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  char v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v13;
  *uint64_t v5 = __p;
  *(void *)(a2 + 15) = *(void *)((char *)&__p + 7);
  *(unsigned char *)(a2 + 23) = v14;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v15 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v15 = *(void *)(a2 + 8);
  }
  memset(&v30, 0, sizeof(v30));
  uint64_t v16 = &v30;
  sub_1002EA240((uint64_t)&v30, v15 + 12);
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v16 = (std::string *)v30.__r_.__value_.__r.__words[0];
  }
  if (v15)
  {
    if (*(char *)(a2 + 23) >= 0) {
      BOOL v17 = (const void *)a2;
    }
    else {
      BOOL v17 = *(const void **)a2;
    }
    memmove(v16, v17, v15);
  }
  strcpy((char *)v16 + v15, "\tfAgent : {\n");
  uint64_t v18 = *(void *)(a1 + 112);
  if (v18) {
    sub_100608B8C(v18, (uint64_t)&__p);
  }
  else {
    sub_10004191C(&__p, "\t\t(null)");
  }
  if ((v33 & 0x80u) == 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if ((v33 & 0x80u) == 0) {
    std::string::size_type v20 = v33;
  }
  else {
    std::string::size_type v20 = *((void *)&__p + 1);
  }
  int v21 = std::string::append(&v30, p_p, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  char v23 = std::string::append(&v31, "}\n");
  std::string::size_type v24 = v23->__r_.__value_.__r.__words[0];
  v34[0] = v23->__r_.__value_.__l.__size_;
  *(void *)((char *)v34 + 7) = *(std::string::size_type *)((char *)&v23->__r_.__value_.__r.__words[1] + 7);
  char v25 = HIBYTE(v23->__r_.__value_.__r.__words[2]);
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  *(void *)a2 = v24;
  *uint64_t v5 = v34[0];
  *(void *)(a2 + 15) = *(void *)((char *)v34 + 7);
  *(unsigned char *)(a2 + 23) = v25;
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v31.__r_.__value_.__l.__data_);
  }
  if ((char)v33 < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v30.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) >= 0) {
    size_t v26 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    size_t v26 = *(void *)(a2 + 8);
  }
  memset(&v31, 0, sizeof(v31));
  int v27 = &v31;
  sub_1002EA240((uint64_t)&v31, v26 + 29);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    int v27 = (std::string *)v31.__r_.__value_.__r.__words[0];
  }
  if (v26)
  {
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v28 = (const void *)a2;
    }
    else {
      uint64_t v28 = *(const void **)a2;
    }
    memmove(v27, v28, v26);
  }
  strcpy((char *)v27 + v26, "} END PairingManager STATUS\n\n");
  if (*(char *)(a2 + 23) < 0) {
    operator delete(*(void **)a2);
  }
  double result = *(double *)&v31.__r_.__value_.__l.__data_;
  *(std::string *)a2 = v31;
  return result;
}

void sub_100613400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (*(char *)(v28 + 23) < 0) {
    operator delete(*(void **)v28);
  }
  _Unwind_Resume(exception_object);
}

void sub_100613498()
{
}

uint64_t sub_1006134AC()
{
  return 30;
}

uint64_t sub_1006134BC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void sub_1006134C4(id a1)
{
}

void sub_100613508()
{
}

void sub_10061352C(id a1)
{
}

void sub_100613570()
{
}

void sub_100613594(id a1)
{
}

void sub_1006135D8()
{
}

void sub_1006135FC(id a1)
{
}

void sub_100613640()
{
}

void sub_100613664(id a1)
{
}

void sub_1006136A8()
{
}

void sub_1006136CC(id a1)
{
}

void sub_100613710()
{
}

void sub_100613734(id a1)
{
}

void sub_100613778()
{
}

void sub_10061379C(id a1)
{
}

void sub_1006137E0()
{
}

void sub_100613804(id a1)
{
}

void sub_100613848()
{
}

void sub_10061386C(id a1)
{
}

void sub_1006138B0()
{
}

void sub_1006138D4(id a1)
{
}

void sub_100613918()
{
}

void sub_10061393C(id a1)
{
}

void sub_100613980()
{
}

void sub_1006139A4(id a1)
{
}

void sub_100613B34()
{
}

void sub_100613B58(void *a1@<X0>, std::string *a2@<X8>)
{
  *(_OWORD *)__str = 0u;
  memset(v50, 0, sizeof(v50));
  int v48 = 0;
  __n128 v47 = 0uLL;
  uint64_t v4 = a1[1];
  __n128 v5 = *(__n128 *)(v4 + 4);
  int v46 = *(_DWORD *)(v4 + 20);
  __n128 v45 = v5;
  sub_100035F98(&v47, &v45);
  int v44 = 0;
  long long v43 = xmmword_1007BFE38;
  if (sub_10022A44C(v6, (unsigned __int8 *)&v43))
  {
    uint64_t v7 = "Primary Service";
LABEL_21:
    int v8 = *(unsigned __int16 *)a1[1];
LABEL_22:
    snprintf(__str, 0x2CuLL, "0x%04X %-20s", v8, v7);
    goto LABEL_23;
  }
  int v42 = 0;
  long long v41 = xmmword_1007BFE4C;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v41))
  {
    uint64_t v7 = "Secondary Service";
    goto LABEL_21;
  }
  int v40 = 0;
  long long v39 = xmmword_1007BFE60;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v39))
  {
    uint64_t v7 = "Included Service";
    goto LABEL_21;
  }
  int v38 = 0;
  long long v37 = xmmword_1007BFE74;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v37))
  {
    uint64_t v7 = "Characteristic";
    goto LABEL_21;
  }
  int v36 = 0;
  long long v35 = xmmword_1007BFE88;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v35))
  {
    uint64_t v7 = "Characteristic Value";
    goto LABEL_21;
  }
  int v34 = 0;
  long long v33 = xmmword_1007BFE9C;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v33))
  {
    uint64_t v7 = "Extended Properties";
    goto LABEL_21;
  }
  int v32 = 0;
  long long v31 = xmmword_1007BFEB0;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v31))
  {
    uint64_t v7 = "User Description";
    goto LABEL_21;
  }
  int v30 = 0;
  long long v29 = xmmword_1007BFEC4;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v29))
  {
    uint64_t v7 = "Client Configuration";
    goto LABEL_21;
  }
  int v28 = 0;
  long long v27 = xmmword_1007BFED8;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v27))
  {
    uint64_t v7 = "Server Configuration";
    goto LABEL_21;
  }
  int v26 = 0;
  long long v25 = xmmword_1007BFEEC;
  if (sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v25))
  {
    uint64_t v7 = "Format";
    goto LABEL_21;
  }
  int v24 = 0;
  long long v23 = xmmword_1007BFF00;
  BOOL v16 = sub_10022A44C((unsigned __int8 *)&v47, (unsigned __int8 *)&v23);
  int v8 = *(unsigned __int16 *)a1[1];
  if (v16)
  {
    uint64_t v7 = "Aggregate Format";
    goto LABEL_22;
  }
  sub_1000417A8((uint64_t)&v47, &v22);
  if ((v22.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    BOOL v17 = &v22;
  }
  else {
    BOOL v17 = (std::string *)v22.__r_.__value_.__r.__words[0];
  }
  snprintf(__str, 0x2CuLL, "0x%04X %-20s", v8, (const char *)v17);
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
LABEL_23:
  sub_10004191C(&v20, __str);
  uint64_t v9 = std::string::append(&v20, " [ ");
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(void **__return_ptr, void *))(*a1 + 24))(__p, a1);
  if ((v19 & 0x80u) == 0) {
    long long v11 = __p;
  }
  else {
    long long v11 = (void **)__p[0];
  }
  if ((v19 & 0x80u) == 0) {
    std::string::size_type v12 = v19;
  }
  else {
    std::string::size_type v12 = (std::string::size_type)__p[1];
  }
  std::string::size_type v13 = std::string::append(&v21, (const std::string::value_type *)v11, v12);
  long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v22.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v22.__r_.__value_.__l.__data_ = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  size_t v15 = std::string::append(&v22, " ]");
  *a2 = *v15;
  v15->__r_.__value_.__l.__size_ = 0;
  v15->__r_.__value_.__r.__words[2] = 0;
  v15->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v22.__r_.__value_.__l.__data_);
  }
  if ((char)v19 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
}

void sub_100613F74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100613FE0(unsigned char *a1)
{
  uint64_t result = (*(uint64_t (**)(unsigned char *))(*(void *)a1 + 32))(a1);
  a1[20] = result;
  return result;
}

BOOL sub_100614028(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3 == 2)
  {
    __int16 v3 = *a2;
    *(_WORD *)(a1 + 72) = v3;
    *(_WORD *)(a1 + 72) = v3 | (a2[1] << 8);
  }
  return a3 == 2;
}

uint64_t sub_100614050(uint64_t a1)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  long long v9 = 0u;
  sub_10004C67C((uint64_t)&v9);
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 20);
  __n128 v26 = *(__n128 *)(v2 + 4);
  int v27 = v3;
  sub_100035F98(&v28, &v26);
  int v25 = 0;
  long long v24 = xmmword_1007BFEC4;
  BOOL v5 = sub_10022A44C(v4, (unsigned __int8 *)&v24);
  __int16 v6 = *(_WORD *)(a1 + 72);
  if (v5)
  {
    if (!*(_WORD *)(a1 + 72)) {
      goto LABEL_9;
    }
    if (v6)
    {
      sub_10003AB28((uint64_t)v10);
      __int16 v6 = *(_WORD *)(a1 + 72);
    }
    if ((v6 & 2) != 0) {
      goto LABEL_9;
    }
  }
  else if (!*(_WORD *)(a1 + 72) || (v6 & 1) != 0)
  {
LABEL_9:
    sub_10003AB28((uint64_t)v10);
  }
  std::stringbuf::str();
  *(void *)((char *)&v10[-1]
  *(void *)&v10[0] = v7;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1006142B0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1006142D0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    operator delete[]();
  }
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  if (a3) {
    operator new[]();
  }
  return result;
}

uint64_t sub_100614358(uint64_t a1)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v10 = 0u;
  long long v11 = 0u;
  memset(v9, 0, sizeof(v9));
  long long v8 = 0u;
  sub_10004C67C((uint64_t)&v8);
  LOBYTE(__p) = 34;
  uint64_t v2 = sub_10003AB28((uint64_t)v9);
  sub_1003C05B8(a1, &__p);
  uint64_t v3 = sub_10003AB28(v2);
  char v23 = 34;
  sub_10003AB28(v3);
  if (v7 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  *(void *)((char *)&v9[-1]
  *(void *)&v9[0] = v4;
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10061455C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

BOOL sub_10061458C(uint64_t a1, unsigned __int8 *a2, int a3)
{
  if (a3 == 2)
  {
    __int16 v3 = *a2;
    *(_WORD *)(a1 + 72) = v3;
    *(_WORD *)(a1 + 72) = v3 | (a2[1] << 8);
  }
  return a3 == 2;
}

uint64_t sub_1006145B4(uint64_t a1)
{
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v8 = 0u;
  memset(v6, 0, sizeof(v6));
  long long v5 = 0u;
  sub_10004C67C((uint64_t)&v5);
  __int16 v2 = *(_WORD *)(a1 + 72);
  if (!v2) {
    goto LABEL_5;
  }
  if (v2)
  {
    sub_10003AB28((uint64_t)v6);
    __int16 v2 = *(_WORD *)(a1 + 72);
  }
  if ((v2 & 2) != 0) {
LABEL_5:
  }
    sub_10003AB28((uint64_t)v6);
  std::stringbuf::str();
  *(void *)((char *)&v6[-1]
  *(void *)&v6[0] = v3;
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100614790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1006147A4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 == 7)
  {
    *(unsigned char *)(a1 + 72) = *(unsigned char *)a2;
    *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 1);
    *(_WORD *)(a1 + 74) = *(_WORD *)(a2 + 2);
    *(unsigned char *)(a1 + 76) = *(unsigned char *)(a2 + 4);
    *(_WORD *)(a1 + 78) = *(_WORD *)(a2 + 5);
  }
  return a3 == 7;
}

uint64_t sub_1006147E0()
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v10 = 0u;
  memset(v8, 0, sizeof(v8));
  long long v7 = 0u;
  sub_10004C67C((uint64_t)&v7);
  uint64_t v0 = *(void *)&v8[0];
  *(_DWORD *)((char *)v8 + *(void *)(*(void *)&v8[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v8
                                                                                  + *(void *)(*(void *)&v8[0] - 24)
                                                                                  + 8) & 0xFFFFFFB5 | 8;
  *(_DWORD *)((char *)v8 + *(void *)(v0 - 24) + 8) |= 0x4000u;
  sub_10003AB28((uint64_t)v8);
  uint64_t v1 = std::ostream::operator<<();
  sub_10003AB28(v1);
  uint64_t v2 = std::ostream::operator<<();
  sub_10003AB28(v2);
  uint64_t v3 = std::ostream::operator<<();
  sub_10003AB28(v3);
  uint64_t v4 = std::ostream::operator<<();
  sub_10003AB28(v4);
  std::ostream::operator<<();
  std::stringbuf::str();
  *(void *)((char *)&v8[-1]
  *(void *)&v8[0] = v5;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100614A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100614A70(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result = *(void *)(a1 + 72);
  if (result) {
    operator delete[]();
  }
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  if (a3) {
    operator new[]();
  }
  return result;
}

void sub_100614B14(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1000335D8(&v3, *(const void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
  sub_10004C2C4((uint64_t)&v3, a2);
  uint64_t v3 = &off_100998428;
  if (v4) {
    sub_1000368F4(v4);
  }
}

void sub_100614B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100614BB8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return sub_10004C2C4(a1 + 72, a2);
}

uint64_t sub_100614BC0(uint64_t a1)
{
  uint64_t v28 = 0;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)long long v16 = 0u;
  long long v17 = 0u;
  memset(v15, 0, sizeof(v15));
  long long v14 = 0u;
  sub_10004C67C((uint64_t)&v14);
  uint64_t v2 = sub_10003AB28((uint64_t)v15);
  __n128 v30 = *(__n128 *)(a1 + 76);
  int v31 = *(_DWORD *)(a1 + 92);
  sub_100035F98(&v29, &v30);
  uint64_t v3 = __p;
  sub_1000417A8(v4, __p);
  if (v13 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  strlen((const char *)v3);
  uint64_t v5 = sub_10003AB28(v2);
  sub_10003AB28(v5);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)((char *)__p + 3) = 0;
  LODWORD(__p[0]) = 0;
  snprintf((char *)__p, 7uLL, "0x%04X", *(unsigned __int16 *)(a1 + 74));
  uint64_t v6 = sub_10003AB28((uint64_t)v15);
  strlen((const char *)__p);
  uint64_t v7 = sub_10003AB28(v6);
  sub_10003AB28(v7);
  sub_10003AB28((uint64_t)v15);
  char v8 = *(unsigned char *)(a1 + 72);
  if (v8)
  {
    sub_10003AB28((uint64_t)v15);
    char v8 = *(unsigned char *)(a1 + 72);
  }
  if ((v8 & 2) != 0)
  {
    sub_10003AB28((uint64_t)v15);
    char v8 = *(unsigned char *)(a1 + 72);
  }
  if ((v8 & 4) != 0)
  {
    sub_10003AB28((uint64_t)v15);
    char v8 = *(unsigned char *)(a1 + 72);
  }
  if ((v8 & 8) != 0)
  {
    sub_10003AB28((uint64_t)v15);
    char v8 = *(unsigned char *)(a1 + 72);
  }
  if ((v8 & 0x10) != 0)
  {
    sub_10003AB28((uint64_t)v15);
    char v8 = *(unsigned char *)(a1 + 72);
  }
  if ((v8 & 0x20) != 0)
  {
    sub_10003AB28((uint64_t)v15);
    char v8 = *(unsigned char *)(a1 + 72);
  }
  if ((v8 & 0x40) != 0)
  {
    sub_10003AB28((uint64_t)v15);
    char v8 = *(unsigned char *)(a1 + 72);
  }
  if (v8 < 0) {
    sub_10003AB28((uint64_t)v15);
  }
  sub_10003AB28((uint64_t)v15);
  uint64_t v9 = sub_10003AB28((uint64_t)v15);
  sub_10003AB28(v9);
  std::stringbuf::str();
  *(void *)((char *)&v15[-1]
  *(void *)&v15[0] = v10;
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100614FB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_100614FF0(uint64_t a1)
{
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v12 = 0u;
  memset(v10, 0, sizeof(v10));
  long long v9 = 0u;
  sub_10004C67C((uint64_t)&v9);
  uint64_t v2 = sub_10003AB28((uint64_t)v10);
  __n128 v27 = *(__n128 *)(a1 + 76);
  int v28 = *(_DWORD *)(a1 + 92);
  sub_100035F98(&v26, &v27);
  uint64_t v3 = __str;
  sub_1000417A8(v4, __str);
  if (SBYTE7(v25) < 0) {
    uint64_t v3 = *(char **)__str;
  }
  strlen(v3);
  uint64_t v5 = sub_10003AB28(v2);
  sub_10003AB28(v5);
  if (SBYTE7(v25) < 0) {
    operator delete(*(void **)__str);
  }
  *(_OWORD *)__str = 0u;
  long long v25 = 0u;
  snprintf(__str, 0x20uLL, "0x%04X - 0x%04X", *(unsigned __int16 *)(a1 + 72), *(unsigned __int16 *)(a1 + 74));
  uint64_t v6 = sub_10003AB28((uint64_t)v10);
  strlen(__str);
  sub_10003AB28(v6);
  std::stringbuf::str();
  *(void *)((char *)&v10[-1]
  *(void *)&v10[0] = v7;
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100615290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100742518((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006152CC(uint64_t a1)
{
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)long long v17 = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  long long v15 = 0u;
  sub_10004C67C((uint64_t)&v15);
  uint64_t v2 = sub_10003AB28((uint64_t)v16);
  __n128 v31 = *(__n128 *)(a1 + 72);
  int v32 = *(_DWORD *)(a1 + 88);
  sub_100035F98(&v30, &v31);
  uint64_t v3 = __p;
  sub_1000417A8(v4, __p);
  if (v14 < 0) {
    uint64_t v3 = (void **)__p[0];
  }
  strlen((const char *)v3);
  uint64_t v5 = sub_10003AB28(v2);
  sub_10003AB28(v5);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  *(_DWORD *)((char *)__p + 3) = 0;
  LODWORD(__p[0]) = 0;
  snprintf((char *)__p, 7uLL, "0x%04X", *(unsigned __int16 *)(a1 + 48));
  uint64_t v6 = sub_10003AB28((uint64_t)v16);
  strlen((const char *)__p);
  uint64_t v7 = sub_10003AB28(v6);
  sub_10003AB28(v7);
  sub_10003AB28((uint64_t)v16);
  sub_10003AB28((uint64_t)v16);
  if (*(_DWORD *)(a1 + 16))
  {
    char v8 = (uint64_t *)sub_10003AB28((uint64_t)v16);
    uint64_t v9 = *v8;
    *(_DWORD *)((char *)v8 + *(void *)(*v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v8 + *(void *)(*v8 - 24) + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v8 + *(void *)(v9 - 24) + 8) |= 0x4000u;
    v31.n128_u8[0] = 48;
    uint64_t v10 = sub_10004C5B4(v8, (unsigned __int8 *)&v31);
    *(void *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 8;
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  *(void *)((char *)&v16[-1]
  *(void *)&v16[0] = v11;
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100615690(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_1006156D8()
{
}

void sub_1006156EC()
{
}

void *sub_100615774(void *result)
{
  *uint64_t result = off_1009BB3D0;
  if (result[9]) {
    operator delete[]();
  }
  return result;
}

void sub_1006157D0(void *a1)
{
  *a1 = off_1009BB3D0;
  if (a1[9]) {
    operator delete[]();
  }

  operator delete();
}

void sub_10061584C()
{
}

void sub_100615894()
{
}

uint64_t sub_1006158B8(uint64_t a1, uint64_t a2, int a3)
{
  return 1;
}

void sub_1006158D8()
{
}

void sub_1006158EC()
{
}

void sub_100615978()
{
}

void sub_10061598C()
{
}

void *sub_100615A14(void *result)
{
  *uint64_t result = off_1009BB478;
  if (result[9]) {
    operator delete[]();
  }
  return result;
}

void sub_100615A70(void *a1)
{
  *a1 = off_1009BB478;
  if (a1[9]) {
    operator delete[]();
  }

  operator delete();
}

void sub_100615AEC()
{
}

void sub_100615B34()
{
}

uint64_t sub_100615B58(uint64_t a1, uint64_t a2, int a3)
{
  return 1;
}

void *sub_100615B74(void *a1)
{
  *a1 = off_1009BB4B0;
  a1[9] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[10];
  if (v2) {
    sub_1000368F4(v2);
  }
  return a1;
}

void sub_100615BE0(void *a1)
{
  *a1 = off_1009BB4B0;
  a1[9] = &off_100998428;
  uint64_t v1 = (atomic_uint *)a1[10];
  if (v1) {
    sub_1000368F4(v1);
  }

  operator delete();
}

void sub_100615C6C()
{
}

void sub_100615CB4()
{
}

void sub_100615CDC(void *a1)
{
  sub_100616028(a1);

  operator delete();
}

void sub_100615D14()
{
}

void sub_100615D5C()
{
}

void sub_100615D84()
{
}

void sub_100615D98()
{
}

void sub_100615E2C(void *a1)
{
  sub_1006160E8(a1);

  operator delete();
}

void sub_100615E64()
{
}

void sub_100615EAC()
{
}

uint64_t sub_100615ED0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1009BB570;
  uint64_t v4 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)a1 = off_1009BB3D0;
  *(void *)(a1 + 8) = a1 + 24;
  long long v5 = *(_OWORD *)(a2 + 24);
  long long v6 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v6;
  *(_OWORD *)(a1 + 24) = v5;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  sub_1006142D0(a1, *(void *)(a2 + 72), *(unsigned __int16 *)(a2 + 80));
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  return a1;
}

uint64_t sub_100615F80(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1009BB570;
  uint64_t v3 = *(void *)(a2 + 8);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 20) = *(unsigned char *)(a2 + 20);
  *(void *)a1 = off_1009BB478;
  *(void *)(a1 + 8) = a1 + 24;
  long long v4 = *(_OWORD *)(a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = v5;
  *(_OWORD *)(a1 + 24) = v4;
  *(void *)(a1 + 72) = 0;
  *(_WORD *)(a1 + 80) = 0;
  sub_100614A70(a1, *(void *)(a2 + 72), *(unsigned __int16 *)(a2 + 80));
  return a1;
}

void *sub_100616028(void *a1)
{
  *a1 = off_1009BB4E0;
  uint64_t v3 = (void *)a1[13];
  uint64_t v2 = (void *)a1[14];
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      uint64_t v2 = (void *)a1[14];
    }
    ++v3;
  }
  uint64_t v4 = a1[12];
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  long long v5 = (void *)a1[13];
  if (v5)
  {
    a1[14] = v5;
    operator delete(v5);
  }
  return a1;
}

void *sub_1006160E8(void *a1)
{
  *a1 = off_1009BB540;
  uint64_t v3 = (void *)a1[13];
  uint64_t v2 = (void *)a1[14];
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      uint64_t v2 = (void *)a1[14];
    }
    ++v3;
  }
  long long v5 = (void *)a1[17];
  uint64_t v4 = (void *)a1[18];
  while (v5 != v4)
  {
    if (*v5)
    {
      (*(void (**)(void))(*(void *)*v5 + 8))(*v5);
      uint64_t v4 = (void *)a1[18];
    }
    ++v5;
  }
  long long v6 = (void *)a1[21];
  if (v6)
  {
    a1[22] = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)a1[17];
  if (v7)
  {
    a1[18] = v7;
    operator delete(v7);
  }
  char v8 = (void *)a1[13];
  if (v8)
  {
    a1[14] = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_1006161E0(uint64_t result)
{
  *(void *)uint64_t result = 0;
  *(void *)(result + 8) = 0;
  *(unsigned char *)(result + 16) = 0;
  return result;
}

char *sub_1006161EC(char *result, char *__s)
{
  result[16] = 0;
  if (__s)
  {
    uint64_t v3 = result;
    unsigned __int8 v4 = strlen(__s);
    if (v4 <= 0x10uLL) {
      unsigned __int8 v5 = v4;
    }
    else {
      unsigned __int8 v5 = 16;
    }
    v3[16] = v5;
    return strncpy(v3, __s, v5);
  }
  return result;
}

char *sub_10061625C(char *a1, char *a2)
{
  a1[16] = 0;
  sub_1006161EC(a1, a2);
  return a1;
}

__n128 sub_100616288(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  a1[1].n128_u8[0] = a2[1].n128_u8[0];
  return result;
}

uint64_t sub_10061629C(uint64_t result)
{
  *(unsigned char *)(result + 16) = 0;
  return result;
}

char *sub_1006162A4(char *a1, char *a2)
{
  return a1;
}

uint64_t sub_1006162CC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 16) < *(unsigned __int8 *)(a2 + 16)) {
    return 1;
  }
  unint64_t v3 = bswap64(*(void *)a1);
  unint64_t v4 = bswap64(*(void *)a2);
  if (v3 == v4 && (unint64_t v3 = bswap64(*(void *)(a1 + 8)), v4 = bswap64(*(void *)(a2 + 8)), v3 == v4))
  {
    unsigned int v5 = 0;
  }
  else if (v3 < v4)
  {
    unsigned int v5 = -1;
  }
  else
  {
    unsigned int v5 = 1;
  }
  return v5 >> 31;
}

uint64_t sub_100616330(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

void *sub_100616338@<X0>(unsigned __int8 *__src@<X0>, void *a2@<X8>)
{
  return sub_1002E5698(a2, __src, __src[16]);
}

uint64_t sub_100616348(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(_DWORD *)(a1 + 136) = 0;
  *(void *)(a1 + 32) = dispatch_workloop_create("XPCServer");
  return a1;
}

BOOL sub_1006163A4(void *a1)
{
  a1[13] = 0;
  uint64_t v2 = dispatch_workloop_create("com.apple.server.bluetooth.le.att.xpc");
  a1[5] = v2;
  a1[9] = sub_100616490((uint64_t)a1, "com.apple.server.bluetooth.le.att.xpc", v2);
  unint64_t v3 = dispatch_workloop_create("com.apple.server.bluetooth.le.pipe.xpc");
  a1[6] = v3;
  a1[10] = sub_100616490((uint64_t)a1, "com.apple.server.bluetooth.le.pipe.xpc", v3);
  unint64_t v4 = dispatch_workloop_create("com.apple.server.bluetooth.general.xpc");
  a1[7] = v4;
  a1[11] = sub_100616490((uint64_t)a1, "com.apple.server.bluetooth.general.xpc", v4);
  unsigned int v5 = dispatch_workloop_create("com.apple.server.bluetooth.classic.xpc");
  a1[8] = v5;
  long long v6 = sub_100616490((uint64_t)a1, "com.apple.server.bluetooth.classic.xpc", v5);
  a1[12] = v6;
  if (!a1[9] || !a1[10]) {
    return 0;
  }
  if (a1[11]) {
    BOOL v7 = v6 == 0;
  }
  else {
    BOOL v7 = 1;
  }
  return !v7;
}

_xpc_connection_s *sub_100616490(uint64_t a1, char *name, dispatch_queue_t targetq)
{
  mach_service = xpc_connection_create_mach_service(name, targetq, 1uLL);
  if (mach_service)
  {
    long long v6 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v10 = name;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Registering XPC service \"%{public}s\"", buf, 0xCu);
    }
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_100050D64;
    v8[3] = &unk_1009BB590;
    _OWORD v8[4] = a1;
    v8[5] = name;
    xpc_connection_set_event_handler(mach_service, v8);
    xpc_connection_resume(mach_service);
  }
  return mach_service;
}

void sub_1006165B8(uint64_t a1, char *a2, int a3)
{
  uint64_t v6 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 8))(v6))
  {
    v10[0] = 0;
    v10[1] = v10;
    void v10[2] = 0x4812000000;
    _OWORD v10[3] = sub_10004D128;
    _OWORD v10[4] = sub_10004CE48;
    *(_OWORD *)long long __p = 0u;
    long long v12 = 0u;
    sub_10004191C(&__p[1], a2);
    BOOL v7 = *(NSObject **)(a1 + 32);
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    void v8[2] = sub_1006166E0;
    v8[3] = &unk_1009B5D18;
    int v9 = a3;
    _OWORD v8[4] = v10;
    v8[5] = a1;
    dispatch_async(v7, v8);
    _Block_object_dispose(v10, 8);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[1]);
    }
  }
}

void sub_1006166E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  int v12 = 0;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__s = 0u;
  long long v7 = 0u;
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BB5B0);
  }
  sub_100553C3C(qword_1009F8160, *(_DWORD *)(a1 + 48), __s, 0x64uLL);
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 136));
  __p[0] = (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
  unint64_t v3 = sub_100616CA0((uint64_t **)(v2 + 112), (const void **)__p[0], (uint64_t)&unk_1007BE9D0, (long long **)__p);
  sub_10004191C(__p, __s);
  sub_1005B8FE8((uint64_t **)v3 + 7, (const void **)__p, (uint64_t)__p);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 136));
}

void sub_100616800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100616824(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v2 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ------------------ XPC Server ------------------", buf, 2u);
  }
  unint64_t v3 = *(void **)(a1 + 8);
  if (v3 != (void *)(a1 + 16))
  {
    do
    {
      int v31 = 0;
      long long v29 = 0u;
      long long v30 = 0u;
      long long v27 = 0u;
      long long v28 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v26 = 0u;
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009BB5B0);
      }
      sub_100553C3C(qword_1009F8160, *((_DWORD *)v3 + 8), (char *)buf, 0x64uLL);
      unint64_t v4 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *((_DWORD *)v3 + 10);
        *(_DWORD *)long long v21 = 136315394;
        long long v22 = buf;
        __int16 v23 = 1024;
        int v24 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: process:%s numOfConnections:%d", v21, 0x12u);
      }
      uint64_t v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          long long v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          long long v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          unint64_t v3 = v7;
        }
        while (!v8);
      }
      unint64_t v3 = v7;
    }
    while (v7 != (void *)(a1 + 16));
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 136));
  memset(buf, 0, sizeof(buf));
  *(void *)&long long v26 = 0;
  sub_100616E50((uint64_t *)buf, (const void ***)(a1 + 112));
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 136));
  if ((void)v26)
  {
    long long v9 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v21 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump: ", v21, 2u);
    }
    long long v10 = *(uint8_t **)buf;
    if (*(uint8_t **)buf != &buf[8])
    {
      uint64_t v11 = qword_100A19EC8;
      int v12 = qword_100A19EC8;
      do
      {
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          long long v13 = v10 + 32;
          if ((char)v10[55] < 0) {
            long long v13 = *(uint8_t **)v13;
          }
          *(_DWORD *)long long v21 = 136315138;
          long long v22 = v13;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "statedump:     %s", v21, 0xCu);
          uint64_t v11 = qword_100A19EC8;
          int v12 = qword_100A19EC8;
        }
        char v14 = (uint8_t *)*((void *)v10 + 7);
        long long v15 = v11;
        if (v14 != v10 + 64)
        {
          do
          {
            if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
            {
              long long v16 = v14 + 32;
              if ((char)v14[55] < 0) {
                long long v16 = *(uint8_t **)v16;
              }
              *(_DWORD *)long long v21 = 136315138;
              long long v22 = v16;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:           %s", v21, 0xCu);
              uint64_t v11 = qword_100A19EC8;
              int v12 = qword_100A19EC8;
            }
            else
            {
              int v12 = v15;
            }
            long long v17 = (uint8_t *)*((void *)v14 + 1);
            if (v17)
            {
              do
              {
                long long v18 = v17;
                long long v17 = *(uint8_t **)v17;
              }
              while (v17);
            }
            else
            {
              do
              {
                long long v18 = (uint8_t *)*((void *)v14 + 2);
                BOOL v8 = *(void *)v18 == (void)v14;
                char v14 = v18;
              }
              while (!v8);
            }
            long long v15 = v12;
            char v14 = v18;
          }
          while (v18 != v10 + 64);
        }
        long long v19 = (uint8_t *)*((void *)v10 + 1);
        if (v19)
        {
          do
          {
            long long v20 = v19;
            long long v19 = *(uint8_t **)v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            long long v20 = (uint8_t *)*((void *)v10 + 2);
            BOOL v8 = *(void *)v20 == (void)v10;
            long long v10 = v20;
          }
          while (!v8);
        }
        long long v10 = v20;
      }
      while (v20 != &buf[8]);
    }
  }
  sub_1000518C4((uint64_t)buf, *(void **)&buf[8]);
}

void sub_100616BE4(uint64_t a1)
{
  sub_10004BA28(a1 + 24, *(char **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100616C38(id a1)
{
}

void sub_100616C7C()
{
}

uint64_t *sub_100616CA0(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    BOOL v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_100616D58((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_100616DF8((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_100616D58@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = v6 + 4;
  BOOL v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_10003B098(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100616DE0(_Unwind_Exception *a1)
{
  sub_100616DF8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100616DF8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100616BE4((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t *sub_100616E50(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100616EA8(a1, *a2, a2 + 1);
  return a1;
}

void sub_100616E90(_Unwind_Exception *a1)
{
  sub_1000518C4(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100616EA8(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    unint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = result + 1;
    do
    {
      __n128 result = sub_100616F34(v5, v6, v4 + 4, (long long *)v4 + 2);
      long long v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          BOOL v8 = (const void ***)v7;
          long long v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          unint64_t v4 = (const void **)v8;
        }
        while (!v9);
      }
      unint64_t v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100616F34(uint64_t **a1, uint64_t *a2, const void **a3, long long *a4)
{
  uint64_t v11 = 0;
  int v12 = 0;
  uint64_t v6 = sub_1002B360C(a1, a2, &v12, &v11, a3);
  long long v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    BOOL v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100616FD8((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, (uint64_t)v12, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_100616DF8((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_100616FD8@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = sub_10061704C(v6 + 4, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100617034(_Unwind_Exception *a1)
{
  sub_100616DF8(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10061704C(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_10030BA54(__dst + 3, (const void ***)a2 + 3);
  return __dst;
}

void sub_1006170A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006170C4(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 32);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = v3;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = off_1009BB5E0;
  *(_WORD *)(a1 + 48) = *(_WORD *)(a2 + 48);
  sub_100616288((__n128 *)(a1 + 50), (__n128 *)(a2 + 50));
  return a1;
}

uint64_t sub_100617138(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v9 = 0;
  sub_100026C30((uint64_t)&v9);
  uint64_t v6 = (int)v9;
  uint64_t v7 = SWORD2(v9);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = 1;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = off_1009BB5E0;
  *(unsigned char *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 49) = 0;
  sub_1006161E0(a1 + 50);
  return a1;
}

void *sub_1006171CC(void *a1)
{
  *a1 = off_1009BB5E0;
  nullsub_95((char *)a1 + 50);
  return a1;
}

void sub_100617210(void *a1)
{
  *a1 = off_1009BB5E0;
  nullsub_95((char *)a1 + 50);

  operator delete();
}

uint64_t sub_100617274(uint64_t a1)
{
  *(_WORD *)(a1 + 48) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 8) = 0;
  return sub_10061629C(a1 + 50);
}

uint64_t sub_10061728C()
{
  return 30;
}

unsigned char *sub_100617294(unsigned char *result, __n128 *a2)
{
  if (!result[49])
  {
    int v3 = result;
    sub_100616288((__n128 *)(result + 50), a2);
    v3[49] = 1;
    char v11 = 0;
    sub_10001B8E0(&v11);
    uint64_t v4 = *((void *)v3 + 1);
    uint64_t v5 = nullsub_95(a2);
    unsigned __int8 v6 = sub_100616330((uint64_t)a2);
    sub_1002564F4(1, v4 + 128, v5, v6, v7, v8, v9, v10);
    return sub_10001B8AC(&v11);
  }
  return result;
}

void sub_100617320(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unsigned char *sub_100617334(unsigned char *result)
{
  if (!result[49])
  {
    uint64_t v1 = result;
    result[49] = 1;
    char v6 = 0;
    sub_10001B8E0(&v6);
    sub_1002564F4(0, *((void *)v1 + 1) + 128, 0, 0, v2, v3, v4, v5);
    return sub_10001B8AC(&v6);
  }
  return result;
}

void sub_100617398(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1006173AC(uint64_t a1, uint64_t a2, int a3, char a4, char a5)
{
  uint64_t v13 = 0;
  sub_100026C30((uint64_t)&v13);
  uint64_t v10 = (int)v13;
  uint64_t v11 = SWORD2(v13);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  *(_DWORD *)(a1 + 32) = 2;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = off_1009BB628;
  *(_DWORD *)(a1 + 48) = a3;
  *(unsigned char *)(a1 + 52) = a4;
  *(unsigned char *)(a1 + 53) = a5;
  return a1;
}

__n128 sub_100617448(__n128 *a1, __n128 *a2)
{
  unsigned __int32 v2 = a2[2].n128_u32[0];
  a1->n128_u64[1] = a2->n128_u64[1];
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u32[0] = v2;
  a1[2].n128_u64[1] = 0;
  a1->n128_u64[0] = (unint64_t)off_1009BB628;
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  a1[3].n128_u16[2] = a2[3].n128_u16[2];
  return result;
}

void sub_100617498()
{
}

uint64_t sub_1006174AC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 52);
}

uint64_t sub_1006174B4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_1006174BC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 53);
}

unsigned char *sub_1006174C4(uint64_t a1)
{
  char v9 = 0;
  sub_10001B8E0(&v9);
  sub_100254CB8(1, *(void *)(a1 + 8) + 128, v2, v3, v4, v5, v6, v7);
  return sub_10001B8AC(&v9);
}

void sub_100617510(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100617524()
{
  return 30;
}

unsigned char *sub_10061752C(uint64_t a1)
{
  char v9 = 0;
  sub_10001B8E0(&v9);
  sub_100254CB8(0, *(void *)(a1 + 8) + 128, v2, v3, v4, v5, v6, v7);
  return sub_10001B8AC(&v9);
}

void sub_100617578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_10061758C(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(unsigned char *)(result + 52) = 1;
  return result;
}

uint64_t sub_1006175A0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v9 = 0;
  sub_100026C30((uint64_t)&v9);
  uint64_t v6 = (int)v9;
  uint64_t v7 = SWORD2(v9);
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  *(_DWORD *)(a1 + 32) = 3;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = off_1009BB670;
  *(_DWORD *)(a1 + 48) = a3;
  return a1;
}

__n128 sub_100617624(__n128 *a1, __n128 *a2)
{
  unsigned __int32 v2 = a2[2].n128_u32[0];
  a1->n128_u64[1] = a2->n128_u64[1];
  __n128 result = a2[1];
  a1[1] = result;
  a1[2].n128_u32[0] = v2;
  a1[2].n128_u64[1] = 0;
  a1->n128_u64[0] = (unint64_t)off_1009BB670;
  a1[3].n128_u32[0] = a2[3].n128_u32[0];
  return result;
}

void sub_10061766C()
{
}

uint64_t sub_100617680(uint64_t result)
{
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 48) = 0;
  return result;
}

uint64_t sub_10061768C()
{
  return 30;
}

unsigned char *sub_100617694(uint64_t a1)
{
  char v8 = 0;
  sub_10001B8E0(&v8);
  sub_100255028(*(_DWORD *)(a1 + 48) != 0, *(void *)(a1 + 8) + 128, *(unsigned int *)(a1 + 48), v2, v3, v4, v5, v6);
  return sub_10001B8AC(&v8);
}

void sub_1006176E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unsigned char *sub_1006176FC(uint64_t a1)
{
  char v8 = 0;
  sub_10001B8E0(&v8);
  sub_100255028(0, *(void *)(a1 + 8) + 128, 0, v2, v3, v4, v5, v6);
  return sub_10001B8AC(&v8);
}

void sub_10061774C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100617768(uint64_t a1)
{
  *(void *)a1 = off_1009BB6B8;
  *(void *)(a1 + 8) = off_1009BB710;
  *(void *)(a1 + 16) = &off_1009BB730;
  sub_100052DA8(a1 + 24);
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v3 = (char *)sub_1006161E0(a1 + 89);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 128) = a1 + 136;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = a1 + 160;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(void *)(a1 + 232) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 224) = a1 + 232;
  *(void *)(a1 + 240) = 0;
  sub_100052DA8(a1 + 248);
  *(void *)(a1 + 312) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 334) = 0;
  sub_1006162A4(v3, "0000");
  return a1;
}

void sub_1006178CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  int v24 = *v21;
  if (*v21)
  {
    *(void *)(v18 + 320) = v24;
    operator delete(v24);
  }
  sub_100052DA4(v23);
  sub_10061D3E4(v22, *v19);
  sub_1000486F0(a10, *v17);
  sub_10061D3E4(a11, *v15);
  sub_1000486F0(a12, *v14);
  sub_1000486F0(v16, *v20);
  nullsub_95(a14);
  sub_100052DA4(a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100617950(uint64_t a1)
{
  *(void *)a1 = off_1009BB6B8;
  *(void *)(a1 + 8) = off_1009BB710;
  *(void *)(a1 + 16) = &off_1009BB730;
  uint64_t v2 = *(void **)(a1 + 312);
  if (v2)
  {
    *(void *)(a1 + 320) = v2;
    operator delete(v2);
  }
  sub_100052DA4(a1 + 248);
  sub_10061D3E4(a1 + 224, *(void **)(a1 + 232));
  sub_1000486F0(a1 + 200, *(void **)(a1 + 208));
  sub_10061D3E4(a1 + 176, *(void **)(a1 + 184));
  sub_1000486F0(a1 + 152, *(void **)(a1 + 160));
  sub_1000486F0(a1 + 128, *(void **)(a1 + 136));
  nullsub_95(a1 + 89);
  sub_100052DA4(a1 + 24);
  return a1;
}

void sub_100617A38(uint64_t a1)
{
  sub_100617950(a1);

  operator delete();
}

double sub_100617A70(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BB7F8);
  }
  sub_100457490(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BB818);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 16);
  if (qword_1009F8080 != -1) {
    dispatch_once(&qword_1009F8080, &stru_1009BB838);
  }
  (**(void (***)(void *))off_1009F8078)(off_1009F8078);
  double result = 0.0;
  *(_OWORD *)(a1 + 375) = 0u;
  *(_OWORD *)(a1 + 391) = 0u;
  *(_OWORD *)(a1 + 343) = 0u;
  *(_OWORD *)(a1 + 359) = 0u;
  return result;
}

uint64_t sub_100617B6C(uint64_t a1)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BB7F8);
  }
  sub_100052718(qword_1009F8160 + 8, a1 + 8);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BB818);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1 + 16);
  if (qword_1009F8080 != -1) {
    dispatch_once(&qword_1009F8080, &stru_1009BB838);
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)off_1009F8078 + 8);

  return v2();
}

uint64_t sub_100617C64(uint64_t a1)
{
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 24);
  if (!*(unsigned char *)(a1 + 88))
  {
    *(unsigned char *)(a1 + 88) = 1;
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009BB818);
    }
    sub_1004E219C((uint64_t)off_1009F8068, a1 + 336);
    sub_1000486F0(a1 + 128, *(void **)(a1 + 136));
    *(void *)(a1 + 128) = a1 + 136;
    *(void *)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
    long long __p = 0;
    long long v19 = 0;
    uint64_t v20 = 0;
    uint64_t v2 = (void (***)(void, void **))sub_100370758();
    (**v2)(v2, &__p);
    uint64_t v3 = (unsigned __int8 **)__p;
    if (__p != v19)
    {
      do
      {
        long long v17 = *v3;
        unint64_t v16 = ((unint64_t)v17[128] << 40) | ((unint64_t)v17[129] << 32) | ((unint64_t)v17[130] << 24) | ((unint64_t)v17[131] << 16) | ((unint64_t)v17[132] << 8) | v17[133];
        __n128 v24 = 0uLL;
        int v25 = 0;
        sub_100600E3C((uint64_t)&v24);
        uint64_t v4 = sub_100370758();
        int v5 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, __n128 *))(*(void *)v4 + 48))(v4, a1 + 336, v17, &v24);
        if (v5 || BYTE6(v16) && (BYTE6(v16) != 1 || (v16 & 0xC00000000000) == 0x800000000000))
        {
          uint64_t v6 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
          {
            BOOL v14 = (v16 & 0xC00000000000) != 0x800000000000 && BYTE6(v16) == 1;
            *(_DWORD *)uu = 67109376;
            *(_DWORD *)&uu[4] = v5;
            if (!BYTE6(v16)) {
              BOOL v14 = 1;
            }
            LOWORD(v23) = 1024;
            *(_DWORD *)((char *)&v23 + 2) = v14;
            _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Not link key, result %d, BTAddressIsValid %d", uu, 0xEu);
          }
        }
        else
        {
          uint64_t v7 = v17;
          *(void *)uu = &v16;
          sub_1000097B0((uint64_t **)(a1 + 128), &v16, (uint64_t)&unk_1007BE9D0, (uint64_t **)uu)[5] = (uint64_t)v7;
          *(void *)uu = &v17;
          char v8 = sub_10061D4A8(a1 + 176, (unint64_t *)&v17, (uint64_t)&unk_1007BE9D0, (void **)uu);
          sub_100600E48((__n128 *)(v8 + 40), &v24);
          uint64_t v9 = (sqlite3 **)sub_100370804();
          sub_100357C9C(v9, (uint64_t)v17);
          *(void *)uu = 0;
          uint64_t v23 = 0;
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BB858);
          }
          sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)v17[128] << 40) | ((unint64_t)v17[129] << 32) | ((unint64_t)v17[130] << 24) | ((unint64_t)v17[131] << 16) | ((unint64_t)v17[132] << 8) | v17[133], 1u, 0, 0, 0, uu);
          if (!uuid_is_null(uu))
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BB858);
            }
            uint64_t v10 = off_1009F7ED8;
            uint64_t v11 = sub_100031234(uu);
            int v12 = sub_100030398((uint64_t)v10, v11);

            if (v12) {
              v12[161] = 1;
            }
          }
        }
        nullsub_95(&v24);
        ++v3;
      }
      while (v3 != v19);
    }
    *(_DWORD *)(a1 + 108) = 1;
    sub_1006180C4(a1);
    if (__p)
    {
      long long v19 = __p;
      operator delete(__p);
    }
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_100618068(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
}

uint64_t sub_1006180C4(uint64_t a1)
{
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 248);
  uint64_t v4 = 0;
  int v5 = 0;
  uint64_t v6 = 0;
  sub_100040550(&v4, a1 + 312);
  sub_10003AFE8((uint64_t)v7);
  uint64_t v2 = v4;
  if (v4 != v5)
  {
    do
    {
      (*(void (**)(void))(**(void **)v2 + 32))();
      v2 += 8;
    }
    while (v2 != v5);
    uint64_t v2 = v4;
  }
  if (v2)
  {
    int v5 = v2;
    operator delete(v2);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_100618178(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_1006181A8(uint64_t a1)
{
  return sub_100617C64(a1 - 16);
}

uint64_t sub_1006181B0(uint64_t a1)
{
  uint64_t v2 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SecurityManager::stackWillStop enter", buf, 2u);
  }
  *(void *)long long buf = 0;
  uint64_t v12 = 0;
  sub_10003AED0((uint64_t)buf, a1 + 24);
  uint64_t v3 = *(void **)(a1 + 200);
  *(unsigned char *)(a1 + 88) = 0;
  uint64_t v4 = (void *)(a1 + 208);
  if (v3 != (void *)(a1 + 208))
  {
    do
    {
      if (v3[5]) {
        operator delete();
      }
      int v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          int v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
    }
    while (v6 != v4);
  }
  sub_1000486F0(a1 + 200, *(void **)(a1 + 208));
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 200) = v4;
  *(_OWORD *)(a1 + 343) = 0u;
  *(_OWORD *)(a1 + 359) = 0u;
  *(_OWORD *)(a1 + 375) = 0u;
  *(_OWORD *)(a1 + 391) = 0u;
  char v8 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "SecurityManager::stackWillStop exit", v10, 2u);
  }
  return sub_10003AFB4((uint64_t)buf);
}

uint64_t sub_100618310(uint64_t a1)
{
  return sub_1006181B0(a1 - 16);
}

uint64_t sub_100618318(void *a1, char **a2)
{
  v41[0] = 0;
  v41[1] = 0;
  sub_10003AED0((uint64_t)v41, (uint64_t)(a1 + 3));
  uint64_t v4 = (void *)a1[16];
  int v5 = a1 + 17;
  if (v4 != a1 + 17)
  {
    uint64_t v6 = a2 + 2;
    BOOL v7 = a2[1];
    do
    {
      uint64_t v8 = v4[5];
      if ((unint64_t)v7 >= *v6)
      {
        uint64_t v9 = (v7 - *a2) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          abort();
        }
        uint64_t v10 = *v6 - (void)*a2;
        uint64_t v11 = v10 >> 2;
        if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
          uint64_t v11 = v9 + 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          uint64_t v13 = (char *)sub_1000405F8((uint64_t)(a2 + 2), v12);
        }
        else {
          uint64_t v13 = 0;
        }
        BOOL v14 = &v13[8 * v9];
        *(void *)BOOL v14 = v8;
        BOOL v7 = v14 + 8;
        unint64_t v16 = *a2;
        long long v15 = a2[1];
        if (v15 != *a2)
        {
          do
          {
            uint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *((void *)v14 - 1) = v17;
            v14 -= 8;
          }
          while (v15 != v16);
          long long v15 = *a2;
        }
        *a2 = v14;
        a2[1] = v7;
        a2[2] = &v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        *(void *)BOOL v7 = v8;
        v7 += 8;
      }
      a2[1] = v7;
      uint64_t v18 = (void *)v4[1];
      if (v18)
      {
        do
        {
          long long v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          long long v19 = (void *)v4[2];
          BOOL v20 = *v19 == (void)v4;
          uint64_t v4 = v19;
        }
        while (!v20);
      }
      uint64_t v4 = v19;
    }
    while (v19 != v5);
  }
  long long v21 = (void *)a1[19];
  if (v21 != a1 + 20)
  {
    do
    {
      uint64_t v22 = v21[5];
      uint64_t v23 = (void *)*v5;
      if (*v5)
      {
        unint64_t v24 = v21[4];
        do
        {
          unint64_t v25 = v23[4];
          if (v24 >= v25)
          {
            if (v25 >= v24) {
              goto LABEL_49;
            }
            ++v23;
          }
          uint64_t v23 = (void *)*v23;
        }
        while (v23);
      }
      long long v27 = a2[1];
      unint64_t v26 = (unint64_t)a2[2];
      if ((unint64_t)v27 >= v26)
      {
        uint64_t v29 = (v27 - *a2) >> 3;
        if ((unint64_t)(v29 + 1) >> 61) {
          abort();
        }
        uint64_t v30 = v26 - (void)*a2;
        uint64_t v31 = v30 >> 2;
        if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
          uint64_t v31 = v29 + 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v31;
        }
        if (v32) {
          long long v33 = (char *)sub_1000405F8((uint64_t)(a2 + 2), v32);
        }
        else {
          long long v33 = 0;
        }
        int v34 = &v33[8 * v29];
        *(void *)int v34 = v22;
        long long v28 = v34 + 8;
        int v36 = *a2;
        long long v35 = a2[1];
        if (v35 != *a2)
        {
          do
          {
            uint64_t v37 = *((void *)v35 - 1);
            v35 -= 8;
            *((void *)v34 - 1) = v37;
            v34 -= 8;
          }
          while (v35 != v36);
          long long v35 = *a2;
        }
        *a2 = v34;
        a2[1] = v28;
        a2[2] = &v33[8 * v32];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *(void *)long long v27 = v22;
        long long v28 = v27 + 8;
      }
      a2[1] = v28;
LABEL_49:
      int v38 = (void *)v21[1];
      if (v38)
      {
        do
        {
          long long v39 = v38;
          int v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          long long v39 = (void *)v21[2];
          BOOL v20 = *v39 == (void)v21;
          long long v21 = v39;
        }
        while (!v20);
      }
      long long v21 = v39;
    }
    while (v39 != a1 + 20);
  }
  sub_10003AFB4((uint64_t)v41);
  return 0;
}

void sub_1006185B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_1006185D0(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 24);
  if (*(void *)(a1 + 144)) {
    BOOL v2 = 1;
  }
  else {
    BOOL v2 = *(void *)(a1 + 168) != 0;
  }
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100618630(uint64_t a1, unsigned __int8 *a2, __n128 *a3)
{
  v12[1] = 0;
  uint64_t v13 = a2;
  v12[0] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 24);
  uint64_t v6 = *(void **)(a1 + 136);
  if (v6)
  {
    unint64_t v7 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
    do
    {
      unint64_t v8 = v6[4];
      if (v7 >= v8)
      {
        if (v8 >= v7)
        {
          BOOL v14 = (unint64_t *)&v13;
          uint64_t v10 = sub_10061D4A8(a1 + 176, (unint64_t *)&v13, (uint64_t)&unk_1007BE9D0, &v14);
          sub_100600E48(a3, (__n128 *)(v10 + 40));
          uint64_t v9 = 0;
          goto LABEL_9;
        }
        ++v6;
      }
      uint64_t v6 = (void *)*v6;
    }
    while (v6);
  }
  uint64_t v9 = 150;
LABEL_9:
  sub_10003AFB4((uint64_t)v12);
  return v9;
}

void sub_10061871C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100618730(uint64_t a1, unsigned __int8 *a2, __n128 *a3, char a4)
{
  long long v21 = a2;
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 24);
  uint64_t v8 = sub_100370758();
  uint64_t v9 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, __n128 *, void))(*(void *)v8 + 56))(v8, a1 + 336, a2, a3, 0);
  if (!v9)
  {
    uint64_t v22 = &v21;
    uint64_t v10 = sub_10061D4A8(a1 + 176, (unint64_t *)&v21, (uint64_t)&unk_1007BE9D0, &v22);
    sub_100600E48((__n128 *)(v10 + 40), a3);
    uint64_t v11 = (uint64_t)v21;
    unint64_t v12 = ((unint64_t)*(unsigned __int8 *)(v11 + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(v11 + 129) << 32) | ((unint64_t)v21[130] << 24) | ((unint64_t)v21[131] << 16) | v21[133] | ((unint64_t)v21[132] << 8);
    unint64_t v19 = v12;
    for (uint64_t i = *(void **)(a1 + 136); i; uint64_t i = (void *)*i)
    {
      unint64_t v14 = i[4];
      if (v12 >= v14)
      {
        if (v14 >= v12) {
          goto LABEL_8;
        }
        ++i;
      }
    }
    uint64_t v22 = (unsigned __int8 **)&v19;
    sub_1000097B0((uint64_t **)(a1 + 128), &v19, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v22)[5] = v11;
LABEL_8:
    sub_10003AFE8((uint64_t)v20);
    uint64_t v15 = sub_1004AF8EC();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100618904;
    _OWORD v17[3] = &unk_100998A58;
    v17[4] = v21;
    char v18 = a4;
    sub_100013018(v15, v17);
    uint64_t v9 = 0;
  }
  sub_10003AFB4((uint64_t)v20);
  return v9;
}

void sub_1006188EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100618904(uint64_t a1)
{
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB878);
  }
  BOOL v2 = off_1009F8770;
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 40);

  return sub_10061896C((uint64_t)v2, v3, v4);
}

uint64_t sub_10061896C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 248);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_100040550(&v8, a1 + 312);
  sub_10003AFE8((uint64_t)v11);
  uint64_t v6 = v8;
  if (v8 != v9)
  {
    do
    {
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v6 + 16))(*v6, a2, a3);
      ++v6;
    }
    while (v6 != v9);
    uint64_t v6 = v8;
  }
  if (v6)
  {
    uint64_t v9 = v6;
    operator delete(v6);
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_100618A38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100618A68(uint64_t a1, unsigned __int8 *a2, int a3)
{
  v16[1] = 0;
  uint64_t v17 = a2;
  v16[0] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 24);
  uint64_t v6 = sub_100370758();
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *))(*(void *)v6 + 64))(v6, a1 + 336, a2);
  if (v7)
  {
    uint64_t v8 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      if (a2)
      {
        sub_100474E18((uint64_t)a2, __p);
        if (v15 >= 0) {
          uint64_t v9 = __p;
        }
        else {
          uint64_t v9 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446466;
        unint64_t v19 = (const char *)v9;
        __int16 v20 = 1024;
        int v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to delete linkey for device %{public}s with error %d, but we'll keep unpairing", buf, 0x12u);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)long long buf = 136446466;
        unint64_t v19 = "NULL";
        __int16 v20 = 1024;
        int v21 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Failed to delete linkey for device %{public}s with error %d, but we'll keep unpairing", buf, 0x12u);
      }
    }
  }
  uint64_t v10 = (void *)(((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133]);
  __p[0] = v10;
  for (uint64_t i = *(void **)(a1 + 136); i; uint64_t i = (void *)*i)
  {
    unint64_t v12 = i[4];
    if ((unint64_t)v10 >= v12)
    {
      if (v12 >= (unint64_t)v10)
      {
        sub_1000517A4(a1 + 128, (unint64_t *)__p);
        break;
      }
      ++i;
    }
  }
  sub_10061D720(a1 + 176, (unint64_t *)&v17);
  sub_100618D04(a1, v17);
  sub_10003AFE8((uint64_t)v16);
  if (!a3)
  {
    if (qword_1009F8080 != -1) {
      dispatch_once(&qword_1009F8080, &stru_1009BB838);
    }
    sub_100497B20((uint64_t)off_1009F8078, v17, 1);
  }
  sub_100618D8C(a1, (uint64_t)v17);
  sub_10003AFB4((uint64_t)v16);
  return 0;
}

void sub_100618CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100618D04(uint64_t result, unsigned __int8 *a2)
{
  unint64_t v2 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  unint64_t v5 = v2;
  uint64_t v3 = *(void **)(result + 160);
  if (v3)
  {
    result += 152;
    do
    {
      unint64_t v4 = v3[4];
      if (v2 >= v4)
      {
        if (v4 >= v2) {
          return sub_1000517A4(result, &v5);
        }
        ++v3;
      }
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_100618D8C(uint64_t a1, uint64_t a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 248);
  uint64_t v6 = 0;
  int v7 = 0;
  uint64_t v8 = 0;
  sub_100040550(&v6, a1 + 312);
  sub_10003AFE8((uint64_t)v9);
  unint64_t v4 = v6;
  if (v6 != v7)
  {
    do
    {
      (*(void (**)(void, uint64_t))(*(void *)*v4 + 24))(*v4, a2);
      ++v4;
    }
    while (v4 != v7);
    unint64_t v4 = v6;
  }
  if (v4)
  {
    int v7 = v4;
    operator delete(v4);
  }
  return sub_10003AFB4((uint64_t)v9);
}

void sub_100618E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100618E78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 24);
  uint64_t v5 = sub_100370758();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 8))(v5, a2, a3);
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_100618EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100618F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 24);
  uint64_t v5 = sub_100370758();
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v5 + 16))(v5, a2, a3);
  sub_10003AFB4((uint64_t)v8);
  return v6;
}

void sub_100618F84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100618F98(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 24);
  uint64_t v3 = sub_100370758();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 24))(v3, a2);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_10061900C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100619020(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 344))(v4)) {
    return 2;
  }
  uint64_t result = 0;
  *(_DWORD *)(a1 + 108) = a2;
  return result;
}

uint64_t sub_100619088(void *a1, uint64_t a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, (uint64_t)(a1 + 31));
  uint64_t v4 = (void *)a1[39];
  uint64_t v5 = (void *)a1[40];
  uint64_t v6 = v4;
  if (v4 != v5)
  {
    while (*v6 != a2)
    {
      if (++v6 == v5)
      {
        uint64_t v6 = (void *)a1[40];
        break;
      }
    }
  }
  if (v6 == v5)
  {
    unint64_t v7 = a1[41];
    if ((unint64_t)v5 >= v7)
    {
      uint64_t v9 = v5 - v4;
      if ((unint64_t)(v9 + 1) >> 61) {
        abort();
      }
      uint64_t v10 = v7 - (void)v4;
      uint64_t v11 = v10 >> 2;
      if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
        uint64_t v11 = v9 + 1;
      }
      if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v11;
      }
      if (v12) {
        uint64_t v13 = (char *)sub_1000405F8((uint64_t)(a1 + 41), v12);
      }
      else {
        uint64_t v13 = 0;
      }
      unint64_t v14 = &v13[8 * v9];
      char v15 = &v13[8 * v12];
      *(void *)unint64_t v14 = a2;
      uint64_t v8 = v14 + 8;
      uint64_t v17 = (char *)a1[39];
      unint64_t v16 = (char *)a1[40];
      if (v16 != v17)
      {
        do
        {
          uint64_t v18 = *((void *)v16 - 1);
          v16 -= 8;
          *((void *)v14 - 1) = v18;
          v14 -= 8;
        }
        while (v16 != v17);
        unint64_t v16 = (char *)a1[39];
      }
      a1[39] = v14;
      a1[40] = v8;
      a1[41] = v15;
      if (v16) {
        operator delete(v16);
      }
    }
    else
    {
      *uint64_t v5 = a2;
      uint64_t v8 = v5 + 1;
    }
    a1[40] = v8;
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1006191B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006191C4(uint64_t a1, uint64_t a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 248);
  uint64_t v5 = *(char **)(a1 + 312);
  uint64_t v4 = *(char **)(a1 + 320);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 320);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 320) = &v5[v6];
  }
  return sub_10003AFB4((uint64_t)v8);
}

void sub_100619260(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 24);
  uint64_t v10 = (long long *)(a1 + 343);
  uint64_t v11 = &xmmword_100A13AA8;
  if (a2) {
    unint64_t v12 = a2;
  }
  else {
    unint64_t v12 = &xmmword_100A13AA8;
  }
  *uint64_t v10 = *v12;
  uint64_t v13 = (long long *)(a1 + 359);
  if (a3) {
    unint64_t v14 = a3;
  }
  else {
    unint64_t v14 = &xmmword_100A13AA8;
  }
  *uint64_t v13 = *v14;
  char v15 = (long long *)(a1 + 375);
  if (a4) {
    unint64_t v16 = a4;
  }
  else {
    unint64_t v16 = &xmmword_100A13AA8;
  }
  *char v15 = *v16;
  uint64_t v17 = (long long *)(a1 + 391);
  if (a5) {
    uint64_t v11 = a5;
  }
  *uint64_t v17 = *v11;
  uint64_t v18 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141560835;
    uint64_t v21 = 1752392040;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    unint64_t v25 = v10;
    __int16 v26 = 2160;
    uint64_t v27 = 1752392040;
    __int16 v28 = 1041;
    int v29 = 16;
    __int16 v30 = 2097;
    uint64_t v31 = v13;
    __int16 v32 = 2160;
    uint64_t v33 = 1752392040;
    __int16 v34 = 1041;
    int v35 = 16;
    __int16 v36 = 2097;
    uint64_t v37 = v15;
    __int16 v38 = 2160;
    uint64_t v39 = 1752392040;
    __int16 v40 = 1041;
    int v41 = 16;
    __int16 v42 = 2097;
    long long v43 = v17;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Received local OOB Data from the controller C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", buf, 0x6Au);
  }
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB898);
  }
  sub_10060CEC8((uint64_t)off_1009F8760, (uint64_t)v10, (uint64_t)v13, (uint64_t)v15, (uint64_t)v17);
}

void sub_100619448(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100619464(uint64_t a1, unsigned __int8 *a2)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 24);
  unint64_t v4 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  unint64_t v8 = v4;
  for (uint64_t i = *(void **)(a1 + 160); i; uint64_t i = (void *)*i)
  {
    unint64_t v6 = i[4];
    if (v4 >= v6)
    {
      if (v6 >= v4) {
        return sub_10003AFB4((uint64_t)v9);
      }
      ++i;
    }
  }
  uint64_t v10 = &v8;
  sub_1000097B0((uint64_t **)(a1 + 152), &v8, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v10)[5] = (uint64_t)a2;
  return sub_10003AFB4((uint64_t)v9);
}

void sub_10061952C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

__n128 sub_100619540(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5)
{
  result.n128_u64[0] = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  if (!a4 || !a5 || *(_OWORD *)a4 == xmmword_100A13AA8) {
    goto LABEL_15;
  }
  if (!a2 || *(_OWORD *)a5 == xmmword_100A13AA8)
  {
    if (*(_OWORD *)a5 != xmmword_100A13AA8)
    {
LABEL_14:
      char v6 = 2;
      goto LABEL_25;
    }
LABEL_15:
    if (a2)
    {
      char v6 = 0;
      if (!a3 || *(_OWORD *)a2 == xmmword_100A13AA8)
      {
LABEL_25:
        *(unsigned char *)(a1 + 64) = v6;
        if (!a2) {
          goto LABEL_31;
        }
        goto LABEL_26;
      }
      if (a3->n128_u64[0] != (void)xmmword_100A13AA8 || a3->n128_u64[1] != *((void *)&xmmword_100A13AA8 + 1))
      {
        char v8 = 1;
        goto LABEL_23;
      }
    }
    char v6 = 0;
    goto LABEL_25;
  }
  char v6 = 2;
  if (!a3 || *(_OWORD *)a2 == xmmword_100A13AA8) {
    goto LABEL_25;
  }
  if (a3->n128_u64[0] == (void)xmmword_100A13AA8 && a3->n128_u64[1] == *((void *)&xmmword_100A13AA8 + 1)) {
    goto LABEL_14;
  }
  char v8 = 3;
LABEL_23:
  *(unsigned char *)(a1 + 64) = v8;
LABEL_26:
  if (*(void *)a2 != (void)xmmword_100A13AA8 || *(void *)(a2 + 8) != *((void *)&xmmword_100A13AA8 + 1))
  {
    __n128 result = *(__n128 *)a2;
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }
LABEL_31:
  if (a3)
  {
    if (a3->n128_u64[0] != (void)xmmword_100A13AA8 || a3->n128_u64[1] != *((void *)&xmmword_100A13AA8 + 1))
    {
      __n128 result = *a3;
      *(__n128 *)(a1 + 16) = *a3;
    }
  }
  if (a4)
  {
    if (*(void *)a4 != (void)xmmword_100A13AA8 || *(void *)(a4 + 8) != *((void *)&xmmword_100A13AA8 + 1))
    {
      __n128 result = *(__n128 *)a4;
      *(_OWORD *)(a1 + 32) = *(_OWORD *)a4;
    }
  }
  if (a5)
  {
    if (*(void *)a5 != (void)xmmword_100A13AA8 || *(void *)(a5 + 8) != *((void *)&xmmword_100A13AA8 + 1))
    {
      __n128 result = *(__n128 *)a5;
      *(_OWORD *)(a1 + 48) = *(_OWORD *)a5;
    }
  }
  return result;
}

void sub_1006196C4(uint64_t a1, long long *a2, long long *a3)
{
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB878);
  }
  uint64_t v5 = off_1009F8770;

  sub_100619260((uint64_t)v5, a2, a3, 0, 0);
}

void sub_100619738(uint64_t a1, long long *a2, long long *a3, long long *a4, long long *a5)
{
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB878);
  }
  uint64_t v9 = off_1009F8770;

  sub_100619260((uint64_t)v9, a2, a3, a4, a5);
}

uint64_t sub_1006197BC(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v19 = a2;
  int v17 = *(_DWORD *)(a2 + 128);
  __int16 v18 = *(_WORD *)(a2 + 132);
  uint64_t v11 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC((unsigned __int8 *)&v17, __p);
    unint64_t v12 = v16 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136449283;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v21 = 2160;
    uint64_t v22 = 1752392040;
    __int16 v23 = 1041;
    int v24 = 16;
    __int16 v25 = 2097;
    uint64_t v26 = a3;
    __int16 v27 = 2160;
    uint64_t v28 = 1752392040;
    __int16 v29 = 1041;
    int v30 = 16;
    __int16 v31 = 2097;
    uint64_t v32 = a4;
    __int16 v33 = 2160;
    uint64_t v34 = 1752392040;
    __int16 v35 = 1041;
    int v36 = 16;
    __int16 v37 = 2097;
    uint64_t v38 = a5;
    __int16 v39 = 2160;
    uint64_t v40 = 1752392040;
    __int16 v41 = 1041;
    int v42 = 16;
    __int16 v43 = 2097;
    uint64_t v44 = a6;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Setting OOB Data for device %{public}s C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", buf, 0x74u);
    if (v16 < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)long long buf = &v19;
  if (!sub_1000097B0((uint64_t **)(a1 + 200), &v19, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf)[5])
  {
    sub_10003FB34();
    operator new();
  }
  uint64_t v13 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_1007869A4(v13);
  }
  return 177;
}

uint64_t sub_100619BFC(uint64_t a1, unint64_t a2)
{
  unint64_t v11 = a2;
  int v9 = *(_DWORD *)(a2 + 128);
  __int16 v10 = *(_WORD *)(a2 + 132);
  uint64_t v3 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC((unsigned __int8 *)&v9, __p);
    unint64_t v4 = v8 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136446210;
    uint64_t v13 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Clearing OOB Data for device %{public}s", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v5 = (uint64_t **)(a1 + 200);
  __p[0] = &v11;
  if (sub_1000097B0(v5, &v11, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)[5]) {
    operator delete();
  }
  sub_1000517A4((uint64_t)v5, &v11);
  return 0;
}

uint64_t sub_100619D40(uint64_t a1)
{
  unint64_t v2 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Initiating read local OOB data from local controller", buf, 2u);
  }
  if (*(unsigned char *)(a1 + 88))
  {
    int v3 = *(_DWORD *)(sub_10003FB34() + 712);
    char v13 = 0;
    sub_10001B8E0(&v13);
    if ((v3 - 11) > 0x7C4)
    {
      uint64_t v11 = sub_100253478((uint64_t)sub_1006196C4, v4, v5, v6, v7, v8, v9, v10);
      if (v11)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
          sub_100786A50();
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v11 = sub_100253504((uint64_t)sub_100619738, v4, v5, v6, v7, v8, v9, v10);
      if (v11)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
          sub_1007869E8();
        }
LABEL_12:
        uint64_t v11 = 1;
      }
    }
    sub_10001B8AC(&v13);
    return v11;
  }
  return 111;
}

void sub_100619E74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100619E88(uint64_t a1, unint64_t a2)
{
  unint64_t v17 = a2;
  int v15 = *(_DWORD *)(a2 + 128);
  __int16 v16 = *(_WORD *)(a2 + 132);
  int v3 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC((unsigned __int8 *)&v15, __p);
    uint64_t v4 = v23 >= 0 ? __p : *(unsigned char **)__p;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "OOB Data requested for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v23) < 0) {
      operator delete(*(void **)__p);
    }
  }
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 248);
  *(void *)long long __p = &v17;
  uint64_t v5 = sub_1000097B0((uint64_t **)(a1 + 200), &v17, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p)[5];
  if (v5 && *(unsigned char *)(v5 + 64))
  {
    uint64_t v6 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)&v15, buf);
      if (v19 >= 0) {
        uint64_t v9 = buf;
      }
      else {
        uint64_t v9 = *(unsigned char **)buf;
      }
      *(_DWORD *)long long __p = 136449283;
      *(void *)&__p[4] = v9;
      __int16 v21 = 2160;
      uint64_t v22 = 1752392040;
      __int16 v23 = 1041;
      int v24 = 16;
      __int16 v25 = 2097;
      uint64_t v26 = v5;
      __int16 v27 = 2160;
      uint64_t v28 = 1752392040;
      __int16 v29 = 1041;
      int v30 = 16;
      __int16 v31 = 2097;
      uint64_t v32 = v5 + 16;
      __int16 v33 = 2160;
      uint64_t v34 = 1752392040;
      __int16 v35 = 1041;
      int v36 = 16;
      __int16 v37 = 2097;
      uint64_t v38 = v5 + 32;
      __int16 v39 = 2160;
      uint64_t v40 = 1752392040;
      __int16 v41 = 1041;
      int v42 = 16;
      __int16 v43 = 2097;
      uint64_t v44 = v5 + 48;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "OOB data found for device %{public}s C192:%{private, mask.hash}.16P R192:%{private, mask.hash}.16P C256:%{private, mask.hash}.16P R256:%{private, mask.hash}.16P", __p, 0x74u);
      if (v19 < 0) {
        operator delete(*(void **)buf);
      }
    }
    sub_10025571C(1, v17 + 128, v5, v5 + 16, v5 + 32, v5 + 48, v7, v8);
    sub_10003AFB4((uint64_t)v14);
  }
  else
  {
    sub_10003AFB4((uint64_t)v14);
    uint64_t v10 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)&v15, __p);
      char v13 = v23 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "No OOB data found for device %{public}s", buf, 0xCu);
      if (SHIBYTE(v23) < 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_10025571C(0, v17 + 128, 0, 0, 0, 0, v11, v12);
  }
}

void sub_10061A198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10061A1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "oobDataForDeviceAvailable", buf, 2u);
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  *(_DWORD *)long long buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  unint64_t v5 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  if (!v5) {
    return 0;
  }
  uint64_t v6 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040;
    *(_WORD *)&unsigned char buf[12] = 1041;
    *(_DWORD *)&unsigned char buf[14] = 6;
    __int16 v19 = 2097;
    uint64_t v20 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "oobDataForDeviceAvailable device %{private, mask.hash}.6P is valid", buf, 0x1Cu);
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_10003AED0((uint64_t)buf, a1 + 248);
  uint64_t v9 = *(void **)(a1 + 208);
  uint64_t v8 = (void *)(a1 + 208);
  uint64_t v7 = v9;
  if (!v9) {
    goto LABEL_19;
  }
  uint64_t v10 = v8;
  do
  {
    unint64_t v11 = v7[4];
    BOOL v12 = v11 >= v5;
    if (v11 >= v5) {
      char v13 = v7;
    }
    else {
      char v13 = v7 + 1;
    }
    if (v12) {
      uint64_t v10 = v7;
    }
    uint64_t v7 = (void *)*v13;
  }
  while (*v13);
  if (v10 != v8 && v5 >= v10[4]) {
    uint64_t v14 = *(unsigned __int8 *)(v10[5] + 64);
  }
  else {
LABEL_19:
  }
    uint64_t v14 = 0;
  int v15 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    v17[0] = 67109120;
    v17[1] = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "oobDataForDeviceAvailable = %d", (uint8_t *)v17, 8u);
  }
  sub_10003AFB4((uint64_t)buf);
  return v14;
}

uint64_t sub_10061A3E4(uint64_t a1)
{
  unint64_t v2 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: ----------------- Security Manager ------------------", buf, 2u);
    unint64_t v2 = qword_100A19EB8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    sub_100616338((unsigned __int8 *)(a1 + 89), buf);
    if ((v25 & 0x80000000) == 0) {
      int v3 = buf;
    }
    else {
      int v3 = *(unsigned char **)buf;
    }
    *(_DWORD *)uint64_t v26 = 136315138;
    __int16 v27 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Default pincode: %s", v26, 0xCu);
    if (SBYTE3(v25) < 0) {
      operator delete(*(void **)buf);
    }
    unint64_t v2 = qword_100A19EB8;
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "statedump: Paired devices:", buf, 2u);
  }
  uint64_t v4 = *(void **)(a1 + 128);
  if (v4 != (void *)(a1 + 136))
  {
    do
    {
      unint64_t v5 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v4[5], buf);
        uint64_t v6 = (v25 & 0x80000000) == 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)uint64_t v26 = 136446210;
        __int16 v27 = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:    Device %{public}s", v26, 0xCu);
        if (SBYTE3(v25) < 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != (void *)(a1 + 136));
  }
  uint64_t v10 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: Generated local OOB data:", buf, 2u);
    uint64_t v10 = qword_100A19EB8;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    uint64_t v25 = a1 + 343;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: \tC192:%{private, mask.hash}.16P", buf, 0x1Cu);
    uint64_t v10 = qword_100A19EB8;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    uint64_t v25 = a1 + 359;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: \tR192:%{private, mask.hash}.16P", buf, 0x1Cu);
    uint64_t v10 = qword_100A19EB8;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    uint64_t v25 = a1 + 375;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    C256:%{private, mask.hash}.16P", buf, 0x1Cu);
    uint64_t v10 = qword_100A19EB8;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141558531;
    *(void *)&uint8_t buf[4] = 1752392040;
    __int16 v22 = 1041;
    int v23 = 16;
    __int16 v24 = 2097;
    uint64_t v25 = a1 + 391;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    R256:%{private, mask.hash}.16P", buf, 0x1Cu);
    uint64_t v10 = qword_100A19EB8;
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: OOB data for devices:", buf, 2u);
    uint64_t v10 = qword_100A19EB8;
  }
  unint64_t v11 = *(void **)(a1 + 200);
  if (v11 != (void *)(a1 + 208))
  {
    do
    {
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v11[4], buf);
        BOOL v12 = buf;
        if ((v25 & 0x80000000) != 0) {
          BOOL v12 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v26 = 136446210;
        __int16 v27 = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s:", v26, 0xCu);
        if (SBYTE3(v25) < 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v10 = qword_100A19EB8;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = v11[5];
        *(_DWORD *)long long buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040;
        __int16 v22 = 1041;
        int v23 = 16;
        __int16 v24 = 2097;
        uint64_t v25 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:      C192:%{private, mask.hash}.16P", buf, 0x1Cu);
        uint64_t v10 = qword_100A19EB8;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = v11[5] + 16;
        *(_DWORD *)long long buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040;
        __int16 v22 = 1041;
        int v23 = 16;
        __int16 v24 = 2097;
        uint64_t v25 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:      R192:%{private, mask.hash}.16P", buf, 0x1Cu);
        uint64_t v10 = qword_100A19EB8;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = v11[5] + 32;
        *(_DWORD *)long long buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040;
        __int16 v22 = 1041;
        int v23 = 16;
        __int16 v24 = 2097;
        uint64_t v25 = v15;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:      C256:%{private, mask.hash}.16P", buf, 0x1Cu);
        uint64_t v10 = qword_100A19EB8;
      }
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = v11[5] + 48;
        *(_DWORD *)long long buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040;
        __int16 v22 = 1041;
        int v23 = 16;
        __int16 v24 = 2097;
        uint64_t v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:      R256:%{private, mask.hash}.16P", buf, 0x1Cu);
        uint64_t v10 = qword_100A19EB8;
      }
      unint64_t v17 = (void *)v11[1];
      if (v17)
      {
        do
        {
          __int16 v18 = v17;
          unint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          __int16 v18 = (void *)v11[2];
          BOOL v9 = *v18 == (void)v11;
          unint64_t v11 = v18;
        }
        while (!v9);
      }
      unint64_t v11 = v18;
    }
    while (v18 != (void *)(a1 + 208));
  }
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump: Security keys:", buf, 2u);
  }
  uint64_t v19 = sub_100370758();
  return (*(uint64_t (**)(uint64_t))(*(void *)v19 + 184))(v19);
}

uint64_t sub_10061AAE8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 24);
  if (!*(void *)(a1 + 112))
  {
    *(void *)(a1 + 120) = a2;
    SInt32 error = 0;
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v10 = (const char *)a4;
    }
    else {
      uint64_t v10 = *(const char **)a4;
    }
    CFStringRef v11 = CFStringCreateWithCString(kCFAllocatorDefault, v10, 0x600u);
    if (*(char *)(a5 + 23) >= 0) {
      BOOL v12 = (const char *)a5;
    }
    else {
      BOOL v12 = *(const char **)a5;
    }
    CFStringRef v13 = CFStringCreateWithCString(kCFAllocatorDefault, v12, 0x600u);
    CFStringRef v14 = CFStringCreateWithCString(kCFAllocatorDefault, "Allow", 0x600u);
    CFStringRef v15 = CFStringCreateWithCString(kCFAllocatorDefault, "Don't Allow", 0x600u);
    keys[0] = (void *)kCFUserNotificationAlertHeaderKey;
    keys[1] = (void *)kCFUserNotificationAlertMessageKey;
    keys[2] = (void *)kCFUserNotificationAlternateButtonTitleKey;
    keys[3] = (void *)kCFUserNotificationDefaultButtonTitleKey;
    values[0] = (void *)v11;
    values[1] = (void *)v13;
    values[2] = (void *)v14;
    values[3] = (void *)v15;
    CFDictionaryRef v16 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 4, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    unint64_t v17 = CFUserNotificationCreate(kCFAllocatorDefault, (double)a3, 3uLL, &error, v16);
    *(void *)(a1 + 112) = v17;
    CFRunLoopSourceRef RunLoopSource = CFUserNotificationCreateRunLoopSource(kCFAllocatorDefault, v17, (CFUserNotificationCallBack)sub_10061AD2C, 0);
    if (RunLoopSource)
    {
      Main = CFRunLoopGetMain();
      CFRunLoopAddSource(Main, RunLoopSource, kCFRunLoopCommonModes);
      CFRelease(RunLoopSource);
    }
    else
    {
      CFUserNotificationCancel(v17);
      CFRelease(v17);
    }
    CFRelease(v16);
    CFRelease(v11);
    CFRelease(v13);
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_10061ACF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10061AD2C(uint64_t a1, uint64_t a2)
{
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB878);
  }
  int v3 = off_1009F8770;

  return sub_10061AD90((uint64_t)v3, a2, a2);
}

uint64_t sub_10061AD90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 24);
  unint64_t v5 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = "unknown";
    uint64_t v7 = *(void *)(a1 + 120);
    *(_DWORD *)long long buf = 136447235;
    if (!a3) {
      uint64_t v6 = "disallow";
    }
    if (a3 == 1) {
      uint64_t v6 = "allow";
    }
    CFStringRef v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = a3;
    __int16 v18 = 2160;
    uint64_t v19 = 1752392040;
    __int16 v20 = 1041;
    int v21 = 6;
    __int16 v22 = 2097;
    uint64_t v23 = v7 + 128;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "User responded to security alert notification with %{public}s (%ld) button for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x30u);
  }
  if (!a3)
  {
    int v8 = 2;
    goto LABEL_11;
  }
  if (a3 == 1)
  {
    int v8 = 1;
LABEL_11:
    sub_10047BFA8(*(void *)(a1 + 120), v8);
    goto LABEL_14;
  }
  BOOL v9 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_100786AB8(v9);
  }
LABEL_14:
  CFStringRef v11 = *(const void **)(a1 + 112);
  uint64_t v10 = (void *)(a1 + 112);
  CFRelease(v11);
  *uint64_t v10 = 0;
  v10[1] = 0;
  return sub_10003AFB4((uint64_t)v13);
}

void sub_10061AF10(_Unwind_Exception *exception_object)
{
}

void sub_10061AF2C(int *a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  int v3 = *a1;
  __int16 v4 = *((_WORD *)a1 + 2);
  unint64_t v2 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v3, 1);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB878);
  }
  sub_100619E88((uint64_t)off_1009F8770, v2);
}

uint64_t (**sub_10061AFDC())()
{
  return &off_1009BB750;
}

uint64_t (**sub_10061AFE8())()
{
  return &off_1009BB7C8;
}

void sub_10061AFFC(uint64_t a1)
{
  unint64_t v2 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 141558531;
    uint64_t v4 = 1752392040;
    __int16 v5 = 1041;
    int v6 = 6;
    __int16 v7 = 2097;
    uint64_t v8 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Secure-Simple-Pairing has started on device %{private,bluetooth:BD_ADDR,mask.hash}.6P", (uint8_t *)&v3, 0x1Cu);
  }
}

void sub_10061B0C4(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  uint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  __int16 v5 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    if (v4)
    {
      sub_100474E18(v4, __p);
      if (v10 >= 0) {
        int v6 = __p;
      }
      else {
        int v6 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 67109378;
      int v12 = a2;
      __int16 v13 = 2082;
      CFStringRef v14 = (const char *)v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pairing has completed with result %{bluetooth:OI_STATUS}u on device %{public}s", buf, 0x12u);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      *(_DWORD *)long long buf = 67109378;
      int v12 = a2;
      __int16 v13 = 2082;
      CFStringRef v14 = "NULL";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Pairing has completed with result %{bluetooth:OI_STATUS}u on device %{public}s", buf, 0x12u);
    }
  }
  if (a2)
  {
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009BB898);
    }
    __int16 v7 = off_1009F8760;
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009BB818);
    }
    int v8 = sub_1004E2340((uint64_t)off_1009F8068, a2, 10000);
    sub_10060FDE8((uint64_t)v7, v4, v8);
  }
}

void sub_10061B2D4(uint64_t a1)
{
  unint64_t v2 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 141558531;
    uint64_t v5 = 1752392040;
    __int16 v6 = 1041;
    int v7 = 6;
    __int16 v8 = 2097;
    uint64_t v9 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received IO Capability request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", (uint8_t *)&v4, 0x1Cu);
  }
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB878);
  }
  int v3 = *((unsigned __int8 *)off_1009F8770 + 108);
  sub_10061A1BC((uint64_t)off_1009F8770, a1);
  sub_100255D70(0, a1, v3);
}

BOOL sub_10061B3F0(int *a1, uint64_t a2)
{
  int v4 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 141558531;
    uint64_t v13 = 1752392040;
    __int16 v14 = 1041;
    int v15 = 6;
    __int16 v16 = 2097;
    uint64_t v17 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Link key requested for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  *(_DWORD *)long long buf = *a1;
  LOWORD(v13) = *((_WORD *)a1 + 2);
  uint64_t v5 = (unsigned __int8 *)sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  __n128 v10 = 0uLL;
  int v11 = 0;
  sub_100600E3C((uint64_t)&v10);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB878);
  }
  if (!sub_100618630((uint64_t)off_1009F8770, v5, &v10))
  {
    int v6 = *a1;
    *(_WORD *)(a2 + 4) = *((_WORD *)a1 + 2);
    *(_DWORD *)a2 = v6;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)nullsub_95(&v10);
    *(_DWORD *)(a2 + 24) = sub_100600E84((uint64_t)&v10);
    int v7 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 141558531;
      uint64_t v13 = 1752392040;
      __int16 v14 = 1041;
      int v15 = 6;
      __int16 v16 = 2097;
      uint64_t v17 = a1;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Found link key for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
    }
  }
  BOOL v8 = sub_100600EA0(&v10);
  nullsub_95(&v10);
  return !v8;
}

void sub_10061B614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_10061B630(uint64_t a1, __n128 *a2, unsigned __int32 a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  *(_DWORD *)int v11 = *(_DWORD *)a1;
  *(_WORD *)&v11[4] = *(_WORD *)(a1 + 4);
  int v6 = (unsigned __int8 *)sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v11, 1);
  __n128 v14 = 0uLL;
  int v15 = 0;
  sub_100600E74(&v14, a2, a3);
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009BB878);
  }
  int v7 = sub_100618730((uint64_t)off_1009F8770, v6, &v14, 0);
  BOOL v8 = qword_100A19EB8;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100786AFC();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v11 = 141558531;
      *(void *)&v11[4] = 1752392040;
      *(_WORD *)&v11[12] = 1041;
      *(_DWORD *)&v11[14] = 6;
      __int16 v12 = 2097;
      uint64_t v13 = a1;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "New link key created for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", v11, 0x1Cu);
    }
    sub_100475F84((uint64_t)v6, (uint64_t)v11);
    if (SBYTE3(v13) < 0)
    {
      uint64_t v9 = *(void *)&v11[8];
      operator delete(*(void **)v11);
      if (v9) {
        return nullsub_95(&v14);
      }
    }
    else if (BYTE3(v13))
    {
      return nullsub_95(&v14);
    }
    if (qword_1009F8398 != -1) {
      dispatch_once(&qword_1009F8398, &stru_1009BB7D8);
    }
    sub_1005060D4((uint64_t)off_1009F8390);
  }
  return nullsub_95(&v14);
}

void sub_10061B83C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  nullsub_95(va);
  _Unwind_Resume(a1);
}

void sub_10061B85C(uint64_t a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  uint64_t v2 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  int v3 = qword_100A19EB8;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v2, __p);
      int v4 = v10 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446210;
      __int16 v12 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Received a new pincode request for device %{public}s", buf, 0xCu);
      if (v10 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v5 = sub_100181E20(a1);
    if (v5)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
      }
      sub_1004AA7FC((uint64_t)off_1009F7EF8, v2, v5);
      sub_100475F84(v2, (uint64_t)__p);
      if (v10 < 0)
      {
        int v6 = v5 & 0x1F00;
        int v7 = __p[1];
        operator delete(__p[0]);
        if (v6 != 256 || v7) {
          goto LABEL_26;
        }
      }
      else if ((v5 & 0x1F00) != 0x100 || v10)
      {
        goto LABEL_26;
      }
      BOOL v8 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Pairing request coming from a computer without a name - try and get the name", (uint8_t *)__p, 2u);
      }
      if (qword_1009F8398 != -1) {
        dispatch_once(&qword_1009F8398, &stru_1009BB7D8);
      }
      sub_1005060D4((uint64_t)off_1009F8390);
    }
LABEL_26:
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009BB898);
    }
    sub_1006171C8(__p, v2, 4);
    sub_10060CBF8();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_100786B64();
  }
}

void sub_10061BB04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10061BB20(uint64_t a1, int a2, int a3, char a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  uint64_t v7 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  BOOL v8 = qword_100A19EB8;
  if (v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = a3 ? "numeric comparison" : "user confirmation";
      sub_100474E18(v7, __p);
      char v10 = v16 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136315394;
      __int16 v18 = v9;
      __int16 v19 = 2082;
      __int16 v20 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received a new %s request for device %{public}s", buf, 0x16u);
      if (v16 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v11 = sub_100181E20(a1);
    if (v11)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
      }
      sub_1004AA7FC((uint64_t)off_1009F7EF8, v7, v11);
      sub_100475F84(v7, (uint64_t)__p);
      if (v16 < 0)
      {
        __int16 v12 = __p[1];
        operator delete(__p[0]);
        if ((v11 & 0x1F00) != 0x100 || v12) {
          goto LABEL_29;
        }
      }
      else if ((v11 & 0x1F00) != 0x100 || v16)
      {
        goto LABEL_29;
      }
      uint64_t v13 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Pairing request coming from a computer without a name - try and get the name", (uint8_t *)__p, 2u);
      }
      if (qword_1009F8398 != -1) {
        dispatch_once(&qword_1009F8398, &stru_1009BB7D8);
      }
      sub_1005060D4((uint64_t)off_1009F8390);
    }
LABEL_29:
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009BB898);
    }
    sub_1006173AC((uint64_t)__p, v7, a2, a3, a4);
    sub_10060CCE8();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_100786B64();
  }
}

void sub_10061BE08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  nullsub_549(va);
  _Unwind_Resume(a1);
}

void sub_10061BE24(uint64_t a1)
{
  uint64_t v2 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 141558531;
    uint64_t v9 = 1752392040;
    __int16 v10 = 1041;
    int v11 = 6;
    __int16 v12 = 2097;
    uint64_t v13 = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received a passkey request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P", (uint8_t *)&v8, 0x1Cu);
  }
  sub_100255028(0, a1, 0, v3, v4, v5, v6, v7);
}

void sub_10061BEFC(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 141558787;
    uint64_t v6 = 1752392040;
    __int16 v7 = 1041;
    int v8 = 6;
    __int16 v9 = 2097;
    uint64_t v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received key-press request for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with type %d", (uint8_t *)&v5, 0x22u);
  }
}

void sub_10061BFDC(uint64_t a1, int a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  LODWORD(__p[0]) = *(_DWORD *)a1;
  WORD2(__p[0]) = *(_WORD *)(a1 + 4);
  uint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)__p, 1);
  int v5 = qword_100A19EB8;
  if (v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(v4, __p);
      uint64_t v6 = v8 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136446210;
      uint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Received a new passkey display request for device %{public}s", buf, 0xCu);
      if (v8 < 0) {
        operator delete(__p[0]);
      }
    }
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009BB898);
    }
    sub_1006175A0((uint64_t)__p, v4, a2);
    sub_10060CDD8();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_100786B64();
  }
}

void sub_10061C180(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  nullsub_550(va);
  _Unwind_Resume(a1);
}

void sub_10061C19C(int *a1)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
  }
  int v3 = *a1;
  __int16 v4 = *((_WORD *)a1 + 2);
  uint64_t v2 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v3, 1);
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009BB898);
  }
  sub_10060FDE8((uint64_t)off_1009F8760, v2, 156);
}

void sub_10061C250(int a1, uint64_t a2)
{
  __int16 v4 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 141558787;
    uint64_t v6 = 1752392040;
    __int16 v7 = 1041;
    int v8 = 6;
    __int16 v9 = 2097;
    uint64_t v10 = a2;
    __int16 v11 = 1024;
    int v12 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Received encryption refresh for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with status %{bluetooth:OI_STATUS}u", (uint8_t *)&v5, 0x22u);
  }
}

void sub_10061C330(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 141559299;
    *(void *)char v16 = 1752392040;
    *(_WORD *)&v16[8] = 1041;
    int v17 = 6;
    __int16 v18 = 2097;
    uint64_t v19 = a2;
    __int16 v20 = 1024;
    int v21 = a1;
    __int16 v22 = 1024;
    int v23 = a3;
    __int16 v24 = 1024;
    int v25 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received encryption change for device %{private,bluetooth:BD_ADDR,mask.hash}.6P with status %{bluetooth:OI_STATUS}u mode:%d keySize:%d", (uint8_t *)&v15, 0x2Eu);
  }
  if (a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
    }
    int v15 = *(_DWORD *)a2;
    *(_WORD *)char v16 = *(_WORD *)(a2 + 4);
    uint64_t v9 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v15, 1);
    if (v9)
    {
      uint64_t v10 = v9;
      if (qword_1009F8768 != -1) {
        dispatch_once(&qword_1009F8768, &stru_1009BB898);
      }
      sub_10060ED0C((uint64_t)off_1009F8760, v10, a1, a3);
      if (a3 && a4 != 255)
      {
        if (!sub_10047BC18(v10))
        {
          __int16 v11 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = 67109120;
            *(_DWORD *)char v16 = a4;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Initializing EncryptionKeySize to %d", (uint8_t *)&v15, 8u);
          }
          sub_10047BC68(v10, a4);
        }
        if (!sub_10047BDE0(v10))
        {
          int v12 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = 67109120;
            *(_DWORD *)char v16 = a3;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Initializing EncryptionMode to %d", (uint8_t *)&v15, 8u);
          }
          sub_10047BE30(v10, a3);
        }
        if (!sub_10061C768(v10, a2, a4) && !sub_10061C990(v10, a2, a3))
        {
          sub_10047BC68(v10, a4);
          sub_10047BE30(v10, a3);
          sub_10061CAB0(v10, a2, a4);
        }
        return;
      }
      uint64_t v13 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        int v15 = 67109376;
        *(_DWORD *)char v16 = a3;
        *(_WORD *)&_OWORD v16[4] = 1024;
        *(_DWORD *)&v16[6] = a4;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "_encryptChange: Skipping setEncryptionKeySize setEncryptionMode. encryptionMode = %d, keySize = %d", (uint8_t *)&v15, 0xEu);
      }
    }
    if (!a1 && a3)
    {
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
      }
      int v15 = *(_DWORD *)a2;
      *(_WORD *)char v16 = *(_WORD *)(a2 + 4);
      uint64_t v14 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v15, 1);
      if (sub_10018F154((uint64_t)sub_10061D030, v14 + 128))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
          sub_100786BCC();
        }
      }
      else if (v14 && sub_10061C990(v14, a2, a3))
      {
        sub_10047BE30(v14, a3);
      }
    }
  }
}

void sub_10061C700(id a1)
{
}

void sub_10061C744()
{
}

uint64_t sub_10061C768(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = sub_10047BD98(a1);
  uint64_t v7 = sub_100050530();
  BOOL v9 = v6 > a3 && v6 != 255 && a3 < 7;
  (*(void (**)(void))(*(void *)v7 + 648))();
  if (!v9) {
    return 0;
  }
  uint64_t v10 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
  {
    int v15 = 141559043;
    uint64_t v16 = 1752392040;
    __int16 v17 = 1041;
    int v18 = 6;
    __int16 v19 = 2097;
    uint64_t v20 = a2;
    __int16 v21 = 1024;
    unsigned int v22 = v6;
    __int16 v23 = 1024;
    unsigned int v24 = a3;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Encryption key size downgraded for device %{private,bluetooth:BD_ADDR,mask.hash}.6P from %u to %u. Disconnecting device.", (uint8_t *)&v15, 0x28u);
  }
  uint64_t v11 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v11 + 328))(v11) & 1) != 0
    || (uint64_t v12 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v12 + 384))(v12)))
  {
    uint64_t v13 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 8))(v13)) {
      sub_10025B958();
    }
  }
  sub_10017C380(a1 + 128);
  return 181;
}

uint64_t sub_10061C990(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unsigned int v6 = sub_10047BF60(a1);
  uint64_t result = 0;
  if (v6 > a3 && v6 != 255)
  {
    int v8 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
    {
      int v9 = 141559043;
      uint64_t v10 = 1752392040;
      __int16 v11 = 1041;
      int v12 = 6;
      __int16 v13 = 2097;
      uint64_t v14 = a2;
      __int16 v15 = 1024;
      unsigned int v16 = v6;
      __int16 v17 = 1024;
      unsigned int v18 = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Encryption mode downgraded for device %{private,bluetooth:BD_ADDR,mask.hash}.6P from %u to %u. Disconnecting device.", (uint8_t *)&v9, 0x28u);
    }
    sub_10017C380(a1 + 128);
    return 181;
  }
  return result;
}

void sub_10061CAB0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100786C34();
    }
    int v5 = sub_10047C010(a1);
    if (v5)
    {
      if (v5 == 2)
      {
        __int16 v11 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 141558531;
          *(void *)&uint8_t buf[4] = 1752392040;
          *(_WORD *)&unsigned char buf[12] = 1041;
          *(_DWORD *)&unsigned char buf[14] = 6;
          *(_WORD *)&unsigned char buf[18] = 2097;
          *(void *)&buf[20] = a2;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "User has disallowed to connect to the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
        }
        sub_10017C380(a1 + 128);
      }
      else if (v5 == 1)
      {
        unsigned int v6 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 141558531;
          *(void *)&uint8_t buf[4] = 1752392040;
          *(_WORD *)&unsigned char buf[12] = 1041;
          *(_DWORD *)&unsigned char buf[14] = 6;
          *(_WORD *)&unsigned char buf[18] = 2097;
          *(void *)&buf[20] = a2;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "User has allowed to connect to the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
        }
      }
    }
    else
    {
      uint64_t v7 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 141558531;
        *(void *)&uint8_t buf[4] = 1752392040;
        *(_WORD *)&unsigned char buf[12] = 1041;
        *(_DWORD *)&unsigned char buf[14] = 6;
        *(_WORD *)&unsigned char buf[18] = 2097;
        *(void *)&buf[20] = a2;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Show security alert to user for the low security device %{private,bluetooth:BD_ADDR,mask.hash}.6P", buf, 0x1Cu);
      }
      sub_10017C380(a1 + 128);
      memset(buf, 0, 24);
      uint64_t v8 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 328))(v8))
      {
        uint64_t v9 = sub_100035F54();
        if ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 368))(v9))
        {
          uint64_t v10 = "iPod";
        }
        else
        {
          uint64_t v12 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 360))(v12)) {
            uint64_t v10 = "iPad";
          }
          else {
            uint64_t v10 = "iPhone";
          }
        }
        std::string::assign((std::string *)buf, v10);
        long long v31 = 0uLL;
        std::string::size_type v32 = 0;
        sub_100475F84(a1, (uint64_t)&v26);
        __int16 v13 = std::string::insert(&v26, 0, "\"");
        long long v14 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        __int16 v15 = std::string::append(&v27, "\"");
        long long v16 = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        v28.__r_.__value_.__r.__words[2] = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v28.__r_.__value_.__l.__data_ = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        __int16 v17 = std::string::append(&v28, " is trying to connect using an unsecured Bluetooth connection. Unsecured Bluetooth accessories can be used to control your ");
        long long v18 = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
        v29.__r_.__value_.__r.__words[2] = v17->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v18;
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (buf[23] >= 0) {
          __int16 v19 = buf;
        }
        else {
          __int16 v19 = *(const std::string::value_type **)buf;
        }
        if (buf[23] >= 0) {
          std::string::size_type v20 = buf[23];
        }
        else {
          std::string::size_type v20 = *(void *)&buf[8];
        }
        __int16 v21 = std::string::append(&v29, v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v30.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v30.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        __int16 v23 = std::string::append(&v30, " or gain access to your data.");
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        std::string::size_type v32 = v23->__r_.__value_.__r.__words[2];
        long long v31 = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v29.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v28.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v27.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v26.__r_.__value_.__l.__data_);
        }
        if (qword_1009F8778 != -1) {
          dispatch_once(&qword_1009F8778, &stru_1009BB878);
        }
        int v25 = off_1009F8770;
        sub_10004191C(&v30, "Unsecured Bluetooth Connection Request");
        sub_10061AAE8((uint64_t)v25, a1, 0, (uint64_t)&v30, (uint64_t)&v31);
        if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v30.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v32) < 0) {
          operator delete((void *)v31);
        }
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
    }
  }
}

void sub_10061CF64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  if (*(char *)(v42 - 73) < 0) {
    operator delete(*(void **)(v42 - 96));
  }
  _Unwind_Resume(exception_object);
}

void sub_10061D030(int a1, uint64_t a2, uint64_t a3)
{
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_100786CB8();
    }
  }
  else
  {
    __int16 v9 = 0;
    int v8 = 0;
    sub_10017E37C(a2, (uint64_t)&v8);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
    }
    int v6 = v8;
    __int16 v7 = v9;
    uint64_t v4 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v6, 1);
    if (v4)
    {
      uint64_t v5 = v4;
      if (sub_10061C768(v4, (uint64_t)&v8, a3))
      {
        sub_10047BC68(v5, a3);
        sub_10061CAB0(v5, (uint64_t)&v8, a3);
      }
    }
  }
}

uint64_t sub_10061D128()
{
  return 2;
}

uint64_t sub_10061D130(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v12[0] = a1;
  v12[1] = a2;
  long long v25 = xmmword_1007BACC0;
  int v4 = sub_100178188((uint64_t)v12);
  v11[1] = &v25;
  v11[0] = 1048579;
  if (a3)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009BB8B8);
    }
    *(_DWORD *)long long buf = *(_DWORD *)a3;
    LOWORD(v14) = *(_WORD *)(a3 + 4);
    int v5 = 1;
    uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
    if (v6) {
      int v5 = sub_10047D60C(v6);
    }
  }
  else
  {
    int v5 = 1;
  }
  uint64_t v7 = 0;
  if (v5 && (v4 - 4099) <= 0xFFFFFFFC)
  {
    if (sub_1001780EC((uint64_t)v12, (uint64_t)v11)) {
      uint64_t v7 = 0;
    }
    else {
      uint64_t v7 = 2;
    }
  }
  int v8 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = 1752392040;
    __int16 v9 = "not enforcing";
    __int16 v15 = 1041;
    *(_DWORD *)long long buf = 141559299;
    int v16 = 6;
    if (v5) {
      __int16 v9 = "enforcing";
    }
    __int16 v17 = 2097;
    uint64_t v18 = a3;
    __int16 v19 = 1024;
    int v20 = v4;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 2080;
    long long v24 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Device %{private,bluetooth:BD_ADDR,mask.hash}.6P running UUID 0x%x has security level %d and %s", buf, 0x32u);
  }
  return v7;
}

void sub_10061D314(id a1)
{
}

void sub_10061D358()
{
}

void sub_10061D37C(id a1)
{
}

void sub_10061D3C0()
{
}

void sub_10061D3E4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10061D3E4(a1, *a2);
    sub_10061D3E4(a1, a2[1]);
    nullsub_95(a2 + 5);
    operator delete(a2);
  }
}

void sub_10061D440(id a1)
{
}

void sub_10061D484()
{
}

char *sub_10061D4A8(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v6 = (uint64_t **)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        int v8 = (char *)v5;
        unint64_t v9 = *(void *)(v5 + 32);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *(void *)v8;
        uint64_t v6 = (uint64_t **)v8;
        if (!*(void *)v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = *((void *)v8 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v8 + 8);
        goto LABEL_10;
      }
    }
  }
  else
  {
    int v8 = (char *)(a1 + 8);
LABEL_10:
    memset(v11, 0, sizeof(v11));
    sub_10061D57C(a1, a4, v11);
    sub_100036CA0((uint64_t **)a1, (uint64_t)v8, v6, (uint64_t *)v11[0]);
    int v8 = v11[0];
    v11[0] = 0;
    sub_10061D5F8(v11, 0);
  }
  return v8;
}

uint64_t sub_10061D57C@<X0>(uint64_t a1@<X0>, void **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x40uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  _OWORD v6[4] = **a2;
  uint64_t result = sub_100600E3C((uint64_t)(v6 + 5));
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10061D5E0(_Unwind_Exception *a1)
{
  sub_10061D5F8(v1, 0);
  _Unwind_Resume(a1);
}

void sub_10061D5F8(char **a1, char *a2)
{
  uint64_t v2 = *a1;
  *a1 = a2;
  if (v2)
  {
    if (*((unsigned char *)a1 + 16)) {
      nullsub_95(v2 + 40);
    }
    operator delete(v2);
  }
}

void sub_10061D650(id a1)
{
}

void sub_10061D694()
{
}

void sub_10061D6B8(id a1)
{
}

void sub_10061D6FC()
{
}

uint64_t sub_10061D720(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  int v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      int v4 = v2;
    }
    uint64_t v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_10004D3B8((uint64_t **)a1, v4);
  nullsub_95(v4 + 5);
  operator delete(v4);
  return 1;
}

void sub_10061D7A4(id a1)
{
}

void sub_10061D7E8()
{
}

void sub_10061D80C(id a1)
{
}

void sub_10061D850()
{
}

void sub_10061D8A4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x1Cu);
}

uint64_t sub_10061D8C0(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(void *)a1 = &off_1009BB8E8;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 37) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  sub_10061D94C(a1);
  *(_WORD *)(a1 + 16) = a3;
  *(void *)(a1 + 8) = a2;
  return a1;
}

void sub_10061D930(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10061D94C(uint64_t a1)
{
  uint64_t v2 = mach_absolute_time();
  *(unsigned char *)(a1 + 52) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = v2;
  *(unsigned char *)(a1 + 49) = 0;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  unint64_t v3 = 0;
  if (sub_100569640((uint64_t)off_1009F80A8, 0, 0))
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009BB900);
    }
    sub_100569780((uint64_t)off_1009F80A8, v5);
    unint64_t v3 = (std::__shared_weak_count *)v5[1];
    if (v5[0])
    {
      sub_1002ED9D8(v5[0], a1);
      goto LABEL_9;
    }
  }
  int v4 = qword_100A19E48;
  if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
LABEL_9:
    if (!v3) {
      return;
    }
    goto LABEL_10;
  }
  sub_100786D20(v4);
  if (!v3) {
    return;
  }
LABEL_10:
  sub_10008A294(v3);
}

void sub_10061DA4C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10008A294(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10061DA68(uint64_t a1)
{
  *(void *)a1 = &off_1009BB8E8;
  sub_10061DAE0(a1);
  *(_WORD *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10061DAC4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)(v1 + 72);
  if (v3)
  {
    *(void *)(v1 + 80) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10061DAE0(uint64_t a1)
{
  *(_DWORD *)(a1 + 20) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  uint64_t v2 = 0;
  unint64_t v3 = 0;
  sub_100569780((uint64_t)off_1009F80A8, &v2);
  if (v2) {
    sub_100052718(v2 + 128, a1);
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  sub_1005697A0((uint64_t)off_1009F80A8, 0, 0);
  if (v3) {
    sub_10008A294(v3);
  }
}

void sub_10061DBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10008A294(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10061DBC4(uint64_t a1)
{
  sub_10061DA68(a1);

  operator delete();
}

uint64_t sub_10061DBFC(uint64_t result)
{
  __int16 v1 = *(_WORD *)(result + 18);
  if ((unsigned __int16)(v1 + 1) <= 0x63u) {
    __int16 v2 = v1 + 1;
  }
  else {
    __int16 v2 = 0;
  }
  *(_WORD *)(result + 18) = v2;
  return result;
}

void sub_10061DC18(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v5 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: TimeSync Notification %d ", (uint8_t *)v6, 8u);
  }
  *(unsigned char *)(a1 + 49) = a3;
}

BOOL sub_10061DCCC(uint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  BOOL v5 = a2 > a3 || a2 > a4;
  if (v5)
  {
    uint64_t v9 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = 134218496;
      unint64_t v12 = a2;
      __int16 v13 = 2048;
      unint64_t v14 = a3;
      __int16 v15 = 2048;
      unint64_t v16 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Audio Tx complete Timestamp wrapped Previous TS=%llu First in the queue TS=%llu Last in the Queue TS=%llu", (uint8_t *)&v11, 0x20u);
    }
  }
  return v5;
}

void sub_10061DDB4(uint64_t a1, unsigned int a2, uint64_t a3, char a4, uint64_t *a5)
{
  unsigned int v5 = *(unsigned __int16 *)(a1 + 18);
  if (*(_WORD *)(a1 + 18))
  {
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009BB900);
    }
    uint64_t v10 = sub_100569780((uint64_t)off_1009F80A8, &v17);
    if (v17 && (a4 & 0x80) == 0 && *(unsigned char *)(a1 + 49))
    {
      sub_10061E064(a1, a2, 0, 0, a5, 0, v5);
    }
    else
    {
      if (*(float *)(a1 + 24) != 0.0)
      {
        sub_10061DF90(v10, *(_WORD *)(a1 + 16), 0, 0);
        *(void *)(a1 + 32) = 0;
        *(_DWORD *)(a1 + 24) = 0;
      }
      int v11 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v12 = "Yes";
        if (*(unsigned char *)(a1 + 49)) {
          __int16 v13 = "Yes";
        }
        else {
          __int16 v13 = "No";
        }
        *(_DWORD *)long long buf = 136446722;
        int v20 = v13;
        if (a4 >= 0) {
          unint64_t v12 = "No";
        }
        __int16 v21 = 1024;
        unsigned int v22 = v5;
        __int16 v23 = 2082;
        long long v24 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Audio Tx not processed, Timesync Engine Ready=%{public}s number of enqueued pacekts=%u, overflow: %{public}s", buf, 0x1Cu);
      }
      unsigned int v14 = *(unsigned __int16 *)(a1 + 18);
      BOOL v15 = v14 >= v5;
      __int16 v16 = v14 - v5;
      if (v15) {
        *(_WORD *)(a1 + 18) = v16;
      }
    }
    if (v18) {
      sub_10008A294(v18);
    }
  }
}

void sub_10061DF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10008A294(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10061DF90(uint64_t a1, __int16 a2, int a3, int a4)
{
  if (a3) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = a4 == 0;
  }
  uint64_t v5 = v4;
  if (v4)
  {
    char v6 = a4;
    uint64_t v9 = sub_1004AFB34();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    void v13[2] = sub_10061EB2C;
    v13[3] = &unk_1009B1ED0;
    __int16 v15 = a2;
    int v14 = a3;
    char v16 = v6;
    sub_100013018(v9, v13);
  }
  else
  {
    uint64_t v10 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100786D64(v10);
    }
  }
  return v5;
}

unsigned char *sub_10061E064(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, unsigned int a7)
{
  char v40 = 0;
  sub_10001B8E0(&v40);
  int v11 = (unsigned __int16 *)sub_100197A30(*(void *)(a1 + 8) + 128);
  sub_10001B910(&v40);
  unsigned int v38 = a7;
  if (v11)
  {
    int v12 = *v11;
    if (!a2) {
      goto LABEL_27;
    }
  }
  else
  {
    int v12 = 0xFFFF;
    if (!a2) {
      goto LABEL_27;
    }
  }
  int v13 = 0;
  do
  {
    int v14 = *((unsigned __int16 *)a5 + 4);
    if (v12 == v14)
    {
      unint64_t v15 = *(void *)(a1 + 80);
      unint64_t v16 = *(void *)(a1 + 88);
      if (v15 >= v16)
      {
        uint64_t v21 = *(void *)(a1 + 72);
        uint64_t v22 = 0x2E8BA2E8BA2E8BA3 * (v15 - v21);
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) > 0x1745D1745D1745D1) {
          abort();
        }
        unint64_t v24 = 0x2E8BA2E8BA2E8BA3 * (v16 - v21);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0xBA2E8BA2E8BA2E8) {
          unint64_t v25 = 0x1745D1745D1745D1;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25) {
          std::string v26 = (char *)sub_10061F5C4(a1 + 88, v25);
        }
        else {
          std::string v26 = 0;
        }
        std::string v27 = &v26[11 * v22];
        uint64_t v28 = *a5;
        *(_DWORD *)(v27 + 7) = *(_DWORD *)((char *)a5 + 7);
        *(void *)std::string v27 = v28;
        uint64_t v30 = *(void *)(a1 + 72);
        uint64_t v29 = *(void *)(a1 + 80);
        long long v31 = v27;
        if (v29 != v30)
        {
          do
          {
            uint64_t v32 = *(void *)(v29 - 11);
            v29 -= 11;
            int v33 = *(_DWORD *)(v29 + 7);
            *(void *)(v31 - 11) = v32;
            v31 -= 11;
            *(_DWORD *)(v31 + 7) = v33;
          }
          while (v29 != v30);
          uint64_t v29 = *(void *)(a1 + 72);
        }
        uint64_t v18 = v27 + 11;
        *(void *)(a1 + 72) = v31;
        *(void *)(a1 + 80) = v27 + 11;
        *(void *)(a1 + 88) = &v26[11 * v25];
        if (v29) {
          operator delete((void *)v29);
        }
      }
      else
      {
        uint64_t v17 = *a5;
        *(_DWORD *)(v15 + 7) = *(_DWORD *)((char *)a5 + 7);
        *(void *)unint64_t v15 = v17;
        uint64_t v18 = (char *)(v15 + 11);
      }
      *(void *)(a1 + 80) = v18;
    }
    else
    {
      __int16 v19 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = *a5;
        *(_DWORD *)long long buf = 67109376;
        int v42 = v14;
        __int16 v43 = 2048;
        uint64_t v44 = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Invalid LinkID received ID=%x TS=%llu", buf, 0x12u);
      }
    }
    a5 = (uint64_t *)((char *)a5 + 11);
    ++v13;
  }
  while (a2 > (unsigned __int16)v13);
LABEL_27:
  *(_DWORD *)long long buf = 0;
  BOOL v34 = sub_10061E374(a1, *(unsigned __int16 *)(a1 + 16), (uint64_t *)(a1 + 72), v38, (float *)buf);
  int v35 = *(unsigned __int16 *)(a1 + 16);
  if (v34)
  {
    sub_10061E7E0(a1, v35, *(float *)buf);
  }
  else
  {
    sub_10061DF90(v34, v35, 0, 0);
    int v36 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v39 = 0;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Audio Timesync: update average audio transmit time not ready, reset the modifier", v39, 2u);
    }
  }
  return sub_10001B8AC(&v40);
}

void sub_10061E34C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

BOOL sub_10061E374(uint64_t a1, int a2, uint64_t *a3, unsigned int a4, float *a5)
{
  int v8 = (unint64_t *)*a3;
  uint64_t v9 = (unint64_t *)a3[1];
  if (0x2E8BA2E8BA2E8BA3 * ((uint64_t)v9 - *a3) >= (unint64_t)a4) {
    LODWORD(v10) = a4;
  }
  else {
    uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((void)v9 - *a3);
  }
  if (v10 && *(unsigned char *)(a1 + 48))
  {
    uint64_t v35 = 0;
    unint64_t v13 = *v8;
    unint64_t v14 = *(unint64_t *)((char *)v9 - 11);
    BOOL v15 = sub_10061DCCC(a1, *(void *)(a1 + 40), v13, v14);
    if (v15)
    {
      if (a3[1] != *a3) {
        a3[1] = *a3;
      }
      if (*(_WORD *)(a1 + 18))
      {
        if (*(float *)(a1 + 24) != 0.0)
        {
          sub_10061DF90(v15, *(_WORD *)(a1 + 16), 0, 0);
          *(void *)(a1 + 32) = 0;
          *(_DWORD *)(a1 + 24) = 0;
        }
        unint64_t v16 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Warning: Audio Timesync: Dynamic Audio Delivery wrapped around, resetting", buf, 2u);
        }
        BOOL v17 = 0;
        *(void *)(a1 + 40) = 0;
        *(_WORD *)(a1 + 18) = 0;
        *(unsigned char *)(a1 + 48) = 0;
      }
      else
      {
        return 0;
      }
    }
    else
    {
      uint64_t v33 = 0;
      BOOL v34 = 0;
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009BB900);
      }
      sub_100569780((uint64_t)off_1009F80A8, &v33);
      if (v33 && sub_1002EE4AC(v33, v14, &v35))
      {
        if (!*(void *)(a1 + 32))
        {
          *(void *)long long buf = 0;
          if (sub_1002EE4AC(v33, v13, buf)) {
            *(void *)(a1 + 32) = *(void *)buf;
          }
        }
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009BB900);
        }
        float v26 = sub_100568CF4((uint64_t)off_1009F80A8, v35 - *(void *)(a1 + 32), 2) / (float)(int)v10;
        *a5 = v26;
        if (v26 > 250000.0) {
          sub_10061E89C(a1, a2, a3, a4);
        }
        BOOL v17 = 1;
      }
      else
      {
        BOOL v17 = 0;
      }
      unsigned int v27 = *(unsigned __int16 *)(a1 + 18);
      if (v27 >= (unsigned __int16)v10)
      {
        LOWORD(v27) = v27 - v10;
        *(_WORD *)(a1 + 18) = v27;
      }
      if (*(unsigned char *)(a1 + 52))
      {
        uint64_t v28 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          double v29 = *a5;
          uint64_t v30 = 0x2E8BA2E8BA2E8BA3 * (a3[1] - *a3);
          *(_DWORD *)long long buf = 134219008;
          if (v17) {
            int v31 = 84;
          }
          else {
            int v31 = 70;
          }
          *(double *)&uint8_t buf[4] = v29;
          __int16 v37 = 1024;
          unsigned int v38 = a4;
          __int16 v39 = 2048;
          char v40 = (const char *)v30;
          __int16 v41 = 1024;
          int v42 = (unsigned __int16)v27;
          __int16 v43 = 1024;
          int v44 = v31;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Audio Delivery  Average Time=%f, Pending Packets=%d, Tx Completed Tx=%lu, Queue depth=%d, status=%c", buf, 0x28u);
        }
      }
      if (*a3 != a3[1]) {
        a3[1] = *a3;
      }
      uint64_t v32 = v34;
      *(void *)(a1 + 32) = v35;
      *(void *)(a1 + 40) = v14;
      if (v32) {
        sub_10008A294(v32);
      }
    }
  }
  else
  {
    if (v9 != v8)
    {
      uint64_t v18 = (unint64_t *)a3[1];
      uint64_t v19 = (char *)v9 - (char *)v18;
      if (v9 != v18) {
        memmove((void *)*a3, v18, (char *)v9 - (char *)v18);
      }
      uint64_t v9 = (unint64_t *)((char *)v8 + v19);
      a3[1] = (uint64_t)v8 + v19;
    }
    BOOL v17 = *(unsigned char *)(a1 + 48) != 0;
    if (!*(unsigned char *)(a1 + 48))
    {
      uint64_t v20 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((void)v9 - *a3);
        *(_DWORD *)long long buf = 134218498;
        *(void *)&uint8_t buf[4] = v21;
        __int16 v37 = 1024;
        unsigned int v38 = a4;
        __int16 v39 = 2080;
        char v40 = "No";
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Number of packets in queue not yet in sync with Tx complete Tx completed=%lu Enqueued Packets=%d Sync =%s", buf, 0x1Cu);
      }
    }
    unsigned int v22 = *(unsigned __int16 *)(a1 + 18);
    BOOL v23 = v22 >= a4;
    __int16 v24 = v22 - a4;
    if (v23) {
      *(_WORD *)(a1 + 18) = v24;
    }
    *(unsigned char *)(a1 + 48) = 1;
  }
  return v17;
}

void sub_10061E7B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10008A294(a11);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10061E7E0(uint64_t a1, int a2, float a3)
{
  ++*(_WORD *)(a1 + 50);
  *(float *)(a1 + 20) = *(float *)(a1 + 20) + a3;
  sub_10061EDE4(a1, a2, a3);
  if (*(_WORD *)(a1 + 50) == 2)
  {
    *(float *)(a1 + 24) = *(float *)(a1 + 20) * 0.5;
    *(_DWORD *)(a1 + 20) = 0;
    *(_WORD *)(a1 + 50) = 0;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  char v6 = off_1009F80A8;

  return sub_10056A30C((uint64_t)v6, a2, a3);
}

void sub_10061E89C(uint64_t a1, int a2, uint64_t *a3, int a4)
{
  int v8 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    double v9 = *(float *)(a1 + 24);
    double v10 = *(float *)(a1 + 20);
    int v11 = *(unsigned __int16 *)(a1 + 50);
    uint64_t v12 = *(void *)(a1 + 32);
    *(_DWORD *)long long buf = 67110400;
    int v25 = a2;
    __int16 v26 = 1024;
    int v27 = a4;
    __int16 v28 = 2048;
    double v29 = v9;
    __int16 v30 = 2048;
    double v31 = v10;
    __int16 v32 = 1024;
    LODWORD(v33[0]) = v11;
    WORD2(v33[0]) = 2048;
    *(void *)((char *)v33 + 6) = v12;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Handle=%d, Enqueued Packets=%d Previous Average=%f Current Total Tx time=%f updated count=%d Previous TS=%llu", buf, 0x32u);
  }
  double v13 = *(double *)(a1 + 32);
  uint64_t v22 = 0;
  BOOL v23 = 0;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  sub_100569780((uint64_t)off_1009F80A8, &v22);
  if (v22)
  {
    for (uint64_t i = *a3; i != a3[1]; i += 11)
    {
      double v21 = 0.0;
      sub_1002EE4AC(v22, *(void *)i, &v21);
      BOOL v15 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = *(unsigned __int16 *)(i + 8);
        int v17 = *(unsigned __int8 *)(i + 10);
        uint64_t v18 = *(uint64_t *)i;
        double v19 = v21;
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009BB900);
        }
        float v20 = sub_100568CF4((uint64_t)off_1009F80A8, *(void *)&v21 - *(void *)&v13, 2);
        *(_DWORD *)long long buf = 67110144;
        int v25 = v16;
        __int16 v26 = 1024;
        int v27 = v17;
        __int16 v28 = 2048;
        double v29 = *(double *)&v18;
        __int16 v30 = 2048;
        double v31 = v19;
        __int16 v32 = 2048;
        v33[0] = v20;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Link=%d Status=%d Time=%llu Translated Time=%llu delta=%f", buf, 0x2Cu);
      }
      double v13 = v21;
    }
  }
  if (v23) {
    sub_10008A294(v23);
  }
}

void sub_10061EB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
}

uint64_t sub_10061EB2C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009BB920);
  }
  __int16 v2 = (os_unfair_lock_s *)qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 36);
  int v4 = *(_DWORD *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(a1 + 38);

  return sub_100416DE4(v2, v3, v4, v5);
}

BOOL sub_10061EB98(uint64_t a1, int a2, float a3)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  int v6 = sub_100567134((uint64_t)off_1009F80A8, a2);
  if (*(unsigned __int16 *)(a1 + 18) < 8u) {
    return 0;
  }
  int v7 = v6;
  float v8 = *(float *)(a1 + 24);
  BOOL result = v8 < a3;
  if (v8 >= a3) {
    int v7 = 0;
  }
  if (v7 == 1)
  {
    double v10 = qword_100A19E48;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v11)
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Low Latency Mode enabled Timesync paused", v12, 2u);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10061EC80(uint64_t a1, float a2, float a3)
{
  if (a2 <= a3) {
    return 0;
  }
  float v3 = (float)(a2 - a3) / 1000.0;
  unsigned int v4 = (int)(float)(v3 * 10.0);
  if (v4 >= 0x97)
  {
    double v9 = qword_100A19E48;
    uint64_t v6 = 0;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return v6;
    }
    int v11 = 134217984;
    v12[0] = v3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Packet Tx Delta High Delta=%fMSec", (uint8_t *)&v11, 0xCu);
    return 0;
  }
  if (v4 >= 0x3C) {
    uint64_t v6 = 60;
  }
  else {
    uint64_t v6 = v4;
  }
  int v7 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(unsigned __int16 *)(a1 + 18);
    int v11 = 67109376;
    LODWORD(v12[0]) = v8;
    WORD2(v12[0]) = 2048;
    *(double *)((char *)v12 + 6) = v3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Starting Timesync speed adjust, Current enqueue count=%d Average A2DP Tx Time in Msec =% f", (uint8_t *)&v11, 0x12u);
  }
  return v6;
}

void sub_10061EDE4(uint64_t a1, int a2, float a3)
{
  if (!*(unsigned char *)(a1 + 52) && *(float *)(a1 + 24) != 0.0)
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009BB900);
    }
    if ((sub_10056712C((uint64_t)off_1009F80A8, a2) & 1) == 0 && sub_10061EB98(a1, a2, a3))
    {
      int v6 = sub_10061EC80(a1, a3, *(float *)(a1 + 24));
      if (v6)
      {
        __int16 v7 = v6;
        *(_WORD *)(a1 + 28) = 0;
        *(void *)(a1 + 56) = mach_absolute_time();
        *(_WORD *)(a1 + 30) = v7;
        sub_10061EEE0(a1, a2, 1, v7);
      }
    }
  }
}

void sub_10061EEE0(uint64_t a1, __int16 a2, int a3, int a4)
{
  uint64_t v8 = sub_10061DF90(a1, a2, 0, 0);
  if (a3 == 2)
  {
    sub_10061DF90(v8, a2, 2, a4);
    *(_DWORD *)(a1 + 28) = 0;
  }
  else if (a3 == 1)
  {
    sub_10061DF90(v8, a2, 1, a4);
    *(_WORD *)(a1 + 28) += a4;
  }
  *(unsigned char *)(a1 + 52) = a3;
  double v9 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int16 *)(a1 + 18);
    v11[0] = 67109632;
    v11[1] = a3;
    __int16 v12 = 1024;
    int v13 = v10;
    __int16 v14 = 1024;
    int v15 = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Audio Delivery Speed Direction=%d, Pending packets=%d Steps=%d", (uint8_t *)v11, 0x14u);
  }
}

void sub_10061F004(uint64_t a1, uint64_t a2, __int16 a3, unsigned int a4)
{
  uint64_t v8 = qword_100A19E48;
  BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    int v10 = *(unsigned __int16 *)(a1 + 18);
    *(_DWORD *)long long buf = 67109120;
    int v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Audio Timesync: delay audio speedup, Pending packets=%d", buf, 8u);
  }
  sub_10061DF90(v9, a3, 0, 0);
  dispatch_time_t v11 = dispatch_time(0, 1000000 * a4);
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  __int16 v12 = *((void *)off_1009F80A8 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10061F17C;
  block[3] = &unk_1009988A0;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v14 = a3;
  dispatch_after(v11, v12, block);
}

uint64_t sub_10061F17C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  uint64_t result = sub_10056A41C((uint64_t)off_1009F80A8, *(void *)(a1 + 40));
  if (result)
  {
    uint64_t v4 = *(unsigned __int16 *)(a1 + 48);
    return sub_10061F200(v2, v4);
  }
  return result;
}

void sub_10061F200(uint64_t a1, int a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 18);
  int v5 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(a1 + 52);
    int v7 = *(unsigned __int16 *)(a1 + 28);
    v16[0] = 67109376;
    v16[1] = v6;
    __int16 v17 = 1024;
    int v18 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Speed Update Complete current State = %d Slowdown duration = %d ", (uint8_t *)v16, 0xEu);
  }
  int v8 = *(unsigned __int8 *)(a1 + 52);
  if (*(unsigned char *)(a1 + 52))
  {
    if (v8 == 2)
    {
      *(void *)(a1 + 56) = 0;
      uint64_t v12 = a1;
      __int16 v13 = a2;
      int v14 = 0;
      int v15 = 0;
    }
    else
    {
      if (v8 != 1) {
        return;
      }
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009BB900);
      }
      if (sub_100567250((uint64_t)off_1009F80A8, a2)) {
        unsigned int v9 = 120;
      }
      else {
        unsigned int v9 = 60;
      }
      if (v9 <= *(unsigned __int16 *)(a1 + 28) || v4 < 8)
      {
        sub_10061F3BC(a1, a2);
        return;
      }
      int v15 = *(unsigned __int8 *)(a1 + 30);
      uint64_t v12 = a1;
      __int16 v13 = a2;
      int v14 = 1;
    }
    sub_10061EEE0(v12, v13, v14, v15);
  }
  else
  {
    dispatch_time_t v11 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Should not reach here", (uint8_t *)v16, 2u);
    }
  }
}

void sub_10061F3BC(uint64_t a1, __int16 a2)
{
  unsigned int v4 = *(unsigned __int16 *)(a1 + 18);
  uint64_t v5 = *(void *)(a1 + 64);
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BB900);
  }
  int v6 = off_1009F80A8;
  uint64_t v7 = mach_absolute_time();
  float v8 = sub_100568CF4((uint64_t)v6, v7 - *(void *)(a1 + 56), 0);
  if (v4 >= 8 && v8 < 5.0)
  {
    sub_10061F004(a1, v5, a2, 0x1F4u);
  }
  else
  {
    int v10 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v11 = *(unsigned __int16 *)(a1 + 18);
      v12[0] = 67109376;
      v12[1] = v11;
      __int16 v13 = 2048;
      double v14 = v8;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Audio Timesync: Speedup %d [%f]", (uint8_t *)v12, 0x12u);
    }
    sub_10061EEE0(a1, a2, 2, *(unsigned __int8 *)(a1 + 28));
  }
}

void sub_10061F55C(id a1)
{
}

void sub_10061F5A0()
{
}

void *sub_10061F5C4(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1745D1745D1745D2) {
    sub_1000616DC();
  }
  return operator new(11 * a2);
}

void sub_10061F610(id a1)
{
}

void sub_10061F654()
{
}

void *sub_10061F678(uint64_t a1)
{
  uint64_t result = (void *)sub_1004C9B7C(a1, "WirelessCarplayService", 0x40000);
  *uint64_t result = &off_1009BB950;
  return result;
}

void sub_10061F6BC(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

uint64_t sub_10061F6F4(uint64_t a1, uint64_t a2)
{
  char v15 = 0;
  int v14 = 0;
  long long v18 = xmmword_1007BFF50;
  memset(v19, 0, sizeof(v19));
  long long v17 = xmmword_1007BFF60;
  BOOL v4 = sub_10048A2B0(a2, v19, &v15);
  if (v15) {
    BOOL v5 = v4;
  }
  else {
    BOOL v5 = 0;
  }
  if (v5)
  {
    LOBYTE(v13) = 0;
    int AppBooleanValue = CFPreferencesGetAppBooleanValue(@"EnableBLE", @"com.apple.carplay", (Boolean *)&v13);
    if ((_BYTE)v13 && AppBooleanValue && !sub_10018BDDC((unsigned __int8 *)v19, 64660, &v14))
    {
      int v9 = 2;
    }
    else
    {
      if (sub_10018BF80((unsigned __int8 *)v19, (uint64_t)&v18, &v14, v7)
        && sub_10018BF80((unsigned __int8 *)v19, (uint64_t)&v17, &v14, v8))
      {
        int v9 = 0;
        int v10 = 0;
LABEL_15:
        sub_10048E204(a2, v9);
        goto LABEL_16;
      }
      int v9 = 1;
    }
    int v10 = 4;
    goto LABEL_15;
  }
  int v10 = 0;
LABEL_16:
  unsigned int v11 = *(_DWORD *)(a1 + 32);
  uint64_t v16 = 0;
  sub_100026C30((uint64_t)&v16);
  *(void *)&long long v13 = (int)v16;
  *((void *)&v13 + 1) = SWORD2(v16);
  return sub_100477F4C(a2, v11, v10, &v13, 0);
}

uint64_t sub_10061F888(uint64_t a1, unsigned __int8 *a2, unsigned char *a3)
{
  memset(v12, 0, sizeof(v12));
  char v9 = 0;
  int v8 = 0;
  long long v10 = xmmword_1007BFF60;
  long long v11 = xmmword_1007BFF50;
  *a3 = 0;
  uint64_t result = sub_10048A2B0((uint64_t)a2, v12, &v9);
  if (result)
  {
    if (v9)
    {
      if (!sub_10018BF80((unsigned __int8 *)v12, (uint64_t)&v11, &v8, v6)
        || (uint64_t result = sub_10018BF80((unsigned __int8 *)v12, (uint64_t)&v10, &v8, v7), !result))
      {
        *a3 = 1;
        uint64_t result = sub_100040630(a2);
        if ((result & 1) == 0) {
          return sub_10047EFA0((uint64_t)a2, 0);
        }
      }
    }
  }
  return result;
}

void *sub_10061F99C(void *result)
{
  *uint64_t result = 0;
  result[1] = 0;
  result[2] = 0;
  return result;
}

uint64_t *sub_10061F9A8(uint64_t *a1, uint64_t *a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a1 != a2) {
    sub_100276A50((uint64_t)a1, *a2, a2[1], 0x4EC4EC4EC4EC4EC5 * ((a2[1] - *a2) >> 3));
  }
  return a1;
}

void sub_10061FA10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10027696C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10061FA2C(uint64_t *a1, uint64_t a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_10062023C(a1, a2);
  }
  else
  {
    sub_100276D48(a1[1], a2);
    uint64_t result = v3 + 104;
    a1[1] = v3 + 104;
  }
  a1[1] = result;
  return result;
}

void sub_10061FA78(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10061FA80(uint64_t *a1)
{
  uint64_t v3 = *a1;
  uint64_t v2 = a1[1];
  if (v2 != *a1)
  {
    do
    {
      v2 -= 104;
      sub_100276A04((uint64_t)(a1 + 2), v2);
    }
    while (v2 != v3);
  }
  a1[1] = v3;
}

id *sub_10061FAD4(uint64_t a1, id *location)
{
  sub_100276DF4((int)&v8, (uint64_t)(location + 13), *(void *)(a1 + 8), location);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 != v4)
  {
    do
    {
      v6 -= 104;
      sub_100276A04(a1 + 16, v6);
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 8) = v5;
  return location;
}

id *sub_10061FB58(id **a1, void *a2)
{
  id v3 = a2;
  for (uint64_t i = *a1; i != a1[1]; i += 13)
  {
    id v5 = *i;
    unsigned __int8 v6 = [v3 isEqual:v5];

    if (v6) {
      break;
    }
  }

  return i;
}

void sub_10061FBD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10061FBE8(uint64_t *a1, int a2)
{
  uint64_t result = *a1;
  uint64_t v4 = a1[1];
  if (result != v4)
  {
    while (*(_DWORD *)(result + 8) != a2)
    {
      result += 104;
      if (result == v4) {
        return v4;
      }
    }
  }
  return result;
}

uint64_t sub_10061FC1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  for (uint64_t result = 1; ; uint64_t result = (result + 1))
  {
    uint64_t v4 = v1;
    if (v1 != v2)
    {
      uint64_t v4 = v1;
      while (*(_DWORD *)(v4 + 8) != result)
      {
        v4 += 104;
        if (v4 == v2) {
          return result;
        }
      }
    }
    if (v4 == v2) {
      break;
    }
  }
  return result;
}

std::string *sub_10061FC64@<X0>(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  sub_10004191C(a2, "[ ");
  for (uint64_t i = *a1; i != a1[1]; i += 104)
  {
    if (i != *a1) {
      std::string::append(a2, ", ");
    }
    sub_100523624(i, __p);
    if ((v9 & 0x80u) == 0) {
      id v5 = __p;
    }
    else {
      id v5 = (void **)__p[0];
    }
    if ((v9 & 0x80u) == 0) {
      std::string::size_type v6 = v9;
    }
    else {
      std::string::size_type v6 = (std::string::size_type)__p[1];
    }
    std::string::append(a2, (const std::string::value_type *)v5, v6);
    if ((char)v9 < 0) {
      operator delete(__p[0]);
    }
  }
  return std::string::append(a2, " ]");
}

void sub_10061FD44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

unint64_t sub_10061FD80(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 1;
  }
  uint64_t v3 = *a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (-991146299 * ((unint64_t)(a2[1] - *a2) >> 3) != -991146299
                                                                          * ((unint64_t)(v4 - *a1) >> 3))
    return 0;
  if (v5 == v4) {
    return 1;
  }
  do
  {
    unint64_t result = sub_1006200DC(v5, v3);
    if (!result) {
      break;
    }
    v5 += 104;
    v3 += 104;
  }
  while (v5 != a1[1]);
  return result;
}

uint64_t sub_10061FE28(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v1 + 16) == 2) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    v1 += 104;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_10061FE5C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    if (*(_DWORD *)(v1 + 16) == 1) {
      uint64_t result = (result + 1);
    }
    else {
      uint64_t result = result;
    }
    v1 += 104;
  }
  while (v1 != v2);
  return result;
}

uint64_t sub_10061FE90(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1[1];
  if (*a1 == v2) {
    return 0;
  }
  LODWORD(result) = 0;
  do
  {
    if ((*(_DWORD *)(v1 + 16) - 3) >= 2) {
      uint64_t result = result;
    }
    else {
      uint64_t result = (result + 1);
    }
    v1 += 104;
  }
  while (v1 != v2);
  return result;
}

BOOL sub_10061FEC8(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  uint64_t v2 = *a1 + 104;
  do
  {
    int v3 = *(_DWORD *)(v2 - 88);
    BOOL result = v3 == 6;
    BOOL v5 = v3 == 6 || v2 == v1;
    v2 += 104;
  }
  while (!v5);
  return result;
}

BOOL sub_10061FEFC(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  uint64_t v2 = *a1 + 104;
  do
  {
    int v3 = *(_DWORD *)(v2 - 88);
    BOOL result = v3 == 5;
    BOOL v5 = v3 == 5 || v2 == v1;
    v2 += 104;
  }
  while (!v5);
  return result;
}

BOOL sub_10061FF30(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  uint64_t v2 = *a1 + 104;
  do
  {
    int v3 = *(_DWORD *)(v2 - 88);
    BOOL result = v3 == 3;
    BOOL v5 = v3 == 3 || v2 == v1;
    v2 += 104;
  }
  while (!v5);
  return result;
}

BOOL sub_10061FF64(void *a1)
{
  uint64_t v1 = a1[1];
  if (*a1 == v1) {
    return 0;
  }
  uint64_t v2 = *a1 + 104;
  do
  {
    int v3 = *(_DWORD *)(v2 - 88);
    BOOL result = v3 == 4;
    BOOL v5 = v3 == 4 || v2 == v1;
    v2 += 104;
  }
  while (!v5);
  return result;
}

BOOL sub_10061FF98(uint64_t *a1, uint64_t *a2)
{
  if (a2 == a1) {
    return 0;
  }
  uint64_t v3 = *a2;
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  if (-991146299 * ((unint64_t)(a2[1] - *a2) >> 3) != -991146299
                                                                          * ((unint64_t)(v4 - *a1) >> 3))
    return 1;
  if (v5 == v4) {
    return 0;
  }
  do
  {
    BOOL result = sub_100620040(v5, v3);
    if (result) {
      break;
    }
    v5 += 104;
    v3 += 104;
  }
  while (v5 != a1[1]);
  return result;
}

BOOL sub_100620040(uint64_t a1, uint64_t a2)
{
  return ![*(id *)a1 isEqual:*(void *)a2]
      || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
      || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
      || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
      || *(unsigned __int8 *)(a1 + 14) != *(unsigned __int8 *)(a2 + 14)
      || *(unsigned __int8 *)(a1 + 15) != *(unsigned __int8 *)(a2 + 15);
}

unint64_t sub_1006200DC(uint64_t a1, uint64_t a2)
{
  unint64_t result = (unint64_t)[*(id *)a1 isEqual:*(void *)a2];
  if (result)
  {
    if (*(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
      || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
      || *(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)
      || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16))
    {
      return 0;
    }
    unint64_t result = sub_10062E958((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a2 + 24));
    if (result)
    {
      unint64_t result = sub_100620198((unsigned __int8 *)(a1 + 80), (unsigned __int8 *)(a2 + 80));
      if (result)
      {
        if (*(unsigned __int8 *)(a1 + 14) == *(unsigned __int8 *)(a2 + 14)) {
          return *(unsigned __int8 *)(a1 + 15) == *(unsigned __int8 *)(a2 + 15);
        }
        return 0;
      }
    }
  }
  return result;
}

BOOL sub_100620198(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

uint64_t sub_10062023C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = 0x4EC4EC4EC4EC4EC5 * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) > 0x276276276276276) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0x4EC4EC4EC4EC4EC5 * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x13B13B13B13B13BLL) {
    unint64_t v10 = 0x276276276276276;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v18 = v7;
  if (v10) {
    long long v11 = (char *)sub_100276E80(v7, v10);
  }
  else {
    long long v11 = 0;
  }
  BOOL v14 = v11;
  uint64_t v15 = &v11[104 * v3];
  long long v17 = &v11[104 * v10];
  sub_100276D48((uint64_t)v15, a2);
  uint64_t v16 = v15 + 104;
  sub_100620354(a1, &v14);
  uint64_t v12 = a1[1];
  sub_1006203DC(&v14);
  return v12;
}

void sub_100620340(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1006203DC((void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100620354(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 104;
    uint64_t result = sub_100276D48(result - 104, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

void **sub_1006203DC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100620410(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 104;
    sub_100276A04(v4, i - 104);
  }
}

uint64_t sub_100620458(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = off_1009BBA50;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 40) = 0;
  if (!a2)
  {
    uint64_t v3 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100786DB0(v3, v4, v5, v6, v7, v8, v9, v10);
    }
  }
  return a1;
}

void sub_1006204D0(uint64_t a1, void *a2, uint64_t *a3, __int16 a4)
{
  id v11 = a2;
  objc_storeStrong((id *)(a1 + 16), a2);
  uint64_t v9 = *a3;
  uint64_t v8 = a3[1];
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 32);
  *(void *)(a1 + 24) = v9;
  *(void *)(a1 + 32) = v8;
  if (v10) {
    sub_10008A294(v10);
  }
  *(_WORD *)(a1 + 40) = a4;
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 16))(a1)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 24))(a1);
  }
}

void sub_1006205B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1006205C8(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v3 = __p;
    operator delete(__p);
  }
}

void sub_10062060C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100620628(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100786E28(a2, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  return (***(uint64_t (****)(void, uint64_t, uint64_t, uint64_t))(a1 + 8))(*(void *)(a1 + 8), a1, a2, a3);
}

void sub_1006206BC(uint64_t a1)
{
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BC048);
  }
  uint64_t v2 = qword_1009F7F08;
  uint64_t v3 = *(void **)(a1 + 16);

  sub_100640E64(v2, v3);
}

void sub_100620720(uint64_t a1, __int16 a2)
{
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BC048);
  }
  uint64_t v4 = qword_1009F7F08;
  uint64_t v5 = *(void **)(a1 + 16);

  sub_100641450(v4, v5, a2);
}

void sub_10062078C(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BC048);
  }
  uint64_t v4 = qword_1009F7F08;
  uint64_t v5 = *(void **)(a1 + 16);

  sub_1006410E8(v4, v5, a2);
}

void sub_1006207F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v5 = v3;
  if (qword_1009F7F10 == -1)
  {
    uint64_t v4 = v3;
  }
  else
  {
    dispatch_once(&qword_1009F7F10, &stru_1009BC048);
    uint64_t v4 = v5;
  }
  sub_100640874(qword_1009F7F08, a1, v4);
}

void sub_10062087C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100620890(uint64_t a1, uint64_t a2, int a3)
{
  id v5 = qword_100A19E88;
  if (a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100786E94();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      v8[0] = 67109120;
      v8[1] = a3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Remote response with MTU %d", (uint8_t *)v8, 8u);
    }
    if (a3 != 23) {
      sub_100620720(a1, a3);
    }
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
}

uint64_t sub_1006209A8(uint64_t a1)
{
  char v6 = 0;
  sub_10001B8E0(&v6);
  uint64_t v2 = sub_10022BBC8(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_100620AFC, *(unsigned __int16 *)(a1 + 42), a1);
  sub_10001B910(&v6);
  if (v2 == 146)
  {
    id v3 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      id v4 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 138412290;
      id v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ignoring MTU exchange request - MTU already set for device \"%@\"", buf, 0xCu);
    }
    (*(void (**)(uint64_t, void))(*(void *)a1 + 24))(a1, 0);
    uint64_t v2 = 0;
  }
  sub_10001B8AC(&v6);
  return v2;
}

void sub_100620AE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100620AFC(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100620890(a3, a1, a2);
}

void sub_100620B10(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  long long __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  if (!a2)
  {
    if (a4) {
      operator new();
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100786F1C(a1);
    }
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_100620DD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t sub_100620E34(uint64_t a1)
{
  long long __p = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = sub_1004F1F74(v2, 0, &__p);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
    LOBYTE(__p) = 0;
    sub_10001B8E0(&__p);
    uint64_t v5 = sub_10022BCA0(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_100620FBC, a1);
    sub_10001B8AC(&__p);
  }
  else
  {
    char v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Returning primary services from cache", v8, 2u);
    }
    (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, &__p);
    if (__p)
    {
      uint64_t v10 = __p;
      operator delete(__p);
    }
    return 0;
  }
  return v5;
}

void sub_100620F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100620FBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_100620FD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (!a2)
  {
    if (a4) {
      operator new();
    }
    char v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = v9;
      sub_1000417A8(a1 + 44, v9);
      if (v10 < 0) {
        uint64_t v7 = (void **)v9[0];
      }
      id v8 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 136446466;
      uint64_t v15 = v7;
      __int16 v16 = 2112;
      id v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No primary services with UUID %{public}s found on device \"%@\"", buf, 0x16u);
      if (v10 < 0) {
        operator delete(v9[0]);
      }
    }
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v12 = __p;
    operator delete(__p);
  }
}

void sub_1006212F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

uint64_t sub_10062133C(uint64_t a1)
{
  long long __p = 0;
  double v19 = 0;
  uint64_t v20 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = sub_1004F1F74(v2, (unsigned __int8 *)(a1 + 44), &__p);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4) {
    goto LABEL_6;
  }
  uint64_t v9 = __p;
  id v8 = v19;
  char v10 = qword_100A19E88;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT);
  if (v8 == v9)
  {
    if (v11)
    {
      sub_1000417A8(a1 + 44, v16);
      if (v17 >= 0) {
        uint64_t v13 = v16;
      }
      else {
        uint64_t v13 = (void **)v16[0];
      }
      id v14 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 136446466;
      __int16 v24 = v13;
      __int16 v25 = 2112;
      id v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Database cache fetching returned empty for service UUID %{public}s on device \"%@\"", buf, 0x16u);
      if (v17 < 0) {
        operator delete(v16[0]);
      }
    }
    uint64_t v15 = sub_100050530();
    (*(void (**)(uint64_t))(*(void *)v15 + 424))(v15);
LABEL_6:
    if (__p)
    {
      double v19 = __p;
      operator delete(__p);
    }
    LOBYTE(__p) = 0;
    sub_10001B8E0(&__p);
    unsigned int v5 = *(unsigned __int16 *)(a1 + 40);
    long long v21 = *(_OWORD *)(a1 + 44);
    int v22 = *(_DWORD *)(a1 + 60);
    sub_10022BFD8(v5, (uint64_t)sub_1006215E0, (unsigned __int8 *)&v21, a1);
    uint64_t v7 = v6;
    sub_10001B8AC(&__p);
    return v7;
  }
  if (v11)
  {
    LOWORD(v16[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Using local database for discover services by UUID.", (uint8_t *)v16, 2u);
  }
  (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, &__p);
  if (__p)
  {
    double v19 = __p;
    operator delete(__p);
  }
  return 0;
}

void sub_100621594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006215E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_1006215F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  long long __p = 0;
  BOOL v11 = 0;
  uint64_t v12 = 0;
  if (!a2)
  {
    if (a4) {
      operator new();
    }
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int16 *)(a1 + 42);
      int v8 = *(unsigned __int16 *)(a1 + 44);
      id v9 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 67109634;
      int v14 = v7;
      __int16 v15 = 1024;
      int v16 = v8;
      __int16 v17 = 2112;
      id v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No included services found in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x18u);
    }
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    BOOL v11 = __p;
    operator delete(__p);
  }
}

void sub_1006218F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t sub_100621950(uint64_t a1)
{
  long long __p = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = sub_1004F2358(v2, *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    if (__p)
    {
      char v10 = __p;
      operator delete(__p);
    }
    LOBYTE(__p) = 0;
    sub_10001B8E0(&__p);
    uint64_t v5 = sub_10022C374(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_100621AE4, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
    sub_10001B8AC(&__p);
  }
  else
  {
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Using local database for discover included services.", v8, 2u);
    }
    (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, &__p);
    if (__p)
    {
      char v10 = __p;
      operator delete(__p);
    }
    return 0;
  }
  return v5;
}

void sub_100621AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100621AE4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_100621AFC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  long long __p = 0;
  int v16 = 0;
  uint64_t v17 = 0;
  if (!a2)
  {
    if (a4)
    {
      uint64_t v6 = a4;
      int v7 = (unsigned __int16 *)(a3 + 4);
      do
      {
        __n128 v48 = 0uLL;
        int v49 = 0;
        __n128 v46 = *(__n128 *)(v7 + 2);
        int v47 = *((_DWORD *)v7 + 5);
        sub_100035F98(&v48, &v46);
        int v9 = *(v7 - 2);
        if (v9 == *v7)
        {
          char v10 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
          {
            id v11 = *(id *)(a1 + 16);
            *(_DWORD *)long long buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = v9;
            __int16 v19 = 2112;
            id v20 = v11;
            _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Ignoring invalid characteristic with identical handle and value handle (0x%04x) on device \"%@\"", buf, 0x12u);
          }
        }
        else
        {
          int v45 = 0;
          long long v44 = xmmword_1007BFF70;
          if (!sub_10022A44C(v8, (unsigned __int8 *)&v44))
          {
            int v43 = 0;
            long long v42 = xmmword_1007BFF84;
            if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v42))
            {
              int v41 = 0;
              long long v40 = xmmword_1007BFF98;
              if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v40))
              {
                int v39 = 0;
                long long v38 = xmmword_1007BFFAC;
                if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v38))
                {
                  int v37 = 0;
                  long long v36 = xmmword_1007BFFC0;
                  if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v36))
                  {
                    int v35 = 0;
                    long long v34 = xmmword_1007BFFD4;
                    if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v34))
                    {
                      int v33 = 0;
                      long long v32 = xmmword_1007BFFE8;
                      if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v32))
                      {
                        int v31 = 0;
                        long long v30 = xmmword_1007BFFFC;
                        if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v30))
                        {
                          int v29 = 0;
                          long long v28 = xmmword_1007C0010;
                          if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v28))
                          {
                            int v27 = 0;
                            long long v26 = xmmword_1007C0024;
                            if (!sub_10022A44C((unsigned __int8 *)&v48, (unsigned __int8 *)&v26)) {
                              operator new();
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
          uint64_t v12 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
          {
            sub_1000417A8((uint64_t)&v48, buf);
            if (v21 >= 0) {
              uint64_t v13 = buf;
            }
            else {
              uint64_t v13 = *(uint8_t **)buf;
            }
            id v14 = *(id *)(a1 + 16);
            *(_DWORD *)int v22 = 136446466;
            BOOL v23 = v13;
            __int16 v24 = 2112;
            id v25 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Ignoring invalid characteristic with invalid UUID %{public}s on device \"%@\"", v22, 0x16u);
            if (v21 < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        v7 += 14;
        --v6;
      }
      while (v6);
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100786F9C(a1);
    }
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    int v16 = __p;
    operator delete(__p);
  }
}

void sub_100621FA8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
}

uint64_t sub_10062200C(uint64_t a1)
{
  long long __p = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = sub_1004F259C(v2, 0, *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    if (__p)
    {
      char v10 = __p;
      operator delete(__p);
    }
    LOBYTE(__p) = 0;
    sub_10001B8E0(&__p);
    uint64_t v5 = sub_10022C710(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_1006221A4, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
    sub_10001B8AC(&__p);
  }
  else
  {
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Using local database for discover all characteristics.", v8, 2u);
    }
    (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, &__p);
    if (__p)
    {
      char v10 = __p;
      operator delete(__p);
    }
    return 0;
  }
  return v5;
}

void sub_100622164(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006221A4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_1006221BC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4 = a2;
  long long __p = 0;
  char v21 = 0;
  uint64_t v22 = 0;
  if (!a2)
  {
    if (a4)
    {
      uint64_t v7 = 0;
      uint64_t v8 = a4;
      do
      {
        int v9 = *(unsigned __int16 *)(a3 + 28 * v7);
        if (v9 != *(unsigned __int16 *)(a3 + 28 * v7 + 4)) {
          operator new();
        }
        char v10 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
        {
          id v11 = *(id *)(a1 + 16);
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)__int16 v24 = v9;
          *(_WORD *)&uint8_t v24[4] = 2112;
          *(void *)&v24[6] = v11;
          _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Ignoring invalid characteristic with identical handle and value handle (0x%04x) on device \"%@\"", buf, 0x12u);
        }
        ++v7;
      }
      while (v7 != v8);
      uint64_t v4 = 0;
    }
    uint64_t v12 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = v18;
      sub_1000417A8(a1 + 48, v18);
      uint64_t v14 = v4;
      if (v19 < 0) {
        uint64_t v13 = (void **)v18[0];
      }
      int v15 = *(unsigned __int16 *)(a1 + 42);
      int v16 = *(unsigned __int16 *)(a1 + 44);
      id v17 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 136446978;
      *(void *)__int16 v24 = v13;
      *(_WORD *)&v24[8] = 1024;
      *(_DWORD *)&v24[10] = v15;
      __int16 v25 = 1024;
      int v26 = v16;
      __int16 v27 = 2112;
      id v28 = v17;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "No characteristics with UUID %{public}s found in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x22u);
      if (v19 < 0) {
        operator delete(v18[0]);
      }

      uint64_t v4 = v14;
    }
  }
  sub_100620628(a1, v4, (uint64_t)&__p);
  if (__p)
  {
    char v21 = __p;
    operator delete(__p);
  }
}

void sub_100622594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006225F8(uint64_t a1)
{
  long long __p = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = sub_1004F259C(v2, (unsigned __int8 *)(a1 + 48), *(unsigned __int16 *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    LOBYTE(__p) = 0;
    sub_10001B8E0(&__p);
    unsigned int v5 = *(unsigned __int16 *)(a1 + 40);
    __n128 v14 = *(__n128 *)(a1 + 48);
    int v15 = *(_DWORD *)(a1 + 64);
    sub_10022CACC(v5, (uint64_t)sub_1006227DC, &v14, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
    uint64_t v7 = v6;
    sub_10001B8AC(&__p);
  }
  else
  {
    uint64_t v8 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Using local database for discover characteristics by UUID.", v10, 2u);
    }
    (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, &__p);
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    return 0;
  }
  return v7;
}

void sub_100622794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006227DC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
}

void sub_1006227F4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  long long __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  if (!a2)
  {
    if (a4)
    {
      memset(buf, 0, sizeof(buf));
      LODWORD(v16) = 0;
      __n128 v35 = *(__n128 *)(a3 + 4);
      int v36 = *(_DWORD *)(a3 + 20);
      sub_100035F98((__n128 *)buf, &v35);
      int v34 = 0;
      long long v33 = xmmword_1007BFFC0;
      if (sub_10022A44C(buf, (unsigned __int8 *)&v33)) {
        operator new();
      }
      int v32 = 0;
      long long v31 = xmmword_1007BFFD4;
      if (sub_10022A44C(buf, (unsigned __int8 *)&v31)) {
        operator new();
      }
      int v30 = 0;
      long long v29 = xmmword_1007BFFE8;
      if (sub_10022A44C(buf, (unsigned __int8 *)&v29)
        || (v28 = 0, long long v27 = xmmword_1007BFFFC, sub_10022A44C(buf, (unsigned __int8 *)&v27)))
      {
        operator new();
      }
      int v26 = 0;
      long long v25 = xmmword_1007C0010;
      if (sub_10022A44C(buf, (unsigned __int8 *)&v25)) {
        operator new();
      }
      int v24 = 0;
      long long v23 = xmmword_1007BFF70;
      if (!sub_10022A44C(buf, (unsigned __int8 *)&v23))
      {
        int v22 = 0;
        long long v21 = xmmword_1007BFF84;
        if (!sub_10022A44C(buf, (unsigned __int8 *)&v21))
        {
          int v20 = 0;
          long long v19 = xmmword_1007BFF98;
          if (!sub_10022A44C(buf, (unsigned __int8 *)&v19))
          {
            int v18 = 0;
            long long v17 = xmmword_1007BFFAC;
            if (!sub_10022A44C(buf, (unsigned __int8 *)&v17)) {
              operator new();
            }
          }
        }
      }
    }
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = *(unsigned __int16 *)(a1 + 42);
      int v8 = *(unsigned __int16 *)(a1 + 44);
      id v9 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v7;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v8;
      *(_WORD *)&unsigned char buf[14] = 2112;
      id v16 = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "No descriptors found in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x18u);
    }
    char v10 = *(void **)(a1 + 24);
    id v11 = *(std::__shared_weak_count **)(a1 + 32);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1004F4934(v10, (uint64_t **)&__p, *(_WORD *)(a1 + 42));
    if (v11) {
      sub_10008A294(v11);
    }
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v13 = __p;
    operator delete(__p);
  }
}

void sub_100622DBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
}

uint64_t sub_100622E28(uint64_t a1)
{
  long long __p = 0;
  char v10 = 0;
  uint64_t v11 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = sub_1004F2A88(v2, *(_WORD *)(a1 + 42), *(unsigned __int16 *)(a1 + 44), &__p);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    if (__p)
    {
      char v10 = __p;
      operator delete(__p);
    }
    LOBYTE(__p) = 0;
    sub_10001B8E0(&__p);
    uint64_t v5 = sub_10022CBE0(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_100622FBC, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
    sub_10001B8AC(&__p);
  }
  else
  {
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Using local database for discover all descriptors.", v8, 2u);
    }
    (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, &__p);
    if (__p)
    {
      char v10 = __p;
      operator delete(__p);
    }
    return 0;
  }
  return v5;
}

void sub_100622F7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100622FBC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_100622FD4(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  if (!a2) {
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787050();
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    uint64_t v5 = __p;
    operator delete(__p);
  }
}

void sub_1006231C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100623250(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  id v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v4 = sub_1004F52BC(v2, *(unsigned __int16 *)(a1 + 44));
  if (v3) {
    sub_10008A294(v3);
  }
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007870D8(a1 + 44, a1);
    }
    return 1;
  }
  uint64_t v5 = v4[1];
  int v6 = *(_DWORD *)(v5 + 20);
  __n128 v12 = *(__n128 *)(v5 + 4);
  int v13 = v6;
  sub_100035F98(&v11, &v12);
  int v10 = 0;
  long long v9 = xmmword_1007BFFAC;
  if (!sub_10022A44C((unsigned __int8 *)&v11, (unsigned __int8 *)&v9))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007871CC(a1 + 44, a1);
    }
    return 1;
  }
  if ((v4[9] & 2) != 0)
  {
    v12.n128_u8[0] = 0;
    sub_10001B8E0(&v12);
    uint64_t v7 = sub_10022CE5C(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_100623430, *(_WORD *)(a1 + 42), a1);
    sub_10001B8AC(&v12);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100787160();
    }
    return 2;
  }
  return v7;
}

void sub_100623400(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_100623430(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100623448(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  long long __p = 0;
  long long v9 = 0;
  uint64_t v10 = 0;
  if (a4) {
    operator new();
  }
  int v6 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
  {
    sub_1000417A8(a1 + 44, v7);
    sub_100787254((char *)v7, a1, (uint64_t)&v11, v6);
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    long long v9 = __p;
    operator delete(__p);
  }
}

void sub_1006236AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
}

uint64_t sub_100623748(uint64_t a1)
{
  char v5 = 0;
  sub_10001B8E0(&v5);
  unsigned int v2 = *(unsigned __int16 *)(a1 + 40);
  long long v6 = *(_OWORD *)(a1 + 44);
  int v7 = *(_DWORD *)(a1 + 60);
  uint64_t v3 = sub_10022D0A0(v2, (uint64_t)sub_100623810, &v6, *(_WORD *)(a1 + 64), *(unsigned __int16 *)(a1 + 66), *(_WORD *)(a1 + 68), a1);
  sub_10001B8AC(&v5);
  return v3;
}

void sub_1006237F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100623810(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_100623828(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  char v5 = 0;
  uint64_t v6 = 0;
  if (!a2) {
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787320();
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    char v5 = __p;
    operator delete(__p);
  }
}

void sub_100623A1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100623AA4(uint64_t a1)
{
  char v4 = 0;
  sub_10001B8E0(&v4);
  uint64_t v2 = sub_10022D448(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_100623B20, *(_WORD *)(a1 + 42), *(_WORD *)(a1 + 44), a1);
  sub_10001B8AC(&v4);
  return v2;
}

void sub_100623B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100623B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100623B38(uint64_t a1, uint64_t a2)
{
  long long __p = 0;
  int v20 = 0;
  long long v21 = 0;
  if (!a2)
  {
    uint64_t v4 = *(void *)(a1 + 24);
    char v5 = *(std::__shared_weak_count **)(a1 + 32);
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v6 = (unsigned char *)sub_1004F5544(v4, *(unsigned __int16 *)(a1 + 42));
    if (v5) {
      sub_10008A294(v5);
    }
    if (v6)
    {
      if (sub_100613FE0(v6))
      {
        int v7 = *(void **)(a1 + 24);
        int v8 = *(std::__shared_weak_count **)(a1 + 32);
        if (v8) {
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_1004F5258(v7, (uint64_t)v6);
        if (v8) {
          sub_10008A294(v8);
        }
        uint64_t v9 = (v20 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v9 + 1) >> 61) {
          abort();
        }
        unint64_t v10 = (v21 - (unsigned char *)__p) >> 2;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((unint64_t)(v21 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          __n128 v12 = (char *)sub_1000405F8((uint64_t)&v21, v11);
        }
        else {
          __n128 v12 = 0;
        }
        int v13 = &v12[8 * v9];
        uint64_t v14 = &v12[8 * v11];
        *(void *)int v13 = v6;
        int v15 = v13 + 8;
        long long v17 = (char *)__p;
        id v16 = v20;
        if (v20 != __p)
        {
          do
          {
            uint64_t v18 = *((void *)v16 - 1);
            v16 -= 8;
            *((void *)v13 - 1) = v18;
            v13 -= 8;
          }
          while (v16 != v17);
          id v16 = (char *)__p;
        }
        long long __p = v13;
        int v20 = v15;
        long long v21 = v14;
        if (v16) {
          operator delete(v16);
        }
        int v20 = v15;
      }
      else
      {
        (*(void (**)(unsigned char *))(*(void *)v6 + 8))(v6);
      }
    }
  }
  if (__p == v20 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_1007873A8();
  }
  sub_100620628(a1, a2, (uint64_t)&__p);
  if (__p)
  {
    int v20 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100623D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100623D78(uint64_t a1)
{
  char v4 = 0;
  sub_10001B8E0(&v4);
  uint64_t v2 = sub_10022CE5C(*(unsigned __int16 *)(a1 + 40), (uint64_t)sub_100623DF0, *(_WORD *)(a1 + 42), a1);
  sub_10001B8AC(&v4);
  return v2;
}

void sub_100623DDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100623DF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100623E08(uint64_t a1, uint64_t a2)
{
  if (a2 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787430();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
}

uint64_t sub_100623E94(uint64_t a1)
{
  char v8 = 0;
  sub_10001B8E0(&v8);
  unsigned int v2 = *(unsigned __int16 *)(a1 + 40);
  __int16 v3 = *(_WORD *)(a1 + 42);
  uint64_t v4 = sub_10004A6E4(a1 + 48);
  __int16 v5 = sub_100045F00(a1 + 48);
  uint64_t v6 = sub_10022D508(v2, (uint64_t)sub_100623F44, v3, v4, v5, a1);
  sub_10001B8AC(&v8);
  return v6;
}

void sub_100623F30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100623F44(uint64_t a1, uint64_t a2)
{
  return sub_100623E08(a2, a1);
}

uint64_t sub_100623F54(unsigned __int16 *a1)
{
  char v8 = 0;
  sub_10001B8E0(&v8);
  unsigned int v2 = a1[20];
  __int16 v3 = a1[21];
  uint64_t v4 = sub_10004A6E4((uint64_t)(a1 + 24));
  __int16 v5 = sub_100045F00((uint64_t)(a1 + 24));
  uint64_t v6 = sub_10022D508(v2, 0, v3, v4, v5, (uint64_t)a1);
  sub_10001B910(&v8);
  if (!v6) {
    (*(void (**)(unsigned __int16 *, void))(*(void *)a1 + 24))(a1, 0);
  }
  sub_10001B8AC(&v8);
  return v6;
}

void sub_10062401C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100624030(uint64_t a1, uint64_t a2)
{
  if (a2 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_1007874B4();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
}

uint64_t sub_1006240BC(uint64_t a1)
{
  char v8 = 0;
  sub_10001B8E0(&v8);
  unsigned int v2 = *(unsigned __int16 *)(a1 + 40);
  __int16 v3 = *(_WORD *)(a1 + 42);
  uint64_t v4 = (const void *)sub_10004A6E4(a1 + 48);
  unsigned __int16 v5 = sub_100045F00(a1 + 48);
  uint64_t v6 = sub_10022D6C4(v2, (uint64_t)sub_100624170, v3, 0, v4, v5, a1);
  sub_10001B8AC(&v8);
  return v6;
}

void sub_10062415C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100624170(uint64_t a1, uint64_t a2)
{
  return sub_100624030(a2, a1);
}

uint64_t sub_100624180(uint64_t a1, uint64_t a2)
{
  if (a2 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787538();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, a2);
}

uint64_t sub_10062420C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  __int16 v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = sub_1004F52BC(v2, *(unsigned __int16 *)(a1 + 42));
  if (v3) {
    sub_10008A294(v3);
  }
  if (!v4) {
    return 1;
  }
  char v11 = 0;
  sub_10001B8E0(&v11);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 40);
  __int16 v6 = *(_WORD *)(a1 + 42);
  uint64_t v7 = sub_10004A6E4(a1 + 48);
  __int16 v8 = sub_100045F00(a1 + 48);
  uint64_t v9 = sub_10022DCD4(v5, (uint64_t)sub_10062430C, v6, v7, v8, a1);
  sub_10001B8AC(&v11);
  return v9;
}

void sub_1006242E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  if (v13) {
    sub_10008A294(v13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062430C(uint64_t a1, uint64_t a2)
{
  return sub_100624180(a2, a1);
}

uint64_t sub_10062431C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  __int16 v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v17 = xmmword_1007BA5A0;
  int v18 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v17);
  long long v14 = xmmword_1007BA5C8;
  int v15 = 0;
  sub_100035F98(&v16, (__n128 *)&v14);
  uint64_t v4 = sub_1004F5388(v2, buf, (unsigned __int8 *)&v16);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = *(_DWORD *)(v5 + 20);
    *(_OWORD *)long long buf = *(_OWORD *)(v5 + 4);
    int v20 = v6;
    sub_100035F98(&v16, (__n128 *)buf);
    int v13 = 0;
    long long v12 = xmmword_1007BFFAC;
    if (sub_10022A44C((unsigned __int8 *)&v16, (unsigned __int8 *)&v12))
    {
      uint64_t v7 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = *(id *)(a1 + 16);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting GAP name characteristic value on device \"%@\"", buf, 0xCu);
      }
      if (*(char *)(a1 + 87) < 0)
      {
        uint64_t v9 = *(const void **)(a1 + 64);
        size_t v10 = *(void *)(a1 + 72);
      }
      else
      {
        uint64_t v9 = (const void *)(a1 + 64);
        size_t v10 = *(unsigned __int8 *)(a1 + 87);
      }
      sub_1000335D8(buf, v9, v10);
      operator new();
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_1007875BC(a1);
  }
  return 10;
}

void sub_1006245C8(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10008A294(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100624658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3)
  {
    uint64_t v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_10078763C(a3, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  else
  {
    id v14 = *(id *)(a1 + 16);
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v24 = 0;
    if (*(char *)(a1 + 87) < 0)
    {
      sub_10003B098(__dst, *(void **)(a1 + 64), *(void *)(a1 + 72));
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 64);
      uint64_t v24 = *(void *)(a1 + 80);
    }
    uint64_t v15 = sub_100019878();
    v18[0] = _NSConcreteStackBlock;
    v18[1] = 3321888768;
    void v18[2] = sub_10062482C;
    __int16 v18[3] = &unk_1009BBA78;
    uint64_t v20 = a1;
    id v16 = v14;
    id v19 = v16;
    if (SHIBYTE(v24) < 0)
    {
      sub_10003B098(&__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      long long __p = *(_OWORD *)__dst;
      uint64_t v22 = v24;
    }
    sub_100013018(v15, v18);
    if (SHIBYTE(v22) < 0) {
      operator delete((void *)__p);
    }

    if (SHIBYTE(v24) < 0) {
      operator delete(__dst[0]);
    }
  }
  return sub_100620628(a1, a3, a4);
}

void sub_1006247DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10062482C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  __int16 v3 = off_1009F7ED8;
  sub_1000305AC(v8, *(void *)(a1 + 32));
  if (*(char *)(a1 + 71) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 64);
  }
  int v4 = sub_1006B7F8C((uint64_t)v3, v8, (uint64_t)__p, 2);
  int v5 = v4;
  if (SHIBYTE(v7) < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
    goto LABEL_10;
  }
  if (v4) {
LABEL_10:
  }
    sub_1006206BC(v2);
}

void sub_100624930(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100624954(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100624658(a1 - 48, a2, a3, a4);
}

void sub_10062495C(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0)
  {
    if (!*(void *)(a1 + 88)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 103))
  {
    return;
  }
  id v2 = *(id *)(a1 + 16);
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v13 = 0;
  if (*(char *)(a1 + 103) < 0)
  {
    sub_10003B098(__dst, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(a1 + 80);
    uint64_t v13 = *(void *)(a1 + 96);
  }
  __int16 v3 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = __dst;
    if (v13 < 0) {
      int v4 = (void **)__dst[0];
    }
    *(_DWORD *)long long buf = 138412546;
    id v15 = v2;
    __int16 v16 = 2080;
    long long v17 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The device \"%@\" is named \"%s\"", buf, 0x16u);
  }
  uint64_t v5 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  void v7[2] = sub_100624B98;
  v7[3] = &unk_1009BBA78;
  uint64_t v9 = a1;
  id v6 = v2;
  id v8 = v6;
  if (SHIBYTE(v13) < 0)
  {
    sub_10003B098(&__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    long long __p = *(_OWORD *)__dst;
    uint64_t v11 = v13;
  }
  sub_100013018(v5, v7);
  if (SHIBYTE(v11) < 0) {
    operator delete((void *)__p);
  }

  if (SHIBYTE(v13) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100624B40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100624B98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  __int16 v3 = off_1009F7ED8;
  sub_1000305AC(v8, *(void *)(a1 + 32));
  if (*(char *)(a1 + 71) < 0)
  {
    sub_10003B098(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
    uint64_t v7 = *(void *)(a1 + 64);
  }
  int v4 = sub_1006B7F8C((uint64_t)v3, v8, (uint64_t)__p, 2);
  int v5 = v4;
  if (SHIBYTE(v7) < 0)
  {
    operator delete(__p[0]);
    if (!v5) {
      return;
    }
    goto LABEL_10;
  }
  if (v4) {
LABEL_10:
  }
    sub_1006206BC(v2);
}

void sub_100624C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100624CC0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v14 = xmmword_1007BA5A0;
  int v15 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v14);
  sub_10071D13C(&v13);
  uint64_t v4 = sub_1004F5388(v3, buf, (unsigned __int8 *)&v13);
  if (v2) {
    sub_10008A294(v2);
  }
  __int16 v10 = 0;
  if (v4
    && (uint64_t v5 = *(void *)(v4 + 8),
        int v6 = *(_DWORD *)(v5 + 20),
        *(_OWORD *)long long buf = *(_OWORD *)(v5 + 4),
        int v17 = v6,
        sub_100035F98(&v13, (__n128 *)buf),
        int v12 = 0,
        long long v11 = xmmword_1007BFF70,
        sub_10022A44C((unsigned __int8 *)&v13, (unsigned __int8 *)&v11)))
  {
    uint64_t v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reading long GAP name characteristic value on device \"%@\"", buf, 0xCu);
    }
    if (!sub_10022BAA4(*(unsigned __int16 *)(a1 + 40), &v10))
    {
      v10 -= 4;
      operator new();
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 9501);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007876A8(a1);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 10);
  }
}

void sub_100624F98(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10008A294(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100624FD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
  uint64_t v7 = *(void *)(a1 + 56);
  if (v7)
  {
    if (v7 != a2
      && (id v8 = qword_100A19E88,
          BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT),
          a2 = v7,
          v9))
    {
      LODWORD(__dst.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fReadGapName.get() == command";
      _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&__dst, 0xCu);
      a2 = *(void *)(a1 + 56);
      *(void *)(a1 + 56) = 0;
      if (!a2) {
        goto LABEL_6;
      }
    }
    else
    {
      *(void *)(a1 + 56) = 0;
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
LABEL_6:
    if (a4[1] == *a4
      || (uint64_t v10 = *(void *)(**a4 + 8),
          int v11 = *(_DWORD *)(v10 + 20),
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(v10 + 4),
          LODWORD(__dst.__r_.__value_.__r.__words[2]) = v11,
          sub_100035F98(&v43, (__n128 *)&__dst),
          int v42 = 0,
          long long v41 = xmmword_1007C0038,
          !sub_10022A44C(v12, (unsigned __int8 *)&v41)))
    {
      sub_100620628(a1, a3, (uint64_t)a4);
    }
    else
    {
      uint64_t v13 = **a4;
      long long v14 = (void *)sub_10004A6E4(v13 + 72);
      size_t v15 = sub_100045F00(v13 + 72);
      sub_1002E5698(&__dst, v14, v15);
      __int16 v16 = (void **)(a1 + 80);
      if (*(char *)(a1 + 103) < 0) {
        operator delete(*v16);
      }
      *(_OWORD *)__int16 v16 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
      *(void *)(a1 + 96) = *((void *)&__dst.__r_.__value_.__l + 2);
      if (sub_100045F00(v13 + 72) >= (unint64_t)*(unsigned __int16 *)(a1 + 72) - 4)
      {
        __int16 v32 = **(_WORD **)(v13 + 8);
        v36[0] = _NSConcreteStackBlock;
        v36[1] = 3221225472;
        v36[2] = sub_1006254D4;
        v36[3] = &unk_1009A0B58;
        v36[4] = a1;
        __int16 v37 = v32;
        sub_1006207F8(a1, v36);
        int v34 = *a4;
        long long v33 = a4[1];
        while (v34 != v33)
        {
          if (*v34)
          {
            (*(void (**)(uint64_t))(*(void *)*v34 + 8))(*v34);
            long long v33 = a4[1];
          }
          ++v34;
        }
      }
      else
      {
        sub_10062495C(a1);
        (***(void (****)(void, uint64_t, void, uint64_t **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, a4);
      }
    }
    return;
  }
  uint64_t v17 = *(void *)(a1 + 64);
  if (!v17)
  {
    uint64_t v35 = sub_100017768();
    sub_1005C99C8(v35, 1);
  }
  if (v17 != a2
    && (int v18 = qword_100A19E88,
        BOOL v19 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT),
        a2 = v17,
        v19))
  {
    LODWORD(__dst.__r_.__value_.__l.__data_) = 136446210;
    *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)"fReadLongGapName.get() == command";
    _os_log_fault_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&__dst, 0xCu);
    a2 = *(void *)(a1 + 64);
    *(void *)(a1 + 64) = 0;
    if (!a2) {
      goto LABEL_18;
    }
  }
  else
  {
    *(void *)(a1 + 64) = 0;
  }
  (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
LABEL_18:
  if (a4[1] == *a4
    || (uint64_t v20 = *(void *)(**a4 + 8),
        int v21 = *(_DWORD *)(v20 + 20),
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)(v20 + 4),
        LODWORD(__dst.__r_.__value_.__r.__words[2]) = v21,
        sub_100035F98(&v43, (__n128 *)&__dst),
        int v39 = 0,
        long long v38 = xmmword_1007C0038,
        !sub_10022A44C(v22, (unsigned __int8 *)&v38)))
  {
    sub_100620628(a1, a3, (uint64_t)a4);
  }
  else
  {
    uint64_t v23 = **a4 + 72;
    uint64_t v24 = (void *)sub_10004A6E4(v23);
    size_t v25 = sub_100045F00(v23);
    sub_1002E5698(&__dst, v24, v25);
    int v26 = *(char *)(a1 + 103);
    if (v26 >= 0) {
      long long v27 = (const std::string::value_type *)(a1 + 80);
    }
    else {
      long long v27 = *(const std::string::value_type **)(a1 + 80);
    }
    if (v26 >= 0) {
      std::string::size_type v28 = *(unsigned __int8 *)(a1 + 103);
    }
    else {
      std::string::size_type v28 = *(void *)(a1 + 88);
    }
    long long v29 = std::string::insert(&__dst, 0, v27, v28);
    std::string::size_type v30 = v29->__r_.__value_.__r.__words[0];
    v43.n128_u64[0] = v29->__r_.__value_.__l.__size_;
    *(unint64_t *)((char *)v43.n128_u64 + 7) = *(std::string::size_type *)((char *)&v29->__r_.__value_.__r.__words[1]
                                                                                + 7);
    char v31 = HIBYTE(v29->__r_.__value_.__r.__words[2]);
    v29->__r_.__value_.__l.__size_ = 0;
    v29->__r_.__value_.__r.__words[2] = 0;
    v29->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    *(void *)(a1 + 80) = v30;
    *(void *)(a1 + 88) = v43.n128_u64[0];
    *(void *)(a1 + 95) = *(unint64_t *)((char *)v43.n128_u64 + 7);
    *(unsigned char *)(a1 + 103) = v31;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    sub_10062495C(a1);
    (***(void (****)(void, uint64_t, void, uint64_t **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, a4);
  }
}

void sub_1006254B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1006254D4(uint64_t a1)
{
  return sub_100624CC0(*(void *)(a1 + 32));
}

void sub_1006254E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t **a4)
{
}

uint64_t sub_1006254EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v13 = xmmword_1007BA5A0;
  int v14 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v13);
  sub_10071D13C(&v15);
  uint64_t v4 = sub_1004F5388(v2, buf, (unsigned __int8 *)&v15);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = *(_DWORD *)(v5 + 20);
    *(_OWORD *)long long buf = *(_OWORD *)(v5 + 4);
    int v17 = v6;
    sub_100035F98(&v15, (__n128 *)buf);
    int v12 = 0;
    long long v11 = xmmword_1007BFF70;
    if (sub_10022A44C((unsigned __int8 *)&v15, (unsigned __int8 *)&v11))
    {
      uint64_t v7 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = *(id *)(a1 + 16);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reading GAP name characteristic value on device \"%@\"", buf, 0xCu);
      }
      char v10 = 0;
      sub_10001B8E0(&v10);
      sub_10022BAA4(*(unsigned __int16 *)(a1 + 40), (_WORD *)(a1 + 72));
      sub_10001B910(&v10);
      operator new();
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787728(a1);
  }
  return 10;
}

void sub_1006257BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (v16) {
    sub_10008A294(v16);
  }

  sub_10001B8AC(&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100625830(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (unsigned __int16 *)(a1 + 56);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 56);
  uint64_t v6 = *(void *)(a1 + 24);
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v4 - 3);
  if (v7)
  {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v8 = *v4;
  }
  else
  {
    unsigned int v8 = v5;
  }
  unsigned int v9 = sub_1004F56D4(v6, v8);
  if (v7) {
    sub_10008A294(v7);
  }
  if (a2)
  {
    char v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24);
    uint64_t v11 = a1;
    uint64_t v12 = a2;
LABEL_8:
    return v10(v11, v12);
  }
  if (v9)
  {
    if (v9 >= (unsigned __int16)(v5 + 2))
    {
      int v14 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = *(id *)(a1 + 16);
        *(_DWORD *)long long buf = 67109634;
        int v17 = (unsigned __int16)(v5 + 2);
        __int16 v18 = 1024;
        unsigned int v19 = v9;
        __int16 v20 = 2112;
        id v21 = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Attempting to discover descriptors in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x18u);
      }
      operator new();
    }
    char v10 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24);
    uint64_t v11 = a1;
    uint64_t v12 = 0;
    goto LABEL_8;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_1007877A8((uint64_t)v4, a1);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 1);
}

void sub_100625B28(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10008A294(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100625B60(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v7 = *(void *)(a1 + 64);
  if (!v7)
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (!v12)
    {
      uint64_t v15 = sub_100017768();
      sub_1005C99C8(v15, 1);
    }
    if (v12 != a2
      && (long long v13 = qword_100A19E88,
          BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT),
          a2 = v12,
          v14))
    {
      *(_DWORD *)long long buf = 136446210;
      unsigned int v19 = "fDescDisc.get() == command";
      _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      a2 = *(void *)(a1 + 72);
      *(void *)(a1 + 72) = 0;
      if (!a2) {
        goto LABEL_17;
      }
    }
    else
    {
      *(void *)(a1 + 72) = 0;
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
LABEL_17:
    sub_100620628(a1, a3, (uint64_t)a4);
    return;
  }
  if (v7 == a2
    || (unsigned int v8 = qword_100A19E88,
        BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT),
        a2 = v7,
        !v9))
  {
    *(void *)(a1 + 64) = 0;
LABEL_5:
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
    goto LABEL_6;
  }
  *(_DWORD *)long long buf = 136446210;
  unsigned int v19 = "fServiceDisc.get() == command";
  _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
  a2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (a2) {
    goto LABEL_5;
  }
LABEL_6:
  uint64_t v11 = (void *)*a4;
  char v10 = (void *)a4[1];
  while (v11 != v10)
  {
    if (*v11)
    {
      (*(void (**)(void))(*(void *)*v11 + 8))(*v11);
      char v10 = (void *)a4[1];
    }
    ++v11;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_100625DD8;
  void v16[3] = &unk_100997570;
  _OWORD v16[4] = a1;
  int v17 = a3;
  sub_1006207F8(a1, v16);
}

uint64_t sub_100625DD8(uint64_t a1)
{
  return sub_100625830(*(void *)(a1 + 32), *(unsigned int *)(a1 + 40));
}

void sub_100625DE8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

uint64_t sub_100625DF0(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int16 *)(a1 + 56);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 32);
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    unsigned int v5 = *(unsigned __int16 *)(a1 + 56);
  }
  else
  {
    unsigned int v5 = v2;
  }
  unsigned int v6 = sub_1004F56D4(v3, v5);
  if (v4) {
    sub_10008A294(v4);
  }
  if (!v6)
  {
    unsigned int v8 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = *(unsigned __int16 *)(a1 + 56);
      id v10 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 67109378;
      int v15 = v9;
      __int16 v16 = 2112;
      *(void *)int v17 = v10;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Attempting to find service for characteristic handle 0x%04x on device \"%@\"", buf, 0x12u);
    }
    operator new();
  }
  unsigned __int16 v7 = v2 + 2;
  if (v6 >= (unsigned __int16)(v2 + 2))
  {
    uint64_t v11 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      id v12 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 67109634;
      int v15 = v7;
      __int16 v16 = 1024;
      *(_DWORD *)int v17 = v6;
      *(_WORD *)&_DWORD v17[4] = 2112;
      *(void *)&v17[6] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Attempting to discover descriptors in range [0x%04x, 0x%04x] on device \"%@\"", buf, 0x18u);
    }
    operator new();
  }
  (*(void (**)(uint64_t, void))(*(void *)a1 + 24))(a1, 0);
  return 0;
}

void sub_100626144(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10008A294(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100626194(uint64_t a1)
{
  __int16 v32 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = sub_1004F52BC(v2, *(unsigned __int16 *)(a1 + 56));
  if (v3) {
    sub_10008A294(v3);
  }
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100787830(a1 + 56, a1);
    }
    goto LABEL_24;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  unsigned int v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned __int16 v7 = sub_1004F52BC(v5, *(unsigned __int16 *)(a1 + 56));
  if (v6) {
    sub_10008A294(v6);
  }
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007878B8(a1 + 56, a1);
    }
    goto LABEL_24;
  }
  uint64_t v8 = v7[1];
  int v9 = *(_DWORD *)(v8 + 20);
  *(_OWORD *)long long buf = *(_OWORD *)(v8 + 4);
  *(_DWORD *)&uint8_t buf[16] = v9;
  sub_100035F98(&v39, (__n128 *)buf);
  int v38 = 0;
  long long v37 = xmmword_1007BFFAC;
  if (!sub_10022A44C(v10, (unsigned __int8 *)&v37))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007879C8(a1 + 56, a1);
    }
LABEL_24:
    uint64_t v12 = 1;
LABEL_25:
    (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, v12);
    return;
  }
  if ((v7[9] & 0x30) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100787940(a1 + 56, a1);
    }
    uint64_t v12 = 6;
    goto LABEL_25;
  }
  if (*(unsigned char *)(a1 + 58))
  {
    if ((v7[9] & 0x10) != 0) {
      char v11 = 1;
    }
    else {
      char v11 = 2;
    }
    LOBYTE(v32) = v11;
  }
  else
  {
    char v11 = 0;
  }
  sub_100040550(buf, (uint64_t)(v7 + 13));
  long long v13 = *(void **)buf;
  BOOL v14 = *(uint64_t **)&buf[8];
  if (*(void *)buf != *(void *)&buf[8])
  {
    int v15 = *(uint64_t **)buf;
    while (1)
    {
      uint64_t v16 = *v15;
      uint64_t v17 = *(void *)(*v15 + 8);
      int v18 = *(_DWORD *)(v17 + 20);
      *(_OWORD *)long long buf = *(_OWORD *)(v17 + 4);
      *(_DWORD *)&uint8_t buf[16] = v18;
      sub_100035F98(&v39, (__n128 *)buf);
      int v36 = 0;
      long long v35 = xmmword_1007BFFE8;
      if (sub_10022A44C(v19, (unsigned __int8 *)&v35)) {
        break;
      }
      if (++v15 == v14) {
        goto LABEL_45;
      }
    }
    int v20 = **(unsigned __int16 **)(v16 + 8);
    id v21 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Found client configuration descriptor at handle 0x%04x", buf, 8u);
    }
    if (v20)
    {
      uint64_t v22 = qword_100A19E88;
      BOOL v23 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v23)
        {
          if (v11) {
            uint64_t v24 = "notifications";
          }
          else {
            uint64_t v24 = "indications";
          }
          int v25 = *(unsigned __int16 *)(a1 + 56);
          id v26 = *(id *)(a1 + 16);
          *(_DWORD *)long long buf = 136446722;
          *(void *)&uint8_t buf[4] = v24;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&unsigned char buf[14] = v25;
          *(_WORD *)&unsigned char buf[18] = 2112;
          id v34 = v26;
          _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Enabling %{public}s on client configuration descriptor for characteristic at handle 0x%04x on device \"%@\"", buf, 0x1Cu);
        }
      }
      else if (v23)
      {
        int v30 = *(unsigned __int16 *)(a1 + 56);
        id v31 = *(id *)(a1 + 16);
        *(_DWORD *)long long buf = 67109378;
        *(_DWORD *)&uint8_t buf[4] = v30;
        *(_WORD *)&uint8_t buf[8] = 2112;
        *(void *)&buf[10] = v31;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Disabling notifications/indications on client configuration descriptor for characteristic at handle 0x%04x on device \"%@\"", buf, 0x12u);
      }
      sub_1000335D8(buf, &v32, 2uLL);
      operator new();
    }
  }
LABEL_45:
  long long v27 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    int v28 = *(unsigned __int16 *)(a1 + 56);
    id v29 = *(id *)(a1 + 16);
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v28;
    *(_WORD *)&uint8_t buf[8] = 2112;
    *(void *)&buf[10] = v29;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Unable to find client configuration descriptor for characteristic at handle 0x%04x on device \"%@\"", buf, 0x12u);
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 10);
  if (v13) {
    operator delete(v13);
  }
}

void sub_100626720(_Unwind_Exception *a1)
{
  if (v3) {
    sub_10008A294(v3);
  }

  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void sub_1006267E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a1[8];
  if (!v6)
  {
    uint64_t v12 = a1[9];
    if (!v12)
    {
      uint64_t v15 = sub_100017768();
      sub_1005C99C8(v15, 1);
    }
    if (v12 != a2
      && (long long v13 = qword_100A19E88,
          BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT),
          a2 = v12,
          v14))
    {
      *(_DWORD *)long long buf = 136446210;
      unsigned int v19 = "fWriteCommand.get() == command";
      _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
      a2 = a1[9];
      a1[9] = 0;
      if (!a2) {
        goto LABEL_17;
      }
    }
    else
    {
      a1[9] = 0;
    }
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
LABEL_17:
    (*(void (**)(void *, uint64_t))(*a1 + 24))(a1, a3);
    return;
  }
  if (v6 == a2
    || (uint64_t v8 = qword_100A19E88,
        BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT),
        a2 = v6,
        !v9))
  {
    a1[8] = 0;
LABEL_5:
    (*(void (**)(uint64_t))(*(void *)a2 + 8))(a2);
    goto LABEL_6;
  }
  *(_DWORD *)long long buf = 136446210;
  unsigned int v19 = "fTreeCommand.get() == command";
  _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
  a2 = a1[8];
  a1[8] = 0;
  if (a2) {
    goto LABEL_5;
  }
LABEL_6:
  char v11 = *(void **)a4;
  id v10 = *(void **)(a4 + 8);
  while (v11 != v10)
  {
    if (*v11)
    {
      (*(void (**)(void))(*(void *)*v11 + 8))(*v11);
      id v10 = *(void **)(a4 + 8);
    }
    ++v11;
  }
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_100626A74;
  void v16[3] = &unk_100997570;
  _OWORD v16[4] = a1;
  int v17 = a3;
  sub_1006207F8((uint64_t)a1, v16);
}

void sub_100626A74(uint64_t a1)
{
}

void sub_100626A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100626A84(uint64_t a1)
{
  __int16 v31 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = sub_1004F52BC(v2, *(unsigned __int16 *)(a1 + 56));
  if (v3) {
    sub_10008A294(v3);
  }
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100787A50(a1 + 56, a1);
    }
    return 1;
  }
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned __int16 v7 = sub_1004F52BC(v5, *(unsigned __int16 *)(a1 + 56));
  if (v6) {
    sub_10008A294(v6);
  }
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100787AD8(a1 + 56, a1);
    }
    return 1;
  }
  uint64_t v8 = v7[1];
  int v9 = *(_DWORD *)(v8 + 20);
  *(_OWORD *)long long buf = *(_OWORD *)(v8 + 4);
  *(_DWORD *)&uint8_t buf[16] = v9;
  sub_100035F98(&v38, (__n128 *)buf);
  int v37 = 0;
  long long v36 = xmmword_1007BFFAC;
  if (!sub_10022A44C(v10, (unsigned __int8 *)&v36))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100787BE8(a1 + 56, a1);
    }
    return 1;
  }
  if ((v7[9] & 0x30) != 0)
  {
    if (*(unsigned char *)(a1 + 58))
    {
      if ((v7[9] & 0x10) != 0) {
        char v11 = 1;
      }
      else {
        char v11 = 2;
      }
      LOBYTE(v31) = v11;
    }
    else
    {
      char v11 = 0;
    }
    sub_100040550(buf, (uint64_t)(v7 + 13));
    long long v13 = *(uint64_t **)&buf[8];
    if (*(void *)buf != *(void *)&buf[8])
    {
      BOOL v14 = *(uint64_t **)buf;
      while (1)
      {
        uint64_t v15 = *v14;
        uint64_t v16 = *(void *)(*v14 + 8);
        int v17 = *(_DWORD *)(v16 + 20);
        *(_OWORD *)long long buf = *(_OWORD *)(v16 + 4);
        *(_DWORD *)&uint8_t buf[16] = v17;
        sub_100035F98(&v38, (__n128 *)buf);
        int v35 = 0;
        long long v34 = xmmword_1007BFFE8;
        if (sub_10022A44C(v18, (unsigned __int8 *)&v34)) {
          break;
        }
        if (++v14 == v13) {
          goto LABEL_44;
        }
      }
      int v19 = **(unsigned __int16 **)(v15 + 8);
      int v20 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Found client configuration descriptor at handle 0x%04x", buf, 8u);
      }
      if (v19)
      {
        id v21 = qword_100A19E88;
        BOOL v22 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT);
        if (v11)
        {
          if (v22)
          {
            if (v11) {
              BOOL v23 = "notifications";
            }
            else {
              BOOL v23 = "indications";
            }
            int v24 = *(unsigned __int16 *)(a1 + 56);
            id v25 = *(id *)(a1 + 16);
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = v23;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v24;
            *(_WORD *)&unsigned char buf[18] = 2112;
            id v33 = v25;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Enabling %s on client configuration descriptor at handle 0x%04x on device \"%@\"", buf, 0x1Cu);
          }
        }
        else if (v22)
        {
          int v29 = *(unsigned __int16 *)(a1 + 56);
          id v30 = *(id *)(a1 + 16);
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v29;
          *(_WORD *)&uint8_t buf[8] = 2112;
          *(void *)&buf[10] = v30;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Disabling notifications/indications on client configuration descriptor at handle 0x%04x on device \"%@\"", buf, 0x12u);
        }
        sub_1000335D8(buf, &v31, 2uLL);
        operator new();
      }
    }
LABEL_44:
    id v26 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
    {
      int v27 = *(unsigned __int16 *)(a1 + 56);
      id v28 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v27;
      *(_WORD *)&uint8_t buf[8] = 2112;
      *(void *)&buf[10] = v28;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "Don't have client configuration descriptor yet for characteristic at handle 0x%04x on device \"%@\"", buf, 0x12u);
    }
    operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787B60(a1 + 56, a1);
  }
  return 6;
}

void sub_10062709C(_Unwind_Exception *a1)
{
  if (v3) {
    sub_10008A294(v3);
  }

  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100627174(uint64_t a1, uint64_t a2, long long **a3)
{
  uint64_t v5 = sub_100620458(a1, a2);
  *(void *)uint64_t v5 = off_1009BBAB8;
  *(void *)(v5 + 48) = &off_1009BBAF0;
  *(void *)(v5 + 64) = 0;
  *(void *)(v5 + 72) = 0;
  *(void *)(v5 + 56) = 0;
  sub_100037564((char *)(v5 + 56), *a3, a3[1], 0xCCCCCCCCCCCCCCCDLL * (((char *)a3[1] - (char *)*a3) >> 2));
  *(_WORD *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  return a1;
}

void sub_100627208(_Unwind_Exception *a1)
{
  sub_10062721C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10062721C(uint64_t a1)
{
  *(void *)a1 = off_1009BBA50;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_10008A294(v2);
  }

  return a1;
}

void sub_100627274(uint64_t a1)
{
  unint64_t v2 = *(unsigned __int16 *)(a1 + 80);
  uint64_t v3 = *(void *)(a1 + 56);
  if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 64) - v3) >> 2) > v2)
  {
    uint64_t v4 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000417A8(v3 + 20 * v2, __p);
      if (v12 >= 0) {
        uint64_t v5 = __p;
      }
      else {
        uint64_t v5 = (void **)__p[0];
      }
      id v6 = *(id *)(a1 + 16);
      *(_DWORD *)long long buf = 136446466;
      uint64_t v8 = v5;
      __int16 v9 = 2112;
      id v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Attempting to discover services for next UUID %{public}s on device \"%@\"", buf, 0x16u);
      if (SHIBYTE(v12) < 0) {
        operator delete(__p[0]);
      }
    }
    operator new();
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  sub_100627524((void *)a1, (char **)__p);
  (***(void (****)(void, uint64_t, void, void **))(a1 + 8))(*(void *)(a1 + 8), a1, 0, __p);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
}

void sub_1006274E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16)
{
  if (v17) {
    sub_10008A294(v17);
  }

  _Unwind_Resume(a1);
}

void sub_100627524(void *a1, char **a2)
{
  unint64_t v2 = (unsigned __int8 *)a1[7];
  if (v2 != (unsigned __int8 *)a1[8])
  {
    uint64_t v5 = a2 + 2;
    do
    {
      id v21 = 0;
      BOOL v22 = 0;
      uint64_t v23 = 0;
      uint64_t v6 = a1[3];
      unsigned __int16 v7 = (std::__shared_weak_count *)a1[4];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      int v8 = sub_1004F1F74(v6, v2, (void **)&v21);
      if (v7) {
        sub_10008A294(v7);
      }
      __int16 v9 = v21;
      if (v8) {
        BOOL v10 = 1;
      }
      else {
        BOOL v10 = v21 == v22;
      }
      if (!v10)
      {
        char v11 = a2[1];
        do
        {
          if ((unint64_t)v11 >= *v5)
          {
            uint64_t v12 = (v11 - *a2) >> 3;
            if ((unint64_t)(v12 + 1) >> 61) {
              abort();
            }
            uint64_t v13 = *v5 - (void)*a2;
            uint64_t v14 = v13 >> 2;
            if (v13 >> 2 <= (unint64_t)(v12 + 1)) {
              uint64_t v14 = v12 + 1;
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15) {
              uint64_t v16 = (char *)sub_1000405F8((uint64_t)v5, v15);
            }
            else {
              uint64_t v16 = 0;
            }
            int v17 = &v16[8 * v12];
            *(void *)int v17 = *v9;
            char v11 = v17 + 8;
            int v19 = *a2;
            int v18 = a2[1];
            if (v18 != *a2)
            {
              do
              {
                uint64_t v20 = *((void *)v18 - 1);
                v18 -= 8;
                *((void *)v17 - 1) = v20;
                v17 -= 8;
              }
              while (v18 != v19);
              int v18 = *a2;
            }
            *a2 = v17;
            a2[1] = v11;
            a2[2] = &v16[8 * v15];
            if (v18) {
              operator delete(v18);
            }
          }
          else
          {
            *(void *)char v11 = *v9;
            v11 += 8;
          }
          a2[1] = v11;
          ++v9;
        }
        while (v9 != v22);
        __int16 v9 = v21;
      }
      if (v9)
      {
        BOOL v22 = v9;
        operator delete(v9);
      }
      v2 += 20;
    }
    while (v2 != (unsigned __int8 *)a1[8]);
  }
}

void sub_1006276B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (v11) {
    sub_10008A294(v11);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006276EC(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[11];
  if (v3)
  {
    a1[11] = 0;
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    long long __p = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    sub_100627524(a1, (char **)&__p);
    sub_100620628((uint64_t)a1, a2, (uint64_t)&__p);
    if (__p)
    {
      int v8 = __p;
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v5 = a1[12];
    if (!v5)
    {
      uint64_t v6 = sub_100017768();
      sub_1005C99C8(v6, 1);
    }
    a1[12] = 0;
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    sub_100627274((uint64_t)a1);
  }
}

void sub_1006277DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006277F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  unsigned __int16 v7 = *(void **)a4;
  uint64_t v6 = *(void **)(a4 + 8);
  if (*(void **)a4 != v6)
  {
    do
    {
      if (*v7)
      {
        (*(void (**)(void))(*(void *)*v7 + 8))(*v7);
        uint64_t v6 = *(void **)(a4 + 8);
      }
      ++v7;
    }
    while (v7 != v6);
  }
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1006278D0;
  v9[3] = &unk_100997570;
  _OWORD v9[4] = a1;
  int v10 = a3;
  sub_1006207F8(a1, v9);
}

void sub_1006278D0(uint64_t a1)
{
}

void sub_1006278E0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

uint64_t sub_1006278E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 56);
  uint64_t v2 = *(void *)(a1 + 64);
  if (0xCCCCCCCCCCCCCCCDLL * ((v2 - v3) >> 2) >= 4)
  {
    uint64_t v4 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = *(id *)(a1 + 16);
      uint64_t buf = 0x404000202;
      __int16 buf_8 = 2112;
      id buf_10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Number of UUIDs exceeds maximum (%d) - discovering all services on device \"%@\"", (uint8_t *)&buf, 0x12u);
    }
    operator new();
  }
  if (v2 != v3)
  {
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      sub_1000417A8(v3 + 20 * *(unsigned __int16 *)(a1 + 80), &buf);
      if (v13 >= 0) {
        p_uint64_t buf = &buf;
      }
      else {
        p_uint64_t buf = (uint64_t *)buf;
      }
      id v8 = *(id *)(a1 + 16);
      *(_DWORD *)uint64_t v14 = 136446466;
      unint64_t v15 = p_buf;
      __int16 v16 = 2112;
      id v17 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Attempting to discover services for first UUID %{public}s on device \"%@\"", v14, 0x16u);
      if (v13 < 0) {
        operator delete((void *)buf);
      }
    }
    operator new();
  }
  return 0;
}

void sub_100627C4C(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10008A294(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100627C74(uint64_t a1)
{
  unsigned __int16 v13 = 23;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = sub_1004F52BC(v2, *(unsigned __int16 *)(a1 + 56));
  if (v3) {
    sub_10008A294(v3);
  }
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100787C70(a1 + 56, a1);
    }
    return 1;
  }
  uint64_t v5 = v4[1];
  int v6 = *(_DWORD *)(v5 + 20);
  *(_OWORD *)uint64_t buf = *(_OWORD *)(v5 + 4);
  *(_DWORD *)&uint8_t buf[16] = v6;
  sub_100035F98(&v17, (__n128 *)buf);
  int v16 = 0;
  long long v15 = xmmword_1007BFFAC;
  if (!sub_10022A44C(v7, (unsigned __int8 *)&v15))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100787DD0(a1 + 56, a1);
    }
    return 1;
  }
  if (!*(unsigned char *)(a1 + 58))
  {
    if ((v4[9] & 4) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100787CF8();
      }
      return 3;
    }
LABEL_20:
    char v12 = 0;
    sub_10001B8E0(&v12);
    sub_10022BAA4(*(unsigned __int16 *)(a1 + 40), &v13);
    sub_10001B910(&v12);
    unint64_t v9 = sub_100045F00(a1 + 64);
    if (v9 > (unint64_t)v13 - 3)
    {
      int v10 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = sub_100045F00(a1 + 64);
        *(_DWORD *)uint64_t buf = 134218240;
        *(void *)&uint8_t buf[4] = v11;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v13 - 3;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Using Write Long Characteristic Value, as data exceeds PDU capacity at current MTU (%zu of available %u bytes)", buf, 0x12u);
      }
      operator new();
    }
    if (*(unsigned char *)(a1 + 58)) {
      operator new();
    }
    operator new();
  }
  if ((v4[9] & 8) != 0) {
    goto LABEL_20;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787D64();
  }
  return 3;
}

void sub_1006283F8()
{
}

uint64_t sub_100628494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 80) != a2)
  {
    unsigned __int16 v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100787E58(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  return sub_100620628(a1, a3, a4);
}

uint64_t sub_100628508(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100628494(a1 - 48, a2, a3, a4);
}

uint64_t sub_100628510(uint64_t a1)
{
  return 0;
}

void sub_10062852C(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
      sub_10062871C(a1);
      break;
    case 1:
      sub_100628864();
    case 2:
      sub_1006289A0(a1);
      break;
    case 3:
      sub_100628AF0();
    case 4:
      (*(void (**)(uint64_t, void))(*(void *)a1 + 24))(a1, 0);
      break;
    default:
      return;
  }
}

void sub_1006285A8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (*(void *)(a1 + 64) != a2)
  {
    unsigned __int16 v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100787ED0(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  int v16 = *(void **)a4;
  long long v15 = *(void **)(a4 + 8);
  while (v16 != v15)
  {
    if (*v16)
    {
      (*(void (**)(void))(*(void *)*v16 + 8))(*v16);
      long long v15 = *(void **)(a4 + 8);
    }
    ++v16;
  }
  int v17 = 4;
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
    case 2:
    case 4:
      uint64_t v18 = sub_100017768();
      sub_1005C99C8(v18, 1);
    case 1:
      if (a3) {
        int v17 = 4;
      }
      else {
        int v17 = 2;
      }
      goto LABEL_13;
    case 3:
LABEL_13:
      *(_DWORD *)(a1 + 56) = v17;
      break;
    default:
      break;
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 3221225472;
  void v19[2] = sub_10062870C;
  v19[3] = &unk_100997528;
  uint8_t v19[4] = a1;
  sub_1006207F8(a1, v19);
}

void sub_10062870C(uint64_t a1)
{
}

void sub_100628714(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_10062871C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = xmmword_1007BA758;
  int v9 = 0;
  sub_100035F98(&v10, (__n128 *)&v8);
  sub_10071D13C(v7);
  uint64_t v4 = sub_1004F5388(v3, (unsigned __int8 *)&v10, v7);
  *(void *)(a1 + 72) = v4;
  if (v2)
  {
    sub_10008A294(v2);
    uint64_t v4 = *(void *)(a1 + 72);
  }
  if (v4) {
    int v5 = 1;
  }
  else {
    int v5 = 4;
  }
  *(_DWORD *)(a1 + 56) = v5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100628C84;
  v6[3] = &unk_100997528;
  _OWORD v6[4] = a1;
  sub_1006207F8(a1, v6);
}

void sub_100628840(_Unwind_Exception *exception_object)
{
}

void sub_100628864()
{
}

void sub_100628980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v10) {
    sub_10008A294(v10);
  }

  _Unwind_Resume(a1);
}

void sub_1006289A0(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = 0;
  int v11 = 0;
  sub_10071D144((uint64_t)v10, 10916);
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = xmmword_1007BA758;
  int v8 = 0;
  sub_100035F98(&v9, (__n128 *)&v7);
  uint64_t v4 = sub_1004F5388(v3, (unsigned __int8 *)&v9, (unsigned __int8 *)v10);
  *(void *)(a1 + 80) = v4;
  if (v2)
  {
    sub_10008A294(v2);
    uint64_t v4 = *(void *)(a1 + 80);
  }
  if (v4) {
    int v5 = 3;
  }
  else {
    int v5 = 4;
  }
  *(_DWORD *)(a1 + 56) = v5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100628C8C;
  v6[3] = &unk_100997528;
  _OWORD v6[4] = a1;
  sub_1006207F8(a1, v6);
}

void sub_100628AD0(_Unwind_Exception *exception_object)
{
}

void sub_100628AF0()
{
  char v1 = 3;
  sub_1000335D8(&v0, &v1, 1uLL);
  operator new();
}

void sub_100628C14(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10008A294(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100628C84(uint64_t a1)
{
  return sub_10062852C(*(void *)(a1 + 32));
}

uint64_t sub_100628C8C(uint64_t a1)
{
  return sub_10062852C(*(void *)(a1 + 32));
}

uint64_t sub_100628C94(uint64_t a1)
{
  return 0;
}

void sub_100628CB0(uint64_t a1)
{
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
      sub_10062A58C(a1);
      break;
    case 1:
      sub_10062A6D0(a1);
      break;
    case 2:
      long long v33 = xmmword_1007BA62C;
      int v34 = 0;
      sub_10062A8FC(a1, (__n128 *)&v33, 3);
      break;
    case 3:
      long long v31 = xmmword_1007BA640;
      int v32 = 0;
      sub_10062A8FC(a1, (__n128 *)&v31, 4);
      break;
    case 4:
      long long v29 = xmmword_1007BA654;
      int v30 = 0;
      sub_10062A8FC(a1, (__n128 *)&v29, 5);
      break;
    case 5:
      long long v27 = xmmword_1007BA668;
      int v28 = 0;
      sub_10062A8FC(a1, (__n128 *)&v27, 6);
      break;
    case 6:
      long long v25 = xmmword_1007BA67C;
      int v26 = 0;
      sub_10062A8FC(a1, (__n128 *)&v25, 7);
      break;
    case 7:
      long long v23 = xmmword_1007BA690;
      int v24 = 0;
      sub_10062A8FC(a1, (__n128 *)&v23, 8);
      break;
    case 8:
      long long v21 = xmmword_1007BA6A4;
      int v22 = 0;
      sub_10062A8FC(a1, (__n128 *)&v21, 9);
      break;
    case 9:
      long long v19 = xmmword_1007BA6B8;
      int v20 = 0;
      sub_10062A8FC(a1, (__n128 *)&v19, 10);
      break;
    case 0xA:
      long long v17 = xmmword_1007BA6CC;
      int v18 = 0;
      sub_10062A8FC(a1, (__n128 *)&v17, 11);
      break;
    case 0xB:
      long long v15 = xmmword_1007BA6E0;
      int v16 = 0;
      sub_10062A8FC(a1, (__n128 *)&v15, 12);
      break;
    case 0xC:
      uint64_t v2 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v3 = *(id *)(a1 + 16);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
        }
        uint64_t v4 = off_1009F7ED8;
        id v5 = *(id *)(a1 + 16);
        sub_1006C5E0C((uint64_t)v4, v5, __p);
        if (v10 >= 0) {
          int v6 = __p;
        }
        else {
          int v6 = (void **)__p[0];
        }
        *(_DWORD *)uint64_t buf = 138412546;
        id v12 = v3;
        __int16 v13 = 2080;
        uint64_t v14 = v6;
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Completed DIS discovery for device %@ %s", buf, 0x16u);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
      }
      sub_1006BB020((uint64_t)off_1009F7ED8, *(void **)(a1 + 16), 1);
      if (qword_1009F7F10 != -1) {
        dispatch_once(&qword_1009F7F10, &stru_1009BC048);
      }
      uint64_t v7 = qword_1009F7F08;
      id v8 = *(id *)(a1 + 16);
      sub_1000305AC(__p, v8);
      sub_1006396A8(v7, (unsigned __int8 *)__p);

      (*(void (**)(uint64_t, void))(*(void *)a1 + 24))(a1, 0);
      break;
    default:
      return;
  }
}

void sub_100629144(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006291A4(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  if (*(void *)(a1 + 64) != a2)
  {
    uint64_t v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100787ED0(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  id v15 = *(id *)(a1 + 16);
  switch(*(_DWORD *)(a1 + 56))
  {
    case 0:
    case 0xC:
      uint64_t v111 = sub_100017768();
      sub_1005C99C8(v111, 1);
    case 1:
      if (a3) {
        int v16 = 12;
      }
      else {
        int v16 = 2;
      }
      goto LABEL_28;
    case 2:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v73 = *(void *)(*(void *)*a4 + 8);
        int v74 = *(_DWORD *)(v73 + 20);
        __n128 __dst = *(__n128 *)(v73 + 4);
        int v162 = v74;
        sub_100035F98(&v166, &__dst);
        int v165 = 0;
        long long v164 = xmmword_1007C0038;
        if (sub_10022A44C(v75, (unsigned __int8 *)&v164))
        {
          uint64_t v76 = *(void *)*a4 + 72;
          v77 = (void *)sub_10004A6E4(v76);
          size_t v78 = sub_100045F00(v76);
          sub_1002E5698(&__dst, v77, v78);
          if (v163 >= 0) {
            p_dst = &__dst;
          }
          else {
            p_dst = (__n128 *)__dst.n128_u64[0];
          }
          v80 = +[NSString stringWithUTF8String:p_dst];
          if (v163 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v81 = sub_100019878();
          v140[0] = _NSConcreteStackBlock;
          v140[1] = 3221225472;
          v140[2] = sub_10062A194;
          v140[3] = &unk_100998510;
          id v141 = v15;
          id v82 = v80;
          id v142 = v82;
          sub_100013018(v81, v140);
        }
      }
      int v16 = 3;
      goto LABEL_28;
    case 3:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v63 = *(void *)(*(void *)*a4 + 8);
        int v64 = *(_DWORD *)(v63 + 20);
        __n128 __dst = *(__n128 *)(v63 + 4);
        int v162 = v64;
        sub_100035F98(&v166, &__dst);
        int v160 = 0;
        long long v159 = xmmword_1007C0038;
        if (sub_10022A44C(v65, (unsigned __int8 *)&v159))
        {
          uint64_t v66 = *(void *)*a4 + 72;
          long long v67 = (void *)sub_10004A6E4(v66);
          size_t v68 = sub_100045F00(v66);
          sub_1002E5698(&__dst, v67, v68);
          if (v163 >= 0) {
            __int16 v69 = &__dst;
          }
          else {
            __int16 v69 = (__n128 *)__dst.n128_u64[0];
          }
          int v70 = +[NSString stringWithUTF8String:v69];
          if (v163 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v71 = sub_100019878();
          v137[0] = _NSConcreteStackBlock;
          v137[1] = 3221225472;
          v137[2] = sub_10062A1F8;
          v137[3] = &unk_100998510;
          id v138 = v15;
          id v72 = v70;
          id v139 = v72;
          sub_100013018(v71, v137);
        }
      }
      int v16 = 4;
      goto LABEL_28;
    case 4:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v45 = *(void *)(*(void *)*a4 + 8);
        int v46 = *(_DWORD *)(v45 + 20);
        __n128 __dst = *(__n128 *)(v45 + 4);
        int v162 = v46;
        sub_100035F98(&v166, &__dst);
        int v158 = 0;
        long long v157 = xmmword_1007C0038;
        if (sub_10022A44C(v47, (unsigned __int8 *)&v157))
        {
          uint64_t v48 = *(void *)*a4 + 72;
          int v49 = (void *)sub_10004A6E4(v48);
          size_t v50 = sub_100045F00(v48);
          sub_1002E5698(&__dst, v49, v50);
          if (v163 >= 0) {
            long long v51 = &__dst;
          }
          else {
            long long v51 = (__n128 *)__dst.n128_u64[0];
          }
          __int16 v52 = +[NSString stringWithUTF8String:v51];
          if (v163 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v53 = sub_100019878();
          v134[0] = _NSConcreteStackBlock;
          v134[1] = 3221225472;
          v134[2] = sub_10062A25C;
          v134[3] = &unk_100998510;
          id v135 = v15;
          id v54 = v52;
          id v136 = v54;
          sub_100013018(v53, v134);
        }
      }
      int v16 = 5;
      goto LABEL_28;
    case 5:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v91 = *(void *)(*(void *)*a4 + 8);
        int v92 = *(_DWORD *)(v91 + 20);
        __n128 __dst = *(__n128 *)(v91 + 4);
        int v162 = v92;
        sub_100035F98(&v166, &__dst);
        int v156 = 0;
        long long v155 = xmmword_1007C0038;
        if (sub_10022A44C(v93, (unsigned __int8 *)&v155))
        {
          uint64_t v94 = *(void *)*a4 + 72;
          v95 = (void *)sub_10004A6E4(v94);
          size_t v96 = sub_100045F00(v94);
          sub_1002E5698(&__dst, v95, v96);
          if (v163 >= 0) {
            v97 = &__dst;
          }
          else {
            v97 = (__n128 *)__dst.n128_u64[0];
          }
          v98 = +[NSString stringWithUTF8String:v97];
          if (v163 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v99 = sub_100019878();
          v131[0] = _NSConcreteStackBlock;
          v131[1] = 3221225472;
          v131[2] = sub_10062A2C0;
          v131[3] = &unk_100998510;
          id v132 = v15;
          id v100 = v98;
          id v133 = v100;
          sub_100013018(v99, v131);
        }
      }
      int v16 = 6;
      goto LABEL_28;
    case 6:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v101 = *(void *)(*(void *)*a4 + 8);
        int v102 = *(_DWORD *)(v101 + 20);
        __n128 __dst = *(__n128 *)(v101 + 4);
        int v162 = v102;
        sub_100035F98(&v166, &__dst);
        int v154 = 0;
        long long v153 = xmmword_1007C0038;
        if (sub_10022A44C(v103, (unsigned __int8 *)&v153))
        {
          uint64_t v104 = *(void *)*a4 + 72;
          v105 = (void *)sub_10004A6E4(v104);
          size_t v106 = sub_100045F00(v104);
          sub_1002E5698(&__dst, v105, v106);
          if (v163 >= 0) {
            v107 = &__dst;
          }
          else {
            v107 = (__n128 *)__dst.n128_u64[0];
          }
          v108 = +[NSString stringWithUTF8String:v107];
          if (v163 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v109 = sub_100019878();
          v128[0] = _NSConcreteStackBlock;
          v128[1] = 3221225472;
          v128[2] = sub_10062A324;
          v128[3] = &unk_100998510;
          id v129 = v15;
          id v110 = v108;
          id v130 = v110;
          sub_100013018(v109, v128);
        }
      }
      int v16 = 7;
      goto LABEL_28;
    case 7:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v35 = *(void *)(*(void *)*a4 + 8);
        int v36 = *(_DWORD *)(v35 + 20);
        __n128 __dst = *(__n128 *)(v35 + 4);
        int v162 = v36;
        sub_100035F98(&v166, &__dst);
        int v152 = 0;
        long long v151 = xmmword_1007C0038;
        if (sub_10022A44C(v37, (unsigned __int8 *)&v151))
        {
          uint64_t v38 = *(void *)*a4 + 72;
          __n128 v39 = (void *)sub_10004A6E4(v38);
          size_t v40 = sub_100045F00(v38);
          sub_1002E5698(&__dst, v39, v40);
          if (v163 >= 0) {
            long long v41 = &__dst;
          }
          else {
            long long v41 = (__n128 *)__dst.n128_u64[0];
          }
          int v42 = +[NSString stringWithUTF8String:v41];
          if (v163 < 0) {
            operator delete((void *)__dst.n128_u64[0]);
          }
          uint64_t v43 = sub_100019878();
          v125[0] = _NSConcreteStackBlock;
          v125[1] = 3221225472;
          v125[2] = sub_10062A388;
          v125[3] = &unk_100998510;
          id v126 = v15;
          id v44 = v42;
          id v127 = v44;
          sub_100013018(v43, v125);
        }
      }
      int v16 = 8;
      goto LABEL_28;
    case 8:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v55 = *(void *)(*(void *)*a4 + 8);
        int v56 = *(_DWORD *)(v55 + 20);
        __n128 __dst = *(__n128 *)(v55 + 4);
        int v162 = v56;
        sub_100035F98(&v166, &__dst);
        int v150 = 0;
        long long v149 = xmmword_1007C0038;
        if (sub_10022A44C(v57, (unsigned __int8 *)&v149))
        {
          uint64_t v58 = *(void *)*a4 + 72;
          uint64_t v59 = sub_10004A6E4(v58);
          char v60 = +[NSData dataWithBytes:v59 length:sub_100045F00(v58)];
          uint64_t v61 = sub_100019878();
          v122[0] = _NSConcreteStackBlock;
          v122[1] = 3221225472;
          v122[2] = sub_10062A3EC;
          v122[3] = &unk_100998510;
          id v123 = v15;
          id v62 = v60;
          id v124 = v62;
          sub_100013018(v61, v122);
        }
      }
      int v16 = 9;
      goto LABEL_28;
    case 9:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v19 = *(void *)(*(void *)*a4 + 8);
        int v20 = *(_DWORD *)(v19 + 20);
        __n128 __dst = *(__n128 *)(v19 + 4);
        int v162 = v20;
        sub_100035F98(&v166, &__dst);
        int v148 = 0;
        long long v147 = xmmword_1007C0038;
        if (sub_10022A44C(v21, (unsigned __int8 *)&v147))
        {
          uint64_t v22 = *(void *)*a4 + 72;
          uint64_t v23 = sub_10004A6E4(v22);
          int v24 = +[NSData dataWithBytes:v23 length:sub_100045F00(v22)];
          uint64_t v25 = sub_100019878();
          v119[0] = _NSConcreteStackBlock;
          v119[1] = 3221225472;
          v119[2] = sub_10062A450;
          v119[3] = &unk_100998510;
          id v120 = v15;
          id v26 = v24;
          id v121 = v26;
          sub_100013018(v25, v119);
        }
      }
      int v16 = 10;
      goto LABEL_28;
    case 0xA:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v27 = *(void *)(*(void *)*a4 + 8);
        int v28 = *(_DWORD *)(v27 + 20);
        __n128 __dst = *(__n128 *)(v27 + 4);
        int v162 = v28;
        sub_100035F98(&v166, &__dst);
        int v146 = 0;
        long long v145 = xmmword_1007C0038;
        if (sub_10022A44C(v29, (unsigned __int8 *)&v145))
        {
          uint64_t v30 = *(void *)*a4 + 72;
          uint64_t v31 = sub_10004A6E4(v30);
          int v32 = +[NSData dataWithBytes:v31 length:sub_100045F00(v30)];
          uint64_t v33 = sub_100019878();
          v116[0] = _NSConcreteStackBlock;
          v116[1] = 3221225472;
          v116[2] = sub_10062A4B4;
          v116[3] = &unk_100998510;
          id v117 = v15;
          id v34 = v32;
          id v118 = v34;
          sub_100013018(v33, v116);
        }
      }
      int v16 = 11;
      goto LABEL_28;
    case 0xB:
      if (!a3 && a4[1] != *a4)
      {
        uint64_t v83 = *(void *)(*(void *)*a4 + 8);
        int v84 = *(_DWORD *)(v83 + 20);
        __n128 __dst = *(__n128 *)(v83 + 4);
        int v162 = v84;
        sub_100035F98(&v166, &__dst);
        int v144 = 0;
        long long v143 = xmmword_1007C0038;
        if (sub_10022A44C(v85, (unsigned __int8 *)&v143))
        {
          uint64_t v86 = *(void *)*a4 + 72;
          uint64_t v87 = sub_10004A6E4(v86);
          v88 = +[NSData dataWithBytes:v87 length:sub_100045F00(v86)];
          uint64_t v89 = sub_100019878();
          v113[0] = _NSConcreteStackBlock;
          v113[1] = 3221225472;
          v113[2] = sub_10062A518;
          v113[3] = &unk_100998510;
          id v114 = v15;
          id v90 = v88;
          id v115 = v90;
          sub_100013018(v89, v113);
        }
      }
      int v16 = 12;
LABEL_28:
      *(_DWORD *)(a1 + 56) = v16;
      break;
    default:
      break;
  }
  int v18 = (void *)*a4;
  long long v17 = (void *)a4[1];
  while (v18 != v17)
  {
    if (*v18)
    {
      (*(void (**)(void))(*(void *)*v18 + 8))(*v18);
      long long v17 = (void *)a4[1];
    }
    ++v18;
  }
  v112[0] = _NSConcreteStackBlock;
  v112[1] = 3221225472;
  v112[2] = sub_10062A57C;
  v112[3] = &unk_100997528;
  v112[4] = a1;
  sub_1006207F8(a1, v112);
}

void sub_100629F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *a49,void *a50)
{
  _Unwind_Resume(a1);
}

void sub_10062A194(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C490C((uint64_t)v2, v3, v4);
}

void sub_10062A1F8(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C4B78((uint64_t)v2, v3, v4);
}

void sub_10062A25C(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C4CB4((uint64_t)v2, v3, v4);
}

void sub_10062A2C0(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C4DF0((uint64_t)v2, v3, v4);
}

void sub_10062A324(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C4F2C((uint64_t)v2, v3, v4);
}

void sub_10062A388(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C5068((uint64_t)v2, v3, v4);
}

void sub_10062A3EC(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C51A4((uint64_t)v2, v3, v4);
}

void sub_10062A450(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C52E0((uint64_t)v2, v3, v4);
}

void sub_10062A4B4(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C541C((uint64_t)v2, v3, v4);
}

void sub_10062A518(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BC068);
  }
  uint64_t v2 = off_1009F7ED8;
  id v3 = *(void **)(a1 + 32);
  uint64_t v4 = *(void **)(a1 + 40);

  sub_1006C5A64((uint64_t)v2, v3, v4);
}

void sub_10062A57C(uint64_t a1)
{
}

void sub_10062A584(uint64_t a1, uint64_t a2, int a3, void *a4)
{
}

void sub_10062A58C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v8 = xmmword_1007BA618;
  int v9 = 0;
  sub_100035F98(&v10, (__n128 *)&v8);
  sub_10071D13C(v7);
  uint64_t v4 = sub_1004F5388(v3, (unsigned __int8 *)&v10, v7);
  if (v2) {
    sub_10008A294(v2);
  }
  if (v4) {
    int v5 = 1;
  }
  else {
    int v5 = 12;
  }
  *(_DWORD *)(a1 + 56) = v5;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10062AC14;
  v6[3] = &unk_100997528;
  _OWORD v6[4] = a1;
  sub_1006207F8(a1, v6);
}

void sub_10062A6AC(_Unwind_Exception *exception_object)
{
}

void sub_10062A6D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v7 = xmmword_1007BA618;
  int v8 = 0;
  sub_100035F98(&v9, (__n128 *)&v7);
  sub_10071D13C(v6);
  uint64_t v4 = sub_1004F5388(v3, (unsigned __int8 *)&v9, v6);
  if (v2) {
    sub_10008A294(v2);
  }
  if (v4) {
    operator new();
  }
  *(_DWORD *)(a1 + 56) = 12;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10062AC1C;
  v5[3] = &unk_100997528;
  v5[4] = a1;
  sub_1006207F8(a1, v5);
}

void sub_10062A8C0(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10008A294(v2);
  }

  _Unwind_Resume(a1);
}

void sub_10062A8FC(uint64_t a1, __n128 *a2, int a3)
{
  uint64_t v6 = *(void *)(a1 + 24);
  long long v7 = *(std::__shared_weak_count **)(a1 + 32);
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v17 = xmmword_1007BA618;
  int v18 = 0;
  sub_100035F98(&v20, (__n128 *)&v17);
  sub_10071D13C(&v19);
  uint64_t v8 = sub_1004F5388(v6, (unsigned __int8 *)&v20, (unsigned __int8 *)&v19);
  if (v7) {
    sub_10008A294(v7);
  }
  if (v8)
  {
    uint64_t v10 = *(void *)(a1 + 24);
    __n128 v9 = *(std::__shared_weak_count **)(a1 + 32);
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v15 = xmmword_1007BA618;
    int v16 = 0;
    sub_100035F98(&v20, (__n128 *)&v15);
    __n128 v13 = *a2;
    unsigned __int32 v14 = a2[1].n128_u32[0];
    sub_100035F98(&v19, &v13);
    uint64_t v11 = sub_1004F5388(v10, (unsigned __int8 *)&v20, (unsigned __int8 *)&v19);
    if (v9) {
      sub_10008A294(v9);
    }
    if (v11) {
      operator new();
    }
  }
  else
  {
    a3 = 12;
  }
  *(_DWORD *)(a1 + 56) = a3;
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_10062AC24;
  void v12[3] = &unk_100997528;
  void v12[4] = a1;
  sub_1006207F8(a1, v12);
}

void sub_10062ABB0(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10008A294(v2);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10062AC14(uint64_t a1)
{
  return sub_100628CB0(*(void *)(a1 + 32));
}

uint64_t sub_10062AC1C(uint64_t a1)
{
  return sub_100628CB0(*(void *)(a1 + 32));
}

uint64_t sub_10062AC24(uint64_t a1)
{
  return sub_100628CB0(*(void *)(a1 + 32));
}

uint64_t sub_10062AC2C(uint64_t a1)
{
  return 0;
}

uint64_t sub_10062AC48(uint64_t result)
{
  uint64_t v1 = result;
  switch(*(_DWORD *)(result + 60))
  {
    case 0:
      sub_10062B04C(result);
    case 1:
      sub_10062B3A8(result);
    case 2:
      if (qword_1009F7F10 != -1) {
        dispatch_once(&qword_1009F7F10, &stru_1009BC048);
      }
      uint64_t v2 = qword_1009F7F08;
      id v3 = *(id *)(v1 + 16);
      sub_1000305AC(&v17, v3);
      sub_1006389AC(v2, (unsigned __int8 *)&v17);

      if (!*(unsigned char *)(v1 + 58)) {
        goto LABEL_12;
      }
      uint64_t result = sub_10062B508((void *)v1);
      break;
    case 3:
LABEL_12:
      *(unsigned __int32 *)((char *)v17.n128_u32 + 3) = 0;
      v17.n128_u32[0] = 0;
      sub_100229724((uint64_t)&v17);
      if (v17.n128_u8[0] == 1 && v17.n128_u8[1] <= 0x3Fu) {
        uint64_t result = sub_10062B748(v1);
      }
      else {
        uint64_t result = sub_10062BDF0(v1);
      }
      break;
    case 4:
      uint64_t result = sub_10062BA28(result);
      break;
    case 5:
      uint64_t result = sub_10062BDF0(result);
      break;
    case 6:
      uint64_t v5 = *(void *)(result + 24);
      uint64_t v4 = *(std::__shared_weak_count **)(result + 32);
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v15 = xmmword_1007BA5B4;
      int v16 = 0;
      sub_100035F98(&v17, (__n128 *)&v15);
      long long v12 = xmmword_1007BA604;
      int v13 = 0;
      sub_100035F98(&v14, (__n128 *)&v12);
      uint64_t v6 = sub_1004F5388(v5, (unsigned __int8 *)&v17, (unsigned __int8 *)&v14);
      if (v4) {
        sub_10008A294(v4);
      }
      if (v6
        && (uint64_t v7 = *(void *)(v6 + 8),
            int v8 = *(_DWORD *)(v7 + 20),
            __n128 v17 = *(__n128 *)(v7 + 4),
            int v18 = v8,
            sub_100035F98(&v14, &v17),
            int v11 = 0,
            long long v10 = xmmword_1007BFFAC,
            sub_10022A44C((unsigned __int8 *)&v14, (unsigned __int8 *)&v10)))
      {
        uint64_t result = sub_10062C0D0(v1);
      }
      else
      {
        uint64_t result = sub_10062C3CC(v1);
      }
      break;
    case 7:
      uint64_t result = sub_10062C3CC(result);
      break;
    case 8:
      __n128 v9 = *(uint64_t (**)(void))(*(void *)result + 24);
      uint64_t result = v9();
      break;
    default:
      return result;
  }
  return result;
}

void sub_10062AFF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10008A294(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10062B04C(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BC088);
  }
  uint64_t v2 = off_1009F7EB8;
  id v3 = *(id *)(a1 + 16);
  sub_1000305AC(buf, v3);
  BOOL v4 = sub_1000307A4((uint64_t)v2, buf);

  int v5 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56)) {
    BOOL v6 = v4;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    uint64_t v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      id v8 = *(id *)(a1 + 16);
      *(_DWORD *)uint64_t buf = 67109378;
      int v13 = v5;
      __int16 v14 = 2112;
      id v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Attempting to set MTU to %u on device \"%@\"", buf, 0x12u);
    }
    operator new();
  }
  sub_100620720(a1, *(_WORD *)(a1 + 56));
  __n128 v9 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int16 *)(a1 + 56);
    id v11 = *(id *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 67109378;
    int v13 = v10;
    __int16 v14 = 2112;
    id v15 = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Skipping MTU %u set on remote to discovering services for device \"%@\"", buf, 0x12u);
  }
  sub_10062B3A8(a1);
}

void sub_10062B290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100787F48();
  }
  _Unwind_Resume(exception_object);
}

void sub_10062B2BC(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  uint64_t v6 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v5;
  if (v6)
  {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
    uint64_t v5 = *(void *)(a1 + 64);
  }
  *(_DWORD *)(a1 + 60) = a3;
  id v7 = *(id *)(a1 + 16);
  id v8 = *(std::__shared_weak_count **)(a1 + 32);
  v10[0] = *(void *)(a1 + 24);
  v10[1] = (uint64_t)v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  id v9 = v7;
  sub_1006204D0(v5, v7, v10, *(_WORD *)(a1 + 40));
  if (v8) {
    sub_10008A294(v8);
  }
}

void sub_10062B388(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  if (v10) {
    sub_10008A294(v10);
  }

  _Unwind_Resume(a1);
}

void sub_10062B3A8(uint64_t a1)
{
  uint64_t v2 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    id v3 = *(id *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 138412290;
    id v5 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Attempting to find all services on device \"%@\"", buf, 0xCu);
  }
  operator new();
}

void sub_10062B4E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100787F48();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062B508(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v11 = xmmword_1007BA5A0;
  int v12 = 0;
  sub_100035F98(&v13, (__n128 *)&v11);
  sub_10071D13C(&v10);
  uint64_t v4 = sub_1004F5388(v3, (unsigned __int8 *)&v13, (unsigned __int8 *)&v10);
  if (v2) {
    sub_10008A294(v2);
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = *(_DWORD *)(v5 + 20);
    __n128 v13 = *(__n128 *)(v5 + 4);
    int v14 = v6;
    sub_100035F98(&v10, &v13);
    int v9 = 0;
    long long v8 = xmmword_1007BFF70;
    if (sub_10022A44C((unsigned __int8 *)&v10, (unsigned __int8 *)&v8)) {
      operator new();
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787F7C((uint64_t)a1);
  }
  return (*(uint64_t (**)(void *, uint64_t))(*a1 + 24))(a1, 10);
}

void sub_10062B710(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100787F48();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062B748(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v12 = xmmword_1007BA5A0;
  int v13 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v12);
  sub_10071D13C(&v14);
  uint64_t v4 = sub_1004F5388(v2, buf, (unsigned __int8 *)&v14);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = *(_DWORD *)(v5 + 20);
    *(_OWORD *)uint64_t buf = *(_OWORD *)(v5 + 4);
    int v16 = v6;
    sub_100035F98(&v14, (__n128 *)buf);
    int v11 = 0;
    long long v10 = xmmword_1007BFF70;
    if (sub_10022A44C((unsigned __int8 *)&v14, (unsigned __int8 *)&v10))
    {
      id v7 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = *(id *)(a1 + 16);
        *(_DWORD *)uint64_t buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Finding GAP reconnection characteristic handle on device \"%@\"", buf, 0xCu);
      }
      operator new();
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100787FFC(a1);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 10);
}

void sub_10062B9D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100787F48();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062BA28(uint64_t a1)
{
  __int16 v13 = 0;
  int v12 = 0;
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)&void v11[3] = 0;
  *(_DWORD *)int v11 = 0;
  long long v20 = xmmword_1007BA5A0;
  int v21 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v20);
  long long v17 = xmmword_1007BA5F0;
  int v18 = 0;
  sub_100035F98(&v19, (__n128 *)&v17);
  uint64_t v4 = sub_1004F5388(v2, buf, (unsigned __int8 *)&v19);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4
    && (uint64_t v5 = *(void *)(v4 + 8),
        int v6 = *(_DWORD *)(v5 + 20),
        *(_OWORD *)uint64_t buf = *(_OWORD *)(v5 + 4),
        *(_DWORD *)&uint8_t buf[16] = v6,
        sub_100035F98(&v19, (__n128 *)buf),
        int v16 = 0,
        long long v15 = xmmword_1007BFFAC,
        sub_10022A44C((unsigned __int8 *)&v19, (unsigned __int8 *)&v15)))
  {
    sub_100229724((uint64_t)v11);
    if (v11[0] == 1 && v11[1] < 0x40uLL)
    {
      LOBYTE(v12) = v11[6];
      BYTE1(v12) = v11[5];
      BYTE2(v12) = v11[4];
      HIBYTE(v12) = v11[3];
      LOBYTE(v13) = v11[2];
      HIBYTE(v13) = v11[1];
      id v7 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = sub_1006AD3F0();
        id v9 = *(id *)(a1 + 16);
        *(_DWORD *)uint64_t buf = 138412546;
        *(void *)&uint8_t buf[4] = v8;
        *(_WORD *)&unsigned char buf[12] = 2112;
        *(void *)&unsigned char buf[14] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Writing local address \"%@\" into GAP reconnection characteristic value on device \"%@\"", buf, 0x16u);
      }
      sub_1000335D8(buf, &v12, 6uLL);
      operator new();
    }
    return sub_10062BDF0(a1);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_10078807C(a1);
    }
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 10);
  }
}

void sub_10062BD64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a10) {
    sub_100787F48();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062BDF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v12 = xmmword_1007BA5B4;
  int v13 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v12);
  sub_10071D13C(&v14);
  uint64_t v4 = sub_1004F5388(v2, buf, (unsigned __int8 *)&v14);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = *(_DWORD *)(v5 + 20);
    *(_OWORD *)uint64_t buf = *(_OWORD *)(v5 + 4);
    int v16 = v6;
    sub_100035F98(&v14, (__n128 *)buf);
    int v11 = 0;
    long long v10 = xmmword_1007BFF70;
    if (sub_10022A44C((unsigned __int8 *)&v14, (unsigned __int8 *)&v10))
    {
      id v7 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = *(id *)(a1 + 16);
        *(_DWORD *)uint64_t buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Finding GATT service changed characteristic handle on device \"%@\"", buf, 0xCu);
      }
      operator new();
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_1007880FC(a1);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 10);
}

void sub_10062C078(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100787F48();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062C0D0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v17 = xmmword_1007BA5B4;
  int v18 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v17);
  long long v14 = xmmword_1007BA604;
  int v15 = 0;
  sub_100035F98(&v16, (__n128 *)&v14);
  uint64_t v4 = sub_1004F5388(v2, buf, (unsigned __int8 *)&v16);
  if (v3) {
    sub_10008A294(v3);
  }
  if (v4)
  {
    uint64_t v5 = *(void *)(v4 + 8);
    int v6 = *(_DWORD *)(v5 + 20);
    *(_OWORD *)uint64_t buf = *(_OWORD *)(v5 + 4);
    int v20 = v6;
    sub_100035F98(&v16, (__n128 *)buf);
    int v13 = 0;
    long long v12 = xmmword_1007BFFAC;
    if (sub_10022A44C((unsigned __int8 *)&v16, (unsigned __int8 *)&v12))
    {
      id v7 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v8 = *(id *)(a1 + 16);
        *(_DWORD *)uint64_t buf = 138412290;
        *(void *)&uint8_t buf[4] = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Enabling GATT service changed indications on device \"%@\"", buf, 0xCu);
      }
      operator new();
    }
  }
  id v9 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    id v10 = *(id *)(a1 + 16);
    *(_DWORD *)uint64_t buf = 138412290;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Failed to locate GATT service changed characteristic handle on device \"%@\"", buf, 0xCu);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 10);
}

void sub_10062C394(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100787F48();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062C3CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v34 = xmmword_1007BA730;
  int v35 = 0;
  sub_100035F98(&buf, (__n128 *)&v34);
  sub_10071D13C(&v33);
  uint64_t v4 = sub_1004F5388(v2, (unsigned __int8 *)&buf, (unsigned __int8 *)&v33);
  if (v3) {
    sub_10008A294(v3);
  }
  uint64_t v5 = *(void *)(a1 + 24);
  int v6 = *(std::__shared_weak_count **)(a1 + 32);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v31 = xmmword_1007BA874;
  int v32 = 13091918;
  sub_100035F98(&buf, (__n128 *)&v31);
  sub_10071D13C(&v33);
  uint64_t v7 = sub_1004F5388(v5, (unsigned __int8 *)&buf, (unsigned __int8 *)&v33);
  if (v6) {
    sub_10008A294(v6);
  }
  uint64_t v8 = *(void *)(a1 + 24);
  id v9 = *(std::__shared_weak_count **)(a1 + 32);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v29 = xmmword_1007BA744;
  int v30 = 0;
  sub_100035F98(&buf, (__n128 *)&v29);
  sub_10071D13C(&v33);
  uint64_t v10 = sub_1004F5388(v8, (unsigned __int8 *)&buf, (unsigned __int8 *)&v33);
  if (v9) {
    sub_10008A294(v9);
  }
  if (v4)
  {
    uint64_t v11 = *(void *)(v4 + 8);
    int v12 = *(_DWORD *)(v11 + 20);
    __n128 buf = *(__n128 *)(v11 + 4);
    int v37 = v12;
    sub_100035F98(&v33, &buf);
    int v28 = 0;
    long long v27 = xmmword_1007BFF70;
    if (sub_10022A44C(v13, (unsigned __int8 *)&v27)) {
      goto LABEL_19;
    }
  }
  if (v7)
  {
    uint64_t v14 = *(void *)(v7 + 8);
    int v15 = *(_DWORD *)(v14 + 20);
    __n128 buf = *(__n128 *)(v14 + 4);
    int v37 = v15;
    sub_100035F98(&v26, &buf);
    int v25 = 0;
    long long v24 = xmmword_1007BFF70;
    if (sub_10022A44C((unsigned __int8 *)&v26, (unsigned __int8 *)&v24)) {
      goto LABEL_19;
    }
  }
  if (v10)
  {
    uint64_t v16 = *(void *)(v10 + 8);
    int v17 = *(_DWORD *)(v16 + 20);
    __n128 buf = *(__n128 *)(v16 + 4);
    int v37 = v17;
    sub_100035F98(&v23, &buf);
    int v22 = 0;
    long long v21 = xmmword_1007BFF70;
    if (sub_10022A44C((unsigned __int8 *)&v23, (unsigned __int8 *)&v21))
    {
LABEL_19:
      int v18 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        id v19 = *(id *)(a1 + 16);
        buf.n128_u32[0] = 138412290;
        *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Reading DIS information on HID, MIDI, or GHS device \"%@\"", (uint8_t *)&buf, 0xCu);
      }
      operator new();
    }
  }
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 24))(a1, 0);
}

void sub_10062C754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (a10) {
    sub_100787F48();
  }
  _Unwind_Resume(exception_object);
}

void sub_10062C7B4(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (*(void *)(a1 + 64) != a2)
  {
    int v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100787ED0(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  if (*(_DWORD *)(a1 + 60) == 2)
  {
    uint64_t v14 = (void *)*a4;
    if (a4[1] != *a4)
    {
      long long __p = 0;
      int v35 = 0;
      int v36 = 0;
      do
      {
        uint64_t v15 = *(void *)(*v14 + 8);
        int v16 = *(_DWORD *)(v15 + 20);
        __n128 v41 = *(__n128 *)(v15 + 4);
        int v42 = v16;
        sub_100035F98(&v39, &v41);
        int v38 = 0;
        long long v37 = xmmword_1007BFF70;
        if (sub_10022A44C((unsigned __int8 *)&v39, (unsigned __int8 *)&v37))
        {
          uint64_t v17 = *v14;
          __n128 v41 = *(__n128 *)(*v14 + 72);
          int v42 = *(_DWORD *)(v17 + 88);
          sub_100035F98(&v39, &v41);
          int v18 = v35;
          if (v35 >= (__n128 *)v36)
          {
            unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v35 - (unsigned char *)__p) >> 2);
            unint64_t v22 = v21 + 1;
            if (v21 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              abort();
            }
            if (0x999999999999999ALL * ((v36 - (unsigned char *)__p) >> 2) > v22) {
              unint64_t v22 = 0x999999999999999ALL * ((v36 - (unsigned char *)__p) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((v36 - (unsigned char *)__p) >> 2) >= 0x666666666666666) {
              unint64_t v23 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v23 = v22;
            }
            if (v23) {
              long long v24 = (char *)sub_10003767C((uint64_t)&v36, v23);
            }
            else {
              long long v24 = 0;
            }
            int v25 = (__n128 *)&v24[4 * (((char *)v35 - (unsigned char *)__p) >> 2)];
            __n128 v26 = v39;
            v25[1].n128_u32[0] = v40;
            __n128 *v25 = v26;
            int v28 = (char *)__p;
            long long v27 = (char *)v35;
            long long v29 = &v24[20 * v21];
            if (v35 != __p)
            {
              do
              {
                long long v30 = *(_OWORD *)(v27 - 20);
                *((_DWORD *)v29 - 1) = *((_DWORD *)v27 - 1);
                *(_OWORD *)(v29 - 20) = v30;
                v29 -= 20;
                v27 -= 20;
              }
              while (v27 != v28);
              long long v27 = (char *)__p;
            }
            int v20 = &v25[1].n128_u32[1];
            long long __p = v29;
            int v35 = (__n128 *)((char *)v25 + 20);
            int v36 = &v24[20 * v23];
            if (v27) {
              operator delete(v27);
            }
          }
          else
          {
            __n128 v19 = v39;
            v35[1].n128_u32[0] = v40;
            *int v18 = v19;
            int v20 = &v18[1].n128_u32[1];
          }
          int v35 = (__n128 *)v20;
        }
        ++v14;
      }
      while (v14 != (void *)a4[1]);
      sub_10062078C(a1, (uint64_t)&__p);
      if (__p)
      {
        int v35 = (__n128 *)__p;
        operator delete(__p);
      }
    }
  }
  v33[0] = _NSConcreteStackBlock;
  v33[1] = 3221225472;
  double v33[2] = sub_10062CAE4;
  v33[3] = &unk_100997528;
  v33[4] = a1;
  sub_1006207F8(a1, v33);
  int v32 = (void *)*a4;
  long long v31 = (void *)a4[1];
  while (v32 != v31)
  {
    if (*v32)
    {
      (*(void (**)(void))(*(void *)*v32 + 8))(*v32);
      long long v31 = (void *)a4[1];
    }
    ++v32;
  }
}

void sub_10062CAB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062CAE4(uint64_t a1)
{
  return sub_10062AC48(*(void *)(a1 + 32));
}

void sub_10062CAEC(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
}

void sub_10062CAF4(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BC048);
  }
  sub_1006412B0(qword_1009F7F08, *(void **)(a1 + 16));

  sub_1006205C8(a1, a2);
}

void sub_10062CB6C(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CBA8(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CBE4(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CC20(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CC5C(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CC98(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CCD4(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CD10(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CD4C(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CD88(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

void sub_10062CDC4(uint64_t a1)
{
  sub_10062721C(a1);

  operator delete();
}

uint64_t sub_10062CDFC(void *a1)
{
  *a1 = off_1009BBD18;
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062CE78(void *a1)
{
  *a1 = off_1009BBD18;
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062CF08(void *a1)
{
  *a1 = off_1009BBD48;
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062CF84(void *a1)
{
  *a1 = off_1009BBD48;
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062D014(void *a1)
{
  *a1 = off_1009BBD78;
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062D090(void *a1)
{
  *a1 = off_1009BBD78;
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062D120(void *a1)
{
  *a1 = off_1009BBDA8;
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062D19C(void *a1)
{
  *a1 = off_1009BBDA8;
  a1[6] = &off_100998428;
  uint64_t v2 = (atomic_uint *)a1[7];
  if (v2) {
    sub_1000368F4(v2);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062D22C(uint64_t a1)
{
  *(void *)a1 = off_1009BBDD8;
  *(void *)(a1 + 48) = &off_1009BBE10;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_10062721C(a1);
}

void sub_10062D2DC(uint64_t a1)
{
  *(void *)a1 = off_1009BBDD8;
  *(void *)(a1 + 48) = &off_1009BBE10;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10062721C(a1);

  operator delete();
}

uint64_t sub_10062D3A0(uint64_t a1)
{
  *(void *)a1 = off_1009BBE28;
  *(void *)(a1 + 48) = &off_1009BBE60;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_10062721C(a1);
}

void sub_10062D480(uint64_t a1)
{
  *(void *)a1 = off_1009BBE28;
  *(void *)(a1 + 48) = &off_1009BBE60;
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v2 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_10062721C(a1);

  operator delete();
}

uint64_t sub_10062D574(void *a1)
{
  *a1 = off_1009BBE78;
  a1[6] = &off_1009BBEB0;
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062D644(void *a1)
{
  *a1 = off_1009BBE78;
  a1[6] = &off_1009BBEB0;
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062D728(void *a1)
{
  *a1 = off_1009BBEC8;
  a1[6] = &off_1009BBF00;
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062D7F8(void *a1)
{
  *a1 = off_1009BBEC8;
  a1[6] = &off_1009BBF00;
  uint64_t v2 = a1[9];
  a1[9] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[8];
  a1[8] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062D8DC(void *a1)
{
  *a1 = off_1009BBF18;
  a1[6] = &off_1009BBF50;
  uint64_t v2 = a1[10];
  a1[10] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[8] = &off_100998428;
  uint64_t v3 = (atomic_uint *)a1[9];
  if (v3) {
    sub_1000368F4(v3);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062D9A8(void *a1)
{
  *a1 = off_1009BBF18;
  a1[6] = &off_1009BBF50;
  uint64_t v2 = a1[10];
  a1[10] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  a1[8] = &off_100998428;
  uint64_t v3 = (atomic_uint *)a1[9];
  if (v3) {
    sub_1000368F4(v3);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062DA88(void *a1)
{
  *a1 = off_1009BBF68;
  a1[6] = &off_1009BBFA0;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062DB28(void *a1)
{
  *a1 = off_1009BBF68;
  a1[6] = &off_1009BBFA0;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062DBDC(void *a1)
{
  *a1 = off_1009BBFB8;
  a1[6] = &off_1009BBFF0;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062DC7C(void *a1)
{
  *a1 = off_1009BBFB8;
  a1[6] = &off_1009BBFF0;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062DD30(void *a1)
{
  *a1 = off_1009BC008;
  a1[6] = &off_1009BC040;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062DDD0(void *a1)
{
  *a1 = off_1009BC008;
  a1[6] = &off_1009BC040;
  uint64_t v2 = a1[8];
  a1[8] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

uint64_t sub_10062DE84(void *a1)
{
  *a1 = off_1009BBAB8;
  a1[6] = &off_1009BBAF0;
  uint64_t v2 = a1[12];
  a1[12] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[11];
  a1[11] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }

  return sub_10062721C((uint64_t)a1);
}

void sub_10062DF64(void *a1)
{
  *a1 = off_1009BBAB8;
  a1[6] = &off_1009BBAF0;
  uint64_t v2 = a1[12];
  a1[12] = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = a1[11];
  a1[11] = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  uint64_t v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  sub_10062721C((uint64_t)a1);

  operator delete();
}

void sub_10062E058(id a1)
{
}

void sub_10062E09C()
{
}

uint64_t sub_10062E0C0(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7 = sub_100620458(a1, a2);
  *(void *)uint64_t v7 = off_1009BBD18;
  *(_WORD *)(v7 + 42) = a3;
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(a1 + 48) = &off_100998428;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    sub_100037354(v8);
  }
  return a1;
}

void sub_10062E144(_Unwind_Exception *a1)
{
  sub_10062721C(v1);
  _Unwind_Resume(a1);
}

void sub_10062E158(id a1)
{
}

void sub_10062E19C()
{
}

uint64_t sub_10062E1C0(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7 = sub_100620458(a1, a2);
  *(void *)uint64_t v7 = off_1009BBDA8;
  *(_WORD *)(v7 + 42) = a3;
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(a1 + 48) = &off_100998428;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    sub_100037354(v8);
  }
  return a1;
}

void sub_10062E244(_Unwind_Exception *a1)
{
  sub_10062721C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10062E258(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7 = sub_100620458(a1, a2);
  *(void *)uint64_t v7 = off_1009BBD78;
  *(_WORD *)(v7 + 42) = a3;
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(a1 + 48) = &off_100998428;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    sub_100037354(v8);
  }
  return a1;
}

void sub_10062E2DC(_Unwind_Exception *a1)
{
  sub_10062721C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10062E2F0(uint64_t a1, uint64_t a2, __int16 a3, uint64_t a4)
{
  uint64_t v7 = sub_100620458(a1, a2);
  *(void *)uint64_t v7 = off_1009BBD48;
  *(_WORD *)(v7 + 42) = a3;
  uint64_t v8 = *(void *)(a4 + 8);
  *(void *)(a1 + 48) = &off_100998428;
  *(void *)(a1 + 56) = v8;
  if (v8) {
    sub_100037354(v8);
  }
  return a1;
}

void sub_10062E374(_Unwind_Exception *a1)
{
  sub_10062721C(v1);
  _Unwind_Resume(a1);
}

void sub_10062E388(id a1)
{
}

void sub_10062E3CC()
{
}

id sub_10062E42C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 16);
  return v3;
}

void sub_10062E448(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

id sub_10062E468(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  return v2;
}

void *sub_10062E48C(void *a1)
{
  uint64_t v2 = sub_10004191C(a1, "");
  *((unsigned char *)v2 + 24) = -127;
  sub_10004191C(v2 + 4, "");
  return a1;
}

void sub_10062E4D4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10062E4F4(std::string *__str)
{
  if ((__str[1].__r_.__value_.__s.__data_[0] & 0x70) == 0x10)
  {
    sub_10004191C(&__p, "+");
    int v2 = SHIBYTE(__str->__r_.__value_.__r.__words[2]);
    if (v2 >= 0) {
      uint64_t v3 = __str;
    }
    else {
      uint64_t v3 = (std::string *)__str->__r_.__value_.__r.__words[0];
    }
    if (v2 >= 0) {
      std::string::size_type size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __str->__r_.__value_.__l.__size_;
    }
    uint64_t v5 = std::string::append(&__p, (const std::string::value_type *)v3, size);
    std::string::size_type v6 = v5->__r_.__value_.__r.__words[0];
    v11[0] = v5->__r_.__value_.__l.__size_;
    *(void *)((char *)v11 + 7) = *(std::string::size_type *)((char *)&v5->__r_.__value_.__r.__words[1] + 7);
    std::string::value_type v7 = HIBYTE(v5->__r_.__value_.__r.__words[2]);
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (__str[2].__r_.__value_.__s.__data_[7] < 0) {
      operator delete((void *)__str[1].__r_.__value_.__l.__size_);
    }
    std::string::size_type v8 = v11[0];
    __str[1].__r_.__value_.__l.__size_ = v6;
    __str[1].__r_.__value_.__r.__words[2] = v8;
    *(std::string::size_type *)((char *)&__str[1].__r_.__value_.__r.__words[2] + 7) = *(void *)((char *)v11 + 7);
    __str[2].__r_.__value_.__s.__data_[7] = v7;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v9 = (std::string *)((char *)__str + 32);
    std::string::operator=(v9, __str);
  }
}

void sub_10062E624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10062E648(std::string *this, unsigned char *a2)
{
  if (!a2) {
    goto LABEL_4;
  }
  uint64_t v3 = a2;
  if (*a2 == 43)
  {
    this[1].__r_.__value_.__s.__data_[0] = -111;
    uint64_t v3 = a2 + 1;
  }
  else
  {
    if (!*a2)
    {
LABEL_4:
      std::string::assign(this, "");
      this[1].__r_.__value_.__s.__data_[0] = -127;
      return;
    }
    this[1].__r_.__value_.__s.__data_[0] = -127;
  }
  std::string::assign(this, "");
  LOBYTE(v4) = *v3;
  if (*v3)
  {
    uint64_t v5 = v3 + 1;
    do
    {
      if ((v4 & 0x80) != 0)
      {
        if (!__maskrune(v4, 0x100uLL))
        {
LABEL_14:
          if ((_DefaultRuneLocale.__runetype[v4] & 0x400) == 0
            && (v4 > 0x3Fu || ((1 << v4) & 0x88001C0800000000) == 0))
          {
            goto LABEL_25;
          }
          goto LABEL_24;
        }
      }
      else if ((_DefaultRuneLocale.__runetype[v4] & 0x100) == 0)
      {
        goto LABEL_14;
      }
      unsigned __int8 v6 = __toupper(v4);
      if (v6 > 0x4Fu)
      {
        if (v6 < 0x57u) {
          char v7 = 56;
        }
        else {
          char v7 = 57;
        }
        if (v6 >= 0x54u) {
          LOBYTE(v4) = v7;
        }
        else {
          LOBYTE(v4) = 55;
        }
      }
      else
      {
        unsigned int v4 = (((86 * (char)(v6 - 65)) >> 15) & 1) + ((86 * (char)(v6 - 65)) >> 8) + 50;
      }
LABEL_24:
      std::string::push_back(this, v4);
LABEL_25:
      int v8 = *v5++;
      LOBYTE(v4) = v8;
    }
    while (v8);
  }
}

std::string *sub_10062E7BC(std::string *a1, unsigned char *a2)
{
  unsigned int v4 = (std::string *)sub_10004191C(a1, "");
  v4[1].__r_.__value_.__s.__data_[0] = -127;
  v4[1].__r_.__value_.__l.__size_ = 0;
  v4[1].__r_.__value_.__r.__words[2] = 0;
  v4[2].__r_.__value_.__r.__words[0] = 0;
  sub_10062E648(v4, a2);
  sub_10062E4F4(a1);
  return a1;
}

void sub_10062E81C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  sub_10078817C(v1);
  _Unwind_Resume(a1);
}

char *sub_10062E844(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__n128 __dst = v4;
  }
  __dst[24] = *((unsigned char *)a2 + 24);
  uint64_t v5 = __dst + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_10003B098(v5, *((void **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long v6 = a2[2];
    *((void *)__dst + 6) = *((void *)a2 + 6);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_10062E8C8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10062E8EC(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    uint64_t v1 = *(void *)(a1 + 8);
  }
  else {
    uint64_t v1 = *(unsigned __int8 *)(a1 + 23);
  }
  return v1 == 0;
}

std::string *sub_10062E90C(std::string *this, uint64_t a2)
{
  if ((std::string *)a2 != this)
  {
    std::string::operator=(this, (const std::string *)a2);
    this[1].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 24);
    std::string::operator=((std::string *)((char *)this + 32), (const std::string *)(a2 + 32));
  }
  return this;
}

BOOL sub_10062E958(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (a2 == a1) {
    return 1;
  }
  if (a1[24] != a2[24]) {
    return 0;
  }
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return memcmp(*(const void **)a1, a2, *((void *)a1 + 1)) == 0;
  }
  if (!a1[23]) {
    return 1;
  }
  uint64_t v6 = v2 - 1;
  do
  {
    int v8 = *a1++;
    int v7 = v8;
    int v10 = *a2++;
    int v9 = v10;
    BOOL v12 = v6-- != 0;
    BOOL v13 = v7 == v9;
    BOOL v14 = v7 == v9;
  }
  while (v13 && v12);
  return v14;
}

char *sub_10062EA20@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[55] < 0) {
    return (char *)sub_10003B098((unsigned char *)a2, *((void **)result + 4), *((void *)result + 5));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 2);
  *(void *)(a2 + 16) = *((void *)result + 6);
  return result;
}

std::string *sub_10062EA4C@<X0>(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = (const std::string *)(a1 + 32);
  int v4 = *(char *)(a1 + 55);
  if ((v4 & 0x80000000) == 0)
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
    a2->__r_.__value_.__r.__words[2] = *(void *)(a1 + 48);
    strcpy(v21, "()- ");
    goto LABEL_4;
  }
  sub_10003B098(a2, *(void **)(a1 + 32), *(void *)(a1 + 40));
  int v4 = *(char *)(a1 + 55);
  strcpy(v21, "()- ");
  if ((v4 & 0x80000000) == 0)
  {
LABEL_4:
    uint64_t v6 = v4;
    int v7 = (std::string *)v3;
    if (!v6) {
      goto LABEL_16;
    }
    goto LABEL_5;
  }
  int v7 = *(std::string **)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  if (!v6) {
    goto LABEL_16;
  }
LABEL_5:
  int v8 = (unsigned __int8 *)v7 + v6;
  int v9 = (unsigned __int8 *)v7;
  while (2)
  {
    for (uint64_t i = 0; i != 2; ++i)
    {
      if (*v9 == asc_1008ABF7A[i])
      {
        if (v9 != v8 && v9 - (unsigned __int8 *)v7 != -1)
        {
          std::string::basic_string(&v20, v3, 0, v9 - (unsigned __int8 *)v7, (std::allocator<char> *)&v21[7]);
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0) {
            operator delete(a2->__r_.__value_.__l.__data_);
          }
          *a2 = v20;
        }
        goto LABEL_16;
      }
    }
    if (++v9 != v8) {
      continue;
    }
    break;
  }
LABEL_16:
  for (uint64_t j = 0; j != 4; ++j)
  {
    std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    if ((size & 0x80u) == 0) {
      BOOL v13 = a2;
    }
    else {
      BOOL v13 = (std::string *)a2->__r_.__value_.__r.__words[0];
    }
    if ((size & 0x80u) != 0) {
      std::string::size_type size = a2->__r_.__value_.__l.__size_;
    }
    BOOL v14 = sub_1004843C4(v13, (unsigned __int8 *)v13 + size, (unsigned __int8 *)&v21[j]);
    uint64_t v15 = HIBYTE(a2->__r_.__value_.__r.__words[2]);
    int v16 = (char)v15;
    std::string::size_type v17 = (std::string::size_type)a2 + v15;
    if (v16 >= 0)
    {
      std::string::size_type v18 = (std::string::size_type)a2;
    }
    else
    {
      std::string::size_type v17 = a2->__r_.__value_.__r.__words[0] + a2->__r_.__value_.__l.__size_;
      std::string::size_type v18 = a2->__r_.__value_.__r.__words[0];
    }
    uint64_t result = std::string::erase(a2, (std::string::size_type)&v14[-v18], v17 - (void)v14);
  }
  return result;
}

void sub_10062EBE4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10062EC08(uint64_t a1)
{
  std::string::assign((std::string *)a1, "");
  uint64_t result = std::string::assign((std::string *)(a1 + 32), "");
  *(unsigned char *)(a1 + 24) = -127;
  return result;
}

uint64_t sub_10062EC4C(uint64_t result)
{
  *(void *)uint64_t result = off_1009BC0B8;
  *(void *)(result + 8) = off_1009BC128;
  *(void *)(result + 16) = off_1009BC168;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(void *)(result + 56) = result + 16;
  *(void *)(result + 64) = 0;
  return result;
}

void sub_10062ECC4(uint64_t a1, uint64_t a2)
{
}

void sub_10062ECCC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v4 = *(char **)(a1 + 8);
  int v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    uint64_t v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  uint64_t v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      uint64_t v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_10062FE34(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10062ED9C(uint64_t a1, uint64_t a2)
{
}

void sub_10062EDA4(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
    if (*(void *)(a1 + 8) == *(void *)(a1 + 16)) {
      (*(void (**)(void, uint64_t))(**(void **)(a1 + 32) + 8))(*(void *)(a1 + 32), a1);
    }
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_10062EE7C()
{
}

void sub_10062EEC4()
{
}

void sub_10062EEE8()
{
}

uint64_t sub_10062EEF0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 64);
  if (result)
  {
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_10062EF94;
    v3[3] = &unk_100997528;
    v3[4] = result;
    uint64_t result = (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 16))(result, v3);
    *(void *)(a1 + 64) = 0;
  }
  return result;
}

uint64_t sub_10062EF94(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_10062EFC4(uint64_t a1)
{
  return sub_10062EEF0(a1 - 16);
}

uint64_t sub_10062EFCC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 208))();
}

uint64_t sub_10062EFF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 216))();
}

uint64_t sub_10062F01C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 224))();
}

uint64_t sub_10062F044(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 184))();
}

uint64_t sub_10062F06C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 192))();
}

uint64_t sub_10062F094(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 200))();
}

uint64_t sub_10062F0BC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 152))();
}

uint64_t sub_10062F0E4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 160))();
}

uint64_t sub_10062F10C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 168))();
}

uint64_t sub_10062F134(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 176))();
}

uint64_t sub_10062F15C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 240))();
}

uint64_t sub_10062F184(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 256))();
}

uint64_t sub_10062F1B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 32))(v2, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10062F24C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062F268(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 40))();
}

uint64_t sub_10062F290(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 48))();
}

uint64_t sub_10062F2B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 56))();
}

uint64_t sub_10062F2E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 64))(v2, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10062F378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062F394(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 72))(v2, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10062F42C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062F448(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 80))();
}

uint64_t sub_10062F470(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 88))();
}

uint64_t sub_10062F498(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 96))();
}

uint64_t sub_10062F4C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 64);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v8 = *(void *)(a3 + 16);
  }
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, void **))(*(void *)v4 + 104))(v4, a2, __p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  return v5;
}

void sub_10062F55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062F578(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  uint64_t v3 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v2 + 112))(v2, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_10062F610(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10062F62C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 120))();
}

uint64_t sub_10062F654(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 136))();
}

uint64_t sub_10062F67C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 144))();
}

uint64_t sub_10062F6A4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 64) + 24))();
}

void sub_10062F6D0(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_100A19EC0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'call status changed' notification to telephony listeners", buf, 2u);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10062FBEC;
  v6[3] = &unk_1009BC180;
  id v7 = v3;
  id v5 = v3;
  sub_10062FB20(a1 + 6, v6);
}

void sub_10062F7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10062F7D0(uint64_t a1, void *a2)
{
}

void sub_10062F7DC(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19EC0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending 'operator status changed' notification to telephony listeners", v3, 2u);
  }
  sub_10062FB20(a1 + 6, &stru_1009BC1C0);
}

void sub_10062F858(uint64_t a1)
{
}

void sub_10062F864(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19EC0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending 'wireless technology changed' notification to telephony listeners", v3, 2u);
  }
  sub_10062FB20(a1 + 6, &stru_1009BC1E0);
}

void sub_10062F8E0(uint64_t a1)
{
}

void sub_10062F8EC(os_unfair_lock_s *a1)
{
  uint64_t v2 = qword_100A19EC0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending 'registration status changed' notification to telephony listeners", v3, 2u);
  }
  sub_10062FB20(a1 + 6, &stru_1009BC200);
}

void sub_10062F968(uint64_t a1)
{
}

void sub_10062F974(os_unfair_lock_s *a1, char a2)
{
  uint64_t v4 = qword_100A19EC0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending 'signal strength changed' notification to telephony listeners", buf, 2u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10062FC94;
  v5[3] = &unk_1009BC220;
  char v6 = a2;
  sub_10062FB20(a1 + 6, v5);
}

void sub_10062FA40(uint64_t a1, char a2)
{
}

void sub_10062FA4C(os_unfair_lock_s *a1, char a2)
{
  uint64_t v4 = qword_100A19EC0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC0, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Sending 'transmit state changed' notification to telephony listeners", buf, 2u);
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  uint64_t v5[2] = sub_10062FCC4;
  v5[3] = &unk_1009BC220;
  char v6 = a2;
  sub_10062FB20(a1 + 6, v5);
}

void sub_10062FB18(uint64_t a1, char a2)
{
}

void sub_10062FB20(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0;
  char v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    char v6 = v4;
    operator delete(v4);
  }
}

void sub_10062FBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10062FBEC(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32));
}

void sub_10062FC1C(id a1, TelephonyEventListener *a2)
{
}

void sub_10062FC44(id a1, TelephonyEventListener *a2)
{
}

void sub_10062FC6C(id a1, TelephonyEventListener *a2)
{
}

uint64_t sub_10062FC94(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 32))(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_10062FCC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 40))(a2, *(unsigned __int8 *)(a1 + 32));
}

void *sub_10062FCF4(void *a1)
{
  *a1 = off_1009BC0B8;
  a1[1] = off_1009BC128;
  a1[2] = off_1009BC168;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_10062FD84(void *a1)
{
  *a1 = off_1009BC0B8;
  a1[1] = off_1009BC128;
  a1[2] = off_1009BC168;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  operator delete();
}

char *sub_10062FE34(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  char v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    BOOL v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      __n128 v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      __n128 v19 = 0;
    }
    std::string v20 = &v19[8 * v16];
    std::string __p = v19;
    long long v27 = v20;
    int v28 = v20;
    long long v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unint64_t v23 = (char *)sub_1000405F8(v8, v22);
        std::string v20 = &v23[8 * (v22 >> 2)];
        std::string __p = v23;
        long long v27 = v20;
        long long v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)std::string v20 = *(void *)v3;
    int v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)__src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    int v9 = __src + 8;
    int v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_10063003C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100630128(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006301A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100630310(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006304C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10063064C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10063071C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006307AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100630860(_Unwind_Exception *a1)
{
  uint64_t v4 = v3;

  _Unwind_Resume(a1);
}

void sub_1006308C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006309DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100630AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100630BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100630C98(uint64_t a1)
{
  uint64_t v1 = sub_100283C88(a1, 14);
  sub_10033F690(v1 + 256, 0, 1, 1007);
}

void sub_100630D78(_Unwind_Exception *a1)
{
  sub_100283DC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100630DA8(uint64_t a1)
{
  *(void *)a1 = off_1009BC250;
  uint64_t v2 = a1 + 256;
  *(void *)(a1 + 256) = off_1009BC2C0;
  dispatch_release(*(dispatch_object_t *)(a1 + 512));
  CFRelease(*(CFTypeRef *)(a1 + 520));

  sub_10033F7C4(v2);

  return sub_100283DC8(a1);
}

void sub_100630E40(_Unwind_Exception *a1)
{
  sub_10033F7C4(v2);
  sub_100283DC8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100630E68(uint64_t a1)
{
  return sub_100630DA8(a1 - 256);
}

void sub_100630E70(uint64_t a1)
{
  sub_100630DA8(a1);

  operator delete();
}

void sub_100630EA8(uint64_t a1)
{
  sub_100630DA8(a1 - 256);

  operator delete();
}

uint64_t sub_100630EE4(uint64_t a1)
{
  long long v8 = 0u;
  long long v9 = 0u;
  long long v6 = 0u;
  long long v7 = 0u;
  uint64_t v2 = (unsigned char *)(a1 + 504);
  *(unsigned char *)(a1 + 504) = 1;
  char v5 = 0;
  sub_10001B8E0(&v5);
  if (sub_100245A8C((uint64_t)sub_100631098, (uint64_t)off_1009BC310, 0x3EFu, 0x3B01u, v2, (uint64_t)&unk_1009BC338))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100788260();
    }
LABEL_10:
    uint64_t v3 = 1;
    goto LABEL_11;
  }
  *(void *)&long long v8 = &unk_1009BC368;
  WORD4(v8) = 3;
  *(void *)&long long v9 = &unk_1009BC2E0;
  WORD4(v9) = 1;
  *(void *)&long long v6 = &unk_1009BC3B0;
  WORD4(v6) = 3;
  *(void *)&long long v7 = &unk_1009BC2F8;
  WORD4(v7) = 1;
  byte_100A13AB8 = 1;
  word_100A13ABA = 1;
  dword_100A13AC0 = *(unsigned __int8 *)(a1 + 504);
  if (sub_10024E258((uint64_t)&v8, (int *)(a1 + 496)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_1007881F8();
    }
    goto LABEL_10;
  }
  uint64_t v3 = sub_10024E258((uint64_t)&v6, (int *)(a1 + 500));
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100788190();
    }
    goto LABEL_10;
  }
LABEL_11:
  sub_10001B8AC(&v5);
  return v3;
}

void sub_100631084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100631098(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  if (qword_1009FBE40 != -1) {
    dispatch_once(&qword_1009FBE40, &stru_1009BC548);
  }
  long long v6 = off_1009FBE38;

  sub_100631660(v6, a1, a4);
}

uint64_t sub_100631104(uint64_t a1)
{
  char v12 = 0;
  sub_10001B8E0(&v12);
  sub_10024E448(*(_DWORD *)(a1 + 496));
  sub_10024E448(*(_DWORD *)(a1 + 500));
  if (sub_100245D68(*(unsigned __int8 *)(a1 + 504)) == 101)
  {
    uint64_t v2 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_1007882C8(v2, v3, v4, v5, v6, v7, v8, v9);
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  sub_10001B8AC(&v12);
  return v10;
}

void sub_100631198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1006311B0(uint64_t a1)
{
  return 0;
}

uint64_t sub_1006311D0(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    long long v21 = unk_1009BC408;
    long long v22 = unk_1009BC3F8;
    unint64_t v18 = 0;
    __n128 v19 = 0;
    uint64_t v20 = 0;
    int v4 = sub_10047AE08(a2, (uint64_t)&v21, 4u, &v18);
    if ((v4 & 1) != 0 || sub_10047AE08(a2, (uint64_t)&v22, 4u, &v18))
    {
      uint64_t v6 = v18;
      uint64_t v5 = v19;
      if (v18 != v19)
      {
        uint64_t v7 = v18;
        while (1)
        {
          if (*(unsigned char *)v7 == 6 && *((_WORD *)v7 + 1) == 2)
          {
            uint64_t v9 = v7[1];
            BOOL v10 = *(unsigned char *)v9 == 3 && *(_DWORD *)(v9 + 8) == 3;
            if (v10 && *(unsigned char *)(v9 + 16) == 1) {
              break;
            }
          }
          v7 += 2;
          if (v7 == (void *)v19)
          {
            int v11 = -1;
            goto LABEL_26;
          }
        }
        int v11 = *(_DWORD *)(v9 + 24);
LABEL_26:
        while (v6 != v5)
        {
          *(_OWORD *)__n128 buf = *v6;
          sub_1002D5394(buf);
          ++v6;
          uint64_t v5 = v19;
        }
        if (v11 != -1)
        {
          unint64_t v14 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, __p);
            if (v24 >= 0) {
              uint64_t v15 = __p;
            }
            else {
              uint64_t v15 = (void **)__p[0];
            }
            uint64_t v16 = "Old WiAP UUID";
            *(_DWORD *)__n128 buf = 136446722;
            if (v4) {
              uint64_t v16 = "New WiAP UUID";
            }
            *(void *)&uint8_t buf[4] = v15;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&unsigned char buf[14] = v11;
            __int16 v26 = 2082;
            long long v27 = v16;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Initiating outgoing Wireless IAP connection request to device %{public}s on rfcomm channel %d, %{public}s", buf, 0x1Cu);
            if (v24 < 0) {
              operator delete(__p[0]);
            }
          }
          LOBYTE(__p[0]) = 0;
          sub_10001B8E0(__p);
          *(_WORD *)__n128 buf = 0;
          if (sub_1002460C8((uint64_t)sub_100631558, off_1009BC310, a2 + 128, v11, 0x3EFu, 0x3B01u, buf, (uint64_t)&unk_1009BC338))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
              sub_1007883A4();
            }
            uint64_t v12 = 305;
          }
          else
          {
            sub_1004BE028(a1, a2, *(__int16 *)buf);
            uint64_t v12 = 0;
          }
          sub_10001B8AC(__p);
          goto LABEL_45;
        }
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100788370();
      }
    }
    else
    {
      BOOL v13 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a2, buf);
        sub_10078840C(buf, (uint8_t *)__p, v13);
      }
    }
    uint64_t v12 = 305;
LABEL_45:
    if (v18)
    {
      __n128 v19 = v18;
      operator delete(v18);
    }
    return v12;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_10078833C();
  }
  return 1;
}

void sub_100631514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100631558(int a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009FBE40 != -1) {
    dispatch_once(&qword_1009FBE40, &stru_1009BC548);
  }
  uint64_t v5 = off_1009FBE38;

  sub_1006318E0(v5, a1, a3);
}

uint64_t sub_1006315C4(void *a1, unint64_t a2)
{
  unsigned int v2 = sub_1004BE120(a1, a2);
  char v5 = 0;
  sub_10001B8E0(&v5);
  uint64_t v3 = sub_100246730(v2, 1818);
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_1007787CC();
    }
    uint64_t v3 = 1;
  }
  sub_10001B8AC(&v5);
  return v3;
}

void sub_10063164C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100631660(void *a1, uint64_t a2, unsigned int a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BC4E8);
  }
  *(_DWORD *)__n128 buf = *(_DWORD *)a2;
  LOWORD(v19) = *(_WORD *)(a2 + 4);
  uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  uint64_t v7 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(v6, __p);
    int v8 = v17;
    uint64_t v9 = (void **)__p[0];
    int v10 = sub_1004BE120(a1, v6);
    int v11 = __p;
    *(_DWORD *)__n128 buf = 136446722;
    if (v8 < 0) {
      int v11 = v9;
    }
    __n128 v19 = v11;
    __int16 v20 = 1024;
    int v21 = v10;
    __int16 v22 = 1024;
    unsigned int v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received incoming connection attempt from device %{public}s getHandleForDevice %d, linkHandle %d", buf, 0x18u);
    if (v17 < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_1004BDDAC((uint64_t)a1, v6) && !sub_1004BE120(a1, v6))
  {
    int v13 = sub_1002463C0((uint64_t)sub_100631558, a3, 1);
    if (!v13)
    {
      sub_1004BE028((uint64_t)a1, v6, a3);
      sub_1004BD554(a1, v6);
    }
    char v14 = 1;
    goto LABEL_14;
  }
  uint64_t v12 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__n128 buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Denying connection attempt", buf, 2u);
  }
  int v13 = sub_1002463C0((uint64_t)sub_100631558, a3, 0);
  if (v13)
  {
    char v14 = 0;
LABEL_14:
    uint64_t v15 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100788480(v14, v13, v15);
    }
  }
}

void sub_1006318BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006318E0(void *a1, int a2, uint64_t a3)
{
  uint64_t v5 = sub_1004BE238(a1, a2);
  if (v5)
  {
    uint64_t v6 = v5;
    if (a3)
    {
      uint64_t v7 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(v6, __p);
        uint64_t v9 = v11 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__n128 buf = 136446466;
        int v13 = v9;
        __int16 v14 = 1024;
        int v15 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Connection to device %{public}s failed - result was %{bluetooth:OI_STATUS}u", buf, 0x12u);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009BC508);
      }
      int v8 = sub_1004E2340((uint64_t)off_1009F8068, a3, 20000);
      sub_1004BD6C8((uint64_t)a1, v6, v8);
    }
    sub_1004BD6C8((uint64_t)a1, v5, 0);
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100788520();
  }
}

unsigned char *sub_100631C10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v17 = 0;
  sub_10001B8E0(&v17);
  int v4 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v3 = (unsigned __int16 *)(a1 + 40);
  uint64_t v5 = sub_1004BE238((void *)v2, v4);
  sub_10001B910(&v17);
  if (!v5) {
    return sub_10001B8AC(&v17);
  }
  sub_1004A82EC((unsigned __int8 *)(v5 + 128), __p);
  if (v21 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = *(const char **)__p;
  }
  CFStringRef v7 = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x600u);
  if (v21 < 0) {
    operator delete(*(void **)__p);
  }
  Connection = (void *)acc_transportClient_createConnection();
  if (v7) {
    CFRelease(v7);
  }
  if (!Connection)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10078860C();
    }
    goto LABEL_21;
  }
  void v16[5] = _NSConcreteStackBlock;
  v16[6] = 3221225472;
  v16[7] = sub_100631FFC;
  v16[8] = &unk_1009A1320;
  v16[9] = v2;
  unsigned char v16[10] = v5;
  Endpoint = (void *)acc_transportClient_createEndpoint();
  int v10 = qword_100A19E40;
  if (!Endpoint)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100788640();
    }
LABEL_21:
    sub_1002B804C(&v17);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 80))(v2, v5);
    return sub_10001B8AC(&v17);
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string __p = 138412546;
    *(void *)&__p[4] = Connection;
    __int16 v19 = 2112;
    __int16 v20 = Endpoint;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "[iAP CONNECTED] CONNUUID: %@ and ENDPOINTUUID: %@", __p, 0x16u);
  }
  CFNumberRef v11 = CFNumberCreate(kCFAllocatorDefault, kCFNumberSInt16Type, v3);
  CFDictionarySetValue(*(CFMutableDictionaryRef *)(v2 + 520), Connection, v11);
  CFRelease(v11);
  uint64_t v12 = objc_opt_new();
  [v12 setConnectionUUID:Connection];

  [v12 setEndpointUUID:Endpoint];
  int v13 = *(void **)(v2 + 528);
  __int16 v14 = +[NSNumber numberWithUnsignedShort:*v3];
  [v13 setObject:v12 forKey:v14];

  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_100632064;
  void v16[3] = &unk_100997528;
  _OWORD v16[4] = v2;
  if (qword_100A13AC8 != -1) {
    dispatch_once(&qword_100A13AC8, v16);
  }

  return sub_10001B8AC(&v17);
}

void sub_100631F84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  sub_10001B8AC(&a23);
  _Unwind_Resume(a1);
}

uint64_t sub_100631FFC(uint64_t a1, int a2, int a3, CFDataRef theData)
{
  unint64_t v5 = *(void *)(a1 + 40);
  uint64_t v6 = *(void *)(a1 + 32) + 256;
  BytePtr = CFDataGetBytePtr(theData);
  int Length = CFDataGetLength(theData);

  return sub_10034051C(v6, v5, (uint64_t)BytePtr, Length, 1);
}

uint64_t sub_100632064()
{
  return acc_transportClient_setEndpointPropertiesDidChangeHandler();
}

void sub_1006320E8(id a1, __CFString *a2, BOOL a3)
{
  BOOL v3 = a3;
  unint64_t v5 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 138412290;
    CFStringRef v7 = a2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "acc_transportClient_setConnectionAuthStatusDidChangeHandler - connUID:%@", (uint8_t *)&v6, 0xCu);
  }
  if (qword_1009FBE40 != -1) {
    dispatch_once(&qword_1009FBE40, &stru_1009BC548);
  }
  sub_1006321D4(off_1009FBE38, (uint64_t)a2, v3);
}

void sub_1006321D4(void *a1, uint64_t a2, uint64_t a3)
{
  int v6 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    int v14 = 138412290;
    uint64_t v15 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "authStatusDidChange - connUUID: %@", (uint8_t *)&v14, 0xCu);
  }
  uint64_t v7 = sub_100632D84((uint64_t)a1, a2);
  uint64_t v8 = sub_1004BE238(a1, v7);
  if (v8)
  {
    uint64_t v9 = (void *)a1[66];
    int v10 = +[NSNumber numberWithUnsignedShort:v7];
    CFNumberRef v11 = [v9 objectForKeyedSubscript:v10];

    uint64_t v12 = [v11 endpointUUID];
    CFDictionaryRef v13 = (const __CFDictionary *)acc_transportClient_copyPropertiesForEndpointWithUUID();

    if (v13)
    {
      LOBYTE(v14) = 0;
      if (sub_100632EC0(v13, &v14))
      {
        if (qword_1009FB7C8 != -1) {
          dispatch_once(&qword_1009FB7C8, &stru_1009BC568);
        }
        (*(void (**)(void *, uint64_t, uint64_t, void))(*(void *)off_1009FB7C0 + 240))(off_1009FB7C0, v8, a3, v14);
      }
      CFRelease(v13);
    }
  }
}

void sub_100632388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006323BC(uint64_t a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5)
{
  if (sub_100632484(*(void *)(a1 + 32), a2))
  {
    if (qword_1009FBE40 != -1) {
      dispatch_once(&qword_1009FBE40, &stru_1009BC548);
    }
    int v10 = off_1009FBE38;
    sub_100632540(v10, v9, a3, a4, a5);
  }
  else
  {
    CFNumberRef v11 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100788674(a2, v11);
    }
  }
}

uint64_t sub_100632484(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = &v6;
  uint64_t v8 = 0x2020000000;
  __int16 v9 = 0;
  if (a2)
  {
    uint64_t v2 = *(NSObject **)(a1 + 512);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100633000;
    block[3] = &unk_100998860;
    void block[5] = a1;
    void block[6] = a2;
    void block[4] = &v6;
    dispatch_sync(v2, block);
    uint64_t v3 = *((unsigned __int16 *)v7 + 12);
  }
  else
  {
    uint64_t v3 = 0;
  }
  _Block_object_dispose(&v6, 8);
  return v3;
}

uint64_t sub_100632540(void *a1, uint64_t a2, const __CFDictionary *a3, const __CFDictionary *a4, uint64_t a5)
{
  int v8 = sub_100632D84((uint64_t)a1, a5);
  uint64_t result = sub_1004BE238(a1, v8);
  if (a3)
  {
    uint64_t v10 = result;
    if (result)
    {
      uint64_t result = acc_transportClient_isConnectionAuthenticated();
      if (result)
      {
        uint64_t result = (uint64_t)sub_100632EC0(a4, 0);
        if ((result & 1) == 0)
        {
          unsigned __int8 v11 = 0;
          uint64_t result = (uint64_t)sub_100632EC0(a3, &v11);
          if (result)
          {
            if (qword_1009FB7C8 != -1) {
              dispatch_once(&qword_1009FB7C8, &stru_1009BC568);
            }
            return (*(uint64_t (**)(void *, uint64_t, uint64_t, void))(*(void *)off_1009FB7C0 + 240))(off_1009FB7C0, v10, 1, v11);
          }
        }
      }
    }
  }
  return result;
}

void sub_10063262C(void *a1, int a2)
{
  __int16 v2 = a2;
  int v4 = (unsigned __int8 *)sub_1004BE238(a1, a2);
  sub_1004BE538((uint64_t)a1, (uint64_t)v4, 0);
  if (v4)
  {
    uint64_t v10 = 0;
    int v9 = 0;
    int v8 = 0;
    sub_10047B7A8((uint64_t)v4, (_DWORD *)&v10 + 1, &v10, &v9, &v8);
    if (v10 == 7563 && (v9 & 0xFFFFFFFD) == 0xC008)
    {
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BC528);
      }
      sub_1004FAE28((uint64_t)off_1009F8150, 0, ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133]);
    }
  }
  sub_100340190((uint64_t)(a1 + 32), (uint64_t)v4);
  unint64_t v5 = a1[64];
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100632798;
  v6[3] = &unk_1009A0B58;
  void v6[4] = a1;
  __int16 v7 = v2;
  dispatch_async(v5, v6);
}

void sub_100632798(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 528);
  int v4 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 40)];
  unint64_t v5 = [v3 objectForKeyedSubscript:v4];

  uint64_t v6 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v7 = [v5 connectionUUID];
    int v13 = 138412290;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "[iAP DISCONNECTED] connectionUUID: %@", (uint8_t *)&v13, 0xCu);
  }
  if (v5)
  {
    int v8 = [v5 connectionUUID];
    acc_transportClient_destroyConnection();

    int v9 = *(__CFDictionary **)(v2 + 520);
    uint64_t v10 = [v5 connectionUUID];
    CFDictionaryRemoveValue(v9, v10);

    unsigned __int8 v11 = *(void **)(v2 + 528);
    uint64_t v12 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 40)];
    [v11 removeObjectForKey:v12];
  }
}

void sub_100632904(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100632950(void *a1, int a2, const UInt8 *a3, unsigned int a4)
{
  __int16 v6 = a2;
  if (sub_1004BE238(a1, a2))
  {
    CFDataRef v8 = CFDataCreate(kCFAllocatorDefault, a3, a4);
    int v9 = a1[64];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100632A34;
    block[3] = &unk_1009988A0;
    __int16 v11 = v6;
    void block[4] = a1;
    void block[5] = v8;
    dispatch_async(v9, block);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_1007886EC();
  }
}

void sub_100632A34(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 528);
  uint64_t v3 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 48)];
  int v4 = [v2 objectForKeyedSubscript:v3];

  unint64_t v5 = [v4 endpointUUID];
  char v6 = acc_transportClient_processIncomingData();

  __int16 v7 = *(const void **)(a1 + 40);
  if (v7) {
    CFRelease(v7);
  }
  if ((v6 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100788720();
  }
}

void sub_100632AF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100632B20(void *a1, int a2)
{
  unint64_t v3 = sub_1004BE238(a1, a2);
  if (v3)
  {
    sub_100340738((uint64_t)(a1 + 32), v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100788754();
  }
}

BOOL sub_100632B94(void *a1, unint64_t a2, char *a3, int a4)
{
  CFDataRef v8 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    v12[0] = 67109120;
    v12[1] = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "Sending %d bytes of WiAP data to stack", (uint8_t *)v12, 8u);
  }
  unsigned int v9 = sub_1004BE120(a1, a2);
  LOBYTE(v12[0]) = 0;
  sub_10001B8E0(v12);
  int v10 = sub_1002460BC((uint64_t)sub_100632CE8, v9, a3, (unsigned __int16)a4);
  if (v10 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100788788();
  }
  sub_10001B8AC(v12);
  return v10 == 0;
}

void sub_100632CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_100632CE8(int a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_1007887F0();
  }
  if (qword_1009FBE40 != -1) {
    dispatch_once(&qword_1009FBE40, &stru_1009BC548);
  }
  sub_100632B20(off_1009FBE38, a1);
}

BOOL sub_100632D7C(uint64_t a1, unint64_t a2, char *a3, int a4)
{
  return sub_100632B94((void *)(a1 - 256), a2, a3, a4);
}

uint64_t sub_100632D84(uint64_t a1, uint64_t a2)
{
  int v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 138412290;
    *(void *)((char *)&buf + 4) = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "getLinkForConnectionUUID - connectionUUID: %@", (uint8_t *)&buf, 0xCu);
  }
  *(void *)&long long buf = 0;
  *((void *)&buf + 1) = &buf;
  uint64_t v9 = 0x2020000000;
  __int16 v10 = 0;
  if (a2)
  {
    unint64_t v5 = *(NSObject **)(a1 + 512);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100632F28;
    block[3] = &unk_100998860;
    void block[5] = a1;
    void block[6] = a2;
    void block[4] = &buf;
    dispatch_sync(v5, block);
    a2 = *(unsigned __int16 *)(*((void *)&buf + 1) + 24);
  }
  _Block_object_dispose(&buf, 8);
  return a2;
}

CFDictionaryRef sub_100632EC0(const __CFDictionary *result, unsigned char *a2)
{
  if (result)
  {
    uint64_t result = (const __CFDictionary *)CFDictionaryGetValue(result, kCFACCProperties_Endpoint_Bluetooth_HIDFunction);
    int valuePtr = 0;
    if (result)
    {
      uint64_t result = (const __CFDictionary *)CFNumberGetValue(result, kCFNumberIntType, &valuePtr);
      if (result)
      {
        if (a2) {
          *a2 = valuePtr;
        }
        return (const __CFDictionary *)1;
      }
    }
  }
  return result;
}

void sub_100632F28(uint64_t a1)
{
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(*(CFDictionaryRef *)(*(void *)(a1 + 40) + 520), *(const void **)(a1 + 48));
  unint64_t v3 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 138412290;
    CFNumberRef v5 = Value;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "getLinkForConnectionUUID - linkCF: %@", (uint8_t *)&v4, 0xCu);
  }
  if (Value) {
    CFNumberGetValue(Value, kCFNumberSInt16Type, (void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
  }
}

void sub_100633000(void *a1)
{
  uint64_t v2 = a1[5];
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = *(id *)(v2 + 528);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        CFNumberRef v7 = *(const __CFNumber **)(*((void *)&v11 + 1) + 8 * i);
        CFDataRef v8 = [(id)[*(id *)(v2 + 528) objectForKeyedSubscript:v7] v11];
        CFStringRef v9 = (const __CFString *)a1[6];
        __int16 v10 = [v8 endpointUUID];
        LODWORD(v9) = CFEqual(v9, v10);

        if (v9) {
          CFNumberGetValue(v7, kCFNumberSInt16Type, (void *)(*(void *)(a1[4] + 8) + 24));
        }
      }
      id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }
}

void sub_100633160(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10063319C()
{
  return 5;
}

void sub_1006331A4(int a1)
{
  if (qword_1009FBE40 != -1) {
    dispatch_once(&qword_1009FBE40, &stru_1009BC548);
  }
  uint64_t v2 = off_1009FBE38;

  sub_10063262C(v2, a1);
}

void sub_100633210(int a1, const UInt8 *a2, unsigned int a3)
{
  if (qword_1009FBE40 != -1) {
    dispatch_once(&qword_1009FBE40, &stru_1009BC548);
  }
  char v6 = off_1009FBE38;

  sub_100632950(v6, a1, a2, a3);
}

void sub_10063328C(id a1)
{
}

void sub_1006332D0()
{
}

void sub_1006332F4(id a1)
{
}

void sub_100633338()
{
}

void sub_10063335C(id a1)
{
}

void sub_1006334EC()
{
}

void sub_100633510(id a1)
{
}

void sub_100633554()
{
}

void sub_100633578(id a1)
{
}

void sub_1006335BC()
{
}

uint64_t sub_1006335E0(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "WiAPSinkService", 0x20000) = &off_1009BC598;
  if (qword_1009FBE50 != -1) {
    dispatch_once(&qword_1009FBE50, &stru_1009BC6C8);
  }
  sub_1004C9E90(a1, (uint64_t)off_1009FBE48);
  return a1;
}

void sub_100633668(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

void sub_100633684(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

uint64_t sub_1006336C4()
{
  if (qword_1009FBE50 != -1) {
    dispatch_once(&qword_1009FBE50, &stru_1009BC6C8);
  }
  uint64_t v0 = *(uint64_t (**)(void))(*((void *)off_1009FBE48 + 32) + 16);

  return v0();
}

void sub_10063374C(uint64_t a1, uint64_t a2)
{
  long long v20 = unk_1009BC698;
  long long v21 = unk_1009BC688;
  std::string __p = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  if (!sub_10047B300(a2))
  {
    int v7 = 0;
    goto LABEL_22;
  }
  BOOL v4 = sub_100478F30(a2, &v21, 4u);
  BOOL v5 = sub_100478F30(a2, &v20, 4u);
  int v6 = v5;
  if (!v4 && !v5)
  {
    int v7 = 1;
    goto LABEL_22;
  }
  if (v4)
  {
    if (sub_10047AE08(a2, (uint64_t)&v21, 0x301u, &__p)) {
      goto LABEL_11;
    }
  }
  else if (v5)
  {
    int v6 = sub_10047AE08(a2, (uint64_t)&v20, 0x301u, &__p);
  }
  if (!v6) {
    goto LABEL_21;
  }
LABEL_11:
  CFDataRef v8 = (char *)__p;
  if (__p == v18) {
    goto LABEL_21;
  }
  while (1)
  {
    if (*v8 != 1)
    {
      __int16 v10 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100788858(&v15, v16, v10);
      }
      goto LABEL_18;
    }
    if (*((_WORD *)v8 + 1) == 4) {
      break;
    }
    CFStringRef v9 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100788858(&buf, v14, v9);
    }
LABEL_18:
    v8 += 16;
    if (v8 == v18) {
      goto LABEL_21;
    }
  }
  sub_1004814CC(a2, *((_DWORD *)v8 + 2));
LABEL_21:
  int v7 = 4;
LABEL_22:
  unsigned int v11 = *(_DWORD *)(a1 + 32);
  uint64_t v22 = 0;
  sub_100026C30((uint64_t)&v22);
  *(void *)&long long v12 = (int)v22;
  *((void *)&v12 + 1) = SWORD2(v22);
  sub_100477F4C(a2, v11, v7, &v12, 0);
  if (__p)
  {
    unint64_t v18 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100633940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100633968(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  char v13 = 0;
  int v12 = 0;
  long long v17 = xmmword_1007BACD0;
  memset(v18, 0, sizeof(v18));
  long long v10 = unk_1009BC6B8;
  long long v11 = unk_1009BC6A8;
  long long v15 = xmmword_1007C00E0;
  long long v16 = xmmword_1007BACE0;
  long long v14 = xmmword_1007C00F0;
  *a3 = 0;
  if (sub_10048A2B0(a2, v18, &v13)
    && v13
    && ((uint64_t result = sub_10018BF80((unsigned __int8 *)v18, (uint64_t)&v17, &v12, v5), !result)
     || (uint64_t result = sub_10018BF80((unsigned __int8 *)v18, (uint64_t)&v16, &v12, v7), !result)
     || (uint64_t result = sub_10018BF80((unsigned __int8 *)v18, (uint64_t)&v15, &v12, v8), !result)
     || (uint64_t result = sub_10018BF80((unsigned __int8 *)v18, (uint64_t)&v14, &v12, v9), !result))
    || (uint64_t result = sub_10047B300(a2), result)
    && ((uint64_t result = sub_100478F30(a2, &v11, 4u), (result & 1) != 0)
     || (uint64_t result = sub_100478F30(a2, &v10, 4u), result)))
  {
    *a3 = 1;
  }
  return result;
}

void sub_100633AF4(id a1)
{
}

void sub_100633B38()
{
}

uint64_t sub_100633B5C(uint64_t a1)
{
  *(void *)sub_1004C9B7C(a1, "WiAPService", 128) = &off_1009BC6F8;
  if (qword_1009FBE40 != -1) {
    dispatch_once(&qword_1009FBE40, &stru_1009BC808);
  }
  sub_1004C9E90(a1, (uint64_t)off_1009FBE38);
  return a1;
}

void sub_100633BE4(_Unwind_Exception *a1)
{
  sub_1004C9C80(v1);
  _Unwind_Resume(a1);
}

void sub_100633C00(uint64_t a1)
{
  sub_1004C9C80(a1);

  operator delete();
}

uint64_t sub_100633C40()
{
  if (qword_1009FBE40 != -1) {
    dispatch_once(&qword_1009FBE40, &stru_1009BC808);
  }
  uint64_t v0 = *(uint64_t (**)(void))(*((void *)off_1009FBE38 + 32) + 16);

  return v0();
}

void sub_100633CC8(uint64_t a1, uint64_t a2)
{
  long long v20 = unk_1009BC7F8;
  long long v21 = unk_1009BC7E8;
  std::string __p = 0;
  unint64_t v18 = 0;
  uint64_t v19 = 0;
  if (!sub_10047B300(a2))
  {
    int v7 = 0;
    goto LABEL_22;
  }
  BOOL v4 = sub_100478F30(a2, &v21, 4u);
  BOOL v5 = sub_100478F30(a2, &v20, 4u);
  int v6 = v5;
  if (!v4 && !v5)
  {
    sub_1004825F0(a2, 0);
    int v7 = 1;
    goto LABEL_22;
  }
  if (v4)
  {
    sub_1004825F0(a2, 1u);
    if (sub_10047AE08(a2, (uint64_t)&v21, 0x301u, &__p)) {
      goto LABEL_11;
    }
  }
  else if (v5)
  {
    sub_1004825F0(a2, 2u);
    int v6 = sub_10047AE08(a2, (uint64_t)&v20, 0x301u, &__p);
  }
  if (!v6) {
    goto LABEL_21;
  }
LABEL_11:
  uint8x8_t v8 = (char *)__p;
  if (__p == v18) {
    goto LABEL_21;
  }
  while (1)
  {
    if (*v8 != 1)
    {
      long long v10 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100788858(&v15, v16, v10);
      }
      goto LABEL_18;
    }
    if (*((_WORD *)v8 + 1) == 4) {
      break;
    }
    uint8x8_t v9 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100788858(&buf, v14, v9);
    }
LABEL_18:
    v8 += 16;
    if (v8 == v18) {
      goto LABEL_21;
    }
  }
  sub_1004814CC(a2, *((_DWORD *)v8 + 2));
LABEL_21:
  int v7 = 4;
LABEL_22:
  unsigned int v11 = *(_DWORD *)(a1 + 32);
  uint64_t v22 = 0;
  sub_100026C30((uint64_t)&v22);
  *(void *)&long long v12 = (int)v22;
  *((void *)&v12 + 1) = SWORD2(v22);
  sub_100477F4C(a2, v11, v7, &v12, 0);
  if (__p)
  {
    unint64_t v18 = (char *)__p;
    operator delete(__p);
  }
}

void sub_100633EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100633F08(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  char v13 = 0;
  int v12 = 0;
  long long v17 = xmmword_1007BACD0;
  memset(v18, 0, sizeof(v18));
  long long v10 = unk_1009BC7F8;
  long long v11 = unk_1009BC7E8;
  long long v15 = xmmword_1007C0100;
  long long v16 = xmmword_1007BACE0;
  long long v14 = xmmword_1007C00F0;
  *a3 = 0;
  if (sub_10048A2B0(a2, v18, &v13)
    && v13
    && ((uint64_t result = sub_10018BF80((unsigned __int8 *)v18, (uint64_t)&v17, &v12, v5), !result)
     || (uint64_t result = sub_10018BF80((unsigned __int8 *)v18, (uint64_t)&v16, &v12, v7), !result)
     || (uint64_t result = sub_10018BF80((unsigned __int8 *)v18, (uint64_t)&v15, &v12, v8), !result)
     || (uint64_t result = sub_10018BF80((unsigned __int8 *)v18, (uint64_t)&v14, &v12, v9), !result))
    || (uint64_t result = sub_10047B300(a2), result)
    && ((uint64_t result = sub_100478F30(a2, &v11, 4u), (result & 1) != 0)
     || (uint64_t result = sub_100478F30(a2, &v10, 4u), result)))
  {
    *a3 = 1;
  }
  return result;
}

void sub_100634094(id a1)
{
}

void sub_1006340D8()
{
}

uint64_t sub_1006340FC(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4)
{
  uint8x8_t v8 = (void *)sub_1002E6D1C(a1, 1952539500);
  *uint8x8_t v8 = &off_1009BC838;
  sub_1004451D8((uint64_t)(v8 + 50), a2, a3);
  *(void *)(a1 + 776) = a4;
  *(unsigned char *)(a1 + 784) = 0;
  return a1;
}

void sub_100634174(_Unwind_Exception *a1)
{
  sub_1002E6E4C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10063418C(void *a1)
{
  *a1 = &off_1009BC838;
  sub_100445244((uint64_t)(a1 + 50));

  return sub_1002E6E4C((uint64_t)a1);
}

void sub_1006341E4(void *a1)
{
  *a1 = &off_1009BC838;
  sub_100445244((uint64_t)(a1 + 50));
  sub_1002E6E4C((uint64_t)a1);

  operator delete();
}

uint64_t sub_100634250(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 600);
}

void sub_100634258(uint64_t a1, char *__s1, const __CFBoolean *a3)
{
  if (!strcmp(__s1, "kBTAudioMsgPropertyGameOn"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 48);
    goto LABEL_43;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyExpanseOn"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 56);
    goto LABEL_43;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyVoiceOverOn"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 64);
    goto LABEL_43;
  }
  if (!strcmp(__s1, "kBTAudioMsgPropertyDynamicLatencyAudioAndInputAggregationOn"))
  {
    CFBooleanGetValue(a3);
    int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 112);
    goto LABEL_43;
  }
  if (strcmp(__s1, "kBTAudioMsgPropertyWSModeEnabled"))
  {
    if (!strcmp(__s1, "kBTAudioMsgPropertyEnableSoftwareVolume"))
    {
      CFBooleanGetValue(a3);
      int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 120);
    }
    else if (!strcmp(__s1, "kBTAudioMsgPropertyPMEOnBuds"))
    {
      CFBooleanGetValue(a3);
      int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 128);
    }
    else
    {
      if (!strcmp(__s1, "kBTAudioMsgPropertySpatialOn"))
      {
        LODWORD(valuePtr) = 0;
        CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
        if (valuePtr)
        {
          (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 776) + 80))(*(void *)(a1 + 776), a1, 1);
        }
        else
        {
          uint64_t v8 = **(void **)(a1 + 776);
          if ((valuePtr & 2) != 0)
          {
            (*(void (**)(void))(v8 + 72))();
          }
          else
          {
            (*(void (**)(void))(v8 + 80))();
            (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 776) + 72))(*(void *)(a1 + 776), a1, 0);
          }
        }
        return;
      }
      if (strcmp(__s1, "kBTAudioMsgPropertySpatialAudioActive"))
      {
        if (!strcmp(__s1, "kBTAudioMsgPropertySpatialAudioAppBasedMode"))
        {
          xpc_object_t value = 0;
          int valuePtr = 0;
          CFBooleanRef BOOLean = 0;
          LODWORD(number) = 0;
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertySpatialBundleID", (const void **)&valuePtr)) {
            id v9 = [valuePtr copy];
          }
          else {
            id v9 = 0;
          }
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertySpatialMode", (const void **)&value)) {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &number);
          }
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyHeadTrack", (const void **)&BOOLean))
          {
            if (CFBooleanGetValue(BOOLean)) {
              uint64_t v12 = 0xFFFFFFFFLL;
            }
            else {
              uint64_t v12 = 0;
            }
          }
          else
          {
            uint64_t v12 = 0xFFFFFFFFLL;
          }
          (*(void (**)(void, uint64_t, id, void, uint64_t))(**(void **)(a1 + 776) + 160))(*(void *)(a1 + 776), a1, v9, number, v12);
        }
        else if (!strcmp(__s1, "kBTAudioMsgPropertyAdaptiveVolumeRampEnd"))
        {
          CFBooleanRef BOOLean = 0;
          xpc_object_t value = 0;
          CFNumberRef number = 0;
          LODWORD(v18) = 0;
          unsigned int v19 = 0;
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyAdaptiveVolumeCurrentVolume", (const void **)&value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, &v18);
          }
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyAdaptiveVolumeAudioCategory", (const void **)&BOOLean))
          {
            id v10 = [(__CFBoolean *)BOOLean copy];
          }
          else
          {
            id v10 = 0;
          }
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyAdaptiveVolumeRampEndReason", (const void **)&number))
          {
            CFNumberGetValue(number, kCFNumberSInt32Type, &v19);
            uint64_t v13 = v19;
          }
          else
          {
            uint64_t v13 = 0;
          }
          long long v14 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(valuePtr) = 67109634;
            HIDWORD(valuePtr) = v18;
            __int16 v24 = 2112;
            id v25 = v10;
            __int16 v26 = 1024;
            int v27 = v13;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Adaptive Volume: Volume ramp ended with currentVolume: %d audioCategory %@ rampEndReason %d", (uint8_t *)&valuePtr, 0x18u);
            uint64_t v13 = v19;
          }
          (*(void (**)(void, uint64_t, void, id, uint64_t))(**(void **)(a1 + 776) + 96))(*(void *)(a1 + 776), a1, v18, v10, v13);
        }
        else if (!strcmp(__s1, "kBTAudioMsgPropertyManualVolumeUpdate"))
        {
          CFBooleanRef BOOLean = 0;
          xpc_object_t value = 0;
          CFNumberRef number = 0;
          uint64_t v17 = 0;
          CFNumberRef v18 = 0;
          unsigned int v19 = 0;
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyManualVolumeUpdateNewVolume", (const void **)&number))
          {
            CFNumberGetValue(number, kCFNumberSInt32Type, &v19);
          }
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyManualVolumeUpdateCurrentVolume", (const void **)&value))
          {
            CFNumberGetValue((CFNumberRef)value, kCFNumberSInt32Type, (char *)&v17 + 4);
          }
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyManualVolumeUpdateCurrentAudioCategory", (const void **)&BOOLean))
          {
            id v11 = [(__CFBoolean *)BOOLean copy];
          }
          else
          {
            id v11 = 0;
          }
          if (CFDictionaryGetValueIfPresent(a3, @"kBTAudioMsgPropertyManualVolumeUpdateRampInProgress", (const void **)&v18))
          {
            CFNumberGetValue(v18, kCFNumberSInt32Type, &v17);
            int v15 = v17;
          }
          else
          {
            int v15 = 0;
          }
          long long v16 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(valuePtr) = 67109890;
            HIDWORD(valuePtr) = BYTE4(v17);
            __int16 v24 = 2112;
            id v25 = v11;
            __int16 v26 = 1024;
            int v27 = v19;
            __int16 v28 = 1024;
            int v29 = v15;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Manual Volume update received currentVolume: %d audioCategory %@ newVolume %d isRampInProgress %d", (uint8_t *)&valuePtr, 0x1Eu);
            int v15 = v17;
          }
          (*(void (**)(void, uint64_t, void, id, void, BOOL))(**(void **)(a1 + 776) + 88))(*(void *)(a1 + 776), a1, HIDWORD(v17), v11, v19, v15 != 0);
        }
        else if (!strcmp(__s1, "kBTAudioMsgPropertyFrameCount"))
        {
          LODWORD(valuePtr) = 0;
          CFNumberGetValue(a3, kCFNumberSInt32Type, &valuePtr);
          (*(void (**)(void, uint64_t, void))(**(void **)(a1 + 776) + 176))(*(void *)(a1 + 776), a1, valuePtr);
        }
        else
        {
          sub_1002E93B0((uint64_t *)a1, __s1, a3);
        }
        return;
      }
      CFBooleanGetValue(a3);
      int v6 = *(void (**)(void))(**(void **)(a1 + 776) + 168);
    }
LABEL_43:
    v6();
    return;
  }
  CFBooleanGetValue(a3);
  uint8x8_t v7 = *(void (**)(void))(**(void **)(a1 + 776) + 104);

  v7();
}

void sub_100634CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100634CDC(uint64_t a1)
{
  uint64_t result = (***(uint64_t (****)(void, uint64_t))(a1 + 776))(*(void *)(a1 + 776), a1);
  *(unsigned char *)(a1 + 784) = 1;
  return result;
}

uint64_t sub_100634D34(uint64_t a1)
{
  *(unsigned char *)(a1 + 784) = 0;
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 24))(*(void *)(a1 + 776), a1);
}

uint64_t sub_100634D64(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 40))(*(void *)(a1 + 776), a1);
}

uint64_t sub_100634D90(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 32))(*(void *)(a1 + 776), a1);
}

uint64_t sub_100634DBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 784);
}

uint64_t sub_100634DC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 776) + 144))(*(void *)(a1 + 776), a1, a2);
}

uint64_t sub_100634DF4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 152))(*(void *)(a1 + 776), a1);
}

uint64_t sub_100634E20(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 776) + 184))(*(void *)(a1 + 776), a1);
}

void sub_100634E4C(uint64_t a1, int a2)
{
}

void sub_100634E5C(uint64_t a1, int a2)
{
}

void sub_100634E6C(uint64_t a1, int a2)
{
}

void sub_100634E7C(uint64_t a1, int a2)
{
}

void sub_100634E8C(uint64_t a1, int a2)
{
}

void sub_100634E9C(uint64_t a1, int a2)
{
}

void sub_100634EAC(uint64_t a1, int a2)
{
}

void sub_100634EBC(uint64_t a1, int a2)
{
}

void sub_100634ECC(uint64_t a1, int a2)
{
}

void sub_100634EDC(uint64_t a1, int a2)
{
}

void sub_100634EEC(uint64_t a1, int a2, float a3)
{
  float valuePtr = a3;
  int v7 = a2;
  *(_OWORD *)keys = *(_OWORD *)off_1009BC948;
  CFNumberRef v4 = CFNumberCreate(kCFAllocatorDefault, kCFNumberFloat32Type, &valuePtr);
  CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &v7);
  values[0] = v4;
  values[1] = v5;
  CFDictionaryRef v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 2, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  sub_1002E87D0(a1, "kBTAudioMsgPropertySamplingSpeedParams", v6);
  CFRelease(v4);
  CFRelease(v5);
  CFRelease(v6);
}

void sub_100634FEC(uint64_t a1, int a2)
{
}

uint64_t sub_100634FFC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 776) + 136))(*(void *)(a1 + 776), a1, a2);
}

void sub_10063502C(uint64_t a1, int a2)
{
}

void sub_10063503C(uint64_t a1, double a2)
{
}

void sub_100635048(uint64_t a1, int a2)
{
}

void sub_100635058(uint64_t a1, int a2)
{
}

void sub_100635068(uint64_t a1, int a2)
{
}

void sub_100635078(uint64_t a1, int a2)
{
}

unint64_t sub_100635088(uint64_t a1)
{
  return (unint64_t)*(double *)(a1 + 680);
}

void sub_100635094(uint64_t a1, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  sub_1002E87D0(a1, "kBTAudioMsgPropertySpatialPerAppModeMap", MutableCopy);

  CFRelease(MutableCopy);
}

void sub_1006350F8(uint64_t a1, CFDictionaryRef theDict)
{
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  sub_1002E87D0(a1, "kBTAudioMsgPropertyAdaptiveVolumeMap", MutableCopy);

  CFRelease(MutableCopy);
}

void sub_10063515C(uint64_t a1, int a2)
{
}

uint64_t sub_10063516C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v8 = *(unsigned __int8 *)(a1 + 652);
  unsigned int v6 = *(unsigned __int8 *)(a1 + 660);
  uint64_t v7 = sub_100445940(a1 + 400);
  LODWORD(v8) = vcvtps_s32_f32((float)a3 / (float)(int)v8);
  if (*(unsigned char *)(a1 + 396)
    && (id v9 = qword_100A19E48, os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEBUG)))
  {
    int v12 = 134218496;
    unint64_t v13 = a3;
    __int16 v14 = 1024;
    int v15 = v8;
    __int16 v16 = 1024;
    unsigned int v17 = v6;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "A2DPAudioDevice readHandler called on data of size %lu (%d frames) with maxFrame count of %d", (uint8_t *)&v12, 0x18u);
    if (v7) {
      goto LABEL_4;
    }
  }
  else if (v7)
  {
LABEL_4:
    uint64_t v8 = 0;
    return (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(void **)(a1 + 776) + 16))(*(void *)(a1 + 776), a1, a2, a3, v8, v7);
  }
  if (v6 < v8)
  {
    id v10 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_FAULT)) {
      sub_100788898(v8, v6, v10);
    }
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, unint64_t, uint64_t, uint64_t))(**(void **)(a1 + 776)
                                                                                                 + 16))(*(void *)(a1 + 776), a1, a2, a3, v8, v7);
}

uint64_t sub_1006352F4()
{
  return 1;
}

uint64_t sub_100635300(uint64_t a1)
{
  *(_OWORD *)(a1 + 68) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 8) = 0u;
  *(void *)a1 = off_1009A5288;
  sub_100052DA8(a1 + 8);
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)a1 = off_1009BC968;
  *(void *)(a1 + 88) = a1 + 96;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = a1 + 168;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = a1 + 216;
  *(void *)(a1 + 240) = 0;
  *(void *)(a1 + 248) = 0;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 232) = a1 + 240;
  *(_DWORD *)(a1 + 80) = 2;
  return a1;
}

uint64_t sub_1006353E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  sub_10030BA54(a2, (const void ***)(a1 + 88));
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100635430(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100635444@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  sub_10030BA54(a2, (const void ***)(a1 + 112));
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100635494(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006354A8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  sub_10030BA54(a2, (const void ***)(a1 + 136));
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1006354F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10063550C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  sub_100636518(a2, a1 + 160);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10063555C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100635570@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  sub_100636850(a2, (const void ***)(a1 + 184));
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1006355C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1006355D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  sub_100636A78(a2, a1 + 208);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100635624(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100635638(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 8);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 256);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100635680@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1 + 8);
  sub_100636AD0(a2, (const void ***)(a1 + 232));
  return sub_10003AFB4((uint64_t)v5);
}

void sub_1006356D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1006356E4(uint64_t a1, void *a2)
{
  id v34 = a2;
  v39[0] = 0;
  v39[1] = 0;
  sub_10003AED0((uint64_t)v39, a1 + 8);
  objc_storeStrong((id *)(a1 + 72), a2);
  CFNumberRef v4 = [*(id *)(a1 + 72) getLocalFileUrl];
  CFNumberRef v5 = +[NSURL URLWithString:@"MobileBluetoothConfig.plist" relativeToURL:v4];

  id v38 = 0;
  unsigned int v6 = +[NSDictionary dictionaryWithContentsOfURL:v5 error:&v38];
  id v33 = v38;
  int v32 = [v6 valueForKey:@"denylistedAVRCPSubstrings"];
  sub_100635B98(v32, (uint64_t)&v35);
  uint64_t v7 = a1 + 120;
  sub_10004BA28(a1 + 112, *(char **)(a1 + 120));
  uint64_t v8 = v36;
  *(void *)(a1 + 112) = v35;
  *(void *)(a1 + 120) = v8;
  id v9 = v37;
  *(void *)(a1 + 128) = v37;
  if (v9)
  {
    *((void *)v8 + 2) = v7;
    int v35 = (char *)&v36;
    int v36 = 0;
    long long v37 = 0;
    uint64_t v8 = 0;
  }
  else
  {
    *(void *)(a1 + 112) = v7;
  }
  sub_10004BA28((uint64_t)&v35, v8);
  id v10 = [v6 valueForKey:@"denylistedCATTSubstrings"];
  sub_100635B98(v10, (uint64_t)&v35);
  uint64_t v11 = a1 + 144;
  sub_10004BA28(a1 + 136, *(char **)(a1 + 144));
  int v12 = v36;
  *(void *)(a1 + 136) = v35;
  *(void *)(a1 + 144) = v12;
  unint64_t v13 = v37;
  *(void *)(a1 + 152) = v37;
  if (v13)
  {
    *((void *)v12 + 2) = v11;
    int v35 = (char *)&v36;
    int v36 = 0;
    long long v37 = 0;
    int v12 = 0;
  }
  else
  {
    *(void *)(a1 + 136) = v11;
  }
  sub_10004BA28((uint64_t)&v35, v12);
  __int16 v14 = [v6 valueForKey:@"denylistedPBAPSubstrings"];
  sub_100635B98(v14, (uint64_t)&v35);
  uint64_t v15 = a1 + 96;
  sub_10004BA28(a1 + 88, *(char **)(a1 + 96));
  __int16 v16 = v36;
  *(void *)(a1 + 88) = v35;
  *(void *)(a1 + 96) = v16;
  unsigned int v17 = v37;
  *(void *)(a1 + 104) = v37;
  if (v17)
  {
    *((void *)v16 + 2) = v15;
    int v35 = (char *)&v36;
    int v36 = 0;
    long long v37 = 0;
    __int16 v16 = 0;
  }
  else
  {
    *(void *)(a1 + 88) = v15;
  }
  sub_10004BA28((uint64_t)&v35, v16);
  CFNumberRef v18 = [v6 valueForKey:@"triesteDenylistedAutomationDongles"];
  sub_100635D18(v18, (uint64_t)&v35);
  uint64_t v19 = a1 + 192;
  sub_10004BA28(a1 + 184, *(char **)(a1 + 192));
  long long v20 = v36;
  *(void *)(a1 + 184) = v35;
  *(void *)(a1 + 192) = v20;
  long long v21 = v37;
  *(void *)(a1 + 200) = v37;
  if (v21)
  {
    *((void *)v20 + 2) = v19;
    int v35 = (char *)&v36;
    int v36 = 0;
    long long v37 = 0;
    long long v20 = 0;
  }
  else
  {
    *(void *)(a1 + 184) = v19;
  }
  sub_10004BA28((uint64_t)&v35, v20);
  uint64_t v22 = [v6 valueForKey:@"maxFindMyLEConnections"];
  sub_100635EAC(v22, (uint64_t *)&v35);
  uint64_t v23 = a1 + 216;
  sub_1000486F0(a1 + 208, *(void **)(a1 + 216));
  __int16 v24 = v36;
  *(void *)(a1 + 208) = v35;
  *(void *)(a1 + 216) = v24;
  id v25 = v37;
  *(void *)(a1 + 224) = v37;
  if (v25)
  {
    *((void *)v24 + 2) = v23;
    int v35 = (char *)&v36;
    int v36 = 0;
    long long v37 = 0;
    __int16 v24 = 0;
  }
  else
  {
    *(void *)(a1 + 208) = v23;
  }
  sub_1000486F0((uint64_t)&v35, v24);
  __int16 v26 = [v6 valueForKey:@"maxFindMyLETransientConnections"];
  *(unsigned char *)(a1 + 256) = [v26 unsignedCharValue];
  int v27 = [v6 valueForKey:@"maxSharingNearbyInvitationsHostLEConnections"];
  sub_100635FDC(v27, (uint64_t *)&v35);
  int v29 = *(char **)(a1 + 240);
  __int16 v28 = (char **)(a1 + 240);
  sub_10004BA28((uint64_t)(v28 - 1), v29);
  uint64_t v30 = v36;
  *(v28 - 1) = v35;
  *__int16 v28 = v30;
  long long v31 = v37;
  v28[1] = v37;
  if (v31)
  {
    *((void *)v30 + 2) = v28;
    int v35 = (char *)&v36;
    int v36 = 0;
    long long v37 = 0;
    uint64_t v30 = 0;
  }
  else
  {
    *(v28 - 1) = (char *)v28;
  }
  sub_10004BA28((uint64_t)&v35, v30);

  sub_10003AFB4((uint64_t)v39);
}

void sub_100635AD4(_Unwind_Exception *a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100635B54()
{
}

void sub_100635B60()
{
}

void sub_100635B6C()
{
}

void sub_100635B74()
{
}

void sub_100635B7C()
{
  JUMPOUT(0x100635B3CLL);
}

void sub_100635B88()
{
}

void sub_100635B90()
{
}

void sub_100635B98(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = v3;
  id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v11;
    do
    {
      uint64_t v7 = 0;
      do
      {
        if (*(void *)v11 != v6) {
          objc_enumerationMutation(v4);
        }
        sub_10004191C(__p, (char *)[*(id *)(*((void *)&v10 + 1) + 8 * (void)v7) UTF8String]);
        sub_1005B8FE8((uint64_t **)a2, (const void **)__p, (uint64_t)__p);
        if (v9 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v4 countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v5);
  }
}

void sub_100635CCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10004BA28(v15, *(char **)(v15 + 8));
  _Unwind_Resume(a1);
}

void sub_100635D18(void *a1@<X1>, uint64_t a2@<X8>)
{
  id v3 = a1;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)a2 = a2 + 8;
  id v4 = [v3 objectEnumerator];
  while (1)
  {
    id v5 = [v4 nextObject];
    uint64_t v6 = v5;
    if (!v5) {
      break;
    }
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    id v7 = [v5 valueForKey:@"friendlyName"];
    sub_10004191C(__p, (char *)[v7 UTF8String]);

    uint64_t v8 = [v6 valueForKey:@"chipsetManufacturerNameID"];
    LOWORD(v7) = (unsigned __int16)[v8 unsignedIntValue];

    long long v11 = __p;
    *((_WORD *)sub_100636CF8((uint64_t **)a2, (const void **)__p, (uint64_t)&unk_1007BE9D0, (long long **)&v11) + 28) = (_WORD)v7;
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100635E48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  sub_10004BA28(v16, *(char **)(v16 + 8));

  _Unwind_Resume(a1);
}

void sub_100635EAC(void *a1@<X1>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  uint64_t v5 = 0;
  uint64_t v6 = &v5;
  uint64_t v7 = 0x4812000000;
  uint64_t v8 = sub_10004D144;
  char v9 = sub_10004CE5C;
  uint64_t v10 = "";
  v12[0] = 0;
  v12[1] = 0;
  long long v11 = v12;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_10063610C;
  v4[3] = &unk_1009BC988;
  v4[4] = &v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
  sub_100636A78(a2, (uint64_t)(v6 + 6));
  _Block_object_dispose(&v5, 8);
  sub_1000486F0((uint64_t)&v11, v12[0]);
}

void sub_100635FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Block_object_dispose(&a14, 8);
  sub_1000486F0(v22, a21);

  _Unwind_Resume(a1);
}

void sub_100635FDC(void *a1@<X1>, uint64_t *a2@<X8>)
{
  id v3 = a1;
  uint64_t v5 = 0;
  uint64_t v6 = (const void ***)&v5;
  uint64_t v7 = 0x4812000000;
  uint64_t v8 = sub_10063627C;
  char v9 = sub_1006362B8;
  uint64_t v10 = "";
  v12[0] = 0;
  v12[1] = 0;
  long long v11 = v12;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1006362C8;
  v4[3] = &unk_1009BC988;
  v4[4] = &v5;
  [v3 enumerateKeysAndObjectsUsingBlock:v4];
  sub_100636AD0(a2, v6 + 6);
  _Block_object_dispose(&v5, 8);
  sub_10004BA28((uint64_t)&v11, v12[0]);
}

void sub_1006360E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21)
{
  _Block_object_dispose(&a14, 8);
  sub_10004BA28(v22, a21);

  _Unwind_Resume(a1);
}

void sub_10063610C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 isEqualToString:@"legacyBCMChipsets"])
  {
    unsigned __int8 v7 = [v6 unsignedCharValue];
    uint64_t v8 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
    int v12 = 0;
    long long v13 = &v12;
    char v9 = sub_10033D490(v8, &v12, (uint64_t)&unk_1007BE9D0, &v13);
LABEL_7:
    *((unsigned char *)v9 + 32) = v7;
    goto LABEL_8;
  }
  if ([v5 isEqualToString:@"modernBCMChipsets"])
  {
    unsigned __int8 v7 = [v6 unsignedCharValue];
    uint64_t v10 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
    int v12 = 1;
    long long v13 = &v12;
    char v9 = sub_10033D490(v10, &v12, (uint64_t)&unk_1007BE9D0, &v13);
    goto LABEL_7;
  }
  if ([v5 isEqualToString:@"aciChipsets"])
  {
    unsigned __int8 v7 = [v6 unsignedCharValue];
    long long v11 = (uint64_t **)(*(void *)(*(void *)(a1 + 32) + 8) + 48);
    int v12 = 2;
    long long v13 = &v12;
    char v9 = sub_10033D490(v11, &v12, (uint64_t)&unk_1007BE9D0, &v13);
    goto LABEL_7;
  }
LABEL_8:
}

void sub_10063625C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_10063627C(void *result, void *a2)
{
  result[6] = a2[6];
  uint64_t v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  id v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    void *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void sub_1006362B8(uint64_t a1)
{
}

void sub_1006362C8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  unsigned __int8 v7 = [v6 unsignedCharValue];
  uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
  id v9 = v5;
  sub_10004191C(__p, (char *)[v9 UTF8String]);
  int v12 = __p;
  *((unsigned char *)sub_10030CB90((uint64_t **)(v8 + 48), (const void **)__p, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v12) + 56) = v7;
  if (v11 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100636380(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1006363B0(uint64_t a1)
{
  *(void *)a1 = off_1009A5288;

  sub_100052DA4(a1 + 8);
  return a1;
}

void sub_100636454(uint64_t a1)
{
  sub_10004BA28(a1 + 232, *(char **)(a1 + 240));
  sub_1000486F0(a1 + 208, *(void **)(a1 + 216));
  sub_10004BA28(a1 + 184, *(char **)(a1 + 192));
  sub_1000486F0(a1 + 160, *(void **)(a1 + 168));
  sub_10004BA28(a1 + 136, *(char **)(a1 + 144));
  sub_10004BA28(a1 + 112, *(char **)(a1 + 120));
  sub_10004BA28(a1 + 88, *(char **)(a1 + 96));
  *(void *)a1 = off_1009A5288;

  sub_100052DA4(a1 + 8);

  operator delete();
}

uint64_t *sub_100636518(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100636570(a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_100636558(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100636570(uint64_t *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    id v4 = a2;
    id v5 = (uint64_t **)result;
    id v6 = result + 1;
    do
    {
      uint64_t result = sub_1006365FC(v5, v6, v4 + 7, (uint64_t *)(v4 + 7));
      unsigned __int8 v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unsigned __int8 v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          id v4 = v8;
        }
        while (!v9);
      }
      id v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1006365FC(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t *a4)
{
  uint64_t v10 = 0;
  char v11 = 0;
  id v6 = sub_100636688(a1, a2, &v11, &v10, a3);
  unsigned __int8 v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    unsigned __int8 v7 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v7 + 28) = *a4;
    sub_100036CA0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_100636688(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t **a4, unsigned int *a5)
{
  if (a1 + 1 == (uint64_t **)a2) {
    goto LABEL_3;
  }
  unsigned int v5 = *a5;
  unsigned int v6 = *((_DWORD *)a2 + 7);
  if (*a5 < v6) {
    goto LABEL_3;
  }
  if (v6 < v5)
  {
LABEL_9:
    uint64_t v10 = a2[1];
    if (v10)
    {
      char v11 = (uint64_t *)a2[1];
      do
      {
        a4 = (uint64_t **)v11;
        char v11 = (uint64_t *)*v11;
      }
      while (v11);
    }
    else
    {
      unsigned int v17 = a2;
      do
      {
        a4 = (uint64_t **)v17[2];
        BOOL v13 = *a4 == v17;
        unsigned int v17 = (uint64_t *)a4;
      }
      while (!v13);
    }
    if (a4 != a1 + 1)
    {
      unsigned int v18 = *((_DWORD *)a4 + 7);
      if (v5 >= v18 && (v18 < v5 || a5[1] >= *((_DWORD *)a4 + 8))) {
        return sub_1006367EC((uint64_t)a1, a3, a5);
      }
    }
    if (v10)
    {
      *a3 = (uint64_t *)a4;
    }
    else
    {
      *a3 = a2;
      return a2 + 1;
    }
    return (uint64_t *)a4;
  }
  unsigned int v15 = a5[1];
  unsigned int v16 = *((_DWORD *)a2 + 8);
  if (v15 >= v16)
  {
    if (v16 >= v15)
    {
      *a3 = a2;
      *a4 = a2;
      return (uint64_t *)a4;
    }
    goto LABEL_9;
  }
LABEL_3:
  unsigned __int8 v7 = (uint64_t *)*a2;
  if (*a1 == a2)
  {
    BOOL v9 = a2;
  }
  else
  {
    if (v7)
    {
      uint64_t v8 = (uint64_t *)*a2;
      do
      {
        BOOL v9 = v8;
        uint64_t v8 = (uint64_t *)v8[1];
      }
      while (v8);
    }
    else
    {
      int v12 = a2;
      do
      {
        BOOL v9 = (uint64_t *)v12[2];
        BOOL v13 = *v9 == (void)v12;
        int v12 = v9;
      }
      while (v13);
    }
    unsigned int v14 = *((_DWORD *)v9 + 7);
    if (v14 >= *a5 && (*a5 < v14 || *((_DWORD *)v9 + 8) >= a5[1])) {
      return sub_1006367EC((uint64_t)a1, a3, a5);
    }
  }
  if (v7)
  {
    *a3 = v9;
    return v9 + 1;
  }
  else
  {
    *a3 = a2;
    return a2;
  }
}

uint64_t *sub_1006367EC(uint64_t a1, void *a2, unsigned int *a3)
{
  unsigned int v5 = *(uint64_t **)(a1 + 8);
  uint64_t result = (uint64_t *)(a1 + 8);
  id v4 = v5;
  if (v5)
  {
    unsigned int v6 = *a3;
    unsigned int v7 = a3[1];
    while (1)
    {
      while (1)
      {
        uint64_t v8 = v4;
        unsigned int v9 = *((_DWORD *)v4 + 7);
        if (v6 >= v9) {
          break;
        }
LABEL_4:
        id v4 = (uint64_t *)*v8;
        uint64_t result = v8;
        if (!*v8) {
          goto LABEL_12;
        }
      }
      if (v9 >= v6)
      {
        unsigned int v10 = *((_DWORD *)v8 + 8);
        if (v7 < v10) {
          goto LABEL_4;
        }
        if (v10 >= v7) {
          goto LABEL_12;
        }
      }
      uint64_t result = v8 + 1;
      id v4 = (uint64_t *)v8[1];
      if (!v4) {
        goto LABEL_12;
      }
    }
  }
  uint64_t v8 = result;
LABEL_12:
  *a2 = v8;
  return result;
}

uint64_t *sub_100636850(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_1006368A8(a1, *a2, a2 + 1);
  return a1;
}

void sub_100636890(_Unwind_Exception *a1)
{
  sub_10004BA28(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_1006368A8(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    id v4 = a2;
    unsigned int v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      uint64_t result = sub_100636934(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unsigned int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          unsigned int v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          id v4 = (const void **)v8;
        }
        while (!v9);
      }
      id v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100636934(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  unsigned int v6 = (uint64_t **)sub_1002B360C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006369C4((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_1006369C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  unsigned int v6 = a3 + 1;
  unsigned int v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_10003B098(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }
  *((_WORD *)v7 + 28) = *(_WORD *)(a2 + 24);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100636A5C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1002B386C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100636A78(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100584AA0(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100636AB8(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100636AD0(uint64_t *a1, const void ***a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100636B28(a1, *a2, a2 + 1);
  return a1;
}

void sub_100636B10(_Unwind_Exception *a1)
{
  sub_10004BA28(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100636B28(uint64_t *result, const void **a2, const void ***a3)
{
  if (a2 != (const void **)a3)
  {
    id v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    unsigned int v6 = result + 1;
    do
    {
      uint64_t result = sub_100636BB4(v5, v6, v4 + 4, (uint64_t)(v4 + 4));
      unsigned int v7 = (const void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = (const void ***)v7;
          unsigned int v7 = (const void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const void ***)v4[2];
          BOOL v9 = *v8 == v4;
          id v4 = (const void **)v8;
        }
        while (!v9);
      }
      id v4 = (const void **)v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100636BB4(uint64_t **a1, uint64_t *a2, const void **a3, uint64_t a4)
{
  uint64_t v9 = 0;
  unsigned int v10 = 0;
  unsigned int v6 = (uint64_t **)sub_1002B360C(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100636C44((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_100636C44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  unsigned int v6 = a3 + 1;
  unsigned int v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_10003B098(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }
  v7[56] = *(unsigned char *)(a2 + 24);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100636CDC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1002B386C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100636CF8(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  unsigned int v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100636D9C((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_100636D9C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  unsigned int v6 = a3 + 1;
  unsigned int v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_10003B098(result, *(void **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }
  *((_WORD *)v7 + 28) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100636E34(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1002B386C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100636E50(uint64_t a1)
{
  *(void *)a1 = off_1009BC9B8;
  *(void *)(a1 + 8) = &off_1009BCA28;
  uint64_t v2 = a1 + 16;
  *(void *)(a1 + 16) = off_1009BCA40;
  uint64_t v21 = a1 + 24;
  *(void *)(a1 + 24) = off_1009BCA70;
  uint64_t v20 = a1 + 32;
  *(void *)(a1 + 32) = off_1009BCAA0;
  *(void *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  uint64_t v3 = (uint64_t **)(a1 + 72);
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  uint64_t v22 = (uint64_t **)(a1 + 120);
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 248) = a1 + 256;
  *(void *)(a1 + 144) = a1 + 152;
  id v4 = (uint64_t **)(a1 + 144);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = a1 + 176;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = a1 + 200;
  *(void *)(a1 + 224) = 0;
  *(void *)(a1 + 216) = a1 + 224;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 232) = 0;
  *(_DWORD *)(a1 + 240) = 30;
  *(void *)(a1 + 256) = 0;
  *(void *)(a1 + 264) = 0;
  int v74 = 0;
  long long v73 = xmmword_1007BA5A0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v73);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v71 = xmmword_1007BA5B4;
  int v72 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v71);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v69 = xmmword_1007BA730;
  int v70 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v69);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v67 = xmmword_1007BA758;
  int v68 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v67);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v65 = xmmword_1007BA76C;
  int v66 = -805294830;
  sub_100035F98((__n128 *)buf, (__n128 *)&v65);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v63 = xmmword_1007BA780;
  int v64 = -587704915;
  sub_100035F98((__n128 *)buf, (__n128 *)&v63);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v61 = xmmword_1007BA794;
  int v62 = -1765695659;
  sub_100035F98((__n128 *)buf, (__n128 *)&v61);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v59 = xmmword_1007BA7D0;
  int v60 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v59);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v57 = xmmword_1007BA888;
  int v58 = 1880579407;
  sub_100035F98((__n128 *)buf, (__n128 *)&v57);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v55 = xmmword_1007BA7BC;
  int v56 = -1171415960;
  sub_100035F98((__n128 *)buf, (__n128 *)&v55);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v53 = xmmword_1007BA834;
  int v54 = 1729713604;
  sub_100035F98((__n128 *)buf, (__n128 *)&v53);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v51 = xmmword_1007BA8C4;
  int v52 = -815610143;
  sub_100035F98((__n128 *)buf, (__n128 *)&v51);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v49 = xmmword_1007BA8D8;
  int v50 = 1323364242;
  sub_100035F98((__n128 *)buf, (__n128 *)&v49);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v47 = xmmword_1007BA8EC;
  int v48 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v47);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v45 = xmmword_1007BA914;
  int v46 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v45);
  sub_100045F18(v3, buf, (uint64_t)buf);
  __n128 v43 = 0uLL;
  int v44 = 0;
  *(_OWORD *)uint8_t buf = xmmword_1007C0110;
  sub_10022A5EC((int8x16_t *)buf, 16, 0, (uint64_t)&v43);
  __n128 v41 = v43;
  int v42 = v44;
  sub_100035F98((__n128 *)buf, &v41);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v39 = xmmword_1007BA820;
  int v40 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v39);
  sub_100045F18(v3, buf, (uint64_t)buf);
  long long v37 = xmmword_1007BA848;
  int v38 = 2027922698;
  sub_100035F98((__n128 *)buf, (__n128 *)&v37);
  sub_100045F18(v22, buf, (uint64_t)buf);
  long long v35 = xmmword_1007BA80C;
  int v36 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v35);
  __p.n128_u64[0] = (unint64_t)buf;
  uint64_t v5 = (uint64_t **)sub_10042C788(v4, buf, (uint64_t)&unk_1007BE9D0, &__p);
  long long v33 = xmmword_1007BA89C;
  int v34 = 295542594;
  sub_100035F98(&__p, (__n128 *)&v33);
  sub_100045F18(v5 + 7, (unsigned __int8 *)&__p, (uint64_t)&__p);
  long long v31 = xmmword_1007BA80C;
  int v32 = 0;
  sub_100035F98((__n128 *)buf, (__n128 *)&v31);
  __p.n128_u64[0] = (unint64_t)buf;
  unsigned int v6 = (uint64_t **)sub_10042C788(v4, buf, (uint64_t)&unk_1007BE9D0, &__p);
  long long v29 = xmmword_1007BA8B0;
  int v30 = 312319810;
  sub_100035F98(&__p, (__n128 *)&v29);
  sub_100045F18(v6 + 7, (unsigned __int8 *)&__p, (uint64_t)&__p);
  int v24 = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(&__p, "MaxUnpairedDatabasesCached");
  int v8 = (*(uint64_t (**)(uint64_t, uint8_t *, __n128 *, int *))(*(void *)v7 + 88))(v7, buf, &__p, &v24);
  if (v26 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v28 < 0)
  {
    operator delete(*(void **)buf);
    if (!v8) {
      goto LABEL_13;
    }
  }
  else if (!v8)
  {
    goto LABEL_13;
  }
  int v9 = v24;
  long long v10 = qword_100A19E88;
  if (v24 < 1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100788954();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: Using override value (%d) for max number of unpaired databases to be cached", buf, 8u);
      LOWORD(v9) = v24;
    }
    *(_WORD *)(a1 + 240) = v9;
  }
LABEL_13:
  int v23 = 0;
  uint64_t v11 = sub_100017768();
  sub_10004191C(buf, "GATT");
  sub_10004191C(&__p, "MTU");
  int v12 = (*(uint64_t (**)(uint64_t, uint8_t *, __n128 *, int *))(*(void *)v11 + 88))(v11, buf, &__p, &v23);
  if (v26 < 0) {
    operator delete((void *)__p.n128_u64[0]);
  }
  if (v28 < 0) {
    operator delete(*(void **)buf);
  }
  int v13 = v23;
  if (v23) {
    int v14 = v12;
  }
  else {
    int v14 = 0;
  }
  if (v14 == 1)
  {
    unsigned int v15 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)uint8_t buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Using Gatt MTU override of %d", buf, 8u);
      LOWORD(v13) = v23;
    }
    *(_WORD *)(a1 + 242) = v13;
  }
  *(unsigned char *)(a1 + 244) = 0;
  uint64_t v16 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 8))(v16))
  {
    uint64_t v17 = sub_100017768();
    sub_10004191C(buf, "GATT");
    sub_10004191C(&__p, "StartInitSequenceOnConnectionComplete");
    if ((*(unsigned int (**)(uint64_t, uint8_t *, __n128 *, uint64_t))(*(void *)v17 + 72))(v17, buf, &__p, a1 + 244))
    {
      BOOL v18 = *(unsigned char *)(a1 + 244) != 0;
    }
    else
    {
      BOOL v18 = 0;
    }
    if (v26 < 0) {
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v28 < 0)
    {
      operator delete(*(void **)buf);
      if (!v18) {
        goto LABEL_36;
      }
    }
    else if (!v18)
    {
      goto LABEL_36;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_100788920();
    }
  }
LABEL_36:
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BCC68);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, v2);
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009BCC88);
  }
  sub_1004C0E38(qword_1009FB238, a1);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BCCA8);
  }
  sub_100061288((uint64_t)off_1009F7EF8 + 240, v21);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BCCC8);
  }
  sub_100708564((void *)qword_1009F7EC8, v20);
  return a1;
}

void sub_1006378EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

uint64_t sub_100637A34(uint64_t a1)
{
  *(void *)a1 = off_1009BC9B8;
  *(void *)(a1 + 8) = &off_1009BCA28;
  uint64_t v2 = a1 + 16;
  *(void *)(a1 + 16) = off_1009BCA40;
  uint64_t v3 = a1 + 24;
  *(void *)(a1 + 24) = off_1009BCA70;
  uint64_t v4 = a1 + 32;
  *(void *)(a1 + 32) = off_1009BCAA0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BCC68);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, v2);
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009BCC88);
  }
  sub_1004C0ECC(qword_1009FB238, a1);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BCCA8);
  }
  sub_100052718((uint64_t)off_1009F7EF8 + 240, v3);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009BCCC8);
  }
  sub_1007086AC(qword_1009F7EC8, v4);
  sub_100051AD4(a1 + 248, *(void **)(a1 + 256));
  sub_1006430AC(a1 + 216, *(void **)(a1 + 224));
  sub_100643008(a1 + 192, *(void **)(a1 + 200));
  sub_100051AD4(a1 + 168, *(void **)(a1 + 176));
  sub_10042C5BC(a1 + 144, *(void **)(a1 + 152));
  sub_1000486F0(a1 + 120, *(void **)(a1 + 128));
  sub_1000486F0(a1 + 96, *(void **)(a1 + 104));
  sub_1000486F0(a1 + 72, *(void **)(a1 + 80));
  uint64_t v5 = *(void **)(a1 + 48);
  if (v5)
  {
    *(void *)(a1 + 56) = v5;
    operator delete(v5);
  }
  return a1;
}

void sub_100637C54(_Unwind_Exception *a1)
{
  sub_100051AD4(v1 + 248, *(void **)(v1 + 256));
  sub_1006430AC(v1 + 216, *(void **)(v1 + 224));
  sub_100643008(v1 + 192, *(void **)(v1 + 200));
  sub_100051AD4(v1 + 168, *(void **)(v1 + 176));
  sub_10042C5BC(v1 + 144, *(void **)(v1 + 152));
  sub_1000486F0(v1 + 120, *(void **)(v1 + 128));
  sub_1000486F0(v1 + 96, *(void **)(v1 + 104));
  sub_1000486F0(v1 + 72, *(void **)(v1 + 80));
  uint64_t v3 = *(void **)(v1 + 48);
  if (v3)
  {
    *(void *)(v1 + 56) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(a1);
}

void sub_100637CD4(uint64_t a1)
{
  sub_100637A34(a1);

  operator delete();
}

unsigned char *sub_100637D0C(uint64_t a1)
{
  char v3 = 0;
  sub_10001B8E0(&v3);
  if (sub_10022A2F0())
  {
    if (sub_10022B870() && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
      sub_1007889BC();
    }
    sub_10020E6E8(sub_100637DE8, 0);
    sub_10020E6C4(sub_100638054);
    if (*(_WORD *)(a1 + 242)) {
      sub_100213884(*(unsigned __int16 *)(a1 + 242));
    }
    sub_10001B910(&v3);
  }
  return sub_10001B8AC(&v3);
}

void sub_100637DD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100637DE8(uint64_t a1, __int16 a2, const void *a3, unsigned int a4, char a5, uint64_t a6)
{
  uint64_t v22 = 0;
  int v23 = 0;
  sub_1000335D8(&v22, a3, a4);
  uint64_t v10 = sub_1002B7AC8();
  if (sub_100197770(a1))
  {
    uint64_t v11 = (unsigned __int8 *)sub_100197C84(a1);
    if (v11)
    {
      unint64_t v12 = ((unint64_t)v11[1] << 40) | ((unint64_t)v11[2] << 32) | ((unint64_t)v11[3] << 24) | ((unint64_t)v11[4] << 16) | ((unint64_t)v11[5] << 8) | v11[6] | ((unint64_t)*v11 << 48);
LABEL_8:
      uint64_t v14 = sub_100019878();
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 3321888768;
      void v15[2] = sub_1006416E8;
      void v15[3] = &unk_1009BCC10;
      _OWORD v15[4] = a1;
      void v15[5] = v12;
      __int16 v20 = a2;
      uint64_t v16 = &off_100998428;
      uint64_t v17 = v23;
      if (v23) {
        sub_100037354((uint64_t)v23);
      }
      char v21 = a5;
      uint64_t v18 = a6;
      uint64_t v19 = v10;
      sub_100013018(v14, v15);
      uint64_t v16 = &off_100998428;
      if (v17) {
        sub_1000368F4(v17);
      }
      goto LABEL_14;
    }
    goto LABEL_7;
  }
  if (sub_100197698(a1))
  {
    int v13 = (unsigned __int8 *)sub_100197CD8(a1);
    if (v13)
    {
      unint64_t v12 = ((unint64_t)*v13 << 40) | ((unint64_t)v13[1] << 32) | ((unint64_t)v13[2] << 24) | ((unint64_t)v13[3] << 16) | ((unint64_t)v13[4] << 8) | v13[5];
      goto LABEL_8;
    }
LABEL_7:
    unint64_t v12 = 0;
    goto LABEL_8;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
    sub_100788A24();
  }
LABEL_14:
  uint64_t v22 = &off_100998428;
  if (v23) {
    sub_1000368F4(v23);
  }
}

void sub_100637FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  *(void *)(v17 - 80) = &off_100998428;
  uint64_t v19 = *(atomic_uint **)(v17 - 72);
  if (v19) {
    sub_1000368F4(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100638054()
{
  uint64_t v0 = sub_100019878();

  sub_100013018(v0, &stru_1009BCBF0);
}

unsigned char *sub_100638084(uint64_t a1)
{
  return sub_100637D0C(a1 - 16);
}

unsigned char *sub_10063808C(uint64_t a1)
{
  uint64_t v2 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint8_t buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "GattGateway::stackWillStop enter", buf, 2u);
  }
  char v7 = 0;
  sub_10001B8E0(&v7);
  if (sub_10022A2F0())
  {
    sub_10020E720(sub_100637DE8);
    sub_10022B82C();
    sub_10001B910(&v7);
    uint64_t v3 = sub_100019878();
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_1006381E0;
    v6[3] = &unk_100997528;
    void v6[4] = a1;
    sub_1000197D8(v3, v6);
    uint64_t v4 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint8_t buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GattGateway::stackWillStop exit", buf, 2u);
    }
  }
  return sub_10001B8AC(&v7);
}

void sub_1006381CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1006381E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  sub_100643008(v1 + 192, *(void **)(v1 + 200));
  *(void *)(v1 + 192) = v1 + 200;
  *(void *)(v1 + 200) = 0;
  uint64_t v2 = *(void **)(v1 + 224);
  v1 += 224;
  *(void *)(v1 - 16) = 0;
  sub_1006430AC(v1 - 8, v2);
  *(void *)(v1 - 8) = v1;
  *(void *)uint64_t v1 = 0;
  *(void *)(v1 + 8) = 0;
  sub_100051AD4(v1 + 24, *(void **)(v1 + 32));
  *(void *)(v1 + 32) = 0;
  *(void *)(v1 + 40) = 0;
  *(void *)(v1 + 24) = v1 + 32;
}

unsigned char *sub_100638248(uint64_t a1)
{
  return sub_10063808C(a1 - 16);
}

void sub_100638250(uint64_t a1, unsigned __int8 *a2, int a3)
{
  unsigned int v6 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO)
    && ((sub_100474E18((uint64_t)a2, __p), v19 >= 0) ? (char v7 = __p) : (char v7 = (void **)__p[0]),
        *(_DWORD *)uint8_t buf = 136446466,
        char v21 = v7,
        __int16 v22 = 1024,
        LODWORD(v23) = a3,
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "deviceInfoChanged device %{public}s infoChanged:%d", buf, 0x12u), v19 < 0))
  {
    operator delete(__p[0]);
    if (a2) {
      goto LABEL_7;
    }
  }
  else if (a2)
  {
LABEL_7:
    unint64_t v8 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
    int v9 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEBUG))
    {
      sub_100474E18((uint64_t)a2, __p);
      int v12 = v19;
      int v13 = (void **)__p[0];
      uint64_t v14 = sub_1006ACEAC();
      unsigned int v15 = (void *)v14;
      uint64_t v16 = __p;
      if (v12 < 0) {
        uint64_t v16 = v13;
      }
      *(_DWORD *)uint8_t buf = 136446466;
      char v21 = v16;
      __int16 v22 = 2114;
      uint64_t v23 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "deviceInfoChanged device %{public}s address %{public}@", buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
    if (a3 == 4099)
    {
      uint64_t v10 = sub_100019878();
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_1006384E8;
      _OWORD v17[3] = &unk_100998260;
      _DWORD v17[4] = a1;
      void v17[5] = v8;
      sub_100013018(v10, v17);
    }
    return;
  }
  uint64_t v11 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "deviceInfoChanged invalid device", (uint8_t *)__p, 2u);
  }
}

void sub_1006384C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006384E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
  }
  *(void *)uu = 0;
  uint64_t v17 = 0;
  sub_100014B58((uint64_t)off_1009F7ED8, *(void *)(a1 + 40), 0, 1u, 0, 0, uu);
  if (!uuid_is_null(uu))
  {
    uint64_t v3 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      memset(out, 0, 37);
      uuid_unparse_upper(uu, out);
      sub_10004191C(__p, out);
      int v4 = v11;
      uint64_t v5 = (void **)__p[0];
      uint64_t v6 = sub_1006ACEAC();
      char v7 = (void *)v6;
      unint64_t v8 = __p;
      if (v4 < 0) {
        unint64_t v8 = v5;
      }
      *(_DWORD *)uint8_t buf = 136446466;
      int v13 = v8;
      __int16 v14 = 2114;
      uint64_t v15 = v6;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "deviceInfoChanged Clearing device DB for device %{public}s (%{public}@)", buf, 0x16u);
      if (v11 < 0) {
        operator delete(__p[0]);
      }
    }
    int v9 = sub_100031234(uu);
    sub_1006386B4(v2, v9);
  }
}

void sub_100638684(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1006386B4(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_1000305AC(&v7, v3);
  int v4 = (uint64_t **)(a1 + 216);
  uint64_t v5 = (uint64_t *)sub_1000308C0(a1 + 216, (unsigned __int8 *)&v7);
  if ((uint64_t *)(a1 + 224) != v5)
  {
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138543362;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Clearing database cache for device \"%{public}@\"", (uint8_t *)&v7, 0xCu);
    }
    sub_100645074(v4, v5);
  }
}

void sub_1006387A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006387C0(uint64_t a1, unsigned __int8 *a2, int a3)
{
}

void sub_1006387C8(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 138412546;
    id v12 = v5;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GattGateway device %@ paired with result %d", buf, 0x12u);
  }
  if (!a3)
  {
    uint64_t v7 = sub_100019878();
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_100638928;
    v8[3] = &unk_100998A38;
    uint64_t v10 = a1;
    id v9 = v5;
    sub_100013018(v7, v8);
  }
}

void sub_100638900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100638928(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1000305AC(v3, *(void *)(a1 + 32));
  sub_1006389AC(v2, v3);
  sub_1000305AC(v3, *(void *)(a1 + 32));
  sub_1006396A8(v2, v3);
}

void sub_1006389AC(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = sub_100031234(a2);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
  }
  if (sub_1006C3D28((uint64_t)off_1009F7ED8, v4))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEBUG)) {
      sub_100788A58();
    }
  }
  else
  {
    uint64_t v60 = 0;
    long long v61 = 0;
    uint64_t v62 = 0;
    *(void *)uint8_t buf = a2;
    id v5 = sub_100643E2C((uint64_t **)(a1 + 248), a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
    sub_100643F68((uint64_t)&v60, (uint64_t)(v5 + 6));
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint8_t buf = 138412290;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Trying to detect built in services on device %@", buf, 0xCu);
    }
    uint64_t v58 = 0;
    long long v59 = 0;
    sub_1000305AC(buf, v4);
    sub_10063B7D4(a1, buf, 0, &v58);
    uint64_t v7 = v58;
    if (v58)
    {
      sub_1004F5E6C(v58, (uint64_t)"");
      long long v94 = xmmword_1007BA730;
      int v95 = 0;
      sub_100035F98((__n128 *)buf, (__n128 *)&v94);
      sub_10071D13C(v66);
      uint64_t v8 = sub_1004F5388(v7, buf, v66);
      if (_os_feature_enabled_impl())
      {
        long long v92 = xmmword_1007BA730;
        int v93 = 0;
        sub_100035F98((__n128 *)buf, (__n128 *)&v92);
        if (sub_10063C144(a1, buf, v4)) {
          uint64_t v8 = 0;
        }
      }
      long long v90 = xmmword_1007BA834;
      int v91 = 1729713604;
      sub_100035F98((__n128 *)buf, (__n128 *)&v90);
      sub_10071D13C(v66);
      uint64_t v9 = sub_1004F5388(v7, buf, v66);
      long long v88 = xmmword_1007BA848;
      int v89 = 2027922698;
      sub_100035F98((__n128 *)buf, (__n128 *)&v88);
      sub_10071D13C(v66);
      uint64_t v46 = sub_1004F5388(v7, buf, v66);
      long long v86 = xmmword_1007BA744;
      int v87 = 0;
      sub_100035F98((__n128 *)buf, (__n128 *)&v86);
      sub_10071D13C(v66);
      uint64_t v45 = sub_1004F5388(v7, buf, v66);
      long long v84 = xmmword_1007BA708;
      int v85 = 0;
      sub_100035F98((__n128 *)buf, (__n128 *)&v84);
      sub_10071D13C(v66);
      uint64_t v47 = sub_1004F5388(v7, buf, v66);
      if (sub_10063F0C4(a1, (__n128 *)&xmmword_1007BA730, a2))
      {
        if (v8)
        {
          uint64_t v10 = *(void *)(v8 + 8);
          int v11 = *(_DWORD *)(v10 + 20);
          *(_OWORD *)uint8_t buf = *(_OWORD *)(v10 + 4);
          int v64 = v11;
          sub_100035F98((__n128 *)v66, (__n128 *)buf);
          int v83 = 0;
          long long v82 = xmmword_1007C0134;
          if (sub_10022A44C(v66, (unsigned __int8 *)&v82))
          {
            id v12 = qword_100A19E88;
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint8_t buf = 138412290;
              *(void *)&uint8_t buf[4] = v4;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports HID", buf, 0xCu);
            }
            uint64_t v13 = sub_100373068();
            (*(void (**)(uint64_t, void *))(*(void *)v13 + 24))(v13, v4);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
            }
            sub_1006C4188((uint64_t)off_1009F7ED8, v4);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
            }
            sub_1006BB020((uint64_t)off_1009F7ED8, v4, 0);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
            }
            int v14 = off_1009F7ED8;
            sub_10004191C(__p, "_HID_DEVICE_");
            sub_1006BC69C((uint64_t)v14, v4, (unsigned __int8 *)__p);
            if (v57 < 0) {
              operator delete(__p[0]);
            }
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009BCD08);
            }
            sub_10067E6C8((uint64_t)off_1009F7EB8, v4, 1);
            sub_10063F2EC(a1, (__n128 *)&xmmword_1007BA730, a2);
            *(void *)int v66 = 0;
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009BCD08);
            }
            uint64_t v15 = off_1009F7EB8;
            sub_1000305AC(buf, v4);
            if (sub_1006856B8((uint64_t)v15, buf, v66))
            {
              buf[0] = 0;
              sub_10001B8E0(buf);
              __int16 v16 = sub_100197960(*(unsigned __int16 **)v66);
              if ((sub_100116754(v16 & 0xFFF, **(_WORD **)(v8 + 8), *(_WORD *)(v8 + 48)) & 1) == 0)
              {
                uint64_t v17 = qword_100A19E88;
                if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
                {
                  uint64_t v18 = sub_100031234(a2);
                  sub_100788B00(v18, v81, v17);
                }
              }
              sub_10001B8AC(buf);
            }
          }
        }
      }
      if (sub_10063F0C4(a1, (__n128 *)&xmmword_1007BA834, a2))
      {
        if (v9)
        {
          uint64_t v19 = *(void *)(v9 + 8);
          int v20 = *(_DWORD *)(v19 + 20);
          *(_OWORD *)uint8_t buf = *(_OWORD *)(v19 + 4);
          int v64 = v20;
          sub_100035F98((__n128 *)v66, (__n128 *)buf);
          int v80 = 0;
          long long v79 = xmmword_1007C0134;
          if (sub_10022A44C(v66, (unsigned __int8 *)&v79))
          {
            char v21 = qword_100A19E88;
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint8_t buf = 138412290;
              *(void *)&uint8_t buf[4] = v4;
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports DOAP", buf, 0xCu);
            }
            uint64_t v22 = sub_100373068();
            (*(void (**)(uint64_t, void *))(*(void *)v22 + 48))(v22, v4);
            sub_10063F2EC(a1, (__n128 *)&xmmword_1007BA834, a2);
          }
        }
      }
      if (sub_10063F0C4(a1, (__n128 *)&xmmword_1007BA848, a2))
      {
        if (v46)
        {
          uint64_t v23 = *(void *)(v46 + 8);
          int v24 = *(_DWORD *)(v23 + 20);
          *(_OWORD *)uint8_t buf = *(_OWORD *)(v23 + 4);
          int v64 = v24;
          sub_100035F98((__n128 *)v66, (__n128 *)buf);
          int v78 = 0;
          long long v77 = xmmword_1007C0134;
          if (sub_10022A44C(v66, (unsigned __int8 *)&v77))
          {
            long long v73 = xmmword_1007BA848;
            int v74 = 2027922698;
            sub_100035F98(&v75, (__n128 *)&v73);
            BOOL v25 = a1 + 128 != sub_10042D258(a1 + 120, (unsigned __int8 *)&v75);
            if (sub_10063C9F8(v4, v25))
            {
              char v26 = qword_100A19E88;
              if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint8_t buf = 138412290;
                *(void *)&uint8_t buf[4] = v4;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports UARP", buf, 0xCu);
              }
              uint64_t v27 = sub_100373068();
              (*(void (**)(uint64_t, void *))(*(void *)v27 + 56))(v27, v4);
              sub_10063F2EC(a1, (__n128 *)&xmmword_1007BA848, a2);
            }
          }
        }
      }
      if (_os_feature_enabled_impl())
      {
        if (sub_10063F0C4(a1, (__n128 *)&xmmword_1007BA744, a2))
        {
          if (v45)
          {
            uint64_t v28 = *(void *)(v45 + 8);
            int v29 = *(_DWORD *)(v28 + 20);
            *(_OWORD *)uint8_t buf = *(_OWORD *)(v28 + 4);
            int v64 = v29;
            sub_100035F98((__n128 *)v66, (__n128 *)buf);
            int v72 = 0;
            long long v71 = xmmword_1007C0134;
            if (sub_10022A44C(v66, (unsigned __int8 *)&v71))
            {
              int v30 = qword_100A19E88;
              if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint8_t buf = 138412290;
                *(void *)&uint8_t buf[4] = v4;
                _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports GHS", buf, 0xCu);
              }
              uint64_t v31 = sub_100373068();
              (*(void (**)(uint64_t, void *))(*(void *)v31 + 24))(v31, v4);
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
              }
              int v32 = off_1009F7ED8;
              sub_10004191C(v54, "_GHS_DEVICE_");
              sub_1006BC69C((uint64_t)v32, v4, (unsigned __int8 *)v54);
              if (v55 < 0) {
                operator delete(v54[0]);
              }
              sub_10063F2EC(a1, (__n128 *)&xmmword_1007BA744, a2);
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
              }
              sub_1006BB020((uint64_t)off_1009F7ED8, v4, 0);
            }
          }
        }
      }
      if (sub_10063F0C4(a1, (__n128 *)&xmmword_1007BA708, a2))
      {
        if (v47)
        {
          uint64_t v33 = *(void *)(v47 + 8);
          int v34 = *(_DWORD *)(v33 + 20);
          *(_OWORD *)uint8_t buf = *(_OWORD *)(v33 + 4);
          int v64 = v34;
          sub_100035F98((__n128 *)v66, (__n128 *)buf);
          int v70 = 0;
          long long v69 = xmmword_1007C0134;
          if (sub_10022A44C(v66, (unsigned __int8 *)&v69))
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
            }
            uint64_t v35 = sub_100030DCC((uint64_t)off_1009F7ED8, v4, 0);
            if ((v35 & 0xFFFFFFFFFFFFLL) != 0)
            {
              uint64_t v36 = sub_1004AF8EC();
              v48[0] = _NSConcreteStackBlock;
              v48[1] = 3221225472;
              v48[2] = sub_10063F528;
              v48[3] = &unk_1009B75A8;
              uint64_t v50 = a1;
              uint64_t v51 = v35;
              id v49 = v4;
              int v52 = a2;
              uint64_t v53 = v47;
              sub_100013018(v36, v48);
            }
          }
        }
      }
      *(void *)uint8_t buf = a2;
      long long v37 = sub_100643E2C((uint64_t **)(a1 + 248), a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)buf);
      int v38 = (uint64_t *)v37[6];
      long long v39 = v37 + 7;
      if (v38 != v37 + 7)
      {
        do
        {
          __n128 v75 = *(__n128 *)((char *)v38 + 28);
          int v76 = *((_DWORD *)v38 + 11);
          int v40 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000417A8((uint64_t)&v75, buf);
            __n128 v41 = v65 >= 0 ? buf : *(uint8_t **)buf;
            *(_DWORD *)int v66 = 136315394;
            *(void *)&v66[4] = v41;
            __int16 v67 = 2112;
            int v68 = v4;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Detected service %s on device %@ and notified", v66, 0x16u);
            if (v65 < 0) {
              operator delete(*(void **)buf);
            }
          }
          int v42 = (uint64_t *)v38[1];
          if (v42)
          {
            do
            {
              __n128 v43 = v42;
              int v42 = (uint64_t *)*v42;
            }
            while (v42);
          }
          else
          {
            do
            {
              __n128 v43 = (uint64_t *)v38[2];
              BOOL v44 = *v43 == (void)v38;
              int v38 = v43;
            }
            while (!v44);
          }
          int v38 = v43;
        }
        while (v43 != v39);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100788A98();
    }
    if (v59) {
      sub_10008A294(v59);
    }
    sub_1000486F0((uint64_t)&v60, v61);
  }
}

void sub_1006395B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,std::__shared_weak_count *a35,char a36,void *a37,uint64_t a38,char a39)
{
  sub_10001B8AC(&a39);
  if (a35) {
    sub_10008A294(a35);
  }
  sub_1000486F0((uint64_t)&a36, a37);

  _Unwind_Resume(a1);
}

void sub_1006396A8(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = sub_100031234(a2);
  id v5 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 138412290;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "MIDI: Trying to detect built in MIDI service on device %@", buf, 0xCu);
  }
  uint64_t v33 = 0;
  int v34 = 0;
  sub_1000305AC(buf, v4);
  sub_10063B7D4(a1, buf, 0, &v33);
  uint64_t v6 = v33;
  if (v33)
  {
    sub_1004F5E6C(v33, (uint64_t)"");
    long long v40 = xmmword_1007BA874;
    int v41 = 13091918;
    sub_100035F98((__n128 *)buf, (__n128 *)&v40);
    sub_10071D13C(&v39);
    uint64_t v7 = sub_1004F5388(v6, buf, (unsigned __int8 *)&v39);
    if (sub_10063F0C4(a1, (__n128 *)&xmmword_1007BA874, a2))
    {
      int v8 = _os_feature_enabled_impl();
      if (v7) {
        int v9 = v8;
      }
      else {
        int v9 = 0;
      }
      if (v9 == 1
        && (uint64_t v10 = *(void *)(v7 + 8),
            int v11 = *(_DWORD *)(v10 + 20),
            *(_OWORD *)uint8_t buf = *(_OWORD *)(v10 + 4),
            *(_DWORD *)&uint8_t buf[16] = v11,
            sub_100035F98(&v39, (__n128 *)buf),
            int v38 = 0,
            long long v37 = xmmword_1007C0134,
            sub_10022A44C((unsigned __int8 *)&v39, (unsigned __int8 *)&v37)))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
        }
        if (sub_1006C7BB0((uint64_t)off_1009F7ED8, v4)) {
          goto LABEL_16;
        }
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009BCD08);
        }
        id v12 = off_1009F7EB8;
        sub_1000305AC(buf, v4);
        if (sub_1006857DC((uint64_t)v12, buf))
        {
LABEL_16:
          uint64_t v13 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            *(void *)&uint8_t buf[4] = v4;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "MIDI: The device %@ supports MIDI, but it's Apple device - No AutoConnect", buf, 0xCu);
          }
          goto LABEL_24;
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
        }
        __int16 v16 = sub_1006C4A48((uint64_t)off_1009F7ED8, v4);
        uint64_t v17 = v16;
        if (!v16)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
            sub_100788BC0();
          }
          goto LABEL_35;
        }
        unsigned int v18 = [v16 localizedCaseInsensitiveContainsString:@"Apple"];
        uint64_t v19 = qword_100A19E88;
        BOOL v20 = os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT);
        if (v18)
        {
          if (v20)
          {
            *(_DWORD *)uint8_t buf = 138412546;
            *(void *)&uint8_t buf[4] = v4;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&unsigned char buf[14] = v17;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "MIDI: The device %@ supports MIDI, but it's %@ manufacturer - No AutoConnect", buf, 0x16u);
          }
LABEL_35:

          goto LABEL_24;
        }
        if (v20)
        {
          *(_DWORD *)uint8_t buf = 138412290;
          *(void *)&uint8_t buf[4] = v4;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "MIDI: The device %@ supports MIDI", buf, 0xCu);
        }
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009BCCC8);
        }
        if (sub_100008DC4(qword_1009F7EC8, v4))
        {
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
          }
          char v21 = off_1009F7ED8;
          sub_10004191C(__p, "_MIDI_DEVICE_");
          sub_1006BC69C((uint64_t)v21, v4, (unsigned __int8 *)__p);
          if (v32 < 0) {
            operator delete(__p[0]);
          }
          uint64_t v22 = +[NSData dataWithBytes:(char *)&xmmword_1007BA874 + 4 length:16];
          uint64_t v23 = +[CBUUID UUIDWithData:v22];

          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
          }
          sub_10003093C((uint64_t)off_1009F7ED8, v4, (uint64_t)buf);
          if (v36 >= 0) {
            int v24 = buf;
          }
          else {
            int v24 = *(unsigned char **)buf;
          }
          BOOL v25 = +[NSString stringWithUTF8String:v24];
          if (v36 < 0) {
            operator delete(*(void **)buf);
          }
          char v26 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint8_t buf = 138412546;
            *(void *)&uint8_t buf[4] = v23;
            *(_WORD *)&unsigned char buf[12] = 2112;
            *(void *)&unsigned char buf[14] = v25;
            _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "MIDI: Starting MIDI service %@ on paired device \"%@\"", buf, 0x16u);
          }
          uint64_t v27 = sub_100373068();
          (*(void (**)(uint64_t, void *))(*(void *)v27 + 24))(v27, v4);
          uint64_t v28 = (void *)gCBDaemonServer;
          int v29 = +[NSArray arrayWithObject:v23];
          [v28 notifyConnectedDeviceUUID:v4 name:v25 servicesUUIDs:v29];

          sub_10063F2EC(a1, (__n128 *)&xmmword_1007BA874, a2);
        }
        else
        {
          int v30 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)uint8_t buf = 138412290;
            *(void *)&uint8_t buf[4] = v4;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "MIDI: %@ is not paired - No AutoConnect", buf, 0xCu);
          }
        }
      }
      else
      {
        int v14 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
        {
          char v15 = _os_feature_enabled_impl();
          sub_100788BF4(v15, v7, buf, v14);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100788C50();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
  {
    sub_100788B58();
  }
LABEL_24:
  if (v34) {
    sub_10008A294(v34);
  }
}

void sub_100639D54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    sub_10008A294(a17);
  }

  _Unwind_Resume(a1);
}

void sub_100639E0C(uint64_t a1, void *a2, int a3)
{
}

void sub_100639E14(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 138543618;
    id v9 = v5;
    __int16 v10 = 1024;
    int v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "GattGateway init on device \"%{public}@\" with mtu %d", buf, 0x12u);
  }
  int v7 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
  }
  sub_1006C1100((uint64_t)off_1009F7ED8, v5, &v7);
  sub_1000305AC(buf, v5);
  sub_100639F70(a1, buf);
}

void sub_100639F54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100639F70(uint64_t a1, const unsigned __int8 *a2)
{
  id v3 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a2, (char *)out);
    sub_10004191C(__p, (char *)out);
    if (v6 >= 0) {
      int v4 = __p;
    }
    else {
      int v4 = (void **)__p[0];
    }
    *(_DWORD *)out = 136446210;
    *(void *)&out[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Beginning init sequence for device \"%{public}s\"", out, 0xCu);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
  *(void *)out = 0;
  operator new();
}

void sub_10063A2A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = a10;
  a10 = 0;
  if (v16) {
    sub_100643684((uint64_t)&a10, v16);
  }
  uint64_t v17 = a15;
  a15 = 0;
  if (v17) {
    sub_100643684((uint64_t)&a15, v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063A344(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v16 = v5;
  sub_1000305AC(buf, v5);
  uint64_t v6 = sub_1000308C0(a1 + 192, buf);
  int v7 = qword_100A19E88;
  if (a1 + 200 != v6 && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uint8_t buf = 136446210;
    *(void *)&uint8_t buf[4] = "fCommandSchedulerMap.find(device) == fCommandSchedulerMap.end()";
    _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
    int v7 = qword_100A19E88;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint8_t buf = 138543618;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "GattGateway device \"%{public}@\" is connected with Gatt handle 0x%x", buf, 0x12u);
  }
  *(_WORD *)int v11 = 0;
  v15[0] = 0;
  v15[1] = 0;
  memset(v12, 0, sizeof(v12));
  memset(v13, 0, sizeof(v13));
  int v14 = v15;
  sub_100642DD0((uint64_t)buf, &v16, (uint64_t)v11);
  sub_100643314((uint64_t **)(a1 + 192), buf, (uint64_t)buf);
  sub_1002CBCC8((uint64_t)v20, v20[1]);
  sub_100642EC4(v19);
  sub_100642EC4(v18);
  sub_1002CBCC8((uint64_t)&v14, v15[0]);
  sub_100642EC4(v13);
  sub_100642EC4(v12);
  sub_1000305AC(buf, v16);
  uint64_t v8 = sub_10063A704(a1 + 192, buf);
  *(_WORD *)uint64_t v8 = a3;
  *(void *)uint8_t buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  sub_1000305AC(buf, v16);
  sub_100643578((uint64_t **)(a1 + 248), buf);
  uint64_t v9 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8))(v9) && *(unsigned char *)(a1 + 244))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
    }
    if (!sub_1006C3C08((uint64_t)off_1009F7ED8, v16))
    {
      __int16 v10 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v11 = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "GattGateway initSqequence on deviceConnected", v11, 2u);
      }
      *(unsigned char *)(v8 + 105) = 1;
      sub_100639E14(a1, v16, 24);
    }
  }
}

void sub_10063A640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26,char a27)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10063A684(uint64_t a1)
{
  return a1;
}

uint64_t sub_10063A6C4(uint64_t a1)
{
  return a1;
}

uint64_t sub_10063A704(uint64_t a1, unsigned __int8 *uu1)
{
  uint64_t v4 = 0;
  uint64_t v2 = *sub_10004A0BC(a1, &v4, uu1);
  if (!v2) {
    abort();
  }
  return v2 + 48;
}

void sub_10063A740(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v5) = 138543362;
    *(void *)((char *)&v5 + 4) = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "GattGateway device \"%{public}@\" is disconnected", (uint8_t *)&v5, 0xCu);
  }
  sub_10063A864(a1, v3);
  sub_1000305AC(&v5, v3);
  sub_1006435C0((uint64_t **)(a1 + 192), (unsigned __int8 *)&v5);
  sub_10063A974(a1, v3);
  long long v5 = 0uLL;
  sub_1000305AC(&v5, v3);
  sub_100643578((uint64_t **)(a1 + 248), (unsigned __int8 *)&v5);
}

void sub_10063A844(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10063A864(uint64_t a1, void *a2)
{
  id v3 = a2;
  sub_1000305AC(uu2, v3);
  uint64_t v4 = (uint64_t **)(a1 + 168);
  if (a1 + 176 != sub_1000308C0(a1 + 168, uu2))
  {
    sub_1000305AC(uu2, v3);
    int v7 = uu2;
    long long v5 = sub_100643A10(v4, uu2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v7);
    uint64_t v6 = v5 + 7;
    sub_1000486F0((uint64_t)(v5 + 6), (void *)v5[7]);
    *(v6 - 1) = v6;
    void *v6 = 0;
    v6[1] = 0;
    sub_1000305AC(uu2, v3);
    sub_100643578(v4, uu2);
  }
}

void sub_10063A954(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10063A974(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009FB240 != -1) {
    dispatch_once(&qword_1009FB240, &stru_1009BCC88);
  }
  int v3 = sub_1004C085C(qword_1009FB238, v2);
  uint64_t v47 = 0;
  int v48 = 0;
  sub_1000305AC(&v56, v2);
  sub_10063B7D4(a1, (unsigned __int8 *)&v56, 0, &v47);
  uint64_t v4 = v47;
  if (v47)
  {
    long long v60 = xmmword_1007BA5B4;
    int v61 = 0;
    sub_100035F98(&v56, (__n128 *)&v60);
    long long v58 = xmmword_1007BA604;
    int v59 = 0;
    sub_100035F98(&__p, (__n128 *)&v58);
    uint64_t v5 = sub_1004F5388(v4, (unsigned __int8 *)&v56, (unsigned __int8 *)&__p);
    __n128 v56 = 0uLL;
    unint64_t v57 = 0;
    __n128 __p = 0uLL;
    uint64_t v55 = 0;
    if (!sub_1004F1F74(v4, 0, (void **)&__p))
    {
      uint64_t v6 = (void *)__p.n128_u64[0];
      if (__p.n128_u64[0] != __p.n128_u64[1])
      {
        uint64_t v44 = v5;
        do
        {
          uint64_t v7 = *v6;
          *(_OWORD *)uint8_t buf = *(_OWORD *)(*v6 + 72);
          LODWORD(v51) = *(_DWORD *)(v7 + 88);
          sub_100035F98((__n128 *)v52, (__n128 *)buf);
          uint64_t v8 = (_OWORD *)v56.n128_u64[1];
          if (v56.n128_u64[1] >= v57)
          {
            unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v56.n128_u64[1] - v56.n128_u64[0]) >> 2);
            unint64_t v12 = v11 + 1;
            if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
              abort();
            }
            if (0x999999999999999ALL * ((uint64_t)(v57 - v56.n128_u64[0]) >> 2) > v12) {
              unint64_t v12 = 0x999999999999999ALL * ((uint64_t)(v57 - v56.n128_u64[0]) >> 2);
            }
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v57 - v56.n128_u64[0]) >> 2) >= 0x666666666666666) {
              unint64_t v13 = 0xCCCCCCCCCCCCCCCLL;
            }
            else {
              unint64_t v13 = v12;
            }
            if (v13) {
              int v14 = (char *)sub_10003767C((uint64_t)&v57, v13);
            }
            else {
              int v14 = 0;
            }
            char v15 = &v14[20 * v11];
            long long v16 = *(_OWORD *)v52;
            *((_DWORD *)v15 + 4) = v53;
            *(_OWORD *)char v15 = v16;
            uint64_t v17 = (char *)v56.n128_u64[1];
            unint64_t v18 = v56.n128_u64[0];
            unint64_t v19 = (unint64_t)v15;
            if (v56.n128_u64[1] != v56.n128_u64[0])
            {
              do
              {
                long long v20 = *(_OWORD *)(v17 - 20);
                *(_DWORD *)(v19 - 4) = *((_DWORD *)v17 - 1);
                *(_OWORD *)(v19 - 20) = v20;
                v19 -= 20;
                v17 -= 20;
              }
              while (v17 != (char *)v18);
              uint64_t v17 = (char *)v56.n128_u64[0];
            }
            unint64_t v10 = (unint64_t)(v15 + 20);
            v56.n128_u64[0] = v19;
            v56.n128_u64[1] = (unint64_t)(v15 + 20);
            unint64_t v57 = (unint64_t)&v14[20 * v13];
            if (v17) {
              operator delete(v17);
            }
          }
          else
          {
            long long v9 = *(_OWORD *)v52;
            *(_DWORD *)(v56.n128_u64[1] + 16) = v53;
            *uint64_t v8 = v9;
            unint64_t v10 = (unint64_t)v8 + 20;
          }
          v56.n128_u64[1] = v10;
          if (*v6) {
            (*(void (**)(void))(*(void *)*v6 + 8))(*v6);
          }
          ++v6;
        }
        while (v6 != (void *)__p.n128_u64[1]);
        uint64_t v6 = (void *)__p.n128_u64[0];
        uint64_t v5 = v44;
      }
      __p.n128_u64[1] = (unint64_t)v6;
      memset(buf, 0, sizeof(buf));
      uint64_t v51 = 0;
      sub_1004B8FC4((uint64_t)buf, v2, (uint64_t)&v56);
      if (qword_1009FB260 != -1) {
        dispatch_once(&qword_1009FB260, &stru_1009BCD48);
      }
      sub_1000504D8();
    }
    if (v3)
    {
      char v21 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint8_t buf = 138543362;
        *(void *)&uint8_t buf[4] = v2;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Keeping database for paired device \"%{public}@\"", buf, 0xCu);
      }
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
      }
      uint64_t v23 = sub_100030DCC((uint64_t)off_1009F7ED8, v2, 0);
      if (v5 || BYTE6(v23) && (BYTE6(v23) != 1 || (~v23 & 0xC00000000000) != 0))
      {
        sub_1006386B4(a1, v2);
      }
      else
      {
        int v24 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)uint8_t buf = 138543362;
          *(void *)&uint8_t buf[4] = v2;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "Keeping database for public/static device \"%{public}@\"", buf, 0xCu);
        }
        memset(buf, 0, sizeof(buf));
        uuid_clear(buf);
        unsigned __int16 v25 = 0;
        char v26 = (const unsigned __int8 *)(a1 + 224);
        int v27 = 0x7FFFFFFF;
        while (1)
        {
          uint64_t v28 = *(const unsigned __int8 **)(a1 + 216);
          if (v28 != v26)
          {
            do
            {
              if (qword_1009FB240 != -1) {
                dispatch_once(&qword_1009FB240, &stru_1009BCC88);
              }
              uint64_t v29 = qword_1009FB238;
              int v30 = sub_100031234(v28 + 32);
              LOBYTE(v29) = sub_1004C085C(v29, v30);

              if ((v29 & 1) == 0)
              {
                if (qword_1009FB240 != -1) {
                  dispatch_once(&qword_1009FB240, &stru_1009BCC88);
                }
                uint64_t v31 = qword_1009FB238;
                char v32 = sub_100031234(v28 + 32);
                LOBYTE(v31) = sub_1004C063C(v31, v32);

                ++v25;
                if ((v31 & 1) == 0)
                {
                  int v46 = 0;
                  if (qword_1009FB240 != -1) {
                    dispatch_once(&qword_1009FB240, &stru_1009BCC88);
                  }
                  uint64_t v33 = qword_1009FB238;
                  sub_1000305AC(v49, v2);
                  if (!sub_1004C06DC(v33, v49, &v46))
                  {
                    if (v46 == 1)
                    {
                      if (qword_1009F7EE0 != -1) {
                        dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
                      }
                      long long v37 = off_1009F7ED8;
                      int v38 = sub_100031234(v28 + 32);
                      int v36 = sub_1006BBB14((uint64_t)v37, v38);
                    }
                    else if (v46 == 2)
                    {
                      if (qword_1009F7EE0 != -1) {
                        dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
                      }
                      int v34 = off_1009F7ED8;
                      uint64_t v35 = sub_100031234(v28 + 32);
                      int v36 = sub_1006BBA88((uint64_t)v34, v35);
                    }
                    else
                    {
                      __n128 v39 = qword_100A19E88;
                      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)int v52 = 138543362;
                        *(void *)&v52[4] = v2;
                        _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "Cannot update last connected time for device %{public}@ as no transport was found", v52, 0xCu);
                      }
                      int v36 = 0;
                    }
                    if (uuid_is_null(buf) || v36 < v27)
                    {
                      uuid_copy(buf, v28 + 32);
                      int v27 = v36;
                    }
                  }
                }
              }
              long long v40 = (const unsigned __int8 *)*((void *)v28 + 1);
              if (v40)
              {
                do
                {
                  int v41 = v40;
                  long long v40 = *(const unsigned __int8 **)v40;
                }
                while (v40);
              }
              else
              {
                do
                {
                  int v41 = (const unsigned __int8 *)*((void *)v28 + 2);
                  BOOL v42 = *(void *)v41 == (void)v28;
                  uint64_t v28 = v41;
                }
                while (!v42);
              }
              uint64_t v28 = v41;
            }
            while (v41 != v26);
          }
          if (*(unsigned __int16 *)(a1 + 240) >= v25 || uuid_is_null(buf)) {
            break;
          }
          __n128 v43 = sub_100031234(buf);
          sub_1006386B4(a1, v43);
        }
      }
    }
    if (__p.n128_u64[0])
    {
      __p.n128_u64[1] = __p.n128_u64[0];
      operator delete((void *)__p.n128_u64[0]);
    }
    if (v56.n128_u64[0])
    {
      v56.n128_u64[1] = v56.n128_u64[0];
      operator delete((void *)v56.n128_u64[0]);
    }
  }
  else
  {
    uint64_t v22 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
    {
      v56.n128_u32[0] = 138543362;
      *(unint64_t *)((char *)v56.n128_u64 + 4) = (unint64_t)v2;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_INFO, "Database not found for device \"%{public}@\"", (uint8_t *)&v56, 0xCu);
    }
  }
  if (v48) {
    sub_10008A294(v48);
  }
}

void sub_10063B138(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,uint64_t a28,void *a29,uint64_t a30)
{
  if (__p) {
    operator delete(__p);
  }
  if (a29) {
    operator delete(a29);
  }
  if (a16) {
    sub_10008A294(a16);
  }

  _Unwind_Resume(a1);
}

void sub_10063B204(uint64_t a1, void *a2, int a3, int a4)
{
  id v7 = a2;
  uint64_t v8 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = 138543618;
    id v21 = v7;
    __int16 v22 = 1024;
    int v23 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "GattGateway device \"%{public}@\" is ready with mtu %d", (uint8_t *)&v20, 0x12u);
  }
  sub_1000305AC(&v20, v7);
  if (a1 + 200 == sub_1000308C0(a1 + 192, (unsigned __int8 *)&v20))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100788CEC();
    }
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009BCD08);
    }
    unint64_t v12 = off_1009F7EB8;
    sub_1000305AC(&v20, v7);
    if (sub_100683CFC((uint64_t)v12, (unsigned __int8 *)&v20, 3u)
      && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100788C84();
    }
  }
  else
  {
    sub_1000305AC(&v20, v7);
    uint64_t v9 = sub_10063A704(a1 + 192, (unsigned __int8 *)&v20);
    if (*(_WORD *)v9)
    {
      if (a3)
      {
        int v10 = *(unsigned __int16 *)(a1 + 242);
        if (*(_WORD *)(a1 + 242))
        {
          unint64_t v11 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
          {
            int v20 = 67109120;
            LODWORD(v21) = v10;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Warning: MTU override to %d", (uint8_t *)&v20, 8u);
          }
          a4 = v10;
        }
      }
      else
      {
        a4 = 0;
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
      }
      if (sub_1006C3C08((uint64_t)off_1009F7ED8, v7))
      {
        uint64_t v14 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = 138543362;
          id v21 = v7;
          char v15 = "Device %{public}@ connected, LE GATT disabled, blocking all GATT client communications";
          long long v16 = v14;
          uint32_t v17 = 12;
LABEL_31:
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v20, v17);
        }
      }
      else
      {
        uint64_t v18 = sub_100017768();
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v18 + 8))(v18) || !*(unsigned char *)(a1 + 244))
        {
          *(unsigned char *)(v9 + 105) = 1;
          sub_100639E14(a1, v7, a4);
        }
        uint64_t v19 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v20) = 0;
          char v15 = "GattGateway initSqequence on deviceConnected, skipping for linkReady ";
          long long v16 = v19;
          uint32_t v17 = 2;
          goto LABEL_31;
        }
      }
    }
    else
    {
      unint64_t v13 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
      {
        LOWORD(v20) = 0;
        _os_log_fault_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_FAULT, "Gatt session handle is invalid", (uint8_t *)&v20, 2u);
        unint64_t v13 = qword_100A19E88;
      }
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100788D2C();
      }
    }
  }
}

void sub_10063B58C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10063B5B0(uint64_t a1@<X0>, void *a2@<X1>, char **a3@<X8>)
{
  id v5 = a2;
  a3[1] = 0;
  a3[2] = 0;
  *a3 = 0;
  sub_1000305AC(&v21, v5);
  uint64_t v19 = 0;
  int v20 = 0;
  sub_10063B7D4(a1, (unsigned __int8 *)&v21, 0, &v19);
  if (v19)
  {
    id v21 = 0;
    __int16 v22 = 0;
    uint64_t v23 = 0;
    sub_1004F1E04(v19, (void **)&v21);
    uint64_t v6 = v22;
    if (v22 != v21)
    {
      sub_10063B978((void **)a3, v22 - v21);
      uint64_t v6 = v21;
      if (v21 != v22)
      {
        id v7 = a3 + 2;
        uint64_t v8 = a3[1];
        do
        {
          uint64_t v9 = *v6;
          if ((unint64_t)v8 >= *v7)
          {
            uint64_t v10 = (v8 - *a3) >> 3;
            if ((unint64_t)(v10 + 1) >> 61) {
              abort();
            }
            uint64_t v11 = *v7 - (void)*a3;
            uint64_t v12 = v11 >> 2;
            if (v11 >> 2 <= (unint64_t)(v10 + 1)) {
              uint64_t v12 = v10 + 1;
            }
            if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v13 = v12;
            }
            if (v13) {
              uint64_t v14 = (char *)sub_1000405F8((uint64_t)(a3 + 2), v13);
            }
            else {
              uint64_t v14 = 0;
            }
            char v15 = &v14[8 * v10];
            *(void *)char v15 = v9;
            uint64_t v8 = v15 + 8;
            uint32_t v17 = *a3;
            long long v16 = a3[1];
            if (v16 != *a3)
            {
              do
              {
                uint64_t v18 = *((void *)v16 - 1);
                v16 -= 8;
                *((void *)v15 - 1) = v18;
                v15 -= 8;
              }
              while (v16 != v17);
              long long v16 = *a3;
            }
            *a3 = v15;
            a3[1] = v8;
            a3[2] = &v14[8 * v13];
            if (v16) {
              operator delete(v16);
            }
          }
          else
          {
            *(void *)uint64_t v8 = v9;
            v8 += 8;
          }
          a3[1] = v8;
          ++v6;
        }
        while (v6 != v22);
        uint64_t v6 = v21;
      }
    }
    if (v6)
    {
      __int16 v22 = v6;
      operator delete(v6);
    }
  }
  if (v20) {
    sub_10008A294(v20);
  }
}

void sub_10063B780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    sub_10008A294(a10);
  }
  char v15 = *(void **)v13;
  if (*(void *)v13)
  {
    *(void *)(v13 + 8) = v15;
    operator delete(v15);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10063B7D4@<X0>(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, int a3@<W2>, void *a4@<X8>)
{
  uint64_t v8 = (uint64_t **)(a1 + 216);
  *a4 = 0;
  a4[1] = 0;
  uint64_t result = sub_1000308C0(a1 + 216, a2);
  if (a1 + 224 == result)
  {
    if (!a3) {
      return result;
    }
    sub_100644EF0(&v15);
    long long v16 = a2;
    uint64_t v10 = sub_100644D5C(v8, a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v16);
    long long v11 = v15;
    long long v15 = 0uLL;
    uint64_t v12 = (std::__shared_weak_count *)v10[7];
    *((_OWORD *)v10 + 3) = v11;
    if (v12)
    {
      sub_10008A294(v12);
      if (*((void *)&v15 + 1)) {
        sub_10008A294(*((std::__shared_weak_count **)&v15 + 1));
      }
    }
    *(void *)&long long v15 = a2;
    uint64_t result = (uint64_t)sub_100644D5C(v8, a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v15);
  }
  uint64_t v14 = *(void *)(result + 48);
  uint64_t v13 = *(void *)(result + 56);
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  *a4 = v14;
  a4[1] = v13;
  if (v14)
  {
    *(void *)&long long v15 = 0;
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009BCD08);
    }
    uint64_t result = sub_1006856B8((uint64_t)off_1009F7EB8, a2, &v15);
    if (result)
    {
      LOBYTE(v16) = 0;
      sub_10001B8E0(&v16);
      *(_WORD *)(v14 + 146) = sub_100197960((unsigned __int16 *)v15);
      return (uint64_t)sub_10001B8AC(&v16);
    }
    else
    {
      *(_WORD *)(v14 + 146) = 0;
    }
  }
  return result;
}

void sub_10063B934(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, char a12)
{
  if (a10) {
    sub_10008A294(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063B978(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)sub_1000405F8(v3, a2);
    id v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    long long v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void sub_10063BA1C(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X2>, char **a4@<X8>)
{
  id v7 = a3;
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  sub_1000305AC(v31, v7);
  uint64_t v8 = sub_10063BC34(a1, v31);
  if (v8)
  {
    uint64_t v9 = *(void **)(v8 + 112);
    uint64_t v10 = (void *)(v8 + 120);
    if (v9 != (void *)(v8 + 120))
    {
      do
      {
        long long v11 = (void *)v9[6];
        if (v11)
        {
          uint64_t v12 = v9 + 6;
          do
          {
            unint64_t v13 = v11[4];
            BOOL v14 = v13 >= a2;
            if (v13 >= a2) {
              long long v15 = v11;
            }
            else {
              long long v15 = v11 + 1;
            }
            if (v14) {
              uint64_t v12 = v11;
            }
            long long v11 = (void *)*v15;
          }
          while (*v15);
          if (v12 != v9 + 6 && v12[4] <= a2)
          {
            uint32_t v17 = a4[1];
            unint64_t v16 = (unint64_t)a4[2];
            if ((unint64_t)v17 >= v16)
            {
              uint64_t v19 = *a4;
              uint64_t v20 = v17 - *a4;
              if (v20 <= -3) {
                abort();
              }
              uint64_t v21 = v20 >> 1;
              unint64_t v22 = v16 - (void)v19;
              if (v22 <= (v20 >> 1) + 1) {
                unint64_t v23 = v21 + 1;
              }
              else {
                unint64_t v23 = v22;
              }
              if (v22 >= 0x7FFFFFFFFFFFFFFELL) {
                uint64_t v24 = 0x7FFFFFFFFFFFFFFFLL;
              }
              else {
                uint64_t v24 = v23;
              }
              if (v24)
              {
                unsigned __int16 v25 = (char *)sub_1002C5544((uint64_t)(a4 + 2), v24);
                uint64_t v19 = *a4;
                uint32_t v17 = a4[1];
              }
              else
              {
                unsigned __int16 v25 = 0;
              }
              char v26 = &v25[2 * v21];
              *(_WORD *)char v26 = *((_WORD *)v9 + 16);
              uint64_t v18 = v26 + 2;
              while (v17 != v19)
              {
                __int16 v27 = *((_WORD *)v17 - 1);
                v17 -= 2;
                *((_WORD *)v26 - 1) = v27;
                v26 -= 2;
              }
              *a4 = v26;
              a4[1] = v18;
              a4[2] = &v25[2 * v24];
              if (v19) {
                operator delete(v19);
              }
            }
            else
            {
              *(_WORD *)uint32_t v17 = *((_WORD *)v9 + 16);
              uint64_t v18 = v17 + 2;
            }
            a4[1] = v18;
          }
        }
        uint64_t v28 = (void *)v9[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            uint64_t v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (void *)v9[2];
            BOOL v30 = *v29 == (void)v9;
            uint64_t v9 = v29;
          }
          while (!v30);
        }
        uint64_t v9 = v29;
      }
      while (v29 != v10);
    }
  }
}

void sub_10063BC04(_Unwind_Exception *a1)
{
  uint64_t v4 = *(void **)v2;
  if (*(void *)v2)
  {
    *(void *)(v2 + 8) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10063BC34(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v3 = sub_100031234(a2);
  sub_1000305AC(uu2, v3);
  uint64_t v4 = sub_1000308C0(a1 + 192, uu2);

  if (a1 + 200 == v4) {
    return 0;
  }
  else {
    return v4 + 48;
  }
}

void sub_10063BCD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10063BCE8(uint64_t a1, const unsigned __int8 *a2, uint64_t *a3, int a4)
{
  if (!*(void *)(*a3 + 24))
  {
    uint64_t v8 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100788E0C(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
  uint64_t v16 = sub_10063BC34(a1, a2);
  if (!v16) {
    return 312;
  }
  uint64_t v17 = v16;
  if (a4)
  {
    if (*(unsigned char *)(v16 + 104))
    {
      if (!*(void *)(v16 + 48))
      {
        uint64_t v18 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
          sub_100788D94(v18, v19, v20, v21, v22, v23, v24, v25);
        }
      }
      uint64_t v26 = *(void *)(v17 + 16);
      __int16 v27 = (uint64_t *)(v26 + 8 * (*(void *)(v17 + 40) >> 9));
      uint64_t v28 = *v27;
      uint64_t v29 = *v27 + 8 * (*(void *)(v17 + 40) & 0x1FFLL);
      if (*(void *)(v17 + 24) == v26) {
        uint64_t v29 = 0;
      }
      uint64_t v30 = v29 - v28;
      uint64_t v31 = (v29 - v28) >> 3;
      if (v30 < -7)
      {
        unint64_t v37 = 510 - v31;
        uint64_t v33 = (char *)&v27[-(v37 >> 9)];
        uint64_t v34 = *(void *)v33;
        uint64_t v35 = ~v37 & 0x1FFLL;
      }
      else
      {
        unint64_t v32 = v31 + 1;
        uint64_t v33 = (char *)&v27[v32 >> 9];
        uint64_t v34 = *(void *)v33;
        uint64_t v35 = v32 & 0x1FF;
      }
      sub_10063FEAC((void **)(v17 + 8), v33, v34 + 8 * v35, a3);
    }
    else
    {
      sub_1006402A0(v16 + 8, a3);
    }
  }
  else
  {
    sub_100640324((void *)(v16 + 8), a3);
  }
  if (*(unsigned char *)(v17 + 105))
  {
    int v38 = sub_100031234(a2);
    sub_1006403B0(a1, v38, v17);
  }
  return 0;
}

void sub_10063BE7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10063BE8C(uint64_t a1, void *a2, unsigned __int8 *a3, unsigned int a4)
{
  id v7 = a2;
  sub_1000305AC(&v18, v7);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_10063B7D4(a1, (unsigned __int8 *)&v18, 0, &v16);
  if (v16)
  {
    uint64_t v8 = sub_1004F52BC(v16, a4);
    uint64_t v9 = v8;
    if (v8)
    {
      uint64_t v10 = v8[1];
      int v11 = *(_DWORD *)(v10 + 20);
      __n128 v18 = *(__n128 *)(v10 + 4);
      LODWORD(v19) = v11;
      sub_100035F98(&v22, &v18);
      int v21 = 0;
      long long v20 = xmmword_1007C0120;
      if (sub_10022A44C(v12, (unsigned __int8 *)&v20))
      {
        __n128 v22 = 0uLL;
        int v23 = 0;
        __n128 v18 = *(__n128 *)((char *)v9 + 76);
        LODWORD(v19) = *((_DWORD *)v9 + 23);
        sub_100035F98(&v22, &v18);
        uint64_t v13 = sub_100012C44(a1 + 144, a3);
        if (a1 + 152 != v13)
        {
          __n128 v18 = 0uLL;
          uint64_t v19 = 0;
          sub_100643700((uint64_t)&v18, v13 + 56);
          BOOL v14 = &v18.n128_i8[8] != (__int8 *)sub_10042D258((uint64_t)&v18, (unsigned __int8 *)&v22);
          sub_1000486F0((uint64_t)&v18, (void *)v18.n128_u64[1]);
          goto LABEL_9;
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
  {
    sub_100788A98();
  }
  BOOL v14 = 0;
LABEL_9:
  if (v17) {
    sub_10008A294(v17);
  }

  return v14;
}

void sub_10063C030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, char a11, void *a12)
{
  sub_1000486F0((uint64_t)&a11, a12);
  if (a10) {
    sub_10008A294(a10);
  }

  _Unwind_Resume(a1);
}

void sub_10063C080(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  id v5 = a2;
  sub_1000305AC(uu1, v5);
  id v7 = uu1;
  uint64_t v6 = sub_100643A10((uint64_t **)(a1 + 168), uu1, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v7);
  sub_100045F18((uint64_t **)v6 + 6, a3, (uint64_t)a3);
}

void sub_10063C12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_10063C144(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  id v5 = a3;
  sub_1000305AC(uu2, v5);
  uint64_t v6 = (uint64_t **)(a1 + 168);
  if (a1 + 176 == sub_1000308C0(a1 + 168, uu2)
    || (sub_1000305AC(uu1, v5),
        int v11 = uu1,
        !sub_100643A10(v6, uu1, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v11)[8]))
  {
    BOOL v9 = 0;
  }
  else
  {
    sub_1000305AC(uu2, v5);
    *(void *)uu1 = uu2;
    id v7 = sub_100643A10(v6, uu2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)uu1);
    uint64_t v8 = (uint64_t *)sub_10042D258((uint64_t)(v7 + 6), a2);
    sub_1000305AC(uu1, v5);
    int v11 = uu1;
    BOOL v9 = sub_100643A10(v6, uu1, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)&v11)+ 7 != v8;
  }

  return v9;
}

void sub_10063C298(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10063C2BC(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4, void *a5)
{
  id v8 = a5;
  uint64_t v9 = sub_10042D258(a1 + 72, a2);
  uint64_t v10 = sub_10042D258(a1 + 96, a2);
  if (v8) {
    BOOL v11 = sub_10063C144(a1, a2, v8);
  }
  else {
    BOOL v11 = 0;
  }
  long long v18 = xmmword_1007BA730;
  int v19 = 0;
  BOOL v12 = sub_10022A44C(a2, (unsigned __int8 *)&v18);
  BOOL v13 = a1 + 80 != v9;
  if (a1 + 80 == v9) {
    int v14 = 0;
  }
  else {
    int v14 = a3;
  }
  if (a1 + 104 != v10) {
    BOOL v13 = 1;
  }
  unsigned int v15 = (!v13 && !v11) | v14 | v11 & a3;
  if (v12 && v11) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = v15;
  }

  return v16;
}

void sub_10063C3E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10063C400(uint64_t a1@<X0>, void *a2@<X1>, unsigned int a3@<W2>, __n128 *a4@<X8>)
{
  id v7 = a2;
  sub_1000305AC(v10, v7);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_10063B7D4(a1, v10, 0, &v8);
  if (v8)
  {
    sub_1004F5808(v8, a3, a4);
    if (v9) {
      sub_10008A294(v9);
    }
  }
  else
  {
    if (v9) {
      sub_10008A294(v9);
    }
    sub_10071D13C(a4);
  }
}

void sub_10063C4CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10063C4FC(uint64_t a1, void *a2, long long **a3, int a4, uint64_t a5, int a6)
{
  id v9 = a2;
  int v52 = 0;
  int v53 = 0;
  unint64_t v54 = 0;
  BOOL v11 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      if (qword_1009F7F10 != -1) {
        dispatch_once(&qword_1009F7F10, &stru_1009BCD28);
      }
      if (sub_10063C2BC(qword_1009F7F08, (unsigned __int8 *)v11, a4, v8, v9))
      {
        BOOL v12 = v53;
        if ((unint64_t)v53 >= v54)
        {
          unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v53 - (unsigned char *)v52) >> 2);
          unint64_t v16 = v15 + 1;
          if (v15 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          if (0x999999999999999ALL * ((uint64_t)(v54 - (void)v52) >> 2) > v16) {
            unint64_t v16 = 0x999999999999999ALL * ((uint64_t)(v54 - (void)v52) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - (void)v52) >> 2) >= 0x666666666666666) {
            unint64_t v17 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v17 = v16;
          }
          if (v17) {
            long long v18 = (char *)sub_10003767C((uint64_t)&v54, v17);
          }
          else {
            long long v18 = 0;
          }
          int v19 = &v18[4 * ((v53 - (unsigned char *)v52) >> 2)];
          long long v20 = *v11;
          *((_DWORD *)v19 + 4) = *((_DWORD *)v11 + 4);
          *(_OWORD *)int v19 = v20;
          __n128 v22 = (char *)v52;
          int v21 = v53;
          int v23 = &v18[20 * v15];
          if (v53 != v52)
          {
            do
            {
              long long v24 = *(_OWORD *)(v21 - 20);
              *((_DWORD *)v23 - 1) = *((_DWORD *)v21 - 1);
              *(_OWORD *)(v23 - 20) = v24;
              v23 -= 20;
              v21 -= 20;
            }
            while (v21 != v22);
            int v21 = (char *)v52;
          }
          int v14 = (long long *)(v19 + 20);
          int v52 = v23;
          int v53 = v19 + 20;
          unint64_t v54 = (unint64_t)&v18[20 * v17];
          if (v21) {
            operator delete(v21);
          }
        }
        else
        {
          long long v13 = *v11;
          *((_DWORD *)v53 + 4) = *((_DWORD *)v11 + 4);
          *(_OWORD *)BOOL v12 = v13;
          int v14 = (long long *)(v12 + 20);
        }
        int v53 = (char *)v14;
      }
      BOOL v11 = (long long *)((char *)v11 + 20);
    }
    while (v11 != v10);
  }
  id v49 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v25 = (unsigned __int8 *)v52;
  uint64_t v26 = v53;
  if (sub_10063C9F8(v9, a6))
  {
    sub_10003366C(&v49, (long long *)v52, (long long *)v53, 0xCCCCCCCCCCCCCCCDLL * ((v53 - (unsigned char *)v52) >> 2));
  }
  else if (v52 != v53)
  {
    do
    {
      if (a1 + 128 == sub_10042D258(a1 + 120, v25))
      {
        uint64_t v29 = v50;
        if (v50 >= (_DWORD *)v51)
        {
          unint64_t v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v50 - (unsigned char *)v49) >> 2);
          unint64_t v33 = v32 + 1;
          if (v32 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          if (0x999999999999999ALL * ((v51 - (unsigned char *)v49) >> 2) > v33) {
            unint64_t v33 = 0x999999999999999ALL * ((v51 - (unsigned char *)v49) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((v51 - (unsigned char *)v49) >> 2) >= 0x666666666666666) {
            unint64_t v34 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34) {
            uint64_t v35 = (char *)sub_10003767C((uint64_t)&v51, v34);
          }
          else {
            uint64_t v35 = 0;
          }
          int v36 = &v35[20 * v32];
          long long v37 = *(_OWORD *)v25;
          *((_DWORD *)v36 + 4) = *((_DWORD *)v25 + 4);
          *(_OWORD *)int v36 = v37;
          __n128 v39 = (char *)v49;
          int v38 = (char *)v50;
          long long v40 = v36;
          if (v50 != v49)
          {
            do
            {
              long long v41 = *(_OWORD *)(v38 - 20);
              *((_DWORD *)v40 - 1) = *((_DWORD *)v38 - 1);
              *(_OWORD *)(v40 - 20) = v41;
              v40 -= 20;
              v38 -= 20;
            }
            while (v38 != v39);
            int v38 = (char *)v49;
          }
          uint64_t v31 = v36 + 20;
          id v49 = v40;
          uint64_t v50 = v36 + 20;
          uint64_t v51 = &v35[20 * v34];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          long long v30 = *(_OWORD *)v25;
          uint8_t v50[4] = *((_DWORD *)v25 + 4);
          *uint64_t v29 = v30;
          uint64_t v31 = (_DWORD *)v29 + 5;
        }
        uint64_t v50 = v31;
      }
      else
      {
        __int16 v27 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
        {
          sub_1000417A8((uint64_t)v25, &__p);
          p_p = &__p;
          if (v48 < 0) {
            p_p = __p;
          }
          *(_DWORD *)uint8_t buf = 136446466;
          __n128 v56 = p_p;
          __int16 v57 = 2114;
          id v58 = v9;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_INFO, "deviceHasAnyService skipping %{public}s because %{public}@ link is not encrypted", buf, 0x16u);
          if (v48 < 0) {
            operator delete(__p);
          }
        }
      }
      v25 += 20;
    }
    while (v25 != (unsigned __int8 *)v26);
  }
  __n128 __p = 0;
  uint64_t v47 = 0;
  sub_1000305AC(buf, v9);
  sub_10063B7D4(a1, buf, 0, &__p);
  if (__p) {
    uint64_t v42 = sub_1004F1CF0((uint64_t)__p, (unsigned __int8 **)&v49);
  }
  else {
    uint64_t v42 = 0;
  }
  if (v47) {
    sub_10008A294(v47);
  }
  if (v49)
  {
    uint64_t v50 = v49;
    operator delete(v49);
  }
  if (v52)
  {
    int v53 = (char *)v52;
    operator delete(v52);
  }

  return v42;
}

void sub_10063C990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (a15) {
    sub_10008A294(a15);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a20) {
    operator delete(a20);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10063C9F8(void *a1, int a2)
{
  id v3 = a1;
  if (a2)
  {
    int v9 = 0xFFFF;
    if (qword_1009FB240 != -1) {
      dispatch_once(&qword_1009FB240, &stru_1009BCC88);
    }
    uint64_t v4 = qword_1009FB238;
    sub_1000305AC(v11, v3);
    sub_1004C06DC(v4, v11, &v9);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009BCD08);
    }
    id v5 = off_1009F7EB8;
    sub_1000305AC(v10, v3);
    unsigned int v6 = sub_1000306F0((uint64_t)v5, v10);
    if (v9 == 1) {
      uint64_t v7 = 1;
    }
    else {
      uint64_t v7 = v6;
    }
  }
  else
  {
    uint64_t v7 = 1;
  }

  return v7;
}

void sub_10063CB10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10063CB2C(uint64_t a1, unsigned __int8 **a2)
{
  id v4 = objc_alloc_init((Class)NSMutableArray);
  id v5 = *(const unsigned __int8 **)(a1 + 216);
  if (v5 != (const unsigned __int8 *)(a1 + 224))
  {
    do
    {
      unsigned int v6 = sub_100031234(v5 + 32);
      uint64_t v11 = 0;
      BOOL v12 = 0;
      sub_1000305AC(v13, v6);
      sub_10063B7D4(a1, v13, 0, &v11);
      if (v11 && sub_1004F1CF0(v11, a2)) {
        [v4 addObject:v6];
      }
      if (v12) {
        sub_10008A294(v12);
      }

      uint64_t v7 = (unsigned __int8 *)*((void *)v5 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = (const unsigned __int8 **)v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (const unsigned __int8 **)*((void *)v5 + 2);
          BOOL v9 = *v8 == v5;
          id v5 = (const unsigned __int8 *)v8;
        }
        while (!v9);
      }
      id v5 = (const unsigned __int8 *)v8;
    }
    while (v8 != (const unsigned __int8 **)(a1 + 224));
  }

  return v4;
}

void sub_10063CC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10008A294(a11);
  }

  _Unwind_Resume(a1);
}

id sub_10063CC9C(uint64_t a1)
{
  id v2 = objc_alloc_init((Class)NSMutableArray);
  id v3 = *(const unsigned __int8 **)(a1 + 216);
  id v4 = (const unsigned __int8 **)(a1 + 224);
  if (v3 != (const unsigned __int8 *)(a1 + 224))
  {
    do
    {
      id v5 = sub_100031234(v3 + 32);
      [v2 addObject:v5];

      unsigned int v6 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = (const unsigned __int8 **)v6;
          unsigned int v6 = *(unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (const unsigned __int8 **)*((void *)v3 + 2);
          BOOL v8 = *v7 == v3;
          id v3 = (const unsigned __int8 *)v7;
        }
        while (!v8);
      }
      id v3 = (const unsigned __int8 *)v7;
    }
    while (v7 != v4);
  }

  return v2;
}

void sub_10063CD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10063CD6C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4)
{
  unsigned int v6 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a4, (char *)out);
    sub_10004191C(__p, (char *)out);
    uint64_t v7 = v10 >= 0 ? __p : (void **)__p[0];
    out[0] = 136446210;
    *(void *)&out[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Finding all primary services on device \"%{public}s\"", (uint8_t *)out, 0xCu);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v12 = 0;
  memset(out, 0, sizeof(out));
  sub_10003AE4C(a3, (uint64_t)__p);
  BOOL v8 = sub_100031234(a4);
  sub_1004B8F8C((uint64_t)out, (long long *)__p, 1, v8, 0);

  if (v10 < 0) {
    operator delete(__p[0]);
  }
  if (qword_1009FB260 != -1) {
    dispatch_once(&qword_1009FB260, &stru_1009BCD48);
  }
  sub_1000504D8();
  operator new();
}

void sub_10063D014(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  uint64_t v17 = a9;
  a9 = 0;
  if (v17) {
    sub_100643684((uint64_t)&a9, v17);
  }
  uint64_t v18 = (uint64_t)__p;
  __n128 __p = 0;
  if (v18) {
    sub_100643684((uint64_t)&__p, v18);
  }
  sub_1002F7FBC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_10063D0B0(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  sub_10004C67C((uint64_t)&v16);
  for (uint64_t i = *a5; i != a5[1]; i += 20)
  {
    sub_1000417A8(i, out);
    uint64_t v9 = sub_10003AB28((uint64_t)v17);
    sub_10003AB28(v9);
    if (SHIBYTE(out[2]) < 0) {
      operator delete(out[0]);
    }
  }
  char v10 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = &v31;
    std::stringbuf::str();
    if (v32 < 0) {
      uint64_t v11 = (long long *)v31;
    }
    memset(out, 0, 37);
    uuid_unparse_upper(a4, (char *)out);
    sub_10004191C(__p, (char *)out);
    if (v15 >= 0) {
      uint64_t v12 = __p;
    }
    else {
      uint64_t v12 = (void **)__p[0];
    }
    *(_DWORD *)uint8_t buf = 136446466;
    uint64_t v35 = v11;
    __int16 v36 = 2082;
    long long v37 = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Finding all primary services with UUID(s) %{public}s on device \"%{public}s\"", buf, 0x16u);
    if (v15 < 0) {
      operator delete(__p[0]);
    }
    if (v32 < 0) {
      operator delete((void *)v31);
    }
  }
  memset(out, 0, 56);
  sub_10003AE4C(a3, (uint64_t)&v31);
  long long v13 = sub_100031234(a4);
  sub_1004B8F8C((uint64_t)out, &v31, 1, v13, (uint64_t)a5);

  if (v32 < 0) {
    operator delete((void *)v31);
  }
  if (qword_1009FB260 != -1) {
    dispatch_once(&qword_1009FB260, &stru_1009BCD48);
  }
  sub_1000504D8();
  operator new();
}

void sub_10063D588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_100742518((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10063D66C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6)
{
  uint64_t v9 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    if (v12 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 67109634;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a6;
    *(_WORD *)&out[14] = 2082;
    *(void *)&out[16] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Finding included services in range [0x%04x, 0x%04x] on device \"%{public}s\"", (uint8_t *)out, 0x18u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063D8A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063D904(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6)
{
  uint64_t v9 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    if (v12 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 67109634;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a6;
    *(_WORD *)&out[14] = 2082;
    *(void *)&out[16] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Finding all characteristics in range [0x%04x, 0x%04x] on device \"%{public}s\"", (uint8_t *)out, 0x18u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063DB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063DB9C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5)
{
  uint64_t v7 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    if (v10 >= 0) {
      BOOL v8 = __p;
    }
    else {
      BOOL v8 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(void *)&out[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Finding all descriptors for characteristic handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063DDD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063DE3C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, int a6)
{
  uint64_t v9 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    if (v12 >= 0) {
      char v10 = __p;
    }
    else {
      char v10 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 67109634;
    *(_DWORD *)&out[4] = a6;
    *(_WORD *)&out[8] = 1024;
    *(_DWORD *)&out[10] = a5;
    *(_WORD *)&out[14] = 2082;
    *(void *)&out[16] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Reading value for characteristic value handle 0x%04x, char handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x18u);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063E070(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063E0D4(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5)
{
  uint64_t v7 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    if (v10 >= 0) {
      BOOL v8 = __p;
    }
    else {
      BOOL v8 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(void *)&out[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reading value for descriptor handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063E2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063E350(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5, uint64_t a6, int a7)
{
  char v10 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    if (a5) {
      uint64_t v11 = "with";
    }
    else {
      uint64_t v11 = "without";
    }
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    if (v14 >= 0) {
      char v12 = __p;
    }
    else {
      char v12 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 136446722;
    *(void *)&out[4] = v11;
    *(_WORD *)&_DWORD out[12] = 1024;
    *(_DWORD *)&out[14] = a7;
    *(_WORD *)&out[18] = 2082;
    *(void *)&out[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Writing value %{public}s response to characteristic handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x1Cu);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063E58C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = a11;
  a11 = 0;
  if (v16) {
    sub_100643684((uint64_t)&a11, v16);
  }
  uint64_t v17 = a15;
  a15 = 0;
  if (v17) {
    sub_100643684((uint64_t)&a15, v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063E5F0(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, int a5)
{
  uint64_t v7 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    if (v10 >= 0) {
      BOOL v8 = __p;
    }
    else {
      BOOL v8 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 67109378;
    *(_DWORD *)&out[4] = a5;
    *(_WORD *)&out[8] = 2082;
    *(void *)&out[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Writing value to descriptor handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x12u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063E7FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063E860(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, unsigned int a5, int a6)
{
  uint64_t v28 = a3;
  unsigned __int16 v27 = a5;
  char v10 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = a6 ? "Subscribing" : "Unsubscribing";
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    char v12 = v26 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446722;
    *(void *)&out[4] = v11;
    *(_WORD *)&_DWORD out[12] = 1024;
    *(_DWORD *)&out[14] = a5;
    *(_WORD *)&out[18] = 2082;
    *(void *)&out[20] = v12;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "%{public}s to updates of characteristic handle 0x%04x on device \"%{public}s\"", (uint8_t *)out, 0x1Cu);
    if (v26 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v13 = sub_10063BC34(a1, a4);
  if (!v13) {
    goto LABEL_31;
  }
  uint64_t v16 = *(void *)(v13 + 120);
  uint64_t v14 = v13 + 120;
  uint64_t v15 = v16;
  uint64_t v17 = (uint64_t **)(v14 - 8);
  if (!v16) {
    goto LABEL_22;
  }
  uint64_t v18 = v14;
  do
  {
    unsigned int v19 = *(unsigned __int16 *)(v15 + 32);
    BOOL v20 = v19 >= a5;
    if (v19 >= a5) {
      long long v21 = (uint64_t *)v15;
    }
    else {
      long long v21 = (uint64_t *)(v15 + 8);
    }
    if (v20) {
      uint64_t v18 = v15;
    }
    uint64_t v15 = *v21;
  }
  while (*v21);
  if (v18 == v14 || *(unsigned __int16 *)(v18 + 32) > a5) {
LABEL_22:
  }
    uint64_t v18 = v14;
  if (a6)
  {
    *(void *)uuid_string_t out = &v27;
    long long v22 = sub_100643CA8((uint64_t **)(v14 - 8), &v27, (uint64_t)&unk_1007BE9D0, (_WORD **)out);
    sub_100051620(v22 + 5, (unint64_t *)&v28, &v28);
    goto LABEL_31;
  }
  if (v18 == v14) {
LABEL_31:
  }
    operator new();
  sub_1000517A4(v18 + 40, (unint64_t *)&v28);
  if (!*(void *)(v18 + 56))
  {
    sub_1003B9B30(v17, v18);
    goto LABEL_31;
  }
  long long v23 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uuid_string_t out = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Swallowing unsubscription event as there are other session(s) still subscribed", (uint8_t *)out, 2u);
  }
  return 913;
}

void sub_10063EBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t v16 = a9;
  a9 = 0;
  if (v16) {
    sub_100643684((uint64_t)&a9, v16);
  }
  uint64_t v17 = a15;
  a15 = 0;
  if (v17) {
    sub_100643684((uint64_t)&a15, v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063EC3C(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4, uint64_t *a5)
{
  uint64_t v7 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a4, out);
    sub_10004191C(__p, out);
    if (v11 >= 0) {
      BOOL v8 = __p;
    }
    else {
      BOOL v8 = (void **)__p[0];
    }
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v9 = a5;
    }
    else {
      uint64_t v9 = (uint64_t *)*a5;
    }
    *(_DWORD *)uuid_string_t out = 136446466;
    *(void *)&out[4] = v8;
    *(_WORD *)&_DWORD out[12] = 2080;
    *(void *)&out[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Setting GAP name on device \"%{public}s\" to %s", (uint8_t *)out, 0x16u);
    if (v11 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063EE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10063EEAC(uint64_t a1, const unsigned __int8 *a2, uint64_t *a3)
{
  unsigned int v6 = qword_100A19E88;
  if (!*(void *)(*a3 + 24) && os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = "holder->command";
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)out, 0xCu);
    unsigned int v6 = qword_100A19E88;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(a2, out);
    sub_10004191C(__p, out);
    uint64_t v7 = v13 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Enqueuing a delayed command for device \"%{public}s\"", (uint8_t *)out, 0xCu);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = sub_10063BC34(a1, a2);
  if (!v8) {
    return 312;
  }
  uint64_t v9 = v8;
  sub_100640324((void *)(v8 + 56), a3);
  if (*(void *)(v9 + 96) == 1)
  {
    *(unsigned char *)(v9 + 106) = 1;
    *(void *)uuid_string_t out = 0;
    *(void *)&out[8] = 0;
    uuid_copy((unsigned __int8 *)out, a2);
    uint64_t v10 = sub_100019878();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3321888768;
    void v14[2] = sub_100640470;
    v14[3] = &unk_1009BCAE0;
    uuid_copy(v15, (const unsigned __int8 *)out);
    sub_1004AFF58(v10, 1000, v14);
  }
  return 0;
}

BOOL sub_10063F0C4(uint64_t a1, __n128 *a2, unsigned __int8 *uu1)
{
  uint64_t v13 = 0;
  v14[0] = 0;
  v14[1] = 0;
  *(void *)uuid_string_t out = uu1;
  id v5 = sub_100643E2C((uint64_t **)(a1 + 248), uu1, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out);
  sub_100643F68((uint64_t)&v13, (uint64_t)(v5 + 6));
  __n128 v24 = *a2;
  unsigned __int32 v25 = a2[1].n128_u32[0];
  sub_100035F98((__n128 *)out, &v24);
  unsigned int v6 = (void **)sub_10042D258((uint64_t)&v13, (unsigned __int8 *)out);
  uint64_t v7 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu1, out);
    uint64_t v8 = __p;
    sub_10004191C(__p, out);
    if (v12 < 0) {
      uint64_t v8 = (void **)__p[0];
    }
    __n128 v15 = *a2;
    unsigned __int32 v16 = a2[1].n128_u32[0];
    sub_100035F98(&v17, &v15);
    sub_1000417A8((uint64_t)&v17, out);
    if (out[23] >= 0) {
      uint64_t v9 = out;
    }
    else {
      uint64_t v9 = *(char **)out;
    }
    *(_DWORD *)uint8_t buf = 136315650;
    unsigned int v19 = v8;
    __int16 v20 = 2080;
    long long v21 = v9;
    __int16 v22 = 1024;
    BOOL v23 = v14 == v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "shouldNotifyBuiltInService device:%s service:%s notify:%d", buf, 0x1Cu);
    if (out[23] < 0) {
      operator delete(*(void **)out);
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1000486F0((uint64_t)&v13, v14[0]);
  return v14 == v6;
}

void sub_10063F2B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1000486F0((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_10063F2EC(uint64_t a1, __n128 *a2, unsigned __int8 *uu1)
{
  uint64_t v13 = 0;
  v14[0] = 0;
  v14[1] = 0;
  id v5 = (uint64_t **)(a1 + 248);
  *(void *)uuid_string_t out = uu1;
  unsigned int v6 = sub_100643E2C((uint64_t **)(a1 + 248), uu1, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out);
  sub_100643F68((uint64_t)&v13, (uint64_t)(v6 + 6));
  __n128 v22 = *a2;
  unsigned __int32 v23 = a2[1].n128_u32[0];
  sub_100035F98((__n128 *)out, &v22);
  sub_100045F18(&v13, (unsigned __int8 *)out, (uint64_t)out);
  *(void *)uuid_string_t out = uu1;
  uint64_t v7 = (uint64_t **)(sub_100643E2C(v5, uu1, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out)+ 6);
  if (v7 != &v13) {
    sub_100643FC0(v7, v13, v14);
  }
  uint64_t v8 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
  {
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu1, out);
    uint64_t v9 = __p;
    sub_10004191C(__p, out);
    if (v12 < 0) {
      uint64_t v9 = (void **)__p[0];
    }
    __n128 v15 = *a2;
    unsigned __int32 v16 = a2[1].n128_u32[0];
    sub_100035F98(&v17, &v15);
    sub_1000417A8((uint64_t)&v17, out);
    if (out[23] >= 0) {
      uint64_t v10 = out;
    }
    else {
      uint64_t v10 = *(char **)out;
    }
    *(_DWORD *)uint8_t buf = 136315394;
    unsigned int v19 = v9;
    __int16 v20 = 2080;
    long long v21 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "didNotifyBuiltInService device:%s service:%s", buf, 0x16u);
    if (out[23] < 0) {
      operator delete(*(void **)out);
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_1000486F0((uint64_t)&v13, v14[0]);
}

void sub_10063F4E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1000486F0((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

void sub_10063F528(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BCCA8);
  }
  uint64_t v3 = sub_100030F10((uint64_t)off_1009F7EF8, *(void *)(a1 + 48), 0);
  if (v3)
  {
    uint64_t v4 = v3;
    char v5 = sub_100478B2C(v3, 12);
    LOBYTE(v4) = sub_100478B2C(v4, 31);
    uint64_t v6 = sub_100019878();
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 3221225472;
    uint64_t v10[2] = sub_10063F660;
    _OWORD v10[3] = &unk_1009BCAC0;
    uint64_t v12 = v2;
    char v16 = v5;
    id v7 = *(id *)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 48);
    uint64_t v8 = *(void *)(a1 + 56);
    id v11 = v7;
    uint64_t v13 = v8;
    uint64_t v14 = v9;
    uint64_t v15 = *(void *)(a1 + 64);
    char v17 = v4;
    sub_100013018(v6, v10);
  }
}

void sub_10063F64C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10063F660(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 40);
    uint64_t v3 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v4 = *(void *)(a1 + 32);
      buf.n128_u32[0] = 138412290;
      *(unint64_t *)((char *)buf.n128_u64 + 4) = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "The device \"%@\" supports Classic HRM", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v5 = sub_100373068();
    (*(void (**)(uint64_t, void))(*(void *)v5 + 64))(v5, *(void *)(a1 + 32));
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
    }
    uint64_t v6 = off_1009F7ED8;
    id v7 = *(void **)(a1 + 32);
    sub_10004191C(__p, "HKQuantityTypeIdentifierHeartRate");
    sub_1006BC69C((uint64_t)v6, v7, (unsigned __int8 *)__p);
    if (v21 < 0) {
      operator delete(__p[0]);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
    }
    uint64_t v8 = off_1009F7ED8;
    uint64_t v9 = *(void **)(a1 + 32);
    sub_10004191C(v18, "FitnessClassic");
    sub_1006BC69C((uint64_t)v8, v9, (unsigned __int8 *)v18);
    if (v19 < 0) {
      operator delete(v18[0]);
    }
    sub_10063F2EC(v2, (__n128 *)&xmmword_1007BA708, *(unsigned __int8 **)(a1 + 48));
    char v17 = 0;
    sub_10001B8E0(&v17);
    unint64_t v10 = sub_10022A5E0(*(void *)(a1 + 56));
    int v15 = v10;
    __int16 v16 = WORD2(v10);
    id v11 = (unsigned __int16 *)sub_100197B9C((uint64_t)&v15);
    if (v11)
    {
      __int16 v12 = sub_100197960(v11);
      if ((sub_1001167C4(v12 & 0xFFF, **(_WORD **)(*(void *)(a1 + 64) + 8), *(_WORD *)(*(void *)(a1 + 64) + 48)) & 1) == 0)
      {
        uint64_t v13 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v14 = sub_100031234(*(const unsigned __int8 **)(a1 + 48));
          buf.n128_u32[0] = 138412290;
          *(unint64_t *)((char *)buf.n128_u64 + 4) = (unint64_t)v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Failed to redact HRM reports for device %@", (uint8_t *)&buf, 0xCu);
        }
      }
    }
    sub_10001B8AC(&v17);
  }
  if (*(unsigned char *)(a1 + 73))
  {
    __n128 buf = 0uLL;
    int v25 = 0;
    long long v22 = xmmword_1007BA708;
    int v23 = 0;
    sub_100035F98(&buf, (__n128 *)&v22);
    if (qword_1009F7F10 != -1) {
      dispatch_once(&qword_1009F7F10, &stru_1009BCD28);
    }
    sub_10063C080(qword_1009F7F08, *(void **)(a1 + 32), (unsigned __int8 *)&buf);
  }
}

void sub_10063F94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
}

void sub_10063F9A4(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  unint64_t v4 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a3, (char *)out);
    sub_10004191C(__p, (char *)out);
    if (v7 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Beginning GAP name update sequence for device \"%{public}s\"", out, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063FBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10063FC28(uint64_t a1, uint64_t a2, const unsigned __int8 *a3)
{
  unint64_t v4 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    memset(out, 0, 37);
    uuid_unparse_upper(a3, (char *)out);
    sub_10004191C(__p, (char *)out);
    if (v7 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = (void **)__p[0];
    }
    *(_DWORD *)uuid_string_t out = 136446210;
    *(void *)&out[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Beginning delete bond sequence for device \"%{public}s\"", out, 0xCu);
    if (v7 < 0) {
      operator delete(__p[0]);
    }
  }
  operator new();
}

void sub_10063FE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v14 = a9;
  a9 = 0;
  if (v14) {
    sub_100643684((uint64_t)&a9, v14);
  }
  uint64_t v15 = a13;
  a13 = 0;
  if (v15) {
    sub_100643684((uint64_t)&a13, v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10063FEAC(void **a1, char *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v6 = (unint64_t)a1[4];
  char v7 = a1[1];
  uint64_t v8 = a1[2];
  uint64_t v9 = &v7[8 * (v6 >> 9)];
  if (v8 == v7) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = *(void *)v9 + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  if (a3 == v10) {
    unint64_t v11 = 0;
  }
  else {
    unint64_t v11 = ((a3 - *(void *)a2) >> 3) + ((a2 - v9) << 6) - ((v10 - *(void *)v9) >> 3);
  }
  __int16 v12 = (char *)a1[5];
  unint64_t v13 = (unint64_t)&v12[-v11];
  if (v11 >= (unint64_t)&v12[-v11])
  {
    if (v8 == v7) {
      uint64_t v21 = 0;
    }
    else {
      uint64_t v21 = ((v8 - v7) << 6) - 1;
    }
    if ((char *)v21 == &v12[v6])
    {
      sub_100644580(a1);
      __int16 v12 = (char *)a1[5];
      unint64_t v13 = (unint64_t)&v12[-v11];
    }
    if (v12 == (char *)v11)
    {
      unint64_t v22 = (unint64_t)a1[4] + v11;
      uint64_t v23 = *(void *)((char *)a1[1] + ((v22 >> 6) & 0x3FFFFFFFFFFFFF8));
      uint64_t v24 = *a4;
      *a4 = 0;
      *(void *)(v23 + 8 * (v22 & 0x1FF)) = v24;
      a1[5] = (void *)(v11 + 1);
      goto LABEL_47;
    }
    unint64_t v25 = (unint64_t)&v12[(void)a1[4]];
    char v26 = (char *)a1[1];
    unsigned __int16 v27 = (char **)&v26[8 * (v25 >> 9)];
    uint64_t v28 = *v27;
    long long v29 = &(*v27)[8 * (v25 & 0x1FF)];
    if (a1[2] == v26) {
      long long v29 = 0;
    }
    v62.n128_u64[0] = (unint64_t)v27;
    v62.n128_u64[1] = (unint64_t)v29;
    uint64_t v30 = (v29 - v28) >> 3;
    if (v29 - v28 < 9)
    {
      unint64_t v48 = 512 - v30;
      char v32 = &v27[-(v48 >> 9)];
      unint64_t v33 = &(*v32)[8 * (~(_WORD)v48 & 0x1FF)];
    }
    else
    {
      unint64_t v31 = v30 - 1;
      char v32 = &v27[v31 >> 9];
      unint64_t v33 = &(*v32)[8 * (v31 & 0x1FF)];
    }
    uint64_t v49 = *(void *)v33;
    *(void *)unint64_t v33 = 0;
    *(void *)long long v29 = v49;
    a1[5] = v12 + 1;
    if (v13 >= 2)
    {
      uint64_t v50 = sub_100644898((uint64_t)&v62, v13);
      __n128 v63 = 0u;
      __n128 v64 = 0u;
      sub_100644B00(v50, v51, (void **)v32, v33, v62.n128_u64[0], v62.n128_i64[1], &v63);
      long long v29 = (char *)v64.n128_u64[1];
      unsigned __int16 v27 = (char **)v64.n128_u64[0];
      __n128 v62 = v64;
    }
    if (v29 == *v27)
    {
      v62.n128_u64[0] = (unint64_t)(v27 - 1);
      long long v29 = *(v27 - 1) + 4096;
    }
    uint64_t v18 = (uint64_t *)(v29 - 8);
    v62.n128_u64[1] = (unint64_t)(v29 - 8);
    uint64_t v52 = *a4;
    *a4 = 0;
    uint64_t v53 = *((void *)v29 - 1);
    *((void *)v29 - 1) = v52;
    if (v53) {
      goto LABEL_46;
    }
    goto LABEL_47;
  }
  if (v6)
  {
    if (v11) {
      goto LABEL_10;
    }
LABEL_27:
    unint64_t v34 = (unint64_t)a1[4];
    uint64_t v35 = (char *)a1[1];
    __int16 v36 = &v35[8 * (v34 >> 9)];
    uint64_t v37 = *(void *)v36 + 8 * (v34 & 0x1FF);
    if (a1[2] == v35) {
      uint64_t v37 = 0;
    }
    if (v37 == *(void *)v36) {
      uint64_t v37 = *((void *)v36 - 1) + 4096;
    }
    uint64_t v38 = *a4;
    *a4 = 0;
    *(void *)(v37 - 8) = v38;
    uint64_t v39 = (uint64_t)a1[5] + 1;
    a1[4] = (void *)(v34 - 1);
    a1[5] = (void *)v39;
    goto LABEL_47;
  }
  sub_10064426C(a1);
  if (!v11) {
    goto LABEL_27;
  }
LABEL_10:
  unint64_t v14 = (unint64_t)a1[4];
  uint64_t v15 = (char *)a1[1];
  __int16 v16 = (uint64_t *)&v15[8 * (v14 >> 9)];
  uint64_t v17 = *v16;
  if (a1[2] == v15) {
    uint64_t v18 = 0;
  }
  else {
    uint64_t v18 = (uint64_t *)(*v16 + 8 * ((unint64_t)a1[4] & 0x1FF));
  }
  v62.n128_u64[0] = (unint64_t)&v15[8 * (v14 >> 9)];
  v62.n128_u64[1] = (unint64_t)v18;
  uint64_t v19 = ((uint64_t)v18 - v17) >> 3;
  if ((uint64_t)v18 - v17 < 9) {
    __int16 v20 = (uint64_t *)(v16[-((unint64_t)(512 - v19) >> 9)] + 8 * (~(512 - (_WORD)v19) & 0x1FF));
  }
  else {
    __int16 v20 = (uint64_t *)(*(uint64_t *)((char *)v16 + (((unint64_t)(v19 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
  }
                    + 8 * ((v19 - 1) & 0x1FF));
  uint64_t v40 = *v18;
  *uint64_t v18 = 0;
  *__int16 v20 = v40;
  uint64_t v41 = (uint64_t)a1[5] + 1;
  a1[4] = (void *)(v14 - 1);
  a1[5] = (void *)v41;
  if (v11 != 1)
  {
    uint64_t v42 = (uint64_t)v18 - *v16;
    uint64_t v43 = v42 >> 3;
    if (v42 < -7)
    {
      unint64_t v54 = 510 - v43;
      uint64_t v45 = (uint64_t **)&v16[-(v54 >> 9)];
      int v46 = *v45;
      uint64_t v47 = ~v54 & 0x1FFLL;
    }
    else
    {
      unint64_t v44 = v43 + 1;
      uint64_t v45 = (uint64_t **)&v16[v44 >> 9];
      int v46 = *v45;
      uint64_t v47 = v44 & 0x1FF;
    }
    uint64_t v55 = &v46[v47];
    __n128 v56 = (uint64_t **)sub_1002B4F40((uint64_t)&v62, v11);
    __n128 v63 = v62;
    sub_100644900(v45, v55, v56, v57, (uint64_t **)&v63);
    uint64_t v18 = (uint64_t *)v63.n128_u64[1];
    __n128 v62 = v63;
  }
  uint64_t v58 = *a4;
  *a4 = 0;
  uint64_t v53 = *v18;
  *uint64_t v18 = v58;
  if (v53) {
LABEL_46:
  }
    sub_100643684((uint64_t)v18, v53);
LABEL_47:
  int v59 = a1[1];
  if (a1[2] == v59) {
    uint64_t v60 = 0;
  }
  else {
    uint64_t v60 = v59[(unint64_t)a1[4] >> 9] + 8 * ((unint64_t)a1[4] & 0x1FF);
  }
  v63.n128_u64[0] = (unint64_t)&v59[(unint64_t)a1[4] >> 9];
  v63.n128_u64[1] = v60;
  return sub_1002B4F40((uint64_t)&v63, v11);
}

void sub_1006402A0(uint64_t a1, uint64_t *a2)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (!v4)
  {
    sub_10064426C((void **)a1);
    unint64_t v4 = *(void *)(a1 + 32);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = (void *)(v5 + 8 * (v4 >> 9));
  uint64_t v7 = *v6 + 8 * (v4 & 0x1FF);
  if (*(void *)(a1 + 16) == v5) {
    uint64_t v7 = 0;
  }
  if (v7 == *v6) {
    uint64_t v7 = *(v6 - 1) + 4096;
  }
  uint64_t v8 = *a2;
  *a2 = 0;
  *(void *)(v7 - 8) = v8;
  uint64_t v9 = *(void *)(a1 + 40) + 1;
  *(void *)(a1 + 32) = v4 - 1;
  *(void *)(a1 + 40) = v9;
}

void sub_100640324(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 6) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    sub_100644580(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  uint64_t v9 = *(void *)(v5 + ((v8 >> 6) & 0x3FFFFFFFFFFFFF8));
  uint64_t v10 = *a2;
  *a2 = 0;
  *(void *)(v9 + 8 * (v8 & 0x1FF)) = v10;
  a1[5] = v7 + 1;
}

void sub_1006403B0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (!*(unsigned char *)(a3 + 105))
  {
    uint64_t v6 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100788EFC(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  if (!*(void *)(a3 + 48))
  {
    unint64_t v14 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100788E84(v14, v15, v16, v17, v18, v19, v20, v21);
    }
  }
  if (!*(unsigned char *)(a3 + 104)) {
    sub_10064065C(a1, v5, a3);
  }
}

void sub_100640460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100640470(uint64_t a1)
{
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BCD28);
  }
  uint64_t v2 = qword_1009F7F08;

  sub_1006404D4(v2, (const unsigned __int8 *)(a1 + 32));
}

void sub_1006404D4(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v4 = sub_10063BC34(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    if (*(void *)(v4 + 96))
    {
      if (!*(unsigned char *)(v4 + 105)
        || !*(unsigned char *)(v4 + 106)
        || (sub_100640324((void *)(v4 + 8), (uint64_t *)(*(void *)(*(void *)(v4 + 64) + ((*(void *)(v4 + 88) >> 6) & 0x3FFFFFFFFFFFFF8))+ 8 * (*(void *)(v4 + 88) & 0x1FFLL))), sub_100640798((void *)(v5 + 56)), sub_100031234(a2), uint64_t v6 = objc_claimAutoreleasedReturnValue(), sub_1006403B0(a1, v6, v5), v6, *(void *)(v5 + 96)))
      {
        *(unsigned char *)(v5 + 106) = 1;
        memset(dst, 0, sizeof(dst));
        uuid_copy(dst, a2);
        uint64_t v7 = sub_100019878();
        v8[0] = _NSConcreteStackBlock;
        v8[1] = 3321888768;
        _DWORD v8[2] = sub_100640810;
        v8[3] = &unk_1009BCAE0;
        uuid_copy(v9, dst);
        sub_1004AFF58(v7, 1000, v8);
      }
    }
  }
}

void sub_100640634(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10064064C(uint64_t a1, uint64_t a2)
{
}

void sub_10064065C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  if (*(unsigned char *)(a3 + 104)) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = *(void *)(a3 + 48) == 0;
  }
  if (v6)
  {
    uint64_t v7 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100788F74(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
  uint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)(a3 + 16) + ((*(void *)(a3 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                              + 8 * (*(void *)(a3 + 40) & 0x1FFLL))
                  + 24);
  sub_1000305AC(v18, v5);
  sub_10063B7D4(a1, v18, 1, &v16);
  sub_1006204D0(v15, v5, &v16, *(_WORD *)a3);
  if (v17) {
    sub_10008A294(v17);
  }
  *(unsigned char *)(a3 + 104) = 1;
  *(unsigned char *)(a3 + 106) = 0;
}

void sub_10064076C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10008A294(a11);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100640798(void *a1)
{
  unint64_t v2 = a1[4];
  uint64_t v3 = (uint64_t *)(*(void *)(a1[1] + ((v2 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v2 & 0x1FF));
  uint64_t v4 = *v3;
  *uint64_t v3 = 0;
  if (v4)
  {
    sub_100643684((uint64_t)v3, v4);
    unint64_t v2 = a1[4];
  }
  uint64_t v5 = a1[5] - 1;
  a1[4] = v2 + 1;
  a1[5] = v5;

  return sub_1002CBC00((uint64_t)a1, 1);
}

uint64_t sub_100640810(uint64_t a1)
{
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BCD28);
  }
  uint64_t v2 = qword_1009F7F08;

  return sub_1006404D4(v2, a1 + 32);
}

void sub_100640874(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  *(void *)src = 0;
  uint64_t v16 = 0;
  sub_1000305AC(src, *(void *)(a2 + 16));
  __int16 v7 = *(_WORD *)(a2 + 40);
  uint64_t v8 = sub_100019878();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  uint64_t v10[2] = sub_1006409BC;
  _OWORD v10[3] = &unk_1009BCB18;
  uint64_t v12 = a1;
  uuid_copy(v14, src);
  __int16 v13 = v7;
  id v9 = v5;
  id v11 = v9;
  sub_100013018(v8, v10);
}

void sub_10064098C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned __int16 *sub_1006409BC(uint64_t a1)
{
  uint64_t result = (unsigned __int16 *)sub_10063BC34(*(void *)(a1 + 40), (const unsigned __int8 *)(a1 + 50));
  if (result && *result == *(unsigned __int16 *)(a1 + 48))
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return (unsigned __int16 *)v3();
  }
  return result;
}

void sub_100640A24(uint64_t a1, uint64_t a2)
{
}

void sub_100640A34(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  sub_100040550(&v15, a4);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  uint64_t v10[2] = sub_100640B78;
  _OWORD v10[3] = &unk_1009BCB48;
  void v10[4] = a1;
  void v10[5] = a2;
  int v14 = a3;
  __n128 __dst = 0;
  uint64_t v13 = 0;
  __n128 __p = 0;
  __int16 v7 = v15;
  int64_t v8 = v16 - v15;
  if (v16 != v15)
  {
    sub_1000405B8(&__p, v8 >> 3);
    id v9 = (char *)__dst;
    memmove(__dst, v7, v8);
    __n128 __dst = &v9[8 * (v8 >> 3)];
  }
  sub_100640874(a1, a2, v10);
  if (__p)
  {
    __n128 __dst = __p;
    operator delete(__p);
  }
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
}

void sub_100640B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  uint64_t v19 = *(void **)(v17 - 72);
  if (v19)
  {
    *(void *)(v17 - 64) = v19;
    operator delete(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100640B78(uint64_t a1)
{
  sub_100640BF0(*(void *)(a1 + 32), *(void *)(a1 + 40), *(_DWORD *)(a1 + 72), (void *)(a1 + 48));
  uint64_t v3 = *(void **)(a1 + 48);
  uint64_t v2 = *(void **)(a1 + 56);
  while (v3 != v2)
  {
    if (*v3)
    {
      (*(void (**)(void))(*(void *)*v3 + 8))(*v3);
      uint64_t v2 = *(void **)(a1 + 56);
    }
    ++v3;
  }
}

void sub_100640BF0(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  id v8 = *(id *)(a2 + 16);
  if (a3)
  {
    if (a3 > 255)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
        sub_100789064();
      }
      uint64_t v9 = 1;
    }
    else
    {
      uint64_t v9 = (a3 + 1000);
    }
  }
  else
  {
    if (*a4 != a4[1])
    {
      *(void *)uu1 = 0;
      uint64_t v30 = 0;
      sub_1000305AC(v28, v8);
      sub_10063B7D4(a1, v28, 0, uu1);
      if (*(void *)uu1) {
        sub_1004F5E6C(*(uint64_t *)uu1, (uint64_t)"");
      }
      if (v30) {
        sub_10008A294(v30);
      }
    }
    uint64_t v9 = 0;
  }
  sub_1000305AC(uu1, v8);
  uint64_t v10 = sub_10063A704(a1 + 192, uu1);
  if (!*(void *)(v10 + 48))
  {
    id v11 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100788E84(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  uint64_t v19 = *(void **)(*(void *)(*(void *)(v10 + 16) + ((*(void *)(v10 + 40) >> 6) & 0x3FFFFFFFFFFFFF8))
                   + 8 * (*(void *)(v10 + 40) & 0x1FFLL));
  if (v19[3] != a2)
  {
    uint64_t v20 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_FAULT)) {
      sub_100788FEC(v20, v21, v22, v23, v24, v25, v26, v27);
    }
  }
  if (*v19) {
    (**(void (***)(void, id, void, uint64_t, void *, void))*v19)(*v19, v8, v19[1], v9, a4, v19[2]);
  }
  sub_100640798((void *)(v10 + 8));
  *(unsigned char *)(v10 + 104) = 0;
  if (*(void *)(v10 + 48)) {
    sub_10064065C(a1, v8, v10);
  }
}

void sub_100640E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_10008A294(a13);
  }

  _Unwind_Resume(a1);
}

void *sub_100640E38(uint64_t a1, uint64_t a2)
{
  return sub_100040550((void *)(a1 + 48), a2 + 48);
}

void sub_100640E44(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100640E5C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
}

void sub_100640E64(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100640F30;
  v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_100640F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100640F30(uint64_t a1)
{
}

void sub_100640F3C(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v2 = a1 + 10;
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_1006410B8;
  v4[3] = &unk_1009BCB80;
  id v5 = a2;
  id v3 = v5;
  sub_100640FEC(v2, v4);
}

void sub_100640FD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100640FEC(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    BOOL v6 = v4;
    operator delete(v4);
  }
}

void sub_100641090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006410B8(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32));
}

void sub_1006410E8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = sub_100019878();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1006411BC;
  v8[3] = &unk_100998570;
  uint64_t v10 = a1;
  id v7 = v5;
  id v9 = v7;
  uint64_t v11 = a3;
  sub_100013018(v6, v8);
}

void sub_10064119C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1006411BC(uint64_t a1)
{
}

void sub_1006411CC(os_unfair_lock_s *a1, void *a2, uint64_t a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_100641280;
  v6[3] = &unk_1009BCBA8;
  id v7 = a2;
  uint64_t v8 = a3;
  id v5 = v7;
  sub_100640FEC(a1 + 10, v6);
}

void sub_100641268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100641280(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 8))(a2, *(void *)(a1 + 32), *(void *)(a1 + 40));
}

void sub_1006412B0(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10064137C;
  v6[3] = &unk_100998A38;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_10064135C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_10064137C(uint64_t a1)
{
  uint64_t v1 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 40);
  v2[0] = _NSConcreteStackBlock;
  v2[1] = 3221225472;
  v2[2] = sub_100641420;
  v2[3] = &unk_1009BCB80;
  id v3 = *(id *)(a1 + 32);
  sub_100640FEC(v1, v2);
}

void sub_10064140C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100641420(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 40))(a2, *(void *)(a1 + 32));
}

void sub_100641450(uint64_t a1, void *a2, __int16 a3)
{
  id v5 = a2;
  uint64_t v6 = sub_100019878();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100641524;
  v8[3] = &unk_1009AA5D8;
  uint64_t v10 = a1;
  id v7 = v5;
  id v9 = v7;
  __int16 v11 = a3;
  sub_100013018(v6, v8);
}

void sub_100641504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100641524(uint64_t a1)
{
}

void sub_100641534(os_unfair_lock_s *a1, void *a2, __int16 a3)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_1006415EC;
  v6[3] = &unk_1009BCBD0;
  id v7 = a2;
  __int16 v8 = a3;
  id v5 = v7;
  sub_100640FEC(a1 + 10, v6);
}

void sub_1006415D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006415EC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void))(*(void *)a2 + 24))(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40));
}

void sub_100641620(id a1)
{
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_1009BCD28);
  }

  sub_10064166C();
}

uint64_t sub_10064166C()
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009BCDA0);
  }
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)off_1009F8780 + 272);

  return v0();
}

void sub_1006416E8(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BCD08);
  }
  uint64_t v2 = sub_100686130((uint64_t)off_1009F7EB8, *(void *)(a1 + 32));
  if (v2) {
    goto LABEL_4;
  }
  if (!*(void *)(a1 + 40)) {
    goto LABEL_13;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BCCE8);
  }
  sub_100014B58((uint64_t)off_1009F7ED8, *(void *)(a1 + 40), 0, 1u, 0, 0, (unsigned __int8 *)&v6);
  uint64_t v2 = sub_100031234((const unsigned __int8 *)&v6);
  if (v2)
  {
LABEL_4:
    id v3 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_INFO))
    {
      int v6 = 138543362;
      id v7 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Dispatching indication for device %{public}@", (uint8_t *)&v6, 0xCu);
    }
    if (qword_1009F7F10 != -1) {
      dispatch_once(&qword_1009F7F10, &stru_1009BCD28);
    }
    sub_1006418F0((os_unfair_lock_s *)qword_1009F7F08, v2, *(unsigned __int16 *)(a1 + 80), a1 + 48, v4, *(unsigned __int8 *)(a1 + 82), *(void *)(a1 + 72));
  }
  else
  {
LABEL_13:
    id v5 = qword_100A19E88;
    if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v6) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "incoming indication from a device that is no longer connected. Ignoring.", (uint8_t *)&v6, 2u);
    }
    uint64_t v2 = 0;
  }
}

void sub_1006418D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006418F0(os_unfair_lock_s *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7)
{
  id v12 = a2;
  if (v12)
  {
    uint64_t v68 = 0;
    long long v69 = 0;
    sub_1000305AC(&v73, v12);
    sub_10063B7D4((uint64_t)a1, (unsigned __int8 *)&v73, 0, &v68);
    uint64_t v13 = v68;
    if (v68)
    {
      uint64_t v14 = sub_1004F52BC(v68, a3);
      uint64_t v15 = v14;
      if (!v14) {
        operator new();
      }
      uint64_t v16 = v14[1];
      int v17 = *(_DWORD *)(v16 + 20);
      __n128 v73 = *(__n128 *)(v16 + 4);
      LODWORD(v74[0]) = v17;
      sub_100035F98((__n128 *)uu2, &v73);
      int v93 = 0;
      long long v92 = xmmword_1007C0148;
      if (sub_10022A44C(v18, (unsigned __int8 *)&v92))
      {
        sub_100049EE0((uint64_t)(v15 + 9), a4);
        long long v90 = xmmword_1007BA5B4;
        int v91 = 0;
        sub_100035F98(&v73, (__n128 *)&v90);
        long long v88 = xmmword_1007BA604;
        int v89 = 0;
        sub_100035F98((__n128 *)uu2, (__n128 *)&v88);
        uint64_t v19 = sub_1004F5388(v13, (unsigned __int8 *)&v73, uu2);
        uint64_t v87 = 0;
        long long v85 = 0u;
        long long v86 = 0u;
        long long v83 = 0u;
        long long v84 = 0u;
        long long v81 = 0u;
        long long v82 = 0u;
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        *(_OWORD *)__n128 __p = 0u;
        long long v76 = 0u;
        memset(v74, 0, sizeof(v74));
        __n128 v73 = 0u;
        sub_10004C67C((uint64_t)&v73);
        if (v19 && *(unsigned __int16 *)(v19 + 74) == a3 && sub_100045F00(a4) == 4)
        {
          *(_OWORD *)uu2 = 0u;
          long long v95 = 0u;
          uint64_t v20 = sub_1004BC2E4((uint64_t)uu2, 0, a4);
          uint64_t v21 = sub_1004BC3C8(v20);
          unsigned int v22 = sub_1004BC3C8((uint64_t)uu2);
          uint64_t v23 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 67109890;
            HIDWORD(buf.__r_.__value_.__r.__words[0]) = v21;
            LOWORD(buf.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&buf.__r_.__value_.__r.__words[1] + 2) = v22;
            HIWORD(buf.__r_.__value_.__r.__words[1]) = 2114;
            buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v12;
            __int16 v71 = 1024;
            int v72 = a6;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Received \"service changed\" notification for [0x%04x;0x%04x] for device \"%{public}@\" wakeUp:%d",
              (uint8_t *)&buf,
              0x1Eu);
          }
          sub_1000305AC(&buf, v12);
          if (&a1[50] == (os_unfair_lock_s *)sub_1000308C0((uint64_t)&a1[48], (unsigned __int8 *)&buf))
          {
            uint64_t v55 = qword_100A19E88;
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
              sub_100789238(v21, v22, v55);
            }
          }
          else
          {
            sub_1000305AC(&buf, v12);
            uint64_t v24 = sub_10063A704((uint64_t)&a1[48], (unsigned __int8 *)&buf);
            uint64_t v25 = (uint64_t **)(v24 + 112);
            uint64_t v26 = *(void *)(v24 + 112);
            int v61 = (uint64_t *)(v24 + 120);
            if (v26 != v24 + 120)
            {
              id v60 = v12;
              do
              {
                unsigned int v27 = *(unsigned __int16 *)(v26 + 32);
                if (v27 < v21 || v27 > v22)
                {
                  long long v29 = *(uint64_t **)(v26 + 8);
                  if (v29)
                  {
                    do
                    {
                      uint64_t v30 = v29;
                      long long v29 = (uint64_t *)*v29;
                    }
                    while (v29);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v30 = *(uint64_t **)(v26 + 16);
                      BOOL v31 = *v30 == v26;
                      uint64_t v26 = (uint64_t)v30;
                    }
                    while (!v31);
                  }
                }
                else
                {
                  uint64_t v32 = v21;
                  unint64_t v33 = *(void **)(v26 + 40);
                  if (v33 != (void *)(v26 + 48))
                  {
                    do
                    {
                      sub_100551758(v33[4], &buf);
                      uint64_t v34 = sub_10003AB28((uint64_t)v74);
                      sub_10003AB28(v34);
                      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                        operator delete(buf.__r_.__value_.__l.__data_);
                      }
                      uint64_t v35 = (void *)v33[1];
                      if (v35)
                      {
                        do
                        {
                          __int16 v36 = v35;
                          uint64_t v35 = (void *)*v35;
                        }
                        while (v35);
                      }
                      else
                      {
                        do
                        {
                          __int16 v36 = (void *)v33[2];
                          BOOL v31 = *v36 == (void)v33;
                          unint64_t v33 = v36;
                        }
                        while (!v31);
                      }
                      unint64_t v33 = v36;
                    }
                    while (v36 != (void *)(v26 + 48));
                  }
                  uint64_t v30 = sub_1003B9B30(v25, v26);
                  uint64_t v21 = v32;
                  id v12 = v60;
                }
                uint64_t v26 = (uint64_t)v30;
              }
              while (v30 != v61);
            }
            sub_1004F5900(v13, v21, v22);
            v64[0] = _NSConcreteStackBlock;
            v64[1] = 3221225472;
            v64[2] = sub_10064249C;
            v64[3] = &unk_1009BCC48;
            id v65 = v12;
            __int16 v66 = v21;
            __int16 v67 = v22;
            sub_100640FEC(a1 + 10, v64);
          }
          *(void *)&uu2[8] = &off_100998428;
          if ((void)v95) {
            sub_1000368F4((atomic_uint *)v95);
          }
        }
        else
        {
          sub_1000305AC(uu2, v12);
          if (&a1[50] == (os_unfair_lock_s *)sub_1000308C0((uint64_t)&a1[48], uu2))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
              sub_100789168();
            }
          }
          else
          {
            sub_1000305AC(uu2, v12);
            uint64_t v37 = sub_10063A704((uint64_t)&a1[48], uu2);
            uint64_t v40 = *(void *)(v37 + 120);
            uint64_t v38 = v37 + 120;
            uint64_t v39 = v40;
            if (!v40) {
              goto LABEL_98;
            }
            unsigned __int16 v41 = a3 - 1;
            uint64_t v42 = v38;
            do
            {
              unsigned int v43 = *(unsigned __int16 *)(v39 + 32);
              BOOL v44 = v43 >= v41;
              if (v43 >= v41) {
                uint64_t v45 = (uint64_t *)v39;
              }
              else {
                uint64_t v45 = (uint64_t *)(v39 + 8);
              }
              if (v44) {
                uint64_t v42 = v39;
              }
              uint64_t v39 = *v45;
            }
            while (*v45);
            if (v42 != v38 && *(unsigned __int16 *)(v42 + 32) <= v41)
            {
              if (*(void *)(v42 + 56))
              {
                int v47 = a6;
                unint64_t v48 = *(void **)(v42 + 40);
                uint64_t v49 = (void *)(v42 + 48);
                if (v48 != (void *)(v42 + 48))
                {
                  do
                  {
                    unint64_t v50 = v48[4];
                    if (qword_1009F8788 != -1) {
                      dispatch_once(&qword_1009F8788, &stru_1009BCDA0);
                    }
                    sub_1002FE3C8((uint64_t)off_1009F8780, v12, v50, a3, a4, a7);
                    sub_100551758(v50, (std::string *)uu2);
                    uint64_t v51 = sub_10003AB28((uint64_t)v74);
                    sub_10003AB28(v51);
                    if (SBYTE7(v95) < 0) {
                      operator delete(*(void **)uu2);
                    }
                    uint64_t v52 = (void *)v48[1];
                    if (v52)
                    {
                      do
                      {
                        uint64_t v53 = v52;
                        uint64_t v52 = (void *)*v52;
                      }
                      while (v52);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v53 = (void *)v48[2];
                        BOOL v31 = *v53 == (void)v48;
                        unint64_t v48 = v53;
                      }
                      while (!v31);
                    }
                    unint64_t v48 = v53;
                  }
                  while (v53 != v49);
                }
                *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
                std::ostream::sentry::sentry();
                a6 = v47;
                unint64_t v54 = (char *)v74 + *(void *)(*(void *)&v74[0] - 24);
                if ((v54[32] & 5) == 0)
                {
                  (*(void (**)(unsigned __int8 *__return_ptr))(**((void **)v54 + 5) + 32))(uu2);
                  if (v96 == -1) {
                    std::ios_base::clear((std::ios_base *)((char *)v74 + *(void *)(*(void *)&v74[0] - 24)), *(_DWORD *)((char *)&v74[2] + *(void *)(*(void *)&v74[0] - 24)) | 4);
                  }
                }
                std::ostream::sentry::~sentry();
                uu2[0] = 0;
                sub_10003AB28((uint64_t)v74);
              }
            }
            else
            {
LABEL_98:
              if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR)) {
                sub_1007891D0();
              }
            }
          }
        }
        if (a6)
        {
          uint64_t v56 = sub_1003731C0();
          std::stringbuf::str();
          if ((SBYTE7(v95) & 0x80u) == 0) {
            __int16 v57 = uu2;
          }
          else {
            __int16 v57 = *(unsigned __int8 **)uu2;
          }
          uint64_t v58 = *(atomic_uint **)(a4 + 8);
          __n128 v62 = &off_100998428;
          __n128 v63 = v58;
          if (v58) {
            sub_100037354((uint64_t)v58);
          }
          (*(void (**)(uint64_t, uint64_t, unsigned __int8 *, id, uint64_t (***)()))(*(void *)v56 + 40))(v56, 4, v57, v12, &v62);
          __n128 v62 = &off_100998428;
          if (v63) {
            sub_1000368F4(v63);
          }
          if (SBYTE7(v95) < 0) {
            operator delete(*(void **)uu2);
          }
        }
        *(unint64_t *)((char *)v73.n128_u64
        *(void *)&v74[0] = v59;
        if (SHIBYTE(v76) < 0) {
          operator delete(__p[1]);
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        std::ios::~ios();
      }
      else
      {
        int v46 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
        {
          sub_100613B58(v15, (std::string *)&v73);
          sub_1007892C8((uint64_t)v12, (char *)&v73, uu2, v46);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
    {
      sub_100789100();
    }
    if (v69) {
      sub_10008A294(v69);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_ERROR))
  {
    sub_1007890CC();
  }
}

void sub_100642328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,char a32)
{
  std::ostream::sentry::~sentry();
  sub_100742518((uint64_t)&a32);
  if (a24) {
    sub_10008A294(a24);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10064249C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a2 + 16))(a2, *(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 40), *(unsigned __int16 *)(a1 + 42));
}

void sub_1006424D4(void *a1)
{
  uint64_t v1 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: ------------------- GATT Gateway --------------------", buf, 2u);
    uint64_t v1 = qword_100A19E88;
  }
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "statedump: Active commands:", buf, 2u);
  }
  uint64_t v2 = (const unsigned __int8 *)a1[24];
  uint64_t v53 = (const unsigned __int8 *)(a1 + 25);
  if (v2 != (const unsigned __int8 *)(a1 + 25))
  {
    do
    {
      if (v2[152])
      {
        id v3 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(v2 + 32, (char *)buf);
          sub_10004191C(__p, (char *)buf);
          uint64_t v4 = v60 >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v4;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
          if (v60 < 0) {
            operator delete(*(void **)__p);
          }
        }
      }
      id v5 = (const unsigned __int8 *)*((void *)v2 + 1);
      if (v5)
      {
        do
        {
          int v6 = v5;
          id v5 = *(const unsigned __int8 **)v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (const unsigned __int8 *)*((void *)v2 + 2);
          BOOL v7 = *(void *)v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v53);
  }
  __int16 v8 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "statedump: Pending commands:", buf, 2u);
  }
  id v9 = (const unsigned __int8 *)a1[24];
  if (v9 != v53)
  {
    do
    {
      if (*((void *)v9 + 12))
      {
        uint64_t v10 = qword_100A19E88;
        if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
        {
          memset(buf, 0, 37);
          uuid_unparse_upper(v9 + 32, (char *)buf);
          sub_10004191C(__p, (char *)buf);
          if (v60 >= 0) {
            __int16 v11 = __p;
          }
          else {
            __int16 v11 = *(unsigned char **)__p;
          }
          uint64_t v12 = *((void *)v9 + 12);
          uint64_t v13 = "s";
          if (v12 == 1) {
            uint64_t v13 = "";
          }
          if (v9[153]) {
            uint64_t v14 = "flowing";
          }
          else {
            uint64_t v14 = "frozen";
          }
          *(_DWORD *)std::string buf = 136446978;
          *(void *)&uint8_t buf[4] = v11;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(void *)&unsigned char buf[14] = v12;
          *(_WORD *)&unsigned char buf[22] = 2082;
          *(void *)&uint8_t buf[24] = v13;
          *(_WORD *)&uint8_t buf[32] = 2082;
          *(void *)&buf[34] = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s - %lu command%{public}s (%{public}s)", buf, 0x2Au);
          if (v60 < 0) {
            operator delete(*(void **)__p);
          }
        }
      }
      uint64_t v15 = (const unsigned __int8 *)*((void *)v9 + 1);
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          uint64_t v15 = *(const unsigned __int8 **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (const unsigned __int8 *)*((void *)v9 + 2);
          BOOL v7 = *(void *)v16 == (void)v9;
          id v9 = v16;
        }
        while (!v7);
      }
      id v9 = v16;
    }
    while (v16 != v53);
  }
  int v17 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump: Device databases:", buf, 2u);
  }
  uint64_t v18 = (const unsigned __int8 *)a1[27];
  if (v18 != (const unsigned __int8 *)(a1 + 28))
  {
    do
    {
      uint64_t v19 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v18 + 32, (char *)buf);
        sub_10004191C(__p, (char *)buf);
        uint64_t v20 = v60 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (v60 < 0) {
          operator delete(*(void **)__p);
        }
      }
      sub_1004F5E6C(*((void *)v18 + 6), (uint64_t)"      ");
      uint64_t v21 = (unsigned __int8 *)*((void *)v18 + 1);
      if (v21)
      {
        do
        {
          unsigned int v22 = (const unsigned __int8 **)v21;
          uint64_t v21 = *(unsigned __int8 **)v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          unsigned int v22 = (const unsigned __int8 **)*((void *)v18 + 2);
          BOOL v7 = *v22 == v18;
          uint64_t v18 = (const unsigned __int8 *)v22;
        }
        while (!v7);
      }
      uint64_t v18 = (const unsigned __int8 *)v22;
    }
    while (v22 != a1 + 28);
  }
  uint64_t v23 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "statedump: Client subscriptions:", buf, 2u);
  }
  uint64_t v24 = (const unsigned __int8 *)a1[24];
  if (v24 != v53)
  {
    do
    {
      uint64_t v25 = qword_100A19E88;
      if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(v24 + 32, (char *)buf);
        sub_10004191C(__p, (char *)buf);
        uint64_t v26 = __p;
        if (v60 < 0) {
          uint64_t v26 = *(unsigned char **)__p;
        }
        *(_DWORD *)std::string buf = 136446210;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "statedump:    %{public}s", buf, 0xCu);
        if (v60 < 0) {
          operator delete(*(void **)__p);
        }
      }
      unsigned int v27 = (const unsigned __int8 *)*((void *)v24 + 20);
      if (v27 != v24 + 168)
      {
        do
        {
          uint64_t v28 = qword_100A19E88;
          if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
          {
            int v29 = *((unsigned __int16 *)v27 + 16);
            *(_DWORD *)std::string buf = 67109120;
            *(_DWORD *)&uint8_t buf[4] = v29;
            _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump:       0x%04x", buf, 8u);
          }
          uint64_t v30 = (const unsigned __int8 *)*((void *)v27 + 5);
          if (v30 != v27 + 48)
          {
            do
            {
              BOOL v31 = qword_100A19E88;
              if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
              {
                sub_10003AE4C(*((void *)v30 + 4), (uint64_t)buf);
                uint64_t v32 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
                *(_DWORD *)__n128 __p = 136446210;
                *(void *)&__p[4] = v32;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "statedump:          %{public}s", __p, 0xCu);
                if ((char)buf[23] < 0) {
                  operator delete(*(void **)buf);
                }
              }
              unint64_t v33 = (const unsigned __int8 *)*((void *)v30 + 1);
              if (v33)
              {
                do
                {
                  uint64_t v34 = v33;
                  unint64_t v33 = *(const unsigned __int8 **)v33;
                }
                while (v33);
              }
              else
              {
                do
                {
                  uint64_t v34 = (const unsigned __int8 *)*((void *)v30 + 2);
                  BOOL v7 = *(void *)v34 == (void)v30;
                  uint64_t v30 = v34;
                }
                while (!v7);
              }
              uint64_t v30 = v34;
            }
            while (v34 != v27 + 48);
          }
          uint64_t v35 = (const unsigned __int8 *)*((void *)v27 + 1);
          if (v35)
          {
            do
            {
              __int16 v36 = v35;
              uint64_t v35 = *(const unsigned __int8 **)v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              __int16 v36 = (const unsigned __int8 *)*((void *)v27 + 2);
              BOOL v7 = *(void *)v36 == (void)v27;
              unsigned int v27 = v36;
            }
            while (!v7);
          }
          unsigned int v27 = v36;
        }
        while (v36 != v24 + 168);
      }
      uint64_t v37 = (const unsigned __int8 *)*((void *)v24 + 1);
      if (v37)
      {
        do
        {
          uint64_t v38 = v37;
          uint64_t v37 = *(const unsigned __int8 **)v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          uint64_t v38 = (const unsigned __int8 *)*((void *)v24 + 2);
          BOOL v7 = *(void *)v38 == (void)v24;
          uint64_t v24 = v38;
        }
        while (!v7);
      }
      uint64_t v24 = v38;
    }
    while (v38 != v53);
  }
  uint64_t v39 = qword_100A19E88;
  if (os_log_type_enabled((os_log_t)qword_100A19E88, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "statedump: Built-in services detected:", buf, 2u);
  }
  uint64_t v40 = (const unsigned __int8 *)a1[31];
  if (v40 != (const unsigned __int8 *)(a1 + 32))
  {
    do
    {
      unsigned __int16 v41 = (const unsigned __int8 *)*((void *)v40 + 6);
      if (v41 != v40 + 56)
      {
        uint64_t v42 = qword_100A19E88;
        do
        {
          long long v54 = *(_OWORD *)(v41 + 28);
          int v55 = *((_DWORD *)v41 + 11);
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            sub_1000417A8((uint64_t)&v54, buf);
            int v43 = (char)buf[23];
            BOOL v44 = *(uint8_t **)buf;
            uint64_t v45 = sub_100031234(v40 + 32);
            int v46 = (void *)v45;
            *(_DWORD *)__n128 __p = 136315394;
            int v47 = buf;
            if (v43 < 0) {
              int v47 = v44;
            }
            *(void *)&__p[4] = v47;
            __int16 v58 = 2112;
            uint64_t v59 = v45;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Detected service %s on device %@ and notified", __p, 0x16u);
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }

            uint64_t v42 = qword_100A19E88;
          }
          unint64_t v48 = (const unsigned __int8 *)*((void *)v41 + 1);
          if (v48)
          {
            do
            {
              uint64_t v49 = v48;
              unint64_t v48 = *(const unsigned __int8 **)v48;
            }
            while (v48);
          }
          else
          {
            do
            {
              uint64_t v49 = (const unsigned __int8 *)*((void *)v41 + 2);
              BOOL v7 = *(void *)v49 == (void)v41;
              unsigned __int16 v41 = v49;
            }
            while (!v7);
          }
          unsigned __int16 v41 = v49;
        }
        while (v49 != v40 + 56);
      }
      unint64_t v50 = (unsigned __int8 *)*((void *)v40 + 1);
      if (v50)
      {
        do
        {
          uint64_t v51 = (const unsigned __int8 **)v50;
          unint64_t v50 = *(unsigned __int8 **)v50;
        }
        while (v50);
      }
      else
      {
        do
        {
          uint64_t v51 = (const unsigned __int8 **)*((void *)v40 + 2);
          BOOL v7 = *v51 == v40;
          uint64_t v40 = (const unsigned __int8 *)v51;
        }
        while (!v7);
      }
      uint64_t v40 = (const unsigned __int8 *)v51;
    }
    while (v51 != a1 + 32);
  }
}

void sub_100642D9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100642DD0(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t result = sub_1000305AC(a1, *a2);
  *(_WORD *)(result + 16) = *(_WORD *)a3;
  *(void *)(result + 24) = *(void *)(a3 + 8);
  *(void *)(result + 32) = *(void *)(a3 + 16);
  *(void *)(result + 40) = *(void *)(a3 + 24);
  *(void *)(result + 48) = *(void *)(a3 + 32);
  *(_OWORD *)(a3 + 24) = 0u;
  *(_OWORD *)(a3 + 8) = 0u;
  *(void *)(result + 56) = *(void *)(a3 + 40);
  *(void *)(result + 64) = *(void *)(a3 + 48);
  *(void *)(a3 + 40) = 0;
  *(void *)(a3 + 48) = 0;
  *(void *)(result + 72) = *(void *)(a3 + 56);
  *(void *)(result + 80) = *(void *)(a3 + 64);
  *(void *)(result + 88) = *(void *)(a3 + 72);
  *(void *)(result + 96) = *(void *)(a3 + 80);
  *(_OWORD *)(a3 + 72) = 0u;
  *(_OWORD *)(a3 + 56) = 0u;
  *(void *)(result + 104) = *(void *)(a3 + 88);
  *(void *)(result + 112) = *(void *)(a3 + 96);
  *(void *)(a3 + 88) = 0;
  *(void *)(a3 + 96) = 0;
  __int16 v5 = *(_WORD *)(a3 + 104);
  *(unsigned char *)(result + 122) = *(unsigned char *)(a3 + 106);
  *(_WORD *)(result + 120) = v5;
  *(void *)(result + 128) = *(void *)(a3 + 112);
  int v6 = (void *)(a3 + 120);
  uint64_t v7 = *(void *)(a3 + 120);
  *(void *)(result + 136) = v7;
  uint64_t v8 = result + 136;
  uint64_t v9 = *(void *)(a3 + 128);
  *(void *)(result + 144) = v9;
  if (v9)
  {
    *(void *)(v7 + 16) = v8;
    *(void *)(a3 + 112) = v6;
    void *v6 = 0;
    *(void *)(a3 + 128) = 0;
  }
  else
  {
    *(void *)(result + 128) = v8;
  }
  return result;
}

uint64_t sub_100642EC4(void *a1)
{
  uint64_t v2 = (void **)a1[1];
  id v3 = (void **)a1[2];
  if (v3 == v2)
  {
    uint64_t v4 = a1 + 5;
    id v3 = (void **)a1[1];
  }
  else
  {
    uint64_t v4 = a1 + 5;
    unint64_t v5 = a1[4];
    int v6 = &v2[v5 >> 9];
    uint64_t v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((a1[5] + v5) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        uint64_t v9 = *v7;
        *uint64_t v7 = 0;
        if (v9) {
          sub_100643684((uint64_t)v7, v9);
        }
        if ((char *)++v7 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v10 = (uint64_t *)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      uint64_t v2 = (void **)a1[1];
      id v3 = (void **)a1[2];
    }
  }
  *uint64_t v4 = 0;
  unint64_t v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      id v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 256;
  }
  else
  {
    if (v12 != 2) {
      goto LABEL_18;
    }
    uint64_t v13 = 512;
  }
  a1[4] = v13;
LABEL_18:
  while (v2 != v3)
  {
    uint64_t v14 = *v2++;
    operator delete(v14);
  }

  return sub_1002B303C((uint64_t)a1);
}

void sub_100643008(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100643008(a1, *a2);
    sub_100643008(a1, a2[1]);
    sub_100643064((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_100643064(uint64_t a1)
{
  sub_1002CBCC8(a1 + 128, *(void **)(a1 + 136));
  sub_100642EC4((void *)(a1 + 72));

  return sub_100642EC4((void *)(a1 + 24));
}

void sub_1006430AC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1006430AC(a1, *a2);
    sub_1006430AC(a1, a2[1]);
    uint64_t v4 = (std::__shared_weak_count *)a2[7];
    if (v4) {
      sub_10008A294(v4);
    }
    operator delete(a2);
  }
}

void sub_10064310C(id a1)
{
}

void sub_100643150()
{
}

void sub_100643174(id a1)
{
}

void sub_1006431B8()
{
}

void sub_1006431DC(id a1)
{
}

void sub_100643220()
{
}

void sub_100643244(id a1)
{
}

void sub_100643288()
{
}

void sub_1006432AC(id a1)
{
}

void sub_1006432F0()
{
}

uint64_t *sub_100643314(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3)
{
  uint64_t v10 = 0;
  unint64_t v5 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v10, uu1);
  int v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = v5;
    memset(v9, 0, sizeof(v9));
    sub_1006433B4((uint64_t)a1, a3, v9);
    sub_100036CA0(a1, v10, v7, v9[0]);
    int v6 = v9[0];
    v9[0] = 0;
    sub_100643520((uint64_t)v9, 0);
  }
  return v6;
}

uint64_t sub_1006433B4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = operator new(0xB8uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_100643428((uint64_t)v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100643410(_Unwind_Exception *a1)
{
  sub_100643520(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100643428(uint64_t a1, uint64_t a2)
{
  uuid_copy((unsigned __int8 *)a1, (const unsigned __int8 *)a2);
  *(_WORD *)(a1 + 16) = *(_WORD *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a2 + 40) = 0u;
  *(_OWORD *)(a2 + 24) = 0u;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 72) = 0u;
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  __int16 v4 = *(_WORD *)(a2 + 120);
  *(unsigned char *)(a1 + 122) = *(unsigned char *)(a2 + 122);
  *(_WORD *)(a1 + 120) = v4;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  uint64_t v5 = (void *)(a2 + 136);
  uint64_t v6 = *(void *)(a2 + 136);
  *(void *)(a1 + 136) = v6;
  uint64_t v7 = a1 + 136;
  uint64_t v8 = *(void *)(a2 + 144);
  *(void *)(a1 + 144) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *(void *)(a2 + 128) = v5;
    *uint64_t v5 = 0;
    *(void *)(a2 + 144) = 0;
  }
  else
  {
    *(void *)(a1 + 128) = v7;
  }
  return a1;
}

void sub_100643520(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100643064((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_100643578(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = sub_1000308C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_1005B8E10(a1, v3);
  return 1;
}

uint64_t sub_1006435C0(uint64_t **a1, unsigned __int8 *a2)
{
  uint64_t v3 = (uint64_t *)sub_1000308C0((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  __int16 v4 = v3;
  sub_10004D3B8(a1, v3);
  sub_100643064((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

void sub_10064361C(id a1)
{
}

void sub_100643660()
{
}

void sub_100643684(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = 0;
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
    }
    operator delete();
  }
}

uint64_t sub_100643700(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_100643758((char *)a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_100643740(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

char *sub_100643758(char *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    __int16 v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)(result + 8);
    do
    {
      uint64_t result = sub_1006437E4(v5, v6, v4 + 28, (uint64_t)(v4 + 28));
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          __int16 v4 = v8;
        }
        while (!v9);
      }
      __int16 v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

char *sub_1006437E4(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  uint64_t v6 = sub_100643878(a1, a2, &v11, &v10, a3);
  uint64_t v7 = *(char **)v6;
  if (!*(void *)v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v7 + 28) = *(_OWORD *)a4;
    *((_DWORD *)v7 + 11) = *(_DWORD *)(a4 + 16);
    sub_100036CA0(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

unsigned __int8 *sub_100643878(void *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  BOOL v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 != a2 && !sub_10071D284(a5, (unsigned __int8 *)a2 + 28))
  {
    if (!sub_10071D284((unsigned __int8 *)a2 + 28, a5))
    {
      *a3 = (unsigned __int8 *)a2;
      *a4 = (uint64_t)a2;
      return (unsigned __int8 *)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      uint64_t v14 = (unsigned __int8 *)a2[1];
      do
      {
        uint64_t v15 = v14;
        uint64_t v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      uint64_t v18 = (unsigned __int8 *)a2;
      do
      {
        uint64_t v15 = (unsigned __int8 *)*((void *)v18 + 2);
        BOOL v17 = *(void *)v15 == (void)v18;
        uint64_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10071D284(a5, v15 + 28)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
    return (unsigned __int8 *)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = (unsigned __int8 *)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
      return (unsigned __int8 *)a2;
    }
  }
  unint64_t v11 = (unsigned __int8 *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      unint64_t v11 = (unsigned __int8 *)*((void *)v11 + 1);
    }
    while (v11);
  }
  else
  {
    uint64_t v16 = a2;
    do
    {
      unint64_t v12 = (unsigned __int8 *)v16[2];
      BOOL v17 = *(void *)v12 == (void)v16;
      uint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_10071D284(v12 + 28, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (unsigned __int8 *)sub_100045FA8((uint64_t)a1, a3, a5);
}

uint64_t *sub_100643A10(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100643AB4((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_100643AB4(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 7) = 0;
  *((void *)v7 + 8) = 0;
  *((void *)v7 + 6) = v7 + 56;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_100643B30(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1005B8F8C(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100643B4C(id a1)
{
}

void sub_100643B90()
{
}

void sub_100643BB4(id a1)
{
}

void *sub_100643BE4(void *a1, uint64_t a2, __int16 a3, char a4, uint64_t a5)
{
  uint64_t v9 = sub_100620458((uint64_t)a1, a2);
  *(void *)uint64_t v9 = off_1009BBF18;
  *(void *)(v9 + 48) = &off_1009BBF50;
  *(_WORD *)(v9 + 56) = a3;
  *(unsigned char *)(v9 + 58) = a4;
  uint64_t v10 = *(void *)(a5 + 8);
  a1[8] = &off_100998428;
  a1[9] = v10;
  if (v10) {
    sub_100037354(v10);
  }
  a1[10] = 0;
  return a1;
}

void sub_100643C94(_Unwind_Exception *a1)
{
  sub_10062721C(v1);
  _Unwind_Resume(a1);
}

uint64_t **sub_100643CA8(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x40uLL);
    unsigned __int8 v11[16] = **a4;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 5) = v11 + 24;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_100643D78(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = (void *)sub_100620458(a1, a2);
  *uint64_t v5 = off_1009BBDD8;
  v5[6] = &off_1009BBE10;
  v5[7] = 0;
  uint64_t v6 = v5 + 8;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    _DWORD v6[2] = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return a1;
}

void sub_100643E08(_Unwind_Exception *a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  *(void *)(v1 + 56) = 0;
  if (v3) {
    sub_10078934C(v3);
  }
  sub_10062721C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_100643E2C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100643ED0((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_100643ED0(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  long long v7 = (unsigned __int8 *)operator new(0x48uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 7) = 0;
  *((void *)v7 + 8) = 0;
  *((void *)v7 + 6) = v7 + 56;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_100643F4C(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1005B8F8C(v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100643F68(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_100643758((char *)a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_100643FA8(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t **sub_100643FC0(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    long long v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unsigned int v8 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    BOOL v17 = v8;
    if (v8)
    {
      uint64_t v16 = sub_1002D8040((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          long long v10 = *(_OWORD *)((char *)v9 + 28);
          *((_DWORD *)v8 + 11) = *((_DWORD *)v9 + 11);
          *(_OWORD *)((char *)v8 + 28) = v10;
          sub_10064412C(v5, (uint64_t)v8);
          unsigned int v8 = v16;
          BOOL v17 = v16;
          if (v16) {
            uint64_t v16 = sub_1002D8040((uint64_t)v16);
          }
          unint64_t v11 = (void *)v9[1];
          if (v11)
          {
            do
            {
              a2 = v11;
              unint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v12 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    uint64_t result = (uint64_t **)sub_1002D8094((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_1006441B4(v5, (uint64_t)a2 + 28);
      uint64_t v13 = (void *)a2[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)a2[2];
          BOOL v12 = *v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100644118(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D8094((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10064412C(uint64_t **a1, uint64_t a2)
{
  uint64_t v5 = a1 + 1;
  __int16 v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v5 = (uint64_t **)v4;
        if (!sub_10071D284((unsigned __int8 *)(a2 + 28), (unsigned __int8 *)v4 + 28)) {
          break;
        }
        __int16 v4 = *v5;
        uint64_t v6 = v5;
        if (!*v5) {
          goto LABEL_8;
        }
      }
      __int16 v4 = v5[1];
    }
    while (v4);
    uint64_t v6 = v5 + 1;
  }
  else
  {
    uint64_t v6 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v5, v6, (uint64_t *)a2);
  return a2;
}

char *sub_1006441B4(uint64_t **a1, uint64_t a2)
{
  __int16 v4 = (char *)operator new(0x30uLL);
  *(_OWORD *)(v4 + 28) = *(_OWORD *)a2;
  *((_DWORD *)v4 + 11) = *(_DWORD *)(a2 + 16);
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v5;
        if (!sub_10071D284((unsigned __int8 *)v4 + 28, (unsigned __int8 *)v5 + 28)) {
          break;
        }
        uint64_t v5 = *v6;
        long long v7 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v5 = v6[1];
    }
    while (v5);
    long long v7 = v6 + 1;
  }
  else
  {
    long long v7 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v6, v7, (uint64_t *)v4);
  return v4;
}

void sub_100644258(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_10064426C(void **a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  unint64_t v4 = v3 - v2;
  if (v3 == v2) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ((v3 - v2) << 6) - 1;
  }
  uint64_t v6 = (char *)a1[4];
  if (v5 - (unint64_t)&v6[(void)a1[5]] < 0x200)
  {
    uint64_t v7 = (uint64_t)(a1 + 3);
    unsigned int v8 = a1[3];
    uint64_t v9 = *a1;
    uint64_t v10 = v8 - (unsigned char *)*a1;
    if (v4 >= v10)
    {
      if (v8 == v9) {
        unint64_t v11 = 1;
      }
      else {
        unint64_t v11 = v10 >> 2;
      }
      int v46 = a1 + 3;
      __n128 __p = sub_1000405F8(v7, v11);
      int v43 = (char *)__p;
      BOOL v44 = (char *)__p;
      uint64_t v45 = (char *)__p + 8 * v12;
      unsigned __int16 v41 = operator new(0x1000uLL);
      sub_1002B51DC(&__p, &v41);
      uint64_t v13 = (char *)a1[1];
      uint64_t v14 = v44;
      if (v13 == a1[2])
      {
        unint64_t v33 = (char *)a1[1];
      }
      else
      {
        do
        {
          if (v14 == v45)
          {
            int64_t v15 = v43 - (unsigned char *)__p;
            if (v43 <= __p)
            {
              if (v14 == __p) {
                unint64_t v23 = 1;
              }
              else {
                unint64_t v23 = (v14 - (unsigned char *)__p) >> 2;
              }
              uint64_t v24 = (char *)sub_1000405F8((uint64_t)v46, v23);
              uint64_t v26 = v43;
              uint64_t v14 = &v24[8 * (v23 >> 2)];
              uint64_t v27 = v44 - v43;
              if (v44 != v43)
              {
                uint64_t v14 = &v24[8 * (v23 >> 2) + (v27 & 0xFFFFFFFFFFFFFFF8)];
                uint64_t v28 = 8 * (v27 >> 3);
                int v29 = &v24[8 * (v23 >> 2)];
                do
                {
                  uint64_t v30 = *(void *)v26;
                  v26 += 8;
                  *(void *)int v29 = v30;
                  v29 += 8;
                  v28 -= 8;
                }
                while (v28);
              }
              BOOL v31 = __p;
              __n128 __p = v24;
              int v43 = &v24[8 * (v23 >> 2)];
              BOOL v44 = v14;
              uint64_t v45 = &v24[8 * v25];
              if (v31)
              {
                operator delete(v31);
                uint64_t v14 = v44;
              }
            }
            else
            {
              uint64_t v16 = v15 >> 3;
              BOOL v17 = v15 >> 3 < -1;
              uint64_t v18 = (v15 >> 3) + 2;
              if (v17) {
                uint64_t v19 = v18;
              }
              else {
                uint64_t v19 = v16 + 1;
              }
              uint64_t v20 = &v43[-8 * (v19 >> 1)];
              int64_t v21 = v14 - v43;
              if (v14 != v43)
              {
                memmove(&v43[-8 * (v19 >> 1)], v43, v14 - v43);
                uint64_t v14 = v43;
              }
              unsigned int v22 = &v14[-8 * (v19 >> 1)];
              uint64_t v14 = &v20[v21];
              int v43 = v22;
              BOOL v44 = &v20[v21];
            }
          }
          uint64_t v32 = *(void *)v13;
          v13 += 8;
          *(void *)uint64_t v14 = v32;
          uint64_t v14 = v44 + 8;
          v44 += 8;
        }
        while (v13 != a1[2]);
        unint64_t v33 = (char *)a1[1];
      }
      __int16 v36 = *a1;
      uint64_t v37 = v43;
      *a1 = __p;
      a1[1] = v37;
      __n128 __p = v36;
      int v43 = v33;
      uint64_t v38 = (char *)a1[3];
      uint64_t v39 = v45;
      a1[2] = v14;
      a1[3] = v39;
      BOOL v44 = v13;
      uint64_t v45 = v38;
      if (v14 - v37 == 8) {
        uint64_t v40 = 256;
      }
      else {
        uint64_t v40 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v40;
      if (v13 != v33) {
        BOOL v44 = &v13[(v33 - v13 + 7) & 0xFFFFFFFFFFFFFFF8];
      }
      if (v36) {
        operator delete(v36);
      }
    }
    else
    {
      if (v2 == v9)
      {
        __n128 __p = operator new(0x1000uLL);
        sub_1002B4FA4(a1, &__p);
        uint64_t v34 = a1[2];
        __n128 __p = (void *)*(v34 - 1);
        a1[2] = v34 - 1;
      }
      else
      {
        __n128 __p = operator new(0x1000uLL);
      }
      sub_1002B50BC((uint64_t)a1, &__p);
      if ((unsigned char *)a1[2] - (unsigned char *)a1[1] == 8) {
        uint64_t v35 = 256;
      }
      else {
        uint64_t v35 = (uint64_t)a1[4] + 512;
      }
      a1[4] = (void *)v35;
    }
  }
  else
  {
    a1[4] = v6 + 512;
    __n128 __p = (void *)*((void *)v3 - 1);
    a1[2] = v3 - 8;
    sub_1002B50BC((uint64_t)a1, &__p);
  }
}

void sub_100644534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  operator delete(v12);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100644580(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_33:
      *(void *)unsigned int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v33 = 1;
      }
      else {
        unint64_t v33 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000405F8(v5, v33);
      uint64_t v35 = &v34[8 * (v33 >> 2)];
      uint64_t v37 = &v34[8 * v36];
      uint64_t v38 = (uint64_t *)a1[1];
      unsigned int v8 = v35;
      uint64_t v39 = a1[2] - (void)v38;
      if (v39)
      {
        unsigned int v8 = &v35[v39 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v40 = 8 * (v39 >> 3);
        unsigned __int16 v41 = &v34[8 * (v33 >> 2)];
        do
        {
          uint64_t v42 = *v38++;
          *(void *)unsigned __int16 v41 = v42;
          v41 += 8;
          v40 -= 8;
        }
        while (v40);
      }
      goto LABEL_30;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    uint64_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unsigned int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_33;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      sub_1002B4FA4(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    sub_1002B50BC((uint64_t)a1, &v54);
    BOOL v44 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v45 = *v44;
    uint64_t v9 = (char *)(v44 + 1);
    uint64_t v10 = v45;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_33;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v34 = (char *)sub_1000405F8((uint64_t)(a1 + 3), v46);
      uint64_t v35 = &v34[8 * (v46 >> 2)];
      uint64_t v37 = &v34[8 * v47];
      unint64_t v48 = (uint64_t *)a1[1];
      unsigned int v8 = v35;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unsigned int v8 = &v35[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v34[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_30:
      int v43 = (char *)*a1;
      *a1 = v34;
      a1[1] = v35;
      a1[2] = v8;
      a1[3] = v37;
      if (v43)
      {
        operator delete(v43);
        unsigned int v8 = (char *)a1[2];
      }
      goto LABEL_33;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = sub_1000405F8((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  uint64_t v53 = operator new(0x1000uLL);
  sub_1002B51DC(&v54, &v53);
  uint64_t v27 = (void *)a1[2];
  uint64_t v28 = -7 - (void)v27;
  while (v27 != (void *)a1[1])
  {
    --v27;
    v28 += 8;
    sub_1002B52F4((uint64_t)&v54, v27);
  }
  int v29 = (char *)*a1;
  long long v30 = v54;
  long long v31 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  long long v32 = *((_OWORD *)a1 + 1);
  *(_OWORD *)a1 = v30;
  *((_OWORD *)a1 + 1) = v31;
  long long v55 = v32;
  if (v27 != (void *)v32) {
    *(void *)&long long v55 = v32 + (-(v32 + v28) & 0xFFFFFFFFFFFFFFF8);
  }
  if (v29) {
    operator delete(v29);
  }
}

void sub_10064484C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13)
{
  operator delete(v13);
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100644898(uint64_t a1, uint64_t a2)
{
  uint64_t result = *(void **)a1;
  if (a2)
  {
    uint64_t v4 = ((uint64_t)(*(void *)(a1 + 8) - *result) >> 3) - a2;
    if (v4 < 1) {
      result -= (unint64_t)(511 - v4) >> 9;
    }
    else {
      result += (unint64_t)v4 >> 9;
    }
  }
  return result;
}

double sub_100644900(uint64_t **a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t v7 = *a5;
  unsigned int v8 = a5[1];
  if (a1 != a3)
  {
    uint64_t v10 = a1 + 1;
    for (uint64_t i = *a1 + 512; ; uint64_t i = v12 + 512)
    {
      BOOL v14 = 0;
      long long v15 = 0uLL;
      sub_1006449A4(a2, i, v7, v8, &v14);
      unsigned int v8 = (uint64_t *)*((void *)&v15 + 1);
      uint64_t v7 = (uint64_t *)v15;
      *a5 = (uint64_t *)v15;
      a5[1] = v8;
      if (v10 == a3) {
        break;
      }
      uint64_t v12 = *v10++;
      a2 = v12;
    }
    a2 = *a3;
  }
  BOOL v14 = 0;
  long long v15 = 0uLL;
  sub_1006449A4(a2, a4, v7, v8, &v14);
  double result = *(double *)&v15;
  *(_OWORD *)a5 = v15;
  return result;
}

void sub_1006449A4(uint64_t *a1@<X1>, uint64_t *a2@<X2>, uint64_t *a3@<X3>, uint64_t *a4@<X4>, uint64_t **a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    unsigned int v8 = a1;
  }
  else
  {
    unsigned int v8 = a2;
    uint64_t v9 = *a3 - (void)a4 + 4096;
    if (a2 - a1 >= v9 >> 3) {
      uint64_t v10 = v9 >> 3;
    }
    else {
      uint64_t v10 = a2 - a1;
    }
    uint64_t v11 = sub_100644A90((uint64_t)&v18, a1, &a1[v10], a4);
    if (v11 != v8)
    {
      uint64_t v13 = v11;
      do
      {
        long long v15 = (uint64_t *)v6[1];
        ++v6;
        BOOL v14 = v15;
        uint64_t v16 = v8 - v13;
        if (v16 >= 512) {
          uint64_t v16 = 512;
        }
        uint64_t v13 = sub_100644A90((uint64_t)&v18, v13, &v13[v16], v14);
      }
      while (v13 != v8);
    }
    uint64_t v5 = v12;
    if ((uint64_t *)(*v6 + 4096) == v12)
    {
      uint64_t v17 = (uint64_t *)v6[1];
      ++v6;
      uint64_t v5 = v17;
    }
  }
  *a5 = v8;
  a5[1] = v6;
  a5[2] = v5;
}

uint64_t *sub_100644A90(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v5 = a2;
  if (a2 != a3)
  {
    do
    {
      uint64_t v7 = *v5;
      *uint64_t v5 = 0;
      uint64_t v8 = *a4;
      *a4 = v7;
      if (v8) {
        sub_100643684((uint64_t)a4, v8);
      }
      ++v5;
      ++a4;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

__n128 sub_100644B00@<Q0>(void *a1@<X1>, void *a2@<X2>, void **a3@<X3>, void *a4@<X4>, void *a5@<X5>, uint64_t a6@<X6>, __n128 *a7@<X8>)
{
  if (a1 == a3)
  {
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
    char v18 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
  }
  else
  {
    uint64_t v13 = a3 - 1;
    uint64_t v12 = *a3;
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    BOOL v14 = a4;
    long long v15 = a5;
    uint64_t v16 = a6;
    while (1)
    {
      sub_100644BF0(v12, v14, v15, v16, &v21);
      uint64_t v16 = v22.n128_i64[1];
      long long v15 = (void *)v22.n128_u64[0];
      if (v13 == a1) {
        break;
      }
      uint64_t v17 = (void *)*v13--;
      uint64_t v12 = v17;
      BOOL v14 = v17 + 512;
      uint64_t v21 = 0;
      __n128 v22 = 0uLL;
    }
    char v18 = (void *)(*a1 + 4096);
    uint64_t v21 = 0;
    __n128 v22 = 0uLL;
    uint64_t v19 = a2;
  }
  sub_100644BF0(v19, v18, v15, v16, &v21);
  __n128 result = v22;
  a7->n128_u64[0] = (unint64_t)a3;
  a7->n128_u64[1] = (unint64_t)a4;
  a7[1] = result;
  return result;
}

void *sub_100644BF0@<X0>(void *a1@<X1>, void *a2@<X2>, void *a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v5 = a4;
  uint64_t v6 = a3;
  if (a1 == a2)
  {
    uint64_t v9 = a1;
  }
  else
  {
    uint64_t v9 = a2;
    uint64_t v10 = a4 - *a3;
    if (a2 - a1 >= v10 >> 3) {
      uint64_t v11 = v10 >> 3;
    }
    else {
      uint64_t v11 = a2 - a1;
    }
    uint64_t v12 = &a2[-v11];
    __n128 result = sub_100644CEC((uint64_t)&v20, v12, a2, a4);
    if (v12 != a1)
    {
      do
      {
        uint64_t v15 = *--v6;
        uint64_t v16 = v15 + 4096;
        uint64_t v17 = v12 - a1;
        if (v17 >= 512) {
          uint64_t v17 = 512;
        }
        char v18 = &v12[-v17];
        __n128 result = sub_100644CEC((uint64_t)&v20, v18, v12, v16);
        uint64_t v12 = v18;
      }
      while (v18 != a1);
    }
    uint64_t v5 = v14;
    if (*v6 + 4096 == v14)
    {
      uint64_t v19 = v6[1];
      ++v6;
      uint64_t v5 = v19;
    }
  }
  *a5 = v9;
  a5[1] = v6;
  a5[2] = v5;
  return result;
}

void *sub_100644CEC(uint64_t a1, void *a2, void *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    uint64_t v6 = (uint64_t *)(a4 - 8);
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *--v7;
      *uint64_t v7 = 0;
      uint64_t v9 = *v6;
      uint64_t *v6 = v8;
      if (v9) {
        sub_100643684((uint64_t)v6, v9);
      }
      --v6;
    }
    while (v7 != a2);
  }
  return a3;
}

uint64_t *sub_100644D5C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  __n128 result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100644E00((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void sub_100644E00(uint64_t a1@<X0>, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a2@<X2>, unsigned __int8 **a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (unsigned __int8 *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uuid_copy(v7 + 32, *a2);
  *((void *)v7 + 6) = 0;
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
}

void sub_100644E78(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_100644E94(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100644E94(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    BOOL v3 = (std::__shared_weak_count *)__p[7];
    if (v3) {
      sub_10008A294(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_100644EF0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0xB0uLL);
  uint64_t result = sub_100644F3C((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_100644F28(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100644F3C(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1009BCD78;
  *(void *)(a1 + 24) = off_1009B2810;
  sub_100052DA8(a1 + 32);
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 168) = 0;
  return a1;
}

void sub_100644FC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100644FD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1009BCD78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100644FF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1009BCD78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_10064504C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t *sub_100645074(uint64_t **a1, uint64_t *a2)
{
  BOOL v3 = sub_10004D3B8(a1, a2);
  uint64_t v4 = (std::__shared_weak_count *)a2[7];
  if (v4) {
    sub_10008A294(v4);
  }
  operator delete(a2);
  return v3;
}

void sub_1006450B4(id a1)
{
}

void sub_1006450F8()
{
}

uint64_t sub_10064511C(uint64_t a1)
{
  return a1;
}

void *sub_10064514C(void *a1, uint64_t a2)
{
  *sub_1004EEEA8(a1, a2) = &off_1009BCDD0;
  if (qword_100A13AD0 != -1) {
    dispatch_once(&qword_100A13AD0, &stru_1009BCDF0);
  }
  return a1;
}

void sub_1006451B8(id a1)
{
  v107 = "kCBGeneralMsgIdAntennaDiversity";
  uint64_t v108 = 31;
  uint64_t v109 = &v107;
  uint64_t v1 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v1[4] = sub_100646BD8;
  v1[5] = 0;
  v107 = "kCBGeneralMsgIdReadRSSI";
  uint64_t v108 = 23;
  uint64_t v109 = &v107;
  uint64_t v2 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v2[4] = sub_10064748C;
  v2[5] = 0;
  v107 = "kCBGeneralMsgIdReadCurrentAntenna";
  uint64_t v108 = 33;
  uint64_t v109 = &v107;
  BOOL v3 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v3[4] = sub_1006475D0;
  void v3[5] = 0;
  v107 = "kCBGeneralMsgIdDelayedWake";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  uint64_t v4 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v4[4] = sub_1006476F4;
  void v4[5] = 0;
  v107 = "kCBGeneralMsgIdChangeConnectionPacketType";
  uint64_t v108 = 41;
  uint64_t v109 = &v107;
  uint64_t v5 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v5[4] = sub_100647814;
  void v5[5] = 0;
  v107 = "kCBGeneralMsgIdReadTxPowerLevel";
  uint64_t v108 = 31;
  uint64_t v109 = &v107;
  uint64_t v6 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v6[4] = sub_100647950;
  void v6[5] = 0;
  v107 = "kCBGeneralMsgIdSetTxPowerCap";
  uint64_t v108 = 28;
  uint64_t v109 = &v107;
  uint64_t v7 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v7[4] = sub_100647B70;
  void v7[5] = 0;
  v107 = "kCBGeneralMsgIdCountryCode";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  uint64_t v8 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v8[4] = sub_100647C8C;
  v8[5] = 0;
  v107 = "kCBGeneralMsgIdCountryCodeMultiBand";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  uint64_t v9 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  _OWORD v9[4] = sub_100647E14;
  void v9[5] = 0;
  v107 = "kCBGeneralMsgIdSimulateLocationUpdate";
  uint64_t v108 = 37;
  uint64_t v109 = &v107;
  uint64_t v10 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v10[4] = sub_1006480D0;
  void v10[5] = 0;
  v107 = "kCBGeneralMsgIdCellularTransmitState";
  uint64_t v108 = 36;
  uint64_t v109 = &v107;
  uint64_t v11 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v11[4] = sub_100648194;
  void v11[5] = 0;
  v107 = "kCBGeneralMsgIdReadFactoryCalTable";
  uint64_t v108 = 34;
  uint64_t v109 = &v107;
  uint64_t v12 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v12[4] = sub_100648248;
  void v12[5] = 0;
  v107 = "kCBGeneralMsgIdDisableTpc";
  uint64_t v108 = 25;
  uint64_t v109 = &v107;
  uint64_t v13 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v13[4] = sub_10064844C;
  void v13[5] = 0;
  v107 = "kCBGeneralMsgIdBlackMagickSet";
  uint64_t v108 = 29;
  uint64_t v109 = &v107;
  uint64_t v14 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v14[4] = sub_10064851C;
  void v14[5] = 0;
  v107 = "kCBGeneralMsgIdRxTest";
  uint64_t v108 = 21;
  uint64_t v109 = &v107;
  uint64_t v15 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  _OWORD v15[4] = sub_1006486F0;
  void v15[5] = 0;
  v107 = "kCBGeneralMsgIdTxTest";
  uint64_t v108 = 21;
  uint64_t v109 = &v107;
  uint64_t v16 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  _OWORD v16[4] = sub_100648898;
  void v16[5] = 0;
  v107 = "kCBGeneralMsgIdLeTestEnd";
  uint64_t v108 = 24;
  uint64_t v109 = &v107;
  uint64_t v17 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  _OWORD v17[4] = sub_100648A74;
  void v17[5] = 0;
  v107 = "kCBGeneralMsgIdRxEnhancedTest";
  uint64_t v108 = 29;
  uint64_t v109 = &v107;
  char v18 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v18[4] = sub_100648BD4;
  v18[5] = 0;
  v107 = "kCBGeneralMsgIdTxEnhancedTest";
  uint64_t v108 = 29;
  uint64_t v109 = &v107;
  uint64_t v19 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  uint8_t v19[4] = sub_100648DB0;
  void v19[5] = 0;
  v107 = "kCBGeneralMsgIdReadCountrySettingsTest";
  uint64_t v108 = 38;
  uint64_t v109 = &v107;
  char v20 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v20[4] = sub_100648FA4;
  void v20[5] = 0;
  v107 = "kCBGeneralMsgIdReadePAGPIOState";
  uint64_t v108 = 31;
  uint64_t v109 = &v107;
  uint64_t v21 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  uint8_t v21[4] = sub_100649124;
  void v21[5] = 0;
  v107 = "kCBGeneralMsgIdSetSARState";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  __n128 v22 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  uint8_t v22[4] = sub_100649248;
  v22[5] = 0;
  v107 = "kCBGeneralMsgIdWiFi5GState";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  uint64_t v23 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v23[4] = sub_1006492E8;
  v23[5] = 0;
  v107 = "kCBGeneralMsgIdReadPowerCapState";
  uint64_t v108 = 32;
  uint64_t v109 = &v107;
  uint64_t v24 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  uint8_t v24[4] = sub_1006493A0;
  void v24[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedReadPowerCapState";
  uint64_t v108 = 40;
  uint64_t v109 = &v107;
  unint64_t v25 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v25[4] = sub_1006494B8;
  v25[5] = 0;
  v107 = "kCBGeneralMsgIdReadRFState";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  uint64_t v26 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  uint8_t v26[4] = sub_100649644;
  v26[5] = 0;
  v107 = "kCBGeneralMsgIdSetCellularTransmitAntenna";
  uint64_t v108 = 41;
  uint64_t v109 = &v107;
  uint64_t v27 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v27[4] = sub_1006497E8;
  v27[5] = 0;
  v107 = "kCBGeneralMsgIdSetBTAntenna";
  uint64_t v108 = 27;
  uint64_t v109 = &v107;
  uint64_t v28 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v28[4] = sub_100649898;
  v28[5] = 0;
  v107 = "kCBGeneralMsgIdTunablesEnable";
  uint64_t v108 = 29;
  uint64_t v109 = &v107;
  int v29 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v29[4] = sub_10064998C;
  v29[5] = 0;
  v107 = "kCBGeneralMsgIdSetDiversityAntenna";
  uint64_t v108 = 34;
  uint64_t v109 = &v107;
  long long v30 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v30[4] = sub_100649A34;
  void v30[5] = 0;
  v107 = "kCBGeneralMsgIdADVBufConfigTool";
  uint64_t v108 = 31;
  uint64_t v109 = &v107;
  long long v31 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  uint8_t v31[4] = sub_100649B28;
  v31[5] = 0;
  v107 = "kCBGeneralMsgIdADVBufMatchControlTool";
  uint64_t v108 = 37;
  uint64_t v109 = &v107;
  long long v32 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v32[4] = sub_100649C80;
  v32[5] = 0;
  v107 = "kCBGeneralMsgIdADVBufReadTool";
  uint64_t v108 = 29;
  uint64_t v109 = &v107;
  unint64_t v33 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v33[4] = sub_100649D80;
  void v33[5] = 0;
  v107 = "kCBGeneralMsgIdMatchTableConfigTool";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  uint64_t v34 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v34[4] = sub_100649EC8;
  v34[5] = 0;
  v107 = "kCBGeneralMsgIdMatchTableExtendedFilterConfigTool";
  uint64_t v108 = 49;
  uint64_t v109 = &v107;
  uint64_t v35 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v35[4] = sub_10064A0A0;
  v35[5] = 0;
  v107 = "kCBGeneralMsgIdMatchTableParamsTool";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  uint64_t v36 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v36[4] = sub_10064A1E8;
  void v36[5] = 0;
  v107 = "kCBGeneralMsgIdMatchBufferConfigTool";
  uint64_t v108 = 36;
  uint64_t v109 = &v107;
  uint64_t v37 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v37[4] = sub_10064A470;
  v37[5] = 0;
  v107 = "kCBGeneralMsgIdMatchBufferReadTool";
  uint64_t v108 = 34;
  uint64_t v109 = &v107;
  uint64_t v38 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v38[4] = sub_10064A59C;
  v38[5] = 0;
  v107 = "kCBGeneralMsgIdSPMIDiagnosticsTool";
  uint64_t v108 = 34;
  uint64_t v109 = &v107;
  uint64_t v39 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v39[4] = sub_10064A678;
  v39[5] = 0;
  v107 = "kCBGeneralMsgIdBTCLKSensorCTimeSyncTool";
  uint64_t v108 = 39;
  uint64_t v109 = &v107;
  uint64_t v40 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v40[4] = sub_10064A72C;
  v40[5] = 0;
  v107 = "kCBGeneralMsgIdAdvTxTriggerTimeStampTool";
  uint64_t v108 = 40;
  uint64_t v109 = &v107;
  unsigned __int16 v41 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v41[4] = sub_10064A810;
  v41[5] = 0;
  v107 = "kCBGeneralMsgIdReadLEConnEventCounterTool";
  uint64_t v108 = 41;
  uint64_t v109 = &v107;
  uint64_t v42 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v42[4] = sub_10064A8F4;
  v42[5] = 0;
  v107 = "kCBGeneralMsgIdStartLEConnEventTriggerTool";
  uint64_t v108 = 42;
  uint64_t v109 = &v107;
  int v43 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v43[4] = sub_10064AA04;
  v43[5] = 0;
  v107 = "kCBGeneralMsgIdSPMIDebugControlTool";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  BOOL v44 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v44[4] = sub_10064AB3C;
  v44[5] = 0;
  v107 = "kCBGeneralMsgIdSetGPIOStateMsgTool";
  uint64_t v108 = 34;
  uint64_t v109 = &v107;
  uint64_t v45 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v45[4] = sub_10064ABF0;
  v45[5] = 0;
  v107 = "kCBGeneralMsgIdReadACLConnHandle";
  uint64_t v108 = 32;
  uint64_t v109 = &v107;
  unint64_t v46 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v46[4] = sub_10064ACF4;
  v46[5] = 0;
  v107 = "kCBGeneralMsgIdHDRSetupSyncConnMsgTool";
  uint64_t v108 = 38;
  uint64_t v109 = &v107;
  uint64_t v47 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v47[4] = sub_10064ADE0;
  v47[5] = 0;
  v107 = "kCBGeneralMsgIdHDRAcceptSyncConnMsgTool";
  uint64_t v108 = 39;
  uint64_t v109 = &v107;
  unint64_t v48 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v48[4] = sub_10064AF80;
  void v48[5] = 0;
  v107 = "kCBGeneralMsgIdSCOBufferSizeControl";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  uint64_t v49 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v49[4] = sub_10064B148;
  v49[5] = 0;
  v107 = "kCBGeneralMsgIdHRBControl";
  uint64_t v108 = 25;
  uint64_t v109 = &v107;
  uint64_t v50 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  uint8_t v50[4] = sub_10064B2A8;
  void v50[5] = 0;
  v107 = "kCBGeneralMsgIdHRBAllowedBands";
  uint64_t v108 = 30;
  uint64_t v109 = &v107;
  uint64_t v51 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  uint8_t v51[4] = sub_10064B434;
  v51[5] = 0;
  v107 = "kCBGeneralMsgIdHRBClassificationBands";
  uint64_t v108 = 37;
  uint64_t v109 = &v107;
  uint64_t v52 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v52[4] = sub_10064B5C0;
  v52[5] = 0;
  v107 = "kCBGeneralMsgIdHRBChangeConnectionBand";
  uint64_t v108 = 38;
  uint64_t v109 = &v107;
  uint64_t v53 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v53[4] = sub_10064B74C;
  v53[5] = 0;
  v107 = "kCBGeneralMsgIdHRBWriteScanEnable";
  uint64_t v108 = 33;
  uint64_t v109 = &v107;
  long long v54 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v54[4] = sub_10064B98C;
  void v54[5] = 0;
  v107 = "kCBGeneralMsgIdHRBWritePageScanActivity";
  uint64_t v108 = 39;
  uint64_t v109 = &v107;
  long long v55 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v55[4] = sub_10064BACC;
  v55[5] = 0;
  v107 = "kCBGeneralMsgIdHRBSetAFHHostChannelClassification";
  uint64_t v108 = 49;
  uint64_t v109 = &v107;
  uint64_t v56 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v56[4] = sub_10064BC0C;
  v56[5] = 0;
  v107 = "kCBGeneralMsgIdGetEssentialPowerDatabaseEntries";
  uint64_t v108 = 47;
  uint64_t v109 = &v107;
  __int16 v57 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v57[4] = sub_10064BF24;
  v57[5] = 0;
  v107 = "kCBGeneralMsgIdHRBReadEnhancedTransmitPowerLevel";
  uint64_t v108 = 48;
  uint64_t v109 = &v107;
  __int16 v58 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v58[4] = sub_10064C174;
  v58[5] = 0;
  v107 = "kCBGeneralMsgIdHRBReadAFHChannelMap";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  uint64_t v59 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v59[4] = sub_10064C4C8;
  v59[5] = 0;
  v107 = "kCBGeneralMsgIdHRBLimitChannelMap";
  uint64_t v108 = 33;
  uint64_t v109 = &v107;
  char v60 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v60[4] = sub_10064C7C8;
  v60[5] = 0;
  v107 = "kCBGeneralMsgIdHRBSetBandEdges";
  uint64_t v108 = 30;
  uint64_t v109 = &v107;
  int v61 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v61[4] = sub_10064C8DC;
  v61[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedTxTest";
  uint64_t v108 = 29;
  uint64_t v109 = &v107;
  __n128 v62 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v62[4] = sub_10064CA7C;
  v62[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedRxTest2G";
  uint64_t v108 = 31;
  uint64_t v109 = &v107;
  __n128 v63 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v63[4] = sub_10064CDD4;
  v63[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedRxTestHRB";
  uint64_t v108 = 32;
  uint64_t v109 = &v107;
  __n128 v64 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  void v64[4] = sub_10064D04C;
  v64[5] = 0;
  v107 = "kCBGeneralMsgIdEnhancedTxTestCont";
  uint64_t v108 = 33;
  uint64_t v109 = &v107;
  id v65 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v65[4] = sub_10064D2C8;
  v65[5] = 0;
  v107 = "kCBGeneralMsgIdLERoles";
  uint64_t v108 = 22;
  uint64_t v109 = &v107;
  __int16 v66 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v66[4] = sub_10064D51C;
  v66[5] = 0;
  v107 = "kCBGeneralMsgIdBTPerfTest";
  uint64_t v108 = 25;
  uint64_t v109 = &v107;
  __int16 v67 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v67[4] = sub_10064D600;
  v67[5] = 0;
  v107 = "kCBGeneralMsgIdSetupL2CAPServer";
  uint64_t v108 = 31;
  uint64_t v109 = &v107;
  uint64_t v68 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v68[4] = sub_10064D914;
  v68[5] = 0;
  v107 = "kCBGeneralMsgIdRemoveL2CAPServer";
  uint64_t v108 = 32;
  uint64_t v109 = &v107;
  long long v69 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v69[4] = sub_10064D9CC;
  v69[5] = 0;
  v107 = "kCBGeneralMsgIdCreateL2CAPConnection";
  uint64_t v108 = 36;
  uint64_t v109 = &v107;
  int v70 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v70[4] = sub_10064DB28;
  v70[5] = 0;
  v107 = "kCBGeneralMsgIdRemoveL2CAPConnection";
  uint64_t v108 = 36;
  uint64_t v109 = &v107;
  __int16 v71 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v71[4] = sub_10064DC74;
  v71[5] = 0;
  v107 = "kCBGeneralMsgIdEnterSniffMode";
  uint64_t v108 = 29;
  uint64_t v109 = &v107;
  int v72 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v72[4] = sub_10064DE80;
  v72[5] = 0;
  v107 = "kCBGeneralMsgIdExitSniffMode";
  uint64_t v108 = 28;
  uint64_t v109 = &v107;
  __n128 v73 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v73[4] = sub_10064E0D0;
  v73[5] = 0;
  v107 = "kCBGeneralMsgIdEnablePhyStats";
  uint64_t v108 = 29;
  uint64_t v109 = &v107;
  int v74 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  _OWORD v74[4] = sub_10064E28C;
  v74[5] = 0;
  v107 = "kCBGeneralMsgIdAdvancedSniffMode";
  uint64_t v108 = 32;
  uint64_t v109 = &v107;
  __n128 v75 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v75[4] = sub_10064E420;
  v75[5] = 0;
  v107 = "kCBGeneralMsgIdExitAdvancedSniffMode";
  uint64_t v108 = 36;
  uint64_t v109 = &v107;
  long long v76 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v76[4] = sub_10064E71C;
  v76[5] = 0;
  v107 = "kCBGeneralMsgIdAdvancedSniffReconfig";
  uint64_t v108 = 36;
  uint64_t v109 = &v107;
  long long v77 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v77[4] = sub_10064E8B8;
  v77[5] = 0;
  v107 = "kCBGeneralMsgIdSetPeripheralMaxAge";
  uint64_t v108 = 34;
  uint64_t v109 = &v107;
  long long v78 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v78[4] = sub_10064EAEC;
  v78[5] = 0;
  v107 = "kCBGeneralMsgIdLMPFlow";
  uint64_t v108 = 22;
  uint64_t v109 = &v107;
  long long v79 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v79[4] = sub_10064ECB0;
  v79[5] = 0;
  v107 = "kCBGeneralMsgIdAoSEmptyPacketReport";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  long long v80 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v80[4] = sub_10064EE74;
  v80[5] = 0;
  v107 = "kCBGeneralMsgIdConotrolAoS";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  long long v81 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v81[4] = sub_10064F038;
  v81[5] = 0;
  v107 = "kCBGeneralMsgIdBTSCPageScan";
  uint64_t v108 = 27;
  uint64_t v109 = &v107;
  long long v82 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v82[4] = sub_10064F14C;
  v82[5] = 0;
  v107 = "kCBGeneralMsgIdSetQoSConfig";
  uint64_t v108 = 27;
  uint64_t v109 = &v107;
  long long v83 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v83[4] = sub_10064F344;
  v83[5] = 0;
  v107 = "kCBGeneralMsgIdGetQoSConfig";
  uint64_t v108 = 27;
  uint64_t v109 = &v107;
  long long v84 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v84[4] = sub_10064FA40;
  v84[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexGetDebugCounter";
  uint64_t v108 = 38;
  uint64_t v109 = &v107;
  long long v85 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v85[4] = sub_10064FAF0;
  v85[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexResetDebugCounter";
  uint64_t v108 = 40;
  uint64_t v109 = &v107;
  long long v86 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v86[4] = sub_10064FBF0;
  v86[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexTestWriteMsg";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  uint64_t v87 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v87[4] = sub_10064FCC0;
  v87[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexTxControl";
  uint64_t v108 = 32;
  uint64_t v109 = &v107;
  long long v88 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v88[4] = sub_10064FDFC;
  v88[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexType53Config";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  int v89 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v89[4] = sub_10064FF00;
  v89[5] = 0;
  v107 = "kCBGeneralMsgIdSpmiCoexType60Config";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  long long v90 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v90[4] = sub_10064FFE4;
  v90[5] = 0;
  v107 = "kCBGeneralMsgIdReadControllerRam";
  uint64_t v108 = 32;
  uint64_t v109 = &v107;
  int v91 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v91[4] = sub_10065016C;
  v91[5] = 0;
  v107 = "kCBGeneralMsgIdSetMinEncryptionKeySize";
  uint64_t v108 = 38;
  uint64_t v109 = &v107;
  long long v92 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v92[4] = sub_10065039C;
  v92[5] = 0;
  v107 = "kCBGeneralMsgIdCalSetTxPower";
  uint64_t v108 = 28;
  uint64_t v109 = &v107;
  int v93 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v93[4] = sub_100650430;
  v93[5] = 0;
  v107 = "kCBGeneralMsgIdHPLinkBFCmd";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  long long v94 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v94[4] = sub_1006505E8;
  v94[5] = 0;
  v107 = "kCBGeneralMsgIdMRCLoggingCmd";
  uint64_t v108 = 28;
  uint64_t v109 = &v107;
  long long v95 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v95[4] = sub_100650A6C;
  v95[5] = 0;
  v107 = "kCBGeneralMsgIdBTAntennaCfg";
  uint64_t v108 = 27;
  uint64_t v109 = &v107;
  uint64_t v96 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v96[4] = sub_100650C88;
  v96[5] = 0;
  v107 = "kCBGeneralMsgIdLoadMSFFile";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  v97 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v97[4] = sub_100650EB4;
  v97[5] = 0;
  v107 = "kCBGeneralMsgIdLoadPwrRegulatoryFile";
  uint64_t v108 = 36;
  uint64_t v109 = &v107;
  v98 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v98[4] = sub_1006510EC;
  v98[5] = 0;
  v107 = "kCBGeneralMsgIdLoadPwrRegulatoryFileA3";
  uint64_t v108 = 38;
  uint64_t v109 = &v107;
  uint64_t v99 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v99[4] = sub_100651254;
  v99[5] = 0;
  v107 = "kCBGeneralMsgIdTriggerULLM";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  id v100 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v100[4] = sub_100651484;
  v100[5] = 0;
  v107 = "kCBGeneralMsgIdSimulateBudswapCmd";
  uint64_t v108 = 33;
  uint64_t v109 = &v107;
  uint64_t v101 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v101[4] = sub_1006516A8;
  v101[5] = 0;
  v107 = "kCBGeneralMsgHCICMD";
  uint64_t v108 = 19;
  uint64_t v109 = &v107;
  int v102 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v102[4] = sub_1006517E0;
  v102[5] = 0;
  v107 = "kCBGeneralMsgIdLEAdvTxPowerIncrease";
  uint64_t v108 = 35;
  uint64_t v109 = &v107;
  v103 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v103[4] = sub_100651B3C;
  v103[5] = 0;
  v107 = "kCBGeneralMsgIdWriteBdAddr";
  uint64_t v108 = 26;
  uint64_t v109 = &v107;
  uint64_t v104 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v104[4] = sub_100651C60;
  v104[5] = 0;
  v107 = "kCBGeneralMsgIdCrcErredPduReportEnable";
  uint64_t v108 = 38;
  uint64_t v109 = &v107;
  v105 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v105[4] = sub_100651D90;
  v105[5] = 0;
  v107 = "kCBGeneralMsgIdAppleExtendedAdvReportEnable";
  uint64_t v108 = 43;
  uint64_t v109 = &v107;
  size_t v106 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v107, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v109);
  v106[4] = sub_100651E44;
  v106[5] = 0;
}

void sub_100646BD8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4)) {
    return;
  }
  uint64_t v31 = a1;
  xpc_object_t original = a2;
  int64_t value = 0;
  int64_t v41 = 0;
  LOWORD(v43) = 0;
  int64_t v42 = 0;
  unsigned __int16 v37 = 26;
  xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  unsigned __int8 int64 = xpc_dictionary_get_int64(v5, "kCBMsgArgAction");
  unsigned __int8 v7 = xpc_dictionary_get_int64(v5, "kCBMsgArgConnHandle");
  unsigned __int8 v8 = xpc_dictionary_get_int64(v5, "kCBMsgArgAntennaDiversityEnable");
  char v9 = xpc_dictionary_get_int64(v5, "kCBMsgArgDiversityRSSIThreshold");
  char v10 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiSwitchThreshold");
  unsigned __int8 v11 = xpc_dictionary_get_int64(v5, "kCBMsgArgSwitchDecisionDuration");
  unsigned __int8 v12 = xpc_dictionary_get_int64(v5, "kCBMsgArgDeepFadingTimeout");
  unsigned __int8 v13 = xpc_dictionary_get_int64(v5, "kCBMsgArgPacketOnFavorite");
  char v36 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiFav");
  char v35 = xpc_dictionary_get_int64(v5, "kCBMsgArgRssiBak");
  char v34 = xpc_dictionary_get_int64(v5, "kCBMsgArgInstantRssiFav");
  char v33 = xpc_dictionary_get_int64(v5, "kCBMsgArgInstantRssiBak");
  uint64_t v14 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "Args received : \n", buf, 2u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = int64;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "action : %u\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v7;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "connHandle : %u\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v8;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "antennaDiversityEnable : %u\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v9;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "diversityRSSITHreshold : %d\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  uint64_t v15 = v10;
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiSwitchThreshold : %d\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v11;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "switchDecisionDuration : %u\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v12;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "deepFadingTimeout : %u\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v13;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "packetOnFavorite : %u\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v36;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiFav : %d\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v35;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "rssiBak : %d\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v34;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "instantRSSIFav : %d\n", buf, 8u);
    uint64_t v14 = qword_100A19EC8;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v33;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "instantRSSIBak : %d\n", buf, 8u);
  }
  uint64_t v16 = sub_10003FB34();
  BYTE4(v30) = v33;
  BYTE3(v30) = v34;
  BYTE2(v30) = v35;
  BYTE1(v30) = v36;
  LOBYTE(v30) = v13;
  int v17 = (*(uint64_t (**)(uint64_t, void, void, void, void, uint64_t, void, void, uint64_t, unsigned __int16 *, int64_t *, char))(*(void *)v16 + 912))(v16, int64, v7, v8, v9, v15, v11, v12, v30, &v37, &value, 1);
  uint64_t v18 = qword_100A19EC8;
  if (v17)
  {
    int v19 = v17;
    if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    *(_DWORD *)std::string buf = 67109120;
    int v39 = v19;
    char v20 = "Response : %d";
    uint64_t v21 = v18;
    os_log_type_t v22 = OS_LOG_TYPE_DEFAULT;
    uint32_t v23 = 8;
  }
  else
  {
    if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO)) {
      goto LABEL_34;
    }
    *(_WORD *)std::string buf = 0;
    char v20 = "Response to BCM4350:antennaDiversity registered successfully\n";
    uint64_t v21 = v18;
    os_log_type_t v22 = OS_LOG_TYPE_INFO;
    uint32_t v23 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v21, v22, v20, buf, v23);
LABEL_34:
  unsigned int v24 = v37;
  if (v37 >= 2u)
  {
    unint64_t v25 = 0;
    uint64_t v26 = qword_100A19EC8;
    do
    {
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        int v27 = *((unsigned __int8 *)&value + v25);
        *(_DWORD *)std::string buf = 67109120;
        int v39 = v27;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_INFO, "%x\t", buf, 8u);
        uint64_t v26 = qword_100A19EC8;
        unsigned int v24 = v37;
      }
      ++v25;
    }
    while (v25 < v24);
    xpc_object_t reply = xpc_dictionary_create_reply(original);
    if (reply)
    {
      int v29 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", BYTE3(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgConnHandle", WORD2(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrProposedAntenna", BYTE6(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRssiFav", HIBYTE(value));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRssiBak", v41);
      xpc_dictionary_set_int64(v29, "kCBMsgArgInstantRssiFav", BYTE1(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgInstantRssiBak", BYTE2(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgLinkQualityA", BYTE3(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgLinkQualityB", BYTE4(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAutoModeEnable", BYTE5(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrPowerCap", BYTE6(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgCurrPowerControlIndex", HIBYTE(v41));
      xpc_dictionary_set_int64(v29, "kCBMsgArgRxCounterOnActive", (unsigned __int16)v42);
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntennaSwap0to1Counter", WORD1(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntennaSwap1to0Counter", WORD2(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgDeepFadingCount", HIWORD(v42));
      xpc_dictionary_set_int64(v29, "kCBMsgArgAntCmp", (unsigned __int16)v43);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(v31 + 72) + 16), v29);
      xpc_release(v29);
    }
  }
}

void sub_10064748C(uint64_t a1, xpc_object_t xdict)
{
  __int16 value_5 = 0;
  int value_1 = 0;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(v4, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007893D8();
    }
  }
  else
  {
    char value = 0;
    uint64_t v11 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, int *, char *))(*(void *)v11 + 312))(v11, &value_1, &value))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100789370();
      }
    }
    else
    {
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      xpc_dictionary_set_int64(reply, "kCBMsgArgRawRSSI", value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
      xpc_release(reply);
    }
  }
}

void sub_1006475D0(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  uint64_t v4 = *(void *)sub_10003FB34();
  if (!(*(unsigned int (**)(void))(v4 + 904))())
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
    xpc_dictionary_set_int64(reply, "kCBMsgArgCurrAntenna", 0);
    xpc_release(reply);
  }
}

void sub_1006476F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgResumeTimer");
  uint64_t v5 = sub_10003FB34();
  int v6 = sub_1003542D4(v5);
  uint64_t v7 = *(void *)sub_10003FB34();
  if (v6) {
    int v8 = (*(uint64_t (**)(void))(v7 + 1608))();
  }
  else {
    int v8 = (*(uint64_t (**)(void))(v7 + 1152))();
  }
  if (!v8)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
    xpc_release(reply);
  }
}

void sub_100647814(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (!sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectionPacketType");
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009BCE10);
    }
    if (sub_1004B6A38((uint64_t)off_1009F7EA8, 0, uint64))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078940C();
      }
    }
    else
    {
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
      xpc_release(reply);
    }
  }
}

void sub_100647950(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  uint64_t v4 = &qword_100A1A080;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 13;
    if (v5 >= 13) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      uint64_t v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100A1A080 && *((int *)v4 + 8) <= 13)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789510();
    }
  }
  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    int v26 = 13;
    uint64_t v28 = (uint64_t)&v26;
    sub_10030F06C((uint64_t **)&qword_100A1A078, &v26, (uint64_t)&unk_1007BE9D0, (_DWORD **)&v28)[5] = v8;
    uint64_t v28 = -1;
    __int16 v27 = 0;
    int v26 = 0;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_1000198BC(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgTransmitPowerLevelType"))
    {
      uint64_t v16 = sub_100197A30((uint64_t)&v26);
      if (v16)
      {
        uint64_t v17 = v16;
        sub_100023344();
        int v23 = sub_10018F308((uint64_t)sub_100651FFC, v17, v28, v18, v19, v20, v21, v22);
        sub_1000232E0();
        unsigned int v24 = qword_100A19EC8;
        if (v23)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_1007894A8();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Response to XPC ReadTransmitPowerLevel registered successfully", buf, 2u);
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_100789474();
        }
        sub_100651FFC(0x19Eu, 0, 0);
      }
    }
  }
}

void sub_100647B70(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_int64(value, "kCBMsgArgTxPowerCap");
  uint64_t v5 = *(void *)sub_10003FB34();
  if (!(*(unsigned int (**)(void))(v5 + 936))())
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
    xpc_release(reply);
  }
}

void sub_100647C8C(uint64_t a1, xpc_object_t xdict)
{
  LODWORD(value) = 0;
  unsigned __int16 v11 = 0;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 int64 = xpc_dictionary_get_int64(v4, "kCBMsgArgAction");
  if (int64)
  {
    unsigned __int8 v6 = xpc_dictionary_get_int64(v4, "kCBMsgArgCountryCode");
    unsigned __int8 v7 = xpc_dictionary_get_int64(v4, "kCBMsgArgLeFlag");
  }
  else
  {
    unsigned __int8 v6 = 0;
    unsigned __int8 v7 = 0;
  }
  uint64_t v8 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, void, void, void, unsigned __int16 *, int64_t *))(*(void *)v8 + 576))(v8, int64, v6, v7, &v11, &value))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789544();
    }
  }
  else if (v11 >= 2u)
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      uint64_t v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
      xpc_dictionary_set_int64(v10, "kCBMsgArgCountryCode", value);
      xpc_dictionary_set_int64(v10, "kCBMsgArgLeFlag", BYTE1(value));
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
      xpc_release(v10);
    }
  }
}

void sub_100647E14(uint64_t a1, void *a2)
{
  char v18 = 0;
  uint64_t value = 0;
  __int16 v16 = 0;
  uint64_t v4 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v4 + 2536))())
  {
    xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(v5, "kCBMsgArgAction");
    if (uint64)
    {
      unsigned __int8 v7 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCode2G");
      unsigned __int8 v8 = xpc_dictionary_get_uint64(v5, "kCBMsgArgLeFlag");
      unsigned __int8 v9 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII1");
      unsigned __int8 v10 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII3");
      unsigned __int8 v11 = xpc_dictionary_get_uint64(v5, "kCBMsgArgCountryCodeUNII5");
    }
    else
    {
      unsigned __int8 v7 = 0;
      unsigned __int8 v8 = 0;
      unsigned __int8 v9 = 0;
      unsigned __int8 v10 = 0;
      unsigned __int8 v11 = 0;
    }
    uint64_t v13 = sub_10003FB34();
    LODWORD(v12) = (*(uint64_t (**)(uint64_t, void, void, void, void, void, void, __int16 *, uint64_t *))(*(void *)v13 + 584))(v13, uint64, v7, v8, v9, v10, v11, &v16, &value);
    if (v12 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007895AC();
    }
    uint64_t v12 = (int)v12;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789614();
    }
    uint64_t v12 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCode2G", value);
    xpc_dictionary_set_uint64(v15, "kCBMsgArgLeFlag", BYTE1(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII1", BYTE2(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII3", BYTE4(value));
    xpc_dictionary_set_uint64(v15, "kCBMsgArgCountryCodeUNII5", BYTE6(value));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_1006480D0(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  id v3 = [objc_alloc((Class)NSString) initWithCString:xpc_dictionary_get_string(value, "kCBMsgArgCountryString") encoding:4];
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100789648();
  }
  uint64_t v4 = sub_100373254();
  (*(void (**)(uint64_t, id))(*(void *)v4 + 64))(v4, v3);
}

void sub_100648184(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100648194(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_BOOL(value, "kCBMsgArgCellularTransmitState");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 568))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007896BC();
    }
  }
}

void sub_100648248(uint64_t a1, xpc_object_t xdict)
{
  memset(v35, 0, 55);
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)objects = 0u;
  long long v11 = 0u;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgFactoryCalTableType");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 592))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789724();
    }
  }
  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      unsigned __int8 v7 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", v35[3]);
      xpc_dictionary_set_int64(v7, "kCBMsgArgFactoryCalTableType", v35[4]);
      for (uint64_t i = 0; i != 50; ++i)
        objects[i] = xpc_int64_create(v35[i]);
      xpc_object_t v9 = xpc_array_create(objects, 0x32uLL);
      xpc_dictionary_set_value(v7, "kCBMsgArgFactoryCalTable", v9);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v7);
      xpc_release(v7);
    }
  }
}

void sub_10064844C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_BOOL(value, "kCBMsgArgDisableTpc");
  uint64_t v5 = *(void *)sub_10003FB34();
  int v6 = (*(uint64_t (**)(void))(v5 + 320))();
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", v6);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);

  xpc_release(reply);
}

void sub_10064851C(int a1, xpc_object_t xdict)
{
  __int16 v21 = 0;
  int v20 = 0;
  char v19 = 0;
  unsigned __int8 v18 = 1;
  char v17 = 1;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v3 = sub_100019738(value, "kCBMsgArgCountryCode");
  uint64_t v4 = sub_100373254();
  (*(void (**)(uint64_t, void *, char *, unsigned __int8 *, char *))(*(void *)v4 + 8))(v4, v3, &v19, &v18, &v17);
  if (!sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    char v14 = 0;
    int v15 = v20;
    __int16 v16 = v21;
    char v13 = 0;
    sub_10001B8E0(&v13);
    uint64_t v11 = sub_100197B34(&v14);
    sub_10001B910(&v13);
    if (!v11 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789474();
    }
    uint64_t v12 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)v12 + 960))(v12, v11, v18)
      && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10078978C();
    }
    sub_10001B8AC(&v13);
  }
}

void sub_1006486C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1006486F0(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  uint64_t v4 = &qword_100A1A080;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 21;
    if (v5 >= 21) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      uint64_t v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100A1A080 && *((int *)v4 + 8) <= 21)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078985C();
    }
  }
  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    *(_DWORD *)std::string buf = 21;
    long long v25 = buf;
    sub_10030F06C((uint64_t **)&qword_100A1A078, (int *)buf, (uint64_t)&unk_1007BE9D0, (_DWORD **)&v25)[5] = v8;
    long long v25 = 0;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_1000198BC(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgRxChannel"))
    {
      sub_100023344();
      int v22 = sub_10018F33C((uint64_t)sub_100652128, v25, v16, v17, v18, v19, v20, v21);
      sub_1000232E0();
      long long v23 = qword_100A19EC8;
      if (v22)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_1007897F4();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_StartRxTest registered successfully", buf, 2u);
      }
    }
  }
}

void sub_100648898(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  uint64_t v4 = &qword_100A1A080;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 22;
    if (v5 >= 22) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      uint64_t v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100A1A080 && *((int *)v4 + 8) <= 22)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007898F8();
    }
  }
  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 22;
    long long v25 = &v24;
    sub_10030F06C((uint64_t **)&qword_100A1A078, (int *)&v24, (uint64_t)&unk_1007BE9D0, (_DWORD **)&v25)[5] = v8;
    uint64_t v24 = 0;
    long long v25 = 0;
    uint64_t v23 = 0;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_1000198BC(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgTxChannel"))
    {
      sub_100023344();
      int v20 = sub_10018F370((uint64_t)sub_100652210, v25, v24, v23, v16, v17, v18, v19);
      sub_1000232E0();
      uint64_t v21 = qword_100A19EC8;
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_100789890();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_StartTxTest registered successfully", buf, 2u);
      }
    }
  }
}

void sub_100648A74(int a1, xpc_object_t object)
{
  uint64_t v2 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_100A1A080;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 23;
    if (v4 >= 23) {
      BOOL v6 = (uint64_t *)v2;
    }
    else {
      BOOL v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 != &qword_100A1A080 && *((int *)v3 + 8) <= 23)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789994();
    }
  }
  else
  {
LABEL_11:
    uint64_t v7 = (uint64_t *)xpc_retain(object);
    int v17 = 23;
    uint64_t v18 = &v17;
    sub_10030F06C((uint64_t **)&qword_100A1A078, &v17, (uint64_t)&unk_1007BE9D0, &v18)[5] = v7;
    sub_100023344();
    int v14 = sub_10001BDE0(191, (uint64_t)sub_1006522F8, v8, v9, v10, v11, v12, v13, v16);
    sub_1000232E0();
    uint64_t v15 = qword_100A19EC8;
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078992C();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v16) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_LeTestEnd registered successfully", (uint8_t *)&v16, 2u);
    }
  }
}

void sub_100648BD4(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  int v4 = &qword_100A1A080;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 24;
    if (v5 >= 24) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      int v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100A1A080 && *((int *)v4 + 8) <= 24)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789A30();
    }
  }
  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 24;
    long long v25 = &v24;
    sub_10030F06C((uint64_t **)&qword_100A1A078, (int *)&v24, (uint64_t)&unk_1007BE9D0, (_DWORD **)&v25)[5] = v8;
    uint64_t v24 = 0;
    long long v25 = 0;
    uint64_t v23 = 0;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_1000198BC(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgRxChannel"))
    {
      sub_100023344();
      int v20 = sub_10018F3B0((uint64_t)sub_100652400, v25, v24, v23, v16, v17, v18, v19);
      sub_1000232E0();
      uint64_t v21 = qword_100A19EC8;
      if (v20)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_1007899C8();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_StartRxEnhancedTest registered successfully", buf, 2u);
      }
    }
  }
}

void sub_100648DB0(int a1, xpc_object_t object)
{
  uint64_t v3 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  int v4 = &qword_100A1A080;
  do
  {
    int v5 = *(_DWORD *)(v3 + 32);
    BOOL v6 = v5 < 25;
    if (v5 >= 25) {
      uint64_t v7 = (uint64_t *)v3;
    }
    else {
      uint64_t v7 = (uint64_t *)(v3 + 8);
    }
    if (!v6) {
      int v4 = (uint64_t *)v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v4 != &qword_100A1A080 && *((int *)v4 + 8) <= 25)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789ACC();
    }
  }
  else
  {
LABEL_11:
    uint64_t v8 = (uint64_t *)xpc_retain(object);
    LODWORD(v24) = 25;
    long long v25 = &v24;
    sub_10030F06C((uint64_t **)&qword_100A1A078, (int *)&v24, (uint64_t)&unk_1007BE9D0, (_DWORD **)&v25)[5] = v8;
    uint64_t v24 = 0;
    long long v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    xpc_object_t value = xpc_dictionary_get_value(object, "kCBMsgArgs");
    if (!sub_1000198BC(value, 1, v10, v11, v12, v13, v14, v15, (uint64_t)"kCBMsgArgTxChannel"))
    {
      sub_100023344();
      int v19 = sub_10018F3F0((uint64_t)sub_1006524E8, v25, v24, v23, v22, v16, v17, v18);
      sub_1000232E0();
      int v20 = qword_100A19EC8;
      if (v19)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_100789A64();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Response to XPC HCI_StartTxEnhancedTest registered successfully", buf, 2u);
      }
    }
  }
}

void sub_100648FA4(uint64_t a1, xpc_object_t xdict)
{
  value_1[0] = 0;
  unsigned __int8 value = 1;
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v5 = sub_100019738(v4, "kCBMsgArgCountryCode");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100789B80();
  }
  uint64_t v6 = sub_100373254();
  (*(void (**)(uint64_t, void *, char *, _WORD *, unsigned __int8 *))(*(void *)v6 + 8))(v6, v5, (char *)value_1 + 1, value_1, &value);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100789B00();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", 0);
  xpc_dictionary_set_int64(reply, "kCBMsgArgCountryCode", HIBYTE(value_1[0]));
  xpc_dictionary_set_int64(reply, "kCBMsgArgLeFlag", LOBYTE(value_1[0]));
  xpc_dictionary_set_int64(reply, "kCBMsgArgHDRFlag", value);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_100649110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100649124(uint64_t a1, void *a2)
{
  __int16 value_1 = -1;
  unsigned __int8 value = -1;
  uint64_t v4 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v4 + 1632))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789BF4();
    }
  }
  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(a2);
    if (reply)
    {
      uint64_t v6 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgEpaGpioEnabled", HIBYTE(value_1));
      xpc_dictionary_set_int64(v6, "kCBMsgArgEpaGpioNum", value_1);
      xpc_dictionary_set_int64(v6, "kCBMsgArgEpaGpioState", value);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v6);
      xpc_release(v6);
    }
  }
}

void sub_100649248(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v3 = xpc_dictionary_get_BOOL(value, "kCBMsgArgSARHeadState");
  uint64_t v4 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, uint64_t, BOOL))(*(void *)v4 + 88))(v4, 1, v3))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789C5C();
    }
  }
}

void sub_1006492E8(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_BOOL(value, "kCBMsgArgWiFi5GState");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 1656))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789CC4();
    }
  }
}

void sub_1006493A0(uint64_t a1, xpc_object_t xdict)
{
  int v9 = 0;
  *(void *)&length[1] = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  uint64_t v5 = *(void *)sub_10003FB34();
  if (!(*(unsigned int (**)(void))(v5 + 1672))())
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      uint64_t v7 = reply;
      xpc_dictionary_set_data(reply, "kCBMsgArgData", &length[1], 0);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v7);
      xpc_release(v7);
    }
  }
}

void sub_1006494B8(uint64_t a1, xpc_object_t xdict)
{
  memset(&length[1], 0, 256);
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    uint64_t v5 = value;
    xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
    xpc_dictionary_get_uint64(v5, "kCBMsgArgVersion");
    uint64_t v6 = *(void *)sub_10003FB34();
    if (!(*(unsigned int (**)(void))(v6 + 1680))())
    {
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (reply)
      {
        uint64_t v8 = reply;
        xpc_dictionary_set_data(reply, "kCBMsgArgData", &length[1], 0);
        xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
        xpc_release(v8);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_100789D2C();
  }
}

void sub_100649644(uint64_t a1, xpc_object_t xdict)
{
  memset(&length[1], 0, 256);
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (value)
  {
    uint64_t v5 = value;
    xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
    xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvInstance");
    uint64_t v6 = *(void *)sub_10003FB34();
    uint64_t v7 = (*(int (**)(void))(v6 + 1680))();
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789D2C();
    }
    uint64_t v7 = 3;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v7);
    xpc_dictionary_set_data(v9, "kCBMsgArgData", &length[1], 0);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1006497E8(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgCellularTransmitAntenna");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 1688))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789D60();
    }
  }
}

void sub_100649898(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgCurrProposedAntenna");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 904))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789D94();
    }
  }
}

void sub_10064998C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_BOOL(value, "kCBMsgArgTunablesReadEnable");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 1832))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789E04();
    }
  }
}

void sub_100649A34(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgCurrDiversityAntenna");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 904))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789E38();
    }
  }
}

void sub_100649B28(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v6, "kCBMsgArgAdvBufMatchAdvType");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v7, "kCBMsgArgPayloadSize");
  uint64_t v8 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, void))(*(void *)v8 + 2784))(v8, uint64))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789EA8();
    }
  }
}

void sub_100649C80(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufEnable");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgAdvBufPause");
  uint64_t v6 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v6 + 2848))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789F10();
    }
  }
}

void sub_100649D80(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 2816))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789F78();
    }
  }
  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      xpc_object_t v7 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgAdvBufNumEntries", 255);
      xpc_dictionary_set_int64(v7, "kCBMsgArgAdvBufStatusMask", 255);
      xpc_dictionary_set_int64(v7, "kCBMsgArgAdvBufNumOverflows", 0xFFFFLL);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v7);
      xpc_release(v7);
    }
  }
}

void sub_100649EC8(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgConfigMask");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufMatchAdvType");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v9, "kCBMsgArgPayloadSize");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v10, "kCBMsgArgAdvBufNumEntries");
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_int64(v11, "kCBMsgArgAdvBufRSSIThreshold");
  xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v12, "kCBMsgArgAdvBufDupNumEntries");
  xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v13, "kCBMsgArgAdvBufDupClearTimeoutSeconds");
  uint64_t v14 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, void, void, uint64_t, uint64_t, void))(*(void *)v14 + 2824))(v14, uint64, v6, 255, 76, v8))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100789FE0();
    }
  }
}

void sub_10064A0A0(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgConfigMask");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_int64(v5, "kCBMsgArgAdvBufRSSIThreshold");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v6, "kCBMsgArgAdvBufDupNumEntries");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufDupClearTimeoutSeconds");
  uint64_t v8 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v8 + 2832))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A048();
    }
  }
}

void sub_10064A1E8(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v6 = xpc_dictionary_get_uint64(v5, "kCBMsgArgStartEntry");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgEndEntry");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v10 = xpc_dictionary_get_uint64(v9, "kCBMsgArgAdvBufEnable");
  memset(v27, 0, sizeof(v27));
  long long v26 = 0u;
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(v11, 1, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A184();
    }
  }
  else
  {
    int v18 = v8 - v6;
    if (v8 < v6 || v8 - v6 - 14 <= 0xFFFFFFF0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A0B0();
      }
    }
    else
    {
      int v21 = 0;
      __int16 v22 = 0;
      char v23 = v10;
      uint64_t v24 = 0x12554433221100;
      __int16 v25 = 0;
      if (v18 >= 1)
      {
        int v19 = v27;
        do
        {
          *((_DWORD *)v19 - 4) = -573785174;
          *((_WORD *)v19 - 6) = -18;
          *(v19 - 10) = v10;
          *(void *)(v19 - 9) = 0x12554433221100;
          *(_WORD *)(v19 - 1) = 0;
          v19 += 17;
          --v18;
        }
        while (v18);
      }
      uint64_t v20 = sub_10003FB34();
      if ((*(unsigned int (**)(uint64_t, void, void, void, int *))(*(void *)v20 + 2872))(v20, uint64, v6, v8, &v21)&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10078A11C();
      }
    }
  }
}

void sub_10064A470(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgConfigMask");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgPayloadSize");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v6, "kCBMsgArgAdvBufNumEntries");
  uint64_t v7 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v7 + 2880))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A1EC();
    }
  }
}

void sub_10064A59C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  uint64_t v5 = *(void *)sub_10003FB34();
  if (!(*(unsigned int (**)(void))(v5 + 2888))())
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      uint64_t v7 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgAdvBufNumEntries", 255);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v7);
      xpc_release(v7);
    }
  }
}

void sub_10064A678(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIDiagSubOpcode");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 2896))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A254();
    }
  }
}

void sub_10064A72C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufEnable");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 2904))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A2BC();
    }
  }
}

void sub_10064A810(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgAdvBufEnable");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 2912))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A324();
    }
  }
}

void sub_10064A8F4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 2920))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A38C();
    }
  }
  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      uint64_t v7 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStartInstant", 43690);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v7);
      xpc_release(v7);
    }
  }
}

void sub_10064AA04(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufMatchHandle");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgStartInstant");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v6, "kCBMsgArgModValue");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v7, "kCBMsgArgAdvBufEnable");
  sub_100197864(uint64);
  uint64_t v8 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v8 + 2928))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077F0F0();
    }
  }
}

void sub_10064AB3C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAdvBufEnable");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 2936))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A3F4();
    }
  }
}

void sub_10064ABF0(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgGenericGPIOPinNum");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgGenericGPIOControl");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgGenericGPIOState");
  uint64_t v6 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v6 + 2992))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A45C();
    }
  }
}

void sub_10064ACF4(uint64_t a1, xpc_object_t xdict)
{
  __int16 v15 = 0;
  int v14 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
  }
  else
  {
    xpc_object_t v11 = (unsigned __int16 *)sub_100197A30((uint64_t)&v14);
    if (v11) {
      int64_t v12 = *v11;
    }
    else {
      int64_t v12 = 0;
    }
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    xpc_dictionary_set_int64(reply, "kCBMsgArgACLConnHandle", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
    xpc_release(reply);
  }
}

void sub_10064ADE0(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgHDRSyncConnHandle");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgHDRSyncConnTxBw");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgHDRSyncConnRxBw");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v6, "kCBMsgArgHDRSyncConnMaxLatency");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v7, "kCBMsgArgHDRSyncConnVoiceSettting");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v8, "kCBMsgArgHDRSyncConnRetxEffort");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v9, "kCBMsgArgHDRSyncConnPacketType");
  uint64_t v10 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v10 + 1328))(v10))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4F8();
    }
  }
}

void sub_10064AF80(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  __int16 v20 = 0;
  int v19 = 0;
  if (!sub_1000198BC(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t uint64 = xpc_dictionary_get_uint64(v10, "kCBMsgArgHDRSyncConnTxBw");
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    uint64_t v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgHDRSyncConnRxBw");
    xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v14, "kCBMsgArgHDRSyncConnMaxLatency");
    xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v15, "kCBMsgArgHDRSyncConnVoiceSettting");
    xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v16, "kCBMsgArgHDRSyncConnRetxEffort");
    xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v17, "kCBMsgArgHDRSyncConnPacketType");
    uint64_t v18 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, int *, uint64_t, uint64_t))(*(void *)v18 + 1336))(v18, &v19, uint64, v13))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A560();
      }
    }
  }
}

void sub_10064B148(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2544))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(value, "kCBMsgArgSCOControlFormat");
    xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v5, "kCBMsgArgSCOControlBufferSize");
    xpc_object_t v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v6, "kCBMsgArgSCOControlNumBuffer");
    uint64_t v7 = *(void *)sub_10003FB34();
    if ((*(unsigned int (**)(void))(v7 + 1344))())
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A5C8();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078A630();
  }
}

void sub_10064B2A8(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2488))(v4))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBEnable");
    uint64_t v7 = *(void *)sub_10003FB34();
    int v8 = (*(uint64_t (**)(void))(v7 + 1376))();
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A664();
      }
      uint64_t v9 = (int)v9;
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A6CC();
    }
    unsigned __int8 uint64 = 0;
    uint64_t v9 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBEnable", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_10064B434(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2488))(v4))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBands");
    uint64_t v7 = *(void *)sub_10003FB34();
    int v8 = (*(uint64_t (**)(void))(v7 + 1384))();
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A700();
      }
      uint64_t v9 = (int)v9;
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A6CC();
    }
    unsigned __int8 uint64 = 0;
    uint64_t v9 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBBands", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_10064B5C0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2488))(v4))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBands");
    uint64_t v7 = *(void *)sub_10003FB34();
    int v8 = (*(uint64_t (**)(void))(v7 + 1392))();
    if (v8)
    {
      LODWORD(v9) = v8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A700();
      }
      uint64_t v9 = (int)v9;
    }
    else
    {
      uint64_t v9 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A6CC();
    }
    unsigned __int8 uint64 = 0;
    uint64_t v9 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v9);
    xpc_dictionary_set_uint64(v11, "kCBMsgArgHRBBands", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_10064B74C(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 2488))(v4))
  {
    __int16 v20 = 0;
    int v19 = 0;
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr");
    if (v12)
    {
      int v13 = v12;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A4C4();
      }
LABEL_5:
      unsigned __int8 uint64 = 0;
      goto LABEL_9;
    }
    if (!sub_100197A30((uint64_t)&v19))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A768();
      }
      int v13 = 0;
      goto LABEL_5;
    }
    xpc_object_t v17 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(v17, "kCBMsgArgHRBBand");
    uint64_t v18 = *(void *)sub_10003FB34();
    int v13 = (*(uint64_t (**)(void))(v18 + 1408))();
    if (v13 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A79C();
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A6CC();
    }
    unsigned __int8 uint64 = 0;
    int v13 = 1;
  }
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v16 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v13);
    xpc_dictionary_set_uint64(v16, "kCBMsgArgHRBBand", uint64);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v16);
    xpc_release(v16);
  }
}

void sub_10064B98C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2488))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(value, "kCBMsgArgHRBEnable");
    xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v5, "kCBMsgArgHRBBands");
    uint64_t v6 = *(void *)sub_10003FB34();
    if ((*(unsigned int (**)(void))(v6 + 1424))())
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A804();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078A6CC();
  }
}

void sub_10064BACC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2488))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(value, "kCBMsgArgHRBScanInterval");
    xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v5, "kCBMsgArgHRBScanWindow");
    uint64_t v6 = *(void *)sub_10003FB34();
    if ((*(unsigned int (**)(void))(v6 + 1432))())
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A86C();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078A6CC();
  }
}

void sub_10064BC0C(uint64_t a1, xpc_object_t original)
{
  xpc_object_t reply = xpc_dictionary_create_reply(original);
  uint64_t v5 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 2488))(v5))
  {
    xpc_object_t value = xpc_dictionary_get_value(original, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBNumOfGroups");
    if (uint64 - 4 <= 0xFFFFFFFC)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A8D4();
      }
      uint64_t v8 = reply;
      int64_t v9 = 3;
      goto LABEL_24;
    }
    size_t length = 0;
    xpc_object_t v10 = xpc_dictionary_get_value(original, "kCBMsgArgs");
    data = xpc_dictionary_get_data(v10, "kCBMsgArgHRBStartGroupFrequency", &length);
    size_t v12 = length;
    if (length == 2 * uint64)
    {
      int v13 = data;
      xpc_object_t v14 = xpc_dictionary_get_value(original, "kCBMsgArgs");
      xpc_object_t v15 = xpc_dictionary_get_data(v14, "kCBMsgArgHRBSizeGroupChannelMap", &length);
      if (length == v12)
      {
        xpc_object_t v16 = v15;
        xpc_object_t v17 = xpc_dictionary_get_value(original, "kCBMsgArgs");
        uint64_t v18 = xpc_dictionary_get_data(v17, "kCBMsgArgHRBChannelMap", &length);
        if (length == 63 * uint64)
        {
          int v19 = v18;
          uint64_t v20 = sub_10003FB34();
          int v21 = (*(uint64_t (**)(uint64_t, void, const void *, const void *, const void *, uint64_t))(*(void *)v20 + 1440))(v20, uint64, v13, v16, v19, 1);
          if (v21 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10078A950();
          }
          int64_t v9 = v21;
          goto LABEL_23;
        }
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10078A9B8();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10078AA3C();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10078AAA4();
    }
    int64_t v9 = 3;
LABEL_23:
    uint64_t v8 = reply;
    goto LABEL_24;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10078A6CC();
  }
  uint64_t v8 = reply;
  int64_t v9 = 11;
LABEL_24:
  xpc_dictionary_set_int64(v8, "kCBMsgArgStatus", v9);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_10064BF24(uint64_t a1, xpc_object_t xdict)
{
  unsigned __int8 v17 = 0;
  char v16 = 0;
  int bytes = 0;
  char v14 = 0;
  int v13 = 0;
  char v12 = 0;
  int v11 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgPowerDatabaseVscVersion");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v20 = xpc_dictionary_get_uint64(v5, "kCBMsgArgPowerDatabaseAntenna");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v19 = xpc_dictionary_get_uint64(v6, "kCBMsgArgPowerDatabasePCap");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v18 = xpc_dictionary_get_uint64(v7, "kCBMsgArgPowerDatabaseBandCode");
  uint64_t v8 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(void *)v8 + 1448))(v8, &uint64)
    && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078AB0C();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgPowerDatabaseVscVersion", uint64);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabaseCountryCode", v17);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabaseAntenna", v20);
    xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabasePCap", v19);
    if (uint64 - 1 <= 1)
    {
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseIpaMaxTxPwr", &bytes, 5uLL);
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseEpaMaxTxPwr", &v13, 5uLL);
      xpc_dictionary_set_data(v10, "kCBMsgArgPowerDatabaseIpaMaxPwrIdx", &v11, 5uLL);
      if (uint64 == 2) {
        xpc_dictionary_set_uint64(v10, "kCBMsgArgPowerDatabaseBandCode", v18);
      }
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_10064C174(uint64_t a1, void *a2)
{
  unsigned __int16 v28 = 0;
  __int16 v27 = 0;
  __int16 v26 = 0;
  __int16 v25 = 0;
  __int16 v24 = 0;
  __int16 v23 = 0;
  uint64_t v4 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v4 + 2488))())
  {
    __int16 v22 = 0;
    int v21 = 0;
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    int v12 = sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr");
    if (v12)
    {
      int v13 = v12;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A4C4();
      }
    }
    else
    {
      char v16 = (unsigned __int16 *)sub_100197A30((uint64_t)&v21);
      if (v16)
      {
        uint64_t v17 = *v16;
        xpc_object_t v18 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
        unsigned __int8 uint64 = xpc_dictionary_get_uint64(v18, "kCBMsgArgHRBReadTxPwrType");
        uint64_t v20 = sub_10003FB34();
        int v13 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t, unsigned __int16 *, char *, __int16 *))(*(void *)v20 + 1456))(v20, v17, uint64, 1, &v28, (char *)&v27 + 1, &v27);
        if (v13 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10078AB74();
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10078A768();
        }
        int v13 = 0;
      }
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A6CC();
    }
    int v13 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgConnHandle", v28);
    xpc_dictionary_set_int64(v15, "kCBMsgArgStatus", v13);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GBr", SHIBYTE(v27));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GEdr2", (char)v27);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GEdr3", SHIBYTE(v26));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GHdr4", (char)v26);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPower2GHdr8", SHIBYTE(v25));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBBr", (char)v25);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBEdr2", SHIBYTE(v24));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBEdr3", (char)v24);
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBHdr4", SHIBYTE(v23));
    xpc_dictionary_set_int64(v15, "kCBMsgArgHRBTxPowerHRBHdr8", (char)v23);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_10064C4C8(uint64_t a1, void *a2)
{
  __int16 v29 = 0;
  uint64_t v28 = 0;
  memset(v27, 0, sizeof(v27));
  uint64_t v4 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v4 + 2488))())
  {
    WORD2(v21[0]) = 0;
    LODWORD(v21[0]) = 0;
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    if (sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078A4C4();
      }
    }
    else
    {
      int v12 = (unsigned __int16 *)sub_100197A30((uint64_t)v21);
      if (v12)
      {
        uint64_t v13 = *v12;
        uint64_t v14 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t *, _OWORD *, uint64_t))(*(void *)v14 + 1472))(v14, v13, &v28, v27, 1))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
            sub_10078ABDC();
          }
        }
        else
        {
          xpc_object_t reply = xpc_dictionary_create_reply(a2);
          if (reply)
          {
            char v16 = reply;
            long long v25 = 0u;
            long long v26 = 0u;
            long long v23 = 0u;
            long long v24 = 0u;
            *(_OWORD *)objects = 0u;
            bzero(v21, 0x280uLL);
            xpc_dictionary_set_uint64(v16, "kCBMsgArgConnHandle", v13);
            xpc_dictionary_set_int64(v16, "kCBMsgArgStatus", 0);
            for (uint64_t i = 0; i != 10; ++i)
              objects[i] = xpc_int64_create(*((unsigned __int8 *)&v28 + i));
            xpc_object_t v18 = xpc_array_create(objects, 0xAuLL);
            xpc_dictionary_set_value(v16, "kCBMsgArgHRBAfhChannelMap", v18);
            for (uint64_t j = 0; j != 80; ++j)
              v21[j] = xpc_int64_create(*((unsigned __int16 *)v27 + j));
            xpc_object_t v20 = xpc_array_create(v21, 0x50uLL);
            xpc_dictionary_set_value(v16, "kCBMsgArgHRBAfhFreqMap", v20);
            xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v16);
            xpc_release(v16);
          }
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10078A768();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078A6CC();
  }
}

void sub_10064C7C8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2488))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(value, "kCBMsgArgHRBLimitChannelMap");
    uint64_t v5 = *(void *)sub_10003FB34();
    if ((*(unsigned int (**)(void))(v5 + 1488))())
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078AC44();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078A6CC();
  }
}

void sub_10064C8DC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2488))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgHRBBand");
    xpc_object_t v5 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    char v12 = xpc_dictionary_get_uint64(v5, "kCBMsgArgHRBChannelMaskNumLow");
    xpc_object_t v6 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    char v11 = xpc_dictionary_get_uint64(v6, "kCBMsgArgHRBChannelMaskNumHigh");
    uint64_t v7 = *(void *)sub_10003FB34();
    LODWORD(v8) = (*(uint64_t (**)(void))(v7 + 1496))();
    if (v8 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078ACAC();
    }
    uint64_t v8 = (int)v8;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078AD14();
    }
    uint64_t v8 = 0;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
    xpc_release(v10);
  }
}

void sub_10064CA7C(int a1, xpc_object_t xdict)
{
  __int16 v33 = -1;
  uint64_t v32 = -1;
  long long v31 = xmmword_1007C0180;
  __int16 v30 = 0;
  int v29 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v10 = sub_1000198BC(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    int v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 uint64 = xpc_dictionary_get_uint64(v13, "kCBMsgArgEnhTxTestHoppingMode");
    xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v15, "kCBMsgArgEnhTxTestBand");
    xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v28 = xpc_dictionary_get_uint64(v16, "kCBMsgArgEnhTxTestFrequency");
    xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhTxTestInterval");
    xpc_object_t v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v18, "kCBMsgArgEnhTxTestNumberPacket");
    xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhTxTestModulationType");
    xpc_object_t v20 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v20, "kCBMsgArgEnhTxTestLogicalChan");
    xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhTxTestPacketType");
    xpc_object_t v22 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v22, "kCBMsgArgEnhTxTestPacketLen");
    xpc_object_t v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v23, "kCBMsgArgEnhTxTestTxPowerLevel");
    xpc_object_t v24 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v24, "kCBMsgArgEnhTxTestTxPowerTableIdx");
    uint64_t v25 = sub_10003FB34();
    int v11 = (*(uint64_t (**)(uint64_t, int *, void, void))(*(void *)v25 + 1504))(v25, &v29, uint64, v28);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int16 v27 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v27);
  }
}

void sub_10064CDD4(int a1, xpc_object_t xdict)
{
  __int16 v28 = 0;
  int v27 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v10 = sub_1000198BC(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    int v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int16 uint64 = xpc_dictionary_get_uint64(v13, "kCBMsgArgEnhRxTestReportPeriod");
    xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v15 = xpc_dictionary_get_uint64(v14, "kCBMsgArgEnhRxTestIs2G");
    xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v16, "kCBMsgArgEnhRxTestOffset");
    xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhRxTestFrequency");
    xpc_object_t v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v18, "kCBMsgArgEnhRxTestModulationType");
    xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhRxTestLogicalChan");
    xpc_object_t v20 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v20, "kCBMsgArgEnhRxTestBand");
    xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhRxTestPacketType");
    xpc_object_t v22 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v22, "kCBMsgArgEnhRxTestPacketLen");
    uint64_t v23 = sub_10003FB34();
    int v11 = (*(uint64_t (**)(uint64_t, int *, void, void))(*(void *)v23 + 1512))(v23, &v27, uint64, v15);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v25 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v25);
  }
}

void sub_10064D04C(int a1, xpc_object_t xdict)
{
  __int16 v28 = 0;
  int v27 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v10 = sub_1000198BC(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr");
  if (v10)
  {
    int v11 = v10;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
  }
  else
  {
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTestEnable");
    xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int16 uint64 = xpc_dictionary_get_uint64(v13, "kCBMsgArgEnhRxTestReportPeriod");
    xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    unsigned __int8 v15 = xpc_dictionary_get_uint64(v14, "kCBMsgArgEnhRxTestIs2G");
    xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v16, "kCBMsgArgEnhRxTestModulationType");
    xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v17, "kCBMsgArgEnhRxTestLogicalChan");
    xpc_object_t v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v18, "kCBMsgArgEnhRxTestPacketType");
    xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v19, "kCBMsgArgEnhRxTestPacketLen");
    xpc_object_t v20 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v20, "kCBMsgArgEnhRxTestBand");
    xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v21, "kCBMsgArgEnhRxTestOffset");
    xpc_object_t v22 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    xpc_dictionary_get_uint64(v22, "kCBMsgArgEnhRxTestFrequency");
    uint64_t v23 = sub_10003FB34();
    int v11 = (*(uint64_t (**)(uint64_t, int *, void, void))(*(void *)v23 + 1512))(v23, &v27, uint64, v15);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v25 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
    xpc_release(v25);
  }
}

void sub_10064D2C8(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgEnhTxTestContHRBEnable");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgEnhTxTestContCarrierEnable");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgEnhTxTestContDualCore");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v6, "kCBMsgArgEnhTxTestContAntennaSelection");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v7, "kCBMsgArgEnhTxTestContMode");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v8, "kCBMsgArgEnhTxTestContModulationType");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v9, "kCBMsgArgEnhTxTestContTxPower");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v10, "kCBMsgArgEnhTxTestContTxPowerTableIdx");
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v11, "kCBMsgArgEnhTxTestContBand");
  xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v12, "kCBMsgArgEnhTxTestContFrequency2G");
  xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v13, "kCBMsgArgEnhTxTestContFrequencyHRB");
  uint64_t v14 = sub_10003FB34();
  int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 1520))(v14);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v17 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v15);
    xpc_release(v17);
  }
}

void sub_10064D51C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLERoleIsEnable");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgLERoleRoles");
  sub_100023344();
  if (uint64) {
    int v15 = sub_1002265A0(v7);
  }
  else {
    int v15 = sub_100226648(v7, v8, v9, v10, v11, v12, v13, v14);
  }
  int v16 = v15;
  sub_1000232E0();
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v18 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v18);
    xpc_release(v18);
  }
}

void sub_10064D600(uint64_t a1, xpc_object_t xdict)
{
  __int16 v26 = 0;
  int v25 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    LODWORD(v12) = v11;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
    uint64_t v12 = (int)v12;
  }
  else
  {
    uint64_t v13 = sub_100197A30((uint64_t)&v25);
    if (v13)
    {
      uint64_t v14 = (unsigned __int16 *)v13;
      xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      unsigned __int8 uint64 = xpc_dictionary_get_uint64(v15, "kCBMsgArgBTPerfTestType");
      xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      int v18 = xpc_dictionary_get_uint64(v17, "kCBMsgArgBTPerfTestDurationInSec");
      xpc_object_t v19 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        buf.tv_sec = __PAIR64__(*v14, 67109888);
        LOWORD(buf.tv_usec) = 1024;
        *(__darwin_suseconds_t *)((char *)&buf.tv_usec + 2) = uint64;
        *((_WORD *)&buf.tv_usec + 3) = 1024;
        int v28 = 0;
        __int16 v29 = 1024;
        int v30 = v18;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "_BTPerfTest handle=%x type=%d isSymmetric=%d durationInSec=%d\n", (uint8_t *)&buf, 0x1Au);
        xpc_object_t v19 = qword_100A19EC8;
      }
      qword_100A13AE8 = (uint64_t)v14;
      byte_100A13AF0 = uint64;
      dword_100A13AF8 = v18;
      dword_100A13ADC = 0;
      dword_100A13AE4 = 0;
      byte_100A13AFC = 0;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        int v20 = word_1007C01E0[uint64];
        LODWORD(buf.tv_sec) = 67109120;
        HIDWORD(buf.tv_sec) = v20;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "_BTPerfTest packetSize=%d\n", (uint8_t *)&buf, 8u);
      }
      buf.tv_sec = 0;
      *(void *)&buf.tv_usec = 0;
      gettimeofday(&buf, 0);
      *(double *)&qword_100A13B00 = (double)buf.tv_usec / 1000.0 + (double)(1000 * buf.tv_sec);
      dispatch_time_t v21 = dispatch_time(0, 0);
      global_queue = dispatch_get_global_queue(0, 0);
      dispatch_after_f(v21, global_queue, 0, (dispatch_function_t)sub_100652F40);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10078A768();
    }
    uint64_t v12 = 0;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v24 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v24);
    xpc_release(v24);
  }
}

void sub_10064D914(uint64_t a1, void *a2)
{
  byte_100A13AD8 = 1;
  sub_100023344();
  int v4 = sub_1001E5FF0(20545, (uint64_t)sub_1006525D0);
  sub_1000232E0();
  dword_100A13ADC = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v6 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v4);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v6);
    xpc_release(v6);
  }
}

void sub_10064D9CC(uint64_t a1, void *a2)
{
  sub_100023344();
  int v4 = sub_1001E61E4(20545);
  sub_1000232E0();
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    uint64_t v6 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v4);
    if (byte_100A13AF0 > 6u)
    {
      double v9 = 0.0;
    }
    else
    {
      if (((1 << byte_100A13AF0) & 0x49) != 0)
      {
        double v7 = (double)(1000 * dword_100A13AF8);
        double v8 = 3.75;
      }
      else
      {
        double v7 = (double)(1000 * dword_100A13AF8);
        if (((1 << byte_100A13AF0) & 0x12) != 0) {
          double v8 = 1.25;
        }
        else {
          double v8 = 2.5;
        }
      }
      double v9 = v7 / v8;
    }
    xpc_dictionary_set_double(v6, "kCBMsgArgBTPerfTestMaxPacket", v9);
    if (byte_100A13AD8 == 1)
    {
      xpc_dictionary_set_uint64(v6, "kCBMsgArgBTPerfTestPacketRcvd", dword_100A13ADC);
      dword_100A13ADC = 0;
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v6);
    xpc_release(v6);
  }
}

void sub_10064DB28(uint64_t a1, xpc_object_t xdict)
{
  __int16 v16 = 0;
  int v15 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    int v12 = v11;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
  }
  else
  {
    byte_100A13AD8 = 0;
    sub_100023344();
    int v12 = sub_1001DF7BC((uint64_t)sub_100652708, (uint64_t)sub_1006527E0, (uint64_t)sub_10065292C, 20545, (uint64_t)&v15, (uint64_t)&unk_1007C0190, &word_100A13AE0, (uint64_t)&unk_1007C01B0);
    sub_1000232E0();
  }
  dword_100A13AE4 = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_10064DC74(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v11 = sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr");
  if (v11)
  {
    int v12 = v11;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
  }
  else
  {
    sub_100023344();
    int v12 = sub_1001E121C((unsigned __int16)word_100A13AE0, 436);
    sub_1000232E0();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v12);
    if (byte_100A13AF0 > 6u)
    {
      double v17 = 0.0;
    }
    else
    {
      if (((1 << byte_100A13AF0) & 0x49) != 0)
      {
        double v15 = (double)(1000 * dword_100A13AF8);
        double v16 = 3.75;
      }
      else
      {
        double v15 = (double)(1000 * dword_100A13AF8);
        if (((1 << byte_100A13AF0) & 0x12) != 0) {
          double v16 = 1.25;
        }
        else {
          double v16 = 2.5;
        }
      }
      double v17 = v15 / v16;
    }
    xpc_dictionary_set_double(v14, "kCBMsgArgBTPerfTestMaxPacket", v17);
    if ((byte_100A13AD8 & 1) == 0)
    {
      xpc_dictionary_set_uint64(v14, "kCBMsgArgBTPerfTestPacketSent", dword_100A13AE4);
      xpc_dictionary_set_double(v14, "kCBMsgArgBTPerfTestThroughput", (double)((word_1007C01E0[byte_100A13AF0] + 4) * dword_100A13AE4)* 8.0/ (double)(1000 * dword_100A13AF8));
      dword_100A13AE4 = 0;
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_10064DE80(int a1, xpc_object_t xdict)
{
  __int16 v24 = 0;
  int v23 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078AD7C();
    }
    return;
  }
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(v10, "kCBMsgArgSniffIntervalMax");
  xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgSniffIntervalMin");
  xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v14, "kCBMsgArgSniffAttempt");
  xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v15, "kCBMsgArgSniffTimeout");
  xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v17 = xpc_dictionary_get_BOOL(v16, "kCBMsgArgAoSStates");
  sub_100023344();
  int v18 = sub_1001831DC((uint64_t)&v23, uint64, v13);
  sub_1000232E0();
  if (!v17 || v18)
  {
    if (!v18) {
      return;
    }
    goto LABEL_4;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BCE30);
  }
  int v21 = v23;
  __int16 v22 = v24;
  uint64_t v19 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v21, 1);
  if (v19)
  {
    uint64_t v20 = v19;
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009BCE50);
    }
    sub_1002CFB04(qword_1009F8128, 1, v20);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078AD48();
  }
}

void sub_10064E0D0(int a1, xpc_object_t xdict)
{
  __int16 v18 = 0;
  int v17 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(value, 1, v4, v5, v6, v7, v8, v9, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
LABEL_4:
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078ADE4();
    }
    return;
  }
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v11 = xpc_dictionary_get_BOOL(v10, "kCBMsgArgAoSStates");
  sub_100023344();
  int v12 = sub_10018354C((uint64_t)&v17);
  sub_1000232E0();
  if (!v11 || v12)
  {
    if (!v12) {
      return;
    }
    goto LABEL_4;
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BCE30);
  }
  int v15 = v17;
  __int16 v16 = v18;
  uint64_t v13 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v15, 1);
  if (v13)
  {
    uint64_t v14 = v13;
    if (qword_1009F8130 != -1) {
      dispatch_once(&qword_1009F8130, &stru_1009BCE50);
    }
    sub_1002CFB04(qword_1009F8128, 0, v14);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078AD48();
  }
}

void sub_10064E28C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078AEB4();
    }
  }
  else
  {
    xpc_dictionary_get_uint64(value, "kCBMsgArgPhyStatsEnable");
    xpc_dictionary_get_uint64(value, "kCBMsgArgPhyStatsInterval");
    xpc_dictionary_get_uint64(value, "kCBMsgArgType");
    uint64_t v9 = *(void *)sub_10003FB34();
    if ((*(unsigned int (**)(void))(v9 + 328))() && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078AE4C();
    }
  }
}

void sub_10064E420(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2552))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v17 = 0;
    int v16 = 0;
    if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_10078AF1C();
    }
    else
    {
      BOOL v11 = (unsigned __int16 *)sub_100197A30((uint64_t)&v16);
      if (v11)
      {
        unsigned int v15 = *v11;
        unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffInterval");
        unsigned __int8 v13 = xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxAge");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxRetry");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPacketMerge");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioDownlinkCID");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioUplinkCID");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPolicy");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffTimestampPeriod");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffCToPPacketSize");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCPacketSize");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMethod");
        xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAdvanceTime");
        uint64_t v12 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, void, void, void))(*(void *)v12 + 1528))(v12, v15, uint64, v13)&& os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10078A768();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078AF84();
  }
}

void sub_10064E71C(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2552))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v15 = 0;
    int v14 = 0;
    if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_10078AFB8();
    }
    else
    {
      BOOL v11 = (unsigned __int16 *)sub_100197A30((uint64_t)&v14);
      if (v11)
      {
        uint64_t v12 = *v11;
        uint64_t v13 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1536))(v13, v12, 1)
          && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
        {
          goto LABEL_4;
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_10078A768();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078B020();
  }
}

void sub_10064E8B8(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2552))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v13 = 0;
    int v12 = 0;
    if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_10078B054();
    }
    else if (sub_100197A30((uint64_t)&v12))
    {
      xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffTimestampPeriod");
      xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffCToPPacketSize");
      xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCPacketSize");
      xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffMaxAge");
      xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffAudioUplinkCID");
      uint64_t v11 = *(void *)sub_10003FB34();
      if ((*(unsigned int (**)(void))(v11 + 1544))()
        && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_4;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10078A768();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078B0BC();
  }
}

void sub_10064EAEC(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2552))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v13 = 0;
    int v12 = 0;
    if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_10078B0F0();
    }
    else if (sub_100197A30((uint64_t)&v12))
    {
      xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffPToCMaxAge");
      uint64_t v11 = *(void *)sub_10003FB34();
      if ((*(unsigned int (**)(void))(v11 + 1552))()
        && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_4;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10078A768();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078B158();
  }
}

void sub_10064ECB0(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2552))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v13 = 0;
    int v12 = 0;
    if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_10078B18C();
    }
    else if (sub_100197A30((uint64_t)&v12))
    {
      xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffLMPFlow");
      uint64_t v11 = *(void *)sub_10003FB34();
      if ((*(unsigned int (**)(void))(v11 + 1560))()
        && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_4;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10078A768();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078B1F4();
  }
}

void sub_10064EE74(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2552))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    __int16 v13 = 0;
    int v12 = 0;
    if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
LABEL_4:
      }
        sub_10078B228();
    }
    else if (sub_100197A30((uint64_t)&v12))
    {
      xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffEmptyPacketReport");
      uint64_t v11 = *(void *)sub_10003FB34();
      if ((*(unsigned int (**)(void))(v11 + 1568))()
        && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        goto LABEL_4;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10078A768();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078B290();
  }
}

void sub_10064F038(uint64_t a1, void *a2)
{
  uint64_t v3 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 2552))(v3))
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
    xpc_dictionary_get_uint64(value, "kCBMsgArgAdvSniffControlAoS");
    uint64_t v5 = *(void *)sub_10003FB34();
    if ((*(unsigned int (**)(void))(v5 + 1576))())
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078B2C4();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_10078B32C();
  }
}

void sub_10064F14C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgBTSCPageScanEnable");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgBTSCPageScanInterval");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgBTSCPageScanWindow");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v6, "kCBMsgArgBTSCPageScanInterlaced");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v7, "kCBMsgArgBTSCPageScanElnaMode");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v8, "kCBMsgArgBTSCPageScanUseAuxScanParams");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v9, "kCBMsgArgBTSCPageScanEnableAuxScan");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v10, "kCBMsgArgBTSCPageScanPreemptAuxScan");
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v11, "kCBMsgArgBTSCPageScanAuxScanDurationInMs");
  uint64_t v12 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 3408))(v12))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B360();
    }
  }
}

void sub_10064F344(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgQoSsessionID");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v78 = xpc_dictionary_get_uint64(v4, "kCBMsgArgQoSalarmL1Priority");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v77 = xpc_dictionary_get_uint64(v5, "kCBMsgArgQoSalarmL2Priority");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v76 = xpc_dictionary_get_uint64(v6, "kCBMsgArgQoSalarmL3Priority");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v75 = xpc_dictionary_get_uint64(v7, "kCBMsgArgQoSalarmL4Priority");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v74 = xpc_dictionary_get_uint64(v8, "kCBMsgArgQoSuseRxSkippedPercentage") != 0;
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v73 = xpc_dictionary_get_uint64(v9, "kCBMsgArgQoSuseRxPreemptedCount") != 0;
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v72 = xpc_dictionary_get_uint64(v10, "kCBMsgArgQoSuseRxCslPreemptedCount ") != 0;
  xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v71 = xpc_dictionary_get_uint64(v11, "kCBMsgArgQoSraisePriorityIfRxHeaderIsReceived") != 0;
  xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v70 = xpc_dictionary_get_uint64(v12, "kCBMsgArgQoSraisePriorityIfRxAckHeaderReceived") != 0;
  xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v69 = xpc_dictionary_get_uint64(v13, "kCBMsgArgQoSpriorityToRaiseForScheduledReception");
  xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v68 = xpc_dictionary_get_uint64(v14, "kCBMsgArgQoSuseRxCslCountInHighPriority") != 0;
  xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v67 = xpc_dictionary_get_uint64(v15, "kCBMsgArgQoSuseTxCslCountInHighPriority") != 0;
  xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v66 = xpc_dictionary_get_uint64(v16, "kCBMsgArgQoSuseTxPreemptedCount") != 0;
  xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v65 = xpc_dictionary_get_uint64(v17, "kCBMsgArgQoSuseTxCslPreemptedCount") != 0;
  xpc_object_t v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  BOOL v64 = xpc_dictionary_get_uint64(v18, "kCBMsgArgQoSuseTxDelay") != 0;
  xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  int v63 = xpc_dictionary_get_uint64(v19, "kCBMsgArgQoSrxSkippedPercentageL0");
  xpc_object_t v20 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v62 = xpc_dictionary_get_uint64(v20, "kCBMsgArgQoSrxSkippedPercentageL1");
  xpc_object_t v21 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v61 = xpc_dictionary_get_uint64(v21, "kCBMsgArgQoSrxSkippedPercentageL2");
  xpc_object_t v22 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v60 = xpc_dictionary_get_uint64(v22, "kCBMsgArgQoSrxSkippedPercentageL3");
  xpc_object_t v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v59 = xpc_dictionary_get_uint64(v23, "kCBMsgArgQoSrxPreemptedCountL0");
  xpc_object_t v24 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v58 = xpc_dictionary_get_uint64(v24, "kCBMsgArgQoSrxPreemptedCountL1");
  xpc_object_t v25 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v57 = xpc_dictionary_get_uint64(v25, "kCBMsgArgQoSrxPreemptedCountL2");
  xpc_object_t v26 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v56 = xpc_dictionary_get_uint64(v26, "kCBMsgArgQoSrxPreemptedCountL3");
  xpc_object_t v27 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v55 = xpc_dictionary_get_uint64(v27, "kCBMsgArgQoSrxCslCountInHighPriority");
  xpc_object_t v28 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v54 = xpc_dictionary_get_uint64(v28, "kCBMsgArgQoSrxCslPreemptedCountL0");
  xpc_object_t v29 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v53 = xpc_dictionary_get_uint64(v29, "kCBMsgArgQoSrxCslPreemptedCountL1");
  xpc_object_t v30 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v52 = xpc_dictionary_get_uint64(v30, "kCBMsgArgQoSrxCslPreemptedCountL2");
  xpc_object_t v31 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned int v51 = xpc_dictionary_get_uint64(v31, "kCBMsgArgQoSrxCslPreemptedCountL3");
  xpc_object_t v32 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v32, "kCBMsgArgQoStxDelayL0");
  xpc_object_t v33 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v33, "kCBMsgArgQoStxDelayL1");
  xpc_object_t v34 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v34, "kCBMsgArgQoStxDelayL2");
  xpc_object_t v35 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v35, "kCBMsgArgQoStxDelayL3");
  xpc_object_t v36 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v36, "kCBMsgArgQoStxPreemptedCountL0");
  xpc_object_t v37 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v37, "kCBMsgArgQoStxPreemptedCountL1");
  xpc_object_t v38 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v38, "kCBMsgArgQoStxPreemptedCountL2");
  xpc_object_t v39 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v39, "kCBMsgArgQoStxPreemptedCountL3");
  xpc_object_t v40 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v40, "kCBMsgArgQoStxCslCountInHighPriority");
  xpc_object_t v41 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v41, "kCBMsgArgQoStxCslPreemptedCountL0");
  xpc_object_t v42 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v42, "kCBMsgArgQoStxCslPreemptedCountL1");
  xpc_object_t v43 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v43, "kCBMsgArgQoStxCslPreemptedCountL2");
  xpc_object_t v44 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v44, "kCBMsgArgQoStxCslPreemptedCountL3");
  xpc_object_t v45 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v45, "kCBMsgArgQoStxDurationInHighPriority");
  xpc_object_t v46 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v46, "kCBMsgArgQoSCslPriority");
  uint64_t v47 = sub_10003FB34();
  int v50 = v63;
  BOOL v49 = v64;
  HIBYTE(v48) = v65;
  BYTE6(v48) = v66;
  BYTE5(v48) = v67;
  BYTE4(v48) = v68;
  BYTE3(v48) = v69;
  BYTE2(v48) = v70;
  BYTE1(v48) = v71;
  LOBYTE(v48) = v72;
  if ((*(unsigned int (**)(uint64_t, void, void, void, void, void, BOOL, BOOL, uint64_t, BOOL, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t, unint64_t))(*(void *)v47 + 3424))(v47, uint64, v78, v77, v76, v75, v74, v73, v48, v49, __PAIR64__(v61, v62), __PAIR64__(v59, v60), __PAIR64__(v57, v58), __PAIR64__(v55, v56), __PAIR64__(v53, v54), __PAIR64__(v51, v52)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B3C8();
    }
  }
}

void sub_10064FA40(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgQoSsessionID");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 3432))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B3C8();
    }
  }
}

void sub_10064FAF0(uint64_t a1, void *a2)
{
  memset(v14, 0, sizeof(v14));
  uint64_t v4 = sub_10003FB34();
  int v10 = (*(uint64_t (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 2944))(v4, 1, v14, v5, v6, v7, v8, v9);
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    xpc_object_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v10);
    if (v10)
    {
      uint64_t v13 = 0;
    }
    else
    {
      uint64_t v13 = 80;
      xpc_dictionary_set_data(v12, "kCBMsgArgSPMICoexBufferAddr", v14, 0x50uLL);
    }
    xpc_dictionary_set_uint64(v12, "kCBMsgArgSPMICoexBufferSize", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_10064FBF0(int a1, xpc_object_t xdict)
{
  memset(v9, 0, sizeof(v9));
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIPeripheralID");
  uint64_t v4 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 2952))(v4, uint64, 1, v9, v5, v6, v7, v8))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B430();
    }
  }
}

void sub_10064FCC0(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgSPMIPeripheralID");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgSPMICoexMsgPriority");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 2960))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B498();
    }
  }
}

void sub_10064FDFC(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexTxType");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgSPMICoexTxID");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexTxControl");
  uint64_t v6 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v6 + 2968))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B500();
    }
  }
}

void sub_10064FF00(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexType53EnabledBitmask");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(v4, "kCBMsgArgSPMICoexType53Interval");
  uint64_t v5 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v5 + 2976))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B568();
    }
  }
}

void sub_10064FFE4(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSPMICoexType60ID2G");
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v13 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSPMICoexType60IDHRB1");
  xpc_object_t v5 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v14 = xpc_dictionary_get_uint64(v5, "kCBMsgArgSPMICoexType60IDHRB3");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v15 = xpc_dictionary_get_uint64(v6, "kCBMsgArgSPMICoexType60IDHRB4");
  xpc_object_t v7 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v16 = xpc_dictionary_get_uint64(v7, "kCBMsgArgSPMICoexType60IDHRB5A");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v17 = xpc_dictionary_get_uint64(v8, "kCBMsgArgSPMICoexType60IDHRB5B");
  xpc_object_t v9 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v18 = xpc_dictionary_get_uint64(v9, "kCBMsgArgSPMICoexType60IDHRB5C");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v19 = xpc_dictionary_get_uint64(v10, "kCBMsgArgSPMICoexType60IDHRB5D");
  uint64_t v11 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v11 + 2984))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B5D0();
    }
  }
}

void sub_10065016C(uint64_t a1, void *a2)
{
  memset(v17, 0, 251);
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4))
  {
    if ((*(_DWORD *)(sub_10003FB34() + 712) - 22) > 0x7B9)
    {
      LODWORD(uint64) = 0;
      unsigned __int8 v8 = 0;
      int v14 = 2;
    }
    else
    {
      xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgReadControllerRamAddr");
      xpc_object_t v7 = xpc_dictionary_get_value(a2, "kCBMsgArgs");
      unsigned __int8 v8 = xpc_dictionary_get_uint64(v7, "kCBMsgArgReadControllerRamSize");
      uint64_t v9 = sub_10003FB34();
      int v14 = (*(uint64_t (**)(uint64_t, uint64_t, void, _OWORD *, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 3464))(v9, uint64, v8, v17, v10, v11, v12, v13);
      if (v14 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078B638();
      }
    }
  }
  else
  {
    LODWORD(uint64) = 0;
    unsigned __int8 v8 = 0;
    int v14 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  if (reply)
  {
    char v16 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v14);
    if (!v14)
    {
      xpc_dictionary_set_uint64(v16, "kCBMsgArgReadControllerRamAddr", uint64);
      xpc_dictionary_set_uint64(v16, "kCBMsgArgReadControllerRamSize", v8);
      xpc_dictionary_set_data(v16, "kCBMsgArgReadControllerRamData", v17, v8);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v16);
    xpc_release(v16);
  }
}

void sub_10065039C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgMinEncryptionKeySize");
  sub_100023344();
  int v10 = sub_10001BDE0(133, 0, v4, v5, v6, v7, v8, v9, uint64);
  sub_1000232E0();
  if (v10)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B6A0();
    }
  }
}

void sub_100650430(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgCalSetTxPowerMode");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgTxFEConfigAntenna");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgTxFEConfigCountryCode");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  char v11 = xpc_dictionary_get_uint64(v10, "kCBMsgArgTxFEConfigPowerCap");
  if (uint64 == 80)
  {
    char v16 = uint64;
    char v17 = 0;
    char v18 = v7;
    char v19 = v9;
    char v20 = v11;
    uint64_t v12 = *(void *)sub_10003FB34();
    LODWORD(v13) = (*(uint64_t (**)(void))(v12 + 504))();
    if (v13 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B708();
    }
    uint64_t v13 = (int)v13;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B770();
    }
    uint64_t v13 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    char v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_1006505E8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgAction");
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BCE30);
  }
  uint64_t v8 = sub_100030F10((uint64_t)off_1009F7EF8, uint64, 1);
  if (v8)
  {
    uint64_t v9 = v8;
    if (v7 == 3)
    {
      *(_DWORD *)xpc_object_t v35 = 393218;
      xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v36) = xpc_dictionary_get_uint64(v10, "kCBMsgArgBT2GEnable") & 7;
      xpc_object_t v11 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      BYTE1(v36) = xpc_dictionary_get_int64(v11, "kCBMsgArgBT2GSigRssiThreshold");
      xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      BYTE2(v36) = xpc_dictionary_get_int64(v12, "kCBMsgArgBT2GiPABFRssiThreshold");
      xpc_object_t v13 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      HIBYTE(v36) = xpc_dictionary_get_int64(v13, "kCBMsgArgBT2GePABFRssiThreshold");
      xpc_object_t v14 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[0] = xpc_dictionary_get_int64(v14, "kCBMsgArgBT2GBFGainThreshold");
      *(_WORD *)&v37[1] = 1537;
      _OWORD v37[3] = 0;
      xpc_object_t v15 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[4] = xpc_dictionary_get_uint64(v15, "kCBMsgArgHRBEnable") & 7;
      xpc_object_t v16 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      v37[5] = xpc_dictionary_get_int64(v16, "kCBMsgArgHRBSigRssiThreshold");
      xpc_object_t v17 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v38) = xpc_dictionary_get_int64(v17, "kCBMsgArgHRBiPABFRssiThreshold");
      xpc_object_t v18 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      HIBYTE(v38) = xpc_dictionary_get_int64(v18, "kCBMsgArgHRBePABFRssiThreshold");
      xpc_object_t v19 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      LOBYTE(v39) = xpc_dictionary_get_int64(v19, "kCBMsgArgHRBBFGainThreshold");
      char v20 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)timeval buf = 67109120;
        int v45 = 3;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "Action:%d Multiband Setting\n", buf, 8u);
      }
      uint64_t v21 = sub_10003FB34();
      int v22 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(*(void *)v21 + 144))(v21, v9, 17, v35);
    }
    else
    {
      uint64_t v34 = a1;
      xpc_object_t v23 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      unsigned __int8 v24 = xpc_dictionary_get_uint64(v23, "kCBMsgArgPolicy");
      xpc_object_t v25 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      char int64 = xpc_dictionary_get_int64(v25, "kCBMsgArgiPABFThreshold");
      xpc_object_t v27 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      char v28 = xpc_dictionary_get_int64(v27, "kCBMsgArgePABFThreshold");
      xpc_object_t v29 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
      unsigned __int8 v30 = xpc_dictionary_get_uint64(v29, "kCBMsgArgeBFGainThreshold");
      xpc_object_t v31 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)xpc_object_t v35 = 67110144;
        int v36 = v7;
        *(_WORD *)xpc_object_t v37 = 1024;
        *(_DWORD *)&void v37[2] = v24;
        __int16 v38 = 1024;
        int v39 = int64;
        __int16 v40 = 1024;
        int v41 = v28;
        __int16 v42 = 1024;
        int v43 = v30;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Action:%d Policy:%d iPABFThreshold:%d ePABFThreshold:%d BFGainThreshold:%d\n", v35, 0x20u);
      }
      uint64_t v32 = sub_10003FB34();
      int v22 = (*(uint64_t (**)(uint64_t, void, uint64_t, void, void, void, void))(*(void *)v32 + 128))(v32, v7, v9, v24, int64, (char)v30, v28);
      a1 = v34;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078AD48();
    }
    int v22 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v22);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_100650A6C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgAction");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgPolicy");
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BCE30);
  }
  uint64_t v10 = sub_100030F10((uint64_t)off_1009F7EF8, uint64, 1);
  if (v10)
  {
    uint64_t v11 = v10;
    xpc_object_t v12 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
    {
      v16[0] = 67109376;
      v16[1] = v7;
      __int16 v17 = 1024;
      int v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "MRC logging: Action:%d Policy:%d \n", (uint8_t *)v16, 0xEu);
    }
    uint64_t v13 = sub_10003FB34();
    uint64_t v14 = (*(int (**)(uint64_t, void, uint64_t, BOOL))(*(void *)v13 + 152))(v13, v7, v11, v9 != 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078AD48();
    }
    uint64_t v14 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v14);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_100650C88(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnHandle");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgBTAntennaAction");
  xpc_object_t v8 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v9 = xpc_dictionary_get_uint64(v8, "kCBMsgArgBTAntennaCfg");
  xpc_object_t v10 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v11 = xpc_dictionary_get_uint64(v10, "kCBMsgArgBTAntennaCfgParam1");
  xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v13 = xpc_dictionary_get_uint64(v12, "kCBMsgArgBTAntennaCfgParam2");
  uint64_t v14 = *(void *)sub_10003FB34();
  int v15 = (*(uint64_t (**)(void))(v14 + 904))();
  if (v15)
  {
    xpc_object_t v16 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      v18[0] = 67110144;
      v18[1] = uint64;
      __int16 v19 = 1024;
      int v20 = v7;
      __int16 v21 = 1024;
      int v22 = v9;
      __int16 v23 = 1024;
      int v24 = v11;
      __int16 v25 = 1024;
      int v26 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to set BT antenna config; Handle: %d, Action: %d, Config: %d, Param1: %d, Param2: %d",
        (uint8_t *)v18,
        0x20u);
    }
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v15);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_100650EB4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadMSFFilePath");
  off_t v17 = 0;
  int v18 = 0;
  int v6 = sub_100652AF8((uint64_t)string, string, &v18, &v17);
  unsigned __int8 v7 = v18;
  if (v6)
  {
    int v8 = 1;
  }
  else
  {
    off_t v10 = v17;
    if (v17 < 1)
    {
      int v8 = 0;
    }
    else
    {
      int64_t v11 = v17 / 0xE6uLL;
      xpc_object_t v12 = (char *)v18;
      unsigned __int8 v13 = (char *)v18;
      while (1)
      {
        uint64_t v14 = sub_10003FB34();
        int v8 = (*(uint64_t (**)(uint64_t, uint64_t, void, char *, void, uint64_t))(*(void *)v14 + 3600))(v14, 3, (unsigned __int16)v11, v13, (unsigned __int16)v10, 1);
        if (v8) {
          break;
        }
        BOOL v15 = v11-- < 1;
        if (!v15)
        {
          v13 += 230;
          v12 += 230;
          BOOL v15 = v10 <= 230;
          v10 -= 230;
          if (!v15) {
            continue;
          }
        }
        goto LABEL_3;
      }
      xpc_object_t v16 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)timeval buf = 67109888;
        int v20 = 3;
        __int16 v21 = 1024;
        int v22 = (unsigned __int16)v11;
        __int16 v23 = 2048;
        int v24 = v12;
        __int16 v25 = 1024;
        int v26 = (unsigned __int16)v10;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Error Downloading MSF File: transferType = %d, chunkLeft = %d,  payID = %p, dataLen = %d\n", buf, 0x1Eu);
        xpc_object_t v16 = qword_100A19EC8;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_10078B7D8();
      }
    }
  }
LABEL_3:
  if (v7) {
    free(v7);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1006510EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadPwrRegulatoryFilePath");
  off_t v12 = 0;
  unsigned __int8 v13 = 0;
  if (sub_100652AF8((uint64_t)string, string, &v13, &v12))
  {
    uint64_t v6 = 1;
    goto LABEL_12;
  }
  unsigned __int16 v7 = v12;
  if (v12 != 250 && v12 != 210)
  {
    off_t v10 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B80C(v7, v10);
    }
    goto LABEL_11;
  }
  uint64_t v8 = sub_10003FB34();
  int v9 = (*(uint64_t (**)(uint64_t, void *, void, uint64_t))(*(void *)v8 + 3608))(v8, v13, v7, 1);
  if (!v9)
  {
LABEL_11:
    uint64_t v6 = 0;
    goto LABEL_12;
  }
  LODWORD(v6) = v9;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_10078B8A4();
  }
  uint64_t v6 = (int)v6;
LABEL_12:
  if (v13) {
    free(v13);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v6);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_100651254(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = xpc_dictionary_get_string(value, "kCBMsgArgLoadPwrRegulatoryFilePathA3");
  off_t v17 = 0;
  int v18 = 0;
  int v6 = sub_100652AF8((uint64_t)string, string, &v18, &v17);
  unsigned __int16 v7 = v18;
  if (v6)
  {
    int v8 = 1;
  }
  else
  {
    off_t v10 = v17;
    if (v17 < 1)
    {
      int v8 = 0;
    }
    else
    {
      int64_t v11 = v17 / 0xCFuLL;
      off_t v12 = (char *)v18;
      unsigned __int8 v13 = (char *)v18;
      while (1)
      {
        uint64_t v14 = sub_10003FB34();
        int v8 = (*(uint64_t (**)(uint64_t, void, char *, void, uint64_t))(*(void *)v14 + 3616))(v14, (unsigned __int16)v11, v13, (unsigned __int16)v10, 1);
        if (v8) {
          break;
        }
        BOOL v15 = v11-- < 1;
        if (!v15)
        {
          v13 += 207;
          v12 += 207;
          BOOL v15 = v10 <= 207;
          v10 -= 207;
          if (!v15) {
            continue;
          }
        }
        goto LABEL_3;
      }
      xpc_object_t v16 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)timeval buf = 67109632;
        int v20 = (unsigned __int16)v11;
        __int16 v21 = 2048;
        int v22 = v12;
        __int16 v23 = 1024;
        int v24 = (unsigned __int16)v10;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Error Downloading Power Regulatory A3 File: chunkLeft = %d,  payID = %p, dataLen = %d\n", buf, 0x18u);
        xpc_object_t v16 = qword_100A19EC8;
      }
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
        sub_10078B7D8();
      }
    }
  }
LABEL_3:
  if (v7) {
    free(v7);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v8);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_100651484(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTAddr");
  xpc_object_t v6 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(v6, "kCBMsgArgTriggerULLM");
  int v8 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    v13[0] = 67109120;
    v13[1] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BTTest Command Low Latency Game received: %d\n", (uint8_t *)v13, 8u);
  }
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BCE30);
  }
  uint64_t v9 = sub_100030F10((uint64_t)off_1009F7EF8, uint64, 1);
  if (!v9)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078AD48();
    }
    goto LABEL_15;
  }
  uint64_t v10 = v9;
  if (!sub_1004764A0(v9))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B8D8();
    }
    goto LABEL_15;
  }
  if (!_os_feature_enabled_impl())
  {
LABEL_15:
    uint64_t v11 = 1;
    goto LABEL_16;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009BCE70);
  }
  sub_100573AA4((uint64_t)off_1009F80A8, v7 != 0, v10);
  uint64_t v11 = 0;
LABEL_16:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1006516A8(uint64_t a1, xpc_object_t xdict)
{
  __int16 v17 = 0;
  int v16 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(value, 1, v5, v6, v7, v8, v9, v10, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B90C();
    }
    int v11 = 1;
  }
  else
  {
    xpc_object_t v12 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
    int uint64 = xpc_dictionary_get_uint64(v12, "kCBMsgArgBudswapCmd");
    if (uint64 == 2)
    {
      sub_100023344();
      int v14 = sub_10010B158((uint64_t)&v16);
    }
    else
    {
      if (uint64 != 1)
      {
        int v11 = 0;
        goto LABEL_11;
      }
      sub_100023344();
      int v14 = sub_10010AB08((unsigned __int8 *)&v16);
    }
    int v11 = v14;
    sub_1000232E0();
  }
LABEL_11:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_1006517E0(uint64_t a1, xpc_object_t xdict)
{
  size_t length = 0;
  LOWORD(v21) = 0;
  memset(bytes, 0, sizeof(bytes));
  char v15 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uint64_t v5 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5))
  {
    LOWORD(v21) = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "Device");
    sub_10004191C(__p, "RAWHCICMD");
    (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    if (v15)
    {
      unsigned __int16 uint64 = xpc_dictionary_get_uint64(value, "kCBMsgArgOpcode");
      data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
      uint64_t v9 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)timeval buf = 136315394;
        *(void *)&uint8_t buf[4] = "handleHciCmdMsg";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = uint64;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: %s opcode=%d", buf, 0x12u);
      }
      uint64_t v10 = sub_10003FB34();
      int v11 = (*(uint64_t (**)(uint64_t, void, const void *, void, void (*)(int, const void *, unsigned int, void *), _OWORD *))(*(void *)v10 + 3592))(v10, uint64, data, (unsigned __int16)length, sub_100652E3C, bytes);
      if (!v11)
      {
        long long v18 = 0u;
        long long v19 = 0u;
        memset(buf, 0, sizeof(buf));
        sub_100052DA8(buf);
        __p[0] = 0;
        __p[1] = 0;
        sub_10003AED0((uint64_t)__p, (uint64_t)buf);
        if (sub_10001BCA8(&stru_100A1A0B8, (pthread_mutex_t **)__p, 0x7D0uLL)) {
          int v11 = 0;
        }
        else {
          int v11 = 316;
        }
        sub_10003AFB4((uint64_t)__p);
        sub_100052DA4(buf);
      }
    }
    else
    {
      int v11 = 12;
    }
  }
  else
  {
    int v11 = 11;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  xpc_dictionary_set_uint64(reply, "kCBMsgArgStatus", v11);
  xpc_dictionary_set_data(reply, "kCBMsgArgData", bytes, (unsigned __int16)v21);
  xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), reply);
  xpc_release(reply);
}

void sub_100651AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

void sub_100651B3C(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseAction");
  xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseHandle");
  xpc_dictionary_get_int64(value, "kCBMsgArgLEAdvTxPowerIncreaseTxDesiredPower");
  xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseePAEnable");
  xpc_dictionary_get_uint64(value, "kCBMsgArgLEAdvTxPowerIncreaseSARConfiguration");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 1888))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078AE4C();
    }
  }
}

void sub_100651C60(int a1, xpc_object_t xdict)
{
  __int16 v14 = 0;
  int v13 = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  if (sub_1000198BC(value, 1, v3, v4, v5, v6, v7, v8, (uint64_t)"kCBMsgArgBTAddr"))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078A4C4();
    }
  }
  else
  {
    uint64_t v9 = sub_10003FB34();
    int v10 = (*(uint64_t (**)(uint64_t, int *))(*(void *)v9 + 3624))(v9, &v13);
    int v11 = qword_100A19EC8;
    if (v10)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10078B940();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)timeval buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "BD Address was written successfully", buf, 2u);
    }
  }
}

void sub_100651D90(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgCrcErredPduReportEnable");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 1720))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078B9A8();
    }
  }
}

void sub_100651E44(int a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgAppleExtendedAdvReportEnable");
  uint64_t v3 = *(void *)sub_10003FB34();
  if ((*(unsigned int (**)(void))(v3 + 1712))())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078BA10();
    }
  }
}

BOOL sub_100651F00(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  int v11 = string;
  size_t v12 = strlen(string);
  uint64_t v5 = sub_1003C2560(&xmmword_100A1A090, (uint64_t)&v11);
  if (v5)
  {
    int v11 = string;
    size_t v12 = strlen(string);
    int v13 = &v11;
    uint64_t v6 = sub_1006532DC((uint64_t)&xmmword_100A1A090, (uint64_t)&v11, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v13);
    uint64_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if (v8) {
      uint64_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }
  return v5 != 0;
}

void sub_100651FFC(unsigned int a1, unsigned __int16 *a2, int a3)
{
  if (a2) {
    int64_t v5 = *a2;
  }
  else {
    int64_t v5 = 0;
  }
  uint64_t v6 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_14;
  }
  uint64_t v7 = &qword_100A1A080;
  do
  {
    int v8 = *(_DWORD *)(v6 + 32);
    BOOL v9 = v8 < 13;
    if (v8 >= 13) {
      int v10 = (uint64_t *)v6;
    }
    else {
      int v10 = (uint64_t *)(v6 + 8);
    }
    if (!v9) {
      uint64_t v7 = (uint64_t *)v6;
    }
    uint64_t v6 = *v10;
  }
  while (*v10);
  if (v7 == &qword_100A1A080 || *((int *)v7 + 8) >= 14) {
LABEL_14:
  }
    uint64_t v7 = &qword_100A1A080;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v7[5]);
  if (remote_connection)
  {
    size_t v12 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v7[5]);
    if (reply)
    {
      __int16 v14 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_dictionary_set_int64(v14, "kCBMsgArgConnHandle", v5);
      xpc_dictionary_set_int64(v14, "kCBMsgArgTransmitPowerLevel", a3);
      xpc_connection_send_message(v12, v14);
      xpc_release(v14);
    }
    xpc_release((xpc_object_t)v7[5]);
  }
  sub_10004D3B8((uint64_t **)&qword_100A1A078, v7);

  operator delete(v7);
}

void sub_100652128(unsigned int a1)
{
  uint64_t v2 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_100A1A080;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 21;
    if (v4 >= 21) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_100A1A080 || *((int *)v3 + 8) >= 22) {
LABEL_11:
  }
    uint64_t v3 = &qword_100A1A080;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    int v8 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }
  xpc_release((xpc_object_t)v3[5]);
  sub_10004D3B8((uint64_t **)&qword_100A1A078, v3);

  operator delete(v3);
}

void sub_100652210(unsigned int a1)
{
  uint64_t v2 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_100A1A080;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 22;
    if (v4 >= 22) {
      uint64_t v6 = (uint64_t *)v2;
    }
    else {
      uint64_t v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_100A1A080 || *((int *)v3 + 8) >= 23) {
LABEL_11:
  }
    uint64_t v3 = &qword_100A1A080;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    int v8 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }
  xpc_release((xpc_object_t)v3[5]);
  sub_10004D3B8((uint64_t **)&qword_100A1A078, v3);

  operator delete(v3);
}

void sub_1006522F8(unsigned int a1, unsigned int a2)
{
  uint64_t v4 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  BOOL v5 = &qword_100A1A080;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < 23;
    if (v6 >= 23) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      BOOL v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 == &qword_100A1A080 || *((int *)v5 + 8) >= 24) {
LABEL_11:
  }
    BOOL v5 = &qword_100A1A080;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v5[5]);
  if (remote_connection)
  {
    int v10 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v5[5]);
    if (reply)
    {
      size_t v12 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_dictionary_set_int64(v12, "kCBMsgArgNumberOfPackets", a2);
      xpc_connection_send_message(v10, v12);
      xpc_release(v12);
    }
  }
  xpc_release((xpc_object_t)v5[5]);
  sub_10004D3B8((uint64_t **)&qword_100A1A078, v5);

  operator delete(v5);
}

void sub_100652400(unsigned int a1)
{
  uint64_t v2 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_100A1A080;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 24;
    if (v4 >= 24) {
      int v6 = (uint64_t *)v2;
    }
    else {
      int v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_100A1A080 || *((int *)v3 + 8) >= 25) {
LABEL_11:
  }
    uint64_t v3 = &qword_100A1A080;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    int v8 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }
  xpc_release((xpc_object_t)v3[5]);
  sub_10004D3B8((uint64_t **)&qword_100A1A078, v3);

  operator delete(v3);
}

void sub_1006524E8(unsigned int a1)
{
  uint64_t v2 = qword_100A1A080;
  if (!qword_100A1A080) {
    goto LABEL_11;
  }
  uint64_t v3 = &qword_100A1A080;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 25;
    if (v4 >= 25) {
      int v6 = (uint64_t *)v2;
    }
    else {
      int v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = (uint64_t *)v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == &qword_100A1A080 || *((int *)v3 + 8) >= 26) {
LABEL_11:
  }
    uint64_t v3 = &qword_100A1A080;
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection((xpc_object_t)v3[5]);
  if (remote_connection)
  {
    int v8 = remote_connection;
    xpc_object_t reply = xpc_dictionary_create_reply((xpc_object_t)v3[5]);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_int64(reply, "kCBMsgArgStatus", a1);
      xpc_connection_send_message(v8, v10);
      xpc_release(v10);
    }
  }
  xpc_release((xpc_object_t)v3[5]);
  sub_10004D3B8((uint64_t **)&qword_100A1A078, v3);

  operator delete(v3);
}

uint64_t sub_1006525D0(int a1, uint64_t a2, unsigned int a3)
{
  if (a1 != 20545) {
    sub_10025B8C0();
  }
  int v6 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109632;
    v8[1] = byte_100A13AD8;
    __int16 v9 = 1024;
    int v10 = a1;
    __int16 v11 = 1024;
    unsigned int v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_perfClassicConnectionInd on role %d, psm %x, cid %x", (uint8_t *)v8, 0x14u);
  }
  uint64_t result = sub_100197A30(a2);
  if (result) {
    return sub_1001E0320((uint64_t)sub_100652708, (uint64_t)sub_1006527E0, (uint64_t)sub_10065292C, a3, (uint64_t)&unk_1007C0190, 1, (uint64_t)&unk_1007C01B0);
  }
  return result;
}

float sub_100652708(int a1, int a2, int a3, int a4)
{
  int v8 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109888;
    v10[1] = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    __int16 v13 = 1024;
    int v14 = a3;
    __int16 v15 = 1024;
    int v16 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "_perfClassicConnectCfm: cid %x inMTU %d outMTU %d result %d", (uint8_t *)v10, 0x1Au);
  }
  return result;
}

void sub_1006527E0(int a1, int a2)
{
  int v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 67109376;
    int v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "_perfClassicDisconnectCB: cid %x result %d", (uint8_t *)&v9, 0xEu);
  }
  int v5 = byte_100A13AD8;
  int v6 = qword_100A19EC8;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
  if (v5 == 1)
  {
    if (!v7) {
      return;
    }
    int v9 = 67109120;
    int v10 = dword_100A13ADC;
    int v8 = "_perfClassicDisconnectCB: Acceptor packetCountReceived=%d";
  }
  else
  {
    if (!v7) {
      return;
    }
    int v9 = 67109120;
    int v10 = dword_100A13AE4;
    int v8 = "_perfClassicDisconnectCB: Initiator packetCountSent=%d";
  }
  _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)&v9, 8u);
}

void sub_10065292C(unsigned int a1, uint64_t a2, int a3)
{
  uint64_t v9 = 0;
  int v5 = sub_1001DDA80(a1, &v9);
  int v6 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)timeval buf = 67109888;
    int v11 = byte_100A13AD8;
    __int16 v12 = 1024;
    unsigned int v13 = a1;
    __int16 v14 = 1024;
    int v15 = a3;
    __int16 v16 = 1024;
    int v17 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "_perfClassicRecvDataInd: role %d, cid %x, dataLen %d status=%d", buf, 0x1Au);
  }
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078BAAC();
    }
  }
  else if (byte_100A13AD8 == 1)
  {
    uint64_t v7 = 0;
    ++dword_100A13ADC;
    while (word_1007C01E0[v7] != a3)
    {
      if (++v7 == 7)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10078BA78();
        }
        LOBYTE(v7) = 0;
        break;
      }
    }
    byte_100A13AF0 = v7;
    int v8 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)timeval buf = 67109120;
      int v11 = dword_100A13ADC;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "_perfClassicRecvDataInd: packetCountReceived=%d", buf, 8u);
    }
  }
}

uint64_t sub_100652AF8(uint64_t a1, const char *a2, void **a3, off_t *a4)
{
  uint64_t v7 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    buf.st_dev = 136315138;
    *(void *)&buf.st_mode = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "loadFile: File Path %s\n", (uint8_t *)&buf, 0xCu);
  }
  memset(&buf, 0, sizeof(buf));
  bzero(&buf, 0x90uLL);
  int v8 = stat(a2, &buf);
  uint64_t v9 = qword_100A19EC8;
  if (v8)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078BC30(v9);
    }
    return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    int v19 = 136315394;
    int v20 = ctime(&buf.st_mtimespec.tv_sec);
    __int16 v21 = 2048;
    st_std::string::size_type size = buf.st_size;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "loadFile: File last changed:%s File size=%lld Bytes\n", (uint8_t *)&v19, 0x16u);
  }
  *a3 = malloc_type_malloc(buf.st_size, 0x8B984916uLL);
  *a4 = buf.st_size;
  int v11 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "loadFile: Open File\n", (uint8_t *)&v19, 2u);
  }
  __int16 v12 = fopen(a2, "r");
  unsigned int v13 = qword_100A19EC8;
  if (!v12)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078BB14();
    }
    return 1;
  }
  __int16 v14 = v12;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "loadFile: Read File to buffer\n", (uint8_t *)&v19, 2u);
  }
  size_t v15 = fread(*a3, 1uLL, buf.st_size, v14);
  __int16 v16 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    int v19 = 134217984;
    int v20 = (char *)v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "loadFile: Read File to fileBuffer. readResult %zu.\n", (uint8_t *)&v19, 0xCu);
  }
  if (ferror(v14))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078BBFC();
    }
    return 1;
  }
  int v17 = feof(v14);
  long long v18 = qword_100A19EC8;
  if (v17)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078BB88();
    }
    return 1;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_INFO))
  {
    LOWORD(v19) = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_INFO, "loadFile: Close File\n", (uint8_t *)&v19, 2u);
  }
  fclose(v14);
  return 0;
}

void sub_100652E3C(int a1, const void *a2, unsigned int a3, void *__dst)
{
  if (__dst)
  {
    if (a3 >= 0xFF) {
      size_t v6 = 255;
    }
    else {
      size_t v6 = a3;
    }
    memcpy(__dst, a2, v6);
    *((_WORD *)__dst + 128) = v6;
    uint64_t v4 = vars8;
  }
  sub_100026264(&stru_100A1A0B8);
}

void *sub_100652E98(void *a1)
{
  *a1 = &off_1009AB480;
  sub_100052DA4(a1 + 1);
  return a1;
}

void sub_100652EDC(void *a1)
{
  *a1 = &off_1009AB480;
  sub_100052DA4(a1 + 1);

  operator delete();
}

void sub_100652F40()
{
  memset(v10, 0, sizeof(v10));
  v11.tv_sec = 0;
  *(void *)&v11.tv_usec = 0;
  gettimeofday(&v11, 0);
  double v0 = (double)v11.tv_usec / 1000.0 + (double)(1000 * v11.tv_sec) - *(double *)&qword_100A13B00;
  int v1 = dword_100A13AF8;
  double v2 = (double)(1000 * dword_100A13AF8);
  uint64_t v3 = qword_100A19EC8;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
  if (v0 <= v2)
  {
    if (v4)
    {
      int v5 = dword_100A13AE4++;
      LODWORD(v11.tv_sec) = 67109120;
      HIDWORD(v11.tv_sec) = v5;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "_writeAclDataCb packetCountSent: %d\n", (uint8_t *)&v11, 8u);
    }
    int v6 = byte_100A13AFC++;
    memset(byte_100A13B08, v6, word_1007C01E0[byte_100A13AF0]);
    sub_100023344();
    sub_1000226D0((uint64_t)v10, 1u);
    sub_100022798((unsigned __int8 *)v10, byte_100A13B08, word_1007C01E0[byte_100A13AF0], 2u);
    int v7 = ((uint64_t (*)(void (*)(int, uint64_t, int, int), void, uint64_t, timeval *, void))loc_1001DE1A4)(sub_1006531D8, (unsigned __int16)word_100A13AE0, qword_100A13AE8, v10, 0);
    sub_10025C480((uint64_t)v10);
    sub_1000232E0();
    if (v7 == 412) {
      int v7 = 0;
    }
    int v8 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      __darwin_suseconds_t v9 = word_1007C01E0[byte_100A13AF0];
      LODWORD(v11.tv_sec) = 67109376;
      HIDWORD(v11.tv_sec) = v7;
      LOWORD(v11.tv_usec) = 1024;
      *(__darwin_suseconds_t *)((char *)&v11.tv_usec + 2) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "_writeAclDataCb result %d, length %d\n", (uint8_t *)&v11, 0xEu);
    }
    if (v7 && os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10078BCC0();
    }
  }
  else if (v4)
  {
    LODWORD(v11.tv_sec) = 67109120;
    HIDWORD(v11.tv_sec) = v1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Finished running the test after %d Sec", (uint8_t *)&v11, 8u);
  }
}

void sub_1006531D8(int a1, uint64_t a2, int a3, int a4)
{
  int v7 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109632;
    v10[1] = a4;
    __int16 v11 = 1024;
    int v12 = a1;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "_perfWriteCB result=%d cid=%d\n sendCount=%d", (uint8_t *)v10, 0x14u);
  }
  dispatch_time_t v8 = dispatch_time(0, 0);
  global_queue = dispatch_get_global_queue(0, 0);
  dispatch_after_f(v8, global_queue, 0, (dispatch_function_t)sub_100652F40);
}

void *sub_1006532DC(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003C208C((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    __int16 v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        size_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12) {
              break;
            }
          }
          int v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  int v14 = operator new(0x30uLL);
  *(void *)int v14 = 0;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_1000A9204(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  int v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)int v14 = *v26;
LABEL_40:
    *int v26 = v14;
    goto LABEL_41;
  }
  *(void *)int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    int v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_100653534(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100653548(id a1)
{
}

void sub_10065358C()
{
}

void sub_1006535B0(id a1)
{
}

void sub_1006535F4()
{
}

void sub_100653618(id a1)
{
}

void sub_10065365C()
{
}

void sub_100653680(id a1)
{
}

void sub_1006536C4()
{
}

void sub_1006536E8()
{
  qword_100A1A088 = 0;
  qword_100A1A080 = 0;
  qword_100A1A078 = (uint64_t)&qword_100A1A080;
  __cxa_atexit((void (*)(void *))sub_10064511C, &qword_100A1A078, (void *)&_mh_execute_header);
  xmmword_100A1A090 = 0u;
  unk_100A1A0A0 = 0u;
  dword_100A1A0B0 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_100645148, &xmmword_100A1A090, (void *)&_mh_execute_header);
  sub_1002B80C0(&stru_100A1A0B8);
  __cxa_atexit((void (*)(void *))sub_1002B812C, &stru_100A1A0B8, (void *)&_mh_execute_header);
}

uint64_t sub_1006537C0(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2 || *(void *)(v2 + 16) <= a2)
  {
    uint64_t v4 = sub_100017768();
    sub_1005C99DC(v4, 1);
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v5 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v5 = 136446210;
    *(void *)(v5 + 4) = "idx < getSize()";
    os_log_create("com.apple.bluetooth", "CBCrash");
    qword_1009FC078 = os_log_pack_send_and_compose();
    abort_with_payload();
  }
  return *(unsigned __int8 *)(v2 + a2 + 24);
}

BOOL sub_100653904(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    uint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    uint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    uint64_t v5 = *(void *)(v4 + 16);
  }
  else {
    uint64_t v5 = 0;
  }
  if (v3 != v5) {
    return 0;
  }
  if (v2) {
    int v6 = (const void *)(v2 + 24);
  }
  else {
    int v6 = 0;
  }
  if (v4) {
    unint64_t v7 = (const void *)(v4 + 24);
  }
  else {
    unint64_t v7 = 0;
  }
  if (v2) {
    size_t v8 = *(void *)(v2 + 16);
  }
  else {
    size_t v8 = 0;
  }
  return memcmp(v6, v7, v8) == 0;
}

BOOL sub_100653984(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (v2) {
    unint64_t v3 = *(void *)(v2 + 16);
  }
  else {
    unint64_t v3 = 0;
  }
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    unint64_t v5 = *(void *)(v4 + 16);
    if (v3 < v5) {
      size_t v6 = 0;
    }
    else {
      size_t v6 = *(void *)(v4 + 16);
    }
    if (v3 < v5 && v2 != 0) {
      size_t v6 = *(void *)(v2 + 16);
    }
  }
  else
  {
    size_t v6 = 0;
  }
  if (v2) {
    size_t v8 = (const void *)(v2 + 24);
  }
  else {
    size_t v8 = 0;
  }
  if (v4) {
    unint64_t v9 = (const void *)(v4 + 24);
  }
  else {
    unint64_t v9 = 0;
  }
  unsigned int v10 = memcmp(v8, v9, v6);
  if (v10) {
    return v10 >> 31;
  }
  if (!v2)
  {
    unint64_t v12 = 0;
    if (v4) {
      goto LABEL_24;
    }
LABEL_26:
    unint64_t v13 = 0;
    return v12 < v13;
  }
  unint64_t v12 = *(void *)(v2 + 16);
  if (!v4) {
    goto LABEL_26;
  }
LABEL_24:
  unint64_t v13 = *(void *)(v4 + 16);
  return v12 < v13;
}

void sub_100653A30(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *(unsigned __int8 **)(a1 + 64);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 72);
  if (v5 != v4)
  {
    size_t v8 = 0;
    unint64_t v9 = a3 + 2;
    do
    {
      if (*v5 == a2)
      {
        if ((unint64_t)v8 >= *v9)
        {
          unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*a3] >> 2);
          unint64_t v12 = v11 + 1;
          if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          if (0x999999999999999ALL * ((uint64_t)(*v9 - *a3) >> 2) > v12) {
            unint64_t v12 = 0x999999999999999ALL * ((uint64_t)(*v9 - *a3) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v9 - *a3) >> 2) >= 0x666666666666666) {
            unint64_t v13 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            int v14 = (char *)sub_10003767C((uint64_t)(a3 + 2), v13);
          }
          else {
            int v14 = 0;
          }
          size_t v15 = &v14[20 * v11];
          long long v16 = *(_OWORD *)v5;
          *((_DWORD *)v15 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)size_t v15 = v16;
          unint64_t v18 = (char *)*a3;
          uint64_t v17 = (char *)a3[1];
          float v19 = v15;
          if (v17 != (char *)*a3)
          {
            do
            {
              long long v20 = *(_OWORD *)(v17 - 20);
              *((_DWORD *)v19 - 1) = *((_DWORD *)v17 - 1);
              *(_OWORD *)(v19 - 20) = v20;
              v19 -= 20;
              v17 -= 20;
            }
            while (v17 != v18);
            uint64_t v17 = (char *)*a3;
          }
          size_t v8 = v15 + 20;
          *a3 = v19;
          a3[1] = v15 + 20;
          a3[2] = &v14[20 * v13];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          long long v10 = *(_OWORD *)v5;
          *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)size_t v8 = v10;
          v8 += 20;
        }
        a3[1] = v8;
        uint64_t v4 = *(unsigned __int8 **)(a1 + 72);
      }
      v5 += 20;
    }
    while (v5 != v4);
  }
}

void sub_100653BB0(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100653BD0(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v5 = *(unsigned __int8 **)(a1 + 88);
  uint64_t v4 = *(unsigned __int8 **)(a1 + 96);
  if (v5 != v4)
  {
    size_t v8 = 0;
    unint64_t v9 = a3 + 2;
    do
    {
      if (*v5 == a2)
      {
        if ((unint64_t)v8 >= *v9)
        {
          unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v8[-*a3] >> 2);
          unint64_t v12 = v11 + 1;
          if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          if (0x999999999999999ALL * ((uint64_t)(*v9 - *a3) >> 2) > v12) {
            unint64_t v12 = 0x999999999999999ALL * ((uint64_t)(*v9 - *a3) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v9 - *a3) >> 2) >= 0x666666666666666) {
            unint64_t v13 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v13 = v12;
          }
          if (v13) {
            int v14 = (char *)sub_10003767C((uint64_t)(a3 + 2), v13);
          }
          else {
            int v14 = 0;
          }
          size_t v15 = &v14[20 * v11];
          long long v16 = *(_OWORD *)v5;
          *((_DWORD *)v15 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)size_t v15 = v16;
          unint64_t v18 = (char *)*a3;
          uint64_t v17 = (char *)a3[1];
          float v19 = v15;
          if (v17 != (char *)*a3)
          {
            do
            {
              long long v20 = *(_OWORD *)(v17 - 20);
              *((_DWORD *)v19 - 1) = *((_DWORD *)v17 - 1);
              *(_OWORD *)(v19 - 20) = v20;
              v19 -= 20;
              v17 -= 20;
            }
            while (v17 != v18);
            uint64_t v17 = (char *)*a3;
          }
          size_t v8 = v15 + 20;
          *a3 = v19;
          a3[1] = v15 + 20;
          a3[2] = &v14[20 * v13];
          if (v17) {
            operator delete(v17);
          }
        }
        else
        {
          long long v10 = *(_OWORD *)v5;
          *((_DWORD *)v8 + 4) = *((_DWORD *)v5 + 4);
          *(_OWORD *)size_t v8 = v10;
          v8 += 20;
        }
        a3[1] = v8;
        uint64_t v4 = *(unsigned __int8 **)(a1 + 96);
      }
      v5 += 20;
    }
    while (v5 != v4);
  }
}

void sub_100653D50(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100653D70(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "AdvRSSIOffset");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v1 + 88))(v1, buf, __p, &dword_100A14520);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  unint64_t v3 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = dword_100A14520;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: RSSI shall be reported after offset %d (dB) added", buf, 8u);
  }
}

void sub_100653EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100653EE4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)) {
    return 0;
  }
  uint64_t v2 = a2;
  if (*(unsigned __int8 *)(a1 + 13) != *(unsigned __int8 *)(a2 + 13)) {
    return 0;
  }
  uint64_t v4 = *(unsigned __int8 *)(a1 + 39);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 39);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 24);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 39);
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *(void *)(a2 + 24);
  }
  if (v5 != v6) {
    return 0;
  }
  size_t v8 = (const void **)(a1 + 16);
  if (v7 >= 0) {
    unint64_t v9 = (unsigned __int8 *)(a2 + 16);
  }
  else {
    unint64_t v9 = *(unsigned __int8 **)(a2 + 16);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *(void *)(a1 + 24))) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a1 + 39))
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      size_t v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:
  if (*(unsigned __int16 *)(a1 + 40) != *(unsigned __int16 *)(v2 + 40)
    || *(unsigned __int8 *)(a1 + 42) != *(unsigned __int8 *)(v2 + 42)
    || *(unsigned char *)(a1 + 42) && *(unsigned __int8 *)(a1 + 43) != *(unsigned __int8 *)(v2 + 43)
    || !sub_100653904(a1 + 48, v2 + 48)
    || !sub_100653904(a1 + 224, v2 + 224)
    || !sub_100654100((unsigned __int8 **)(a1 + 64), v2 + 64)
    || !sub_100654100((unsigned __int8 **)(a1 + 88), v2 + 88)
    || *(void *)(a1 + 128) != *(void *)(v2 + 128)
    || !sub_100653904(a1 + 136, v2 + 136)
    || !sub_100653904(a1 + 152, v2 + 152)
    || !sub_100653904(a1 + 448, v2 + 448))
  {
    return 0;
  }
  long long v10 = *(unsigned __int8 **)(a1 + 112);
  unint64_t v11 = (unsigned __int8 *)(a1 + 120);
  if (v10 == (unsigned __int8 *)(a1 + 120)) {
    return 1;
  }
  uint64_t v12 = v2 + 112;
  uint64_t v13 = v2 + 120;
  LODWORD(v2) = 1;
  do
  {
    uint64_t v14 = sub_100012C44(v12, v10 + 32);
    BOOL v15 = v13 != v14 && sub_100653904((uint64_t)(v10 + 56), v14 + 56);
    long long v16 = (unsigned __int8 *)*((void *)v10 + 1);
    if (v16)
    {
      do
      {
        uint64_t v17 = v16;
        long long v16 = *(unsigned __int8 **)v16;
      }
      while (v16);
    }
    else
    {
      do
      {
        uint64_t v17 = (unsigned __int8 *)*((void *)v10 + 2);
        BOOL v18 = *(void *)v17 == (void)v10;
        long long v10 = v17;
      }
      while (!v18);
    }
    uint64_t v2 = v2 & v15;
    long long v10 = v17;
  }
  while (v17 != v11);
  return v2;
}

BOOL sub_100654100(unsigned __int8 **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *(unsigned __int8 **)a2;
  if (v3 - *a1 != *(void *)(a2 + 8) - *(void *)a2) {
    return 0;
  }
  if (v2 == v3) {
    return 1;
  }
  do
  {
    BOOL result = sub_10022A44C(v2, v4);
    if (!result) {
      break;
    }
    v2 += 20;
    v4 += 20;
  }
  while (v2 != v3);
  return result;
}

void sub_100654174(uint64_t a1)
{
  *(void *)(a1 + 72) = *(void *)(a1 + 64);
  uint64_t v2 = (__n128 **)(a1 + 72);
  long long v27 = xmmword_1007BA7E4;
  int v28 = 0;
  sub_100035F98(&v29, (__n128 *)&v27);
  unint64_t v3 = *v2;
  unint64_t v4 = *(void *)(a1 + 80);
  if ((unint64_t)*v2 >= v4)
  {
    uint64_t v7 = *(void *)(a1 + 64);
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v3 - v7) >> 2);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - v7) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)sub_10003767C(a1 + 80, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = (__n128 *)&v12[20 * v8];
    uint64_t v14 = &v12[20 * v11];
    __n128 v15 = v29;
    v13[1].n128_u32[0] = v30;
    *uint64_t v13 = v15;
    uint64_t v6 = &v13[1].n128_i8[4];
    uint64_t v17 = *(char **)(a1 + 64);
    long long v16 = *(char **)(a1 + 72);
    if (v16 != v17)
    {
      do
      {
        __n128 v18 = *(__n128 *)(v16 - 20);
        v13[-1].n128_u32[3] = *((_DWORD *)v16 - 1);
        *(__n128 *)((char *)v13 - 20) = v18;
        uint64_t v13 = (__n128 *)((char *)v13 - 20);
        v16 -= 20;
      }
      while (v16 != v17);
      long long v16 = *(char **)(a1 + 64);
    }
    *(void *)(a1 + 64) = v13;
    *(void *)(a1 + 72) = v6;
    *(void *)(a1 + 80) = v14;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    __n128 v5 = v29;
    v3[1].n128_u32[0] = v30;
    *unint64_t v3 = v5;
    uint64_t v6 = &v3[1].n128_i8[4];
  }
  *(void *)(a1 + 72) = v6;
  sub_10004BA8C(a1 + 112, *(void **)(a1 + 120));
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  unint64_t v22 = 0;
  __n128 v29 = 0uLL;
  unsigned __int32 v30 = 0;
  if (qword_1009FB798 != -1) {
    dispatch_once(&qword_1009FB798, &stru_1009BCEF0);
  }
  sub_10044C044((uint64_t)off_1009FB790, &v29, 20, &v22);
  long long v24 = xmmword_1007BA7E4;
  int v25 = 0;
  sub_100035F98(&v26, (__n128 *)&v24);
  sub_1000335D8(&v20, &v29, 0x14uLL);
  unint64_t v23 = &v26;
  float v19 = sub_100085C30((uint64_t **)(a1 + 112), (unsigned __int8 *)&v26, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v23);
  sub_100049EE0((uint64_t)v19 + 56, (uint64_t)&v20);
  long long v20 = &off_100998428;
  if (v21) {
    sub_1000368F4(v21);
  }
  *(void *)(a1 + 256) = v22;
  *(unsigned char *)(a1 + 364) = 1;
}

void sub_100654400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11)
{
  if (a11) {
    sub_1000368F4(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100654440(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 264) == 2 && !*(unsigned char *)(a1 + 364)) {
    sub_100654174(a1);
  }
}

uint64_t sub_10065445C(uint64_t result, unsigned int a2, char a3)
{
  if (a2 <= 3) {
    *(unsigned char *)(result + a2 + 392) = a3;
  }
  return result;
}

uint64_t sub_100654470(uint64_t a1, uint8x8_t a2)
{
  a2.i32[0] = *(_DWORD *)(a1 + 392);
  int16x4_t v2 = (int16x4_t)vmovl_u8(a2).u64[0];
  v2.i16[0] = vaddv_s16(v2);
  return v2.u32[0];
}

void sub_100654488(id a1)
{
}

void sub_1006544CC()
{
}

uint64_t sub_1006544F0(uint64_t a1)
{
  *(unsigned char *)(a1 + 100) = 0;
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  atomic_store(0, (unsigned int *)(a1 + 96));
  atomic_store(0, (unsigned __int8 *)(a1 + 17));
  *(void *)(a1 + 88) = 0;
  atomic_store(0, (unsigned __int8 *)(a1 + 18));
  *(unsigned char *)(a1 + 100) = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10065459C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  return a1;
}

void sub_10065459C(uint64_t a1)
{
}

void sub_1006545A4(uint64_t a1)
{
  int16x4_t v2 = qword_100A19E58;
  if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering for WiFi Callback", buf, 2u);
  }
  uint64_t v3 = WiFiManagerClientCreate();
  *(void *)a1 = v3;
  if (v3)
  {
    CFArrayRef v4 = (const __CFArray *)WiFiManagerClientCopyDevices();
    if (v4)
    {
      CFArrayRef v5 = v4;
      if (CFArrayGetCount(v4))
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v5, 0);
        *(void *)(a1 + 8) = ValueAtIndex;
        CFRetain(ValueAtIndex);
        if (*(void *)(a1 + 8))
        {
          unsigned __int8 v7 = WiFiDeviceClientGetPower() != 0;
          sub_100655230(a1, v7);
          uint64_t v8 = WiFiDeviceClientCopyCurrentNetwork();
          if (v8)
          {
            unint64_t v9 = (const void *)v8;
            unsigned int OperatingBand = WiFiNetworkGetOperatingBand();
            sub_1006552AC(a1, OperatingBand);
            if (atomic_load((unsigned int *)(a1 + 96))) {
              sub_100655328(a1, 1u);
            }
            CFRelease(v9);
          }
        }
        uint64_t v12 = sub_10003FFD4();
        (*(void (**)(uint64_t))(*(void *)v12 + 32))(v12);
      }
      CFRelease(v5);
    }
  }
  CFRunLoopRef Main = CFRunLoopGetMain();
  pthread_mutex_lock((pthread_mutex_t *)(a1 + 24));
  *(void *)(a1 + 88) = Main;
  pthread_mutex_unlock((pthread_mutex_t *)(a1 + 24));
  if (*(void *)a1 && *(void *)(a1 + 88) && *(void *)(a1 + 8))
  {
    WiFiDeviceClientRegisterPowerCallback();
    WiFiDeviceClientRegisterExtendedLinkCallback();
    WiFiDeviceClientRegisterBssidChangeCallback();
    WiFiDeviceClientRegisterM1M4Handshake24GHzCountCallback();
    WiFiDeviceClientRegister24GHzNetworkInCriticalStateCallback();
    WiFiDeviceClientRegisterVirtualInterfaceStateChangeCallback();
    WiFiManagerClientScheduleWithRunLoop();
    uint64_t v14 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "WiFi interface is up", buf, 2u);
    }
  }
  else
  {
    __n128 v15 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Setting up ReTry Timer to ensure WiFi is up", buf, 2u);
    }
    dispatch_source_t v16 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, (dispatch_queue_t)&_dispatch_main_q);
    if (v16)
    {
      uint64_t v17 = v16;
      dispatch_time_t v18 = dispatch_time(0, 10000000000);
      dispatch_source_set_timer(v17, v18, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
      v19[0] = _NSConcreteStackBlock;
      v19[1] = 3221225472;
      void v19[2] = sub_100655444;
      v19[3] = &unk_100998260;
      uint8_t v19[4] = a1;
      void v19[5] = v17;
      dispatch_source_set_event_handler(v17, v19);
      dispatch_activate(v17);
    }
  }
}

void sub_10065490C(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "COEXDEBUG");
  sub_10004191C(__p, "Enabled");
  (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v2 + 72))(v2, buf, __p, a1 + 100);
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24 < 0) {
    operator delete(*(void **)buf);
  }
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v3 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "WiFiDebugModeUpdated COEXDEBUG", buf, 2u);
    }
    unsigned __int8 v20 = 0;
    uint64_t v4 = sub_100017768();
    sub_10004191C(buf, "COEXDEBUG");
    sub_10004191C(__p, "wifiStatePower");
    int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v4 + 72))(v4, buf, __p, &v20);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0)
    {
      operator delete(*(void **)buf);
      if (!v5) {
        goto LABEL_16;
      }
    }
    else if (!v5)
    {
      goto LABEL_16;
    }
    atomic_store(v20, (unsigned __int8 *)(a1 + 16));
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 16));
    if ((v6 & 1) == 0)
    {
      atomic_store(0, (unsigned int *)(a1 + 96));
      atomic_store(0, (unsigned __int8 *)(a1 + 18));
LABEL_38:
      uint64_t v16 = sub_10003FFD4();
      (*(void (**)(uint64_t))(*(void *)v16 + 32))(v16);
      return;
    }
LABEL_16:
    unsigned int v19 = 0;
    uint64_t v7 = sub_100017768();
    sub_10004191C(buf, "COEXDEBUG");
    sub_10004191C(__p, "wifiStateBand");
    int v8 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v7 + 88))(v7, buf, __p, &v19);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    if (v24 < 0)
    {
      operator delete(*(void **)buf);
      if (!v8)
      {
LABEL_21:
        uint64_t v18 = 0;
        uint64_t v9 = sub_100017768();
        sub_10004191C(buf, "COEXDEBUG");
        sub_10004191C(__p, "UCMWifiStateBitmap");
        int v10 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(void *)v9 + 144))(v9, buf, __p, &v18);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        if (v24 < 0) {
          operator delete(*(void **)buf);
        }
        if (v18) {
          int v11 = v10;
        }
        else {
          int v11 = 0;
        }
        if (v11 == 1) {
          atomic_store(1u, (unsigned __int8 *)(a1 + 18));
        }
        unsigned __int8 v17 = 0;
        uint64_t v12 = sub_100017768();
        sub_10004191C(buf, "COEXDEBUG");
        sub_10004191C(__p, "wifiStateCritical2_4");
        int v13 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v12 + 72))(v12, buf, __p, &v17);
        if (v22 < 0) {
          operator delete(__p[0]);
        }
        if (v24 < 0)
        {
          operator delete(*(void **)buf);
          if (!v13) {
            goto LABEL_35;
          }
        }
        else if (!v13)
        {
LABEL_35:
          unsigned __int8 v14 = atomic_load((unsigned __int8 *)(a1 + 18));
          if ((v14 & 1) != 0 || (unsigned int v15 = atomic_load((unsigned int *)(a1 + 96)), v15 | v19)) {
            atomic_store(1u, (unsigned __int8 *)(a1 + 16));
          }
          goto LABEL_38;
        }
        atomic_store(v17, (unsigned __int8 *)(a1 + 18));
        goto LABEL_35;
      }
    }
    else if (!v8)
    {
      goto LABEL_21;
    }
    atomic_store(v19, (unsigned int *)(a1 + 96));
    goto LABEL_21;
  }
}

void sub_100654CF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

void sub_100654D44(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v2 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v8, 2u);
    }
  }
  else
  {
    if (a2)
    {
      atomic_store(WiFiDeviceClientGetPower() != 0, (unsigned __int8 *)(a1 + 16));
      uint64_t v4 = WiFiDeviceClientCopyCurrentNetwork();
      if (v4)
      {
        int v5 = (const void *)v4;
        atomic_store(WiFiNetworkGetOperatingBand(), (unsigned int *)(a1 + 96));
        if (atomic_load((unsigned int *)(a1 + 96))) {
          atomic_store(1u, (unsigned __int8 *)(a1 + 17));
        }
        CFRelease(v5);
      }
      else
      {
        atomic_store(0, (unsigned int *)(a1 + 96));
        atomic_store(0, (unsigned __int8 *)(a1 + 17));
      }
    }
    uint64_t v7 = *(void (**)(void))(*(void *)sub_10003FFD4() + 32);
    v7();
  }
}

void sub_100654E68(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v3 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v5, 2u);
    }
  }
  else
  {
    sub_100654F24(a1, a3);
    uint64_t v4 = *(void (**)(void))(*(void *)sub_10003FFD4() + 32);
    v4();
  }
}

void sub_100654F24(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v2 = qword_100A19E58;
    if (!os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v3 = "Ignoring real wifi updates";
    uint64_t v4 = v2;
    uint32_t v5 = 2;
  }
  else
  {
    uint64_t v7 = (unsigned int *)(a1 + 20);
    atomic_store(a2, (unsigned int *)(a1 + 20));
    uint64_t v8 = qword_100A19E58;
    if (!os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    unsigned int v9 = atomic_load(v7);
    v10[0] = 67109376;
    v10[1] = v9;
    __int16 v11 = 1024;
    unsigned int v12 = a2;
    uint64_t v3 = "Callback triggered, M1M4HandshakeCount setting to: %u with wifihandshakecount: %u";
    uint64_t v4 = v8;
    uint32_t v5 = 14;
  }
  _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, v3, (uint8_t *)v10, v5);
}

void sub_100655034(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v3 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", (uint8_t *)&v12, 2u);
    }
  }
  else if (a2)
  {
    unsigned __int8 v6 = atomic_load((unsigned __int8 *)(a1 + 18));
    if ((v6 & 1) != a3)
    {
      uint64_t v7 = qword_100A19E58;
      if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = "Y";
        unsigned __int8 v9 = atomic_load((unsigned __int8 *)(a1 + 18));
        if (v9) {
          int v10 = "Y";
        }
        else {
          int v10 = "N";
        }
        if (!a3) {
          uint64_t v8 = "N";
        }
        int v12 = 136315394;
        int v13 = v10;
        __int16 v14 = 2080;
        unsigned int v15 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "WiFi isInCriticalStateWiFi2_4GHz %s -> %s", (uint8_t *)&v12, 0x16u);
      }
      sub_1006551B4(a1, a3);
      uint64_t v11 = sub_10003FFD4();
      (*(void (**)(uint64_t))(*(void *)v11 + 32))(v11);
    }
  }
}

void sub_1006551B4(uint64_t a1, unsigned __int8 a2)
{
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v2 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }
  else
  {
    atomic_store(a2, (unsigned __int8 *)(a1 + 18));
  }
}

void sub_100655230(uint64_t a1, unsigned __int8 a2)
{
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v2 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }
  else
  {
    atomic_store(a2, (unsigned __int8 *)(a1 + 16));
  }
}

void sub_1006552AC(uint64_t a1, unsigned int a2)
{
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v2 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }
  else
  {
    atomic_store(a2, (unsigned int *)(a1 + 96));
  }
}

void sub_100655328(uint64_t a1, unsigned __int8 a2)
{
  if (*(unsigned char *)(a1 + 100))
  {
    uint64_t v2 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Ignoring real wifi updates", v3, 2u);
    }
  }
  else
  {
    atomic_store(a2, (unsigned __int8 *)(a1 + 17));
  }
}

uint64_t sub_1006553A4(uint64_t a1)
{
  return atomic_load((unsigned int *)(a1 + 20));
}

uint64_t sub_1006553B0(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 16));
  return v1 & 1;
}

uint64_t sub_1006553C0(uint64_t a1)
{
  return (char)atomic_load((unsigned int *)(a1 + 96));
}

uint64_t sub_1006553D0(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 17));
  return v1 & 1;
}

uint64_t sub_1006553E0(uint64_t a1)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)(a1 + 18));
  return v1 & 1;
}

void sub_1006553F0(uint64_t a1, uint64_t a2)
{
}

void sub_100655400(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_10065540C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100655418(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100655424(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_100655438(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100655444(uint64_t a1)
{
  sub_1006545A4(*(void *)(a1 + 32));
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_source_cancel(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    dispatch_release(v3);
  }
}

void *sub_100655498(uint64_t a1, uint64_t a2, __int16 a3)
{
  BOOL result = (void *)sub_1004EC10C(a1, a2, a3);
  *BOOL result = &off_1009BCF20;
  return result;
}

void sub_1006554CC(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  if (a3)
  {
    uint64_t v5 = *a2;
    if (*(void *)(a1 + 216))
    {
      uint64_t v7 = (void *)(a1 + 192);
      if (*a2 > 0xBFu)
      {
        if (*a2 <= 0xFBu)
        {
          if (v5 == 192)
          {
            uint8_t v16 = -13;
            goto LABEL_36;
          }
          if (v5 != 198 && v5 != 224) {
            goto LABEL_46;
          }
          goto LABEL_18;
        }
        if ((v5 - 252) > 2) {
          goto LABEL_46;
        }
        sub_1004EC7CC((id *)a1, a2, a3);
      }
      else
      {
        if (*a2 > 0x4Fu)
        {
          char v8 = v5 - 96;
          if ((v5 - 96) > 0x3B) {
            goto LABEL_8;
          }
          if (((1 << v8) & 0x380001) == 0)
          {
            if (((1 << v8) & 0xC01000000000000) == 0)
            {
LABEL_8:
              if (v5 != 80)
              {
LABEL_46:
                uint64_t v32 = qword_100A1A018;
                if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
                  sub_100781AC8(v5, v32, v33, v34, v35, v36, v37, v38);
                }
                return;
              }
              goto LABEL_35;
            }
LABEL_18:
            uint8_t v16 = -16;
LABEL_36:
            buf[0] = v16;
            if (!sub_10026D430(v7, buf))
            {
LABEL_41:
              char v24 = qword_100A1A018;
              if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
                sub_100781B34(v5, v24, v25, v26, v27, v28, v29, v30);
              }
              return;
            }
            uint8_t v39 = v16;
            goto LABEL_38;
          }
          goto LABEL_35;
        }
        if (*a2 > 0x2Fu)
        {
          if ((v5 - 48) >= 2) {
            goto LABEL_46;
          }
          goto LABEL_35;
        }
        switch(v5)
        {
          case 2:
LABEL_35:
            uint8_t v16 = -15;
            goto LABEL_36;
          case 0x13:
            xpc_object_t v31 = qword_100A1A018;
            if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)stat buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = 19;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Received power-off notice input report (ID %u)", buf, 8u);
            }
            break;
          case 0x14:
            unsigned __int8 v17 = qword_100A1A018;
            if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
            {
              int v18 = (*(uint64_t (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 40));
              *(_DWORD *)stat buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = 20;
              __int16 v42 = 1024;
              int v43 = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Received exit suspend input report (ID %u), should undim %d", buf, 0xEu);
            }
            if (!(*(unsigned int (**)(void, void))(**(void **)(a1 + 8) + 32))(*(void *)(a1 + 8), *(unsigned __int16 *)(a1 + 40)))
            {
              unsigned __int8 v20 = 0;
              goto LABEL_50;
            }
            unsigned int v19 = qword_100A1A018;
            if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)stat buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Waking screen with spoofed click", buf, 2u);
            }
            buf[0] = -15;
            if (sub_10026D430(v7, buf))
            {
              uint8_t v39 = -15;
              *(void *)stat buf = &v39;
              unsigned __int8 v20 = (__IOHIDUserDevice *)sub_10026D4E4((uint64_t)v7, &v39, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf)[3];
              *(void *)stat buf = 258;
              uint64_t v21 = mach_absolute_time();
              IOHIDUserDeviceHandleReportWithTimeStamp(v20, v21, buf, 8);
              *(void *)report = 2;
              uint64_t v22 = mach_absolute_time();
              IOHIDUserDeviceHandleReportWithTimeStamp(v20, v22, report, 8);
LABEL_50:
              buf[0] = -14;
              if (!sub_10026D430(v7, buf))
              {
LABEL_39:
                if (v20)
                {
                  uint64_t v23 = mach_absolute_time();
                  IOHIDUserDeviceHandleReportWithTimeStamp(v20, v23, a2, a3);
                  return;
                }
                goto LABEL_41;
              }
              uint8_t v39 = -14;
LABEL_38:
              *(void *)stat buf = &v39;
              unsigned __int8 v20 = (__IOHIDUserDevice *)sub_10026D4E4((uint64_t)v7, &v39, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf)[3];
              goto LABEL_39;
            }
            if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
              sub_10078BD5C();
            }
            break;
          default:
            goto LABEL_46;
        }
      }
    }
    else
    {
      unsigned __int8 v9 = qword_100A1A018;
      if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR)) {
        sub_10074BEC8(v5, v9, v10, v11, v12, v13, v14, v15);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_10078BD28();
  }
}

uint64_t sub_10065598C(uint64_t a1, void *a2)
{
  return 1;
}

uint64_t sub_1006559E8(uint64_t a1, void *a2)
{
  long long v8 = xmmword_1007C0220;
  long long v9 = unk_1007C0230;
  *(_OWORD *)uint64_t v10 = xmmword_1007C0240;
  long long v6 = xmmword_1007C0200;
  long long v7 = unk_1007C0210;
  *(_DWORD *)&v10[15] = -1073577627;
  *(void *)(a1 + 304) = a1;
  *(unsigned char *)(a1 + 312) = -16;
  id v3 = [a2 mutableCopy:v6 v7 v8 v9 *(_OWORD *)v10 *(void *)&v10[16]];
  [v3 setObject:@"Trackpad" forKeyedSubscript:@"Accessory Category"];
  [v3 setObject:&off_1009E1A08 forKeyedSubscript:@"ExtendedData"];
  uint64_t v4 = sub_1004EC498(a1, v3, (uint64_t)&v6, 83, *(unsigned __int8 *)(a1 + 312), 0);
  if (v4)
  {
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback();
    IOHIDUserDeviceRegisterSetReportCallback();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_10078BD90();
  }

  return v4;
}

void sub_100655B44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100655B60(uint64_t a1, void *a2)
{
  long long v10 = xmmword_1007C0293;
  v11[0] = unk_1007C02A3;
  *(_OWORD *)((char *)v11 + 14) = unk_1007C02B1;
  long long v6 = xmmword_1007C0253;
  long long v7 = unk_1007C0263;
  long long v8 = xmmword_1007C0273;
  long long v9 = unk_1007C0283;
  *(void *)(a1 + 320) = a1;
  *(unsigned char *)(a1 + 328) = -15;
  id v3 = [a2 mutableCopy:v6, v7, v8, v9, v10, v11[0], *(void *)&v11[1], *((void *)&v11[1] + 1)];
  [v3 setObject:&off_1009E1A20 forKeyedSubscript:@"ExtendedData"];
  uint64_t v4 = sub_1004EC498(a1, v3, (uint64_t)&v6, 110, *(unsigned __int8 *)(a1 + 328), 1);
  if (v4)
  {
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback();
    IOHIDUserDeviceRegisterSetReportCallback();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_10078BDC4();
  }

  return v4;
}

void sub_100655CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100655CBC(uint64_t a1, void *a2)
{
  v4[0] = xmmword_1007C02C1;
  v4[1] = algn_1007C02D1;
  int v5 = -1073573632;
  *(void *)(a1 + 336) = a1;
  *(unsigned char *)(a1 + 344) = -14;
  uint64_t v2 = sub_1004EC498(a1, a2, (uint64_t)v4, 36, 242, 2);
  if (v2)
  {
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback();
    IOHIDUserDeviceRegisterSetReportCallback();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_10078BDF8();
  }
  return v2;
}

uint64_t sub_100655DC0(uint64_t a1, void *a2)
{
  v4[0] = xmmword_1007C02E5;
  *(_OWORD *)((char *)v4 + 11) = *(long long *)((char *)&xmmword_1007C02E5 + 11);
  *(void *)(a1 + 352) = a1;
  *(unsigned char *)(a1 + 360) = -13;
  uint64_t v2 = sub_1004EC498(a1, a2, (uint64_t)v4, 27, 243, 3);
  if (v2)
  {
    IOHIDUserDeviceRegisterGetReportWithReturnLengthCallback();
    IOHIDUserDeviceRegisterSetReportCallback();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_ERROR))
  {
    sub_10078BE2C();
  }
  return v2;
}

uint64_t sub_100655EC0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)a1 + 112))(*(void *)a1, a2, a3, a4, a5, a1[8]);
}

uint64_t sub_100655EF0(unsigned __int8 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a3 == 178 && a1[8] == 240)
  {
    long long v10 = qword_100A1A018;
    if (os_log_type_enabled((os_log_t)qword_100A1A018, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "FW update detected; invalidating SDP cache",
        v12,
        2u);
    }
    (*(void (**)(void))(**(void **)(*(void *)a1 + 8) + 24))(*(void *)(*(void *)a1 + 8));
  }
  return (*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, void))(**(void **)a1 + 120))(*(void *)a1, a2, a3, a4, a5, a1[8]);
}

void sub_100655FFC(uint64_t a1)
{
  sub_1004EC1D4(a1);

  operator delete();
}

uint64_t sub_100656034(uint64_t a1)
{
  *(void *)a1 = off_1009BCFB0;
  *(void *)(a1 + 8) = off_1009BD038;
  *(void *)(a1 + 16) = &off_1009BD068;
  *(void *)(a1 + 24) = off_1009BD080;
  *(void *)(a1 + 32) = off_1009BD0D0;
  *(unsigned char *)(a1 + 41) = 0;
  sub_100052DA8(a1 + 56);
  *(_DWORD *)(a1 + 120) = 0;
  *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
  *(_DWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 16832) = 0u;
  *(void *)(a1 + 16824) = a1 + 16832;
  *(void *)(a1 + 16848) = a1 + 16848;
  *(void *)(a1 + 16856) = a1 + 16848;
  *(void *)(a1 + 16864) = 0;
  *(unsigned char *)(a1 + 16872) = 0;
  *(unsigned char *)(a1 + 16874) = 0;
  *(_OWORD *)(a1 + 16888) = 0u;
  *(void *)(a1 + 16880) = a1 + 16888;
  *(_WORD *)(a1 + 16906) = 7;
  *(void *)(a1 + 16912) = 3600;
  *(unsigned char *)(a1 + 16920) = 0;
  *(void *)(a1 + 16936) = 0;
  *(_WORD *)(a1 + 16944) = 0;
  *(_OWORD *)(a1 + 16976) = 0u;
  *(void *)(a1 + 16992) = 0;
  *(void *)(a1 + 17016) = 0;
  *(void *)(a1 + 16965) = 0;
  *(_OWORD *)(a1 + 16952) = 0u;
  *(void *)(a1 + 17002) = 0;
  *(_DWORD *)(a1 + 17010) = 0;
  *(void *)(a1 + 17024) = a1 + 17024;
  *(void *)(a1 + 17032) = a1 + 17024;
  *(void *)(a1 + 17040) = 0;
  *(unsigned char *)(a1 + 17072) = 0;
  *(int32x2_t *)(a1 + 17076) = vdup_n_s32(0x12Cu);
  *(unsigned char *)(a1 + 17084) = 0;
  *(void *)(a1 + 48) = sub_100019878();
  bzero((void *)(a1 + 144), 0x4128uLL);
  *(void *)(a1 + 16952) = 0;
  *(void *)(a1 + 16960) = 0;
  *(void *)(a1 + 16921) = 0;
  *(_WORD *)(a1 + 16929) = 0;
  return a1;
}

void sub_100656230(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10066691C(v9);
  sub_100051568((void ***)va);
  uint64_t v11 = 0;
  uint64_t v12 = v3 + 16960;
  do
  {

    v11 -= 8;
  }
  while (v11 != -16);
  sub_1000486F0(v6, *v8);
  sub_1002B308C(v5);
  sub_100666990(v4, *v7);
  sub_100052DA4(v2);
  _Unwind_Resume(a1);
}

void sub_1006562A4(uint64_t a1)
{
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
  }
  sub_100605CDC((uint64_t)off_1009F8780 + 192, a1);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BD1E0);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 8);
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BD200);
  }
  sub_1004F9E94((uint64_t)off_1009F8150, a1 + 24);
  if (!*(unsigned char *)(sub_10003FB34() + 160))
  {
    uint64_t v2 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Using a single advertising instance", buf, 2u);
    }
    *(_DWORD *)(a1 + 136) = 1;
  }
  int v111 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "AE");
  sub_10004191C(__p, "EnableBackgroundExtendedAdvertising");
  int v4 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v3 + 88))(v3, buf, __p, &v111);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = a1 + 16874;
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      goto LABEL_37;
    }
  }
  else if (!v4)
  {
    goto LABEL_37;
  }
  uint64_t v6 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Warning: Enabled Background advertising with extended advertising", buf, 2u);
  }
  *(unsigned char *)uint64_t v5 = v111 != 0;
  int v108 = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "AE");
  sub_10004191C(__p, "MaxAdvertisingBackgroundSessions");
  int v8 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v7 + 88))(v7, buf, __p, &v108);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v8) {
      goto LABEL_28;
    }
  }
  else if (!v8)
  {
    goto LABEL_28;
  }
  long long v9 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v108;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: Overriding max background advertising sessions to %d", buf, 8u);
  }
  *(_WORD *)(a1 + 16906) = v108;
LABEL_28:
  int v107 = 0;
  uint64_t v10 = sub_100017768();
  sub_10004191C(buf, "AE");
  sub_10004191C(__p, "MaxBackgroundAdvertisingTimeForSession");
  int v11 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v10 + 88))(v10, buf, __p, &v107);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v11) {
      goto LABEL_37;
    }
  }
  else if (!v11)
  {
    goto LABEL_37;
  }
  uint64_t v12 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 134217984;
    *(void *)&uint8_t buf[4] = v107 / 1000;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: Overriding max background advertising time for session to %lld seconds", buf, 0xCu);
  }
  *(void *)(a1 + 16912) = v107;
  *(unsigned char *)(a1 + 16920) = 1;
LABEL_37:
  int v108 = 0;
  uint64_t v13 = sub_100017768();
  sub_10004191C(buf, "ADVDEBUG");
  sub_10004191C(__p, "FakeBusyErrorOnADVStartCount");
  int v14 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v13 + 88))(v13, buf, __p, &v108);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v14) {
      goto LABEL_46;
    }
  }
  else if (!v14)
  {
    goto LABEL_46;
  }
  uint64_t v15 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v108;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Warning: Enabling fake OI_BUSY_FAIL on ADV start every %d start attempts", buf, 8u);
  }
  *(_WORD *)(a1 + 16970) = v108;
LABEL_46:
  uint64_t v16 = sub_100017768();
  sub_10004191C(buf, "ADVDEBUG");
  sub_10004191C(__p, "FakeADVUnsettledStateCount");
  int v17 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v16 + 88))(v16, buf, __p, &v108);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v17) {
      goto LABEL_55;
    }
  }
  else if (!v17)
  {
    goto LABEL_55;
  }
  int v18 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v108;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Warning: Enabling fake advertising unsettled state on ADV start every %d start attempts", buf, 8u);
  }
  *(_WORD *)(a1 + 16968) = v108;
LABEL_55:
  uint64_t v19 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v19 + 408))(v19) & 1) == 0)
  {
    uint64_t v20 = sub_10003FFD4();
    sub_100471048(v20 + 728, a1 + 16);
  }
  uint64_t v21 = sub_10003FFD4();
  (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 152))(v21, a1 + 40);
  int v107 = 0;
  uint64_t v22 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvertisementInterval");
  int v23 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v22 + 88))(v22, buf, __p, &v107);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v23) {
      goto LABEL_67;
    }
  }
  else if (!v23)
  {
    goto LABEL_67;
  }
  char v24 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_FAULT, "AdvertisementInterval defaults is now obsolete. Please use ConnectableAdvInt, NonConnectableAdvInt, ObjectDiscoveryAdvInt and ExtAdvInt instead", buf, 2u);
    char v24 = qword_100A19F20;
  }
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
    sub_10078BE60();
  }
LABEL_67:
  uint64_t v25 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "ConnectableAdvInt");
  int v26 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v25 + 88))(v25, buf, __p, &v107);
  if (v107) {
    int v27 = v26;
  }
  else {
    int v27 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v27) {
      goto LABEL_79;
    }
  }
  else if (!v27)
  {
    goto LABEL_79;
  }
  uint64_t v28 = qword_100A19F20;
  BOOL v29 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
  __int16 v30 = v107;
  if (v29)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for connectable advertisement interval", buf, 8u);
    __int16 v30 = v107;
  }
  *(_WORD *)(v5 + 128) = v30;
LABEL_79:
  uint64_t v31 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "NonConnectableAdvInt");
  int v32 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v31 + 88))(v31, buf, __p, &v107);
  if (v107) {
    int v33 = v32;
  }
  else {
    int v33 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v33) {
      goto LABEL_91;
    }
  }
  else if (!v33)
  {
    goto LABEL_91;
  }
  uint64_t v34 = qword_100A19F20;
  BOOL v35 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
  __int16 v36 = v107;
  if (v35)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for non connectable advertisement interval", buf, 8u);
    __int16 v36 = v107;
  }
  *(_WORD *)(v5 + 130) = v36;
LABEL_91:
  uint64_t v37 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "NonConnectableSecondaryAdvInt");
  int v38 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v37 + 88))(v37, buf, __p, &v107);
  if (v107) {
    int v39 = v38;
  }
  else {
    int v39 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v39) {
      goto LABEL_103;
    }
  }
  else if (!v39)
  {
    goto LABEL_103;
  }
  __int16 v40 = qword_100A19F20;
  BOOL v41 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
  __int16 v42 = v107;
  if (v41)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for non connectable secondary advertisement interval", buf, 8u);
    __int16 v42 = v107;
  }
  *(_WORD *)(v5 + 132) = v42;
LABEL_103:
  uint64_t v43 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "ObjectDiscoveryAdvInt");
  int v44 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v43 + 88))(v43, buf, __p, &v107);
  if (v107) {
    int v45 = v44;
  }
  else {
    int v45 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v45) {
      goto LABEL_119;
    }
  }
  else if (!v45)
  {
    goto LABEL_119;
  }
  int v46 = v107;
  uint64_t v47 = qword_100A19F20;
  if (v107 <= 289)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)stat buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v46;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = 290;
      _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Cannot advertise with this interval (%d) for Object Discovery advertisement, setting this to %d", buf, 0xEu);
      uint64_t v47 = qword_100A19F20;
    }
    int v46 = 290;
    int v107 = 290;
  }
  if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v46;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for Object Discovery advertisement interval", buf, 8u);
    LOWORD(v46) = v107;
  }
  *(_WORD *)(v5 + 134) = v46;
LABEL_119:
  uint64_t v48 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "ExtAdvInt");
  int v49 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v48 + 88))(v48, buf, __p, &v107);
  if (v107) {
    int v50 = v49;
  }
  else {
    int v50 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v50) {
      goto LABEL_131;
    }
  }
  else if (!v50)
  {
    goto LABEL_131;
  }
  unsigned int v51 = qword_100A19F20;
  BOOL v52 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
  __int16 v53 = v107;
  if (v52)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for Extended advertisement interval", buf, 8u);
    __int16 v53 = v107;
  }
  *(_WORD *)(v5 + 136) = v53;
LABEL_131:
  uint64_t v54 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "ContactAdvInt");
  int v55 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v54 + 88))(v54, buf, __p, &v107);
  if (v107) {
    int v56 = v55;
  }
  else {
    int v56 = 0;
  }
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v56) {
      goto LABEL_143;
    }
  }
  else if (!v56)
  {
    goto LABEL_143;
  }
  unsigned int v57 = qword_100A19F20;
  BOOL v58 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
  __int16 v59 = v107;
  if (v58)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v107;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Enabling override value (%d) for Contact advertisement interval", buf, 8u);
    __int16 v59 = v107;
  }
  *(_WORD *)(v5 + 138) = v59;
LABEL_143:
  int v106 = 0;
  uint64_t v60 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsInstance1");
  int v61 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v60 + 88))(v60, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v62 = v106;
  if (!v61) {
    char v62 = 0;
  }
  *(unsigned char *)(v5 + 174) = v62;
  uint64_t v63 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsEnable1");
  int v64 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v63 + 88))(v63, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v65 = v106;
  if (!v64) {
    char v65 = 1;
  }
  *(unsigned char *)(v5 + 175) = v65;
  uint64_t v66 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsReset1");
  int v67 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v66 + 88))(v66, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v68 = v106;
  if (!v67) {
    char v68 = 1;
  }
  *(unsigned char *)(v5 + 176) = v68;
  uint64_t v69 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsPeriod1");
  int v70 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v69 + 88))(v69, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  int v71 = v106;
  if (!v70) {
    int v71 = 60;
  }
  *(_DWORD *)(v5 + 178) = v71;
  uint64_t v72 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsCanWakeUpAP1");
  int v73 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v72 + 88))(v72, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (v73) {
      goto LABEL_171;
    }
LABEL_173:
    *(unsigned char *)(v5 + 182) = 0;
    if (!(v70 | v67 | v64 | v61)) {
      goto LABEL_182;
    }
    goto LABEL_174;
  }
  if (!v73) {
    goto LABEL_173;
  }
LABEL_171:
  int v73 = v106;
  *(unsigned char *)(v5 + 182) = v106;
LABEL_174:
  BOOL v74 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    int v75 = *(unsigned __int8 *)(v5 + 174);
    if (*(unsigned char *)(v5 + 175)) {
      unsigned __int8 v76 = "Y";
    }
    else {
      unsigned __int8 v76 = "N";
    }
    if (*(unsigned char *)(v5 + 176)) {
      unsigned __int8 v77 = "Y";
    }
    else {
      unsigned __int8 v77 = "N";
    }
    int v78 = *(_DWORD *)(v5 + 178);
    *(_DWORD *)stat buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v75;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v76;
    __int16 v113 = 2080;
    id v114 = v77;
    __int16 v115 = 1024;
    int v116 = v78;
    __int16 v117 = 1024;
    int v118 = v73;
    _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Enabling Adv Stats for instance %d enable %s reset %s period %d (secs) canWakeUpAP %d", buf, 0x28u);
  }
LABEL_182:
  uint64_t v79 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsInstance2");
  int v80 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v79 + 88))(v79, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v81 = v106;
  if (!v80) {
    char v81 = 1;
  }
  *(unsigned char *)(v5 + 186) = v81;
  uint64_t v82 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsEnable2");
  int v83 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v82 + 88))(v82, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v84 = v106;
  if (!v83) {
    char v84 = 1;
  }
  *(unsigned char *)(v5 + 187) = v84;
  uint64_t v85 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsReset2");
  int v86 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v85 + 88))(v85, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  char v87 = v106;
  if (!v86) {
    char v87 = 1;
  }
  *(unsigned char *)(v5 + 188) = v87;
  uint64_t v88 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsPeriod2");
  int v89 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v88 + 88))(v88, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0) {
    operator delete(*(void **)buf);
  }
  int v90 = v106;
  if (!v89) {
    int v90 = 60;
  }
  *(_DWORD *)(v5 + 190) = v90;
  uint64_t v91 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "AdvStatsCanWakeUpAP2");
  int v92 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v91 + 88))(v91, buf, __p, &v106);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (v92) {
      goto LABEL_210;
    }
LABEL_212:
    *(unsigned char *)(v5 + 194) = 0;
    if (!(v89 | v86 | v83 | v80)) {
      goto LABEL_221;
    }
    goto LABEL_213;
  }
  if (!v92) {
    goto LABEL_212;
  }
LABEL_210:
  int v92 = v106;
  *(unsigned char *)(v5 + 194) = v106;
LABEL_213:
  int v93 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    int v94 = *(unsigned __int8 *)(v5 + 186);
    if (*(unsigned char *)(v5 + 187)) {
      long long v95 = "Y";
    }
    else {
      long long v95 = "N";
    }
    if (*(unsigned char *)(v5 + 188)) {
      uint64_t v96 = "Y";
    }
    else {
      uint64_t v96 = "N";
    }
    int v97 = *(_DWORD *)(v5 + 190);
    *(_DWORD *)stat buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v94;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v95;
    __int16 v113 = 2080;
    id v114 = v96;
    __int16 v115 = 1024;
    int v116 = v97;
    __int16 v117 = 1024;
    int v118 = v92;
    _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Enabling Adv Stats for instance %d enable %s reset %s period %d (secs) canWakeUpAP %d", buf, 0x28u);
  }
LABEL_221:
  uint64_t v98 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "HoldStablePrivateAddressThreshold");
  int v99 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v98 + 128))(v98, buf, __p, v5 + 202);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v99) {
      goto LABEL_229;
    }
  }
  else if (!v99)
  {
    goto LABEL_229;
  }
  id v100 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    int v101 = *(_DWORD *)(v5 + 202);
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v101;
    _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "Warning: HoldStablePrivateAddressThreshold overridden to %u", buf, 8u);
  }
LABEL_229:
  uint64_t v102 = sub_100017768();
  sub_10004191C(buf, "LeBroadcaster");
  sub_10004191C(__p, "LeExtendStablePrivateAddressInterval");
  int v103 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v102 + 128))(v102, buf, __p, v5 + 206);
  if (v110 < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE3(v114) < 0)
  {
    operator delete(*(void **)buf);
    if (!v103) {
      return;
    }
  }
  else if (!v103)
  {
    return;
  }
  uint64_t v104 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    int v105 = *(_DWORD *)(v5 + 206);
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v105;
    _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "Warning: LeExtendStablePrivateAddressInterval overriden to %u", buf, 8u);
  }
}

void sub_1006578C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1006579B0(uint64_t a1)
{
  uint64_t v2 = sub_10003FB34();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 3344))(v2);
  unsigned int v4 = result;
  uint64_t v5 = 0;
  unsigned int v6 = 0;
  char v7 = 1;
  do
  {
    if (v6 >= v4) {
      break;
    }
    char v8 = v7;
    long long v9 = (unsigned __int8 *)(a1 + 12 * v5 + 17048);
    if (*(unsigned char *)(a1 + 12 * v5 + 17049))
    {
      uint64_t v10 = qword_100A19F20;
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *v9;
        if (*(unsigned char *)(a1 + 12 * v5 + 17050)) {
          uint64_t v12 = "Y";
        }
        else {
          uint64_t v12 = "N";
        }
        int v13 = *(_DWORD *)(a1 + 12 * v5 + 17052);
        if (*(unsigned char *)(a1 + 12 * v5 + 17056)) {
          int v14 = "Y";
        }
        else {
          int v14 = "N";
        }
        *(_DWORD *)stat buf = 67110402;
        unsigned int v17 = v6;
        __int16 v18 = 1024;
        int v19 = v11;
        __int16 v20 = 2080;
        uint64_t v21 = "Y";
        __int16 v22 = 2080;
        int v23 = v12;
        __int16 v24 = 1024;
        int v25 = v13;
        __int16 v26 = 2080;
        int v27 = v14;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Start %dth Adv Stats for instance %d enable %s reset %s period %d (secs) canWakeUpAP %s", buf, 0x32u);
      }
      uint64_t v15 = sub_10003FB34();
      uint64_t result = (*(uint64_t (**)(uint64_t, void, void, void, void, void))(*(void *)v15 + 1592))(v15, *v9, *(unsigned __int8 *)(a1 + 12 * v5 + 17049), *(unsigned __int8 *)(a1 + 12 * v5 + 17050), *(unsigned int *)(a1 + 12 * v5 + 17052), *(unsigned __int8 *)(a1 + 12 * v5 + 17056));
      ++v6;
      *(unsigned char *)(a1 + 17072) = 1;
    }
    char v7 = 0;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) != 0);
  return result;
}

unsigned char *sub_100657BC0(uint64_t a1)
{
  char v27 = 0;
  sub_10001B8E0(&v27);
  if (sub_10022A2F0())
  {
    uint64_t v2 = (unsigned char *)(a1 + 16873);
    if (*(_WORD *)(a1 + 16970)) {
      sub_10020C46C(*(_WORD *)(a1 + 16970));
    }
    uint64_t v3 = sub_100035F54();
    char v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 480))(v3);
    unsigned char *v2 = v4;
    if (*(unsigned char *)(a1 + 16874)) {
      char v5 = v4;
    }
    else {
      char v5 = 0;
    }
    *(unsigned char *)(a1 + 16874) = v5;
    uint64_t v6 = sub_100017768();
    *(unsigned char *)(a1 + 16972) = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 800))(v6, a1 + 16976);
    sub_100657F28(a1, 0);
    uint64_t v7 = sub_100035F54();
    int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 408))(v7);
    *(unsigned char *)(a1 + 16944) = 0;
    if (v8) {
      unsigned int v9 = 0;
    }
    else {
      unsigned int v9 = 3;
    }
    if (sub_100227E68(v9, 1, (*(_DWORD *)(a1 + 136) & 0xFFFFFFFD) == 0, (uint64_t (*)(void, void, void))sub_1006580D0)&& os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
    {
      sub_10078BEFC();
    }
    *(_WORD *)(a1 + 16929) = 0;
    *(void *)(a1 + 16921) = 0;
    int v10 = *v2;
    int v11 = qword_100A19F20;
    BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
    if (v10)
    {
      if (v12)
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Skip Reading Legacy controller LE Advertising TX Power, will wait.", buf, 2u);
      }
    }
    else
    {
      if (v12)
      {
        *(_WORD *)stat buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reading Legacy controller LE Advertising TX Power", buf, 2u);
      }
      sub_10018E4D8(v12, v13, v14, v15, v16, v17, v18, v19);
    }
    uint64_t v20 = sub_10003FFD4();
    sub_10026B638(v20 + 368, a1 + 32);
    *(unsigned char *)(a1 + 16945) = 0;
    int v21 = sub_100229F5C((uint64_t (*)(void, void))sub_100658164, (uint64_t (*)(void, void))sub_100658220);
    if (v21 && os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
      sub_10078BE94();
    }
    uint64_t v22 = sub_100035F54();
    uint64_t v23 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 936))(v22);
    __int16 v24 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      int v25 = "disabled";
      if (v23) {
        int v25 = "enabled";
      }
      *(_DWORD *)stat buf = 136315138;
      BOOL v29 = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Secondary non-connectable advertising instance is: %s", buf, 0xCu);
    }
    sub_1002291F8(v23);
    if (v21) {
      sub_10025B8C0();
    }
  }
  return sub_10001B8AC(&v27);
}

void sub_100657F04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100657F28(uint64_t a1, unsigned int a2)
{
  char v4 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v5 = *(_DWORD *)(a1 + 120);
    if (v5 > 3) {
      uint64_t v6 = "UNKNOWN";
    }
    else {
      uint64_t v6 = off_1009BD2D0[v5];
    }
    if (a2 > 3) {
      uint64_t v7 = "UNKNOWN";
    }
    else {
      uint64_t v7 = off_1009BD2D0[a2];
    }
    int v8 = *(unsigned __int8 *)(a1 + 41);
    int v10 = 136447234;
    if (v8) {
      unsigned int v9 = "ON";
    }
    else {
      unsigned int v9 = "OFF";
    }
    int v11 = v6;
    __int16 v12 = 1024;
    unsigned int v13 = v5;
    __int16 v14 = 2082;
    uint64_t v15 = v7;
    __int16 v16 = 1024;
    unsigned int v17 = a2;
    __int16 v18 = 2082;
    uint64_t v19 = v9;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Advertising state change:  %{public}s(%d) --> %{public}s(%d) stack:%{public}s", (uint8_t *)&v10, 0x2Cu);
  }
  *(_DWORD *)(a1 + 120) = a2;
  *(CFAbsoluteTime *)(a1 + 128) = CFAbsoluteTimeGetCurrent();
  switch(*(_DWORD *)(a1 + 120))
  {
    case 0:
    case 2:
      sub_10065AF64(a1, 1);
      sub_10065AFE8(a1);
      break;
    case 1:
    case 3:
      sub_1006633D8(a1, 1);
      sub_100664430(a1);
      break;
    default:
      return;
  }
}

void sub_1006580D0(int a1, uint64_t a2, char a3)
{
  uint64_t v6 = sub_100019878();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1006640B0;
  v7[3] = &unk_1009A6D98;
  int v8 = a1;
  void v7[4] = a2;
  char v9 = a3;
  sub_100013018(v6, v7);
}

void sub_100658164(int a1, int a2)
{
  char v4 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109376;
    v5[1] = a2;
    __int16 v6 = 1024;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "periodicAdvStartedCb advHandle=%d, status=%d", (uint8_t *)v5, 0xEu);
  }
}

void sub_100658220(int a1, int a2)
{
  char v4 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
  {
    v5[0] = 67109376;
    v5[1] = a2;
    __int16 v6 = 1024;
    int v7 = a1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "periodicAdvStoppedCb advHandle=%d, status=%d", (uint8_t *)v5, 0xEu);
  }
}

unsigned char *sub_1006582DC(uint64_t a1)
{
  return sub_100657BC0(a1 - 8);
}

void sub_1006582E4(uint64_t a1)
{
  unsigned __int8 v1 = (unsigned char *)(a1 + 16944);
  sub_100657F28(a1, 0);
  unsigned char *v1 = 0;
  v1[128] = 0;
}

void sub_100658318(uint64_t a1)
{
  unsigned __int8 v1 = (unsigned char *)(a1 + 16936);
  sub_100657F28(a1 - 8, 0);
  unsigned char *v1 = 0;
  v1[128] = 0;
}

uint64_t sub_100658350(uint64_t result)
{
  if (!*(void *)(result + 16936)) {
    sub_1003733D8();
  }
  return result;
}

void sub_100658444(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16936);
  if (v1)
  {
    uint64_t v3 = qword_100A19F40;
    if (!os_log_type_enabled((os_log_t)qword_100A19F40, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1),
          int v5 = 136446210,
          uint64_t v6 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v5, 0xCu), (uint64_t v1 = *(void *)(a1 + 16936)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
    *(void *)(a1 + 16936) = 0;
  }
}

unsigned char *sub_100658554(uint64_t a1)
{
  char v5 = 0;
  sub_10001B8E0(&v5);
  if (sub_10022A2F0())
  {
    if (sub_10022627C((uint64_t)sub_10065864C))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
        sub_10078BF64();
      }
    }
    else
    {
      uint64_t v2 = *(void *)(a1 + 48);
      v4[0] = _NSConcreteStackBlock;
      v4[1] = 3221225472;
      _OWORD v4[2] = sub_1006587C0;
      v4[3] = &unk_100997528;
      void v4[4] = a1;
      sub_100013018(v2, v4);
    }
  }
  return sub_10001B8AC(&v5);
}

void sub_100658634(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 17));
  _Unwind_Resume(a1);
}

void sub_10065864C()
{
  *(_DWORD *)&void v15[3] = 0;
  *(_DWORD *)uint64_t v15 = 0;
  sub_100229724((uint64_t)v15);
  uint64_t v14 = v15[1];
  uint64_t v13 = v15[2];
  uint64_t v12 = v15[3];
  uint64_t v11 = v15[4];
  uint64_t v0 = v15[5];
  uint64_t v1 = v15[6];
  uint64_t v2 = v15[0];
  sub_1002296C8(1u, (uint64_t)v15);
  uint64_t v3 = v15[1];
  uint64_t v4 = v15[2];
  uint64_t v5 = v15[3];
  uint64_t v6 = v15[4];
  uint64_t v7 = v15[5];
  uint64_t v8 = v15[6];
  uint64_t v9 = v15[0];
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009BD220);
  }
  uint64_t v10 = *((void *)off_1009F8240 + 6);
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3221225472;
  _DWORD v16[2] = sub_100658D2C;
  void v16[3] = &unk_1009983C8;
  _OWORD v16[4] = off_1009F8240;
  void v16[5] = (v14 << 40) | (v13 << 32) | (v12 << 24) | (v11 << 16) | (v0 << 8) | v1 | (v2 << 48);
  v16[6] = (v3 << 40) | (v4 << 32) | (v5 << 24) | (v6 << 16) | (v7 << 8) | v8 | (v9 << 48);
  char v16[7] = 0;
  sub_100013018(v10, v16);
}

uint64_t sub_1006587C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, v1 + 56);
  uint64_t v14 = 0;
  v15[0] = 0;
  v15[1] = 0;
  sub_100666C94((uint64_t *)&v14, v1 + 16824);
  uint64_t v2 = v14;
  if (v14 != v15)
  {
    do
    {
      if (*((_DWORD *)v2[6] + 66) == 2)
      {
        uint64_t v3 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v12) = 0;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "removing EN ADV", (uint8_t *)&v12, 2u);
        }
        unint64_t v4 = (unint64_t)v2[4];
        sub_1006589E0(v1, v4);
        uint64_t v12 = 0;
        v13[0] = 0;
        v13[1] = 0;
        sub_100666F3C((uint64_t *)&v12, v1 + 16880);
        uint64_t v5 = v12;
        if (v12 != v13)
        {
          do
          {
            (*(void (**)(void *, unint64_t, uint64_t))(*v5[4] + 8))(v5[4], v4, 116);
            uint64_t v6 = v5[1];
            if (v6)
            {
              do
              {
                uint64_t v7 = (void **)v6;
                uint64_t v6 = (void *)*v6;
              }
              while (v6);
            }
            else
            {
              do
              {
                uint64_t v7 = (void **)v5[2];
                BOOL v8 = *v7 == v5;
                uint64_t v5 = v7;
              }
              while (!v8);
            }
            uint64_t v5 = v7;
          }
          while (v7 != v13);
        }
        sub_1000486F0((uint64_t)&v12, v13[0]);
      }
      uint64_t v9 = v2[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = (void **)v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void **)v2[2];
          BOOL v8 = *v10 == v2;
          uint64_t v2 = v10;
        }
        while (!v8);
      }
      uint64_t v2 = v10;
    }
    while (v10 != v15);
  }
  sub_100666990((uint64_t)&v14, v15[0]);
  return sub_10003AFB4((uint64_t)v16);
}

void sub_1006589A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1006589E0(uint64_t a1, unint64_t a2)
{
  uint64_t v22 = a2;
  uint64_t v3 = *(void **)(a1 + 16832);
  if (!v3) {
    goto LABEL_12;
  }
  uint64_t v5 = (uint64_t **)(a1 + 16824);
  uint64_t v6 = (uint64_t *)(a1 + 16832);
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v3;
    }
    else {
      uint64_t v9 = v3 + 1;
    }
    if (v8) {
      uint64_t v6 = v3;
    }
    uint64_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 != (uint64_t *)(a1 + 16832) && v6[4] <= a2)
  {
    *(void *)stat buf = &v22;
    uint64_t v12 = (uint64_t)sub_100666FFC((uint64_t **)(a1 + 16824), (unint64_t *)&v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf);
    uint64_t v13 = (uint64_t *)v12;
    uint64_t v14 = v12 + 40;
    uint64_t v15 = *(void *)(v12 + 48);
    if (*(unsigned char *)(v15 + 308))
    {
      uint64_t v16 = *(unsigned int *)(v15 + 264);
      if (*(unsigned char *)(a1 + v16 + 16921))
      {
        uint64_t v17 = sub_10020A6B8(*(_DWORD *)(v15 + 264));
        uint64_t v18 = sub_10003FB34();
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, void, uint64_t))(*(void *)v18 + 2912))(v18, v17, 0, 1);
        if ((v12 & 0xFFFFFFFD) != 0)
        {
          uint64_t v12 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR);
          if (v12) {
            sub_10078C148();
          }
        }
        uint64_t v15 = v13[6];
        *(unsigned char *)(a1 + *(unsigned int *)(v15 + 264) + 16921) = 0;
      }
      else
      {
        uint64_t v19 = qword_100A19F20;
        uint64_t v12 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR);
        if (v12)
        {
          *(_DWORD *)stat buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Cannot disable ObjectLocator response on handle %d", buf, 8u);
          uint64_t v15 = v13[6];
        }
      }
    }
    if (*(unsigned char *)(v15 + 409))
    {
      if (*(unsigned char *)(a1 + *(unsigned int *)(v15 + 264) + 16926))
      {
        uint64_t v20 = sub_10020A6B8(*(_DWORD *)(v15 + 264));
        uint64_t v21 = sub_10003FB34();
        uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v21 + 1888))(v21, 2, v20, 0, 0, 0);
        if ((v12 & 0xFFFFFFFD) != 0)
        {
          uint64_t v12 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR);
          if (v12) {
            sub_10078C0E0();
          }
        }
        else
        {
          *(unsigned char *)(a1 + *(unsigned int *)(v13[6] + 264) + 16926) = 0;
        }
      }
      else
      {
        uint64_t v12 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR);
        if (v12) {
          sub_10078C078();
        }
      }
    }
    sub_10065D2A0(v12, v14, 0);
    sub_1006670DC(v5, v6);
    sub_10065D380((void *)a1, v22);
    return 0;
  }
  else
  {
LABEL_12:
    uint64_t v10 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
      sub_10078BFCC(a2, v10);
    }
    return 3;
  }
}

unsigned char *sub_100658D24(uint64_t a1)
{
  return sub_100658554(a1 - 8);
}

uint64_t sub_100658D2C(void *a1)
{
  uint64_t v2 = a1[4];
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, v2 + 56);
  if (*(unsigned char *)(v2 + 16944))
  {
    uint64_t v19 = 0;
    v20[0] = 0;
    v20[1] = 0;
    sub_100666C94((uint64_t *)&v19, v2 + 16824);
    uint64_t v3 = v19;
    if (v19 != v20)
    {
      do
      {
        if (*((unsigned char *)v3[6] + 307))
        {
          unint64_t v4 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C((uint64_t)v3[4], (uint64_t)&__p);
            p_p = &__p;
            if (v18 < 0) {
              p_p = __p;
            }
            *(_DWORD *)stat buf = 136446210;
            uint64_t v23 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notifying session %{public}s that advertising stopped due to address change", buf, 0xCu);
            if (SHIBYTE(v18) < 0) {
              operator delete(__p);
            }
          }
          unint64_t v6 = (unint64_t)v3[4];
          sub_1006589E0(v2, v6);
          __n128 __p = 0;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          sub_100666F3C((uint64_t *)&__p, v2 + 16880);
          unint64_t v7 = (void **)__p;
          if (__p != &v17)
          {
            do
            {
              (*(void (**)(void *, unint64_t, uint64_t))(*v7[4] + 8))(v7[4], v6, 116);
              BOOL v8 = v7[1];
              if (v8)
              {
                do
                {
                  uint64_t v9 = (void **)v8;
                  BOOL v8 = (void *)*v8;
                }
                while (v8);
              }
              else
              {
                do
                {
                  uint64_t v9 = (void **)v7[2];
                  BOOL v10 = *v9 == v7;
                  unint64_t v7 = v9;
                }
                while (!v10);
              }
              unint64_t v7 = v9;
            }
            while (v9 != &v17);
          }
          sub_1000486F0((uint64_t)&__p, v17);
        }
        uint64_t v11 = v3[1];
        if (v11)
        {
          do
          {
            uint64_t v12 = (void **)v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            uint64_t v12 = (void **)v3[2];
            BOOL v10 = *v12 == v3;
            uint64_t v3 = v12;
          }
          while (!v10);
        }
        uint64_t v3 = v12;
      }
      while (v12 != v20);
    }
    sub_100666990((uint64_t)&v19, v20[0]);
  }
  *(unsigned char *)(v2 + 16944) = 0;
  sub_10065904C(v2, a1[5], 0);
  sub_10065904C(v2, a1[6], 1u);
  uint64_t v13 = *(void *)(v2 + 48);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_1006590F4;
  void v15[3] = &unk_100997528;
  _OWORD v15[4] = v2;
  sub_100013018(v13, v15);
  return sub_10003AFB4((uint64_t)v21);
}

void sub_100658FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10065904C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *((void *)&v6 + 1) = a2;
  *(void *)&long long v6 = a3;
  id v7 = +[NSDate now];
  sub_10065AA8C(a1 + 17024, (uint64_t)&v6);
  if (*(void *)(a1 + 17040) >= 0x33uLL) {
    sub_10065AAEC((uint64_t **)(a1 + 17024));
  }
  long long v4 = v6;
  id v5 = v7;
  sub_10065AB44(a1, (uint64_t)&v4);
}

void sub_1006590E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1006590F4()
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009BD220);
  }

  return sub_10065915C();
}

uint64_t sub_10065915C()
{
  uint64_t v0 = __chkstk_darwin();
  char v2 = v1;
  uint64_t v3 = v0;
  bzero(__src, 0x4128uLL);
  v144[0] = 0;
  v144[1] = 0;
  sub_10003AED0((uint64_t)v144, v3 + 56);
  if (*(unsigned char *)(v3 + 41))
  {
    if ((v2 & 1) == 0 && *(unsigned char *)(v3 + 16945))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG)) {
        sub_10078C438();
      }
      return sub_10003AFB4((uint64_t)v144);
    }
    if ((*(_DWORD *)(v3 + 120) | 2) == 2)
    {
      long long v4 = qword_100A19F20;
      if (*(unsigned char *)(v3 + 16944))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "updateAdvertisement busy with address change, will try again later", buf, 2u);
        }
        sub_1006633D8(v3, 0);
        return sub_10003AFB4((uint64_t)v144);
      }
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG)) {
        sub_10078C380(v2, v3, v4);
      }
      sub_10065AF64(v3, 0);
      __int16 v113 = (unsigned char *)(v3 + 16944);
      *(unsigned char *)(v3 + 16945) = 0;
      id v141 = 0;
      v142[0] = 0;
      v142[1] = 0;
      sub_100666C94((uint64_t *)&v141, v3 + 16824);
      id v7 = v141;
      if (v141 == v142)
      {
        LOBYTE(v8) = 0;
        int v21 = 1;
      }
      else
      {
        int v8 = 0;
        char v9 = 0;
        while (1)
        {
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
          }
          int v10 = sub_1002F45B8((uint64_t)off_1009F8780, (unint64_t)v7[4]);
          if (qword_1009F8788 != -1) {
            dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
          }
          BOOL v11 = sub_1002F4750((uint64_t)off_1009F8780, (unint64_t)v7[4]);
          _ZF = (v10 & 0x30) != 0 || v10 == 1;
          char v13 = _ZF || v11;
          if (v13) {
            break;
          }
          int v14 = v8;
          uint64_t v15 = v7[6];
          BOOL v16 = *((_DWORD *)v15 + 66) == 2;
          if (*((unsigned char *)v15 + 360))
          {
            uint64_t v17 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
            {
              sub_10003AE4C((uint64_t)v7[4], (uint64_t)buf);
              uint64_t v18 = buf;
              if ((buf[23] & 0x80u) != 0) {
                uint64_t v18 = *(uint8_t **)buf;
              }
              LODWORD(v161) = 136446210;
              *(void *)((char *)&v161 + 4) = v18;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" requires power assertion", (uint8_t *)&v161, 0xCu);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
            }
            char v9 = 1;
          }
          uint64_t v19 = v7[1];
          if (v19)
          {
            do
            {
              uint64_t v20 = (void **)v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v20 = (void **)v7[2];
              _ZF = *v20 == v7;
              id v7 = v20;
            }
            while (!_ZF);
          }
          int v8 = v16 | v14;
          id v7 = v20;
          if (v20 == v142) {
            goto LABEL_47;
          }
        }
        int v8 = 1;
LABEL_47:
        int v21 = v8 ^ 1;
        if (v9 & 1) != 0 && (v8)
        {
          sub_100658350(v3);
          LOBYTE(v8) = 1;
          goto LABEL_51;
        }
      }
      sub_100658444(v3);
LABEL_51:
      if (!*(_DWORD *)(v3 + 136))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
          sub_10078C248();
        }
        goto LABEL_199;
      }
      long long v161 = 0uLL;
      uint64_t v162 = 0;
      id v138 = 0;
      id v139 = 0;
      uint64_t v140 = 0;
      id v135 = 0;
      id v136 = 0;
      uint64_t v137 = 0;
      id v132 = 0;
      id v133 = 0;
      uint64_t v134 = 0;
      id v129 = 0;
      id v130 = 0;
      uint64_t v131 = 0;
      id v127 = 0;
      uint64_t v128 = 0;
      id v126 = (uint64_t *)&v127;
      if (sub_100227CE8()) {
        uint64_t v22 = sub_100227CE8();
      }
      else {
        uint64_t v22 = 1;
      }
      sub_10065F880(v3, (uint64_t)&v141, (uint64_t)__src, v22, (uint64_t)&v161, (uint64_t)&v138, (uint64_t)&v135, (uint64_t)&v132, &v129, &v126);
      int v115 = v21;
      unsigned __int8 v118 = v8;
      uint64_t v122 = v3;
      unsigned int v114 = v22;
      if (v22)
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        int v25 = 0;
        uint64_t v121 = v3 + 6788;
        uint64_t v119 = 3336 * v22;
        while (1)
        {
          _X22 = &__src[v23 + 6644];
          _X26 = v121 + v23;
          uint64_t v28 = &__src[v23];
          BOOL v29 = (unsigned __int8 *)(v3 + v23);
          BOOL v30 = sub_1006632DC(v3, &__src[v23], (unsigned __int8 *)(v3 + v23 + 144));
          __asm
          {
            PRFM            #0, [X26]
            PRFM            #0, [X22]
          }
          if (v30)
          {
            __int16 v36 = qword_100A19F28;
            if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)stat buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v24;
              _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "Advertising instance %d changed:", buf, 8u);
              __int16 v36 = qword_100A19F28;
            }
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
            {
              _X8 = v29 + 3481;
              __asm { PRFM            #0, [X8] }
              _X8 = v28 + 3337;
              int v48 = *(unsigned __int8 *)(v3 + v23 + 145);
              __asm { PRFM            #0, [X8] }
              LODWORD(_X8) = __src[v23 + 1];
              int v50 = *(unsigned __int16 *)(v3 + v23 + 146);
              int v51 = *(unsigned __int16 *)&__src[v23 + 2];
              *(_DWORD *)stat buf = 67109888;
              *(_DWORD *)&uint8_t buf[4] = v48;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = _X8;
              *(_WORD *)&unsigned char buf[14] = 1024;
              *(_DWORD *)&uint8_t buf[16] = v50;
              *(_WORD *)&unsigned char buf[20] = 1024;
              *(_DWORD *)&unsigned char buf[22] = v51;
              _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "\ttype:%d-->%d interval:%d-->%d", buf, 0x1Au);
              __int16 v36 = qword_100A19F28;
            }
            uint64_t v37 = &__src[v23];
            int v38 = memcmp(&__src[v23 + 5], (const void *)(v122 + v23 + 149), 0x672uLL);
            v37[3319] = v38 != 0;
            int v39 = memcmp(&__src[v23 + 1658], (const void *)(v122 + v23 + 1802), 0x672uLL);
            v37[3320] = v39 != 0;
            if (os_log_type_enabled(v36, OS_LOG_TYPE_DEBUG))
            {
              *(_DWORD *)stat buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v38 != 0;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v39 != 0;
              _os_log_debug_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEBUG, "AdvDataChanged:%d scanDataChanged:%d", buf, 0xEu);
            }
            uint64_t v3 = v122;
            if (v24 == 2)
            {
              uint64_t v40 = sub_100017768();
              if (!(*(unsigned int (**)(uint64_t))(*(void *)v40 + 184))(v40)) {
                goto LABEL_79;
              }
            }
            BOOL v41 = qword_100A19F28;
            if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG))
            {
              _X8 = v29 + 5136;
              __asm { PRFM            #0, [X8] }
              _X8 = v28 + 4992;
              int v55 = *(unsigned __int16 *)(v122 + v23 + 1800);
              __asm { PRFM            #0, [X8] }
              LODWORD(_X8) = *(unsigned __int16 *)&__src[v23 + 1656];
              *(_DWORD *)stat buf = 68158978;
              *(_DWORD *)&uint8_t buf[4] = v55;
              *(_WORD *)&uint8_t buf[8] = 2096;
              *(void *)&buf[10] = v122 + v23 + 149;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v55;
              *(_WORD *)&uint8_t buf[24] = 1040;
              *(_DWORD *)&buf[26] = _X8;
              *(_WORD *)&buf[30] = 2096;
              *(void *)&uint8_t buf[32] = &__src[v23 + 5];
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = _X8;
              _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "\tAdvertising Data:%.*P(%d)-->%.*P(%d)", buf, 0x2Eu);
              BOOL v41 = qword_100A19F28;
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              int v57 = *(unsigned __int16 *)(v122 + v23 + 3452);
              int v58 = *(unsigned __int16 *)&__src[v23 + 3308];
              *(_DWORD *)stat buf = 68158978;
              *(_DWORD *)&uint8_t buf[4] = v57;
              *(_WORD *)&uint8_t buf[8] = 2096;
              *(void *)&buf[10] = v122 + v23 + 1802;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v57;
              *(_WORD *)&uint8_t buf[24] = 1040;
              *(_DWORD *)&buf[26] = v58;
              *(_WORD *)&buf[30] = 2096;
              *(void *)&uint8_t buf[32] = &__src[v23 + 1658];
              *(_WORD *)&buf[40] = 1024;
              *(_DWORD *)&buf[42] = v58;
              _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "\tScan Response:%.*P(%d)-->%.*P(%d)", buf, 0x2Eu);
              BOOL v41 = qword_100A19F28;
            }
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEBUG))
            {
              int v59 = *(unsigned __int8 *)(v122 + v23 + 3454);
              int v60 = *(unsigned __int8 *)(v122 + v23 + 3461);
              *(_DWORD *)stat buf = 68158466;
              *(_DWORD *)&uint8_t buf[4] = 6;
              *(_WORD *)&uint8_t buf[8] = 2096;
              *(void *)&buf[10] = v122 + v23 + 3455;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&unsigned char buf[20] = v59;
              *(_WORD *)&uint8_t buf[24] = 1024;
              *(_DWORD *)&buf[26] = v60;
              _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "\tadvertising address:%.6P type:%d override:%d", buf, 0x1Eu);
            }
          }
          unint64_t v42 = ((unint64_t)v28[3311] << 40) | ((unint64_t)v28[3312] << 32) | ((unint64_t)v28[3313] << 24) | ((unint64_t)v28[3314] << 16) | ((unint64_t)v28[3315] << 8) | v28[3316];
          unint64_t v43 = v42 | ((unint64_t)v28[3310] << 48);
          if (v42) {
            BOOL v44 = v43 == (((unint64_t)v29[3455] << 40) | ((unint64_t)v29[3456] << 32) | ((unint64_t)v29[3457] << 24) | ((unint64_t)v29[3458] << 16) | ((unint64_t)v29[3459] << 8) | v29[3460] | ((unint64_t)v29[3454] << 48));
          }
          else {
            BOOL v44 = 1;
          }
          if (!v44) {
            sub_10065904C(v3, v43, v24);
          }
LABEL_79:
          v25 |= v30;
          ++v24;
          v23 += 3336;
          if (v119 == v23) {
            goto LABEL_82;
          }
        }
      }
      int v25 = 0;
LABEL_82:
      int v61 = qword_100A19F20;
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v111 = *(int *)(v3 + 120);
        if (v111 > 3) {
          v112 = "UNKNOWN";
        }
        else {
          v112 = off_1009BD2D0[v111];
        }
        *(_DWORD *)stat buf = 136446722;
        *(void *)&uint8_t buf[4] = v112;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v25 & 1;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&unsigned char buf[20] = v118 & 1;
        _os_log_debug_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "fAdvertisementState:%{public}s dataChanged:%d validSession:%d", buf, 0x18u);
      }
      int v62 = *(_DWORD *)(v3 + 120);
      if (((v62 == 0) & v118) == 1)
      {
        if (v114)
        {
          uint64_t v63 = 0;
          while (1)
          {
            uint64_t v160 = 0;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v154 = 0u;
            long long v155 = 0u;
            long long v152 = 0u;
            long long v153 = 0u;
            long long v150 = 0u;
            long long v151 = 0u;
            long long v148 = 0u;
            long long v149 = 0u;
            memset(buf, 0, sizeof(buf));
            sub_10004C67C((uint64_t)buf);
            uint64_t v64 = sub_10003AB28((uint64_t)&buf[16]);
            uint64_t v65 = sub_10003AB28(v64);
            uint64_t v66 = sub_10003AB28(v65);
            sub_10003AB28(v66);
            uint64_t v67 = std::ostream::operator<<();
            sub_10003AB28(v67);
            if (!v63)
            {
              uint64_t v75 = HIBYTE(v162);
              if (v162 < 0) {
                uint64_t v75 = *((void *)&v161 + 1);
              }
              if (v75)
              {
                uint64_t v76 = sub_10003AB28((uint64_t)&buf[16]);
                unsigned __int8 v77 = (uint8_t *)sub_10003AB28(v76);
              }
              else
              {
                unsigned __int8 v77 = &buf[16];
              }
              sub_10003AB28((uint64_t)v77);
              if (v139 != v138)
              {
                sub_10003AB28((uint64_t)&buf[16]);
                char v84 = v138;
                if (v139 != v138)
                {
                  uint64_t v85 = 0;
                  unsigned int v86 = 1;
                  do
                  {
                    sub_1000417A8((uint64_t)v84 + 20 * v85, &__p);
                    uint64_t v87 = sub_10003AB28((uint64_t)&buf[16]);
                    sub_10003AB28(v87);
                    if (v125 < 0) {
                      operator delete(__p);
                    }
                    uint64_t v85 = v86;
                    char v84 = v138;
                    BOOL v74 = 0xCCCCCCCCCCCCCCCDLL * ((v139 - (unsigned char *)v138) >> 2) > v86++;
                  }
                  while (v74);
                }
              }
              sub_10003AB28((uint64_t)&buf[16]);
              if (v136 != v135)
              {
                sub_10003AB28((uint64_t)&buf[16]);
                uint64_t v88 = v135;
                if (v136 != v135)
                {
                  uint64_t v89 = 0;
                  unsigned int v90 = 1;
                  do
                  {
                    sub_1000417A8((uint64_t)v88 + 20 * v89, &__p);
                    uint64_t v91 = sub_10003AB28((uint64_t)&buf[16]);
                    sub_10003AB28(v91);
                    if (v125 < 0) {
                      operator delete(__p);
                    }
                    uint64_t v89 = v90;
                    uint64_t v88 = v135;
                    BOOL v74 = 0xCCCCCCCCCCCCCCCDLL * ((v136 - (unsigned char *)v135) >> 2) > v90++;
                  }
                  while (v74);
                }
              }
              sub_10003AB28((uint64_t)&buf[16]);
              if (v133 != v132)
              {
                sub_10003AB28((uint64_t)&buf[16]);
                int v92 = v132;
                if (v133 != v132)
                {
                  uint64_t v93 = 0;
                  unsigned int v94 = 1;
                  do
                  {
                    sub_1000417A8((uint64_t)v92 + 20 * v93, &__p);
                    uint64_t v95 = sub_10003AB28((uint64_t)&buf[16]);
                    sub_10003AB28(v95);
                    if (v125 < 0) {
                      operator delete(__p);
                    }
                    uint64_t v93 = v94;
                    int v92 = v132;
                    BOOL v74 = 0xCCCCCCCCCCCCCCCDLL * ((v133 - (unsigned char *)v132) >> 2) > v94++;
                  }
                  while (v74);
                }
              }
              goto LABEL_133;
            }
            if (v63 == 2) {
              break;
            }
            if (v63 == 3) {
              goto LABEL_133;
            }
            if (v63 == 4)
            {
              char v68 = v129;
              uint64_t v69 = v130 - (unsigned char *)v129;
              if (v130 != v129)
              {
                sub_10003AB28((uint64_t)&buf[16]);
                uint64_t v70 = 0;
                unint64_t v71 = 0xCCCCCCCCCCCCCCCDLL * (v69 >> 2);
                unsigned int v72 = 1;
                do
                {
                  sub_1000417A8((uint64_t)v68 + 20 * v70, &__p);
                  uint64_t v73 = sub_10003AB28((uint64_t)&buf[16]);
                  sub_10003AB28(v73);
                  if (v125 < 0) {
                    operator delete(__p);
                  }
                  uint64_t v70 = v72;
                  BOOL v74 = v71 > v72++;
                }
                while (v74);
              }
LABEL_133:
              sub_10003AB28((uint64_t)&buf[16]);
            }
            sub_10003AB28((uint64_t)&buf[16]);
            uint64_t v96 = std::ostream::operator<<();
            sub_10003AB28(v96);
            if (__src[3336 * v63 + 3321])
            {
              sub_10003AB28((uint64_t)&buf[16]);
              std::ostream::operator<<();
            }
            if (__src[3336 * v63 + 3322])
            {
              sub_10003AB28((uint64_t)&buf[16]);
              std::ostream::operator<<();
            }
            if (__src[3336 * v63 + 3323])
            {
              sub_10003AB28((uint64_t)&buf[16]);
              std::ostream::operator<<();
            }
            if (__src[3336 * v63 + 3324])
            {
              sub_10003AB28((uint64_t)&buf[16]);
              std::ostream::operator<<();
            }
            sub_10003FB34();
            if (sub_1000262C4())
            {
              if (_os_feature_enabled_impl())
              {
                if (__src[3336 * v63 + 3325])
                {
                  sub_10003AB28((uint64_t)&buf[16]);
                  std::ostream::operator<<();
                  sub_10003AB28((uint64_t)&buf[16]);
                  std::ostream::operator<<();
                  sub_10003AB28((uint64_t)&buf[16]);
                  std::ostream::operator<<();
                  int v97 = &__src[3336 * v63 + 3327];
                  if (*v97)
                  {
                    uint64_t v98 = (uint64_t *)sub_10003AB28((uint64_t)&buf[16]);
                    uint64_t v99 = *v98;
                    *(_DWORD *)((char *)v98 + *(void *)(*v98 - 24) + 8) = *(_DWORD *)((unsigned char *)v98
                                                                                      + *(void *)(*v98 - 24)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
                    *(_DWORD *)((char *)v98 + *(void *)(v99 - 24) + 8) |= 0x4000u;
                    LOBYTE(__p) = 48;
                    sub_10004C5B4(v98, (unsigned __int8 *)&__p);
                    if (*v97)
                    {
                      unint64_t v100 = 0;
                      do
                      {
                        *(void *)&buf[*(void *)(*(void *)&buf[16] - 24) + 40] = 2;
                        LOBYTE(__p) = *(unsigned char *)(*(void *)&__src[3336 * v63 + 3328] + v100);
                        uint64_t v101 = sub_10003AB28((uint64_t)&buf[16]);
                        sub_10003AB28(v101);
                        ++v100;
                      }
                      while (v100 < *v97);
                    }
                  }
                }
              }
            }
            uint64_t v102 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
            {
              std::stringbuf::str();
              int v103 = v125 >= 0 ? &__p : (void **)__p;
              *(_DWORD *)long long v145 = 136446210;
              *(void *)&v145[4] = v103;
              _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "%{public}s", v145, 0xCu);
              if (v125 < 0) {
                operator delete(__p);
              }
            }
            *(void *)stat buf = v120;
            *(void *)&buf[*(void *)(v120 - 24)] = v117;
            *(void *)&uint8_t buf[16] = v116;
            if (SHIBYTE(v149) < 0) {
              operator delete(*((void **)&v148 + 1));
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            std::ios::~ios();
            if (++v63 == v114) {
              goto LABEL_158;
            }
          }
          if (v128)
          {
            sub_10003AB28((uint64_t)&buf[16]);
            int v78 = v126;
            if (v126 != (uint64_t *)&v127)
            {
              do
              {
                sub_1000417A8((uint64_t)(v78 + 4), &__p);
                uint64_t v79 = sub_10003AB28((uint64_t)&buf[16]);
                uint64_t v80 = sub_10003AB28(v79);
                sub_10004C2C4((uint64_t)(v78 + 7), v145);
                uint64_t v81 = sub_10003AB28(v80);
                sub_10003AB28(v81);
                if (v146 < 0) {
                  operator delete(*(void **)v145);
                }
                if (v125 < 0) {
                  operator delete(__p);
                }
                uint64_t v82 = (uint64_t *)v78[1];
                if (v82)
                {
                  do
                  {
                    int v83 = v82;
                    uint64_t v82 = (uint64_t *)*v82;
                  }
                  while (v82);
                }
                else
                {
                  do
                  {
                    int v83 = (uint64_t *)v78[2];
                    _ZF = *v83 == (void)v78;
                    int v78 = v83;
                  }
                  while (!_ZF);
                }
                int v78 = v83;
              }
              while (v83 != (uint64_t *)&v127);
            }
          }
          goto LABEL_133;
        }
LABEL_158:
        buf[0] = 0;
        sub_10001B8E0(buf);
        int v104 = sub_100226F18(__src, v114, 0, (uint64_t (*)(void, void))sub_100663908, 0);
        if (v104 == 118) {
          sub_1002267A4(1);
        }
        sub_10001B910(buf);
        if (v104)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
            sub_10078C2B0();
          }
          if (v104 == 4073)
          {
            *__int16 v113 = 1;
          }
          else if (v104 == 118)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
              sub_10078C27C();
            }
            uint64_t v108 = *(void *)(v122 + 48);
            v123[0] = _NSConcreteStackBlock;
            v123[1] = 3221225472;
            v123[2] = sub_100663984;
            v123[3] = &unk_100997528;
            v123[4] = v122;
            sub_1004AFF58(v108, 200, v123);
          }
        }
        else
        {
          sub_100657F28(v122, 1u);
          if (v114) {
            memcpy((void *)(v122 + 144), __src, 3336 * v114);
          }
        }
        goto LABEL_188;
      }
      if (v62 != 2 || ((v25 | v115) & 1) == 0)
      {
        int v107 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_INFO, "updateAdvertisement not doing anything", buf, 2u);
        }
        goto LABEL_189;
      }
      int v105 = qword_100A19F20;
      BOOL v106 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO);
      if (v25 & v118)
      {
        if (v106)
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_INFO, "Restarting advertisement as data has changed!", buf, 2u);
        }
      }
      else
      {
        if (v106)
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_INFO, "Stopping advertisement as there are no more advertising sessions", buf, 2u);
        }
        if (v114) {
          bzero((void *)(v3 + 144), 3336 * v114);
        }
      }
      buf[0] = 0;
      sub_10001B8E0(buf);
      int v109 = sub_1002267A4(0);
      sub_10001B910(buf);
      if (v109 == 4073)
      {
        *__int16 v113 = 1;
      }
      else if (!v109)
      {
        sub_100657F28(v3, 3u);
LABEL_188:
        sub_10001B8AC(buf);
LABEL_189:
        sub_10004BA8C((uint64_t)&v126, v127);
        if (v129) {
          operator delete(v129);
        }
        if (v132)
        {
          id v133 = v132;
          operator delete(v132);
        }
        if (v135)
        {
          id v136 = v135;
          operator delete(v135);
        }
        if (v138)
        {
          id v139 = v138;
          operator delete(v138);
        }
        if (SHIBYTE(v162) < 0) {
          operator delete((void *)v161);
        }
LABEL_199:
        sub_100666990((uint64_t)&v141, v142[0]);
        return sub_10003AFB4((uint64_t)v144);
      }
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
        sub_10078C318();
      }
      goto LABEL_188;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG)) {
      sub_10078C1B0();
    }
    *(unsigned char *)(v3 + 16945) = 1;
    uint64_t v6 = *(void *)(v3 + 48);
    v143[0] = _NSConcreteStackBlock;
    v143[1] = 3221225472;
    v143[2] = sub_1006638FC;
    v143[3] = &unk_100997528;
    v143[4] = v3;
    sub_1004AFF58(v6, 200, v143);
  }
  else
  {
    id v5 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Stack is not started, updateAdvertisement returning", buf, 2u);
    }
  }
  return sub_10003AFB4((uint64_t)v144);
}

void sub_10065A954(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,void *a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  if (__p) {
    operator delete(__p);
  }
  if (a46)
  {
    a47 = (uint64_t)a46;
    operator delete(a46);
  }
  if (a49)
  {
    a50 = (uint64_t)a49;
    operator delete(a49);
  }
  if (a52)
  {
    a53 = (uint64_t)a52;
    operator delete(a52);
  }
  if (SLOBYTE(STACK[0x317]) < 0) {
    operator delete((void *)STACK[0x300]);
  }
  sub_100666990((uint64_t)&a55, (void *)a56);
  sub_10003AFB4((uint64_t)&a63);
  _Unwind_Resume(a1);
}

id sub_10065AA8C(uint64_t a1, uint64_t a2)
{
  long long v4 = operator new(0x28uLL);
  v4[1] = *(_OWORD *)a2;
  id result = *(id *)(a2 + 16);
  *((void *)v4 + 4) = result;
  uint64_t v6 = *(void **)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  *(void *)long long v4 = a1;
  *((void *)v4 + 1) = v6;
  void *v6 = v4;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v7 + 1;
  return result;
}

void sub_10065AAEC(uint64_t **a1)
{
  char v1 = *a1;
  uint64_t v2 = **a1;
  *(void *)(v2 + 8) = (*a1)[1];
  *(void *)v1[1] = v2;
  a1[2] = (uint64_t *)((char *)a1[2] - 1);

  operator delete(v1);
}

void sub_10065AB44(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = objc_opt_new();
  [v3 setDateFormat:@"yyyy-MM-dd HH:mm:ss.SSS"];
  long long v4 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)a2;
    sub_10004BDF8();
    if (v12 >= 0) {
      uint64_t v6 = &v11;
    }
    else {
      uint64_t v6 = v11;
    }
    id v7 = [v3 stringFromDate:*(void *)(a2 + 16)];
    sub_10065AD24(*(_DWORD *)a2, __p);
    if (v10 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    *(_DWORD *)stat buf = 67109891;
    int v14 = v5;
    __int16 v15 = 2080;
    BOOL v16 = v6;
    __int16 v17 = 2112;
    id v18 = v7;
    __int16 v19 = 2081;
    uint64_t v20 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump: ADV Instance:%d address:%s time:%@ (%{private}s)", buf, 0x26u);
    if (v10 < 0) {
      operator delete(__p[0]);
    }

    if (v12 < 0) {
      operator delete(v11);
    }
  }
}

void sub_10065ACD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_10065AD24@<X0>(int a1@<W1>, void *a2@<X8>)
{
  return sub_10004191C(a2, off_1009BD2A0[a1]);
}

unsigned char *sub_10065AD38(uint64_t a1)
{
  uint64_t v2 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "LeBroadcaster::stackWillStop enter", buf, 2u);
  }
  char v14 = 0;
  sub_10001B8E0(&v14);
  if (sub_10022A2F0())
  {
    sub_10065AF64(a1, 0);
    sub_10065AF64(a1, 1);
    uint64_t v3 = sub_10003FFD4();
    sub_1002C4188(v3 + 368, a1 + 32);
    sub_100228998();
    sub_10001B910(&v14);
    v13[0] = 0;
    v13[1] = 0;
    sub_10003AED0((uint64_t)v13, a1 + 56);
    sub_100657F28(a1, 0);
    bzero((void *)(a1 + 144), 0x4128uLL);
    *(void *)stat buf = 0;
    v12[0] = 0;
    v12[1] = 0;
    sub_100666F3C((uint64_t *)buf, a1 + 16880);
    *(unsigned char *)(a1 + 41) = 0;
    sub_10003AFE8((uint64_t)v13);
    long long v4 = *(void ***)buf;
    if (*(void ***)buf != v12)
    {
      do
      {
        (*(void (**)(void *, void))*v4[4])(v4[4], 0);
        int v5 = v4[1];
        if (v5)
        {
          do
          {
            uint64_t v6 = (void **)v5;
            int v5 = (void *)*v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (void **)v4[2];
            BOOL v7 = *v6 == v4;
            long long v4 = v6;
          }
          while (!v7);
        }
        long long v4 = v6;
      }
      while (v6 != v12);
    }
    sub_100658444(a1);
    sub_10065AFE8(a1);
    int v8 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "LeBroadcaster::stackWillStop exit", (uint8_t *)v10, 2u);
    }
    sub_1000486F0((uint64_t)buf, v12[0]);
    sub_10003AFB4((uint64_t)v13);
  }
  return sub_10001B8AC(&v14);
}

void sub_10065AF20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_10003AFB4((uint64_t)va);
  sub_10001B8AC((unsigned char *)(v6 - 33));
  _Unwind_Resume(a1);
}

void sub_10065AF64(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100663898;
  v5[3] = &unk_100997570;
  void v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_10065AFE8(uint64_t a1)
{
  uint64_t v2 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 3480))(v2))
  {
    uint64_t v3 = *(void *)(a1 + 17016);
    if (v3)
    {
      uint64_t v4 = qword_100A19F40;
      if (!os_log_type_enabled((os_log_t)qword_100A19F40, OS_LOG_TYPE_DEFAULT)
        || (uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3),
            int v6 = 136446210,
            uint64_t v7 = v5,
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v6, 0xCu), (uint64_t v3 = *(void *)(a1 + 17016)) != 0))
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      *(void *)(a1 + 17016) = 0;
    }
  }
}

unsigned char *sub_10065B12C(uint64_t a1)
{
  return sub_10065AD38(a1 - 8);
}

uint64_t sub_10065B134(uint64_t a1, uint64_t a2)
{
  v4[1] = 0;
  uint64_t v5 = a2;
  v4[0] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 56);
  sub_100051620((uint64_t **)(a1 + 16880), (unint64_t *)&v5, &v5);
  return sub_10003AFB4((uint64_t)v4);
}

void sub_10065B18C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10065B1A0(uint64_t a1, unint64_t a2)
{
  v4[1] = 0;
  unint64_t v5 = a2;
  v4[0] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 56);
  sub_1000517A4(a1 + 16880, &v5);
  return sub_10003AFB4((uint64_t)v4);
}

void sub_10065B1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10065B208(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  int v3 = *(unsigned __int8 *)(a1 + 16972);
  if (v3 != 2)
  {
    if (v3 == 1)
    {
      uint64_t v4 = *(long long **)(a1 + 16976);
      unint64_t v42 = *(long long **)(a1 + 16984);
      if (v4 == v42)
      {
        char v22 = 1;
        return v22 & 1;
      }
      char v5 = 0;
      while (1)
      {
        __p[1] = 0;
        uint64_t v48 = 0;
        __p[0] = 0;
        if (*((char *)v4 + 23) < 0)
        {
          sub_10003B098(__p, *(void **)v4, *((void *)v4 + 1));
        }
        else
        {
          long long v6 = *v4;
          uint64_t v48 = *((void *)v4 + 2);
          *(_OWORD *)__n128 __p = v6;
        }
        sub_10003AE4C(v2, (uint64_t)&v44);
        unsigned __int8 v7 = v46;
        int v8 = v44;
        char v9 = (v46 & 0x80u) == 0 ? &v44 : (void **)v44;
        char v10 = HIBYTE(v48);
        BOOL v11 = v48 >= 0 ? __p : (void **)__p[0];
        char v12 = v48 >= 0 ? (void *)HIBYTE(v48) : __p[1];
        if (v12) {
          break;
        }
        uint64_t v16 = 0;
        if ((v46 & 0x80) != 0) {
          goto LABEL_36;
        }
LABEL_37:
        BOOL v21 = v16 != -1;
        if (v10 < 0) {
          operator delete(__p[0]);
        }
        v5 |= v21;
        uint64_t v4 = (long long *)((char *)v4 + 24);
        if (v4 == v42)
        {
          char v22 = v5 ^ 1;
          return v22 & 1;
        }
      }
      if ((v46 & 0x80u) == 0) {
        uint64_t v13 = v46;
      }
      else {
        uint64_t v13 = v45;
      }
      char v14 = (char *)v9 + v13;
      if (v13 >= (uint64_t)v12)
      {
        uint64_t v40 = v44;
        int v17 = *(unsigned __int8 *)v11;
        id v18 = v9;
        do
        {
          uint64_t v19 = v13 - (void)v12;
          if (v19 == -1) {
            break;
          }
          uint64_t v20 = (char *)memchr(v18, v17, v19 + 1);
          if (!v20) {
            break;
          }
          __int16 v15 = v20;
          if (!memcmp(v20, v11, (size_t)v12)) {
            goto LABEL_31;
          }
          id v18 = (void **)(v15 + 1);
          uint64_t v13 = v14 - (v15 + 1);
        }
        while (v13 >= (uint64_t)v12);
        __int16 v15 = v14;
LABEL_31:
        int v8 = v40;
        uint64_t v2 = a2;
      }
      else
      {
        __int16 v15 = (char *)v9 + v13;
      }
      if (v15 == v14) {
        uint64_t v16 = -1;
      }
      else {
        uint64_t v16 = v15 - (char *)v9;
      }
      if ((v7 & 0x80) == 0) {
        goto LABEL_37;
      }
LABEL_36:
      operator delete(v8);
      char v10 = HIBYTE(v48);
      goto LABEL_37;
    }
LABEL_78:
    char v22 = 0;
    return v22 & 1;
  }
  uint64_t v23 = *(long long **)(a1 + 16976);
  unint64_t v43 = *(long long **)(a1 + 16984);
  if (v23 == v43) {
    goto LABEL_78;
  }
  do
  {
    __p[1] = 0;
    uint64_t v48 = 0;
    __p[0] = 0;
    if (*((char *)v23 + 23) < 0)
    {
      sub_10003B098(__p, *(void **)v23, *((void *)v23 + 1));
    }
    else
    {
      long long v24 = *v23;
      uint64_t v48 = *((void *)v23 + 2);
      *(_OWORD *)__n128 __p = v24;
    }
    sub_10003AE4C(v2, (uint64_t)&v44);
    unsigned __int8 v25 = v46;
    __int16 v26 = v44;
    if ((v46 & 0x80u) == 0) {
      char v27 = (char *)&v44;
    }
    else {
      char v27 = (char *)v44;
    }
    char v28 = HIBYTE(v48);
    if (v48 >= 0) {
      BOOL v29 = __p;
    }
    else {
      BOOL v29 = (void **)__p[0];
    }
    if (v48 >= 0) {
      int64_t v30 = HIBYTE(v48);
    }
    else {
      int64_t v30 = (int64_t)__p[1];
    }
    if (v30)
    {
      if ((v46 & 0x80u) == 0) {
        uint64_t v31 = v46;
      }
      else {
        uint64_t v31 = v45;
      }
      int v32 = &v27[v31];
      if (v31 >= v30)
      {
        int v35 = *(unsigned __int8 *)v29;
        __int16 v36 = v27;
        do
        {
          uint64_t v37 = v31 - v30;
          if (v37 == -1) {
            break;
          }
          int v38 = (char *)memchr(v36, v35, v37 + 1);
          if (!v38) {
            break;
          }
          int v33 = v38;
          if (!memcmp(v38, v29, v30)) {
            goto LABEL_67;
          }
          __int16 v36 = v33 + 1;
          uint64_t v31 = v32 - (v33 + 1);
        }
        while (v31 >= v30);
        int v33 = v32;
LABEL_67:
        uint64_t v2 = a2;
      }
      else
      {
        int v33 = &v27[v31];
      }
      if (v33 == v32) {
        uint64_t v34 = -1;
      }
      else {
        uint64_t v34 = v33 - v27;
      }
    }
    else
    {
      uint64_t v34 = 0;
    }
    char v22 = v34 != -1;
    if ((v25 & 0x80) != 0)
    {
      operator delete(v26);
      if (v48 < 0) {
LABEL_77:
      }
        operator delete(__p[0]);
    }
    else if (v28 < 0)
    {
      goto LABEL_77;
    }
    if (v34 != -1) {
      break;
    }
    uint64_t v23 = (long long *)((char *)v23 + 24);
  }
  while (v23 != v43);
  return v22 & 1;
}

void sub_10065B524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10065B544(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  v122[1] = 0;
  unint64_t v123 = a2;
  v122[0] = 0;
  sub_10003AED0((uint64_t)v122, a1 + 56);
  if (sub_10065B208(a1, a2))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      sub_10078C46C();
    }
LABEL_168:
    uint64_t v72 = 0;
    goto LABEL_169;
  }
  unsigned __int8 v7 = *(void **)(a1 + 16832);
  if (v7)
  {
    uint64_t v8 = a1 + 16832;
    do
    {
      unint64_t v9 = v7[4];
      BOOL v10 = v9 >= a2;
      if (v9 >= a2) {
        BOOL v11 = v7;
      }
      else {
        BOOL v11 = v7 + 1;
      }
      if (v10) {
        uint64_t v8 = (uint64_t)v7;
      }
      unsigned __int8 v7 = (void *)*v11;
    }
    while (*v11);
    if (v8 != a1 + 16832 && *(void *)(v8 + 32) <= a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        sub_10078C6E4();
      }
      uint64_t v72 = 122;
      goto LABEL_169;
    }
  }
  uint64_t v12 = *(void *)(a3 + 8);
  if (*(_DWORD *)(v12 + 264) != 2)
  {
LABEL_25:
    sub_10030BA54((uint64_t *)__p, (const void ***)(v12 + 416));
    uint64_t v17 = v131[0];
    sub_10004BA28((uint64_t)__p, (char *)__p[1]);
    if (!v17)
    {
      uint64_t v18 = *(void *)(a3 + 8);
      sub_10004191C(__p, "com.apple.bluetoothd");
      sub_1003B9544((uint64_t)&v120, (const void **)__p, 1);
      if ((void **)(v18 + 416) != &v120) {
        sub_10044FF4C((uint64_t **)(v18 + 416), v120, &v121);
      }
      sub_10004BA28((uint64_t)&v120, v121);
      if (SHIBYTE(v131[0]) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v116 = (uint64_t **)(a1 + 16824);
    uint64_t v144 = 0;
    long long v142 = 0u;
    long long v143 = 0u;
    long long v140 = 0u;
    long long v141 = 0u;
    long long v138 = 0u;
    long long v139 = 0u;
    long long v136 = 0u;
    long long v137 = 0u;
    long long v134 = 0u;
    long long v135 = 0u;
    long long v132 = 0u;
    long long v133 = 0u;
    memset(v131, 0, sizeof(v131));
    *(_OWORD *)__n128 __p = 0u;
    sub_10004C67C((uint64_t)__p);
    uint64_t v19 = sub_10003AB28((uint64_t)v131);
    sub_10003AE4C(v123, (uint64_t)__dst);
    uint64_t v20 = sub_10003AB28(v19);
    sub_10003AB28(v20);
    if ((char)__dst[23] < 0) {
      operator delete(*(void **)__dst);
    }
    BOOL v21 = *(void **)(a3 + 8);
    if (v21[32])
    {
      memset(__dst, 0, sizeof(__dst));
      sub_1006AD3F0();
      id v22 = objc_claimAutoreleasedReturnValue();
      sub_10004191C(__dst, [v22 UTF8String]);

      sub_10003AB28((uint64_t)v131);
      uint64_t v23 = std::ostream::operator<<();
      uint64_t v24 = sub_10003AB28(v23);
      if ((__dst[23] & 0x80u) == 0) {
        unsigned __int8 v25 = __dst;
      }
      else {
        unsigned __int8 v25 = *(uint8_t **)__dst;
      }
      strlen((const char *)v25);
      sub_10003AB28(v24);
      if ((char)__dst[23] < 0) {
        operator delete(*(void **)__dst);
      }
      BOOL v21 = *(void **)(a3 + 8);
    }
    if (v21[9] != v21[8])
    {
      sub_10003AB28((uint64_t)v131);
      uint64_t v26 = *(void *)(*(void *)(a3 + 8) + 64);
      if (*(void *)(*(void *)(a3 + 8) + 72) != v26)
      {
        uint64_t v27 = 0;
        unsigned int v28 = 1;
        do
        {
          sub_1000417A8(v26 + 20 * v27, __dst);
          uint64_t v29 = sub_10003AB28((uint64_t)v131);
          sub_10003AB28(v29);
          if ((char)__dst[23] < 0) {
            operator delete(*(void **)__dst);
          }
          uint64_t v27 = v28;
          uint64_t v26 = *(void *)(*(void *)(a3 + 8) + 64);
          BOOL v30 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a3 + 8) + 72) - v26) >> 2) > v28++;
        }
        while (v30);
      }
      sub_10003AB28((uint64_t)v131);
      BOOL v21 = *(void **)(a3 + 8);
    }
    if (v21[12] != v21[11])
    {
      sub_10003AB28((uint64_t)v131);
      uint64_t v31 = *(void *)(*(void *)(a3 + 8) + 88);
      if (*(void *)(*(void *)(a3 + 8) + 96) != v31)
      {
        uint64_t v32 = 0;
        unsigned int v33 = 1;
        do
        {
          sub_1000417A8(v31 + 20 * v32, __dst);
          uint64_t v34 = sub_10003AB28((uint64_t)v131);
          sub_10003AB28(v34);
          if ((char)__dst[23] < 0) {
            operator delete(*(void **)__dst);
          }
          uint64_t v32 = v33;
          uint64_t v31 = *(void *)(*(void *)(a3 + 8) + 88);
          BOOL v30 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(*(void *)(a3 + 8) + 96) - v31) >> 2) > v33++;
        }
        while (v30);
      }
      sub_10003AB28((uint64_t)v131);
      BOOL v21 = *(void **)(a3 + 8);
    }
    uint64_t v117 = a1;
    if (v21[16])
    {
      if (IsAppleInternalBuild())
      {
        sub_10003AB28((uint64_t)v131);
        uint64_t v35 = *(void *)(a3 + 8);
        __int16 v36 = *(void **)(v35 + 112);
        uint64_t v37 = (void *)(v35 + 120);
        if (v36 != (void *)(v35 + 120))
        {
          do
          {
            uint64_t v38 = sub_100045F00((uint64_t)(v36 + 7));
            uint64_t v39 = sub_10004A6E4((uint64_t)(v36 + 7));
            uint64_t v40 = sub_10003AB28((uint64_t)v131);
            sub_1000417A8((uint64_t)(v36 + 4), __dst);
            uint64_t v41 = sub_10003AB28(v40);
            unint64_t v42 = (uint64_t *)sub_10003AB28(v41);
            uint64_t v43 = *v42;
            *(_DWORD *)((char *)v42 + *(void *)(*v42 - 24) + 8) = *(_DWORD *)((unsigned char *)v42 + *(void *)(*v42 - 24)
                                                                                             + 8) & 0xFFFFFFB5 | 8;
            *(_DWORD *)((char *)v42 + *(void *)(v43 - 24) + 8) |= 0x4000u;
            buf[0] = 48;
            sub_10004C5B4(v42, buf);
            if ((char)__dst[23] < 0)
            {
              operator delete(*(void **)__dst);
              if (!v38) {
                goto LABEL_59;
              }
            }
            else if (!v38)
            {
              goto LABEL_59;
            }
            do
            {
              *(void *)((char *)&v131[3] + *(void *)(v131[0] - 24)) = 2;
              ++v39;
              uint64_t v44 = std::ostream::operator<<();
              sub_10003AB28(v44);
              --v38;
            }
            while (v38);
LABEL_59:
            sub_10003AB28((uint64_t)v131);
            uint64_t v45 = (void *)v36[1];
            if (v45)
            {
              do
              {
                unsigned __int8 v46 = v45;
                uint64_t v45 = (void *)*v45;
              }
              while (v45);
            }
            else
            {
              do
              {
                unsigned __int8 v46 = (void *)v36[2];
                BOOL v16 = *v46 == (void)v36;
                __int16 v36 = v46;
              }
              while (!v16);
            }
            __int16 v36 = v46;
          }
          while (v46 != v37);
        }
      }
    }
    if (sub_100045F00(*(void *)(a3 + 8) + 48))
    {
      uint64_t v47 = sub_100045F00(*(void *)(a3 + 8) + 48);
      uint64_t v48 = sub_10004A6E4(*(void *)(a3 + 8) + 48);
      int v49 = (uint64_t *)sub_10003AB28((uint64_t)v131);
      uint64_t v50 = *v49;
      *(_DWORD *)((char *)v49 + *(void *)(*v49 - 24) + 8) = *(_DWORD *)((unsigned char *)v49 + *(void *)(*v49 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v49 + *(void *)(v50 - 24) + 8) |= 0x4000u;
      __dst[0] = 48;
      sub_10004C5B4(v49, __dst);
      for (; v47; --v47)
      {
        *(void *)((char *)&v131[3] + *(void *)(v131[0] - 24)) = 2;
        ++v48;
        uint64_t v51 = std::ostream::operator<<();
        sub_10003AB28(v51);
      }
      sub_10003AB28((uint64_t)v131);
    }
    if (sub_100045F00(*(void *)(a3 + 8) + 136))
    {
      uint64_t v52 = sub_100045F00(*(void *)(a3 + 8) + 136);
      uint64_t v53 = sub_10004A6E4(*(void *)(a3 + 8) + 136);
      uint64_t v54 = (uint64_t *)sub_10003AB28((uint64_t)v131);
      uint64_t v55 = *v54;
      *(_DWORD *)((char *)v54 + *(void *)(*v54 - 24) + 8) = *(_DWORD *)((unsigned char *)v54 + *(void *)(*v54 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v54 + *(void *)(v55 - 24) + 8) |= 0x4000u;
      __dst[0] = 48;
      sub_10004C5B4(v54, __dst);
      for (; v52; --v52)
      {
        *(void *)((char *)&v131[3] + *(void *)(v131[0] - 24)) = 2;
        ++v53;
        uint64_t v56 = std::ostream::operator<<();
        sub_10003AB28(v56);
      }
      sub_10003AB28((uint64_t)v131);
    }
    if (sub_100045F00(*(void *)(a3 + 8) + 152))
    {
      uint64_t v57 = sub_100045F00(*(void *)(a3 + 8) + 152);
      uint64_t v58 = sub_10004A6E4(*(void *)(a3 + 8) + 152);
      int v59 = (uint64_t *)sub_10003AB28((uint64_t)v131);
      uint64_t v60 = *v59;
      *(_DWORD *)((char *)v59 + *(void *)(*v59 - 24) + 8) = *(_DWORD *)((unsigned char *)v59 + *(void *)(*v59 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v59 + *(void *)(v60 - 24) + 8) |= 0x4000u;
      __dst[0] = 48;
      sub_10004C5B4(v59, __dst);
      for (; v57; --v57)
      {
        *(void *)((char *)&v131[3] + *(void *)(v131[0] - 24)) = 2;
        ++v58;
        uint64_t v61 = std::ostream::operator<<();
        sub_10003AB28(v61);
      }
      sub_10003AB28((uint64_t)v131);
    }
    if (sub_100045F00(*(void *)(a3 + 8) + 224))
    {
      uint64_t v62 = sub_100045F00(*(void *)(a3 + 8) + 224);
      uint64_t v63 = sub_10004A6E4(*(void *)(a3 + 8) + 224);
      uint64_t v64 = (uint64_t *)sub_10003AB28((uint64_t)v131);
      uint64_t v65 = *v64;
      *(_DWORD *)((char *)v64 + *(void *)(*v64 - 24) + 8) = *(_DWORD *)((unsigned char *)v64 + *(void *)(*v64 - 24) + 8) & 0xFFFFFFB5 | 8;
      *(_DWORD *)((char *)v64 + *(void *)(v65 - 24) + 8) |= 0x4000u;
      __dst[0] = 48;
      sub_10004C5B4(v64, __dst);
      for (; v62; --v62)
      {
        *(void *)((char *)&v131[3] + *(void *)(v131[0] - 24)) = 2;
        ++v63;
        uint64_t v66 = std::ostream::operator<<();
        sub_10003AB28(v66);
      }
      sub_10003AB28((uint64_t)v131);
    }
    sub_10003AB28((uint64_t)v131);
    uint64_t v67 = std::ostream::operator<<();
    sub_10003AB28(v67);
    uint64_t v68 = *(void *)(a3 + 8);
    if (*(char *)(v68 + 39) < 0)
    {
      sub_10003B098(__dst, *(void **)(v68 + 16), *(void *)(v68 + 24));
    }
    else
    {
      *(_OWORD *)__n128 __dst = *(_OWORD *)(v68 + 16);
      *(void *)&char __dst[16] = *(void *)(v68 + 32);
    }
    if ((char)__dst[23] < 0)
    {
      uint64_t v71 = *(void *)&__dst[8];
      operator delete(*(void **)__dst);
      if (v71)
      {
LABEL_89:
        uint64_t v69 = sub_10003AB28((uint64_t)v131);
        uint64_t v70 = *(void *)(a3 + 8);
        if (*(char *)(v70 + 39) < 0)
        {
          sub_10003B098(__dst, *(void **)(v70 + 16), *(void *)(v70 + 24));
        }
        else
        {
          *(_OWORD *)__n128 __dst = *(_OWORD *)(v70 + 16);
          *(void *)&char __dst[16] = *(void *)(v70 + 32);
        }
        uint64_t v73 = sub_10003AB28(v69);
        sub_10003AB28(v73);
        if ((char)__dst[23] < 0) {
          operator delete(*(void **)__dst);
        }
        goto LABEL_99;
      }
    }
    else if (__dst[23])
    {
      goto LABEL_89;
    }
    sub_10003AB28((uint64_t)v131);
LABEL_99:
    uint64_t v74 = *(void *)(a3 + 8);
    if (*(unsigned char *)(v74 + 308))
    {
      sub_10003AB28((uint64_t)v131);
      uint64_t v74 = *(void *)(a3 + 8);
    }
    if (*(unsigned char *)(v74 + 360))
    {
      sub_10003AB28((uint64_t)v131);
      uint64_t v74 = *(void *)(a3 + 8);
    }
    if (*(_DWORD *)(v74 + 440))
    {
      uint64_t v75 = sub_10003AB28((uint64_t)v131);
      uint64_t v76 = sub_10003CEDC(*(_DWORD *)(*(void *)(a3 + 8) + 440));
      strlen(v76);
      sub_10003AB28(v75);
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BD200);
      }
      sub_1004FF190((uint64_t)off_1009F8150, *(_DWORD *)(*(void *)(a3 + 8) + 440));
    }
    unsigned __int8 v77 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      int v78 = (__dst[23] & 0x80u) == 0 ? __dst : *(uint8_t **)__dst;
      *(_DWORD *)stat buf = 136446210;
      *(void *)&uint8_t buf[4] = v78;
      _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, "%{public}s", buf, 0xCu);
      if ((char)__dst[23] < 0) {
        operator delete(*(void **)__dst);
      }
    }
    if (*(unsigned char *)(a1 + 17084))
    {
      uint64_t v79 = qword_100A19F20;
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
      {
        uint64_t v89 = v123;
        sub_10003AE4C(v123, (uint64_t)buf);
        int v90 = v146;
        uint64_t v91 = *(unsigned char **)buf;
        int v92 = v124;
        sub_100551B04(v89, v124);
        if (v90 >= 0) {
          uint64_t v93 = buf;
        }
        else {
          uint64_t v93 = v91;
        }
        if (v127 < 0) {
          int v92 = *(unsigned char **)v124;
        }
        unsigned int v94 = sub_10003CEDC(*(_DWORD *)(*(void *)(a3 + 8) + 440));
        *(_DWORD *)__n128 __dst = 136446722;
        *(void *)&__dst[4] = v93;
        *(_WORD *)&__dst[12] = 2082;
        *(void *)&__dst[14] = v92;
        *(_WORD *)&__dst[22] = 2082;
        id v129 = v94;
        _os_log_error_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_ERROR, "WILLSLEEP violation! Session %{public}s(%{public}s) %{public}s asking to start advertising", __dst, 0x20u);
        if (v127 < 0) {
          operator delete(*(void **)v124);
        }
        if (v146 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    uint64_t v80 = *(void *)(a3 + 8);
    if (*(unsigned char *)(v80 + 308))
    {
      uint64_t v81 = *(unsigned int *)(v80 + 264);
      if (*(unsigned char *)(v117 + v81 + 16921))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
          sub_10078C67C();
        }
      }
      else
      {
        if ((byte_100A14540 & 1) == 0)
        {
          uint64_t v82 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v82 + 808))(v82))
          {
            uint64_t v83 = sub_100017768();
            uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 816))(v83);
            uint64_t v85 = sub_10003FB34();
            int v86 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v85 + 2936))(v85, v84, 1);
            uint64_t v87 = qword_100A19F20;
            if ((v86 & 0xFFFFFFFD) != 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
                sub_10078C614();
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__n128 __dst = 67109120;
              *(_DWORD *)&__dst[4] = v84;
              _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_INFO, "SPMI Debug Control set to %d", __dst, 8u);
            }
          }
          byte_100A14540 = 1;
          LODWORD(v81) = *(_DWORD *)(*(void *)(a3 + 8) + 264);
        }
        uint64_t v95 = sub_10020A6B8(v81);
        uint64_t v96 = sub_10003FB34();
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v96 + 2912))(v96, v95, 1, 1) & 0xFFFFFFFD) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
            sub_10078C5AC();
          }
        }
        else
        {
          *(unsigned char *)(v117 + *(unsigned int *)(*(void *)(a3 + 8) + 264) + 16921) = 1;
        }
      }
    }
    uint64_t v97 = *(void *)(a3 + 8);
    if (*(unsigned char *)(v97 + 409))
    {
      uint64_t v98 = *(unsigned int *)(v97 + 264);
      if (*(unsigned char *)(v117 + v98 + 16926))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
          sub_10078C544();
        }
      }
      else
      {
        uint64_t v99 = sub_10020A6B8(v98);
        uint64_t v100 = sub_10003FB34();
        if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, void))(*(void *)v100 + 1888))(v100, 2, v99, 0, 1, 0) & 0xFFFFFFFD) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
            sub_10078C4DC();
          }
        }
        else
        {
          *(unsigned char *)(v117 + *(unsigned int *)(*(void *)(a3 + 8) + 264) + 16926) = 1;
        }
      }
    }
    uint64_t v101 = *(void *)(a3 + 8);
    *(unsigned char *)(v101 + 408) = a4;
    *(void *)(v101 + 400) = sub_10010BABC();
    *(void *)__n128 __dst = &v123;
    uint64_t v102 = sub_100666FFC(v116, &v123, (uint64_t)&unk_1007BE9D0, (uint64_t **)__dst);
    sub_100049EE0((uint64_t)(v102 + 5), a3);
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
    }
    uint64_t v103 = sub_1002F29B8((uint64_t)off_1009F8780, v123);
    if (v103)
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
      }
      uint64_t v103 = sub_1002F45B8((uint64_t)off_1009F8780, v123);
      int v104 = v103;
      if (v103 == 8 || v103 == 4) {
        uint64_t v103 = sub_10065CE4C(v117, v123);
      }
      uint64_t v105 = *(void *)(a3 + 8);
      *(unsigned char *)(v105 + 336) |= v104 == 16;
      *(unsigned char *)(v105 + 337) = v104 == 16;
    }
    sub_10065D2A0(v103, a3, 1);
    int v106 = *(unsigned __int8 *)(v117 + 41);
    int v107 = qword_100A19F20;
    BOOL v108 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
    if (v106)
    {
      if (v108)
      {
        *(_WORD *)__n128 __dst = 0;
        _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "Calling updateAdvertisement", __dst, 2u);
      }
      uint64_t v109 = *(void *)(v117 + 48);
      v119[0] = _NSConcreteStackBlock;
      v119[1] = 3221225472;
      v119[2] = sub_10065D374;
      v119[3] = &unk_100997528;
      void v119[4] = v117;
      sub_100013018(v109, v119);
    }
    else if (v108)
    {
      *(_WORD *)__n128 __dst = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "Stack is not ready, waiting for the stack to start", __dst, 2u);
    }
    *(void **)((char *)__p
    v131[0] = v110;
    if (SHIBYTE(v133) < 0) {
      operator delete(*((void **)&v132 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    goto LABEL_168;
  }
  __p[0] = 0;
  __p[1] = 0;
  v131[0] = 0;
  sub_100666C94((uint64_t *)__p, a1 + 16824);
  uint64_t v13 = (void **)__p[0];
  if (__p[0] == &__p[1])
  {
LABEL_24:
    sub_100666990((uint64_t)__p, (void *)__p[1]);
    uint64_t v12 = *(void *)(a3 + 8);
    goto LABEL_25;
  }
  while (*((_DWORD *)v13[6] + 66) != 2)
  {
    char v14 = (void **)v13[1];
    if (v14)
    {
      do
      {
        __int16 v15 = v14;
        char v14 = (void **)*v14;
      }
      while (v14);
    }
    else
    {
      do
      {
        __int16 v15 = (void **)v13[2];
        BOOL v16 = *v15 == v13;
        uint64_t v13 = v15;
      }
      while (!v16);
    }
    uint64_t v13 = v15;
    if (v15 == &__p[1]) {
      goto LABEL_24;
    }
  }
  uint64_t v88 = qword_100A19F90;
  if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
  {
    sub_10003AE4C(a2, (uint64_t)__dst);
    int v112 = (char)__dst[23];
    __int16 v113 = *(uint8_t **)__dst;
    sub_10003AE4C((uint64_t)v13[4], (uint64_t)buf);
    unsigned int v114 = __dst;
    if (v112 < 0) {
      unsigned int v114 = v113;
    }
    if (v146 >= 0) {
      int v115 = buf;
    }
    else {
      int v115 = *(unsigned char **)buf;
    }
    *(_DWORD *)id v124 = 136446466;
    *(void *)&v124[4] = v114;
    __int16 v125 = 2082;
    id v126 = v115;
    _os_log_error_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_ERROR, "session %{public}s cannot use the exposure notification instance since its already being used by %{public}s", v124, 0x16u);
    if (v146 < 0) {
      operator delete(*(void **)buf);
    }
    if ((char)__dst[23] < 0) {
      operator delete(*(void **)__dst);
    }
  }
  sub_100666990((uint64_t)__p, (void *)__p[1]);
  uint64_t v72 = 4;
LABEL_169:
  sub_10003AFB4((uint64_t)v122);
  return v72;
}

void sub_10065CB14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
}

uint64_t sub_10065CE4C(uint64_t a1, uint64_t a2)
{
  v34[0] = 0;
  v34[1] = 0;
  sub_10003AED0((uint64_t)v34, a1 + 56);
  uint64_t v4 = a1 + 16848;
  for (uint64_t i = *(void *)(a1 + 16856); i != v4; uint64_t i = *(void *)(i + 8))
  {
    if (*(void *)(i + 16) == a2) {
      return sub_10003AFB4((uint64_t)v34);
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG))
  {
    sub_10003AE4C(a2, (uint64_t)v33);
    sub_10078C770();
  }
  long long v6 = operator new(0x18uLL);
  unsigned __int8 v7 = *(void **)(a1 + 16856);
  void *v6 = v4;
  v6[1] = v7;
  _DWORD v6[2] = a2;
  *unsigned __int8 v7 = v6;
  *(void *)(a1 + 16856) = v6;
  ++*(void *)(a1 + 16864);
  uint64_t v31 = 0;
  v32[0] = 0;
  v32[1] = 0;
  sub_100666C94((uint64_t *)&v31, a1 + 16824);
  uint64_t v8 = v31;
  if (v31 != v32)
  {
    do
    {
      if (v8[4] == (void *)a2)
      {
        v8[6][40] = sub_10010BABC();
        uint64_t v9 = 60 * (arc4random() % 0x3C);
        if (*(unsigned char *)(a1 + 16920)) {
          uint64_t v9 = 0;
        }
        unint64_t v10 = 1000 * (v9 + *(void *)(a1 + 16912));
        BOOL v11 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(a2, (uint64_t)__p);
          uint64_t v12 = __p;
          if (v30 < 0) {
            uint64_t v12 = (void **)__p[0];
          }
          *(_DWORD *)stat buf = 136446466;
          __int16 v36 = v12;
          __int16 v37 = 2048;
          unint64_t v38 = v10 / 0x3E8;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Session %{public}s can advertise in background for %llu seconds", buf, 0x16u);
          if (v30 < 0) {
            operator delete(__p[0]);
          }
        }
        v8[6][41] = v10;
      }
      uint64_t v13 = v8[1];
      if (v13)
      {
        do
        {
          char v14 = (void **)v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          char v14 = (void **)v8[2];
          BOOL v15 = *v14 == v8;
          uint64_t v8 = v14;
        }
        while (!v15);
      }
      uint64_t v8 = v14;
    }
    while (v14 != v32);
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG)) {
    sub_10078C73C();
  }
  uint64_t v16 = *(void *)(a1 + 16856);
  if (v16 != v4)
  {
    uint64_t v17 = (void *)(a1 + 16832);
    do
    {
      uint64_t v18 = (void *)*v17;
      if (!*v17) {
        goto LABEL_38;
      }
      unint64_t v19 = *(void *)(v16 + 16);
      uint64_t v20 = (void *)(a1 + 16832);
      do
      {
        unint64_t v21 = v18[4];
        BOOL v22 = v21 >= v19;
        if (v21 >= v19) {
          uint64_t v23 = v18;
        }
        else {
          uint64_t v23 = v18 + 1;
        }
        if (v22) {
          uint64_t v20 = v18;
        }
        uint64_t v18 = (void *)*v23;
      }
      while (*v23);
      if (v20 == v17 || v19 < v20[4]) {
LABEL_38:
      }
        uint64_t v20 = (void *)(a1 + 16832);
      uint64_t v24 = qword_100A19F28;
      if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG))
      {
        sub_10003AE4C(v20[4], (uint64_t)__p);
        if (v30 >= 0) {
          unsigned __int8 v25 = __p;
        }
        else {
          unsigned __int8 v25 = (void **)__p[0];
        }
        *(_DWORD *)stat buf = 136446210;
        __int16 v36 = v25;
        _os_log_debug_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEBUG, "   %{public}s", buf, 0xCu);
        if (v30 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v16 = *(void *)(v16 + 8);
    }
    while (v16 != v4);
  }
  uint64_t v26 = *(void *)(a1 + 48);
  v28[0] = _NSConcreteStackBlock;
  v28[1] = 3221225472;
  void v28[2] = sub_100663990;
  v28[3] = &unk_100997528;
  v28[4] = a1;
  sub_100013018(v26, v28);
  sub_100666990((uint64_t)&v31, v32[0]);
  return sub_10003AFB4((uint64_t)v34);
}

void sub_10065D258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10065D2A0(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG)) {
    sub_10078C82C(a3, v5);
  }
  unint64_t v6 = sub_100045F00(*(void *)(a2 + 8) + 48);
  uint64_t v7 = sub_10004A6E4(*(void *)(a2 + 8) + 48);
  if (v6 >= 3
    && sub_100226958(v7 + 2, v6 - 2, (uint64_t (*)(void))sub_10065F7B4)
    && os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
  {
    sub_10078C7C4();
  }
}

uint64_t sub_10065D374()
{
  return sub_10065915C();
}

uint64_t sub_10065D380(void *a1, uint64_t a2)
{
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, (uint64_t)(a1 + 7));
  char v30 = 0;
  v31[0] = 0;
  v31[1] = 0;
  sub_100666C94((uint64_t *)&v30, (uint64_t)(a1 + 2103));
  uint64_t v4 = v30;
  if (v30 != v31)
  {
    do
    {
      if (v4[4] == (void *)a2) {
        v4[6][40] = 0;
      }
      char v5 = v4[1];
      if (v5)
      {
        do
        {
          unint64_t v6 = (void **)v5;
          char v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          unint64_t v6 = (void **)v4[2];
          BOOL v7 = *v6 == v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != v31);
  }
  uint64_t v8 = a1 + 2106;
  for (uint64_t i = (uint64_t *)a1[2107]; i != v8; uint64_t i = (uint64_t *)i[1])
  {
    if (i[2] == a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG))
      {
        sub_10003AE4C(a2, (uint64_t)v29);
        sub_10078C8A8();
      }
      uint64_t v10 = *i;
      *(void *)(v10 + 8) = i[1];
      *(void *)i[1] = v10;
      --a1[2108];
      operator delete(i);
      BOOL v11 = v30;
      if (v30 != v31)
      {
        do
        {
          if (v11[4] == (void *)a2) {
            v11[6][40] = 0;
          }
          uint64_t v12 = v11[1];
          if (v12)
          {
            do
            {
              uint64_t v13 = (void **)v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              uint64_t v13 = (void **)v11[2];
              BOOL v7 = *v13 == v11;
              BOOL v11 = v13;
            }
            while (!v7);
          }
          BOOL v11 = v13;
        }
        while (v13 != v31);
      }
      break;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG)) {
    sub_10078C73C();
  }
  char v14 = (uint64_t *)a1[2107];
  if (v14 != v8)
  {
    BOOL v15 = a1 + 2104;
    do
    {
      uint64_t v16 = (void *)*v15;
      if (!*v15) {
        goto LABEL_40;
      }
      unint64_t v17 = v14[2];
      uint64_t v18 = a1 + 2104;
      do
      {
        unint64_t v19 = v16[4];
        BOOL v20 = v19 >= v17;
        if (v19 >= v17) {
          unint64_t v21 = v16;
        }
        else {
          unint64_t v21 = v16 + 1;
        }
        if (v20) {
          uint64_t v18 = v16;
        }
        uint64_t v16 = (void *)*v21;
      }
      while (*v21);
      if (v18 == v15 || v17 < v18[4]) {
LABEL_40:
      }
        uint64_t v18 = a1 + 2104;
      BOOL v22 = qword_100A19F28;
      if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG))
      {
        sub_10003AE4C(v18[4], (uint64_t)__p);
        if (v28 >= 0) {
          uint64_t v23 = __p;
        }
        else {
          uint64_t v23 = (void **)__p[0];
        }
        *(_DWORD *)stat buf = 136446210;
        uint64_t v34 = v23;
        _os_log_debug_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEBUG, "   %{public}s", buf, 0xCu);
        if (v28 < 0) {
          operator delete(__p[0]);
        }
      }
      char v14 = (uint64_t *)v14[1];
    }
    while (v14 != v8);
  }
  uint64_t v24 = a1[6];
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 3221225472;
  void v26[2] = sub_10066399C;
  v26[3] = &unk_100997528;
  uint8_t v26[4] = a1;
  sub_100013018(v24, v26);
  sub_100666990((uint64_t)&v30, v31[0]);
  return sub_10003AFB4((uint64_t)v32);
}

void sub_10065D6D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va1, a14);
  va_start(va, a14);
  uint64_t v15 = va_arg(va1, void);
  unint64_t v17 = va_arg(va1, void *);
  uint64_t v18 = va_arg(va1, void);
  sub_100666990((uint64_t)va, v17);
  sub_10003AFB4((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_10065D70C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _DWORD v6[2] = sub_10065D7D8;
  v6[3] = &unk_1009BD0F8;
  uint64_t v8 = a1;
  id v5 = v3;
  id v7 = v5;
  sub_100013018(v4, v6);
}

void sub_10065D7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10065D7D8(uint64_t a1)
{
  sub_1002298EC(*(_DWORD *)(*(void *)(a1 + 40) + 17076), *(_DWORD *)(*(void *)(a1 + 40) + 17080));
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v2();
}

void sub_10065D834(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10065D8F8;
  v5[3] = &unk_1009BD120;
  id v4 = v2;
  id v6 = v4;
  sub_100013018(v3, v5);
}

void sub_10065D8D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10065D8F8(uint64_t a1)
{
  id v2 = +[NSMutableDictionary dictionaryWithCapacity:7];
  unsigned int v15 = 0;
  if (sub_100229C78(&v15)) {
    +[NSNumber numberWithUnsignedLong:0];
  }
  else {
  uint64_t v3 = +[NSNumber numberWithUnsignedLong:v15];
  }
  __int16 v14 = 0;
  unsigned __int8 v13 = 0;
  unsigned __int16 v12 = 0;
  unsigned int v10 = 0;
  unsigned int v11 = 0;
  sub_100229CC8((unsigned char *)&v14 + 1, &v14, &v13, &v12, &v11, &v10);
  id v4 = +[NSNumber numberWithBool:HIBYTE(v14)];
  [v2 setObject:v4 forKeyedSubscript:@"kCBMsgArgHoldStableAddressState"];

  id v5 = +[NSNumber numberWithBool:v14];
  [v2 setObject:v5 forKeyedSubscript:@"kCBMsgArgOverrideLocalAddressState"];

  id v6 = +[NSNumber numberWithBool:v13];
  [v2 setObject:v6 forKeyedSubscript:@"kCBMsgArgPrivateModeState"];

  id v7 = +[NSNumber numberWithUnsignedShort:v12];
  [v2 setObject:v7 forKeyedSubscript:@"kCBMsgArgHoldStableAddressCount"];

  uint64_t v8 = +[NSNumber numberWithUnsignedInt:v11];
  [v2 setObject:v8 forKeyedSubscript:@"kCBMsgArgLePrivateAddressTimer"];

  uint64_t v9 = +[NSNumber numberWithUnsignedInt:v10];
  [v2 setObject:v9 forKeyedSubscript:@"kCBMsgArgLeHoldStablePrivateAddressTimer"];

  [v2 setObject:v3 forKeyedSubscript:@"kCBMsgArgTimeoutInMS"];
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10065DAF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10065DB34(uint64_t a1, unint64_t a2)
{
  v23[1] = 0;
  unint64_t v24 = a2;
  v23[0] = 0;
  sub_10003AED0((uint64_t)v23, a1 + 56);
  id v4 = *(void **)(a1 + 16832);
  if (!v4) {
    goto LABEL_42;
  }
  uint64_t v5 = a1 + 16832;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = (uint64_t)v4;
    }
    id v4 = (void *)*v8;
  }
  while (*v8);
  if (v5 != a1 + 16832 && *(void *)(v5 + 32) <= a2)
  {
    unsigned int v11 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      unsigned __int16 v12 = v22 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)stat buf = 136446210;
      *(void *)&uint8_t buf[4] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Received 'stop advertising' request from session \"%{public}s\"", buf, 0xCu);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    if (*(unsigned char *)(a1 + 17084))
    {
      unsigned __int8 v13 = qword_100A19F20;
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        int v16 = v22;
        unint64_t v17 = (void **)__p[0];
        sub_100551B04(a2, buf);
        uint64_t v18 = __p;
        if (v16 < 0) {
          uint64_t v18 = v17;
        }
        if (v26 >= 0) {
          unint64_t v19 = buf;
        }
        else {
          unint64_t v19 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v27 = 136446466;
        char v28 = v18;
        __int16 v29 = 2082;
        char v30 = v19;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "WILLSLEEP violation! Session %{public}s(%{public}s) asking to stop advertising", v27, 0x16u);
        if (v26 < 0) {
          operator delete(*(void **)buf);
        }
        if (v22 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    sub_10065DEC0(a1, a2);
    __p[0] = &v24;
    __int16 v14 = sub_100666FFC((uint64_t **)(a1 + 16824), &v24, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
    if (*(_DWORD *)(v14[6] + 440))
    {
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BD200);
      }
      sub_1004FF278((uint64_t)off_1009F8150, *(_DWORD *)(v14[6] + 440));
    }
    sub_1006589E0(a1, v24);
    if (*(unsigned char *)(a1 + 41))
    {
      uint64_t v15 = *(void *)(a1 + 48);
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      void v20[2] = sub_10065E66C;
      void v20[3] = &unk_100997528;
      v20[4] = a1;
      sub_100013018(v15, v20);
    }
    uint64_t v9 = 0;
  }
  else
  {
LABEL_42:
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(a2, (uint64_t)__p);
      sub_10078C8FC();
    }
    uint64_t v9 = 123;
  }
  sub_10003AFB4((uint64_t)v23);
  return v9;
}

void sub_10065DE7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
}

uint64_t sub_10065DEC0(uint64_t a1, unint64_t a2)
{
  v45[1] = 0;
  unint64_t v46 = a2;
  v45[0] = 0;
  sub_10003AED0((uint64_t)v45, a1 + 56);
  id v4 = *(void **)(a1 + 16832);
  if (v4)
  {
    uint64_t v5 = (void *)(a1 + 16832);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = v4;
      }
      id v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 != (void *)(a1 + 16832) && v5[4] <= a2)
    {
      unint64_t v42 = +[NSMutableDictionary dictionary];
      __p[0] = &v46;
      uint64_t v9 = sub_100666FFC((uint64_t **)(a1 + 16824), &v46, (uint64_t)&unk_1007BE9D0, (uint64_t **)__p);
      uint64_t v10 = v9[6];
      if (*(void *)(v10 + 72) != *(void *)(v10 + 64))
      {
        uint64_t v41 = +[NSMutableString string];
        uint64_t v11 = v9[6];
        unsigned __int16 v12 = *(unsigned __int8 **)(v11 + 64);
        if (v12 == *(unsigned __int8 **)(v11 + 72))
        {
          unsigned __int16 v14 = 0;
          unsigned __int16 v13 = 0;
        }
        else
        {
          unsigned __int16 v13 = 0;
          unsigned __int16 v14 = 0;
          do
          {
            sub_1000417A8((uint64_t)v12, __p);
            if (v44 >= 0) {
              uint64_t v15 = __p;
            }
            else {
              uint64_t v15 = (void **)__p[0];
            }
            int v16 = +[NSString stringWithUTF8String:v15];
            unint64_t v17 = +[NSString stringWithFormat:@"%@ ", v16];
            [v41 appendString:v17];

            if (SHIBYTE(v44) < 0) {
              operator delete(__p[0]);
            }
            int v19 = *v12;
            v12 += 20;
            int v18 = v19;
            if (v19 == 16) {
              ++v13;
            }
            if (v18 == 2) {
              ++v14;
            }
          }
          while (v12 != *(unsigned __int8 **)(v9[6] + 72));
        }
        BOOL v20 = +[NSNumber numberWithUnsignedShort:v13];
        [v42 setObject:v20 forKeyedSubscript:@"NumberOf128bitUUID"];

        unint64_t v21 = +[NSNumber numberWithUnsignedShort:v14];
        [v42 setObject:v21 forKeyedSubscript:@"NumberOf16bitUUID"];

        [v42 setObject:v41 forKeyedSubscript:@"ServiceUUID"];
        uint64_t v10 = v9[6];
      }
      if (*(char *)(v10 + 39) < 0)
      {
        sub_10003B098(__p, *(void **)(v10 + 16), *(void *)(v10 + 24));
      }
      else
      {
        *(_OWORD *)__n128 __p = *(_OWORD *)(v10 + 16);
        uint64_t v44 = *(void *)(v10 + 32);
      }
      char v22 = (void *)HIBYTE(v44);
      if (v44 < 0) {
        char v22 = __p[1];
      }
      uint64_t v23 = +[NSNumber numberWithBool:v22 != 0];
      [v42 setObject:v23 forKeyedSubscript:@"HasName"];

      if (SHIBYTE(v44) < 0) {
        operator delete(__p[0]);
      }
      unint64_t v24 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v9[6] + 337)];
      [v42 setObject:v24 forKeyedSubscript:@"AppInForegroundAtStart"];

      unsigned __int8 v25 = +[NSNumber numberWithUnsignedLongLong:sub_10010BABC() - *(void *)(v9[6] + 400)];
      [v42 setObject:v25 forKeyedSubscript:@"DurationInMS"];

      char v26 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v5[6] + 408)];
      [v42 setObject:v26 forKeyedSubscript:@"SupportsBackgrounding"];

      uint64_t v27 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v46 + 140)];
      [v42 setObject:v27 forKeyedSubscript:@"ClientType"];

      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
      }
      if (sub_1002F29B8((uint64_t)off_1009F8780, v46))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
        }
        BOOL v28 = sub_100307304((uint64_t)off_1009F8780, v46);
      }
      else
      {
        BOOL v28 = 0;
      }
      __int16 v29 = +[NSNumber numberWithBool:v28];
      [v42 setObject:v29 forKeyedSubscript:@"SupportsStateRestoration"];

      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
      }
      if (sub_1002F29B8((uint64_t)off_1009F8780, v46))
      {
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
        }
        BOOL v30 = sub_1002F45B8((uint64_t)off_1009F8780, v46) == 16;
      }
      else
      {
        BOOL v30 = 0;
      }
      uint64_t v31 = +[NSNumber numberWithBool:v30];
      [v42 setObject:v31 forKeyedSubscript:@"AppInForegroundAtStop"];

      __p[0] = 0;
      __p[1] = 0;
      uint64_t v44 = 0;
      sub_10030BA54((uint64_t *)__p, (const void ***)(v5[6] + 416));
      uint64_t v32 = (void **)__p[0];
      if (__p[0] != &__p[1])
      {
        do
        {
          unsigned int v33 = v32 + 4;
          if (*((char *)v32 + 55) < 0) {
            unsigned int v33 = (void *)*v33;
          }
          uint64_t v34 = +[NSString stringWithUTF8String:v33];
          [v42 setObject:v34 forKeyedSubscript:@"BundleID"];

          uint64_t v35 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)stat buf = 138412290;
            uint64_t v48 = v42;
            _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "Sending LEAdvSession :%@", buf, 0xCu);
          }
          uint64_t v36 = sub_100050530();
          (*(void (**)(uint64_t, void *))(*(void *)v36 + 320))(v36, v42);
          __int16 v37 = (void **)v32[1];
          if (v37)
          {
            do
            {
              unint64_t v38 = v37;
              __int16 v37 = (void **)*v37;
            }
            while (v37);
          }
          else
          {
            do
            {
              unint64_t v38 = (void **)v32[2];
              BOOL v39 = *v38 == v32;
              uint64_t v32 = v38;
            }
            while (!v39);
          }
          uint64_t v32 = v38;
        }
        while (v38 != &__p[1]);
      }
      sub_10004BA28((uint64_t)__p, (char *)__p[1]);
    }
  }
  return sub_10003AFB4((uint64_t)v45);
}

void sub_10065E548(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_10003AFB4((uint64_t)&a21);
  _Unwind_Resume(a1);
}

uint64_t sub_10065E66C()
{
  return sub_10065915C();
}

uint64_t sub_10065E678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  bzero(v41, 0x67CuLL);
  v38[0] = 0;
  v38[1] = 0;
  sub_10003AED0((uint64_t)v38, a1 + 56);
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)unsigned __int8 v25 = 0u;
  long long v26 = 0u;
  memset(v24, 0, sizeof(v24));
  long long v23 = 0u;
  sub_10004C67C((uint64_t)&v23);
  uint64_t v6 = sub_10003AB28((uint64_t)v24);
  sub_10003AE4C(a2, (uint64_t)&__p);
  uint64_t v7 = sub_10003AB28(v6);
  sub_10003AB28(v7);
  if (v22 < 0) {
    operator delete(__p);
  }
  uint64_t v8 = sub_10003AB28((uint64_t)v24);
  LOBYTE(__p) = *(unsigned char *)a3;
  uint64_t v9 = sub_10003AB28(v8);
  sub_10003AB28(v9);
  sub_10003AB28((uint64_t)v24);
  uint64_t v10 = std::ostream::operator<<();
  sub_10003AB28(v10);
  size_t v11 = sub_100045F00(a3 + 48);
  unsigned __int16 v12 = (const char *)sub_10004A6E4(a3 + 48);
  sub_10003AB28((uint64_t)v24);
  uint64_t v13 = std::ostream::operator<<();
  sub_10003AB28(v13);
  uint64_t v14 = sub_10003AB28((uint64_t)v24);
  strlen(v12);
  uint64_t v15 = sub_10003AB28(v14);
  sub_10003AB28(v15);
  int v16 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str();
    unint64_t v17 = v22 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)stat buf = 136446210;
    uint64_t v40 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "%{public}s", buf, 0xCu);
    if (v22 < 0) {
      operator delete(__p);
    }
  }
  bzero(v41, 0x67CuLL);
  v41[0] = *(unsigned char *)a3;
  __int16 v42 = *(_WORD *)(a3 + 2);
  char v43 = 64;
  if (v11 - 1 <= 0x671)
  {
    memcpy(v45, v12, v11);
    v45[825] = 0;
    __int16 v44 = v11;
  }
  LOBYTE(__p) = 0;
  sub_10001B8E0(&__p);
  uint64_t v18 = sub_100229FF0(v41);
  sub_10001B910(&__p);
  if (v18 && os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
    sub_10078C954();
  }
  sub_10001B8AC(&__p);
  *(void *)((char *)&v24[-1]
  *(void *)&v24[0] = v19;
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  sub_10003AFB4((uint64_t)v38);
  return v18;
}

void sub_10065EAD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52)
{
}

uint64_t sub_10065EB3C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  v31[0] = 0;
  v31[1] = 0;
  sub_10003AED0((uint64_t)v31, a1 + 56);
  uint64_t v30 = 0;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  long long v16 = 0u;
  sub_10004C67C((uint64_t)&v16);
  uint64_t v5 = sub_10003AB28((uint64_t)v17);
  sub_10003AE4C(a2, (uint64_t)&__p);
  uint64_t v6 = sub_10003AB28(v5);
  sub_10003AB28(v6);
  if (v15 < 0) {
    operator delete(__p);
  }
  uint64_t v7 = sub_10003AB28((uint64_t)v17);
  LOBYTE(__p) = a3;
  uint64_t v8 = sub_10003AB28(v7);
  sub_10003AB28(v8);
  uint64_t v9 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
  {
    std::stringbuf::str();
    uint64_t v10 = v15 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)stat buf = 136446210;
    long long v33 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "%{public}s", buf, 0xCu);
    if (v15 < 0) {
      operator delete(__p);
    }
  }
  LOBYTE(__p) = 0;
  sub_10001B8E0(&__p);
  uint64_t v11 = sub_10022A138(a3);
  sub_10001B910(&__p);
  if (v11 && os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
    sub_10078C9BC();
  }
  sub_10001B8AC(&__p);
  *(void *)((char *)&v17[-1]
  *(void *)&v17[0] = v12;
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
  sub_10003AFB4((uint64_t)v31);
  return v11;
}

void sub_10065EE78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  sub_100742518((uint64_t)&a16);
  sub_10003AFB4(v16 - 96);
  _Unwind_Resume(a1);
}

BOOL sub_10065EED8(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 56);
  BOOL v2 = *(_DWORD *)(a1 + 120) != 0;
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_10065EF28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 56);
  uint64_t v6 = *(void **)(a1 + 16832);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = (void *)(a1 + 16832);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 != (void *)(a1 + 16832) && v7[4] <= a2)
  {
    *a3 = &off_100998468;
    uint64_t v12 = v7[6];
    a3[1] = v12;
    if (v12) {
      sub_100037354(v12);
    }
  }
  else
  {
LABEL_12:
    *a3 = &off_100998468;
    a3[1] = 0;
  }
  return sub_10003AFB4((uint64_t)v13);
}

void sub_10065F008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

id sub_10065F01C(uint64_t a1, void *a2, char a3, void *a4)
{
  id v6 = a2;
  char v15 = a3;
  id v7 = a4;
  if (v7)
  {
    if (v6)
    {
      id v8 = [v6 mutableCopy];
    }
    else
    {
      id v8 = +[NSMutableData data];
    }
    uint64_t v10 = v8;
    unsigned int v11 = [v8 length];
    unsigned int v12 = [v7 length];
    char v14 = [v7 length] + 1;
    if (((v11 + v12 + 2) & 0xE0) == 0)
    {
      [v10 appendBytes:&v14 length:1];
      [v10 appendBytes:&v15 length:1];
      [v10 appendData:v7];
    }
    id v9 = [v10 copy];
  }
  else
  {
    id v9 = v6;
  }

  return v9;
}

void sub_10065F12C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10065F150(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  if (!v5) {
    goto LABEL_4;
  }
  if (v4)
  {
    if ((unint64_t)[v4 length] >= 0x20)
    {
LABEL_4:
      id v6 = v4;
      goto LABEL_23;
    }
    id v7 = [v4 mutableCopy];
  }
  else
  {
    id v7 = +[NSMutableData data];
  }
  id v8 = v7;
  id v9 = (char *)[v7 length];
  id v10 = v8;
  unsigned int v11 = (unsigned __int8 *)[v10 bytes];
  if (v9)
  {
    uint64_t v12 = 0;
    unsigned int v13 = 0;
    int v14 = 0;
    while (1)
    {
      char v15 = (char *)v11[v12];
      if (&v9[-v12] < v15)
      {
        uint64_t v18 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
          sub_10078CA24((uint64_t)v10, v18, v19);
        }
        goto LABEL_18;
      }
      int v16 = v14 + 1;
      if (v11[(v14 + 1)] == 255) {
        break;
      }
      int v14 = v15 + v16;
      if ((unint64_t)v9 > ((_BYTE)v15 + v16))
      {
        uint64_t v12 = ((_BYTE)v15 + v16);
        if (v13++ < 0x31) {
          continue;
        }
      }
      goto LABEL_18;
    }
    id v20 = [v10 length];
    unsigned __int8 v21 = v14;
    uint64_t v22 = ((_BYTE)v15 + 1);
    if ((unint64_t)v20 < v22 + (unint64_t)v21) {
      goto LABEL_18;
    }
    uint64_t v30 = v21;
    long long v31 = [v10 subdataWithRange:v21, v22];
    id v25 = +[NSMutableData dataWithData:v31];

    [v10 replaceBytesInRange:v30 withBytes:v22 length:0];
  }
  else
  {
LABEL_18:
    __int16 v33 = 76;
    long long v23 = +[NSData dataWithBytes:&v33 length:2];
    long long v24 = sub_10065F01C((uint64_t)v23, 0, 255, v23);
    id v25 = [v24 mutableCopy];
  }
  unsigned int v26 = [v10 length];
  unsigned int v27 = [v25 length];
  if (((v27 + v26 + [v5 length]) & 0xE0) != 0)
  {
    id v28 = v4;
  }
  else
  {
    [v25 appendData:v5];
    char v32 = [v25 length] - 1;
    [v25 replaceBytesInRange:0 withBytes:&v32 length:1];
    [v10 appendData:v25];
    id v28 = [v10 copy];
  }
  id v6 = v28;

LABEL_23:

  return v6;
}

void sub_10065F3F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10065F458(uint64_t a1, void *a2, char a3, void *a4)
{
  id v6 = a2;
  id v7 = a4;
  if (v7)
  {
    if (v6)
    {
      id v8 = [v6 mutableCopy];
    }
    else
    {
      char v17 = 26;
      id v10 = +[NSData dataWithBytes:&v17 length:1];
      unsigned int v11 = sub_10065F01C((uint64_t)v10, 0, 1, v10);
      id v8 = [v11 mutableCopy];
    }
    uint64_t v12 = +[NSMutableData data];
    v16[0] = a3;
    v16[1] = [v7 length];
    [v12 appendBytes:v16 length:2];
    unsigned int v13 = sub_10065F150((uint64_t)[v12 appendData:v7], v8, v12);
    id v14 = [v13 mutableCopy];

    id v9 = [v14 copy];
  }
  else
  {
    id v9 = v6;
  }

  return v9;
}

void sub_10065F5AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10065F600(uint64_t a1, void *a2, unsigned __int8 **a3, unsigned int a4)
{
  id v4 = *a3;
  if (*a3 == a3[1])
  {
    return 0;
  }
  else
  {
    unsigned __int16 v8 = 0;
    id v9 = a2 + 2;
    do
    {
      for (uint64_t i = (unsigned __int8 *)*a2; i != (unsigned __int8 *)a2[1]; i += 20)
      {
        if (sub_10022A44C(i, v4)) {
          goto LABEL_25;
        }
      }
      if (*v4 + v8 > a4) {
        return v8;
      }
      if ((unint64_t)i >= *v9)
      {
        unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&i[-*a2] >> 2);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          abort();
        }
        if (0x999999999999999ALL * ((uint64_t)(*v9 - *a2) >> 2) > v14) {
          unint64_t v14 = 0x999999999999999ALL * ((uint64_t)(*v9 - *a2) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*v9 - *a2) >> 2) >= 0x666666666666666) {
          unint64_t v15 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          int v16 = (char *)sub_10003767C((uint64_t)v9, v15);
        }
        else {
          int v16 = 0;
        }
        char v17 = &v16[20 * v13];
        long long v18 = *(_OWORD *)v4;
        *((_DWORD *)v17 + 4) = *((_DWORD *)v4 + 4);
        *(_OWORD *)char v17 = v18;
        id v20 = (char *)*a2;
        uint64_t v19 = (char *)a2[1];
        unsigned __int8 v21 = v17;
        if (v19 != (char *)*a2)
        {
          do
          {
            long long v22 = *(_OWORD *)(v19 - 20);
            *((_DWORD *)v21 - 1) = *((_DWORD *)v19 - 1);
            *(_OWORD *)(v21 - 20) = v22;
            v21 -= 20;
            v19 -= 20;
          }
          while (v19 != v20);
          uint64_t v19 = (char *)*a2;
        }
        uint64_t v12 = v17 + 20;
        *a2 = v21;
        a2[1] = v17 + 20;
        a2[2] = &v16[20 * v15];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        long long v11 = *(_OWORD *)v4;
        *((_DWORD *)i + 4) = *((_DWORD *)v4 + 4);
        *(_OWORD *)uint64_t i = v11;
        uint64_t v12 = (char *)(i + 20);
      }
      a2[1] = v12;
      v8 += *v4;
LABEL_25:
      v4 += 20;
    }
    while (v4 != a3[1]);
  }
  return v8;
}

uint64_t sub_10065F7B4(int a1, char *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t result = 161;
  if (a2 && a3 && a1 == 15 && a4)
  {
    uint64_t v7 = a2[1];
    int v8 = *a2;
    unsigned int v9 = 2;
    if (v7 != 56 && v7 != 51)
    {
      if (v7 != 9)
      {
        uint64_t v10 = 0;
LABEL_13:
        uint64_t v11 = sub_100050530();
        (*(void (**)(uint64_t, uint64_t, void, uint64_t, void))(*(void *)v11 + 400))(v11, v7, v8, v10, *a4);
        return 0;
      }
      unsigned int v9 = 5;
    }
    if (v8 < 0) {
      v9 += 3;
    }
    uint64_t v10 = a2[v9];
    goto LABEL_13;
  }
  return result;
}

void sub_10065F880(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t **a10)
{
  uint64_t v10 = __chkstk_darwin();
  uint64_t v335 = v11;
  v336 = v12;
  v337 = v13;
  unint64_t v15 = v14;
  unsigned int v339 = v16;
  long long v18 = v17;
  *(void *)v324 = v10;
  v358 = 0;
  v359 = 0;
  unint64_t v360 = 0;
  v355 = 0;
  v356 = 0;
  unint64_t v357 = 0;
  v352 = 0;
  v353 = 0;
  unint64_t v354 = 0;
  v349 = 0;
  v350 = 0;
  unint64_t v351 = 0;
  unsigned __int16 v431 = 0x4000;
  uint64_t v430 = 0x4000400040004000;
  v338 = v19;
  bzero(v19, 0xD08uLL);
  if (*((char *)v15 + 23) < 0)
  {
    *(unsigned char *)*unint64_t v15 = 0;
    v15[1] = 0;
  }
  else
  {
    *(unsigned char *)unint64_t v15 = 0;
    *((unsigned char *)v15 + 23) = 0;
  }
  __src = (void **)v15;
  *(void *)(v335 + 8) = *(void *)v335;
  v337[1] = *v337;
  a9[1] = *a9;
  long long v22 = (void *)*v18;
  unsigned __int8 v21 = v18 + 1;
  id v20 = v22;
  long long v23 = &unk_1007B8000;
  if (v22 != v21)
  {
    char v24 = 0;
    char v328 = 0;
    char v326 = 0;
    char v331 = 0;
    while (1)
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
      }
      unsigned int v25 = sub_1002F45B8((uint64_t)off_1009F8780, v20[4]);
      uint64_t v26 = *(unsigned __int8 *)(v20[6] + 264);
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
      }
      if (sub_1002F29B8((uint64_t)off_1009F8780, v20[4]))
      {
        LODWORD(v404) = 0;
        buf[0] = 0;
        if (qword_1009F8788 != -1) {
          dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
        }
        sub_1002F133C((uint64_t)off_1009F8780, v20[4], &v404, buf);
        if (v404 != 1)
        {
          uint64_t v30 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
          {
            sub_10003AE4C(v20[4], (uint64_t)__p);
            long long v31 = __p;
            if (v420 < 0) {
              long long v31 = (void **)__p[0];
            }
            *(_DWORD *)v421 = 136446722;
            *(void *)&v421[4] = v31;
            *(_WORD *)&v421[12] = 1024;
            *(_DWORD *)v422 = v404;
            *(_WORD *)&v422[4] = 1024;
            *(_DWORD *)&v422[6] = buf[0];
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_INFO, "session %{public}s cannot advertise in powerState:%d restrictedMode:%d", v421, 0x18u);
            if (SHIBYTE(v420) < 0) {
              operator delete(__p[0]);
            }
          }
          goto LABEL_122;
        }
      }
      if (v25 == 1 || v25 == 32) {
        break;
      }
      if (v25 == 16)
      {
        unsigned int v27 = v359;
        if ((unint64_t)v359 >= v360)
        {
          uint64_t v29 = sub_100450550((uint64_t *)&v358, (uint64_t)(v20 + 5));
        }
        else
        {
          *(void *)v359 = &off_100998468;
          uint64_t v28 = v20[6];
          *((void *)v27 + 1) = v28;
          if (v28) {
            sub_100037354(v28);
          }
          uint64_t v29 = (uint64_t)(v27 + 16);
        }
        v359 = (char *)v29;
        uint64_t v45 = v20[6];
        if (v26)
        {
          unsigned int v46 = *((unsigned __int16 *)&v430 + v26);
          if (v46 >= *(unsigned __int16 *)(v45 + 222)) {
            LOWORD(v46) = *(_WORD *)(v45 + 222);
          }
          uint64_t v47 = v26;
        }
        else
        {
          uint64_t v47 = 0;
          LOWORD(v46) = 48;
        }
        *((_WORD *)&v430 + v47) = v46;
        unint64_t v43 = *(void *)(v45 + 256);
        if (!v43) {
          goto LABEL_59;
        }
        int v44 = v339 <= 1 ? 0 : v26;
        if ((v44 & 0xFFFFFFFB) == 0) {
          goto LABEL_59;
        }
        goto LABEL_58;
      }
      if (*(_DWORD *)(v20[6] + 264) == 2) {
        break;
      }
LABEL_59:
      uint64_t v50 = v20[6];
      if (*(_DWORD *)(v50 + 264) == 4)
      {
        int v51 = *(unsigned __int8 *)(v50 + 339);
        if (*(unsigned char *)(v50 + 339))
        {
          uint64_t v52 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v421 = 67109376;
            *(_DWORD *)&v421[4] = v51;
            *(_WORD *)&v421[8] = 1024;
            *(_DWORD *)&v421[10] = 4;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "Overriding primaryPHY:%d instance:%d", v421, 0xEu);
            uint64_t v50 = v20[6];
            LOBYTE(v51) = *(unsigned char *)(v50 + 339);
            unsigned int v53 = *(_DWORD *)(v50 + 264);
          }
          else
          {
            unsigned int v53 = 4;
          }
          v338[3336 * v53 + 3321] = v51;
        }
        else
        {
          unsigned int v53 = 4;
        }
        int v54 = *(unsigned __int8 *)(v50 + 340);
        if (*(unsigned char *)(v50 + 340))
        {
          uint64_t v55 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)v421 = 67109376;
            *(_DWORD *)&v421[4] = v54;
            *(_WORD *)&v421[8] = 1024;
            *(_DWORD *)&v421[10] = v53;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Overriding secondaryPHY:%d instance:%d", v421, 0xEu);
            uint64_t v50 = v20[6];
            LOBYTE(v54) = *(unsigned char *)(v50 + 340);
          }
          v338[3336 * *(unsigned int *)(v50 + 264) + 3322] = v54;
        }
        uint64_t v56 = sub_10003FB34();
        if (sub_1003542DC(v56))
        {
          uint64_t v57 = v20[6];
          int v58 = *(unsigned __int8 *)(v57 + 343);
          if (*(unsigned char *)(v57 + 343))
          {
            int v59 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
            {
              int v60 = *(_DWORD *)(v57 + 264);
              *(_DWORD *)v421 = 67109376;
              *(_DWORD *)&v421[4] = v58;
              *(_WORD *)&v421[8] = 1024;
              *(_DWORD *)&v421[10] = v60;
              _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "Overriding primaryPhyOptions:%d instance:%d", v421, 0xEu);
              uint64_t v57 = v20[6];
              LOBYTE(v58) = *(unsigned char *)(v57 + 343);
            }
            v338[3336 * *(unsigned int *)(v57 + 264) + 3323] = v58;
          }
          int v61 = *(unsigned __int8 *)(v57 + 344);
          if (*(unsigned char *)(v57 + 344))
          {
            uint64_t v62 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
            {
              int v63 = *(_DWORD *)(v57 + 264);
              *(_DWORD *)v421 = 67109376;
              *(_DWORD *)&v421[4] = v61;
              *(_WORD *)&v421[8] = 1024;
              *(_DWORD *)&v421[10] = v63;
              _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Overriding secondaryPhyOptions:%d instance:%d", v421, 0xEu);
              uint64_t v57 = v20[6];
              LOBYTE(v61) = *(unsigned char *)(v57 + 344);
            }
            v338[3336 * *(unsigned int *)(v57 + 264) + 3324] = v61;
          }
        }
      }
      sub_10003FB34();
      if (sub_1000262C4())
      {
        if (_os_feature_enabled_impl())
        {
          uint64_t v64 = v20[6];
          if (*(unsigned char *)(v64 + 345))
          {
            uint64_t v65 = &v338[3336 * *(unsigned int *)(v64 + 264)];
            v65[3325] = *(unsigned char *)(v64 + 345);
            *((_WORD *)v65 + 1663) = *(_WORD *)(v64 + 346);
            id v66 = *(id *)(v64 + 352);
            *(void *)&v338[3336 * *(unsigned int *)(v20[6] + 264) + 3328] = [v66 bytes];

            uint64_t v67 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v68 = &v338[3336 * *(unsigned int *)(v20[6] + 264)];
              int v69 = v68[3325];
              int v70 = v68[3326];
              int v71 = v68[3327];
              uint64_t v72 = *((void *)v68 + 416);
              *(_DWORD *)v421 = 67109890;
              *(_WORD *)&v421[8] = 1024;
              *(_DWORD *)&v421[10] = v70;
              *(_WORD *)v422 = 1024;
              *(_DWORD *)&v421[4] = v69;
              *(_DWORD *)&v422[2] = v71;
              *(_WORD *)&v422[6] = 2080;
              *(void *)&v422[8] = v72;
              _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_DEFAULT, "Using DBAF - getDecisionAdvDataEnable: %d, getDBAFDecisionTypeFlags: %d, getDBAFDecisionDataLength: %d, getDBAFDecisionData: %s", v421, 0x1Eu);
            }
          }
        }
      }
      uint64_t v73 = v20[6];
      if (*(unsigned char *)(v73 + 12) && *(_DWORD *)(v73 + 264) == 4)
      {
        uint64_t v74 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v20[4], (uint64_t)v421);
          uint64_t v75 = v421;
          if (v422[9] < 0) {
            uint64_t v75 = *(unsigned char **)v421;
          }
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v75;
          _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "Forcing extended connectable instead of legacy connectable due to session %{public}s", (uint8_t *)__p, 0xCu);
          if ((v422[9] & 0x80000000) != 0) {
            operator delete(*(void **)v421);
          }
          uint64_t v73 = v20[6];
        }
        char v328 = 1;
      }
      if (*(unsigned char *)(v73 + 307))
      {
        uint64_t v76 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v20[4], (uint64_t)v421);
          unsigned __int8 v77 = v421;
          if (v422[9] < 0) {
            unsigned __int8 v77 = *(unsigned char **)v421;
          }
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v77;
          _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_INFO, "Session %{public}s wants to stop on address change", (uint8_t *)__p, 0xCu);
          if ((v422[9] & 0x80000000) != 0) {
            operator delete(*(void **)v421);
          }
          uint64_t v73 = v20[6];
        }
      }
      if (*(unsigned char *)(v73 + 464))
      {
        int v78 = *(_DWORD *)(v73 + 264);
        if (v78) {
          v331 |= v78 == 1;
        }
        else {
          char v326 = 1;
        }
      }
      if (v25 >= 8 && (sub_100045F00(v73 + 152) || sub_100045F00(v20[6] + 136)))
      {
        uint64_t v79 = v350;
        if ((unint64_t)v350 >= v351)
        {
          uint64_t v81 = sub_100450550((uint64_t *)&v349, (uint64_t)(v20 + 5));
        }
        else
        {
          void *v350 = &off_100998468;
          uint64_t v80 = v20[6];
          v79[1] = v80;
          if (v80) {
            sub_100037354(v80);
          }
          uint64_t v81 = (uint64_t)(v79 + 2);
        }
        v350 = (void *)v81;
        if (WORD1(v430) >= *(unsigned __int16 *)(v20[6] + 222)) {
          int v82 = *(unsigned __int16 *)(v20[6] + 222);
        }
        else {
          int v82 = WORD1(v430);
        }
        WORD1(v430) = v82;
        uint64_t v83 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v20[4], (uint64_t)__p);
          uint64_t v84 = v420 >= 0 ? __p : (void **)__p[0];
          uint64_t v85 = sub_100045F00(v20[6] + 152);
          uint64_t v86 = sub_100045F00(v20[6] + 136);
          int v87 = *(unsigned __int16 *)(v20[6] + 222);
          *(_DWORD *)v421 = 136447234;
          *(void *)&v421[4] = v84;
          *(_WORD *)&v421[12] = 2048;
          *(void *)v422 = v85;
          *(_WORD *)&v422[8] = 2048;
          *(void *)&v422[10] = v86;
          __int16 v423 = 1024;
          int v424 = v82;
          __int16 v425 = 1024;
          int v426 = v87;
          _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "Session %{public}s has Non-Apple manufacturer data len %zu LE Bluetooth Device address len %zu updated minNonConnectableInterval %u (%u from session)", v421, 0x2Cu);
          if (SHIBYTE(v420) < 0) {
            operator delete(__p[0]);
          }
        }
      }
      char v24 = 1;
LABEL_122:
      long long v23 = (void *)&unk_1007B8000;
      uint64_t v88 = (void *)v20[1];
      if (v88)
      {
        do
        {
          uint64_t v89 = v88;
          uint64_t v88 = (void *)*v88;
        }
        while (v88);
      }
      else
      {
        do
        {
          uint64_t v89 = (void *)v20[2];
          _ZF = *v89 == (void)v20;
          id v20 = v89;
        }
        while (!_ZF);
      }
      id v20 = v89;
      if (v89 == v21) {
        goto LABEL_130;
      }
    }
    uint64_t v32 = v20[6];
    if (*(_DWORD *)(v32 + 264) == 2)
    {
      long long v428 = xmmword_1007BA914;
      int v429 = 0;
      sub_100035F98((__n128 *)v421, (__n128 *)&v428);
      uint64_t v33 = sub_100012C44(v32 + 112, v421);
      uint64_t v34 = v20[6];
      if (v34 + 120 == v33)
      {
        sub_100654440(v34);
        long long v35 = qword_100A19FB8;
        if (os_log_type_enabled((os_log_t)qword_100A19FB8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v20[4], (uint64_t)v421);
          long long v36 = v421;
          if (v422[9] < 0) {
            long long v36 = *(unsigned char **)v421;
          }
          LODWORD(__p[0]) = 136446210;
          *(void **)((char *)__p + 4) = v36;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "session %{public}s advertises Exposure Notification data", (uint8_t *)__p, 0xCu);
          if ((v422[9] & 0x80000000) != 0) {
            operator delete(*(void **)v421);
          }
        }
      }
    }
    uint64_t v37 = v356;
    if ((unint64_t)v356 >= v357)
    {
      uint64_t v39 = sub_100450550((uint64_t *)&v355, (uint64_t)(v20 + 5));
    }
    else
    {
      *(void *)v356 = &off_100998468;
      uint64_t v38 = v20[6];
      *((void *)v37 + 1) = v38;
      if (v38) {
        sub_100037354(v38);
      }
      uint64_t v39 = (uint64_t)(v37 + 16);
    }
    v356 = (char *)v39;
    uint64_t v40 = v20[6];
    uint64_t v41 = *(unsigned int *)(v40 + 264);
    unsigned int v42 = *((unsigned __int16 *)&v430 + v41);
    if (v42 >= *(unsigned __int16 *)(v40 + 222)) {
      LOWORD(v42) = *(_WORD *)(v40 + 222);
    }
    *((_WORD *)&v430 + v41) = v42;
    unint64_t v43 = *(void *)(v40 + 256);
    if (!v43) {
      goto LABEL_59;
    }
    int v44 = v339 <= 1 ? 0 : v26;
    if ((v44 & 0xFFFFFFFB) == 0) {
      goto LABEL_59;
    }
LABEL_58:
    v338[3336 * v44 + 3317] = 1;
    uint64_t v48 = sub_1002284B8(v43);
    int v49 = &v338[3336 * v44];
    v49[3316] = BYTE6(v48);
    *((_WORD *)v49 + 1657) = WORD2(v48);
    *(_DWORD *)(v49 + 3310) = v48;
    goto LABEL_59;
  }
  char v331 = 0;
  char v326 = 0;
  char v328 = 0;
  char v24 = 0;
LABEL_130:
  v334 = (unsigned char *)(*(void *)v324 + 16873);
  uint64_t v91 = *(void *)(*(void *)v324 + 16856);
  if (v91 != *(void *)v324 + 16848)
  {
    unsigned __int8 v92 = 0;
    unsigned __int8 v325 = 0;
    int v329 = v23[451];
    while (1)
    {
      uint64_t v93 = (void *)*v21;
      if (!*v21) {
        goto LABEL_143;
      }
      unint64_t v94 = *(void *)(v91 + 16);
      uint64_t v95 = v21;
      do
      {
        unint64_t v96 = v93[4];
        _CF = v96 >= v94;
        if (v96 >= v94) {
          uint64_t v98 = v93;
        }
        else {
          uint64_t v98 = v93 + 1;
        }
        if (_CF) {
          uint64_t v95 = v93;
        }
        uint64_t v93 = (void *)*v98;
      }
      while (*v98);
      if (v95 != v21 && (unint64_t v99 = v95[4], v94 >= v99))
      {
        uint64_t v101 = v95[6];
        if (*(_DWORD *)(v101 + 264) != 2)
        {
          *(_OWORD *)__n128 __p = 0uLL;
          uint64_t v420 = 0;
          int v104 = sub_100037564((char *)__p, *(long long **)(v101 + 64), *(long long **)(v101 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v101 + 72) - *(void *)(v101 + 64)) >> 2));
          sub_10065F600((uint64_t)v104, v337, (unsigned __int8 **)__p, 0xFFFFu);
          __int16 v105 = v430;
          if ((unsigned __int16)v430 >= 0x122u) {
            __int16 v105 = 290;
          }
          LOWORD(v430) = v105;
          if (!*(unsigned char *)(*(void *)v324 + 16874))
          {
            __int16 v113 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG)) {
              sub_10078CAD4(&v347, v348, v113);
            }
            goto LABEL_174;
          }
          if (v339 < 4 || !*v334)
          {
            unsigned int v114 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG)) {
              sub_10078CB14(&v345, v346, v114);
            }
            goto LABEL_174;
          }
          long long v404 = 0uLL;
          *(void *)&long long v405 = 0;
          sub_100653A30(v95[6], 2, &v404);
          int v106 = (void *)v404;
          if (*((void *)&v404 + 1) == (void)v404)
          {
            uint64_t v115 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG))
            {
              sub_10003AE4C(v95[4], (uint64_t)v421);
              uint64_t v128 = v421;
              if (v422[9] < 0) {
                uint64_t v128 = *(unsigned char **)v421;
              }
              *(_DWORD *)stat buf = v329;
              *(void *)&uint8_t buf[4] = v128;
              __int16 v125 = v115;
              id v126 = "session %{public}s does not have 16bit UUID's";
              goto LABEL_197;
            }
            if (!v106) {
              goto LABEL_174;
            }
          }
          else
          {
            unsigned int v107 = *(unsigned __int16 *)(*(void *)v324 + 16906);
            if (v107 <= v325)
            {
              uint64_t v116 = qword_100A19F20;
              if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG))
              {
                *(_DWORD *)v421 = 67109376;
                *(_DWORD *)&v421[4] = v325;
                *(_WORD *)&v421[8] = 1024;
                *(_DWORD *)&v421[10] = v107;
                _os_log_debug_impl((void *)&_mh_execute_header, v116, OS_LOG_TYPE_DEBUG, "We have %d advertisers, max is %d, can't fit more", v421, 0xEu);
              }
            }
            else
            {
              uint64_t v108 = sub_10010BABC();
              uint64_t v109 = v95[6];
              if (v108 - *(void *)(v109 + 320) < *(void *)(v109 + 328))
              {
                if (*(unsigned char *)(v109 + 336))
                {
                  uint64_t v110 = v353;
                  if ((unint64_t)v353 >= v354)
                  {
                    uint64_t v111 = sub_100450550((uint64_t *)&v352, (uint64_t)(v95 + 5));
                  }
                  else
                  {
                    void *v353 = &off_100998468;
                    v110[1] = v109;
                    sub_100037354(v109);
                    uint64_t v111 = (uint64_t)(v110 + 2);
                  }
                  v353 = (void *)v111;
                  __int16 v127 = v431;
                  if (v431 >= 0x122u) {
                    __int16 v127 = 290;
                  }
                  unsigned __int16 v431 = v127;
                  ++v325;
                  goto LABEL_192;
                }
                uint64_t v123 = qword_100A19F20;
                if (!os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG)) {
                  goto LABEL_192;
                }
                sub_10003AE4C(v95[4], (uint64_t)v421);
                id v124 = v421;
                if (v422[9] < 0) {
                  id v124 = *(unsigned char **)v421;
                }
                *(_DWORD *)stat buf = v329;
                *(void *)&uint8_t buf[4] = v124;
                __int16 v125 = v123;
                id v126 = "session %{public}s was never in foreground, extended advertising not allowed, skipping";
LABEL_197:
                _os_log_debug_impl((void *)&_mh_execute_header, v125, OS_LOG_TYPE_DEBUG, v126, buf, 0xCu);
                if ((v422[9] & 0x80000000) == 0) {
                  goto LABEL_192;
                }
                uint64_t v122 = *(void **)v421;
LABEL_199:
                operator delete(v122);
                goto LABEL_192;
              }
              uint64_t v117 = qword_100A19F20;
              if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEBUG))
              {
                sub_10003AE4C(v95[4], (uint64_t)buf);
                unsigned __int8 v118 = buf;
                if (SBYTE7(v397) < 0) {
                  unsigned __int8 v118 = *(uint8_t **)buf;
                }
                uint64_t v119 = v95[6];
                uint64_t v121 = *(void *)(v119 + 320);
                uint64_t v120 = *(void *)(v119 + 328);
                *(_DWORD *)v421 = 136446722;
                *(void *)&v421[4] = v118;
                *(_WORD *)&v421[12] = 2048;
                *(void *)v422 = v108 - v121;
                *(_WORD *)&v422[8] = 2048;
                *(void *)&v422[10] = v120;
                _os_log_debug_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEBUG, "session %{public}s has been advertising in background for %llu seconds, but max is %llu, skipping", v421, 0x20u);
                if (SBYTE7(v397) < 0)
                {
                  uint64_t v122 = *(void **)buf;
                  goto LABEL_199;
                }
              }
            }
LABEL_192:
            int v106 = (void *)v404;
            if (!(void)v404)
            {
LABEL_174:
              if (__p[0])
              {
                __p[1] = __p[0];
                operator delete(__p[0]);
              }
              ++v92;
              char v24 = 1;
              goto LABEL_144;
            }
          }
          *((void *)&v404 + 1) = v106;
          operator delete(v106);
          goto LABEL_174;
        }
        uint64_t v102 = qword_100A19FB8;
        if (os_log_type_enabled((os_log_t)qword_100A19FB8, OS_LOG_TYPE_INFO))
        {
          sub_10003AE4C(v99, (uint64_t)v421);
          uint64_t v103 = v421;
          if (v422[9] < 0) {
            uint64_t v103 = *(unsigned char **)v421;
          }
          LODWORD(__p[0]) = v329;
          *(void **)((char *)__p + 4) = v103;
          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_INFO, "Session %{public}s is on the EN instance, skipping hash", (uint8_t *)__p, 0xCu);
          goto LABEL_165;
        }
      }
      else
      {
LABEL_143:
        uint64_t v100 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
        {
          sub_10003AE4C(*(void *)(v91 + 16), (uint64_t)v421);
          int v112 = v421;
          if (v422[9] < 0) {
            int v112 = *(unsigned char **)v421;
          }
          LODWORD(__p[0]) = v329;
          *(void **)((char *)__p + 4) = v112;
          _os_log_error_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "Could not find %{public}s in our advertising sessions, ignoring", (uint8_t *)__p, 0xCu);
LABEL_165:
          if ((v422[9] & 0x80000000) != 0) {
            operator delete(*(void **)v421);
          }
        }
      }
LABEL_144:
      uint64_t v91 = *(void *)(v91 + 8);
      if (v91 == *(void *)v324 + 16848) {
        goto LABEL_201;
      }
    }
  }
  unsigned __int8 v325 = 0;
  unsigned __int8 v92 = 0;
LABEL_201:
  id v129 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)v421 = 67109376;
    *(_DWORD *)&v421[4] = v92;
    *(_WORD *)&v421[8] = 1024;
    *(_DWORD *)&v421[10] = v325;
    _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "background advertising sessions:AppleMFG:%d Extended:%d", v421, 0xEu);
  }
  if ((v24 & 1) == 0)
  {
    if (v339)
    {
      uint64_t v137 = v339;
      long long v138 = v338 + 2;
      long long v139 = &v430;
      do
      {
        __int16 v140 = *(_WORD *)v139;
        long long v139 = (uint64_t *)((char *)v139 + 2);
        *long long v138 = v140;
        v138 += 1668;
        --v137;
      }
      while (v137);
    }
    goto LABEL_505;
  }
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BD200);
  }
  if (!sub_1004FB1B4(off_1009F8150))
  {
    id v130 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)v421 = 0;
      _os_log_impl((void *)&_mh_execute_header, v130, OS_LOG_TYPE_INFO, "Limiting advertisement duty cycle based on other activies", v421, 2u);
    }
    __int16 v131 = v430;
    if ((unsigned __int16)v430 <= 0x122u) {
      __int16 v131 = 290;
    }
    LOWORD(v430) = v131;
    __int16 v132 = WORD1(v430);
    if (WORD1(v430) <= 0x122u) {
      __int16 v132 = 290;
    }
    WORD1(v430) = v132;
  }
  bzero(v421, 0x203AuLL);
  bzero(__p, 0x203AuLL);
  unsigned __int16 v418 = 0;
  uint64_t v417 = 0;
  __int16 v416 = 0;
  uint64_t v415 = 0;
  uint64_t v134 = 28;
  if (v326) {
    uint64_t v135 = 31;
  }
  else {
    uint64_t v135 = 28;
  }
  if (v331) {
    uint64_t v134 = 31;
  }
  __int16 v332 = v135;
  v412[0] = v135;
  __int16 v330 = v134;
  v412[1] = v134;
  int64x2_t v413 = vdupq_n_s64(0x1FuLL);
  unsigned __int16 v327 = *(_WORD *)(*(void *)v324 + 16904);
  uint64_t v414 = v327;
  uint64_t v411 = 0;
  long long v410 = 0u;
  long long v409 = 0u;
  long long v408 = 0u;
  long long v407 = 0u;
  long long v406 = 0u;
  long long v405 = 0u;
  long long v404 = 0u;
  uint64_t v403 = 0;
  long long v402 = 0u;
  long long v401 = 0u;
  long long v400 = 0u;
  long long v399 = 0u;
  long long v398 = 0u;
  long long v397 = 0u;
  *(_OWORD *)stat buf = 0u;
  uint64_t v395 = 0;
  long long v394 = 0u;
  memset(v393, 0, sizeof(v393));
  uint64_t v392 = 0;
  memset(v391, 0, sizeof(v391));
  uint64_t v390 = 0;
  memset(v389, 0, sizeof(v389));
  uint64_t v388 = 0;
  memset(v387, 0, sizeof(v387));
  char v344 = 0;
  int v343 = 0;
  if (v359 != v358)
  {
    uint64_t v136 = *((void *)v358 + 1);
    if (*(char *)(v136 + 39) < 0)
    {
      long long v133 = sub_10003B098(__dst, *(void **)(v136 + 16), *(void *)(v136 + 24));
    }
    else
    {
      *(_OWORD *)__n128 __dst = *(_OWORD *)(v136 + 16);
      *(void *)&char __dst[16] = *(void *)(v136 + 32);
    }
    if (*((char *)__src + 23) < 0) {
      operator delete(*__src);
    }
    *(_OWORD *)__src = *(_OWORD *)__dst;
    __src[2] = *(void **)&__dst[16];
    for (uint64_t i = (uint64_t)v358; (char *)i != v359; i += 16)
    {
      memset(__dst, 0, 24);
      sub_100653A30(*(void *)(i + 8), 2, __dst);
      if (v339 < 2) {
        unsigned int v143 = 0;
      }
      else {
        unsigned int v143 = *(unsigned __int8 *)(*(void *)(i + 8) + 264);
      }
      sub_10065F600(v142, (void *)&v404 + 3 * v143, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653A30(*(void *)(i + 8), 4, v385);
      uint64_t v144 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v144, &buf[24 * v143], (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653A30(*(void *)(i + 8), 16, v385);
      uint64_t v145 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v145, (void *)v393 + 3 * v143, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653BD0(*(void *)(i + 8), 2, v385);
      uint64_t v146 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v146, (void *)v391 + 3 * v143, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653BD0(*(void *)(i + 8), 4, v385);
      uint64_t v147 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v147, (void *)v389 + 3 * v143, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653BD0(*(void *)(i + 8), 16, v385);
      uint64_t v148 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v148, (void *)v387 + 3 * v143, (unsigned __int8 **)__dst, 0xFFFFu);
      *((unsigned char *)&v343 + v143) = *((void *)v393 + 3 * v143 + 1) != *((void *)v393 + 3 * v143);
      long long v133 = *(const void **)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
    }
  }
  if (v339)
  {
    uint64_t v149 = (uint64_t)v352;
    if (v353 != v352 && *(unsigned char *)(*(void *)v324 + 16874) && *v334)
    {
      do
      {
        memset(__dst, 0, 24);
        sub_100653A30(*(void *)(v149 + 8), 2, __dst);
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&__dst[8] - *(void *)__dst) >> 2) >= 3) {
          sub_100662A30(__dst, 2uLL);
        }
        sub_10065F600(v150, &v410, (unsigned __int8 **)__dst, 0xFFFFu);
        long long v133 = *(const void **)__dst;
        if (*(void *)__dst)
        {
          *(void *)&char __dst[8] = *(void *)__dst;
          operator delete(*(void **)__dst);
        }
        v149 += 16;
      }
      while ((void *)v149 != v353);
      char v344 = 0;
    }
  }
  uint64_t v151 = (uint64_t)v355;
  if (v356 != v355)
  {
    while (1)
    {
      long long v152 = (void *)*((unsigned __int8 *)__src + 23);
      char v153 = (char)v152;
      if ((char)v152 < 0) {
        long long v152 = __src[1];
      }
      if (v152) {
        goto LABEL_264;
      }
      uint64_t v154 = *(void *)(v151 + 8);
      if (*(char *)(v154 + 39) < 0) {
        break;
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)(v154 + 16);
      *(void *)&char __dst[16] = *(void *)(v154 + 32);
      if (v153 < 0) {
        goto LABEL_262;
      }
LABEL_263:
      *(_OWORD *)__src = *(_OWORD *)__dst;
      __src[2] = *(void **)&__dst[16];
LABEL_264:
      if (v339 < 2) {
        unsigned int v155 = 0;
      }
      else {
        unsigned int v155 = *(unsigned __int8 *)(*(void *)(v151 + 8) + 264);
      }
      memset(__dst, 0, 24);
      sub_100653A30(*(void *)(v151 + 8), 2, __dst);
      sub_10065F600(v156, (void *)&v404 + 3 * v155, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653A30(*(void *)(v151 + 8), 4, v385);
      uint64_t v157 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v157, &buf[24 * v155], (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653A30(*(void *)(v151 + 8), 16, v385);
      uint64_t v158 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v158, (void *)v393 + 3 * v155, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653BD0(*(void *)(v151 + 8), 2, v385);
      uint64_t v159 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v159, (void *)v391 + 3 * v155, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653BD0(*(void *)(v151 + 8), 4, v385);
      uint64_t v160 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v160, (void *)v389 + 3 * v155, (unsigned __int8 **)__dst, 0xFFFFu);
      sub_100653BD0(*(void *)(v151 + 8), 16, v385);
      uint64_t v161 = *(void *)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      *(_OWORD *)__n128 __dst = *(_OWORD *)v385;
      *(void *)&char __dst[16] = v386;
      sub_10065F600(v161, (void *)v387 + 3 * v155, (unsigned __int8 **)__dst, 0xFFFFu);
      long long v133 = *(const void **)__dst;
      if (*(void *)__dst)
      {
        *(void *)&char __dst[8] = *(void *)__dst;
        operator delete(*(void **)__dst);
      }
      v151 += 16;
      if ((char *)v151 == v356) {
        goto LABEL_283;
      }
    }
    sub_10003B098(__dst, *(void **)(v154 + 16), *(void *)(v154 + 24));
    if ((*((unsigned char *)__src + 23) & 0x80) == 0) {
      goto LABEL_263;
    }
LABEL_262:
    operator delete(*__src);
    goto LABEL_263;
  }
LABEL_283:
  uint64_t v162 = (uint64_t)v358;
  if (v359 == v358) {
    goto LABEL_299;
  }
  do
  {
    size_t v163 = sub_100045F00(*(void *)(v162 + 8) + 224);
    long long v133 = (const void *)sub_10004A6E4(*(void *)(v162 + 8) + 224);
    if (v339 < 2)
    {
      unsigned int v164 = 0;
      if (!v163) {
        goto LABEL_290;
      }
    }
    else
    {
      unsigned int v164 = *(unsigned __int8 *)(*(void *)(v162 + 8) + 264);
      if (!v163) {
        goto LABEL_290;
      }
    }
    uint64_t v165 = *((unsigned __int16 *)&v417 + v164);
    if (v163 <= v412[v164] - v165)
    {
      uint64_t v166 = v164;
      long long v133 = memcpy(&v421[1650 * v164 + v165], v133, v163);
      *((_WORD *)&v417 + v166) = v165 + v163;
    }
LABEL_290:
    v162 += 16;
  }
  while ((char *)v162 != v359);
  uint64_t v167 = (uint64_t)v358;
  if ((char *)v162 != v358)
  {
    do
    {
      size_t v168 = sub_100045F00(*(void *)(v167 + 8) + 48);
      long long v133 = (const void *)sub_10004A6E4(*(void *)(v167 + 8) + 48);
      if (v339 < 2)
      {
        unsigned int v169 = 0;
        if (v168)
        {
LABEL_296:
          uint64_t v170 = *((unsigned __int16 *)&v417 + v169);
          if (v168 <= v412[v169] - v170)
          {
            uint64_t v171 = v169;
            long long v133 = memcpy(&v421[1650 * v169 + v170], v133, v168);
            *((_WORD *)&v417 + v171) = v170 + v168;
          }
        }
      }
      else
      {
        unsigned int v169 = *(unsigned __int8 *)(*(void *)(v167 + 8) + 264);
        if (v168) {
          goto LABEL_296;
        }
      }
      v167 += 16;
    }
    while ((char *)v167 != v359);
  }
LABEL_299:
  if ((_BYTE)v343)
  {
    __int16 v172 = v417;
    long long v133 = (const void *)sub_100662A6C((uint64_t)v133, &v421[(unsigned __int16)v417], (unsigned __int16)(v332 - v417), (long long **)v393, 0x10u, (void **)v335, v337);
    LOWORD(v417) = (_WORD)v133 + v172;
  }
  if (BYTE1(v343))
  {
    __int16 v173 = WORD1(v417);
    long long v133 = (const void *)sub_100662A6C((uint64_t)v133, &v427[WORD1(v417)], (unsigned __int16)(v330 - WORD1(v417)), (long long **)&v393[1] + 1, 0x10u, (void **)v335, v337);
    WORD1(v417) = (_WORD)v133 + v173;
  }
  if (v344)
  {
    unsigned __int16 v174 = v418;
    long long v133 = (const void *)sub_100662A6C((uint64_t)v133, &v427[v418 + 4950], (unsigned __int16)(v327 - v418), (long long **)&v394, 0x10u, (void **)v335, v337);
    unsigned __int16 v418 = (_WORD)v133 + v174;
  }
  if (v339)
  {
    uint64_t v175 = 0;
    v176 = &v343;
    v177 = (__int16 *)v412;
    v178 = &v417;
    v179 = v421;
    do
    {
      uint64_t v180 = *(unsigned __int16 *)v178;
      __int16 v182 = *v177;
      v177 += 4;
      __int16 v181 = v182;
      uint64_t v183 = sub_100662A6C((uint64_t)v133, &v179[v180], (unsigned __int16)(v182 - v180), (long long **)&buf[v175], 4u, (void **)v335, v337);
      LOWORD(v180) = v183 + v180;
      uint64_t v184 = sub_100662A6C(v183, &v179[(unsigned __int16)v180], (unsigned __int16)(v182 - v180), (long long **)((char *)&v404 + v175), 2u, (void **)v335, v337);
      unsigned __int16 v185 = v184 + v180;
      unsigned __int16 v186 = v185;
      if (!*(unsigned char *)v176)
      {
        uint64_t v184 = sub_100662A6C(v184, &v179[v185], (unsigned __int16)(v181 - v185), (long long **)((char *)v393 + v175), 0x10u, (void **)v335, v337);
        unsigned __int16 v186 = v184 + v185;
        *(_WORD *)v178 = v184 + v185;
      }
      uint64_t v187 = sub_100662E9C(v184, &v179[v186], (unsigned __int16)(v181 - v186), (long long **)((char *)v391 + v175), 2u, v336);
      __int16 v188 = v187 + v186;
      uint64_t v189 = sub_100662E9C(v187, &v179[(unsigned __int16)(v187 + v186)], (unsigned __int16)(v181 - (v187 + v186)), (long long **)((char *)v389 + v175), 4u, v336);
      unsigned __int16 v190 = v189 + v188;
      long long v133 = (const void *)sub_100662E9C(v189, &v179[v190], (unsigned __int16)(v181 - v190), (long long **)((char *)v387 + v175), 0x10u, v336);
      *(_WORD *)v178 = (_WORD)v133 + v190;
      v178 = (uint64_t *)((char *)v178 + 2);
      v175 += 24;
      v176 = (int *)((char *)v176 + 1);
      v179 += 1650;
    }
    while (24 * v339 != v175);
  }
  uint64_t v191 = (uint64_t)v358;
  for (uint64_t j = __src; (char *)v191 != v359; v191 += 16)
  {
    memset(__dst, 0, 24);
    v193 = sub_100051B34((uint64_t *)__dst, *(void *)(v191 + 8) + 112);
    if (v339 < 2) {
      unsigned int v194 = 0;
    }
    else {
      unsigned int v194 = *(unsigned __int8 *)(*(void *)(v191 + 8) + 264);
    }
    uint64_t v195 = *((unsigned __int16 *)&v417 + v194);
    *((_WORD *)&v417 + v194) = sub_100663108((uint64_t)v193, (uint64_t)&v421[1650 * v194 + v195], (unsigned __int16)v412[v194] - (unsigned __int16)v195, __dst, a10, 2)+ v195;
    sub_10004BA8C((uint64_t)__dst, *(void **)&__dst[8]);
  }
  uint64_t v196 = (uint64_t)v356;
  if (v356 != v355)
  {
    uint64_t v196 = (uint64_t)v355;
    do
    {
      memset(__dst, 0, 24);
      v197 = sub_100051B34((uint64_t *)__dst, *(void *)(v196 + 8) + 112);
      if (v339 < 2) {
        unsigned int v198 = 0;
      }
      else {
        unsigned int v198 = *(unsigned __int8 *)(*(void *)(v196 + 8) + 264);
      }
      uint64_t v199 = *((unsigned __int16 *)&v417 + v198);
      *((_WORD *)&v417 + v198) = sub_100663108((uint64_t)v197, (uint64_t)&v421[1650 * v198 + v199], (unsigned __int16)v412[v198] - (unsigned __int16)v199, __dst, a10, 2)+ v199;
      sub_10004BA8C((uint64_t)__dst, *(void **)&__dst[8]);
      v196 += 16;
    }
    while ((char *)v196 != v356);
  }
  unint64_t v200 = *((unsigned __int8 *)__src + 23);
  unsigned __int8 v201 = v200;
  if ((v200 & 0x80u) == 0) {
    unint64_t v202 = *((unsigned __int8 *)__src + 23);
  }
  else {
    unint64_t v202 = (unint64_t)__src[1];
  }
  if (v202)
  {
    char v203 = -21;
    if (v337[1] == *v337) {
      char v203 = 0;
    }
    unsigned __int8 v204 = v203 + v332;
    BOOL v205 = (v332 - v417) > v204;
    if ((v332 - v417) >= v204) {
      unsigned __int8 v204 = v332 - v417;
    }
    int v206 = v205;
    unint64_t v207 = v204 - 2;
    if (v202 <= v207) {
      v208 = __src[1];
    }
    else {
      LOBYTE(v208) = v207;
    }
    if (v202 <= v207) {
      LOBYTE(v207) = *((unsigned char *)__src + 23);
    }
    if ((v200 & 0x80u) != 0) {
      LOBYTE(v207) = (_BYTE)v208;
    }
    if (v202 + 2 <= (v332 - v417)) {
      int v209 = 1;
    }
    else {
      int v209 = v206;
    }
    if (v209) {
      v210 = (void **)v421;
    }
    else {
      v210 = __p;
    }
    if (v209) {
      v211 = &v417;
    }
    else {
      v211 = &v415;
    }
    char v212 = v207;
    if ((char)v200 < 0)
    {
      if ((unint64_t)__src[1] > v207)
      {
        v385[0] = (size_t)__src[1];
        size_t v342 = v207;
        v213 = (char *)*__src;
        goto LABEL_353;
      }
    }
    else if (v207 < v200)
    {
      v385[0] = *((unsigned __int8 *)__src + 23);
      size_t v342 = v207;
      v213 = (char *)__src;
LABEL_353:
      v341 = v213;
      v214 = (char *)malloc_type_calloc(v207 + 1, 1uLL, 0x100004077774924uLL);
      v340 = v214;
      v215 = iconv_open("UTF-8", "UTF-8");
      if (iconv(v215, &v341, v385, &v340, &v342))
      {
        v216 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
        {
          if (*((char *)__src + 23) >= 0) {
            v217 = __src;
          }
          else {
            v217 = *__src;
          }
          *(_DWORD *)__n128 __dst = 136315394;
          *(void *)&__dst[4] = v217;
          *(_WORD *)&__dst[12] = 2080;
          *(void *)&__dst[14] = v214;
          _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_INFO, "Adjusted advertisement name \"%s\" to fit - using \"%s\"", __dst, 0x16u);
        }
      }
      iconv_close(v215);
      free(v214);
      LOBYTE(v207) = v212 - v342;
      unsigned __int8 v201 = *((unsigned char *)__src + 23);
    }
    __int16 v218 = v207;
    uint64_t v219 = *(unsigned __int16 *)v211;
    *(_WORD *)v211 = v219 + 1;
    *((unsigned char *)v210 + v219) = v207 + 1;
    unsigned __int16 v220 = v219 + 2;
    if ((v201 & 0x80) != 0)
    {
      uint64_t j = *__src;
      if ((unint64_t)__src[1] > v207) {
        char v221 = 8;
      }
      else {
        char v221 = 9;
      }
    }
    else if (v207 < (unint64_t)v201)
    {
      char v221 = 8;
    }
    else
    {
      char v221 = 9;
    }
    *(_WORD *)v211 = v220;
    *((unsigned char *)v210 + (unsigned __int16)(v219 + 1)) = v221;
    memcpy((char *)v210 + v220, j, v207);
    *(_WORD *)v211 = v220 + v218;
    uint64_t v196 = (uint64_t)v356;
  }
  uint64_t v222 = (uint64_t)v355;
  if ((char *)v196 != v355)
  {
    while (2)
    {
      size_t v223 = sub_100045F00(*(void *)(v222 + 8) + 224);
      v224 = (const void *)sub_10004A6E4(*(void *)(v222 + 8) + 224);
      if (v339 < 2)
      {
        unsigned int v225 = 0;
        if (!v223) {
          goto LABEL_375;
        }
      }
      else
      {
        unsigned int v225 = *(unsigned __int8 *)(*(void *)(v222 + 8) + 264);
        if (!v223) {
          goto LABEL_375;
        }
      }
      uint64_t v226 = *((unsigned __int16 *)&v417 + v225);
      if (v223 <= v412[v225] - v226)
      {
        uint64_t v227 = v225;
        memcpy(&v421[1650 * v225 + v226], v224, v223);
        *((_WORD *)&v417 + v227) = v226 + v223;
      }
LABEL_375:
      v222 += 16;
      if ((char *)v222 != v356) {
        continue;
      }
      break;
    }
    uint64_t v228 = (uint64_t)v355;
    if ((char *)v222 != v355)
    {
      while (2)
      {
        size_t v229 = sub_100045F00(*(void *)(v228 + 8) + 48);
        v230 = (const void *)sub_10004A6E4(*(void *)(v228 + 8) + 48);
        if (v339 < 2)
        {
          unsigned int v231 = 0;
          if (!v229) {
            goto LABEL_383;
          }
        }
        else
        {
          unsigned int v231 = *(unsigned __int8 *)(*(void *)(v228 + 8) + 264);
          if (!v229) {
            goto LABEL_383;
          }
        }
        uint64_t v232 = *((unsigned __int16 *)&v417 + v231);
        if (v229 <= v412[v231] - v232)
        {
          uint64_t v233 = v231;
          memcpy(&v421[1650 * v231 + v232], v230, v229);
          *((_WORD *)&v417 + v233) = v232 + v229;
        }
LABEL_383:
        v228 += 16;
        if ((char *)v228 == v356) {
          break;
        }
        continue;
      }
    }
  }
  uint64_t v234 = (uint64_t)v349;
  uint64_t v235 = (uint64_t)v350;
  if (v350 == v349)
  {
    uint64_t v234 = (uint64_t)v350;
  }
  else
  {
    BOOL v236 = v339 > 1;
    v237 = &v421[1650 * v236];
    v238 = (_WORD *)((unint64_t)&v417 | (2 * v236));
    do
    {
      size_t v239 = sub_100045F00(*(void *)(v234 + 8) + 152);
      if (v239)
      {
        v240 = (const void *)sub_10004A6E4(*(void *)(v234 + 8) + 152);
        unint64_t v241 = v239 + 2;
        if (v239 != -2)
        {
          uint64_t v242 = (unsigned __int16)*v238;
          uint64_t v243 = 1650 - v242;
          if (v241 <= 1650 - v242)
          {
            v237[v242] = v239 + 1;
            __int16 v245 = v242 + 2;
            v237[(unsigned __int16)(v242 + 1)] = -1;
            memcpy(&v237[(unsigned __int16)(v242 + 2)], v240, v239);
            _WORD *v238 = v245 + v239;
          }
          else
          {
            v244 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__n128 __dst = 67109632;
              *(_DWORD *)&__dst[4] = v236;
              *(_WORD *)&char __dst[8] = 2048;
              *(void *)&__dst[10] = v241;
              *(_WORD *)&__dst[18] = 2048;
              *(void *)&__dst[20] = v243;
              _os_log_impl((void *)&_mh_execute_header, v244, OS_LOG_TYPE_DEFAULT, "Non Apple manufacturer data cannot fit in advertisement instance %u mfgDataLen %zu available space %lu", __dst, 0x1Cu);
            }
          }
        }
      }
      v234 += 16;
    }
    while ((void *)v234 != v350);
    uint64_t v235 = (uint64_t)v349;
  }
  v246 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)__n128 __dst = 134218496;
    *(void *)&__dst[4] = (v356 - v355) >> 4;
    *(_WORD *)&__dst[12] = 2048;
    *(void *)&__dst[14] = (v359 - v358) >> 4;
    *(_WORD *)&__dst[22] = 2048;
    *(void *)&uint8_t __dst[24] = (v234 - v235) >> 4;
    _os_log_impl((void *)&_mh_execute_header, v246, OS_LOG_TYPE_INFO, "dameon %lu fg %lu lp %lu", __dst, 0x20u);
    uint64_t v235 = (uint64_t)v349;
    uint64_t v234 = (uint64_t)v350;
  }
  if (v234 != v235)
  {
    BOOL v247 = v339 > 1;
    v248 = &v421[1650 * v247];
    v249 = (_WORD *)((unint64_t)&v417 | (2 * v247));
    do
    {
      uint64_t v250 = sub_100045F00(*(void *)(v235 + 8) + 136);
      uint64_t v251 = v250;
      if (v250)
      {
        if (v250 == 7)
        {
          v252 = (int *)sub_10004A6E4(*(void *)(v235 + 8) + 136);
          uint64_t v253 = (unsigned __int16)*v249;
          if ((unint64_t)(v253 - 1651) > 0xFFFFFFFFFFFFFFF6)
          {
            v257 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__n128 __dst = 67109632;
              *(_DWORD *)&__dst[4] = v247;
              *(_WORD *)&char __dst[8] = 1024;
              *(_DWORD *)&__dst[10] = 9;
              *(_WORD *)&__dst[14] = 2048;
              *(void *)&char __dst[16] = 1650 - v253;
              _os_log_impl((void *)&_mh_execute_header, v257, OS_LOG_TYPE_DEFAULT, "LE Bluetooth Device Address cannot fit in advertisement instance %u leBtAddrAdStructLen %hhu available space %lu", __dst, 0x18u);
            }
          }
          else
          {
            v248[v253] = 8;
            v248[(unsigned __int16)(v253 + 1)] = 27;
            v254 = &v248[(unsigned __int16)(v253 + 2)];
            int v255 = *v252;
            *(_DWORD *)((char *)v254 + 3) = *(int *)((char *)v252 + 3);
            _DWORD *v254 = v255;
            _WORD *v249 = v253 + 9;
          }
        }
        else
        {
          v256 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)__n128 __dst = 67109632;
            *(_DWORD *)&__dst[4] = 7;
            *(_WORD *)&char __dst[8] = 2048;
            *(void *)&__dst[10] = v251;
            *(_WORD *)&__dst[18] = 1024;
            *(_DWORD *)&__dst[20] = v247;
            _os_log_error_impl((void *)&_mh_execute_header, v256, OS_LOG_TYPE_ERROR, "Advertisement data for device address must have length %d (len %zu), instance %u", __dst, 0x18u);
          }
        }
      }
      v235 += 16;
    }
    while ((void *)v235 != v350);
  }
  v258 = *v337;
  if (v337[1] != *v337)
  {
    v385[1] = 0;
    v385[0] = 0;
    do
    {
      __dst[0] = 0;
      LOBYTE(v342) = 0;
      int v259 = v258[4];
      long long v383 = *(_OWORD *)v258;
      int v384 = v259;
      sub_1004AF0D4((unsigned __int8 *)&v383, __dst, &v342);
      *((unsigned char *)v385 + __dst[0]) |= 1 << v342;
      v258 += 5;
    }
    while (v258 != v337[1]);
    v260 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)__n128 __dst = 68157954;
      *(_DWORD *)&__dst[4] = 16;
      *(_WORD *)&char __dst[8] = 2096;
      *(void *)&__dst[10] = v385;
      _os_log_impl((void *)&_mh_execute_header, v260, OS_LOG_TYPE_INFO, "Hashed UUIDs: %.16P", __dst, 0x12u);
    }
    char v261 = v412[0];
    char v262 = v417;
    if ((LOBYTE(v412[0]) - v415) <= 0x14uLL
      && os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_FAULT))
    {
      sub_10078CA94();
    }
    v263 = __p;
    if ((v261 - v262) > 0x14uLL) {
      v263 = (void **)v421;
    }
    v264 = &v415;
    if ((v261 - v262) > 0x14uLL) {
      v264 = &v417;
    }
    uint64_t v265 = *(unsigned __int16 *)v264;
    *((unsigned char *)v263 + v265) = 20;
    *((unsigned char *)v263 + (unsigned __int16)(v265 + 1)) = -1;
    *((unsigned char *)v263 + (unsigned __int16)(v265 + 2)) = 76;
    *((unsigned char *)v263 + (unsigned __int16)(v265 + 3)) = 0;
    *((unsigned char *)v263 + (unsigned __int16)(v265 + 4)) = 1;
    *(_OWORD *)((char *)v263 + (unsigned __int16)(v265 + 5)) = *(_OWORD *)v385;
    *(_WORD *)v264 = v265 + 21;
  }
  uint64_t v266 = (uint64_t)v358;
  if (v359 != v358)
  {
    while (2)
    {
      size_t v267 = sub_100045F00(*(void *)(v266 + 8) + 272);
      v268 = (const void *)sub_10004A6E4(*(void *)(v266 + 8) + 272);
      size_t v269 = sub_100045F00(*(void *)(v266 + 8) + 288);
      v270 = (const void *)sub_10004A6E4(*(void *)(v266 + 8) + 288);
      if (v339 < 2)
      {
        uint64_t v271 = 0;
      }
      else
      {
        uint64_t v271 = *(unsigned __int8 *)(*(void *)(v266 + 8) + 264);
        if (v271 == 4)
        {
          unsigned int v272 = *(unsigned __int16 *)(*(void *)v324 + 16904);
          goto LABEL_427;
        }
      }
      unsigned int v272 = 31;
LABEL_427:
      if (v267 - 1 < v272)
      {
        memcpy(&v421[1650 * v271], v268, v267);
        *((_WORD *)&v417 + v271) = v267;
        v338[3336 * v271 + 3318] = 1;
      }
      if (v269 - 1 < v272)
      {
        memcpy((char *)__p + 1650 * v271, v270, v269);
        *((_WORD *)&v415 + v271) = v269;
      }
      v266 += 16;
      if ((char *)v266 == v359) {
        break;
      }
      continue;
    }
  }
  uint64_t v273 = (uint64_t)v355;
  if (v356 != v355)
  {
    while (2)
    {
      size_t v274 = sub_100045F00(*(void *)(v273 + 8) + 272);
      v275 = (const void *)sub_10004A6E4(*(void *)(v273 + 8) + 272);
      size_t v276 = sub_100045F00(*(void *)(v273 + 8) + 288);
      v277 = (const void *)sub_10004A6E4(*(void *)(v273 + 8) + 288);
      if (v339 < 2)
      {
        uint64_t v278 = 0;
      }
      else
      {
        uint64_t v278 = *(unsigned __int8 *)(*(void *)(v273 + 8) + 264);
        if (v278 == 4)
        {
          unsigned int v279 = *(unsigned __int16 *)(*(void *)v324 + 16904);
          goto LABEL_438;
        }
      }
      unsigned int v279 = 31;
LABEL_438:
      if (v274 - 1 < v279)
      {
        memcpy(&v421[1650 * v278], v275, v274);
        *((_WORD *)&v417 + v278) = v274;
        v338[3336 * v278 + 3318] = 1;
      }
      if (v276 - 1 < v279)
      {
        memcpy((char *)__p + 1650 * v278, v277, v276);
        *((_WORD *)&v415 + v278) = v276;
      }
      v273 += 16;
      if ((char *)v273 == v356) {
        break;
      }
      continue;
    }
  }
  if (v339)
  {
    uint64_t v280 = 0;
    uint64_t v281 = 0;
    if (v328) {
      char v282 = 0;
    }
    else {
      char v282 = 3;
    }
    if (v328) {
      char v283 = 3;
    }
    else {
      char v283 = 0;
    }
    v284 = __p;
    v285 = v421;
    do
    {
      v286 = &v338[v280];
      char *v286 = 0;
      *((_WORD *)v286 + 1) = *((_WORD *)&v430 + v281);
      char v287 = v283;
      if (v281)
      {
        char v287 = v282;
        if (v281 != 4) {
          char v287 = 3;
        }
      }
      v286[1] = v287;
      __int16 v288 = *((_WORD *)&v417 + v281);
      if (v288)
      {
        memcpy(&v338[v280 + 5], v285, *((unsigned __int16 *)&v417 + v281));
        *(_WORD *)&v338[v280 + 1656] = v288;
      }
      __int16 v289 = *((_WORD *)&v415 + v281);
      if (v289)
      {
        memcpy(&v338[v280 + 1658], v284, *((unsigned __int16 *)&v415 + v281));
        *(_WORD *)&v338[v280 + 3308] = v289;
      }
      switch((int)v281)
      {
        case 0:
          int v290 = *(unsigned __int16 *)(*(void *)v324 + 17002);
          if (!*(_WORD *)(*(void *)v324 + 17002)) {
            goto LABEL_478;
          }
          v291 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 __dst = 67109120;
            *(_DWORD *)&__dst[4] = v290;
            _os_log_impl((void *)&_mh_execute_header, v291, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for connectable advertisement interval", __dst, 8u);
            LOWORD(v290) = *(_WORD *)(*(void *)v324 + 17002);
          }
          break;
        case 1:
          int v290 = *(unsigned __int16 *)(*(void *)v324 + 17004);
          if (!*(_WORD *)(*(void *)v324 + 17004)) {
            goto LABEL_478;
          }
          v292 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 __dst = 67109120;
            *(_DWORD *)&__dst[4] = v290;
            _os_log_impl((void *)&_mh_execute_header, v292, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for non connectable advertisement interval", __dst, 8u);
            LOWORD(v290) = *(_WORD *)(*(void *)v324 + 17004);
          }
          break;
        case 2:
          int v293 = *(unsigned __int16 *)(*(void *)v324 + 17012);
          if (*(_WORD *)(*(void *)v324 + 17012))
          {
            v294 = qword_100A19F20;
            if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)__n128 __dst = 67109120;
              *(_DWORD *)&__dst[4] = v293;
              _os_log_impl((void *)&_mh_execute_header, v294, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for Contact advertisement interval", __dst, 8u);
              LOWORD(v293) = *(_WORD *)(*(void *)v324 + 17012);
            }
            *((_WORD *)v286 + 1) = v293;
          }
          uint64_t v295 = sub_100017768();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v295 + 184))(v295) & 1) == 0) {
            goto LABEL_480;
          }
          goto LABEL_478;
        case 3:
          int v290 = *(unsigned __int16 *)(*(void *)v324 + 17008);
          if (!*(_WORD *)(*(void *)v324 + 17008)) {
            goto LABEL_478;
          }
          v296 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 __dst = 67109120;
            *(_DWORD *)&__dst[4] = v290;
            _os_log_impl((void *)&_mh_execute_header, v296, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for Object Discovery advertisement interval", __dst, 8u);
            LOWORD(v290) = *(_WORD *)(*(void *)v324 + 17008);
          }
          break;
        case 4:
          int v290 = *(unsigned __int16 *)(*(void *)v324 + 17010);
          if (!*(_WORD *)(*(void *)v324 + 17010)) {
            goto LABEL_478;
          }
          v297 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)__n128 __dst = 67109120;
            *(_DWORD *)&__dst[4] = v290;
            _os_log_impl((void *)&_mh_execute_header, v297, OS_LOG_TYPE_DEFAULT, "Using override value (%d) for Extended advertisement interval", __dst, 8u);
            LOWORD(v290) = *(_WORD *)(*(void *)v324 + 17010);
          }
          break;
        default:
          goto LABEL_478;
      }
      *((_WORD *)v286 + 1) = v290;
LABEL_478:
      v298 = qword_100A19F28;
      if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG))
      {
        _X8 = v286 + 4992;
        __asm { PRFM            #0, [X8] }
        _X8 = v286 + 3338;
        int v304 = *(unsigned __int16 *)&v338[v280 + 1656];
        _X11 = &v338[v280 + 6644];
        uint64_t v306 = v412[v281];
        __asm { PRFM            #0, [X11] }
        LODWORD(_X11) = *(unsigned __int16 *)&v338[v280 + 3308];
        __asm { PRFM            #0, [X8] }
        LODWORD(_X8) = *((unsigned __int16 *)v286 + 1);
        int v309 = v338[v280 + 3310];
        int v310 = v338[v280 + 3317];
        int v311 = v286[1];
        *(_DWORD *)__n128 __dst = 67112706;
        *(_DWORD *)&__dst[4] = v281;
        *(_WORD *)&char __dst[8] = 1040;
        *(_DWORD *)&__dst[10] = v304;
        *(_WORD *)&__dst[14] = 2096;
        *(void *)&char __dst[16] = &v338[v280 + 5];
        *(_WORD *)&uint8_t __dst[24] = 1024;
        *(_DWORD *)&__dst[26] = v304;
        *(_WORD *)&__dst[30] = 2048;
        uint64_t v362 = v306;
        __int16 v363 = 1040;
        int v364 = (int)_X11;
        __int16 v365 = 2096;
        uint64_t v366 = (uint64_t)&v338[v280 + 1658];
        __int16 v367 = 1024;
        int v368 = (int)_X11;
        __int16 v369 = 2048;
        uint64_t v370 = v306;
        __int16 v371 = 1024;
        int v372 = (int)_X8;
        __int16 v373 = 1040;
        int v374 = 6;
        __int16 v375 = 2096;
        uint64_t v376 = (uint64_t)&v338[v280 + 3311];
        __int16 v377 = 1024;
        int v378 = v309;
        __int16 v379 = 1024;
        int v380 = v310;
        __int16 v381 = 1024;
        int v382 = v311;
        _os_log_debug_impl((void *)&_mh_execute_header, v298, OS_LOG_TYPE_DEBUG, "%d. AdvData=%.*P(%d/%ld) ScanRspData=%.*P(%d/%ld) interval=%x address:%.6P type:%d overrideAddress:%d ADVType:%d", __dst, 0x70u);
      }
LABEL_480:
      ++v281;
      v280 += 3336;
      v284 = (void **)((char *)v284 + 1650);
      v285 += 1650;
    }
    while (3336 * v339 != v280);
  }
  for (uint64_t k = 0; k != -120; k -= 24)
  {
    v313 = *(void **)((char *)&v387[6] + k);
    if (v313)
    {
      *(void *)((char *)&v387[6] + k + 8) = v313;
      operator delete(v313);
    }
  }
  for (uint64_t m = 0; m != -120; m -= 24)
  {
    v315 = *(void **)((char *)&v389[6] + m);
    if (v315)
    {
      *(void *)((char *)&v389[6] + m + 8) = v315;
      operator delete(v315);
    }
  }
  for (uint64_t n = 0; n != -120; n -= 24)
  {
    v317 = *(void **)((char *)&v391[6] + n);
    if (v317)
    {
      *(void *)((char *)&v391[6] + n + 8) = v317;
      operator delete(v317);
    }
  }
  for (iuint64_t i = 0; ii != -120; ii -= 24)
  {
    v319 = *(void **)((char *)&v394 + ii);
    if (v319)
    {
      *(void *)((char *)&v394 + ii + 8) = v319;
      operator delete(v319);
    }
  }
  for (juint64_t j = 0; jj != -120; jj -= 24)
  {
    v321 = *(void **)((char *)&v402 + jj);
    if (v321)
    {
      *(void *)((char *)&v402 + jj + 8) = v321;
      operator delete(v321);
    }
  }
  for (kuint64_t k = 0; kk != -120; kk -= 24)
  {
    v323 = *(void **)((char *)&v410 + kk);
    if (v323)
    {
      *(void *)((char *)&v410 + kk + 8) = v323;
      operator delete(v323);
    }
  }
LABEL_505:
  *(void *)v421 = &v349;
  sub_100450B58((void ***)v421);
  *(void *)v421 = &v352;
  sub_100450B58((void ***)v421);
  *(void *)v421 = &v355;
  sub_100450B58((void ***)v421);
  *(void *)v421 = &v358;
  sub_100450B58((void ***)v421);
}

void sub_100662714(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43,uint64_t a44,uint64_t a45,char a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52)
{
  unsigned int v53 = (void *)STACK[0x4A0];
  if (STACK[0x4A0])
  {
    STACK[0x4A8] = (unint64_t)v53;
    operator delete(v53);
  }
  int v54 = (void *)STACK[0x560];
  if (STACK[0x560])
  {
    STACK[0x568] = (unint64_t)v54;
    operator delete(v54);
  }
  STACK[0x25A0] = (unint64_t)&a43;
  sub_100450B58((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a46;
  sub_100450B58((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a49;
  sub_100450B58((void ***)&STACK[0x25A0]);
  STACK[0x25A0] = (unint64_t)&a52;
  sub_100450B58((void ***)&STACK[0x25A0]);
  _Unwind_Resume(a1);
}

void sub_100662A30(void *a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a1[1] - *a1) >> 2);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    sub_10066713C(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 20 * a2;
  }
}

uint64_t sub_100662A6C(uint64_t a1, unsigned char *a2, unsigned int a3, long long **a4, unsigned int a5, void **a6, void **a7)
{
  switch(a5)
  {
    case 2u:
      char v13 = 2;
      char v14 = 3;
      break;
    case 0x10u:
      char v13 = 6;
      char v14 = 7;
      break;
    case 4u:
      char v13 = 4;
      char v14 = 5;
      break;
    default:
      return 0;
  }
  uint64_t v15 = (char *)a4[1] - (char *)*a4;
  if (!v15 || a5 + 2 > a3) {
    return 0;
  }
  unint64_t v18 = 0xCCCCCCCCCCCCCCCDLL * (v15 >> 2);
  unsigned int v19 = (unsigned __int16)(a3 - 2);
  if (v18 >= v19 / a5) {
    unint64_t v20 = v19 / a5;
  }
  else {
    unint64_t v20 = v18;
  }
  unsigned __int16 v56 = v20 * a5 + 1;
  log = qword_100A19F28;
  if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)stat buf = 67110144;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = 2;
    *(_WORD *)&unsigned char buf[14] = 1024;
    unsigned int v58 = v19;
    __int16 v59 = 1024;
    int v60 = v20;
    __int16 v61 = 1024;
    int v62 = v56;
    _os_log_debug_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEBUG, "uuidsToData size:%d position:%d sizeRemaining:%d numUUISThatFit:%d advStructureLen:%d", buf, 0x20u);
  }
  *a2 = v56;
  if (0xCCCCCCCCCCCCCCCDLL * (((char *)a4[1] - (char *)*a4) >> 2) <= v20) {
    char v21 = v14;
  }
  else {
    char v21 = v13;
  }
  a2[1] = v21;
  long long v22 = *a4;
  if (*a4 == a4[1])
  {
    return 2;
  }
  else
  {
    int v23 = a3 - a5;
    unsigned __int16 v16 = 2;
    do
    {
      if (v23 >= v16)
      {
        long long v28 = *v22;
        unsigned int v58 = *((_DWORD *)v22 + 4);
        *(_OWORD *)stat buf = v28;
        sub_10022A6F4(&a2[v16], buf, 1);
        uint64_t v30 = (char *)a6[1];
        uint64_t v29 = (char *)a6[2];
        if (v30 >= v29)
        {
          unint64_t v38 = 0xCCCCCCCCCCCCCCCDLL * ((v30 - (unsigned char *)*a6) >> 2);
          unint64_t v39 = v38 + 1;
          if (v38 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          unint64_t v40 = 0xCCCCCCCCCCCCCCCDLL * ((v29 - (unsigned char *)*a6) >> 2);
          if (2 * v40 > v39) {
            unint64_t v39 = 2 * v40;
          }
          if (v40 >= 0x666666666666666) {
            unint64_t v41 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41) {
            unsigned int v42 = (char *)sub_10003767C((uint64_t)(a6 + 2), v41);
          }
          else {
            unsigned int v42 = 0;
          }
          int v49 = &v42[20 * v38];
          long long v50 = *v22;
          *((_DWORD *)v49 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)int v49 = v50;
          uint64_t v52 = (char *)*a6;
          int v51 = (char *)a6[1];
          unsigned int v53 = v49;
          if (v51 != *a6)
          {
            do
            {
              long long v54 = *(_OWORD *)(v51 - 20);
              *((_DWORD *)v53 - 1) = *((_DWORD *)v51 - 1);
              *(_OWORD *)(v53 - 20) = v54;
              v53 -= 20;
              v51 -= 20;
            }
            while (v51 != v52);
            int v51 = (char *)*a6;
          }
          uint64_t v32 = v49 + 20;
          *a6 = v53;
          a6[1] = v49 + 20;
          a6[2] = &v42[20 * v41];
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          long long v31 = *v22;
          *((_DWORD *)v30 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)uint64_t v30 = v31;
          uint64_t v32 = v30 + 20;
        }
        v16 += a5;
        a6[1] = v32;
      }
      else
      {
        unsigned int v25 = (char *)a7[1];
        char v24 = (char *)a7[2];
        if (v25 >= v24)
        {
          unint64_t v33 = 0xCCCCCCCCCCCCCCCDLL * ((v25 - (unsigned char *)*a7) >> 2);
          unint64_t v34 = v33 + 1;
          if (v33 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((v24 - (unsigned char *)*a7) >> 2);
          if (2 * v35 > v34) {
            unint64_t v34 = 2 * v35;
          }
          if (v35 >= 0x666666666666666) {
            unint64_t v36 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v36 = v34;
          }
          if (v36) {
            uint64_t v37 = (char *)sub_10003767C((uint64_t)(a7 + 2), v36);
          }
          else {
            uint64_t v37 = 0;
          }
          unint64_t v43 = &v37[20 * v33];
          long long v44 = *v22;
          *((_DWORD *)v43 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)unint64_t v43 = v44;
          unsigned int v46 = (char *)*a7;
          uint64_t v45 = (char *)a7[1];
          uint64_t v47 = v43;
          if (v45 != *a7)
          {
            do
            {
              long long v48 = *(_OWORD *)(v45 - 20);
              *((_DWORD *)v47 - 1) = *((_DWORD *)v45 - 1);
              *(_OWORD *)(v47 - 20) = v48;
              v47 -= 20;
              v45 -= 20;
            }
            while (v45 != v46);
            uint64_t v45 = (char *)*a7;
          }
          unsigned int v27 = v43 + 20;
          *a7 = v47;
          a7[1] = v43 + 20;
          a7[2] = &v37[20 * v36];
          if (v45) {
            operator delete(v45);
          }
        }
        else
        {
          long long v26 = *v22;
          *((_DWORD *)v25 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)unsigned int v25 = v26;
          unsigned int v27 = v25 + 20;
        }
        a7[1] = v27;
      }
      long long v22 = (long long *)((char *)v22 + 20);
    }
    while (v22 != a4[1]);
  }
  return v16;
}

uint64_t sub_100662E9C(uint64_t a1, unsigned char *a2, unsigned int a3, long long **a4, unsigned int a5, void **a6)
{
  uint64_t v6 = (char *)a4[1] - (char *)*a4;
  if (!v6) {
    return 0;
  }
  __int16 v7 = a5;
  if (a5 + 2 > a3) {
    return 0;
  }
  unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * (v6 >> 2);
  if (v13 >= (a3 - 2) / a5) {
    LOBYTE(v13) = (a3 - 2) / a5;
  }
  *a2 = v13 * a5 + 1;
  switch(a5)
  {
    case 2u:
      char v14 = 20;
      break;
    case 0x10u:
      char v14 = 21;
      break;
    case 4u:
      char v14 = 31;
      break;
    default:
      return 0;
  }
  a2[1] = v14;
  unsigned __int16 v16 = *a4;
  uint64_t v15 = a4[1];
  if (*a4 == v15)
  {
    return 2;
  }
  else
  {
    int v17 = a3 - a5;
    uint64_t v34 = (uint64_t)(a6 + 2);
    unsigned __int16 v8 = 2;
    do
    {
      if (v17 >= v8)
      {
        long long v18 = *v16;
        int v36 = *((_DWORD *)v16 + 4);
        long long v35 = v18;
        sub_10022A6F4(&a2[v8], (unsigned __int8 *)&v35, 1);
        unint64_t v20 = (char *)a6[1];
        unsigned int v19 = (char *)a6[2];
        if (v20 >= v19)
        {
          unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (unsigned char *)*a6) >> 2);
          unint64_t v24 = v23 + 1;
          if (v23 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          unint64_t v25 = 0xCCCCCCCCCCCCCCCDLL * ((v19 - (unsigned char *)*a6) >> 2);
          if (2 * v25 > v24) {
            unint64_t v24 = 2 * v25;
          }
          if (v25 >= 0x666666666666666) {
            unint64_t v26 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v26 = v24;
          }
          if (v26) {
            unsigned int v27 = (char *)sub_10003767C(v34, v26);
          }
          else {
            unsigned int v27 = 0;
          }
          long long v28 = &v27[20 * v23];
          long long v29 = *v16;
          *((_DWORD *)v28 + 4) = *((_DWORD *)v16 + 4);
          *(_OWORD *)long long v28 = v29;
          long long v31 = (char *)*a6;
          uint64_t v30 = (char *)a6[1];
          uint64_t v32 = v28;
          if (v30 != *a6)
          {
            do
            {
              long long v33 = *(_OWORD *)(v30 - 20);
              *((_DWORD *)v32 - 1) = *((_DWORD *)v30 - 1);
              *(_OWORD *)(v32 - 20) = v33;
              v32 -= 20;
              v30 -= 20;
            }
            while (v30 != v31);
            uint64_t v30 = (char *)*a6;
          }
          long long v22 = v28 + 20;
          *a6 = v32;
          a6[1] = v28 + 20;
          a6[2] = &v27[20 * v26];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          long long v21 = *v16;
          *((_DWORD *)v20 + 4) = *((_DWORD *)v16 + 4);
          *(_OWORD *)unint64_t v20 = v21;
          long long v22 = v20 + 20;
        }
        v8 += v7;
        a6[1] = v22;
        uint64_t v15 = a4[1];
      }
      unsigned __int16 v16 = (long long *)((char *)v16 + 20);
    }
    while (v16 != v15);
  }
  return v8;
}

uint64_t sub_100663108(uint64_t a1, uint64_t a2, __int16 a3, void *a4, uint64_t **a5, int a6)
{
  __int16 v7 = a4 + 1;
  uint64_t v6 = (void *)*a4;
  if ((void *)*a4 == a4 + 1)
  {
LABEL_17:
    LOWORD(v10) = 0;
  }
  else
  {
    int v10 = 0;
    __int16 v11 = a6 + 1;
    do
    {
      __int16 v12 = sub_100045F00((uint64_t)(v6 + 7));
      if ((unsigned __int16)(v11 + v12) > (unsigned __int16)(a3 - v10)) {
        break;
      }
      switch(a6)
      {
        case 2:
          char v13 = 22;
          break;
        case 16:
          char v13 = 33;
          break;
        case 4:
          char v13 = 32;
          break;
        default:
          goto LABEL_17;
      }
      *(unsigned char *)(a2 + (unsigned __int16)v10) = v11 + v12;
      *(unsigned char *)(a2 + (unsigned __int16)(v10 + 1)) = v13;
      long long v26 = *((_OWORD *)v6 + 2);
      int v27 = *((_DWORD *)v6 + 12);
      sub_10022A6F4((unsigned char *)(a2 + (unsigned __int16)(v10 + 2)), (unsigned __int8 *)&v26, 1);
      int v14 = v10 + 2 + a6;
      uint64_t v15 = (const void *)sub_10004A6E4((uint64_t)(v6 + 7));
      size_t v16 = sub_100045F00((uint64_t)(v6 + 7));
      memcpy((void *)(a2 + (unsigned __int16)v14), v15, v16);
      int v17 = sub_100045F00((uint64_t)(v6 + 7));
      unint64_t v25 = v6 + 4;
      long long v18 = sub_100085C30(a5, (unsigned __int8 *)v6 + 32, (uint64_t)&unk_1007BE9D0, &v25);
      sub_100049EE0((uint64_t)v18 + 56, (uint64_t)(v6 + 7));
      unsigned int v19 = (void *)v6[1];
      if (v19)
      {
        do
        {
          unint64_t v20 = v19;
          unsigned int v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          unint64_t v20 = (void *)v6[2];
          BOOL v21 = *v20 == (void)v6;
          uint64_t v6 = v20;
        }
        while (!v21);
      }
      int v10 = v14 + v17;
      uint64_t v6 = v20;
    }
    while (v20 != v7);
  }
  return (unsigned __int16)v10;
}

BOOL sub_1006632DC(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (*a2 != *a3) {
    return 1;
  }
  if (*((unsigned __int16 *)a2 + 1) != *((unsigned __int16 *)a3 + 1)) {
    return 1;
  }
  if (a2[4] != a3[4]) {
    return 1;
  }
  if (*((unsigned __int16 *)a2 + 828) != *((unsigned __int16 *)a3 + 828)) {
    return 1;
  }
  if (*((unsigned __int16 *)a2 + 1654) != *((unsigned __int16 *)a3 + 1654)) {
    return 1;
  }
  if (a2[3317] != a3[3317]) {
    return 1;
  }
  if (a2[3318] != a3[3318]) {
    return 1;
  }
  size_t v5 = *(unsigned __int16 *)(a1 + 16904);
  if (memcmp(a2 + 5, a3 + 5, v5) || memcmp(a2 + 1658, a3 + 1658, v5)) {
    return 1;
  }
  return *(_DWORD *)(a2 + 3310) != *(_DWORD *)(a3 + 3310) || *(_DWORD *)(a2 + 3313) != *(_DWORD *)(a3 + 3313);
}

void sub_1006633D8(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1004AF8EC();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10066345C;
  v5[3] = &unk_100997570;
  void v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_10066345C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(unsigned int *)(a1 + 40);
  if (!*(void *)(v1 + 8 * v2 + 16952))
  {
    if (v2 == 1)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_100663670;
      block[3] = &unk_100997528;
      void block[4] = v1;
      dispatch_block_t v10 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, block);
      uint64_t v11 = *(unsigned int *)(a1 + 40);
      uint64_t v12 = v1 + 16952;
      char v13 = *(void **)(v12 + 8 * v11);
      *(void *)(v12 + 8 * v11) = v10;

      uint64_t v14 = sub_1004AF8EC();
      sub_1004AFF58(v14, 10000, *(void **)(v12 + 8 * *(unsigned int *)(a1 + 40)));
    }
    else if (!v2)
    {
      dispatch_block_t v4 = dispatch_block_create(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, &stru_1009BD140);
      uint64_t v5 = *(unsigned int *)(a1 + 40);
      uint64_t v6 = v1 + 16952;
      __int16 v7 = *(void **)(v6 + 8 * v5);
      *(void *)(v6 + 8 * v5) = v4;

      uint64_t v8 = sub_1004AF8EC();
      unsigned int v9 = *(void **)(v6 + 8 * *(unsigned int *)(a1 + 40));
      sub_1004AFF58(v8, 10000, v9);
    }
  }
}

void sub_100663580(id a1)
{
  uint64_t v1 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
    sub_10078CB88(v1, v2, v3, v4, v5, v6, v7, v8);
  }
  char v11 = 0;
  sub_10001B8E0(&v11);
  if (!sub_100023020())
  {
    sub_100227AF0();
    sub_10001B910(&v11);
    uint64_t v9 = sub_100017768();
    sub_10004191C(v10, "updateAdvertisement busy with address change timeout");
    sub_1005C8AF4(v9, 4074, (uint64_t)v10, 1);
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
    sub_10078CB54();
  }
  sub_10001B8AC(&v11);
}

void sub_100663644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC((unsigned char *)(v14 - 17));
  _Unwind_Resume(a1);
}

unsigned char *sub_100663670(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
    sub_10078CBFC(v2, v3, v4, v5, v6, v7, v8, v9);
  }
  char v22 = 0;
  uint64_t v10 = sub_100017768();
  sub_10004191C(v20, "LE");
  sub_10004191C(__p, "CrashOnAdvertisingWatchdog");
  int v11 = (*(uint64_t (**)(uint64_t, void **, void **, char *))(*(void *)v10 + 72))(v10, v20, __p, &v22);
  if (v22) {
    int v12 = v11;
  }
  else {
    int v12 = 0;
  }
  if (v19 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0) {
    operator delete(v20[0]);
  }
  if (v12)
  {
    uint64_t v15 = sub_100017768();
    sub_10004191C(v17, "updateAdvertisement in unsettled state timeout");
    sub_1005C8AF4(v15, 4075, (uint64_t)v17, 1);
  }
  sub_100657F28(v1, 0);
  LOBYTE(v20[0]) = 0;
  sub_10001B8E0(v20);
  if (sub_100023020())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
      sub_10078CB54();
    }
  }
  else
  {
    sub_100227AF0();
    sub_1002267A4(1);
    uint64_t v13 = *(void *)(v1 + 48);
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 3221225472;
    void v16[2] = sub_10066388C;
    unsigned char v16[3] = &unk_100997528;
    _OWORD v16[4] = v1;
    sub_1004AFF58(v13, 200, v16);
  }
  return sub_10001B8AC(v20);
}

void sub_100663834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10066388C(uint64_t a1)
{
  return sub_10065915C(*(void *)(a1 + 32), 0);
}

void sub_100663898(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void **)(v2 + 8 * *(unsigned int *)(a1 + 40) + 16952);
  if (v3)
  {
    dispatch_block_cancel(v3);
    uint64_t v4 = v2 + 8 * *(unsigned int *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 16952);
    *(void *)(v4 + 16952) = 0;
  }
}

uint64_t sub_1006638FC(uint64_t a1)
{
  return sub_10065915C(*(void *)(a1 + 32), 1);
}

void sub_100663908(int a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10066404C;
  v3[3] = &unk_100998300;
  int v4 = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_100663984(uint64_t a1)
{
  return sub_10065915C(*(void *)(a1 + 32), 0);
}

uint64_t sub_100663990()
{
  return sub_10065915C();
}

uint64_t sub_10066399C()
{
  return sub_10065915C();
}

uint64_t sub_1006639A8()
{
  return sub_10065915C();
}

uint64_t sub_1006639B4(uint64_t a1, int a2)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 56);
  if (*(unsigned char *)(a1 + 41))
  {
    if (a2 != 4073 && a2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
        sub_10078CD30();
      }
      sub_100657F28(a1, 0);
      buf[0] = 0;
      sub_10001B8E0(buf);
      sub_1002267A4(1);
      sub_10001B910(buf);
      uint64_t v9 = *(void *)(a1 + 48);
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 3221225472;
      void v17[2] = sub_100663DEC;
      void v17[3] = &unk_100997528;
      _OWORD v17[4] = a1;
      sub_100013018(v9, v17);
      sub_10001B8AC(buf);
    }
    else
    {
      int v4 = (unsigned char *)(a1 + 16944);
      uint64_t v5 = qword_100A19F20;
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = "Stopped";
        if (*(_DWORD *)(a1 + 120) == 1) {
          uint64_t v6 = "Started";
        }
        *(_DWORD *)stat buf = 136446466;
        *(void *)&uint8_t buf[4] = v6;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = a2;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{public}s advertising successfully status=%{bluetooth:OI_STATUS}u", buf, 0x12u);
      }
      unsigned int v7 = *(unsigned __int16 *)(a1 + 16968);
      if (*(_WORD *)(a1 + 16968) && (++word_100A14530, !((unsigned __int16)word_100A14530 % v7)))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
          sub_10078CDC8();
        }
      }
      else if (*(_DWORD *)(a1 + 120) == 1)
      {
        sub_100657F28(a1, 2u);
        if (!*(unsigned char *)(a1 + 17072)) {
          sub_1006579B0(a1);
        }
      }
      else
      {
        sub_100657F28(a1, 0);
      }
      memset(buf, 0, sizeof(buf));
      sub_100666F3C((uint64_t *)buf, a1 + 16880);
      uint64_t v10 = *(uint8_t **)buf;
      if (*(uint8_t **)buf != &buf[8])
      {
        do
        {
          (***((void (****)(void, BOOL))v10 + 4))(*((void *)v10 + 4), *(_DWORD *)(a1 + 120) != 0);
          int v11 = (uint8_t *)*((void *)v10 + 1);
          if (v11)
          {
            do
            {
              int v12 = v11;
              int v11 = *(uint8_t **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              int v12 = (uint8_t *)*((void *)v10 + 2);
              BOOL v13 = *(void *)v12 == (void)v10;
              uint64_t v10 = v12;
            }
            while (!v13);
          }
          uint64_t v10 = v12;
        }
        while (v12 != &buf[8]);
      }
      if (a2 == 4073)
      {
        uint64_t v14 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)char v19 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Advertising stopped due to LE_GAP_ADDRESS_REFRESH_IN_PROGRESS, need to update our advertisers", v19, 2u);
        }
        *int v4 = 1;
      }
      else
      {
        uint64_t v15 = *(void *)(a1 + 48);
        v18[0] = _NSConcreteStackBlock;
        v18[1] = 3221225472;
        _DWORD v18[2] = sub_100663DDC;
        __int16 v18[3] = &unk_100997528;
        void v18[4] = a1;
        sub_100013018(v15, v18);
      }
      sub_10003AFE8((uint64_t)v20);
      sub_1000486F0((uint64_t)buf, *(void **)&buf[8]);
    }
  }
  else
  {
    uint64_t v8 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)stat buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Stack is off", buf, 2u);
    }
    sub_100657F28(a1, 0);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_100663D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100663DDC(uint64_t a1)
{
  return sub_10065915C(*(void *)(a1 + 32), *(unsigned __int8 *)(*(void *)(a1 + 32) + 16945));
}

uint64_t sub_100663DEC(uint64_t a1)
{
  return sub_10065915C(*(void *)(a1 + 32), 0);
}

uint64_t sub_100663DF8(uint64_t result, int a2, uint64_t a3, int a4)
{
  if (a2) {
    return result;
  }
  uint64_t v5 = result;
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, result + 56);
  *(unsigned char *)(v5 + 16872) = a4;
  if (a4) {
    int v6 = 2;
  }
  else {
    int v6 = 1;
  }
  *(_DWORD *)(v5 + 136) = v6;
  char v19 = 0;
  sub_10001B8E0(&v19);
  *(_WORD *)(v5 + 16904) = sub_10020AD98();
  sub_10001B910(&v19);
  uint64_t v7 = *(unsigned __int16 *)(v5 + 16904);
  if (v7 >= 0x673)
  {
    uint64_t v8 = qword_100A19F20;
    if (!os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_FAULT))
    {
LABEL_7:
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_10078CDFC(v7, v8, v9, v10, v11, v12, v13, v14);
      }
      *(_WORD *)(v5 + 16904) = 1650;
      goto LABEL_10;
    }
    *(_DWORD *)stat buf = 67109120;
    int v22 = v7;
    _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "fControllerMaxExtendedAdvertisingPayloadSize=%d", buf, 8u);
    uint64_t v7 = *(unsigned __int16 *)(v5 + 16904);
    if (v7 >= 0x673)
    {
      uint64_t v8 = qword_100A19F20;
      goto LABEL_7;
    }
  }
LABEL_10:
  *(unsigned char *)(v5 + 41) = 1;
  sub_10003AFE8((uint64_t)v20);
  uint64_t v15 = *(void *)(v5 + 48);
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 3221225472;
  _DWORD v18[2] = sub_100664040;
  __int16 v18[3] = &unk_100997528;
  void v18[4] = v5;
  sub_100013018(v15, v18);
  size_t v16 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    if (sub_100227CE8()) {
      int v17 = sub_100227CE8();
    }
    else {
      int v17 = 1;
    }
    *(_DWORD *)stat buf = 67109120;
    int v22 = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Stack supports %d advertising instances", buf, 8u);
  }
  sub_10001B8AC(&v19);
  return sub_10003AFB4((uint64_t)v20);
}

void sub_100664010(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
}

uint64_t sub_100664040()
{
  return sub_10065915C();
}

uint64_t sub_10066404C(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009BD220);
  }
  uint64_t v2 = off_1009F8240;
  int v3 = *(_DWORD *)(a1 + 32);

  return sub_1006639B4((uint64_t)v2, v3);
}

uint64_t sub_1006640B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009BD220);
  }
  int v4 = off_1009F8240;
  int v5 = *(_DWORD *)(a1 + 40);
  int v6 = *(unsigned __int8 *)(a1 + 44);

  return sub_100663DF8((uint64_t)v4, v5, a3, v6);
}

uint64_t sub_100664118(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v7 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109632;
    v10[1] = a2;
    __int16 v11 = 1024;
    int v12 = a3;
    __int16 v13 = 1024;
    int v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "setAddressTypeForInstance instance:%d addrType:%d refreshRootKeys:%d", (uint8_t *)v10, 0x14u);
  }
  if (a2 != 1) {
    return 3;
  }
  if ((a3 & 0xFFFFFFFE) != 2) {
    return 0;
  }
  if (a4)
  {
    uint64_t v8 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "setAddressTypeForInstance requires refresh of identity info", (uint8_t *)v10, 2u);
    }
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009BD240);
    }
    if (sub_1006FEF98((__n128 *)qword_1009F7EC8))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
        sub_10078CED4();
      }
      return 148;
    }
  }
  LOBYTE(v10[0]) = 0;
  sub_10001B8E0(v10);
  if (!sub_100229558(a3, 1))
  {
    sub_10001B8AC(v10);
    return 0;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
    sub_10078CE6C();
  }
  sub_10001B8AC(v10);
  return 147;
}

void sub_100664304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_100664320(uint64_t a1, unint64_t a2)
{
  char v5 = 0;
  sub_10001B8E0(&v5);
  uint64_t v3 = sub_10022811C(a2);
  if (v3 && os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_ERROR)) {
    sub_10078CF3C();
  }
  sub_10001B8AC(&v5);
  return v3;
}

void sub_10066439C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1006643B0()
{
  uint64_t v0 = sub_100019878();

  sub_100013018(v0, &stru_1009BD160);
}

void sub_1006643E0(id a1)
{
  char v1 = 0;
  sub_10001B8E0(&v1);
  sub_1002295D0();
  sub_10001B8AC(&v1);
}

void sub_10066441C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_100664430(uint64_t a1)
{
  if (qword_100A14538 != -1) {
    dispatch_once(&qword_100A14538, &stru_1009BD1A0);
  }
  uint64_t v2 = sub_10003FB34();
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 3480))(v2);
  if (result)
  {
    if (!*(void *)(a1 + 17016)) {
      sub_1003733D8();
    }
  }
  return result;
}

void sub_100664584(uint64_t a1, char a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100664608;
  v5[3] = &unk_100998A58;
  void v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_100664608(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  *(unsigned char *)(v1 + 40) = *(unsigned char *)(result + 40);
  if (*(unsigned char *)(v1 + 16874))
  {
    uint64_t v2 = qword_100A19F28;
    if (os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Screen state changed, updating advertisers", v3, 2u);
    }
    return sub_10065915C();
  }
  return result;
}

void sub_100664694(uint64_t a1, char a2)
{
}

void sub_10066469C()
{
  uint64_t v0 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Stream state changed, re-evaluating scan params", v2, 2u);
  }
  uint64_t v1 = sub_100019878();
  sub_100013018(v1, &stru_1009BD180);
}

void sub_100664714(id a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_1009BD220);
  }

  sub_10065915C();
}

void sub_10066476C()
{
}

void sub_100664774(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(v4, "POWER");
  sub_10004191C(__p, "ForceWakeADVConfig");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A14532);
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  if (v5 < 0) {
    operator delete(v4[0]);
  }
}

void sub_100664818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_10066484C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  uint64_t v69 = v3;
  if (v3)
  {
    sub_100037354(v3);
    uint64_t v3 = v69;
  }
  sub_100653A30(v3, 2, __p);
  uint64_t v4 = __p[0];
  char v5 = __p[1];
  sub_100653A30(v69, 4, __p);
  uint64_t v7 = __p[0];
  char v6 = __p[1];
  sub_100653A30(v69, 16, __p);
  uint64_t v8 = __p[0];
  uint64_t v67 = __p[1];
  uint64_t v9 = qword_100A19F20;
  BOOL v10 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
  uint64_t v11 = v69;
  if (v10)
  {
    sub_10003AE4C(*(void *)(a2 + 32), (uint64_t)__p);
    if ((SBYTE7(v77) & 0x80u) == 0) {
      int v12 = __p;
    }
    else {
      int v12 = (void **)__p[0];
    }
    if (*(unsigned char *)(v69 + 12)) {
      __int16 v13 = "";
    }
    else {
      __int16 v13 = "NON-";
    }
    *(_DWORD *)stat buf = 136446466;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v73 = 2082;
    uint64_t v74 = v13;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "statedump:    \"%{public}s\" %{public}sConnectable", buf, 0x16u);
    if (SBYTE7(v77) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v11 = v69;
  }
  if (*(char *)(v11 + 39) < 0)
  {
    sub_10003B098(__p, *(void **)(v11 + 16), *(void *)(v11 + 24));
  }
  else
  {
    *(_OWORD *)__n128 __p = *(_OWORD *)(v11 + 16);
    *(void *)&long long v77 = *(void *)(v11 + 32);
  }
  if (SBYTE7(v77) < 0)
  {
    int v14 = __p[1];
    operator delete(__p[0]);
    if (!v14) {
      goto LABEL_28;
    }
  }
  else if (!BYTE7(v77))
  {
    goto LABEL_28;
  }
  uint64_t v15 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v69 + 39) < 0)
    {
      sub_10003B098(__p, *(void **)(v69 + 16), *(void *)(v69 + 24));
    }
    else
    {
      *(_OWORD *)__n128 __p = *(_OWORD *)(v69 + 16);
      *(void *)&long long v77 = *(void *)(v69 + 32);
    }
    size_t v16 = __p;
    if (SBYTE7(v77) < 0) {
      size_t v16 = (void **)__p[0];
    }
    *(_DWORD *)stat buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "statedump:       Name: %s", buf, 0xCu);
    if (SBYTE7(v77) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_28:
  int v17 = qword_100A19F20;
  BOOL v18 = os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT);
  uint64_t v19 = v69;
  if (v18)
  {
    int v20 = *(_DWORD *)(v69 + 264);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v20;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "statedump:       instance:%d", (uint8_t *)__p, 8u);
    uint64_t v19 = v69;
  }
  if (*(void *)(v19 + 256))
  {
    char v21 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      sub_1006AD3F0();
      id v22 = (id)objc_claimAutoreleasedReturnValue();
      LODWORD(__p[0]) = 138543362;
      *(void **)((char *)__p + 4) = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:       instanceAddress: %{public}@", (uint8_t *)__p, 0xCu);
    }
  }
  uint64_t v68 = v7;
  int64_t v23 = v5 - v4;
  if (v5 != v4)
  {
    unint64_t v24 = v4;
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)uint64_t v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    sub_10004C67C((uint64_t)__p);
    sub_10003AB28((uint64_t)&v77);
    if ((unint64_t)(v23 / 20) <= 1) {
      uint64_t v25 = 1;
    }
    else {
      uint64_t v25 = v23 / 20;
    }
    uint64_t v26 = (uint64_t)v24;
    do
    {
      sub_1000417A8(v26, buf);
      uint64_t v27 = sub_10003AB28((uint64_t)&v77);
      sub_10003AB28(v27);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
      v26 += 20;
      --v25;
    }
    while (v25);
    long long v28 = qword_100A19F20;
    uint64_t v4 = v24;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      long long v29 = v75 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v70 = 136446210;
      *(void *)&v70[4] = v29;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v70, 0xCu);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
    }
    *(void **)((char *)__p
    *(void *)&long long v77 = v30;
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  int64_t v31 = v6 - v68;
  if (v31)
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)uint64_t v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    sub_10004C67C((uint64_t)__p);
    sub_10003AB28((uint64_t)&v77);
    if ((unint64_t)(v31 / 20) <= 1) {
      uint64_t v32 = 1;
    }
    else {
      uint64_t v32 = v31 / 20;
    }
    uint64_t v33 = (uint64_t)v68;
    do
    {
      sub_1000417A8(v33, buf);
      uint64_t v34 = sub_10003AB28((uint64_t)&v77);
      sub_10003AB28(v34);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
      v33 += 20;
      --v32;
    }
    while (v32);
    long long v35 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      int v36 = v75 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v70 = 136446210;
      *(void *)&v70[4] = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v70, 0xCu);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
    }
    *(void **)((char *)__p
    *(void *)&long long v77 = v37;
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  int64_t v38 = v67 - v8;
  if (v67 != v8)
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)uint64_t v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    sub_10004C67C((uint64_t)__p);
    sub_10003AB28((uint64_t)&v77);
    if ((unint64_t)(v38 / 20) <= 1) {
      uint64_t v39 = 1;
    }
    else {
      uint64_t v39 = v38 / 20;
    }
    uint64_t v40 = (uint64_t)v8;
    do
    {
      sub_1000417A8(v40, buf);
      uint64_t v41 = sub_10003AB28((uint64_t)&v77);
      sub_10003AB28(v41);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
      v40 += 20;
      --v39;
    }
    while (v39);
    unsigned int v42 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      unint64_t v43 = v75 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v70 = 136446210;
      *(void *)&v70[4] = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v70, 0xCu);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
    }
    *(void **)((char *)__p
    *(void *)&long long v77 = v44;
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  uint64_t v45 = v69;
  if (*(unsigned char *)(v69 + 308))
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)uint64_t v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    sub_10004C67C((uint64_t)__p);
    sub_10003AB28((uint64_t)&v77);
    uint64_t v46 = std::ostream::operator<<();
    sub_10003AB28(v46);
    uint64_t v47 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      long long v48 = v75 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v70 = 136446210;
      *(void *)&v70[4] = v48;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v70, 0xCu);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
    }
    *(void **)((char *)__p
    *(void *)&long long v77 = v49;
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    uint64_t v45 = v69;
  }
  if (*(unsigned char *)(v45 + 360))
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)uint64_t v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    sub_10004C67C((uint64_t)__p);
    sub_10003AB28((uint64_t)&v77);
    long long v50 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      int v51 = v75 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v70 = 136446210;
      *(void *)&v70[4] = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v70, 0xCu);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
    }
    *(void **)((char *)__p
    *(void *)&long long v77 = v52;
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
    uint64_t v45 = v69;
  }
  if (*(_DWORD *)(v45 + 264) == 2)
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)uint64_t v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    sub_10004C67C((uint64_t)__p);
    sub_10003AB28((uint64_t)&v77);
    unsigned int v53 = qword_100A19FB8;
    if (os_log_type_enabled((os_log_t)qword_100A19FB8, OS_LOG_TYPE_DEFAULT))
    {
      std::stringbuf::str();
      long long v54 = v75 >= 0 ? buf : *(unsigned char **)buf;
      *(_DWORD *)int v70 = 136446210;
      *(void *)&v70[4] = v54;
      _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v70, 0xCu);
      if (v75 < 0) {
        operator delete(*(void **)buf);
      }
    }
    *(void **)((char *)__p
    *(void *)&long long v77 = v55;
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  if (*(void *)(v69 + 128))
  {
    uint64_t v93 = 0;
    long long v91 = 0u;
    long long v92 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    *(_OWORD *)uint64_t v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    sub_10004C67C((uint64_t)__p);
    sub_10003AB28((uint64_t)&v77);
    unsigned __int16 v56 = *(void **)(v69 + 112);
    if (v56 != (void *)(v69 + 120))
    {
      do
      {
        sub_1000417A8((uint64_t)(v56 + 4), buf);
        uint64_t v57 = sub_10003AB28((uint64_t)&v77);
        uint64_t v58 = sub_10003AB28(v57);
        sub_10004C2C4((uint64_t)(v56 + 7), v70);
        uint64_t v59 = sub_10003AB28(v58);
        sub_10003AB28(v59);
        if (v71 < 0) {
          operator delete(*(void **)v70);
        }
        if (v75 < 0) {
          operator delete(*(void **)buf);
        }
        int v60 = (void *)v56[1];
        if (v60)
        {
          do
          {
            __int16 v61 = v60;
            int v60 = (void *)*v60;
          }
          while (v60);
        }
        else
        {
          do
          {
            __int16 v61 = (void *)v56[2];
            BOOL v62 = *v61 == (void)v56;
            unsigned __int16 v56 = v61;
          }
          while (!v62);
        }
        unsigned __int16 v56 = v61;
      }
      while (v61 != (void *)(v69 + 120));
    }
    sub_10003AB28((uint64_t)&v77);
    uint64_t v63 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v63 + 176))(v63))
    {
      uint64_t v64 = qword_100A19FB8;
      if (os_log_type_enabled((os_log_t)qword_100A19FB8, OS_LOG_TYPE_DEFAULT))
      {
        std::stringbuf::str();
        uint64_t v65 = v75 >= 0 ? buf : *(unsigned char **)buf;
        *(_DWORD *)int v70 = 136446210;
        *(void *)&v70[4] = v65;
        _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "statedump: %{public}s", v70, 0xCu);
        if (v75 < 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    *(void **)((char *)__p
    *(void *)&long long v77 = v66;
    if (SHIBYTE(v82) < 0) {
      operator delete(v81[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  if (v69) {
    sub_1000368F4((atomic_uint *)v69);
  }
  if (v8) {
    operator delete(v8);
  }
  if (v68) {
    operator delete(v68);
  }
  if (v4) {
    operator delete(v4);
  }
}

void sub_100665BB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, atomic_uint *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31)
{
  if (a16)
  {
    sub_1000368F4(a16);
    if (!v33)
    {
LABEL_3:
      if (!v32) {
        goto LABEL_4;
      }
      goto LABEL_9;
    }
  }
  else if (!v33)
  {
    goto LABEL_3;
  }
  operator delete(v33);
  if (!v32)
  {
LABEL_4:
    if (!v31) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
LABEL_9:
  operator delete(v32);
  if (!v31) {
LABEL_6:
  }
    _Unwind_Resume(exception_object);
LABEL_5:
  operator delete(v31);
  goto LABEL_6;
}

void sub_100665D28(uint64_t a1)
{
  uint64_t v2 = (unsigned __int8 *)(a1 + 16872);
  uint64_t v3 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: -------------------- LE Broadcaster ---------------------", buf, 2u);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v4 = *(_DWORD *)(a1 + 120);
    if (v4 > 3) {
      char v5 = "UNKNOWN";
    }
    else {
      char v5 = off_1009BD2D0[v4];
    }
    unsigned int v6 = (CFAbsoluteTimeGetCurrent() - *(double *)(a1 + 128));
    int v7 = v2[212];
    *(_DWORD *)stat buf = 136446978;
    *(void *)uint64_t v63 = v5;
    *(_WORD *)&v63[8] = 1024;
    *(_DWORD *)&unsigned char v63[10] = v4;
    *(_WORD *)&v63[14] = 1024;
    *(_DWORD *)&v63[16] = v6;
    LOWORD(v64) = 1024;
    *(_DWORD *)((char *)&v64 + 2) = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Advertisement state: %{public}s(%d) duration:%d seconds fSystemWillSleep: %d", buf, 0x1Eu);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(a1 + 136);
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)uint64_t v63 = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Advertisement tech: %d", buf, 8u);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = "";
    if (!v2[1]) {
      uint64_t v9 = "not";
    }
    *(_DWORD *)stat buf = 136446210;
    *(void *)uint64_t v63 = v9;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Extended advertising %{public}s supported", buf, 0xCu);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *v2;
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)uint64_t v63 = v10;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Advertisement # of instances: %d", buf, 8u);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = "ON";
    if (!*(unsigned char *)(a1 + 41)) {
      uint64_t v11 = "OFF";
    }
    *(_DWORD *)stat buf = 136446210;
    *(void *)uint64_t v63 = v11;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Stack:%{public}s", buf, 0xCu);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *((unsigned __int16 *)v2 + 16);
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)uint64_t v63 = v12;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fControllerMaxExtendedAdvertisingPayloadSize:%d", buf, 8u);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = v2[2];
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)uint64_t v63 = v13;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fHostSupportsBackgroundAdvertisingOnExtended:%d", buf, 8u);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v14 = *(void *)(a1 + 17016) != 0;
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)uint64_t v63 = v14;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fConfigAdvertisingPowerAssertion:%d", buf, 8u);
    uint64_t v3 = qword_100A19F20;
  }
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(void *)(a1 + 16936);
    size_t v16 = "NO";
    if (v2[72]) {
      int v17 = "YES";
    }
    else {
      int v17 = "NO";
    }
    if (v2[73]) {
      size_t v16 = "YES";
    }
    *(_DWORD *)stat buf = 134218754;
    *(void *)uint64_t v63 = v15;
    *(_WORD *)&v63[8] = 2082;
    *(void *)&unsigned char v63[10] = v17;
    *(_WORD *)&v63[18] = 2082;
    unint64_t v64 = (unint64_t)v16;
    __int16 v65 = 2082;
    uint64_t v66 = "YES";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: fAdvertisingPowerAssertion:%llx fAddressChangeInProgress:%{public}s fDeferringUpdateAdvertisingState:%{public}s fAddressRefreshTimeoutCB created:%{public}s", buf, 0x2Au);
    uint64_t v3 = qword_100A19F20;
  }
  if (*v2)
  {
    unint64_t v18 = 0;
    do
    {
      unint64_t v19 = a1 + 3336 * v18;
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v19 + 6817;
        unint64_t v21 = a1 + 3336 * v18;
        __asm { PRFM            #0, [X8] }
        LODWORD(_X8) = *(unsigned __int8 *)(v21 + 145);
        LODWORD(v21) = *(unsigned __int16 *)(v21 + 146);
        *(_DWORD *)stat buf = 67109632;
        *(_DWORD *)uint64_t v63 = v18;
        *(_WORD *)&v63[4] = 1024;
        *(_DWORD *)&v63[6] = _X8;
        *(_WORD *)&unsigned char v63[10] = 1024;
        *(_DWORD *)&v63[12] = v21;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: %d. type:%d interval:%d ", buf, 0x14u);
        uint64_t v3 = qword_100A19F20;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v19 + 8472;
        unint64_t v27 = a1 + 3336 * v18;
        __asm { PRFM            #0, [X8] }
        LODWORD(_X8) = *(unsigned __int16 *)(v27 + 1800);
        *(_DWORD *)stat buf = 68158210;
        *(_DWORD *)uint64_t v63 = _X8;
        *(_WORD *)&v63[4] = 2096;
        *(void *)&v63[6] = v27 + 149;
        *(_WORD *)&v63[14] = 1024;
        *(_DWORD *)&v63[16] = _X8;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:     data:%.*P(%d)", buf, 0x18u);
        uint64_t v3 = qword_100A19F20;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        _X8 = v19 + 10124;
        unint64_t v30 = a1 + 3336 * v18;
        __asm { PRFM            #0, [X8] }
        LODWORD(_X8) = *(unsigned __int16 *)(v30 + 3452);
        *(_DWORD *)stat buf = 68158210;
        *(_DWORD *)uint64_t v63 = _X8;
        *(_WORD *)&v63[4] = 2096;
        *(void *)&v63[6] = v30 + 1802;
        *(_WORD *)&v63[14] = 1024;
        *(_DWORD *)&v63[16] = _X8;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:     scanRspData:%.*P(%d)", buf, 0x18u);
        uint64_t v3 = qword_100A19F20;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v32 = *(unsigned __int8 *)(a1 + v18 + 16921);
        *(_DWORD *)stat buf = 67109120;
        *(_DWORD *)uint64_t v63 = v32;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:     fObjectLocatorResponseOnAdvertisingHandle:%d", buf, 8u);
        uint64_t v3 = qword_100A19F20;
      }
      if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
      {
        int v33 = *(unsigned __int8 *)(a1 + v18 + 16926);
        *(_DWORD *)stat buf = 67109120;
        *(_DWORD *)uint64_t v63 = v33;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump:     fLEAdvTxPowerIncreaseAdvertisingHandle:%d", buf, 8u);
        uint64_t v3 = qword_100A19F20;
      }
      ++v18;
    }
    while (v18 < *v2);
  }
  BOOL v34 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v34)
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "statedump: Advertising sessions:", buf, 2u);
  }
  uint64_t v35 = *(void *)(a1 + 16824);
  int v36 = (void *)(a1 + 16832);
  if (v35 != a1 + 16832)
  {
    do
    {
      sub_10066484C(v34, v35);
      uint64_t v37 = *(void **)(v35 + 8);
      if (v37)
      {
        do
        {
          int64_t v38 = v37;
          uint64_t v37 = (void *)*v37;
        }
        while (v37);
      }
      else
      {
        do
        {
          int64_t v38 = *(void **)(v35 + 16);
          _ZF = *v38 == v35;
          uint64_t v35 = (uint64_t)v38;
        }
        while (!_ZF);
      }
      uint64_t v35 = (uint64_t)v38;
    }
    while (v38 != v36);
  }
  uint64_t v39 = sub_10010BABC();
  uint64_t v40 = *(void *)(a1 + 16864);
  if (v40)
  {
    uint64_t v41 = v39;
    uint64_t v42 = a1 + 16848;
    unint64_t v43 = qword_100A19F20;
    if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)stat buf = 134217984;
      *(void *)uint64_t v63 = v40;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "statedump: Backgrounded advertising sessions (%ld, sorted):", buf, 0xCu);
    }
    for (uint64_t i = *(void *)(a1 + 16856); i != v42; uint64_t i = *(void *)(i + 8))
    {
      uint64_t v45 = (void *)*v36;
      if (!*v36) {
        goto LABEL_70;
      }
      unint64_t v46 = *(void *)(i + 16);
      uint64_t v47 = (void *)(a1 + 16832);
      do
      {
        unint64_t v48 = v45[4];
        _CF = v48 >= v46;
        if (v48 >= v46) {
          long long v50 = v45;
        }
        else {
          long long v50 = v45 + 1;
        }
        if (_CF) {
          uint64_t v47 = v45;
        }
        uint64_t v45 = (void *)*v50;
      }
      while (*v50);
      if (v47 == v36 || v46 < v47[4]) {
LABEL_70:
      }
        uint64_t v47 = (void *)(a1 + 16832);
      int v51 = qword_100A19F20;
      if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v47[4], (uint64_t)__p);
        uint64_t v52 = __p;
        if (v61 < 0) {
          uint64_t v52 = (void **)__p[0];
        }
        uint64_t v53 = v47[6];
        uint64_t v54 = v41 - *(void *)(v53 + 320) / 0x3E8uLL;
        unint64_t v55 = *(void *)(v53 + 328) / 0x3E8uLL;
        *(_DWORD *)stat buf = 136446722;
        *(void *)uint64_t v63 = v52;
        *(_WORD *)&v63[8] = 2048;
        *(void *)&unsigned char v63[10] = v54;
        *(_WORD *)&v63[18] = 2048;
        unint64_t v64 = v55;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "statedump:    \"%{public}s\" for %llu seconds, timeout after %llu seconds", buf, 0x20u);
        if (v61 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  unsigned __int16 v56 = qword_100A19F20;
  if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)stat buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "statedump: ADV Instance address history (recent first):", buf, 2u);
  }
  for (uint64_t j = *(void *)(a1 + 17032); j != a1 + 17024; uint64_t j = *(void *)(j + 8))
  {
    long long v58 = *(_OWORD *)(j + 16);
    id v59 = *(id *)(j + 32);
    sub_10065AB44(a1, (uint64_t)&v58);
  }
}

void sub_100666600(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_10066667C;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_1000197D8(v2, v3);
}

uint64_t sub_10066667C(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 17084) = 1;
  return result;
}

void sub_100666690(uint64_t a1)
{
}

void sub_100666698(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100666714;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_1000197D8(v2, v3);
}

void sub_100666714(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 17084) = 0;
  if (*(unsigned char *)(v1 + 41))
  {
    uint64_t v2 = *(void *)(v1 + 48);
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    v3[2] = sub_100666798;
    v3[3] = &unk_100997528;
    void v3[4] = v1;
    sub_100013018(v2, v3);
  }
}

uint64_t sub_100666798()
{
  return sub_10065915C();
}

void sub_1006667A4(uint64_t a1)
{
}

uint64_t sub_1006667AC(uint64_t a1, int a2)
{
  uint64_t v3 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_10066682C;
  v5[3] = &unk_100998300;
  int v6 = a2;
  sub_1000197D8(v3, v5);
  return 1;
}

void sub_10066682C(uint64_t a1)
{
  if (qword_1009F8758 != -1) {
    dispatch_once(&qword_1009F8758, &stru_1009BD260);
  }
  if (*((unsigned char *)off_1009F8750 + 24) && *((unsigned char *)off_1009F8750 + 25) && !*((unsigned char *)off_1009F8750 + 27))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
    }
    uint64_t v2 = off_1009F8780;
    uint64_t v3 = *(unsigned int *)(a1 + 32);
    sub_100306438((uint64_t)v2, v3);
  }
}

uint64_t sub_1006668EC(uint64_t a1, int a2)
{
  return 1;
}

uint64_t sub_10066690C()
{
  return 1;
}

uint64_t sub_100666914()
{
  return 1;
}

void sub_10066691C(uint64_t *a1)
{
  if (a1[2])
  {
    uint64_t v2 = *a1;
    uint64_t v3 = (uint64_t *)a1[1];
    uint64_t v4 = *v3;
    *(void *)(v4 + 8) = *(void *)(*a1 + 8);
    **(void **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        char v5 = (uint64_t *)v3[1];

        operator delete(v3);
        uint64_t v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_100666990(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100666990(a1, *a2);
    sub_100666990(a1, a2[1]);
    a2[5] = &off_100998468;
    uint64_t v4 = (atomic_uint *)a2[6];
    if (v4) {
      sub_1000368F4(v4);
    }
    operator delete(a2);
  }
}

void sub_100666A10(id a1)
{
}

void sub_100666A54()
{
}

void sub_100666A78(id a1)
{
}

void sub_100666ABC()
{
}

void sub_100666AE0(id a1)
{
}

void sub_100666C70()
{
}

uint64_t *sub_100666C94(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100666CEC(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100666CD4(_Unwind_Exception *a1)
{
  sub_100666990(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100666CEC(uint64_t *result, void *a2, void *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    char v5 = (uint64_t **)result;
    int v6 = result + 1;
    do
    {
      uint64_t result = sub_100666D78(v5, v6, v4 + 4, v4 + 4);
      int v7 = (void *)v4[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void *)v4[2];
          BOOL v9 = *v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_100666D78(uint64_t **a1, void *a2, unint64_t *a3, void *a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v6 = (uint64_t **)sub_1002DF5F4(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100666E08((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void sub_100666E08(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  int v6 = a3 + 1;
  int v7 = operator new(0x38uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  void v7[4] = *a2;
  uint64_t v8 = a2[2];
  void v7[5] = &off_100998468;
  v7[6] = v8;
  if (v8) {
    sub_100037354(v8);
  }
  *((unsigned char *)a3 + 16) = 1;
}

void sub_100666EA4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_100666EC0(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100666EC0(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    __p[5] = &off_100998468;
    uint64_t v3 = (atomic_uint *)__p[6];
    if (v3) {
      sub_1000368F4(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t *sub_100666F3C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10033CE5C(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100666F7C(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100666F94(id a1)
{
}

void sub_100666FD8()
{
}

uint64_t *sub_100666FFC(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (uint64_t *)operator new(0x38uLL);
    v11[4] = **a4;
    void v11[5] = (uint64_t)&off_100998468;
    void v11[6] = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_1006670DC(uint64_t **a1, uint64_t *a2)
{
  uint64_t v3 = sub_10004D3B8(a1, a2);
  a2[5] = (uint64_t)&off_100998468;
  uint64_t v4 = (atomic_uint *)a2[6];
  if (v4) {
    sub_1000368F4(v4);
  }
  operator delete(a2);
  return v3;
}

void sub_10066713C(void *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  int v7 = *(unsigned char **)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - (uint64_t)v7) >> 2) >= a2)
  {
    if (a2)
    {
      int v13 = &v7[20 * a2];
      uint64_t v14 = 20 * a2;
      do
      {
        sub_10071D13C(v7);
        v7 += 20;
        v14 -= 20;
      }
      while (v14);
      int v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v7[-*a1] >> 2);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v11 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      int v12 = (char *)sub_10003767C(v4, v11);
    }
    else {
      int v12 = 0;
    }
    uint64_t v15 = &v12[20 * v8];
    size_t v16 = &v12[20 * v11];
    uint64_t v17 = 5 * a2;
    unint64_t v18 = &v15[20 * a2];
    uint64_t v19 = 4 * v17;
    int v20 = v15;
    do
    {
      int v20 = sub_10071D13C(v20) + 20;
      v19 -= 20;
    }
    while (v19);
    id v22 = (char *)*a1;
    unint64_t v21 = (char *)a1[1];
    if (v21 != (char *)*a1)
    {
      do
      {
        long long v23 = *(_OWORD *)(v21 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v21 - 1);
        *(_OWORD *)(v15 - 20) = v23;
        v15 -= 20;
        v21 -= 20;
      }
      while (v21 != v22);
      unint64_t v21 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v18;
    a1[2] = v16;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

void sub_1006672C4(_Unwind_Exception *exception_object)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(exception_object);
}

void sub_1006672E8(id a1)
{
}

void sub_10066732C()
{
}

void sub_100667350(id a1)
{
}

void sub_100667394()
{
}

void sub_1006673D4(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, a5, 0xCu);
}

void sub_1006673F0(float a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(float *)a4 = a1;
  *(void *)(a4 + 4) = v4;
  *(_WORD *)(a4 + 12) = 1024;
  *(_DWORD *)(a4 + 14) = v5;
}

uint64_t sub_100667408(uint64_t a1)
{
  *(void *)a1 = off_1009BD300;
  *(void *)(a1 + 8) = off_1009BD360;
  uint64_t v2 = (void *)(a1 + 16);
  for (uint64_t i = 216; i != 840; i += 208)
    *(void *)(a1 + i) = 0;
  *(_DWORD *)(a1 + 664) = 0;
  *(void *)(a1 + 672) = 5;
  bzero(v2, 0x288uLL);
  if (_os_feature_enabled_impl()) {
    __int16 v4 = 5;
  }
  else {
    __int16 v4 = 4;
  }
  *(_WORD *)(a1 + 680) = v4;
  uint64_t v5 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 48))(v5, 1))
  {
    uint64_t v6 = sub_10003FB34();
    int v7 = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 2504))(v6);
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEBUG);
    if (v7)
    {
      if (v8) {
        sub_10078D040();
      }
    }
    else if (v8)
    {
      sub_10078D074();
    }
    *(_DWORD *)(a1 + 664) |= 1u;
  }
  uint64_t v9 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, 16))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEBUG)) {
      sub_10078D00C();
    }
    *(_DWORD *)(a1 + 664) |= 0x10u;
  }
  uint64_t v10 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, 0x80000))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEBUG)) {
      sub_10078CFD8();
    }
    *(_DWORD *)(a1 + 664) |= 0x80000u;
  }
  uint64_t v11 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, 8))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEBUG)) {
      sub_10078CFA4();
    }
    *(_DWORD *)(a1 + 664) |= 8u;
  }
  uint64_t v12 = sub_100035F54();
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, 0x100000);
  uint64_t v14 = qword_100A1A038;
  if (v13)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEBUG))
    {
      *(_WORD *)stat buf = 0;
      _os_log_debug_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEBUG, "Source supports GATT", buf, 2u);
      uint64_t v14 = qword_100A1A038;
    }
    *(_DWORD *)(a1 + 664) |= 0x100000u;
  }
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(a1 + 664);
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Source supported profiles = %x", buf, 8u);
  }
  unsigned __int8 v25 = 0;
  uint64_t v16 = sub_100017768();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16) & 1) == 0)
  {
    uint64_t v21 = *(void *)(a1 + 672);
LABEL_41:
    v21 |= 0x10uLL;
    *(void *)(a1 + 672) = v21;
    goto LABEL_42;
  }
  uint64_t v17 = sub_100017768();
  sub_10004191C(buf, "FastConnect");
  sub_10004191C(__p, "DisableFastConnectAll");
  (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v17 + 72))(v17, buf, __p, &v25);
  if (v24 < 0) {
    operator delete(__p[0]);
  }
  if (v27 < 0) {
    operator delete(*(void **)buf);
  }
  unint64_t v18 = qword_100A1A038;
  BOOL v19 = os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT);
  int v20 = v25;
  if (v19)
  {
    *(_DWORD *)stat buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v25;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "disableFastConnectAll = %d", buf, 8u);
    int v20 = v25;
  }
  uint64_t v21 = *(void *)(a1 + 672);
  if (!v20) {
    goto LABEL_41;
  }
LABEL_42:
  *(unsigned char *)(a1 + 682) = (v21 & 0x10) != 0;
  return a1;
}

void sub_100667888(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  for (uint64_t i = 632; i != 8; i -= 208)

  _Unwind_Resume(a1);
}

void *sub_1006678F0(void *a1)
{
  *a1 = off_1009BD300;
  a1[1] = off_1009BD360;
  sub_10066806C((uint64_t)a1);
  for (uint64_t i = 79; i != 1; i -= 26)

  return a1;
}

void sub_100667974(_Unwind_Exception *a1)
{
  for (uint64_t i = 632; i != 8; i -= 208)

  _Unwind_Resume(a1);
}

void sub_10066799C(void *a1)
{
  sub_1006678F0(a1);

  operator delete();
}

void sub_1006679D4(uint64_t a1)
{
  unsigned __int8 v7 = 0;
  uint64_t v2 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 8))(v2))
  {
    uint64_t v3 = sub_100017768();
    sub_10004191C(buf, "FastConnect");
    sub_10004191C(__p, "DisableFastConnect");
    (*(void (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v3 + 72))(v3, buf, __p, &v7);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
    if (v9 < 0) {
      operator delete(*(void **)buf);
    }
    __int16 v4 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)stat buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "disableFastConnect = %d", buf, 8u);
      if (v7) {
        return;
      }
    }
    else if (v7)
    {
      return;
    }
  }
  sub_1002054E4(sub_100667C0C);
  mach_timebase_info((mach_timebase_info_t)&dword_100A14544);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  sub_100061288((uint64_t)off_1009F7EF8 + 240, a1 + 8);
}

void sub_100667BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100667C0C()
{
}

void sub_100667CF0()
{
}

uint64_t sub_100667D14(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = a1 + v2;
    if (*(_DWORD *)(a1 + v2 + 32))
    {
      int v4 = *(_DWORD *)(v3 + 24);
      int v5 = *(unsigned __int16 *)(v3 + 28);
      if (*(_DWORD *)a2 == v4 && *(unsigned __int16 *)(a2 + 4) == v5) {
        break;
      }
    }
    v2 += 208;
    if (v2 == 624) {
      return 0;
    }
  }
  return a1 + v2 + 16;
}

uint64_t sub_100667D60(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = 0;
  while (1)
  {
    uint64_t v3 = a1 + v2;
    if (*(_DWORD *)(a1 + v2 + 32))
    {
      int v4 = *(_DWORD *)(v3 + 24);
      int v5 = *(unsigned __int16 *)(v3 + 28);
      if (*(_DWORD *)a2 == v4 && *(unsigned __int16 *)(a2 + 4) == v5) {
        break;
      }
    }
    v2 += 208;
    if (v2 == 624) {
      return 120;
    }
  }
  uint64_t v8 = a1 + v2;
  sub_100667DDC(a1, a1 + v2 + 16, 0);
  char v9 = *(void **)(v8 + 216);
  *(void *)(v8 + 216) = 0;

  return 0;
}

void sub_100667DDC(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(int *)(a2 + 16);
    if (v6 > 9) {
      unsigned __int8 v7 = "Unknown State";
    }
    else {
      unsigned __int8 v7 = off_1009BD6A0[v6];
    }
    if (a3 > 9) {
      uint64_t v8 = "Unknown State";
    }
    else {
      uint64_t v8 = off_1009BD6A0[a3];
    }
    v9[0] = 68158466;
    v9[1] = 6;
    __int16 v10 = 2096;
    uint64_t v11 = a2 + 8;
    __int16 v12 = 2080;
    int v13 = v7;
    __int16 v14 = 2080;
    int v15 = v8;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%{bluetooth:BD_ADDR}.6P state changed from %s to %s", (uint8_t *)v9, 0x26u);
  }
  *(_DWORD *)(a2 + 16) = a3;
}

uint64_t sub_100667EF4(uint64_t a1)
{
  return *(unsigned __int16 *)(a1 + 680);
}

void sub_100667EFC(uint64_t a1)
{
  uint64_t v2 = qword_100A1A038;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Destroy all devices", v6, 2u);
  }
  for (uint64_t i = 0; i != 624; i += 208)
  {
    sub_100667DDC(v3, a1 + i + 16, 0);
    int v5 = *(void **)(a1 + i + 216);
    *(void *)(a1 + i + 216) = 0;
  }
}

uint64_t sub_100667F9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2 + 128;
  uint64_t v5 = sub_100667D14(a1, a2 + 128);
  if (!v5)
  {
    uint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = a1 + v6;
      if (!*(_DWORD *)(a1 + v6 + 32)) {
        break;
      }
      v6 += 208;
      if (v6 == 624) {
        return 0;
      }
    }
    *(_OWORD *)(v7 + 16) = 0u;
    uint64_t v5 = v7 + 16;
    *(_OWORD *)(v5 + 176) = 0u;
    *(_OWORD *)(v5 + 192) = 0u;
    *(_OWORD *)(v5 + 144) = 0u;
    *(_OWORD *)(v5 + 160) = 0u;
    *(_OWORD *)(v5 + 112) = 0u;
    *(_OWORD *)(v5 + 128) = 0u;
    *(_OWORD *)(v5 + 80) = 0u;
    *(_OWORD *)(v5 + 96) = 0u;
    *(_OWORD *)(v5 + 48) = 0u;
    *(_OWORD *)(v5 + 64) = 0u;
    *(_OWORD *)(v5 + 16) = 0u;
    *(_OWORD *)(v5 + 32) = 0u;
    int v8 = *(_DWORD *)v4;
    *(_WORD *)(v5 + 12) = *(_WORD *)(v4 + 4);
    *(_DWORD *)(v5 + 8) = v8;
    sub_100667DDC(0, v5, 1u);
    *(_DWORD *)(v5 + 20) = *(_DWORD *)(a1 + 664);
    int v9 = sub_10048C71C(a2);
    *(unsigned char *)(v5 + 53) = v9;
    *(unsigned char *)(v5 + 145) = 0;
    if (v9 != 2) {
      sub_10048C6D4(a2, 2);
    }
  }
  return v5;
}

void sub_10066806C(uint64_t a1)
{
  sub_1002054F0();
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  uint64_t v2 = (char *)off_1009F7EF8 + 240;

  sub_100052718((uint64_t)v2, a1 + 8);
}

uint64_t sub_100668114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)stat buf = 67109120;
    int v16 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Cleanup with result %d", buf, 8u);
  }
  uint64_t v7 = (void *)sub_100667D14(a1, a2);
  if (v7)
  {
    int v8 = v7;
    if (*v7)
    {
      char v14 = 0;
      sub_10001B8E0(&v14);
      sub_1001E121C(*((unsigned __int16 *)v8 + 24), 436);
      sub_10001B910(&v14);
      if (a3)
      {
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
        }
        uint64_t v9 = sub_1004E2340((uint64_t)off_1009F8068, a3, 20000);
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009BD508);
        }
        sub_1004D95B8((int64x2_t *)off_1009F8088, *v8, v9);
      }
      *((_WORD *)v8 + 24) = 0;
      if (*((_WORD *)v8 + 27))
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
          sub_10078D1AC();
        }
        if (qword_1009F8418 != -1) {
          dispatch_once(&qword_1009F8418, &stru_1009BD528);
        }
        sub_10041A928(qword_1009F8410, *v8, (void *)*((unsigned __int16 *)v8 + 27), *((unsigned __int16 *)v8 + 32), *((unsigned __int16 *)v8 + 68), *((unsigned __int8 *)v8 + 135));
      }
      int v10 = *((unsigned __int16 *)v8 + 37);
      *((_WORD *)v8 + 27) = 0;
      *((_WORD *)v8 + 32) = 0;
      if (v10)
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
          sub_10078D178();
        }
        if (qword_1009FB058 != -1) {
          dispatch_once(&qword_1009FB058, &stru_1009BD548);
        }
        sub_1005298E8((uint64_t)off_1009FB050, *v8 + 128, (unsigned __int16 *)v8 + 37, (unsigned __int16 *)v8 + 70);
      }
      *((_WORD *)v8 + 37) = 0;
      if (*((_WORD *)v8 + 62))
      {
        sub_1002B804C(&v14);
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
          sub_10078D144();
        }
        sub_10026511C(*v8 + 128, *((unsigned __int16 *)v8 + 62));
        sub_10001B910(&v14);
      }
      *((_WORD *)v8 + 62) = 0;
      if (*((_WORD *)v8 + 42))
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
          sub_10078D110();
        }
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009BD568);
        }
        sub_1002AF240(off_1009F8098, *v8, *((unsigned __int16 *)v8 + 42), a3);
      }
      *((_WORD *)v8 + 42) = 0;
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009BD568);
      }
      if (sub_10028BCF0((uint64_t)off_1009F8098))
      {
        uint64_t v11 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)stat buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Reset TiPi pending flag as a result of connection failure", buf, 2u);
        }
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009BD568);
        }
        sub_10028BCF8((uint64_t)off_1009F8098, *v8, 0);
      }
      if (!*((_WORD *)v8 + 47)) {
        goto LABEL_49;
      }
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078D0DC();
      }
      int v12 = *((_DWORD *)v8 + 4);
      if (v12 < 5)
      {
        if (qword_1009FB218 == -1)
        {
LABEL_48:
          sub_1005FC848((uint64_t)off_1009FB210, *v8, *((unsigned __int16 *)v8 + 47), *((unsigned __int16 *)v8 + 52), v12 > 4);
LABEL_49:
          *((_WORD *)v8 + 47) = 0;
          *((_WORD *)v8 + 52) = 0;
          if (*((_WORD *)v8 + 57) && (*((unsigned char *)v8 + 22) & 0x10) != 0)
          {
            if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
              sub_10078D0A8();
            }
            sub_1002B804C(&v14);
            sub_10010E510(a2, *((unsigned __int16 *)v8 + 57));
            sub_10001B910(&v14);
          }
          *((_WORD *)v8 + 57) = 0;
          sub_10001B8AC(&v14);
          goto LABEL_55;
        }
      }
      else if (qword_1009FB218 == -1)
      {
        goto LABEL_48;
      }
      dispatch_once(&qword_1009FB218, &stru_1009BD588);
      goto LABEL_48;
    }
  }
LABEL_55:
  sub_1006685E4(a1, a2);
  return sub_100667D60(a1, a2);
}

void sub_1006685C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1006685E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = sub_100667D14(a1, a2);
  if (v2)
  {
    *(_OWORD *)(v2 + 180) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    BOOL v3 = *(void **)(v2 + 200);
    *(void *)(v2 + 200) = 0;
  }
}

uint64_t sub_100668630(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = 0;
  uint64_t v4 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    uint64_t v5 = v27 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)stat buf = 136315138;
    long long v23 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Check Fast Connect Support for device %s", buf, 0xCu);
    if (v27 < 0) {
      operator delete(__p[0]);
    }
  }
  char v20 = 0;
  sub_10001B8E0(&v20);
  uint64_t v6 = sub_100197A30(a2 + 128);
  if (v6 && (int v7 = *(_DWORD *)(v6 + 148), v7 >= 3))
  {
    sub_10001B910(&v20);
    uint64_t v9 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = (unsigned __int16)v7;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Killing Fast Connect attempt, already connected %d", (uint8_t *)__p, 8u);
    }
    uint64_t v8 = 4506;
  }
  else
  {
    uint64_t v8 = sub_1001DE600(2u, (uint64_t *)&v21, 0);
    if (v8)
    {
      sub_10001B910(&v20);
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078D1E0();
      }
    }
    else
    {
      int v10 = *(_DWORD *)(a1 + 664);
      if (*(unsigned char *)(a2 + 976))
      {
        uint64_t v11 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest not in contacts removing HFP and GATT profiles from support", (uint8_t *)__p, 2u);
        }
        v10 &= 0xFFEFFFFE;
      }
      word_100A1A0E8 = 1;
      word_100A1A0EA = *(_WORD *)(a1 + 680);
      byte_100A1A0EC = *((unsigned char *)v21 + 4);
      byte_100A1A0ED = *((unsigned char *)v21 + 5);
      byte_100A1A0EE = *(unsigned char *)(sub_1001E6484(v21) + 36);
      byte_100A1A0EF = *(unsigned char *)(sub_1001E6484(v21) + 37);
      dword_100A1A0F0 = v10;
      unk_100A1A0F4 = *(void *)(a1 + 672);
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
      }
      byte_100A1A0FC = sub_1004E5078((uint64_t)off_1009F8068);
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
      }
      byte_100A1A0FD = (unsigned __int16)sub_1004E5078((uint64_t)off_1009F8068) >> 8;
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
      }
      byte_100A1A0FE = sub_1004E5078((uint64_t)off_1009F8068) >> 16;
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
      }
      byte_100A1A0FF = sub_1004E5078((uint64_t)off_1009F8068) >> 24;
      byte_100A1A100 = sub_10024E558();
      byte_100A1A101 = (unsigned __int16)sub_10024E558() >> 8;
      byte_100A1A102 = sub_10024E558() >> 16;
      byte_100A1A103 = sub_10024E558() >> 24;
      unk_100A1A104 = 1;
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
      }
      uint64_t v12 = sub_1004E5080((uint64_t)off_1009F8068);
      byte_100A1A106 = BYTE4(v12);
      byte_100A1A107 = BYTE5(v12);
      byte_100A1A108 = BYTE6(v12);
      byte_100A1A109 = HIBYTE(v12);
      word_100A1A10A = v12;
      byte_100A1A10C = BYTE2(v12);
      byte_100A1A10D = BYTE3(v12);
      *(void *)(sub_1001E6484(v21) + 88) = sub_100668C18;
      int v13 = v21;
      *((void *)v21 + 4) = sub_100668CA8;
      *(unsigned char *)(sub_1001E6484(v13) + 16) = 0;
      uint64_t v8 = sub_1002048A0((uint64_t)sub_10066909C, *((unsigned __int16 *)v21 + 2), a2 + 128, (uint64_t)&word_100A1A0E8, 42);
      char v14 = qword_100A1A038;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (v15)
        {
          sub_100474E18(a2, __p);
          int v16 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)stat buf = 136446466;
          long long v23 = v16;
          __int16 v24 = 1024;
          int v25 = v8;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Failed to send Fast Connect Echo Request for device %{public}s with status %d", buf, 0x12u);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_1001DEC18((uint64_t)v21);
      }
      else
      {
        if (v15)
        {
          sub_100474E18(a2, __p);
          uint64_t v17 = v27 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)stat buf = 136446466;
          long long v23 = v17;
          __int16 v24 = 1024;
          int v25 = 0;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sent Fast Connect Echo Request for device %{public}s with status %d", buf, 0x12u);
          if (v27 < 0) {
            operator delete(__p[0]);
          }
        }
        unint64_t v18 = (void *)sub_100667D14(a1, a2 + 128);
        *unint64_t v18 = a2;
        sub_100667DDC((uint64_t)v18, (uint64_t)v18, 2u);
      }
      sub_10001B910(&v20);
    }
  }
  sub_10001B8AC(&v20);
  return v8;
}

void sub_100668BE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

void sub_100668C18()
{
}

void sub_100668CA8(int a1, const void *a2, unsigned int a3)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_1000335D8(v10, a2, a3);
  memset(v9, 0, sizeof(v9));
  sub_1004BC2E4((uint64_t)v9, 0, (uint64_t)v10);
  if (sub_1004BC378((uint64_t)v9) == 6)
  {
    uint64_t v8 = 0;
    if (qword_1009FB170 != -1) {
      dispatch_once(&qword_1009FB170, &stru_1009BD5A8);
    }
    uint64_t v4 = 0;
    while (!*(_DWORD *)((char *)off_1009FB168 + v4 + 32)
         || *(unsigned __int16 *)((char *)off_1009FB168 + v4 + 64) != a1)
    {
      v4 += 208;
      if (v4 == 624)
      {
        uint64_t v5 = 0;
        goto LABEL_10;
      }
    }
    uint64_t v5 = (unsigned __int16 *)((char *)off_1009FB168 + v4 + 16);
LABEL_10:
    uint64_t v6 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setup Complete received, setting all channels to OPEN", v7, 2u);
    }
    if (v5)
    {
      if (v5[32])
      {
        sub_1001DD56C(v5[32], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E6484(v8)) {
            *(unsigned char *)(sub_1001E6484(v8) + 16) = 4;
          }
        }
      }
      if (v5[27])
      {
        sub_1001DD56C(v5[27], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E6484(v8)) {
            *(unsigned char *)(sub_1001E6484(v8) + 16) = 4;
          }
        }
      }
      if (v5[37])
      {
        sub_1001DD56C(v5[37], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E6484(v8)) {
            *(unsigned char *)(sub_1001E6484(v8) + 16) = 4;
          }
        }
      }
      if (v5[42])
      {
        sub_1001DD56C(v5[42], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E6484(v8)) {
            *(unsigned char *)(sub_1001E6484(v8) + 16) = 4;
          }
        }
      }
      if (v5[57])
      {
        sub_1001DD56C(v5[57], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E6484(v8)) {
            *(unsigned char *)(sub_1001E6484(v8) + 16) = 4;
          }
        }
      }
      if (v5[47])
      {
        sub_1001DD56C(v5[47], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E6484(v8)) {
            *(unsigned char *)(sub_1001E6484(v8) + 16) = 4;
          }
        }
      }
      if (v5[62])
      {
        sub_1001DD56C(v5[62], (uint64_t *)&v8);
        if (v8)
        {
          if (sub_1001E6484(v8)) {
            *(unsigned char *)(sub_1001E6484(v8) + 16) = 4;
          }
        }
      }
    }
  }
  sub_1004AF8EC();
  operator new();
}

void sub_100669008()
{
}

void sub_10066909C()
{
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEBUG)) {
    sub_10078D248();
  }
  sub_1004AF8EC();
  operator new();
}

void sub_10066916C()
{
}

uint64_t sub_100669190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100667F9C(a1, a2);
  uint64_t v5 = v4;
  if (*(int *)(v4 + 16) < 2)
  {
    if (!*(void *)(v4 + 152)) {
      *(void *)(v4 + 152) = mach_absolute_time();
    }
    *(void *)(v5 + 160) = mach_absolute_time();
    uint64_t v8 = +[NSMutableDictionary dictionary];
    uint64_t v9 = *(void **)(v5 + 200);
    *(void *)(v5 + 200) = v8;

    return sub_100668630(a1, a2);
  }
  else
  {
    uint64_t v6 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
    {
      sub_100475EE0(a2, (uint64_t)__p);
      if (v14 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      uint64_t v11 = *(int *)(v5 + 16);
      if (v11 > 9) {
        uint64_t v12 = "Unknown State";
      }
      else {
        uint64_t v12 = off_1009BD6A0[v11];
      }
      *(_DWORD *)stat buf = 136315394;
      int v16 = v10;
      __int16 v17 = 2080;
      unint64_t v18 = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "PFC in progress for device %s, ignoring duplicate request - current state is %s", buf, 0x16u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    return 4508;
  }
}

uint64_t sub_100669338(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 672) & 0x10) != 0) {
    return sub_100478B2C(a2, 47);
  }
  else {
    return 0;
  }
}

void sub_100669354(uint64_t a1, uint64_t a2)
{
  int v5 = *(_DWORD *)(a2 + 20);
  int v4 = *(_DWORD *)(a2 + 24);
  uint64_t v6 = *(unsigned int *)(a2 + 16);
  int v7 = qword_100A1A038;
  if ((int)v6 >= 4 && os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_FAULT))
  {
    sub_10078D2B0(v6, (uint64_t)v7, __p);
    int v7 = __p[0];
  }
  int v8 = v4 & v5;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(*(void *)a2, (uint64_t)__p);
    uint64_t v9 = (SBYTE7(v49) & 0x80u) == 0 ? __p : (void **)__p[0];
    *(_DWORD *)stat buf = 136315394;
    *(void *)&uint8_t buf[4] = v9;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Compose Profile Descriptor for device %s with supported profiles %x", buf, 0x12u);
    if (SBYTE7(v49) < 0) {
      operator delete(__p[0]);
    }
  }
  if (*(unsigned char *)(*(void *)a2 + 976))
  {
    int v10 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Wireless Splitter this is a guest not in contacts device removing HFP / GATT profiles", (uint8_t *)__p, 2u);
    }
    v8 &= 0xFFEFFFFE;
  }
  if (v8)
  {
    *(_OWORD *)__n128 __p = 0u;
    long long v49 = 0u;
    sub_100053710((uint64_t)__p, 0);
    __int16 v11 = *(_WORD *)(a1 + 680);
    sub_100011B98((uint64_t)__p, 3);
    sub_100011B98((uint64_t)__p, 0);
    uint64_t v12 = sub_10001195C((uint64_t)__p, v11);
    sub_10066A374((uint64_t)v12, (uint64_t)__p, v13, a2);
    sub_10001195C((uint64_t)__p, 2);
    char v47 = 0;
    sub_10001B8E0(&v47);
    if ((v8 & 0x10) != 0)
    {
      if (qword_1009F8418 != -1) {
        dispatch_once(&qword_1009F8418, &stru_1009BD528);
      }
      int v14 = sub_1004191E0(qword_1009F8410, (int *)(*(void *)a2 + 128), (__int16 *)(a2 + 54), (_WORD *)(a2 + 64));
      memset(buf, 0, 32);
      sub_100053710((uint64_t)buf, 0);
      if (!v14)
      {
        if (qword_1009F8418 != -1) {
          dispatch_once(&qword_1009F8418, &stru_1009BD528);
        }
        int v14 = sub_100419250(qword_1009F8410, (uint64_t)buf, (__int16 *)(a2 + 54), (__int16 *)(a2 + 64));
      }
      sub_10001B910(&v47);
      if (v14)
      {
        if (qword_1009F8418 != -1) {
          dispatch_once(&qword_1009F8418, &stru_1009BD528);
        }
        sub_10041A928(qword_1009F8410, *(void *)a2, (void *)*(unsigned __int16 *)(a2 + 54), *(unsigned __int16 *)(a2 + 64), 0, *(unsigned __int8 *)(a2 + 135));
        v8 &= ~0x10u;
        *(_WORD *)(a2 + 54) = 0;
        *(_WORD *)(a2 + 64) = 0;
      }
      else
      {
        sub_1004BC500((uint64_t)__p, 0x10u);
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v15 = sub_100045F00((uint64_t)v50);
        sub_10001195C((uint64_t)__p, v15);
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int v16 = (char *)sub_10004A6E4((uint64_t)v50);
        sub_1000335D8(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v17 = sub_100045F00((uint64_t)&v45);
        sub_1004BC4E4((uint64_t)__p, v16, v17);
        uint64_t v45 = &off_100998428;
        if (v46) {
          sub_1000368F4(v46);
        }
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
      }
      sub_1002B804C(&v47);
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if (v8)
    {
      if (qword_1009FB058 != -1) {
        dispatch_once(&qword_1009FB058, &stru_1009BD548);
      }
      int v18 = sub_100529888((uint64_t)off_1009FB050, *(void *)a2 + 128, (_WORD *)(a2 + 74), (_WORD *)(a2 + 140));
      if (!v18)
      {
        if (*(unsigned char *)(a2 + 145)) {
          int v18 = sub_100264F78(*(void *)a2 + 128, (_WORD *)(a2 + 124));
        }
        else {
          int v18 = 0;
        }
      }
      memset(buf, 0, 32);
      sub_100053710((uint64_t)buf, 0);
      if (!v18)
      {
        if (qword_1009FB058 != -1) {
          dispatch_once(&qword_1009FB058, &stru_1009BD548);
        }
        int v18 = sub_100529978((uint64_t)off_1009FB050, (uint64_t)buf, *(void *)a2, (__int16 *)(a2 + 74), (unsigned __int16 *)(a2 + 140), *(unsigned __int8 *)(a2 + 145));
      }
      sub_10001B910(&v47);
      if (v18)
      {
        if (qword_1009FB058 != -1) {
          dispatch_once(&qword_1009FB058, &stru_1009BD548);
        }
        sub_1005298E8((uint64_t)off_1009FB050, *(void *)a2 + 128, (unsigned __int16 *)(a2 + 74), (unsigned __int16 *)(a2 + 140));
        v8 &= ~1u;
        *(_WORD *)(a2 + 74) = 0;
        if (*(unsigned char *)(a2 + 145))
        {
          sub_10026511C(*(void *)a2 + 128, *(unsigned __int16 *)(a2 + 124));
          *(_WORD *)(a2 + 124) = 0;
        }
      }
      else
      {
        sub_1004BC500((uint64_t)__p, 1u);
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v19 = sub_100045F00((uint64_t)v50);
        sub_10001195C((uint64_t)__p, v19);
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        char v20 = (char *)sub_10004A6E4((uint64_t)v50);
        sub_1000335D8(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v21 = sub_100045F00((uint64_t)&v45);
        sub_1004BC4E4((uint64_t)__p, v20, v21);
        uint64_t v45 = &off_100998428;
        if (v46) {
          sub_1000368F4(v46);
        }
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
      }
      sub_1002B804C(&v47);
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if ((v8 & 0x80000) != 0)
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009BD568);
      }
      int v22 = sub_1002AC7DC((uint64_t)off_1009F8098, *(void *)a2 + 128, (unsigned __int16 *)(a2 + 84));
      memset(buf, 0, 32);
      sub_100053710((uint64_t)buf, 0);
      if (!v22)
      {
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009BD568);
        }
        int v22 = sub_1002AC844((uint64_t)off_1009F8098, *(void *)a2, (uint64_t)buf, (__int16 *)(a2 + 84));
      }
      sub_100480FF4(*(void *)a2, v22 == 0);
      sub_10001B910(&v47);
      if (v22)
      {
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009BD568);
        }
        sub_1002AF240(off_1009F8098, *(void *)a2, *(unsigned __int16 *)(a2 + 84), 114);
        v8 &= ~0x80000u;
        *(_WORD *)(a2 + 84) = 0;
      }
      else
      {
        sub_1004BC500((uint64_t)__p, 0x80000u);
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v23 = sub_100045F00((uint64_t)v50);
        sub_10001195C((uint64_t)__p, v23);
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v24 = (char *)sub_10004A6E4((uint64_t)v50);
        sub_1000335D8(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v25 = sub_100045F00((uint64_t)&v45);
        sub_1004BC4E4((uint64_t)__p, v24, v25);
        uint64_t v45 = &off_100998428;
        if (v46) {
          sub_1000368F4(v46);
        }
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
      }
      sub_1002B804C(&v47);
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if ((v8 & 8) != 0)
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BD588);
      }
      int v26 = sub_1005FBF74((uint64_t)off_1009FB210, *(void *)a2 + 128, (__int16 *)(a2 + 94));
      memset(buf, 0, 32);
      sub_100053710((uint64_t)buf, 0);
      if (!v26)
      {
        if (qword_1009FB218 != -1) {
          dispatch_once(&qword_1009FB218, &stru_1009BD588);
        }
        int v26 = sub_1005FBFE0((uint64_t)off_1009FB210, (uint64_t)buf, (__int16 *)(a2 + 94), (__int16 *)(a2 + 104));
      }
      sub_10001B910(&v47);
      if (v26)
      {
        if (qword_1009FB218 != -1) {
          dispatch_once(&qword_1009FB218, &stru_1009BD588);
        }
        sub_1005FC848((uint64_t)off_1009FB210, *(void *)a2, *(unsigned __int16 *)(a2 + 94), *(unsigned __int16 *)(a2 + 104), 0);
        v8 &= ~8u;
        *(_WORD *)(a2 + 94) = 0;
        *(_WORD *)(a2 + 104) = 0;
      }
      else
      {
        sub_1004BC500((uint64_t)__p, 8u);
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v27 = sub_100045F00((uint64_t)v50);
        sub_10001195C((uint64_t)__p, v27);
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        long long v28 = (char *)sub_10004A6E4((uint64_t)v50);
        sub_1000335D8(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v29 = sub_100045F00((uint64_t)&v45);
        sub_1004BC4E4((uint64_t)__p, v28, v29);
        uint64_t v45 = &off_100998428;
        if (v46) {
          sub_1000368F4(v46);
        }
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
      }
      sub_1002B804C(&v47);
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if ((v8 & 0x100000) != 0)
    {
      unint64_t v30 = (__int16 *)(a2 + 114);
      sub_10010E3C8(*(void *)a2 + 128, (_WORD *)(a2 + 114));
      memset(buf, 0, 32);
      sub_100053710((uint64_t)buf, 0);
      __int16 v44 = 0;
      char v43 = 0;
      __int16 v42 = 0;
      if (sub_1001DF230(*(unsigned __int16 *)(a2 + 114), &v42, &v44, &v43))
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
          sub_10078D27C();
        }
        sub_10010E510(*(void *)a2 + 128, *(unsigned __int16 *)(a2 + 114));
        v8 &= ~0x100000u;
        *unint64_t v30 = 0;
      }
      else
      {
        sub_100011B98((uint64_t)buf, 1);
        sub_100011B98((uint64_t)buf, 7);
        sub_10001195C((uint64_t)buf, *v30);
        sub_10001195C((uint64_t)buf, v42);
        sub_10001195C((uint64_t)buf, v44);
        sub_100011B98((uint64_t)buf, v43);
        sub_1004BC500((uint64_t)__p, 0x100000u);
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        __int16 v31 = sub_100045F00((uint64_t)v50);
        sub_10001195C((uint64_t)__p, v31);
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
        sub_1000335D8(v50, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int v32 = (char *)sub_10004A6E4((uint64_t)v50);
        sub_1000335D8(&v45, *(const void **)&buf[8], *(void *)&buf[16] - *(void *)&buf[8]);
        int64_t v33 = sub_100045F00((uint64_t)&v45);
        sub_1004BC4E4((uint64_t)__p, v32, v33);
        uint64_t v45 = &off_100998428;
        if (v46) {
          sub_1000368F4(v46);
        }
        *(void *)long long v50 = &off_100998428;
        if (v51) {
          sub_1000368F4(v51);
        }
      }
      if (*(void *)&buf[8])
      {
        *(void *)&uint8_t buf[16] = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
    if (*(_DWORD *)(a2 + 20) != v8) {
      *(_DWORD *)(a2 + 20) = v8;
    }
    uint64_t v34 = *(unsigned __int16 *)(a2 + 48);
    uint64_t v35 = *(void *)a2;
    sub_1000335D8(buf, __p[1], v49 - (unint64_t)__p[1]);
    int v36 = (char *)sub_10004A6E4((uint64_t)buf);
    sub_1000335D8(v50, __p[1], v49 - (unint64_t)__p[1]);
    unsigned __int16 v37 = sub_100045F00((uint64_t)v50);
    uint64_t v38 = sub_1001DE4D0((uint64_t)sub_10066A688, v34, v35 + 128, v36, v37);
    *(void *)long long v50 = &off_100998428;
    if (v51) {
      sub_1000368F4(v51);
    }
    *(void *)stat buf = &off_100998428;
    uint64_t v39 = *(void *)&buf[8];
    if (*(void *)&buf[8]) {
      sub_1000368F4(*(atomic_uint **)&buf[8]);
    }
    if (v38)
    {
      uint64_t v40 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
      {
        sub_1000335D8(buf, __p[1], v49 - (unint64_t)__p[1]);
        int v41 = sub_100045F00((uint64_t)buf);
        *(_DWORD *)long long v50 = 67109376;
        *(_DWORD *)&uint8_t v50[4] = v38;
        LOWORD(v51) = 1024;
        *(_DWORD *)((char *)&v51 + 2) = v41;
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Fast Connect L2CAP Write failed with result %d for data size %d", v50, 0xEu);
        *(void *)stat buf = &off_100998428;
        if (*(void *)&buf[8]) {
          sub_1000368F4(*(atomic_uint **)&buf[8]);
        }
      }
      sub_100668114(a1, *(void *)a2 + 128, v38);
    }
    else
    {
      sub_100667DDC(v39, a2, 4u);
    }
    sub_10001B8AC(&v47);
    if (__p[1])
    {
      *(void **)&long long v49 = __p[1];
      operator delete(__p[1]);
    }
  }
}

void sub_10066A17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t (**a20)(),atomic_uint *a21,uint64_t a22,void *__p,uint64_t a24)
{
  a20 = &off_100998428;
  if (a21) {
    sub_1000368F4(a21);
  }
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10001B8AC(&a15);
  if (a17)
  {
    a18 = (uint64_t)a17;
    operator delete(a17);
  }
  _Unwind_Resume(a1);
}

void sub_10066A374(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_10001195C(a2, 1);
  *(_OWORD *)__n128 __p = 0u;
  long long v16 = 0u;
  sub_100053710((uint64_t)__p, 0);
  sub_100011B98((uint64_t)__p, 1);
  sub_100011B98((uint64_t)__p, 4);
  sub_1004BC500((uint64_t)__p, *(_DWORD *)(a4 + 20));
  sub_100011B98((uint64_t)__p, 2);
  sub_100011B98((uint64_t)__p, 8);
  sub_1004BC554((uint64_t)__p, 0);
  sub_100011B98((uint64_t)__p, 3);
  sub_100011B98((uint64_t)__p, 4);
  unsigned int v14 = 0;
  char v13 = 0;
  sub_10001B8E0(&v13);
  sub_100202AB4((char *)&v14);
  sub_1004BC500((uint64_t)__p, v14);
  sub_100011B98((uint64_t)__p, 4);
  sub_100011B98((uint64_t)__p, 8);
  uint64_t __src = 0;
  sub_1001DE028(&__src);
  sub_1004BC4E4((uint64_t)__p, (char *)&__src, 8);
  sub_1000335D8(&v11, __p[1], v16 - (unint64_t)__p[1]);
  __int16 v6 = sub_100045F00((uint64_t)&v11);
  sub_10001195C(a2, v6);
  __int16 v11 = &off_100998428;
  if (v12) {
    sub_1000368F4(v12);
  }
  sub_1000335D8(&v11, __p[1], v16 - (unint64_t)__p[1]);
  int v7 = (char *)sub_10004A6E4((uint64_t)&v11);
  sub_1000335D8(&v9, __p[1], v16 - (unint64_t)__p[1]);
  int64_t v8 = sub_100045F00((uint64_t)&v9);
  sub_1004BC4E4(a2, v7, v8);
  uint64_t v9 = &off_100998428;
  if (v10) {
    sub_1000368F4(v10);
  }
  __int16 v11 = &off_100998428;
  if (v12) {
    sub_1000368F4(v12);
  }
  sub_10001B8AC(&v13);
  if (__p[1])
  {
    *(void **)&long long v16 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_10066A5B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (a13) {
    sub_1000368F4(a13);
  }
  sub_10001B8AC(&a16);
  if (__p)
  {
    a19 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10066A688(uint64_t a1, uint64_t a2, int a3, int a4)
{
  __int16 v6 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109376;
    v7[1] = a3;
    __int16 v8 = 1024;
    int v9 = a4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Wrote %d bytes with result %d", (uint8_t *)v7, 0xEu);
  }
}

unsigned char *sub_10066A744(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (sub_1004BC3C8(a3) != 1 && os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
    sub_10078D574();
  }
  char v45 = 0;
  sub_10001B8E0(&v45);
  __int16 v44 = 0;
  int v43 = 0;
  if (sub_100204F78(a2, (uint64_t)&v43))
  {
    sub_10001B910(&v45);
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078D50C();
    }
    return sub_10001B8AC(&v45);
  }
  uint64_t v6 = sub_100667D14(a1, (uint64_t)&v43);
  uint64_t v7 = v6;
  if (*(int *)(v6 + 16) >= 5)
  {
    uint64_t v6 = os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_FAULT);
    if (v6) {
      sub_10078D480();
    }
  }
  sub_100667DDC(v6, v7, 5u);
  __int16 v8 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(*(void *)v7, (uint64_t)v46);
    int v9 = (SBYTE7(v47) & 0x80u) == 0 ? v46 : *(uint8_t **)v46;
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Parsing Profile Descriptor for device %s", (uint8_t *)&buf, 0xCu);
    if (SBYTE7(v47) < 0) {
      operator delete(*(void **)v46);
    }
  }
  unsigned int v10 = sub_1004BC3C8(a3);
  uint64_t v11 = sub_100197A30((uint64_t)&v43);
  if (v10)
  {
    uint64_t v12 = v11;
    while (1)
    {
      int v13 = (char)sub_1004BC378(a3);
      if (v13 < 0)
      {
        unsigned int v14 = sub_1004BC3C8(a3);
        int v15 = 65533;
      }
      else
      {
        unsigned int v14 = sub_1004BC378(a3);
        int v15 = 65534;
      }
      int v16 = v13 & 0x7F;
      switch(v13 & 0x7F)
      {
        case 1:
          if (v14)
          {
            if (v14 != 4) {
              goto LABEL_38;
            }
            sub_1004BC430(a3);
          }
          goto LABEL_41;
        case 2:
          if (v14)
          {
            if (v14 != 8) {
              goto LABEL_38;
            }
            *(void *)unint64_t v46 = 0;
            sub_1004BC33C(a3, v46, 8uLL);
          }
          goto LABEL_41;
        case 3:
          if (v14)
          {
            if (v14 != 4) {
              goto LABEL_38;
            }
            *(_DWORD *)(v12 + 229) = sub_1004BC430(a3);
            *(unsigned char *)(v12 + 228) = 1;
          }
          goto LABEL_41;
        case 4:
          if (v14)
          {
            if (v14 != 8) {
              goto LABEL_38;
            }
            *(void *)unint64_t v46 = 0;
            sub_1004BC33C(a3, v46, 8uLL);
            sub_1001E5134((uint64_t)sub_10022EF58);
            sub_1001E2404((uint64_t)&v43, 0, 3, v46, 8, 0);
            sub_1001E50D4((uint64_t)sub_10022EF58, 48);
          }
          goto LABEL_41;
        default:
          int64_t v17 = qword_100A1A038;
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)unint64_t v46 = 67109120;
            *(_DWORD *)&v46[4] = v16;
            _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "fastConnectParseProfileDescriptorMessage Key not recognized %d", v46, 8u);
            if (v14)
            {
LABEL_38:
              int v18 = qword_100A1A038;
              if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)unint64_t v46 = 67109632;
                *(_DWORD *)&v46[4] = v16;
                *(_WORD *)&v46[8] = 1024;
                *(_DWORD *)&v46[10] = v14;
                *(_WORD *)&v46[14] = 1024;
                LODWORD(v47) = v14;
                _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "fastConnectParseProfileDescriptorMessage Key:%d Dumped %d of %d bytes ", v46, 0x14u);
              }
              sub_1004BC490(a3, v14);
            }
          }
          else if (v14)
          {
            goto LABEL_38;
          }
LABEL_41:
          __int16 v19 = v10 + v15;
          unsigned int v10 = v10 + v15 - v14;
          if (v19 == (_WORD)v14) {
            goto LABEL_42;
          }
          break;
      }
    }
  }
LABEL_42:
  sub_10001B910(&v45);
  if (sub_1004BC3C8(a3) != 2 && os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
    sub_10078D418();
  }
  int v41 = v43;
  __int16 v42 = v44;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  char v20 = (uint64_t *)sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v41, 1);
  int v21 = 0;
  uint64_t v34 = (unsigned __int16 *)(v7 + 74);
  int64_t v33 = (unsigned __int16 *)(v7 + 140);
  while ((unint64_t)(sub_100045F00(a3 + 8) - *(void *)(a3 + 24)) >= 9)
  {
    int v22 = sub_1004BC430(a3);
    __int16 v23 = sub_1004BC3C8(a3);
    if (sub_100045F00(a3 + 8) - *(void *)(a3 + 24) < (unint64_t)v23)
    {
      long long v28 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
      {
        int v32 = sub_100045F00(a3 + 8) - *(_DWORD *)(a3 + 24);
        *(_DWORD *)unint64_t v46 = 67109376;
        *(_DWORD *)&v46[4] = v23;
        *(_WORD *)&v46[8] = 1024;
        *(_DWORD *)&v46[10] = v32;
        _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "fastConnectParseProfileDescriptorMessage Length Error Descriptor length %u remaining %u", v46, 0xEu);
      }
      break;
    }
    size_t v24 = v23;
    int64_t v25 = sub_100022FE8(v23);
    if (!v25) {
      break;
    }
    sub_1004BC33C(a3, v25, v24);
    long long buf = 0uLL;
    sub_1000335D8(&buf, v25, v24);
    *(_OWORD *)unint64_t v46 = 0u;
    long long v47 = 0u;
    uint64_t v26 = sub_1004BC2E4((uint64_t)v46, 0, (uint64_t)&buf);
    if (v22 <= 15)
    {
      if (v22 == 1)
      {
        if (qword_1009FB058 != -1) {
          dispatch_once(&qword_1009FB058, &stru_1009BD548);
        }
        if (sub_100529CF0((uint64_t)off_1009FB050, (uint64_t)v46, (uint64_t)v20, *v34, v33, (unsigned char *)(v7 + 142), (unsigned char *)(v7 + 143), (unsigned char *)(v7 + 144)))
        {
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
            sub_10078D388(&v37, v38);
          }
          *(_DWORD *)(v7 + 20) &= ~1u;
          if (qword_1009FB058 != -1) {
            dispatch_once(&qword_1009FB058, &stru_1009BD548);
          }
          sub_1005298E8((uint64_t)off_1009FB050, *(void *)v7 + 128, v34, v33);
          if (*(unsigned char *)(v7 + 145))
          {
            sub_10026511C(*(void *)v7 + 128, *(unsigned __int16 *)(v7 + 124));
            *(_WORD *)(v7 + 124) = 0;
          }
        }
      }
      else if (v22 == 8)
      {
        if (qword_1009FB218 != -1) {
          dispatch_once(&qword_1009FB218, &stru_1009BD588);
        }
        sub_1005FC18C();
      }
    }
    else
    {
      switch(v22)
      {
        case 0x10:
          if (qword_1009F8418 != -1) {
            dispatch_once(&qword_1009F8418, &stru_1009BD528);
          }
          if (sub_100419528(qword_1009F8410, (uint64_t)v46, v20, *(unsigned __int16 *)(v7 + 54), *(unsigned __int16 *)(v7 + 64), (_WORD *)(v7 + 136)))
          {
            if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
              sub_10078D358(&v39, v40);
            }
            *(_DWORD *)(v7 + 20) &= ~0x10u;
            if (qword_1009F8418 != -1) {
              dispatch_once(&qword_1009F8418, &stru_1009BD528);
            }
            sub_10041A928(qword_1009F8410, (uint64_t)v20, (void *)*(unsigned __int16 *)(v7 + 54), *(unsigned __int16 *)(v7 + 64), *(unsigned __int16 *)(v7 + 136), *(unsigned __int8 *)(v7 + 135));
          }
          else
          {
            if (qword_1009F8418 != -1) {
              dispatch_once(&qword_1009F8418, &stru_1009BD528);
            }
            sub_10041A204(qword_1009F8410, *(unsigned __int16 *)(v7 + 136), (unsigned char *)(v7 + 135), (unsigned char *)(v7 + 134), (unsigned __int16 *)(v7 + 138), *(unsigned __int16 *)(v7 + 64));
          }
          break;
        case 0x80000:
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009BD568);
          }
          if (sub_1002ACA00((uint64_t)off_1009F8098, (uint64_t)v46, (uint64_t)v20, *(unsigned __int16 *)(v7 + 84)))
          {
            if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
              sub_10078D3B8(&v35, v36);
            }
            *(_DWORD *)(v7 + 20) &= ~0x80000u;
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009BD568);
            }
            sub_1002AF240(off_1009F8098, *(void *)v7, *(unsigned __int16 *)(v7 + 84), 114);
          }
          break;
        case 0x100000:
          sub_10066B280(v26, (uint64_t)v46, v27, *(unsigned __int16 *)(v7 + 114));
          break;
      }
    }
    sub_100023010(v25);
    *(void *)&v46[8] = &off_100998428;
    if ((void)v47) {
      sub_1000368F4((atomic_uint *)v47);
    }
    *(void *)&long long buf = &off_100998428;
    if (*((void *)&buf + 1)) {
      sub_1000368F4(*((atomic_uint **)&buf + 1));
    }
    v21 |= v22;
  }
  int v29 = *(_DWORD *)(v7 + 20);
  if (v29 != v21)
  {
    unint64_t v30 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)unint64_t v46 = 67109376;
      *(_DWORD *)&v46[4] = v21;
      *(_WORD *)&v46[8] = 1024;
      *(_DWORD *)&v46[10] = v29;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Profile mismatch error expected 0x%x received 0x%x", v46, 0xEu);
      int v29 = *(_DWORD *)(v7 + 20);
    }
    *(_DWORD *)(v7 + 20) = v29 & v21;
  }
  return sub_10001B8AC(&v45);
}

void sub_10066B1C0(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 145));
  _Unwind_Resume(a1);
}

uint64_t sub_10066B280(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v6 = sub_100045F00(a2 + 8) - *(_DWORD *)(a2 + 24);
  unsigned int v7 = v6 << 16;
  if ((int)(v6 << 16) >= 1)
  {
    int v21 = 0;
    do
    {
      int v8 = (char)sub_1004BC378(a2);
      if (v8 < 0)
      {
        unsigned int v9 = sub_1004BC3C8(a2);
        int v10 = HIWORD(v7) - 3;
      }
      else
      {
        unsigned int v9 = sub_1004BC378(a2);
        LOWORD(v10) = v6 - 2;
      }
      int v11 = v8 & 0x7F;
      if (v11 == 16)
      {
        unsigned int v12 = v9;
        unsigned __int16 v13 = v9;
        if (v9 != 2) {
          goto LABEL_22;
        }
      }
      else
      {
        if (v11 != 3)
        {
          if (v11 == 1)
          {
            unsigned int v12 = v9;
            unsigned __int16 v13 = v9;
            if (v9 >= 7)
            {
              __int16 v14 = sub_1004BC3C8(a2);
              sub_1004BC3C8(a2);
              __int16 v15 = sub_1004BC3C8(a2);
              sub_1004BC378(a2);
              buf[0] = 0;
              sub_10001B8E0(buf);
              if (sub_1001DD56C(a4, (uint64_t *)&v21) || !sub_1001E6484(v21))
              {
                if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
                  sub_10078D5DC(&v19, v20);
                }
              }
              else
              {
                *(_WORD *)(sub_1001E6484(v21) + 8) = v14;
                *(_WORD *)(sub_1001E6484(v21) + 32) = v15;
              }
              sub_10001B910(buf);
              sub_10001B8AC(buf);
              unsigned int v12 = (unsigned __int16)(v9 - 7);
              unsigned __int16 v13 = v9 - 7;
            }
          }
          else
          {
            int v16 = qword_100A1A038;
            unsigned int v12 = v9;
            unsigned __int16 v13 = v9;
            if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67109120;
              int v23 = v11;
              _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "parseGATTDescriptor Key not recognized %d", buf, 8u);
              unsigned int v12 = v9;
              unsigned __int16 v13 = v9;
            }
          }
LABEL_22:
          if (v13)
          {
            int64_t v17 = qword_100A1A038;
            if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)long long buf = 67109632;
              int v23 = v11;
              __int16 v24 = 1024;
              unsigned int v25 = v12;
              __int16 v26 = 1024;
              unsigned int v27 = v9;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "parseGATTDescriptor Key:%d Dumped %d of %d bytes ", buf, 0x14u);
            }
            sub_1004BC490(a2, v13);
          }
          goto LABEL_26;
        }
        unsigned int v12 = v9;
        unsigned __int16 v13 = v9;
        if (v9 != 2) {
          goto LABEL_22;
        }
      }
      sub_1004BC3C8(a2);
LABEL_26:
      unsigned int v6 = (__int16)v10 - v9;
      unsigned int v7 = v6 << 16;
    }
    while ((int)(v6 << 16) > 0);
  }
  return 0;
}

void sub_10066B56C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

unsigned char *sub_10066B588(uint64_t a1, uint64_t a2)
{
  __int16 v30 = 0;
  int v29 = 0;
  char v28 = 0;
  sub_10001B8E0(&v28);
  if (sub_100204F78(a2, (uint64_t)&v29))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078D698();
    }
  }
  else
  {
    sub_10001B910(&v28);
    uint64_t v4 = sub_100667D14(a1, (uint64_t)&v29);
    if (*(int *)(v4 + 16) >= 6 && os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_FAULT)) {
      sub_10078D60C();
    }
    uint64_t v5 = mach_absolute_time();
    *(void *)(v4 + 184) = v5;
    unsigned int v6 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v7 = (v5 - *(void *)(v4 + 176)) * dword_100A14544 / *(unsigned int *)algn_100A14548 / 0xF4240;
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Descriptor took %d ms", buf, 8u);
      unsigned int v6 = qword_100A1A038;
    }
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(*(void *)v4, (uint64_t)buf);
      int v8 = (SBYTE7(v35) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      int v9 = *(_DWORD *)(v4 + 20);
      *(_DWORD *)int64_t v33 = 136315394;
      *(void *)&v33[4] = v8;
      *(_WORD *)&v33[12] = 1024;
      *(_DWORD *)&v33[14] = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Compose Service Configure message for device %s with profiles %x", v33, 0x12u);
      if (SBYTE7(v35) < 0) {
        operator delete(*(void **)buf);
      }
    }
    int v26 = v29;
    __int16 v27 = v30;
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
    }
    uint64_t v10 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v26, 1);
    if (*(_DWORD *)(v4 + 20))
    {
      uint64_t v11 = v10;
      *(_OWORD *)long long buf = 0u;
      long long v35 = 0u;
      sub_100053710((uint64_t)buf, 0);
      __int16 v12 = *(_WORD *)(a1 + 680);
      sub_100011B98((uint64_t)buf, 5);
      sub_100011B98((uint64_t)buf, 0);
      sub_10001195C((uint64_t)buf, v12);
      sub_10001195C((uint64_t)buf, 2);
      int v13 = *(_DWORD *)(v4 + 20);
      if ((v13 & 0x10) != 0)
      {
        sub_1004BC500((uint64_t)buf, 0x10u);
        sub_10001195C((uint64_t)buf, 6);
        sub_100011B98((uint64_t)buf, 21);
        sub_100011B98((uint64_t)buf, 1);
        sub_100011B98((uint64_t)buf, *(unsigned char *)(v4 + 134));
        sub_100011B98((uint64_t)buf, 20);
        sub_100011B98((uint64_t)buf, 1);
        sub_100011B98((uint64_t)buf, *(unsigned char *)(v4 + 135));
        int v13 = *(_DWORD *)(v4 + 20);
      }
      if (v13)
      {
        sub_1004BC500((uint64_t)buf, 1u);
        sub_10001195C((uint64_t)buf, 0);
        int v13 = *(_DWORD *)(v4 + 20);
      }
      if ((v13 & 0x80000) != 0)
      {
        memset(v33, 0, sizeof(v33));
        sub_100053710((uint64_t)v33, 0);
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009BD568);
        }
        if (sub_1002AE3D4((uint64_t)off_1009F8098, v11, (uint64_t)v33))
        {
          *(_DWORD *)(v4 + 20) &= ~0x80000u;
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009BD568);
          }
          sub_1002AF240(off_1009F8098, *(void *)v4, *(unsigned __int16 *)(v4 + 84), 114);
        }
        else
        {
          sub_1004BC500((uint64_t)buf, 0x80000u);
          sub_1000335D8(v31, *(const void **)&v33[8], *(void *)&v33[16] - *(void *)&v33[8]);
          __int16 v14 = sub_100045F00((uint64_t)v31);
          sub_10001195C((uint64_t)buf, v14);
          *(void *)__int16 v31 = &off_100998428;
          if (v32) {
            sub_1000368F4(v32);
          }
          sub_1000335D8(v31, *(const void **)&v33[8], *(void *)&v33[16] - *(void *)&v33[8]);
          __int16 v15 = (char *)sub_10004A6E4((uint64_t)v31);
          sub_1000335D8(&v24, *(const void **)&v33[8], *(void *)&v33[16] - *(void *)&v33[8]);
          int64_t v16 = sub_100045F00((uint64_t)&v24);
          sub_1004BC4E4((uint64_t)buf, v15, v16);
          __int16 v24 = &off_100998428;
          if (v25) {
            sub_1000368F4(v25);
          }
          *(void *)__int16 v31 = &off_100998428;
          if (v32) {
            sub_1000368F4(v32);
          }
        }
        if (*(void *)&v33[8])
        {
          *(void *)&unsigned char v33[16] = *(void *)&v33[8];
          operator delete(*(void **)&v33[8]);
        }
        int v13 = *(_DWORD *)(v4 + 20);
      }
      if ((v13 & 8) != 0)
      {
        sub_1004BC500((uint64_t)buf, 8u);
        sub_10001195C((uint64_t)buf, 0);
        int v13 = *(_DWORD *)(v4 + 20);
      }
      if ((v13 & 0x100000) != 0)
      {
        sub_1004BC500((uint64_t)buf, 0x100000u);
        sub_10001195C((uint64_t)buf, 0);
      }
      sub_1002B804C(&v28);
      sub_1000335D8(v33, *(const void **)&buf[8], v35 - *(void *)&buf[8]);
      int64_t v17 = (char *)sub_10004A6E4((uint64_t)v33);
      sub_1000335D8(v31, *(const void **)&buf[8], v35 - *(void *)&buf[8]);
      unsigned __int16 v18 = sub_100045F00((uint64_t)v31);
      uint64_t v19 = sub_1001DE4D0((uint64_t)sub_10066A688, a2, (uint64_t)&v29, v17, v18);
      *(void *)__int16 v31 = &off_100998428;
      if (v32) {
        sub_1000368F4(v32);
      }
      *(void *)int64_t v33 = &off_100998428;
      if (*(void *)&v33[8]) {
        sub_1000368F4(*(atomic_uint **)&v33[8]);
      }
      uint64_t v20 = sub_10001B910(&v28);
      if (v19)
      {
        int v21 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
        {
          sub_1000335D8(v33, *(const void **)&buf[8], v35 - *(void *)&buf[8]);
          int v23 = sub_100045F00((uint64_t)v33);
          *(_DWORD *)__int16 v31 = 67109376;
          *(_DWORD *)&uint8_t v31[4] = v19;
          LOWORD(v32) = 1024;
          *(_DWORD *)((char *)&v32 + 2) = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "L2CAP Write failed with result %d for data size %d", v31, 0xEu);
          *(void *)int64_t v33 = &off_100998428;
          if (*(void *)&v33[8]) {
            sub_1000368F4(*(atomic_uint **)&v33[8]);
          }
        }
        sub_100668114(a1, *(void *)v4 + 128, v19);
      }
      else
      {
        sub_100667DDC(v20, v4, 6u);
      }
      if (*(void *)&buf[8])
      {
        *(void *)&long long v35 = *(void *)&buf[8];
        operator delete(*(void **)&buf[8]);
      }
    }
  }
  return sub_10001B8AC(&v28);
}

void sub_10066BC70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t (**a16)(), atomic_uint *a17, uint64_t a18, void *__p, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  a16 = &off_100998428;
  if (a17) {
    sub_1000368F4(a17);
  }
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a23)
  {
    a24 = (uint64_t)a23;
    operator delete(a23);
  }
  sub_10001B8AC(&a14);
  _Unwind_Resume(a1);
}

void sub_10066BDF4(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v7 = *a2;
  if ((*a2 & 0x10) != 0)
  {
    char v16 = 0;
    sub_10001B8E0(&v16);
    __int16 v15 = 0;
    int v8 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 64), (uint64_t *)&v15);
    uint64_t v9 = sub_1001E6484(v15);
    sub_10001B910(&v16);
    if (!v8 && v9)
    {
      if (qword_1009F8418 != -1) {
        dispatch_once(&qword_1009F8418, &stru_1009BD528);
      }
      sub_10041A48C((void *)qword_1009F8410, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078D8A0();
    }
    *(_DWORD *)(a4 + 20) &= ~0x10u;
    *a2 &= ~0x10u;
    if (qword_1009F8418 != -1) {
      dispatch_once(&qword_1009F8418, &stru_1009BD528);
    }
    sub_10041A928(qword_1009F8410, a3, (void *)*(unsigned __int16 *)(a4 + 54), *(unsigned __int16 *)(a4 + 64), *(unsigned __int16 *)(a4 + 136), *(unsigned __int8 *)(a4 + 135));
    sub_10001B8AC(&v16);
    int v7 = *a2;
  }
  if (v7)
  {
    __int16 v15 = 0;
    char v16 = 0;
    sub_10001B8E0(&v16);
    int v10 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 74), (uint64_t *)&v15);
    sub_10001B910(&v16);
    if (!v10)
    {
      if (qword_1009FB058 != -1) {
        dispatch_once(&qword_1009FB058, &stru_1009BD548);
      }
      sub_10052A3E0(off_1009FB050, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078D838();
    }
    *(_DWORD *)(a4 + 20) &= ~1u;
    *a2 &= ~1u;
    sub_10001B8AC(&v16);
    int v7 = *a2;
  }
  if ((v7 & 0x80000) != 0)
  {
    __int16 v15 = 0;
    char v16 = 0;
    sub_10001B8E0(&v16);
    int v11 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 84), (uint64_t *)&v15);
    sub_10001B910(&v16);
    if (!v11)
    {
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009BD568);
      }
      sub_1002AEEDC(off_1009F8098, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078D7D0();
    }
    *(_DWORD *)(a4 + 20) &= ~0x80000u;
    *a2 &= ~0x80000u;
    sub_10001B8AC(&v16);
    int v7 = *a2;
  }
  if ((v7 & 8) != 0)
  {
    __int16 v15 = 0;
    char v16 = 0;
    sub_10001B8E0(&v16);
    int v12 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 94), (uint64_t *)&v15);
    sub_10001B910(&v16);
    if (!v12)
    {
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BD588);
      }
      sub_1005FC5F8(off_1009FB210, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078D768();
    }
    *(_DWORD *)(a4 + 20) &= ~0x80000u;
    *a2 &= ~0x80000u;
    sub_10001B8AC(&v16);
    int v7 = *a2;
  }
  if ((v7 & 0x100000) != 0)
  {
    char v16 = 0;
    sub_10001B8E0(&v16);
    __int16 v15 = 0;
    int v13 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 114), (uint64_t *)&v15);
    uint64_t v14 = sub_1001E6484(v15);
    sub_10001B910(&v16);
    if (!v13 && v14)
    {
      if (qword_1009FB7B8 != -1) {
        dispatch_once(&qword_1009FB7B8, &stru_1009BD5C8);
      }
      sub_100465234((void *)qword_1009FB7B0, a3);
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078D700();
    }
    *(_DWORD *)(a4 + 20) &= ~0x100000u;
    *a2 &= ~0x100000u;
    sub_10001B8AC(&v16);
  }
}

void sub_10066C284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_10066C2B0(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  int v7 = *a2;
  if ((*a2 & 0x10) != 0)
  {
    v23[0] = 0;
    sub_10001B8E0(v23);
    unsigned int v25 = 0;
    int v8 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 64), (uint64_t *)&v25);
    uint64_t v9 = sub_1001E6484(v25);
    sub_10001B910(v23);
    if (!v8 && v9)
    {
      if (qword_1009F8418 != -1) {
        dispatch_once(&qword_1009F8418, &stru_1009BD528);
      }
      uint64_t v10 = qword_1009F8410;
      uint64_t v11 = *(void *)a4;
      unsigned int v12 = *(unsigned __int16 *)(a4 + 136);
      uint64_t v13 = sub_1001E6484(v25);
      sub_10041A588(v10, v11, v12, *(unsigned __int16 *)(v13 + 32), 0);
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078DAA8();
    }
    *(_DWORD *)(a4 + 20) &= ~0x10u;
    *a2 &= ~0x10u;
    if (qword_1009F8418 != -1) {
      dispatch_once(&qword_1009F8418, &stru_1009BD528);
    }
    sub_10041A928(qword_1009F8410, a3, (void *)*(unsigned __int16 *)(a4 + 54), *(unsigned __int16 *)(a4 + 64), *(unsigned __int16 *)(a4 + 136), *(unsigned __int8 *)(a4 + 135));
    if (qword_1009F8418 != -1) {
      dispatch_once(&qword_1009F8418, &stru_1009BD528);
    }
    sub_10041A588(qword_1009F8410, *(void *)a4, *(unsigned __int16 *)(a4 + 136), 0, 4509);
  }
  if (v7)
  {
    unsigned int v25 = 0;
    char v24 = 0;
    sub_10001B8E0(&v24);
    int v14 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 74), (uint64_t *)&v25);
    sub_10001B910(&v24);
    if (v14)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078DA40();
      }
      *(_DWORD *)(a4 + 20) &= ~1u;
      *a2 &= ~1u;
      if (qword_1009FB058 != -1) {
        dispatch_once(&qword_1009FB058, &stru_1009BD548);
      }
      sub_10052A4DC((uint64_t)off_1009FB050, a3, a4 + 140, a4 + 142, a4 + 143, *(unsigned __int8 *)(a4 + 144), 4510);
    }
    if (qword_1009FB058 != -1) {
      dispatch_once(&qword_1009FB058, &stru_1009BD548);
    }
    sub_10052A4DC((uint64_t)off_1009FB050, a3, a4 + 140, a4 + 142, a4 + 143, *(unsigned __int8 *)(a4 + 144), 0);
  }
  if ((v7 & 0x80000) != 0)
  {
    unsigned int v25 = 0;
    v23[0] = 0;
    sub_10001B8E0(v23);
    int v15 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 84), (uint64_t *)&v25);
    sub_10001B910(v23);
    if (v15)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078D9D8();
      }
      *(_DWORD *)(a4 + 20) &= ~0x80000u;
      *a2 &= ~0x80000u;
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009BD568);
      }
      sub_1002AEFD8((uint64_t)off_1009F8098, a3, 4512);
    }
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009BD568);
    }
    sub_1002AEFD8((uint64_t)off_1009F8098, a3, 0);
  }
  if ((v7 & 8) != 0)
  {
    unsigned int v25 = 0;
    v23[0] = 0;
    sub_10001B8E0(v23);
    int v16 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 94), (uint64_t *)&v25);
    sub_10001B910(v23);
    if (v16)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078D970();
      }
      *(_DWORD *)(a4 + 20) &= ~8u;
      *a2 &= ~8u;
      if (qword_1009FB218 != -1) {
        dispatch_once(&qword_1009FB218, &stru_1009BD588);
      }
      sub_1005FC6F4((uint64_t)off_1009FB210, a3, 4511);
    }
    if (qword_1009FB218 != -1) {
      dispatch_once(&qword_1009FB218, &stru_1009BD588);
    }
    sub_1005FC6F4((uint64_t)off_1009FB210, a3, 0);
  }
  if ((v7 & 0x100000) != 0)
  {
    char v24 = 0;
    sub_10001B8E0(&v24);
    unsigned int v25 = 0;
    int64_t v17 = (_WORD *)(a4 + 114);
    int v18 = sub_1001DD56C(*(unsigned __int16 *)(a4 + 114), (uint64_t *)&v25);
    if (!v18)
    {
      if (sub_1001E6484(v25))
      {
        unsigned int v19 = (unsigned __int16)*v17;
        unsigned int v20 = *(unsigned __int16 *)(sub_1001E6484(v25) + 36);
        uint64_t v21 = sub_1001E6484(v25);
        int v18 = sub_10010E440(v19, v20, *(unsigned __int16 *)(v21 + 32), 0);
      }
      else
      {
        int v18 = 0;
      }
    }
    sub_10001B910(&v24);
    int v22 = qword_100A1A038;
    if (v18)
    {
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078D908();
      }
      if (qword_1009FB7B8 != -1) {
        dispatch_once(&qword_1009FB7B8, &stru_1009BD5C8);
      }
      sub_100465330(qword_1009FB7B0, a3, 4513);
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "GATT Setup Complete", v23, 2u);
    }
    *int64_t v17 = 0;
    sub_10001B8AC(&v24);
  }
}

void sub_10066C96C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

unsigned char *sub_10066C99C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  __int16 v97 = 0;
  int v96 = 0;
  char v95 = 0;
  sub_10001B8E0(&v95);
  int v5 = sub_100204F78(a2, (uint64_t)&v96);
  sub_10001B910(&v95);
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078DD28();
    }
    return sub_10001B8AC(&v95);
  }
  int v93 = v96;
  __int16 v94 = v97;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v93, 1);
  uint64_t v7 = sub_100667D14(a1, (uint64_t)&v96);
  if (v7)
  {
    uint64_t v8 = v7;
    uint64_t v82 = v6;
    uint64_t v85 = v7;
    if (*(int *)(v7 + 16) >= 9)
    {
      uint64_t v7 = os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_FAULT);
      if (v7)
      {
        sub_10078DCA8();
        uint64_t v8 = v85;
      }
    }
    sub_100667DDC(v7, v8, 9u);
    uint64_t v9 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(*(void *)v85, (uint64_t)__p);
      uint64_t v10 = (SBYTE7(v115) & 0x80u) == 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Setup Complete received from device %s", buf, 0xCu);
      if (SBYTE7(v115) < 0) {
        operator delete(__p[0]);
      }
    }
    if (sub_1004BC3C8(a3) != 1 && os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078DC40();
    }
    __int16 v11 = sub_1004BC3C8(a3);
    long long v84 = +[NSMutableDictionary dictionary];
    sub_1002B804C(&v95);
    uint64_t v12 = sub_100197A30((uint64_t)&v96);
    LOWORD(v13) = v11;
    if (v11 >= 1)
    {
      uint64_t v14 = v12;
      int v81 = 0;
      while (1)
      {
        int v15 = (char)sub_1004BC378(a3);
        if (v15 < 0)
        {
          unsigned int v16 = sub_1004BC3C8(a3);
          __int16 v17 = -3;
        }
        else
        {
          unsigned int v16 = sub_1004BC378(a3);
          __int16 v17 = -2;
        }
        int v18 = v15 & 0x7F;
        switch(v15 & 0x7F)
        {
          case 1:
            if (v16)
            {
              if (v16 != 4) {
                goto LABEL_39;
              }
              int v81 = sub_1004BC430(a3);
            }
            goto LABEL_42;
          case 2:
            if (v16)
            {
              if (v16 != 8) {
                goto LABEL_39;
              }
              __p[0] = 0;
              sub_1004BC33C(a3, __p, 8uLL);
            }
            goto LABEL_42;
          case 3:
            if (v16)
            {
              if (v16 != 4) {
                goto LABEL_39;
              }
              *(_DWORD *)(v14 + 229) = sub_1004BC430(a3);
              *(unsigned char *)(v14 + 228) = 1;
            }
            goto LABEL_42;
          case 4:
            if (v16)
            {
              if (v16 != 8) {
                goto LABEL_39;
              }
              __p[0] = 0;
              sub_1004BC33C(a3, __p, 8uLL);
              sub_1001E5134((uint64_t)sub_10022EF58);
              sub_1001E2404((uint64_t)&v96, 0, 3, __p, 8, 0);
              sub_1001E50D4((uint64_t)sub_10022EF58, 48);
            }
            goto LABEL_42;
          default:
            unsigned int v19 = qword_100A1A038;
            if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
            {
              LODWORD(__p[0]) = 67109120;
              HIDWORD(__p[0]) = v18;
              _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Key %d not recognized in setup complete message", (uint8_t *)__p, 8u);
              if (v16)
              {
LABEL_39:
                unsigned int v20 = qword_100A1A038;
                if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
                {
                  LODWORD(__p[0]) = 67109632;
                  HIDWORD(__p[0]) = v18;
                  LOWORD(__p[1]) = 1024;
                  *(_DWORD *)((char *)&__p[1] + 2) = v16;
                  HIWORD(__p[1]) = 1024;
                  LODWORD(v115) = v16;
                  _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Key:%d Dumped %d of %d bytes ", (uint8_t *)__p, 0x14u);
                }
                sub_1004BC490(a3, v16);
              }
            }
            else if (v16)
            {
              goto LABEL_39;
            }
LABEL_42:
            int v13 = (__int16)(v13 + v17 - v16);
            if (v13 <= 0) {
              goto LABEL_49;
            }
            break;
        }
      }
    }
    int v81 = 0;
    unsigned int v16 = 0;
LABEL_49:
    sub_10001B910(&v95);
    if (sub_1004BC3C8(a3) == 2)
    {
      while (1)
      {
        if ((unint64_t)(sub_100045F00(a3 + 8) - *(void *)(a3 + 24)) < 9) {
          goto LABEL_91;
        }
        unsigned int v21 = sub_1004BC430(a3);
        __int16 v22 = sub_1004BC3C8(a3);
        LOWORD(v23) = v22;
        if (sub_100045F00(a3 + 8) - *(void *)(a3 + 24) < (unint64_t)v22)
        {
          uint64_t v34 = qword_100A1A038;
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
          {
            int v80 = sub_100045F00(a3 + 8) - *(_DWORD *)(a3 + 24);
            LODWORD(__p[0]) = 67109376;
            HIDWORD(__p[0]) = v22;
            LOWORD(__p[1]) = 1024;
            *(_DWORD *)((char *)&__p[1] + 2) = v80;
            _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "fastConnectParseSetupCompleteMessage Length Error Descriptor length %u remaining %u", (uint8_t *)__p, 0xEu);
          }
          goto LABEL_91;
        }
        char v24 = sub_100022FE8(v22);
        if (!v24) {
          goto LABEL_91;
        }
        sub_1004BC33C(a3, v24, v22);
        long long v91 = 0;
        long long v92 = 0;
        sub_1000335D8(&v91, v24, v22);
        *(_OWORD *)__n128 __p = 0u;
        long long v115 = 0u;
        sub_1004BC2E4((uint64_t)__p, 0, (uint64_t)&v91);
        if (v21 > 0x10 || ((1 << v21) & 0x10102) == 0)
        {
          if (v21 == 0x80000)
          {
            if (qword_1009F80A0 != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009BD568);
            }
            if (sub_1002ACDD0((uint64_t)off_1009F8098, (uint64_t)__p, v82, v84)
              && os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
            {
              sub_10078DBA8(&v89, v90);
            }
            goto LABEL_83;
          }
          if (v21 != 0x100000) {
            goto LABEL_83;
          }
        }
        if (v22 >= 1)
        {
          do
          {
            int v25 = (char)sub_1004BC378((uint64_t)__p);
            if (v25 < 0)
            {
              unsigned int v26 = sub_1004BC3C8((uint64_t)__p);
              __int16 v27 = -3;
            }
            else
            {
              unsigned int v26 = sub_1004BC378((uint64_t)__p);
              __int16 v27 = -2;
            }
            int v28 = v25 & 0x7F;
            if (v28 == 4)
            {
              if (v26 == 2)
              {
                int v29 = sub_1004BC3C8((uint64_t)__p);
                if (v29)
                {
                  __int16 v30 = qword_100A1A038;
                  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)long long buf = 67109376;
                    *(_DWORD *)&uint8_t buf[4] = v21;
                    *(_WORD *)&uint8_t buf[8] = 1024;
                    *(_DWORD *)&buf[10] = v29;
                    _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "fastConnectParseSetupCompleteMessage Service 0x%x status %u", buf, 0xEu);
                  }
                }
              }
              else
              {
                int v32 = qword_100A1A038;
                if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v26;
                  _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "fastConnectParseSetupCompleteMessage Error FC_COMMON_STATUS size wrong %d", buf, 8u);
                  if (v26) {
                    goto LABEL_71;
                  }
                }
                else if (v26)
                {
                  goto LABEL_71;
                }
              }
            }
            else if (v26)
            {
              __int16 v31 = qword_100A1A038;
              if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = v28;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v26;
                *(_WORD *)&unsigned char buf[14] = 1024;
                LODWORD(v99) = v16;
                _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Key not recognized :%d Dumped %d of %d bytes ", buf, 0x14u);
              }
LABEL_71:
              int64_t v33 = qword_100A1A038;
              if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v26;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v28;
                _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "fastConnectParseSetupCompleteMessage dumping %d for Key:%d ", buf, 0xEu);
              }
              sub_1004BC490(a3, v26);
            }
            int v23 = (__int16)(v23 + v27 - v26);
          }
          while (v23 > 0);
        }
LABEL_83:
        sub_100023010(v24);
        __p[1] = &off_100998428;
        if ((void)v115) {
          sub_1000368F4((atomic_uint *)v115);
        }
        long long v91 = &off_100998428;
        if (v92) {
          sub_1000368F4(v92);
        }
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078DBD8();
    }
LABEL_91:
    if (v81 != *(_DWORD *)(v85 + 20) && os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_FAULT)) {
      sub_10078DB68();
    }
    uint64_t v35 = mach_absolute_time();
    unint64_t v36 = (v35 - *(void *)(v85 + 176)) * dword_100A14544 / *(unsigned int *)algn_100A14548 / 0xF4240;
    *(_DWORD *)(v85 + 192) += v36;
    id v37 = *(id *)(v85 + 200);
    uint64_t v38 = +[NSNumber numberWithInt:v36];
    [v84 setObject:v38 forKeyedSubscript:@"ProfileSetupDuration"];

    char v39 = [v84 objectForKey:@"BasebandDurationTotal"];
    BOOL v40 = v39 == 0;

    if (!v40)
    {
      int v41 = [v84 objectForKeyedSubscript:@"BasebandDurationTotal"];
      *(_DWORD *)(v85 + 192) += [v41 intValue];
    }
    __int16 v42 = +[NSNumber numberWithInt:*(unsigned int *)(v85 + 192)];
    [v84 setObject:v42 forKeyedSubscript:@"DurationWithRetries"];

    int v43 = [v37 objectForKeyedSubscript:@"EncryptionConnectionTimeMs"];
    [v84 setObject:v43 forKeyedSubscript:@"EncryptionSetupDuration"];

    __int16 v44 = [v37 objectForKey:@"BasebandConnectionTimeMs"];
    BOOL v45 = v44 == 0;

    if (!v45)
    {
      uint64_t v46 = *(void *)(v85 + 160);
      uint64_t v48 = dword_100A14544;
      unint64_t v47 = *(unsigned int *)algn_100A14548;
      long long v49 = [v37 objectForKeyedSubscript:@"BasebandConnectionTimeMs"];
      [v84 setObject:v49 forKeyedSubscript:@"BasebandDurationTotal"];

      long long v50 = +[NSNumber numberWithInt:v46 * v48 / v47 / 0xF4240];
      [v84 setObject:v50 forKeyedSubscript:@"BasebandDuration"];
    }
    uint64_t v51 = sub_100050530();
    uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v51 + 520))(v51, v82, v84);
    LODWORD(v91) = v81;
    sub_10066BDF4(v52, (int *)&v91, v82, v85);
    int v53 = (int)v91;
    int v88 = (int)v91;
    sub_10066C2B0(v54, &v88, v82, v85);
    unint64_t v55 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109632;
      HIDWORD(__p[0]) = v81;
      LOWORD(__p[1]) = 1024;
      *(_DWORD *)((char *)&__p[1] + 2) = v53;
      HIWORD(__p[1]) = 1024;
      LODWORD(v115) = v88;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Setup Complete with profiles: %x, profile attempts: %x, profile results: %x", (uint8_t *)__p, 0x14u);
    }
    unsigned __int16 v56 = *(void **)(v85 + 200);
    uint64_t v57 = +[NSNumber numberWithInt:v36];
    [v56 setObject:v57 forKey:@"ProfileConnectionTimeMs"];

    long long v58 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v59 = (v35 - *(void *)(v85 + 184)) * dword_100A14544 / *(unsigned int *)algn_100A14548 / 0xF4240;
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v59;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Configuration took %d ms", (uint8_t *)__p, 8u);
      long long v58 = qword_100A1A038;
    }
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v36;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "Profile setup took %d ms", (uint8_t *)__p, 8u);
    }
    int v60 = *(void **)(v85 + 200);
    char v61 = +[NSNumber numberWithInt:*(unsigned int *)(v85 + 192)];
    [v60 setObject:v61 forKey:@"TotalConnectionTimeMs"];

    BOOL v62 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      int v63 = *(_DWORD *)(v85 + 192);
      LODWORD(__p[0]) = 67109120;
      HIDWORD(__p[0]) = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "Total connection took %d ms!", (uint8_t *)__p, 8u);
    }
    unint64_t v64 = *(void **)(v85 + 200);
    sub_100480344(v82, 0xAu, __p);
    if ((SBYTE7(v115) & 0x80u) == 0) {
      __int16 v65 = __p;
    }
    else {
      __int16 v65 = (void **)__p[0];
    }
    uint64_t v66 = +[NSString stringWithUTF8String:v65];
    [v64 setObject:v66 forKey:@"FWVersion"];

    if (SBYTE7(v115) < 0) {
      operator delete(__p[0]);
    }
    global_queue = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10066DAD8;
    block[3] = &unk_100997450;
    id v68 = v37;
    id v87 = v68;
    dispatch_async(global_queue, block);
    sub_1002B804C(&v95);
    long long v128 = 0u;
    long long v129 = 0u;
    long long v126 = 0u;
    long long v127 = 0u;
    long long v124 = 0u;
    long long v125 = 0u;
    long long v122 = 0u;
    long long v123 = 0u;
    long long v120 = 0u;
    long long v121 = 0u;
    long long v118 = 0u;
    long long v119 = 0u;
    long long v116 = 0u;
    long long v117 = 0u;
    *(_OWORD *)__n128 __p = 0u;
    long long v115 = 0u;
    sub_10025B74C((uint64_t)__p, 256, (uint64_t)"PFC Profile Setup took %d", v69, v70, v71, v72, v73, v36);
    sub_100115824((const char *)__p);
    long long v112 = 0u;
    long long v113 = 0u;
    long long v110 = 0u;
    long long v111 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v99 = 0u;
    sub_10025B74C((uint64_t)buf, 256, (uint64_t)"PFC Total connection took %d", v74, v75, v76, v77, v78, *(unsigned int *)(v85 + 192));
    sub_100115824((const char *)buf);
    sub_10001B910(&v95);
    sub_100668114(a1, (uint64_t)&v96, 0);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
  {
    sub_1004A82EC((unsigned __int8 *)&v93, __p);
    sub_10078DB10();
  }
  return sub_10001B8AC(&v95);
}

void sub_10066D934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_10001B8AC(&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_10066DAD8()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 344);

  return v0();
}

void sub_10066DB38(int a1, int a2, int a3)
{
  uint64_t v6 = sub_1001DDFDC(a1);
  if (v6)
  {
    uint64_t v7 = qword_100A1A038;
    if (a2)
    {
      uint64_t v8 = v6;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
      {
        int v9 = *((unsigned __int16 *)v8 + 2);
        int v10 = 67109888;
        int v11 = a2;
        __int16 v12 = 1024;
        int v13 = v9;
        __int16 v14 = 1024;
        int v15 = a1;
        __int16 v16 = 1024;
        int v17 = a3;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "FastConnectMagicPolicyCB: Policy enforcement failed %{bluetooth:OI_STATUS}u - cid 0x%x, handle %d securityFailed %d", (uint8_t *)&v10, 0x1Au);
        uint64_t v7 = qword_100A1A038;
      }
    }
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 67109120;
      int v11 = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Magic Pairing came back with result %d", (uint8_t *)&v10, 8u);
    }
    if (a2 != 1500) {
      sub_10066DCAC();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
  {
    sub_10078DD90();
  }
}

void sub_10066DCAC()
{
}

void sub_10066DD38(uint64_t a1, uint64_t a2, int a3)
{
  int v5 = sub_1001DDFDC(a3);
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = v5;
    uint64_t v8 = sub_1001E6484(v5);
    int v42 = *(_DWORD *)(v8 + 10);
    __int16 v43 = *(_WORD *)(v8 + 14);
    uint64_t v9 = sub_100667D14(a1, (uint64_t)&v42);
    if (v9)
    {
      uint64_t v10 = v9;
      if (a2 == 1414 || a2 == 742)
      {
        if (!*(unsigned char *)(v9 + 51))
        {
          __int16 v31 = qword_100A1A038;
          BOOL v32 = os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT);
          char v33 = 1;
          if (v32)
          {
            *(_DWORD *)long long buf = 67109632;
            *(_DWORD *)&uint8_t buf[4] = a2;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            *(_WORD *)&unsigned char buf[14] = 1024;
            LODWORD(v45) = 1;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Authentication failed with result: %d. Retrying authentication since auth retries %d < %d", buf, 0x14u);
            char v33 = *(unsigned char *)(v10 + 51) + 1;
          }
          *(unsigned char *)(v10 + 51) = v33;
          *((void *)v7 + 8) = &unk_1009BD380;
          char v41 = 0;
          sub_10001B8E0(&v41);
          uint64_t v34 = sub_10025CE54((uint64_t)sub_10066DB38, (uint64_t)&v42, *((long long **)v7 + 8), (int *)v6 + 18, 1);
          if (v34)
          {
            uint64_t v35 = qword_100A1A038;
            if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 67109120;
              *(_DWORD *)&uint8_t buf[4] = v34;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Policy Mgr for PFC new connection failed %d", buf, 8u);
            }
          }
          sub_10001B910(&v41);
          if (v34) {
            sub_100668114(a1, (uint64_t)&v42, v34);
          }
          goto LABEL_25;
        }
      }
      else if (!a2)
      {
        uint64_t v11 = (mach_absolute_time() - *(void *)(v9 + 168))
            * dword_100A14544
            / *(unsigned int *)algn_100A14548
            / 0xF4240;
        *(_DWORD *)(v10 + 192) += v11;
        __int16 v12 = *(void **)(v10 + 200);
        int v13 = +[NSNumber numberWithInt:v11];
        [v12 setObject:v13 forKey:@"EncryptionConnectionTimeMs"];

        __int16 v14 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v11;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Authentication took %d ms", buf, 8u);
        }
        uint64_t v15 = mach_absolute_time();
        unsigned int v16 = *(unsigned __int16 *)(v10 + 48);
        *(void *)(v10 + 176) = v15;
        if (sub_100204F78(v16, (uint64_t)&v42))
        {
          int v17 = qword_100A1A038;
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
            sub_10078DE88(v10 + 48, v17, v18, v19, v20, v21, v22, v23);
          }
          return;
        }
        char v41 = 0;
        sub_10001B8E0(&v41);
        long long v58 = 0u;
        long long v59 = 0u;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        *(_OWORD *)long long buf = 0u;
        long long v45 = 0u;
        sub_10025B74C((uint64_t)buf, 256, (uint64_t)"PFC Authentication took %d", v36, v37, v38, v39, v40, v11);
        sub_100115824((const char *)buf);
        sub_10001B910(&v41);
        *(unsigned char *)(v10 + 51) = 0;
        sub_100669354(a1, v10);
LABEL_25:
        sub_10001B8AC(&v41);
        return;
      }
      *(unsigned char *)(v9 + 51) = 0;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078DE54();
      }
      sub_100668114(a1, v10 + 8, a2);
    }
    else
    {
      char v24 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078DDC4((uint64_t)&v42, v24, v25, v26, v27, v28, v29, v30);
      }
    }
  }
}

void sub_10066E108(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10066E134(uint64_t a1, __int16 a2, char a3, int a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  int v73 = a8;
  __int16 v74 = WORD2(a8);
  __int16 v14 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a6;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Channel support came back with status %d", buf, 8u);
  }
  int v71 = v73;
  __int16 v72 = v74;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  uint64_t v15 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v71, 1);
  BOOL v17 = a6 != 4500 && a6 != 0;
  if (!a4 || v17)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078DFB8();
    }
    if (a7 || !v15)
    {
      if (a6 == 4515 && a7 && v15)
      {
        sub_100667D60(a1, (uint64_t)&v73);
        BOOL v32 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Start SDP due to SDP mismatch of incoming FC", buf, 2u);
        }
        if (qword_1009FB698 != -1) {
          dispatch_once(&qword_1009FB698, &stru_1009BD608);
        }
        sub_1004C848C();
      }
      return;
    }
    uint64_t v24 = sub_100667D14(a1, (uint64_t)&v73);
    if (!v24)
    {
      if (a6 != 711)
      {
LABEL_106:
        sub_100667D60(a1, (uint64_t)&v73);
        int v65 = a6 == 4515;
        *(unsigned char *)(a1 + 682) = v65;
        uint64_t v66 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v67 = "Legacy";
          if (a6 == 4515) {
            uint64_t v67 = "FC";
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v67;
          _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Profile connection: %s", buf, 0xCu);
          int v65 = *(unsigned __int8 *)(a1 + 682);
        }
        if (v65)
        {
          if (qword_1009FB698 != -1) {
            dispatch_once(&qword_1009FB698, &stru_1009BD608);
          }
          sub_1004C848C();
        }
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009BD508);
        }
        sub_1004D5838((uint64_t)off_1009F8088, v15, 0);
        return;
      }
LABEL_117:
      id v68 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = 711;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Cleaning up PFC because status is %d", buf, 8u);
      }
      sub_100668114(a1, (uint64_t)&v73, 711);
      return;
    }
    uint64_t v25 = v24;
    uint64_t v26 = (mach_absolute_time() - *(void *)(v24 + 152))
        * dword_100A14544
        / *(unsigned int *)algn_100A14548
        / 0xF4240;
    if (a6 == 716 || a6 == 704)
    {
      unsigned int v27 = *(unsigned __int8 *)(v25 + 52);
      unsigned int v28 = *(unsigned __int8 *)(v25 + 53);
      uint64_t v29 = qword_100A1A038;
      if (v27 >= v28)
      {
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
          sub_10078DF50();
        }
        sub_100668114(a1, (uint64_t)&v73, a6);
      }
      else
      {
        BOOL v30 = os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT);
        if (v30)
        {
          *(_DWORD *)long long buf = 67109888;
          *(_DWORD *)&uint8_t buf[4] = a6;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v26;
          *(_WORD *)&unsigned char buf[14] = 1024;
          LODWORD(v76) = v27;
          WORD2(v76) = 1024;
          *(_DWORD *)((char *)&v76 + 6) = v28;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Status: %d, took %d ms. Retrying echo request since retries %d < %d", buf, 0x1Au);
        }
        sub_100667DDC(v30, v25, 1u);
        __int16 v31 = *(void **)(v25 + 200);
        *(void *)(v25 + 200) = 0;

        *(void *)(v25 + 160) = 0;
        ++*(unsigned char *)(v25 + 52);
        if (qword_1009F8090 != -1) {
          dispatch_once(&qword_1009F8090, &stru_1009BD508);
        }
        sub_1004D5838((uint64_t)off_1009F8088, v15, 1);
        if (sub_100478B2C(v15, 12))
        {
          memset(buf, 0, sizeof(buf));
          *(void *)&long long v76 = 0;
          if (*(char *)(v15 + 1503) < 0)
          {
            sub_10003B098(buf, *(void **)(v15 + 1480), *(void *)(v15 + 1488));
          }
          else
          {
            *(_OWORD *)long long buf = *(_OWORD *)(v15 + 1480);
            *(void *)&long long v76 = *(void *)(v15 + 1496);
          }
          if (SBYTE7(v76) < 0)
          {
            if (*(void *)&buf[8])
            {
              long long v58 = *(uint8_t **)buf;
              goto LABEL_87;
            }
          }
          else if (BYTE7(v76))
          {
            long long v58 = buf;
LABEL_87:
            long long v59 = +[NSString stringWithUTF8String:v58];
            goto LABEL_89;
          }
          long long v59 = @"Unknown";
LABEL_89:
          *(void *)uu = 0;
          uint64_t v96 = 0;
          if (qword_1009F7EE0 != -1) {
            dispatch_once(&qword_1009F7EE0, &stru_1009BD5E8);
          }
          sub_1006C0414((uint64_t)off_1009F7ED8, (unsigned __int8 *)(v15 + 128), uu);
          if (uuid_is_null(uu))
          {
            if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
            {
              sub_100474E18(v15, v91);
              sub_10078DEF8();
            }
          }
          else
          {
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009BD5E8);
            }
            int v60 = off_1009F7ED8;
            char v61 = sub_100031234(uu);
            double v62 = sub_1006C6448((uint64_t)v60, v61);

            if (v62 > 0.0)
            {
              uint64_t v63 = (uint64_t)(CFAbsoluteTimeGetCurrent() - v62);
LABEL_99:
              uint64_t v64 = sub_100050530();
              sub_100474E18(v15, __p);
              (*(void (**)(uint64_t, void **, __CFString *, uint64_t, void, void))(*(void *)v64 + 392))(v64, __p, v59, v63, *(unsigned __int8 *)(v25 + 52), *(unsigned __int8 *)(v25 + 53));
              if (v70 < 0) {
                operator delete(__p[0]);
              }

              if (SBYTE7(v76) < 0) {
                operator delete(*(void **)buf);
              }
              goto LABEL_103;
            }
          }
          uint64_t v63 = -1;
          goto LABEL_99;
        }
      }
    }
    else
    {
      long long v57 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "PFC failed, took %d ms", buf, 8u);
      }
    }
LABEL_103:
    if (a6 == 704) {
      return;
    }
    if (a6 != 711)
    {
      if (a6 == 716) {
        return;
      }
      goto LABEL_106;
    }
    goto LABEL_117;
  }
  if (a7)
  {
    uint64_t v18 = sub_100667F9C(a1, v15);
    uint64_t v19 = v18;
    if (v18)
    {
      if (*(int *)(v18 + 16) >= 2)
      {
        uint64_t v20 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
        {
          sub_100474E18(v15, buf);
          if ((SBYTE7(v76) & 0x80u) == 0) {
            uint64_t v21 = buf;
          }
          else {
            uint64_t v21 = *(uint8_t **)buf;
          }
          uint64_t v22 = *(int *)(v19 + 16);
          if (v22 > 9) {
            uint64_t v23 = "Unknown State";
          }
          else {
            uint64_t v23 = off_1009BD6A0[v22];
          }
          *(_DWORD *)long long v91 = 136446466;
          long long v92 = v21;
          __int16 v93 = 2080;
          __int16 v94 = v23;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "PFC in progress for device %{public}s, ignoring duplicate request - current state is %s", v91, 0x16u);
          if (SBYTE7(v76) < 0) {
            operator delete(*(void **)buf);
          }
        }
        return;
      }
      sub_100667DDC(v18, v18, 3u);
      uint64_t v45 = +[NSMutableDictionary dictionary];
      long long v46 = *(void **)(v19 + 200);
      *(void *)(v19 + 200) = v45;

      *(void *)uint64_t v19 = v15;
      goto LABEL_52;
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078E020();
    }
  }
  else
  {
    uint64_t v33 = sub_100667D14(a1, (uint64_t)&v73);
    if (v33)
    {
      uint64_t v19 = v33;
      uint64_t v34 = mach_absolute_time();
      uint64_t v35 = v34 - *(void *)(v19 + 152);
      *(void *)(v19 + 160) = v34 - *(void *)(v19 + 160);
      unint64_t v36 = v35 * dword_100A14544 / *(unsigned int *)algn_100A14548 / 0xF4240;
      *(_DWORD *)(v19 + 192) += v36;
      uint64_t v37 = *(void **)(v19 + 200);
      uint64_t v38 = +[NSNumber numberWithInt:v36];
      [v37 setObject:v38 forKey:@"BasebandConnectionTimeMs"];

      uint64_t v39 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v36;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Baseband took %d ms", buf, 8u);
      }
      *(unsigned char *)(v19 + 52) = 0;
      v91[0] = 0;
      sub_10001B8E0(v91);
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v85 = 0u;
      long long v86 = 0u;
      long long v83 = 0u;
      long long v84 = 0u;
      long long v81 = 0u;
      long long v82 = 0u;
      long long v79 = 0u;
      long long v80 = 0u;
      long long v77 = 0u;
      long long v78 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v76 = 0u;
      sub_10025B74C((uint64_t)buf, 256, (uint64_t)"PFC Baseband took %d", v40, v41, v42, v43, v44, v36);
      sub_100115824((const char *)buf);
      sub_10001B910(v91);
      sub_10001B8AC(v91);
LABEL_52:
      long long v47 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v15, buf);
        long long v48 = (SBYTE7(v76) & 0x80u) == 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)long long v91 = 136446466;
        long long v92 = v48;
        __int16 v93 = 1024;
        LODWORD(v94) = a4;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Fast Connect supported by device %{public}s with profileMask %x", v91, 0x12u);
        if (SBYTE7(v76) < 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v49 = sub_10003FB34();
      int v50 = (*(uint64_t (**)(uint64_t))(*(void *)v49 + 2504))(v49);
      if (v50) {
        LOBYTE(v50) = sub_10048DD90(*(void *)v19);
      }
      *(unsigned char *)(v19 + 145) = v50;
      uint64_t v51 = mach_absolute_time();
      *(_WORD *)(v19 + 48) = a2;
      long long v52 = (unsigned __int16 *)(v19 + 48);
      *((void *)v52 + 15) = v51;
      *((_DWORD *)v52 - 7) &= a4;
      *((_DWORD *)v52 - 6) = a4;
      *((unsigned char *)v52 - 20) = a7 != 0;
      *(void *)long long buf = 0;
      uu[0] = 0;
      sub_10001B8E0(uu);
      uint64_t v53 = sub_1001DD56C(*v52, (uint64_t *)buf);
      sub_10001B910(uu);
      if (v53) {
        goto LABEL_70;
      }
      if ((sub_100040630((unsigned __int8 *)v15) & 1) != 0 || (a3 & 0x10) != 0 && (*(void *)(a1 + 672) & 0x10) != 0)
      {
        long long v54 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          int v55 = sub_100040630((unsigned __int8 *)v15);
          *(_DWORD *)long long v91 = 67109120;
          LODWORD(v92) = v55;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "isPaired:%d", v91, 8u);
        }
        *(void *)(*(void *)buf + 64) = &unk_1009BD380;
        sub_1002B804C(uu);
        uint64_t v53 = sub_10025CE54((uint64_t)sub_10066DB38, v15 + 128, *(long long **)(*(void *)buf + 64), (int *)(*(void *)buf + 72), 1);
        if (v53)
        {
          long long v56 = qword_100A1A038;
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long v91 = 67109120;
            LODWORD(v92) = v53;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "Policy Mgr for PFC new connection failed %d", v91, 8u);
          }
        }
        sub_10001B910(uu);
        if (v53) {
LABEL_70:
        }
          sub_100668114(a1, (uint64_t)&v73, v53);
      }
      sub_10001B8AC(uu);
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078E054();
    }
  }
}

void sub_10066EDAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10066EE34(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = 67109376;
    int v10 = a2;
    __int16 v11 = 1024;
    int v12 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Fast connect channel disconnected for CID %d with status %d", (uint8_t *)&v9, 0xEu);
  }
  if (a3 != 436)
  {
    for (uint64_t i = 0; i != 624; i += 208)
    {
      if (*(_DWORD *)(a1 + i + 32) && *(unsigned __int16 *)(a1 + i + 64) == a2)
      {
        sub_100668114(a1, a1 + i + 24, a3);
        return;
      }
    }
    uint64_t v8 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109120;
      int v10 = a2;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Fast connect channel disconnected can not find FC device for cid %d", (uint8_t *)&v9, 8u);
    }
  }
}

void sub_10066EF8C(uint64_t a1, uint64_t a2, const void *a3, unsigned int a4)
{
  unsigned int v16 = 0;
  BOOL v17 = 0;
  sub_1000335D8(&v16, a3, a4);
  long long v14 = 0u;
  long long v15 = 0u;
  sub_1004BC2E4((uint64_t)&v14, 0, (uint64_t)&v16);
  int v6 = sub_1004BC378((uint64_t)&v14);
  sub_1004BC378((uint64_t)&v14);
  int v7 = sub_1004BC3C8((uint64_t)&v14);
  uint64_t v8 = 0;
  while (!*(_DWORD *)(a1 + v8 + 32) || *(unsigned __int16 *)(a1 + v8 + 64) != a2)
  {
    v8 += 208;
    if (v8 == 624) {
      goto LABEL_7;
    }
  }
  *(_DWORD *)(a1 + v8 + 48) = v7;
LABEL_7:
  switch(v6)
  {
    case 3:
      int v9 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        int v10 = "Service Descriptor received";
        goto LABEL_17;
      }
      break;
    case 4:
      __int16 v11 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Service Descriptor Rsp received", v13, 2u);
      }
      sub_10066A744(a1, a2, (uint64_t)&v14);
      sub_10066B588(a1, a2);
      break;
    case 5:
      int v9 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        int v10 = "Service Negotiation received";
LABEL_17:
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, v13, 2u);
      }
      break;
    case 6:
      int v12 = qword_100A1A038;
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int v13 = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Setup Complete received", v13, 2u);
      }
      sub_10066C99C(a1, a2, (uint64_t)&v14);
      break;
    case 7:
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078E0F0();
      }
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
        sub_10078E088();
      }
      break;
  }
  *((void *)&v14 + 1) = &off_100998428;
  if ((void)v15) {
    sub_1000368F4((atomic_uint *)v15);
  }
  unsigned int v16 = &off_100998428;
  if (v17) {
    sub_1000368F4(v17);
  }
}

void sub_10066F254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, atomic_uint *a13, uint64_t a14, uint64_t a15, atomic_uint *a16)
{
  if (a13) {
    sub_1000368F4(a13);
  }
  if (a16) {
    sub_1000368F4(a16);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10066F2E0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, char a5, uint64_t a6)
{
  long long v79 = 0;
  unsigned __int16 v78 = 0;
  unsigned int v77 = 0;
  char v76 = 0;
  sub_10001B8E0(&v76);
  if (sub_10017E37C(a6, (uint64_t)&v77))
  {
    int v12 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10076EAD8(a6, v12);
    }
    return sub_10001B8AC(&v76);
  }
  sub_10001B910(&v76);
  unsigned int v74 = v77;
  unsigned __int16 v75 = v78;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  uint64_t v13 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v74, 1);
  if (sub_100667D14(a1, (uint64_t)&v77))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
    {
      sub_100475EE0(v13, (uint64_t)buf);
      sub_10078E380();
    }
    return sub_10001B8AC(&v76);
  }
  int v14 = *(_DWORD *)(a1 + 664);
  if (*(unsigned char *)(v13 + 976))
  {
    long long v15 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Wireless Splitter guest device removing HFP and GATT profiles from support", buf, 2u);
    }
    v14 &= 0xFFEFFFFE;
  }
  if (a4 < 0x18)
  {
LABEL_56:
    sub_1002B804C(&v76);
    sub_100202E24("d", 9u, 0, (unsigned char *)a6, a5, v33, v34, v35, 0);
    sub_10001B910(&v76);
    return sub_10001B8AC(&v76);
  }
  unsigned int v16 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(v13, (uint64_t)buf);
    BOOL v17 = v82[0] >= 0 ? buf : *(unsigned char **)buf;
    *(_DWORD *)long long v83 = 136315138;
    *(void *)&v83[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Received Echo Request from %s", v83, 0xCu);
    if (SHIBYTE(v82[0]) < 0) {
      operator delete(*(void **)buf);
    }
  }
  sub_1002B804C(&v76);
  if (!a2)
  {
    long long v54 = "data";
LABEL_121:
    int v55 = 2231;
    goto LABEL_128;
  }
  if (!a3)
  {
    long long v54 = "(dataSize) > 0";
    goto LABEL_121;
  }
  if (a3 == 1)
  {
    long long v54 = "ByteStream_NumReadBytesAvail(pBs) >= 1";
    int v55 = 2234;
    goto LABEL_128;
  }
  if (a3 < 4)
  {
    long long v54 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v55 = 2235;
    goto LABEL_128;
  }
  if (a3 < 6)
  {
    long long v54 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v55 = 2236;
    goto LABEL_128;
  }
  if (a3 == 6)
  {
    long long v54 = "ByteStream_NumReadBytesAvail(pBs) >= 1";
    int v55 = 2237;
    goto LABEL_128;
  }
  if (a3 < 8)
  {
    long long v54 = "ByteStream_NumReadBytesAvail(pBs) >= 1";
    int v55 = 2238;
    goto LABEL_128;
  }
  if (a3 <= 9)
  {
    long long v54 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v55 = 2239;
LABEL_128:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm", v55, v54);
  }
  int v18 = *(unsigned __int8 *)(a2 + 6);
  if (v18 != 1 || *(int *)(a6 + 148) > 2)
  {
    sub_10001B910(&v76);
    BOOL v32 = qword_100A1A038;
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
    {
      sub_100475EE0(v13, (uint64_t)v83);
      uint64_t v37 = v84 >= 0 ? v83 : *(unsigned char **)v83;
      int v38 = *(_DWORD *)(a6 + 148);
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v37;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)long long v81 = v18;
      *(_WORD *)&v81[4] = 1024;
      v82[0] = v38;
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Echo Request failed for device %s cmd:%d refCount:%d", buf, 0x18u);
      if (v84 < 0) {
        operator delete(*(void **)v83);
      }
    }
    goto LABEL_56;
  }
  char v65 = *(unsigned char *)(a2 + 7);
  unsigned int v19 = *(unsigned __int16 *)(a2 + 8);
  char v73 = 0;
  int v67 = sub_10025363C(a6, &v73);
  uint64_t v20 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v67;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "parseFastConnectEchoReq isPaired %d", buf, 8u);
  }
  if (!v67)
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078E34C();
    }
    int v64 = 0;
    LOBYTE(v66) = 0;
    uint64_t v31 = 4502;
    goto LABEL_94;
  }
  if (a3 < 0xC)
  {
    long long v56 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v57 = 2256;
    goto LABEL_136;
  }
  if (a3 < 0xE)
  {
    long long v56 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
    int v57 = 2258;
    goto LABEL_136;
  }
  if (a3 < 0x12)
  {
    long long v56 = "ByteStream_NumReadBytesAvail(pBs) >= 4";
    int v57 = 2261;
    goto LABEL_136;
  }
  if (a3 <= 0x19) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm", 2262, "ByteStream_NumReadBytesAvail(pBs) >= (8)");
  }
  __int16 v60 = *(_WORD *)(a2 + 12);
  __int16 v61 = *(_WORD *)(a2 + 10);
  int v21 = *(_DWORD *)(a2 + 14);
  unint64_t v66 = *(void *)(a2 + 18);
  uint64_t v22 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v19;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "parseFastConnectEchoReq remote version %d", buf, 8u);
  }
  int v64 = v21;
  if (v19 >= 2)
  {
    if (a3 < 0x1E)
    {
      long long v56 = "ByteStream_NumReadBytesAvail(pBs) >= 4";
      int v57 = 2267;
    }
    else if (a3 < 0x22)
    {
      long long v56 = "ByteStream_NumReadBytesAvail(pBs) >= 4";
      int v57 = 2268;
    }
    else
    {
      if (a3 > 0x23)
      {
        int v62 = *(_DWORD *)(a2 + 26);
        int v23 = *(_DWORD *)(a2 + 30);
        uint64_t v24 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v62;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v23;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "remoteAppleSupportedFeatures %x remoteSdpServiceDataBaseState %x", buf, 0xEu);
        }
        int v59 = v23;
        int v71 = 0;
        int v72 = 0;
        sub_1006701B8((int *)&v77, &v72, &v71);
        uint64_t v25 = qword_100A1A038;
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v72;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v71;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "parseFastConnectEchoReq deviceAppleSupportedFeatures %x deviceSdpServiceDataBaseState %x", buf, 0xEu);
        }
        int v29 = v72;
        if (v72 != v62)
        {
          BOOL v30 = qword_100A1A038;
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v29;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v62;
            _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "parseFastConnectEchoReq DID expected %x received %x", buf, 0xEu);
            BOOL v30 = qword_100A1A038;
          }
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
          {
            sub_100475EE0(v13, (uint64_t)v83);
            sub_10078E2F0();
          }
          sub_10047CC64(v13, v62, 0);
        }
        if (v71 == v59)
        {
          uint64_t v31 = 4500;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
            sub_10078E288();
          }
          if (((v66 >> 4) & 1 & (*(unsigned __int8 *)(a1 + 672) >> 4)) != 0) {
            uint64_t v31 = 4515;
          }
          else {
            uint64_t v31 = 4504;
          }
        }
        if (v19 >= 3)
        {
          uint64_t v70 = 0;
          if (a3 <= 0x27)
          {
            int v58 = 2297;
          }
          else
          {
            if (a3 > 0x2B)
            {
              uint64_t v39 = *(unsigned int *)(a2 + 40);
              uint64_t v63 = *(unsigned int *)(a2 + 36);
              sub_1006702EC((int *)&v77, &v70);
              int v40 = v70;
              int v41 = HIDWORD(v70);
              if (__PAIR64__(v70, HIDWORD(v70)) != __PAIR64__(v39, v63))
              {
                uint64_t v42 = qword_100A1A038;
                if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)long long buf = 67109888;
                  *(_DWORD *)&uint8_t buf[4] = v40;
                  *(_WORD *)&uint8_t buf[8] = 1024;
                  *(_DWORD *)&buf[10] = v41;
                  *(_WORD *)long long v81 = 1024;
                  *(_DWORD *)&v81[2] = v39;
                  LOWORD(v82[0]) = 1024;
                  *(_DWORD *)((char *)v82 + 2) = v63;
                  _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Supported Extended Features expected: 0x%x 0x%x, Received: 0x%x 0x%x", buf, 0x1Au);
                  uint64_t v42 = qword_100A1A038;
                }
                if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
                {
                  sub_100475EE0(v13, (uint64_t)__p);
                  uint64_t v43 = v69 >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)long long buf = 136315650;
                  *(void *)&uint8_t buf[4] = v43;
                  *(_WORD *)&unsigned char buf[12] = 1024;
                  *(_DWORD *)long long v81 = v39;
                  *(_WORD *)&v81[4] = 1024;
                  v82[0] = v63;
                  _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Updating Supported Extended Features for device %s to 0x%x 0x%x", buf, 0x18u);
                  if (v69 < 0) {
                    operator delete(__p[0]);
                  }
                }
                sub_10047CF64(v13, v39 | (v63 << 32), 0);
              }
              goto LABEL_86;
            }
            int v58 = 2298;
          }
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm", v58, "ByteStream_NumReadBytesAvail(pBs) >= 4");
        }
LABEL_86:
        if ((v66 & 1) == 0)
        {
          if (v31 == 4500) {
            goto LABEL_88;
          }
LABEL_94:
          byte_100A1A112 = 7;
          byte_100A1A113 = v65;
          word_100A1A114 = *(_WORD *)(a1 + 680);
          byte_100A1A116 = v31;
          byte_100A1A117 = 17;
          goto LABEL_95;
        }
LABEL_91:
        if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
          sub_10078E254();
        }
        uint64_t v31 = 4507;
        goto LABEL_94;
      }
      long long v56 = "ByteStream_NumReadBytesAvail(pBs) >= 2";
      int v57 = 2269;
    }
LABEL_136:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/core/FastConnectManager.mm", v57, v56);
  }
  if (v66) {
    goto LABEL_91;
  }
LABEL_88:
  if (sub_1001DE600(2u, (uint64_t *)&v79, 0))
  {
    sub_10001B910(&v76);
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078E1EC();
    }
    return sub_10001B8AC(&v76);
  }
  *(_WORD *)(sub_1001E6484(v79) + 8) = v61;
  *(_WORD *)(sub_1001E6484(v79) + 32) = v60;
  if ((v66 & 4) != 0) {
    sub_10022EF58((uint64_t)&v77);
  }
  byte_100A1A112 = 2;
  byte_100A1A113 = v65;
  word_100A1A114 = *(_WORD *)(a1 + 680);
  uint64_t v45 = qword_100A1A038;
  if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_DEBUG))
  {
    unsigned __int16 v46 = *((_WORD *)v79 + 2);
    uint64_t v47 = sub_1001E6484(v79);
    sub_10078E18C(v46, v47, buf, v45);
  }
  byte_100A1A116 = *((unsigned char *)v79 + 4);
  byte_100A1A117 = *((unsigned char *)v79 + 5);
  byte_100A1A118 = *(unsigned char *)(sub_1001E6484(v79) + 36);
  byte_100A1A119 = *(unsigned char *)(sub_1001E6484(v79) + 37);
  dword_100A1A11A = v14;
  unk_100A1A11E = *(void *)(a1 + 672);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
  }
  byte_100A1A126 = sub_1004E5078((uint64_t)off_1009F8068);
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
  }
  byte_100A1A127 = (unsigned __int16)sub_1004E5078((uint64_t)off_1009F8068) >> 8;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
  }
  byte_100A1A128 = sub_1004E5078((uint64_t)off_1009F8068) >> 16;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
  }
  byte_100A1A129 = sub_1004E5078((uint64_t)off_1009F8068) >> 24;
  byte_100A1A12A = sub_10024E558();
  byte_100A1A12B = (unsigned __int16)sub_10024E558() >> 8;
  byte_100A1A12C = sub_10024E558() >> 16;
  byte_100A1A12D = sub_10024E558() >> 24;
  *(_WORD *)algn_100A1A12E = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009BD4C8);
  }
  uint64_t v48 = sub_1004E5080((uint64_t)off_1009F8068);
  byte_100A1A130 = BYTE4(v48);
  byte_100A1A131 = BYTE5(v48);
  byte_100A1A132 = BYTE6(v48);
  byte_100A1A133 = HIBYTE(v48);
  word_100A1A134 = v48;
  byte_100A1A136 = BYTE2(v48);
  byte_100A1A137 = BYTE3(v48);
  sub_10017BCA0(a6);
  uint64_t v49 = sub_1001E6484(v79);
  *(_DWORD *)(v49 + 10) = v77;
  *(_WORD *)(v49 + 14) = v78;
  *(void *)sub_1001E6484(v79) = a6;
  *(unsigned char *)(sub_1001E6484(v79) + 25) = 0;
  *(unsigned char *)(sub_1001E6484(v79) + 16) = 4;
  *(unsigned char *)(sub_1001E6484(v79) + 28) = 0;
  int v50 = (uint64_t *)sub_1001E6484(v79);
  sub_1001F667C(*v50);
  uint64_t v51 = v79;
  v79[19] = -1;
  if (sub_1001F3B3C(*((unsigned __int16 *)v51 + 2), 4, 5u, 0, (uint64_t *)v51 + 12, 0xFFFFFFFF))
  {
    if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR)) {
      sub_10078E124();
    }
    sub_1001DEC18((uint64_t)v79);
    return sub_10001B8AC(&v76);
  }
  *(void *)(sub_1001E6484(v79) + 88) = sub_100668C18;
  long long v52 = v79;
  *((void *)v79 + 4) = sub_100668CA8;
  *(_WORD *)(sub_1001E6484(v52) + 40) = 5000;
  uint64_t v53 = (uint64_t *)sub_1001E6484(v79);
  sub_1001DF2E4(*v53);
  uint64_t v31 = 0;
LABEL_95:
  sub_100202E24("d", 9u, 0, (unsigned char *)a6, a5, v26, v27, v28, (uint64_t)&byte_100A1A112);
  sub_10001B910(&v76);
  if (v67)
  {
    if (v79) {
      __int16 v44 = *((_WORD *)v79 + 2);
    }
    else {
      __int16 v44 = 0;
    }
    sub_10066E134(a1, v44, v66, v64, 0, v31, 1, v77 | ((unint64_t)v78 << 32));
  }
  return sub_10001B8AC(&v76);
}

void sub_10067015C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void sub_1006701B8(int *a1, _DWORD *a2, _DWORD *a3)
{
  int v12 = *a1;
  __int16 v13 = *((_WORD *)a1 + 2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009BD4E8);
  }
  uint64_t v5 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v12, 1);
  if (v5)
  {
    uint64_t v6 = v5;
    sub_10047D434(v5, a2);
    long long v11 = xmmword_1007BEF80;
    __n128 __p = 0;
    int v9 = 0;
    uint64_t v10 = 0;
    if (sub_10047AE08(v6, (uint64_t)&v11, 0x201u, &__p))
    {
      int v7 = __p;
      if (*(unsigned char *)__p == 1) {
        *a3 = *((_DWORD *)__p + 2);
      }
    }
    else
    {
      *a3 = 0;
      int v7 = __p;
      if (!__p) {
        return;
      }
    }
    int v9 = v7;
    operator delete(v7);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A1A038, OS_LOG_TYPE_ERROR))
  {
    sub_10078E3D8();
  }
}