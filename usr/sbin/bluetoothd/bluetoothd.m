uint64_t sub_1000066B0(uint64_t a1, unint64_t a2, unsigned int a3)
{
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  unint64_t v9;
  BOOL v10;
  void *v11;
  int v12;
  BOOL v13;
  NSObject *v14;
  CFStringRef v15;
  void **v17;
  void *__p[2];
  char v19;
  uint8_t buf[4];
  CFStringRef v21;
  __int16 v22;
  void **v23;

  v7 = *(void **)(a1 + 232);
  v5 = (void *)(a1 + 232);
  v6 = v7;
  if (v7)
  {
    v8 = v5;
    do
    {
      v9 = v6[4];
      v10 = v9 >= a2;
      if (v9 >= a2) {
        v11 = v6;
      }
      else {
        v11 = v6 + 1;
      }
      if (v10) {
        v8 = v6;
      }
      v6 = (void *)*v11;
    }
    while (*v11);
    if (v8 != v5 && v8[4] <= a2)
    {
      v12 = (*(uint64_t (**)(void))(*(void *)v8[5] + 16))(v8[5]);
      if (a3 == 2 || v12 == a3) {
        return v8[5];
      }
    }
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009A5018);
  }
  v13 = sub_100553210(qword_1009F8160, a2);
  v14 = qword_100A19F00;
  if (v13)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT))
    {
      if (a3 > 3) {
        v15 = @"Unknown";
      }
      else {
        v15 = (const __CFString *)*((void *)&off_1009A5138 + (int)a3);
      }
      sub_10003AE4C(a2, (uint64_t)__p);
      if (v19 >= 0) {
        v17 = __p;
      }
      else {
        v17 = (void **)__p[0];
      }
      *(_DWORD *)buf = 138543618;
      v21 = v15;
      v22 = 2082;
      v23 = v17;
      _os_log_fault_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_FAULT, "Couldn't find a registered %{public}@ app for session \"%{public}s\"", buf, 0x16u);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100754C9C(a3, a2, v14);
  }
  return 0;
}

uint64_t sub_1000068A0(uint64_t a1)
{
  v1 = *(void **)(a1 + 2040);
  v2 = (void *)(a1 + 2048);
  if (v1 != (void *)(a1 + 2048))
  {
    do
    {
      uint64_t v4 = v1[5];
      if (sub_10003FB78(v4))
      {
        uint64_t v5 = *(void *)(v4 + 8);
        if (*(unsigned char *)(v5 + 143) || *(unsigned char *)(v5 + 122) || *(_WORD *)(v5 + 124)) {
          return 1;
        }
        if (!sub_10003B140(v4) || *(unsigned char *)(a1 + 144))
        {
          unsigned int v6 = *(unsigned __int8 *)(v4 + 81);
          if (v6 <= 0x20)
          {
            if (((1 << v6) & 0x114) != 0)
            {
              if (sub_100049724(v4)) {
                return 1;
              }
            }
            else if (((1 << v6) & 0x100010000) != 0)
            {
              return 1;
            }
          }
        }
      }
      v7 = (void *)v1[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (void *)v1[2];
          BOOL v9 = *v8 == (void)v1;
          v1 = v8;
        }
        while (!v9);
      }
      v1 = v8;
    }
    while (v8 != v2);
  }
  return 0;
}

void sub_1000069B0(uint64_t a1, void *a2, uint64_t a3, NSObject *a4)
{
  *(_DWORD *)a3 = 138543618;
  *(void *)(a3 + 4) = a1;
  *(_WORD *)(a3 + 12) = 2114;
  *(void *)(a3 + 14) = a2;
  sub_100057420((void *)&_mh_execute_header, a4, a3, "Device we will overwrite this new session %{public}@ with device : \"%{public}@\"  ", (uint8_t *)a3);
}

unsigned char *sub_100006A10@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  unsigned int v6 = a3 + 1;
  v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *unsigned int v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  result = v7 + 32;
  BOOL v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    result = sub_10003B098(result, *(void **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)result = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100006AA8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1002B386C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100006AC4(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_10004D3B8(a1, (uint64_t *)a2);
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  operator delete((void *)a2);
  return v3;
}

void sub_100006B08(uint64_t a1, void *a2)
{
  id v3 = a2;
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 88);
  uint64_t v4 = sub_100030398(a1, v3);
  if (v4)
  {
    int v5 = *(_DWORD *)(a1 + 160) + 1;
    *(_DWORD *)(a1 + 160) = v5;
    v4[33] = v5;
  }
  sub_10003AFB4((uint64_t)v6);
}

void sub_100006B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

id sub_100006B94(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = [*(id *)(a1 + 296) containsObject:v3];
  if (v4)
  {
    int v5 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 138543362;
      id v8 = v3;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "\"%{public}@\" restored by bluetooth", (uint8_t *)&v7, 0xCu);
    }
  }

  return v4;
}

void sub_100006C64(_Unwind_Exception *exception_object)
{
}

uint64_t sub_100006C7C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (!v3)
  {
    int v7 = qword_100A19F70;
    if (os_log_type_enabled((os_log_t)qword_100A19F70, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BundleID is allowed - bundleID is not available", (uint8_t *)&v17, 2u);
    }
    goto LABEL_9;
  }
  uint64_t v4 = sub_100017768();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 8))(v4) & 1) == 0)
  {
LABEL_9:
    uint64_t v6 = 1;
    goto LABEL_10;
  }
  if (([v3 hasPrefix:@"com.apple."] & 1) != 0
    || [v3 hasPrefix:@"com.Apple."])
  {
    int v5 = CBGenerateObfuscatedSHA256HashedString();
    if (([(id)qword_100A1A2B8 containsObject:v5] & 1) == 0)
    {
      if (*(unsigned char *)(a1 + 152))
      {
        uint64_t v6 = 0;
        goto LABEL_13;
      }
      v16 = qword_100A19F70;
      if (os_log_type_enabled((os_log_t)qword_100A19F70, OS_LOG_TYPE_DEFAULT))
      {
        int v17 = 138543362;
        id v18 = v3;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "%{public}@ is NOT in the CB allowed list but is allowed with overriding.", (uint8_t *)&v17, 0xCu);
      }
    }
    uint64_t v6 = 1;
LABEL_13:

    goto LABEL_15;
  }
  uint64_t v6 = 1;
LABEL_15:
  int v9 = *(unsigned __int8 *)(a1 + 153);
  long long v10 = qword_100A19F70;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19F70, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      uint64_t v12 = CBGenerateObfuscatedSHA256HashedString();
      v13 = (void *)v12;
      v14 = "N";
      int v17 = 138543874;
      id v18 = v3;
      if (v6) {
        v14 = "Y";
      }
      __int16 v19 = 2114;
      uint64_t v20 = v12;
      __int16 v21 = 2082;
      v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BundleID %{public}@ hash %{public}@ is in the allowed CBSession list:%{public}s", (uint8_t *)&v17, 0x20u);
    }
  }
  else if (v11)
  {
    v15 = "N";
    if (v6) {
      v15 = "Y";
    }
    int v17 = 138543618;
    id v18 = v3;
    __int16 v19 = 2082;
    uint64_t v20 = (uint64_t)v15;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BundleID %{public}@ is in the allowed CBSession list:%{public}s", (uint8_t *)&v17, 0x16u);
  }
LABEL_10:

  return v6;
}

void sub_100006F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100006F50(os_unfair_lock_s *a1)
{
  os_unfair_lock_lock(a1);
  os_unfair_lock_unlock(a1);
  if (a1)
  {
    sub_100056D64((uint64_t)a1);
    operator delete();
  }
}

void sub_100006FB4(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[609] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_100007020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

BOOL sub_100007040(uint64_t a1)
{
  if ((a1 & 0x1C) == 0)
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Invalid Dual mode support indication in AD flags 0x%x.", v2, v3, v4, v5, v6, v7, v8, a1);
      int v9 = sub_100050B4C(0x42u);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        uint64_t v12 = sub_100050714();
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, " %{public}s", buf, 0xCu);
      }
    }
  }
  return (~a1 & 0x18) == 0;
}

uint64_t sub_100007118(uint64_t a1)
{
  *(void *)a1 = off_1009B6E68;
  *(void *)(a1 + 144) = off_1009B7028;
  *(void *)(a1 + 152) = off_1009B7160;
  uint64_t v2 = a1 + 160;
  *(void *)(a1 + 160) = &off_1009B7190;
  uint64_t v3 = a1 + 200;
  uint64_t v4 = *(void **)(a1 + 200);
  uint64_t v5 = (void *)(a1 + 208);
  if (v4 != (void *)(a1 + 208))
  {
    do
    {
      uint64_t v6 = (void *)v4[6];
      if (v6 != v4 + 7)
      {
        do
        {
          uint64_t v7 = v6[4];
          if (v7) {
            (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
          }
          uint64_t v8 = (void *)v6[1];
          if (v8)
          {
            do
            {
              int v9 = v8;
              uint64_t v8 = (void *)*v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              int v9 = (void *)v6[2];
              BOOL v10 = *v9 == (void)v6;
              uint64_t v6 = v9;
            }
            while (!v10);
          }
          uint64_t v6 = v9;
        }
        while (v9 != v4 + 7);
      }
      BOOL v11 = (void *)v4[1];
      if (v11)
      {
        do
        {
          uint64_t v12 = v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          uint64_t v12 = (void *)v4[2];
          BOOL v10 = *v12 == (void)v4;
          uint64_t v4 = v12;
        }
        while (!v10);
      }
      uint64_t v4 = v12;
    }
    while (v12 != v5);
  }
  if (qword_1009FB798 != -1) {
    dispatch_once(&qword_1009FB798, &stru_1009B7A68);
  }
  sub_100052718((uint64_t)off_1009FB790 + 176, v2);
  v16 = (void **)(a1 + 280);
  sub_100051568(&v16);
  v13 = *(void **)(a1 + 256);
  if (v13)
  {
    *(void *)(a1 + 264) = v13;
    operator delete(v13);
  }
  v14 = *(void **)(a1 + 232);
  if (v14)
  {
    *(void *)(a1 + 240) = v14;
    operator delete(v14);
  }

  sub_100051AD4(v3, *(void **)(a1 + 208));
  return sub_10000C178(a1);
}

void sub_10000731C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  a10 = (void **)(v10 + 280);
  sub_100051568(&a10);
  v13 = *(void **)(v10 + 256);
  if (v13)
  {
    *(void *)(v10 + 264) = v13;
    operator delete(v13);
  }
  sub_10077BD60(v10);

  sub_100051AD4(v11, *(void **)(v10 + 208));
  sub_10000C178(v10);
  _Unwind_Resume(a1);
}

void sub_10000736C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  uint64_t v3 = sub_10000A19C((uint64_t)off_1009F8780, *(void **)(v2 + 96));
  int v4 = v3;
  int v5 = sub_10000A924(v3, *(void **)(v2 + 96));
  if (*(unsigned char *)(a1 + 40) && *(void *)(v2 + 128))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    int v6 = sub_10030392C((uint64_t)off_1009F8780, *(void *)(v2 + 128));
  }
  else
  {
    int v6 = 0;
  }
  uint64_t v7 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(v2 + 96);
    int v9 = *(unsigned __int8 *)(v2 + 194);
    int v10 = *(unsigned __int8 *)(a1 + 40);
    int v11 = *(_DWORD *)(v2 + 196);
    int v19 = 138413826;
    uint64_t v20 = v8;
    __int16 v21 = 1024;
    *(_DWORD *)v22 = v9;
    *(_WORD *)&v22[4] = 1024;
    *(_DWORD *)&v22[6] = v4;
    __int16 v23 = 1024;
    int v24 = v5;
    __int16 v25 = 1024;
    int v26 = v10;
    __int16 v27 = 1024;
    int v28 = v6;
    __int16 v29 = 1024;
    int v30 = v11;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Application: %@ privacySupported: %d tccAuthKnown %d uses medical devices %d or state restoration %d numberOfPairedDevices %d, allowedExternalRestrictedServices 0x%08x", (uint8_t *)&v19, 0x30u);
  }
  if ((v4 & 1) == 0)
  {
    if (v5)
    {
      unsigned int v12 = 0;
      *(unsigned char *)(v2 + 195) = 1;
      goto LABEL_14;
    }
    if (!*(unsigned char *)(a1 + 40) || !v6) {
      return;
    }
    *(unsigned char *)(v2 + 195) = 1;
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    unsigned int v14 = sub_1002F3E84((uint64_t)off_1009F8780, *(void **)(v2 + 96));
    if (v14 < 0xB)
    {
      unsigned int v12 = v14;
      if (*(unsigned char *)(v2 + 195))
      {
LABEL_14:
        v13 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = 67109120;
          LODWORD(v20) = v12;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Allowing device temporarily - checkInWithoutAuth %d", (uint8_t *)&v19, 8u);
        }
      }
    }
    else
    {
      *(unsigned char *)(v2 + 195) = 0;
    }
    v15 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(v2 + 96);
      int v17 = (void *)(v2 + 56);
      if (*(char *)(v2 + 79) < 0) {
        int v17 = (void *)*v17;
      }
      int v19 = 138412546;
      uint64_t v20 = v16;
      __int16 v21 = 2080;
      *(void *)v22 = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "handleCheckInMsg:{isAlive: true, bundleId: \"%@\", session: \"%s\"}", (uint8_t *)&v19, 0x16u);
    }
    uint64_t v18 = sub_100052E70();
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)v18 + 72))(v18, *(void *)(v2 + 96), 1);
    sub_1005A1EF8((unint64_t *)v2);
  }
}

void sub_100007674(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_source_cancel(v2);
    dispatch_release(*(dispatch_object_t *)(a1 + 16));
    *(void *)(a1 + 16) = 0;
  }
}

void sub_1000076AC(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[96] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_100007718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_100007738(uint64_t a1, void *a2, double a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  int v6 = (double *)sub_100030398(a1, v5);
  if (v6) {
    v6[50] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_1000077A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

void sub_1000077C4(os_unfair_lock_s *a1, int a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "off";
    if (a2) {
      id v5 = "on";
    }
    *(_DWORD *)buf = 136446210;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Microphone is now %{public}s", buf, 0xCu);
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100050D70;
  v6[3] = &unk_1009A3CA8;
  char v7 = a2;
  sub_1000099F0(a1 + 142, v6);
}

uint64_t sub_1000078E0(uint64_t a1, xpc_object_t xdict)
{
  BOOL v3 = xpc_dictionary_get_BOOL(xdict, "kMessageArgs");
  *(unsigned char *)(a1 + 278) = v3;
  int v4 = qword_100A19E58;
  if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = "Disabled";
    if (v3) {
      id v5 = "Enabled";
    }
    int v8 = 136315394;
    int v9 = "void BT::PurpleCoexManager::SetConditionalIdEnable(xpc_object_t)";
    __int16 v10 = 2080;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s, ConditionalIDEnable set to %s", (uint8_t *)&v8, 0x16u);
  }
  uint64_t v6 = sub_10003FB34();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, void, uint64_t))(*(void *)v6 + 2968))(v6, 0, 60, *(unsigned __int8 *)(a1 + 278) ^ 1u, 1);
}

void sub_100007A18(os_unfair_lock_s *a1, _xpc_connection_s *a2, const char *a3)
{
  os_unfair_lock_lock(a1);
  uint64_t v6 = sub_10000FA1C((uint64_t)a1, a2, a3);
  if (!strcmp(a3, "com.apple.server.bluetooth.le.att.xpc")) {
    operator new();
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.le.pipe.xpc")) {
    operator new();
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.general.xpc")) {
    operator new();
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.classic.xpc")) {
    operator new();
  }
  ++*(_DWORD *)v6;

  os_unfair_lock_unlock(a1);
}

void sub_100007BAC()
{
}

void sub_100007C0C(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  *(unsigned char *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 24) = 0;

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_100007C4C(os_unfair_lock_s *a1, uint64_t a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v8 >= 0) {
      id v5 = __p;
    }
    else {
      id v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    __int16 v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'session attached' event for session \"%{public}s\"", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100019BAC;
  v6[3] = &unk_1009B5260;
  void v6[4] = a2;
  sub_100019A80(a1 + 2, v6);
}

void sub_100007D80(os_unfair_lock_s *a1, uint64_t a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    if (v8 >= 0) {
      id v5 = __p;
    }
    else {
      id v5 = (void **)__p[0];
    }
    *(_DWORD *)buf = 136446210;
    __int16 v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Sending 'session detached' event for session \"%{public}s\"", buf, 0xCu);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
  }
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100019B4C;
  v6[3] = &unk_1009B5260;
  void v6[4] = a2;
  sub_100019A80(a1 + 2, v6);
}

void sub_100007EB4(uint64_t *a1, char a2)
{
  if (*((unsigned char *)a1 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
    uint64_t v2 = 0;
    long long v185 = 0u;
    long long v186 = 0u;
    *(_OWORD *)ptr = 0u;
    long long v184 = 0u;
    long long v182 = 0u;
LABEL_4:
    if (!sub_100058654()) {
      return;
    }
    sub_100056E24((uint64_t)"Not enough data in the packet : %d, expecting at least %d", v6, v7, v8, v9, v10, v11, v12, v2);
    v13 = sub_100050B4C(0x42u);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_6;
  }
  unsigned int v4 = *((unsigned __int16 *)a1 + 5);
  uint64_t v5 = *((unsigned __int16 *)a1 + 6);
  uint64_t v2 = v4 - v5;
  long long v185 = 0u;
  long long v186 = 0u;
  *(_OWORD *)ptr = 0u;
  long long v184 = 0u;
  long long v182 = 0u;
  if (v2 <= 9) {
    goto LABEL_4;
  }
  if (*((unsigned char *)a1 + 14) != 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 344, "(*pBs).__RWFlag == BYTESTREAM_READ");
  }
  if (v4 <= v5)
  {
    *((unsigned char *)a1 + 15) = 1;
    if (!sub_100058654()) {
      return;
    }
    sub_100056E24((uint64_t)"Could not get the number of reports of the LE extended advertising report event", v61, v62, v63, v64, v65, v66, v67, v181);
    v68 = sub_100050B4C(0x42u);
    if (!os_log_type_enabled(v68, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_6:
    sub_100744F6C();
    return;
  }
  uint64_t v14 = *a1;
  *((_WORD *)a1 + 6) = v5 + 1;
  int v15 = *(unsigned __int8 *)(v14 + v5);
  BYTE1(ptr[1]) = a2;
  if (!v15) {
    return;
  }
  int v16 = 0;
  while (1)
  {
    if (*((unsigned char *)a1 + 14) != 1) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 351, "(*pBs).__RWFlag == BYTESTREAM_READ");
    }
    if (*((unsigned char *)a1 + 15))
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
LABEL_73:
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the event type of the LE extended advertising report event", v69, v70, v71, v72, v73, v74, v75, v181);
      v76 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    uint64_t v17 = *((unsigned __int16 *)a1 + 6);
    if (*((unsigned __int16 *)a1 + 5) - (int)v17 <= 1) {
      goto LABEL_73;
    }
    uint64_t v18 = (unsigned __int8 *)(*a1 + v17);
    unsigned int v19 = *v18;
    LODWORD(v18) = v18[1];
    *((_WORD *)a1 + 6) = v17 + 2;
    char v20 = v19 & 0x1F;
    WORD1(ptr[1]) = v19 & 0x1F;
    BYTE4(ptr[1]) = (v19 >> 5) & 3;
    BYTE14(v184) = v19 >> 7;
    BYTE13(v184) = v18 & 0x3F;
    BYTE12(v184) = (v18 & 0x40) != 0;
    HIBYTE(v184) = v18 >> 7;
    uint64_t v21 = (v19 & 0x1F) - 16;
    if (v21 >= 0xE) {
      goto LABEL_17;
    }
    if ((0x2C2Du >> v21))
    {
      char v32 = byte_1007BA4B8[v21];
    }
    else
    {
LABEL_17:
      BYTE11(v184) = 1;
      int v22 = sub_100058654();
      if (v20)
      {
        if ((v20 & 4) != 0)
        {
          if (v22)
          {
            sub_100056E24((uint64_t)"legacy=false EXTENDED_ADVERTISING_EVENT_TYPE_CONNECTABLE & EXTENDED_ADVERTISING_EVENT_TYPE_DIRECTED_ADV", v23, v24, v25, v26, v27, v28, v29, v181);
            v38 = sub_100050B4C(0x42u);
            if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
            {
              v39 = sub_100050714();
              *(_DWORD *)buf = 136446210;
              v188 = v39;
              _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
            }
          }
          char v32 = 1;
        }
        else
        {
          if (v22)
          {
            sub_100056E24((uint64_t)"legacy=false EXTENDED_ADVERTISING_EVENT_TYPE_CONNECTABLE", v23, v24, v25, v26, v27, v28, v29, v181);
            v33 = sub_100050B4C(0x42u);
            BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
            char v32 = 0;
            if (!v34) {
              goto LABEL_37;
            }
            v35 = sub_100050714();
            *(_DWORD *)buf = 136446210;
            v188 = v35;
            _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
          char v32 = 0;
        }
      }
      else if ((v20 & 8) != 0)
      {
        if (v22)
        {
          sub_100056E24((uint64_t)"legacy=false EXTENDED_ADVERTISING_EVENT_TYPE_SCAN_RSP", v23, v24, v25, v26, v27, v28, v29, v181);
          v36 = sub_100050B4C(0x42u);
          if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
            v37 = sub_100050714();
            *(_DWORD *)buf = 136446210;
            v188 = v37;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        char v32 = 4;
      }
      else
      {
        if (v22)
        {
          sub_100056E24((uint64_t)"legacy=false LE_ADVERTISING_TYPE_NON_CONNECTABLE_UNDIRECTED", v23, v24, v25, v26, v27, v28, v29, v181);
          int v30 = sub_100050B4C(0x42u);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            v31 = sub_100050714();
            *(_DWORD *)buf = 136446210;
            v188 = v31;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
          }
        }
        char v32 = 3;
      }
    }
LABEL_37:
    LOBYTE(v182) = (16 * BYTE13(v184) - 80) | v32;
    if (*((unsigned char *)a1 + 14) != 1) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 401, "(*pBs).__RWFlag == BYTESTREAM_READ");
    }
    if (*((unsigned char *)a1 + 15))
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
LABEL_77:
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the address type of the LE extended advertising report event", v77, v78, v79, v80, v81, v82, v83, v181);
      v84 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v84, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    unsigned int v40 = *((unsigned __int16 *)a1 + 5);
    uint64_t v41 = *((unsigned __int16 *)a1 + 6);
    if (v40 <= v41) {
      goto LABEL_77;
    }
    uint64_t v42 = *a1;
    *((_WORD *)a1 + 6) = v41 + 1;
    BYTE1(v182) = *(unsigned char *)(v42 + v41);
    if ((int)(v40 - (v41 + 1)) <= 5) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 404, "ByteStream_NumReadBytesAvail(*pBs) >= OI_BD_ADDR_BYTE_SIZE");
    }
    sub_100008A18((uint64_t)&v182 + 2, v42 + v41 + 1, 6uLL);
    __int16 v43 = *((_WORD *)a1 + 6);
    *((_WORD *)a1 + 6) = v43 + 6;
    if (*((unsigned char *)a1 + 15)) {
      break;
    }
    if (*((unsigned char *)a1 + 14) != 1) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 407, "(*pBs).__RWFlag == BYTESTREAM_READ");
    }
    unsigned int v44 = *((unsigned __int16 *)a1 + 5);
    if (v44 <= (unsigned __int16)(v43 + 6))
    {
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the primary PHY  of the LE extended advertising report event", v93, v94, v95, v96, v97, v98, v99, v181);
      v100 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v100, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    uint64_t v45 = *a1;
    *((_WORD *)a1 + 6) = v43 + 7;
    BYTE5(ptr[1]) = *(unsigned char *)(v45 + (unsigned __int16)(v43 + 6));
    LOBYTE(v185) = BYTE5(ptr[1]) >> 7;
    BYTE1(v185) = (BYTE5(ptr[1]) & 0x40) != 0;
    BYTE2(v185) = (BYTE5(ptr[1]) & 0x20) != 0;
    if (v44 <= (unsigned __int16)(v43 + 7))
    {
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the secondary PHY of the LE extended advertising report event", v101, v102, v103, v104, v105, v106, v107, v181);
      v108 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v108, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    *((_WORD *)a1 + 6) = v43 + 8;
    BYTE6(ptr[1]) = *(unsigned char *)(v45 + (unsigned __int16)(v43 + 7));
    if (v44 <= (unsigned __int16)(v43 + 8))
    {
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the advertising SID of the LE extended advertising report event", v109, v110, v111, v112, v113, v114, v115, v181);
      v116 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v116, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    *((_WORD *)a1 + 6) = v43 + 9;
    HIBYTE(ptr[1]) = *(unsigned char *)(v45 + (unsigned __int16)(v43 + 8));
    if (v44 <= (unsigned __int16)(v43 + 9))
    {
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the advertising SID of the LE extended advertising report event", v117, v118, v119, v120, v121, v122, v123, v181);
      v124 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v124, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    *((_WORD *)a1 + 6) = v43 + 10;
    LOBYTE(v184) = *(unsigned char *)(v45 + (unsigned __int16)(v43 + 9));
    if (v44 <= (unsigned __int16)(v43 + 10))
    {
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the advertising SID of the LE extended advertising report event", v125, v126, v127, v128, v129, v130, v131, v181);
      v132 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v132, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    *((_WORD *)a1 + 6) = v43 + 11;
    LOBYTE(ptr[1]) = *(unsigned char *)(v45 + (unsigned __int16)(v43 + 10));
    if ((int)(v44 - (unsigned __int16)(v43 + 11)) <= 1)
    {
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the periodic advertising interval of the LE extended advertising report event", v133, v134, v135, v136, v137, v138, v139, v181);
      v140 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v140, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    WORD1(v184) = *(_WORD *)(v45 + (unsigned __int16)(v43 + 11));
    unsigned __int16 v46 = v43 + 13;
    *((_WORD *)a1 + 6) = v43 + 13;
    if (v44 <= (unsigned __int16)(v43 + 13))
    {
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the direct address type of the LE extended advertising report event", v141, v142, v143, v144, v145, v146, v147, v181);
      v148 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v148, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    unsigned __int16 v47 = v43 + 14;
    *((_WORD *)a1 + 6) = v47;
    BYTE4(v184) = *(unsigned char *)(v45 + v46);
    if ((int)(v44 - v47) <= 5) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 434, "ByteStream_NumReadBytesAvail(*pBs) >= OI_BD_ADDR_BYTE_SIZE");
    }
    sub_100008A18((uint64_t)&v184 + 5, v45 + v47, 6uLL);
    __int16 v48 = *((_WORD *)a1 + 6);
    *((_WORD *)a1 + 6) = v48 + 6;
    if (*((unsigned char *)a1 + 15))
    {
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the direct address of the LE extended advertising report event", v149, v150, v151, v152, v153, v154, v155, v181);
      v156 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v156, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    if (*((unsigned char *)a1 + 14) != 1) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 437, "(*pBs).__RWFlag == BYTESTREAM_READ");
    }
    if (*((unsigned __int16 *)a1 + 5) <= (unsigned __int16)(v48 + 6))
    {
      *((unsigned char *)a1 + 15) = 1;
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the dataLength of the LE extended advertising report event", v157, v158, v159, v160, v161, v162, v163, v181);
      v164 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v164, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    uint64_t v49 = *a1;
    *((_WORD *)a1 + 6) = v48 + 7;
    uint64_t v50 = (unsigned __int16)(v48 + 6);
    size_t v51 = *(unsigned __int8 *)(v49 + v50);
    WORD4(v182) = *(unsigned __int8 *)(v49 + v50);
    if (v51 >= 0xE6)
    {
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Too many data bytes in the LE extended advertising report event.", v165, v166, v167, v168, v169, v170, v171, v181);
      v172 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v172, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_116;
    }
    v52 = sub_100022FE8(v51);
    ptr[0] = v52;
    if (!v52) {
      goto LABEL_65;
    }
    uint64_t v53 = WORD4(v182);
    if (!WORD4(v182)) {
      goto LABEL_65;
    }
    if (*((unsigned char *)a1 + 14) != 1) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 449, "(*pBs).__RWFlag == BYTESTREAM_READ");
    }
    v54 = v52;
    uint64_t v55 = *a1;
    uint64_t v56 = *((unsigned __int16 *)a1 + 6);
    if (*((unsigned char *)a1 + 15))
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
      int v57 = 0;
    }
    else
    {
      int v57 = *((unsigned __int16 *)a1 + 5) - v56;
    }
    if (v57 < WORD4(v182))
    {
      *((unsigned char *)a1 + 15) = 1;
LABEL_114:
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"Could not get the dataLength of the LE extended advertising report event", v173, v174, v175, v176, v177, v178, v179, v181);
      v180 = sub_100050B4C(0x42u);
      if (!os_log_type_enabled(v180, OS_LOG_TYPE_ERROR)) {
        return;
      }
LABEL_116:
      sub_100744F6C();
      return;
    }
    v58 = (char *)(v55 + v56);
    v59 = &v54[v53];
    do
    {
      char v60 = *v58++;
      *v54++ = v60;
    }
    while (v54 < v59);
    *((_WORD *)a1 + 6) += WORD4(v182);
    if (*((unsigned char *)a1 + 15)) {
      goto LABEL_114;
    }
LABEL_65:
    if (BYTE1(v182) >= 2u) {
      BYTE1(v182) -= 2;
    }
    sub_10005986C((unsigned __int16 *)&v182);
    sub_100023010(ptr[0]);
    if (++v16 == v15) {
      return;
    }
  }
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"Could not get the address of the LE advertising report event", v85, v86, v87, v88, v89, v90, v91, v181);
    v92 = sub_100050B4C(0x42u);
    if (os_log_type_enabled(v92, OS_LOG_TYPE_ERROR)) {
      goto LABEL_116;
    }
  }
}

uint64_t sub_100008A18(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    uint64_t v3 = 0;
    unsigned int v4 = (char *)(a3 + a2 - 1);
    do
    {
      char v5 = *v4--;
      *(unsigned char *)(result + v3++) = v5;
    }
    while (a3 > v3);
  }
  return result;
}

void sub_100008A40(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 185);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 132);
  uint64_t v5 = *(unsigned __int8 *)(v2 + 186);
  uint64_t v6 = *(unsigned __int8 *)(a1 + 133);
  uint64_t v7 = *(unsigned __int8 *)(v2 + 88);
  uint64_t v18 = *(void *)(a1 + 80);
  uint64_t v19 = *(void *)(a1 + 72);
  uint64_t v17 = *(void *)(a1 + 88);
  unint64_t v8 = sub_100014448() | ((unint64_t)*(unsigned __int8 *)(v2 + 175) << 8) | ((unint64_t)*(unsigned __int8 *)(v2 + 86) << 16) | ((unint64_t)*(unsigned __int8 *)(v2 + 104) << 40);
  uint64_t v9 = *(unsigned __int8 *)(v2 + 177);
  uint64_t v10 = *(unsigned __int8 *)(v2 + 87);
  uint64_t v21 = v5;
  uint64_t v22 = v3;
  uint64_t v20 = v6;
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unint64_t v11 = v8 | (v9 << 24);
  uint64_t v12 = off_1009F8780;
  v13 = *(void **)(v2 + 48);
  long long v14 = *(_OWORD *)(a1 + 112);
  v25[0] = *(_OWORD *)(a1 + 96);
  v25[1] = v14;
  unsigned int v15 = *(_DWORD *)(v2 + 40);
  int v16 = *(void **)(a1 + 32);
  if (*(char *)(v2 + 79) < 0)
  {
    sub_10003B098(__p, *(void **)(v2 + 56), *(void *)(v2 + 64));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(v2 + 56);
    uint64_t v24 = *(void *)(v2 + 72);
  }
  *(void *)(v2 + 128) = sub_10002BB94((uint64_t)v12, v13, v2 + 144, v25, v15, v16, (uint64_t)__p, *(_DWORD *)(a1 + 128), *(void **)(a1 + 40), (_DWORD *)(*(void *)(*(void *)(a1 + 48) + 8) + 24), (unsigned char *)(*(void *)(*(void *)(a1 + 56) + 8) + 24), ((unint64_t)(v17 != 0) << 56) | ((unint64_t)(v18 != 0) << 48) | (v7 << 40) | (v20 << 32) | (v21 << 24) | (v22 << 16) | (v4 << 8) | (v19 != 0), v11, (v11 | (v10 << 32)) >> 32, 0);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100008C18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100008C34(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6) {
    v6[97] = a3;
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_100008CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100008CC0(int *a1)
{
  uint64_t result = pthread_mutex_trylock(&stru_100A000B0);
  int v3 = *a1;
  if (result)
  {
    if (v3 == dword_100A001FC)
    {
      if (*((unsigned char *)a1 + 4)) {
        sub_1007483BC((uint64_t)v4);
      }
      *((unsigned char *)a1 + 4) = 1;
    }
    else
    {
      *a1 = dword_100A001FC;
      *((unsigned char *)a1 + 4) = 0;
    }
  }
  else
  {
    if (v3 == dword_100A001FC)
    {
      dispatch_suspend((dispatch_object_t)qword_100A00200);
      dword_100A001FC = 0;
    }
    else
    {
      *a1 = dword_100A001FC;
      *((unsigned char *)a1 + 4) = 0;
    }
    return pthread_mutex_unlock(&stru_100A000B0);
  }
  return result;
}

BOOL sub_100008DC4(uint64_t a1, void *a2)
{
  id v3 = a2;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 48);
  sub_1000305AC(uu2, v3);
  uint64_t v4 = sub_1000308C0(a1 + 440, uu2);
  uint64_t v5 = v4;
  if (a1 + 448 == v4)
  {
    BOOL v6 = 0;
  }
  else
  {
    sub_1003BC0D4(*(void *)(v4 + 56), 0, uu2);
    if (sub_100013DCC((uint64_t)uu2))
    {
      sub_1003BC0D4(*(void *)(v5 + 56), 3, &v16);
      if (sub_100013DCC((uint64_t)&v16))
      {
        sub_1003BC0D4(*(void *)(v5 + 56), 4, &v14);
        if (sub_100013DCC((uint64_t)&v14))
        {
          sub_1003BC0D4(*(void *)(v5 + 56), 5, &v12);
          if (sub_100013DCC((uint64_t)&v12))
          {
            sub_1003BC0D4(*(void *)(v5 + 56), 8, &v10);
            if (sub_100013DCC((uint64_t)&v10))
            {
              sub_1003BC0D4(*(void *)(v5 + 56), 9, &v8);
              BOOL v6 = !sub_100013DCC((uint64_t)&v8);
              unint64_t v8 = &off_100998428;
              if (v9) {
                sub_1000368F4(v9);
              }
            }
            else
            {
              BOOL v6 = 1;
            }
            uint64_t v10 = &off_100998428;
            if (v11) {
              sub_1000368F4(v11);
            }
          }
          else
          {
            BOOL v6 = 1;
          }
          uint64_t v12 = &off_100998428;
          if (v13) {
            sub_1000368F4(v13);
          }
        }
        else
        {
          BOOL v6 = 1;
        }
        long long v14 = &off_100998428;
        if (v15) {
          sub_1000368F4(v15);
        }
      }
      else
      {
        BOOL v6 = 1;
      }
      int v16 = &off_100998428;
      if (v17) {
        sub_1000368F4(v17);
      }
    }
    else
    {
      BOOL v6 = 1;
    }
    *(void *)uu2 = &off_100998428;
    if (v20) {
      sub_1000368F4(v20);
    }
  }
  sub_10003AFB4((uint64_t)v18);

  return v6;
}

void sub_100009050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, atomic_uint *a11, uint64_t a12, atomic_uint *a13, uint64_t a14, atomic_uint *a15, uint64_t a16, atomic_uint *a17, uint64_t a18, atomic_uint *a19)
{
  if (a11) {
    sub_1000368F4(a11);
  }
  if (a13) {
    sub_1000368F4(a13);
  }
  if (a15) {
    sub_1000368F4(a15);
  }
  if (a17) {
    sub_1000368F4(a17);
  }
  if (a19) {
    sub_1000368F4(a19);
  }
  *(void *)(v20 - 56) = &off_100998428;
  uint64_t v22 = *(atomic_uint **)(v20 - 48);
  if (v22) {
    sub_1000368F4(v22);
  }
  sub_10003AFB4(v20 - 72);

  _Unwind_Resume(a1);
}

void sub_1000091C4(uint64_t a1, void *a2, char a3)
{
  id v5 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  id v6 = sub_100030398(a1, v5);
  if (v6) {
    sub_1000527B8((uint64_t)v6, a3);
  }
  sub_10003AFB4((uint64_t)v7);
}

void sub_100009234(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100009254(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(unsigned __int8 *)(a2 + 23);
  char v4 = v3;
  if ((v3 & 0x80u) != 0) {
    uint64_t v3 = *(void *)(a2 + 8);
  }
  if (v3)
  {
    v10[0] = 0;
    v10[1] = 0;
    sub_10003AED0((uint64_t)v10, a1 + 40);
    if (!*(unsigned char *)(a1 + 108))
    {
      sub_10003AFE8((uint64_t)v10);
      (**(void (***)(uint64_t))a1)(a1);
      sub_10003AF00((uint64_t)v10);
    }
    if (a1 + 128 == sub_10003156C(a1 + 120, (const void **)a2))
    {
      if (sub_1000095F8(a1, a2)) {
        operator new();
      }
    }
    else
    {
      id v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v9 = a2;
        }
        else {
          uint64_t v9 = *(void *)a2;
        }
        buf[0] = 136446210;
        *(void *)&buf[1] = v9;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Session \"%{public}s\" already attached", (uint8_t *)buf, 0xCu);
        id v6 = qword_100A19E50;
      }
      if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT)) {
        sub_10077991C();
      }
    }
    sub_10003AFB4((uint64_t)v10);
  }
  else
  {
    uint64_t v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007798A0((void *)a2, v4 < 0, v7);
    }
  }
  return 100;
}

void sub_100009518()
{
}

void sub_100009560(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (!v2)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    sub_100056D64(a1);
    operator delete();
  }
  dispatch_set_finalizer_f(v2, (dispatch_function_t)sub_100006F50);
  sub_100007674(a1);

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

unint64_t sub_1000095F8(uint64_t a1, uint64_t a2)
{
  int v3 = HIBYTE(*(unsigned __int16 *)(a1 + 104));
  int v4 = *(_WORD *)(a1 + 104);
  id v5 = (void *)(a1 + 152);
  __int16 v6 = *(_WORD *)(a1 + 106);
  unsigned int v7 = 1;
  while (1)
  {
    if (v6 == -2) {
      __int16 v6 = 0;
    }
    else {
      ++v6;
    }
    *(_WORD *)(a1 + 106) = v6;
    unint64_t v8 = *(char *)(a2 + 23) >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
    unsigned __int8 v9 = *v8;
    if (*v8)
    {
      uint64_t v10 = v8 + 1;
      int v11 = 5381;
      do
      {
        int v11 = 33 * v11 + v9;
        int v12 = *v10++;
        unsigned __int8 v9 = v12;
      }
      while (v12);
    }
    else
    {
      int v11 = 5381;
    }
    int v13 = 33 * (33 * (33 * (v3 + 33 * v11) + v4) + ((unsigned __int16)(v6 & 0xFF00) >> 8)) + v6;
    if ((unsigned __int16)(v13 - 1) <= 0xFFFCu)
    {
      unint64_t v14 = (unint64_t)(unsigned __int16)v13 << 16;
      unsigned int v15 = (void *)*v5;
      if (!*v5) {
        break;
      }
      int v16 = v5;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v14;
        if (v17 >= v14) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          int v16 = v15;
        }
        unsigned int v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == v5 || v16[4] > v14) {
        break;
      }
    }
    BOOL v18 = v7++ >= 0xFF;
    if (v18) {
      goto LABEL_30;
    }
  }
  unint64_t v23 = (unint64_t)(unsigned __int16)v13 << 16;
  if ((_WORD)v13)
  {
    unint64_t v22 = (unint64_t)(unsigned __int16)v13 << 16;
    uint64_t v24 = &v22;
    sub_1000097B0((uint64_t **)(a1 + 144), &v22, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v24)[5] = v14;
    uint64_t v24 = &v23;
    sub_1000097B0((uint64_t **)(a1 + 168), &v23, (uint64_t)&unk_1007BE9D0, (uint64_t **)&v24)[5] = v14;
    return v23;
  }
LABEL_30:
  uint64_t v21 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10077995C((uint64_t)v8, v21);
  }
  return 0;
}

uint64_t *sub_1000097B0(uint64_t **a1, unint64_t *a2, uint64_t a3, uint64_t **a4)
{
  unsigned int v7 = a1 + 1;
  __int16 v6 = a1[1];
  if (v6)
  {
    unint64_t v8 = *a2;
    while (1)
    {
      while (1)
      {
        unsigned __int8 v9 = (uint64_t **)v6;
        unint64_t v10 = v6[4];
        if (v8 >= v10) {
          break;
        }
        __int16 v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      __int16 v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unsigned __int8 v9 = a1 + 1;
LABEL_10:
    int v11 = (uint64_t *)operator new(0x30uLL);
    v11[4] = **a4;
    v11[5] = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

void sub_100009870(id a1, NSDictionary *a2)
{
  int v3 = a2;
  uint64_t v2 = +[BTAppInteraction instance];
  [v2 applicationStateChanged:v3];
}

void sub_1000098D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000098F0(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0;
  __int16 v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  int v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    int v4 = v5;
  }
  if (v4)
  {
    __int16 v6 = v4;
    operator delete(v4);
  }
}

void sub_100009994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000099BC(uint64_t a1, uint64_t (***a2)(void, void, void))
{
  return (**a2)(a2, *(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void sub_1000099F0(os_unfair_lock_s *a1, void *a2)
{
  int v3 = a2;
  os_unfair_lock_lock(a1);
  id v5 = 0;
  __int16 v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  int v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    int v4 = v5;
  }
  if (v4)
  {
    __int16 v6 = v4;
    operator delete(v4);
  }
}

void sub_100009A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

xpc_object_t sub_100009ABC(void *a1)
{
  id v1 = a1;
  uint64_t v2 = (char *)[v1 count];
  __chkstk_darwin();
  int v4 = (xpc_object_t *)((char *)v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0));
  bzero(v4, v3);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1004F1A58;
  v7[3] = &unk_1009B2750;
  v7[4] = v4;
  [v1 enumerateObjectsUsingBlock:v7];
  for (xpc_object_t i = xpc_array_create(v4, (size_t)v2); v2; --v2)
    xpc_release(*v4++);

  return i;
}

void sub_100009BEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

pthread_mutex_t *sub_100009CB8(pthread_mutex_t *a1)
{
  v4.__sig = 0;
  *(void *)v4.__opaque = 0;
  pthread_mutexattr_init(&v4);
  pthread_mutexattr_settype(&v4, 2);
  int v2 = pthread_mutex_init(a1, &v4);
  pthread_mutexattr_destroy(&v4);
  if (v2 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
    sub_100751230();
  }
  return a1;
}

uint64_t sub_100009D78(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, long long *a6, uint64_t a7, void *a8)
{
  id v14 = a4;
  id v15 = a8;
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009AE140);
  }
  long long v16 = a6[1];
  v19[0] = *a6;
  v19[1] = v16;
  uint64_t v17 = sub_10000D00C((uint64_t)off_1009F7EB8, a2, a3, v14, a5, v19, a7, v15);

  return v17;
}

void sub_100009E44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100009E58(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)v2);
  uint64_t v3 = *(void *)(v2 + 16);
  if (!v3) {
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = v2 + 16;
  do
  {
    int v6 = *(_DWORD *)(v3 + 32);
    BOOL v7 = v6 < v4;
    if (v6 >= v4) {
      unint64_t v8 = (uint64_t *)v3;
    }
    else {
      unint64_t v8 = (uint64_t *)(v3 + 8);
    }
    if (!v7) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v5 == v2 + 16 || v4 < *(_DWORD *)(v5 + 32))
  {
LABEL_11:
    unsigned __int8 v9 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
      sub_100786920(v9);
    }
    uint64_t v5 = v2 + 16;
  }
  int v10 = *(_DWORD *)(v5 + 40);
  if (!v10)
  {
    int v12 = qword_100A19EC8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)(v5 + 40) = -1;
      goto LABEL_19;
    }
    int v13 = 136446210;
    id v14 = "clientInfo.numConnections > 0";
    _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v13, 0xCu);
    int v10 = *(_DWORD *)(v5 + 40);
  }
  int v11 = v10 - 1;
  *(_DWORD *)(v5 + 40) = v11;
  if (!v11)
  {
    dispatch_release(*(dispatch_object_t *)(v5 + 48));
    sub_10004D3B8((uint64_t **)(v2 + 8), (uint64_t *)v5);
    operator delete((void *)v5);
  }
LABEL_19:
  os_unfair_lock_unlock((os_unfair_lock_t)v2);
}

id sub_10000A068(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = +[NSArray arrayWithObjects:@"com.apple.AppStore", @"com.apple.Preferences", @"com.apple.Bridge", 0];
  id v4 = [v3 containsObject:v2];

  return v4;
}

void sub_10000A0E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000A19C(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ([*(id *)(a1 + 336) containsObject:v3]) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = (uint64_t)[*(id *)(a1 + 344) containsObject:v3];
  }

  return v4;
}

void sub_10000A1F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000A204(os_unfair_lock_s *a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_10000E83C(a1, object);
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    if (object == &_xpc_error_connection_interrupted)
    {
      sub_10073A730((uint64_t)a1);
    }
    else
    {
      int v6 = qword_100A19E58;
      if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_ERROR)) {
        sub_10079A468(object, v6);
      }
    }
  }
  else
  {
    uint64_t v5 = xpc_copy_description(object);
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_ERROR)) {
      sub_10079A4F4();
    }
    free(v5);
  }
}

void sub_10000A314(uint64_t a1)
{
  id v2 = *(void **)(*(void *)(a1 + 32) + 72);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_1007263D0;
  v4[3] = &unk_1009C0580;
  id v5 = *(id *)(a1 + 40);
  id v3 = [v2 indexOfObjectPassingTest:v4];
  if (v3 != (id)0x7FFFFFFFFFFFFFFFLL) {
    [*(id *)(*(void *)(a1 + 32) + 72) removeObjectAtIndex:v3];
  }
}

void sub_10000A3C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

id sub_10000A3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v7 = +[BTAppInteraction instance];
  sub_10001854C(a1, a2, __p);
  if (v13 >= 0) {
    unint64_t v8 = __p;
  }
  else {
    unint64_t v8 = (void **)__p[0];
  }
  unsigned __int8 v9 = +[NSString stringWithUTF8String:v8];
  id v10 = [v7 isBackgroundingSupported:v9 central:a3];

  if (v13 < 0) {
    operator delete(__p[0]);
  }

  return v10;
}

void sub_10000A4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10000A5C4(dispatch_source_t *a1)
{
  global_queue = dispatch_get_global_queue(17, 0);
  id v3 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, global_queue);
  a1[2] = v3;
  dispatch_set_context(v3, a1);
  dispatch_source_set_event_handler_f(a1[2], (dispatch_function_t)sub_1003BF4B0);
  uint64_t v4 = a1[2];
  dispatch_time_t v5 = dispatch_time(0, 10000000000);
  dispatch_source_set_timer(v4, v5, 0x2540BE400uLL, 0x3B9ACA00uLL);
  int v6 = a1[2];

  dispatch_resume(v6);
}

uint64_t sub_10000A678(uint64_t a1, unint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 40);
  if (*(unsigned char *)(a1 + 108))
  {
    if (a2)
    {
      uint64_t v4 = sub_100019C0C((void *)a1, a2);
      dispatch_time_t v5 = qword_100A19E50;
      if (v4)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134218240;
          uint64_t v16 = v4;
          __int16 v17 = 2048;
          BOOL v18 = (void *)a2;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Detach session: %p, session handle: %p", buf, 0x16u);
        }
        sub_10003AFE8((uint64_t)v14);
        sub_100007D80((os_unfair_lock_s *)a1, v4);
        sub_10003AF00((uint64_t)v14);
        uint64_t v6 = *(void *)(a1 + 120);
        if (v6 != a1 + 128)
        {
          while (*(void *)(v6 + 56) != v4)
          {
            BOOL v7 = *(void **)(v6 + 8);
            if (v7)
            {
              do
              {
                unint64_t v8 = v7;
                BOOL v7 = (void *)*v7;
              }
              while (v7);
            }
            else
            {
              do
              {
                unint64_t v8 = *(void **)(v6 + 16);
                BOOL v9 = *v8 == v6;
                uint64_t v6 = (uint64_t)v8;
              }
              while (!v9);
            }
            uint64_t v6 = (uint64_t)v8;
            if (v8 == (void *)(a1 + 128)) {
              goto LABEL_28;
            }
          }
          int v11 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            int v12 = (void *)(v6 + 32);
            if (*(char *)(v6 + 55) < 0) {
              int v12 = (void *)*v12;
            }
            *(_DWORD *)buf = 134218242;
            uint64_t v16 = v4;
            __int16 v17 = 2082;
            BOOL v18 = v12;
            _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Erasing session %p from SessionMap for \"%{public}s\"", buf, 0x16u);
          }
          sub_100006AC4((uint64_t **)(a1 + 120), v6);
        }
LABEL_28:
        sub_100052C8C(v4);
        sub_10004D260((void *)a1, a2);
        sub_100052BF0(v4);
        operator delete();
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100779A3C();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_100779A08();
    }
    uint64_t v10 = 7;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007799D4();
    }
    uint64_t v10 = 1;
  }
  sub_10003AFB4((uint64_t)v14);
  return v10;
}

void sub_10000A904(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10000A924(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v10 = 0;
  int v11 = &v10;
  uint64_t v12 = 0x2020000000;
  char v13 = 0;
  id v3 = +[NSArray arrayWithObjects:@"com.dexcom.", @"com.medtronic.", @"com.senseonics.", 0];
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_10004D7B8;
  v7[3] = &unk_1009B79B8;
  id v4 = v2;
  id v8 = v4;
  BOOL v9 = &v10;
  [v3 enumerateObjectsUsingBlock:v7];
  uint64_t v5 = *((unsigned __int8 *)v11 + 24);

  _Block_object_dispose(&v10, 8);
  return v5;
}

void sub_10000AA28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17)
{
  _Block_object_dispose((const void *)(v19 - 64), 8);
  _Unwind_Resume(a1);
}

void sub_10000AA58(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, int a5, int a6)
{
  id v11 = a4;
  uint64_t v12 = sub_100052E70();
  int v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 56))(v12, a3);
  int v14 = sub_10000A19C(a1, *(void **)(a2 + 88));
  id v15 = qword_100A19F00;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    int v17 = *(unsigned __int8 *)(a2 + 28);
    *(_DWORD *)buf = 138544386;
    id v30 = v11;
    __int16 v31 = 1024;
    BOOL v32 = v13 == 8;
    __int16 v33 = 1024;
    int v34 = a6;
    __int16 v35 = 1024;
    int v36 = v17;
    __int16 v37 = 1024;
    int v38 = v14;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "getReadyForTCC %{public}@, appIsBackgroundRunning: %d, isBeingRestored: %d, isApp : %d, appAuthorizationHasBeenChecked: %d", buf, 0x24u);
  }
  if (((a5 | v14) & 1) == 0 && v13 == 8 && (*(unsigned char *)(a2 + 28) || a6))
  {
    unint64_t v23 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(unsigned __int8 *)(a2 + 24);
      *(_DWORD *)buf = 138543618;
      id v30 = v11;
      __int16 v31 = 1024;
      BOOL v32 = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Add %{public}@ to tccPendingBundleList, session support backgrounding %d", buf, 0x12u);
    }
    [*(id *)(a1 + 352) addObject:v11];
    if (*(unsigned char *)(a2 + 24) && !*(void *)(a1 + 360))
    {
      uint64_t v25 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Create FBSDisplayLayoutMonitor", buf, 2u);
      }
      v28[0] = _NSConcreteStackBlock;
      v28[1] = 3221225472;
      v28[2] = sub_1002F4088;
      v28[3] = &unk_1009A4C80;
      v28[4] = a1;
      id v26 = [objc_alloc((Class)FBSDisplayLayoutMonitor) initWithDisplayType:0 handler:v28];
      uint64_t v27 = *(void **)(a1 + 360);
      *(void *)(a1 + 360) = v26;
    }
  }
  else
  {
    int v18 = *(unsigned __int8 *)(a2 + 129);
    int v19 = sub_100055BEC(v16, a2);
    if (v18 == 32) {
      int v20 = 1;
    }
    else {
      int v20 = a5;
    }
    uint64_t v21 = (v19 | v20) ^ 1u;
    unint64_t v22 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543618;
      id v30 = v11;
      __int16 v31 = 1024;
      BOOL v32 = v21;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Session \"%{public}@\" tccRequired : %d", buf, 0x12u);
    }
    *(unsigned char *)(a2 + 38) = 1;
    (*(void (**)(void, uint64_t))(**(void **)(a2 + 120) + 264))(*(void *)(a2 + 120), v21);
  }
}

void sub_10000AD90(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000ADAC(uint64_t a1, unint64_t a2, uint64_t a3)
{
  int v3 = a3;
  id v4 = *(void **)(a1 + 232);
  if (!v4) {
    goto LABEL_54;
  }
  BOOL v7 = (void *)(a1 + 232);
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      BOOL v7 = v4;
    }
    id v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 == (void *)(a1 + 232) || v7[4] > a2)
  {
LABEL_54:
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_100755574();
    }
    return;
  }
  (*(void (**)(void, uint64_t))(*(void *)v7[5] + 24))(v7[5], a3);
  if (v3 == 16 || v3 == 8) {
    *(unsigned char *)(v7[5] + 28) = 1;
  }
  if (v3 == 16)
  {
    uint64_t v11 = sub_100052E70();
    (*(void (**)(uint64_t, unint64_t))(*(void *)v11 + 104))(v11, a2);
    *(void *)__p = 0;
    sub_100026C30((uint64_t)__p);
    uint64_t v12 = *(__int16 *)&__p[4];
    uint64_t v13 = v7[5];
    *(void *)(v13 + 8) = *(int *)__p;
    *(void *)(v13 + 16) = v12;
  }
  sub_10003AE4C(v7[4], (uint64_t)__p);
  if (v52 >= 0) {
    int v14 = __p;
  }
  else {
    int v14 = *(unsigned char **)__p;
  }
  id v15 = +[NSString stringWithUTF8String:v14];
  if (SHIBYTE(v52) < 0) {
    operator delete(*(void **)__p);
  }
  BOOL v16 = (os_log_t *)&qword_100A19F00;
  int v17 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__p = 138543618;
    *(void *)&__p[4] = v15;
    *(_WORD *)&__p[12] = 1024;
    *(_DWORD *)&__p[14] = v3;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "AppSession state changed for %{public}@ to state %d", __p, 0x12u);
  }
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v39 = a1;
  id obj = *(id *)(a1 + 352);
  __int16 v43 = v15;
  id v18 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
  if (!v18) {
    goto LABEL_51;
  }
  uint64_t v19 = *(void *)v47;
  int v41 = v3;
  uint64_t v40 = *(void *)v47;
  while (2)
  {
    for (xpc_object_t i = 0; i != v18; xpc_object_t i = (char *)i + 1)
    {
      if (*(void *)v47 != v19) {
        objc_enumerationMutation(obj);
      }
      unsigned int v21 = [*(id *)(*((void *)&v46 + 1) + 8 * i) isEqualToString:v15] ^ 1;
      if (v3 != 16) {
        LOBYTE(v21) = 1;
      }
      if (v21)
      {
        os_log_t v27 = *v16;
        if (!os_log_type_enabled(*v16, OS_LOG_TYPE_DEFAULT)) {
          continue;
        }
        *(_DWORD *)__p = 138543362;
        *(void *)&__p[4] = v15;
        uint64_t v28 = v27;
        uint64_t v29 = "AppSession not found in list  %{public}@.";
        goto LABEL_44;
      }
      int v22 = (*(uint64_t (**)(void))(*(void *)v7[5] + 16))(v7[5]);
      uint64_t v23 = v7[5];
      if (v22)
      {
        int v24 = 0;
        BOOL v25 = 0;
        BOOL v26 = 0;
      }
      else
      {
        int v24 = sub_1000536B4(v7[5]);
        uint64_t v23 = v7[5];
        BOOL v25 = *(unsigned char *)(v23 + 505) != 0;
        BOOL v26 = *(unsigned char *)(v23 + 506) != 0;
      }
      id v30 = v16;
      __int16 v31 = *v16;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v32 = *(void *)(v23 + 120) != 0;
        *(_DWORD *)__p = 138544386;
        *(void *)&__p[4] = v43;
        *(_WORD *)&__p[12] = 1024;
        *(_DWORD *)&__p[14] = v32;
        __int16 v51 = 1024;
        int v52 = v24;
        __int16 v53 = 1024;
        BOOL v54 = v25;
        __int16 v55 = 1024;
        BOOL v56 = v26;
        _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "TCC pending for %{public}@. Remove from tccPendingBundleList, sessionIsLive %d isDeviceAccessSession:%d isDeviceAccessMediaExtensionSession:%d isDeviceAccessPerAccessoryExtensionSession:%d", __p, 0x24u);
        uint64_t v23 = v7[5];
      }
      uint64_t v33 = *(void *)(v23 + 120);
      int v3 = v41;
      BOOL v16 = v30;
      if (v33)
      {
        id v15 = v43;
        id v35 = [*(id *)(v39 + 352) removeObject:v43];
        uint64_t v36 = v7[5];
        *(unsigned char *)(v36 + 38) = 1;
        uint64_t v37 = sub_100055BEC((uint64_t)v35, v36) ^ 1;
        int v38 = *v30;
        if (os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)__p = 67109378;
          *(_DWORD *)&__p[4] = v37;
          *(_WORD *)&__p[8] = 2114;
          *(void *)&__p[10] = v43;
          _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "Calling readyForTCC with %d for %{public}@", __p, 0x12u);
        }
        (*(void (**)(void, uint64_t))(**(void **)(v7[5] + 120) + 264))(*(void *)(v7[5] + 120), v37);
        goto LABEL_51;
      }
      os_log_t v34 = *v30;
      id v15 = v43;
      uint64_t v19 = v40;
      if (os_log_type_enabled(*v30, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)__p = 138543362;
        *(void *)&__p[4] = v43;
        uint64_t v28 = v34;
        uint64_t v29 = "%{public}@ not alive";
LABEL_44:
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v29, __p, 0xCu);
        continue;
      }
    }
    id v18 = [obj countByEnumeratingWithState:&v46 objects:v57 count:16];
    if (v18) {
      continue;
    }
    break;
  }
LABEL_51:

  v44[0] = _NSConcreteStackBlock;
  v44[1] = 3221225472;
  v44[2] = sub_1000099BC;
  v44[3] = &unk_1009A4CC8;
  v44[4] = a2;
  char v45 = v3;
  sub_1000098F0((os_unfair_lock_s *)(v39 + 192), v44);
}

void sub_10000B334(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000B38C()
{
  pthread_setname_np("StackLoop");
  if (byte_100A00170)
  {
    v3.tv_sec = 0;
    v3.tv_nsec = 0;
    do
    {
      pthread_mutex_lock(&stru_100A001B0);
      unsigned int v0 = dword_100A00178;
      if (dword_100A00178) {
        BOOL v1 = byte_100A00208 == 0;
      }
      else {
        BOOL v1 = 0;
      }
      if (v1)
      {
        do
        {
          v3.tv_sec = v0 / 0x3E8uLL;
          v3.tv_nsec = 1000000 * (v0 % 0x3E8);
          if (pthread_cond_timedwait_relative_np(&stru_100A00180, &stru_100A001B0, &v3) == 60) {
            break;
          }
          unsigned int v0 = dword_100A00178;
          if (!dword_100A00178) {
            break;
          }
        }
        while (!byte_100A00208);
      }
      dword_100A00178 = -1;
      pthread_mutex_unlock(&stru_100A001B0);
      sub_100023344();
      sub_100026304();
      sub_1000232E0();
    }
    while (byte_100A00170);
  }
  return 0;
}

void sub_10000B498(uint64_t a1, void *a2, void *a3)
{
  id v6 = a2;
  id v7 = a3;
  unsigned __int8 v8 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v8 & 1) == 0)
  {
    BOOL v9 = qword_100A19FE0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D408(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  if (v6)
  {
    if (v7)
    {
      uint64_t DataValue = IOHIDEventGetDataValue();
      id v18 = [v6 integerValueForField:65539];
      if (DataValue && (unint64_t v19 = (unint64_t)v18) != 0)
      {
        uint64_t v20 = sub_100017768();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v20 + 160))(v20))
        {
          unsigned int v21 = qword_100A19FE0;
          if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
          {
            int v22 = sub_1003C29D0((unsigned __int8 *)DataValue, v19);
            *(_DWORD *)buf = 138412290;
            *(void *)&uint8_t buf[4] = v22;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "handleHIDEvent:forService: received: %@", buf, 0xCu);
          }
        }
        memset(v58, 0, sizeof(v58));
        long long v57 = 0u;
        unsigned __int8 v55 = *(unsigned char *)DataValue;
        unint64_t v23 = *(void *)(DataValue + 1);
        unint64_t v56 = v23;
        if (v55 != 225)
        {
          if (v55 == 227)
          {
            if (v19 > 0x1A)
            {
              __int16 v43 = *(_WORD *)(DataValue + 25);
              long long v57 = *(_OWORD *)(DataValue + 9);
              *(_WORD *)v58 = v43;
              if (HIBYTE(v57))
              {
                unsigned int v44 = qword_100A19FE0;
                if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 67110656;
                  *(_DWORD *)&uint8_t buf[4] = WORD6(v57);
                  *(_WORD *)&buf[8] = 1024;
                  *(_DWORD *)&buf[10] = SBYTE14(v57);
                  *(_WORD *)&buf[14] = 1024;
                  *(_DWORD *)&buf[16] = SHIBYTE(v57);
                  *(_WORD *)&buf[20] = 1024;
                  *(_DWORD *)&buf[22] = v58[0];
                  *(_WORD *)&buf[26] = 1024;
                  *(_DWORD *)&buf[28] = 0;
                  LOWORD(v70) = 1024;
                  *(_DWORD *)((char *)&v70 + 2) = SBYTE4(v57);
                  WORD3(v70) = 1024;
                  DWORD2(v70) = v58[1];
                  _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "handleHIDEvent (rssiDetectReport) onSendRSSI: notifying listeners. Connection Handle 0x%04X RSSI avg:%d max:%d median:%d var:%d orig:%d state:%d", buf, 0x2Cu);
                }
                v59[0] = _NSConcreteStackBlock;
                v59[1] = 3221225472;
                v59[2] = sub_1003C2CF0;
                v59[3] = &unk_1009AB500;
                v59[4] = 0;
                __int16 v60 = 31;
                int v61 = HIDWORD(v57);
                char v62 = v58[0];
                char v63 = 0;
                __int16 v64 = 0;
                char v65 = 0;
                char v66 = v58[1];
                uint64_t v67 = *(void *)((char *)&v57 + 4);
                int v68 = 0;
                sub_1003C2BC4((os_unfair_lock_s *)a1, v59);
              }
              else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
              {
                sub_10075D3D4();
              }
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
            {
              sub_10075D364();
            }
          }
          else if (v55 == 226)
          {
            if (v19 > 0x19)
            {
              long long v45 = *(_OWORD *)(DataValue + 9);
              v58[0] = *(unsigned char *)(DataValue + 25);
              long long v57 = v45;
              long long v46 = qword_100A19FE0;
              if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
              {
                long long v47 = CUPrintAddress();
                long long v48 = CUPrintHex();
                *(_DWORD *)buf = 138412802;
                *(void *)&uint8_t buf[4] = v47;
                *(_WORD *)&buf[12] = 2112;
                *(void *)&buf[14] = v48;
                *(_WORD *)&buf[22] = 1024;
                *(_DWORD *)&buf[24] = SBYTE10(v57);
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "handleHIDEvent:forService Nearby Action Wake Event : Address [%@] AuthTag [%@] RSSI %d", buf, 0x1Cu);
              }
              long long v49 = +[NSMutableData data];
              [v49 appendBytes:(char *)&v57 + 11 length:1];
              [v49 appendBytes:(char *)&v57 + 12 length:1];
              [v49 appendBytes:(char *)&v57 + 13 length:3];
              [v49 appendBytes:v58 length:1];
              if (qword_1009F8248 != -1) {
                dispatch_once(&qword_1009F8248, &stru_1009AB6C0);
              }
              uint64_t v50 = sub_10065F458((uint64_t)off_1009F8240, 0, 26, v49);
              buf[31] = [v50 length];
              BYTE6(v70) = BYTE10(v57);
              BYTE7(v70) = 40;
              *((void *)&v70 + 1) = 0;
              memset(buf, 0, 31);
              LODWORD(v70) = DWORD1(v57);
              WORD2(v70) = WORD4(v57);
              id v51 = v50;
              memcpy(buf, [v51 bytes], (size_t)[v51 length]);
              v95[0] = _NSConcreteStackBlock;
              v95[1] = 3221225472;
              long long v96 = *(_OWORD *)buf;
              v95[2] = sub_1003C2C90;
              v95[3] = &unk_1009AB4C0;
              v95[4] = 0;
              long long v97 = *(_OWORD *)&buf[16];
              long long v98 = v70;
              sub_1003C2BC4((os_unfair_lock_s *)a1, v95);
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
            {
              sub_10075D250();
            }
          }
          goto LABEL_23;
        }
        if (v19 <= 0x44)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
            sub_10075D2C0();
          }
          goto LABEL_23;
        }
        long long v25 = *(_OWORD *)(DataValue + 9);
        long long v26 = *(_OWORD *)(DataValue + 25);
        long long v27 = *(_OWORD *)(DataValue + 41);
        *(_OWORD *)&v58[28] = *(_OWORD *)(DataValue + 53);
        *(_OWORD *)&v58[16] = v27;
        *(_OWORD *)v58 = v26;
        long long v57 = v25;
        uint64_t v28 = qword_100A19FE0;
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEBUG))
        {
          *(_DWORD *)buf = 134222592;
          *(double *)&uint8_t buf[4] = (double)v23 / 1000000.0;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v57;
          *(_WORD *)&buf[18] = 1024;
          *(_DWORD *)&buf[20] = DWORD1(v57);
          *(_WORD *)&buf[24] = 1024;
          *(_DWORD *)&buf[26] = BYTE8(v57);
          *(_WORD *)&buf[30] = 1024;
          LODWORD(v70) = BYTE9(v57);
          WORD2(v70) = 1024;
          *(_DWORD *)((char *)&v70 + 6) = BYTE10(v57);
          WORD5(v70) = 1024;
          HIDWORD(v70) = BYTE11(v57);
          __int16 v71 = 1024;
          int v72 = BYTE12(v57);
          __int16 v73 = 1024;
          int v74 = BYTE13(v57);
          __int16 v75 = 1024;
          int v76 = BYTE14(v57);
          __int16 v77 = 1024;
          int v78 = HIBYTE(v57);
          __int16 v79 = 1024;
          int v80 = v58[0];
          __int16 v81 = 1024;
          int v82 = v58[1];
          __int16 v83 = 1024;
          int v84 = v58[2];
          __int16 v85 = 1024;
          int v86 = v58[3];
          __int16 v87 = 1024;
          int v88 = v58[4];
          __int16 v89 = 1024;
          int v90 = v58[5];
          __int16 v91 = 1024;
          int v92 = v58[6];
          __int16 v93 = 1024;
          int v94 = v58[7];
          _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "handleHIDEvent (Telemetry) time %.3f intervalSeconds %u spmiXactions %u hist %u:%u %u:%u %u:%u %u:%u %u:%u %u:%u %u:%u %u:%u", buf, 0x78u);
        }
        unsigned int v29 = v57;
        if (v57)
        {
          for (xpc_object_t i = *(float **)(a1 + 144); i; xpc_object_t i = *(float **)i)
          {
            if (!*((unsigned char *)i + 28))
            {
              float v31 = i[5];
              if (v31 > i[8]) {
                i[5] = v31 + -1.0;
              }
            }
          }
          uint64_t v32 = 0;
          float v33 = (float)v29;
          while (1)
          {
            unsigned __int8 v54 = v58[v32 - 8];
            if (!v54) {
              goto LABEL_23;
            }
            if (sub_10026D430((void *)(a1 + 128), &v54))
            {
              *(void *)buf = &v54;
              if (*((unsigned char *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 28))
              {
                uint64_t v34 = qword_100A19FE0;
                if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 67109120;
                  *(_DWORD *)&uint8_t buf[4] = v54;
                  id v35 = v34;
                  uint64_t v36 = "handleHIDEvent (Telemetry) type %d previous RSSI threshold not yet committed, continue";
                  uint32_t v37 = 8;
LABEL_59:
                  _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, v36, buf, v37);
                }
              }
              else
              {
                *(void *)buf = &v54;
                float v38 = *((float *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 5);
                LOBYTE(v3) = v58[v32 - 7];
                *(void *)buf = &v54;
                uint64_t v39 = (float *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf);
                float v3 = (float)LODWORD(v3) / v33;
                if ((float)(v3 + -10.0) <= 0.0) {
                  float v40 = v38 + (float)((float)(v3 + -10.0) * 0.25);
                }
                else {
                  float v40 = v38 + (float)(v3 + -10.0);
                }
                if (v40 < v39[8])
                {
                  *(void *)buf = &v54;
                  float v40 = *((float *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 8);
                }
                *(void *)buf = &v54;
                if (v40 > *((float *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 9))
                {
                  *(void *)buf = &v54;
                  float v40 = *((float *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 9);
                }
                int v41 = qword_100A19FE0;
                if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134218496;
                  *(double *)&uint8_t buf[4] = v3;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v54;
                  *(_WORD *)&buf[18] = 2048;
                  *(double *)&buf[20] = v40;
                  _os_log_debug_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEBUG, "handleHIDEvent (Telemetry) msgPerSecond %.3f, type %d change RSSI threshold %.1f", buf, 0x1Cu);
                }
                *(void *)buf = &v54;
                *((float *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 5) = v40;
                *(void *)buf = &v54;
                *((float *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 6) = v3;
                *(void *)buf = &v54;
                *((unsigned char *)sub_1003C8040(a1 + 128, &v54, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 28) = 1;
                uint64_t v42 = qword_100A19FE0;
                if (v3 > 20.0)
                {
                  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)buf = 134218240;
                    *(double *)&uint8_t buf[4] = v3;
                    *(_WORD *)&buf[12] = 1024;
                    *(_DWORD *)&buf[14] = v54;
                    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "handleHIDEvent (Telemetry) msgPerSecond %.3f, type %d, notify immediately!", buf, 0x12u);
                  }
                  v52[0] = _NSConcreteStackBlock;
                  v52[1] = 3221225472;
                  v52[2] = sub_1003C2CC0;
                  v52[3] = &unk_1009AB4E0;
                  unsigned __int8 v53 = v54;
                  sub_1003C2BC4((os_unfair_lock_s *)a1, v52);
                  goto LABEL_60;
                }
                if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEBUG))
                {
                  *(_DWORD *)buf = 134218240;
                  *(double *)&uint8_t buf[4] = v3;
                  *(_WORD *)&buf[12] = 1024;
                  *(_DWORD *)&buf[14] = v54;
                  id v35 = v42;
                  uint64_t v36 = "handleHIDEvent (Telemetry) msgPerSecond %.3f, type %d, not urgent";
                  uint32_t v37 = 18;
                  goto LABEL_59;
                }
              }
            }
LABEL_60:
            v32 += 2;
            if (v32 == 32) {
              goto LABEL_23;
            }
          }
        }
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
          sub_10075D330();
        }
      }
      else
      {
        int v24 = qword_100A19FE0;
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "handleHIDEvent:forService: Empty Packet Received", buf, 2u);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
    {
      sub_10075D21C();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
  {
    sub_10075D1E8();
  }
LABEL_23:
}

void sub_10000C110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000C178(uint64_t a1)
{
  *(void *)a1 = &off_1009A32F8;
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2) {
    sub_100009560(v2);
  }
  if (qword_1009FB1A0 != -1) {
    dispatch_once(&qword_1009FB1A0, &stru_1009A3338);
  }
  sub_1000525A4(qword_1009FB198, *(_DWORD *)(a1 + 40));

  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }

  return a1;
}

void sub_10000C22C(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*(void **)(v1 + 56));
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10000C268(uint64_t a1, uint64_t *a2, uint64_t *a3, _DWORD *a4)
{
  if (*((char *)a2 + 23) >= 0) {
    unsigned __int8 v8 = a2;
  }
  else {
    unsigned __int8 v8 = (uint64_t *)*a2;
  }
  BOOL v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = (uint64_t *)*a3;
    }
    uint64_t v12 = +[NSString stringWithUTF8String:v11];
    uint64_t v13 = [v10 objectForKey:v12];

    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    if (isKindOfClass) {
      *a4 = [v13 intValue];
    }
  }
  else
  {
    char isKindOfClass = 0;
  }

  return isKindOfClass & 1;
}

void sub_10000C37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000C3B4(uint64_t a1, uint64_t *a2, uint64_t *a3, char *a4)
{
  if (*((char *)a2 + 23) >= 0) {
    unsigned __int8 v8 = a2;
  }
  else {
    unsigned __int8 v8 = (uint64_t *)*a2;
  }
  BOOL v9 = +[NSString stringWithUTF8String:v8];
  uint64_t v10 = (void *)CFPreferencesCopyAppValue(v9, @"com.apple.MobileBluetooth.debug");

  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v11 = a3;
    }
    else {
      uint64_t v11 = (uint64_t *)*a3;
    }
    uint64_t v12 = +[NSString stringWithUTF8String:v11];
    uint64_t v13 = [v10 objectForKey:v12];

    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v14 = v13;
      if (([v14 isEqualToString:@"TRUE"] & 1) != 0
        || ([v14 isEqualToString:@"YES"] & 1) != 0)
      {
        char v15 = 1;
LABEL_12:
        *a4 = v15;

LABEL_16:
        uint64_t v16 = 1;
LABEL_22:

        goto LABEL_23;
      }
      if (([v14 isEqualToString:@"FALSE"] & 1) != 0
        || ([v14 isEqualToString:@"NO"] & 1) != 0)
      {
        char v15 = 0;
        goto LABEL_12;
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        *a4 = [v13 BOOLValue];
        goto LABEL_16;
      }
    }
    uint64_t v16 = 0;
    goto LABEL_22;
  }
  uint64_t v16 = 0;
LABEL_23:

  return v16;
}

void sub_10000C558(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000C5A0(uint64_t a1, void *a2)
{
  float v3 = qword_100A19E58;
  if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Received MWS Channel Parameters", buf, 2u);
  }
  int v10 = 0;
  *(void *)buf = 0;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kMessageArgs");
  if (value)
  {
    uint64_t v5 = value;
    buf[0] = xpc_dictionary_get_uint64(value, "kWCMBTSetMWSChannelParameters_Enable");
    *(_WORD *)&buf[2] = xpc_dictionary_get_uint64(v5, "kWCMBTSetMWSChannelParameters_RxCenterFrequency");
    *(_WORD *)&uint8_t buf[4] = xpc_dictionary_get_uint64(v5, "kWCMBTSetMWSChannelParameters_TxCenterFrequency");
    *(_WORD *)&buf[6] = xpc_dictionary_get_uint64(v5, "kWCMBTSetMWSChannelParameters_RxChannelBandwidth");
    LOWORD(v10) = xpc_dictionary_get_uint64(v5, "kWCMBTSetMWSChannelParameters_TxChannelBandwidth");
    BYTE2(v10) = xpc_dictionary_get_uint64(v5, "kWCMBTSetMWSChannelParameters_Type");
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009C11E8);
    }
    sub_1000116B4((uint64_t)off_1009F8068, 12, (uint64_t)buf);
  }
  else
  {
    id v6 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned __int8 v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Invalid argument for Channel Parameters", v8, 2u);
    }
  }
  return 1;
}

void sub_10000C728(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if ((unint64_t)sub_100045F00(*(void *)(a3 + 8) + 48) >= 0x1D)
  {
    id v6 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009BF828);
      }
      sub_100014B58((uint64_t)off_1009F7ED8, a2, 0, 1u, 0, 0, (unsigned __int8 *)v18);
      sub_100031234((const unsigned __int8 *)v18);
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      sub_10004BDF8();
      if (v17 >= 0) {
        unsigned __int8 v8 = __p;
      }
      else {
        unsigned __int8 v8 = (void **)__p[0];
      }
      buf[0] = 138412546;
      *(void *)&buf[1] = v7;
      __int16 v14 = 2080;
      char v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "decryptProximityPairingPayload device:%@ address:%s", (uint8_t *)buf, 0x16u);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v9 = sub_10004A6E4(*(void *)(a3 + 8) + 48);
    BOOL v10 = *(_WORD *)v9 == 76 && *(unsigned char *)(v9 + 2) == 7;
    if (v10 && *(unsigned char *)(v9 + 4) == 1)
    {
      v18[0] = 0;
      v18[1] = 0;
      if (sub_1006F47DC(a1, a2, (uint64_t)v18))
      {
        sub_100045F00(*(void *)(a3 + 8) + 48);
        operator new[]();
      }
      uint64_t v11 = qword_100A19ED8;
      if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_INFO))
      {
        uint64_t v12 = sub_1006AD3F0();
        LODWORD(__p[0]) = 138543362;
        *(void **)((char *)__p + 4) = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "No encryption key for the device %{public}@", (uint8_t *)__p, 0xCu);
      }
    }
  }
}

void sub_10000CFA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10000D00C(uint64_t a1, unint64_t a2, int a3, void *a4, uint64_t a5, long long *a6, uint64_t a7, void *a8)
{
  unint64_t v53 = a2;
  id v15 = a4;
  id v16 = a8;
  *(void *)src = 0;
  uint64_t v67 = 0;
  char v17 = (const unsigned __int8 *)sub_1000305AC(src, v15);
  if (!uuid_is_null(v17))
  {
    v52[0] = 0;
    v52[1] = 0;
    sub_10003AED0((uint64_t)v52, a1 + 120);
    if (a1 + 392 == sub_1000308C0(a1 + 384, src) && a3)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        sub_100031234(src);
        objc_claimAutoreleasedReturnValue();
        sub_100790298();
      }
      sub_10003AFE8((uint64_t)v52);
      v56[0] = _NSConcreteStackBlock;
      v56[1] = 3321888768;
      v56[2] = sub_100687BF0;
      v56[3] = &unk_1009BDAB8;
      uuid_copy(v60, src);
      long long v20 = a6[1];
      long long v57 = *a6;
      long long v58 = v20;
      uint64_t v19 = 312;
      int v59 = 312;
      sub_10067762C((os_unfair_lock_s *)a1, v56);
      goto LABEL_74;
    }
    sub_10003AFE8((uint64_t)v52);
    if (!sub_100052EFC(a1, a2, src))
    {
      unsigned int v21 = qword_100A19EF8;
      if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR))
      {
        int v22 = sub_100031234(src);
        sub_1000069B0((uint64_t)v16, v22, (uint64_t)v55, v21);
      }
    }
    unint64_t v23 = (uint64_t **)(a1 + 688);
    if (a3)
    {
      unsigned __int8 v54 = &v53;
      int v24 = sub_1006AADF4((uint64_t)v23, &v53, (uint64_t)&unk_1007BE9D0, &v54);
      uuid_copy((unsigned __int8 *)v24 + 40, src);
      unsigned __int8 v54 = &v53;
      *((_WORD *)sub_1004BEBFC((uint64_t **)(a1 + 712), &v53, (uint64_t)&unk_1007BE9D0, &v54) + 20) = a5;
      uint64_t v25 = sub_10003FB34();
      long long v26 = *(void **)(a1 + 712);
      if (v26 != (void *)(a1 + 720))
      {
        do
        {
          if (*((unsigned __int16 *)v26 + 20) >= (unsigned __int16)a5) {
            a5 = (unsigned __int16)a5;
          }
          else {
            a5 = *((unsigned __int16 *)v26 + 20);
          }
          long long v27 = (void *)v26[1];
          if (v27)
          {
            do
            {
              uint64_t v28 = v27;
              long long v27 = (void *)*v27;
            }
            while (v27);
          }
          else
          {
            do
            {
              uint64_t v28 = (void *)v26[2];
              BOOL v29 = *v28 == (void)v26;
              long long v26 = v28;
            }
            while (!v29);
          }
          long long v26 = v28;
        }
        while (v28 != (void *)(a1 + 720));
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v25 + 1784))(v25, 1, a5, a7);
      goto LABEL_73;
    }
    id v30 = *(void **)(a1 + 696);
    if (!v30) {
      goto LABEL_36;
    }
    float v31 = (uint64_t *)(a1 + 696);
    do
    {
      unint64_t v32 = v30[4];
      BOOL v33 = v32 >= a2;
      if (v32 >= a2) {
        uint64_t v34 = v30;
      }
      else {
        uint64_t v34 = v30 + 1;
      }
      if (v33) {
        float v31 = v30;
      }
      id v30 = (void *)*v34;
    }
    while (*v34);
    if (v31 != (uint64_t *)(a1 + 696) && v31[4] <= a2)
    {
      sub_10004D3B8(v23, v31);
      operator delete(v31);
      int v35 = 1;
    }
    else
    {
LABEL_36:
      int v35 = 0;
    }
    uint64_t v36 = (uint64_t **)(a1 + 712);
    uint32_t v37 = (uint64_t *)(a1 + 720);
    float v38 = *(void **)(a1 + 720);
    if (v38)
    {
      uint64_t v39 = (uint64_t *)(a1 + 720);
      do
      {
        unint64_t v40 = v38[4];
        BOOL v41 = v40 >= a2;
        if (v40 >= a2) {
          uint64_t v42 = v38;
        }
        else {
          uint64_t v42 = v38 + 1;
        }
        if (v41) {
          uint64_t v39 = v38;
        }
        float v38 = (void *)*v42;
      }
      while (*v42);
      if (v39 != v37 && v39[4] <= a2)
      {
        sub_10004D3B8(v36, v39);
        operator delete(v39);
      }
    }
    __int16 v43 = *v36;
    if (*v36 == v37)
    {
      if (!v35)
      {
LABEL_73:
        uint64_t v19 = 0;
LABEL_74:
        sub_10003AFB4((uint64_t)v52);
        goto LABEL_75;
      }
      uint64_t v44 = sub_10003FB34();
      long long v48 = *v36;
      if (*v36 != v37)
      {
        do
        {
          if (*((unsigned __int16 *)v48 + 20) >= (unsigned __int16)a5) {
            a5 = (unsigned __int16)a5;
          }
          else {
            a5 = *((unsigned __int16 *)v48 + 20);
          }
          long long v49 = (uint64_t *)v48[1];
          if (v49)
          {
            do
            {
              uint64_t v50 = v49;
              long long v49 = (uint64_t *)*v49;
            }
            while (v49);
          }
          else
          {
            do
            {
              uint64_t v50 = (uint64_t *)v48[2];
              BOOL v29 = *v50 == (void)v48;
              long long v48 = v50;
            }
            while (!v29);
          }
          long long v48 = v50;
        }
        while (v50 != v37);
      }
    }
    else
    {
      uint64_t v44 = sub_10003FB34();
      a5 = *((unsigned __int16 *)v43 + 20);
      long long v45 = *v36;
      if (*v36 != v37)
      {
        do
        {
          if (*((unsigned __int16 *)v45 + 20) >= (unsigned __int16)a5) {
            a5 = (unsigned __int16)a5;
          }
          else {
            a5 = *((unsigned __int16 *)v45 + 20);
          }
          long long v46 = (uint64_t *)v45[1];
          if (v46)
          {
            do
            {
              long long v47 = v46;
              long long v46 = (uint64_t *)*v46;
            }
            while (v46);
          }
          else
          {
            do
            {
              long long v47 = (uint64_t *)v45[2];
              BOOL v29 = *v47 == (void)v45;
              long long v45 = v47;
            }
            while (!v29);
          }
          long long v45 = v47;
        }
        while (v47 != v37);
      }
    }
    (*(void (**)(uint64_t, BOOL, uint64_t, uint64_t))(*(void *)v44 + 1784))(v44, v43 != v37, a5, a7);
    goto LABEL_73;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EF8, OS_LOG_TYPE_ERROR)) {
    sub_1007903B8();
  }
  v61[0] = _NSConcreteStackBlock;
  v61[1] = 3321888768;
  v61[2] = sub_100687B4C;
  v61[3] = &unk_1009BDAB8;
  uuid_copy(v65, src);
  long long v18 = a6[1];
  long long v62 = *a6;
  long long v63 = v18;
  uint64_t v19 = 7;
  int v64 = 7;
  sub_10067762C((os_unfair_lock_s *)a1, v61);
LABEL_75:

  return v19;
}

void sub_10000D55C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_10000D9A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000D9F0(uint64_t a1)
{
  uint64_t v2 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKey:*(void *)(a1 + 40)];
  float v3 = v2;
  if (v2)
  {
    if ([v2 isApp])
    {
      if ([v3 isAlive])
      {
        if ([v3 state] == 1) {
          unsigned __int8 v4 = [[*(id *)(a1 + 32) translateApplicationState:objc_msgSend(*(id *)(*(void *)(a1 + 32) + 48), "applicationStateForApplication:", *(void *)(a1 + 40))]
        }
        else {
          unsigned __int8 v4 = [v3 state];
        }
        *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v4;
        goto LABEL_13;
      }
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
      char v6 = 2;
    }
    else
    {
      uint64_t v5 = *(void *)(*(void *)(a1 + 48) + 8);
      char v6 = 32;
    }
    *(unsigned char *)(v5 + 24) = v6;
    goto LABEL_13;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100799338((uint64_t)[*(id *)(a1 + 40) UTF8String], (uint64_t)&v7);
  }
LABEL_13:
}

void sub_10000DB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000DB50(uint64_t a1, uint64_t a2, void *a3, int a4)
{
  uint64_t v9 = a2;
  id v6 = a3;
  switch(a4)
  {
    case 3:
      operator new();
    case 1:
      operator new();
    case 0:
      operator new();
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_10003AE4C(a2, (uint64_t)v8);
    sub_100754C44();
  }
  if (a4 == 2 && os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
    sub_100754C10();
  }

  return 1;
}

void sub_10000DEE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  _Unwind_Resume(a1);
}

void sub_10000DFA0(uint64_t a1, BOOL a2)
{
  unsigned __int8 v4 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = &stru_1009C1AC8;

  uint64_t v5 = objc_opt_new();
  id v6 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = v5;

  if (a2 && sub_1005A164C() == 2)
  {
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009B7BE8);
    }
    if (sub_100028CB4((uint64_t)off_1009F8740) == 1)
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
      }
      if (!*((unsigned char *)off_1009F8780 + 179))
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        uint64_t v7 = sub_1006CC390(off_1009F7ED8, 0);
        unsigned __int8 v8 = *(void **)(a1 + 120);
        *(void *)(a1 + 120) = v7;

        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
        }
        uint64_t v9 = off_1009F7ED8;
        unsigned int v10 = sub_1006C8B54((uint64_t)off_1009F7ED8, 0);
        uint64_t v11 = sub_1006C9D2C((uint64_t)v9, v10, 0);
        uint64_t v12 = *(void **)(a1 + 112);
        *(void *)(a1 + 112) = v11;
      }
    }
  }
  uint64_t v13 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(a1 + 96);
    v17[0] = 67109378;
    v17[1] = a2;
    __int16 v18 = 2112;
    uint64_t v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "ReadyForTCC. TCC required:%d %@", (uint8_t *)v17, 0x12u);
  }
  xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v15, "kCBMsgArgRequiresTCC", a2);
  xpc_dictionary_set_string(v15, "kCBMsgArgTCCLELocalizedCenterLabel", (const char *)[*(id *)(a1 + 112) UTF8String]);
  xpc_object_t v16 = sub_100056D28(*(void **)(a1 + 120));
  xpc_dictionary_set_value(v15, "kCBMsgArgTCCLEDevicesAroundDetails", v16);
  sub_1000173FC(a1, 3, v15, 1);
  if (v16) {
    CFRelease(v16);
  }
}

void sub_10000E230(uint64_t **a1, unint64_t a2, void *a3)
{
  unint64_t v16 = a2;
  id v4 = a3;
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, (uint64_t)(a1 + 1));
  __p = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  id v5 = v4;
  sub_10004191C(&__p, (char *)[v5 UTF8String]);
  uint64_t v6 = sub_10003156C((uint64_t)(a1 + 12), (const void **)&__p);
  uint64_t v7 = (uint64_t *)v6;
  if (a1 + 13 != (uint64_t **)v6)
  {
    sub_1000517A4(v6 + 56, &v16);
    if (!v7[9])
    {
      ((void (*)(uint64_t **, unint64_t))(*a1)[13])(a1, v16);
      sub_10004D3B8(a1 + 12, v7);
      sub_100051C18((uint64_t)(v7 + 4));
      operator delete(v7);
      uint64_t v9 = +[BTAppInteraction instance];
      if (v14 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      uint64_t v11 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", p_p, __p, v13, v14);
      [v9 unregisterApplication:v11];
    }
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)v15);
}

void sub_10000E3A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a15);

  _Unwind_Resume(a1);
}

void sub_10000E3F4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 16) || *(unsigned char *)(a1 + 18))
  {
    if (a2)
    {
      sub_10003AE4C(a2, (uint64_t)buf);
      if (v39 >= 0) {
        id v4 = buf;
      }
      else {
        id v4 = *(unsigned char **)buf;
      }
      int v22 = +[NSString stringWithUTF8String:v4];
      if (SHIBYTE(v39) < 0) {
        operator delete(*(void **)buf);
      }
      if (v22)
      {
        id v5 = [*(id *)(a1 + 48) objectForKeyedSubscript:];
        uint64_t v6 = [v5 allObjects];

        uint64_t v7 = qword_100A19FC0;
        if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(void *)(a1 + 48);
          *(_DWORD *)buf = 138543874;
          *(void *)&uint8_t buf[4] = v22;
          __int16 v37 = 2114;
          float v38 = v6;
          __int16 v39 = 2114;
          uint64_t v40 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "stopTrackingForSession: %{public}@ for tracking devices %{public}@ from requests %{public}@", buf, 0x20u);
        }
        long long v32 = 0u;
        long long v33 = 0u;
        long long v30 = 0u;
        long long v31 = 0u;
        id obj = v6;
        id v9 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
        if (v9)
        {
          uint64_t v24 = *(void *)v31;
          do
          {
            id v25 = v9;
            for (xpc_object_t i = 0; i != v25; xpc_object_t i = (char *)i + 1)
            {
              if (*(void *)v31 != v24) {
                objc_enumerationMutation(obj);
              }
              uint64_t v11 = *(void **)(*((void *)&v30 + 1) + 8 * i);
              long long v26 = 0u;
              long long v27 = 0u;
              long long v28 = 0u;
              long long v29 = 0u;
              uint64_t v12 = [v11 appleTypes:v22];
              uint64_t v13 = [v12 allObjects];

              id v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
              if (v14)
              {
                uint64_t v15 = *(void *)v27;
                do
                {
                  for (j = 0; j != v14; j = (char *)j + 1)
                  {
                    if (*(void *)v27 != v15) {
                      objc_enumerationMutation(v13);
                    }
                    char v17 = *(void **)(*((void *)&v26 + 1) + 8 * (void)j);
                    __int16 v18 = [v11 deviceUUID];
                    sub_1005D8C48(a1, a2, v18, [v17 intValue]);
                  }
                  id v14 = [v13 countByEnumeratingWithState:&v26 objects:v34 count:16];
                }
                while (v14);
              }
            }
            id v9 = [obj countByEnumeratingWithState:&v30 objects:v35 count:16];
          }
          while (v9);
        }

        uint64_t v19 = qword_100A19FC0;
        if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v20 = *(void *)(a1 + 48);
          unsigned int v21 = *(void **)(a1 + 56);
          *(_DWORD *)buf = 138543618;
          *(void *)&uint8_t buf[4] = v20;
          __int16 v37 = 2114;
          float v38 = v21;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Now tracking %{public}@ with devices %{public}@", buf, 0x16u);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR))
      {
        sub_1007820E4();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR))
    {
      sub_1007820B0();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19FC0, OS_LOG_TYPE_ERROR))
  {
    sub_10078207C();
  }
}

void sub_10000E7AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10000E83C(os_unfair_lock_s *a1, void *a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, (uint64_t)&a1[20]);
  uint64_t uint64 = xpc_dictionary_get_uint64(a2, "kMessageId");
  uint64_t v5 = uint64;
  switch(uint64)
  {
    case 0x578uLL:
    case 0x579uLL:
    case 0x57AuLL:
    case 0x581uLL:
      return sub_10003AFB4((uint64_t)v10);
    case 0x57BuLL:
    case 0x57CuLL:
    case 0x57DuLL:
    case 0x588uLL:
    case 0x58BuLL:
    case 0x58CuLL:
    case 0x595uLL:
    case 0x596uLL:
    case 0x597uLL:
      goto LABEL_6;
    case 0x57EuLL:
      sub_10073AD44(uint64, a2);
      break;
    case 0x57FuLL:
      sub_10073ADD0(uint64, a2);
      break;
    case 0x580uLL:
      sub_10073AED8(uint64, a2);
      break;
    case 0x582uLL:
      sub_10000C5A0(uint64, a2);
      break;
    case 0x583uLL:
      sub_10073B5AC(uint64, a2);
      break;
    case 0x584uLL:
      sub_10073B854(uint64, a2);
      break;
    case 0x585uLL:
      sub_10073BA40(uint64, a2);
      break;
    case 0x586uLL:
      sub_10073BAE8(uint64, a2);
      break;
    case 0x587uLL:
      xpc_dictionary_get_string(a2, "kMessageArgs");
      break;
    case 0x589uLL:
      sub_10073BB98((uint64_t)a1, a2);
      break;
    case 0x58AuLL:
      sub_10073BE20(uint64, a2);
      break;
    case 0x58DuLL:
      sub_10073BF24((uint64_t)a1, a2);
      break;
    case 0x58EuLL:
      sub_10073C204(uint64, a2);
      break;
    case 0x58FuLL:
      sub_10073B284(uint64, a2);
      break;
    case 0x590uLL:
      sub_10073C3C0(uint64, a2);
      break;
    case 0x591uLL:
      sub_10073B034(uint64, a2);
      break;
    case 0x592uLL:
      sub_10073CCF8((uint64_t)a1, a2);
      break;
    case 0x593uLL:
      unsigned __int8 v8 = xpc_dictionary_get_uint64(a2, "kMessageArgs");
      uint64_t v9 = sub_10003FB34();
      (*(void (**)(uint64_t, void))(*(void *)v9 + 1792))(v9, v8);
      break;
    case 0x594uLL:
      sub_10073CE34((uint64_t)a1, a2);
      break;
    case 0x598uLL:
      sub_10073D1E8((uint64_t)a1, a2);
      break;
    case 0x599uLL:
      sub_10073D740((uint64_t)a1, a2);
      break;
    case 0x59AuLL:
      sub_10000EDFC((uint64_t)a1, a2);
      break;
    case 0x59BuLL:
      sub_1000078E0((uint64_t)a1, a2);
      break;
    case 0x59CuLL:
      sub_10073CBA0(a1, a2);
      break;
    case 0x59DuLL:
      sub_10073C4E8(a1, a2);
      break;
    case 0x59EuLL:
      sub_10073CA48(a1, a2);
      break;
    case 0x59FuLL:
      sub_10073C798(a1, a2);
      break;
    case 0x5A0uLL:
      sub_10073C8F0(a1, a2);
      break;
    case 0x5A1uLL:
      sub_10073D878(a1, a2);
      break;
    case 0x5A2uLL:
      sub_10073C640(a1, a2);
      break;
    default:
      if (uint64 == 106)
      {
        sub_10073D040((uint64_t)a1, a2);
      }
      else if (uint64 == 107)
      {
        sub_100019D64((uint64_t)a1, a2);
      }
      else
      {
LABEL_6:
        uint64_t v7 = qword_100A19E58;
        if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 134217984;
          uint64_t v12 = v5;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Received unknown event %llu from WCM/UCM", buf, 0xCu);
        }
      }
      break;
  }
  return sub_10003AFB4((uint64_t)v10);
}

void sub_10000EB64(_Unwind_Exception *exception_object)
{
}

uint64_t sub_10000EB80(uint64_t a1)
{
  *(void *)a1 = off_1009ADE08;
  uint64_t v2 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = 0;

  float v3 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = 0;

  sub_10000EDA0(a1 + 160, *(void **)(a1 + 168));
  sub_10000EDA0(a1 + 136, *(void **)(a1 + 144));

  return a1;
}

uint64_t sub_10000EC28(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1009ADE08;
  *(void *)(a1 + 21) = 0;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_WORD *)(a1 + 44) = 1;
  *(void *)(a1 + 56) = 0;
  *(_WORD *)(a1 + 72) = 0;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_WORD *)(a1 + 128) = 257;
  *(void *)(a1 + 144) = 0;
  uint64_t v2 = a1 + 144;
  *(void *)(a1 + 136) = a1 + 144;
  uint64_t v3 = a1 + 136;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 168) = 0;
  uint64_t v4 = a1 + 168;
  *(void *)(a1 + 160) = a1 + 168;
  uint64_t v5 = a1 + 160;
  *(_WORD *)(a1 + 184) = 0;
  *(unsigned char *)(a1 + 186) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 208) = 0;
  uint64_t v6 = +[NSMutableArray array];
  uint64_t v7 = *(void **)(a1 + 112);
  *(void *)(a1 + 112) = v6;

  uint64_t v8 = +[NSMutableDictionary dictionary];
  uint64_t v9 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v8;

  sub_10000EDA0(v3, *(void **)(a1 + 144));
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 136) = v2;
  sub_10000EDA0(v5, *(void **)(a1 + 168));
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 160) = v4;
  return a1;
}

void sub_10000ED44(_Unwind_Exception *a1)
{
  sub_10000EDA0(v3, *(void **)(v1 + 168));
  sub_10000EDA0(v2, *(void **)(v1 + 144));

  _Unwind_Resume(a1);
}

void sub_10000EDA0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10000EDA0(a1, *a2);
    sub_10000EDA0(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_10000EDFC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kMessageArgs");
  if (value)
  {
    uint64_t v4 = value;
    int uint64 = xpc_dictionary_get_uint64(value, "kWCMAntennaRequestInterval");
    uint64_t v6 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "void BT::PurpleCoexManager::SetAntennaRequest(xpc_object_t)";
      __int16 v25 = 1024;
      int v26 = uint64;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s, AntennaRequestInterval = %d", buf, 0x12u);
    }
    BOOL v7 = xpc_dictionary_get_BOOL(v4, "kWCMAntennaRequestUnii1Enabled");
    BOOL v8 = xpc_dictionary_get_BOOL(v4, "kWCMAntennaRequestUnii3Enabled");
    if (v7) {
      char v9 = 2;
    }
    else {
      char v9 = 0;
    }
    if (v8) {
      char v10 = 4;
    }
    else {
      char v10 = 0;
    }
    char v11 = v10 | v9;
    if (xpc_dictionary_get_BOOL(v4, "kWCMAntennaRequestUnii5aEnabled")) {
      char v12 = 16;
    }
    else {
      char v12 = 0;
    }
    if (xpc_dictionary_get_BOOL(v4, "kWCMAntennaRequestUnii5bEnabled")) {
      char v13 = 32;
    }
    else {
      char v13 = 0;
    }
    char v14 = v11 | v12 | v13;
    if (xpc_dictionary_get_BOOL(v4, "kWCMAntennaRequestUnii5cEnabled")) {
      char v15 = 64;
    }
    else {
      char v15 = 0;
    }
    if (xpc_dictionary_get_BOOL(v4, "kWCMAntennaRequestUnii5dEnabled")) {
      char v16 = 0x80;
    }
    else {
      char v16 = 0;
    }
    unsigned __int8 v17 = v14 | v15 | v16;
    __int16 v18 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "void BT::PurpleCoexManager::SetAntennaRequest(xpc_object_t)";
      __int16 v25 = 1024;
      int v26 = v17;
      __int16 v27 = 1024;
      int v28 = uint64;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "%s, Bitmap Sent to VSG MGS 53 = %d and AntennaRequestInterval = %d", buf, 0x18u);
    }
    uint64_t v19 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, void, void, uint64_t))(*(void *)v19 + 2976))(v19, v17, uint64, 1))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_ERROR)) {
        sub_10079AEB8();
      }
    }
    else if (*(unsigned char *)(a1 + 278))
    {
      *(void *)buf = 520093727;
      buf[1] = xpc_dictionary_get_uint64(v4, "kWCMBTConditionIdUnii1");
      buf[2] = xpc_dictionary_get_uint64(v4, "kWCMBTConditionIdUnii3");
      uint8_t buf[4] = xpc_dictionary_get_uint64(v4, "kWCMBTConditionIdUnii5a");
      buf[5] = xpc_dictionary_get_uint64(v4, "kWCMBTConditionIdUnii5b");
      buf[6] = xpc_dictionary_get_uint64(v4, "kWCMBTConditionIdUnii5c");
      buf[7] = xpc_dictionary_get_uint64(v4, "kWCMBTConditionIdUnii5d");
      uint64_t v20 = *(void *)sub_10003FB34();
      int v21 = (*(uint64_t (**)(void))(v20 + 2984))();
      int v22 = qword_100A19E58;
      if (v21)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_ERROR)) {
          sub_10079AE50();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "SPMI Type 60 config was called", v23, 2u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_ERROR))
  {
    sub_10079AE1C();
  }
}

id sub_10000F1E0()
{
  long long v12 = 0u;
  long long v13 = 0u;
  xpc_connection_get_audit_token();
  memset(&token, 0, sizeof(token));
  unsigned int v0 = SecTaskCreateWithAuditToken(0, &token);
  uint64_t v1 = v0;
  if (v0)
  {
    CFErrorRef error = 0;
    CFStringRef v2 = SecTaskCopySigningIdentifier(v0, &error);
    CFStringRef v3 = v2;
    CFErrorRef v4 = error;
    if (error)
    {
      uint64_t v5 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Failed to copy signing ID - using framework-provided bundle identifier!", buf, 2u);
        CFErrorRef v4 = error;
      }
      CFRelease(v4);
      if (v3)
      {
        uint64_t v6 = 0;
        CFRelease(v3);
LABEL_14:
        CFRelease(v1);
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v6 = (void *)v2;
      if (v2) {
        goto LABEL_14;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_1007533DC();
      }
    }
    uint64_t v6 = 0;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_1007533A8();
  }
  uint64_t v6 = 0;
LABEL_15:
  if (![v6 length])
  {
    uint64_t v7 = +[NSString stringWithFormat:@"UNKNOWN-%0000x", arc4random_uniform(0xFFFFu)];

    uint64_t v6 = (void *)v7;
  }

  return v6;
}

void sub_10000F388(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000F39C(uint64_t a1)
{
  CFStringRef v2 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)];
  CFStringRef v3 = v2;
  if (v2)
  {
    if ([v2 isApp])
    {
      CFErrorRef v4 = [*(id *)(*(void *)(a1 + 32) + 48) interestedBundleIDs];
      uint64_t v5 = +[NSMutableArray arrayWithArray:v4];

      [v5 removeObject:*(void *)(a1 + 40)];
      uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 48);
      if ([v5 count]) {
        uint64_t v7 = 15;
      }
      else {
        uint64_t v7 = 0;
      }
      [v6 updateInterestedBundleIDs:v5 states:v7];
      BOOL v8 = [*(id *)(*(void *)(a1 + 32) + 88) objectForKeyedSubscript:*(void *)(a1 + 40)];
      if (v8)
      {
        char v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = [*(id *)(a1 + 40) UTF8String];
          int v20 = 136446210;
          id v21 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Removing outstanding process assertion for unregistered application \"%{public}s\"", (uint8_t *)&v20, 0xCu);
        }
        [v8 invalidate];
        [*(id *)(*(void *)(a1 + 32) + 88) removeObjectForKey:*(void *)(a1 + 40)];
      }
      uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 96) objectForKeyedSubscript:*(void *)(a1 + 40)];

      long long v12 = (void *)v11;
      if (v11)
      {
        long long v13 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          id v14 = [*(id *)(a1 + 40) UTF8String];
          int v20 = 136446210;
          id v21 = v14;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Removing (URGENT) outstanding process assertion for unregistered application \"%{public}s\"", (uint8_t *)&v20, 0xCu);
        }
        [v12 invalidate];
        [*(id *)(*(void *)(a1 + 32) + 96) removeObjectForKey:*(void *)(a1 + 40)];
      }
    }
    char v15 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      char v16 = *(void **)(a1 + 40);
      int v20 = 138412290;
      id v21 = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Unregistered application - %@", (uint8_t *)&v20, 0xCu);
    }
    [*(id *)(*(void *)(a1 + 32) + 40) removeObjectForKey:*(void *)(a1 + 40)];
    [*(id *)(*(void *)(a1 + 32) + 112) removeObjectForKey:*(void *)(a1 + 40)];
  }
  else
  {
    unsigned __int8 v17 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      uint64_t v19 = *(void **)(a1 + 40);
      int v20 = 138543362;
      id v21 = v19;
      _os_log_fault_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_FAULT, "Application \"%{public}@\" wasn't registered!", (uint8_t *)&v20, 0xCu);
      unsigned __int8 v17 = qword_100A19E50;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v18 = *(void **)(a1 + 40);
      int v20 = 138543362;
      id v21 = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Cannot unregister application \"%{public}@\" - info is empty", (uint8_t *)&v20, 0xCu);
    }
  }
}

void sub_10000F6B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10000F700(uint64_t a1)
{
  CFStringRef v2 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKey:*(void *)(a1 + 40)];
  if (!v2)
  {
    unsigned int v3 = [*(id *)(*(void *)(a1 + 32) + 48) applicationStateForApplication:*(void *)(a1 + 40)];
    uint64_t v4 = v3 != 0;
    uint64_t v5 = *(void **)(a1 + 40);
    if (v5 && !v3)
    {
      if ([v5 containsString:@"."]) {
        uint64_t v4 = [*(id *)(a1 + 40) hasPrefix:@"com.apple"] ^ 1;
      }
      else {
        uint64_t v4 = 0;
      }
    }
    CFStringRef v2 = +[AppInfo appInfoWithPID:*(unsigned int *)(a1 + 48) isApp:v4];
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a1 + 40);
      unsigned int v8 = [v2 isAlive];
      char v9 = "";
      if (v4) {
        char v9 = " This is an application.";
      }
      *(_DWORD *)buf = 138412802;
      uint64_t v17 = v7;
      __int16 v18 = 2080;
      uint64_t v19 = v9;
      if (v8) {
        id v10 = "true";
      }
      else {
        id v10 = "false";
      }
      __int16 v20 = 2080;
      id v21 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Registered application - %@%s, isAlive: %s", buf, 0x20u);
    }
    if (v2 && *(void *)(a1 + 40)) {
      [*(id *)(*(void *)(a1 + 32) + 40) setObject:v2 forKey:x0];
    }
    if (v4)
    {
      uint64_t v11 = [*(id *)(*(void *)(a1 + 32) + 48) interestedBundleIDs];
      long long v12 = +[NSMutableArray arrayWithArray:v11];

      if (*(void *)(a1 + 40)) {
        [v12 addObject:];
      }
      [*(id *)(*(void *)(a1 + 32) + 48) updateInterestedBundleIDs:v12 states:15];
      long long v13 = [*(id *)(*(void *)(a1 + 32) + 48) bundleInfoValueForKey:@"UIBackgroundModes" PID:*(unsigned int *)(a1 + 48)];
      if (v13)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          v14[0] = _NSConcreteStackBlock;
          v14[1] = 3221225472;
          void v14[2] = sub_100722B50;
          v14[3] = &unk_1009C0410;
          id v15 = v2;
          [v13 enumerateObjectsUsingBlock:v14];
        }
      }
    }
  }
}

void sub_10000F9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t **sub_10000FA1C(uint64_t a1, xpc_connection_t connection, const char *a3)
{
  pid_t pid = xpc_connection_get_pid(connection);
  *(void *)&v16[0] = &pid;
  uint64_t v5 = sub_1000516DC((uint64_t **)(a1 + 8), &pid, (uint64_t)&unk_1007BE9D0, (_DWORD **)v16);
  if (v5[6]) {
    return v5 + 5;
  }
  sub_10000F1E0();
  id v6 = objc_claimAutoreleasedReturnValue();
  uint64_t v7 = (const char *)[v6 cStringUsingEncoding:4];

  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v20 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)uint64_t v17 = 0u;
  memset(v16, 0, sizeof(v16));
  sub_1000419CC((uint64_t)v16);
  if (!v7) {
    uint64_t v7 = "CoreBluetooth";
  }
  strlen(v7);
  uint64_t v8 = sub_10003AB28((uint64_t)v16);
  sub_10003AB28(v8);
  std::ostream::operator<<();
  char v9 = *(NSObject **)(a1 + 32);
  if (!strcmp(a3, "com.apple.server.bluetooth.le.att.xpc"))
  {
    id v10 = (NSObject **)(a1 + 40);
    goto LABEL_12;
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.le.pipe.xpc"))
  {
    id v10 = (NSObject **)(a1 + 48);
    goto LABEL_12;
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.general.xpc"))
  {
    id v10 = (NSObject **)(a1 + 56);
    goto LABEL_12;
  }
  if (!strcmp(a3, "com.apple.server.bluetooth.classic.xpc"))
  {
    id v10 = (NSObject **)(a1 + 64);
LABEL_12:
    char v9 = *v10;
  }
  p_p = (const char *)&__p;
  std::stringbuf::str();
  if (v15 < 0) {
    p_p = (const char *)__p;
  }
  long long v12 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  v5[6] = (uint64_t *)dispatch_queue_create_with_target_V2(p_p, v12, v9);
  if (v15 < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete(v17[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();
  return v5 + 5;
}

void sub_10000FCE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10027E318((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10000FD08(uint64_t a1)
{
  CFStringRef v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "systemCoexStateCahnged", buf, 2u);
  }
  uint64_t v3 = sub_100019878();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100050F84;
  v4[3] = &unk_100997528;
  void v4[4] = a1;
  sub_100013018(v3, v4);
}

uint64_t sub_10000FDC8(uint64_t a1, int a2)
{
  *(_WORD *)(a1 + 378) = a2;
  uint64_t v4 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_INFO))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Updated ucmWiFiBitmap 0x%x", (uint8_t *)v6, 8u);
  }
  return sub_1000100D8(a1);
}

void sub_10000FE84(unsigned __int8 *a1)
{
  CFStringRef v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    BOOL v3 = sub_100010068((uint64_t)a1);
    int v4 = a1[144];
    int v5 = a1[1854];
    int v6 = a1[1864];
    v7[0] = 67109888;
    v7[1] = v3;
    __int16 v8 = 1024;
    int v9 = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "enableAOPBTBuffersIfNeeded haveAnyHwAOPBTBufferRequests:%d fScreenState:%d fAOPBTBufferReadInProgress:%d fAOPBTProxCtxBufferReadInProgress:%d", (uint8_t *)v7, 0x1Au);
  }
  if (sub_100010068((uint64_t)a1))
  {
    if (sub_1000548AC((uint64_t)a1) && !a1[1854])
    {
      if (sub_1006DC190((uint64_t)a1, 22, 1))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_1007942C4();
        }
      }
      else
      {
        sub_1006DC9F4((uint64_t)a1);
      }
    }
    if (sub_100054914((uint64_t)a1)
      && !a1[1864]
      && sub_1006DC190((uint64_t)a1, 0, 1)
      && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
    {
      sub_10079425C();
    }
    if (sub_10005472C((uint64_t)a1)
      && !a1[1864]
      && !a1[144]
      && sub_1006DC190((uint64_t)a1, 7, 1)
      && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
    {
      sub_1007941F4();
    }
  }
}

BOOL sub_100010068(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  CFStringRef v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  do
  {
    unsigned int v3 = *(unsigned __int16 *)(*(void *)(v1[5] + 8) + 124) - 1;
    BOOL result = v3 < 0xFF;
    if (v3 < 0xFF) {
      break;
    }
    int v5 = (void *)v1[1];
    if (v5)
    {
      do
      {
        int v6 = v5;
        int v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        int v6 = (void *)v1[2];
        BOOL v7 = *v6 == (void)v1;
        uint64_t v1 = v6;
      }
      while (!v7);
    }
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

uint64_t sub_1000100D8(uint64_t a1)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 40);
  CFStringRef v2 = qword_100A1A048;
  if (os_log_type_enabled((os_log_t)qword_100A1A048, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 197);
    int v4 = *(unsigned __int8 *)(a1 + 198);
    int v5 = *(unsigned __int8 *)(a1 + 204);
    int v6 = *(unsigned __int8 *)(a1 + 200);
    p_p = &__p;
    sub_10001A260(a1 + 272);
    if (v12 < 0) {
      p_p = __p;
    }
    uint64_t v8 = sub_100052EB4();
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 96))(v8);
    *(_DWORD *)buf = 67110402;
    int v15 = v3;
    __int16 v16 = 1024;
    int v17 = v4;
    __int16 v18 = 1024;
    int v19 = v5;
    __int16 v20 = 1024;
    int v21 = v6;
    __int16 v22 = 2080;
    long long v23 = p_p;
    __int16 v24 = 1024;
    int v25 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "coexChanged a2dp:%d hfp:%d isoPipe:%d BTStreaming:%d wifi:%s critical(UCM):%d", buf, 0x2Au);
    if (v12 < 0) {
      operator delete(__p);
    }
  }
  if (*(void *)(a1 + 240) || *(void *)(a1 + 264)) {
    sub_1004FD720(a1, 1);
  }
  sub_1000144B0((os_unfair_lock_s *)(a1 + 120), &stru_1009B2C50);
  return sub_10003AFB4((uint64_t)v13);
}

void sub_100010270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

uint64_t sub_1000102A8(uint64_t a1)
{
  if (_os_feature_enabled_impl())
  {
    int v2 = *(unsigned __int8 *)(a1 + 711) | (2 * *(unsigned __int8 *)(a1 + 167));
    int v3 = *(void **)(a1 + 2040);
    if (v3 == (void *)(a1 + 2048))
    {
      LOWORD(v4) = 0;
    }
    else
    {
      int v4 = 0;
      do
      {
        uint64_t v5 = v3[5];
        if (*(_DWORD *)(*(void *)(v5 + 8) + 168))
        {
          if (sub_1000105B0(v5)) {
            int v6 = 2;
          }
          else {
            int v6 = 0;
          }
          v4 |= v6 | sub_1000105C0(v3[5]);
        }
        BOOL v7 = (void *)v3[1];
        if (v7)
        {
          do
          {
            uint64_t v8 = v7;
            BOOL v7 = (void *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            uint64_t v8 = (void *)v3[2];
            BOOL v9 = *v8 == (void)v3;
            int v3 = v8;
          }
          while (!v9);
        }
        int v3 = v8;
      }
      while (v8 != (void *)(a1 + 2048));
    }
    int v12 = (unsigned __int16)v4;
    unsigned __int16 v13 = v4 ^ v2;
    id v14 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      v16[0] = 67109632;
      v16[1] = v2;
      __int16 v17 = 1024;
      int v18 = v12;
      __int16 v19 = 1024;
      int v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "updateADVBufferConfig current:%02x new:%02x configChanged:%02x", (uint8_t *)v16, 0x14u);
    }
    if (!v13) {
      return 0;
    }
    if ((v13 & 2) != 0)
    {
      if ((v12 & 2) == 0)
      {
        sub_1006D4414(a1, 0);
        if ((v13 & 1) == 0) {
          goto LABEL_39;
        }
        goto LABEL_30;
      }
      *(unsigned char *)(a1 + 170) = 0;
      if (sub_1006E2798(a1, 0) && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
      {
        sub_10079505C();
        if ((v13 & 1) == 0)
        {
LABEL_39:
          if (!*(unsigned char *)(a1 + 167) && !*(unsigned char *)(a1 + 711)) {
            sub_1006DB6E0(a1);
          }
          return 0;
        }
LABEL_30:
        if (v12)
        {
          if ((v12 & 2) != 0
            && (uint64_t v15 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v15 + 704))(v15) < 2))
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
              sub_100795028();
            }
          }
          else
          {
            *(unsigned char *)(a1 + 714) = 0;
            if (sub_1006E2798(a1, 1)
              && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
            {
              sub_100794FC0();
            }
          }
        }
        else
        {
          sub_1006D4414(a1, 1);
        }
        goto LABEL_39;
      }
    }
    if ((v13 & 1) == 0) {
      goto LABEL_39;
    }
    goto LABEL_30;
  }
  __int16 v10 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v16[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ADVBUFF cannot update ADV Buffer config when in Legacy mode", (uint8_t *)v16, 2u);
  }
  return 12;
}

uint64_t sub_1000105B0(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 8) + 122) & 1;
}

uint64_t sub_1000105C0(uint64_t a1)
{
  return (*(unsigned __int8 *)(*(void *)(a1 + 8) + 122) >> 1) & 1;
}

void sub_1000105D0()
{
  if (qword_100A14768 != -1) {
    dispatch_once(&qword_100A14768, &stru_1009BF3B0);
  }
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_100011544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45)
{
}

uint64_t sub_1000116B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, a1 + 128);
  uint64_t v5 = sub_10003FB34();
  if ((*(_DWORD *)(a1 + 56) | 2) == 2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100771F60();
    }
    uint64_t v6 = 111;
  }
  else
  {
    int v7 = *(_DWORD *)(v5 + 712);
    sub_10003AFE8((uint64_t)v24);
    if ((v7 - 2000) < 0x7D0 || (uint64_t v6 = 0, v7 != 6) && (v7 - 1) <= 0x7CE)
    {
      *(_OWORD *)__p = 0u;
      long long v23 = 0u;
      sub_100053710((uint64_t)__p, 0);
      sub_100011B98((uint64_t)__p, *(unsigned char *)a3);
      sub_10001195C((uint64_t)__p, *(_WORD *)(a3 + 2));
      sub_10001195C((uint64_t)__p, *(_WORD *)(a3 + 4));
      sub_10001195C((uint64_t)__p, *(_WORD *)(a3 + 6));
      sub_10001195C((uint64_t)__p, *(_WORD *)(a3 + 8));
      sub_100011B98((uint64_t)__p, *(unsigned char *)(a3 + 10));
      char v21 = 0;
      sub_10001B8E0(&v21);
      sub_1000335D8(&v19, __p[1], v23 - (unint64_t)__p[1]);
      unsigned __int8 v8 = sub_100045F00((uint64_t)&v19);
      sub_1000335D8(&v17, __p[1], v23 - (unint64_t)__p[1]);
      uint64_t v9 = sub_10004A6E4((uint64_t)&v17);
      int v15 = sub_100058660(0, v8, v9, v10, v11, v12, v13, v14);
      __int16 v17 = &off_100998428;
      if (v18) {
        sub_1000368F4(v18);
      }
      __int16 v19 = &off_100998428;
      if (v20) {
        sub_1000368F4(v20);
      }
      sub_10001B910(&v21);
      sub_10001B8AC(&v21);
      if (__p[1])
      {
        *(void **)&long long v23 = __p[1];
        operator delete(__p[1]);
      }
      uint64_t v6 = v15 != 0;
    }
  }
  sub_10003AFB4((uint64_t)v24);
  return v6;
}

void sub_1000118AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20)
{
  sub_10001B8AC(&a17);
  if (__p)
  {
    a20 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10003AFB4(v20 - 48);
  _Unwind_Resume(a1);
}

char *sub_10001195C(uint64_t a1, __int16 a2)
{
  __int16 __src = a2;
  if (*(_DWORD *)a1 == 1) {
    __int16 __src = __rev16(a2);
  }
  return sub_1000119B0(a1 + 8, *(char **)(a1 + 16), (char *)&__src, (char *)&vars0, 2);
}

char *sub_1000119B0(uint64_t a1, char *__dst, char *__src, char *a4, int64_t a5)
{
  uint64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    uint64_t v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15)
    {
      size_t v16 = v15;
      __int16 v17 = (char *)operator new(v15);
    }
    else
    {
      size_t v16 = 0;
      __int16 v17 = 0;
    }
    long long v27 = &v13[(void)v17];
    memcpy(&v13[(void)v17], __src, a5);
    long long v28 = &v13[(void)v17];
    size_t v29 = v16;
    if (v11 != v5)
    {
      do
      {
        v13[(void)v17 - 1] = v13[(void)(v11 - 1)];
        --v13;
      }
      while (v13);
      uint64_t v10 = *(char **)(a1 + 8);
      long long v28 = v17;
    }
    long long v30 = &v27[a5];
    long long v31 = &v17[v29];
    if (v10 != v5) {
      memmove(v30, v5, v10 - v5);
    }
    long long v32 = *(char **)a1;
    *(void *)a1 = v28;
    *(void *)(a1 + 8) = &v30[v10 - v5];
    *(void *)(a1 + 16) = v31;
    if (v32) {
      operator delete(v32);
    }
    return v27;
  }
  uint64_t v18 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    __int16 v19 = &__src[a5];
    char v21 = *(char **)(a1 + 8);
LABEL_17:
    __int16 v22 = &v5[a5];
    long long v23 = &v21[-a5];
    __int16 v24 = v21;
    if (&v21[-a5] < v10)
    {
      int64_t v25 = &v10[a5] - v21;
      __int16 v24 = v21;
      do
      {
        char v26 = *v23++;
        *v24++ = v26;
        --v25;
      }
      while (v25);
    }
    *(void *)(a1 + 8) = v24;
    if (v21 != v22) {
      memmove(&v5[a5], v5, v21 - v22);
    }
    if (v19 != __src) {
      memmove(v5, __src, v19 - __src);
    }
    return v5;
  }
  __int16 v19 = &__src[v18];
  int64_t v20 = a4 - &__src[v18];
  if (a4 != &__src[v18]) {
    memmove(*(void **)(a1 + 8), &__src[v18], a4 - &__src[v18]);
  }
  char v21 = &v10[v20];
  *(void *)(a1 + 8) = &v10[v20];
  if (v18 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

char *sub_100011B98(uint64_t a1, char a2)
{
  char __src = a2;
  return sub_1000119B0(a1 + 8, *(char **)(a1 + 16), &__src, (char *)&vars0, 1);
}

uint64_t sub_100011BD8(uint64_t a1)
{
  *(void *)a1 = off_1009ADEA0;
  sub_100011F88(a1);
  sub_100011F88(a1);
  int v2 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = 0;

  int v3 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = 0;

  int v4 = *(void **)(a1 + 408);
  *(void *)(a1 + 408) = 0;

  uint64_t v5 = *(void **)(a1 + 336);
  *(void *)(a1 + 336) = 0;

  sub_100011EC8(a1 + 312, *(void **)(a1 + 320));
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 312) = a1 + 320;
  sub_100011F2C(a1 + 448, *(void **)(a1 + 456));
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 448) = a1 + 456;
  uint64_t v6 = *(void **)(a1 + 344);
  *(void *)(a1 + 344) = 0;

  uint64_t v7 = *(void *)(a1 + 400);
  if (v7)
  {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
    *(void *)(a1 + 400) = 0;
  }
  unsigned __int8 v8 = *(NSObject **)(a1 + 440);
  if (v8)
  {
    dispatch_source_cancel(v8);
    dispatch_release(*(dispatch_object_t *)(a1 + 440));
    *(void *)(a1 + 440) = 0;
  }
  sub_10000EDA0(a1 + 416, *(void **)(a1 + 424));
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 416) = a1 + 424;
  if (*(int *)(a1 + 376) >= 1)
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    sub_1002F9020((uint64_t)off_1009F8780, *(void **)(a1 + 88), 0);
  }

  sub_100011F2C(a1 + 448, *(void **)(a1 + 456));
  sub_10000EDA0(a1 + 416, *(void **)(a1 + 424));

  sub_100011EC8(a1 + 312, *(void **)(a1 + 320));
  sub_1000519C0(a1 + 272, *(void **)(a1 + 280));

  return sub_10000EB80(a1);
}

void sub_100011E0C(_Unwind_Exception *a1)
{
  sub_100011F2C(v1 + 448, *(void **)(v1 + 456));
  sub_10000EDA0(v1 + 416, *(void **)(v1 + 424));

  sub_100011EC8(v1 + 312, *(void **)(v1 + 320));
  sub_1000519C0(v1 + 272, *(void **)(v1 + 280));

  sub_10000EB80(v1);
  _Unwind_Resume(a1);
}

void sub_100011EC8(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100011EC8(a1, *a2);
    sub_100011EC8(a1, a2[1]);

    operator delete(a2);
  }
}

void sub_100011F2C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100011F2C(a1, *a2);
    sub_100011F2C(a1, a2[1]);
    sub_100441A88((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100011F88(uint64_t a1)
{
  if (*(void *)(a1 + 496))
  {
    int v2 = (const char **)sub_100019878();
    if (sub_1004B0060(v2))
    {
      [*(id *)(a1 + 496) setEventHandler:0];
      [*(id *)(a1 + 496) invalidate];
      int v3 = *(void **)(a1 + 496);
      *(void *)(a1 + 496) = 0;
    }
    else
    {
      uint64_t v4 = sub_100019878();
      v5[0] = _NSConcreteStackBlock;
      v5[1] = 3221225472;
      v5[2] = sub_10043B6F4;
      v5[3] = &unk_100997528;
      v5[4] = a1;
      sub_1000197D8(v4, v5);
    }
  }
}

void sub_100012054(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = objc_alloc_init((Class)CBDevice);
  uint64_t v7 = [v5 UUIDString];
  [v6 setIdentifier:v7];

  if (*(unsigned char *)(*(void *)(a3 + 8) + 305)) {
    uint64_t v8 = 2048;
  }
  else {
    uint64_t v8 = 2;
  }
  [v6 setInternalFlags:v8];
  uint64_t v9 = *(void *)(a3 + 8);
  if (*(unsigned char *)(v9 + 306))
  {
    [v6 setInternalFlags:[v6 internalFlags] | 0x1000];
    uint64_t v9 = *(void *)(a3 + 8);
  }
  if (*(_WORD *)(v9 + 40))
  {
    [v6 setAppearanceValue:];
    uint64_t v9 = *(void *)(a3 + 8);
  }
  uint64_t v10 = *(atomic_uint **)(v9 + 144);
  __int16 v71 = &off_100998428;
  int v72 = v10;
  if (v10) {
    sub_100037354((uint64_t)v10);
  }
  uint64_t v11 = sub_10004A6E4((uint64_t)&v71);
  if (sub_100045F00((uint64_t)&v71) == 7)
  {
    id v12 = [objc_alloc((Class)NSData) initWithBytes:v11 + 1 length:6];
    [v6 setBleAddressData:v12];
  }
  [v6 setBleAdvertisementTimestamp:*(double *)(*(void *)(a3 + 8) + 240)];
  [v6 setBleAdvertisementTimestampMachContinuous:*(void *)(*(void *)(a3 + 8) + 248)];
  uint64_t v13 = *(atomic_uint **)(*(void *)(a3 + 8) + 56);
  uint64_t v69 = &off_100998428;
  long long v70 = v13;
  if (v13) {
    sub_100037354((uint64_t)v13);
  }
  uint64_t v14 = sub_10004A6E4((uint64_t)&v69);
  if (v14)
  {
    id v15 = [objc_alloc((Class)NSData) initWithBytes:v14 length:sub_100045F00((uint64_t)&v69)];
    [v6 setBleAppleManufacturerData:v15];
  }
  [v6 setBleChannel:*(unsigned __int8 *)(*(void *)(a3 + 8) + 219)];
  int v16 = *(unsigned __int8 *)(*(void *)(a3 + 8) + 216);
  if (v16 == 127) {
    LOBYTE(v16) = 0;
  }
  [v6 setBleRSSI:(char)v16];
  uint64_t v17 = *(void *)(*(void *)(a3 + 8) + 200);
  if (v17)
  {
    LOBYTE(v65) = (unsigned __int16)WORD2(*(void *)(*(void *)(a3 + 8) + 200)) >> 8;
    BYTE1(v65) = BYTE4(v17);
    BYTE2(v65) = BYTE3(v17);
    BYTE3(v65) = BYTE2(v17);
    BYTE4(v65) = BYTE1(v17);
    BYTE5(v65) = v17;
    id v18 = [objc_alloc((Class)NSData) initWithBytes:&v65 length:6];
    [v6 setBtAddressData:v18];
  }
  id v19 = [v6 deviceFlags];
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_100998CB0);
  }
  if (sub_100008DC4(qword_1009F7EC8, v5))
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_100998C90);
    }
    int64_t v20 = off_1009F7ED8;
    sub_10004191C(__p, "_CTKD_");
    if (sub_100030A04((uint64_t)v20, v5, (uint64_t)__p)) {
      uint64_t v21 = 0x40000000000;
    }
    else {
      uint64_t v21 = 0;
    }
    if (v68 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v21 = 0x40000000000;
  }
  if (v19 != (id)v21) {
    [v6 setDeviceFlags:v21];
  }
  uint64_t v65 = 0;
  v66[0] = 0;
  v66[1] = 0;
  sub_100051B34(&v65, *(void *)(a3 + 8) + 112);
  long long v86 = xmmword_1007BA8C4;
  int v87 = -815610143;
  sub_100035F98(&v82, (__n128 *)&v86);
  uint64_t v22 = sub_100012C44((uint64_t)&v65, (unsigned __int8 *)&v82);
  if (v66 != (void **)v22)
  {
    uint64_t v23 = *(void *)(v22 + 64);
    v82.n128_u64[0] = (unint64_t)&off_100998428;
    v82.n128_u64[1] = v23;
    if (v23) {
      sub_100037354(v23);
    }
    id v24 = objc_alloc((Class)NSData);
    uint64_t v25 = sub_10004A6E4((uint64_t)&v82);
    id v26 = [v24 initWithBytes:v25 length:sub_100045F00((uint64_t)&v82)];
    [v6 setDockKitAccessoryPayloadData:v26];

    v82.n128_u64[0] = (unint64_t)&off_100998428;
    if (v82.n128_u64[1]) {
      sub_1000368F4((atomic_uint *)v82.n128_u64[1]);
    }
  }
  int v85 = 0;
  long long v84 = xmmword_1007B8988;
  sub_100035F98(&v82, (__n128 *)&v84);
  uint64_t v27 = sub_100012C44((uint64_t)&v65, (unsigned __int8 *)&v82);
  if (v66 != (void **)v27)
  {
    uint64_t v28 = *(void *)(v27 + 64);
    v82.n128_u64[0] = (unint64_t)&off_100998428;
    v82.n128_u64[1] = v28;
    if (v28) {
      sub_100037354(v28);
    }
    id v29 = objc_alloc((Class)NSData);
    uint64_t v30 = sub_10004A6E4((uint64_t)&v82);
    id v31 = [v29 initWithBytes:v30 length:sub_100045F00((uint64_t)&v82)];
    [v6 setFidoPayloadData:v31];

    v82.n128_u64[0] = (unint64_t)&off_100998428;
    if (v82.n128_u64[1]) {
      sub_1000368F4((atomic_uint *)v82.n128_u64[1]);
    }
  }
  uint64_t v32 = *(void *)(a3 + 8);
  uint64_t v83 = 0;
  __n128 v82 = 0uLL;
  sub_100037564((char *)&v82, *(long long **)(v32 + 64), *(long long **)(v32 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v32 + 72) - *(void *)(v32 + 64)) >> 2));
  int v81 = 0;
  long long v80 = xmmword_1007B899C;
  sub_100035F98((__n128 *)__dst, (__n128 *)&v80);
  uint64_t v33 = sub_100012C44((uint64_t)&v65, (unsigned __int8 *)__dst);
  if (v66 == (void **)v33)
  {
    unint64_t v39 = v82.n128_u64[1];
    float v38 = (unsigned __int8 *)v82.n128_u64[0];
    if (v82.n128_u64[0] == v82.n128_u64[1])
    {
      unint64_t v40 = v82.n128_u64[0];
    }
    else
    {
      while (1)
      {
        LODWORD(v79) = 0;
        *(_OWORD *)__dst = xmmword_1007B899C;
        if (sub_10022A44C(v38, (unsigned __int8 *)__dst)) {
          break;
        }
        v38 += 20;
        if (v38 == (unsigned __int8 *)v39)
        {
          float v38 = (unsigned __int8 *)v39;
          break;
        }
      }
      unint64_t v40 = (unint64_t)v38;
      float v38 = (unsigned __int8 *)v82.n128_u64[1];
    }
    if ((unsigned __int8 *)v40 != v38)
    {
      BOOL v41 = +[NSData data];
      [v6 setGfpPayloadData:v41];
    }
  }
  else
  {
    uint64_t v34 = *(void **)(v33 + 64);
    __dst[0] = &off_100998428;
    __dst[1] = v34;
    if (v34) {
      sub_100037354((uint64_t)v34);
    }
    id v35 = objc_alloc((Class)NSData);
    uint64_t v36 = sub_10004A6E4((uint64_t)__dst);
    id v37 = [v35 initWithBytes:v36 length:sub_100045F00((uint64_t)__dst)];
    [v6 setGfpPayloadData:v37];

    __dst[0] = &off_100998428;
    if (__dst[1]) {
      sub_1000368F4((atomic_uint *)__dst[1]);
    }
  }
  unint64_t v43 = v82.n128_u64[1];
  uint64_t v42 = (unsigned __int8 *)v82.n128_u64[0];
  if (v82.n128_u64[0] == v82.n128_u64[1])
  {
    unint64_t v44 = v82.n128_u64[0];
  }
  else
  {
    while (1)
    {
      *(_OWORD *)__dst = xmmword_1007BA730;
      LODWORD(v79) = 0;
      if (sub_10022A44C(v42, (unsigned __int8 *)__dst)) {
        break;
      }
      v42 += 20;
      if (v42 == (unsigned __int8 *)v43)
      {
        uint64_t v42 = (unsigned __int8 *)v43;
        break;
      }
    }
    unint64_t v44 = (unint64_t)v42;
    uint64_t v42 = (unsigned __int8 *)v82.n128_u64[1];
  }
  if ((unsigned __int8 *)v44 != v42) {
    [v6 setDiscoveryFlags:((unint64_t)[v6 discoveryFlags] | 0x2000000000000)];
  }
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v79 = 0;
  uint64_t v45 = *(void *)(a3 + 8);
  if (*(char *)(v45 + 39) < 0)
  {
    sub_10003B098(__dst, *(void **)(v45 + 16), *(void *)(v45 + 24));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)(v45 + 16);
    uint64_t v79 = *(void *)(v45 + 32);
  }
  long long v46 = (void *)HIBYTE(v79);
  if (v79 < 0) {
    long long v46 = __dst[1];
  }
  if (v46)
  {
    id v47 = objc_alloc((Class)NSString);
    if (v79 >= 0) {
      long long v48 = __dst;
    }
    else {
      long long v48 = (void **)__dst[0];
    }
    id v49 = [v47 initWithUTF8String:v48];
    [v6 setLeAdvName:v49];
  }
  long long v75 = xmmword_1007BA7F8;
  int v76 = 0;
  sub_100035F98(&v77, (__n128 *)&v75);
  uint64_t v50 = sub_100012C44((uint64_t)&v65, (unsigned __int8 *)&v77);
  if (v66 != (void **)v50)
  {
    uint64_t v51 = *(void *)(v50 + 64);
    v77.n128_u64[0] = (unint64_t)&off_100998428;
    v77.n128_u64[1] = v51;
    if (v51) {
      sub_100037354(v51);
    }
    id v52 = objc_alloc((Class)NSData);
    uint64_t v53 = sub_10004A6E4((uint64_t)&v77);
    id v54 = [v52 initWithBytes:v53 length:sub_100045F00((uint64_t)&v77)];
    [v6 setProximityServiceData:v54];

    v77.n128_u64[0] = (unint64_t)&off_100998428;
    if (v77.n128_u64[1]) {
      sub_1000368F4((atomic_uint *)v77.n128_u64[1]);
    }
  }
  int v74 = 0;
  long long v73 = xmmword_1007B89B0;
  sub_100035F98(&v77, (__n128 *)&v73);
  uint64_t v55 = sub_100012C44((uint64_t)&v65, (unsigned __int8 *)&v77);
  if (v66 != (void **)v55)
  {
    uint64_t v56 = *(void *)(v55 + 64);
    v77.n128_u64[0] = (unint64_t)&off_100998428;
    v77.n128_u64[1] = v56;
    if (v56) {
      sub_100037354(v56);
    }
    id v57 = objc_alloc((Class)NSData);
    uint64_t v58 = sub_10004A6E4((uint64_t)&v77);
    id v59 = [v57 initWithBytes:v58 length:sub_100045F00((uint64_t)&v77)];
    [v6 setSafetyAlertsSegmentServiceData:v59];

    [v6 setInternalFlags:[v6 internalFlags] | 0x4000];
    v77.n128_u64[0] = (unint64_t)&off_100998428;
    if (v77.n128_u64[1]) {
      sub_1000368F4((atomic_uint *)v77.n128_u64[1]);
    }
  }
  uint64_t v60 = *(void *)(*(void *)(a3 + 8) + 208);
  if (v60)
  {
    v77.n128_u8[0] = (unsigned __int16)WORD2(*(void *)(*(void *)(a3 + 8) + 208)) >> 8;
    v77.n128_u8[1] = BYTE4(v60);
    v77.n128_u8[2] = BYTE3(v60);
    v77.n128_u8[3] = BYTE2(v60);
    v77.n128_u8[4] = BYTE1(v60);
    v77.n128_u8[5] = v60;
    id v61 = [objc_alloc((Class)NSData) initWithBytes:&v77 length:6];
    [v6 setTxAddressData:v61];
  }
  id v62 = *(id *)(a1 + 8);
  long long v63 = *(NSObject **)(a1 + 16);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100050F90;
  block[3] = &unk_100998510;
  block[4] = v6;
  block[5] = v62;
  dispatch_async(v63, block);

  if (SHIBYTE(v79) < 0) {
    operator delete(__dst[0]);
  }
  if (v82.n128_u64[0])
  {
    v82.n128_u64[1] = v82.n128_u64[0];
    operator delete((void *)v82.n128_u64[0]);
  }
  sub_10004BA8C((uint64_t)&v65, v66[0]);
  uint64_t v69 = &off_100998428;
  if (v70) {
    sub_1000368F4(v70);
  }
  __int16 v71 = &off_100998428;
  if (v72) {
    sub_1000368F4(v72);
  }
}

void sub_100012A54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,atomic_uint *a29,uint64_t a30,atomic_uint *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  id v52 = *(void **)(v50 - 184);
  if (v52)
  {
    *(void *)(v50 - 176) = v52;
    operator delete(v52);
  }
  sub_10004BA8C((uint64_t)&a19, a20);
  if (a29) {
    sub_1000368F4(a29);
  }
  a30 = a10;
  if (a31) {
    sub_1000368F4(a31);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100012C44(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    BOOL v6 = sub_10071D284((unsigned __int8 *)(v3 + 32), a2);
    uint64_t v7 = (uint64_t *)(v3 + 8);
    if (!v6)
    {
      uint64_t v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || sub_10071D284(a2, (unsigned __int8 *)(v5 + 32))) {
    return v2;
  }
  return v5;
}

uint64_t sub_100012CC0(uint64_t a1)
{
  uint64_t v2 = sub_10000EC28(a1);
  *(void *)uint64_t v2 = off_1009ADEA0;
  *(void *)(v2 + 288) = 0;
  *(void *)(v2 + 296) = 0;
  *(void *)(v2 + 272) = v2 + 280;
  *(void *)(v2 + 280) = 0;
  *(_OWORD *)(v2 + 216) = 0u;
  *(_OWORD *)(v2 + 232) = 0u;
  *(_OWORD *)(v2 + 248) = 0u;
  *(void *)(v2 + 264) = 0;
  *(void *)(v2 + 320) = 0;
  *(void *)(v2 + 328) = 0;
  *(_DWORD *)(v2 + 303) = 0;
  *(void *)(v2 + 312) = v2 + 320;
  uint64_t v3 = (void **)(v2 + 336);
  *(_DWORD *)(v2 + 384) = 0;
  *(void *)(v2 + 392) = 0;
  *(void *)(v2 + 424) = 0;
  *(void *)(v2 + 432) = 0;
  *(_OWORD *)(v2 + 367) = 0u;
  *(_OWORD *)(v2 + 336) = 0u;
  *(_OWORD *)(v2 + 352) = 0u;
  *(void *)(v2 + 408) = 0;
  *(void *)(v2 + 416) = v2 + 424;
  *(void *)(v2 + 456) = 0;
  *(void *)(v2 + 464) = 0;
  *(void *)(v2 + 448) = v2 + 456;
  *(_DWORD *)(v2 + 503) = 0;
  *(void *)(v2 + 496) = 0;
  uint64_t v4 = +[NSMutableDictionary dictionary];
  uint64_t v5 = *(void **)(a1 + 248);
  *(void *)(a1 + 248) = v4;

  uint64_t v6 = +[NSMutableDictionary dictionary];
  uint64_t v7 = *(void **)(a1 + 256);
  *(void *)(a1 + 256) = v6;

  uint64_t v8 = +[NSMutableDictionary dictionary];
  uint64_t v9 = *(void **)(a1 + 408);
  *(void *)(a1 + 408) = v8;

  uint64_t v10 = objc_opt_new();
  uint64_t v11 = *v3;
  *uint64_t v3 = (void *)v10;

  uint64_t v12 = objc_opt_new();
  uint64_t v13 = *(void **)(a1 + 344);
  *(void *)(a1 + 344) = v12;

  id v14 = objc_alloc_init((Class)NSMutableDictionary);
  id v15 = *(void **)(a1 + 264);
  *(void *)(a1 + 264) = v14;

  uint64_t v16 = +[NSMutableSet set];
  uint64_t v17 = *(void **)(a1 + 296);
  *(void *)(a1 + 296) = v16;

  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 440) = 0;
  int v32 = 0;
  uint64_t v18 = sub_100017768();
  sub_10004191C(v30, "BTUCM");
  sub_10004191C(__p, "DefaultWifiCoexPriority");
  int v19 = (*(uint64_t (**)(uint64_t, void **, void **, int *))(*(void *)v18 + 88))(v18, v30, __p, &v32);
  if (v29 < 0) {
    operator delete(__p[0]);
  }
  if (v31 < 0) {
    operator delete(v30[0]);
  }
  int v20 = v32;
  if (!v19) {
    int v20 = -1;
  }
  *(_DWORD *)(a1 + 488) = v20;
  uint64_t v21 = *(void **)(a1 + 216);
  *(void *)(a1 + 216) = 0;

  uint64_t v22 = *(void **)(a1 + 224);
  *(void *)(a1 + 224) = 0;

  uint64_t v23 = *(void **)(a1 + 232);
  *(void *)(a1 + 232) = 0;

  id v24 = *(void **)(a1 + 240);
  *(void *)(a1 + 240) = 0;

  uint64_t v25 = objc_opt_new();
  id v26 = *(void **)(a1 + 392);
  *(void *)(a1 + 392) = v25;

  return a1;
}

void sub_100012F14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }

  sub_100011F2C(v21 + 448, *(void **)(v21 + 456));
  sub_10000EDA0(v21 + 416, *(void **)(v21 + 424));

  sub_100011EC8(v21 + 312, *(void **)(v21 + 320));
  sub_1000519C0(v21 + 272, *(void **)(v21 + 280));

  sub_10000EB80(v21);
  _Unwind_Resume(a1);
}

void sub_100013018(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(NSObject **)(a1 + 8);
  if (v4
    || (uint64_t v5 = qword_100A19FD8, os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_FAULT))
    && (int v6 = 136446210,
        uint64_t v7 = "fQueue",
        _os_log_fault_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v6, 0xCu), (uint64_t v4 = *(NSObject **)(a1 + 8)) != 0))
  {
    dispatch_async(v4, v3);
  }
}

uint64_t sub_1000130F8(uint64_t a1)
{
  uint64_t v53 = 0;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v43 = 0u;
  long long v44 = 0u;
  *(_OWORD *)BOOL v41 = 0u;
  long long v42 = 0u;
  memset(v40, 0, sizeof(v40));
  long long v39 = 0u;
  sub_10004C67C((uint64_t)&v39);
  if (*(char *)(a1 + 39) < 0)
  {
    if (!*(void *)(a1 + 24)) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  if (*(unsigned char *)(a1 + 39))
  {
LABEL_5:
    uint64_t v2 = sub_10003AB28((uint64_t)v40);
    uint64_t v3 = sub_10003AB28(v2);
    sub_10003AB28(v3);
  }
LABEL_6:
  sub_10003AB28((uint64_t)v40);
  uint64_t v4 = std::ostream::operator<<();
  sub_10003AB28(v4);
  if (!*(unsigned char *)(a1 + 217)) {
    sub_10003AB28((uint64_t)v40);
  }
  sub_10003AB28((uint64_t)v40);
  if (*(unsigned char *)(a1 + 42))
  {
    sub_10003AB28((uint64_t)v40);
    uint64_t v5 = std::ostream::operator<<();
    sub_10003AB28(v5);
  }
  if (*(void *)(a1 + 72) != *(void *)(a1 + 64))
  {
    sub_10003AB28((uint64_t)v40);
    uint64_t v6 = *(void *)(a1 + 64);
    if (*(void *)(a1 + 72) != v6)
    {
      uint64_t v7 = 0;
      unsigned int v8 = 1;
      do
      {
        sub_1000417A8(v6 + 20 * v7, &v56);
        uint64_t v9 = sub_10003AB28((uint64_t)v40);
        sub_10003AB28(v9);
        if (v57 < 0) {
          operator delete(v56);
        }
        uint64_t v7 = v8;
        uint64_t v6 = *(void *)(a1 + 64);
        BOOL v10 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 72) - v6) >> 2) > v8++;
      }
      while (v10);
    }
    __p = 0;
    uint64_t v37 = 0;
    std::ostream::sentry::sentry();
    uint64_t v11 = (char *)v40 + *(void *)(*(void *)&v40[0] - 24);
    if ((v11[32] & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**((void **)v11 + 5) + 32))(&v56);
      if (v58 == -1) {
        std::ios_base::clear((std::ios_base *)((char *)v40 + *(void *)(*(void *)&v40[0] - 24)), *(_DWORD *)((char *)&v40[2] + *(void *)(*(void *)&v40[0] - 24)) | 4);
      }
    }
    std::ostream::sentry::~sentry();
    sub_10003AB28((uint64_t)v40);
  }
  if (*(void *)(a1 + 128))
  {
    sub_10003AB28((uint64_t)v40);
    uint64_t v12 = *(unsigned __int8 **)(a1 + 112);
    if (v12 != (unsigned __int8 *)(a1 + 120))
    {
      do
      {
        long long v54 = xmmword_1007BA7E4;
        int v55 = 0;
        if (!sub_10022A44C(v12 + 32, (unsigned __int8 *)&v54))
        {
          sub_1000417A8((uint64_t)(v12 + 32), &v56);
          uint64_t v13 = sub_10003AB28((uint64_t)v40);
          uint64_t v14 = sub_10003AB28(v13);
          sub_10004C2C4((uint64_t)(v12 + 56), &__p);
          uint64_t v15 = sub_10003AB28(v14);
          sub_10003AB28(v15);
          if (v38 < 0) {
            operator delete(__p);
          }
          if (v57 < 0) {
            operator delete(v56);
          }
        }
        uint64_t v16 = (unsigned __int8 *)*((void *)v12 + 1);
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            uint64_t v16 = *(unsigned __int8 **)v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            uint64_t v17 = (unsigned __int8 *)*((void *)v12 + 2);
            BOOL v18 = *(void *)v17 == (void)v12;
            uint64_t v12 = v17;
          }
          while (!v18);
        }
        uint64_t v12 = v17;
      }
      while (v17 != (unsigned __int8 *)(a1 + 120));
    }
    __p = 0;
    uint64_t v37 = 0;
    std::ostream::sentry::sentry();
    int v19 = (char *)v40 + *(void *)(*(void *)&v40[0] - 24);
    if ((v19[32] & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**((void **)v19 + 5) + 32))(&v56);
      if (v58 == -1) {
        std::ios_base::clear((std::ios_base *)((char *)v40 + *(void *)(*(void *)&v40[0] - 24)), *(_DWORD *)((char *)&v40[2] + *(void *)(*(void *)&v40[0] - 24)) | 4);
      }
    }
    std::ostream::sentry::~sentry();
    sub_10003AB28((uint64_t)v40);
  }
  if (*(void *)(a1 + 96) != *(void *)(a1 + 88))
  {
    sub_10003AB28((uint64_t)v40);
    uint64_t v20 = *(void *)(a1 + 88);
    if (*(void *)(a1 + 96) != v20)
    {
      uint64_t v21 = 0;
      unsigned int v22 = 1;
      do
      {
        sub_1000417A8(v20 + 20 * v21, &v56);
        uint64_t v23 = sub_10003AB28((uint64_t)v40);
        sub_10003AB28(v23);
        if (v57 < 0) {
          operator delete(v56);
        }
        uint64_t v21 = v22;
        uint64_t v20 = *(void *)(a1 + 88);
        BOOL v10 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 96) - v20) >> 2) > v22++;
      }
      while (v10);
    }
    __p = 0;
    uint64_t v37 = 0;
    std::ostream::sentry::sentry();
    id v24 = (char *)v40 + *(void *)(*(void *)&v40[0] - 24);
    if ((v24[32] & 5) == 0)
    {
      (*(void (**)(void **__return_ptr))(**((void **)v24 + 5) + 32))(&v56);
      if (v58 == -1) {
        std::ios_base::clear((std::ios_base *)((char *)v40 + *(void *)(*(void *)&v40[0] - 24)), *(_DWORD *)((char *)&v40[2] + *(void *)(*(void *)&v40[0] - 24)) | 4);
      }
    }
    std::ostream::sentry::~sentry();
    sub_10003AB28((uint64_t)v40);
  }
  if (!sub_100013DCC(a1 + 48))
  {
    sub_10003AB28((uint64_t)v40);
    sub_10004C2C4(a1 + 48, &v56);
    uint64_t v25 = sub_10003AB28((uint64_t)v40);
    uint64_t v26 = sub_10003AB28(v25);
    sub_100051CC4(a1 + 168, 0x30u, 49, (int8x16_t **)&__p);
    uint64_t v27 = sub_10003AB28(v26);
    sub_10003AB28(v27);
    if (v38 < 0) {
      operator delete(__p);
    }
    if (v57 < 0) {
      operator delete(v56);
    }
  }
  if (!sub_100013DCC(a1 + 136))
  {
    sub_10003AB28((uint64_t)v40);
    sub_10004C2C4(a1 + 136, &v56);
    sub_10003AB28((uint64_t)v40);
    if (v57 < 0) {
      operator delete(v56);
    }
    sub_10003AB28((uint64_t)v40);
  }
  if (!sub_100013DCC(a1 + 152))
  {
    sub_10003AB28((uint64_t)v40);
    sub_10004C2C4(a1 + 152, &v56);
    sub_10003AB28((uint64_t)v40);
    if (v57 < 0) {
      operator delete(v56);
    }
    sub_10003AB28((uint64_t)v40);
  }
  if (!sub_100013DCC(a1 + 224))
  {
    sub_10003AB28((uint64_t)v40);
    sub_10004C2C4(a1 + 224, &v56);
    sub_10003AB28((uint64_t)v40);
    if (v57 < 0) {
      operator delete(v56);
    }
    sub_10003AB28((uint64_t)v40);
  }
  if (!*(unsigned char *)(a1 + 12)) {
    sub_10003AB28((uint64_t)v40);
  }
  sub_10003AB28((uint64_t)v40);
  if (*(unsigned char *)(a1 + 13)) {
    sub_10003AB28((uint64_t)v40);
  }
  if (*(unsigned char *)(a1 + 14)) {
    sub_10003AB28((uint64_t)v40);
  }
  if (*(unsigned char *)(a1 + 219))
  {
    sub_10003AB28((uint64_t)v40);
    uint64_t v28 = std::ostream::operator<<();
    sub_10003AB28(v28);
  }
  if (*(unsigned char *)(a1 + 220)) {
    sub_10003AB28((uint64_t)v40);
  }
  uint64_t v29 = sub_10003AB28((uint64_t)v40);
  sub_10003AB28(v29);
  if (!sub_100013DCC(a1 + 448))
  {
    sub_10003AB28((uint64_t)v40);
    sub_10004C2C4(a1 + 448, &v56);
    sub_10003AB28((uint64_t)v40);
    if (v57 < 0) {
      operator delete(v56);
    }
    sub_10003AB28((uint64_t)v40);
  }
  sub_10003AB28((uint64_t)v40);
  uint64_t v30 = std::ostream::operator<<();
  sub_10003AB28(v30);
  sub_10003AB28((uint64_t)v40);
  uint64_t v31 = std::ostream::operator<<();
  sub_10003AB28(v31);
  sub_10003AB28((uint64_t)v40);
  uint64_t v32 = std::ostream::operator<<();
  sub_10003AB28(v32);
  sub_10003AB28((uint64_t)v40);
  uint64_t v33 = std::ostream::operator<<();
  sub_10003AB28(v33);
  std::stringbuf::str();
  *(void *)((char *)&v40[-1]
  *(void *)&v40[0] = v34;
  if (SHIBYTE(v42) < 0) {
    operator delete(v41[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100013D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

BOOL sub_100013DCC(uint64_t a1)
{
  return *(void *)(a1 + 8) == 0;
}

uint64_t sub_100013DDC(uint64_t a1, uint64_t a2, xpc_connection_t connection, uint64_t a4)
{
  *(void *)a1 = &off_1009A32F8;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = connection;
  *(void *)(a1 + 24) = a4;
  *(void *)(a1 + 32) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 104) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 75) = 0u;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 40) = xpc_connection_get_pid(connection);
  xpc_connection_set_context(*(xpc_connection_t *)(a1 + 16), (void *)a1);
  xpc_connection_set_finalizer_f(*(xpc_connection_t *)(a1 + 16), (xpc_finalizer_t)sub_100056D2C);
  uint64_t v5 = *(_xpc_connection_s **)(a1 + 16);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10004D800;
  handler[3] = &unk_1009A0598;
  handler[4] = a1;
  xpc_connection_set_event_handler(v5, handler);
  xpc_connection_set_target_queue(*(xpc_connection_t *)(a1 + 16), *(dispatch_queue_t *)(a1 + 24));
  xpc_connection_resume(*(xpc_connection_t *)(a1 + 16));
  uid_t euid = xpc_connection_get_euid(*(xpc_connection_t *)(a1 + 16));
  *(_DWORD *)(a1 + 44) = euid;
  memset(uu, 0, sizeof(uu));
  if (mbr_uid_to_uuid(euid, uu))
  {
    uint64_t v7 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      int v14 = *(_DWORD *)(a1 + 44);
      uint64_t v15 = __error();
      uint64_t v16 = strerror(*v15);
      int v17 = *__error();
      *(_DWORD *)buf = 67240706;
      int v20 = v14;
      __int16 v21 = 2082;
      unsigned int v22 = v16;
      __int16 v23 = 1026;
      int v24 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "mbr_uid_to_uuid for id %{public}d failed: %{public}s (%{public}d)", buf, 0x18u);
    }
    id v8 = 0;
  }
  else
  {
    id v8 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:uu];
  }
  uint64_t v9 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = v8;

  if (sub_100014448())
  {
    int v10 = 2;
  }
  else
  {
    if (!sub_100014448()) {
      goto LABEL_11;
    }
    int v10 = 1;
  }
  *(_DWORD *)(a1 + 80) = v10;
LABEL_11:
  uint64_t v11 = sub_10000F1E0();
  uint64_t v12 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v11;

  if (([&off_1009E1900 containsObject:*(void *)(a1 + 96)] & 1) == 0) {
    operator new();
  }
  *(unsigned char *)(a1 + 89) = sub_100014448();
  *(unsigned char *)(a1 + 84) = sub_100014448();
  *(unsigned char *)(a1 + 90) = sub_100014448();
  *(unsigned char *)(a1 + 85) = sub_100014448();
  *(unsigned char *)(a1 + 86) = sub_100014448();
  if (_os_feature_enabled_impl()) {
    *(unsigned char *)(a1 + 87) = sub_100014448();
  }
  return a1;
}

void sub_100014138(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  operator delete();
}

uint64_t sub_1000141C0(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  uint64_t v5 = sub_100056C90(a1, a2, a3, a4);
  *(void *)uint64_t v5 = off_1009B6E68;
  *(void *)(v5 + 144) = off_1009B7028;
  *(void *)(v5 + 152) = off_1009B7160;
  *(void *)(v5 + 160) = &off_1009B7190;
  *(_WORD *)(v5 + 168) = 0;
  *(unsigned char *)(a1 + 170) = sub_100014448();
  *(unsigned char *)(a1 + 171) = sub_100014448();
  *(_WORD *)(a1 + 172) = 0;
  *(unsigned char *)(a1 + 174) = sub_100014448();
  *(_DWORD *)(a1 + 175) = 0;
  *(_WORD *)(a1 + 179) = 0;
  *(unsigned char *)(a1 + 181) = sub_100014448();
  *(unsigned char *)(a1 + 182) = sub_100014448();
  *(unsigned char *)(a1 + 183) = sub_100014448();
  *(unsigned char *)(a1 + 184) = sub_100014448();
  *(unsigned char *)(a1 + 185) = sub_100014448();
  *(unsigned char *)(a1 + 186) = 0;
  *(unsigned char *)(a1 + 187) = sub_100014448();
  *(unsigned char *)(a1 + 188) = sub_100014448();
  *(unsigned char *)(a1 + 189) = sub_100014448();
  *(unsigned char *)(a1 + 190) = sub_100014448();
  BOOL v6 = sub_100014448();
  *(void *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 191) = v6;
  *(unsigned char *)(a1 + 192) = 8;
  *(void *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 193) = 0;
  *(_DWORD *)(a1 + 196) = 0;
  *(void *)(a1 + 200) = a1 + 208;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  int v7 = *(_DWORD *)(a1 + 80);
  if (v7 >= 1)
  {
    *(_WORD *)(a1 + 170) = 257;
    *(unsigned char *)(a1 + 181) = 1;
    *(_WORD *)(a1 + 183) = 257;
    *(unsigned char *)(a1 + 185) = 1;
    *(unsigned char *)(a1 + 187) = 1;
    *(unsigned char *)(a1 + 174) = 1;
  }
  if (v7 <= 0) {
    int v8 = 0;
  }
  else {
    int v8 = -1;
  }
  *(_DWORD *)(a1 + 196) = v8;
  if (*(unsigned char *)(a1 + 188))
  {
    uint64_t v9 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Entitled Scan Client - Checked in", v11, 2u);
    }
  }
  return a1;
}

void sub_100014434(_Unwind_Exception *a1)
{
  sub_10000C178(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100014448()
{
  uint64_t v0 = (void *)xpc_connection_copy_entitlement_value();
  if (!v0) {
    return 0;
  }
  uint64_t v1 = v0;
  BOOL v2 = xpc_get_type(v0) == (xpc_type_t)&_xpc_type_BOOL && xpc_BOOL_get_value(v1);
  xpc_release(v1);
  return v2;
}

void sub_1000144B0(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    BOOL v6 = v4;
    operator delete(v4);
  }
}

void sub_100014554(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

void sub_10001457C(id a1, BluetoothDaemonListener *a2)
{
}

void sub_1000145A8(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  BOOL v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    BOOL v6 = v4;
    operator delete(v4);
  }
}

void sub_10001464C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100014674(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int16 *)(*(void *)(a1 + 32) + 166));
}

uint64_t sub_1000146A8(uint64_t a1)
{
  uint64_t v18 = 0;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  *(_OWORD *)__p = 0u;
  long long v7 = 0u;
  memset(v5, 0, sizeof(v5));
  long long v4 = 0u;
  sub_10004C67C((uint64_t)&v4);
  if (!a1) {
    goto LABEL_13;
  }
  if (a1) {
    sub_10003AB28((uint64_t)v5);
  }
  if ((a1 & 2) != 0) {
    sub_10003AB28((uint64_t)v5);
  }
  if ((a1 & 4) != 0) {
    sub_10003AB28((uint64_t)v5);
  }
  if ((a1 & 8) != 0) {
    sub_10003AB28((uint64_t)v5);
  }
  if ((a1 & 0x10) != 0) {
    sub_10003AB28((uint64_t)v5);
  }
  if ((a1 & 0x40) != 0) {
LABEL_13:
  }
    sub_10003AB28((uint64_t)v5);
  std::stringbuf::str();
  *(void *)((char *)&v5[-1]
  *(void *)&v5[0] = v2;
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_1000148EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100014900(unsigned __int8 *a1)
{
  uint64_t v2 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    int v3 = sub_1000373BC((uint64_t)a1);
    int v4 = a1[144];
    int v15 = 67109376;
    int v16 = v3;
    __int16 v17 = 1024;
    int v18 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "enableObjectDiscoveryADVBuffersIfNeeded objectDiscoveryHwAdvBufferOnly:%d fScreenState:%d", (uint8_t *)&v15, 0xEu);
  }
  if (sub_1000373BC((uint64_t)a1) && !a1[144])
  {
    uint64_t v5 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v6 = a1[172];
      int v7 = a1[167];
      int v8 = a1[168];
      int v15 = 67109632;
      int v16 = v6;
      __int16 v17 = 1024;
      int v18 = v7;
      __int16 v19 = 1024;
      int v20 = v8;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "exptectedEntries:%d created:%d enabled:%d", (uint8_t *)&v15, 0x14u);
    }
    if (a1[172] == 255 && a1[167] && !a1[168])
    {
      int v9 = sub_1006D9358((uint64_t)a1, 0, 1);
      if (v9)
      {
        int v10 = v9;
        long long v11 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          int v15 = 67109120;
          int v16 = v10;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "enableADVBuffering(Wild) failed with result %d", (uint8_t *)&v15, 8u);
        }
      }
      else
      {
        sub_1006DB778((uint64_t)a1);
      }
    }
    if (a1[716] == 255 && a1[711] && !a1[712])
    {
      int v12 = sub_1006D9358((uint64_t)a1, 1, 1);
      if (v12)
      {
        int v13 = v12;
        long long v14 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          int v15 = 67109120;
          int v16 = v13;
          _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "enableADVBuffering(NO) failed with result %d", (uint8_t *)&v15, 8u);
        }
      }
      else
      {
        sub_1006DB778((uint64_t)a1);
      }
    }
  }
}

void sub_100014B58(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, void *a5@<X4>, long long *a6@<X5>, unsigned __int8 *a7@<X8>)
{
  unint64_t v58 = __PAIR64__(a3, a4);
  uuid_t uu = a7;
  id v61 = a5;
  v73[0] = 0;
  v73[1] = 0;
  sub_10003AED0((uint64_t)v73, a1 + 88);
  unint64_t v60 = a2;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT)) {
      sub_100792EA0();
    }
    goto LABEL_12;
  }
  if (BYTE6(a2) && (BYTE6(a2) != 1 || (a2 & 0xC00000000000) == 0x800000000000))
  {
LABEL_12:
    int v9 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
    {
      int v10 = sub_1006AD3F0();
      sub_100792E50(v10, (uint64_t)__p, v9);
    }
    goto LABEL_14;
  }
  if (HIDWORD(v58))
  {
    if (v61 && (v58 & 1) == 0)
    {
LABEL_8:
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
        sub_100793064();
      }
LABEL_14:
      uuid_clear(uu);
      goto LABEL_15;
    }
  }
  else if (v61)
  {
    goto LABEL_8;
  }
  if (a6)
  {
    id v62 = objc_opt_new();
    long long v71 = 0u;
    long long v72 = 0u;
    long long v69 = 0u;
    long long v70 = 0u;
    id v11 = *(id *)(a1 + 168);
    id v12 = [v11 countByEnumeratingWithState:&v69 objects:v86 count:16];
    if (v12)
    {
      uint64_t v13 = *(void *)v70;
      do
      {
        for (xpc_object_t i = 0; i != v12; xpc_object_t i = (char *)i + 1)
        {
          if (*(void *)v70 != v13) {
            objc_enumerationMutation(v11);
          }
          id v15 = [[*(id *)(a1 + 168) objectForKey:*(void *)(*((void *)&v69 + 1) + 8 * i) v58 uu];
          int v16 = (id *)v15;
          if (!*((void *)v15 + 3))
          {
            *(_DWORD *)&dst[3] = 0;
            *(_DWORD *)dst = 0;
            uint64_t v17 = sub_1002284B8(*((void *)v15 + 2));
            *(_DWORD *)dst = v17;
            dst[6] = BYTE6(v17);
            *(_WORD *)&dst[4] = WORD2(v17);
            if (sub_100234C1C((uint64_t)dst, a6))
            {
              int v18 = qword_100A19E78;
              if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
              {
                sub_10004BDF8();
                if (v81 >= 0) {
                  __int16 v19 = __p;
                }
                else {
                  __int16 v19 = *(unsigned char **)__p;
                }
                id v20 = *v16;
                *(_DWORD *)buf = 136315394;
                uint64_t v83 = v19;
                __int16 v84 = 2112;
                id v85 = v20;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Removing previous instances of cloud device with address:%s UUID:%@ from device cache", buf, 0x16u);
                if (v81 < 0) {
                  operator delete(*(void **)__p);
                }
              }
              id v21 = *v16;
              [v62 addObject:v21];
            }
          }
        }
        id v12 = [v11 countByEnumeratingWithState:&v69 objects:v86 count:16];
      }
      while (v12);
    }

    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    id v22 = v62;
    id v23 = [v22 countByEnumeratingWithState:&v65 objects:v77 count:16];
    if (v23)
    {
      uint64_t v24 = *(void *)v66;
      do
      {
        for (j = 0; j != v23; j = (char *)j + 1)
        {
          if (*(void *)v66 != v24) {
            objc_enumerationMutation(v22);
          }
          sub_1006B7A50(a1, *(void **)(*((void *)&v65 + 1) + 8 * (void)j));
        }
        id v23 = [v22 countByEnumeratingWithState:&v65 objects:v77 count:16];
      }
      while (v23);
    }

    [v22 removeAllObjects];
    uint64_t v26 = sub_100361570(*(void *)(a1 + 248), v60);
    if (v26)
    {
      sub_100361908(*(void *)(a1 + 248), v26);
      sub_1006CFB8C(v26);
      operator delete();
    }
  }
  *(void *)dst = 0;
  uint64_t v76 = 0;
  sub_10001586C(a1, v60, dst);
  if (!uuid_is_null(dst) || (sub_1000156CC(a1, v60, __p), uuid_copy(dst, __p), !uuid_is_null(dst)))
  {
    uuid_copy(uu, dst);
    goto LABEL_15;
  }
  uint64_t v27 = *(void **)(a1 + 184);
  if (v27)
  {
    uint64_t v28 = a1 + 184;
    do
    {
      unint64_t v29 = v27[4];
      BOOL v30 = v29 >= v60;
      if (v29 >= v60) {
        uint64_t v31 = v27;
      }
      else {
        uint64_t v31 = v27 + 1;
      }
      if (v30) {
        uint64_t v28 = (uint64_t)v27;
      }
      uint64_t v27 = (void *)*v31;
    }
    while (*v31);
    if (v28 != a1 + 184 && *(void *)(v28 + 32) <= v60)
    {
      if (!v61)
      {
        sub_1000305B0(a1, (unsigned __int8 *)(v28 + 40));
        uuid_copy(uu, (const unsigned __int8 *)(v28 + 40));
        goto LABEL_15;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
      {
        sub_1006AD3F0();
        id v48 = (id)objc_claimAutoreleasedReturnValue();
        sub_100401EBC((const unsigned __int8 *)(v28 + 40), __p);
        sub_10079300C();
      }
      goto LABEL_86;
    }
  }
  if (*(unsigned char *)(a1 + 164)) {
    BOOL v32 = 1;
  }
  else {
    BOOL v32 = v58 == 0;
  }
  if (v32) {
    goto LABEL_63;
  }
  uint64_t v38 = sub_100035F54();
  int v39 = (*(uint64_t (**)(uint64_t))(*(void *)v38 + 432))(v38);
  unint64_t v40 = qword_100A19E78;
  BOOL v41 = os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT);
  if (!v39)
  {
    if (v41)
    {
      long long v47 = sub_1006AD3F0();
      *(_DWORD *)__p = 138543362;
      *(void *)&__p[4] = v47;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Ignoring non-paired device address \"%{public}@\" as the protected cache has not been loaded", __p, 0xCu);
    }
LABEL_86:
    uuid_clear(uu);
    goto LABEL_15;
  }
  if (v41)
  {
    long long v42 = sub_1006AD3F0();
    *(_DWORD *)__p = 138543362;
    *(void *)&__p[4] = v42;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Warning: Diagnostics mode detected, ignoring non-paired device cached, creating a new identifier for device address \"%{public}@\" as the protected cache has not been loaded", __p, 0xCu);
  }
LABEL_63:
  uint64_t v33 = (id *)sub_100361570(*(void *)(a1 + 248), v60);
  uint64_t v34 = v33;
  if (!v33)
  {
    if ((v58 & 0x100000000) != 0)
    {
      memset(out, 0, sizeof(out));
      uuid_clear(out);
      if (!v61)
      {
        do
        {
          *(_DWORD *)((char *)v64 + 3) = 0;
          v64[0] = 0;
          uint64_t v50 = sub_1002284B8(v60);
          v64[0] = v50;
          BYTE2(v64[1]) = BYTE6(v50);
          LOWORD(v64[1]) = WORD2(v50);
          if (uuid_is_null(out)) {
            int v51 = 7;
          }
          else {
            int v51 = 0;
          }
          sub_10010D328(out, (uint64_t)v64, v51);
          long long v52 = sub_100031234(out);
          unint64_t v53 = (unint64_t)[*(id *)(a1 + 168) objectForKey:v52];
          uint64_t v54 = v53 | sub_100361428(*(void *)(a1 + 248), v52);
          BOOL v55 = v54 != 0;
          if (v54)
          {
            uint64_t v56 = qword_100A19E78;
            if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG))
            {
              sub_100401EBC(out, __p);
              char v57 = __p;
              if (v81 < 0) {
                char v57 = *(unsigned char **)__p;
              }
              *(_DWORD *)buf = 136446210;
              uint64_t v83 = v57;
              _os_log_debug_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEBUG, "UUID generation collision - UUID \"%{public}s\" already exists!", buf, 0xCu);
              if (v81 < 0) {
                operator delete(*(void **)__p);
              }
            }
          }
        }
        while (v55);
LABEL_78:
        if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEBUG))
        {
          sub_1006AD3F0();
          id v46 = (id)objc_claimAutoreleasedReturnValue();
          sub_100401EBC(out, __p);
          sub_100792ED4();
        }
        operator new();
      }
      sub_1000305AC(__p, v61);
      uuid_copy(out, __p);
      long long v44 = sub_100031234(out);
      unint64_t v45 = (unint64_t)[*(id *)(a1 + 168) objectForKey:v44];
      if (!(v45 | sub_100361428(*(void *)(a1 + 248), v44)))
      {

        goto LABEL_78;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
      {
        sub_100401EBC(out, __p);
        sub_100792F2C();
      }
      uuid_clear(uu);
    }
    else
    {
      uuid_clear(uu);
    }
    goto LABEL_15;
  }
  id v35 = [*v33 copy];
  uint64_t v36 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v37 = sub_1006AD3F0();
    *(_DWORD *)__p = 138543618;
    *(void *)&__p[4] = v37;
    __int16 v79 = 2114;
    id v80 = v35;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Address \"%{public}@\" is already associated with device \"%{public}@\"", __p, 0x16u);
  }
  if (v61)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR))
    {
      sub_1006AD3F0();
      objc_claimAutoreleasedReturnValue();
      sub_100792FC8();
    }
    uuid_clear(uu);
  }
  else
  {
    if ([*(id *)(a1 + 168) objectForKey:v35]
      && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
    {
      sub_1006AD3F0();
      objc_claimAutoreleasedReturnValue();
      sub_100792F84();
    }

    sub_1006BF8C0(a1, (uint64_t)v34);
    sub_1000305AC(uu, *v34);
  }
LABEL_15:
  sub_10003AFB4((uint64_t)v73);
}

void sub_100015574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_10003AFB4((uint64_t)&a37);
  _Unwind_Resume(a1);
}

uint64_t sub_1000156CC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 *a3@<X8>)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v6 = *(id *)(a1 + 280);
  id v7 = [v6 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v16;
    do
    {
      for (xpc_object_t i = 0; i != v7; xpc_object_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void *)(*((void *)&v15 + 1) + 8 * i);
        id v11 = [[*(id *)(a1 + 168) objectForKey:v10];
        if (sub_1006C7B60((uint64_t)v11) && *((unsigned char *)v11 + 164))
        {
          uint64_t v12 = v11[7];
          if (v12 == a2 && v12 != 0)
          {
            sub_1000305AC(a3, v10);

            return sub_10003AFB4((uint64_t)v19);
          }
        }
      }
      id v7 = [v6 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v7);
  }

  uuid_clear(a3);
  return sub_10003AFB4((uint64_t)v19);
}

void sub_100015834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001586C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, unsigned __int8 *a3@<X8>)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 88);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v6 = *(id *)(a1 + 280);
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v21 count:16];
  if (v7)
  {
    uint64_t v8 = *(void *)v17;
    do
    {
      for (xpc_object_t i = 0; i != v7; xpc_object_t i = (char *)i + 1)
      {
        if (*(void *)v17 != v8) {
          objc_enumerationMutation(v6);
        }
        uint64_t v10 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        sub_1006C6648(a1, v10, 0, (uint64_t)v14);
        if (v15)
        {
          id v11 = v15;
          do
          {
            unint64_t v12 = v11[4];
            if (v12 <= a2)
            {
              if (v12 >= a2)
              {
                sub_1000486F0((uint64_t)v14, v15);
                sub_1000305AC(a3, v10);

                return sub_10003AFB4((uint64_t)v20);
              }
              ++v11;
            }
            id v11 = (void *)*v11;
          }
          while (v11);
        }
        sub_1000486F0((uint64_t)v14, v15);
      }
      id v7 = [v6 countByEnumeratingWithState:&v16 objects:v21 count:16];
    }
    while (v7);
  }

  uuid_clear(a3);
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1000159F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100015A24()
{
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  *(_OWORD *)__p = 0u;
  long long v18 = 0u;
  memset(v16, 0, sizeof(v16));
  sub_1000419CC((uint64_t)v16);
  *(_DWORD *)((char *)v16 + *(void *)(*(void *)&v16[0] - 24) + 8) &= ~1u;
  sub_10003AB28((uint64_t)v16);
  sub_10003AB28((uint64_t)v16);
  uint64_t v0 = std::ostream::operator<<();
  sub_10003AB28(v0);
  sub_10003AB28((uint64_t)v16);
  uint64_t v1 = std::ostream::operator<<();
  sub_10003AB28(v1);
  sub_10003AB28((uint64_t)v16);
  uint64_t v2 = std::ostream::operator<<();
  sub_10003AB28(v2);
  sub_10003AB28((uint64_t)v16);
  uint64_t v3 = std::ostream::operator<<();
  sub_10003AB28(v3);
  sub_10003AB28((uint64_t)v16);
  uint64_t v4 = std::ostream::operator<<();
  sub_10003AB28(v4);
  sub_10003AB28((uint64_t)v16);
  uint64_t v5 = std::ostream::operator<<();
  sub_10003AB28(v5);
  sub_10003AB28((uint64_t)v16);
  uint64_t v6 = std::ostream::operator<<();
  sub_10003AB28(v6);
  sub_10003AB28((uint64_t)v16);
  uint64_t v7 = std::ostream::operator<<();
  sub_10003AB28(v7);
  sub_10003AB28((uint64_t)v16);
  uint64_t v8 = std::ostream::operator<<();
  sub_10003AB28(v8);
  sub_10003AB28((uint64_t)v16);
  uint64_t v9 = std::ostream::operator<<();
  sub_10003AB28(v9);
  sub_10003AB28((uint64_t)v16);
  uint64_t v10 = std::ostream::operator<<();
  sub_10003AB28(v10);
  sub_10003AB28((uint64_t)v16);
  uint64_t v11 = std::ostream::operator<<();
  sub_10003AB28(v11);
  sub_10003AB28((uint64_t)v16);
  uint64_t v12 = std::ostream::operator<<();
  sub_10003AB28(v12);
  sub_10003AB28((uint64_t)v16);
  uint64_t v13 = std::ostream::operator<<();
  sub_10003AB28(v13);
  std::ios_base::getloc((const std::ios_base *)((char *)v16 + *(void *)(*(void *)&v16[0] - 24)));
  long long v14 = std::locale::use_facet(&v30, &std::ctype<char>::id);
  ((void (*)(const std::locale::facet *, uint64_t))v14->__vftable[2].~facet_0)(v14, 10);
  std::locale::~locale(&v30);
  std::ostream::put();
  std::ostream::flush();
  std::stringbuf::str();
  if (SHIBYTE(v18) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100015E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::locale::~locale((std::locale *)(v9 - 40));
  sub_10027E318((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100015EB8(uint64_t a1, int *a2)
{
  CFDictionaryRef v3 = IOPSCopyExternalPowerAdapterDetails();
  if (!v3)
  {
    CFDictionaryRef v10 = (const __CFDictionary *)IOPSCopyPowerSourcesInfo();
    if (!v10)
    {
      LODWORD(v6) = 0;
      return v6 ^ 1;
    }
    CFDictionaryRef v4 = v10;
    CFStringRef v11 = IOPSGetProvidingPowerSourceType(v10);
    if (v11 && CFEqual(v11, @"Battery Power"))
    {
      *a2 = 0;
      LODWORD(v6) = 1;
      goto LABEL_15;
    }
LABEL_14:
    LODWORD(v6) = 0;
    goto LABEL_15;
  }
  CFDictionaryRef v4 = v3;
  if (!CFDictionaryContainsKey(v3, @"FamilyCode")) {
    goto LABEL_14;
  }
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v4, @"FamilyCode");
  CFNumberRef v6 = Value;
  if (Value)
  {
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFNumberGetTypeID())
    {
      int valuePtr = 0;
      int v8 = CFNumberGetValue(v6, kCFNumberIntType, &valuePtr);
      LODWORD(v6) = v8 != 0;
      if (v8)
      {
        if (valuePtr == -536723452) {
          int v9 = 2;
        }
        else {
          int v9 = 1;
        }
        *a2 = v9;
      }
      goto LABEL_15;
    }
    goto LABEL_14;
  }
LABEL_15:
  CFRelease(v4);
  return v6 ^ 1;
}

void sub_100015FBC(uint64_t a1, xpc_object_t object)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v5 = *(void *)(a1 + 32);
    if (v5) {
      sub_100016FA4(v5);
    }
    (*(void (**)(uint64_t, xpc_object_t))(*(void *)a1 + 16))(a1, object);
    uint64_t v6 = *(void *)(a1 + 32);
    if (v6)
    {
      sub_100007C0C(v6);
    }
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    CFTypeID v7 = qword_100A19EC8;
    if (object == &_xpc_error_connection_invalid)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        int v8 = (void *)(a1 + 56);
        if (*(char *)(a1 + 79) < 0) {
          int v8 = (void *)*v8;
        }
        int v9 = 136446210;
        CFDictionaryRef v10 = v8;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Closed XPC connection to session \"%{public}s\"", (uint8_t *)&v9, 0xCu);
      }
      (*(void (**)(uint64_t, void))(*(void *)a1 + 24))(a1, 0);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_1007532BC(object);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_100753340();
  }
}

void sub_1000161A4(char *a1, xpc_object_t xdict)
{
  unsigned int int64 = xpc_dictionary_get_int64(xdict, "kCBMsgId");
  uint64_t v5 = (*(uint64_t (**)(char *, void))(*(void *)a1 + 32))(a1, (unsigned __int16)int64);
  uint64_t v7 = v6 & 1;
  int v8 = qword_100A19EC8;
  if (v7 | v5)
  {
    int v9 = (void (*)(char *, xpc_object_t))v5;
    uint64_t v10 = v6;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = (*(uint64_t (**)(char *, void))(*(void *)a1 + 56))(a1, (unsigned __int16)int64);
      uint64_t v12 = a1 + 56;
      if (a1[79] < 0) {
        uint64_t v12 = (void *)*v12;
      }
      int v20 = 136446466;
      uint64_t v21 = v11;
      __int16 v22 = 2082;
      long long v23 = v12;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Received XPC message \"%{public}s\" from session \"%{public}s\"", (uint8_t *)&v20, 0x16u);
    }
    sub_1000175A0(a1, xdict);
    if (*((void *)a1 + 16)
      && ((int v13 = *((_DWORD *)a1 + 34), v13 == 10)
       || v13 == 5
       || v13 == 4
       && ((*(uint64_t (**)(char *, void))(*(void *)a1 + 40))(a1, (unsigned __int16)int64) & 1) != 0
       || ((*(uint64_t (**)(char *, void))(*(void *)a1 + 48))(a1, (unsigned __int16)int64) & 1) != 0)
      || int64 <= 7 && ((1 << int64) & 0x96) != 0)
    {
      long long v14 = &a1[v10 >> 1];
      if (v7) {
        int v9 = *(void (**)(char *, xpc_object_t))(*(void *)v14 + v9);
      }
      v9(v14, xdict);
    }
    else
    {
      uint64_t v15 = *((void *)a1 + 16);
      long long v16 = qword_100A19EC8;
      BOOL v17 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR);
      if (v15)
      {
        if (v17) {
          sub_1007735A0((uint64_t)a1, v16);
        }
        xpc_object_t reply = xpc_dictionary_create_reply(xdict);
        if (reply)
        {
          long long v19 = reply;
          xpc_dictionary_set_int64(reply, "kCBMsgArgResult", 12);
          xpc_connection_send_message(*((xpc_connection_t *)a1 + 2), v19);
          xpc_release(v19);
        }
      }
      else if (v17)
      {
        sub_10077355C(v16);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_1007734E4(int64, v8);
  }
}

char *sub_100016484(uint64_t a1, int a2)
{
  return off_1009B6760[a2];
}

void (*sub_100016494(uint64_t a1, int a2))(uint64_t a1, void *a2)
{
  BOOL result = sub_100018790;
  switch(a2)
  {
    case 1:
      return result;
    case 2:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_100056C28;
      goto LABEL_139;
    case 4:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_100586C88;
      goto LABEL_139;
    case 8:
      CFDictionaryRef v3 = sub_100589830;
      goto LABEL_139;
    case 9:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_100589910;
      goto LABEL_139;
    case 10:
      CFDictionaryRef v3 = sub_10058998C;
      goto LABEL_139;
    case 11:
      CFDictionaryRef v3 = sub_100589A60;
      goto LABEL_139;
    case 12:
      CFDictionaryRef v3 = sub_100589CB8;
      goto LABEL_139;
    case 13:
      CFDictionaryRef v3 = sub_10058A0C0;
      goto LABEL_139;
    case 14:
      CFDictionaryRef v3 = sub_10058A33C;
      goto LABEL_139;
    case 15:
      CFDictionaryRef v3 = sub_10058A464;
      goto LABEL_139;
    case 19:
      CFDictionaryRef v3 = sub_10058CCC4;
      goto LABEL_139;
    case 20:
      CFDictionaryRef v3 = sub_10058CEF0;
      goto LABEL_139;
    case 25:
      CFDictionaryRef v3 = sub_10059E71C;
      goto LABEL_139;
    case 26:
      CFDictionaryRef v3 = sub_10059E990;
      goto LABEL_139;
    case 27:
      CFDictionaryRef v3 = sub_10058A614;
      goto LABEL_139;
    case 28:
      CFDictionaryRef v3 = sub_10058A6BC;
      goto LABEL_139;
    case 30:
      CFDictionaryRef v3 = sub_10058AB4C;
      goto LABEL_139;
    case 31:
      CFDictionaryRef v3 = sub_10058AA10;
      goto LABEL_139;
    case 32:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10058B4CC;
      goto LABEL_139;
    case 33:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10058B7E4;
      goto LABEL_139;
    case 34:
      CFDictionaryRef v3 = sub_10058B874;
      goto LABEL_139;
    case 35:
      CFDictionaryRef v3 = sub_10058BBB8;
      goto LABEL_139;
    case 36:
      CFDictionaryRef v3 = sub_10058BEC8;
      goto LABEL_139;
    case 37:
      CFDictionaryRef v3 = sub_10058C3FC;
      goto LABEL_139;
    case 38:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10058C4C0;
      goto LABEL_139;
    case 39:
      CFDictionaryRef v3 = sub_10058C53C;
      goto LABEL_139;
    case 40:
      CFDictionaryRef v3 = sub_10058C70C;
      goto LABEL_139;
    case 41:
      CFDictionaryRef v3 = sub_10058C90C;
      goto LABEL_139;
    case 42:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10058C994;
      goto LABEL_139;
    case 43:
      CFDictionaryRef v3 = sub_10058D1CC;
      goto LABEL_139;
    case 44:
      CFDictionaryRef v3 = sub_10058D374;
      goto LABEL_139;
    case 45:
      CFDictionaryRef v3 = sub_10058D5D4;
      goto LABEL_139;
    case 46:
      CFDictionaryRef v3 = sub_10058D79C;
      goto LABEL_139;
    case 60:
      CFDictionaryRef v3 = sub_10058D010;
      goto LABEL_139;
    case 63:
      CFDictionaryRef v3 = sub_10058D97C;
      goto LABEL_139;
    case 64:
      CFDictionaryRef v3 = sub_10058DD20;
      goto LABEL_139;
    case 65:
      CFDictionaryRef v3 = sub_10058DF58;
      goto LABEL_139;
    case 66:
      CFDictionaryRef v3 = sub_10058E0A4;
      goto LABEL_139;
    case 67:
      CFDictionaryRef v3 = sub_10058E4D0;
      goto LABEL_139;
    case 68:
      CFDictionaryRef v3 = sub_10058FAE4;
      goto LABEL_139;
    case 69:
      CFDictionaryRef v3 = sub_10058E930;
      goto LABEL_139;
    case 70:
      CFDictionaryRef v3 = sub_10058F078;
      goto LABEL_139;
    case 71:
      CFDictionaryRef v3 = sub_10058FD04;
      goto LABEL_139;
    case 72:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10059056C;
      goto LABEL_139;
    case 73:
      CFDictionaryRef v3 = sub_1005905E8;
      goto LABEL_139;
    case 74:
      CFDictionaryRef v3 = sub_1005922B0;
      goto LABEL_139;
    case 75:
      CFDictionaryRef v3 = sub_100592644;
      goto LABEL_139;
    case 76:
      CFDictionaryRef v3 = sub_1005929DC;
      goto LABEL_139;
    case 77:
      CFDictionaryRef v3 = sub_100592FE8;
      goto LABEL_139;
    case 78:
      CFDictionaryRef v3 = sub_10059C06C;
      goto LABEL_139;
    case 79:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10059BC08;
      goto LABEL_139;
    case 80:
      CFDictionaryRef v3 = sub_10059C6E0;
      goto LABEL_139;
    case 81:
      CFDictionaryRef v3 = sub_10059B070;
      goto LABEL_139;
    case 82:
      CFDictionaryRef v3 = sub_10059CCA4;
      goto LABEL_139;
    case 83:
      CFDictionaryRef v3 = sub_10058FBB8;
      goto LABEL_139;
    case 93:
      CFDictionaryRef v3 = sub_100593124;
      goto LABEL_139;
    case 95:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_100593744;
      goto LABEL_139;
    case 96:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_100593788;
      goto LABEL_139;
    case 97:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_1005937CC;
      goto LABEL_139;
    case 98:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_100593854;
      goto LABEL_139;
    case 99:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_1005938DC;
      goto LABEL_139;
    case 100:
      CFDictionaryRef v3 = sub_1005939BC;
      goto LABEL_139;
    case 101:
      CFDictionaryRef v3 = sub_100593C34;
      goto LABEL_139;
    case 102:
      CFDictionaryRef v3 = sub_100593DC8;
      goto LABEL_139;
    case 103:
      CFDictionaryRef v3 = sub_100593FB4;
      goto LABEL_139;
    case 104:
      CFDictionaryRef v3 = sub_1005941D0;
      goto LABEL_139;
    case 105:
      CFDictionaryRef v3 = sub_100594360;
      goto LABEL_139;
    case 106:
      CFDictionaryRef v3 = sub_100594590;
      goto LABEL_139;
    case 107:
      CFDictionaryRef v3 = sub_1005949D4;
      goto LABEL_139;
    case 108:
      CFDictionaryRef v3 = sub_100595310;
      goto LABEL_139;
    case 109:
      CFDictionaryRef v3 = sub_100595A98;
      goto LABEL_139;
    case 111:
      CFDictionaryRef v3 = sub_10058E238;
      goto LABEL_139;
    case 112:
      CFDictionaryRef v3 = sub_10059606C;
      goto LABEL_139;
    case 113:
      CFDictionaryRef v3 = sub_100596220;
      goto LABEL_139;
    case 114:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10059647C;
      goto LABEL_139;
    case 115:
      CFDictionaryRef v3 = sub_100596600;
      goto LABEL_139;
    case 116:
      CFDictionaryRef v3 = sub_100596D48;
      goto LABEL_139;
    case 117:
      CFDictionaryRef v3 = sub_1005969A4;
      goto LABEL_139;
    case 118:
      CFDictionaryRef v3 = sub_100597324;
      goto LABEL_139;
    case 119:
      CFDictionaryRef v3 = sub_1005976C8;
      goto LABEL_139;
    case 120:
      CFDictionaryRef v3 = sub_100597E4C;
      goto LABEL_139;
    case 121:
      CFDictionaryRef v3 = sub_1005982F4;
      goto LABEL_139;
    case 122:
      CFDictionaryRef v3 = sub_1005987F4;
      goto LABEL_139;
    case 123:
      CFDictionaryRef v3 = sub_100598D94;
      goto LABEL_139;
    case 124:
      CFDictionaryRef v3 = sub_100599114;
      goto LABEL_139;
    case 125:
      CFDictionaryRef v3 = sub_100599448;
      goto LABEL_139;
    case 126:
      CFDictionaryRef v3 = sub_1005995B8;
      goto LABEL_139;
    case 127:
      CFDictionaryRef v3 = sub_1005999B0;
      goto LABEL_139;
    case 128:
      CFDictionaryRef v3 = sub_100599F48;
      goto LABEL_139;
    case 130:
      CFDictionaryRef v3 = sub_10059BCB0;
      goto LABEL_139;
    case 131:
      CFDictionaryRef v3 = sub_10059BE50;
      goto LABEL_139;
    case 132:
      CFDictionaryRef v3 = sub_10059BF54;
      goto LABEL_139;
    case 137:
      CFDictionaryRef v3 = sub_100594440;
      goto LABEL_139;
    case 140:
      CFDictionaryRef v3 = sub_10059B648;
      goto LABEL_139;
    case 141:
      CFDictionaryRef v3 = sub_10059B928;
      goto LABEL_139;
    case 142:
      CFDictionaryRef v3 = sub_10059A2A4;
      goto LABEL_139;
    case 143:
      CFDictionaryRef v3 = sub_10059A97C;
      goto LABEL_139;
    case 144:
      CFDictionaryRef v3 = sub_10059AD10;
      goto LABEL_139;
    case 145:
      CFDictionaryRef v3 = sub_10059C40C;
      goto LABEL_139;
    case 146:
      CFDictionaryRef v3 = sub_10059C520;
      goto LABEL_139;
    case 161:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10059C7F8;
      goto LABEL_139;
    case 162:
      CFDictionaryRef v3 = sub_10059C934;
      goto LABEL_139;
    case 163:
      CFDictionaryRef v3 = sub_10059CD98;
      goto LABEL_139;
    case 168:
      CFDictionaryRef v3 = sub_10059D07C;
      goto LABEL_139;
    case 169:
      CFDictionaryRef v3 = sub_10059D2B8;
      goto LABEL_139;
    case 170:
      CFDictionaryRef v3 = sub_10059D4B0;
      goto LABEL_139;
    case 171:
      CFDictionaryRef v3 = sub_10059D850;
      goto LABEL_139;
    case 172:
      CFDictionaryRef v3 = sub_10059DD30;
      goto LABEL_139;
    case 173:
      CFDictionaryRef v3 = sub_10059E058;
      goto LABEL_139;
    case 174:
      CFDictionaryRef v3 = sub_10059E180;
      goto LABEL_139;
    case 175:
      CFDictionaryRef v3 = sub_10059E29C;
      goto LABEL_139;
    case 176:
      CFDictionaryRef v3 = sub_10059E3E8;
      goto LABEL_139;
    case 177:
      CFDictionaryRef v3 = sub_10059E5C8;
      goto LABEL_139;
    case 183:
      CFDictionaryRef v3 = sub_10059EAC8;
      goto LABEL_139;
    case 184:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10059ED4C;
      goto LABEL_139;
    case 186:
      CFDictionaryRef v3 = sub_10059EED4;
      goto LABEL_139;
    case 187:
      CFDictionaryRef v3 = sub_10059F074;
      goto LABEL_139;
    case 188:
      CFDictionaryRef v3 = sub_10059F254;
      goto LABEL_139;
    case 191:
      CFDictionaryRef v3 = sub_10059F434;
      goto LABEL_139;
    case 192:
      CFDictionaryRef v3 = sub_10059F57C;
      goto LABEL_139;
    case 194:
      CFDictionaryRef v3 = sub_10059F7B8;
      goto LABEL_139;
    case 195:
      CFDictionaryRef v3 = sub_10059F914;
      goto LABEL_139;
    case 201:
      CFDictionaryRef v3 = sub_10059FA80;
      goto LABEL_139;
    case 202:
      CFDictionaryRef v3 = sub_10059FC98;
      goto LABEL_139;
    case 205:
      CFDictionaryRef v3 = sub_10059FF98;
      goto LABEL_139;
    case 206:
      CFDictionaryRef v3 = sub_1005A0414;
      goto LABEL_139;
    case 207:
      CFDictionaryRef v3 = sub_100586D04;
      goto LABEL_139;
    case 208:
      CFDictionaryRef v3 = sub_100586E3C;
      goto LABEL_139;
    case 211:
      CFDictionaryRef v3 = sub_10059C244;
      goto LABEL_139;
    case 217:
      CFDictionaryRef v3 = sub_1005A0670;
      goto LABEL_139;
    case 218:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_10058F7C0;
      goto LABEL_139;
    case 219:
      CFDictionaryRef v3 = sub_1005A06D8;
      goto LABEL_139;
    case 220:
      CFDictionaryRef v3 = sub_10058F840;
      goto LABEL_139;
    case 222:
      CFDictionaryRef v3 = (void (*)(uint64_t, void *))sub_1005A0F38;
LABEL_139:
      BOOL result = v3;
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077BD88();
      }
      BOOL result = 0;
      break;
  }
  return result;
}

void sub_100016FA4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  *(_DWORD *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 4) = 1;
  ++*(_DWORD *)(a1 + 8);
  if (!*(void *)(a1 + 16)) {
    sub_10000A5C4((dispatch_source_t *)a1);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_100017004(void *a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009BB268);
  }
  uint64_t v4 = sub_100019C0C((void *)qword_1009F8160, a2);
  uint64_t v5 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 8))(v5))
  {
    uint64_t v6 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      if (v4)
      {
        sub_10003AE4C(v4, (uint64_t)__p);
        if (v19 >= 0) {
          uint64_t v7 = __p;
        }
        else {
          uint64_t v7 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315394;
        uint64_t v21 = "sessionDetached";
        __int16 v22 = 2082;
        long long v23 = (const char *)v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s - session %{public}s is detaching", buf, 0x16u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)buf = 136315394;
        uint64_t v21 = "sessionDetached";
        __int16 v22 = 2082;
        long long v23 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "%s - session %{public}s is detaching", buf, 0x16u);
      }
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, (uint64_t)(a1 + 6));
  int v8 = (unint64_t *)a1[23];
  if (v8 == (unint64_t *)a1[24]) {
    goto LABEL_26;
  }
  do
  {
    unint64_t v9 = *v8;
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009BB268);
    }
    if (sub_1000181D0(qword_1009F8160, v9) == a2)
    {
      uint64_t v11 = a1[14];
      if (v11) {
        sub_1006068C0(v11, v9);
      }
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009BB268);
      }
      sub_1005536D8(qword_1009F8160, v9);
      uint64_t v12 = (unint64_t *)a1[24];
      int64_t v13 = (char *)v12 - (char *)(v8 + 1);
      if (v12 != v8 + 1) {
        memmove(v8, v8 + 1, (char *)v12 - (char *)(v8 + 1));
      }
      uint64_t v10 = (unint64_t *)((char *)v8 + v13);
      a1[24] = (char *)v8 + v13;
    }
    else
    {
      ++v8;
      uint64_t v10 = (unint64_t *)a1[24];
    }
  }
  while (v8 != v10);
  if (v10 == (unint64_t *)a1[23])
  {
LABEL_26:
    uint64_t v14 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
    {
      uint64_t v15 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        uint64_t v21 = "sessionDetached";
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "%s - deleting fAgent as fHandleList size is 0", buf, 0xCu);
      }
    }
    uint64_t v16 = a1[14];
    if (v16) {
      (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
    }
    a1[14] = 0;
  }
  return sub_10003AFB4((uint64_t)__p);
}

void sub_100017364(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100017388(uint64_t a1, int64_t a2, void *a3)
{
  id v6 = a3;
  xpc_object_t v5 = sub_1000434C8(v6);
  sub_1000173FC(a1, a2, v5, 1);
}

void sub_1000173E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000173FC(uint64_t a1, int64_t value, void *a3, int a4)
{
  int v6 = value;
  *(_OWORD *)keys = *(_OWORD *)off_1009B26F0;
  values[0] = xpc_int64_create(value);
  values[1] = a3;
  if (((v6 - 56) > 0x1C || ((1 << (v6 - 56)) & 0x10000081) == 0) && v6 != 196)
  {
    int v8 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
      sub_100773684((char *)a1, v6, v8);
    }
  }
  if (a3) {
    size_t v9 = 2;
  }
  else {
    size_t v9 = 1;
  }
  xpc_object_t v10 = xpc_dictionary_create((const char *const *)keys, values, v9);
  sub_1000175A0((char *)a1, v10);
  uint64_t v11 = *(_xpc_connection_s **)(a1 + 16);
  if (v11)
  {
    xpc_connection_send_message(v11, v10);
  }
  else
  {
    uint64_t v12 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      int64_t v13 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        int64_t v13 = (void *)*v13;
      }
      int v14 = 136446210;
      uint64_t v15 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Invalid Connection on session \"%{public}s\", ignored.", (uint8_t *)&v14, 0xCu);
    }
  }
  xpc_release(v10);
  xpc_release(values[0]);
  if (a3)
  {
    if (a4) {
      xpc_release(a3);
    }
  }
}

void sub_1000175A0(char *a1, void *a2)
{
  uint64_t v4 = sub_100017768();
  int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v4 + 448))(v4);
  if (a2 && v5)
  {
    if (xpc_get_type(a2) == (xpc_type_t)&_xpc_type_error)
    {
      uint64_t v11 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100773640(v11);
      }
    }
    else
    {
      int v6 = xpc_copy_description(a2);
      unsigned __int16 int64 = xpc_dictionary_get_int64(a2, "kCBMsgId");
      int v8 = qword_100A19FF0;
      if (os_log_type_enabled((os_log_t)qword_100A19FF0, OS_LOG_TYPE_DEFAULT))
      {
        size_t v9 = a1 + 56;
        if (a1[79] < 0) {
          size_t v9 = (void *)*v9;
        }
        uint64_t v10 = (*(uint64_t (**)(char *, void))(*(void *)a1 + 56))(a1, int64);
        int v12 = 136446978;
        int64_t v13 = v9;
        __int16 v14 = 2082;
        uint64_t v15 = v10;
        __int16 v16 = 1024;
        int count = xpc_dictionary_get_count(a2);
        __int16 v18 = 2080;
        char v19 = v6;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Msg:\"%{public}s\", Session:\"%{public}s\", Count:%d, xpc_copy_description(args): %s ", (uint8_t *)&v12, 0x26u);
      }
      free(v6);
    }
  }
}

uint64_t sub_100017768()
{
  if (qword_100A124D8 != -1) {
    dispatch_once(&qword_100A124D8, &stru_1009A9730);
  }
  (*(void (**)(uint64_t))(*(void *)qword_100A124D0 + 40))(qword_100A124D0);
  return qword_100A124D0;
}

uint64_t sub_1000177DC(uint64_t a1)
{
  v11[0] = 0;
  v11[1] = 0;
  uint64_t v2 = sub_10003AED0((uint64_t)v11, a1 + 296);
  if ((byte_100A123C8 & 1) == 0)
  {
    byte_100A123C8 = 1;
    sub_10003AFE8(v2);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009A7798);
    }
    sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 8);
    __int16 v10 = 0;
    char v9 = 0;
    sub_100340C24((unsigned char *)a1, (BOOL *)&v10 + 1, (BOOL *)&v10, (unsigned __int8 *)&v9);
    uint64_t v3 = sub_10003FB34();
    sub_100114FA0(0, v9, *(_DWORD *)(v3 + 712));
    sub_100114F64(sub_100341174);
    if (*(_DWORD *)(a1 + 20) == -1)
    {
      uint64_t v4 = *(NSObject **)(a1 + 24);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1003411E8;
      handler[3] = &unk_1009A7640;
      handler[4] = a1;
      notify_register_dispatch("com.apple.MCX._managementStatusChangedForDomains", (int *)(a1 + 20), v4, handler);
    }
    if (*(_DWORD *)(a1 + 16) == -1)
    {
      int v5 = *(NSObject **)(a1 + 24);
      v7[0] = _NSConcreteStackBlock;
      v7[1] = 3221225472;
      _DWORD v7[2] = sub_100341210;
      v7[3] = &unk_1009A7640;
      void v7[4] = a1;
      notify_register_dispatch("com.apple.bluetooth.prefsChanged", (int *)(a1 + 16), v5, v7);
    }
    sub_10025B94C(sub_100340840);
    (**(void (***)(uint64_t))a1)(a1);
    (*(void (**)(uint64_t))(*(void *)a1 + 32))(a1);
  }
  return sub_10003AFB4((uint64_t)v11);
}

void sub_1000179F0(_Unwind_Exception *a1)
{
  sub_10003AFB4(v1 - 32);
  _Unwind_Resume(a1);
}

uint64_t sub_100017A0C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 236);
}

uint64_t sub_100017A14()
{
  return os_variant_has_internal_diagnostics();
}

uint64_t sub_100017A20(void *a1, uint64_t a2)
{
  v24[0] = 0;
  v24[1] = 0;
  sub_10003AED0((uint64_t)v24, (uint64_t)(a1 + 7));
  __p = 0;
  __int16 v22 = 0;
  long long v23 = 0;
  uint64_t v4 = (unint64_t *)a1[29];
  if (v4 != (unint64_t *)a1[30])
  {
    do
    {
      unint64_t v5 = *v4;
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
      }
      if (sub_1000181D0(qword_1009F8160, v5) == a2)
      {
        int v6 = (unint64_t *)a1[30];
        int64_t v7 = (char *)v6 - (char *)(v4 + 1);
        if (v6 != v4 + 1) {
          memmove(v4, v4 + 1, (char *)v6 - (char *)(v4 + 1));
        }
        a1[30] = (char *)v4 + v7;
        if (v22 >= v23)
        {
          uint64_t v9 = v22 - __p;
          if ((unint64_t)(v9 + 1) >> 61) {
            abort();
          }
          unint64_t v10 = ((char *)v23 - (char *)__p) >> 2;
          if (v10 <= v9 + 1) {
            unint64_t v10 = v9 + 1;
          }
          if ((unint64_t)((char *)v23 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v11 = v10;
          }
          if (v11) {
            int v12 = (char *)sub_1000405F8((uint64_t)&v23, v11);
          }
          else {
            int v12 = 0;
          }
          int64_t v13 = (unint64_t *)&v12[8 * v9];
          unint64_t *v13 = v5;
          int v8 = (uint64_t *)(v13 + 1);
          __int16 v14 = v22;
          if (v22 != __p)
          {
            do
            {
              unint64_t v15 = *--v14;
              *--int64_t v13 = v15;
            }
            while (v14 != __p);
            __int16 v14 = __p;
          }
          __p = (uint64_t *)v13;
          long long v23 = (uint64_t *)&v12[8 * v11];
          if (v14) {
            operator delete(v14);
          }
        }
        else
        {
          uint64_t *v22 = v5;
          int v8 = v22 + 1;
        }
        __int16 v22 = v8;
      }
      else
      {
        ++v4;
      }
    }
    while (v4 != (unint64_t *)a1[30]);
    BOOL v17 = __p;
    __int16 v16 = v22;
    if (__p != v22)
    {
      do
      {
        unint64_t v18 = *v17;
        uint64_t v19 = sub_100457D24(a1[32], a1[33], *v17);
        sub_100457CDC((uint64_t)(a1 + 32), v19, a1[33]);
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
        }
        sub_1005536D8(qword_1009F8160, v18);
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009AEAB8);
        }
        sub_100553B9C(qword_1009F8160, v18);
        ++v17;
      }
      while (v17 != v22);
      __int16 v16 = __p;
    }
    if (v16) {
      operator delete(v16);
    }
  }
  return sub_10003AFB4((uint64_t)v24);
}

void sub_100017C84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100017CB0(void *a1, uint64_t a2)
{
  v39[0] = 0;
  v39[1] = 0;
  sub_10003AED0((uint64_t)v39, (uint64_t)(a1 + 12));
  __p = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v4 = (unint64_t *)a1[20];
  while (v4 != (unint64_t *)a1[21])
  {
    unint64_t v5 = *v4;
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009B0958);
    }
    if (sub_1000181D0(qword_1009F8160, v5) == a2)
    {
      int v6 = (unint64_t *)a1[21];
      int64_t v7 = (char *)v6 - (char *)(v4 + 1);
      if (v6 != v4 + 1) {
        memmove(v4, v4 + 1, (char *)v6 - (char *)(v4 + 1));
      }
      a1[21] = (char *)v4 + v7;
      int v8 = v37;
      if (v37 >= v38)
      {
        uint64_t v10 = ((char *)v37 - (unsigned char *)__p) >> 3;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        unint64_t v11 = ((char *)v38 - (unsigned char *)__p) >> 2;
        if (v11 <= v10 + 1) {
          unint64_t v11 = v10 + 1;
        }
        if ((unint64_t)((char *)v38 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v11;
        }
        if (v12) {
          int64_t v13 = (char *)sub_1000405F8((uint64_t)&v38, v12);
        }
        else {
          int64_t v13 = 0;
        }
        __int16 v14 = (unint64_t *)&v13[8 * v10];
        unint64_t *v14 = v5;
        uint64_t v9 = v14 + 1;
        __int16 v16 = (char *)__p;
        unint64_t v15 = (char *)v37;
        if (v37 != __p)
        {
          do
          {
            unint64_t v17 = *((void *)v15 - 1);
            v15 -= 8;
            *--__int16 v14 = v17;
          }
          while (v15 != v16);
          unint64_t v15 = (char *)__p;
        }
        __p = v14;
        uint64_t v37 = v9;
        uint64_t v38 = (unint64_t *)&v13[8 * v12];
        if (v15) {
          operator delete(v15);
        }
      }
      else
      {
        unint64_t *v37 = v5;
        uint64_t v9 = v8 + 1;
      }
      uint64_t v37 = v9;
    }
    else
    {
      ++v4;
    }
  }
  sub_10003AFE8((uint64_t)v39);
  v35[0] = 0;
  v35[1] = 0;
  sub_10003AED0((uint64_t)v35, (uint64_t)(a1 + 23));
  unint64_t v18 = (unint64_t *)__p;
  uint64_t v19 = (void *)&unk_1009F8000;
  if (__p != v37)
  {
    char v20 = 0;
    uint64_t v21 = a1 + 80;
    __int16 v22 = a1 + 83;
    do
    {
      unint64_t v23 = *v18;
      for (xpc_object_t i = (void *)a1[32]; i != a1 + 31; xpc_object_t i = (void *)*v25)
      {
        uint64_t v33 = (void *)i[2];
        if (*v33 == v23)
        {
          sub_1004B1408((uint64_t)(a1 + 31), &v33);
          long long v26 = v33;
          if (v33)
          {
            v33[2] = 0;
            free((void *)v26[1]);
            v26[1] = 0;
            v26[4] = 0;
            free((void *)v26[3]);
            v26[3] = 0;
            operator delete();
          }
          char v20 = 1;
          long long v25 = a1 + 32;
        }
        else
        {
          long long v25 = i + 1;
        }
      }
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      sub_10003AED0((uint64_t)&v33, (uint64_t)(a1 + 72));
      long long v27 = a1 + 80;
      if ((void *)a1[81] != v21)
      {
        long long v27 = (void *)a1[81];
        while (v27[2] != v23)
        {
          long long v27 = (void *)v27[1];
          if (v27 == v21)
          {
            long long v27 = a1 + 80;
            break;
          }
        }
      }
      sub_10003AFE8((uint64_t)&v33);
      if (v27 != v21) {
        sub_1004B14D8(a1, v23, 0);
      }
      sub_10003AF00((uint64_t)&v33);
      long long v28 = a1 + 83;
      if ((void *)a1[84] != v22)
      {
        long long v28 = (void *)a1[84];
        while (v28[2] != v23)
        {
          long long v28 = (void *)v28[1];
          if (v28 == v22)
          {
            long long v28 = a1 + 83;
            break;
          }
        }
      }
      sub_10003AFE8((uint64_t)&v33);
      if (v28 != v22) {
        sub_1004B170C(a1, v23, 0);
      }
      sub_10003AFB4((uint64_t)&v33);
      ++v18;
    }
    while (v18 != v37);
    uint64_t v19 = &unk_1009F8000;
    if (v20)
    {
      if (qword_1009F8070 != -1) {
        dispatch_once(&qword_1009F8070, &stru_1009B0978);
      }
      sub_1004E420C((uint64_t)off_1009F8068);
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009B0998);
      }
      sub_1004D9508();
    }
  }
  sub_10003AFE8((uint64_t)v35);
  uint64_t v29 = (unint64_t *)__p;
  if (__p != v37)
  {
    do
    {
      unint64_t v30 = *v29;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      sub_10003AED0((uint64_t)&v33, (uint64_t)(a1 + 52));
      uint64_t v31 = sub_1004B70B8(a1[60], a1[61], v30);
      sub_1004B7070((uint64_t)(a1 + 60), v31, a1[61]);
      sub_10003AFE8((uint64_t)&v33);
      sub_1004B1940((uint64_t)a1, v30);
      sub_1004B1940((uint64_t)a1, v30);
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B0958);
      }
      sub_1005536D8(v19[44], v30);
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B0958);
      }
      sub_100553B9C(v19[44], v30);
      sub_10003AFB4((uint64_t)&v33);
      ++v29;
    }
    while (v29 != v37);
  }
  sub_10003AFB4((uint64_t)v35);
  if (__p)
  {
    uint64_t v37 = (unint64_t *)__p;
    operator delete(__p);
  }
  return sub_10003AFB4((uint64_t)v39);
}

void sub_100018170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a17);
  _Unwind_Resume(a1);
}

uint64_t sub_1000181D0(uint64_t a1, unint64_t a2)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 40);
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100779B10();
    }
    goto LABEL_16;
  }
  int v6 = *(void **)(a1 + 152);
  unint64_t v5 = (void *)(a1 + 152);
  uint64_t v4 = v6;
  if (!v6) {
    goto LABEL_16;
  }
  int64_t v7 = v5;
  do
  {
    unint64_t v8 = v4[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v4;
    }
    else {
      uint64_t v10 = v4 + 1;
    }
    if (v9) {
      int64_t v7 = v4;
    }
    uint64_t v4 = (void *)*v10;
  }
  while (*v10);
  if (v7 == v5 || v7[4] > a2)
  {
LABEL_16:
    uint64_t v11 = 0;
    goto LABEL_17;
  }
  uint64_t v11 = v7[5];
LABEL_17:
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

id sub_10001828C(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = +[BTAppInteraction instance];
  sub_10001854C(a1, a2, __p);
  if (v11 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  int64_t v7 = +[NSString stringWithUTF8String:v6];
  id v8 = [v5 applicationStateForProcess:v7];

  if (v11 < 0) {
    operator delete(__p[0]);
  }

  return v8;
}

void sub_100018354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100018458(uint64_t a1, uint64_t a2)
{
  unint64_t v5 = +[BTAppInteraction instance];
  sub_10001854C(a1, a2, __p);
  if (v9 >= 0) {
    int v6 = __p;
  }
  else {
    int v6 = (void **)__p[0];
  }
  int64_t v7 = +[NSString stringWithUTF8String:v6];
  [v5 cancelAppLaunchAlert:v7];

  if (v9 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100018518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10001854C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 8);
  int v6 = *(void **)(a1 + 96);
  if (v6 == (void *)(a1 + 104))
  {
LABEL_16:
    sub_10004191C(a3, "");
  }
  else
  {
    while (1)
    {
      int64_t v7 = (void *)v6[7];
      if (v7 != v6 + 8) {
        break;
      }
LABEL_10:
      char v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          unint64_t v12 = v11;
          char v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          unint64_t v12 = (void *)v6[2];
          BOOL v10 = *v12 == (void)v6;
          int v6 = v12;
        }
        while (!v10);
      }
      int v6 = v12;
      if (v12 == (void *)(a1 + 104)) {
        goto LABEL_16;
      }
    }
    while (v7[4] != a2)
    {
      id v8 = (void *)v7[1];
      if (v8)
      {
        do
        {
          char v9 = v8;
          id v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          char v9 = (void *)v7[2];
          BOOL v10 = *v9 == (void)v7;
          int64_t v7 = v9;
        }
        while (!v10);
      }
      int64_t v7 = v9;
      if (v9 == v6 + 8) {
        goto LABEL_10;
      }
    }
    if (*((char *)v6 + 55) < 0)
    {
      sub_10003B098(a3, (void *)v6[4], v6[5]);
    }
    else
    {
      long long v13 = *((_OWORD *)v6 + 2);
      a3[2] = v6[6];
      *(_OWORD *)a3 = v13;
    }
  }
  return sub_10003AFB4((uint64_t)v15);
}

void sub_100018678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100018790(uint64_t a1, void *a2)
{
  uint64_t v122 = 0;
  uint64_t v123 = 0;
  uint64_t v121 = 0;
  v119[0] = 0;
  v119[1] = v119;
  v119[2] = 0x2020000000;
  int v120 = 0;
  v117[0] = 0;
  v117[1] = v117;
  v117[2] = 0x2020000000;
  char v118 = 0;
  uint64_t v76 = +[NSArray arrayWithObjects:@"com.apple.identityservicesd", @"com.apple.nanoregistryd", @"nanoregistryd", @"com.apple.magicswitchd", @"com.apple.sharingd", @"com.apple.BTReporter", @"com.apple.coreBluetoothUtil", @"com.apple.terminusd", 0];
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  sub_100019738(value, "kCBMsgArgName");
  id v5 = (id)objc_claimAutoreleasedReturnValue();
  if (sub_1000198BC(value, 1, v6, v7, v8, v9, v10, v11, (uint64_t)"kCBMsgArgType") || !v5)
  {
LABEL_98:
    if (!*(void *)(a1 + 128)) {
      sub_1004F10B0(a1, 2u);
    }
    goto LABEL_100;
  }
  int v73 = v123;
  uint64_t v116 = 0;
  uint64_t v115 = 0;
  uint64_t v114 = 0;
  uint64_t v113 = 0;
  uint64_t v112 = 1;
  uint64_t v111 = 0;
  uint64_t v110 = 0;
  long long v75 = sub_100019738(v121, "kCBInitOptionRestoreIdentifier");
  uint64_t v109 = 0;
  uint64_t v108 = 0;
  uint64_t v107 = 0;
  int v74 = sub_100019738(v121, "kCBCentralManagerOptionInitLeProfilesManagerWithOptions");
  sub_1000198BC(v121, 0, v12, v13, v14, v15, v16, v17, (uint64_t)"kCBInitOptionShowPowerAlert");
  uint64_t v18 = sub_10000F1E0();
  uint64_t v19 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v18;

  id v72 = *(id *)(a1 + 96);
  uint64_t v106 = 0;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  long long v98 = 0u;
  long long v99 = 0u;
  long long v96 = 0u;
  long long v97 = 0u;
  long long v94 = 0u;
  long long v95 = 0u;
  memset(v93, 0, sizeof(v93));
  sub_1000419CC((uint64_t)v93);
  id v5 = v72;
  strlen((const char *)[v5 UTF8String]);
  sub_10003AB28((uint64_t)v93);
  char v20 = sub_100019738(v121, "kCBMsgArgManagerCustomName");
  id v21 = v20;
  if (v20 && [v20 length])
  {
    if ((unint64_t)[v21 length] > 0xF) {
      uint64_t v22 = 16;
    }
    else {
      uint64_t v22 = (uint64_t)[v21 length];
    }
    id v23 = [v21 rangeOfComposedCharacterSequencesForRange:0, v22];
    long long v25 = [v21 substringWithRange:v23, v24];

    uint64_t v26 = sub_10003AB28((uint64_t)v93);
    id v21 = v25;
    strlen((const char *)[v21 UTF8String]);
    uint64_t v27 = sub_10003AB28(v26);
    sub_10003AB28(v27);
  }
  uint64_t v28 = sub_10003AB28((uint64_t)v93);
  sub_10003AB28(v28);
  if (!v123 && v108)
  {
    uint64_t v29 = +[LSBundleRecord bundleRecordWithBundleIdentifier:*(void *)(a1 + 96) allowPlaceholder:1 error:0];
    unint64_t v30 = [v29 infoDictionary];
    uint64_t v31 = [v30 objectForKey:@"NSBluetoothForMediaDeviceDiscoveryOnly" ofClass:objc_opt_class()];
    BOOL v32 = v31 == 0;

    if (v32)
    {
      if (*(unsigned char *)(a1 + 86))
      {
        sub_10003AB28((uint64_t)v93);
        *(unsigned char *)(a1 + 176) = 1;
      }
    }
    else
    {
      sub_10003AB28((uint64_t)v93);
      *(unsigned char *)(a1 + 175) = 1;
    }
    int v33 = _os_feature_enabled_impl();
    if (v107) {
      int v34 = v33;
    }
    else {
      int v34 = 0;
    }
    if (v34 == 1)
    {
      id v35 = [v29 infoDictionary];
      uint64_t v36 = [v35 objectForKey:@"NSAccessorySetupKitSupports" ofClass:objc_opt_class()];

      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) != 0 && [v36 containsObject:@"Bluetooth"])
      {
        sub_10003AB28((uint64_t)v93);
        *(unsigned char *)(a1 + 177) = 1;
      }
      else if (*(unsigned char *)(a1 + 87))
      {
        sub_10003AB28((uint64_t)v93);
        *(unsigned char *)(a1 + 178) = 1;
      }
    }
  }
  uint64_t v37 = std::ostream::operator<<();
  sub_10003AB28(v37);
  std::ostream::operator<<();
  std::stringbuf::str();
  uint64_t v38 = (char *)(a1 + 79);
  int v39 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v39);
  }
  *(_OWORD *)int v39 = *(_OWORD *)buf;
  *(void *)(a1 + 72) = *(void *)&buf[16];
  unint64_t v40 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v41 = (void *)(a1 + 56);
    if (*v38 < 0) {
      BOOL v41 = *v39;
    }
    int v42 = *(_DWORD *)(a1 + 80);
    int v43 = *(unsigned __int8 *)(a1 + 185);
    int v44 = *(unsigned __int8 *)(a1 + 175);
    int v45 = *(unsigned __int8 *)(a1 + 177);
    *(_DWORD *)buf = 136447234;
    *(void *)&uint8_t buf[4] = v41;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v42;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v43;
    *(_WORD *)&buf[24] = 1024;
    *(_DWORD *)&buf[26] = v44;
    *(_WORD *)&buf[30] = 1024;
    int v127 = v45;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Received XPC check-in from session \"%{public}s\" fAccessLevel %d fProgrammaticPairing %d fDeviceAccessForMediaSession %d fDeviceAccessPerAccessorySession %d", buf, 0x24u);
  }
  char v71 = *(unsigned char *)(a1 + 89);
  if (v71)
  {
    id v46 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      long long v47 = (void *)(a1 + 56);
      if (*v38 < 0) {
        long long v47 = *v39;
      }
      *(_DWORD *)buf = 136446466;
      *(void *)&uint8_t buf[4] = v47;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v75;
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "On-Demand-Install app XPC started: %{public}s, RI %@", buf, 0x16u);
    }

    long long v75 = 0;
  }
  if (v114)
  {
    if (*(int *)(a1 + 80) >= 1)
    {
      *(unsigned char *)(a1 + 172) = 1;
      id v48 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
      {
        long long v49 = (void *)(a1 + 56);
        if (*v38 < 0) {
          long long v49 = *v39;
        }
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v49;
        _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Incoming ObjectDiscovery data  will be forwarded to session \"%{public}s\"", buf, 0xCu);
      }
    }
  }
  if (v115)
  {
    *(unsigned char *)(a1 + 168) = 1;
    uint64_t v50 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      int v51 = (void *)(a1 + 56);
      if (*v38 < 0) {
        int v51 = *v39;
      }
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v51;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "System events will be forwarded to session \"%{public}s\"", buf, 0xCu);
    }
  }
  int v52 = *(_DWORD *)(a1 + 80);
  if (v52 < 1 || !v113)
  {
LABEL_55:
    if (v52 < 1) {
      goto LABEL_58;
    }
    goto LABEL_56;
  }
  *(unsigned char *)(a1 + 169) = 1;
  unint64_t v53 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v54 = (void *)(a1 + 56);
    if (*v38 < 0) {
      uint64_t v54 = *v39;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v54;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Application activity events will be sent to session \"%{public}s\"", buf, 0xCu);
    int v52 = *(_DWORD *)(a1 + 80);
    goto LABEL_55;
  }
LABEL_56:
  if ([v74 length])
  {
    uint64_t v55 = sub_100373068();
    CFStringRef v124 = @"collectForTypes";
    uint64_t v125 = v74;
    uint64_t v56 = +[NSDictionary dictionaryWithObjects:&v125 forKeys:&v124 count:1];
    (*(void (**)(uint64_t, void *))(*(void *)v55 + 184))(v55, v56);
  }
LABEL_58:
  if (*(int *)(a1 + 80) >= 1)
  {
    char v57 = qword_100A19EC8;
LABEL_61:
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v111;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Setting fNeedsRestrictedState operation: %lld", buf, 0xCu);
    }
    *(unsigned char *)(a1 + 186) = v111 != 0;
    goto LABEL_64;
  }
  uint64_t v110 = 0;
  uint64_t v109 = 0;
  char v57 = qword_100A19EC8;
  if (*(unsigned char *)(a1 + 185)) {
    goto LABEL_61;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    long long v70 = (void *)(a1 + 56);
    if (*v38 < 0) {
      long long v70 = *v39;
    }
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = v70;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Access level is less than kXPCAccessLevelSystem for session \"%{public}s\". Restricted state operation not allowed", buf, 0xCu);
  }
  *(unsigned char *)(a1 + 186) = 0;
LABEL_64:
  uint64_t v58 = (uint64_t)[v76 containsObject:v5];
  char v59 = v58;
  if (v58)
  {
    unint64_t v60 = qword_100A19EC8;
    uint64_t v58 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT);
    if (v58)
    {
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Override restricted state operation for bundle: %@", buf, 0xCu);
    }
  }
  if ((sub_10000A068(v58, *(void **)(a1 + 96)) & 1) != 0 || *(int *)(a1 + 80) >= 1)
  {
    *(unsigned char *)(a1 + 88) = 1;
    id v61 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v62 = *(void *)(a1 + 96);
      *(_DWORD *)buf = 138412290;
      *(void *)&uint8_t buf[4] = v62;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "Warning: Overriding TCC for bundleIdentifier %@", buf, 0xCu);
    }
  }
  else
  {
    *(unsigned char *)(a1 + 194) = sub_1002D4A5C(v121, "kCBManagerPrivacySupported");
  }
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unsigned __int8 v63 = sub_100006B94((uint64_t)off_1009F8780, *(void **)(a1 + 96));
  if (*(void *)(a1 + 128))
  {
    int v64 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10077BF18((char *)(a1 + 79), (void *)(a1 + 56), v64);
    }
  }
  else
  {
    int v65 = v122;
    if (v122 == 20161219)
    {
      memset(buf, 0, sizeof(buf));
      xpc_connection_get_audit_token();
      uint64_t v66 = sub_100019878();
      v79[0] = _NSConcreteStackBlock;
      v79[1] = 3221225472;
      v79[2] = sub_100008A40;
      v79[3] = &unk_1009B71C8;
      char v91 = v71;
      uint64_t v84 = a1;
      uint64_t v85 = v116;
      char v92 = v59;
      uint64_t v86 = v110;
      uint64_t v87 = v109;
      long long v88 = *(_OWORD *)buf;
      long long v89 = *(_OWORD *)&buf[16];
      id v80 = v5;
      int v90 = v73;
      id v81 = v75;
      __n128 v82 = v119;
      uint64_t v83 = v117;
      sub_1000197D8(v66, v79);
    }
    else
    {
      long long v67 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10077BE8C(v65, v67);
      }
    }
  }
  if (_os_feature_enabled_impl())
  {
    objc_storeStrong((id *)(a1 + 224), *(id *)(a1 + 96));
    if (*(void *)(a1 + 128))
    {
      if ((*(unsigned char *)(a1 + 176) || v107) && !sub_100056660(a1))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10077BE24();
        }
        char v68 = 0;
        goto LABEL_95;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
    {
      sub_10077BDF0();
    }
  }
  if (*(int *)(a1 + 80) <= 0 && !*(unsigned char *)(a1 + 185))
  {
    uint64_t v69 = sub_100019878();
    v77[0] = _NSConcreteStackBlock;
    v77[1] = 3221225472;
    v77[2] = sub_10000736C;
    v77[3] = &unk_100998A58;
    v77[4] = a1;
    unsigned __int8 v78 = v63;
    sub_1000197D8(v69, v77);
  }
  char v68 = 1;
LABEL_95:

  if (SHIBYTE(v95) < 0) {
    operator delete(*((void **)&v94 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  std::ios::~ios();

  if (v68) {
    goto LABEL_98;
  }
LABEL_100:

  _Block_object_dispose(v117, 8);
  _Block_object_dispose(v119, 8);
}

void sub_100019630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *a45,uint64_t a46,void *a47,void *a48,void *a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,void *a61)
{
  sub_10027E318((uint64_t)&STACK[0x200]);
  _Block_object_dispose((const void *)(v62 - 248), 8);
  _Block_object_dispose((const void *)(v62 - 216), 8);
  _Unwind_Resume(a1);
}

id sub_100019738(void *a1, const char *a2)
{
  xpc_object_t value = xpc_dictionary_get_value(a1, a2);
  if (value)
  {
    uint64_t v3 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_string)
    {
      xpc_object_t value = +[NSString stringWithUTF8String:xpc_string_get_string_ptr(v3)];
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_1007535F0();
      }
      xpc_object_t value = 0;
    }
  }

  return value;
}

void sub_1000197D8(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_100A131E8 != -1) {
    dispatch_once(&qword_100A131E8, &stru_1009B0480);
  }
  if (qword_100A131E0 == a1)
  {
    uint64_t v4 = qword_100A19FD8;
    if (os_log_type_enabled((os_log_t)qword_100A19FD8, OS_LOG_TYPE_FAULT)) {
      sub_10076EC84(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  dispatch_sync(*(dispatch_queue_t *)(a1 + 8), v3);
}

uint64_t sub_100019878()
{
  if (qword_100A131F8 != -1) {
    dispatch_once(&qword_100A131F8, &stru_1009B04A0);
  }
  return qword_100A131F0;
}

uint64_t sub_1000198BC(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1 || xpc_get_type(a1) != (xpc_type_t)&_xpc_type_dictionary) {
    return 3;
  }
  uint64_t v18 = &a9;
  while (1)
  {
    uint64_t v12 = (const char **)v18;
    uint64_t v19 = (uint64_t (**)(void, void))(v18 + 1);
    uint64_t v13 = *v12;
    if (!*v12) {
      return 0;
    }
    xpc_object_t value = xpc_dictionary_get_value(a1, *v12);
    uint64_t v15 = v19 + 1;
    uint64_t v16 = (uint64_t (*)(xpc_object_t, void))*v19;
    uint64_t v18 = (uint64_t *)(v19 + 2);
    if (!value) {
      break;
    }
    uint64_t result = v16(value, *v15);
LABEL_10:
    if (result) {
      return result;
    }
  }
  if (!a2)
  {
    uint64_t result = 0;
    goto LABEL_10;
  }
  uint64_t v17 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)buf = 136446210;
    id v21 = v13;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "No XPC object for key: %{public}s", buf, 0xCu);
  }
  return 3;
}

uint64_t sub_100019A00(void *a1, int64_t *a2)
{
  if (xpc_get_type(a1) == (xpc_type_t)&_xpc_type_int64)
  {
    int64_t value = xpc_int64_get_value(a1);
    uint64_t result = 0;
    *a2 = value;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100753410(a1);
    }
    return 3;
  }
  return result;
}

void sub_100019A80(os_unfair_lock_s *a1, void *a2)
{
  id v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    uint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_100019B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100019B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100019D1C(*(void *)(a1 + 32));
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8);

  return v4(a2, v3);
}

uint64_t sub_100019BAC(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  uint64_t v3 = sub_100019D1C(*(void *)(a1 + 32));
  uint64_t v4 = **a2;

  return v4(a2, v3);
}

uint64_t sub_100019C0C(void *a1, unint64_t a2)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, (uint64_t)(a1 + 5));
  if (!a2) {
    goto LABEL_23;
  }
  uint64_t v4 = (void *)a1[19];
  if (!v4) {
    goto LABEL_23;
  }
  uint64_t v5 = a1 + 19;
  do
  {
    unint64_t v6 = v4[4];
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = v4;
    }
    else {
      uint64_t v8 = v4 + 1;
    }
    if (v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = (void *)*v8;
  }
  while (*v8);
  if (v5 == a1 + 19 || v5[4] > a2 || (uint64_t v9 = (void *)a1[15], v10 = a1 + 16, v9 == a1 + 16))
  {
LABEL_23:
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = v5[5];
    while (1)
    {
      uint64_t v12 = v9[7];
      if (v12)
      {
        if (sub_100019D1C(v9[7]) == v11) {
          break;
        }
      }
      uint64_t v13 = (void *)v9[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v9[2];
          BOOL v15 = *v14 == (void)v9;
          uint64_t v9 = v14;
        }
        while (!v15);
      }
      uint64_t v9 = v14;
      if (v14 == v10) {
        goto LABEL_23;
      }
    }
  }
  sub_10003AFB4((uint64_t)v17);
  return v12;
}

void sub_100019D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100019D1C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1);
  uint64_t v2 = *(void *)(a1 + 64);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

void sub_100019D64(uint64_t a1, void *a2)
{
  uint64_t v4 = qword_100A19E58;
  if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 138412290;
    *(void *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "UpdateWifiState WCMWiFiState %@", buf, 0xCu);
  }
  if (*(unsigned char *)(a1 + 280))
  {
    uint64_t v5 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "ignoring real wifi signals", buf, 2u);
    }
  }
  else
  {
    xpc_object_t value = xpc_dictionary_get_value(a2, "kMessageArgs");
    BOOL v7 = value;
    if (value)
    {
      __int16 uint64 = xpc_dictionary_get_uint64(value, "kWCMBTWiFiState_Priority");
      __int16 v9 = xpc_dictionary_get_uint64(v7, "kWCMWiFiState_Bitmap");
      __int16 v10 = xpc_dictionary_get_uint64(v7, "kWCMWiFiState_Band");
      __int16 v11 = xpc_dictionary_get_uint64(v7, "kWCMWiFiState_DesiredBtDc");
      *(_WORD *)(a1 + 162) = v10;
      *(_WORD *)(a1 + 160) = uint64;
      *(_WORD *)(a1 + 164) = v11;
      *(_WORD *)(a1 + 166) = v9;
      if (!*(unsigned char *)(a1 + 154))
      {
        *(_DWORD *)(a1 + 156) = 0;
        if (uint64 == 2 && (v9 & 0x41) != 0 && *(_DWORD *)(a1 + 456) == 1 && *(unsigned char *)(a1 + 452))
        {
          switch(v11)
          {
            case 1:
              if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEBUG)) {
                sub_10079A700();
              }
              int v15 = 0;
              break;
            case 2:
              int v15 = 2;
              if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEBUG)) {
                sub_10079A630();
              }
              break;
            case 3:
              if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEBUG)) {
                sub_10079A664();
              }
              goto LABEL_43;
            case 4:
              if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEBUG)) {
                sub_10079A698();
              }
              int v15 = 5;
              break;
            case 5:
              if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEBUG)) {
                sub_10079A6CC();
              }
              int v15 = 6;
              break;
            default:
              if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEBUG)) {
                sub_10079A5FC();
              }
LABEL_43:
              int v15 = 3;
              break;
          }
          *(_DWORD *)(a1 + 156) = v15;
        }
      }
      uint64_t v12 = qword_100A19E58;
      if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
      {
        int v13 = *(unsigned __int16 *)(a1 + 164);
        if (*(_WORD *)(a1 + 164) > 5u) {
          uint64_t v14 = "NA";
        }
        else {
          uint64_t v14 = off_1009C1288[(char)v13];
        }
        unsigned int v16 = *(unsigned __int8 *)(a1 + 160);
        uint64_t v17 = "NA";
        if (v16 <= 2) {
          uint64_t v17 = off_1009C1308[(char)v16];
        }
        sub_1000146A8(*(unsigned __int16 *)(a1 + 166));
        if (v27 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        int v19 = *(unsigned __int8 *)(a1 + 166);
        char v20 = "kWCMWiFiStateBand5G";
        int v21 = *(unsigned __int8 *)(a1 + 162);
        if (v21 != 2) {
          char v20 = "NA";
        }
        int v22 = *(_DWORD *)(a1 + 156);
        if (v21 == 1) {
          char v20 = "kWCMWiFiStateBand2_4G";
        }
        *(_DWORD *)buf = 136317186;
        *(void *)&uint8_t buf[4] = v14;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v13;
        __int16 v29 = 1024;
        unsigned int v30 = v16;
        __int16 v31 = 2080;
        BOOL v32 = v17;
        __int16 v33 = 2080;
        int v34 = p_p;
        __int16 v35 = 1024;
        int v36 = v19;
        __int16 v37 = 2080;
        uint64_t v38 = v20;
        __int16 v39 = 1024;
        int v40 = v21;
        __int16 v41 = 1024;
        int v42 = v22;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "UpdateWifiState UCMWifiCoexInterval:%s(%d) priority:%d(%s) bitmap:[%s](0x%x) band:%s(%d) UCMWifiCoexInterval:%d", buf, 0x48u);
        if (v27 < 0) {
          operator delete(__p);
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_ERROR))
    {
      sub_10079A5C8();
    }
    id v23 = qword_100A19E58;
    if (os_log_type_enabled((os_log_t)qword_100A19E58, OS_LOG_TYPE_DEFAULT))
    {
      int v24 = *(unsigned __int16 *)(a1 + 164);
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v24;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "UpdateWifiState done, UCMBTConnectionScanDutyCycle:%d", buf, 8u);
    }
    *(void *)buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003AED0((uint64_t)buf, a1 + 80);
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    v25[2] = sub_100014674;
    _OWORD v25[3] = &unk_1009C1098;
    v25[4] = a1;
    sub_1000145A8((os_unfair_lock_s *)(a1 + 480), v25);
    sub_10003AFB4((uint64_t)buf);
  }
}

void sub_10001A244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A260(uint64_t a1)
{
  uint64_t v27 = 0;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  *(_OWORD *)int v15 = 0u;
  long long v16 = 0u;
  memset(v14, 0, sizeof(v14));
  long long v13 = 0u;
  sub_10004C67C((uint64_t)&v13);
  uint64_t v2 = sub_10003AB28((uint64_t)v14);
  uint64_t v3 = sub_10003AB28(v2);
  uint64_t v4 = sub_10003AB28(v3);
  uint64_t v5 = *(int *)(a1 + 4);
  if (v5 > 3) {
    unint64_t v6 = "";
  }
  else {
    unint64_t v6 = off_10099FFF0[v5];
  }
  sub_10004191C(&__p, v6);
  uint64_t v7 = sub_10003AB28(v4);
  uint64_t v8 = sub_10003AB28(v7);
  sub_10003AB28(v8);
  if (v12 < 0) {
    operator delete(__p);
  }
  std::stringbuf::str();
  *(void *)((char *)&v14[-1]
  *(void *)&v14[0] = v9;
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_10001A4DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void sub_10001A50C(id a1, NSString *a2, CBExtension *a3, BOOL *a4)
{
  *a4 = [(CBExtension *)a3 triggerIfPending];
}

void sub_10001A65C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 48), 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10001A7D4(uint64_t a1, uint64_t a2, int a3, void *a4, void *a5)
{
  uint64_t v9 = a4;
  __int16 v10 = a5;
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 72);
  __int16 v11 = qword_100A19E50;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO);
  if (v12)
  {
    long long v13 = sub_10001AA04(v12, a2);
    *(_DWORD *)buf = 136446210;
    long long v20 = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "Sending: %{public}s", buf, 0xCu);
  }
  if (sub_10001B700(a1, a2))
  {
    buf[0] = 0;
    sub_10001B8E0(buf);
    int v14 = v9[2](v9);
    sub_10001B910(buf);
    if (v14 == 3603)
    {
      a3 = 0;
    }
    else if (v14)
    {
      long long v16 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_100758C20(a2, v14, v16);
      }
      a3 = 1;
    }
    else
    {
      if (a3)
      {
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009A8780);
        }
        a3 = sub_10001B918((uint64_t)off_1009F8068, a2);
      }
      if (v10) {
        v10[2](v10);
      }
    }
    *(unsigned char *)(a1 + a2 + 440) = 0;
    uint64_t v15 = a3 != 0;
    sub_10001B8AC(buf);
  }
  else
  {
    uint64_t v15 = 2;
  }
  sub_10003AFB4((uint64_t)v18);

  return v15;
}

void sub_10001A9C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

const char *sub_10001AA04(uint64_t a1, int a2)
{
  uint64_t result = "BD_VSC_GET_POWER_CONSUMPTION";
  switch(a2)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = "BD_VSC_WRITE_PCM_PARAM";
      break;
    case 2:
      uint64_t result = "BD_VSC_WRITE_SLEEPMODE_PARAM";
      break;
    case 3:
      uint64_t result = "BD_VSC_READ_RAW_RSSI";
      break;
    case 4:
      uint64_t result = "BD_VSC_WRITE_HI_PRIO_CONN";
      break;
    case 5:
      uint64_t result = "BD_VSC_OP_LOW_LATENCY_PRIO_CONN";
      break;
    case 6:
      uint64_t result = "BD_VSC_SET_SCO_PATH";
      break;
    case 7:
      uint64_t result = "BD_VSC_WRITE_I2SPCM_INTF";
      break;
    case 8:
      uint64_t result = "BD_VSC_ENA_WBS";
      break;
    case 9:
      uint64_t result = "BD_VSC_DYN_VOICE_ROUTE_CHANGE";
      break;
    case 10:
      uint64_t result = "BD_VSC_OLYMPIC_SETTINGS";
      break;
    case 11:
      uint64_t result = "BD_VSC_LE_META_VSC";
      break;
    case 12:
      uint64_t result = "BD_VSC_OP_DELAYED_HOST_WAKE";
      break;
    case 13:
      uint64_t result = "BD_VSC_LTE_COEX_LINK_QUAL_METRICS";
      break;
    case 14:
      uint64_t result = "BD_VSC_LTE_TRIGGER_WCI2";
      break;
    case 15:
      uint64_t result = "BD_VSC_LTE_ENA_WCI2";
      break;
    case 16:
      uint64_t result = "DB_VSC_FACTORY_CAL_SET_TX_POWER";
      break;
    case 17:
      uint64_t result = "BD_VSC_FACTORY_CAL_READ_TABLE";
      break;
    case 18:
      uint64_t result = "BD_VSC_OP_ANTENNA_DIVERSITY";
      break;
    case 19:
      uint64_t result = "BD_VSC_OP_DIVERSITY_AFH_MAPS";
      break;
    case 20:
      uint64_t result = "BD_VSC_OP_DIVERSITY_CELL_COEX";
      break;
    case 21:
      uint64_t result = "BD_VSC_REMOTE_AP_WRITE_LOCAL_STATE";
      break;
    case 22:
      uint64_t result = "BD_VSC_OP_BT_SYNC";
      break;
    case 23:
      uint64_t result = "BD_VSC_LTE_VSC";
      break;
    case 24:
      uint64_t result = "BD_VSC_OP_POWER_LDO_DURING_SLEEP";
      break;
    case 25:
      uint64_t result = "BD_VSC_WRITE_LE_REMOTE_PUBLIC_ADDR";
      break;
    case 26:
      uint64_t result = "BD_VSC_OP_GIZMO_DETECTED";
      break;
    case 27:
      uint64_t result = "BD_VSC_DISABLE_TPC";
      break;
    case 28:
      uint64_t result = "BD_VSC_CORE_DUMP";
      break;
    case 29:
      uint64_t result = "BD_VSC_CONFIG_LINK_QUALITY_STATS_TRIG";
      break;
    case 30:
      uint64_t result = "BD_VSC_LE_WRITE_LOCAL_SUPPORTED_FEATURES";
      break;
    case 31:
      uint64_t result = "BD_VSC_ENABLE_EXTENDED_DUPLICATE_FILTER";
      break;
    case 32:
      uint64_t result = "BD_VSC_WRITE_HI_PRIO_LE_CONN";
      break;
    case 33:
      uint64_t result = "BD_VSC_LE_CREATE_EXT_ADV_INSTANCE";
      break;
    case 34:
      uint64_t result = "BD_VSC_LE_REMOVE_EXT_ADV_INSTANCE";
      break;
    case 35:
      uint64_t result = "BD_VSC_LE_SET_EXT_ADV_INST_PARAMS";
      break;
    case 36:
      uint64_t result = "BD_VSC_LE_SET_EXT_ADV_INST_DATA";
      break;
    case 37:
      uint64_t result = "BD_VSC_LE_SET_EXT_SCAN_RSP_DATA";
      break;
    case 38:
      uint64_t result = "BD_VSC_LE_SET_EXT_ADV_INST_ENABLE";
      break;
    case 39:
      uint64_t result = "BD_VSC_HP_BT_CLASSIC";
      break;
    case 40:
      uint64_t result = "BD_VSC_SET_PRIORITIZATION_THRESHOLD";
      break;
    case 41:
      uint64_t result = "BD_VSC_ENABLE_LMP_ROUTING";
      break;
    case 42:
      uint64_t result = "BD_VSC_ENABLE_LMP_ROUTING_THROUGH_VSE";
      break;
    case 43:
      uint64_t result = "BD_VSC_GET_AWD_DATA_EVENT";
      break;
    case 44:
      uint64_t result = "BD_VSC_ENABLE_DISABLE_FW_LOG_STREAMING";
      break;
    case 45:
      uint64_t result = "BD_VSC_ENABLE_COEX_DEBUG_COUNTERS";
      break;
    case 46:
      uint64_t result = "BD_VSC_READ_DETAILED_PROFILE_STATS";
      break;
    case 47:
      uint64_t result = "BD_VSC_CLEAR_DETAILED_PROFILE_STATS";
      break;
    case 48:
      uint64_t result = "BD_VSC_READ_TRANSPORT_SWITCH_STATS";
      break;
    case 49:
      uint64_t result = "BD_VSC_CLEAR_TRANSPORT_SWITCH_STATS";
      break;
    case 50:
      uint64_t result = "BD_VSC_HP_EDR_ACCESSORY";
      break;
    case 51:
      uint64_t result = "BD_VSC_READ_FW_MEMORY_STATISTICS";
      break;
    case 52:
      uint64_t result = "BD_VSC_ENABLE_HIGH_POWER";
      break;
    case 53:
      uint64_t result = "BD_VSC_SET_FW_TRACE_MODE";
      break;
    case 54:
      uint64_t result = "BD_VSC_SET_MAXIMUM_CONNECTION_UPDATE_INSTANT";
      break;
    case 55:
      uint64_t result = "BD_VSC_CONFIG_PAGE_SCAN_RESPONSE";
      break;
    case 56:
      uint64_t result = "BD_VSC_HDR_CONTROL";
      break;
    case 57:
      uint64_t result = "BD_VSC_READ_PROP_LOCAL_FEATURES";
      break;
    case 58:
      uint64_t result = "BD_VSC_READ_PROP_REMOTE_FEATURES";
      break;
    case 59:
      uint64_t result = "BD_VSC_HDR_CHANGE_CONN_PKT_TYPE";
      break;
    case 60:
      uint64_t result = "BD_VSC_HDR_SETUP_SYNCHRONOUS_CONNECTION";
      break;
    case 61:
      uint64_t result = "BD_VSC_HDR_ACCEPT_SYNCHRONOUS_CONNECTION";
      break;
    case 62:
      uint64_t result = "BD_VSC_SCO_BUFFER_SIZE_CONTROL";
      break;
    case 63:
      uint64_t result = "BD_VSC_HRB_CONTROL";
      break;
    case 64:
      uint64_t result = "BD_VSC_HRB_ALLOWED_BANDS";
      break;
    case 65:
      uint64_t result = "BD_VSC_HRB_CLASSIFICATION_BANDS";
      break;
    case 66:
      uint64_t result = "BD_VSC_HRB_CREATE_CONNECTION";
      break;
    case 67:
      uint64_t result = "BD_VSC_HRB_CHANGE_CONNECTION_BAND";
      break;
    case 68:
      uint64_t result = "BD_VSC_HRB_WRITE_SCAN_ENABLE";
      break;
    case 69:
      uint64_t result = "BD_VSC_HRB_WRITE_PAGE_SCAN_ACTIVITY";
      break;
    case 70:
      uint64_t result = "BD_VSC_HRB_READ_AFH_CHANNEL_MAP";
      break;
    case 71:
      uint64_t result = "BD_VSC_HRB_SET_AFH_CHANNEL_CLASSIFICATION";
      break;
    case 72:
      uint64_t result = "BD_VSC_GET_ESSENTIAL_POWER_DATABASE_ENTRIES";
      break;
    case 73:
      uint64_t result = "BD_VSC_HRB_LIMIT_CHANNEL_MAP";
      break;
    case 74:
      uint64_t result = "BD_VSC_HRB_SET_BAND_EDGES";
      break;
    case 75:
      uint64_t result = "BD_VSC_HRB_READ_ENHANCED_TRANSMIT_POWER_LEVEL";
      break;
    case 79:
      uint64_t result = "BD_VSC_ADVANCED_SNIFF_MODE";
      break;
    case 80:
      uint64_t result = "BD_VSC_EXIT_ADVANCED_SNIFF_MODE";
      break;
    case 81:
      uint64_t result = "BD_VSC_ADVANCED_SNIFF_RECONFIG";
      break;
    case 82:
      uint64_t result = "BD_VSC_SET_PERIPHERAL_MAX_AGE";
      break;
    case 83:
      uint64_t result = "BD_VSC_LMP_FLOW";
      break;
    case 84:
      uint64_t result = "BD_VSC_AOS_EMPTY_PACKET_REPORT";
      break;
    case 85:
      uint64_t result = "BD_VSC_CONTROL_AOS";
      break;
    case 86:
      uint64_t result = "BD_VSC_SET_LE_POWER_CONTROL";
      break;
    case 87:
      uint64_t result = "BD_VSC_GET_ADV_STATS";
      break;
    case 88:
      uint64_t result = "BD_VSC_PHY_STATISTIC";
      break;
    case 89:
      uint64_t result = "BD_VSC_DISCONNECT_EVENT";
      break;
    case 90:
      uint64_t result = "BD_VSC_SET_MWS_COEX_RX_GAIN_MODE";
      break;
    case 91:
      uint64_t result = "BD_VSC_ENABLE_AUDIO_STATISTICS";
      break;
    case 92:
      uint64_t result = "BD_VSC_EPA_GPIO_TOGGLE_ENABLE";
      break;
    case 93:
      uint64_t result = "BD_VSC_EPA_GPIO_READ_STATUS";
      break;
    case 94:
      uint64_t result = "BD_VSC_SET_BIDIRECTIONAL_MAX_POWER_MODE";
      break;
    case 95:
      uint64_t result = "BD_VSC_HP_EDR_HDR";
      break;
    case 96:
      uint64_t result = "BD_VSC_ENABLE_HOST_WAKE_REPORT";
      break;
    case 97:
      uint64_t result = "BD_VSC_ENABLE_POWER_TAG";
      break;
    case 98:
      uint64_t result = "BD_VSC_ENABLE_POWER_TAG_V2";
      break;
    case 99:
      uint64_t result = "BD_VSC_ADJUST_LE_INSTANT_FACTOR";
      break;
    case 100:
      uint64_t result = "BD_VSC_DISABLE_HOST_WAKE_ON_LE_LINK_DROP";
      break;
    case 101:
      uint64_t result = "BD_VSC_SET_BAD_COMPANY_ID_FOR_LE2M";
      break;
    case 102:
      uint64_t result = "BD_VSC_TUNABLES_READ_ENABLE_DISABLE";
      break;
    case 103:
      uint64_t result = "BD_VSC_ENABLE_WIRELESS_SPLITTER";
      break;
    case 104:
      uint64_t result = "BD_VSC_ADVBUF_CONFIG";
      break;
    case 105:
      uint64_t result = "BD_VSC_ADVBUF_READ_COMMAND";
      break;
    case 106:
      uint64_t result = "BD_VSC_MATCHTABLE_CONFIG";
      break;
    case 107:
      uint64_t result = "BD_VSC_MATCHTABLE_CONFIG_V2";
      break;
    case 108:
      uint64_t result = "BD_VSC_MATCHTABLE_CONFIG_V3";
      break;
    case 109:
      uint64_t result = "BD_VSC_MATCHTABLE_EXT_FILTER_CONFIG";
      break;
    case 110:
      uint64_t result = "BD_VSC_MATCHTABLE_EXT_FILTER_CONFIG_V2";
      break;
    case 111:
      uint64_t result = "BD_VSC_ADVBUFMATCH_CONTROL";
      break;
    case 112:
      uint64_t result = "BD_VSC_ADVBUF_RSSI_THRESHOLD";
      break;
    case 113:
      uint64_t result = "BD_VSC_ADVBUF_CFG_TIME_SLICE";
      break;
    case 114:
      uint64_t result = "BD_VSC_ADVBUF_EXT_FILTER_CONFIG";
      break;
    case 115:
      uint64_t result = "BD_VSC_MATCHTABLE_PARAMS";
      break;
    case 116:
      uint64_t result = "BD_VSC_MATCHBUFFER_CONFIG";
      break;
    case 117:
      uint64_t result = "BD_VSC_MATCHBUFFER_READ";
      break;
    case 118:
      uint64_t result = "BD_VSC_SPMI_DIAGNOSTICS";
      break;
    case 119:
      uint64_t result = "BD_VSC_BTCLK_SENSORC_TIMESYNC";
      break;
    case 120:
      uint64_t result = "BD_VSC_ADV_TX_TRIG_TIMESTAMP";
      break;
    case 121:
      uint64_t result = "BD_VSC_READ_CONN_EVENT_TRIGGER";
      break;
    case 122:
      uint64_t result = "BD_VSC_LE_CONN_EVENT_TRIGGER";
      break;
    case 123:
      uint64_t result = "BD_VSC_SPMI_DEBUG_VSE_CONTROL";
      break;
    case 124:
      uint64_t result = "BD_VSC_HP_BF";
      break;
    case 125:
      uint64_t result = "BD_VSC_SET_ENCRYPTION_KEY_SIZE";
      break;
    case 126:
      uint64_t result = "BD_VSC_DUP_FILTER_REPORT_ENABLE";
      break;
    case 127:
      uint64_t result = "BD_VSC_BEAMFORMING_MRC_CONTROL";
      break;
    case 128:
      uint64_t result = "BD_VSC_SNR_MRC_CONTROL";
      break;
    case 129:
      uint64_t result = "BD_VSC_BT_CORE_ANTENNA_SWITCH";
      break;
    case 130:
      uint64_t result = "BD_VSC_USE_SINGLE_CORE_POWER_DB_FOR_ANT_DIVERSITY";
      break;
    case 131:
      uint64_t result = "BD_VSC_CONFIGURE_CONTROLLER_BTCLK_CAPTURE";
      break;
    case 132:
      uint64_t result = "BD_VSC_ENABLE_LE_SCAN_PROTECTION";
      break;
    case 133:
      uint64_t result = "BD_VSC_SET_FW_LOG_MASK";
      break;
    case 134:
      uint64_t result = "BD_VSC_SET_BTSC_PAGE_SCAN";
      break;
    case 135:
      uint64_t result = "BD_VSC_SET_QOS_CONFIG";
      break;
    case 136:
      uint64_t result = "BD_VSC_GET_QOS_CONFIG";
      break;
    case 137:
      uint64_t result = "BD_VSC_CONFIGURE_RSSI_STATISTICS_AND_DETECTION";
      break;
    case 138:
      uint64_t result = "BD_VSC_GET_SCAN_STATS_WITH_THRESHOLD";
      break;
    case 139:
      uint64_t result = "BD_VSC_READ_SCAN_STATS_WITH_THRESHOLD";
      break;
    case 140:
      uint64_t result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_ADD";
      break;
    case 141:
      uint64_t result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_REMOVE";
      break;
    case 142:
      uint64_t result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_ENABLE";
      break;
    case 143:
      uint64_t result = "BD_VSC_INCOMING_LE_CONNECTION_DENY_LIST_CLEAR";
      break;
    case 144:
      uint64_t result = "BD_VSC_GET_FW_VERSIONS";
      break;
    case 145:
      uint64_t result = "BD_VSC_INIT_DONE";
      break;
    case 146:
      uint64_t result = "BD_VSC_SET_RANDOM_SEED";
      break;
    case 147:
      uint64_t result = "BD_VSC_OLYMPIC_NUM_CMPLT_PKT_THRESH";
      break;
    case 148:
      uint64_t result = "BD_VSC_OLYMPIC_RSSI_THRESH";
      break;
    case 149:
      uint64_t result = "BD_VSC_OLYMPIC_READ_BT_SETTINGS";
      break;
    case 150:
      uint64_t result = "BD_VSC_OLYMPIC_IGNORE_FEC";
      break;
    case 151:
      uint64_t result = "BD_VSC_OLYMPIC_LINK_QUAL_STATS";
      break;
    case 152:
      uint64_t result = "BD_VSC_OLYMPIC_ENHANCED_LINK_QUAL_STATS";
      break;
    case 153:
      uint64_t result = "BD_VSC_OLYMPIC_ENABLE_EPA_VSE";
      break;
    case 154:
      uint64_t result = "BD_VSC_OLYMPIC_LE_AUDIO";
      break;
    case 155:
      uint64_t result = "BD_VSC_OLYMPIC_LE_AUDIO_STATS";
      break;
    case 156:
      uint64_t result = "BD_VSC_OLYMPIC_READ_LE_SETTINGS";
      break;
    case 157:
      uint64_t result = "BD_VSC_OLYMPIC_CHANGE_LE_SETTINGS";
      break;
    case 158:
      uint64_t result = "BD_VSC_OLYMPIC_READ_PROFILING_STATS";
      break;
    case 159:
      uint64_t result = "BD_VSC_OLYMPIC_READ_ENHANCED_PROFILING_STATS";
      break;
    case 160:
      uint64_t result = "BD_VSC_OLYMPIC_READ_TRANSMIT_IPA_EPA_COUNTERS";
      break;
    case 161:
      uint64_t result = "BD_VSC_OLYMPIC_LE_NUM_OF_COMPLT_PKT";
      break;
    case 162:
      uint64_t result = "BD_VSC_OLYMPIC_SET_MAX_TXRX_PAIRS";
      break;
    case 163:
      uint64_t result = "BD_VSC_OLYMPIC_ANTENNA_PREF";
      break;
    case 164:
      uint64_t result = "BD_VSC_OLYMPIC_LE_COUNTRY_PWR_SELECT";
      break;
    case 165:
      uint64_t result = "BD_VSC_OLYMPIC_COUNTRY_CODE_SELECTION";
      break;
    case 166:
      uint64_t result = "BD_VSC_OLYMPIC_COUNTRY_CODE_SELECTION_MULTI_BAND";
      break;
    case 167:
      uint64_t result = "BD_VSC_OLYMPIC_300KHZ_DEV_SELECT";
      break;
    case 168:
      uint64_t result = "BD_VSC_OLYMPIC_ANTENNA_PREF_B";
      break;
    case 169:
      uint64_t result = "BD_VSC_OLYMPIC_A2DP_ACL_SIMULTANEOUS";
      break;
    case 170:
      uint64_t result = "BD_VSC_OLYMPIC_SET_TX_POWER_CAP";
      break;
    case 171:
      uint64_t result = "BD_VSC_OLYMPIC_SET_SAR_LOCATION";
      break;
    case 172:
      uint64_t result = "BD_VSC_OLYMPIC_SET_MIN_AFH_LE_CHANNELS";
      break;
    case 173:
      uint64_t result = "BD_VSC_OLYMPIC_ADV_DUPLICATE_FILTER_BYPASS_CONFIG";
      break;
    case 174:
      uint64_t result = "BD_VSC_OLYMPIC_SET_HI_PRIO_RSSI";
      break;
    case 175:
      uint64_t result = "BD_VSC_OLYMPIC_COEX_MULTI_HID_LE_CONFIG";
      break;
    case 176:
      uint64_t result = "BD_VSC_OLYMPIC_GPIO_AUDIO_SYNC_REPORT";
      break;
    case 177:
      uint64_t result = "BD_VSC_FORCE_WLAN_5G";
      break;
    case 178:
      uint64_t result = "BD_VSC_OLYMPIC_SET_CONNECTION_DESCRIPTOR";
      break;
    case 179:
      uint64_t result = "BD_VSC_PCAP_ANT_WIFI5G_HB_STATUS";
      break;
    case 180:
      uint64_t result = "BD_VSC_ENHANCED_PCAP_ANT_WIFI5G_HB_STATUS";
      break;
    case 181:
      uint64_t result = "BD_VSC_OLYMPIC_SET_ENHANCED_SCAN_ENABLE";
      break;
    case 182:
      uint64_t result = "BD_VSC_OLYMPIC_SET_SCAN_PARAMETERS_MULTICORE";
      break;
    case 183:
      uint64_t result = "BD_VSC_OLYMPIC_SET_EXT_SCAN_LIMITS";
      break;
    case 184:
      uint64_t result = "BD_VSC_OLYMPIC_GET_EXT_ADV_DROPPED";
      break;
    case 185:
      uint64_t result = "BD_VSC_OLYMPIC_SET_EXT_ADV_LIMITS";
      break;
    case 186:
      uint64_t result = "BD_VSC_OLYMPIC_SET_EXT_SCAN_BUFFERS";
      break;
    case 187:
      uint64_t result = "BD_VSC_OLYMPIC_SET_SINGLE_SHOT_ROLE_SWITCH";
      break;
    case 188:
      uint64_t result = "BD_VSC_OLYMPIC_SET_EXT_ADV_PHY_OPTIONS";
      break;
    case 189:
      uint64_t result = "BD_VSC_OLYMPIC_SET_RC2_BT_SUPPRESSION";
      break;
    case 190:
      uint64_t result = "BD_VSC_OLYMPIC_ENABLE_BT_GRANT_RC2_COEX";
      break;
    case 191:
      uint64_t result = "BD_VSC_OLYMPIC_SET_SNIFF_ATTEMPT_OPTIMIZATION";
      break;
    case 192:
      uint64_t result = "BD_VSC_OLYMPIC_UPDATE_LE_PHY_DENYLIST";
      break;
    case 193:
      uint64_t result = "BT_VSC_OLYMPIC_SET_RETAIN_LE_SCAN_DUPLICATES_ON_START";
      break;
    case 194:
      uint64_t result = "BD_VSC_OLYMPIC_SET_HID_LATENCY_STATS";
      break;
    case 195:
      uint64_t result = "BD_VSC_OLYMPIC_SET_DIAG_DEBUG_EVENT_BEHAVIOR";
      break;
    case 196:
      uint64_t result = "BD_VSC_LE_META_ENA_FEATURES";
      break;
    case 197:
      uint64_t result = "BD_VSC_LE_META_ADD_IRK_TO_LIST";
      break;
    case 198:
      uint64_t result = "BD_VSC_LE_META_REMV_IRK_FROM_LIST";
      break;
    case 199:
      uint64_t result = "BD_VSC_LE_META_CLEAR_IRK_LIST";
      break;
    case 200:
      uint64_t result = "BD_VSC_LE_META_ADV_PCF_FEATURE_SEL";
      break;
    case 201:
      uint64_t result = "BD_VSC_LE_META_ADV_PCF_SERVICE_UUID";
      break;
    case 202:
      uint64_t result = "BD_VSC_LE_META_MONITOR_RSSI_FOR_PROX";
      break;
    case 203:
      uint64_t result = "BD_VSC_LE_META_TRACK_SENSOR";
      break;
    case 204:
      uint64_t result = "BD_VSC_LE_META_TRACK_SENSOR_INCREASE_SCAN_PARAMS";
      break;
    case 205:
      uint64_t result = "BD_VSC_LE_META_SET_ZONE_RSSI";
      break;
    case 206:
      uint64_t result = "BD_VSC_LE_META_GET_ZONE_MONITOR_CAP";
      break;
    case 207:
      uint64_t result = "BD_VSC_LE_META_ADD_ZONE_MONITOR_ENTRY";
      break;
    case 208:
      uint64_t result = "BD_VSC_LE_META_RESET_ADV_MATCHING_RULES";
      break;
    case 209:
      uint64_t result = "BD_VSC_LE_META_REMV_ZONE_MONITOR_ENTRY";
      break;
    case 210:
      uint64_t result = "BD_VSC_LE_META_RESET_ZONE_MONITOR_FEAT";
      break;
    case 211:
      uint64_t result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE";
      break;
    case 212:
      uint64_t result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE";
      break;
    case 213:
      uint64_t result = "BD_VSC_LE_META_CONN_RSSI_HISTORY";
      break;
    case 214:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST";
      break;
    case 215:
      uint64_t result = "BD_VSC_LE_META_ENABLE_ASYMMETRIC_LATENCY";
      break;
    case 216:
      uint64_t result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_WITH_ADDRESS";
      break;
    case 217:
      uint64_t result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE_WITH_ADDRESS";
      break;
    case 218:
      uint64_t result = "BD_VSC_LE_META_CONFIG_ADV_MATCHING_ADDRESS_LIST";
      break;
    case 219:
      uint64_t result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 220:
      uint64_t result = "BD_VSC_LE_META_REMV_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 221:
      uint64_t result = "BD_VSC_LE_META_WIPE_ADV_MATCHING_RULE";
      break;
    case 222:
      uint64_t result = "BD_VSC_LE_META_ADD_ADV_MATCHING_RULE_ENHANCED_BATCHED";
      break;
    case 224:
      uint64_t result = "BD_VSC_LE_META_REMV_DUPLICATE_ENTRY_ADV_MATCHING_RULE";
      break;
    case 225:
      uint64_t result = "BD_VSC_LE_META_REMV_MULTIPLE_DUPLICATE_ENTRIE_ADV_MATCHING_RULE";
      break;
    case 226:
      uint64_t result = "BD_VSC_LE_META_STATUS_ADV_MATCHING_RULE_ENHANCED";
      break;
    case 227:
      uint64_t result = "BD_VSC_LE_META_STATUS_ADV_MATCHING_RULE_ENHANCED_EXTENDED_BLOBMASK";
      break;
    case 228:
      uint64_t result = "BD_VSC_LE_META_LPCORE_GET_STATS";
      break;
    case 229:
      uint64_t result = "BD_VSC_LE_META_GET_SCAN_STATS";
      break;
    case 230:
      uint64_t result = "BD_VSC_LE_META_ENABLE_TDS";
      break;
    case 231:
      uint64_t result = "BD_VSC_LE_META_ADD_TDS_FILTER_SERVICE";
      break;
    case 232:
      uint64_t result = "BD_VSC_LE_META_REMV_TDS_FILTER_SERVICE";
      break;
    case 233:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V1";
      break;
    case 234:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTERACCEPTLIST_WITH_OPTIONS_POLL_STATS";
      break;
    case 235:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V2";
      break;
    case 236:
      uint64_t result = "BD_VSC_LE_META_BTSC_LE_SET_CONNECTION_SCAN";
      break;
    case 237:
      uint64_t result = "BD_VSC_LE_META_MFG_SCAN_FILTER";
      break;
    case 238:
      uint64_t result = "BD_VSC_LE_META_SET_CONNECTION_PRIORITIZATION";
      break;
    case 239:
      uint64_t result = "BD_VSC_LE_META_ADD_TO_FILTER_ACCEPT_LIST_WITH_OPTIONS_V3";
      break;
    case 240:
      uint64_t result = "BD_VSC_LE_META2_WRITE_STORED_LTK";
      break;
    case 241:
      uint64_t result = "BD_VSC_LE_META2_REMOVE_STORED_LTK";
      break;
    case 242:
      uint64_t result = "BD_VSC_LE_META2_READ_LOCAL_CONTROLLER_CACHED_INFO";
      break;
    case 243:
      uint64_t result = "BD_VSC_LE_META2_WRITE_PEER_CACHED_INFO";
      break;
    case 244:
      uint64_t result = "BD_VSC_LE_META2_SET_MAX_INSTANT_UPDATE_INFO";
      break;
    case 245:
      uint64_t result = "BD_VSC_LE_META2_ENABLE_ADV_CONN_IND";
      break;
    case 246:
      uint64_t result = "BD_VSC_LE_META2_CONFIGURE_ADV_CONN_IND";
      break;
    case 247:
      uint64_t result = "BD_VSC_BT_ENA_FEATURES";
      break;
    case 248:
      uint64_t result = "BD_VSC_OP_DELAYED_HOST_WAKE_PCIE";
      break;
    case 249:
      uint64_t result = "BD_VSC_SET_GPIO_STATE";
      break;
    case 250:
      uint64_t result = "BD_VSC_SET_AGC_TABLE_OVERRIDE";
      break;
    case 251:
      uint64_t result = "BD_VSC_GET_LPEM_DATA";
      break;
    case 252:
      uint64_t result = "BD_VSC_READ_CONTROLLER_RAM";
      break;
    case 253:
      uint64_t result = "BD_VSC_LE_META_ADD_IRK_TO_FAST_LIST";
      break;
    case 254:
      uint64_t result = "BD_VSC_CONFIGURE_CREATE_CONNECTION";
      break;
    case 255:
      uint64_t result = "BD_VSC_SPMI_COEX_DEBUG_COUNTERS";
      break;
    case 256:
      uint64_t result = "BD_VSC_SPMI_COEX_TEST_COMMAND";
      break;
    case 257:
      uint64_t result = "BD_VSC_SPMI_COEX_TX_CONTROL";
      break;
    case 258:
      uint64_t result = "BD_VSC_SPMI_COEX_TYPE_53_CONFIG";
      break;
    case 259:
      uint64_t result = "BD_VSC_SPMI_COEX_TYPE_60_CONFIG";
      break;
    case 260:
      uint64_t result = "BD_VSC_LE_META_ENA_FILTERING_FEATURES";
      break;
    case 261:
      uint64_t result = "BD_VSC_LOAD_MSFFILE";
      break;
    case 262:
      uint64_t result = "BD_VSC_LOAD_PWR_REGULATORYFILE";
      break;
    case 263:
      uint64_t result = "BD_VSC_LOAD_PWR_REGULATORYFILE_A3";
      break;
    case 264:
      uint64_t result = "BD_VSC_WRITE_BT_ADDRESS";
      break;
    case 265:
      uint64_t result = "BD_VSC_ADD_TO_FILTER_ACCEPT_LIST_UNIFIED";
      break;
    case 266:
      uint64_t result = "BD_VSC_LE_ADV_TX_POWER_INCREASE";
      break;
    case 268:
      uint64_t result = "BD_VSC_CONFIG_APPLE_EXTENDED_ADV_REPORT";
      break;
    case 269:
      uint64_t result = "BD_VSC_APPLE_LE_FEATURE_SET_VENDOR_LIST";
      break;
    case 271:
      uint64_t result = "BD_VSC_SET_UNIFIED_PRIORITY";
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
        sub_1007589B0();
      }
      uint64_t result = "Unknown VSC";
      break;
  }
  return result;
}

BOOL sub_10001B700(uint64_t a1, uint64_t a2)
{
  if (a2 >= 0x110 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
    sub_100758B44();
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A8780);
  }
  if (*((_DWORD *)off_1009F8068 + 14) == 1)
  {
    uint64_t v4 = a1 + a2;
    int v6 = *(unsigned __int8 *)(v4 + 168);
    uint64_t v5 = (unsigned char *)(v4 + 168);
    if (v6)
    {
      uint64_t v7 = (unsigned char *)(a1 + a2 + 440);
      if (*v7)
      {
        uint64_t v8 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
          sub_100758A24(a2, v8);
        }
      }
      unsigned char *v7 = 1;
    }
    else
    {
      __int16 v11 = qword_100A19E50;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO);
      if (v12)
      {
        int v13 = 136446210;
        int v14 = sub_10001AA04(v12, a2);
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "VSC %{public}s, not supported", (uint8_t *)&v13, 0xCu);
      }
    }
    return *v5 != 0;
  }
  else
  {
    uint64_t v9 = qword_100A19E50;
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_100758AB4(a2, v9);
      return 0;
    }
  }
  return result;
}

unsigned char *sub_10001B8AC(unsigned char *a1)
{
  if (*a1)
  {
    *a1 = 0;
    sub_1000232E0();
  }
  return a1;
}

unsigned char *sub_10001B8E0(unsigned char *a1)
{
  *a1 = 1;
  sub_100023344();
  return a1;
}

uint64_t sub_10001B910(unsigned char *a1)
{
  *a1 = 0;
  return sub_1000232E0();
}

uint64_t sub_10001B918(uint64_t a1, uint64_t a2)
{
  v28[0] = 0;
  v28[1] = 0;
  sub_10003AED0((uint64_t)v28, (uint64_t)&unk_100A19C80);
  uint64_t v4 = sub_10003FB34();
  if (sub_10001BCB0(v4, a2))
  {
    if (!sub_10001BCA8(&stru_100A19CF0, v28, 0x3A98uLL))
    {
      if ((sub_100023020() & 1) == 0 && *(_DWORD *)(a1 + 352) == 0xFFFF)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          uint64_t v12 = sub_10003FB34();
          int v13 = sub_10001AA04(v12, a2);
          sub_100772438((uint64_t)v13, (uint64_t)v45);
        }
        long long v43 = 0u;
        long long v44 = 0u;
        long long v41 = 0u;
        long long v42 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        long long v33 = 0u;
        long long v34 = 0u;
        long long v31 = 0u;
        long long v32 = 0u;
        *(_OWORD *)buf = 0u;
        long long v30 = 0u;
        char v27 = 0;
        sub_10001B8E0(&v27);
        uint64_t v14 = sub_10003FB34();
        uint64_t v15 = sub_10001AA04(v14, a2);
        sub_10025B74C((uint64_t)buf, 256, (uint64_t)"VSC stall detected, %s (0x%x)", v16, v17, v18, v19, v20, (uint64_t)v15);
        sub_10011631C((const char *)buf);
        sub_10001B910(&v27);
        if (sub_100050530())
        {
          uint64_t v23 = sub_100050530();
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v26 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v23 + 104))(v23, 3, a2, __p);
          if (SHIBYTE(v26) < 0) {
            operator delete(__p[0]);
          }
        }
        sub_10003AFE8((uint64_t)v28);
        uint64_t v21 = sub_10003FB34();
        long long v22 = (char *)sub_10001AA04(v21, a2);
        sub_10004191C(&v24, v22);
        sub_1004E258C(a1, 3602, &v24);
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        uint64_t v5 = sub_10003FB34();
        int v6 = sub_10001AA04(v5, a2);
        sub_1007723F4((uint64_t)v6, (uint64_t)buf);
      }
    }
  }
  else
  {
    uint64_t v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      uint64_t v8 = sub_10003FB34();
      uint64_t v9 = sub_10001AA04(v8, a2);
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%{public}s completed prior to waiting", buf, 0xCu);
    }
  }
  uint64_t v10 = dword_100A19D20;
  sub_10003AFB4((uint64_t)v28);
  return v10;
}

void sub_10001BB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10001B8AC(&a27);
  sub_10003AFB4((uint64_t)&a28);
  _Unwind_Resume(a1);
}

BOOL sub_10001BC04(pthread_cond_t *a1, pthread_mutex_t *a2, unint64_t a3)
{
  v6.tv_sec = a3 / 0x3E8;
  v6.tv_nsec = 1000000 * (a3 % 0x3E8);
  int v3 = pthread_cond_timedwait_relative_np(a1, a2, &v6);
  int v4 = v3;
  if (v3 && v3 != 60 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
    sub_1007514D8();
  }
  return v4 != 60;
}

BOOL sub_10001BCA8(pthread_cond_t *a1, pthread_mutex_t **a2, unint64_t a3)
{
  return sub_10001BC04(a1, *a2, a3);
}

uint64_t sub_10001BCB0(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(a1 + a2 + 440);
}

uint64_t sub_10001BCBC(__int16 a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (dword_100A05530) {
    sub_10025B8C0();
  }
  if (!a2 && a3) {
    sub_10025B8C0();
  }
  dword_100A05530 = 1;
  uint64_t v13 = sub_10001BDA8((unsigned __int16)a1 | 0xFC00u, a3, a2, a4, a5, a6, a7, a8);
  if (v13)
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"OI_HCI_VendorCmd failed %d", v14, v15, v16, v17, v18, v19, v20, v13);
      uint64_t v21 = sub_100050B4C(0x54u);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
        sub_100745764();
      }
    }
  }
  else
  {
    word_100A0552C = a1;
  }
  dword_100A05530 = 0;
  return v13;
}

uint64_t sub_10001BDA8(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10001BDE0(272, a4, a3, a4, a5, a6, a7, a8, a1);
}

uint64_t sub_10001BDE0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!DWORD2(xmmword_100A19860)) {
    return 103;
  }
  if (sub_100023020()) {
    return 3704;
  }
  if (sub_100023E48()) {
    return 0;
  }
  if (dword_100A19630 != 2 && byte_100A19634 == 0)
  {
    uint64_t result = 627;
    if (a1 <= 161)
    {
      if (((a1 - 98) > 0x33 || ((1 << (a1 - 98)) & 0xBE00214100001) == 0)
        && (a1 - 54) >= 2)
      {
        return result;
      }
    }
    else if (((a1 - 162) > 0x3E || ((1 << (a1 + 94)) & 0x4000002C04002027) == 0) {
           && ((a1 - 243) > 0x1D || ((1 << (a1 + 13)) & 0x20190083) == 0))
    }
    {
      return result;
    }
  }
  ptr = 0;
  uint64_t v27 = 0;
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v28 = &a9;
  uint64_t v12 = sub_100022214((unsigned __int16)a1);
  if (!v12) {
    return 616;
  }
  uint64_t v13 = (uint64_t)v12;
  unint64_t v14 = *((unsigned __int16 *)v12 + 2);
  if ((v14 & 0xC000) != 0 || (*((unsigned char *)&xmmword_100A19650 + (v14 >> 8)) & v14) == 0) {
    return 628;
  }
  if (v12[17]) {
    sub_10025B8C0();
  }
  if (*(unsigned char *)(v13 + 16)) {
    uint64_t result = sub_10001C0AC((int *)v28, v13, (uint64_t *)&ptr, 0, 0, (uint64_t)v25, 0);
  }
  else {
    uint64_t result = sub_100191DE0(v28, v13, (uint64_t *)&ptr, 0, 0, 0, 0);
  }
  if (!result)
  {
    if (a1 == 272)
    {
      if (!*(unsigned char *)(v13 + 16)) {
        sub_10025B8C0();
      }
    }
    else
    {
      sub_100050720(v13);
    }
    if (*(unsigned char *)(v13 + 22))
    {
      uint64_t v15 = sub_1001A11B0((uint64_t)ptr, WORD1(v27));
      if (v15)
      {
        uint64_t v16 = v15;
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"OI_HCIParmCache failed %!", v17, v18, v19, v20, v21, v22, v23, v16);
          long long v24 = sub_100050B4C(0x2Eu);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            sub_100744F6C();
          }
        }
      }
    }
    return sub_100022298(ptr);
  }
  return result;
}

uint64_t sub_10001C0AC(int *a1, uint64_t a2, uint64_t *a3, uint64_t a4, _WORD *a5, uint64_t a6, unsigned char *a7)
{
  int v13 = *(unsigned __int16 *)(a2 + 6) + 4;
  unint64_t v14 = sub_100022FE8(*(unsigned __int16 *)(a2 + 6) + 4);
  if (!v14) {
    return 104;
  }
  uint64_t v15 = v14;
  *((unsigned char *)a3 + 15) = 0;
  *a3 = (uint64_t)v14;
  *((_WORD *)a3 + 4) = v13;
  *((_WORD *)a3 + 5) = v13;
  uint64_t v16 = (_WORD *)a3 + 5;
  if (!(_WORD)v13) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1494, "((*pBs).__data != NULL) && ((*pBs).__trueSize > 0)");
  }
  *((_WORD *)a3 + 6) = 1;
  *((unsigned char *)a3 + 14) = 2;
  v512 = (_WORD *)a3 + 6;
  v513 = (char *)a3 + 14;
  *((_WORD *)a3 + 5) = v13;
  unsigned char *v14 = 1;
  int v17 = sub_100022250(a2);
  if (v17 == 272)
  {
    uint64_t v18 = (char *)a3 + 14;
    uint64_t v19 = a1;
    int v20 = *a1;
    int v21 = a1[2];
    v515 = a1 + 6;
    uint64_t v22 = (char *)*((void *)v19 + 2);
    uint64_t v23 = (_WORD *)a3 + 6;
    if (a6)
    {
      *(_WORD *)(a6 + 8) = v20;
      *(unsigned char *)(a6 + 12) = v21;
      if (v22)
      {
        *(unsigned char *)(a6 + 10) = *v22;
      }
      else
      {
        sub_10025B8C0();
        uint64_t v23 = (_WORD *)a3 + 6;
        uint64_t v18 = (char *)a3 + 14;
      }
      if ((v21 & 0xFE) != 0) {
        *(unsigned char *)(a6 + 11) = v22[1];
      }
      *(void *)a6 = *v515;
    }
    if ((~v20 & 0xFC00) == 0)
    {
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      else
      {
        uint64_t v51 = (unsigned __int16)*v23;
        if ((unsigned __int16)*v16 - (int)v51 > 1)
        {
          if (*v18 == 2)
          {
            *(unsigned char *)(*a3 + v51) = v20;
            *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v20);
            __int16 v52 = *((_WORD *)a3 + 6);
            *((_WORD *)a3 + 6) = v52 + 2;
            if (*((unsigned char *)a3 + 15))
            {
              sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
            }
            else if ((unsigned __int16)*v16 > (unsigned __int16)(v52 + 2))
            {
              if (*v18 == 2)
              {
                uint64_t v53 = *a3;
                *((_WORD *)a3 + 6) = v52 + 3;
                *(unsigned char *)(v53 + (unsigned __int16)(v52 + 2)) = v21;
                while (1)
                {
                  if (!(_BYTE)v21) {
                    goto LABEL_456;
                  }
                  if (*((unsigned char *)a3 + 15)) {
                    break;
                  }
                  uint64_t v54 = (unsigned __int16)*v23;
                  if ((unsigned __int16)*v16 <= v54) {
                    goto LABEL_490;
                  }
                  if (*v18 != 2)
                  {
                    v381 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                    goto LABEL_492;
                  }
                  --v21;
                  char v55 = *v22++;
                  uint64_t v56 = *a3;
                  *((_WORD *)a3 + 6) = v54 + 1;
                  *(unsigned char *)(v56 + v54) = v55;
                }
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_490:
                v381 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_492:
                sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1659, v381);
              }
              v388 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_521:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1655, v388);
            }
            v388 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
            goto LABEL_521;
          }
          v387 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_517:
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1652, v387);
        }
      }
      v387 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
      goto LABEL_517;
    }
    uint64_t v24 = 623;
    goto LABEL_60;
  }
  if (*((unsigned char *)a3 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    goto LABEL_511;
  }
  uint64_t v23 = (_WORD *)a3 + 6;
  uint64_t v18 = (char *)a3 + 14;
  uint64_t v25 = (unsigned __int16)*v512;
  if ((unsigned __int16)*v16 - (int)v25 <= 1)
  {
LABEL_511:
    v386 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
    goto LABEL_513;
  }
  if (*v513 != 2)
  {
    v386 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_513:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1499, v386);
  }
  *(unsigned char *)(*a3 + v25) = *(unsigned char *)(a2 + 2);
  *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(a2 + 3);
  __int16 v26 = *((_WORD *)a3 + 6);
  unsigned __int16 v27 = v26 + 2;
  *((_WORD *)a3 + 6) = v26 + 2;
  uint64_t v24 = 615;
  if (v17 <= 204)
  {
    if (v17 > 99)
    {
      if ((v17 - 134) < 4)
      {
        int v28 = *a1;
        if (*((unsigned char *)a3 + 15))
        {
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        }
        else if ((unsigned __int16)*v16 > v27)
        {
          if (*v513 == 2)
          {
            __int16 v29 = (char *)*((void *)a1 + 1);
            uint64_t v30 = *a3;
            *((_WORD *)a3 + 6) = v26 + 3;
            *(unsigned char *)(v30 + (unsigned __int16)(v26 + 2)) = v28;
            while (1)
            {
              if (!(_BYTE)v28) {
                goto LABEL_456;
              }
              if (*((unsigned char *)a3 + 15)) {
                break;
              }
              uint64_t v31 = (unsigned __int16)*v512;
              if ((unsigned __int16)*v16 <= v31) {
                goto LABEL_494;
              }
              if (*v513 != 2)
              {
                v382 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                goto LABEL_496;
              }
              LOBYTE(v28) = v28 - 1;
              char v32 = *v29++;
              uint64_t v33 = *a3;
              *((_WORD *)a3 + 6) = v31 + 1;
              *(unsigned char *)(v33 + v31) = v32;
            }
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_494:
            v382 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_496:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1686, v382);
          }
          v426 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_672:
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1683, v426);
        }
        v426 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_672;
      }
      if (v17 != 100)
      {
        if (v17 == 138)
        {
          int v57 = *a1;
          int v58 = a1[2];
          char v59 = (unsigned char *)*((void *)a1 + 2);
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else if ((unsigned __int16)*v16 > v27)
          {
            if (*v513 == 2)
            {
              unint64_t v60 = (unsigned char *)*((void *)a1 + 3);
              uint64_t v61 = *a3;
              *((_WORD *)a3 + 6) = v26 + 3;
              *(unsigned char *)(v61 + (unsigned __int16)(v26 + 2)) = v57;
              if (*((unsigned char *)a3 + 15))
              {
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              else
              {
                uint64_t v62 = (unsigned __int16)*v512;
                if ((unsigned __int16)*v16 > v62)
                {
                  if (*v513 == 2)
                  {
                    uint64_t v63 = *a3;
                    *((_WORD *)a3 + 6) = v62 + 1;
                    *(unsigned char *)(v63 + v62) = v58;
                    uint64_t v64 = v58;
                    if ((_BYTE)v58)
                    {
                      uint64_t v65 = v58;
                      while (!*((unsigned char *)a3 + 15))
                      {
                        uint64_t v66 = (unsigned __int16)*v512;
                        if ((unsigned __int16)*v16 - (int)v66 <= 1) {
                          goto LABEL_499;
                        }
                        if (*v513 != 2)
                        {
                          v383 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                          goto LABEL_501;
                        }
                        *(unsigned char *)(*a3 + v66) = *v59;
                        *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v59[1];
                        *((_WORD *)a3 + 6) += 2;
                        v59 += 2;
                        if (!--v65)
                        {
                          while (!*((unsigned char *)a3 + 15))
                          {
                            uint64_t v67 = (unsigned __int16)*v512;
                            if ((unsigned __int16)*v16 - (int)v67 <= 1) {
                              goto LABEL_503;
                            }
                            if (*v513 != 2)
                            {
                              v384 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                              goto LABEL_505;
                            }
                            int v68 = 0;
                            *(unsigned char *)(*a3 + v67) = *v60;
                            *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v60[1];
                            *((_WORD *)a3 + 6) += 2;
                            v60 += 2;
                            if (!--v64) {
                              goto LABEL_482;
                            }
                          }
                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
LABEL_503:
                          v384 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_505:
                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1719, v384);
                        }
                      }
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_499:
                      v383 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_501:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1715, v383);
                    }
LABEL_456:
                    int v68 = 0;
                    goto LABEL_482;
                  }
                  v439 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_726:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1712, v439);
                }
              }
              v439 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
              goto LABEL_726;
            }
            v438 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_722:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1711, v438);
          }
          v438 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_722;
        }
LABEL_60:
        sub_100023010(v15);
        return v24;
      }
      int v108 = *a1;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      else if ((unsigned __int16)*v16 > v27)
      {
        if (*v513 == 2)
        {
          uint64_t v109 = *((void *)a1 + 1);
          uint64_t v110 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(unsigned char *)(v110 + (unsigned __int16)(v26 + 2)) = 3 * v108 + 1;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else
          {
            uint64_t v111 = (unsigned __int16)*v512;
            if ((unsigned __int16)*v16 > v111)
            {
              if (*v513 == 2)
              {
                uint64_t v112 = *a3;
                *((_WORD *)a3 + 6) = v111 + 1;
                *(unsigned char *)(v112 + v111) = v108;
                uint64_t v113 = v108;
                if ((_BYTE)v108)
                {
                  while (!*((unsigned char *)a3 + 15))
                  {
                    uint64_t v114 = (unsigned __int16)*v512;
                    if ((unsigned __int16)*v16 - (int)v114 <= 2) {
                      goto LABEL_507;
                    }
                    if (*v513 != 2)
                    {
                      v385 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                      goto LABEL_509;
                    }
                    int v68 = 0;
                    *(unsigned char *)(*a3 + v114) = *(_DWORD *)v109;
                    *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(*(_DWORD *)v109);
                    *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = *(_WORD *)(v109 + 2);
                    *((_WORD *)a3 + 6) += 3;
                    v109 += 4;
                    if (!--v113) {
                      goto LABEL_482;
                    }
                  }
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_507:
                  v385 = "ByteStream_NumReadBytesAvail(*pBs) >= 3";
LABEL_509:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1607, v385);
                }
                goto LABEL_456;
              }
              v441 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_734:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1604, v441);
            }
          }
          v441 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_734;
        }
        v440 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_730:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1601, v440);
      }
      v440 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
      goto LABEL_730;
    }
    if (v17 != 56)
    {
      if (v17 != 62)
      {
        if (v17 != 95) {
          goto LABEL_60;
        }
        int v43 = *a1;
        if (*((unsigned char *)a3 + 15))
        {
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        }
        else if ((unsigned __int16)*v16 > v27)
        {
          if (*v513 == 2)
          {
            int v44 = a1[2];
            char v45 = *(unsigned char *)(a2 + 6);
            uint64_t v46 = *a3;
            *((_WORD *)a3 + 6) = v26 + 3;
            *(unsigned char *)(v46 + (unsigned __int16)(v26 + 2)) = v45;
            if (*((unsigned char *)a3 + 15))
            {
              sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
            }
            else
            {
              uint64_t v47 = (unsigned __int16)*v512;
              if ((unsigned __int16)*v16 > v47)
              {
                if (*v513 == 2)
                {
                  uint64_t v48 = *a3;
                  *((_WORD *)a3 + 6) = v47 + 1;
                  *(unsigned char *)(v48 + v47) = 1;
                  if (*((unsigned char *)a3 + 15))
                  {
                    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                  }
                  else
                  {
                    uint64_t v49 = (unsigned __int16)*v512;
                    if ((unsigned __int16)*v16 - (int)v49 > 1)
                    {
                      if (*v513 == 2)
                      {
                        *(unsigned char *)(*a3 + v49) = v43;
                        *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v43);
                        unsigned __int16 v50 = *((_WORD *)a3 + 6) + 2;
                        *((_WORD *)a3 + 6) = v50;
                        if (*((unsigned char *)a3 + 15))
                        {
                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        else if ((unsigned __int16)*v16 - v50 > 1)
                        {
                          if (*v513 == 2)
                          {
                            *(unsigned char *)(*a3 + v50) = v44;
                            *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v44);
                            *((_WORD *)a3 + 6) += 2;
LABEL_107:
                            int v68 = 1;
                            goto LABEL_482;
                          }
                          v430 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_688:
                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1582, v430);
                        }
                        v430 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                        goto LABEL_688;
                      }
                      v429 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_684:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1581, v429);
                    }
                  }
                  v429 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                  goto LABEL_684;
                }
                v428 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_680:
                sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1580, v428);
              }
            }
            v428 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
            goto LABEL_680;
          }
          v427 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_676:
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1578, v427);
        }
        v427 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_676;
      }
      uint64_t v100 = *(void *)a1;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      else if ((unsigned __int16)*v16 > v27)
      {
        if (*v513 == 2)
        {
          long long v101 = (_OWORD *)*((void *)a1 + 1);
          char v102 = *(unsigned char *)(a2 + 6);
          uint64_t v103 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(unsigned char *)(v103 + (unsigned __int16)(v26 + 2)) = v102;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else
          {
            uint64_t v104 = (unsigned __int16)*v512;
            if ((unsigned __int16)*v16 > v104)
            {
              if (*v513 == 2)
              {
                uint64_t v105 = *a3;
                *((_WORD *)a3 + 6) = v104 + 1;
                *(unsigned char *)(v105 + v104) = 1;
                if (*((unsigned char *)a3 + 15))
                {
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                else
                {
                  uint64_t v106 = (unsigned __int16)*v512;
                  if ((unsigned __int16)*v16 - (int)v106 > 5)
                  {
                    if (*v513 == 2)
                    {
                      sub_100008A18(*a3 + v106, v100, 6uLL);
                      unsigned __int16 v107 = *((_WORD *)a3 + 6) + 6;
                      *((_WORD *)a3 + 6) = v107;
                      if (*((unsigned char *)a3 + 15))
                      {
                        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestac"
                                               "k/hci/hcicmdapi.c");
                      }
                      else
                      {
                        uint64_t v23 = (_WORD *)a3 + 6;
                        uint64_t v18 = (char *)a3 + 14;
                        if ((unsigned __int16)*v16 - (unint64_t)v107 > 0xF)
                        {
                          if (*v513 == 2)
                          {
                            *(_OWORD *)(*a3 + v107) = *v101;
                            *v512 += 16;
                            goto LABEL_107;
                          }
                          v437 = "((*pBs)).__RWFlag == BYTESTREAM_WRITE";
LABEL_716:
                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1558, v437);
                        }
                      }
                      v437 = "ByteStream_NumReadBytesAvail((*pBs)) >= (sizeof(*pLinkKey))";
                      goto LABEL_716;
                    }
                    v436 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_712:
                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1557, v436);
                  }
                }
                v436 = "ByteStream_NumReadBytesAvail(*pBs) >= OI_BD_ADDR_BYTE_SIZE";
                goto LABEL_712;
              }
              v435 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_708:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1556, v435);
            }
          }
          v435 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_708;
        }
        v434 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_704:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1554, v434);
      }
      v434 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
      goto LABEL_704;
    }
    int v87 = *a1;
    int v88 = a1[2];
    int v89 = a1[4];
    if (*((unsigned char *)a3 + 15))
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    }
    else if ((unsigned __int16)*v16 > v27)
    {
      if (*v513 == 2)
      {
        int v90 = (const void *)*((void *)a1 + 3);
        uint64_t v91 = *a3;
        *((_WORD *)a3 + 6) = v26 + 3;
        *(unsigned char *)(v91 + (unsigned __int16)(v26 + 2)) = v89 + 2;
        if (*((unsigned char *)a3 + 15))
        {
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        }
        else
        {
          uint64_t v92 = (unsigned __int16)*v512;
          if ((unsigned __int16)*v16 > v92)
          {
            if (*v513 == 2)
            {
              uint64_t v93 = *a3;
              *((_WORD *)a3 + 6) = v92 + 1;
              *(unsigned char *)(v93 + v92) = v87;
              if (*((unsigned char *)a3 + 15))
              {
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              else
              {
                uint64_t v94 = (unsigned __int16)*v512;
                if ((unsigned __int16)*v16 > v94)
                {
                  if (*v513 == 2)
                  {
                    size_t v95 = v89;
                    uint64_t v96 = *a3;
                    *((_WORD *)a3 + 6) = v94 + 1;
                    *(unsigned char *)(v96 + v94) = v88;
                    uint64_t v97 = *a3;
                    uint64_t v98 = *((unsigned __int16 *)a3 + 6);
                    if (*((unsigned char *)a3 + 15))
                    {
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                      uint64_t v18 = (char *)a3 + 14;
                      int v99 = 0;
                    }
                    else
                    {
                      int v99 = (unsigned __int16)*v16 - v98;
                    }
                    if (v99 < (int)v95)
                    {
                      uint64_t v115 = "ByteStream_NumReadBytesAvail(*pBs) >= (conditionLength)";
LABEL_718:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1530, v115);
                    }
                    if (*v18 != 2)
                    {
                      uint64_t v115 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                      goto LABEL_718;
                    }
                    memmove((void *)(v97 + v98), v90, v95);
                    int v68 = 0;
                    uint64_t v23 = (_WORD *)a3 + 6;
                    __int16 v231 = *v512 + v95;
                    goto LABEL_480;
                  }
                  v433 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_700:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1529, v433);
                }
              }
              v433 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
              goto LABEL_700;
            }
            v432 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_696:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1528, v432);
          }
        }
        v432 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_696;
      }
      v431 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_692:
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 1525, v431);
    }
    v431 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
    goto LABEL_692;
  }
  switch(v17)
  {
    case 253:
      long long v34 = a1;
      int v35 = *a1;
      v516 = a1 + 4;
      int v36 = v34[2];
      uint64_t v37 = v36;
      if ((_BYTE)v36)
      {
        long long v38 = *(unsigned char **)v516;
        long long v39 = (unsigned char *)*((void *)v516 + 1);
        long long v40 = (char *)*((void *)v516 + 2);
        long long v41 = (unsigned __int8 *)*((void *)v516 + 3);
        long long v42 = (char *)*((void *)v516 + 4);
      }
      else
      {
        long long v38 = 0;
        long long v39 = 0;
        long long v40 = 0;
        long long v41 = 0;
        long long v42 = 0;
      }
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      else if ((unsigned __int16)*v16 > v27)
      {
        if (*v513 == 2)
        {
          uint64_t v325 = *a3;
          uint64_t v326 = (unsigned __int16)(v26 + 2);
          *((_WORD *)a3 + 6) = v26 + 3;
          *(unsigned char *)(v325 + v326) = (4 * v36) | 2;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else
          {
            uint64_t v327 = (unsigned __int16)*v512;
            if ((unsigned __int16)*v16 > v327)
            {
              if (*v513 == 2)
              {
                uint64_t v328 = *a3;
                *((_WORD *)a3 + 6) = v327 + 1;
                *(unsigned char *)(v328 + v327) = v35;
                if (*((unsigned char *)a3 + 15))
                {
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                else
                {
                  uint64_t v329 = (unsigned __int16)*v512;
                  if ((unsigned __int16)*v16 > v329)
                  {
                    if (*v513 == 2)
                    {
                      uint64_t v501 = v326;
                      uint64_t v503 = v325;
                      char v505 = (4 * v36) | 2;
                      uint64_t v330 = *a3;
                      *((_WORD *)a3 + 6) = v329 + 1;
                      *(unsigned char *)(v330 + v329) = v36;
                      int v331 = 0;
                      if ((_BYTE)v36)
                      {
                        while (!*((unsigned char *)a3 + 15))
                        {
                          uint64_t v332 = (unsigned __int16)*v23;
                          v333 = (char *)a3 + 14;
                          if ((unsigned __int16)*v16 <= v332) {
                            goto LABEL_615;
                          }
                          if (*v513 != 2)
                          {
                            v412 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                            goto LABEL_617;
                          }
                          char v334 = *v38;
                          uint64_t v335 = *a3;
                          *((_WORD *)a3 + 6) = v332 + 1;
                          *(unsigned char *)(v335 + v332) = v334;
                          if (*((unsigned char *)a3 + 15))
                          {
                            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/core"
                                                   "stack/hci/hcicmdapi.c");
LABEL_619:
                            v413 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_621:
                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2291, v413);
                          }
                          uint64_t v336 = (unsigned __int16)*v23;
                          if ((unsigned __int16)*v16 <= v336) {
                            goto LABEL_619;
                          }
                          if (*v513 != 2)
                          {
                            v413 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                            goto LABEL_621;
                          }
                          char v337 = *v39;
                          uint64_t v338 = *a3;
                          *((_WORD *)a3 + 6) = v336 + 1;
                          *(unsigned char *)(v338 + v336) = v337;
                          if (*((unsigned char *)a3 + 15))
                          {
                            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/core"
                                                   "stack/hci/hcicmdapi.c");
LABEL_623:
                            v414 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_625:
                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2292, v414);
                          }
                          uint64_t v339 = (unsigned __int16)*v23;
                          if ((unsigned __int16)*v16 <= v339) {
                            goto LABEL_623;
                          }
                          if (*v513 != 2)
                          {
                            v414 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                            goto LABEL_625;
                          }
                          char v340 = *v40;
                          uint64_t v341 = *a3;
                          *((_WORD *)a3 + 6) = v339 + 1;
                          *(unsigned char *)(v341 + v339) = v340;
                          if (*((unsigned char *)a3 + 15))
                          {
                            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/core"
                                                   "stack/hci/hcicmdapi.c");
LABEL_627:
                            v415 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_629:
                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2294, v415);
                          }
                          uint64_t v342 = (unsigned __int16)*v23;
                          if ((unsigned __int16)*v16 <= v342) {
                            goto LABEL_627;
                          }
                          if (*v513 != 2)
                          {
                            v415 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                            goto LABEL_629;
                          }
                          v507 = v39;
                          v509 = v38;
                          uint64_t v511 = v37;
                          int v343 = *v41;
                          uint64_t v344 = *a3;
                          *((_WORD *)a3 + 6) = v342 + 1;
                          *(unsigned char *)(v344 + v342) = v343;
                          uint64_t v345 = *a3;
                          uint64_t v346 = *((unsigned __int16 *)a3 + 6);
                          if (*((unsigned char *)a3 + 15))
                          {
                            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/core"
                                                   "stack/hci/hcicmdapi.c");
                            v333 = (char *)a3 + 14;
                            int v347 = 0;
                          }
                          else
                          {
                            int v347 = (unsigned __int16)*v16 - v346;
                          }
                          size_t v348 = *v41;
                          if (v347 < (int)v348)
                          {
                            v416 = "ByteStream_NumReadBytesAvail(*pBs) >= (subeventDataLength[i])";
                            goto LABEL_632;
                          }
                          if (*v333 != 2)
                          {
                            v416 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_632:
                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2295, v416);
                          }
                          v331 += v343;
                          memmove((void *)(v345 + v346), v42, v348);
                          __int16 v349 = *v41++;
                          uint64_t v23 = (_WORD *)a3 + 6;
                          v42 += v331;
                          *v512 += v349;
                          ++v40;
                          long long v39 = v507 + 1;
                          long long v38 = v509 + 1;
                          uint64_t v37 = v511 - 1;
                          if (v511 == 1) {
                            goto LABEL_412;
                          }
                        }
                        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestac"
                                               "k/hci/hcicmdapi.c");
LABEL_615:
                        v412 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_617:
                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2290, v412);
                      }
LABEL_412:
                      int v68 = 0;
                      *(unsigned char *)(v503 + v501) = v331 + v505;
                      goto LABEL_481;
                    }
                    v484 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_910:
                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2287, v484);
                  }
                }
                v484 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                goto LABEL_910;
              }
              v483 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_906:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2286, v483);
            }
          }
          v483 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_906;
        }
        v482 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_902:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2285, v482);
      }
      v482 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
      goto LABEL_902;
    case 254:
      uint64_t v153 = a1;
      int v154 = *a1;
      int v155 = a1[2];
      int v156 = a1[4];
      int v157 = a1[6];
      int v158 = a1[8];
      v521 = (const void **)(a1 + 12);
      int v159 = v153[10];
      size_t v160 = v159;
      if ((_BYTE)v159) {
        uint64_t v161 = *v521;
      }
      else {
        uint64_t v161 = 0;
      }
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      else if ((unsigned __int16)*v16 > v27)
      {
        if (*v513 == 2)
        {
          uint64_t v350 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(unsigned char *)(v350 + (unsigned __int16)(v26 + 2)) = v159 + 8;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else
          {
            uint64_t v351 = (unsigned __int16)*v512;
            if ((unsigned __int16)*v16 - (int)v351 > 1)
            {
              if (*v513 == 2)
              {
                *(unsigned char *)(*a3 + v351) = v154;
                *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v154);
                unsigned __int16 v352 = *((_WORD *)a3 + 6) + 2;
                *((_WORD *)a3 + 6) = v352;
                if (*((unsigned char *)a3 + 15))
                {
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                else if ((unsigned __int16)*v16 - v352 > 1)
                {
                  if (*v513 == 2)
                  {
                    *(unsigned char *)(*a3 + v352) = v155;
                    *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v155);
                    __int16 v353 = *((_WORD *)a3 + 6);
                    *((_WORD *)a3 + 6) = v353 + 2;
                    if (*((unsigned char *)a3 + 15))
                    {
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    else if ((unsigned __int16)*v16 > (unsigned __int16)(v353 + 2))
                    {
                      if (*v513 == 2)
                      {
                        uint64_t v354 = *a3;
                        *((_WORD *)a3 + 6) = v353 + 3;
                        *(unsigned char *)(v354 + (unsigned __int16)(v353 + 2)) = v156;
                        if (*((unsigned char *)a3 + 15))
                        {
                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
                        }
                        else
                        {
                          uint64_t v355 = (unsigned __int16)*v512;
                          if ((unsigned __int16)*v16 > v355)
                          {
                            if (*v513 == 2)
                            {
                              uint64_t v356 = *a3;
                              *((_WORD *)a3 + 6) = v355 + 1;
                              *(unsigned char *)(v356 + v355) = v157;
                              if (*((unsigned char *)a3 + 15))
                              {
                                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "corestack/hci/hcicmdapi.c");
                              }
                              else
                              {
                                uint64_t v357 = (unsigned __int16)*v512;
                                if ((unsigned __int16)*v16 > v357)
                                {
                                  if (*v513 == 2)
                                  {
                                    uint64_t v358 = *a3;
                                    *((_WORD *)a3 + 6) = v357 + 1;
                                    *(unsigned char *)(v358 + v357) = v158;
                                    if (*((unsigned char *)a3 + 15))
                                    {
                                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    else
                                    {
                                      uint64_t v359 = (unsigned __int16)*v512;
                                      if ((unsigned __int16)*v16 > v359)
                                      {
                                        if (*v513 == 2)
                                        {
                                          uint64_t v360 = *a3;
                                          *((_WORD *)a3 + 6) = v359 + 1;
                                          *(unsigned char *)(v360 + v359) = v159;
                                          uint64_t v361 = *a3;
                                          uint64_t v362 = *((unsigned __int16 *)a3 + 6);
                                          if (*((unsigned char *)a3 + 15))
                                          {
                                            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth"
                                                                   "_base/Stack/corestack/hci/hcicmdapi.c");
                                            uint64_t v18 = (char *)a3 + 14;
                                            int v363 = 0;
                                          }
                                          else
                                          {
                                            int v363 = (unsigned __int16)*v16 - v362;
                                          }
                                          if (v363 < (int)v160)
                                          {
                                            v500 = "ByteStream_NumReadBytesAvail(*pBs) >= (responseDataLength)";
                                          }
                                          else
                                          {
                                            if (*v18 == 2)
                                            {
LABEL_479:
                                              memmove((void *)(v361 + v362), v161, v160);
                                              int v68 = 0;
                                              uint64_t v23 = (_WORD *)a3 + 6;
                                              __int16 v231 = *v512 + v160;
LABEL_480:
                                              *uint64_t v23 = v231;
LABEL_481:
                                              uint64_t v18 = (char *)a3 + 14;
                                              goto LABEL_482;
                                            }
                                            v500 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                          }
                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2339, v500);
                                        }
                                        v491 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_938:
                                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2338, v491);
                                      }
                                    }
                                    v491 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                    goto LABEL_938;
                                  }
                                  v490 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_934:
                                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2337, v490);
                                }
                              }
                              v490 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                              goto LABEL_934;
                            }
                            v489 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_930:
                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2336, v489);
                          }
                        }
                        v489 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                        goto LABEL_930;
                      }
                      v488 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_926:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2335, v488);
                    }
                    v488 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                    goto LABEL_926;
                  }
                  v487 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_922:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2334, v487);
                }
                v487 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                goto LABEL_922;
              }
              v486 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_918:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2333, v486);
            }
          }
          v486 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
          goto LABEL_918;
        }
        v485 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_914:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2332, v485);
      }
      v485 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
      goto LABEL_914;
    case 255:
      uint64_t v162 = a1;
      int v163 = *a1;
      int v164 = a1[2];
      v522 = (char **)(a1 + 6);
      int v165 = v162[4];
      uint64_t v166 = v165;
      if ((_BYTE)v165) {
        uint64_t v167 = *v522;
      }
      else {
        uint64_t v167 = 0;
      }
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      else if ((unsigned __int16)*v16 > v27)
      {
        if (*v513 == 2)
        {
          uint64_t v364 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(unsigned char *)(v364 + (unsigned __int16)(v26 + 2)) = v165 + 5;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else
          {
            uint64_t v365 = (unsigned __int16)*v512;
            if ((unsigned __int16)*v16 - (int)v365 > 1)
            {
              if (*v513 == 2)
              {
                *(unsigned char *)(*a3 + v365) = v163;
                *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v163);
                unsigned __int16 v366 = *((_WORD *)a3 + 6) + 2;
                *((_WORD *)a3 + 6) = v366;
                if (*((unsigned char *)a3 + 15))
                {
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                else if ((unsigned __int16)*v16 - v366 > 1)
                {
                  if (*v513 == 2)
                  {
                    *(unsigned char *)(*a3 + v366) = v164;
                    *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v164);
                    __int16 v367 = *((_WORD *)a3 + 6);
                    *((_WORD *)a3 + 6) = v367 + 2;
                    if (*((unsigned char *)a3 + 15))
                    {
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    else if ((unsigned __int16)*v16 > (unsigned __int16)(v367 + 2))
                    {
                      if (*v513 == 2)
                      {
                        uint64_t v368 = *a3;
                        *((_WORD *)a3 + 6) = v367 + 3;
                        *(unsigned char *)(v368 + (unsigned __int16)(v367 + 2)) = v165;
                        if ((_BYTE)v165)
                        {
                          while (!*((unsigned char *)a3 + 15))
                          {
                            uint64_t v369 = (unsigned __int16)*v512;
                            if ((unsigned __int16)*v16 <= v369) {
                              goto LABEL_634;
                            }
                            if (*v513 != 2)
                            {
                              v417 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                              goto LABEL_636;
                            }
                            int v68 = 0;
                            char v370 = *v167++;
                            uint64_t v371 = *a3;
                            *((_WORD *)a3 + 6) = v369 + 1;
                            *(unsigned char *)(v371 + v369) = v370;
                            if (!--v166) {
                              goto LABEL_482;
                            }
                          }
                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
LABEL_634:
                          v417 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_636:
                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2369, v417);
                        }
                        goto LABEL_456;
                      }
                      v495 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_954:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2367, v495);
                    }
                    v495 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                    goto LABEL_954;
                  }
                  v494 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_950:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2366, v494);
                }
                v494 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                goto LABEL_950;
              }
              v493 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_946:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2365, v493);
            }
          }
          v493 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
          goto LABEL_946;
        }
        v492 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_942:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2364, v492);
      }
      v492 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
      goto LABEL_942;
    case 256:
      char v168 = 0;
      int v169 = *a1;
      int v170 = a1[2];
      int v171 = a1[4];
      int v172 = a1[6];
      int v173 = a1[8];
      uint64_t v174 = *((void *)a1 + 5);
      int v175 = a1[12];
      uint64_t v176 = *((void *)a1 + 7);
      uint64_t v177 = *((void *)a1 + 8);
      uint64_t v178 = *((void *)a1 + 9);
      uint64_t v179 = *((void *)a1 + 10);
      uint64_t v180 = *((void *)a1 + 11);
      uint64_t v181 = *((void *)a1 + 12);
      uint64_t v182 = *((void *)a1 + 13);
      uint64_t v183 = *((void *)a1 + 14);
      int v184 = 8;
      unsigned __int8 v185 = v175;
      do
      {
        v168 += v185 & 1;
        v185 >>= 1;
        --v184;
      }
      while (v184);
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        goto LABEL_736;
      }
      if ((unsigned __int16)*v16 <= v27)
      {
LABEL_736:
        v442 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_738;
      }
      if (*v513 != 2)
      {
        v442 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_738:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2423, v442);
      }
      uint64_t v186 = *a3;
      *((_WORD *)a3 + 6) = v26 + 3;
      *(unsigned char *)(v186 + (unsigned __int16)(v26 + 2)) = (16 * v168) | 0xC;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        goto LABEL_740;
      }
      uint64_t v187 = (unsigned __int16)*v512;
      if ((unsigned __int16)*v16 <= v187)
      {
LABEL_740:
        v443 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_742;
      }
      if (*v513 != 2)
      {
        v443 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_742:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2424, v443);
      }
      uint64_t v188 = *a3;
      *((_WORD *)a3 + 6) = v187 + 1;
      *(unsigned char *)(v188 + v187) = v169;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        goto LABEL_744;
      }
      uint64_t v189 = (unsigned __int16)*v512;
      if ((unsigned __int16)*v16 <= v189)
      {
LABEL_744:
        v444 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_746;
      }
      if (*v513 != 2)
      {
        v444 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_746:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2425, v444);
      }
      uint64_t v190 = *a3;
      *((_WORD *)a3 + 6) = v189 + 1;
      *(unsigned char *)(v190 + v189) = v170;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        goto LABEL_748;
      }
      uint64_t v191 = (unsigned __int16)*v512;
      if ((unsigned __int16)*v16 <= v191)
      {
LABEL_748:
        v445 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_750;
      }
      if (*v513 != 2)
      {
        v445 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_750:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2426, v445);
      }
      uint64_t v192 = *a3;
      *((_WORD *)a3 + 6) = v191 + 1;
      *(unsigned char *)(v192 + v191) = v171;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        goto LABEL_752;
      }
      uint64_t v193 = (unsigned __int16)*v512;
      if ((unsigned __int16)*v16 <= v193)
      {
LABEL_752:
        v446 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_754;
      }
      if (*v513 != 2)
      {
        v446 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_754:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2427, v446);
      }
      uint64_t v194 = *a3;
      *((_WORD *)a3 + 6) = v193 + 1;
      *(unsigned char *)(v194 + v193) = v172;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        goto LABEL_756;
      }
      uint64_t v195 = (unsigned __int16)*v512;
      if ((unsigned __int16)*v16 <= v195)
      {
LABEL_756:
        v447 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
        goto LABEL_758;
      }
      if (*v513 != 2)
      {
        v447 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_758:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2428, v447);
      }
      uint64_t v196 = *a3;
      *((_WORD *)a3 + 6) = v195 + 1;
      *(unsigned char *)(v196 + v195) = v173;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
        goto LABEL_760;
      }
      uint64_t v197 = (unsigned __int16)*v512;
      if ((unsigned __int16)*v16 - (int)v197 <= 5)
      {
LABEL_760:
        v448 = "ByteStream_NumReadBytesAvail(*pBs) >= OI_BD_ADDR_BYTE_SIZE";
        goto LABEL_762;
      }
      uint64_t v502 = v179;
      uint64_t v504 = v178;
      uint64_t v506 = v177;
      uint64_t v508 = v176;
      char v510 = v173;
      if (*v513 != 2)
      {
        v448 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_762:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2429, v448);
      }
      uint64_t v198 = v174;
      sub_100008A18(*a3 + v197, v174, 6uLL);
      __int16 v199 = *((_WORD *)a3 + 6);
      *((_WORD *)a3 + 6) = v199 + 6;
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_764:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2430, "ByteStream_NumReadBytesAvail(*pBs) >= 1");
      }
      uint64_t v18 = (char *)a3 + 14;
      if ((unsigned __int16)*v16 <= (unsigned __int16)(v199 + 6)) {
        goto LABEL_764;
      }
      uint64_t v23 = (_WORD *)a3 + 6;
      if (*v513 != 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2430, "(*pBs).__RWFlag == BYTESTREAM_WRITE");
      }
      uint64_t v200 = 0;
      uint64_t v201 = *a3;
      *((_WORD *)a3 + 6) = v199 + 7;
      *(unsigned char *)(v201 + (unsigned __int16)(v199 + 6)) = v175;
      do
      {
        if (v175)
        {
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_638:
            v418 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_640:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2436, v418);
          }
          uint64_t v202 = (unsigned __int16)*v512;
          if ((unsigned __int16)*v16 - (int)v202 <= 1) {
            goto LABEL_638;
          }
          if (*v513 != 2)
          {
            v418 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_640;
          }
          *(unsigned char *)(*a3 + v202) = *(unsigned char *)(v508 + v200);
          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(v508 + v200 + 1);
          unsigned __int16 v203 = *((_WORD *)a3 + 6) + 2;
          *((_WORD *)a3 + 6) = v203;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_642:
            v419 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_644:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2437, v419);
          }
          if ((unsigned __int16)*v16 - v203 <= 1) {
            goto LABEL_642;
          }
          if (*v513 != 2)
          {
            v419 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_644;
          }
          *(unsigned char *)(*a3 + v203) = *(unsigned char *)(v506 + v200);
          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(v506 + v200 + 1);
          unsigned __int16 v204 = *((_WORD *)a3 + 6) + 2;
          *((_WORD *)a3 + 6) = v204;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_646:
            v420 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_648:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2438, v420);
          }
          if ((unsigned __int16)*v16 - v204 <= 1) {
            goto LABEL_646;
          }
          if (*v513 != 2)
          {
            v420 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_648;
          }
          *(unsigned char *)(*a3 + v204) = *(unsigned char *)(v504 + v200);
          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(v504 + v200 + 1);
          unsigned __int16 v205 = *((_WORD *)a3 + 6) + 2;
          *((_WORD *)a3 + 6) = v205;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_650:
            v421 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_652:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2439, v421);
          }
          if ((unsigned __int16)*v16 - v205 <= 1) {
            goto LABEL_650;
          }
          if (*v513 != 2)
          {
            v421 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_652;
          }
          *(unsigned char *)(*a3 + v205) = *(unsigned char *)(v502 + v200);
          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(v502 + v200 + 1);
          unsigned __int16 v206 = *((_WORD *)a3 + 6) + 2;
          *((_WORD *)a3 + 6) = v206;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_654:
            v422 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_656:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2440, v422);
          }
          if ((unsigned __int16)*v16 - v206 <= 1) {
            goto LABEL_654;
          }
          if (*v513 != 2)
          {
            v422 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_656;
          }
          *(unsigned char *)(*a3 + v206) = *(unsigned char *)(v180 + v200);
          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(v180 + v200 + 1);
          unsigned __int16 v207 = *((_WORD *)a3 + 6) + 2;
          *((_WORD *)a3 + 6) = v207;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_658:
            v423 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_660:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2441, v423);
          }
          if ((unsigned __int16)*v16 - v207 <= 1) {
            goto LABEL_658;
          }
          if (*v513 != 2)
          {
            v423 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_660;
          }
          *(unsigned char *)(*a3 + v207) = *(unsigned char *)(v181 + v200);
          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(v181 + v200 + 1);
          unsigned __int16 v208 = *((_WORD *)a3 + 6) + 2;
          *((_WORD *)a3 + 6) = v208;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_662:
            v424 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_664:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2442, v424);
          }
          if ((unsigned __int16)*v16 - v208 <= 1) {
            goto LABEL_662;
          }
          if (*v513 != 2)
          {
            v424 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_664;
          }
          *(unsigned char *)(*a3 + v208) = *(unsigned char *)(v182 + v200);
          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(v182 + v200 + 1);
          unsigned __int16 v209 = *((_WORD *)a3 + 6) + 2;
          *((_WORD *)a3 + 6) = v209;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_666:
            v425 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_668:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2443, v425);
          }
          if ((unsigned __int16)*v16 - v209 <= 1) {
            goto LABEL_666;
          }
          if (*v513 != 2)
          {
            v425 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_668;
          }
          *(unsigned char *)(*a3 + v209) = *(unsigned char *)(v183 + v200);
          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = *(unsigned char *)(v183 + v200 + 1);
          *((_WORD *)a3 + 6) += 2;
        }
        LOBYTE(v175) = v175 >> 1;
        v200 += 2;
      }
      while (v200 != 16);
      *(unsigned char *)a4 = v510;
      if (!v198) {
        goto LABEL_456;
      }
      int v68 = 0;
      int v210 = *(_DWORD *)v198;
      *(_WORD *)(a4 + 5) = *(_WORD *)(v198 + 4);
      *(_DWORD *)(a4 + 1) = v210;
LABEL_482:
      if (*v18 == 2) {
        _WORD *v16 = *v23;
      }
      *uint64_t v18 = 15;
      if (v68 && v13 != (unsigned __int16)*v16) {
        sub_10025B8C0();
      }
      return 0;
    case 257:
      v211 = a1;
      int v212 = *a1;
      int v213 = a1[2];
      v523 = (const void **)(a1 + 6);
      int v214 = v211[4];
      size_t v160 = v214;
      if ((_BYTE)v214) {
        uint64_t v161 = *v523;
      }
      else {
        uint64_t v161 = 0;
      }
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      else if ((unsigned __int16)*v16 > v27)
      {
        if (*v513 == 2)
        {
          uint64_t v372 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(unsigned char *)(v372 + (unsigned __int16)(v26 + 2)) = v214 + 3;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else
          {
            uint64_t v373 = (unsigned __int16)*v512;
            if ((unsigned __int16)*v16 > v373)
            {
              if (*v513 == 2)
              {
                uint64_t v374 = *a3;
                *((_WORD *)a3 + 6) = v373 + 1;
                *(unsigned char *)(v374 + v373) = v212;
                if (*((unsigned char *)a3 + 15))
                {
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                }
                else
                {
                  uint64_t v375 = (unsigned __int16)*v512;
                  if ((unsigned __int16)*v16 > v375)
                  {
                    if (*v513 == 2)
                    {
                      uint64_t v376 = *a3;
                      *((_WORD *)a3 + 6) = v375 + 1;
                      *(unsigned char *)(v376 + v375) = v213;
                      if (*((unsigned char *)a3 + 15))
                      {
                        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestac"
                                               "k/hci/hcicmdapi.c");
                      }
                      else
                      {
                        uint64_t v377 = (unsigned __int16)*v512;
                        if ((unsigned __int16)*v16 > v377)
                        {
                          if (*v513 == 2)
                          {
                            uint64_t v378 = *a3;
                            *((_WORD *)a3 + 6) = v377 + 1;
                            *(unsigned char *)(v378 + v377) = v214;
                            uint64_t v361 = *a3;
                            uint64_t v362 = *((unsigned __int16 *)a3 + 6);
                            if (*((unsigned char *)a3 + 15))
                            {
                              sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/co"
                                                     "restack/hci/hcicmdapi.c");
                              uint64_t v18 = (char *)a3 + 14;
                              int v379 = 0;
                            }
                            else
                            {
                              int v379 = (unsigned __int16)*v16 - v362;
                            }
                            if (v379 < (int)v160) {
                              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2481, "ByteStream_NumReadBytesAvail(*pBs) >= (decisionDataLength)");
                            }
                            if (*v18 != 2) {
                              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2481, "(*pBs).__RWFlag == BYTESTREAM_WRITE");
                            }
                            goto LABEL_479;
                          }
                          v499 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_970:
                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2480, v499);
                        }
                      }
                      v499 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                      goto LABEL_970;
                    }
                    v498 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_966:
                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2479, v498);
                  }
                }
                v498 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                goto LABEL_966;
              }
              v497 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_962:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2478, v497);
            }
          }
          v497 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_962;
        }
        v496 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_958:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2477, v496);
      }
      v496 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
      goto LABEL_958;
    case 258:
      int v215 = *a1;
      v216 = (char *)*((void *)a1 + 1);
      v217 = (char *)*((void *)a1 + 2);
      if (*((unsigned char *)a3 + 15))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
      }
      else if ((unsigned __int16)*v16 > v27)
      {
        if (*v513 == 2)
        {
          v218 = (long long *)*((void *)a1 + 3);
          uint64_t v219 = *a3;
          *((_WORD *)a3 + 6) = v26 + 3;
          *(unsigned char *)(v219 + (unsigned __int16)(v26 + 2)) = (18 * v215) | 1;
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else
          {
            uint64_t v220 = (unsigned __int16)*v512;
            if ((unsigned __int16)*v16 > v220)
            {
              if (*v513 == 2)
              {
                uint64_t v221 = *a3;
                *((_WORD *)a3 + 6) = v220 + 1;
                *(unsigned char *)(v221 + v220) = v215;
                uint64_t v222 = v215;
                if ((_BYTE)v215)
                {
                  while (!*((unsigned char *)a3 + 15))
                  {
                    uint64_t v223 = (unsigned __int16)*v512;
                    if ((unsigned __int16)*v16 <= v223) {
                      goto LABEL_603;
                    }
                    if (*v513 != 2)
                    {
                      v409 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                      goto LABEL_605;
                    }
                    char v224 = *v216;
                    uint64_t v225 = *a3;
                    *((_WORD *)a3 + 6) = v223 + 1;
                    *(unsigned char *)(v225 + v223) = v224;
                    if (*((unsigned char *)a3 + 15))
                    {
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_607:
                      v410 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_609:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2509, v410);
                    }
                    uint64_t v226 = (unsigned __int16)*v512;
                    if ((unsigned __int16)*v16 <= v226) {
                      goto LABEL_607;
                    }
                    if (*v513 != 2)
                    {
                      v410 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                      goto LABEL_609;
                    }
                    char v227 = *v217;
                    uint64_t v228 = *a3;
                    *((_WORD *)a3 + 6) = v226 + 1;
                    *(unsigned char *)(v228 + v226) = v227;
                    if (*((unsigned char *)a3 + 15))
                    {
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_611:
                      v411 = "ByteStream_NumReadBytesAvail(*pBs) >= (16)";
LABEL_613:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2510, v411);
                    }
                    uint64_t v229 = *((unsigned __int16 *)a3 + 6);
                    if ((unsigned __int16)*v16 - (int)v229 <= 15) {
                      goto LABEL_611;
                    }
                    if (*v513 != 2)
                    {
                      v411 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                      goto LABEL_613;
                    }
                    int v68 = 0;
                    long long v230 = *v218++;
                    *(_OWORD *)(*a3 + v229) = v230;
                    *v512 += 16;
                    ++v217;
                    ++v216;
                    if (!--v222) {
                      goto LABEL_482;
                    }
                  }
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_603:
                  v409 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_605:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2508, v409);
                }
                goto LABEL_456;
              }
              v450 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_772:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2505, v450);
            }
          }
          v450 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_772;
        }
        v449 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_768:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2504, v449);
      }
      v449 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
      goto LABEL_768;
    default:
      switch(v17)
      {
        case 230:
          uint64_t v69 = a1;
          int v70 = *a1;
          unsigned int v71 = a1[2];
          unsigned int v72 = a1[4];
          int v73 = a1[6];
          int v74 = a1[8];
          int v75 = a1[10];
          int v76 = a1[12];
          int v77 = a1[14];
          v517 = a1 + 18;
          int v78 = v69[16];
          uint64_t v79 = v78;
          if ((_BYTE)v78)
          {
            id v80 = *(char **)v517;
            id v81 = (unsigned char *)*((void *)v517 + 1);
            __n128 v82 = (unsigned char *)*((void *)v517 + 2);
            uint64_t v83 = (char *)*((void *)v517 + 3);
            uint64_t v84 = (char *)*((void *)v517 + 4);
            uint64_t v85 = (char *)*((void *)v517 + 5);
            uint64_t v86 = (char *)*((void *)v517 + 6);
          }
          else
          {
            id v80 = 0;
            id v81 = 0;
            __n128 v82 = 0;
            uint64_t v83 = 0;
            uint64_t v84 = 0;
            uint64_t v85 = 0;
            uint64_t v86 = 0;
          }
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else if ((unsigned __int16)*v16 > v27)
          {
            if (*v513 == 2)
            {
              uint64_t v232 = *a3;
              *((_WORD *)a3 + 6) = v26 + 3;
              *(unsigned char *)(v232 + (unsigned __int16)(v26 + 2)) = 9 * v78 + 16;
              if (*((unsigned char *)a3 + 15))
              {
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              else
              {
                uint64_t v233 = (unsigned __int16)*v512;
                if ((unsigned __int16)*v16 > v233)
                {
                  if (*v513 == 2)
                  {
                    uint64_t v234 = *a3;
                    *((_WORD *)a3 + 6) = v233 + 1;
                    *(unsigned char *)(v234 + v233) = v70;
                    if (*((unsigned char *)a3 + 15))
                    {
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    else
                    {
                      uint64_t v235 = (unsigned __int16)*v512;
                      if ((unsigned __int16)*v16 - (int)v235 > 2)
                      {
                        if (*v513 == 2)
                        {
                          if (!HIBYTE(v71))
                          {
                            *(unsigned char *)(*a3 + v235) = v71;
                            *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v71);
                            *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = BYTE2(v71);
                            unsigned __int16 v236 = *((_WORD *)a3 + 6) + 3;
                            *((_WORD *)a3 + 6) = v236;
                            if (*((unsigned char *)a3 + 15))
                            {
                              sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/co"
                                                     "restack/hci/hcicmdapi.c");
                            }
                            else if ((unsigned __int16)*v16 - v236 > 2)
                            {
                              if (*v513 == 2)
                              {
                                if (!HIBYTE(v72))
                                {
                                  *(unsigned char *)(*a3 + v236) = v72;
                                  *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v72);
                                  *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = BYTE2(v72);
                                  __int16 v237 = *((_WORD *)a3 + 6);
                                  *((_WORD *)a3 + 6) = v237 + 3;
                                  if (*((unsigned char *)a3 + 15))
                                  {
                                    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/St"
                                                           "ack/corestack/hci/hcicmdapi.c");
                                  }
                                  else
                                  {
                                    uint64_t v18 = (char *)a3 + 14;
                                    if ((unsigned __int16)*v16 > (unsigned __int16)(v237 + 3))
                                    {
                                      if (*v513 == 2)
                                      {
                                        uint64_t v238 = *a3;
                                        *((_WORD *)a3 + 6) = v237 + 4;
                                        *(unsigned char *)(v238 + (unsigned __int16)(v237 + 3)) = v73;
                                        if (*((unsigned char *)a3 + 15))
                                        {
                                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_b"
                                                                 "ase/Stack/corestack/hci/hcicmdapi.c");
                                        }
                                        else
                                        {
                                          uint64_t v239 = (unsigned __int16)*v512;
                                          if ((unsigned __int16)*v16 > v239)
                                          {
                                            if (*v513 == 2)
                                            {
                                              uint64_t v240 = *a3;
                                              *((_WORD *)a3 + 6) = v239 + 1;
                                              *(unsigned char *)(v240 + v239) = v74;
                                              if (*((unsigned char *)a3 + 15))
                                              {
                                                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluet"
                                                                       "ooth_base/Stack/corestack/hci/hcicmdapi.c");
                                              }
                                              else
                                              {
                                                uint64_t v241 = (unsigned __int16)*v512;
                                                if ((unsigned __int16)*v16 > v241)
                                                {
                                                  if (*v513 == 2)
                                                  {
                                                    uint64_t v242 = *a3;
                                                    *((_WORD *)a3 + 6) = v241 + 1;
                                                    *(unsigned char *)(v242 + v241) = v75;
                                                    if (*((unsigned char *)a3 + 15))
                                                    {
                                                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/Mobil"
                                                                             "eBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                    }
                                                    else
                                                    {
                                                      uint64_t v243 = (unsigned __int16)*v512;
                                                      if ((unsigned __int16)*v16 - (int)v243 > 1)
                                                      {
                                                        if (*v513 == 2)
                                                        {
                                                          *(unsigned char *)(*a3 + v243) = v76;
                                                          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v76);
                                                          unsigned __int16 v244 = *((_WORD *)a3 + 6) + 2;
                                                          *((_WORD *)a3 + 6) = v244;
                                                          if (*((unsigned char *)a3 + 15))
                                                          {
                                                            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources"
                                                                                   "/MobileBluetooth_base/Stack/corestack"
                                                                                   "/hci/hcicmdapi.c");
                                                          }
                                                          else if ((unsigned __int16)*v16 - v244 > 1)
                                                          {
                                                            if (*v513 == 2)
                                                            {
                                                              *(unsigned char *)(*a3 + v244) = v77;
                                                              *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v77);
                                                              __int16 v245 = *((_WORD *)a3 + 6);
                                                              *((_WORD *)a3 + 6) = v245 + 2;
                                                              if (*((unsigned char *)a3 + 15))
                                                              {
                                                                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sou"
                                                                                       "rces/MobileBluetooth_base/Stack/c"
                                                                                       "orestack/hci/hcicmdapi.c");
                                                              }
                                                              else if ((unsigned __int16)*v16 > (unsigned __int16)(v245 + 2))
                                                              {
                                                                if (*v513 == 2)
                                                                {
                                                                  uint64_t v246 = *a3;
                                                                  *((_WORD *)a3 + 6) = v245 + 3;
                                                                  *(unsigned char *)(v246 + (unsigned __int16)(v245 + 2)) = v78;
                                                                  if ((_BYTE)v78)
                                                                  {
                                                                    while (!*((unsigned char *)a3 + 15))
                                                                    {
                                                                      uint64_t v247 = (unsigned __int16)*v512;
                                                                      if ((unsigned __int16)*v16 <= v247) {
                                                                        goto LABEL_523;
                                                                      }
                                                                      if (*v513 != 2)
                                                                      {
                                                                        v389 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                        goto LABEL_525;
                                                                      }
                                                                      char v248 = *v80;
                                                                      uint64_t v249 = *a3;
                                                                      *((_WORD *)a3 + 6) = v247 + 1;
                                                                      *(unsigned char *)(v249 + v247) = v248;
                                                                      if (*((unsigned char *)a3 + 15))
                                                                      {
                                                                        sub_10025A794((uint64_t)"/Library/Caches/com.apple"
                                                                                               ".xbs/Sources/MobileBlueto"
                                                                                               "oth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_527:
                                                                        v390 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_529:
                                                                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2046, v390);
                                                                      }
                                                                      uint64_t v250 = (unsigned __int16)*v512;
                                                                      if ((unsigned __int16)*v16 - (int)v250 <= 1) {
                                                                        goto LABEL_527;
                                                                      }
                                                                      if (*v513 != 2)
                                                                      {
                                                                        v390 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                        goto LABEL_529;
                                                                      }
                                                                      *(unsigned char *)(*a3 + v250) = *v81;
                                                                      *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v81[1];
                                                                      unsigned __int16 v251 = *((_WORD *)a3 + 6) + 2;
                                                                      *((_WORD *)a3 + 6) = v251;
                                                                      if (*((unsigned char *)a3 + 15))
                                                                      {
                                                                        sub_10025A794((uint64_t)"/Library/Caches/com.apple"
                                                                                               ".xbs/Sources/MobileBlueto"
                                                                                               "oth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_531:
                                                                        v391 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_533:
                                                                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2047, v391);
                                                                      }
                                                                      if ((unsigned __int16)*v16 - v251 <= 1) {
                                                                        goto LABEL_531;
                                                                      }
                                                                      if (*v513 != 2)
                                                                      {
                                                                        v391 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                        goto LABEL_533;
                                                                      }
                                                                      *(unsigned char *)(*a3 + v251) = *v82;
                                                                      *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v82[1];
                                                                      __int16 v252 = *((_WORD *)a3 + 6);
                                                                      *((_WORD *)a3 + 6) = v252 + 2;
                                                                      if (*((unsigned char *)a3 + 15))
                                                                      {
                                                                        sub_10025A794((uint64_t)"/Library/Caches/com.apple"
                                                                                               ".xbs/Sources/MobileBlueto"
                                                                                               "oth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_535:
                                                                        v392 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_537:
                                                                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2048, v392);
                                                                      }
                                                                      if ((unsigned __int16)*v16 <= (unsigned __int16)(v252 + 2)) {
                                                                        goto LABEL_535;
                                                                      }
                                                                      if (*v513 != 2)
                                                                      {
                                                                        v392 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                        goto LABEL_537;
                                                                      }
                                                                      char v253 = *v83;
                                                                      uint64_t v254 = *a3;
                                                                      *((_WORD *)a3 + 6) = v252 + 3;
                                                                      *(unsigned char *)(v254 + (unsigned __int16)(v252 + 2)) = v253;
                                                                      if (*((unsigned char *)a3 + 15))
                                                                      {
                                                                        sub_10025A794((uint64_t)"/Library/Caches/com.apple"
                                                                                               ".xbs/Sources/MobileBlueto"
                                                                                               "oth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_539:
                                                                        v393 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_541:
                                                                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2049, v393);
                                                                      }
                                                                      uint64_t v255 = (unsigned __int16)*v512;
                                                                      if ((unsigned __int16)*v16 <= v255) {
                                                                        goto LABEL_539;
                                                                      }
                                                                      if (*v513 != 2)
                                                                      {
                                                                        v393 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                        goto LABEL_541;
                                                                      }
                                                                      char v256 = *v84;
                                                                      uint64_t v257 = *a3;
                                                                      *((_WORD *)a3 + 6) = v255 + 1;
                                                                      *(unsigned char *)(v257 + v255) = v256;
                                                                      if (*((unsigned char *)a3 + 15))
                                                                      {
                                                                        sub_10025A794((uint64_t)"/Library/Caches/com.apple"
                                                                                               ".xbs/Sources/MobileBlueto"
                                                                                               "oth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_543:
                                                                        v394 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_545:
                                                                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2050, v394);
                                                                      }
                                                                      uint64_t v258 = (unsigned __int16)*v512;
                                                                      if ((unsigned __int16)*v16 <= v258) {
                                                                        goto LABEL_543;
                                                                      }
                                                                      if (*v513 != 2)
                                                                      {
                                                                        v394 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                        goto LABEL_545;
                                                                      }
                                                                      char v259 = *v85;
                                                                      uint64_t v260 = *a3;
                                                                      *((_WORD *)a3 + 6) = v258 + 1;
                                                                      *(unsigned char *)(v260 + v258) = v259;
                                                                      if (*((unsigned char *)a3 + 15))
                                                                      {
                                                                        sub_10025A794((uint64_t)"/Library/Caches/com.apple"
                                                                                               ".xbs/Sources/MobileBlueto"
                                                                                               "oth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_547:
                                                                        v395 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_549:
                                                                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2051, v395);
                                                                      }
                                                                      uint64_t v261 = (unsigned __int16)*v512;
                                                                      if ((unsigned __int16)*v16 <= v261) {
                                                                        goto LABEL_547;
                                                                      }
                                                                      if (*v513 != 2)
                                                                      {
                                                                        v395 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                        goto LABEL_549;
                                                                      }
                                                                      int v68 = 0;
                                                                      char v262 = *v86++;
                                                                      uint64_t v263 = *a3;
                                                                      *((_WORD *)a3 + 6) = v261 + 1;
                                                                      *(unsigned char *)(v263 + v261) = v262;
                                                                      ++v85;
                                                                      ++v84;
                                                                      ++v83;
                                                                      v82 += 2;
                                                                      v81 += 2;
                                                                      ++v80;
                                                                      if (!--v79) {
                                                                        goto LABEL_482;
                                                                      }
                                                                    }
                                                                    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs"
                                                                                           "/Sources/MobileBluetooth_base"
                                                                                           "/Stack/corestack/hci/hcicmdapi.c");
LABEL_523:
                                                                    v389 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_525:
                                                                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2045, v389);
                                                                  }
                                                                  goto LABEL_456;
                                                                }
                                                                v460 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_814:
                                                                sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2042, v460);
                                                              }
                                                              v460 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                                              goto LABEL_814;
                                                            }
                                                            v459 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_810:
                                                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2041, v459);
                                                          }
                                                          v459 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                                                          goto LABEL_810;
                                                        }
                                                        v458 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_806:
                                                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2040, v458);
                                                      }
                                                    }
                                                    v458 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                                                    goto LABEL_806;
                                                  }
                                                  v457 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_802:
                                                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2039, v457);
                                                }
                                              }
                                              v457 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                              goto LABEL_802;
                                            }
                                            v456 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_798:
                                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2038, v456);
                                          }
                                        }
                                        v456 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                        goto LABEL_798;
                                      }
                                      v455 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_794:
                                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2037, v455);
                                    }
                                  }
                                  v455 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                  goto LABEL_794;
                                }
                                v454 = "0 == ((SDU_Interval_S_To_M) & 0xFF000000)";
                              }
                              else
                              {
                                v454 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                              }
LABEL_790:
                              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2036, v454);
                            }
                            v454 = "ByteStream_NumReadBytesAvail(*pBs) >= 3";
                            goto LABEL_790;
                          }
                          v453 = "0 == ((SDU_Interval_M_To_S) & 0xFF000000)";
                        }
                        else
                        {
                          v453 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                        }
                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2035, v453);
                      }
                    }
                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2035, "ByteStream_NumReadBytesAvail(*pBs) >= 3");
                  }
                  v452 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_780:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2034, v452);
                }
              }
              v452 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
              goto LABEL_780;
            }
            v451 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_776:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2033, v451);
          }
          v451 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_776;
        case 231:
          uint64_t v116 = a1;
          int v117 = *a1;
          int v118 = a1[2];
          int v119 = a1[4];
          int v120 = a1[6];
          int v121 = a1[8];
          int v122 = a1[10];
          int v123 = a1[12];
          int v124 = a1[14];
          int v125 = a1[16];
          v518 = a1 + 20;
          int v126 = v116[18];
          uint64_t v127 = v126;
          if ((_BYTE)v126)
          {
            uint64_t v128 = *(char **)v518;
            uint64_t v129 = (char *)*((void *)v518 + 1);
            uint64_t v130 = (unsigned char *)*((void *)v518 + 2);
            uint64_t v131 = (unsigned char *)*((void *)v518 + 3);
            v132 = (unsigned char *)*((void *)v518 + 4);
            uint64_t v133 = (unsigned char *)*((void *)v518 + 5);
            uint64_t v134 = (char *)*((void *)v518 + 6);
            uint64_t v135 = (char *)*((void *)v518 + 7);
            uint64_t v136 = (char *)*((void *)v518 + 8);
            uint64_t v137 = (char *)*((void *)v518 + 9);
          }
          else
          {
            uint64_t v128 = 0;
            uint64_t v129 = 0;
            uint64_t v130 = 0;
            uint64_t v131 = 0;
            v132 = 0;
            uint64_t v133 = 0;
            uint64_t v134 = 0;
            uint64_t v135 = 0;
            uint64_t v136 = 0;
            uint64_t v137 = 0;
          }
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else if ((unsigned __int16)*v16 > v27)
          {
            if (*v513 == 2)
            {
              uint64_t v264 = *a3;
              *((_WORD *)a3 + 6) = v26 + 3;
              *(unsigned char *)(v264 + (unsigned __int16)(v26 + 2)) = 14 * v126 + 16;
              if (*((unsigned char *)a3 + 15))
              {
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              else
              {
                uint64_t v265 = (unsigned __int16)*v512;
                if ((unsigned __int16)*v16 > v265)
                {
                  if (*v513 == 2)
                  {
                    uint64_t v266 = *a3;
                    *((_WORD *)a3 + 6) = v265 + 1;
                    *(unsigned char *)(v266 + v265) = v117;
                    if (*((unsigned char *)a3 + 15))
                    {
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    else
                    {
                      uint64_t v267 = (unsigned __int16)*v512;
                      if ((unsigned __int16)*v16 - (int)v267 > 3)
                      {
                        if (*v513 == 2)
                        {
                          *(unsigned char *)(*a3 + v267) = v118;
                          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v118);
                          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = BYTE2(v118);
                          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 3) = HIBYTE(v118);
                          unsigned __int16 v268 = *((_WORD *)a3 + 6) + 4;
                          *((_WORD *)a3 + 6) = v268;
                          if (*((unsigned char *)a3 + 15))
                          {
                            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/core"
                                                   "stack/hci/hcicmdapi.c");
                          }
                          else if ((unsigned __int16)*v16 - v268 > 3)
                          {
                            if (*v513 == 2)
                            {
                              *(unsigned char *)(*a3 + v268) = v119;
                              *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v119);
                              *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 2) = BYTE2(v119);
                              *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 3) = HIBYTE(v119);
                              __int16 v269 = *((_WORD *)a3 + 6);
                              *((_WORD *)a3 + 6) = v269 + 4;
                              if (*((unsigned char *)a3 + 15))
                              {
                                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "corestack/hci/hcicmdapi.c");
                              }
                              else if ((unsigned __int16)*v16 > (unsigned __int16)(v269 + 4))
                              {
                                if (*v513 == 2)
                                {
                                  uint64_t v270 = *a3;
                                  *((_WORD *)a3 + 6) = v269 + 5;
                                  *(unsigned char *)(v270 + (unsigned __int16)(v269 + 4)) = v120;
                                  if (*((unsigned char *)a3 + 15))
                                  {
                                    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/St"
                                                           "ack/corestack/hci/hcicmdapi.c");
                                  }
                                  else
                                  {
                                    uint64_t v271 = (unsigned __int16)*v512;
                                    if ((unsigned __int16)*v16 > v271)
                                    {
                                      if (*v513 == 2)
                                      {
                                        uint64_t v272 = *a3;
                                        *((_WORD *)a3 + 6) = v271 + 1;
                                        *(unsigned char *)(v272 + v271) = v121;
                                        if (*((unsigned char *)a3 + 15))
                                        {
                                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_b"
                                                                 "ase/Stack/corestack/hci/hcicmdapi.c");
                                        }
                                        else
                                        {
                                          uint64_t v273 = (unsigned __int16)*v512;
                                          if ((unsigned __int16)*v16 - (int)v273 > 1)
                                          {
                                            if (*v513 == 2)
                                            {
                                              *(unsigned char *)(*a3 + v273) = v122;
                                              *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v122);
                                              __int16 v274 = *((_WORD *)a3 + 6);
                                              *((_WORD *)a3 + 6) = v274 + 2;
                                              if (*((unsigned char *)a3 + 15))
                                              {
                                                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluet"
                                                                       "ooth_base/Stack/corestack/hci/hcicmdapi.c");
                                              }
                                              else if ((unsigned __int16)*v16 > (unsigned __int16)(v274 + 2))
                                              {
                                                if (*v513 == 2)
                                                {
                                                  uint64_t v275 = *a3;
                                                  *((_WORD *)a3 + 6) = v274 + 3;
                                                  *(unsigned char *)(v275 + (unsigned __int16)(v274 + 2)) = v123;
                                                  if (*((unsigned char *)a3 + 15))
                                                  {
                                                    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                  }
                                                  else
                                                  {
                                                    uint64_t v276 = (unsigned __int16)*v512;
                                                    uint64_t v18 = (char *)a3 + 14;
                                                    if ((unsigned __int16)*v16 > v276)
                                                    {
                                                      if (*v513 == 2)
                                                      {
                                                        uint64_t v277 = *a3;
                                                        *((_WORD *)a3 + 6) = v276 + 1;
                                                        *(unsigned char *)(v277 + v276) = v124;
                                                        if (*((unsigned char *)a3 + 15))
                                                        {
                                                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/M"
                                                                                 "obileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                                                        }
                                                        else
                                                        {
                                                          uint64_t v278 = (unsigned __int16)*v512;
                                                          if ((unsigned __int16)*v16 > v278)
                                                          {
                                                            if (*v513 == 2)
                                                            {
                                                              uint64_t v279 = *a3;
                                                              *((_WORD *)a3 + 6) = v278 + 1;
                                                              *(unsigned char *)(v279 + v278) = v125;
                                                              if (*((unsigned char *)a3 + 15))
                                                              {
                                                                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sou"
                                                                                       "rces/MobileBluetooth_base/Stack/c"
                                                                                       "orestack/hci/hcicmdapi.c");
                                                              }
                                                              else
                                                              {
                                                                uint64_t v280 = (unsigned __int16)*v512;
                                                                if ((unsigned __int16)*v16 > v280)
                                                                {
                                                                  if (*v513 == 2)
                                                                  {
                                                                    uint64_t v281 = *a3;
                                                                    *((_WORD *)a3 + 6) = v280 + 1;
                                                                    *(unsigned char *)(v281 + v280) = v126;
                                                                    if ((_BYTE)v126)
                                                                    {
                                                                      while (!*((unsigned char *)a3 + 15))
                                                                      {
                                                                        uint64_t v282 = (unsigned __int16)*v512;
                                                                        if ((unsigned __int16)*v16 <= v282) {
                                                                          goto LABEL_551;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v396 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_553;
                                                                        }
                                                                        char v283 = *v128;
                                                                        uint64_t v284 = *a3;
                                                                        *((_WORD *)a3 + 6) = v282 + 1;
                                                                        *(unsigned char *)(v284 + v282) = v283;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_555:
                                                                          v397 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_557:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2146, v397);
                                                                        }
                                                                        uint64_t v285 = (unsigned __int16)*v512;
                                                                        if ((unsigned __int16)*v16 <= v285) {
                                                                          goto LABEL_555;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v397 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_557;
                                                                        }
                                                                        char v286 = *v129;
                                                                        uint64_t v287 = *a3;
                                                                        *((_WORD *)a3 + 6) = v285 + 1;
                                                                        *(unsigned char *)(v287 + v285) = v286;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_559:
                                                                          v398 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_561:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2147, v398);
                                                                        }
                                                                        uint64_t v288 = (unsigned __int16)*v512;
                                                                        if ((unsigned __int16)*v16 - (int)v288 <= 1) {
                                                                          goto LABEL_559;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v398 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_561;
                                                                        }
                                                                        *(unsigned char *)(*a3 + v288) = *v130;
                                                                        *(unsigned char *)(*a3
                                                                                 + *((unsigned __int16 *)a3 + 6)
                                                                                 + 1) = v130[1];
                                                                        unsigned __int16 v289 = *((_WORD *)a3 + 6) + 2;
                                                                        *((_WORD *)a3 + 6) = v289;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_563:
                                                                          v399 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_565:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2148, v399);
                                                                        }
                                                                        if ((unsigned __int16)*v16 - v289 <= 1) {
                                                                          goto LABEL_563;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v399 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_565;
                                                                        }
                                                                        *(unsigned char *)(*a3 + v289) = *v131;
                                                                        *(unsigned char *)(*a3
                                                                                 + *((unsigned __int16 *)a3 + 6)
                                                                                 + 1) = v131[1];
                                                                        unsigned __int16 v290 = *((_WORD *)a3 + 6) + 2;
                                                                        *((_WORD *)a3 + 6) = v290;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_567:
                                                                          v400 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_569:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2149, v400);
                                                                        }
                                                                        if ((unsigned __int16)*v16 - v290 <= 1) {
                                                                          goto LABEL_567;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v400 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_569;
                                                                        }
                                                                        *(unsigned char *)(*a3 + v290) = *v132;
                                                                        *(unsigned char *)(*a3
                                                                                 + *((unsigned __int16 *)a3 + 6)
                                                                                 + 1) = v132[1];
                                                                        unsigned __int16 v291 = *((_WORD *)a3 + 6) + 2;
                                                                        *((_WORD *)a3 + 6) = v291;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_571:
                                                                          v401 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_573:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2150, v401);
                                                                        }
                                                                        if ((unsigned __int16)*v16 - v291 <= 1) {
                                                                          goto LABEL_571;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v401 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_573;
                                                                        }
                                                                        *(unsigned char *)(*a3 + v291) = *v133;
                                                                        *(unsigned char *)(*a3
                                                                                 + *((unsigned __int16 *)a3 + 6)
                                                                                 + 1) = v133[1];
                                                                        __int16 v292 = *((_WORD *)a3 + 6);
                                                                        *((_WORD *)a3 + 6) = v292 + 2;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_575:
                                                                          v402 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_577:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2151, v402);
                                                                        }
                                                                        if ((unsigned __int16)*v16 <= (unsigned __int16)(v292 + 2)) {
                                                                          goto LABEL_575;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v402 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_577;
                                                                        }
                                                                        char v293 = *v134;
                                                                        uint64_t v294 = *a3;
                                                                        *((_WORD *)a3 + 6) = v292 + 3;
                                                                        *(unsigned char *)(v294 + (unsigned __int16)(v292 + 2)) = v293;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_579:
                                                                          v403 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_581:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2152, v403);
                                                                        }
                                                                        uint64_t v295 = (unsigned __int16)*v512;
                                                                        if ((unsigned __int16)*v16 <= v295) {
                                                                          goto LABEL_579;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v403 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_581;
                                                                        }
                                                                        char v296 = *v135;
                                                                        uint64_t v297 = *a3;
                                                                        *((_WORD *)a3 + 6) = v295 + 1;
                                                                        *(unsigned char *)(v297 + v295) = v296;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_583:
                                                                          v404 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_585:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2153, v404);
                                                                        }
                                                                        uint64_t v298 = (unsigned __int16)*v512;
                                                                        if ((unsigned __int16)*v16 <= v298) {
                                                                          goto LABEL_583;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v404 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_585;
                                                                        }
                                                                        char v299 = *v136;
                                                                        uint64_t v300 = *a3;
                                                                        *((_WORD *)a3 + 6) = v298 + 1;
                                                                        *(unsigned char *)(v300 + v298) = v299;
                                                                        if (*((unsigned char *)a3 + 15))
                                                                        {
                                                                          sub_10025A794((uint64_t)"/Library/Caches/com.app"
                                                                                                 "le.xbs/Sources/MobileBl"
                                                                                                 "uetooth_base/Stack/core"
                                                                                                 "stack/hci/hcicmdapi.c");
LABEL_587:
                                                                          v405 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_589:
                                                                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2154, v405);
                                                                        }
                                                                        uint64_t v301 = (unsigned __int16)*v512;
                                                                        if ((unsigned __int16)*v16 <= v301) {
                                                                          goto LABEL_587;
                                                                        }
                                                                        if (*v513 != 2)
                                                                        {
                                                                          v405 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                                          goto LABEL_589;
                                                                        }
                                                                        int v68 = 0;
                                                                        char v302 = *v137++;
                                                                        *((_WORD *)a3 + 6) = v301 + 1;
                                                                        *(unsigned char *)(*a3 + v301) = v302;
                                                                        ++v136;
                                                                        ++v135;
                                                                        ++v134;
                                                                        v133 += 2;
                                                                        v132 += 2;
                                                                        v131 += 2;
                                                                        v130 += 2;
                                                                        ++v129;
                                                                        ++v128;
                                                                        if (!--v127) {
                                                                          goto LABEL_482;
                                                                        }
                                                                      }
                                                                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.x"
                                                                                             "bs/Sources/MobileBluetooth_"
                                                                                             "base/Stack/corestack/hci/hcicmdapi.c");
LABEL_551:
                                                                      v396 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_553:
                                                                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2145, v396);
                                                                    }
                                                                    goto LABEL_456;
                                                                  }
                                                                  v471 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_858:
                                                                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2142, v471);
                                                                }
                                                              }
                                                              v471 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                                              goto LABEL_858;
                                                            }
                                                            v470 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_854:
                                                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2141, v470);
                                                          }
                                                        }
                                                        v470 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                                        goto LABEL_854;
                                                      }
                                                      v469 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_850:
                                                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2140, v469);
                                                    }
                                                  }
                                                  v469 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                                  goto LABEL_850;
                                                }
                                                v468 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_846:
                                                sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2139, v468);
                                              }
                                              v468 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                              goto LABEL_846;
                                            }
                                            v467 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_842:
                                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2138, v467);
                                          }
                                        }
                                        v467 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                                        goto LABEL_842;
                                      }
                                      v466 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_838:
                                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2137, v466);
                                    }
                                  }
                                  v466 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                  goto LABEL_838;
                                }
                                v465 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_834:
                                sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2136, v465);
                              }
                              v465 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                              goto LABEL_834;
                            }
                            v464 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_830:
                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2135, v464);
                          }
                          v464 = "ByteStream_NumReadBytesAvail(*pBs) >= 4";
                          goto LABEL_830;
                        }
                        v463 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_826:
                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2134, v463);
                      }
                    }
                    v463 = "ByteStream_NumReadBytesAvail(*pBs) >= 4";
                    goto LABEL_826;
                  }
                  v462 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_822:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2133, v462);
                }
              }
              v462 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
              goto LABEL_822;
            }
            v461 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_818:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2132, v461);
          }
          v461 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_818;
        case 232:
          uint64_t v138 = a1;
          v519 = a1 + 2;
          int v139 = *v138;
          uint64_t v140 = *v138;
          if (v140)
          {
            uint64_t v141 = *(unsigned char ***)v519;
            uint64_t v142 = (unsigned char **)*((void *)v519 + 1);
          }
          else
          {
            uint64_t v141 = 0;
            uint64_t v142 = 0;
          }
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else if ((unsigned __int16)*v16 > v27)
          {
            if (*v513 == 2)
            {
              uint64_t v303 = *a3;
              *((_WORD *)a3 + 6) = v26 + 3;
              *(unsigned char *)(v303 + (unsigned __int16)(v26 + 2)) = (4 * v139) | 2;
              if (*((unsigned char *)a3 + 15))
              {
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              else
              {
                uint64_t v304 = (unsigned __int16)*v512;
                if ((unsigned __int16)*v16 > v304)
                {
                  if (*v513 == 2)
                  {
                    uint64_t v305 = *a3;
                    *((_WORD *)a3 + 6) = v304 + 1;
                    *(unsigned char *)(v305 + v304) = v139;
                    if (v140)
                    {
                      while (!*((unsigned char *)a3 + 15))
                      {
                        uint64_t v306 = (unsigned __int16)*v512;
                        if ((unsigned __int16)*v16 - (int)v306 <= 1) {
                          goto LABEL_591;
                        }
                        if (*v513 != 2)
                        {
                          v406 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                          goto LABEL_593;
                        }
                        *(unsigned char *)(*a3 + v306) = **v141;
                        *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = (*v141)[1];
                        unsigned __int16 v307 = *((_WORD *)a3 + 6) + 2;
                        *((_WORD *)a3 + 6) = v307;
                        if (*((unsigned char *)a3 + 15))
                        {
                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corest"
                                                 "ack/hci/hcicmdapi.c");
LABEL_595:
                          v407 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_597:
                          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2188, v407);
                        }
                        if ((unsigned __int16)*v16 - v307 <= 1) {
                          goto LABEL_595;
                        }
                        if (*v513 != 2)
                        {
                          v407 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                          goto LABEL_597;
                        }
                        int v68 = 0;
                        *(unsigned char *)(*a3 + v307) = **v142;
                        v308 = *v142++;
                        *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = v308[1];
                        *((_WORD *)a3 + 6) += 2;
                        v309 = *v141++;
                        *a5++ = *(_WORD *)v309;
                        if (!--v140) {
                          goto LABEL_482;
                        }
                      }
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_591:
                      v406 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
LABEL_593:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2187, v406);
                    }
                    goto LABEL_456;
                  }
                  v473 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_866:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2184, v473);
                }
              }
              v473 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
              goto LABEL_866;
            }
            v472 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_862:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2183, v472);
          }
          v472 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_862;
        case 239:
          uint64_t v143 = a1;
          int v144 = *a1;
          int v145 = a1[2];
          int v146 = a1[4];
          uint64_t v147 = (_OWORD *)*((void *)a1 + 3);
          int v148 = a1[8];
          int v149 = a1[10];
          v520 = (char **)(a1 + 14);
          int v150 = v143[12];
          uint64_t v151 = v150;
          if ((_BYTE)v150) {
            uint64_t v152 = *v520;
          }
          else {
            uint64_t v152 = 0;
          }
          if (*((unsigned char *)a3 + 15))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
          }
          else if ((unsigned __int16)*v16 > v27)
          {
            if (*v513 == 2)
            {
              uint64_t v310 = *a3;
              *((_WORD *)a3 + 6) = v26 + 3;
              *(unsigned char *)(v310 + (unsigned __int16)(v26 + 2)) = v150 + 25;
              if (*((unsigned char *)a3 + 15))
              {
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
              }
              else
              {
                uint64_t v311 = (unsigned __int16)*v512;
                if ((unsigned __int16)*v16 > v311)
                {
                  if (*v513 == 2)
                  {
                    uint64_t v312 = *a3;
                    *((_WORD *)a3 + 6) = v311 + 1;
                    *(unsigned char *)(v312 + v311) = v144;
                    if (*((unsigned char *)a3 + 15))
                    {
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
                    }
                    else
                    {
                      uint64_t v313 = (unsigned __int16)*v512;
                      if ((unsigned __int16)*v16 - (int)v313 > 1)
                      {
                        if (*v513 == 2)
                        {
                          *(unsigned char *)(*a3 + v313) = v145;
                          *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v145);
                          __int16 v314 = *((_WORD *)a3 + 6);
                          *((_WORD *)a3 + 6) = v314 + 2;
                          if (*((unsigned char *)a3 + 15))
                          {
                            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/core"
                                                   "stack/hci/hcicmdapi.c");
                          }
                          else if ((unsigned __int16)*v16 > (unsigned __int16)(v314 + 2))
                          {
                            if (*v513 == 2)
                            {
                              uint64_t v315 = *a3;
                              *((_WORD *)a3 + 6) = v314 + 3;
                              *(unsigned char *)(v315 + (unsigned __int16)(v314 + 2)) = v146;
                              if (*((unsigned char *)a3 + 15))
                              {
                                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/"
                                                       "corestack/hci/hcicmdapi.c");
                              }
                              else
                              {
                                uint64_t v316 = *((unsigned __int16 *)a3 + 6);
                                if ((unint64_t)(unsigned __int16)*v16 - v316 > 0xF)
                                {
                                  if (*v513 == 2)
                                  {
                                    *(_OWORD *)(*a3 + v316) = *v147;
                                    __int16 v317 = *((_WORD *)a3 + 6);
                                    *((_WORD *)a3 + 6) = v317 + 16;
                                    if (*((unsigned char *)a3 + 15))
                                    {
                                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/"
                                                             "Stack/corestack/hci/hcicmdapi.c");
                                    }
                                    else if ((unsigned __int16)*v16 > (unsigned __int16)(v317 + 16))
                                    {
                                      if (*v513 == 2)
                                      {
                                        uint64_t v318 = *a3;
                                        *((_WORD *)a3 + 6) = v317 + 17;
                                        *(unsigned char *)(v318 + (unsigned __int16)(v317 + 16)) = v148;
                                        if (*((unsigned char *)a3 + 15))
                                        {
                                          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_b"
                                                                 "ase/Stack/corestack/hci/hcicmdapi.c");
                                        }
                                        else
                                        {
                                          uint64_t v319 = (unsigned __int16)*v512;
                                          if ((unsigned __int16)*v16 - (int)v319 > 1)
                                          {
                                            if (*v513 == 2)
                                            {
                                              *(unsigned char *)(*a3 + v319) = v149;
                                              *(unsigned char *)(*a3 + *((unsigned __int16 *)a3 + 6) + 1) = BYTE1(v149);
                                              __int16 v320 = *((_WORD *)a3 + 6);
                                              *((_WORD *)a3 + 6) = v320 + 2;
                                              if (*((unsigned char *)a3 + 15))
                                              {
                                                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluet"
                                                                       "ooth_base/Stack/corestack/hci/hcicmdapi.c");
                                              }
                                              else if ((unsigned __int16)*v16 > (unsigned __int16)(v320 + 2))
                                              {
                                                if (*v513 == 2)
                                                {
                                                  uint64_t v321 = *a3;
                                                  *((_WORD *)a3 + 6) = v320 + 3;
                                                  *(unsigned char *)(v321 + (unsigned __int16)(v320 + 2)) = v150;
                                                  if ((_BYTE)v150)
                                                  {
                                                    while (!*((unsigned char *)a3 + 15))
                                                    {
                                                      uint64_t v322 = (unsigned __int16)*v512;
                                                      if ((unsigned __int16)*v16 <= v322) {
                                                        goto LABEL_599;
                                                      }
                                                      if (*v513 != 2)
                                                      {
                                                        v408 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
                                                        goto LABEL_601;
                                                      }
                                                      char v323 = *v152++;
                                                      uint64_t v324 = *a3;
                                                      *((_WORD *)a3 + 6) = v322 + 1;
                                                      *(unsigned char *)(v324 + v322) = v323;
                                                      if (!--v151) {
                                                        goto LABEL_381;
                                                      }
                                                    }
                                                    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileB"
                                                                           "luetooth_base/Stack/corestack/hci/hcicmdapi.c");
LABEL_599:
                                                    v408 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_601:
                                                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2246, v408);
                                                  }
LABEL_381:
                                                  if (!a7) {
                                                    goto LABEL_456;
                                                  }
                                                  int v68 = 0;
                                                  *a7 = v144;
                                                  goto LABEL_482;
                                                }
                                                v481 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_898:
                                                sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2243, v481);
                                              }
                                              v481 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                              goto LABEL_898;
                                            }
                                            v480 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_894:
                                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2242, v480);
                                          }
                                        }
                                        v480 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                                        goto LABEL_894;
                                      }
                                      v479 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_890:
                                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2241, v479);
                                    }
                                    v479 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                                    goto LABEL_890;
                                  }
                                  v478 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_886:
                                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2240, v478);
                                }
                              }
                              v478 = "ByteStream_NumReadBytesAvail(*pBs) >= (BROADCAST_CODE_SIZE)";
                              goto LABEL_886;
                            }
                            v477 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_882:
                            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2239, v477);
                          }
                          v477 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
                          goto LABEL_882;
                        }
                        v476 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_878:
                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2238, v476);
                      }
                    }
                    v476 = "ByteStream_NumReadBytesAvail(*pBs) >= 2";
                    goto LABEL_878;
                  }
                  v475 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_874:
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2237, v475);
                }
              }
              v475 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
              goto LABEL_874;
            }
            v474 = "(*pBs).__RWFlag == BYTESTREAM_WRITE";
LABEL_870:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 2236, v474);
          }
          v474 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
          goto LABEL_870;
        default:
          goto LABEL_60;
      }
  }
}

char *sub_100022214(unsigned int a1)
{
  if (a1 >= 0x111) {
    sub_10025B8C0();
  }
  return (char *)&unk_1009F9460 + 24 * a1;
}

unint64_t sub_100022250(int a1)
{
  unsigned int v1 = a1 - &unk_1009F9460;
  if (v1 >> 3 >= 0x333) {
    sub_10025B8C0();
  }
  return v1 / 0x18uLL;
}

uint64_t sub_100022298(void *ptr, __int16 a2, _OWORD *a3)
{
  *(_OWORD *)&v10[6] = *a3;
  *(_WORD *)&v10[4] = 0;
  *(_DWORD *)uint64_t v10 = 0;
  *(_OWORD *)&v10[22] = a3[1];
  unsigned int v5 = dword_100A04A1C;
  unsigned int v6 = *(unsigned __int8 *)(qword_100A19628 + 2);
  if (dword_100A04A1C > v6)
  {
    sub_10025B8C0();
    unsigned int v5 = dword_100A04A1C;
    unsigned int v6 = *(unsigned __int8 *)(qword_100A19628 + 2);
  }
  if (v5 == v6)
  {
    sub_100023010(ptr);
    return 611;
  }
  else
  {
    uint64_t v8 = qword_100A04A28 + 48 * v5;
    *(_OWORD *)(v8 + 10) = *(_OWORD *)v10;
    *(void *)uint64_t v8 = ptr;
    *(_WORD *)(v8 + 8) = a2;
    *(_OWORD *)(v8 + 26) = *(_OWORD *)&v10[16];
    *(void *)(v8 + 40) = *(void *)&v10[30];
    unsigned int v9 = v5 + 1;
    dword_100A04A1C = v9;
    if (v9 > dword_100A04A20) {
      dword_100A04A20 = v9;
    }
    uint64_t result = 0;
    if (byte_100A04A18)
    {
      if (byte_100A196C1)
      {
        sub_1000223C0();
        return 0;
      }
    }
  }
  return result;
}

void sub_1000223C0()
{
  if (!dword_100A04A1C || dword_100A04A1C > *(unsigned __int8 *)(qword_100A19628 + 2)) {
    sub_10025B8C0();
  }
  uint64_t v0 = (_WORD *)qword_100A04A28;
  if (byte_100A04A18) {
    BOOL v1 = byte_100A196C1 == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1) {
    sub_10025B8C0();
  }
  int v39 = 0;
  int v2 = (unsigned __int16)v0[10];
  if (v2 != 3125 && sub_10002659C((uint64_t)(v0 + 8), (unsigned int *)&v39))
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Unable to add opcode 0x%x to expected event queue with status %!", v29, v30, v31, v32, v33, v34, v35, (unsigned __int16)v0[10]);
      int v36 = sub_100050B4C(0x2Eu);
      if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
        sub_100748B78(v36);
      }
    }
    uint64_t v37 = sub_1001DA4C8((unsigned __int16)v0[10]);
    sub_10010B844(635, v37);
  }
  if (off_100A19690)
  {
    uint64_t v3 = 629;
LABEL_14:
    if (v2 != 3125)
    {
      uint64_t v4 = sub_10019C2C4(v39);
      if (v4)
      {
        uint64_t v5 = v4;
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"OI_HCIExpEvQ_RemoveEvent failed: %!", v6, v7, v8, v9, v10, v11, v12, v5);
          int v13 = sub_100050B4C(0x2Eu);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
            sub_100749944();
          }
        }
      }
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"OI_HCIIfc_SendHciCommand failed", v14, v15, v16, v17, v18, v19, v20, v38);
        int v21 = sub_100050B4C(0x2Eu);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_100749A50();
        }
      }
    }
LABEL_39:
    sub_100199970(v3, qword_100A04A28 + 16);
    goto LABEL_40;
  }
  memset(v40, 0, sizeof(v40));
  uint64_t v22 = *(unsigned char **)v0;
  if (**(unsigned char **)v0 != 1)
  {
    sub_10025B8C0();
    uint64_t v22 = *(unsigned char **)v0;
  }
  unsigned __int16 v23 = *(_WORD *)(v22 + 1);
  int v24 = (unsigned __int16)v0[10];
  if (v24 != 64512 && v24 != v23) {
    sub_10025B8C0();
  }
  sub_1000226D0((uint64_t)v40, 1u);
  sub_100022798((unsigned __int8 *)v40, (char *)(*(void *)v0 + 4), (unsigned __int16)(v0[4] - 4), 2u);
  uint64_t v25 = sub_1000228AC(1, v23, (uint64_t)v40, (unsigned __int16)(v0[4] - 4));
  uint64_t v3 = v25;
  if (v25 != 625 && v25 != 0) {
    goto LABEL_14;
  }
  if (v0[10] != 3125)
  {
    char v27 = byte_100A196C1;
    if (!byte_100A196C1)
    {
      sub_10025B8C0();
      char v27 = byte_100A196C1;
    }
    byte_100A196C1 = v27 - 1;
  }
  if (v3 != 625)
  {
    if (!v3)
    {
      byte_100A04A18 = 0;
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  if (dword_100A04A1C && byte_100A04A18 && byte_100A196C1) {
    sub_100026DA8((uint64_t)sub_100026D78, 0, 0);
  }
LABEL_40:
  sub_100023010(*(void **)qword_100A04A28);
  unsigned int v28 = dword_100A04A1C - 1;
  dword_100A04A1C = v28;
  if (v28) {
    memmove((void *)qword_100A04A28, (const void *)(qword_100A04A28 + 48), 48 * v28);
  }
}

uint64_t sub_1000226D0(uint64_t a1, unsigned int a2)
{
  if (!a1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 171, "mbuf != NULL");
  }
  if (!a2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 172, "numCells > 0");
  }
  if (a2 < 5)
  {
    uint64_t v9 = 0;
    *(unsigned char *)a1 = a2;
    *(_WORD *)(a1 + 1) = 0;
    *(_DWORD *)(a1 + 4) = 0;
    *(void *)(a1 + 8) = 0;
    return v9;
  }
  if (!sub_100058654()) {
    return 124;
  }
  uint64_t v9 = 124;
  sub_100056E24((uint64_t)"OI_MBUF_Init %!", v2, v3, v4, v5, v6, v7, v8, 124);
  uint64_t v10 = sub_100050B4C(0x30u);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    sub_100744F6C();
    return 124;
  }
  return v9;
}

uint64_t sub_100022798(unsigned __int8 *a1, char *a2, size_t size, unsigned int a4)
{
  if (!a1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 452, "mbuf");
  }
  if (*((_WORD *)a1 + 3)) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 453, "mbuf->currPos == 0");
  }
  if (a4 > 2) {
    return 101;
  }
  __int16 v6 = size;
  if (!size) {
    return 0;
  }
  if (a1[2] >= *a1)
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"MBUF Append overflow: alloc %d", v7, v8, v9, v10, v11, v12, v13, *a1);
      uint64_t v14 = sub_100050B4C(0x30u);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    return 124;
  }
  else
  {
    uint64_t result = sub_100022F2C((uint64_t)&a1[24 * a1[2] + 16], a2, size, a4);
    if (!result)
    {
      ++a1[2];
      *((_WORD *)a1 + 2) += v6;
    }
  }
  return result;
}

uint64_t sub_1000228AC(char a1, __int16 a2, uint64_t a3, unsigned int a4)
{
  qword_100A049D8 = a3;
  qword_100A049E0 = 0;
  word_100A049F4 = a4;
  byte_100A049E8 = a1;
  word_100A049F0 = a2;
  if (*(unsigned __int16 *)(a3 + 4) < a4) {
    sub_10025B8C0();
  }
  if (sub_100023E48()) {
    return 0;
  }
  uint64_t v4 = sub_100022F1C();
  if (qword_100A049D8)
  {
    qword_100A049D8 = 0;
    if (qword_100A049E0)
    {
      sub_100023010((void *)qword_100A049E0);
      qword_100A049E0 = 0;
    }
  }
  return v4;
}

uint64_t sub_100022960(int a1, __int16 a2, unsigned int a3)
{
  if (a1 > 2)
  {
    if (a1 != 3)
    {
      if (a1 == 243)
      {
        uint64_t v5 = &qword_1009FC228;
        byte_1009FC238 = -13;
        goto LABEL_8;
      }
LABEL_19:
      sub_10025B778("PCIe default packet type: 0x%x\n", a1);
      off_1009FC1C8("PCIe bad packet type", 1);
      return 101;
    }
    uint64_t v5 = &qword_1009FC228;
  }
  else
  {
    if (a1 != 1)
    {
      if (a1 == 2)
      {
        uint64_t v5 = &qword_1009FC210;
LABEL_8:
        uint64_t v6 = &dword_100000004;
        goto LABEL_12;
      }
      goto LABEL_19;
    }
    uint64_t v5 = &qword_1009FC1F8;
  }
  uint64_t v6 = &_mh_execute_header.magic + 3;
LABEL_12:
  uint64_t v7 = &unk_1009FD000;
  if (byte_1009FD240)
  {
    sub_10025B8C0();
    return 118;
  }
  *((unsigned char *)&word_1009FC240 + "othServices.framework/BluetoothServices") = 1;
  word_1009FC240 = a2;
  byte_1009FC242 = a3;
  if (a1 == 243 || a1 == 2) {
    byte_1009FC243 = BYTE1(a3);
  }
  if (a3) {
    sub_100022CA0((char *)&word_1009FC240 + v6);
  }
  else {
    sub_100023604();
  }
  if (!*v5 || (int v9 = *((_DWORD *)v5 + 2), v9 == -1))
  {
    sub_10025B778("%s: invalid input parameter\n");
  }
  else
  {
    long long v14 = 0u;
    long long v15 = 0u;
    long long v12 = 0u;
    *(_OWORD *)__dst = 0u;
    os_channel_ring_id();
    os_channel_tx_ring();
    if (os_channel_get_next_slot())
    {
LABEL_28:
      size_t v10 = v6 + a3;
      if (v10 <= WORD1(v12))
      {
        memcpy(__dst[0], &word_1009FC240, v10);
        WORD1(v12) = v10;
        os_channel_set_slot_properties();
        if (os_channel_advance_slot())
        {
          sub_10025B778("%s: failed to advance slot - %d\n");
        }
        else
        {
          if (!os_channel_sync())
          {
            byte_1009FD240 = 0;
            return 625;
          }
          sub_10025B778("%s: os_channel_sync tx failed\n");
        }
      }
      else
      {
        sub_10025B778("%s: slot_len: %u, size_in: %zu\n");
      }
    }
    else
    {
      while (1)
      {
        sub_10025B778("%s: empty slot. waiting for slot to become available\n", "skywalk_write_channel");
        memset(&eventlist, 0, sizeof(eventlist));
        if (kevent(v9, 0, 0, &eventlist, 1, 0) == -1 || (unsigned __int16)eventlist.filter != 65534) {
          break;
        }
        if (os_channel_get_next_slot())
        {
          uint64_t v7 = &unk_1009FD000;
          goto LABEL_28;
        }
      }
      sub_10025B778("%s: kevent error on sw_kq_write\n", "skywalk_write_channel");
      uint64_t v7 = (unsigned char *)&unk_1009FD000;
    }
  }
  v7[576] = 0;
  if (!byte_1009FC1C1)
  {
    sub_10025B778("PCIe Skywalk write failed: type %u\n", a1);
    off_1009FC1C8("PCIe Skywalk write failed", 1);
  }
  return 1205;
}

void sub_100022CA0(char *a1)
{
  if (qword_100A049D8)
  {
    sub_100022D4C(a1, qword_100A049D8, (unsigned __int16)word_100A049F4);
    sub_100023604();
  }
  else if (sub_100058654())
  {
    sub_100056E24((uint64_t)"OI_HciIfc_CopyPayload: OI_HCIIfc_Send_Req not in progress", v1, v2, v3, v4, v5, v6, v7, v9);
    uint64_t v8 = sub_100050B4C(0x2Eu);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100744F6C();
    }
  }
}

uint64_t sub_100022D4C(char *a1, uint64_t a2, unsigned int a3)
{
  if (!a1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 525, "dest");
  }
  if (!a2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 526, "src");
  }
  if (!a3) {
    return 0;
  }
  uint64_t v4 = a1;
  unsigned __int16 v5 = *(_WORD *)(a2 + 6);
  if (*(unsigned __int16 *)(a2 + 4) >= a3) {
    uint64_t v6 = a3;
  }
  else {
    uint64_t v6 = *(unsigned __int16 *)(a2 + 4);
  }
  uint64_t v7 = (void *)(a2 + 24 * *(unsigned __int8 *)(a2 + 1) + 24);
  unsigned __int16 v8 = v6;
  while (1)
  {
    int v9 = *((unsigned __int8 *)v7 - 8);
    size_t v10 = v7;
    if (v9 == 3) {
      break;
    }
    if (v9 != 4)
    {
      size_t v10 = (void *)*v7;
      break;
    }
    if (v5) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 540, "currPos == 0");
    }
    unsigned int v11 = sub_100022D4C(v4, *v7, v8);
    if (v11 > v8) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 542, "len <= numBytes");
    }
    unsigned __int16 v12 = v11;
    if (v11 == v8)
    {
      __int16 v16 = 0;
      goto LABEL_22;
    }
LABEL_18:
    unsigned __int8 v15 = *(unsigned char *)(a2 + 1) + 1;
    *(unsigned char *)(a2 + 1) = v15;
    if (*(unsigned __int8 *)(a2 + 2) <= v15) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 567, "src->currCell < src->usedCells");
    }
    unsigned __int16 v5 = 0;
    v8 -= v12;
    v7 += 3;
    v4 += v12;
  }
  unsigned int v13 = *((unsigned __int16 *)v7 - 3);
  if (v13 < v5) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_mbuf.c", 553, "cell->len >= currPos");
  }
  long long v14 = (char *)v10 + v5;
  unsigned __int16 v12 = v13 - v5;
  if ((unsigned __int16)(v13 - v5) < v8)
  {
    memmove(v4, v14, (unsigned __int16)(v13 - v5));
    goto LABEL_18;
  }
  memmove(v4, v14, v8);
  __int16 v16 = v5 + v8;
LABEL_22:
  *(_WORD *)(a2 + 6) = v16;
  *(_WORD *)(a2 + 4) -= v6;
  return v6;
}

uint64_t sub_100022F1C()
{
  return (*((uint64_t (__cdecl **)())off_1009F93D0 + 6))();
}

uint64_t sub_100022F2C(uint64_t a1, char *a2, size_t size, int a4)
{
  unsigned int v4 = size;
  if (a4) {
    goto LABEL_2;
  }
  if (size <= 8)
  {
    if (size)
    {
      uint64_t v7 = (unsigned char *)(a1 + 8);
      uint64_t v8 = size;
      do
      {
        char v9 = *a2++;
        *v7++ = v9;
        --v8;
      }
      while (v8);
    }
    LOBYTE(a4) = 3;
    goto LABEL_8;
  }
  unsigned int v11 = (char *)sub_100022FE8(size);
  if (v11)
  {
    unsigned __int16 v12 = v11;
    memmove(v11, a2, v4);
    LOBYTE(a4) = 0;
    a2 = v12;
LABEL_2:
    *(void *)(a1 + 8) = a2;
LABEL_8:
    uint64_t result = 0;
    *(unsigned char *)a1 = a4;
    *(_WORD *)(a1 + 2) = v4;
    return result;
  }
  *(void *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 2) = 0;
  *(unsigned char *)a1 = 2;
  return 106;
}

void *sub_100022FE8(size_t size)
{
  if (HIDWORD(size)) {
    return 0;
  }
  else {
    return malloc_type_zone_malloc((malloc_zone_t *)qword_100A008F8, size, 0x946A8EB9uLL);
  }
}

void sub_100023010(void *ptr)
{
}

uint64_t sub_100023020()
{
  return byte_100A00904;
}

uint64_t sub_10002302C(uint64_t a1)
{
  int v16 = 0;
  if (a1 && *(void *)a1 && *(_DWORD *)(a1 + 12) != -1)
  {
    strncpy(__dst, (const char *)(a1 + 17), 3uLL);
    __strcat_chk();
    sub_10025B778("launching %s\n", __dst);
    sub_100117BB4(__dst);
    int v2 = *(_DWORD *)(a1 + 12);
    os_channel_ring_id();
    os_channel_rx_ring();
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    memset(&eventlist, 0, sizeof(eventlist));
    if (kevent(v2, 0, 0, &eventlist, 1, 0) == -1 || (unsigned __int16)eventlist.filter != 0xFFFF)
    {
LABEL_24:
      sub_10025B778("%s: kevent error on sw_kq_read\n", "skywalk_read_loop");
    }
    else
    {
      while (1)
      {
        if ((byte_1009FC1C0 & 1) == 0) {
          sub_100023344();
        }
        if (!*(void *)a1) {
          break;
        }
        unsigned int v3 = os_channel_available_slot_count();
        uint64_t next_slot = os_channel_get_next_slot();
        if (v3 && next_slot)
        {
          unsigned int v5 = 1;
          do
          {
            if (!byte_1009FC1C1)
            {
              if (byte_1009FC1C0)
              {
                sub_100025840();
              }
              else
              {
                v9[0] = 0;
                v9[1] = 0;
                uint64_t v6 = sub_100023438(*(unsigned __int8 *)(a1 + 16), (unsigned __int8 *)v12, WORD1(v11), (uint64_t)v9);
                sub_100023868(*(unsigned __int8 *)(a1 + 16), (unsigned __int8 *)v12, v6, (uint64_t)v9);
              }
            }
            uint64_t v7 = os_channel_get_next_slot();
            if (v5 >= v3) {
              break;
            }
            ++v5;
          }
          while (v7);
          if (os_channel_advance_slot())
          {
            sub_10025B778("%s: failed to advance slot - %d\n");
            break;
          }
          if (os_channel_sync())
          {
            sub_10025B778("%s: os_channel_sync rx failed - %d\n");
            break;
          }
        }
        if ((byte_1009FC1C0 & 1) == 0) {
          sub_1000232E0();
        }
        long long v13 = 0u;
        long long v14 = 0u;
        long long v11 = 0u;
        long long v12 = 0u;
        memset(&eventlist, 0, sizeof(eventlist));
        if (kevent(v2, 0, 0, &eventlist, 1, 0) == -1 || (unsigned __int16)eventlist.filter != 0xFFFF) {
          goto LABEL_24;
        }
      }
      sub_1000232E0();
    }
    sub_10025B778("exiting skywalk_read_loop for %s\n");
  }
  else
  {
    sub_10025B778("%s: invalid input parameter\n");
  }
  return 0;
}

uint64_t sub_1000232E0()
{
  BOOL v0 = sub_100023330();
  uint64_t result = pthread_mutex_unlock(&stru_100A000B0);
  if (v0)
  {
    return sub_1001F56F4();
  }
  return result;
}

BOOL sub_100023330()
{
  return dword_100A053A4 == 2;
}

void sub_100023344()
{
  pthread_mutex_lock(&stru_100A000B0);
  BOOL v0 = pthread_self();
  pthread_getname_np(v0, &byte_100A000F0, 0x40uLL);
  if (!byte_100A000F0)
  {
    dispatch_queue_get_label(0);
    __strlcpy_chk();
    strtok(&byte_100A000F0, "-");
  }
  if (!atomic_fetch_add_explicit(&dword_100A001FC, 1u, memory_order_relaxed))
  {
    uint64_t v1 = qword_100A00200;
    dispatch_time_t v2 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v1, v2, 0x2540BE400uLL, 0x3B9ACA00uLL);
    unsigned int v3 = qword_100A00200;
    *(void *)dispatch_get_context((dispatch_object_t)qword_100A00200) = 0;
    dispatch_resume(v3);
  }
}

uint64_t sub_100023438(int a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  *(void *)a4 = mach_continuous_time();
  *(unsigned char *)(a4 + 8) = 0;
  uint64_t v8 = sub_100023568(a1, a2, a3);
  if (a3 > v8)
  {
    uint64_t v9 = v8;
    if (v8 + 8 == a3)
    {
      signed __int8 v10 = a2[v8 + 2];
      if (v10 < 0)
      {
        *(unsigned char *)(a4 + 8) = 1;
        if ((v10 & 0x40) == 0) {
          goto LABEL_5;
        }
      }
      else if ((a2[v8 + 2] & 0x40) == 0)
      {
LABEL_5:
        if ((v10 & 0x80) == 0 && (v10 & 0x60) == 0x20)
        {
          *(unsigned char *)(a4 + 9) = 1;
          *(_DWORD *)(a4 + 12) = *(_DWORD *)&a2[(unsigned __int16)(v8 + 3)];
        }
        goto LABEL_11;
      }
      uint64_t v11 = mach_continuous_time();
      *(void *)a4 = v11 - MillisecondsToUpTicks();
LABEL_11:
      sub_100025840();
      return v9;
    }
    sub_10025B778("%s: invalid packet length received\n", "pcie_transport_decode_hci_packet_attrs_from_footer");
  }
  return a3;
}

uint64_t sub_100023568(int a1, unsigned __int8 *a2, unsigned int a3)
{
  switch(a1)
  {
    case 2:
    case 6:
      goto LABEL_5;
    case 3:
      if (a3 >= 3) {
        LOWORD(a3) = a2[2] + 3;
      }
      return (unsigned __int16)a3;
    case 4:
      if (a3 >= 2) {
        LOWORD(a3) = a2[1] + 2;
      }
      return (unsigned __int16)a3;
    case 5:
      if (a3 < 4) {
        return (unsigned __int16)a3;
      }
      __int16 v3 = a2[2] | ((a2[3] & 0xF) << 8);
      goto LABEL_11;
    case 7:
      if (a3) {
        LOWORD(a3) = *a2 + 1;
      }
      return (unsigned __int16)a3;
    default:
      if (a1 != 243) {
        return (unsigned __int16)a3;
      }
LABEL_5:
      if (a3 < 4) {
        return (unsigned __int16)a3;
      }
      __int16 v3 = *((_WORD *)a2 + 1);
LABEL_11:
      LOWORD(a3) = v3 + 4;
      return (unsigned __int16)a3;
  }
}

void sub_100023604()
{
  unsigned int v0 = __chkstk_darwin();
  if (!v1) {
    return;
  }
  uint64_t v4 = v3;
  size_t v5 = v2;
  uint64_t v6 = v1;
  unsigned int v7 = v0;
  bzero(&v12, 0x20006uLL);
  if (v4 != 4 || byte_100A01AA4)
  {
    if (v4 == 1 && !byte_100A01AA5)
    {
      int v8 = sub_100025C54(v6, v5);
      goto LABEL_11;
    }
    __int16 v12 = v7;
    switch(v4)
    {
      case 0xF3:
        __int16 v13 = v5;
        uint64_t v10 = 4;
        if (!byte_100A01AA0)
        {
          unsigned __int16 v9 = 4;
LABEL_31:
          unsigned int v11 = sub_100025B30(v4, 1);
          sub_100023E54(&v12, v9, 0, v11);
          return;
        }
        unsigned __int16 v9 = v5 + 4;
        int v8 = -1;
        goto LABEL_27;
      case 5:
        __int16 v13 = v5;
        if (!byte_100A01AA0)
        {
          uint64_t v10 = 4;
          if (((v7 >> 8) & 0x40) != 0) {
            LODWORD(v5) = 8;
          }
          else {
            LODWORD(v5) = 4;
          }
          if (((v7 >> 8) & 0x40) != 0) {
            unsigned __int16 v9 = 12;
          }
          else {
            unsigned __int16 v9 = 8;
          }
          int v8 = -1;
          goto LABEL_28;
        }
        break;
      case 2:
        __int16 v13 = v5;
        if (v5 >= 4 && !byte_100A01AA0 && word_100A01AB8 && word_100A01AB8 == v6[1])
        {
          int v8 = -1;
          LODWORD(v5) = 21;
          unsigned __int16 v9 = 25;
          uint64_t v10 = 4;
LABEL_28:
          memcpy((char *)&v12 + v10, v6, v5);
LABEL_29:
          if (v8 >= 1) {
            bzero((char *)&v12 + v10 + v8, (int)v5 - v8);
          }
          goto LABEL_31;
        }
        break;
      default:
        int v8 = -1;
        goto LABEL_12;
    }
    unsigned __int16 v9 = v5 + 4;
    int v8 = -1;
    uint64_t v10 = 4;
    goto LABEL_27;
  }
  if ((v5 & 0xFC) == 0 || *(unsigned __int8 *)v6 != 255 || *((unsigned __int8 *)v6 + 2) != 181)
  {
    int v8 = -1;
LABEL_11:
    __int16 v12 = v7;
LABEL_12:
    LOBYTE(v13) = v5;
    unsigned __int16 v9 = v5 + 3;
    uint64_t v10 = 3;
    if (v4 == 3 && !byte_100A01AA0)
    {
      LODWORD(v5) = 0;
      unsigned __int16 v9 = 3;
      goto LABEL_29;
    }
LABEL_27:
    if (!v5) {
      goto LABEL_29;
    }
    goto LABEL_28;
  }
}

void sub_100023868(uint64_t a1, unsigned __int8 *a2, NSObject *a3, uint64_t a4)
{
  size_t v5 = a3;
  if (DWORD2(xmmword_100A19860))
  {
    uint64_t v4 = a4;
    byte_100A04D58 = a1;
    if (a3) {
      __memmove_chk();
    }
    sub_100025840();
    if ((sub_100023E48() & 1) == 0)
    {
      switch((int)a1)
      {
        case 1:
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"OI_HCIIfc_DataReceived, invalid dataType %d, NumBytes %d", v23, v24, v25, v26, v27, v28, v29, 1);
            uint64_t v30 = sub_100050B4C(0x2Eu);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
              goto LABEL_27;
            }
          }
          goto LABEL_28;
        case 2:
        case 6:
          ++dword_100A04D4C;
          if (dword_100A19630 == 2)
          {
            sub_10019CE28((unsigned __int16 *)a2, (uint64_t)v5, a1, v4);
            return;
          }
          if (!sub_100058654()) {
            return;
          }
          sub_100056E24((uint64_t)"OI_HCIIfc_DataReceived, HCI not initialized - discarding ACL packet State %d, Numbytes %d", v36, v37, v38, v39, v40, v41, v42, dword_100A19630);
          int v43 = sub_100050B4C(0x2Eu);
          if (!os_log_type_enabled(v43, OS_LOG_TYPE_ERROR)) {
            return;
          }
          goto LABEL_44;
        case 3:
          goto LABEL_18;
        case 4:
          if (*(unsigned char *)(v4 + 8))
          {
            int v82 = 0;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            *(_OWORD *)__str = 0u;
            long long v77 = 0u;
            snprintf(__str, 0x64uLL, "BT Controller HCI_EVENT wakeupCause (eventCode=0x%x paramLen=%d)", *a2, a2[1]);
            sub_10025B778("OI_HCIIfc_DataReceived: %s", __str);
            sub_100116128(__str);
          }
          if (v5 < 3)
          {
            if (sub_100058654())
            {
              sub_100056E24((uint64_t)"Short event, numBytes = %d", v52, v53, v54, v55, v56, v57, v58, (uint64_t)v5);
              char v59 = sub_100050B4C(0x2Eu);
              if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR)) {
                sub_100744F6C();
              }
            }
          }
          else
          {
            ++dword_100A04D44;
            uint64_t v31 = (void (*)(uint64_t, uint64_t, NSObject *, unsigned __int8 *, uint64_t))off_100A19690;
            uint64_t v32 = *a2;
            if (off_100A19690)
            {
              uint64_t v33 = a2[1];
              uint64_t v34 = a2 + 2;
              uint64_t v35 = 4;
              goto LABEL_41;
            }
            if (v32 == 19)
            {
              sub_10019E644((uint64_t)a2, v5, v4);
LABEL_62:
              sub_100025E20();
              return;
            }
            if (!off_100A196B8 || off_100A196B8(a2, v5, v4))
            {
              sub_100024094(a2, (uint64_t)v5, v4);
              goto LABEL_62;
            }
          }
          return;
        case 5:
          goto LABEL_22;
        case 7:
          if (*(unsigned char *)(v4 + 8))
          {
            int v82 = 0;
            long long v80 = 0u;
            long long v81 = 0u;
            long long v78 = 0u;
            long long v79 = 0u;
            *(_OWORD *)__str = 0u;
            long long v77 = 0u;
            snprintf(__str, 0x64uLL, "BT Controller HCI_LMP wakeupCause (len=0x%x)", *a2);
            sub_10025B778("OI_HCIIfc_DataReceived: %s", __str);
            sub_100116128(__str);
          }
          if (dword_100A19630 == 2)
          {
            uint64_t v32 = *a2;
            if (v5 - 1 == v32)
            {
              uint64_t v31 = (void (*)(uint64_t, uint64_t, NSObject *, unsigned __int8 *, uint64_t))off_100A19690;
              if (off_100A19690)
              {
                uint64_t v34 = a2 + 1;
                uint64_t v35 = 7;
                uint64_t v33 = v5;
LABEL_41:
                v31(v35, v32, v33, v34, v4);
              }
              return;
            }
            if (!sub_100058654()) {
              return;
            }
            sub_100056E24((uint64_t)"OI_HCIIfc_DataReceived, Got incorrect packet on LMP channel: expected %d gotfirst 3 bytes %d %d %d", v68, v69, v70, v71, v72, v73, v74, (uint64_t)v5);
            int v75 = sub_100050B4C(0x2Eu);
            if (!os_log_type_enabled(v75, OS_LOG_TYPE_ERROR)) {
              return;
            }
          }
          else
          {
            if (!sub_100058654()) {
              return;
            }
            sub_100056E24((uint64_t)"OI_HCIIfc_DataReceived, HCI not initialized - discarding ACI packet State %d, Numbytes %d", v60, v61, v62, v63, v64, v65, v66, dword_100A19630);
            uint64_t v67 = sub_100050B4C(0x2Eu);
            if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
              return;
            }
          }
          sub_100745764();
          return;
        default:
          goto LABEL_17;
      }
    }
  }
  else
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"OI_HCIIfc_DataReceived, HCI not initialized - discarding data Type %d, NumBytes %d", v8, v9, v10, v11, v12, v13, v14, a1);
      size_t v5 = sub_100050B4C(0x2Eu);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR)) {
        sub_100745764();
      }
    }
    if (a1 == 4 && a2 && *a2 == 16)
    {
      sub_10010B394(650);
LABEL_17:
      if (a1 == 243)
      {
LABEL_18:
        ++dword_100A04D54;
        if (dword_100A19630 == 2)
        {
          sub_10019D274((unsigned __int16 *)a2, (uint64_t)v5, v4);
        }
        else if (sub_100058654())
        {
          sub_100056E24((uint64_t)"OI_HCIIfc_DataReceived, HCI not initialized - discarding SCO packet State %d, Numbytes %d", v44, v45, v46, v47, v48, v49, v50, dword_100A19630);
          uint64_t v51 = sub_100050B4C(0x2Eu);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
LABEL_44:
          }
            sub_100745764();
        }
      }
      else
      {
LABEL_22:
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"OI_HCIIfc_DataReceived, unknown dataType %d, state %d", v15, v16, v17, v18, v19, v20, v21, a1);
          uint64_t v22 = sub_100050B4C(0x2Eu);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
LABEL_27:
          }
            sub_100745764();
        }
LABEL_28:
        sub_10025B8C0();
      }
    }
  }
}

uint64_t sub_100023E48()
{
  return byte_100A04622;
}

void sub_100023E54(const void *a1, signed int a2, signed int a3, unsigned int a4)
{
  if (a3) {
    signed int v7 = a3;
  }
  else {
    signed int v7 = a2;
  }
  int v8 = sub_100024048();
  if (dword_1009F9118 == -1) {
    int v9 = v8;
  }
  else {
    int v9 = 1;
  }
  uint64_t v10 = qword_100A01BE8;
  if ((v9 & 1) != 0 || qword_100A01BE8)
  {
    uint64_t v11 = malloc_type_malloc((v7 + 13), 0xA8085C5EuLL);
    if (v11)
    {
      uint64_t v12 = v11;
      uint64_t v13 = malloc_type_malloc((a2 + 13), 0xCAF3830FuLL);
      if (v13)
      {
        uint64_t v14 = v13;
        int v15 = sub_100115868(v13, (unsigned __int16)(a2 + 13), a1, a2, a4);
        unsigned int v16 = sub_100115868(v12, (unsigned __int16)(v7 + 13), a1, v7, a4);
        if (v15 | v16)
        {
          __int16 v17 = v16;
          if (v10)
          {
            __int16 v18 = word_100A01BF0;
            if ((unsigned __int16)word_100A01BF0 + v16 <= 0x800)
            {
              memcpy((void *)(qword_100A01BE8 + (unsigned __int16)word_100A01BF0), v12, v16);
              word_100A01BF0 = v18 + v17;
            }
          }
          if (v9)
          {
            if (qword_100A01C60 != -1) {
              dispatch_once(&qword_100A01C60, &stru_10099B108);
            }
            block[0] = _NSConcreteStackBlock;
            block[1] = 0x40000000;
            block[2] = sub_100116E6C;
            block[3] = &unk_10099B1C8;
            block[4] = v12;
            block[5] = v14;
            __int16 v21 = v17;
            __int16 v22 = v15;
            dispatch_async((dispatch_queue_t)qword_100A01C58, block);
            return;
          }
        }
        free(v12);
        uint64_t v19 = v14;
      }
      else
      {
        uint64_t v19 = v12;
      }
      free(v19);
    }
  }
}

uint64_t sub_100024048()
{
  if (qword_100A01C98 && CFSetGetCount((CFSetRef)qword_100A01C98) > 0) {
    return 1;
  }
  uint64_t result = qword_100A01CA0;
  if (qword_100A01CA0) {
    return CFSetGetCount((CFSetRef)qword_100A01CA0) > 0;
  }
  return result;
}

void sub_100024094(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v324 = 0;
  uint64_t v325 = 0;
  if (a2 > 1)
  {
    if (!a1) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 2041, "buf");
    }
    uint64_t v324 = a1;
    LOWORD(v325) = a2;
    BYTE6(v325) = 1;
    WORD1(v325) = a2;
    uint64_t v14 = *a1;
    WORD2(v325) = 2;
    uint64_t v15 = a1[1];
    unsigned int v16 = sub_100025D0C(v14);
    if (!v16)
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"%! (%d)", v32, v33, v34, v35, v36, v37, v38, 607);
        uint64_t v39 = sub_100050B4C(0x2Eu);
        if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      uint64_t v30 = (void (*)(uint64_t, uint64_t))off_100A04D70;
      if (off_100A04D70)
      {
        uint64_t v31 = 607;
        goto LABEL_18;
      }
      sub_10010B394(607);
      goto LABEL_277;
    }
    __int16 v21 = v16;
    if ((int)a2 - 2 < (int)v15)
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"event data underrun, paramTotalLen: %d, bytesAvail: %d, eventId: %d", v22, v23, v24, v25, v26, v27, v28, v15);
        uint64_t v29 = sub_100050B4C(0x2Eu);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      uint64_t v30 = (void (*)(uint64_t, uint64_t))off_100A04D70;
      if (off_100A04D70)
      {
        uint64_t v31 = 651;
LABEL_18:
        v30(v31, v14);
        return;
      }
LABEL_277:
      sub_10010B394(651);
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
LABEL_278:
      v308 = "ByteStream_NumReadBytesAvail(*pBs) >= OI_BD_ADDR_BYTE_SIZE";
      goto LABEL_280;
    }
    if (dword_100A19630 <= 6)
    {
      if (((1 << dword_100A19630) & 0x33) != 0)
      {
        if ((v14 > 0x15 || ((1 << v14) & 0x20C000) == 0) && v14 != 255)
        {
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"HCI Device initialization in progress, ignoring event %@", v40, v41, v42, v43, v44, v45, v46, (uint64_t)a1);
            uint64_t v47 = sub_100050B4C(0x2Eu);
            if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
              goto LABEL_4;
            }
          }
          return;
        }
      }
      else if (((1 << dword_100A19630) & 0x48) != 0)
      {
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"HCI device initialation/reset failed, ignoring event %@", v48, v49, v50, v51, v52, v53, v54, (uint64_t)a1);
          uint64_t v55 = sub_100050B4C(0x2Eu);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
            goto LABEL_4;
          }
        }
        return;
      }
    }
    if (!v16[1])
    {
      LOWORD(v326) = 0;
      WORD2(v329[0]) = 0;
      LODWORD(v329[0]) = 0;
      *(void *)&long long v335 = 0;
      long long v333 = 0u;
      long long v334 = 0u;
      *(_OWORD *)buf = 0u;
      long long v332 = 0u;
      if (*(unsigned char *)(a3 + 8))
      {
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"_genericEventHandler: wakeupCause HCI_EVENT Packet from BT Controller (id=0x%02x paramLen=%d)\n", v71, v72, v73, v74, v75, v76, v77, *v21);
          long long v78 = sub_100050B4C(0x2Eu);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)unsigned __int16 v352 = 136446210;
            *(void *)&v352[4] = sub_100050714();
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, " %{public}s", v352, 0xCu);
          }
        }
      }
      int v79 = sub_10019B400((uint64_t)buf, (uint64_t)v21, (uint64_t *)&v324, v15, &v326, (uint64_t)v329);
      if (v79)
      {
        int v80 = v79;
        sub_10019BD30(v21);
        long long v81 = (unsigned char *)*((void *)v21 + 1);
        if (!v81 || *v81 != 115) {
          return;
        }
        *(_DWORD *)buf = v80;
      }
      else
      {
        sub_10019BDC8(v21, (unsigned __int16)v326, (uint64_t)v329, 1);
      }
      uint64_t v84 = *v21;
      uint64_t v85 = *(unsigned __int8 *)(a3 + 8);
      uint64_t v86 = *(void *)a3;
      int v87 = (unsigned int *)buf;
LABEL_180:
      sub_10019A2C4(v84, v87, v85, v86, v17, v18, v19, v20, v56);
      return;
    }
    uint64_t v330 = 0;
    __n128 v56 = 0uLL;
    memset(v329, 0, sizeof(v329));
    if (*(unsigned char *)(a3 + 8))
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"_specialEventHandler: wakeupCause HCI_EVENT Packet from BT Controller (id=0x%02x paramLen=%d)\n", v57, v58, v59, v17, v18, v19, v20, *v21);
        uint64_t v60 = sub_100050B4C(0x2Eu);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = sub_100050714();
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
        }
      }
    }
    int v61 = *(unsigned __int8 *)(a3 + 8);
    uint64_t v62 = *v21;
    if (*v21 > 0x21u)
    {
      if (*v21 > 0x3Du)
      {
        if (v62 == 62)
        {
          *(_DWORD *)buf = 0;
          if (sub_100058694(62, buf))
          {
            uint64_t v121 = sub_10019C2C4(*(int *)buf);
            if (v121)
            {
              uint64_t v122 = v121;
              if (sub_100058654())
              {
                sub_100056E24((uint64_t)"%! (%d)", v123, v124, v125, v126, v127, v128, v129, v122);
                uint64_t v130 = sub_100050B4C(0x2Eu);
                if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR)) {
                  sub_100744F6C();
                }
              }
            }
          }
          sub_1000586E8((uint64_t)&v324, (uint64_t)v21, v15, v61 != 0);
          return;
        }
        if (v62 != 254)
        {
          if (v62 == 255) {
            sub_1001825BC((uint64_t)v324, (unsigned __int16)v325, v61 != 0);
          }
          return;
        }
LABEL_68:
        uint64_t v85 = v61 != 0;
        *(void *)&v329[0] = &v324[WORD2(v325)];
        DWORD2(v329[0]) = v15;
        int v87 = (unsigned int *)v329;
        goto LABEL_179;
      }
      switch(v62)
      {
        case '""':
          int v82 = v15;
          int v83 = 1;
          break;
        case ',':
          goto LABEL_69;
        case '/':
          int v82 = v15;
          int v83 = 2;
          break;
        default:
          return;
      }
    }
    else
    {
      if (*v21 > 0xDu)
      {
        switch(*v21)
        {
          case 0xEu:
            *(_OWORD *)unsigned __int16 v352 = 0u;
            long long v353 = 0u;
            if (v15 <= 2)
            {
              if (sub_100058654())
              {
                sub_100056E24((uint64_t)"bad parm length: expected at least 3, got %d; eventId %d",
                  v63,
                  v64,
                  v65,
                  v66,
                  v67,
                  v68,
                  v69,
                  v15);
                uint64_t v70 = sub_100050B4C(0x2Eu);
                if (os_log_type_enabled(v70, OS_LOG_TYPE_ERROR)) {
LABEL_208:
                }
                  sub_100744F6C();
              }
LABEL_273:
              if (!byte_100A196C1) {
                return;
              }
              goto LABEL_274;
            }
            if (WORD1(v325) - WORD2(v325) < (int)v15)
            {
              if (sub_100058654())
              {
                sub_100056E24((uint64_t)"%! (%d)", v198, v199, v200, v201, v202, v203, v204, 605);
                unsigned __int16 v205 = sub_100050B4C(0x2Eu);
                if (os_log_type_enabled(v205, OS_LOG_TYPE_ERROR)) {
                  goto LABEL_208;
                }
              }
              goto LABEL_273;
            }
            uint64_t v206 = WORD2(v325);
            if (WORD1(v325) <= WORD2(v325))
            {
              __int16 v320 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
            }
            else
            {
              if (BYTE6(v325) == 1)
              {
                ++WORD2(v325);
                byte_100A196C1 = v324[v206];
                if (WORD1(v325) - ((int)v206 + 1) <= 1) {
                  sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1578, "ByteStream_NumReadBytesAvail(*pBs) >= 2");
                }
                uint64_t v207 = *(unsigned __int16 *)&v324[v206 + 1];
                WORD2(v325) = v206 + 3;
                if (!v207) {
                  goto LABEL_273;
                }
                if (WORD1(v325) <= (unsigned __int16)(v206 + 3))
                {
                  if (sub_100058654())
                  {
                    sub_100056E24((uint64_t)"handle_CommandComplete bad parm length: no status byte", v214, v215, v216, v217, v218, v219, v220, v323);
                    uint64_t v221 = sub_100050B4C(0x2Eu);
                    if (os_log_type_enabled(v221, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_208;
                    }
                  }
                  goto LABEL_273;
                }
                WORD2(v325) = v206 + 4;
                uint64_t v208 = sub_1000262CC(v324[(unsigned __int16)(v206 + 3)]);
                if (sub_1000262C4()) {
                  sub_100182740(v207, v208 == 712);
                }
                if (sub_1000262F0((uint64_t)&v324, v207, v352))
                {
                  if (*(unsigned __int16 *)&v352[4] == 1026)
                  {
                    *(_OWORD *)buf = 0u;
                    long long v332 = 0u;
                    if ((sub_10019C258(1, (uint64_t)&v324, 1025, buf) & 1) == 0) {
                      sub_10019C258(15, (uint64_t)&v324, 1025, buf);
                    }
                  }
                  ((void (*)(uint64_t, void, unsigned __int8 **))v353)(v208, *((void *)&v353 + 1), &v324);
                  goto LABEL_273;
                }
                if (sub_10019C244((uint64_t)&v324, v207, v352))
                {
                  if (v208) {
                    int v253 = v208;
                  }
                  else {
                    int v253 = 769;
                  }
                  sub_100199CC8((uint64_t)v352, v253);
                  goto LABEL_273;
                }
                if ((~v207 & 0xFC00) == 0)
                {
                  sub_1001825BC((uint64_t)v324, (unsigned __int16)v325, v61 != 0);
                  goto LABEL_273;
                }
                if (sub_100058654())
                {
                  sub_100056E24((uint64_t)"Command Complete, orphan event, opcode: %x, status %!\n", v279, v280, v281, v282, v283, v284, v285, v207);
                  char v286 = sub_100050B4C(0x2Eu);
                  if (os_log_type_enabled(v286, OS_LOG_TYPE_ERROR)) {
                    sub_100744F6C();
                  }
                }
                if (sub_1000262C4())
                {
                  long long v345 = 0u;
                  long long v346 = 0u;
                  long long v343 = 0u;
                  long long v344 = 0u;
                  long long v341 = 0u;
                  long long v342 = 0u;
                  long long v339 = 0u;
                  long long v340 = 0u;
                  long long v337 = 0u;
                  long long v338 = 0u;
                  long long v335 = 0u;
                  long long v336 = 0u;
                  long long v333 = 0u;
                  long long v334 = 0u;
                  *(_OWORD *)buf = 0u;
                  long long v332 = 0u;
                  if (sub_100017A14())
                  {
                    sub_10025B74C((uint64_t)buf, 256, (uint64_t)"Bluetooth error - simulated { build=internal, reason=%d, description=\"%!\", context=\"%d\" }", v287, v288, v289, v290, v291, 635);
                    sub_10011631C((const char *)buf);
                    if (!sub_100058654()) {
                      goto LABEL_273;
                    }
                    sub_100056E24((uint64_t)"Bluetooth error - simulated { build=internal, reason=%d, description=\"%!\", context=\"%d\" }", v292, v293, v294, v295, v296, v297, v298, 635);
                    char v299 = sub_100050B4C(0x2Eu);
                    if (!os_log_type_enabled(v299, OS_LOG_TYPE_FAULT)) {
                      goto LABEL_273;
                    }
                  }
                  else
                  {
                    sub_10025B74C((uint64_t)buf, 256, (uint64_t)"Bluetooth error - simulated { build=release, reason=%d, context=\"%d\" }", v287, v288, v289, v290, v291, 635);
                    sub_10011631C((const char *)buf);
                    if (!sub_100058654()) {
                      goto LABEL_273;
                    }
                    sub_100056E24((uint64_t)"Bluetooth error - simulated { build=release, reason=%d, context=\"%d\" }", v300, v301, v302, v303, v304, v305, v306, 635);
                    unsigned __int16 v307 = sub_100050B4C(0x2Eu);
                    if (!os_log_type_enabled(v307, OS_LOG_TYPE_FAULT)) {
                      goto LABEL_273;
                    }
                  }
                  sub_100749B48();
                  goto LABEL_273;
                }
                if (off_100A04D70)
                {
                  off_100A04D70(635, v207);
                  goto LABEL_273;
                }
                int v321 = v207;
LABEL_302:
                uint64_t v322 = sub_1001DA4C8(v321);
                sub_10010B844(635, v322);
              }
              __int16 v320 = "(*pBs).__RWFlag == BYTESTREAM_READ";
            }
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1575, v320);
          case 0xFu:
            *(_OWORD *)buf = 0u;
            long long v332 = 0u;
            if (v15 != 4)
            {
              if (sub_100058654())
              {
                sub_100056E24((uint64_t)"handle_CommandStatus bad parm length: expected 4, got %d", v139, v140, v141, v142, v143, v144, v145, v15);
                int v146 = sub_100050B4C(0x2Eu);
                if (os_log_type_enabled(v146, OS_LOG_TYPE_ERROR)) {
                  sub_100744F6C();
                }
              }
              goto LABEL_140;
            }
            uint64_t v107 = WORD2(v325);
            if (WORD1(v325) <= WORD2(v325)) {
              goto LABEL_289;
            }
            if (BYTE6(v325) == 1)
            {
              ++WORD2(v325);
              uint64_t v108 = sub_1000262CC(v324[v107]);
              uint64_t v109 = WORD2(v325);
              if (WORD1(v325) <= WORD2(v325))
              {
                uint64_t v319 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
              }
              else
              {
                if (BYTE6(v325) == 1)
                {
                  ++WORD2(v325);
                  byte_100A196C1 = v324[v109];
                  if (WORD1(v325) - ((int)v109 + 1) <= 1) {
                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1727, "ByteStream_NumReadBytesAvail(*pBs) >= 2");
                  }
                  uint64_t v110 = v108;
                  uint64_t v111 = *(unsigned __int16 *)&v324[v109 + 1];
                  WORD2(v325) = v109 + 3;
                  if (sub_1000262C4()) {
                    sub_100182740(v111, v110 == 712);
                  }
                  if (!v111) {
                    goto LABEL_140;
                  }
                  int v112 = v111 & 0xFC00;
                  if (dword_100A19630 != 2 && !v110 && v112 != 64512)
                  {
                    if (!sub_100058654()) {
                      return;
                    }
                    sub_100056E24((uint64_t)"HCI not initialized, ignoring event: %16@", v113, v114, v115, v116, v117, v118, v119, (uint64_t)v324);
                    int v120 = sub_100050B4C(0x2Eu);
                    if (!os_log_type_enabled(v120, OS_LOG_TYPE_ERROR)) {
                      return;
                    }
                    goto LABEL_167;
                  }
                  if (sub_10019C244((uint64_t)&v324, v111, buf))
                  {
                    if (v110)
                    {
                      sub_100199CC8((uint64_t)buf, v110);
                      goto LABEL_140;
                    }
                    uint64_t v254 = sub_100022214(*(unsigned __int16 *)&buf[6]);
                    if (v254)
                    {
                      if (v111 != 8205 && v111 != 8259 && v111 != 8325)
                      {
                        *(_WORD *)&uint8_t buf[8] = *((_WORD *)v254 + 10);
                        if (sub_10002659C((uint64_t)buf, 0))
                        {
                          if (sub_100058654())
                          {
                            sub_100056E24((uint64_t)"Unable to add opcode 0x%x to expected event queue with status %!", v255, v256, v257, v258, v259, v260, v261, v111);
                            char v262 = sub_100050B4C(0x2Eu);
                            if (os_log_type_enabled(v262, OS_LOG_TYPE_ERROR)) {
                              sub_100745764();
                            }
                          }
                          if (!off_100A04D70)
                          {
                            int v321 = v111;
                            goto LABEL_302;
                          }
                          off_100A04D70(635, v111);
                        }
                      }
                      goto LABEL_140;
                    }
                    if (!sub_100058654()) {
                      goto LABEL_140;
                    }
                    sub_100056E24((uint64_t)"%! (%d)", v271, v272, v273, v274, v275, v276, v277, 620);
                    uint64_t v278 = sub_100050B4C(0x2Eu);
                    if (!os_log_type_enabled(v278, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_140;
                    }
                  }
                  else
                  {
                    if (sub_1000262F0((uint64_t)&v324, v111, buf))
                    {
                      unsigned int v222 = 769;
                      if (v112 == 64512 && off_100A04D68)
                      {
                        if (off_100A04D68(v110, v111, 255)) {
                          unsigned int v222 = 0;
                        }
                        else {
                          unsigned int v222 = 769;
                        }
                      }
                      if (v110) {
                        uint64_t v223 = v110;
                      }
                      else {
                        uint64_t v223 = v222;
                      }
                      ((void (*)(uint64_t, void, unsigned __int8 **))v332)(v223, *((void *)&v332 + 1), &v324);
                      goto LABEL_140;
                    }
                    if (v112 == 64512)
                    {
                      sub_1001825BC((uint64_t)v324, (unsigned __int16)v325, v61 != 0);
                      goto LABEL_140;
                    }
                    if (!sub_100058654()
                      || (sub_100056E24((uint64_t)"Command Status, orphan event, opcode: %x, status %!", v263, v264, v265, v266, v267, v268, v269, v111), uint64_t v270 = sub_100050B4C(0x2Eu), !os_log_type_enabled(v270, OS_LOG_TYPE_ERROR)))
                    {
LABEL_140:
                      if (!byte_100A196C1) {
                        return;
                      }
LABEL_274:
                      sub_100026DA8((uint64_t)sub_100026D78, 0, 0);
                      return;
                    }
                  }
                  sub_100744F6C();
                  goto LABEL_140;
                }
                uint64_t v319 = "(*pBs).__RWFlag == BYTESTREAM_READ";
              }
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1724, v319);
            }
            uint64_t v318 = "(*pBs).__RWFlag == BYTESTREAM_READ";
            goto LABEL_291;
          case 0x13u:
            if (sub_100058654())
            {
              sub_100056E24((uint64_t)"Numcompleted packets should be handled by HCI flow", v96, v97, v98, v99, v100, v101, v102, v323);
              uint64_t v103 = sub_100050B4C(0x2Eu);
              if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
                goto LABEL_167;
              }
            }
            return;
          case 0x15u:
            *(_WORD *)&v352[4] = 0;
            *(_DWORD *)unsigned __int16 v352 = 0;
            memset(buf, 0, sizeof(buf));
            if (v15)
            {
              uint64_t v104 = WORD2(v325);
              if (WORD1(v325) <= WORD2(v325))
              {
                v309 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
              }
              else
              {
                if (BYTE6(v325) == 1)
                {
                  ++WORD2(v325);
                  int v105 = v324[v104];
                  if (((22 * v105) | 1) == v15)
                  {
                    if (!v324[v104]) {
                      return;
                    }
                    while (1)
                    {
                      if (WORD1(v325) - WORD2(v325) <= 5) {
                        goto LABEL_278;
                      }
                      if (BYTE6(v325) != 1) {
                        break;
                      }
                      sub_100008A18((uint64_t)v352, (uint64_t)&v324[WORD2(v325)], 6uLL);
                      __int16 v106 = WORD2(v325);
                      WORD2(v325) += 6;
                      if (WORD1(v325) - (unint64_t)WORD2(v325) <= 0xF) {
                        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1887, "ByteStream_NumReadBytesAvail((*pBs)) >= (sizeof(linkKey))");
                      }
                      *(_OWORD *)buf = *(_OWORD *)&v324[WORD2(v325)];
                      WORD2(v325) = v106 + 22;
                      nullsub_95(v352);
                      if (!--v105) {
                        return;
                      }
                    }
                    v308 = "(*pBs).__RWFlag == BYTESTREAM_READ";
LABEL_280:
                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1886, v308);
                  }
                  if (!sub_100058654()) {
                    return;
                  }
                  sub_100056E24((uint64_t)"handle_ReturnLinkKeys bad parm length: expected %d, got %d", v179, v180, v181, v182, v183, v184, v185, (22 * v105) | 1u);
                  uint64_t v186 = sub_100050B4C(0x2Eu);
                  if (!os_log_type_enabled(v186, OS_LOG_TYPE_ERROR)) {
                    return;
                  }
LABEL_167:
                  sub_100744F6C();
                  return;
                }
                v309 = "(*pBs).__RWFlag == BYTESTREAM_READ";
              }
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1875, v309);
            }
            if (!sub_100058654()) {
              return;
            }
            sub_100056E24((uint64_t)"handle_ReturnLinkKeys bad parm length: expected at least 1, got %d", v147, v148, v149, v150, v151, v152, v153, 0);
            int v154 = sub_100050B4C(0x2Eu);
            if (!os_log_type_enabled(v154, OS_LOG_TYPE_ERROR)) {
              return;
            }
            goto LABEL_167;
          case 0x19u:
            goto LABEL_68;
          default:
            return;
        }
      }
      if (v62 != 2)
      {
        if (v62 != 3)
        {
          if (v62 != 5) {
            return;
          }
          uint64_t v88 = *(void *)a3;
          LOWORD(v326) = 0;
          *(_WORD *)&v352[4] = 0;
          *(_DWORD *)unsigned __int16 v352 = 0;
          *(void *)&long long v335 = 0;
          long long v333 = 0u;
          long long v334 = 0u;
          *(_OWORD *)buf = 0u;
          long long v332 = 0u;
          int v89 = sub_10019B400((uint64_t)buf, (uint64_t)v21, (uint64_t *)&v324, v15, &v326, (uint64_t)v352);
          if (v89)
          {
            int v90 = v89;
            sub_10019BD30(v21);
            *(_DWORD *)buf = v90;
          }
          else
          {
            int v155 = (unsigned __int16)v326;
            sub_10019BDC8(v21, (unsigned __int16)v326, (uint64_t)v352, 1);
            int v156 = sub_100025D0C(6);
            sub_10019BDC8(v156, v155, (uint64_t)v352, 1);
            if (!(*(_DWORD *)buf | v332))
            {
              if (sub_100058654())
              {
                sub_100056E24((uint64_t)"Status and Reason both SUCCESS for disconnect", v157, v158, v159, v160, v161, v162, v163, v323);
                int v164 = sub_100050B4C(0x2Eu);
                if (os_log_type_enabled(v164, OS_LOG_TYPE_ERROR)) {
                  sub_100744F6C();
                }
              }
              LODWORD(v332) = 105;
            }
          }
          uint64_t v165 = *(void *)&buf[8];
          if (*(void *)&buf[8])
          {
            switch(*(unsigned char *)(*(void *)&buf[8] + 2))
            {
              case 0:
                *(unsigned char *)(*(void *)&buf[8] + 54) = 7;
                int v166 = *(_DWORD *)(v165 + 148);
                break;
              case 1:
                int v166 = 0;
                *(unsigned char *)(*(void *)&buf[8] + 56) = 1;
                break;
              case 4:
                goto LABEL_203;
              case 5:
                int v166 = 0;
                *(unsigned char *)(*(void *)&buf[8] + 48) = 7;
                break;
              default:
                sub_10025B8C0();
LABEL_203:
                *(unsigned char *)(v165 + 124) = 7;
                int v166 = *(_DWORD *)(v165 + 204);
                break;
            }
            sub_10019EEE0(v165);
            sub_10019A2C4(5, (unsigned int *)buf, v61 != 0, v88, v209, v210, v211, v212, v213);
            if (!v166) {
              sub_1001984E0((unsigned __int16 *)v165);
            }
            return;
          }
          if (!sub_100058654()) {
            return;
          }
          sub_100056E24((uint64_t)"Disconnect complete event for a connection we didn't know about %d\n", v167, v168, v169, v170, v171, v172, v173, (unsigned __int16)v326);
          uint64_t v174 = sub_100050B4C(0x2Eu);
          if (!os_log_type_enabled(v174, OS_LOG_TYPE_ERROR)) {
            return;
          }
          goto LABEL_155;
        }
LABEL_69:
        int v327 = 0;
        int v328 = 0;
        uint64_t v356 = 0;
        long long v354 = 0u;
        long long v355 = 0u;
        *(_OWORD *)unsigned __int16 v352 = 0u;
        long long v353 = 0u;
        uint64_t v326 = 0;
        int v91 = sub_10019B400((uint64_t)v352, (uint64_t)v21, (uint64_t *)&v324, v15, (_WORD *)&v328 + 1, (uint64_t)&v327);
        if (v91)
        {
          int v92 = v91;
          sub_10019BD30(v21);
          *(_DWORD *)unsigned __int16 v352 = v92;
        }
        else
        {
          int v136 = HIWORD(v328);
          int v137 = sub_10019BDC8(v21, HIWORD(v328), (uint64_t)&v327, 1);
          if (v137)
          {
            if (v62 == 3) {
              uint64_t v138 = 44;
            }
            else {
              uint64_t v138 = 3;
            }
            __int16 v21 = sub_100025D0C(v138);
            int v137 = sub_10019BDC8(v21, v136, (uint64_t)&v327, 1);
          }
          if (v62 == 3 && !v137)
          {
            if (*(_DWORD *)v352)
            {
              if (!sub_10019BDC8(v21, v136, (uint64_t)&v327, 0)) {
                return;
              }
            }
            else
            {
              while (!sub_10019BDC8(v21, v136, (uint64_t)&v327, 1))
                ;
            }
          }
        }
        uint64_t v93 = DWORD2(v353);
        uint64_t v94 = (__int16 *)sub_100197A30((uint64_t)&v327);
        uint64_t v95 = (uint64_t)v94;
        if (v93 > 0xEFu)
        {
          if (v93 - 240 > 1)
          {
LABEL_156:
            if (sub_100058654())
            {
              sub_100056E24((uint64_t)"OI_HCIFlow_ConnectionComplete, unknown link type %d", v175, v176, v177, v17, v18, v19, v20, v93);
              uint64_t v178 = sub_100050B4C(0x2Eu);
              if (os_log_type_enabled(v178, OS_LOG_TYPE_ERROR)) {
                sub_100744F6C();
              }
            }
            goto LABEL_159;
          }
        }
        else
        {
          if (!(_BYTE)v93) {
            goto LABEL_75;
          }
          if (v93 != 1)
          {
            if (v93 == 2)
            {
LABEL_75:
              uint64_t v326 = 0;
              if (sub_1001990B0((uint64_t *)&v326))
              {
                while ((*((void *)v326 + 6) != v95 || *(__int16 *)v326 != -1) && sub_1001990B0((uint64_t *)&v326))
                  ;
              }
LABEL_123:
              uint64_t v135 = v326;
              goto LABEL_160;
            }
            goto LABEL_156;
          }
        }
        if (v94 && *v94 != -1)
        {
          uint64_t v326 = 0;
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"ConnectComplete RXed for existing remote device: %d - %d", v131, v132, v133, v17, v18, v19, v20, HIWORD(v328));
            uint64_t v134 = sub_100050B4C(0x2Eu);
            if (os_log_type_enabled(v134, OS_LOG_TYPE_ERROR)) {
              sub_100744F6C();
            }
          }
          goto LABEL_123;
        }
LABEL_159:
        uint64_t v326 = (char *)v95;
        uint64_t v135 = (char *)v95;
LABEL_160:
        if (v135)
        {
          *(void *)&v352[8] = v135;
          if (*(_DWORD *)v352)
          {
LABEL_178:
            uint64_t v85 = v61 != 0;
            int v87 = (unsigned int *)v352;
LABEL_179:
            uint64_t v84 = v62;
            uint64_t v86 = 0;
            goto LABEL_180;
          }
LABEL_176:
          uint64_t v196 = HIWORD(v328);
          if (sub_100197864(HIWORD(v328)))
          {
            if (sub_100058654())
            {
              sub_100056E24((uint64_t)"Duplicate LM handle 0x%x was already in use %:", v310, v311, v312, v313, v314, v315, v316, v196);
              __int16 v317 = sub_100050B4C(0x2Eu);
              if (os_log_type_enabled(v317, OS_LOG_TYPE_ERROR)) {
                sub_100744F6C();
              }
            }
            sub_10010B394(649);
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c");
LABEL_289:
            uint64_t v318 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
LABEL_291:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcievents.c", 1720, v318);
          }
          uint64_t v197 = (long long *)v326;
          *(_WORD *)uint64_t v326 = v196;
          sub_10019EE54(v197);
          goto LABEL_178;
        }
        if (*(_DWORD *)v352)
        {
          sub_10017C6DC(*(unsigned int *)v352, 0, (uint64_t)&v327, v93, 0);
          return;
        }
        if (v93 - 240 < 2 || v93 == 1)
        {
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"HCI Connection Completed event - unknown ACL connection (%:)", v187, v188, v189, v190, v191, v192, v193, (uint64_t)&v327);
            uint64_t v194 = sub_100050B4C(0x2Eu);
            if (os_log_type_enabled(v194, OS_LOG_TYPE_ERROR)) {
              sub_100744F6C();
            }
          }
          uint64_t v195 = (char *)sub_100197D8C((uint64_t)&v327, 2);
          uint64_t v326 = v195;
        }
        else
        {
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"HCI Connection Completed event - unknown SCO connection (%:)", v224, v225, v226, v227, v228, v229, v230, (uint64_t)&v327);
            __int16 v231 = sub_100050B4C(0x2Eu);
            if (os_log_type_enabled(v231, OS_LOG_TYPE_ERROR)) {
              sub_100744F6C();
            }
          }
          uint64_t v326 = sub_1001980F8((uint64_t)&v327);
          if (!v326) {
            goto LABEL_225;
          }
          int v232 = sub_10017BCA0(v95);
          uint64_t v195 = v326;
          if (!v232)
          {
            *((void *)v326 + 6) = v95;
            goto LABEL_175;
          }
        }
        if (v195)
        {
LABEL_175:
          *(void *)&v352[8] = v195;
          goto LABEL_176;
        }
LABEL_225:
        BOOL v233 = 0;
        long long v350 = 0u;
        long long v351 = 0u;
        long long v348 = 0u;
        long long v349 = 0u;
        long long v346 = 0u;
        long long v347 = 0u;
        long long v344 = 0u;
        long long v345 = 0u;
        long long v342 = 0u;
        long long v343 = 0u;
        long long v340 = 0u;
        long long v341 = 0u;
        long long v338 = 0u;
        long long v339 = 0u;
        long long v336 = 0u;
        long long v337 = 0u;
        long long v334 = 0u;
        long long v335 = 0u;
        long long v332 = 0u;
        long long v333 = 0u;
        *(_OWORD *)buf = 0u;
        if (v93 != 1 && v93 != 240) {
          BOOL v233 = v93 != 241;
        }
        buf[2] = v233;
        *(_WORD *)buf = HIWORD(v328);
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"HCI Connection Completed unable to allocate connection for %: disconnecting", v234, v235, v236, v237, v238, v239, v240, (uint64_t)&v327);
          uint64_t v241 = sub_100050B4C(0x2Eu);
          if (os_log_type_enabled(v241, OS_LOG_TYPE_ERROR)) {
            sub_100744F6C();
          }
        }
        uint64_t v242 = sub_10019304C(5u, v234, v235, v236, v237, v238, v239, v240, (uint64_t)buf);
        uint64_t v243 = sub_10019F308((uint64_t)buf, v242);
        if (!v243) {
          return;
        }
        uint64_t v244 = v243;
        if (!sub_100058654()) {
          return;
        }
        sub_100056E24((uint64_t)"OI_HCICMD_Disconnect failed: %!", v245, v246, v247, v248, v249, v250, v251, v244);
        __int16 v252 = sub_100050B4C(0x2Eu);
        if (!os_log_type_enabled(v252, OS_LOG_TYPE_ERROR)) {
          return;
        }
LABEL_155:
        sub_100744F6C();
        return;
      }
      int v82 = v15;
      int v83 = 0;
    }
    sub_10019AE84((uint64_t *)&v324, v82, v83);
    return;
  }
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"Short event, numBytes = %d", v4, v5, v6, v7, v8, v9, v10, a2);
    uint64_t v11 = sub_100050B4C(0x2Eu);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
LABEL_4:
    }
      sub_100744F6C();
  }
}

void sub_100025840()
{
  unsigned int v0 = (unsigned __int8 *)__chkstk_darwin();
  uint64_t v3 = v2;
  size_t v4 = v1;
  uint64_t v5 = v0;
  if (v2 == 3 && !byte_100A01AA0)
  {
    if (v1 < 3) {
      return;
    }
    signed int v6 = 0;
    LODWORD(v4) = 3;
    goto LABEL_45;
  }
  if (v2 == 243 && !byte_100A01AA0)
  {
    if (v1 < 4) {
      return;
    }
    signed int v6 = 0;
    LODWORD(v4) = 4;
    goto LABEL_45;
  }
  if (v2 != 5 || byte_100A01AA0)
  {
    signed int v6 = 0;
    BOOL v7 = v2 == 2;
    if (v2 == 2 && !byte_100A01AA1)
    {
      if (v1 >= 0xB && sub_100116290(v0, 1))
      {
        signed int v6 = 11;
LABEL_36:
        if (v4 >= 8 && !byte_100A01AA7 && sub_100116290(v5, 2)) {
          signed int v6 = 8;
        }
LABEL_40:
        if (v3 == 4 && !byte_100A01AA5 && (int)sub_100025C54(v5, v4) >= 1)
        {
          bzero(v11, 0x20006uLL);
          __memcpy_chk();
          unsigned int v9 = sub_100025B30(4, 0);
          sub_100023E54(v11, v4, 0, v9);
          return;
        }
        goto LABEL_45;
      }
      signed int v6 = 0;
      BOOL v7 = 1;
      if ((v4 - 8) >= 2u && (v5[8] & 0xFC) == 0xA0)
      {
        int v8 = v5[9];
        if (v8 == 17)
        {
          if ((v4 - 8) == 3 && (v5[10] & 0xEF) == 0) {
            goto LABEL_48;
          }
        }
        else if (v8 == 1 && (v4 & 0xFE) == 0x12 && !v5[11])
        {
LABEL_48:
          if (v4 < 8) {
            return;
          }
          signed int v6 = 8;
          goto LABEL_36;
        }
        signed int v6 = 0;
      }
    }
    if (!v7) {
      goto LABEL_40;
    }
    goto LABEL_36;
  }
  if (v1 < 0xD)
  {
    if (v1 >= 9)
    {
      if ((v0[1] & 0x40) != 0) {
        LODWORD(v4) = v1;
      }
      else {
        LODWORD(v4) = 8;
      }
    }
  }
  else
  {
    if ((v0[1] & 0x40) != 0)
    {
      signed int v6 = 0;
      LODWORD(v4) = 12;
      goto LABEL_45;
    }
    LODWORD(v4) = 8;
  }
  signed int v6 = 0;
LABEL_45:
  unsigned int v10 = sub_100025B30(v3, 0);

  sub_100023E54(v5, v4, v6, v10);
}

uint64_t sub_100025B30(uint64_t result, int a2)
{
  if (!result && (a2 & 1) != 0) {
    return 255;
  }
  char v2 = a2;
  if (result != 1) {
    char v2 = 0;
  }
  if (v2) {
    return 0;
  }
  if (result == 1 && !a2) {
    return 1;
  }
  char v3 = a2;
  if (result != 2) {
    char v3 = 0;
  }
  if (v3) {
    return 2;
  }
  if (result == 2 && !a2) {
    return 3;
  }
  char v4 = a2;
  if (result != 3) {
    char v4 = 0;
  }
  if (v4) {
    return 8;
  }
  if (result == 3 && !a2) {
    return 9;
  }
  char v5 = a2;
  if (result != 243) {
    char v5 = 0;
  }
  if (v5) {
    return 24;
  }
  if (result == 243 && !a2) {
    return 25;
  }
  if (result == 4) {
    return 1;
  }
  char v6 = a2;
  if (result != 5) {
    char v6 = 0;
  }
  if (v6) {
    return 12;
  }
  if (result == 5 && !a2) {
    return 13;
  }
  if (result == 7) {
    return 10;
  }
  if (result != 32)
  {
    if (result == 8 && (a2 & 1) == 0) {
      return 11;
    }
    return 255;
  }
  return result;
}

uint64_t sub_100025C54(void *a1, size_t __n)
{
  __int16 v2 = __n;
  char v4 = memchr(a1, 3, __n);
  if (!v4) {
    return -1;
  }
  char v5 = a1;
  while ((unsigned __int16)((_WORD)a1 - (_WORD)v4 + v2) < 8u)
  {
    if (!((_WORD)a1 - (_WORD)v4 + v2))
    {
      unsigned __int16 v6 = 0;
      goto LABEL_8;
    }
LABEL_7:
    char v5 = (char *)v4 + 1;
    unsigned __int16 v6 = (_WORD)a1 - (_WORD)v4 + v2 - 1;
LABEL_8:
    char v4 = memchr(v5, 3, v6);
    if (!v4) {
      return -1;
    }
  }
  if (*v4 != 0xFD6F1617FD6F0303) {
    goto LABEL_7;
  }
  return (__int16)(8 - ((_WORD)a1 - (_WORD)v4));
}

unsigned __int8 *sub_100025D0C(uint64_t a1)
{
  if (a1 < 0x24)
  {
    unsigned __int8 v3 = a1 - 1;
    goto LABEL_12;
  }
  if (a1 < 0x37)
  {
    unsigned __int8 v3 = a1 - 9;
    goto LABEL_19;
  }
  if (a1 < 0x3A)
  {
    unsigned __int8 v3 = a1 - 10;
    goto LABEL_19;
  }
  if (a1 < 0x3F)
  {
    unsigned __int8 v3 = a1 - 11;
    goto LABEL_19;
  }
  if (a1 < 0x49)
  {
    unsigned __int8 v3 = a1 - 19;
    goto LABEL_19;
  }
  if (a1 < 0x58)
  {
    unsigned __int8 v3 = a1 - 33;
LABEL_19:
    uint64_t result = (unsigned __int8 *)&unk_10099E820 + 24 * v3;
    if (*result == a1) {
      return result;
    }
    goto LABEL_20;
  }
  if (a1 <= 0x59) {
    char v2 = -34;
  }
  else {
    char v2 = 58;
  }
  unsigned __int8 v3 = v2 + a1;
LABEL_12:
  if (v3 <= 0x39u) {
    goto LABEL_19;
  }
LABEL_20:
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"Unrecognized Event (%d) index is %d\n", v5, v6, v7, v8, v9, v10, v11, a1);
    uint64_t v12 = sub_100050B4C(0x2Eu);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_1007457DC(v12);
    }
  }
  return 0;
}

uint64_t sub_100025E20()
{
  if (byte_100A11FD0 != 1 && byte_100A11FD8 != 0)
  {
    do
    {
      byte_100A11FD8 = 0;
      uint64_t result = sub_100026304();
    }
    while ((byte_100A11FD8 & 1) != 0);
  }
  return result;
}

uint64_t sub_100025E68(int a1, uint64_t a2, uint64_t a3, _OWORD *a4)
{
  if (!word_100A04D78) {
    return 0;
  }
  uint64_t v7 = 0;
  unint64_t v8 = 0;
  unsigned int v9 = a3 >> 10;
  while (1)
  {
    uint64_t v10 = qword_100A04D88;
    uint64_t v11 = qword_100A04D88 + v7;
    if ((*(unsigned __int8 *)(qword_100A04D88 + v7 + 8) == a1 || *(unsigned __int8 *)(v11 + 9) == a1)
      && *(unsigned __int16 *)(v11 + 4) == a3
      && (v9 < 0x3F
       || !off_100A04D90
       || ((uint64_t (*)(uint64_t, uint64_t, void, void))off_100A04D90)(a2, a3, *(unsigned __int8 *)(qword_100A04D88 + v7 + 10), *(unsigned __int8 *)(qword_100A04D88 + v7 + 11))))
    {
      break;
    }
    ++v8;
    v7 += 32;
    if (v8 >= (unsigned __int16)word_100A04D78) {
      return 0;
    }
  }
  long long v13 = *(_OWORD *)(v10 + v7 + 16);
  *a4 = *(_OWORD *)(v10 + v7);
  a4[1] = v13;
  byte_100A04D80 = 0;
  sub_100025F78(v8);
  sub_10002670C();
  return 1;
}

uint64_t sub_100025F78(int a1)
{
  int v2 = (unsigned __int16)word_100A04D78;
  if ((unsigned __int16)word_100A04D78 <= a1)
  {
    sub_10025B8C0();
    int v2 = (unsigned __int16)word_100A04D78;
  }
  if (!v2)
  {
    sub_10025B8C0();
    int v2 = (unsigned __int16)word_100A04D78;
  }
  if (v2 <= a1) {
    return 640;
  }
  unsigned __int16 v3 = v2 - 1;
  word_100A04D78 = v3;
  if (a1 < v3)
  {
    uint64_t v4 = v3;
    uint64_t v5 = (_OWORD *)(qword_100A04D88 + 32 * a1 + 32);
    uint64_t v6 = v4 - a1;
    do
    {
      long long v7 = v5[1];
      *(v5 - 2) = *v5;
      *(v5 - 1) = v7;
      v5 += 2;
      --v6;
    }
    while (v6);
  }
  return 0;
}

BOOL sub_100026010(uint64_t *a1, int a2, int a3)
{
  if (a2 != 64803 && a2 != 64745) {
    return 1;
  }
  if (*((unsigned char *)a1 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
    return 1;
  }
  uint64_t v3 = *((unsigned __int16 *)a1 + 6);
  if (*((unsigned __int16 *)a1 + 5) <= v3) {
    return 1;
  }
  if (*((unsigned char *)a1 + 14) != 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 803, "(*pBs).__RWFlag == BYTESTREAM_READ");
  }
  uint64_t v4 = *a1;
  *((_WORD *)a1 + 6) = v3 + 1;
  return *(unsigned __int8 *)(v4 + v3) == a3;
}

void sub_1000260B4(uint64_t a1, void (*a2)(uint64_t))
{
  if (a1
    && sub_100058654()
    && (sub_100056E24((uint64_t)"status %d, hlCb 0x%x", v4, v5, v6, v7, v8, v9, v10, a1),
        uint64_t v11 = sub_100050B4C(0x54u),
        os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)))
  {
    sub_100745764();
    if (!a2) {
      return;
    }
  }
  else if (!a2)
  {
    return;
  }
  a2(a1);
}

uint64_t sub_100026140(int a1, unsigned int a2)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, (uint64_t)&unk_100A19C80);
  if (a1)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = sub_10003FB34();
      uint64_t v5 = sub_10001AA04(v4, a2);
      sub_1007723A0((uint64_t)v5, (uint64_t)v11);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v6 = sub_10003FB34();
    uint64_t v7 = sub_10001AA04(v6, a2);
    sub_100772350((uint64_t)v7, (uint64_t)v11);
  }
  uint64_t v8 = sub_10003FB34();
  sub_1000262B8(v8, a2);
  dword_100A19D20 = a1;
  sub_100026264(&stru_100A19CF0);
  return sub_10003AFB4((uint64_t)v10);
}

void sub_100026240(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100026264(pthread_cond_t *a1)
{
  if (pthread_cond_broadcast(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_1007514D8();
    }
  }
}

uint64_t sub_1000262B8(uint64_t result, unsigned int a2)
{
  *(unsigned char *)(result + a2 + 440) = 0;
  return result;
}

uint64_t sub_1000262C4()
{
  return 0;
}

uint64_t sub_1000262CC(unsigned int a1)
{
  if (a1 > 0x42) {
    return 769;
  }
  else {
    return dword_1007BA2B0[(char)a1];
  }
}

uint64_t sub_1000262F0(uint64_t a1, uint64_t a2, _OWORD *a3)
{
  return sub_100025E68(14, a1, a2, a3);
}

uint64_t sub_100026304()
{
  if (!qword_100A11FF0) {
    sub_10025B8C0();
  }
  if (byte_100A11FD0 == 1) {
    sub_10025B8C0();
  }
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  byte_100A11FD0 = 1;
  uint64_t v19 = 0;
  sub_100026C30((uint64_t)&v19);
  __int16 v0 = word_100A11FE0;
  if (word_100A11FE0 < 0)
  {
    byte_100A11FD0 = 0;
LABEL_28:
    __int16 v1 = 0;
    byte_100A11FD8 = 0;
    return v1;
  }
  __int16 v1 = 0;
  LOWORD(v2) = 0;
  int v3 = (SWORD2(v19) + 99) / 100 + 10 * v19;
  uint64_t v4 = qword_100A11FF0;
  do
  {
    int v5 = (__int16)v2;
    uint64_t v6 = v4 + 24 * (__int16)v2;
    uint64_t v7 = *(void (**)(uint64_t *))(v6 + 8);
    if (v7 && (__int16)(*(_WORD *)(v4 + 24 * v5 + 2) - v3) <= 0)
    {
      *(unsigned char *)uint64_t v6 = 1;
      uint64_t v8 = v4 + 24 * v5;
      int v9 = *(__int16 *)(v8 + 6);
      if (*(_WORD *)(v8 + 6))
      {
        LOWORD(v17) = *(_WORD *)(v8 + 6);
        uint64_t v10 = (void *)(v4 + 24 * v5 + 16);
        if (v9 >= 9) {
          uint64_t v10 = (void *)*v10;
        }
        uint64_t v18 = v10;
        uint64_t v11 = &v17;
      }
      else
      {
        uint64_t v11 = 0;
      }
      v7(v11);
      ++v1;
      sub_1000264E4(v5);
      uint64_t v4 = qword_100A11FF0;
      __int16 v0 = word_100A11FE0;
    }
    int v2 = (__int16)(v5 + 1);
  }
  while (v2 <= v0);
  if ((v0 & 0x8000) == 0)
  {
    uint64_t v12 = (unsigned __int16)(v0 + 1);
    long long v13 = (void *)(qword_100A11FF0 + 8);
    unsigned __int16 v14 = -1;
    do
    {
      if (*v13)
      {
        __int16 v15 = *((_WORD *)v13 - 3);
        if ((unsigned __int16)(v15 - v3) < v14)
        {
          word_100A11FE8 = *((_WORD *)v13 - 3);
          unsigned __int16 v14 = v15 - v3;
        }
      }
      v13 += 3;
      --v12;
    }
    while (v12);
    if (v14 != 0xFFFF && off_100A11FF8) {
      off_100A11FF8(100 * v14);
    }
  }
  byte_100A11FD0 = 0;
  if (!v1) {
    goto LABEL_28;
  }
  return v1;
}

void sub_1000264E4(int a1)
{
  __int16 v1 = a1;
  uint64_t v2 = qword_100A11FF0 + 24 * a1;
  if (*(void *)(v2 + 8))
  {
    if (*(unsigned __int16 *)(qword_100A11FF0 + 24 * a1 + 6) >= 9u)
    {
      int v3 = *(void **)(qword_100A11FF0 + 24 * a1 + 16);
      if (v3) {
        sub_100023010(v3);
      }
    }
  }
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)uint64_t v2 = 0;
  if (word_100A11FE0 == v1 && (word_100A11FE0 & 0x80000000) == 0)
  {
    do
    {
      if (*(void *)(qword_100A11FF0 + 24 * v1 + 8)) {
        break;
      }
      word_100A11FE0 = --v1;
    }
    while ((v1 & 0x8000) == 0);
  }
}

uint64_t sub_10002659C(uint64_t a1, unsigned int *a2)
{
  uint64_t v16 = 0;
  sub_100026C30((uint64_t)&v16);
  int v4 = v16;
  int v5 = *(unsigned __int8 *)(a1 + 8);
  switch(v5)
  {
    case 1:
      int v8 = byte_100A196C0;
      if (!byte_100A196C0)
      {
        sub_10025B8C0();
        int v8 = byte_100A196C0;
      }
      unsigned int v7 = 5 * v8;
      uint64_t v6 = qword_100A19628;
      break;
    case 14:
      unsigned int v9 = *(unsigned __int16 *)(a1 + 4);
      if (v9 >> 10 < 0x3F)
      {
        uint64_t v6 = qword_100A19628;
        BOOL v10 = v9 == 3108;
        unsigned int v7 = *(unsigned __int8 *)(qword_100A19628 + 3) / 3u;
        if (!v10) {
          unsigned int v7 = *(unsigned __int8 *)(qword_100A19628 + 3);
        }
      }
      else
      {
        uint64_t v6 = qword_100A19628;
        unsigned int v7 = *(unsigned __int8 *)(qword_100A19628 + 6);
      }
      break;
    case 15:
      uint64_t v6 = qword_100A19628;
      unsigned int v7 = *(unsigned __int8 *)(qword_100A19628 + 4);
      break;
    default:
      uint64_t v6 = qword_100A19628;
      unsigned int v7 = *(unsigned __int8 *)(qword_100A19628 + 5);
      break;
  }
  *(_DWORD *)a1 = v7 + v4;
  unsigned int v11 = (unsigned __int16)word_100A04D78;
  unsigned int v12 = *(unsigned __int8 *)(v6 + 2);
  if ((unsigned __int16)word_100A04D78 > v12)
  {
    sub_10025B8C0();
    unsigned int v11 = (unsigned __int16)word_100A04D78;
    unsigned int v12 = *(unsigned __int8 *)(qword_100A19628 + 2);
  }
  if (v11 == v12) {
    return 603;
  }
  long long v14 = *(_OWORD *)(a1 + 16);
  __int16 v15 = (_OWORD *)(qword_100A04D88 + 32 * v11);
  _OWORD *v15 = *(_OWORD *)a1;
  v15[1] = v14;
  if (a2) {
    *a2 = v11;
  }
  word_100A04D78 = v11 + 1;
  sub_10002670C();
  return 0;
}

void sub_10002670C()
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v28 = 0;
  if (dword_100A04D7C)
  {
    uint64_t v0 = sub_100026DB4(dword_100A04D7C);
    dword_100A04D7C = 0;
    if (v0)
    {
      uint64_t v1 = v0;
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"%! (%d)", v2, v3, v4, v5, v6, v7, v8, v1);
        unsigned int v9 = sub_100050B4C(0x2Eu);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
    }
  }
  if (word_100A04D78)
  {
    sub_100026C30((uint64_t)&v28);
    uint64_t v10 = (unsigned __int16)word_100A04D78;
    if (word_100A04D78)
    {
      unsigned int v11 = v28;
      uint64_t v12 = qword_100A04D88;
      uint64_t v13 = 32 * (unsigned __int16)word_100A04D78 - 32;
      unsigned int v14 = -1;
      do
      {
        unsigned int v15 = *(_DWORD *)(v12 + v13);
        BOOL v16 = v15 >= v11;
        unsigned int v17 = v15 - v11;
        if (v17 != 0 && v16)
        {
          if (v17 < v14) {
            unsigned int v14 = v17;
          }
        }
        else
        {
          uint64_t v30 = v12 + v13;
          LOWORD(v29) = 32;
          ++byte_100A04D80;
          sub_100026DA8((uint64_t)sub_10019C354, &v29, 0);
          sub_100025F78(v10 - 1);
          uint64_t v12 = qword_100A04D88;
        }
        --v10;
        v13 -= 32;
      }
      while ((unint64_t)(v10 + 1) > 1);
      if (word_100A04D78)
      {
        uint64_t v18 = sub_1000268E4((uint64_t)sub_10019C3F8, 0, (unsigned __int16)(10 * v14) | 1u, &dword_100A04D7C);
        if (v18)
        {
          uint64_t v19 = v18;
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"%! (%d)", v20, v21, v22, v23, v24, v25, v26, v19);
            uint64_t v27 = sub_100050B4C(0x2Eu);
            if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
              sub_100744F6C();
            }
          }
        }
      }
    }
  }
}

uint64_t sub_1000268E4(uint64_t a1, const void **a2, int a3, int *a4)
{
  if (qword_100A11FF0)
  {
    if (a1) {
      goto LABEL_3;
    }
LABEL_15:
    sub_10025B8C0();
    if ((a3 & 0x8000) == 0) {
      goto LABEL_4;
    }
LABEL_16:
    sub_10025B8C0();
    return 101;
  }
  sub_10025B8C0();
  if (!a1) {
    goto LABEL_15;
  }
LABEL_3:
  if ((a3 & 0x8000) != 0) {
    goto LABEL_16;
  }
LABEL_4:
  uint64_t result = 101;
  if (a1)
  {
    uint64_t v9 = qword_100A11FF0;
    if (qword_100A11FF0)
    {
      if (!a3) {
        byte_100A11FD8 = 1;
      }
      int v10 = (unsigned __int16)word_100A11FE4;
      if (word_100A11FE4)
      {
        unsigned int v11 = (void *)(qword_100A11FF0 + 8);
        if (*(void *)(qword_100A11FF0 + 8))
        {
          uint64_t v12 = 0;
          __int16 v13 = 0;
          while (1)
          {
            int v14 = ++v13;
            if (v13 >= (int)(unsigned __int16)word_100A11FE4) {
              break;
            }
            uint64_t v12 = v13;
            uint64_t v15 = qword_100A11FF0 + 24 * v13;
            uint64_t v16 = *(void *)(v15 + 8);
            unsigned int v11 = (void *)(v15 + 8);
            if (!v16) {
              goto LABEL_19;
            }
          }
          int v18 = 0;
          uint64_t v17 = qword_100A11FF0 + 24 * v12;
        }
        else
        {
          int v14 = 0;
          __int16 v13 = 0;
          LODWORD(v12) = 0;
LABEL_19:
          uint64_t v17 = qword_100A11FF0 + 24 * (int)v12;
          if (word_100A11FE0 < v13)
          {
            word_100A11FE0 = v13;
            if (dword_100A12000 < v14) {
              dword_100A12000 = v14;
            }
          }
          sub_100026B78(qword_100A11FF0 + 24 * (int)v12, a3);
          *(unsigned char *)uint64_t v17 = 2;
          *unsigned int v11 = a1;
          uint64_t v19 = v9 + 24 * (int)v12;
          int v20 = *(unsigned __int16 *)(v19 + 4);
          if (((v20 + 1) & 0x10000) != 0) {
            unsigned __int16 v21 = v20 + 2;
          }
          else {
            unsigned __int16 v21 = v20 + 1;
          }
          *(_WORD *)(v19 + 4) = v21;
          int v18 = v21 | ((unsigned __int16)v14 << 16);
          int v10 = (unsigned __int16)word_100A11FE4;
        }
      }
      else
      {
        __int16 v13 = 0;
        int v14 = 0;
        uint64_t v17 = 0;
        int v18 = 0;
      }
      if (v14 >= v10)
      {
        sub_10025B8C0();
        int v10 = (unsigned __int16)word_100A11FE4;
      }
      if (v17) {
        BOOL v22 = v14 == v10;
      }
      else {
        BOOL v22 = 1;
      }
      if (v22)
      {
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"Dispatch table of size %d overflow: timeout %d, cbFunc0x %x", v23, v24, v25, v26, v27, v28, v29, (unsigned __int16)word_100A11FE4);
          uint64_t v30 = sub_100050B4C(0x2Au);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
            sub_100744F6C();
          }
        }
        sub_10025B8C0();
        return 1002;
      }
      else
      {
        if (a2)
        {
          int v31 = *(__int16 *)a2;
          if (v31 > 8)
          {
            uint64_t v33 = sub_100022FE8(*(unsigned __int16 *)a2);
            *(void *)(v17 + 16) = v33;
            if (!v33)
            {
              sub_1000264E4(v13);
              return 106;
            }
            memmove(v33, a2[1], *(__int16 *)a2);
            LOWORD(v31) = *(_WORD *)a2;
          }
          else if (v31 >= 1)
          {
            uint64_t v32 = 0;
            do
            {
              *(unsigned char *)(v17 + 16 + v32) = *((unsigned char *)a2[1] + v32);
              ++v32;
            }
            while (v32 < *(__int16 *)a2);
            LOWORD(v31) = *(_WORD *)a2;
          }
        }
        else
        {
          LOWORD(v31) = 0;
        }
        *(_WORD *)(v17 + 6) = v31;
        uint64_t result = 0;
        if (a4) {
          *a4 = v18;
        }
      }
    }
  }
  return result;
}

void sub_100026B78(uint64_t a1, int a2)
{
  uint64_t v5 = 0;
  sub_100026C30((uint64_t)&v5);
  int v4 = (SWORD2(v5) + 99) / 100 + 10 * v5;
  if (!a1) {
    sub_10025B8C0();
  }
  *(_WORD *)(a1 + 2) = v4 + a2;
  if (!word_100A11FE0 || a2 <= (__int16)(word_100A11FE8 - v4))
  {
    word_100A11FE8 = v4 + a2;
    if (off_100A11FF8) {
      off_100A11FF8((100 * a2));
    }
  }
}

uint64_t sub_100026C30(uint64_t a1)
{
  if (!dword_100A008C4)
  {
    mach_timebase_info((mach_timebase_info_t)&dword_100A008C0);
    unsigned int v2 = dword_100A008C4;
    uint64_t v3 = dword_100A008C4;
    uint64_t v4 = dword_100A008C0;
    while (v4)
    {
      if (v4 > v3)
      {
        uint64_t v5 = v4 % v3;
        uint64_t v4 = v3;
        uint64_t v3 = v5;
      }
      uint64_t v6 = v3;
      uint64_t v3 = v4;
      BOOL v7 = v6 == v4;
      uint64_t v4 = v6;
      if (v7)
      {
        LODWORD(v3) = 1;
        break;
      }
    }
    unsigned int v8 = dword_100A008C4 / v3;
    dword_100A008C0 /= v3;
    dword_100A008C4 /= v3;
    if ((v2 / v3) >> 1 >= 0x863)
    {
      sub_10025B8C0();
      unsigned int v8 = dword_100A008C4;
    }
    dword_100A008C4 = 1000000 * v8;
  }
  uint64_t result = mach_absolute_time();
  unint64_t v10 = result * dword_100A008C0 / dword_100A008C4;
  *(_WORD *)(a1 + 4) = v10 % 0x3E8;
  *(_DWORD *)a1 = v10 / 0x3E8;
  return result;
}

uint64_t sub_100026D20(int a1)
{
  pthread_mutex_lock(&stru_100A001B0);
  dword_100A00178 = a1;
  pthread_cond_signal(&stru_100A00180);

  return pthread_mutex_unlock(&stru_100A001B0);
}

uint64_t sub_100026D78()
{
  if (dword_100A04A1C)
  {
    if (byte_100A04A18) {
      BOOL v0 = byte_100A196C1 == 0;
    }
    else {
      BOOL v0 = 1;
    }
    if (!v0) {
      return sub_1000223C0();
    }
  }
  return result;
}

uint64_t sub_100026DA8(uint64_t a1, const void **a2, int *a3)
{
  return sub_1000268E4(a1, a2, 0, a3);
}

uint64_t sub_100026DB4(uint64_t a1)
{
  if (!sub_100026E24(a1)) {
    return 1001;
  }
  if (*(uint64_t (**)(uint64_t))(qword_100A11FF0 + 24 * WORD1(a1) + 8) == sub_10025BCB8)
  {
    unsigned int v3 = sub_10010B394(a1);
    return sub_100026E24(v3);
  }
  else
  {
    sub_1000264E4((int)a1 >> 16);
    return 0;
  }
}

BOOL sub_100026E24(unsigned int a1)
{
  unsigned __int16 v1 = a1;
  unsigned int v2 = HIWORD(a1);
  if (!qword_100A11FF0) {
    sub_10025B8C0();
  }
  return v2 < (unsigned __int16)word_100A11FE4
      && *(unsigned __int8 *)(qword_100A11FF0 + 24 * v2) >= 2u
      && *(unsigned __int16 *)(qword_100A11FF0 + 24 * v2 + 4) == v1;
}

uint64_t sub_100028CB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

void sub_10002B5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  (*(void (**)(uint64_t))(v17 + 16))(v17);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10002B5F8(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        unsigned int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

uint64_t sub_10002BB94(uint64_t a1, void *a2, uint64_t a3, _OWORD *a4, unsigned int a5, void *a6, uint64_t a7, unsigned int a8, void *a9, _DWORD *a10, unsigned char *a11, uint64_t a12, unsigned int a13, unsigned __int16 a14, void *a15)
{
  uint64_t v110 = a12;
  unsigned int v111 = a13;
  unsigned __int16 v112 = a14;
  id v99 = a2;
  id obj = a6;
  id v19 = a6;
  id v103 = a9;
  id v100 = a15;
  uint64_t v101 = sub_100052E70();
  unsigned __int16 v21 = *(void **)(a1 + 224);
  uint64_t v22 = a1;
  uint64_t v23 = (void *)(a1 + 232);
  if (v21 == v23)
  {
LABEL_24:
    unint64_t v107 = 0;
    if (*(char *)(a7 + 23) < 0)
    {
      uint64_t v33 = *(char **)a7;
      uint64_t v32 = *(void *)(a7 + 8);
    }
    else
    {
      uint64_t v32 = *(unsigned __int8 *)(a7 + 23);
      uint64_t v33 = (char *)a7;
    }
    uint64_t v34 = v22;
    if (v32 >= 20)
    {
      uint64_t v35 = &v33[v32];
      uint64_t v36 = v33;
      do
      {
        uint64_t v37 = memchr(v36, 99, v32 - 19);
        if (!v37) {
          break;
        }
        BOOL v38 = *v37 == 0x6C7070612E6D6F63 && v37[1] == 0x6F7465756C622E65;
        if (v38 && *((_DWORD *)v37 + 4) == 1684567151) {
          break;
        }
        uint64_t v36 = (char *)v37 + 1;
        uint64_t v32 = v35 - (unsigned char *)v36;
      }
      while (v35 - (unsigned char *)v36 >= 20);
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009A5018);
    }
    if (sub_100009254(qword_1009F8160, a7))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
        sub_100754BA8();
      }
      goto LABEL_99;
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009A5018);
    }
    uint64_t v24 = sub_100019C0C((void *)qword_1009F8160, v107);
    (**(void (***)(uint64_t, uint64_t, id, void))v101)(v101, v24, v19, a5);
    if (!(_BYTE)v110)
    {
LABEL_70:
      int v47 = (*(uint64_t (**)(uint64_t, uint64_t, BOOL))(*(void *)v101 + 48))(v101, v24, a8 == 0);
      if (BYTE1(v110)) {
        int v48 = 0;
      }
      else {
        int v48 = v47;
      }
      if (v48)
      {
        if (a8)
        {
          if (a8 != 1) {
            goto LABEL_79;
          }
          uint64_t v49 = sub_100050530();
          uint64_t v50 = 10;
        }
        else
        {
          uint64_t v49 = sub_100050530();
          uint64_t v50 = 9;
        }
        (*(void (**)(uint64_t, id, uint64_t))(*(void *)v49 + 632))(v49, v19, v50);
      }
LABEL_79:
      uint64_t v51 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        if (a8) {
          uint64_t v52 = "peripheral";
        }
        else {
          uint64_t v52 = "central";
        }
        sub_10003AE4C(v24, (uint64_t)v119);
        int v53 = v122;
        uint64_t v54 = *(unsigned char **)v119;
        sub_100015A24();
        uint64_t v55 = v119;
        __n128 v56 = "on";
        if (v53 < 0) {
          uint64_t v55 = v54;
        }
        *(_DWORD *)buf = 136447490;
        *(void *)&uint8_t buf[4] = v52;
        if (v103) {
          uint64_t v57 = "on";
        }
        else {
          uint64_t v57 = "off";
        }
        if (!v48) {
          __n128 v56 = "off";
        }
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v55;
        p_p = &__p;
        if (v106 < 0) {
          p_p = __p;
        }
        *(_WORD *)&buf[22] = 2082;
        *(void *)&buf[24] = v56;
        *(_WORD *)uint64_t v114 = 2082;
        *(void *)&v114[2] = v57;
        __int16 v115 = 2114;
        id v116 = v103;
        __int16 v117 = 2080;
        uint64_t v118 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Registering %{public}s session \"%{public}s\" with backgrounding: %{public}s, persistence: %{public}s (CBSR) restoreID: %{public}@ %s", buf, 0x3Eu);
        if (v106 < 0) {
          operator delete(__p);
        }
        uint64_t v34 = v22;
        if (v122 < 0) {
          operator delete(*(void **)v119);
        }
      }
      if (sub_10000DB50(v34, v24, v19, a8))
      {
        (*(void (**)(uint64_t, uint64_t, id))(*(void *)v101 + 8))(v101, v24, v19);
        if (qword_1009F8168 == -1)
        {
LABEL_98:
          sub_10000A678(qword_1009F8160, v107);
LABEL_99:
          uint64_t v24 = 0;
          goto LABEL_100;
        }
LABEL_182:
        dispatch_once(&qword_1009F8168, &stru_1009A5018);
        goto LABEL_98;
      }
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009A4FD8);
      }
      uint64_t v60 = sub_1000066B0((uint64_t)off_1009F8780, v24, a8);
      uint64_t v61 = v60;
      if (!v60)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_100754B0C();
        }
        (*(void (**)(uint64_t, uint64_t, id))(*(void *)v101 + 8))(v101, v24, v19);
        if (qword_1009F8168 == -1) {
          goto LABEL_98;
        }
        goto LABEL_182;
      }
      *(void *)(v60 + 120) = a3;
      uint64_t v62 = (void **)(v60 + 88);
      objc_storeStrong((id *)(v60 + 88), obj);
      if (qword_1009FB270 != -1) {
        dispatch_once(&qword_1009FB270, &stru_1009A5038);
      }
      *(unsigned char *)(v61 + 128) = sub_100006C7C(qword_1009FB268, v19);
      uint64_t v63 = (void **)(v61 + 96);
      objc_storeStrong((id *)(v61 + 96), a9);
      if (!*(unsigned char *)(v34 + 425))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR)) {
          sub_100754B74();
        }
        uint64_t v64 = *v63;
        *uint64_t v63 = 0;
      }
      if (*v63) {
        *(unsigned char *)(v34 + 178) = 1;
      }
      *(unsigned char *)(v61 + 28) = (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v101 + 56))(v101, v24) != 32;
      *(unsigned char *)(v61 + 27) = BYTE2(v110);
      *(_WORD *)(v61 + 36) = *(_WORD *)((char *)&v110 + 3);
      *(unsigned char *)(v61 + 184) = BYTE6(v110);
      *(_WORD *)(v61 + 25) = v111;
      uint64_t v65 = (void **)(v61 + 104);
      objc_storeStrong((id *)(v61 + 104), a2);
      *(unsigned char *)(v61 + 73) = 0;
      uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)v61 + 16))(v61);
      if (v66 == 1)
      {
        uint64_t v66 = _os_feature_enabled_impl();
        if (v66)
        {
          *(unsigned char *)(v61 + 264) = HIBYTE(v110);
        }
        else
        {
          uint64_t v66 = os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR);
          if (v66) {
            sub_100754B40();
          }
        }
      }
      if (!a8)
      {
        *(unsigned char *)(v61 + 382) = HIBYTE(v112);
        long long v77 = a4[1];
        v104[0] = *a4;
        v104[1] = v77;
        sub_100055D94(v66, v61, v110, v111 | ((unint64_t)v112 << 32), v104);
      }
      long long v78 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
      sub_10000AA58(v34, v61, v24, v78, BYTE5(v110), 0);
      int v79 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v24, (uint64_t)v119);
        int v80 = v122 >= 0 ? v119 : *(unsigned char **)v119;
        int v81 = *(unsigned __int8 *)(v34 + 179);
        *(_DWORD *)buf = 136447234;
        *(void *)&uint8_t buf[4] = v80;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = BYTE3(v110);
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = BYTE4(v110);
        *(_WORD *)&buf[24] = 1024;
        *(_DWORD *)&buf[26] = v81;
        *(_WORD *)&buf[30] = 1024;
        *(_DWORD *)uint64_t v114 = BYTE6(v110);
        _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" : needsRestrictedStateOperation = %d, overrideRestrictedState = %d , denylistMode = %d, receivesControllerBTClockEvents=%d ", buf, 0x24u);
        if (v122 < 0) {
          operator delete(*(void **)v119);
        }
      }
      if (!(BYTE1(v111) | HIBYTE(v111)))
      {
        if (BYTE3(v110))
        {
          if (qword_1009F8748 != -1) {
            dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
          }
          int v82 = sub_100028CB4((uint64_t)off_1009F8740);
          if (v82 == 1)
          {
            *a11 = *(unsigned char *)(v34 + 179);
LABEL_170:
            *a10 = v82;
            uint64_t v87 = sub_100017768();
            sub_10004191C(buf, "Sentinel");
            sub_10004191C(v119, "LEConnection");
            uint64_t v88 = (unsigned __int8 *)(v61 + 44);
            int v89 = (*(uint64_t (**)(uint64_t, unsigned char *, unsigned char *, uint64_t))(*(void *)v87 + 72))(v87, buf, v119, v61 + 44);
            if (v122 < 0) {
              operator delete(*(void **)v119);
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (v89)
            {
              int v90 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
              {
                int v91 = *v88;
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v91;
                _os_log_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_DEFAULT, "Sentinel LE Connection Enabled Override %d", buf, 8u);
              }
            }
            int v92 = [*(id *)(v34 + 320) objectForKeyedSubscript:*v62];
            uint64_t v93 = v92;
            if (HIBYTE(v112) && (!v92 || ([v92 containsObject:*v65] & 1) == 0)) {
              sub_1002F2F58(v34, *v62, *v65);
            }

            goto LABEL_100;
          }
        }
        if (BYTE4(v110) || !*(unsigned char *)(v34 + 179))
        {
          if (qword_1009F8748 != -1) {
            dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
          }
          int v82 = sub_100028CB4((uint64_t)off_1009F8740);
          goto LABEL_170;
        }
      }
      int v82 = 0;
      goto LABEL_170;
    }
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
    }
    int v40 = sub_100028CB4((uint64_t)off_1009F8740);
    if (v40)
    {
      if (!*(unsigned char *)(v22 + 179)) {
        goto LABEL_70;
      }
      uint64_t v41 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_69;
      }
      sub_10003AE4C(v24, (uint64_t)buf);
      if (buf[23] >= 0) {
        uint64_t v42 = buf;
      }
      else {
        uint64_t v42 = *(unsigned char **)buf;
      }
      *(_DWORD *)uint64_t v119 = 136446210;
      *(void *)&v119[4] = v42;
      uint64_t v43 = "Bluetooth is in denylist mode - show LE_DENYLIST_ENABLED alert for \"%{public}s\"";
    }
    else
    {
      uint64_t v41 = qword_100A19F00;
      if (!os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
LABEL_69:
        (*(void (**)(uint64_t, uint64_t, BOOL))(*(void *)v101 + 24))(v101, v24, v40 != 0);
        goto LABEL_70;
      }
      sub_10003AE4C(v24, (uint64_t)buf);
      if (buf[23] >= 0) {
        uint64_t v46 = buf;
      }
      else {
        uint64_t v46 = *(unsigned char **)buf;
      }
      *(_DWORD *)uint64_t v119 = 136446210;
      *(void *)&v119[4] = v46;
      uint64_t v43 = "Bluetooth is powered off - notifying session \"%{public}s\"";
    }
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, v43, v119, 0xCu);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_69;
  }
  *(void *)&long long v20 = 136446466;
  long long v94 = v20;
  while (1)
  {
    uint64_t v24 = v21[4];
    uint64_t v25 = v21[5];
    if (*(void *)(v25 + 120) == a3)
    {
      uint64_t v26 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT))
      {
        sub_10003AE4C(v24, (uint64_t)buf);
        int v31 = buf;
        if (buf[23] < 0) {
          int v31 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v119 = v94;
        *(void *)&v119[4] = v31;
        __int16 v120 = 2114;
        id v121 = v19;
        _os_log_fault_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_FAULT, "Duplicate check-in message from session \"%{public}s\" in application \"%{public}@\"", v119, 0x16u);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
    }
    if (objc_msgSend(*(id *)(v25 + 88), "isEqualToString:", v19, v94))
    {
      if (!*(void *)(v25 + 120) && *(void *)(v25 + 96))
      {
        uint64_t v27 = qword_100A19F58;
        if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = *(void *)(v25 + 88);
          *(_DWORD *)buf = 138543362;
          *(void *)&uint8_t buf[4] = v28;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Starting timer for a dead session to clean up leaked prior session for \"%{public}@\"", buf, 0xCu);
        }
        sub_1002F2C3C(v22, *(void **)(v25 + 88), 15);
      }
      if ([*(id *)(v25 + 96) isEqualToString:v103]
        && (*(unsigned int (**)(uint64_t))(*(void *)v25 + 16))(v25) == a8)
      {
        break;
      }
    }
    uint64_t v29 = (void *)v21[1];
    if (v29)
    {
      do
      {
        uint64_t v30 = v29;
        uint64_t v29 = (void *)*v29;
      }
      while (v29);
    }
    else
    {
      do
      {
        uint64_t v30 = (void *)v21[2];
        BOOL v38 = *v30 == (void)v21;
        unsigned __int16 v21 = v30;
      }
      while (!v38);
    }
    unsigned __int16 v21 = v30;
    if (v30 == v23) {
      goto LABEL_24;
    }
  }
  uint64_t v44 = qword_100A19F58;
  if (*(void *)(v25 + 120))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(v24, (uint64_t)v119);
      uint64_t v45 = v122 >= 0 ? v119 : *(unsigned char **)v119;
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v103;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v45;
      *(_WORD *)&buf[22] = 2114;
      *(void *)&buf[24] = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "Duplicate restore identifier \"%{public}@\" from session \"%{public}s\" in application \"%{public}@\"", buf, 0x20u);
      if (v122 < 0) {
        operator delete(*(void **)v119);
      }
    }
    goto LABEL_99;
  }
  uint64_t v67 = v22;
  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(v24, (uint64_t)v119);
    uint64_t v68 = v122 >= 0 ? v119 : *(unsigned char **)v119;
    *(_DWORD *)buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = a8;
    *(_WORD *)&uint8_t buf[8] = 2082;
    *(void *)&buf[10] = v68;
    *(_WORD *)&unsigned char buf[18] = 2114;
    *(void *)&buf[20] = v19;
    _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Restoring zombie'd session type %d \"%{public}s\" for application \"%{public}@\"", buf, 0x1Cu);
    if (v122 < 0) {
      operator delete(*(void **)v119);
    }
  }
  *(void *)(v25 + 120) = a3;
  uint64_t v69 = sub_100551A1C(v24, (const std::string *)a7);
  if (!a8)
  {
    long long v70 = a4[1];
    v109[0] = *a4;
    v109[1] = v70;
    sub_100055D94(v69, v25, v110, v111 | ((unint64_t)v112 << 32), v109);
  }
  uint64_t v71 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:");
  sub_10000AA58(v67, v25, v24, v71, BYTE5(v110), 1);
  uint64_t v72 = [*(id *)(v67 + 304) objectForKey:v19];
  if (v72)
  {
    uint64_t v73 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003AE4C(v24, (uint64_t)v119);
      uint64_t v74 = v122 >= 0 ? v119 : *(unsigned char **)v119;
      *(_DWORD *)buf = 138543874;
      *(void *)&uint8_t buf[4] = v103;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v74;
      *(_WORD *)&buf[22] = 2114;
      *(void *)&buf[24] = v19;
      _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "Restore identifier \"%{public}@\" from session \"%{public}s\" in application \"%{public}@\" found, canceling resurrectionTimer", buf, 0x20u);
      if (v122 < 0) {
        operator delete(*(void **)v119);
      }
    }
    dispatch_block_cancel(v72);
    [*(id *)(v67 + 304) removeObjectForKey:v19];
    [*(id *)(v67 + 296) removeObject:v19];
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v67 + 16))(v67, v24);
  uint64_t v75 = qword_100A19F58;
  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "Ignore needsRestrictedStateOperation since restorable sessions are always apps", buf, 2u);
  }
  if (*(unsigned char *)(v67 + 179))
  {
    int v76 = 0;
  }
  else
  {
    if (qword_1009F8748 != -1) {
      dispatch_once(&qword_1009F8748, &stru_1009A4DF8);
    }
    int v76 = sub_100028CB4((uint64_t)off_1009F8740);
  }
  *a10 = v76;
  uint64_t v83 = sub_100035F54();
  int v84 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 384))(v83);
  if (*a10) {
    int v85 = v84;
  }
  else {
    int v85 = 0;
  }
  if (v85 == 1)
  {
    uint64_t v86 = sub_100019878();
    v108[0] = _NSConcreteStackBlock;
    v108[1] = 3221225472;
    v108[2] = sub_1002F2E88;
    v108[3] = &unk_1009A12D0;
    v108[4] = v67;
    v108[5] = v24;
    v108[6] = v25;
    sub_100013018(v86, v108);
  }

LABEL_100:
  return v24;
}

void sub_10002CD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10002CE08(uint64_t a1, unint64_t a2, char a3)
{
  unsigned int v3 = *(void **)(a1 + 232);
  if (v3)
  {
    uint64_t v6 = (uint64_t *)(a1 + 232);
    do
    {
      unint64_t v7 = v3[4];
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = v3;
      }
      else {
        uint64_t v9 = v3 + 1;
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      unsigned int v3 = (void *)*v9;
    }
    while (*v9);
    if (v6 != (uint64_t *)(a1 + 232) && v6[4] <= a2)
    {
      long long v78 = (uint64_t **)(a1 + 224);
      int v81 = (uint64_t *)(a1 + 232);
      unsigned int v11 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        uint64_t v12 = (SBYTE7(v110) & 0x80u) == 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446210;
        *(void *)&uint8_t buf[4] = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Unregistering session \"%{public}s\"", buf, 0xCu);
        if (SBYTE7(v110) < 0) {
          operator delete(__p[0]);
        }
      }
      id v13 = *(id *)(v6[5] + 88);
      uint64_t v80 = v6[5];
      id v14 = *(id *)(v80 + 104);
      unint64_t v15 = a2;
      if ((a3 & 1) == 0)
      {
        if (*(unsigned char *)(v80 + 24) && *(void *)(v80 + 96)) {
          int v16 = (*(uint64_t (**)(void))(*(void *)v80 + 40))();
        }
        else {
          int v16 = 0;
        }
        uint64_t v17 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = *(void **)(a1 + 344);
          LODWORD(__p[0]) = 138543362;
          *(void **)((char *)__p + 4) = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "bundle ID's not allowed to use bluetooth %{public}@", (uint8_t *)__p, 0xCu);
        }
        if (*(void *)(v80 + 96))
        {
          long long v103 = 0u;
          long long v104 = 0u;
          long long v101 = 0u;
          long long v102 = 0u;
          id v19 = *(id *)(a1 + 344);
          id v20 = [v19 countByEnumeratingWithState:&v101 objects:v116 count:16];
          if (v20)
          {
            uint64_t v21 = *(void *)v102;
            while (2)
            {
              for (xpc_object_t i = 0; i != v20; xpc_object_t i = (char *)i + 1)
              {
                if (*(void *)v102 != v21) {
                  objc_enumerationMutation(v19);
                }
                uint64_t v23 = *(void **)(*((void *)&v101 + 1) + 8 * i);
                if ([v23 isEqualToString:*(void *)(v80 + 88)])
                {
                  uint64_t v24 = qword_100A19F58;
                  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
                  {
                    LODWORD(__p[0]) = 138543362;
                    *(void **)((char *)__p + 4) = v23;
                    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Removing restorable bundle %{public}@ because user disabled TCC access to bluetooth", (uint8_t *)__p, 0xCu);
                  }
                  [*(id *)(a1 + 296) removeObject:*(void *)(v80 + 88)];
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v80 + 40))(v80))
                  {
                    uint64_t v25 = qword_100A19F58;
                    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
                    {
                      sub_10003AE4C(a2, (uint64_t)__p);
                      uint64_t v26 = (SBYTE7(v110) & 0x80u) == 0 ? __p : (void **)__p[0];
                      *(_DWORD *)buf = 136446210;
                      *(void *)&uint8_t buf[4] = v26;
                      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Removing restorable session %{public}s due to TCC change", buf, 0xCu);
                      if (SBYTE7(v110) < 0) {
                        operator delete(__p[0]);
                      }
                    }
                  }

                  unint64_t v15 = a2;
                  goto LABEL_55;
                }
              }
              id v20 = [v19 countByEnumeratingWithState:&v101 objects:v116 count:16];
              if (v20) {
                continue;
              }
              break;
            }
          }

          unint64_t v15 = a2;
          if (v16) {
            goto LABEL_50;
          }
        }
        else if (v16)
        {
LABEL_50:
          uint64_t v27 = qword_100A19F58;
          if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v28 = *(void **)(v80 + 88);
            LODWORD(__p[0]) = 138543362;
            *(void **)((char *)__p + 4) = v28;
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Session %{public}@ is restorable, persisting", (uint8_t *)__p, 0xCu);
          }
          if ((*(unsigned int (**)(uint64_t))(*(void *)v80 + 16))(v80) == 3) {
            *(void *)(v80 + 216) = 0;
          }
          *(void *)(v80 + 120) = 0;
          *(unsigned char *)(v80 + 38) = 0;
LABEL_148:

          return 0;
        }
      }
LABEL_55:
      int v29 = (*(uint64_t (**)(uint64_t))(*(void *)v6[5] + 16))(v6[5]);
      uint64_t v30 = v6[5];
      if (v29)
      {
        int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 16))(v6[5]);
        uint64_t v32 = v6[5];
        if (v31 != 1)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v32 + 16))(v6[5]) != 3)
          {
            BOOL v40 = 0;
            goto LABEL_105;
          }
          uint64_t v72 = v6[5];
          BOOL v40 = [*(id *)(v72 + 232) count] != 0;
          [*(id *)(v72 + 240) removeAllObjects];
LABEL_104:
          unint64_t v15 = a2;
LABEL_105:
          sub_100055E1C(a1, v15);
          uint64_t v59 = sub_100052E70();
          (*(void (**)(uint64_t, unint64_t, id))(*(void *)v59 + 8))(v59, v15, v13);
          uint64_t v111 = 0;
          *(_OWORD *)__p = 0u;
          long long v110 = 0u;
          sub_10003AE4C(v15, (uint64_t)buf);
          sub_100052DAC((uint64_t)__p, (long long *)buf, *(unsigned char *)(v6[5] + 129));
          if (v108 < 0) {
            operator delete(*(void **)buf);
          }
          if (qword_1009FB260 != -1) {
            dispatch_once(&qword_1009FB260, &stru_1009A4FF8);
          }
          sub_1000504D8();
          sub_1000560F8(a1);
          sub_10004D3B8(v78, v6);
          operator delete(v6);
          if (v80) {
            (*(void (**)(uint64_t))(*(void *)v80 + 8))(v80);
          }
          uint64_t v60 = *v78;
          if (*v78 == v81)
          {
LABEL_120:
            uint64_t v64 = [*(id *)(a1 + 320) objectForKeyedSubscript:v13];
            uint64_t v65 = v64;
            if (v64)
            {
              [v64 removeObject:v14];
              [*(id *)(a1 + 320) setObject:v65 forKeyedSubscript:v13];
              uint64_t v66 = qword_100A19F00;
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 138543618;
                *(void *)&uint8_t buf[4] = v13;
                __int16 v106 = 2112;
                id v107 = v14;
                _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Application %{public}@ for user %@ is no longer interested in FindMy devices", buf, 0x16u);
              }
            }
          }
          else
          {
            while (![*(id *)(v60[5] + 88) isEqualToString:v13]
                 || ([*(id *)(v60[5] + 104) isEqual:v14] & 1) == 0)
            {
              uint64_t v61 = (uint64_t *)v60[1];
              if (v61)
              {
                do
                {
                  uint64_t v62 = v61;
                  uint64_t v61 = (uint64_t *)*v61;
                }
                while (v61);
              }
              else
              {
                do
                {
                  uint64_t v62 = (uint64_t *)v60[2];
                  BOOL v63 = *v62 == (void)v60;
                  uint64_t v60 = v62;
                }
                while (!v63);
              }
              uint64_t v60 = v62;
              if (v62 == v81) {
                goto LABEL_120;
              }
            }
          }
          if (*(unsigned char *)(a1 + 178))
          {
            uint64_t v67 = *v78;
            if (*v78 == v81)
            {
LABEL_134:
              char v71 = 0;
            }
            else
            {
              while (1)
              {
                uint64_t v68 = v67[5];
                if (*(unsigned char *)(v68 + 24))
                {
                  if (*(void *)(v68 + 96)) {
                    break;
                  }
                }
                uint64_t v69 = (uint64_t *)v67[1];
                if (v69)
                {
                  do
                  {
                    long long v70 = v69;
                    uint64_t v69 = (uint64_t *)*v69;
                  }
                  while (v69);
                }
                else
                {
                  do
                  {
                    long long v70 = (uint64_t *)v67[2];
                    BOOL v63 = *v70 == (void)v67;
                    uint64_t v67 = v70;
                  }
                  while (!v63);
                }
                uint64_t v67 = v70;
                if (v70 == v81) {
                  goto LABEL_134;
                }
              }
              char v71 = 1;
            }
            *(unsigned char *)(a1 + 178) = v71;
          }
          if (!*(void *)(a1 + 240)) {
            word_1009FB222 = 1;
          }
          if (qword_1009F8168 != -1) {
            dispatch_once(&qword_1009F8168, &stru_1009A5018);
          }
          uint64_t v73 = qword_1009F8160;
          unint64_t v74 = sub_100019D1C(a2);
          sub_10000A678(v73, v74);
          if (v40) {
            sub_1002F1770(a1);
          }
          if (SHIBYTE(v110) < 0) {
            operator delete(__p[1]);
          }
          goto LABEL_148;
        }
        if (*(unsigned char *)(v32 + 226))
        {
          if (qword_1009F8248 != -1) {
            dispatch_once(&qword_1009F8248, &stru_1009A4F18);
          }
          sub_10065DB34((uint64_t)off_1009F8240, v15);
        }
        sub_1002F4518(a1, v15);
        [*(id *)(v32 + 80) allKeys];
        v82 = id v77 = v13;
        [*(id *)(v32 + 80) removeAllObjects];
        long long v86 = 0u;
        long long v87 = 0u;
        long long v84 = 0u;
        long long v85 = 0u;
        id v33 = v82;
        id v34 = [v33 countByEnumeratingWithState:&v84 objects:v112 count:16];
        if (v34)
        {
          uint64_t v35 = *(void *)v85;
          do
          {
            uint64_t v36 = 0;
            do
            {
              if (*(void *)v85 != v35) {
                objc_enumerationMutation(v33);
              }
              uint64_t v37 = *(void **)(*((void *)&v84 + 1) + 8 * (void)v36);
              if (qword_1009F7EC0 != -1) {
                dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
              }
              BOOL v38 = off_1009F7EB8;
              int v39 = sub_1002F4430(a1, v37);
              sub_10067F6EC((uint64_t)v38, v37, v39, 1);
              uint64_t v36 = (char *)v36 + 1;
            }
            while (v34 != v36);
            id v34 = [v33 countByEnumeratingWithState:&v84 objects:v112 count:16];
          }
          while (v34);
        }

        id v13 = v77;
        BOOL v40 = 0;
      }
      else
      {
        if (*(unsigned char *)(v30 + 304)) {
          sub_10042FA58(v6[5], v15);
        }
        memset(v100, 0, sizeof(v100));
        sub_100009D78(v30, v15, 0, v14, 0, v100, 0, v13);
        if (qword_1009F7F10 != -1) {
          dispatch_once(&qword_1009F7F10, &stru_1009A4E18);
        }
        sub_1000544AC(qword_1009F7F08, v15);
        [*(id *)(v30 + 256) removeAllObjects];
        id v41 = [*(id *)(v30 + 248) count];
        BOOL v42 = v41 != 0;
        uint64_t v83 = v30;
        if (v41)
        {
          long long v98 = 0u;
          long long v99 = 0u;
          long long v96 = 0u;
          long long v97 = 0u;
          id v43 = *(id *)(v30 + 248);
          id v44 = [v43 countByEnumeratingWithState:&v96 objects:v115 count:16];
          if (v44)
          {
            uint64_t v45 = *(void *)v97;
            do
            {
              for (j = 0; j != v44; j = (char *)j + 1)
              {
                if (*(void *)v97 != v45) {
                  objc_enumerationMutation(v43);
                }
                id v47 = *(id *)(*((void *)&v96 + 1) + 8 * (void)j);
                sub_1002F41C0(a1, v47);
              }
              id v44 = [v43 countByEnumeratingWithState:&v96 objects:v115 count:16];
            }
            while (v44);
          }

          uint64_t v30 = v83;
        }
        [*(id *)(v30 + 336) removeAllObjects];
        int v76 = [*(id *)(v30 + 80) allKeys];
        [*(id *)(v30 + 80) removeAllObjects];
        BOOL v75 = v42;
        long long v94 = 0u;
        long long v95 = 0u;
        long long v92 = 0u;
        long long v93 = 0u;
        id v33 = v76;
        id v48 = [v33 countByEnumeratingWithState:&v92 objects:v114 count:16];
        if (v48)
        {
          uint64_t v49 = *(void *)v93;
          do
          {
            uint64_t v50 = 0;
            do
            {
              if (*(void *)v93 != v49) {
                objc_enumerationMutation(v33);
              }
              uint64_t v51 = *(void **)(*((void *)&v92 + 1) + 8 * (void)v50);
              if (qword_1009F7EC0 != -1) {
                dispatch_once(&qword_1009F7EC0, &stru_1009A4E38);
              }
              uint64_t v52 = off_1009F7EB8;
              int v53 = sub_1002F4430(a1, v51);
              sub_10067F6EC((uint64_t)v52, v51, v53, 0);
              uint64_t v50 = (char *)v50 + 1;
            }
            while (v48 != v50);
            id v48 = [v33 countByEnumeratingWithState:&v92 objects:v114 count:16];
          }
          while (v48);
        }

        BOOL v40 = v75;
        sub_100056054(a1, a2);
        uint64_t v54 = *(void **)(v83 + 392);
        if (v54 && [v54 count])
        {
          long long v90 = 0u;
          long long v91 = 0u;
          long long v88 = 0u;
          long long v89 = 0u;
          id v55 = *(id *)(v83 + 392);
          id v56 = [v55 countByEnumeratingWithState:&v88 objects:v113 count:16];
          if (v56)
          {
            uint64_t v57 = *(void *)v89;
            do
            {
              for (k = 0; k != v56; k = (char *)k + 1)
              {
                if (*(void *)v89 != v57) {
                  objc_enumerationMutation(v55);
                }
                sub_10043C4B8(v83, *(void **)(*((void *)&v88 + 1) + 8 * (void)k), 0, 0);
              }
              id v56 = [v55 countByEnumeratingWithState:&v88 objects:v113 count:16];
            }
            while (v56);
          }

          [*(id *)(v83 + 392) removeAllObjects];
        }
      }

      goto LABEL_104;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
    sub_100754AD8();
  }
  return 1;
}

void sub_10002DADC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10002DF68(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Unwind_Resume(a1);
}

void sub_10002DF98(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  if (v1) {
    free(v1);
  }
}

uint64_t sub_10002DFB0(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = +[NSString stringWithUTF8String:a2];
  uint64_t v6 = a1[5];
  uint64_t v7 = *(void *)(*(void *)(a1[4] + 8) + 24);
  BOOL v8 = *(void **)(v6 + 8 * v7);
  *(void *)(v6 + 8 * v7) = v5;

  uint64_t v9 = sub_10002E040(a3);
  uint64_t v10 = a1[6];
  uint64_t v11 = *(void *)(*(void *)(a1[4] + 8) + 24);
  uint64_t v12 = *(void **)(v10 + 8 * v11);
  *(void *)(v10 + 8 * v11) = v9;

  ++*(void *)(*(void *)(a1[4] + 8) + 24);
  return 1;
}

__CFString *sub_10002E040(void *a1)
{
  xpc_type_t type = xpc_get_type(a1);
  if (type == (xpc_type_t)&_xpc_type_int64)
  {
    uint64_t v6 = +[NSNumber numberWithLongLong:xpc_int64_get_value(a1)];
    goto LABEL_28;
  }
  xpc_type_t v3 = type;
  if (type == (xpc_type_t)&_xpc_type_uint64)
  {
    uint64_t v6 = +[NSNumber numberWithUnsignedLongLong:xpc_uint64_get_value(a1)];
    goto LABEL_28;
  }
  if (type == (xpc_type_t)&_xpc_type_BOOL)
  {
    BOOL value = xpc_BOOL_get_value(a1);
    BOOL v8 = &__kCFBooleanFalse;
    if (value) {
      BOOL v8 = &__kCFBooleanTrue;
    }
    uint64_t v6 = v8;
    goto LABEL_28;
  }
  if (type != (xpc_type_t)&_xpc_type_string)
  {
    if (type == (xpc_type_t)&_xpc_type_data)
    {
      id v12 = objc_alloc((Class)NSData);
      bytes_ptr = xpc_data_get_bytes_ptr(a1);
      uint64_t v6 = (__CFString *)[v12 initWithBytes:bytes_ptr length:xpc_data_get_length(a1)];
    }
    else if (type == (xpc_type_t)&_xpc_type_uuid)
    {
      uint64_t v6 = (__CFString *)[objc_alloc((Class)NSUUID) initWithUUIDBytes:xpc_uuid_get_bytes(a1)];
    }
    else if (type == (xpc_type_t)&_xpc_type_array)
    {
      sub_1004F0EB4(a1);
      uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else if (type == (xpc_type_t)&_xpc_type_dictionary)
    {
      sub_10002EF7C(a1);
      uint64_t v6 = (__CFString *)objc_claimAutoreleasedReturnValue();
    }
    else if (type == (xpc_type_t)&_xpc_type_fd)
    {
      uint64_t v6 = +[NSNumber numberWithInt:xpc_fd_dup(a1)];
    }
    else
    {
      if (type != (xpc_type_t)&_xpc_type_double)
      {
        int v4 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          int v15 = 134217984;
          xpc_type_t v16 = v3;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Unknown XPC type: %p", (uint8_t *)&v15, 0xCu);
        }
        uint64_t v5 = 0;
        goto LABEL_29;
      }
      uint64_t v6 = +[NSNumber numberWithDouble:xpc_double_get_value(a1)];
    }
LABEL_28:
    uint64_t v5 = v6;
    goto LABEL_29;
  }
  uint64_t v9 = +[NSString stringWithUTF8String:xpc_string_get_string_ptr(a1)];
  uint64_t v10 = (void *)v9;
  uint64_t v11 = &stru_1009C1AC8;
  if (v9) {
    uint64_t v11 = (__CFString *)v9;
  }
  uint64_t v5 = v11;

LABEL_29:

  return v5;
}

void sub_10002E328(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t a7, void *a8)
{
  id v15 = a3;
  id v16 = a8;
  id v19 = *(void **)(a1 + 232);
  int v18 = (void *)(a1 + 232);
  uint64_t v17 = v19;
  if (v19)
  {
    id v20 = v18;
    do
    {
      unint64_t v21 = v17[4];
      BOOL v22 = v21 >= a2;
      if (v21 >= a2) {
        uint64_t v23 = v17;
      }
      else {
        uint64_t v23 = v17 + 1;
      }
      if (v22) {
        id v20 = v17;
      }
      uint64_t v17 = (void *)*v23;
    }
    while (*v23);
    if (v20 != v18 && v20[4] <= a2 && !(*(unsigned int (**)(void))(*(void *)v20[5] + 16))(v20[5]))
    {
      uint64_t v24 = v20[5];
      ++*(void *)(v24 + 368);
      if (*(unsigned char *)(v24 + 186))
      {
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
        }
        sub_10070DB60(qword_1009F7EC8, 60);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
        }
        uint64_t v25 = off_1009F7ED8;
        sub_10004191C(__p, "PrivateModeDevice");
        sub_1006BC69C((uint64_t)v25, v15, (unsigned __int8 *)__p);
        if (v39 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v26 = *(void *)(a4 + 8);
      uint64_t v36 = 0;
      uint64_t v37 = 0;
      uint64_t v35 = 0;
      uint64_t v27 = (uint64_t)sub_100037564((char *)&v35, *(long long **)(v26 + 64), *(long long **)(v26 + 72), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v26 + 72) - *(void *)(v26 + 64)) >> 2));
      uint64_t v28 = (unsigned __int8 *)v35;
      int v29 = v36;
      if (v35 == v36)
      {
        uint64_t v30 = (unsigned __int8 *)v35;
      }
      else
      {
        while (1)
        {
          *(_OWORD *)buf = xmmword_1007BA820;
          int v41 = 0;
          uint64_t v27 = sub_10022A44C(v28, buf);
          if (v27) {
            break;
          }
          v28 += 20;
          if (v28 == v29)
          {
            uint64_t v28 = v29;
            break;
          }
        }
        uint64_t v30 = v28;
        uint64_t v28 = v36;
      }
      if (v30 != v28)
      {
        int v31 = qword_100A19F00;
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_INFO, "Set TAG as CarPlay", buf, 2u);
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009A4EB8);
        }
        uint64_t v32 = off_1009F7ED8;
        sub_10004191C(v33, "_CARPLAY_DEVICE_");
        uint64_t v27 = sub_1006BC69C((uint64_t)v32, v15, (unsigned __int8 *)v33);
        if (v34 < 0) {
          operator delete(v33[0]);
        }
      }
      sub_10002FAB0(v27, v24, a2, 10, 0);
      sub_10002E6C8(v24, v15, a4, a5, a6, a7, v16);
      if (v35)
      {
        uint64_t v36 = (unsigned __int8 *)v35;
        operator delete(v35);
      }
    }
  }
}

void sub_10002E65C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }

  _Unwind_Resume(a1);
}

void sub_10002E6C8(uint64_t a1, void *a2, uint64_t a3, uint64_t *a4, unsigned int a5, uint64_t a6, void *a7)
{
  id v13 = a2;
  id v14 = a7;
  id v15 = *(unsigned char **)(a1 + 120);
  if (v15)
  {
    int v16 = *((_DWORD *)v15 - 16);
    BOOL v17 = v15[26] != 0;
    LOBYTE(v65) = v15[29] != 0;
    HIDWORD(v65) = v15[27] != 0;
    char v64 = v15[30] != 0;
    if (v13) {
      goto LABEL_3;
    }
LABEL_40:
    int v63 = v17;
    if (*(unsigned char *)(*(void *)(a3 + 8) + 304)) {
      goto LABEL_41;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_100767E3C();
    }
    goto LABEL_63;
  }
  uint64_t v65 = 0;
  BOOL v17 = 0;
  int v16 = 0;
  char v64 = 0;
  if (!v13) {
    goto LABEL_40;
  }
LABEL_3:
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AE160);
  }
  if (sub_10002F7F0((uint64_t)off_1009F7ED8, v13, *(void **)(a1 + 88), *(void **)(a1 + 104)))
  {
    if (sub_10002F690(a1, v13))
    {
      if (sub_10002EED4(a1, (uint64_t *)(*(void *)(a3 + 8) + 64)))
      {
        if (sub_10002EED4(a1, a4))
        {
          int v63 = v17;
          uint64_t v58 = a4;
          uint64_t v59 = a6;
          unsigned int v60 = a5;
          id v61 = v14;
          uint64_t v18 = *(void *)(a3 + 8);
          memset(buf, 0, sizeof(buf));
          id v19 = *(void **)(v18 + 112);
          id v20 = (void *)(v18 + 120);
          if (v19 != (void *)(v18 + 120))
          {
            unint64_t v21 = 0;
            do
            {
              BOOL v22 = (long long *)(v19 + 4);
              if ((unint64_t)v21 >= *(void *)&buf[16])
              {
                unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v21[-*(void *)buf] >> 2);
                unint64_t v25 = v24 + 1;
                if (v24 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                  abort();
                }
                if (0x999999999999999ALL * ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2) > v25) {
                  unint64_t v25 = 0x999999999999999ALL * ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2);
                }
                if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&buf[16] - *(void *)buf) >> 2) >= 0x666666666666666) {
                  unint64_t v26 = 0xCCCCCCCCCCCCCCCLL;
                }
                else {
                  unint64_t v26 = v25;
                }
                if (v26) {
                  uint64_t v27 = (char *)sub_10003767C((uint64_t)&buf[16], v26);
                }
                else {
                  uint64_t v27 = 0;
                }
                uint64_t v28 = &v27[20 * v24];
                long long v29 = *v22;
                *((_DWORD *)v28 + 4) = *((_DWORD *)v19 + 12);
                *(_OWORD *)uint64_t v28 = v29;
                int v31 = *(char **)buf;
                uint64_t v30 = *(char **)&buf[8];
                uint64_t v32 = v28;
                if (*(void *)&buf[8] != *(void *)buf)
                {
                  do
                  {
                    long long v33 = *(_OWORD *)(v30 - 20);
                    *((_DWORD *)v32 - 1) = *((_DWORD *)v30 - 1);
                    *(_OWORD *)(v32 - 20) = v33;
                    v32 -= 20;
                    v30 -= 20;
                  }
                  while (v30 != v31);
                  uint64_t v30 = *(char **)buf;
                }
                unint64_t v21 = v28 + 20;
                *(void *)buf = v32;
                *(void *)&uint8_t buf[8] = v28 + 20;
                *(void *)&uint8_t buf[16] = &v27[20 * v26];
                if (v30) {
                  operator delete(v30);
                }
              }
              else
              {
                long long v23 = *v22;
                *((_DWORD *)v21 + 4) = *((_DWORD *)v19 + 12);
                *(_OWORD *)unint64_t v21 = v23;
                v21 += 20;
              }
              *(void *)&uint8_t buf[8] = v21;
              char v34 = (void *)v19[1];
              if (v34)
              {
                do
                {
                  uint64_t v35 = v34;
                  char v34 = (void *)*v34;
                }
                while (v34);
              }
              else
              {
                do
                {
                  uint64_t v35 = (void *)v19[2];
                  BOOL v49 = *v35 == (void)v19;
                  id v19 = v35;
                }
                while (!v49);
              }
              id v19 = v35;
            }
            while (v35 != v20);
          }
          id v14 = v61;
          a5 = v60;
          a4 = v58;
          a6 = v59;
          if ((sub_10002EED4(a1, (uint64_t *)buf) & 1) == 0)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
              sub_100767F6C();
            }
            goto LABEL_86;
          }
          uint64_t v36 = sub_10004A68C(*(void *)(a3 + 8));
          char v37 = sub_10002F510(a1, v36);
          uint64_t v38 = *(void *)(a3 + 8);
          if ((v37 & 1) == 0)
          {
            if ((*(unsigned char *)(v38 + 168) & 4) == 0)
            {
              if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
                sub_100767F04();
              }
              goto LABEL_86;
            }
            log = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
            {
              *(_DWORD *)__dst = 138412290;
              *(void *)&__dst[4] = v13;
              _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_INFO, "Session can access device %@ with iBeacon", __dst, 0xCu);
              uint64_t v38 = *(void *)(a3 + 8);
            }
          }
          char v39 = sub_10002F184(*(unsigned __int8 **)(v38 + 64), *(unsigned __int8 **)(v38 + 72), &xmmword_1007BA708);
          uint64_t v40 = *(void *)(a3 + 8);
          if (!*(unsigned char *)(v40 + 12) || *(unsigned __int8 **)(v38 + 72) == v39) {
            goto LABEL_87;
          }
          if (*(char *)(v40 + 39) < 0)
          {
            sub_10003B098(__dst, *(void **)(v40 + 16), *(void *)(v40 + 24));
          }
          else
          {
            *(_OWORD *)__dst = *(_OWORD *)(v40 + 16);
            uint64_t v69 = *(void *)(v40 + 32);
          }
          if (sub_1004362CC(__dst, "Powerbeats HR"))
          {
            BOOL v55 = 1;
          }
          else
          {
            uint64_t v56 = *(void *)(a3 + 8);
            if (*(char *)(v56 + 39) < 0)
            {
              sub_10003B098(__p, *(void **)(v56 + 16), *(void *)(v56 + 24));
            }
            else
            {
              *(_OWORD *)__p = *(_OWORD *)(v56 + 16);
              uint64_t v67 = *(void *)(v56 + 32);
            }
            BOOL v55 = sub_1004362CC(__p, "Generic Tracker");
            if (SHIBYTE(v67) < 0) {
              operator delete(__p[0]);
            }
          }
          if (SHIBYTE(v69) < 0) {
            operator delete(*(void **)__dst);
          }
          if (!v55)
          {
LABEL_87:
            char v57 = 1;
LABEL_88:
            if (*(void *)buf)
            {
              *(void *)&uint8_t buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
            if ((v57 & 1) == 0) {
              goto LABEL_63;
            }
LABEL_41:
            if (v15)
            {
              BOOL v41 = v15[24] != 0;
              int v42 = *((_DWORD *)v15 - 16);
            }
            else
            {
              BOOL v41 = 0;
              int v42 = 0;
            }
            xpc_object_t v46 = sub_10002FB38(v13, v41, v42);
            if (v16 == 2)
            {
              int v47 = 1;
            }
            else
            {
              int v48 = HIWORD(*(_DWORD *)(a1 + 384));
              BOOL v49 = v48 == 1 || v48 == 10;
              int v47 = v49;
            }
            xpc_object_t v50 = sub_100043C04(v13, *(void **)(a1 + 88), a3, (uint64_t)a4, a6, v47, v63, SHIDWORD(v65), v65, v64, v16 > 0);
            xpc_dictionary_set_value(v46, "kCBMsgArgAdvertisementData", v50);
            xpc_release(v50);
            uint64_t v52 = *(void *)(a3 + 8);
            uint64_t v51 = a3 + 8;
            xpc_dictionary_set_int64(v46, "kCBMsgArgRssi", *(char *)(v52 + 216));
            xpc_dictionary_set_int64(v46, "kCBMsgArgAdvertisingMoreAvailable", a5);
            int v53 = qword_100A19F00;
            if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEBUG)) {
              sub_100767E70(a5, v51, v53);
            }
            xpc_dictionary_set_int64(v46, "kCBMsgArgAdvertisingIsFromADVBuff", *(unsigned __int8 *)(*(void *)v51 + 304));
            if (v16 >= 1)
            {
              xpc_dictionary_set_uint64(v46, "kCBScanOptionFilterIdentifier", (uint64_t)[v14 longLongValue]);
              xpc_dictionary_set_string(v46, "kCBScanOptionFilterIdentifierString", (const char *)[v14 UTF8String]);
            }
            uint64_t v54 = sub_100031230(v46);
            sub_10002F224((void *)a1, 84, v54);

            xpc_release(v46);
            goto LABEL_63;
          }
LABEL_86:
          char v57 = 0;
          goto LABEL_88;
        }
        if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
          sub_100767FD4();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
      {
        sub_10076803C();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      sub_1007680A4();
    }
  }
  else
  {
    id v43 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
    {
      uint64_t v44 = *(void *)(a1 + 88);
      uint64_t v45 = *(void *)(a1 + 104);
      *(_DWORD *)buf = 138412802;
      *(void *)&uint8_t buf[4] = v44;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = v45;
      *(_WORD *)&buf[22] = 2112;
      id v71 = v13;
      _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "App %@ for user %@ is not allowed to access %@", buf, 0x20u);
    }
  }
LABEL_63:
}

void sub_10002EE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a28) {
    operator delete(a28);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_10002EED4(uint64_t a1, uint64_t *a2)
{
  if ((*(unsigned char *)(a1 + 506) || _os_feature_enabled_impl() && *(void *)(a1 + 496))
    && !_os_feature_enabled_impl())
  {
    return 1;
  }
  if (!*(void *)(a1 + 224)) {
    return 1;
  }
  uint64_t v6 = a2;
  uint64_t v4 = *a2;
  uint64_t v5 = v6[1];
  if (v5 == v4) {
    return 1;
  }
  do
  {
    uint64_t result = sub_10043A78C(a1, v4);
    if (result) {
      break;
    }
    v4 += 20;
  }
  while (v4 != v5);
  return result;
}

id sub_10002EF7C(void *a1)
{
  size_t count = xpc_dictionary_get_count(a1);
  uint64_t v3 = 8 * count;
  __chkstk_darwin();
  uint64_t v4 = (char *)applier - ((8 * count + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v4, 8 * count);
  __chkstk_darwin();
  bzero(v4, 8 * count);
  v10[0] = 0;
  v10[1] = v10;
  void v10[2] = 0x2020000000;
  v10[3] = 0;
  applier[0] = _NSConcreteStackBlock;
  applier[1] = 3221225472;
  applier[2] = sub_10002DFB0;
  applier[3] = &unk_1009B2708;
  applier[4] = v10;
  applier[5] = v4;
  applier[6] = v4;
  xpc_dictionary_apply(a1, applier);
  id v5 = [objc_alloc((Class)NSDictionary) initWithObjects:v4 forKeys:v4 count:count];
  _Block_object_dispose(v10, 8);
  if (count)
  {
    uint64_t v6 = 8 * count;
    do
    {

      v6 -= 8;
    }
    while (v6);
    uint64_t v7 = v4 - 8;
    do
    {

      v3 -= 8;
    }
    while (v3);
  }

  return v5;
}

void sub_10002F134(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v5 - 88), 8);
  if (v3)
  {
    uint64_t v7 = v4 - 8;
    uint64_t v8 = v1;
    do
    {

      v8 -= 8;
    }
    while (v8);
    uint64_t v9 = v2 - 8;
    do
    {

      v1 -= 8;
    }
    while (v1);
  }
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_10002F184(unsigned __int8 *a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    while (1)
    {
      long long v7 = *a3;
      int v8 = *((_DWORD *)a3 + 4);
      if (sub_10022A44C(v3, (unsigned __int8 *)&v7)) {
        break;
      }
      v3 += 20;
      if (v3 == a2) {
        return a2;
      }
    }
  }
  return v3;
}

uint64_t sub_10002F224(void *a1, int64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = (*(uint64_t (**)(void *))(*a1 + 16))(a1);
  uint64_t v7 = a1[15];
  if (v6 == 3)
  {
    if (v7)
    {
      if (!sub_10002F4AC((uint64_t)a1))
      {
        sub_100017388(v7, a2, v5);
        goto LABEL_17;
      }
LABEL_7:
      int v8 = [[BTQueuedMessage alloc] initWithMsg:a2 arguments:v5];
      sub_10042EA24((uint64_t)a1, v8);
      sub_10042EB6C(a1);

LABEL_17:
      uint64_t v13 = 1;
      goto LABEL_18;
    }
  }
  else if (v7)
  {
    if (!sub_10002F4AC((uint64_t)a1))
    {
      sub_100017388(v7 - 144, a2, v5);
      goto LABEL_17;
    }
    goto LABEL_7;
  }
  uint64_t v9 = [[BTQueuedMessage alloc] initWithMsg:a2 arguments:v5];
  sub_10042EA24((uint64_t)a1, v9);
  id v10 = sub_10002F4AC((uint64_t)a1);
  if (v10)
  {
    uint64_t v11 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = a1[11];
      int v15 = 134218242;
      id v16 = v10;
      __int16 v17 = 2114;
      uint64_t v18 = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "(CBSR) Queued message available: %lu. Try and ressurrectApp: %{public}@", (uint8_t *)&v15, 0x16u);
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009AE0C0);
    }
    sub_100303C58((uint64_t)off_1009F8780, (void *)a1[11]);
  }

  uint64_t v13 = 0;
LABEL_18:

  return v13;
}

void sub_10002F460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10002F4AC(uint64_t a1)
{
  id v2 = *(id *)(a1 + 112);
  objc_sync_enter(v2);
  id v3 = [*(id *)(a1 + 112) count];
  objc_sync_exit(v2);

  return v3;
}

void sub_10002F4F8(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);

  _Unwind_Resume(a1);
}

uint64_t sub_10002F510(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a1 + 506) || _os_feature_enabled_impl() && *(void *)(a1 + 496))
    && !_os_feature_enabled_impl()
    || !*(void *)(a1 + 232))
  {
    return 1;
  }
  uint64_t v4 = +[NSNumber numberWithUnsignedShort:a2];
  if (a2) {
    uint64_t v5 = (uint64_t)[*(id *)(a1 + 232) containsObject:v4];
  }
  else {
    uint64_t v5 = 1;
  }
  int v6 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    uint64_t v8 = *(void *)(a1 + 232);
    v9[0] = 67109634;
    v9[1] = a2;
    __int16 v10 = 2112;
    uint64_t v11 = v8;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "canSessionScanForMFGRData %d %@ there:%d", (uint8_t *)v9, 0x18u);
  }

  return v5;
}

void sub_10002F678(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10002F690(uint64_t a1, void *a2)
{
  id v3 = a2;
  if ((_os_feature_enabled_impl() & 1) != 0 && (uint64_t v4 = *(void **)(a1 + 216)) != 0)
  {
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v5 = v4;
    uint64_t v6 = (uint64_t)[v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v6)
    {
      uint64_t v7 = *(void *)v11;
      while (2)
      {
        for (uint64_t i = 0; i != v6; ++i)
        {
          if (*(void *)v11 != v7) {
            objc_enumerationMutation(v5);
          }
          if (objc_msgSend(*(id *)(*((void *)&v10 + 1) + 8 * i), "isEqual:", v3, (void)v10))
          {
            uint64_t v6 = 1;
            goto LABEL_14;
          }
        }
        uint64_t v6 = (uint64_t)[v5 countByEnumeratingWithState:&v10 objects:v14 count:16];
        if (v6) {
          continue;
        }
        break;
      }
    }
LABEL_14:
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_10002F7C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10002F7F0(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 88);
  id v10 = sub_100030398(a1, v7);
  if (v10)
  {
    uint64_t v11 = sub_10002F8C0((uint64_t)v10, v8, v9);
  }
  else
  {
    sub_10003AFE8((uint64_t)v13);
    uint64_t v11 = 1;
  }
  sub_10003AFB4((uint64_t)v13);

  return v11;
}

void sub_10002F898(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10002F8C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 64) beaconIdentifier];

  if (v7)
  {
    id v8 = [*(id *)(a1 + 64) allowedSessions];

    if (v8)
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      id v9 = [*(id *)(a1 + 64) allowedSessions];
      id v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
      if (v10)
      {
        uint64_t v11 = *(void *)v19;
        do
        {
          for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v19 != v11) {
              objc_enumerationMutation(v9);
            }
            long long v13 = *(void **)(*((void *)&v18 + 1) + 8 * i);
            id v14 = [v13 bundleId];
            if ([v5 isEqual:v14])
            {
              int v15 = [v13 userIdentifier];
              unsigned __int8 v16 = [v6 isEqual:v15];

              if (v16) {
                goto LABEL_14;
              }
            }
            else
            {
            }
          }
          id v10 = [v9 countByEnumeratingWithState:&v18 objects:v22 count:16];
        }
        while (v10);
      }
LABEL_14:
    }
  }

  return 1;
}

void sub_10002FA64(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10002FAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!*(void *)(a2 + 120)) {
    return 0;
  }
  uint64_t result = 0;
  if (a3)
  {
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v9 = sub_100052E70();
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v9 + 40))(v9, a3, a4, a5);
      return 1;
    }
  }
  return result;
}

xpc_object_t sub_10002FB38(void *a1, int a2, int a3)
{
  id v5 = a1;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  if (!v5) {
    goto LABEL_69;
  }
  id v47 = v5;
  id v7 = v5;
  *(void *)uuid = 0;
  uint64_t v56 = 0;
  [v7 getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(v6, "kCBMsgArgDeviceUUID", uuid);

  *(void *)uuid = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  sub_10003093C((uint64_t)off_1009F7ED8, v7, (uint64_t)uuid);
  if (SHIBYTE(v57) < 0)
  {
    if (!v56) {
      goto LABEL_10;
    }
    id v8 = *(unsigned __int8 **)uuid;
  }
  else
  {
    if (!HIBYTE(v57)) {
      goto LABEL_10;
    }
    id v8 = uuid;
  }
  xpc_dictionary_set_string(v6, "kCBMsgArgName", (const char *)v8);
LABEL_10:
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
  }
  uint64_t v9 = off_1009F7ED8;
  sub_10004191C(v52, "ANCSAuthorized");
  char v10 = sub_100030A04((uint64_t)v9, v7, (uint64_t)v52);
  xpc_dictionary_set_BOOL(v6, "kCBMsgArgAncsAuthorization", v10);
  if ((v53 & 0x80000000) == 0)
  {
    if (!a2) {
      goto LABEL_20;
    }
LABEL_16:
    unsigned int v11 = sub_1005A46AC(v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgPairingState", v11);
    if (qword_1009FB240 != -1) {
      dispatch_once(&qword_1009FB240, &stru_1009B7C08);
    }
    if (sub_1004C063C(qword_1009FB238, v7)) {
      xpc_dictionary_set_BOOL(v6, "kCBMsgArgConnectionState", 1);
    }
    goto LABEL_20;
  }
  operator delete(v52[0]);
  if (a2) {
    goto LABEL_16;
  }
LABEL_20:
  if (a3 >= 1)
  {
    if (qword_1009FB230 != -1) {
      dispatch_once(&qword_1009FB230, &stru_1009B7BC8);
    }
    unsigned int v12 = sub_100031120(qword_1009FB228, v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgATTMTU", v12);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    long long v13 = off_1009F7EB8;
    sub_1000305AC(bytes, v7);
    char v14 = sub_1000306F0((uint64_t)v13, bytes);
    xpc_dictionary_set_BOOL(v6, "kCBMsgArgIsLinkEncrypted", v14);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    int v15 = off_1009F7EB8;
    sub_1000305AC(bytes, v7);
    if (sub_1000307A4((uint64_t)v15, bytes)) {
      int64_t v16 = 2;
    }
    else {
      int64_t v16 = 1;
    }
    xpc_dictionary_set_int64(v6, "kCBMsgArgConnectionTransport", v16);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009B7AC8);
    }
    __int16 v17 = off_1009F7EB8;
    sub_1000305AC(bytes, v7);
    unsigned int v18 = sub_100030818((uint64_t)v17, bytes);
    xpc_dictionary_set_int64(v6, "kCBMsgArgConnectionRole", v18);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    BOOL v19 = sub_100030D38((uint64_t)off_1009F7ED8, v7);
    xpc_dictionary_set_int64(v6, "kCBMsgArgVisibleInSettings", !v19);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
    }
    long long v20 = sub_100030C6C((uint64_t)off_1009F7ED8, v7);
    if (v20)
    {
      uint64_t v44 = v20;
      id v21 = v20;
      *(void *)bytes = 0;
      uint64_t v59 = 0;
      id v45 = v21;
      [v21 getUUIDBytes:bytes];
      xpc_dictionary_set_uuid(v6, "kCBMsgArgFindMyBeaconID", bytes);

      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      BOOL v22 = sub_1006C6E78((uint64_t)off_1009F7ED8, v7);
      id v46 = [v22 mutableCopy];

      if (v46)
      {
        id v23 = v46;
        [v46 count];
        v43[1] = v43;
        __chkstk_darwin();
        unint64_t v25 = (char *)v43 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
        bzero(v25, v24);
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        id v26 = v23;
        size_t v27 = (size_t)[v26 countByEnumeratingWithState:&v48 objects:v54 count:16];
        if (v27)
        {
          uint64_t v28 = 0;
          uint64_t v29 = *(void *)v49;
          do
          {
            uint64_t v30 = 0;
            uint64_t v31 = v28;
            uint64_t v32 = &v25[8 * v28];
            do
            {
              if (*(void *)v49 != v29) {
                objc_enumerationMutation(v26);
              }
              long long v33 = *(void **)(*((void *)&v48 + 1) + 8 * v30);
              *(void *)bytes = 0;
              uint64_t v59 = 0;
              [v33 getUUIDBytes:bytes];
              *(void *)&v32[8 * v30++] = xpc_data_create(bytes, 0x10uLL);
            }
            while (v27 != v30);
            size_t v27 = (size_t)[v26 countByEnumeratingWithState:&v48 objects:v54 count:16];
            uint64_t v28 = v31 + v30;
          }
          while (v27);
          size_t v27 = v31 + v30;
        }

        xpc_object_t v34 = xpc_array_create((xpc_object_t *)v25, v27);
        while (v27)
          xpc_release(*(xpc_object_t *)&v25[8 * v27-- - 8]);
        xpc_dictionary_set_value(v6, "kCBMsgArgFindMyGroupMembers", v34);
        xpc_release(v34);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      uint64_t v35 = sub_1006C6EEC((uint64_t)off_1009F7ED8, v7);
      uint64_t v36 = v35;
      if (v35) {
        xpc_dictionary_set_string(v6, "kCBMsgArgFindMySerialNumberString", (const char *)[v35 UTF8String]);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      char v37 = sub_1006C68D4((uint64_t)off_1009F7ED8, v7);
      uint64_t v38 = v37;
      if (v37)
      {
        id v39 = v37;
        *(void *)bytes = 0;
        uint64_t v59 = 0;
        [v39 getUUIDBytes:bytes];
        xpc_dictionary_set_uuid(v6, "kCBMsgArgFindMyUserID", bytes);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      unsigned int v40 = sub_1006C6FB8((uint64_t)off_1009F7ED8, v7);
      xpc_dictionary_set_int64(v6, "kCBMsgArgFindMyPartNumber", v40);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009B7A48);
      }
      unsigned int v41 = sub_1006C7070((uint64_t)off_1009F7ED8, v7);
      xpc_dictionary_set_int64(v6, "kCBMsgArgFindMyManaged", v41);

      long long v20 = v44;
    }
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(*(void **)uuid);
  }
  id v5 = v47;
LABEL_69:

  return v6;
}

void sub_1000302A0(_Unwind_Exception *a1)
{
  if (*(char *)(v3 - 113) < 0) {
    operator delete(*(void **)(v3 - 136));
  }

  _Unwind_Resume(a1);
}

id sub_100030398(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  if (!v3)
  {
    uint64_t v4 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT)) {
      sub_100792D4C(v4);
    }
  }
  id v5 = [*(id *)(a1 + 168) objectForKey:v3];
  if (v5)
  {
    sub_1000305AC(buf, v3);
    sub_1000305B0(a1, buf);
  }
  else
  {
    sub_10003AFE8((uint64_t)v9);
    id v5 = (id)sub_100361428(*(void *)(a1 + 248), v3);
    if (v5)
    {
      xpc_object_t v6 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_INFO))
      {
        id v7 = sub_1006AD3F0();
        *(_DWORD *)buf = 138543618;
        id v11 = v3;
        __int16 v12 = 2114;
        long long v13 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Device \"%{public}@\" was on disk with address \"%{public}@\"", buf, 0x16u);
      }
      sub_10003AF00((uint64_t)v9);
      sub_1006BF8C0(a1, (uint64_t)v5);
    }
  }
  sub_10003AFB4((uint64_t)v9);

  return v5;
}

void sub_10003051C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100030550(unsigned __int8 *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (v3) {
    [v3 getUUIDBytes:a1];
  }
  else {
    uuid_clear(a1);
  }

  return a1;
}

void sub_10003059C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000305B0(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v4 = a1 + 200;
  for (uint64_t i = *(unsigned __int8 **)(a1 + 208); i != (unsigned __int8 *)v4; uint64_t i = (unsigned __int8 *)*((void *)i + 1))
  {
    if (!uuid_compare(i + 16, uu2))
    {
      if (i != (unsigned __int8 *)v4) {
        goto LABEL_8;
      }
      break;
    }
  }
  xpc_object_t v6 = qword_100A19E78;
  uint64_t i = (unsigned __int8 *)v4;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
  {
    sub_100793790(v6);
    uint64_t i = (unsigned __int8 *)v4;
  }
LABEL_8:
  uint64_t v7 = *(void *)i;
  *(void *)(v7 + 8) = *((void *)i + 1);
  **((void **)i + 1) = v7;
  --*(void *)(a1 + 216);
  operator delete(i);
  uint64_t result = sub_100030690(v4, 0, 0, uu2);
  uint64_t v9 = *(void **)(a1 + 208);
  uint64_t v10 = *(void *)(a1 + 216);
  void *result = v4;
  result[1] = v9;
  *uint64_t v9 = result;
  *(void *)(a1 + 208) = result;
  *(void *)(a1 + 216) = v10 + 1;
  return result;
}

void *sub_100030690(uint64_t a1, uint64_t a2, uint64_t a3, const unsigned __int8 *a4)
{
  uint64_t v7 = operator new(0x20uLL);
  *(void *)uint64_t v7 = a2;
  *((void *)v7 + 1) = a3;
  uuid_copy((unsigned __int8 *)v7 + 16, a4);
  return v7;
}

void sub_1000306DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1000306F0(uint64_t a1, unsigned __int8 *a2)
{
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 120);
  uint64_t v4 = sub_1000308C0(a1 + 384, a2);
  if (a1 + 392 == v4)
  {
    uint64_t v5 = 0;
  }
  else
  {
    char v7 = 0;
    sub_10001B8E0(&v7);
    uint64_t v5 = sub_100234878(*(void *)(v4 + 48));
    sub_10001B8AC(&v7);
  }
  sub_10003AFB4((uint64_t)v8);
  return v5;
}

void sub_10003077C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14)
{
}

BOOL sub_1000307A4(uint64_t a1, unsigned __int8 *a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 120);
  BOOL v4 = a1 + 392 != sub_1000308C0(a1 + 384, a2);
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_100030804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100030818(uint64_t a1, unsigned __int8 *a2)
{
  if (a1 + 392 == sub_1000308C0(a1 + 384, a2)) {
    return 255;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BE118);
  }
  id v3 = off_1009F7ED8;
  BOOL v4 = sub_100031234(a2);
  BOOL v5 = !sub_1006C1BCC((uint64_t)v3, v4);

  return v5;
}

void sub_1000308B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000308C0(uint64_t a1, unsigned __int8 *uu2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 8;
  do
  {
    int v6 = uuid_compare((const unsigned __int8 *)(v3 + 32), uu2);
    char v7 = (uint64_t *)(v3 + 8);
    if (v6 >= 0)
    {
      char v7 = (uint64_t *)v3;
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v7;
  }
  while (*v7);
  if (v5 == v2 || uuid_compare(uu2, (const unsigned __int8 *)(v5 + 32)) < 0) {
    return v2;
  }
  return v5;
}

void sub_10003093C(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  v8[0] = 0;
  v8[1] = 0;
  sub_10003AED0((uint64_t)v8, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  if (v6)
  {
    if (*(char *)(v6 + 127) < 0)
    {
      sub_10003B098((unsigned char *)a3, *(void **)(v6 + 104), *(void *)(v6 + 112));
    }
    else
    {
      long long v7 = *(_OWORD *)(v6 + 104);
      *(void *)(a3 + 16) = *(void *)(v6 + 120);
      *(_OWORD *)a3 = v7;
    }
  }
  else
  {
    sub_10004191C((void *)a3, "");
  }
  sub_10003AFB4((uint64_t)v8);
}

void sub_1000309E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

int64_t sub_100030A04(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 88);
  int64_t v6 = (int64_t)sub_100030398(a1, v5);
  if (v6)
  {
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10003B098(__p, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a3;
      uint64_t v13 = *(void *)(a3 + 16);
    }
    int64_t v6 = v6 + 184 != sub_10003156C(v6 + 176, (const void **)__p);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10003AFE8((uint64_t)v14);
  uint64_t v8 = sub_100030B78(v7, v5);
  if (v8)
  {
    unsigned __int8 v11 = 0;
    uint64_t v9 = sub_1003708B0();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 *))(*(void *)v9 + 784))(v9, v8, a3, &v11))
    {
      int64_t v6 = v6;
    }
    else
    {
      int64_t v6 = (v11 | v6) != 0;
    }
  }
  sub_10003AFB4((uint64_t)v14);

  return v6;
}

void sub_100030B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a18);

  _Unwind_Resume(a1);
}

uint64_t sub_100030B78(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009BEBC0);
  }
  uint64_t v3 = sub_100030DCC((uint64_t)off_1009F7ED8, v2, 0);
  if (v3)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009BECC0);
    }
    uint64_t v4 = sub_100030F10((uint64_t)off_1009F7EF8, v3, 0);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100793460();
    }
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_100030C5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100030C6C(uint64_t a1, void *a2)
{
  id v3 = a2;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 88);
  uint64_t v4 = (id *)[*(id *)(a1 + 168) objectForKey:v3];
  if (v4 && (id v5 = v4[8]) != 0)
  {
    int64_t v6 = v5;
    uint64_t v7 = [v5 beaconIdentifier];
  }
  else
  {
    uint64_t v7 = 0;
  }
  sub_10003AFB4((uint64_t)v9);

  return v7;
}

void sub_100030D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_100030D38(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 88);
  uint64_t v4 = sub_100030398(a1, v3);
  if (v4) {
    BOOL v5 = v4[238] != 0;
  }
  else {
    BOOL v5 = 0;
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_100030DAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100030DCC(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  v12[0] = 0;
  v12[1] = 0;
  sub_10003AED0((uint64_t)v12, a1 + 88);
  uint64_t v6 = sub_100030398(a1, v5);
  uint64_t v7 = v6;
  if (v6)
  {
    if (!*(void *)(v6 + 16))
    {
      uint64_t v8 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
      {
        uint64_t v9 = sub_1006AD3F0();
        sub_100793290(v9, (uint64_t)v13, v8);
      }
    }
    if (a3 || (uint64_t v10 = *(void *)(v7 + 24)) == 0) {
      uint64_t v10 = *(void *)(v7 + 16);
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
      sub_100793228();
    }
    uint64_t v10 = 0;
  }
  sub_10003AFB4((uint64_t)v12);

  return v10;
}

void sub_100030EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10003AFB4((uint64_t)&a9);

  _Unwind_Resume(a1);
}

uint64_t sub_100030F10(uint64_t a1, uint64_t a2, int a3)
{
  if (!a2)
  {
    uint64_t v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_10076E84C(v6);
    }
  }
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 168);
  for (uint64_t i = *(uint64_t **)(a1 + 144); i != *(uint64_t **)(a1 + 152); ++i)
  {
    uint64_t v8 = *i;
    if ((((unint64_t)*(unsigned __int8 *)(*i + 128) << 40) | ((unint64_t)*(unsigned __int8 *)(*i + 129) << 32) | ((unint64_t)*(unsigned __int8 *)(*i + 130) << 24) | ((unint64_t)*(unsigned __int8 *)(*i + 131) << 16) | ((unint64_t)*(unsigned __int8 *)(*i + 132) << 8) | *(unsigned __int8 *)(*i + 133)) == a2) {
      goto LABEL_11;
    }
  }
  if (a3) {
    operator new();
  }
  uint64_t v8 = 0;
LABEL_11:
  sub_10003AFB4((uint64_t)v10);
  return v8;
}

void sub_1000310EC()
{
}

uint64_t sub_100031120(uint64_t a1, void *a2)
{
  id v3 = a2;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, a1 + 40);
  sub_1000305AC(uu2, v3);
  uint64_t v4 = sub_1000308C0(a1 + 536, uu2);
  if (a1 + 544 == v4)
  {
    uint64_t v5 = 23;
  }
  else
  {
    uu2[0] = 0;
    sub_10001B8E0(uu2);
    uint64_t v5 = sub_100212578(*(void *)(v4 + 48));
    sub_10001B8AC(uu2);
  }
  sub_10003AFB4((uint64_t)v7);

  return v5;
}

void sub_1000311F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  sub_10001B8AC(va1);
  sub_10003AFB4((uint64_t)va);

  _Unwind_Resume(a1);
}

id sub_100031234(const unsigned __int8 *a1)
{
  if (uuid_is_null(a1)) {
    id v2 = 0;
  }
  else {
    id v2 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:a1];
  }

  return v2;
}

void sub_100031288(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  unint64_t v16 = a2;
  id v6 = a3;
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 8);
  uint64_t v8 = +[BTAppInteraction instance];
  [v8 registerApplication:v6 pid:a4];

  __p[0] = 0;
  __p[1] = 0;
  uint64_t v14 = 0;
  id v9 = v6;
  sub_10004191C(__p, (char *)[v9 UTF8String]);
  uint64_t v10 = (uint64_t **)(a1 + 96);
  __int16 v17 = __p;
  unsigned __int8 v11 = sub_100031414((uint64_t **)(a1 + 96), (const void **)__p, (uint64_t)&unk_1007BE9D0, (long long **)&v17);
  sub_100051620((uint64_t **)v11 + 7, &v16, (uint64_t *)&v16);
  __int16 v17 = __p;
  __int16 v12 = sub_100031414(v10, (const void **)__p, (uint64_t)&unk_1007BE9D0, (long long **)&v17);
  if (v12 != v11) {
    sub_1002E6AB8((uint64_t **)v12 + 7, (void *)v11[7], v11 + 8);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  sub_10003AFB4((uint64_t)v15);
}

void sub_1000313CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  sub_10003AFB4((uint64_t)&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_100031414(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  id v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_100051920((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_100051C6C((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_1000314CC(uint64_t a1, void *a2, const void **a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint64_t v7 = a1 + 16;
    do
    {
      while (1)
      {
        uint64_t v8 = (void *)v4;
        id v9 = (const void **)(v4 + 32);
        if (!sub_1000315FC(v7, a3, (const void **)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v8;
        uint64_t v5 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (!sub_1000315FC(v7, v9, a3)) {
        break;
      }
      uint64_t v5 = v8 + 1;
      uint64_t v4 = v8[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v8 = (void *)(a1 + 8);
  }
LABEL_10:
  *a2 = v8;
  return v5;
}

uint64_t sub_10003156C(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3) {
    return v2;
  }
  uint64_t v5 = a1 + 16;
  uint64_t v6 = a1 + 8;
  do
  {
    BOOL v7 = sub_1000315FC(v5, (const void **)(v3 + 32), a2);
    uint64_t v8 = (uint64_t *)(v3 + 8);
    if (!v7)
    {
      uint64_t v8 = (uint64_t *)v3;
      uint64_t v6 = v3;
    }
    uint64_t v3 = *v8;
  }
  while (*v8);
  if (v6 == v2 || sub_1000315FC(v5, a2, (const void **)(v6 + 32))) {
    return v2;
  }
  return v6;
}

BOOL sub_1000315FC(uint64_t a1, const void **a2, const void **a3)
{
  int v3 = *((char *)a3 + 23);
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v5 = (size_t)a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  if (v3 >= 0) {
    size_t v7 = *((unsigned __int8 *)a3 + 23);
  }
  else {
    size_t v7 = (size_t)a3[1];
  }
  if (v3 >= 0) {
    uint64_t v8 = a3;
  }
  else {
    uint64_t v8 = *a3;
  }
  if (v7 >= v5) {
    size_t v9 = v5;
  }
  else {
    size_t v9 = v7;
  }
  int v10 = memcmp(v6, v8, v9);
  if (v10) {
    return v10 < 0;
  }
  else {
    return v5 < v7;
  }
}

uint64_t sub_100031668(uint64_t a1, char a2)
{
  long long v154 = *(_OWORD *)&off_1009BF548;
  int v155 = sub_1006E66A0;
  memset(v153, 0, 26);
  int v4 = *(_DWORD *)(a1 + 1960);
  size_t v5 = (os_log_t *)&qword_100A19E90;
  if ((v4 & 0xFFFFFFFD) == 1) {
    goto LABEL_4;
  }
  uint64_t v6 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_FAULT))
  {
    *(_DWORD *)buf = 136446210;
    *(void *)&uint8_t buf[4] = "isInSettledState()";
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", buf, 0xCu);
    if (*(_DWORD *)(a1 + 1960)) {
      goto LABEL_4;
    }
    return 105;
  }
  if (!v4) {
    return 105;
  }
LABEL_4:
  if (*(unsigned char *)(a1 + 4296))
  {
    size_t v7 = qword_100A19E90;
    BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v8) {
      return result;
    }
    *(_WORD *)buf = 0;
    int v10 = "Configuring controller, will try again later";
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 4383))
  {
    size_t v7 = qword_100A19E90;
    BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    *(_WORD *)buf = 0;
    int v10 = "Configuring controller scan RX Thresholds, will try again later";
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
    return 0;
  }
  int v12 = sub_1000068A0(a1);
  if (v12) {
    BOOL v13 = *(_DWORD *)(a1 + 1964) == 0;
  }
  else {
    BOOL v13 = 0;
  }
  BOOL v14 = sub_100054794(a1);
  uint64_t v15 = *(int *)(a1 + 1964);
  if (v15)
  {
    BOOL v13 = sub_1006EB3A4(a1);
    BOOL v16 = v13;
  }
  else
  {
    BOOL v16 = 0;
  }
  __int16 v17 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    if (v15 > 3) {
      unsigned int v18 = "UNKNOWN";
    }
    else {
      unsigned int v18 = off_1009BF9A8[v15];
    }
    int v19 = *(unsigned __int8 *)(a1 + 1840);
    *(_DWORD *)buf = 67110402;
    *(_DWORD *)&uint8_t buf[4] = v13;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v12;
    *(_WORD *)&buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = v16;
    *(_WORD *)&buf[20] = 2082;
    *(void *)&buf[22] = v18;
    *(_WORD *)&buf[30] = 1024;
    *(_DWORD *)&unsigned char buf[32] = v14;
    *(_WORD *)&buf[36] = 1024;
    *(_DWORD *)&buf[38] = v19;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "ShouldScan=%d AnyValidScanRequests=%d anyValidScanRequestInPaused=%d fObserverState=%{public}s ClientScanPowerAssertRequired=%d fScanFiltersNeedUpdagint=%d", buf, 0x2Au);
  }
  if (v14 && v13) {
    sub_1006D5068(a1);
  }
  else {
    sub_1000557F8(a1);
  }
  sub_1000102A8(a1);
  sub_100014900((unsigned __int8 *)a1);
  sub_10004C954(a1);
  sub_10000FE84((unsigned __int8 *)a1);
  if (!v13)
  {
    if (*(_DWORD *)(a1 + 1960) == 3)
    {
      uint64_t v29 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Stopping scan as there are no remaining scan agents permitted to scan", buf, 2u);
      }
      LOBYTE(__str) = 0;
      sub_10001B8E0(&__str);
      if (sub_100226760())
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100795758();
        }
      }
      else
      {
        *(_DWORD *)(a1 + 1960) = 4;
        dispatch_time_t v53 = dispatch_time(0, 3000000000);
        *(void *)(a1 + 2024) = v53;
        uint64_t v54 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v53;
          _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_INFO, "Setting the zone lost timeout to %lld", buf, 0xCu);
        }
        double Current = CFAbsoluteTimeGetCurrent();
        double v56 = 0.0;
        if (Current > 0.0)
        {
          double v57 = *(double *)(a1 + 3208);
          BOOL v58 = Current <= v57 || v57 <= 0.0;
          double v59 = Current - v57;
          if (v58) {
            double v56 = 0.0;
          }
          else {
            double v56 = v59;
          }
        }
        unsigned int v60 = *(_DWORD *)(a1 + 3220);
        int v61 = *(unsigned __int8 *)(a1 + 3224);
        uint64_t v62 = *(unsigned int *)(a1 + 3216);
        uint64_t v63 = a1 + 48 * v60 + 24 * *(unsigned __int8 *)(a1 + 3224) + 8 * v62;
        double v64 = v56 + *(double *)(v63 + 2800);
        *(double *)(v63 + 2800) = v64;
        uint64_t v65 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
        {
          if (v60 > 6) {
            uint64_t v130 = "Unknown Duty Cycle Type";
          }
          else {
            uint64_t v130 = off_1009BF930[v60];
          }
          uint64_t v131 = "active";
          if (!v61) {
            uint64_t v131 = "passive";
          }
          if (v62 > 2) {
            uint64_t v132 = "Unknown Scan Agent Type";
          }
          else {
            uint64_t v132 = off_1009BF968[(int)v62];
          }
          uint64_t v133 = *(void *)(a1 + 3208);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = v130;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v131;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&uint8_t buf[24] = v132;
          *(_WORD *)&unsigned char buf[32] = 2048;
          *(double *)&buf[34] = v56;
          *(_WORD *)&buf[42] = 2048;
          *(double *)&buf[44] = v64;
          *(_WORD *)&buf[52] = 2048;
          *(void *)&buf[54] = v133;
          _os_log_debug_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEBUG, "BLEScanStat: Scan stops with duty cycle %{public}s scan type %{public}s agent %{public}s duration %f sec totalScanTime %f sec prev start at %f sec", buf, 0x3Eu);
        }
      }
      sub_10001B8AC(&__str);
    }
    else
    {
      sub_100054AA0(a1);
    }
    return 0;
  }
  v152[0] = 0;
  v152[1] = 0;
  uint64_t v151 = (uint64_t *)v152;
  long long v20 = *(void **)(a1 + 2040);
  uint64_t v143 = (void *)(a1 + 2048);
  if (v20 != (void *)(a1 + 2048))
  {
    do
    {
      LODWORD(v148) = *(_DWORD *)(*(void *)(v20[5] + 8) + 168);
      uint64_t v160 = 0;
      long long v159 = 0u;
      memset(buf, 0, sizeof(buf));
      uint64_t v21 = sub_100032DE8(a1, v20[5]);
      long long v22 = *(_OWORD *)v21;
      long long v23 = *(_OWORD *)(v21 + 16);
      *(_OWORD *)&buf[28] = *(_OWORD *)(v21 + 28);
      *(_OWORD *)buf = v22;
      *(_OWORD *)&uint8_t buf[16] = v23;
      memset(&buf[48], 0, 24);
      sub_1000375CC(&buf[48], *(void *)(v21 + 48), *(void *)(v21 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v21 + 56) - *(void *)(v21 + 48)) >> 5));
      *(void *)&buf[72] = 0;
      long long v159 = 0uLL;
      sub_100037564((char *)&buf[72], *(long long **)(v21 + 72), *(long long **)(v21 + 80), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v21 + 80) - *(void *)(v21 + 72)) >> 2));
      LOBYTE(v160) = *(unsigned char *)(v21 + 96);
      if (buf[8] && !buf[5] && !buf[4]) {
        sub_100036BE4(&v151, (unsigned int *)&v148, &v148);
      }
      BOOL v24 = (sub_100032C7C(*(void *)(v20[5] + 8), 0x16u) & 1) != 0 || *(unsigned char *)(a1 + 2721) != 0;
      *(unsigned char *)(a1 + 2721) = v24;
      BOOL v25 = (sub_100032B0C(*(void *)(v20[5] + 8), 2u) & 1) != 0 || *(unsigned char *)(a1 + 2722) != 0;
      *(unsigned char *)(a1 + 2722) = v25;
      if (*(void *)&buf[72])
      {
        *(void *)&long long v159 = *(void *)&buf[72];
        operator delete(*(void **)&buf[72]);
      }
      *(void *)&long long __str = &buf[48];
      sub_100035EAC((void ***)&__str);
      id v26 = (void *)v20[1];
      if (v26)
      {
        do
        {
          size_t v27 = v26;
          id v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          size_t v27 = (void *)v20[2];
          BOOL v32 = *v27 == (void)v20;
          long long v20 = v27;
        }
        while (!v32);
      }
      long long v20 = v27;
    }
    while (v27 != v143);
  }
  uint64_t v28 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v28 + 384))(v28)) {
    sub_1006EC6A0(a1, (unsigned __int8 *)v153);
  }
  else {
    sub_1000377E0(a1, (unsigned __int8 *)v153);
  }
  uint64_t v30 = *(void *)(a1 + 1968) ^ *(void *)&v153[0] | *(void *)(a1 + 1976) ^ *((void *)&v153[0] + 1) | *(void *)(a1 + 1984) ^ *(void *)&v153[1] | (unsigned __int16)(*(_WORD *)(a1 + 1992) ^ WORD4(v153[1]));
  *(unsigned char *)(a1 + 1841) = v30 != 0;
  if (a2)
  {
    int v31 = 1;
  }
  else
  {
    if (*(unsigned char *)(a1 + 1840)) {
      BOOL v32 = 0;
    }
    else {
      BOOL v32 = v30 == 0;
    }
    int v31 = !v32;
  }
  BOOL v33 = v30 != 0;
  if (*(_DWORD *)(a1 + 1964) == 2) {
    int v34 = v33;
  }
  else {
    int v34 = v31;
  }
  uint64_t v35 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v34;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "needToRestart=%d", buf, 8u);
  }
  if (*(_DWORD *)(a1 + 1960) == 3)
  {
    if (v34)
    {
      long long __str = 0u;
      long long v157 = 0u;
      LOWORD(v36) = *(_WORD *)(a1 + 1974);
      snprintf((char *)&__str, 0x20uLL, "%.2fms/%.2fms", (double)*(unsigned __int16 *)(a1 + 1972) * 0.625, (double)v36 * 0.625);
      sub_1006D5260(a1);
      char v37 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
      {
        if (*(unsigned char *)(a1 + 1968)) {
          uint64_t v38 = "passive";
        }
        else {
          uint64_t v38 = "active";
        }
        int v39 = *(unsigned __int8 *)(a1 + 1971);
        *(_DWORD *)buf = 136446722;
        *(void *)&uint8_t buf[4] = v38;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = &__str;
        if (v39) {
          unsigned int v40 = "no ";
        }
        else {
          unsigned int v40 = "";
        }
        *(_WORD *)&buf[22] = 2082;
        *(void *)&uint8_t buf[24] = v40;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_INFO, "Currently in %{public}s scan (%{public}s) with %{public}sduplicates - stopping scan...", buf, 0x20u);
      }
      LOBYTE(v148) = 0;
      sub_10001B8E0(&v148);
      if (sub_100226760())
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
          sub_100795758();
        }
      }
      else
      {
        *(_DWORD *)(a1 + 1960) = 4;
        dispatch_time_t v66 = dispatch_time(0, 3000000000);
        *(void *)(a1 + 2024) = v66;
        uint64_t v67 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134217984;
          *(void *)&uint8_t buf[4] = v66;
          _os_log_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_INFO, "Setting the zone lost timeout to %lld", buf, 0xCu);
        }
        double v68 = CFAbsoluteTimeGetCurrent();
        double v69 = 0.0;
        if (v68 > 0.0)
        {
          double v70 = *(double *)(a1 + 3208);
          BOOL v71 = v68 <= v70 || v70 <= 0.0;
          double v72 = v68 - v70;
          if (v71) {
            double v69 = 0.0;
          }
          else {
            double v69 = v72;
          }
        }
        unsigned int v73 = *(_DWORD *)(a1 + 3220);
        int v74 = *(unsigned __int8 *)(a1 + 3224);
        uint64_t v75 = *(unsigned int *)(a1 + 3216);
        uint64_t v76 = a1 + 48 * v73 + 24 * *(unsigned __int8 *)(a1 + 3224) + 8 * v75;
        double v77 = v69 + *(double *)(v76 + 2800);
        *(double *)(v76 + 2800) = v77;
        long long v78 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
        {
          if (v73 > 6) {
            uint64_t v134 = "Unknown Duty Cycle Type";
          }
          else {
            uint64_t v134 = off_1009BF930[v73];
          }
          int v136 = "active";
          if (!v74) {
            int v136 = "passive";
          }
          if (v75 > 2) {
            int v137 = "Unknown Scan Agent Type";
          }
          else {
            int v137 = off_1009BF968[(int)v75];
          }
          uint64_t v138 = *(void *)(a1 + 3208);
          *(_DWORD *)buf = 136447490;
          *(void *)&uint8_t buf[4] = v134;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v136;
          *(_WORD *)&buf[22] = 2082;
          *(void *)&uint8_t buf[24] = v137;
          *(_WORD *)&unsigned char buf[32] = 2048;
          *(double *)&buf[34] = v69;
          *(_WORD *)&buf[42] = 2048;
          *(double *)&buf[44] = v77;
          *(_WORD *)&buf[52] = 2048;
          *(void *)&buf[54] = v138;
          _os_log_debug_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEBUG, "BLEScanStat: Scan stops with duty cycle %{public}s scan type %{public}s agent %{public}s duration %f sec totalScanTime %f sec prev start at %f sec", buf, 0x3Eu);
        }
      }
      sub_10001B8AC(&v148);
    }
    else
    {
      sub_100054AA0(a1);
    }
    goto LABEL_212;
  }
  long long __str = 0u;
  long long v157 = 0u;
  LOWORD(v36) = WORD3(v153[0]);
  snprintf((char *)&__str, 0x20uLL, "%.2fms/%.2fms", (double)WORD2(v153[0]) * 0.625, (double)v36 * 0.625);
  if (*(void *)((char *)v153 + 6)) {
    BOOL v41 = WORD2(v153[0]) == 0;
  }
  else {
    BOOL v41 = 1;
  }
  int v42 = !v41;
  id v43 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v44 = "Not ";
    int v45 = *(unsigned __int8 *)(a1 + 1840);
    if (v42) {
      uint64_t v44 = "";
    }
    int v46 = *(_DWORD *)(a1 + 1964);
    int v47 = *(unsigned __int8 *)(a1 + 2352);
    if (LOBYTE(v153[0])) {
      long long v48 = "passive";
    }
    else {
      long long v48 = "active";
    }
    *(_DWORD *)buf = 136448002;
    *(void *)&uint8_t buf[4] = v44;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&buf[14] = v48;
    if (BYTE3(v153[0])) {
      long long v49 = "enabled";
    }
    else {
      long long v49 = "disabled";
    }
    *(_WORD *)&buf[22] = 2082;
    long long v50 = "YES";
    *(void *)&uint8_t buf[24] = &__str;
    *(_WORD *)&unsigned char buf[32] = 2082;
    if (!v45) {
      long long v50 = "NO";
    }
    *(void *)&buf[34] = v49;
    *(_WORD *)&buf[42] = 1024;
    *(_DWORD *)&buf[44] = v45;
    *(_WORD *)&buf[48] = 1024;
    *(_DWORD *)&buf[50] = v46;
    *(_WORD *)&buf[54] = 1024;
    *(_DWORD *)&buf[56] = v47;
    *(_WORD *)&buf[60] = 2082;
    *(void *)&buf[62] = v50;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "%{public}sStarting %{public}s scan (%{public}s) with duplicate filter %{public}s scNeed=%d stateO=%d, retainDups=%d fScanFiltersNeedUpdating=%{public}s", buf, 0x46u);
  }
  *(_OWORD *)(a1 + 1968) = v153[0];
  *(_OWORD *)(a1 + 1978) = *(long long *)((char *)v153 + 10);
  if (v42) {
    sub_1006D5260(a1);
  }
  if (*(_DWORD *)(a1 + 1964) == 2)
  {
    sub_1006E5734((unsigned char *)a1, 1);
  }
  else
  {
    if (*(unsigned char *)(a1 + 1840) || *(unsigned char *)(a1 + 1843))
    {
      *(unsigned char *)(a1 + 1840) = 0;
      if ((*(unsigned char *)(a1 + 4382) || *(unsigned char *)(a1 + 4381)) && *(unsigned char *)(a1 + 1842)) {
        sub_1006E5734((unsigned char *)a1, 0);
      }
      if (!LOBYTE(v153[0]) || (sub_1006EB410(a1) & 1) != 0 || (sub_1006EB490(a1) & 1) != 0)
      {
        long long v51 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_INFO, "Skip addFilters", buf, 2u);
        }
      }
      else
      {
        sub_1006E9524(a1);
        if (*(unsigned char *)(a1 + 4382) || *(unsigned char *)(a1 + 4381)) {
          goto LABEL_212;
        }
      }
    }
    if (LOBYTE(v153[0])) {
      char v52 = sub_1006E9360(a1);
    }
    else {
      char v52 = 0;
    }
    BYTE3(v153[0]) |= v52;
  }
  uint64_t v148 = 0;
  uint64_t v149 = 0;
  unint64_t v150 = 0;
  int v79 = *(void **)(a1 + 2040);
  if (v79 == v143)
  {
    *(unsigned char *)(a1 + 4383) = 0;
    goto LABEL_195;
  }
  int v142 = v42;
  do
  {
    uint64_t v81 = v79[4];
    uint64_t v80 = v79[5];
    int v82 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
    {
      sub_10003AE4C(v81, (uint64_t)__p);
      uint64_t v109 = __p;
      if (v147 < 0) {
        uint64_t v109 = (void **)__p[0];
      }
      uint64_t v110 = *(void *)(v80 + 8);
      int v111 = *(unsigned __int8 *)(v110 + 196);
      int v113 = *(_DWORD *)(v110 + 188);
      int v112 = *(_DWORD *)(v110 + 192);
      if (v113) {
        int v114 = 120000;
      }
      else {
        int v114 = 0;
      }
      if (!v112) {
        int v112 = v114;
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = v109;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v111;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v113;
      *(_WORD *)&uint8_t buf[24] = 1024;
      *(_DWORD *)&buf[26] = v112;
      _os_log_debug_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEBUG, "session %s scanRxThresholdConfigured:%d getScanRxThresholdRequirement:%d getScanTimeoutRequirement:%d", buf, 0x1Eu);
      if (v147 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v83 = *(void *)(v80 + 8);
    if (!*(unsigned char *)(v83 + 196))
    {
      int v85 = *(_DWORD *)(v83 + 188);
      int v84 = *(_DWORD *)(v83 + 192);
      int v86 = 120000;
      if (!v85)
      {
        if (!v84) {
          goto LABEL_170;
        }
        int v86 = 0;
      }
      if (v84) {
        int v87 = *(_DWORD *)(v83 + 192);
      }
      else {
        int v87 = v86;
      }
      int v88 = *(_DWORD *)(v83 + 168);
      v145[0] = _NSConcreteStackBlock;
      v145[1] = 3221225472;
      v145[2] = sub_1006F0BB8;
      v145[3] = &unk_1009BF288;
      v145[4] = a1;
      long long v89 = objc_retainBlock(v145);
      long long v90 = v89;
      long long v91 = v149;
      if ((unint64_t)v149 >= v150)
      {
        long long v93 = v5;
        unint64_t v94 = 0xCCCCCCCCCCCCCCCDLL * ((v149 - v148) >> 3);
        unint64_t v95 = v94 + 1;
        if (v94 + 1 > 0x666666666666666) {
          abort();
        }
        if (0x999999999999999ALL * ((uint64_t)(v150 - (void)v148) >> 3) > v95) {
          unint64_t v95 = 0x999999999999999ALL * ((uint64_t)(v150 - (void)v148) >> 3);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v150 - (void)v148) >> 3) >= 0x333333333333333) {
          unint64_t v96 = 0x666666666666666;
        }
        else {
          unint64_t v96 = v95;
        }
        *(void *)&unsigned char buf[32] = &v150;
        long long v97 = (char *)sub_10026C508((uint64_t)&v150, v96);
        long long v99 = &v97[40 * v94];
        *(void *)long long v99 = v81;
        *((_DWORD *)v99 + 2) = v85;
        *((_DWORD *)v99 + 3) = v85;
        *((_DWORD *)v99 + 4) = v87;
        *((_DWORD *)v99 + 5) = 7;
        *((_DWORD *)v99 + 6) = v88;
        *((void *)v99 + 4) = v90;
        long long v101 = v148;
        id v100 = v149;
        if (v149 == v148)
        {
          long long v101 = v149;
          long long v103 = (long long *)&v97[40 * v94];
          size_t v5 = v93;
        }
        else
        {
          long long v102 = v149;
          long long v103 = (long long *)&v97[40 * v94];
          size_t v5 = v93;
          do
          {
            long long v104 = *(_OWORD *)(v102 - 40);
            *(long long *)((char *)v103 - 28) = *(_OWORD *)(v102 - 28);
            *(long long *)((char *)v103 - 40) = v104;
            uint64_t v105 = *((void *)v102 - 1);
            *((void *)v102 - 1) = 0;
            *((void *)v103 - 1) = v105;
            long long v103 = (long long *)((char *)v103 - 40);
            v102 -= 40;
          }
          while (v102 != v101);
        }
        long long v92 = (long long *)(v99 + 40);
        uint64_t v148 = (char *)v103;
        uint64_t v149 = v99 + 40;
        unint64_t v106 = v150;
        unint64_t v150 = (unint64_t)&v97[40 * v98];
        *(void *)&uint8_t buf[16] = v100;
        *(void *)&uint8_t buf[24] = v106;
        *(void *)buf = v101;
        *(void *)&uint8_t buf[8] = v101;
        sub_1006F6464((uint64_t)buf);
      }
      else
      {
        *(void *)uint64_t v149 = v81;
        *((_DWORD *)v91 + 2) = v85;
        *((_DWORD *)v91 + 3) = v85;
        *((_DWORD *)v91 + 4) = v87;
        *((_DWORD *)v91 + 5) = 7;
        *((_DWORD *)v91 + 6) = v88;
        long long v92 = (long long *)(v91 + 40);
        *((void *)v91 + 4) = v89;
      }
      uint64_t v149 = (char *)v92;
      *(unsigned char *)(*(void *)(v80 + 8) + 196) = 1;
    }
LABEL_170:
    id v107 = (void *)v79[1];
    if (v107)
    {
      do
      {
        char v108 = v107;
        id v107 = (void *)*v107;
      }
      while (v107);
    }
    else
    {
      do
      {
        char v108 = (void *)v79[2];
        BOOL v32 = *v108 == (void)v79;
        int v79 = v108;
      }
      while (!v32);
    }
    int v79 = v108;
  }
  while (v108 != v143);
  __int16 v115 = v148;
  id v116 = v149;
  *(unsigned char *)(a1 + 4383) = 0;
  int v42 = v142;
  if (v115 != v116)
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
    }
    __int16 v117 = off_1009F8150;
    memset(v144, 0, sizeof(v144));
    sub_1006F64B8(v144, (long long *)v148, (long long *)v149, 0xCCCCCCCCCCCCCCCDLL * ((v149 - v148) >> 3));
    sub_1004FDA04((uint64_t)v117, v144);
    *(void *)buf = v144;
    sub_1006F63DC((void ***)buf);
    uint64_t v118 = (long long *)v148;
    for (uint64_t i = v149; i != (char *)v118; i -= 40)

    uint64_t v149 = (char *)v118;
    __int16 v120 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_INFO, "Configuring RX Threshold, waiting for completion", buf, 2u);
    }
    goto LABEL_211;
  }
LABEL_195:
  if (v42)
  {
    uint64_t v121 = sub_10003FB34();
    (*(void (**)(uint64_t, void))(*(void *)v121 + 1080))(v121, *(unsigned __int8 *)(a1 + 2352));
    *(unsigned char *)(a1 + 2352) = 0;
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    int v122 = sub_100226B30((uint64_t)v153, (uint64_t)&v154, a1);
    sub_10001B910(__p);
    if (sub_1005FE50C(0))
    {
      uint64_t v123 = sub_1005FE5D8();
      os_signpost_id_t v124 = sub_1005FE584(0);
      if (v124 - 1 <= 0xFFFFFFFFFFFFFFFDLL && os_signpost_enabled(v123))
      {
        *(_WORD *)buf = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v123, OS_SIGNPOST_INTERVAL_END, v124, "HandoffScanStart", "ProxControlDeviceClose Scan Start", buf, 2u);
      }
    }
    if (v122)
    {
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR)) {
        sub_1007957C0();
      }
    }
    else
    {
      sub_10005497C(a1);
      *(_DWORD *)(a1 + 1960) = 2;
      CFAbsoluteTime v125 = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(a1 + 3208) = v125;
      int v126 = LOBYTE(v153[0]) ^ 1;
      *(unsigned char *)(a1 + 3224) = LOBYTE(v153[0]) ^ 1;
      int v128 = sub_1006EF084(v127, WORD2(v153[0]), WORD3(v153[0]));
      *(_DWORD *)(a1 + 3220) = v128;
      uint64_t v129 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEBUG))
      {
        if (v128 == 7) {
          uint64_t v135 = "Unknown Duty Cycle Type";
        }
        else {
          uint64_t v135 = off_1009BF930[v128];
        }
        uint64_t v139 = "active";
        if (!v126) {
          uint64_t v139 = "passive";
        }
        uint64_t v140 = *(int *)(a1 + 3216);
        if (v140 > 2) {
          uint64_t v141 = "Unknown Scan Agent Type";
        }
        else {
          uint64_t v141 = off_1009BF968[v140];
        }
        *(_DWORD *)buf = 136446978;
        *(void *)&uint8_t buf[4] = v135;
        *(_WORD *)&unsigned char buf[12] = 2082;
        *(void *)&buf[14] = v139;
        *(_WORD *)&buf[22] = 2082;
        *(void *)&uint8_t buf[24] = v141;
        *(_WORD *)&unsigned char buf[32] = 2048;
        *(CFAbsoluteTime *)&buf[34] = v125;
        _os_log_debug_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEBUG, "BLEScanStat: Scan started with duty cycle %{public}s scan type %{public}s agent %{public}s start at %f sec", buf, 0x2Au);
      }
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
      }
      sub_1004FE690((uint64_t)off_1009F8150, v153, 1, (uint64_t)&v151);
    }
    sub_10001B8AC(__p);
  }
  else
  {
    sub_100054AA0(a1);
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
    }
    sub_1004FE690((uint64_t)off_1009F8150, v153, 0, (uint64_t)&v151);
  }
LABEL_211:
  *(void *)buf = &v148;
  sub_1006F63DC((void ***)buf);
LABEL_212:
  sub_1000486F0((uint64_t)&v151, v152[0]);
  return 0;
}

void sub_100032A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void **a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,char a34,void *a35)
{
  a28 = (void **)&a31;
  sub_1006F63DC(&a28);
  sub_1000486F0((uint64_t)&a34, a35);
  _Unwind_Resume(a1);
}

uint64_t sub_100032B0C(uint64_t a1, unsigned int a2)
{
  if (*(unsigned __int16 *)(a1 + 170) == a2) {
    return 1;
  }
  int v3 = *(void **)(a1 + 176);
  if (!v3) {
    return 0;
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = v3;
  uint64_t v2 = (uint64_t)[v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    uint64_t v6 = *(void *)v13;
    uint64_t v7 = a2;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v12 + 1) + 8 * i);
        BOOL v10 = v7 == [v9 longLongValue] >> 16;

        if (v10)
        {
          uint64_t v2 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v2 = (uint64_t)[v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v2;
}

void sub_100032C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100032C7C(uint64_t a1, unsigned int a2)
{
  if (*(_DWORD *)(a1 + 168) == a2) {
    return 1;
  }
  int v3 = *(void **)(a1 + 176);
  if (!v3) {
    return 0;
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v5 = v3;
  uint64_t v2 = (uint64_t)[v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v2)
  {
    uint64_t v6 = *(void *)v13;
    unint64_t v7 = a2;
    while (2)
    {
      for (uint64_t i = 0; i != v2; ++i)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v5);
        }
        id v9 = *(id *)(*((void *)&v12 + 1) + 8 * i);
        BOOL v10 = [v9 longLongValue] == v7;

        if (v10)
        {
          uint64_t v2 = 1;
          goto LABEL_14;
        }
      }
      uint64_t v2 = (uint64_t)[v5 countByEnumeratingWithState:&v12 objects:v16 count:16];
      if (v2) {
        continue;
      }
      break;
    }
  }
LABEL_14:

  return v2;
}

void sub_100032DBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100032DE8(uint64_t a1, uint64_t a2)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A14718, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A14718))
  {
    uint64_t v45 = sub_100035F54();
    byte_100A14717 = (*(uint64_t (**)(uint64_t))(*(void *)v45 + 840))(v45);
    __cxa_guard_release(&qword_100A14718);
  }
  int v4 = *(void **)(a1 + 2040);
  if (v4 == (void *)(a1 + 2048))
  {
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    while (v4[5] != a2)
    {
      uint64_t v6 = (void *)v4[1];
      if (v6)
      {
        do
        {
          unint64_t v7 = v6;
          uint64_t v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unint64_t v7 = (void *)v4[2];
          BOOL v12 = *v7 == (void)v4;
          int v4 = v7;
        }
        while (!v12);
      }
      int v4 = v7;
      if (v7 == (void *)(a1 + 2048)) {
        goto LABEL_14;
      }
    }
    uint64_t v5 = v4[4];
  }
LABEL_14:
  int v8 = *(_DWORD *)(*(void *)(a2 + 8) + 168);
  uint64_t v63 = 0;
  *(_OWORD *)int v61 = 0u;
  long long v62 = 0u;
  long long v60 = 0u;
  memset(v59, 0, sizeof(v59));
  int v46 = v8;
  sub_100033820(a1, v8, (uint64_t)v59);
  if (!BYTE8(v59[0]))
  {
    uint64_t v17 = *(void *)(a2 + 8) + 280;
    goto LABEL_65;
  }
  uint64_t v9 = *(void *)(a2 + 8);
  memset((char *)&v58[1] + 12, 0, 48);
  *(_OWORD *)((char *)&v58[4] + 8) = 0u;
  long long v10 = *(_OWORD *)(v9 + 296);
  long long v57 = *(_OWORD *)(v9 + 280);
  v58[0] = v10;
  *(_OWORD *)((char *)v58 + 12) = *(_OWORD *)(v9 + 308);
  memset(&v58[2], 0, 24);
  sub_1000375CC(&v58[2], *(void *)(v9 + 328), *(void *)(v9 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v9 + 336) - *(void *)(v9 + 328)) >> 5));
  memset((char *)&v58[3] + 8, 0, 24);
  sub_100037564((char *)&v58[3] + 8, *(long long **)(v9 + 352), *(long long **)(v9 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v9 + 360) - *(void *)(v9 + 352)) >> 2));
  LOBYTE(v58[5]) = *(unsigned char *)(v9 + 376);
  BOOL v11 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
  {
    int v40 = byte_100A14717;
    if (v5)
    {
      sub_10003AE4C(v5, (uint64_t)v55);
      if (v56 >= 0) {
        BOOL v41 = v55;
      }
      else {
        BOOL v41 = (void **)v55[0];
      }
    }
    else
    {
      BOOL v41 = (void **)"NA";
    }
    int v42 = sub_10003E508(v46);
    sub_100041198((uint64_t)&v57);
    sub_100041198((uint64_t)v59);
    id v43 = &v52;
    if (v54 < 0) {
      id v43 = v52;
    }
    if (v51 >= 0) {
      uint64_t v44 = &v50;
    }
    else {
      uint64_t v44 = v50;
    }
    *(_DWORD *)buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v40;
    *(_WORD *)uint64_t v65 = 2080;
    *(void *)&v65[2] = v41;
    __int16 v66 = 2080;
    uint64_t v67 = v42;
    __int16 v68 = 2080;
    double v69 = v43;
    __int16 v70 = 2080;
    BOOL v71 = v44;
    _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "updateAgentScanUseCaseEntry controllerSupportsScanRx:%d session:%s usecase:%s previous:%s entry:%s", buf, 0x30u);
    if (v51 < 0) {
      operator delete(v50);
    }
    if (v54 < 0) {
      operator delete(v52);
    }
    if (v5 && v56 < 0) {
      operator delete(v55[0]);
    }
  }
  if (BYTE8(v57)) {
    BOOL v12 = BYTE7(v57) == 0;
  }
  else {
    BOOL v12 = 1;
  }
  BOOL v13 = !v12 && BYTE5(v57) == 0;
  int v14 = v13;
  if (!v13) {
    goto LABEL_34;
  }
  BOOL v15 = v58[0] != 0;
  if (byte_100A14717)
  {
LABEL_35:
    sub_100036250(*(_DWORD **)(a2 + 8), v59);
    goto LABEL_36;
  }
  if (!BYTE7(v59[0]) && v58[0] == 0)
  {
LABEL_34:
    BOOL v15 = 0;
    goto LABEL_35;
  }
  int v14 = 1;
LABEL_36:
  uint64_t v18 = *(void *)(a2 + 8);
  int v19 = *(unsigned __int16 *)(v18 + 312);
  int v20 = *(unsigned __int16 *)(v18 + 314);
  char v21 = *(unsigned char *)(v18 + 283);
  *(unsigned char *)(v18 + 120) = 1;
  *(_DWORD *)(v18 + 128) = v20;
  *(_DWORD *)(v18 + 132) = v19;
  *(unsigned char *)(v18 + 136) = v21;
  *(unsigned char *)uint64_t v18 = *(unsigned char *)(v18 + 280);
  *(unsigned char *)(v18 + 1) = *(unsigned char *)(v18 + 286);
  long long v48 = 0;
  uint64_t v49 = 0;
  __p = 0;
  sub_100037564((char *)&__p, *(long long **)(v18 + 352), *(long long **)(v18 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v18 + 360) - *(void *)(v18 + 352)) >> 2));
  if ((void **)(v18 + 8) != &__p) {
    sub_10003366C((void *)(v18 + 8), (long long *)__p, v48, 0xCCCCCCCCCCCCCCCDLL * (((char *)v48 - (unsigned char *)__p) >> 2));
  }
  if (__p)
  {
    long long v48 = (long long *)__p;
    operator delete(__p);
  }
  *(unsigned char *)(a2 + 224) = *(unsigned char *)(v18 + 376);
  uint64_t v22 = *(void *)(a2 + 8);
  *(unsigned char *)(v22 + 273) = *(unsigned char *)(v18 + 316);
  *(_DWORD *)(v22 + 384) = *(_DWORD *)(v18 + 320);
  if (((v14 | v15) & 1) == 0)
  {
    uint64_t v23 = *(void *)(v18 + 304);
    *(_DWORD *)(v22 + 188) = *(void *)(v18 + 296);
    *(_DWORD *)(v22 + 192) = v23;
  }
  sub_1000360D0(v22);
  uint64_t v25 = *(void *)(v18 + 328);
  for (uint64_t i = *(void *)(v18 + 336); v25 != i; v25 += 96)
  {
    *(void *)buf = 0;
    *(void *)uint64_t v65 = 0;
    sub_1000335D8(buf, (const void *)(v25 + 40), *(unsigned __int16 *)(v25 + 90));
    char v52 = 0;
    dispatch_time_t v53 = 0;
    sub_1000335D8(&v52, (const void *)(v25 + 65), *(unsigned __int16 *)(v25 + 92));
    uint64_t v26 = sub_100035F54();
    int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v26 + 616))(v26);
    uint64_t v28 = *(void *)(a2 + 8);
    id v29 = *(id *)(v28 + 152);
    uint64_t v30 = [v29 anyObject];
    if (v27) {
      char v31 = 3;
    }
    else {
      char v31 = 1;
    }
    sub_1000364C4(v28, v30, *(unsigned __int8 *)(v25 + 22), *(unsigned char *)(v25 + 26), (uint64_t)buf, (uint64_t)&v52, *(unsigned char *)(v25 + 21), *(unsigned char *)(v25 + 23), *(unsigned char *)(v25 + 23) != 0, v31, *(unsigned char *)(v25 + 25), *(void **)v25, *(unsigned char *)(v25 + 16), *(_DWORD *)(v25 + 17), BYTE1(*(_DWORD *)(v25 + 17)), BYTE2(*(_DWORD *)(v25 + 17)), HIBYTE(*(_DWORD *)(v25 + 17)), 0, 0xFFFF,
      0xFFFF,
      0xFFFF);

    char v52 = &off_100998428;
    if (v53) {
      sub_1000368F4(v53);
    }
    *(void *)buf = &off_100998428;
    if (*(void *)v65) {
      sub_1000368F4(*(atomic_uint **)v65);
    }
  }
  if ((v46 & 0xFFFF0000) == 0x10000)
  {
    int v32 = _os_feature_enabled_impl();
    int v33 = HIWORD(v59[0]) ? v32 : 0;
    if (v33 == 1 && *(unsigned char *)(*(void *)(a2 + 8) + 201))
    {
      uint64_t v34 = sub_100035F54();
      int v35 = (*(uint64_t (**)(uint64_t))(*(void *)v34 + 704))(v34);
      unsigned int v36 = *(unsigned __int16 *)(v18 + 294);
      int v37 = (v35 != 0) & (v36 >> 1);
      int v38 = (v36 & (v35 != v37)) != 0 ? v37 | 2 : (v35 != 0) & (v36 >> 1);
      if (v38) {
        *(unsigned char *)(*(void *)(a2 + 8) + 122) = v38;
      }
    }
  }
  uint64_t v17 = v18 + 280;
  if (*((void *)&v58[3] + 1))
  {
    *(void *)&v58[4] = *((void *)&v58[3] + 1);
    operator delete(*((void **)&v58[3] + 1));
  }
  *(void *)buf = &v58[2];
  sub_100035EAC((void ***)buf);
LABEL_65:
  if (v61[1])
  {
    *(void **)&long long v62 = v61[1];
    operator delete(v61[1]);
  }
  *(void *)&long long v57 = &v60;
  sub_100035EAC((void ***)&v57);
  return v17;
}

void sub_1000334A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
}

void *sub_1000335D8(void *a1, const void *a2, size_t a3)
{
  uint64_t v6 = operator new(a3 + 24);
  void v6[2] = 1;
  *(void *)uint64_t v6 = off_1009BCEA0;
  *((void *)v6 + 2) = a3;
  memcpy(v6 + 6, a2, a3);
  *a1 = &off_100998428;
  a1[1] = v6;
  return a1;
}

_DWORD *sub_10003366C(void *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v8 = a1[2];
  uint64_t result = (_DWORD *)*a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((v8 - (uint64_t)result) >> 2) < a4)
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * (v8 >> 2);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x666666666666666) {
      unint64_t v12 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v12 = v11;
    }
    sub_10003762C(a1, v12);
    int v14 = (_DWORD *)a1[1];
    BOOL v13 = (_DWORD **)(a1 + 1);
    uint64_t result = v14;
    BOOL v15 = (char *)v14;
    if (v6 != a3)
    {
      BOOL v15 = (char *)result;
      do
      {
        long long v16 = *v6;
        *((_DWORD *)v15 + 4) = *((_DWORD *)v6 + 4);
        *(_OWORD *)BOOL v15 = v16;
        v15 += 20;
        uint64_t v6 = (long long *)((char *)v6 + 20);
      }
      while (v6 != a3);
    }
LABEL_26:
    int64_t v26 = v15 - (char *)result;
    goto LABEL_27;
  }
  uint64_t v18 = (_DWORD *)a1[1];
  BOOL v13 = (_DWORD **)(a1 + 1);
  uint64_t v17 = v18;
  unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * (v18 - result);
  if (v19 >= a4)
  {
    BOOL v15 = (char *)result;
    if (a2 != a3)
    {
      int v27 = result;
      do
      {
        long long v28 = *v6;
        v27[4] = *((_DWORD *)v6 + 4);
        *(_OWORD *)int v27 = v28;
        v27 += 5;
        uint64_t v6 = (long long *)((char *)v6 + 20);
        v15 += 20;
      }
      while (v6 != a3);
    }
    goto LABEL_26;
  }
  int v20 = (long long *)((char *)a2 + 20 * v19);
  if (v17 != result)
  {
    uint64_t v21 = 20 * v19;
    do
    {
      long long v22 = *v6;
      result[4] = *((_DWORD *)v6 + 4);
      *(_OWORD *)uint64_t result = v22;
      result += 5;
      uint64_t v6 = (long long *)((char *)v6 + 20);
      v21 -= 20;
    }
    while (v21);
    uint64_t result = *v13;
  }
  uint64_t v23 = (char *)result;
  if (v20 != a3)
  {
    uint64_t v23 = (char *)result;
    BOOL v24 = result;
    do
    {
      long long v25 = *v20;
      v24[4] = *((_DWORD *)v20 + 4);
      *(_OWORD *)BOOL v24 = v25;
      v24 += 5;
      int v20 = (long long *)((char *)v20 + 20);
      v23 += 20;
    }
    while (v20 != a3);
  }
  int64_t v26 = v23 - (char *)result;
LABEL_27:
  void *v13 = (_DWORD *)((char *)result + v26);
  return result;
}

void sub_100033820(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A14728, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A14728))
  {
    dword_100A14720 = *(_DWORD *)(sub_10003FB34() + 712);
    __cxa_guard_release(&qword_100A14728);
  }
  long long v6 = 0uLL;
  memset(v139, 0, sizeof(v139));
  uint64_t v141 = 1;
  memset(v140, 0, sizeof(v140));
  BYTE1(v139[0]) = 1;
  *(_DWORD *)((char *)v139 + 2) = 0x1000000;
  BYTE6(v139[0]) = 1;
  *(_DWORD *)((char *)v139 + 7) = 256;
  *(_WORD *)((char *)v139 + 11) = 0;
  memset(v136, 0, sizeof(v136));
  memset(v137, 0, sizeof(v137));
  BYTE1(v136[0]) = 1;
  BYTE6(v136[0]) = 1;
  *(_DWORD *)((char *)v136 + 7) = 0;
  *(_WORD *)((char *)v136 + 11) = 0;
  uint64_t v138 = 1;
  if (a2 > 268)
  {
    uint64_t v11 = (void *)&v137[1] + 1;
    switch(a2)
    {
      case 65544:
      case 65559:
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x100129C00010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        if (_os_feature_enabled_impl()) {
          LOBYTE(v138) = 0;
        }
        uint64_t v12 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 384))(v12))
        {
          LODWORD(v136[2]) = 19660830;
          HIWORD(v136[0]) = 0;
          LOBYTE(v136[0]) = 0;
          *(void *)&v136[1] = 0;
          v207[4] = *(unsigned char *)(a1 + 144);
          uint64_t v13 = *((void *)&v137[0] + 1);
          if (*((void *)&v137[0] + 1) >= *(void *)&v137[1])
          {
            uint64_t v17 = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
          }
          else
          {
            **((void **)&v137[0] + 1) = (id)v206.n128_u64[0];
            *(void *)(v13 + 8) = (id)v206.n128_u64[1];
            *(_OWORD *)(v13 + 16) = *(_OWORD *)v207;
            long long v15 = *(_OWORD *)&v207[32];
            long long v14 = *(_OWORD *)&v207[48];
            long long v16 = *(_OWORD *)&v207[16];
            *(_OWORD *)(v13 + 78) = *(_OWORD *)&v207[62];
            *(_OWORD *)(v13 + 48) = v15;
            *(_OWORD *)(v13 + 64) = v14;
            *(_OWORD *)(v13 + 32) = v16;
            uint64_t v17 = v13 + 96;
          }
          *((void *)&v137[0] + 1) = v17;
          if (_os_feature_enabled_impl())
          {
            long long v204 = xmmword_1007BA8EC;
            int v205 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v204);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            if (_os_feature_enabled_impl())
            {
              long long v202 = xmmword_1007BA900;
              int v203 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v202);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            }
            LOBYTE(v138) = *(unsigned char *)(a1 + 144);
          }
        }
        else
        {
          uint64_t v56 = sub_100035F54();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v56 + 376))(v56))
          {
            LODWORD(v136[2]) = 0;
            HIWORD(v136[0]) = 0;
            LOBYTE(v136[0]) = 0;
            *(void *)&v136[1] = 0;
            BYTE4(v136[0]) = 1;
            v207[4] = 1;
            sub_1000369B8((uint64_t *)v137, (uint64_t)&v206);
            if (_os_feature_enabled_impl())
            {
              LOBYTE(v138) = 1;
              long long v200 = xmmword_1007BA8EC;
              int v201 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v200);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
              if (_os_feature_enabled_impl())
              {
                long long v198 = xmmword_1007BA900;
                int v199 = 0;
                sub_100035F98((__n128 *)buf, (__n128 *)&v198);
                sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
              }
            }
            if (!*(unsigned char *)(a1 + 144))
            {
              long long v57 = v139;
              BOOL v58 = v140;
              uint64_t v11 = (void *)&v140[1] + 1;
              goto LABEL_183;
            }
          }
          else
          {
            uint64_t v75 = &unk_100A14000;
            LOBYTE(v136[0]) = 0;
            int v76 = *(unsigned __int8 *)(a1 + 144);
            BOOL v78 = (dword_100A14720 - 19) < 0x7BD && v76 != 0;
            v207[7] = v78;
            *(void *)&v136[1] = 0;
            v207[4] = v76;
            if (_os_feature_enabled_impl()) {
              LOBYTE(v138) = *(unsigned char *)(a1 + 144);
            }
            if ((dword_100A14720 - 22) > 0x7B9)
            {
              if ((dword_100A14720 - 19) > 0x7BC) {
                HIWORD(v136[0]) = 0;
              }
              else {
                HIWORD(v136[0]) = 2;
              }
            }
            else
            {
              HIWORD(v136[0]) = 3;
              int v79 = _os_feature_enabled_impl();
              uint64_t v80 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
              {
                int v135 = dword_100A14720;
                uint64_t v81 = sub_10003E508(a2);
                int v82 = *(unsigned __int8 *)(a1 + 144);
                *(_DWORD *)buf = 67109890;
                *(_DWORD *)&uint8_t buf[4] = v79;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v135;
                *(_WORD *)&buf[14] = 2080;
                uint64_t v195 = v81;
                __int16 v196 = 1024;
                int v197 = v82;
                _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "bomEnabled:%d chipset:%d usecase:%s fScreenState:%d", buf, 0x1Eu);
              }
              uint64_t v75 = (_DWORD *)&unk_100A14000;
              if (v79)
              {
                uint64_t v83 = sub_10003FB34();
                int v84 = (*(uint64_t (**)(uint64_t))(*(void *)v83 + 3528))(v83);
                if (a2 == 65559 && v84 == 25 && !*(unsigned char *)(a1 + 144))
                {
                  v207[4] = 1;
                  *(void *)&v207[24] = 0;
                  *(void *)&v207[32] = 0;
                  *(void *)&v207[39] = 0;
                  memset(&v207[49], 0, 23);
                  *(_WORD *)&v207[47] = 4;
                  *(_WORD *)&v207[72] = 4;
                  *(_DWORD *)&v207[74] = 1638425;
                }
              }
            }
            if ((v75[456] - 20) > 0x7BB)
            {
              if (*(unsigned char *)(a1 + 144))
              {
                LODWORD(v136[2]) = 19660830;
              }
              else
              {
                LODWORD(v136[2]) = 0;
                BYTE4(v136[0]) = 1;
              }
            }
            else
            {
              BOOL v131 = *(unsigned char *)(a1 + 144) == 0;
              if (*(unsigned char *)(a1 + 144)) {
                __int16 v132 = 30;
              }
              else {
                __int16 v132 = 0;
              }
              LOWORD(v136[2]) = v132;
              if (v131) {
                __int16 v133 = 0;
              }
              else {
                __int16 v133 = 300;
              }
              WORD1(v136[2]) = v133;
            }
            sub_1000369B8((uint64_t *)v137, (uint64_t)&v206);
            if (_os_feature_enabled_impl())
            {
              long long v192 = xmmword_1007BA8EC;
              int v193 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v192);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
              if (_os_feature_enabled_impl())
              {
                long long v190 = xmmword_1007BA900;
                int v191 = 0;
                sub_100035F98((__n128 *)buf, (__n128 *)&v190);
                sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
              }
            }
          }
        }
        DWORD2(v136[2]) = 1;
        BYTE8(v136[0]) = 1;
        long long v57 = v136;
        BOOL v58 = v137;
        goto LABEL_183;
      case 65545:
      case 65546:
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x100129C00010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        if (_os_feature_enabled_impl()) {
          LOBYTE(v138) = 0;
        }
        uint64_t v37 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 384))(v37))
        {
          LODWORD(v136[2]) = 19660830;
          HIWORD(v136[0]) = 0;
          LOBYTE(v136[0]) = 0;
          *(void *)&v136[1] = 0;
          v207[4] = *(unsigned char *)(a1 + 144);
          uint64_t v38 = *((void *)&v137[0] + 1);
          if (*((void *)&v137[0] + 1) >= *(void *)&v137[1])
          {
            uint64_t v42 = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
          }
          else
          {
            **((void **)&v137[0] + 1) = (id)v206.n128_u64[0];
            *(void *)(v38 + 8) = (id)v206.n128_u64[1];
            *(_OWORD *)(v38 + 16) = *(_OWORD *)v207;
            long long v40 = *(_OWORD *)&v207[32];
            long long v39 = *(_OWORD *)&v207[48];
            long long v41 = *(_OWORD *)&v207[16];
            *(_OWORD *)(v38 + 78) = *(_OWORD *)&v207[62];
            *(_OWORD *)(v38 + 48) = v40;
            *(_OWORD *)(v38 + 64) = v39;
            *(_OWORD *)(v38 + 32) = v41;
            uint64_t v42 = v38 + 96;
          }
          *((void *)&v137[0] + 1) = v42;
          if (_os_feature_enabled_impl())
          {
            LOBYTE(v138) = *(unsigned char *)(a1 + 144);
            long long v188 = xmmword_1007BA8EC;
            int v189 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v188);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            if (_os_feature_enabled_impl())
            {
              long long v186 = xmmword_1007BA900;
              int v187 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v186);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            }
          }
          goto LABEL_182;
        }
        uint64_t v59 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v59 + 376))(v59))
        {
          LODWORD(v136[2]) = 0;
          HIWORD(v136[0]) = 0;
          LOBYTE(v136[0]) = 0;
          *(void *)&v136[1] = 0;
          BYTE4(v136[0]) = 1;
          v207[4] = 1;
          sub_1000369B8((uint64_t *)v137, (uint64_t)&v206);
          if (_os_feature_enabled_impl())
          {
            LOBYTE(v138) = 1;
            long long v184 = xmmword_1007BA8EC;
            int v185 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v184);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            if (_os_feature_enabled_impl())
            {
              long long v182 = xmmword_1007BA900;
              int v183 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v182);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            }
          }
          if (!*(unsigned char *)(a1 + 144))
          {
LABEL_181:
            long long v57 = v139;
            BOOL v58 = v140;
            uint64_t v11 = (void *)&v140[1] + 1;
            goto LABEL_183;
          }
LABEL_182:
          DWORD2(v136[2]) = 1;
          BYTE8(v136[0]) = 1;
          long long v57 = v136;
          BOOL v58 = v137;
LABEL_183:
          long long v97 = v57[1];
          *(_OWORD *)a3 = *v57;
          *(_OWORD *)(a3 + 16) = v97;
          *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)v57 + 28);
          *(void *)(a3 + 48) = *((void *)v57 + 6);
          *(_OWORD *)(a3 + 56) = *(_OWORD *)((char *)v57 + 56);
          v58[1] = 0;
          v58[2] = 0;
          void *v58 = 0;
          *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)v57 + 72);
          *(void *)(a3 + 88) = *((void *)v57 + 11);
          v11[1] = 0;
          void v11[2] = 0;
          *uint64_t v11 = 0;
          *(unsigned char *)(a3 + 96) = *((unsigned char *)v57 + 96);

          goto LABEL_108;
        }
        LOBYTE(v136[0]) = 0;
        if ((dword_100A14720 - 19) > 0x7BC)
        {
          __int16 v85 = 0;
          v207[7] = 0;
          *(void *)&v136[1] = 0;
          if (dword_100A14720 < 0x13) {
            goto LABEL_173;
          }
        }
        else
        {
          v207[7] = *(unsigned char *)(a1 + 144);
          *(void *)&v136[1] = 0;
          if ((dword_100A14720 - 22) < 0x7BA)
          {
            __int16 v85 = 3;
LABEL_173:
            HIWORD(v136[0]) = v85;
            v207[4] = *(unsigned char *)(a1 + 144);
            sub_1000369B8((uint64_t *)v137, (uint64_t)&v206);
            if (_os_feature_enabled_impl())
            {
              LOBYTE(v138) = *(unsigned char *)(a1 + 144);
              long long v180 = xmmword_1007BA8EC;
              int v181 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v180);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
              if (_os_feature_enabled_impl())
              {
                long long v178 = xmmword_1007BA900;
                int v179 = 0;
                sub_100035F98((__n128 *)buf, (__n128 *)&v178);
                sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
              }
            }
            LOWORD(v136[2]) = 30;
            int v95 = *(unsigned __int8 *)(a1 + 144);
            if (*(unsigned char *)(a1 + 144)) {
              __int16 v96 = 300;
            }
            else {
              __int16 v96 = 966;
            }
            WORD1(v136[2]) = v96;
            if (!v95 && dword_100A14720 < 0x13) {
              goto LABEL_181;
            }
            goto LABEL_182;
          }
        }
        __int16 v85 = 2;
        goto LABEL_173;
      case 65547:
      case 65548:
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x100129C01010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        BYTE2(v136[0]) = 1;
        uint64_t v28 = sub_100035F54();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v28 + 384))(v28) & 1) != 0
          || (uint64_t v29 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v29 + 376))(v29)))
        {
          uint64_t v30 = sub_100035F54();
          v207[7] = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 376))(v30);
          uint64_t v31 = sub_100035F54();
          LOBYTE(v136[0]) = (*(uint64_t (**)(uint64_t))(*(void *)v31 + 376))(v31);
          LODWORD(v136[2]) = 1966110;
          HIWORD(v136[0]) = 0;
          uint64_t v32 = *((void *)&v137[0] + 1);
          if (*((void *)&v137[0] + 1) >= *(void *)&v137[1])
          {
            uint64_t v36 = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
          }
          else
          {
            **((void **)&v137[0] + 1) = (id)v206.n128_u64[0];
            *(void *)(v32 + 8) = (id)v206.n128_u64[1];
            *(_OWORD *)(v32 + 16) = *(_OWORD *)v207;
            long long v34 = *(_OWORD *)&v207[32];
            long long v33 = *(_OWORD *)&v207[48];
            long long v35 = *(_OWORD *)&v207[16];
            *(_OWORD *)(v32 + 78) = *(_OWORD *)&v207[62];
            *(_OWORD *)(v32 + 48) = v34;
            *(_OWORD *)(v32 + 64) = v33;
            *(_OWORD *)(v32 + 32) = v35;
            uint64_t v36 = v32 + 96;
          }
          *((void *)&v137[0] + 1) = v36;
          if (_os_feature_enabled_impl())
          {
            long long v176 = xmmword_1007BA8EC;
            int v177 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v176);
            double v69 = *(_OWORD **)&v137[2];
            if (*(void *)&v137[2] >= *((void *)&v137[2] + 1))
            {
              unint64_t v91 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v137[2] - *((void *)&v137[1] + 1)) >> 2);
              unint64_t v92 = v91 + 1;
              if (v91 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              if (0x999999999999999ALL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2) > v92) {
                unint64_t v92 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2) >= 0x666666666666666) {
                unint64_t v93 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v93 = v92;
              }
              if (v93) {
                unint64_t v94 = (char *)sub_10003767C((uint64_t)&v137[2] + 8, v93);
              }
              else {
                unint64_t v94 = 0;
              }
              uint64_t v121 = &v94[20 * v91];
              int v122 = &v94[20 * v93];
              long long v123 = *(_OWORD *)buf;
              *((_DWORD *)v121 + 4) = v195;
              *(_OWORD *)uint64_t v121 = v123;
              BOOL v71 = v121 + 20;
              CFAbsoluteTime v125 = (char *)*((void *)&v137[1] + 1);
              os_signpost_id_t v124 = *(char **)&v137[2];
              if (*(void *)&v137[2] != *((void *)&v137[1] + 1))
              {
                do
                {
                  long long v126 = *(_OWORD *)(v124 - 20);
                  *((_DWORD *)v121 - 1) = *((_DWORD *)v124 - 1);
                  *(_OWORD *)(v121 - 20) = v126;
                  v121 -= 20;
                  v124 -= 20;
                }
                while (v124 != v125);
                os_signpost_id_t v124 = (char *)*((void *)&v137[1] + 1);
              }
              *((void *)&v137[1] + 1) = v121;
              *(void *)&v137[2] = v71;
              *((void *)&v137[2] + 1) = v122;
              if (v124) {
                operator delete(v124);
              }
            }
            else
            {
              long long v70 = *(_OWORD *)buf;
              *(_DWORD *)(*(void *)&v137[2] + 16) = v195;
              *double v69 = v70;
              BOOL v71 = (char *)v69 + 20;
            }
            *(void *)&v137[2] = v71;
            if (_os_feature_enabled_impl())
            {
              long long v174 = xmmword_1007BA900;
              int v175 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v174);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            }
          }
        }
        else
        {
          v207[7] = (dword_100A14720 - 19) < 0x7BD;
          LOBYTE(v136[0]) = v207[7];
          LODWORD(v136[2]) = 1966110;
          HIWORD(v136[0]) = 0;
          sub_1000369B8((uint64_t *)v137, (uint64_t)&v206);
          if (_os_feature_enabled_impl())
          {
            long long v172 = xmmword_1007BA8EC;
            int v173 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v172);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            if (_os_feature_enabled_impl())
            {
              long long v170 = xmmword_1007BA900;
              int v171 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v170);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            }
          }
        }
        if (a2 == 65547)
        {
          *((void *)&v136[1] + 1) = 6000;
        }
        else
        {
          uint64_t v127 = sub_100035F54();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v127 + 384))(v127) & 1) == 0)
          {
            *(void *)&v136[1] = 39000;
            if ((a2 - 65548) >= 2) {
              unsigned __int16 v128 = 0;
            }
            else {
              unsigned __int16 v128 = 63;
            }
            if (qword_1009F8158 != -1) {
              dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
            }
            char v129 = sub_100053CC0((uint64_t)off_1009F8150, v128, 1u);
            if (~v129 & 6) == 0 || (v129)
            {
              strcpy((char *)&v136[2] + 2, "Z");
              BYTE7(v136[0]) = 1;
              BYTE4(v136[2]) = 1;
            }
            *((void *)&v136[1] + 1) = 120000;
            *(_WORD *)((char *)v136 + 9) = 257;
            BYTE11(v136[0]) = 1;
          }
        }
        goto LABEL_232;
      case 65549:
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x100129C01010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        uint64_t v45 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v45 + 384))(v45)) {
          goto LABEL_121;
        }
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
        }
        char v46 = sub_100053CC0((uint64_t)off_1009F8150, 0x3Fu, 1u);
        v207[7] = 1;
        LOBYTE(v136[0]) = 1;
        BYTE2(v136[0]) = 1;
        if (!*(unsigned char *)(a1 + 144))
        {
LABEL_121:
          double v72 = 0;
          uint64_t v73 = *((void *)&v140[2] + 1);
          *(void *)(a3 + 64) = *(void *)&v140[1];
          long long v74 = v139[1];
          *(_OWORD *)a3 = v139[0];
          *(_OWORD *)(a3 + 16) = v74;
          *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v139[1] + 12);
          *(_OWORD *)(a3 + 48) = v140[0];
          memset(v140, 0, 24);
          *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v140[1] + 8);
          *(void *)(a3 + 88) = v73;
          memset((char *)&v140[1] + 8, 0, 24);
          *(unsigned char *)(a3 + 96) = v141;
        }
        else
        {
          char v47 = v46;
          uint64_t v48 = sub_100035F54();
          int v49 = (*(uint64_t (**)(uint64_t))(*(void *)v48 + 376))(v48);
          LOWORD(v136[2]) = 30;
          if (v49)
          {
            strcpy((char *)&v136[2] + 2, "(");
          }
          else
          {
            if ((v47 & 3) != 0)
            {
              if ((v47 & 5) != 0) {
                __int16 v120 = 90;
              }
              else {
                __int16 v120 = 60;
              }
              WORD1(v136[2]) = v120;
              BYTE7(v136[0]) = 1;
              BYTE4(v136[2]) = 1;
            }
            else
            {
              WORD1(v136[2]) = 30;
            }
            *(_DWORD *)((char *)v136 + 9) = 16843009;
          }
          HIWORD(v136[0]) = 0;
          *(void *)&v136[1] = 0;
          sub_1000369B8((uint64_t *)v137, (uint64_t)&v206);
          if (_os_feature_enabled_impl())
          {
            long long v168 = xmmword_1007BA8EC;
            int v169 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v168);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            if (_os_feature_enabled_impl())
            {
              long long v166 = xmmword_1007BA900;
              int v167 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v166);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            }
          }
          DWORD2(v136[2]) = 1;
          BYTE8(v136[0]) = 1;
          long long v134 = v136[1];
          *(_OWORD *)a3 = v136[0];
          *(_OWORD *)(a3 + 16) = v134;
          *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
          *(_OWORD *)(a3 + 48) = v137[0];
          *(void *)(a3 + 64) = *(void *)&v137[1];
          memset(v137, 0, 24);
          *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v137[1] + 8);
          *(void *)(a3 + 88) = *((void *)&v137[2] + 1);
          memset((char *)&v137[1] + 8, 0, 24);
          *(unsigned char *)(a3 + 96) = v138;
          double v72 = (void *)v206.n128_u64[1];
        }

        goto LABEL_108;
      case 65550:
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x101129C01010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        LOBYTE(v136[0]) = 1;
        BYTE2(v136[0]) = 1;
        LODWORD(v136[2]) = 19660830;
        HIWORD(v136[0]) = 0;
        *((void *)&v137[0] + 1) = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
        if (_os_feature_enabled_impl())
        {
          long long v164 = xmmword_1007BA8EC;
          int v165 = 0;
          sub_100035F98((__n128 *)buf, (__n128 *)&v164);
          sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
          if (_os_feature_enabled_impl())
          {
            long long v162 = xmmword_1007BA900;
            int v163 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v162);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
          }
        }
        *((void *)&v136[1] + 1) = 60000;
        DWORD2(v136[2]) = 1;
        BYTE8(v136[0]) = 1;
        long long v44 = v136[1];
        *(_OWORD *)a3 = v136[0];
        *(_OWORD *)(a3 + 16) = v44;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
        *(_OWORD *)(a3 + 48) = v137[0];
        *(void *)(a3 + 64) = *(void *)&v137[1];
        memset(v137, 0, 24);
        *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v137[1] + 8);
        *(void *)(a3 + 88) = *((void *)&v137[2] + 1);
        memset((char *)&v137[1] + 8, 0, 24);
        *(unsigned char *)(a3 + 96) = v138;

        goto LABEL_108;
      case 65551:
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x101129C01010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        LOBYTE(v136[0]) = 1;
        LODWORD(v136[2]) = 2621470;
        HIWORD(v136[0]) = 0;
        *((void *)&v136[1] + 1) = 6000;
        *((void *)&v137[0] + 1) = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
        if (_os_feature_enabled_impl())
        {
          long long v160 = xmmword_1007BA8EC;
          int v161 = 0;
          sub_100035F98((__n128 *)buf, (__n128 *)&v160);
          sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
          if (_os_feature_enabled_impl())
          {
            long long v158 = xmmword_1007BA900;
            int v159 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v158);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
          }
        }
        goto LABEL_232;
      case 65552:
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x101129C01010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        LOBYTE(v136[0]) = 1;
        HIWORD(v136[0]) = 0;
        *((void *)&v136[1] + 1) = 60000;
        int v50 = *(unsigned __int8 *)(a1 + 144);
        BYTE5(v136[0]) = v50 ^ 1;
        if (v50)
        {
          *((void *)&v137[0] + 1) = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
          if (_os_feature_enabled_impl())
          {
            long long v156 = xmmword_1007BA8EC;
            int v157 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v156);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            if (_os_feature_enabled_impl())
            {
              long long v154 = xmmword_1007BA900;
              int v155 = 0;
              sub_100035F98((__n128 *)buf, (__n128 *)&v154);
              sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
            }
          }
          LODWORD(v136[2]) = 5898270;
          long long v6 = v137[0];
          long long v51 = v137[1];
          long long v52 = v137[2];
          char v53 = v138;
          char v54 = (void *)v206.n128_u64[1];
        }
        else
        {
          char v54 = 0;
          LODWORD(v136[2]) = 0;
          char v53 = 1;
          long long v51 = 0uLL;
          long long v52 = 0uLL;
        }
        DWORD2(v136[2]) = 1;
        BYTE8(v136[0]) = 1;
        long long v90 = v136[1];
        *(_OWORD *)a3 = v136[0];
        *(_OWORD *)(a3 + 16) = v90;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
        memset(v137, 0, 24);
        *(_OWORD *)(a3 + 48) = v6;
        *(_OWORD *)(a3 + 64) = v51;
        *(_OWORD *)(a3 + 80) = v52;
        memset((char *)&v137[1] + 8, 0, 24);
        *(unsigned char *)(a3 + 96) = v53;

        goto LABEL_108;
      case 65553:
        if (!*(unsigned char *)(a1 + 144)) {
          goto LABEL_83;
        }
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x101129C00010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        *((void *)&v137[0] + 1) = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
        if (_os_feature_enabled_impl())
        {
          LOBYTE(v138) = 0;
          long long v152 = xmmword_1007BA8EC;
          int v153 = 0;
          sub_100035F98((__n128 *)buf, (__n128 *)&v152);
          sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
          if (_os_feature_enabled_impl())
          {
            long long v150 = xmmword_1007BA900;
            int v151 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v150);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
          }
        }
        goto LABEL_24;
      case 65554:
        __int16 v208 = 0;
        __n128 v206 = 0uLL;
        *(_OWORD *)uint64_t v207 = 0uLL;
        *(void *)&v207[1] = 0x101129C01010101;
        *(_WORD *)&v207[9] = 513;
        *(void *)&v207[12] = 0xFFFF0000FFFFLL;
        *(_DWORD *)&v207[20] = 0xFFFF;
        memset(&v207[24], 0, 54);
        LOBYTE(v136[0]) = 1;
        LODWORD(v136[2]) = 1966110;
        HIWORD(v136[0]) = 0;
        *((void *)&v137[0] + 1) = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
        if (_os_feature_enabled_impl())
        {
          long long v148 = xmmword_1007BA8EC;
          int v149 = 0;
          sub_100035F98((__n128 *)buf, (__n128 *)&v148);
          sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
          if (_os_feature_enabled_impl())
          {
            long long v146 = xmmword_1007BA900;
            int v147 = 0;
            sub_100035F98((__n128 *)buf, (__n128 *)&v146);
            sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
          }
        }
LABEL_232:
        DWORD2(v136[2]) = 1;
        BYTE8(v136[0]) = 1;
        long long v130 = v136[1];
        *(_OWORD *)a3 = v136[0];
        *(_OWORD *)(a3 + 16) = v130;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
        *(_OWORD *)(a3 + 48) = v137[0];
        *(void *)(a3 + 64) = *(void *)&v137[1];
        memset(v137, 0, 24);
        *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v137[1] + 8);
        *(void *)(a3 + 88) = *((void *)&v137[2] + 1);
        memset((char *)&v137[1] + 8, 0, 24);
        *(unsigned char *)(a3 + 96) = v138;

        goto LABEL_108;
      case 65555:
      case 65556:
      case 65557:
      case 65558:
        goto LABEL_54;
      default:
        switch(a2)
        {
          case 2147418112:
            LODWORD(v136[2]) = 1966110;
            HIWORD(v136[0]) = 0;
            LOWORD(v136[0]) = 0;
            goto LABEL_101;
          case 2147418113:
            LODWORD(v136[2]) = 1966110;
            HIWORD(v136[0]) = 0;
            LOWORD(v136[0]) = 256;
            *(void *)&v136[1] = 0;
            BYTE4(v136[0]) = *(unsigned char *)(a1 + 144) ^ 1;
            char v24 = 1;
            BYTE8(v136[0]) = 1;
            long long v63 = *(_OWORD *)((char *)&v136[1] + 12);
            long long v64 = v136[1];
            *(_OWORD *)a3 = v136[0];
            *(_OWORD *)(a3 + 16) = v64;
            goto LABEL_104;
          case 2147418114:
            LODWORD(v136[2]) = 1966110;
            HIWORD(v136[0]) = 0;
            __int16 v61 = 256;
            goto LABEL_100;
          case 2147418115:
            LODWORD(v136[2]) = 1966110;
            HIWORD(v136[0]) = 0;
            __int16 v61 = 257;
LABEL_100:
            LOWORD(v136[0]) = v61;
LABEL_101:
            *(void *)&v136[1] = 0;
            goto LABEL_103;
          case 2147418116:
            LODWORD(v136[2]) = 1966110;
            HIWORD(v136[0]) = 0;
            LOWORD(v136[0]) = 256;
            *(void *)&v136[1] = 20000;
            char v24 = 1;
            BYTE8(v136[0]) = 1;
            *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
            long long v60 = v136[1];
            *(_OWORD *)a3 = v136[0];
            *(_OWORD *)(a3 + 16) = v60;
            goto LABEL_105;
          case 2147418117:
            LODWORD(v136[2]) = 1966110;
            HIWORD(v136[0]) = 0;
            LOWORD(v136[0]) = 256;
            *(void *)&v136[1] = 0;
            char v24 = 1;
            BYTE3(v136[0]) = 1;
            BYTE8(v136[0]) = 1;
            long long v65 = v136[1];
            *(_OWORD *)a3 = v136[0];
            *(_OWORD *)(a3 + 16) = v65;
            *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
            *(void *)(a3 + 48) = 0;
            *(void *)(a3 + 56) = 0;
            memset(v137, 0, 24);
            goto LABEL_106;
          case 2147418118:
            LODWORD(v136[2]) = 1966110;
            HIWORD(v136[0]) = 0;
            LOWORD(v136[0]) = 257;
            *(void *)&v136[1] = 0;
            __n128 v211 = (__n128)0xFF0000000002uLL;
            int v212 = 0;
            sub_100035F98(&v206, &v211);
            __int16 v66 = *(__n128 **)&v137[2];
            if (*(void *)&v137[2] >= *((void *)&v137[2] + 1))
            {
              unint64_t v86 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v137[2] - *((void *)&v137[1] + 1)) >> 2);
              unint64_t v87 = v86 + 1;
              if (v86 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              if (0x999999999999999ALL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2) > v87) {
                unint64_t v87 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2) >= 0x666666666666666) {
                unint64_t v88 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v88 = v87;
              }
              if (v88) {
                long long v89 = (char *)sub_10003767C((uint64_t)&v137[2] + 8, v88);
              }
              else {
                long long v89 = 0;
              }
              uint64_t v98 = (__n128 *)&v89[20 * v86];
              long long v99 = &v89[20 * v88];
              __n128 v100 = v206;
              v98[1].n128_u32[0] = *(_DWORD *)v207;
              *uint64_t v98 = v100;
              __int16 v68 = &v98[1].n128_i8[4];
              long long v102 = (char *)*((void *)&v137[1] + 1);
              long long v101 = *(char **)&v137[2];
              if (*(void *)&v137[2] != *((void *)&v137[1] + 1))
              {
                do
                {
                  __n128 v103 = *(__n128 *)(v101 - 20);
                  v98[-1].n128_u32[3] = *((_DWORD *)v101 - 1);
                  *(__n128 *)((char *)v98 - 20) = v103;
                  uint64_t v98 = (__n128 *)((char *)v98 - 20);
                  v101 -= 20;
                }
                while (v101 != v102);
                long long v101 = (char *)*((void *)&v137[1] + 1);
              }
              *((void *)&v137[1] + 1) = v98;
              *(void *)&v137[2] = v68;
              *((void *)&v137[2] + 1) = v99;
              if (v101) {
                operator delete(v101);
              }
            }
            else
            {
              __n128 v67 = v206;
              *(_DWORD *)(*(void *)&v137[2] + 16) = *(_DWORD *)v207;
              *__int16 v66 = v67;
              __int16 v68 = &v66[1].n128_i8[4];
            }
            *(void *)&v137[2] = v68;
            __n128 v209 = (__n128)0xFF0100000002uLL;
            int v210 = 0;
            sub_100035F98(&v206, &v209);
            long long v104 = *(__n128 **)&v137[2];
            if (*(void *)&v137[2] >= *((void *)&v137[2] + 1))
            {
              unint64_t v107 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)&v137[2] - *((void *)&v137[1] + 1)) >> 2);
              unint64_t v108 = v107 + 1;
              if (v107 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                abort();
              }
              if (0x999999999999999ALL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2) > v108) {
                unint64_t v108 = 0x999999999999999ALL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2);
              }
              if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v137[2] + 1) - *((void *)&v137[1] + 1)) >> 2) >= 0x666666666666666) {
                unint64_t v109 = 0xCCCCCCCCCCCCCCCLL;
              }
              else {
                unint64_t v109 = v108;
              }
              if (v109) {
                uint64_t v110 = (char *)sub_10003767C((uint64_t)&v137[2] + 8, v109);
              }
              else {
                uint64_t v110 = 0;
              }
              int v111 = (__n128 *)&v110[20 * v107];
              int v112 = &v110[20 * v109];
              __n128 v113 = v206;
              v111[1].n128_u32[0] = *(_DWORD *)v207;
              *int v111 = v113;
              unint64_t v106 = &v111[1].n128_i8[4];
              __int16 v115 = (char *)*((void *)&v137[1] + 1);
              int v114 = *(char **)&v137[2];
              if (*(void *)&v137[2] != *((void *)&v137[1] + 1))
              {
                do
                {
                  __n128 v116 = *(__n128 *)(v114 - 20);
                  v111[-1].n128_u32[3] = *((_DWORD *)v114 - 1);
                  *(__n128 *)((char *)v111 - 20) = v116;
                  int v111 = (__n128 *)((char *)v111 - 20);
                  v114 -= 20;
                }
                while (v114 != v115);
                int v114 = (char *)*((void *)&v137[1] + 1);
              }
              *((void *)&v137[1] + 1) = v111;
              *(void *)&v137[2] = v106;
              *((void *)&v137[2] + 1) = v112;
              if (v114) {
                operator delete(v114);
              }
            }
            else
            {
              __n128 v105 = v206;
              *(_DWORD *)(*(void *)&v137[2] + 16) = *(_DWORD *)v207;
              *long long v104 = v105;
              unint64_t v106 = &v104[1].n128_i8[4];
            }
            BYTE8(v136[0]) = 1;
            long long v117 = v136[1];
            *(_OWORD *)a3 = v136[0];
            *(_OWORD *)(a3 + 16) = v117;
            *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
            *(_OWORD *)(a3 + 48) = v137[0];
            long long v118 = v137[1];
            memset(v137, 0, 24);
            *(_OWORD *)(a3 + 64) = v118;
            uint64_t v119 = *((void *)&v137[2] + 1);
            *(void *)(a3 + 80) = v106;
            *(void *)(a3 + 88) = v119;
            memset((char *)&v137[1] + 8, 0, 24);
            goto LABEL_39;
          case 2147418119:
            LODWORD(v136[2]) = 1966110;
            HIWORD(v136[0]) = 0;
            LOWORD(v136[0]) = 256;
            *((void *)&v136[1] + 1) = 10000;
LABEL_103:
            char v24 = 1;
            BYTE8(v136[0]) = 1;
            long long v62 = v136[1];
            *(_OWORD *)a3 = v136[0];
            *(_OWORD *)(a3 + 16) = v62;
            long long v63 = *(_OWORD *)((char *)&v136[1] + 12);
LABEL_104:
            *(_OWORD *)(a3 + 28) = v63;
LABEL_105:
            *(void *)(a3 + 48) = 0;
            *(void *)(a3 + 56) = 0;
            memset(v137, 0, 24);
LABEL_106:
            *(void *)(a3 + 64) = 0;
            *(void *)(a3 + 72) = 0;
            *(void *)(a3 + 80) = 0;
            *(void *)(a3 + 88) = 0;
            memset((char *)&v137[1] + 8, 0, 24);
            break;
          default:
            if (a2 == 269)
            {
              BYTE4(v136[0]) = 1;
              BYTE8(v136[0]) = 1;
              DWORD2(v136[2]) = 1;
            }
            goto LABEL_54;
        }
        goto LABEL_107;
    }
  }
  if (a2 != 259)
  {
    if (a2 != 265)
    {
      if (a2 == 268)
      {
        if (*(unsigned char *)(a1 + 144))
        {
          uint64_t v7 = sub_100035F54();
          if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 328))(v7))
          {
            if (qword_1009F8158 != -1) {
              dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
            }
            char v8 = sub_100053CC0((uint64_t)off_1009F8150, 0xFFFFu, 1u);
            LODWORD(v136[2]) = 2621470;
            *(_WORD *)((char *)v136 + 9) = 257;
            BYTE11(v136[0]) = 1;
            *((void *)&v136[1] + 1) = 5000;
            LODWORD(v136[0]) = 0x1000000;
            if (~v8 & 6) == 0 || (v8)
            {
              strcpy((char *)&v136[2] + 2, "Z");
              BYTE7(v136[0]) = 1;
              BYTE4(v136[2]) = 1;
            }
            BYTE8(v136[0]) = 1;
            long long v9 = *(_OWORD *)((char *)&v136[1] + 12);
            long long v10 = v136[1];
            *(_OWORD *)a3 = v136[0];
            *(_OWORD *)(a3 + 16) = v10;
            *(_OWORD *)(a3 + 28) = v9;
            *(_OWORD *)(a3 + 48) = v137[0];
            *(void *)(a3 + 64) = *(void *)&v137[1];
            memset(v137, 0, 24);
            *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v137[1] + 8);
            *(void *)(a3 + 88) = *((void *)&v137[2] + 1);
            memset((char *)&v137[1] + 8, 0, 24);
            goto LABEL_39;
          }
          long long v6 = v140[0];
          long long v25 = v140[1];
          long long v26 = v140[2];
          char v24 = v141;
        }
        else
        {
          char v24 = 1;
          long long v25 = 0uLL;
          long long v26 = 0uLL;
        }
        long long v27 = v139[1];
        *(_OWORD *)a3 = v139[0];
        *(_OWORD *)(a3 + 16) = v27;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v139[1] + 12);
        memset(v140, 0, 24);
        *(_OWORD *)(a3 + 48) = v6;
        *(_OWORD *)(a3 + 64) = v25;
        *(_OWORD *)(a3 + 80) = v26;
        memset((char *)&v140[1] + 8, 0, 24);
        goto LABEL_107;
      }
LABEL_54:
      long long v43 = v136[1];
      *(_OWORD *)a3 = v136[0];
      *(_OWORD *)(a3 + 16) = v43;
      *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
      *(void *)(a3 + 48) = 0;
      *(void *)(a3 + 56) = 0;
      *(void *)(a3 + 64) = 0;
      *(void *)(a3 + 72) = 0;
      memset(v137, 0, 24);
      *(void *)(a3 + 80) = 0;
      *(void *)(a3 + 88) = 0;
      memset((char *)&v137[1] + 8, 0, 24);
LABEL_84:
      char v24 = 1;
      goto LABEL_107;
    }
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
    }
    char v19 = sub_100053CC0((uint64_t)off_1009F8150, 0x6Fu, 0);
    LOWORD(v136[2]) = 30;
    uint64_t v20 = sub_100035F54();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v20 + 328))(v20))
    {
      if ((~v19 & 6) != 0)
      {
LABEL_37:
        strcpy((char *)&v136[2] + 2, "(");
LABEL_38:
        LODWORD(v136[0]) = 16843009;
        *(void *)&v136[1] = 0;
        WORD4(v136[0]) = 257;
        BYTE10(v136[0]) = 1;
        DWORD2(v136[2]) = 1;
        long long v23 = v136[1];
        *(_OWORD *)a3 = v136[0];
        *(_OWORD *)(a3 + 16) = v23;
        *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
        *(_OWORD *)(a3 + 48) = v137[0];
        *(void *)(a3 + 64) = *(void *)&v137[1];
        memset(v137, 0, 24);
        *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v137[1] + 8);
        *(void *)(a3 + 88) = *((void *)&v137[2] + 1);
        memset((char *)&v137[1] + 8, 0, 24);
LABEL_39:
        char v24 = v138;
LABEL_107:
        *(unsigned char *)(a3 + 96) = v24;
        goto LABEL_108;
      }
    }
    else
    {
      uint64_t v21 = sub_100035F54();
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v21 + 424))(v21) || (v19 & 4) == 0 || (v19 & 2) == 0) {
        goto LABEL_37;
      }
    }
    strcpy((char *)&v136[2] + 2, "<");
    uint64_t v22 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v22 + 648))(v22)) {
      BYTE4(v136[2]) = 1;
    }
    goto LABEL_38;
  }
  if (!*(unsigned char *)(a1 + 144))
  {
LABEL_83:
    long long v55 = v139[1];
    *(_OWORD *)a3 = v139[0];
    *(_OWORD *)(a3 + 16) = v55;
    *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v139[1] + 12);
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 56) = 0;
    *(void *)(a3 + 64) = 0;
    *(void *)(a3 + 72) = 0;
    memset(v140, 0, 24);
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    memset((char *)&v140[1] + 8, 0, 24);
    goto LABEL_84;
  }
  __int16 v208 = 0;
  __n128 v206 = 0uLL;
  *(_OWORD *)uint64_t v207 = 0uLL;
  *(void *)&v207[1] = 0x101079C00010101;
  *(_WORD *)&v207[9] = 513;
  *(void *)&v207[12] = 0xFFFF0000FFFFLL;
  *(_DWORD *)&v207[20] = 0xFFFF;
  memset(&v207[24], 0, 54);
  *((void *)&v137[0] + 1) = sub_100036A40((uint64_t *)v137, (uint64_t)&v206);
  if (_os_feature_enabled_impl())
  {
    LOBYTE(v138) = 0;
    long long v144 = xmmword_1007BA8EC;
    int v145 = 0;
    sub_100035F98((__n128 *)buf, (__n128 *)&v144);
    sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
    if (_os_feature_enabled_impl())
    {
      long long v142 = xmmword_1007BA900;
      int v143 = 0;
      sub_100035F98((__n128 *)buf, (__n128 *)&v142);
      sub_100035FAC((void **)&v137[1] + 1, (long long *)buf);
    }
  }
LABEL_24:
  HIWORD(v136[0]) = 0;
  LOWORD(v136[0]) = 257;
  *(void *)&v136[1] = 0;
  BYTE4(v136[0]) = 1;
  BYTE8(v136[0]) = 1;
  LODWORD(v136[2]) = 19660830;
  DWORD2(v136[2]) = 1;
  long long v18 = v136[1];
  *(_OWORD *)a3 = v136[0];
  *(_OWORD *)(a3 + 16) = v18;
  *(_OWORD *)(a3 + 28) = *(_OWORD *)((char *)&v136[1] + 12);
  *(_OWORD *)(a3 + 48) = v137[0];
  *(void *)(a3 + 64) = *(void *)&v137[1];
  memset(v137, 0, 24);
  *(_OWORD *)(a3 + 72) = *(_OWORD *)((char *)&v137[1] + 8);
  *(void *)(a3 + 88) = *((void *)&v137[2] + 1);
  memset((char *)&v137[1] + 8, 0, 24);
  *(unsigned char *)(a3 + 96) = v138;

LABEL_108:
  if (*((void *)&v137[1] + 1))
  {
    *(void *)&v137[2] = *((void *)&v137[1] + 1);
    operator delete(*((void **)&v137[1] + 1));
  }
  v206.n128_u64[0] = (unint64_t)v137;
  sub_100035EAC((void ***)&v206);
  if (*((void *)&v140[1] + 1))
  {
    *(void *)&v140[2] = *((void *)&v140[1] + 1);
    operator delete(*((void **)&v140[1] + 1));
  }
  *(void *)&v136[0] = v140;
  sub_100035EAC((void ***)v136);
}

void sub_100035CE0(_Unwind_Exception *a1)
{
}

void sub_100035EAC(void ***a1)
{
  uint64_t v2 = (uint64_t *)*a1;
  if (*v2)
  {
    sub_100035F00((uint64_t)v2, *v2);
    int v3 = **a1;
    operator delete(v3);
  }
}

void sub_100035F00(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 8); i != a2; i -= 96)
  {

    uint64_t v5 = *(void **)(i - 96);
  }
  *(void *)(a1 + 8) = a2;
}

uint64_t sub_100035F54()
{
  if (qword_100A12498 != -1) {
    dispatch_once(&qword_100A12498, &stru_1009A96B0);
  }
  return qword_100A12490;
}

__n128 sub_100035F98(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u32[0] = a2[1].n128_u32[0];
  *a1 = result;
  return result;
}

void sub_100035FAC(void **a1, long long *a2)
{
  long long v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= (unint64_t)v6)
  {
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (void)*a1) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - (unsigned char *)*a1) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x666666666666666) {
      unint64_t v13 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      long long v14 = (char *)sub_10003767C(v4, v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = &v14[20 * v10];
    long long v16 = &v14[20 * v13];
    long long v17 = *a2;
    *((_DWORD *)v15 + 4) = *((_DWORD *)a2 + 4);
    *(_OWORD *)long long v15 = v17;
    long long v9 = v15 + 20;
    char v19 = (char *)*a1;
    long long v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        long long v20 = *(_OWORD *)(v18 - 20);
        *((_DWORD *)v15 - 1) = *((_DWORD *)v18 - 1);
        *(_OWORD *)(v15 - 20) = v20;
        v15 -= 20;
        v18 -= 20;
      }
      while (v18 != v19);
      long long v18 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    long long v8 = *a2;
    *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
    *(_OWORD *)unint64_t v7 = v8;
    long long v9 = (char *)(v7 + 20);
  }
  a1[1] = v9;
}

void sub_1000360D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 64);
  for (uint64_t i = *(void *)(a1 + 72); i != v3; sub_100036858(a1 + 80, i))
    i -= 96;
  *(void *)(a1 + 72) = v3;
  uint64_t v4 = a1 + 240;
  int v5 = 0;
  sub_10003615C((uint64_t)&v4, 0x100uLL);
  uint64_t v4 = a1 + 208;
  int v5 = 0;
  sub_10003615C((uint64_t)&v4, 0x100uLL);
}

void sub_10003615C(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    long long v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

uint64_t sub_10003620C()
{
  if (qword_100A12640 != -1) {
    dispatch_once(&qword_100A12640, &stru_1009ABC08);
  }
  return byte_100A12638;
}

_DWORD *sub_100036250(_DWORD *result, long long *a2)
{
  uint64_t v3 = result;
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(result + 77) = *(long long *)((char *)a2 + 28);
  *(_OWORD *)(result + 70) = v4;
  *(_OWORD *)(result + 74) = v5;
  if (result + 70 != (_DWORD *)a2)
  {
    sub_1000362D8((uint64_t *)result + 41, *((void *)a2 + 6), *((void *)a2 + 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 7) - *((void *)a2 + 6)) >> 5));
    __n128 result = sub_10003366C((void *)v3 + 44, *((long long **)a2 + 9), *((long long **)a2 + 10), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 10) - *((void *)a2 + 9)) >> 2));
  }
  *((unsigned char *)v3 + 376) = *((unsigned char *)a2 + 96);
  return result;
}

void sub_1000362D8(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = (uint64_t)(a1 + 2);
  long long v9 = (id *)*a1;
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) < a4)
  {
    sub_1006F571C(a1);
    if (a4 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    sub_1000376C4(a1, v11);
    uint64_t v12 = sub_10003775C(v8, a2, a3, a1[1]);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - (uint64_t)v9) >> 5) < a4)
  {
    uint64_t v13 = a2 + 32 * ((a1[1] - (uint64_t)v9) >> 5);
    sub_100036434((int)&v15, a2, v13, v9);
    uint64_t v12 = sub_10003775C(v8, v13, a3, a1[1]);
LABEL_11:
    a1[1] = v12;
    return;
  }
  sub_100036434((int)&v16, a2, a3, v9);
  sub_100035F00((uint64_t)a1, v14);
}

void sub_100036424(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10003642C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100036434(int a1, uint64_t a2, uint64_t a3, id *location)
{
  uint64_t v5 = a2;
  if (a2 == a3) {
    return a2;
  }
  uint64_t v6 = a3;
  do
  {
    objc_storeStrong(location, *(id *)v5);
    objc_storeStrong(location + 1, *(id *)(v5 + 8));
    *((_OWORD *)location + 1) = *(_OWORD *)(v5 + 16);
    long long v7 = *(_OWORD *)(v5 + 32);
    long long v8 = *(_OWORD *)(v5 + 48);
    long long v9 = *(_OWORD *)(v5 + 64);
    *(_OWORD *)((char *)location + 78) = *(_OWORD *)(v5 + 78);
    *((_OWORD *)location + 3) = v8;
    *((_OWORD *)location + 4) = v9;
    *((_OWORD *)location + 2) = v7;
    location += 12;
    v5 += 96;
  }
  while (v5 != v6);
  return v6;
}

void sub_1000364C4(uint64_t a1, void *a2, unsigned int a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, void *a12, char a13, char a14, char a15, char a16, char a17, void *a18, int a19, int a20,int a21)
{
  id v22 = a2;
  sub_1000371CC((uint64_t)v36, v22, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, a15, a16, a17, a18, a19,
    a20,
    a21);
  unint64_t v23 = *(void *)(a1 + 72);
  if (v23 >= *(void *)(a1 + 80))
  {
    uint64_t v24 = sub_1000A8448((uint64_t *)(a1 + 64), (uint64_t *)v36);
  }
  else
  {
    sub_100036748(a1 + 80, *(void *)(a1 + 72), (uint64_t *)v36);
    uint64_t v24 = v23 + 96;
    *(void *)(a1 + 72) = v23 + 96;
  }
  *(void *)(a1 + 72) = v24;

  uint64_t v38 = &off_100998428;
  if (v39) {
    sub_1000368F4(v39);
  }
  v36[2] = &off_100998428;
  if (v37) {
    sub_1000368F4(v37);
  }

  id v25 = *(id *)(a1 + 152);
  long long v26 = +[NSMutableSet setWithSet:v25];

  [v26 addObject:v22];
  long long v27 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v26;

  if (a9 == 1)
  {
    unint64_t v28 = (unint64_t)a3 >> 6;
    uint64_t v29 = 1 << a3;
    *(void *)(a1 + 8 * v28 + 208) |= 1 << a3;
  }
  else
  {
    *(unsigned char *)(a1 + 272) = 1;
    unint64_t v28 = (unint64_t)a3 >> 6;
    uint64_t v29 = 1 << a3;
  }
  *(void *)(a1 + 8 * v28 + 240) |= v29;
}

void sub_100036704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  sub_1000A83B4((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_100036748(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = *a3;
  *a3 = 0;
  *(void *)a2 = v5;
  *(_WORD *)(a2 + 8) = *((_WORD *)a3 + 4);
  uint64_t v6 = a3[3];
  *(void *)(a2 + 16) = &off_100998428;
  *(void *)(a2 + 24) = v6;
  if (v6) {
    sub_100037354(v6);
  }
  uint64_t v7 = a3[5];
  *(void *)(a2 + 32) = &off_100998428;
  *(void *)(a2 + 40) = v7;
  if (v7) {
    sub_100037354(v7);
  }
  int v8 = *((_DWORD *)a3 + 12);
  *(unsigned char *)(a2 + 52) = *((unsigned char *)a3 + 52);
  *(_DWORD *)(a2 + 48) = v8;
  uint64_t v9 = a3[7];
  a3[7] = 0;
  *(void *)(a2 + 56) = v9;
  LODWORD(v9) = *((_DWORD *)a3 + 16);
  *(unsigned char *)(a2 + 68) = *((unsigned char *)a3 + 68);
  *(_DWORD *)(a2 + 64) = v9;
  uint64_t v10 = a3[9];
  a3[9] = 0;
  *(void *)(a2 + 72) = v10;
  uint64_t v11 = a3[10];
  *(_DWORD *)(a2 + 88) = *((_DWORD *)a3 + 22);
  *(void *)(a2 + 80) = v11;
}

void sub_10003682C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  long long v4 = *(atomic_uint **)(v1 + 24);
  if (v4) {
    sub_1000368F4(v4);
  }

  _Unwind_Resume(a1);
}

void sub_100036858(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 32) = &off_100998428;
  uint64_t v3 = *(atomic_uint **)(a2 + 40);
  if (v3) {
    sub_1000368F4(v3);
  }
  *(void *)(a2 + 16) = &off_100998428;
  long long v4 = *(atomic_uint **)(a2 + 24);
  if (v4) {
    sub_1000368F4(v4);
  }
  uint64_t v5 = *(void **)a2;
}

void sub_1000368F4(atomic_uint *a1)
{
  if ((int)atomic_fetch_add_explicit(a1 + 2, 0, memory_order_relaxed) <= 0x3FFFFFFF)
  {
    int add_explicit = atomic_fetch_add_explicit(a1 + 2, 0xFFFFFFFF, memory_order_relaxed);
    if (add_explicit <= 0)
    {
      uint64_t v3 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
        sub_1007588E8(v3);
      }
    }
    else if (a1 && add_explicit == 1)
    {
      uint64_t v2 = *(void (**)(void))(*(void *)a1 + 8);
      v2();
    }
  }
}

void sub_1000369A4()
{
}

uint64_t sub_1000369B8(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >= a1[2])
  {
    uint64_t result = sub_100036A40(a1, a2);
  }
  else
  {
    *(void *)unint64_t v4 = *(id *)a2;
    *(void *)(v4 + 8) = *(id *)(a2 + 8);
    *(_OWORD *)(v4 + 16) = *(_OWORD *)(a2 + 16);
    long long v6 = *(_OWORD *)(a2 + 48);
    long long v5 = *(_OWORD *)(a2 + 64);
    long long v7 = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(v4 + 78) = *(_OWORD *)(a2 + 78);
    *(_OWORD *)(v4 + 48) = v6;
    *(_OWORD *)(v4 + 64) = v5;
    *(_OWORD *)(v4 + 32) = v7;
    uint64_t result = v4 + 96;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_100036A40(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 5);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x155555555555555) {
    unint64_t v10 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  v18[4] = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_100037714(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[96 * v3];
  v18[0] = v11;
  v18[1] = v12;
  v18[3] = &v11[96 * v10];
  *(void *)uint64_t v12 = *(id *)a2;
  *((void *)v12 + 1) = *(id *)(a2 + 8);
  *((_OWORD *)v12 + 1) = *(_OWORD *)(a2 + 16);
  long long v14 = *(_OWORD *)(a2 + 48);
  long long v13 = *(_OWORD *)(a2 + 64);
  long long v15 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(v12 + 78) = *(_OWORD *)(a2 + 78);
  *((_OWORD *)v12 + 3) = v14;
  *((_OWORD *)v12 + 4) = v13;
  *((_OWORD *)v12 + 2) = v15;
  void v18[2] = v12 + 96;
  sub_100036B68(a1, v18);
  uint64_t v16 = a1[1];
  sub_100036E90((uint64_t)v18);
  return v16;
}

void sub_100036B54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100036E90((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100036B68(uint64_t *result, void *a2)
{
  uint64_t v3 = *result;
  uint64_t v2 = result[1];
  unint64_t v4 = (_OWORD *)a2[1];
  while (v2 != v3)
  {
    long long v5 = *(_OWORD *)(v2 - 96);
    v2 -= 96;
    *(void *)uint64_t v2 = 0;
    *(void *)(v2 + 8) = 0;
    *(v4 - 6) = v5;
    v4 -= 6;
    v4[1] = *(_OWORD *)(v2 + 16);
    long long v6 = *(_OWORD *)(v2 + 32);
    long long v7 = *(_OWORD *)(v2 + 48);
    long long v8 = *(_OWORD *)(v2 + 64);
    *(_OWORD *)((char *)v4 + 78) = *(_OWORD *)(v2 + 78);
    v4[3] = v7;
    void v4[4] = v8;
    void v4[2] = v6;
  }
  a2[1] = v4;
  uint64_t v9 = *result;
  _DWORD *result = (uint64_t)v4;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t **sub_100036BE4(uint64_t **a1, unsigned int *a2, _DWORD *a3)
{
  long long v6 = a1 + 1;
  long long v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        long long v8 = (uint64_t **)v5;
        unsigned int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        long long v5 = *v8;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      long long v5 = v8[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v10 + 7) = *a3;
    sub_100036CA0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_100036CA0(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  long long v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  uint64_t result = sub_100036CF8(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

uint64_t *sub_100036CF8(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      uint64_t v3 = (uint64_t *)v2[2];
      unint64_t v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), long long v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            unsigned int v9 = (uint64_t **)a2[2];
          }
          else
          {
            unsigned int v9 = (uint64_t **)v2[1];
            uint64_t v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              void v10[2] = (uint64_t)v2;
              uint64_t v3 = (uint64_t *)v2[2];
            }
            void v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *unsigned int v9 = v2;
            v2[2] = (uint64_t)v9;
            uint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *uint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), long long v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          uint64_t *v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            uint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          uint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        uint64_t *v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *long long v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

uint64_t sub_100036E90(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100036EC8(uint64_t a1, uint64_t a2)
{
  for (uint64_t i = *(void *)(a1 + 16); i != a2; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
  }
}

uint64_t sub_100036F24()
{
  if (qword_100A12630 != -1) {
    dispatch_once(&qword_100A12630, &stru_1009ABBE8);
  }
  return byte_100A12628;
}

uint64_t sub_100036F68(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D4A28;
  block[3] = &unk_100997528;
  block[4] = a1;
  if (qword_100A12760 != -1) {
    dispatch_once(&qword_100A12760, block);
  }
  return byte_100A12758;
}

uint64_t sub_100036FF8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D8E30;
  block[3] = &unk_100997528;
  block[4] = a1;
  if (qword_100A128A8 != -1) {
    dispatch_once(&qword_100A128A8, block);
  }
  return byte_100A128A0;
}

uint64_t sub_100037088(_DWORD *a1)
{
  uint64_t v1 = 25;
  if ((a1[178] - 2001) >= 0x7CF)
  {
    if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 3544))(a1)) {
      return 25;
    }
    else {
      return 22;
    }
  }
  return v1;
}

uint64_t sub_1000370F4()
{
  if (qword_100A12600 != -1) {
    dispatch_once(&qword_100A12600, &stru_1009ABB88);
  }
  return byte_100A125F8;
}

uint64_t sub_100037138(uint64_t a1)
{
  if (!_os_feature_enabled_impl() || (*(_DWORD *)(a1 + 712) - 22) > 3) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 352);

  return v2();
}

uint64_t sub_1000371CC(uint64_t a1, void *a2, char a3, char a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, void *a12, char a13, char a14, char a15, char a16, char a17, void *a18, int a19, int a20,int a21)
{
  id v28 = a2;
  id v29 = a12;
  id v30 = a18;
  id v31 = v28;
  *(void *)a1 = v31;
  *(unsigned char *)(a1 + 8) = a3;
  *(unsigned char *)(a1 + 9) = a4;
  uint64_t v32 = *(void *)(a5 + 8);
  *(void *)(a1 + 16) = &off_100998428;
  *(void *)(a1 + 24) = v32;
  if (v32) {
    sub_100037354(v32);
  }
  uint64_t v33 = *(void *)(a6 + 8);
  *(void *)(a1 + 32) = &off_100998428;
  *(void *)(a1 + 40) = v33;
  if (v33) {
    sub_100037354(v33);
  }
  *(unsigned char *)(a1 + 48) = a7;
  *(unsigned char *)(a1 + 49) = a8;
  *(unsigned char *)(a1 + 50) = a9;
  *(unsigned char *)(a1 + 51) = a10;
  *(unsigned char *)(a1 + 52) = a11;
  *(void *)(a1 + 56) = v29;
  *(unsigned char *)(a1 + 64) = a13;
  *(unsigned char *)(a1 + 65) = a14;
  *(unsigned char *)(a1 + 66) = a15;
  *(unsigned char *)(a1 + 67) = a16;
  *(unsigned char *)(a1 + 68) = a17;
  *(void *)(a1 + 72) = v30;
  *(_DWORD *)(a1 + 80) = a19;
  *(_DWORD *)(a1 + 84) = a20;
  *(_DWORD *)(a1 + 88) = a21;

  return a1;
}

void sub_10003731C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v5;
  uint64_t v7 = *(atomic_uint **)(v1 + 24);
  if (v7) {
    sub_1000368F4(v7);
  }

  _Unwind_Resume(a1);
}

void sub_100037354(uint64_t a1)
{
  if ((int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 0, memory_order_relaxed) <= 0x3FFFFFFF
    && (int)atomic_fetch_add_explicit((atomic_uint *volatile)(a1 + 8), 1u, memory_order_relaxed) <= 0)
  {
    uint64_t v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100758864(v1);
    }
  }
}

uint64_t sub_1000373BC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 != (void *)(a1 + 2048))
  {
    int v3 = 0;
    while (1)
    {
      uint64_t v4 = v1[5];
      uint64_t v5 = *(void *)(v4 + 8);
      if (*(_DWORD *)(v5 + 168))
      {
        uint64_t v17 = 0;
        *(_OWORD *)__p = 0u;
        long long v16 = 0u;
        long long v14 = 0u;
        uint64_t v6 = *(void *)(v4 + 8);
        long long v13 = *(_OWORD *)(v6 + 280);
        __p[0] = 0;
        long long v14 = 0uLL;
        sub_1000375CC(&v14, *(void *)(v6 + 328), *(void *)(v6 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v6 + 336) - *(void *)(v6 + 328)) >> 5));
        __p[1] = 0;
        long long v16 = 0uLL;
        sub_100037564((char *)&__p[1], *(long long **)(v6 + 352), *(long long **)(v6 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v6 + 360) - *(void *)(v6 + 352)) >> 2));
        LOBYTE(v17) = *(unsigned char *)(v6 + 376);
        if (BYTE8(v13)) {
          BOOL v7 = HIWORD(v13) == 0;
        }
        else {
          BOOL v7 = 1;
        }
        int v8 = !v7;
        if (__p[1])
        {
          *(void **)&long long v16 = __p[1];
          operator delete(__p[1]);
        }
        v3 |= v8;
        long long v18 = (void **)&v14;
        sub_100035EAC(&v18);
        uint64_t v5 = *(void *)(v4 + 8);
      }
      BOOL v9 = *(unsigned char *)(v5 + 122) != 0;
      if ((*(unsigned char *)(v5 + 242) & 4) != 0 && !*(unsigned char *)(v5 + 122)) {
        break;
      }
      uint64_t v10 = (void *)v1[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v1[2];
          BOOL v7 = *v11 == (void)v1;
          uint64_t v1 = v11;
        }
        while (!v7);
      }
      v3 |= v9;
      uint64_t v1 = v11;
      if (v11 == v2) {
        return v3 & 1;
      }
    }
  }
  LOBYTE(v3) = 0;
  return v3 & 1;
}

void sub_10003754C(_Unwind_Exception *a1)
{
  *(void *)(v2 - 88) = v1;
  sub_100035EAC((void ***)(v2 - 88));
  _Unwind_Resume(a1);
}

char *sub_100037564(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10003762C(result, a4);
    uint64_t v7 = *((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2;
      *(_DWORD *)(v7 + 16) = *((_DWORD *)a2 + 4);
      *(_OWORD *)uint64_t v7 = v8;
      v7 += 20;
      a2 = (long long *)((char *)a2 + 20);
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void *sub_1000375CC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_1000376C4(result, a4);
    uint64_t result = (void *)sub_10003775C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100037624(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_10003762C(void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    abort();
  }
  uint64_t result = (char *)sub_10003767C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *sub_10003767C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    sub_1000616DC();
  }
  return operator new(20 * a2);
}

char *sub_1000376C4(void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    abort();
  }
  uint64_t result = (char *)sub_100037714((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[96 * v4];
  return result;
}

void *sub_100037714(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    sub_1000616DC();
  }
  return operator new(96 * a2);
}

uint64_t sub_10003775C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *(void *)a4 = *(id *)v6;
      *(void *)(a4 + 8) = *(id *)(v6 + 8);
      *(_OWORD *)(a4 + 16) = *(_OWORD *)(v6 + 16);
      long long v8 = *(_OWORD *)(v6 + 48);
      long long v7 = *(_OWORD *)(v6 + 64);
      long long v9 = *(_OWORD *)(v6 + 32);
      *(_OWORD *)(a4 + 78) = *(_OWORD *)(v6 + 78);
      *(_OWORD *)(a4 + 48) = v8;
      *(_OWORD *)(a4 + 64) = v7;
      *(_OWORD *)(a4 + 32) = v9;
      a4 += 96;
      v6 += 96;
    }
    while (v6 != a3);
  }
  return a4;
}

uint64_t sub_1000377E0(uint64_t a1, unsigned __int8 *a2)
{
  BOOL v281 = (sub_1000373BC(a1) & 1) != 0 || sub_100055AE4(a1);
  uint64_t v309 = a1;
  BOOL v285 = sub_100055AE4(a1);
  uint64_t v3 = sub_100035F54();
  unsigned int v279 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 616))(v3);
  uint64_t v4 = *(void *)sub_100035F54();
  unsigned int v278 = (*(uint64_t (**)(void))(v4 + 648))();
  uint64_t v5 = *(void *)sub_100035F54();
  unsigned int v288 = (*(uint64_t (**)(void))(v5 + 824))();
  uint64_t v6 = *(void *)sub_10003FB34();
  int v282 = (*(uint64_t (**)(void))(v6 + 2664))();
  uint64_t v304 = +[NSMutableDictionary dictionary];
  *(_WORD *)a2 = 0;
  a2[2] = 0;
  *((_DWORD *)a2 + 2) = 0;
  *((_WORD *)a2 + 6) = 0;
  *(_DWORD *)(a2 + 14) = 256;
  a2[18] = 0;
  *((_DWORD *)a2 + 5) = 0;
  uint64_t v275 = (unsigned __int16 *)(a2 + 20);
  *((_WORD *)a2 + 12) = 0;
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
  }
  uint64_t v7 = a1;
  uint64_t v8 = sub_100053CC0((uint64_t)off_1009F8150, 0, 1u);
  if (v8)
  {
    long long v9 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 134217984;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "coexStateBitmap:0x%llX", buf, 0xCu);
    }
  }
  int v315 = 0;
  uint64_t v10 = sub_10003FFD4();
  if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v10 + 120))(v10, &v315)) {
    BOOL v11 = 1;
  }
  else {
    BOOL v11 = v315 == 0;
  }
  int v12 = !v11;
  int v272 = v12;
  uint64_t v305 = +[NSMutableArray array];
  long long v13 = *(void **)(v309 + 2040);
  long long v14 = &xpc_activity_set_state_ptr;
  if (v13 != (void *)(v309 + 2048))
  {
    BOOL v276 = 0;
    int v290 = 0;
    char v277 = 0;
    uint64_t v283 = 0;
    uint64_t v15 = 0;
    uint64_t v274 = 0;
    int v273 = 0;
    char v280 = 0;
    char v303 = 0;
    unsigned __int16 v299 = 0;
    char v289 = 0;
    int v306 = 0;
    char v300 = 0;
    int v286 = 0;
    unsigned int v287 = 3;
    uint64_t v284 = 4;
    double v16 = 0.0;
    double v17 = 0.0;
    uint64_t v297 = 3;
    char v296 = 1;
    while (1)
    {
      uint64_t v307 = v15;
      int v18 = *(_DWORD *)(*(void *)(v13[5] + 8) + 168);
      memset(&buf[16], 0, 88);
      *(_OWORD *)buf = 0u;
      uint64_t v19 = *(void *)(v13[5] + 8);
      long long v20 = *(_OWORD *)(v19 + 296);
      *(_OWORD *)buf = *(_OWORD *)(v19 + 280);
      *(_OWORD *)&uint8_t buf[16] = v20;
      *(_OWORD *)&buf[28] = *(_OWORD *)(v19 + 308);
      sub_1000375CC(&buf[48], *(void *)(v19 + 328), *(void *)(v19 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v19 + 336) - *(void *)(v19 + 328)) >> 5));
      memset(&buf[72], 0, 24);
      sub_100037564(&buf[72], *(long long **)(v19 + 352), *(long long **)(v19 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v19 + 360) - *(void *)(v19 + 352)) >> 2));
      buf[96] = *(unsigned char *)(v19 + 376);
      uint64_t v21 = +[NSMutableDictionary dictionary];
      id v22 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(v13[5] + 8) + 3)];
      [v21 setObject:v22 forKeyedSubscript:@"isAllowedInScreenOff"];

      unint64_t v23 = +[NSNumber numberWithBool:sub_10003AE34(v13[5])];
      [v21 setObject:v23 forKeyedSubscript:@"allowDupes"];

      uint64_t v24 = +[NSNumber numberWithUnsignedInt:0];
      [v21 setObject:v24 forKeyedSubscript:@"window"];

      id v25 = +[NSNumber numberWithUnsignedInt:0];
      [v21 setObject:v25 forKeyedSubscript:@"interval"];

      long long v26 = +[NSNumber numberWithBool:0];
      [v21 setObject:v26 forKeyedSubscript:@"active"];

      long long v27 = +[NSNumber numberWithBool:sub_10003B140(v13[5])];
      [v21 setObject:v27 forKeyedSubscript:@"requiresActiveScan"];

      id v28 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v13[5] + 81) == 32];
      [v21 setObject:v28 forKeyedSubscript:@"daemon"];

      id v29 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v13[5] + 81) == 16];
      [v21 setObject:v29 forKeyedSubscript:@"ForegroundApp"];

      id v30 = +[NSNumber numberWithBool:sub_10003AE20(v13[5])];
      [v21 setObject:v30 forKeyedSubscript:@"isAnyHWObjectDiscoveryEnabled"];

      id v31 = +[NSNumber numberWithDouble:v16];
      [v21 setObject:v31 forKeyedSubscript:@"HWADVBufferWindowMs"];

      uint64_t v32 = +[NSNumber numberWithDouble:v17];
      [v21 setObject:v32 forKeyedSubscript:@"HWADVBufferIntervalMs"];

      uint64_t v33 = +[NSNumber numberWithBool:sub_10003B134(v13[5])];
      [v21 setObject:v33 forKeyedSubscript:@"isRangeScan"];

      long long v34 = +[NSNumber numberWithBool:sub_10003AE40(v13[5])];
      [v21 setObject:v34 forKeyedSubscript:@"isPriorityCritical"];

      long long v35 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(v13[5] + 8) + 142)];
      [v21 setObject:v35 forKeyedSubscript:@"holdPowerAssert"];

      uint64_t v36 = +[NSNumber numberWithBool:*(unsigned __int8 *)(*(void *)(v13[5] + 8) + 143)];
      [v21 setObject:v36 forKeyedSubscript:@"isContactTracing"];

      uint64_t v37 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v13[5] + 208)];
      [v21 setObject:v37 forKeyedSubscript:@"scanAgentType"];

      uint64_t v38 = +[NSNumber numberWithInt:*(unsigned int *)(v13[5] + 96)];
      [v21 setObject:v38 forKeyedSubscript:@"agentScanLevel"];

      long long v39 = [v14[269] stringWithUTF8String:sub_10003E508(v18)];
      [v21 setObject:v39 forKeyedSubscript:@"usecase"];

      if (buf[8])
      {
        id v40 = v14[269];
        sub_100041198((uint64_t)buf);
        id v41 = v350[9] >= 0 ? v349 : *(unsigned char **)v349;
        uint64_t v42 = [v40 stringWithUTF8String:v41];
        [v21 setObject:v42 forKeyedSubscript:@"usecaseParams"];

        if ((v350[9] & 0x80000000) != 0) {
          operator delete(*(void **)v349);
        }
      }
      long long v43 = v14[269];
      sub_10003AE4C(v13[4], (uint64_t)v349);
      if (v350[9] >= 0) {
        long long v44 = v349;
      }
      else {
        long long v44 = *(unsigned char **)v349;
      }
      uint64_t v45 = [v43 stringWithUTF8String:v44];
      [v304 setObject:v21 forKeyedSubscript:v45];

      if ((v350[9] & 0x80000000) != 0) {
        operator delete(*(void **)v349);
      }
      if (!sub_10003FB78(v13[5])) {
        goto LABEL_175;
      }
      ++v303;
      uint64_t v46 = v13[5];
      if (!*(unsigned char *)(*(void *)(v46 + 8) + 3) && *(_DWORD *)(v309 + 1964) == 2) {
        goto LABEL_175;
      }
      BOOL v47 = sub_10003AE20(v46);
      uint64_t v48 = v13[5];
      uint64_t v49 = *(void *)(v48 + 8);
      if (v47)
      {
        int v50 = *(unsigned __int8 *)(v49 + 120);
        if (*(unsigned char *)(v49 + 120))
        {
          unsigned int v52 = *(_DWORD *)(v49 + 128);
          unsigned int v51 = *(_DWORD *)(v49 + 132);
          uint64_t v53 = *(unsigned __int8 *)(v49 + 136);
        }
        else
        {
          uint64_t v53 = 0;
          unsigned int v51 = 0;
          unsigned int v52 = 0;
        }
        float v59 = v17;
        if (v59 < (float)v52) {
          float v59 = (float)v52;
        }
        double v17 = v59;
        float v60 = v16;
        if (v60 < (float)v51) {
          float v60 = (float)v51;
        }
        double v16 = v60;
        __int16 v61 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(v13[4], (uint64_t)v347);
          long long v62 = v347;
          if (v348 < 0) {
            long long v62 = *(unsigned char **)v347;
          }
          *(_DWORD *)long long v349 = 136447746;
          *(void *)&v349[4] = v62;
          *(_WORD *)&v349[12] = 2048;
          *(double *)long long v350 = v17;
          *(_WORD *)&v350[8] = 2048;
          double v351 = v16;
          __int16 v352 = 1024;
          unsigned int v353 = v52;
          __int16 v354 = 1024;
          unsigned int v355 = v51;
          __int16 v356 = 1024;
          int v357 = v53;
          __int16 v358 = 1024;
          int v359 = v50;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "ObjectDiscovery Client (%{public}s) HWADVBufferIntervalMs:%f HWADVBufferWindowMs:%f _interval:%d _window:%d _active:%d specifiedParams:%d", v349, 0x38u);
          if (v348 < 0) {
            operator delete(*(void **)v347);
          }
          uint64_t v48 = v13[5];
          uint64_t v49 = *(void *)(v48 + 8);
        }
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        BOOL v285 = 0;
        if (*(void *)(v49 + 16) != *(void *)(v49 + 8)) {
          v290 |= sub_10003AE34(v48);
        }
        goto LABEL_121;
      }
      if (*(unsigned char *)(v49 + 143))
      {
        if (*(unsigned char *)(v309 + 1255))
        {
          float v54 = v17;
          if (v54 < 965.62) {
            float v54 = 965.62;
          }
          double v17 = v54;
          float v55 = v16;
          if (v55 < 30.0) {
            float v55 = 30.0;
          }
          double v16 = v55;
          uint64_t v56 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C(v13[4], (uint64_t)v347);
            long long v57 = v347;
            if (v348 < 0) {
              long long v57 = *(unsigned char **)v347;
            }
            *(_DWORD *)long long v349 = 136446722;
            *(void *)&v349[4] = v57;
            *(_WORD *)&v349[12] = 2048;
            *(double *)long long v350 = v17;
            *(_WORD *)&v350[8] = 2048;
            double v351 = v16;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "EN Client (%{public}s) HWADVBufferIntervalMs:%f HWADVBufferWindowMs:%f", v349, 0x20u);
            if (v348 < 0)
            {
              BOOL v58 = *(void **)v347;
              goto LABEL_73;
            }
          }
        }
        else
        {
          int v68 = *(_DWORD *)(v48 + 96);
          if ((int)v284 >= v68) {
            uint64_t v69 = v68;
          }
          else {
            uint64_t v69 = v284;
          }
          uint64_t v284 = v69;
          v290 |= sub_10003AE34(v48);
          long long v70 = qword_100A19FB0;
          if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C(v13[4], (uint64_t)v349);
            BOOL v71 = v350[9] >= 0 ? v349 : *(unsigned char **)v349;
            *(_DWORD *)long long v347 = 136446210;
            *(void *)&v347[4] = v71;
            _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "EN Client (%{public}s) ", v347, 0xCu);
            if ((v350[9] & 0x80000000) != 0)
            {
              BOOL v58 = *(void **)v349;
LABEL_73:
              operator delete(v58);
            }
          }
        }
        uint64_t v53 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        goto LABEL_121;
      }
      int v65 = *(_DWORD *)(v49 + 168);
      if (v65 == 265 || (int v66 = *(unsigned __int8 *)(v48 + 81), v66 == 32) || v66 == 16)
      {
        if (sub_10003AE34(v13[5]))
        {
          BOOL v67 = 1;
        }
        else
        {
          double v72 = *(int8x8_t **)(v13[5] + 8);
          v347[0] = 1;
          v349[0] = 0;
          BOOL v67 = sub_100041B64(v72 + 26, 0, (uint64_t)&v72[30], 0, v347) != 0;
        }
        uint64_t v73 = v13[5];
        long long v74 = *(void **)(v73 + 8);
        if (v74[2] != v74[1]
          || v74[8] == v74[9]
          || (uint64_t v87 = sub_100035F54(),
              int v88 = (*(uint64_t (**)(uint64_t))(*(void *)v87 + 592))(v87),
              uint64_t v73 = v13[5],
              v65 == 265)
          || v88 != 1)
        {
          v290 |= sub_10003AE34(v73);
        }
        else if (sub_10003AE34(v73) && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
        {
          sub_1007967E4(&v313, v314);
        }
        v277 |= v67;
        uint64_t v75 = v13[5];
        if (*(unsigned char *)(v75 + 81) == 32)
        {
          BOOL v76 = sub_100041C28(v75);
          char v77 = v65 == 265 || v76;
          uint64_t v75 = v13[5];
          if (v77)
          {
LABEL_88:
            uint64_t v49 = *(void *)(v75 + 8);
            uint64_t v80 = v309;
            if (*(unsigned char *)(v49 + 120))
            {
              uint64_t v64 = *(unsigned int *)(v49 + 128);
              uint64_t v63 = *(unsigned int *)(v49 + 132);
              uint64_t v53 = *(unsigned __int8 *)(v49 + 136);
              BOOL v276 = (v53 | v276) != 0;
              if (*(unsigned char *)(v49 + 136))
              {
                uint64_t v81 = qword_100A19E90;
                uint64_t v75 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
                if (v75)
                {
                  *(_DWORD *)long long v349 = 67109634;
                  *(_DWORD *)&v349[4] = v63;
                  *(_WORD *)&v349[8] = 1024;
                  *(_DWORD *)&v349[10] = v64;
                  *(_WORD *)long long v350 = 2082;
                  *(void *)&v350[2] = "active";
                  _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_INFO, "Daemon is requesting scan parameters %d/%d (%{public}s)", v349, 0x18u);
                }
              }
              if (v272)
              {
                uint64_t v82 = sub_100041C4C(v75, v13[5]);
                uint64_t v80 = v309;
                if (v82)
                {
                  int v83 = sub_100054800(v82, (int)((double)v64 / 0.625), (int)((double)v63 / 0.625));
                  if (v83 == 5) {
                    uint64_t v63 = 30;
                  }
                  else {
                    uint64_t v63 = v63;
                  }
                  if (v83 == 5) {
                    uint64_t v64 = 300;
                  }
                  else {
                    uint64_t v64 = v64;
                  }
                }
              }
              uint64_t v84 = v307;
              if (!v307 || v64 / v63 < (int)v283 / (int)v307)
              {
                uint64_t v84 = v63;
                uint64_t v283 = v64;
              }
              uint64_t v307 = v84;
              uint64_t v49 = *(void *)(v13[5] + 8);
              if (*(unsigned char *)(v49 + 273))
              {
                BYTE4(v274) = 1;
                if (v283)
                {
                  if (v84)
                  {
                    if (v274)
                    {
                      int v85 = v273;
                      int v86 = v274;
                      if ((int)v274 / v273 < (int)v283 / (int)v84)
                      {
                        int v85 = v84;
                        int v86 = v283;
                      }
                      int v273 = v85;
                      LODWORD(v274) = v86;
                      BYTE4(v274) = 1;
                    }
                    else
                    {
                      int v273 = v84;
                      LODWORD(v274) = v283;
                      BYTE4(v274) = 1;
                    }
                  }
                }
              }
            }
            else
            {
              uint64_t v53 = 0;
              uint64_t v63 = 0;
              uint64_t v64 = 0;
            }
            goto LABEL_119;
          }
        }
        else if (v65 == 265)
        {
          goto LABEL_88;
        }
        uint64_t v53 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
        int v78 = *(_DWORD *)(v75 + 96);
        if ((int)v284 >= v78) {
          uint64_t v79 = v78;
        }
        else {
          uint64_t v79 = v284;
        }
        uint64_t v284 = v79;
        uint64_t v49 = *(void *)(v75 + 8);
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v63 = 0;
        uint64_t v64 = 0;
      }
      uint64_t v80 = v309;
LABEL_119:
      BOOL v281 = 0;
      BOOL v285 = 0;
      if (*(unsigned char *)(v49 + 3)) {
        v280 |= *(_DWORD *)(v80 + 1964) == 2;
      }
LABEL_121:
      uint64_t v89 = sub_10003AE40(v13[5]);
      char v90 = v89;
      unsigned int v91 = v288;
      if (byte_100A14715) {
        unsigned int v91 = 0;
      }
      if (v91 != 1) {
        goto LABEL_146;
      }
      if (sub_100040DF4(v309, v13[5]))
      {
        int v306 = 1;
        uint64_t v92 = v309;
      }
      else
      {
        uint64_t v92 = v309;
        if (*(unsigned char *)(*(void *)(v13[5] + 8) + 200))
        {
          unint64_t v93 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long v349 = 0;
            _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization for double boost with allowed use cases.", v349, 2u);
          }
          int v306 = 1;
        }
      }
      if (byte_100A14716 || sub_100040774(v92, v13[5])) {
        int v286 = v282 | v306;
      }
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
      }
      uint64_t v89 = sub_1000400A8();
      if ((v306 & 1) == 0) {
        goto LABEL_143;
      }
      int v94 = v89 & 0xFFFFFFFD;
      if (v89 == 2)
      {
        uint64_t v95 = sub_10003FB34();
        uint64_t v89 = (*(uint64_t (**)(uint64_t))(*(void *)v95 + 2656))(v95);
        if (v94 == 1) {
          char v96 = 0;
        }
        else {
          char v96 = v89;
        }
        if (v96)
        {
LABEL_145:
          int v306 = 1;
          goto LABEL_146;
        }
      }
      else if (v94 != 1)
      {
        goto LABEL_145;
      }
      v286 &= v282;
      long long v97 = qword_100A19E90;
      uint64_t v89 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT);
      int v306 = 0;
      if (v89)
      {
        *(_WORD *)long long v349 = 0;
        _os_log_impl((void *)&_mh_execute_header, v97, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization is not enabled with HIDs connected.", v349, 2u);
LABEL_143:
        int v306 = 0;
      }
LABEL_146:
      if (*(unsigned char *)(v309 + 4384))
      {
        uint64_t v89 = sub_1006EC450(v89, v13[5]);
        v289 |= v89;
      }
      unsigned int v98 = sub_100040B20(v89, v13[5]);
      unsigned __int16 v99 = v299;
      if (v98 > v299) {
        unsigned __int16 v99 = v98;
      }
      unsigned __int16 v299 = v99;
      if (v296) {
        char v296 = sub_10003B134(v13[5]);
      }
      else {
        char v296 = 0;
      }
      uint64_t v100 = v13[5];
      uint64_t v101 = *(void *)(v100 + 8);
      char v102 = *(unsigned char *)(v101 + 139);
      if (!v102)
      {
        char v102 = 1;
        *(unsigned char *)(v101 + 139) = 1;
      }
      a2[15] |= v102;
      int v103 = *(_DWORD *)(v100 + 208);
      if (v103 == 3)
      {
        int v104 = v297;
      }
      else
      {
        int v104 = *(_DWORD *)(v100 + 208);
        if (v297 != 3)
        {
          if (v297 == v103) {
            int v104 = v297;
          }
          else {
            int v104 = 2;
          }
        }
      }
      unsigned int v291 = v104;
      unsigned int v287 = *(_DWORD *)(v100 + 208);
      unsigned int v105 = *(unsigned __int8 *)(v101 + 145);
      if (v105 > a2[17]) {
        a2[17] = v105;
      }
      char v294 = v90;
      uint64_t v298 = v53;
      unint64_t v106 = v14[269];
      sub_10003AE4C(v13[4], (uint64_t)v349);
      int v107 = v350[9];
      unint64_t v108 = *(unsigned char **)v349;
      id v109 = [v14[269] defaultCStringEncoding];
      if (v107 >= 0) {
        uint64_t v110 = v349;
      }
      else {
        uint64_t v110 = v108;
      }
      int v111 = [v106 stringWithCString:v110 encoding:v109];
      uint64_t v292 = v64;
      uint64_t v293 = v63;
      uint64_t v295 = v21;
      if ((v350[9] & 0x80000000) != 0) {
        operator delete(*(void **)v349);
      }
      int v112 = v14[269];
      uint64_t v113 = v13[5];
      uint64_t v114 = *(unsigned __int8 *)(*(void *)(v113 + 8) + 3);
      uint64_t v115 = sub_10003AE34(v113);
      uint64_t v116 = sub_10003B140(v13[5]);
      uint64_t v117 = v13[5];
      int v118 = *(unsigned __int8 *)(v117 + 81);
      BOOL v119 = v118 == 32;
      BOOL v120 = v118 == 16;
      BOOL v121 = sub_10003AE20(v117);
      if (sub_10003AE20(v13[5])) {
        double v122 = v16;
      }
      else {
        double v122 = 0.0;
      }
      if (sub_10003AE20(v13[5])) {
        double v123 = v17;
      }
      else {
        double v123 = 0.0;
      }
      unsigned int v124 = sub_10003B134(v13[5]);
      objc_msgSend(v112, "stringWithFormat:", @"[%@] AP:%d AD:%d(%d/%d) AS:%d RAS:%d DMN:%d FG:%d ADVBF:%d(%.0f/%.0f) Rg:%d Cri:%d pBT:%d pwrAsrt:%d CT:%d type:%d level:%d", v111, v114, v115, v293, v292, v298, v116, v119, v120, v121, *(void *)&v122, *(void *)&v123, v124, sub_10003AE40(v13[5]), v306 & 1, *(unsigned __int8 *)(*(void *)(v13[5] + 8) + 142),
        *(unsigned __int8 *)(*(void *)(v13[5] + 8) + 143),
        *(unsigned int *)(v13[5] + 208),
      CFAbsoluteTime v125 = *(unsigned int *)(v13[5] + 96));
      [v305 addObject:v125];

      uint64_t v21 = v295;
      long long v14 = &xpc_activity_set_state_ptr;

      v300 |= v294;
      uint64_t v297 = v291;
LABEL_175:

      if (*(void *)&buf[72])
      {
        *(void *)&uint8_t buf[80] = *(void *)&buf[72];
        operator delete(*(void **)&buf[72]);
      }
      *(void *)long long v349 = &buf[48];
      sub_100035EAC((void ***)v349);
      long long v126 = (void *)v13[1];
      uint64_t v15 = v307;
      uint64_t v7 = v309;
      if (v126)
      {
        do
        {
          uint64_t v127 = v126;
          long long v126 = (void *)*v126;
        }
        while (v126);
      }
      else
      {
        do
        {
          uint64_t v127 = (void *)v13[2];
          BOOL v11 = *v127 == (void)v13;
          long long v13 = v127;
        }
        while (!v11);
      }
      long long v13 = v127;
      if (v127 == (void *)(v309 + 2048)) {
        goto LABEL_186;
      }
    }
  }
  char v300 = 0;
  int v306 = 0;
  int v286 = 0;
  char v289 = 0;
  unsigned __int16 v299 = 0;
  char v303 = 0;
  char v280 = 0;
  int v273 = 0;
  uint64_t v274 = 0;
  uint64_t v15 = 0;
  char v277 = 0;
  LOBYTE(v290) = 0;
  BOOL v276 = 0;
  uint64_t v283 = 0;
  uint64_t v284 = 4;
  uint64_t v297 = 3;
  double v17 = 0.0;
  double v16 = 0.0;
  char v296 = 1;
  unsigned int v287 = 3;
LABEL_186:
  *(_DWORD *)(v7 + 3216) = v297;
  uint64_t v302 = (v303 != 0) & v296;
  uint64_t v301 = [v14[269] stringWithFormat:@"AD:%d RD:%d AS:%d PHYS:%d MSL:%d (%d/%d) PSV:%d Rg:%d Cri:%d pBT:%d pWiFi:%d pCfg:%d type:%d", v290 & 1, *(unsigned __int8 *)(v7 + 2352), v276, a2[15], v284, v15, v283, *a2, v302, v300 & 1, v306 & 1, v286 & 1, a2[17], v297];
  unsigned __int16 v128 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v129 = *(void *)(v7 + 2056);
    *(_DWORD *)buf = 134218242;
    *(void *)&uint8_t buf[4] = v129;
    *(_WORD *)&unsigned char buf[12] = 2114;
    *(void *)&buf[14] = v301;
    _os_log_impl((void *)&_mh_execute_header, v128, OS_LOG_TYPE_DEFAULT, "ScanParams: numScanAgents %lu, combined params %{public}@", buf, 0x16u);
  }
  uint64_t v308 = v15;
  int v130 = [v305 count];
  if (v130 >= -1)
  {
    uint64_t v131 = 0;
    int v132 = v130 - 1;
    uint64_t v133 = ((v130 - 1) / 3 + 1);
    int v134 = 2;
    int v135 = 1;
    do
    {
      if (v134 >= v132) {
        int v136 = v132;
      }
      else {
        int v136 = v134;
      }
      int v137 = [v305 subarrayWithRange:v131, v136 + v135];
      uint64_t v138 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        id v139 = [v137 componentsJoinedByString:@"|"];
        *(_DWORD *)buf = 138543362;
        *(void *)&uint8_t buf[4] = v139;
        _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "ScanParams: %{public}@", buf, 0xCu);
      }
      v134 += 3;
      v135 -= 3;
      v131 += 3;
      --v133;
    }
    while (v133);
  }
  if (v284 == 1)
  {
    *((_DWORD *)a2 + 1) = 3145792;
    int v140 = v308;
    char v141 = BYTE4(v274);
    goto LABEL_205;
  }
  int v140 = v308;
  char v141 = BYTE4(v274);
  if (v284 == 4)
  {
    *((_DWORD *)a2 + 1) = 3147273;
    *a2 = 1;
  }
  else
  {
    if (v284 == 3)
    {
      unsigned __int16 v142 = 480;
    }
    else
    {
      if (v284 != 2) {
        goto LABEL_205;
      }
      unsigned __int16 v142 = 96;
    }
    *((_DWORD *)a2 + 1) = v142 | 0x300000;
  }
LABEL_205:
  if (v283) {
    BOOL v143 = v140 == 0;
  }
  else {
    BOOL v143 = 1;
  }
  char v144 = !v143;
  if (v143)
  {
    unsigned int v146 = *((unsigned __int16 *)a2 + 3);
    unsigned int v145 = *((unsigned __int16 *)a2 + 2);
  }
  else
  {
    if (v276) {
      *a2 = 0;
    }
    unsigned int v145 = *((unsigned __int16 *)a2 + 2);
    unsigned int v146 = *((unsigned __int16 *)a2 + 3);
    if ((int)v283 / v140 <= (int)(v145 / v146))
    {
      unsigned int v145 = (int)((double)(int)v283 / 0.625);
      *((_WORD *)a2 + 2) = v145;
      unsigned int v146 = (int)((double)v140 / 0.625);
      *((_WORD *)a2 + 3) = v146;
    }
  }
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
  }
  BOOL v147 = sub_100053C90(off_1009F8150);
  uint64_t v148 = sub_100035F54();
  int v149 = (*(uint64_t (**)(uint64_t))(*(void *)v148 + 968))(v148);
  if ((v147 | v149 ^ 1)) {
    char v150 = 0;
  }
  else {
    char v150 = _os_feature_enabled_impl();
  }
  *(_DWORD *)long long v349 = 100;
  if ((int)v274 / v273 == *((unsigned __int16 *)a2 + 2) / *((unsigned __int16 *)a2 + 3)
    && _os_feature_enabled_impl())
  {
    v150 |= v141;
  }
  if (!v147)
  {
    uint64_t v151 = sub_100052EB4();
    unsigned int v152 = 100 * v146 / v145;
    if ((*(uint64_t (**)(uint64_t))(*(void *)v151 + 96))(v151)) {
      goto LABEL_229;
    }
    if (v284 == 1)
    {
      if (v152 < 0x32) {
        goto LABEL_229;
      }
    }
    else
    {
      if (v152 > 0x31) {
        char v156 = v144;
      }
      else {
        char v156 = 0;
      }
      if ((v156 & 1) == 0)
      {
LABEL_229:
        if (v152 < 0x22)
        {
          char v150 = 0;
        }
        else
        {
          int v153 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
          {
            LOWORD(v154) = *((_WORD *)a2 + 3);
            LOWORD(v155) = *((_WORD *)a2 + 2);
            *(_DWORD *)buf = 134219264;
            *(double *)&uint8_t buf[4] = (double)v154 * 0.625;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(double *)&buf[14] = (double)v155 * 0.625;
            *(_WORD *)&buf[22] = 1024;
            *(_DWORD *)&uint8_t buf[24] = v152;
            *(_WORD *)&buf[28] = 2048;
            *(void *)&buf[30] = 0x403E000000000000;
            *(_WORD *)&buf[38] = 2048;
            *(void *)&buf[40] = 0x4056800000000000;
            *(_WORD *)&buf[48] = 1024;
            *(_DWORD *)&buf[50] = v284;
            _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_INFO, "Limiting scan duty cycle based on other activities from %.2fms/%.2fms (scanPercentage %d)to %.2fms/%.2fms minScanLevel %d", buf, 0x36u);
          }
          *((_DWORD *)a2 + 1) = 3145872;
          v349[0] = ((3 * v152) >> 1) - 50;
        }
        goto LABEL_241;
      }
    }
    int v157 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      LOWORD(v158) = *((_WORD *)a2 + 3);
      LOWORD(v159) = *((_WORD *)a2 + 2);
      *(_DWORD *)buf = 134219264;
      *(double *)&uint8_t buf[4] = (double)v158 * 0.625;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = (double)v159 * 0.625;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&uint8_t buf[24] = v152;
      *(_WORD *)&buf[28] = 2048;
      *(void *)&buf[30] = 0x403E000000000000;
      *(_WORD *)&buf[38] = 2048;
      *(void *)&buf[40] = 0x404E000000000000;
      *(_WORD *)&buf[48] = 1024;
      *(_DWORD *)&buf[50] = v284;
      _os_log_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_INFO, "Limiting scan duty cycle based on other activities from %.2fms/%.2fms (scanPercentage %d)to %.2fms/%.2fms minScanLevel %d", buf, 0x36u);
    }
    *((_DWORD *)a2 + 1) = 3145824;
  }
LABEL_241:
  if (*(void *)(v309 + 2344))
  {
    if (qword_1009FB798 != -1) {
      dispatch_once(&qword_1009FB798, &stru_1009BF848);
    }
    int v160 = sub_10044F4E8((uint64_t)off_1009FB790);
    *((_WORD *)a2 + 2) = v160;
    *((_WORD *)a2 + 3) = 48;
    int v161 = qword_100A19FB0;
    if (os_log_type_enabled((os_log_t)qword_100A19FB0, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v160;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = 48;
      _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_INFO, "ExposureNotification scan active, setting params interval:%d window:%d", buf, 0xEu);
    }
    BOOL v281 = 0;
    char v150 = 0;
  }
  if (!*a2 && !((*(unsigned char *)(v309 + 144) != 0) | v280 & 1))
  {
    long long v162 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v162, OS_LOG_TYPE_DEFAULT, "Forcing passive scans based on screen state", buf, 2u);
    }
    *a2 = 1;
    if (*(unsigned char *)(v309 + 2246))
    {
      int v163 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        int v164 = *(unsigned __int8 *)(v309 + 2247);
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v164;
        _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEFAULT, "ForcePassiveScan is now %d", buf, 8u);
      }
      *a2 = *(unsigned char *)(v309 + 2247);
    }
  }
  if (v281)
  {
    int v165 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)buf = 134218240;
      *(double *)&uint8_t buf[4] = v17;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(double *)&buf[14] = v16;
      _os_log_impl((void *)&_mh_execute_header, v165, OS_LOG_TYPE_INFO, "ADV buffer only, overriding settings HWADVBufferIntervalMs:%f HWADVBufferWindowMs:%f", buf, 0x16u);
    }
    char v150 = 0;
    *((_WORD *)a2 + 2) = (int)(v17 / 0.625);
    *((_WORD *)a2 + 3) = (int)(v16 / 0.625);
    *a2 = 1;
  }
  uint64_t v166 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v166 + 2712))(v166))
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
    }
    if (*((unsigned char *)off_1009F8150 + 201))
    {
      unsigned int v167 = *((unsigned __int16 *)a2 + 3);
      unsigned int v168 = *((unsigned __int16 *)a2 + 2);
      if (100 * v167 / v168 >= 0xB)
      {
        int v169 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          *(_DWORD *)buf = 134219264;
          *(double *)&uint8_t buf[4] = (double)v167 * 0.625;
          *(_WORD *)&unsigned char buf[12] = 2048;
          *(double *)&buf[14] = (double)v168 * 0.625;
          *(_WORD *)&buf[22] = 1024;
          *(_DWORD *)&uint8_t buf[24] = 100 * v167 / v168;
          *(_WORD *)&buf[28] = 2048;
          *(void *)&buf[30] = 0x403E000000000000;
          *(_WORD *)&buf[38] = 2048;
          *(void *)&buf[40] = 0x4072C00000000000;
          *(_WORD *)&buf[48] = 1024;
          *(_DWORD *)&buf[50] = v284;
          _os_log_impl((void *)&_mh_execute_header, v169, OS_LOG_TYPE_INFO, "Limiting scan duty cycle due to BT ACL protect mode from %.2fms/%.2fms (scanPercentage %d)to %.2fms/%.2fms minScanLevel %d", buf, 0x36u);
        }
        *((_DWORD *)a2 + 1) = 3146208;
      }
    }
  }
  double v170 = *(double *)(v309 + 2336);
  if (v285)
  {
    if (v170 == 0.0)
    {
      CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
      *(CFAbsoluteTime *)(v309 + 2336) = Current;
      *(CFAbsoluteTime *)(v309 + 2328) = Current;
    }
  }
  else
  {
    if (v170 != 0.0)
    {
      CFAbsoluteTime v172 = CFAbsoluteTimeGetCurrent();
      *(void *)(v309 + 2304) = (unint64_t)(v172
                                                  - *(double *)(v309 + 2336)
                                                  + (double)*(unint64_t *)(v309 + 2304));
      *(CFAbsoluteTime *)(v309 + 2336) = v172;
    }
    *(void *)(v309 + 2336) = 0;
  }
  if ((v279 | v278) == 1
    && (*((unsigned __int16 *)a2 + 3) == 0xFFFF || !*((_WORD *)a2 + 3))
    && sub_1000373BC(v309))
  {
    *((_WORD *)a2 + 2) = 4800;
  }
  char v173 = v141 | v150;
  unsigned int v174 = 100 * *((unsigned __int16 *)a2 + 3) / *((unsigned __int16 *)a2 + 2);
  if (v174 < 0x1E)
  {
    if ((v306 | v286))
    {
      int v175 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        long long v176 = "No";
        if (v306) {
          int v177 = "Yes";
        }
        else {
          int v177 = "No";
        }
        *(_DWORD *)buf = 136315650;
        *(void *)&uint8_t buf[4] = v177;
        if (v286) {
          long long v176 = "Yes";
        }
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v176;
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = v174;
        _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "Do not prioritize scanning over BT %s WiFi %s for scan duty cycle %u.", buf, 0x1Cu);
      }
    }
  }
  else
  {
    a2[24] = v306 & 1;
    a2[25] = v286 & 1;
  }
  uint64_t v178 = v309;
  if (*(unsigned char *)(v309 + 4384))
  {
    unsigned int v179 = *((unsigned __int16 *)a2 + 3);
    unsigned int v180 = *((unsigned __int16 *)a2 + 2);
    double v181 = (double)v179 * 100.0 / (double)v180;
    long long v182 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v179;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v180;
      *(_WORD *)&buf[14] = 2048;
      *(double *)&uint8_t buf[16] = (double)v179 * 100.0 / (double)v180;
      *(_WORD *)&uint8_t buf[24] = 2048;
      *(void *)&buf[26] = 0x4008DAB7EC1DD343;
      *(_WORD *)&buf[34] = 1024;
      *(_DWORD *)&buf[36] = v181 > 3.10679612;
      _os_log_impl((void *)&_mh_execute_header, v182, OS_LOG_TYPE_DEFAULT, "Checking if throttling down our scan during SDP is needed window:%d interval:%d dutyCycle:%f throttledDutyCycle:%f needToThrottle:%d", buf, 0x28u);
    }
    if (v181 <= 3.10679612)
    {
      uint64_t v178 = v309;
    }
    else
    {
      int v183 = qword_100A19E90;
      uint64_t v178 = v309;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_DEFAULT, "Throttling down our scan during SDP", buf, 2u);
      }
      *((_DWORD *)a2 + 1) = 3147273;
      if (v289)
      {
        *(_DWORD *)long long v349 = 72745216;
        char v173 = 1;
      }
    }
  }
  if (!*a2)
  {
    a2[3] = (v277 & 1) == 0;
    if ((v277 & 1) == 0) {
      goto LABEL_300;
    }
    goto LABEL_299;
  }
  a2[3] = (v290 & 1) == 0;
  if (v290) {
LABEL_299:
  }
    *(unsigned char *)(v178 + 2352) = 0;
LABEL_300:
  int v184 = *((unsigned __int16 *)a2 + 2);
  if (v184 != 48)
  {
    if (*((_WORD *)a2 + 2))
    {
      int v185 = *((unsigned __int16 *)a2 + 3);
      if (*((_WORD *)a2 + 3))
      {
        if (v185 == v184)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
            sub_100796768(v185);
          }
          uint64_t v178 = v309;
          *((_DWORD *)a2 + 1) = 3145776;
        }
      }
    }
  }
  if ((v173 & (*a2 != 0)) == 0)
  {
    v349[0] = 0;
    *(_WORD *)&v349[2] = 0;
  }
  if (v299)
  {
    long long v186 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v187 = "No";
      if (v272) {
        int v187 = "Yes";
      }
      *(_DWORD *)buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v315;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v187;
      _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "powerSource %d is wall powered %s\n", buf, 0x12u);
    }
  }
  sub_100054BEC(v178, a2, v279, v278, v300 & 1, v302, (uint64_t)v349, v299);
  uint64_t v188 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t, void, void))(*(void *)v188 + 2672))(v188, *((unsigned __int16 *)a2 + 2), *((unsigned __int16 *)a2 + 3)))
  {
    a2[25] = 1;
  }
  int v189 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v190) = *((_WORD *)a2 + 3);
    *(double *)&unint64_t v191 = (double)v190;
    double v192 = *(double *)&v191 * 0.625;
    LOWORD(v191) = *((_WORD *)a2 + 2);
    *(double *)&unint64_t v193 = (double)v191;
    double v194 = *(double *)&v193 * 0.625;
    LOWORD(v193) = *((_WORD *)a2 + 4);
    double v195 = (double)v193;
    double v196 = v195 * 0.625;
    if (v279) {
      int v197 = "supported";
    }
    else {
      int v197 = "unsupported";
    }
    LOWORD(v195) = *((_WORD *)a2 + 6);
    *(double *)&unint64_t v198 = (double)*(unint64_t *)&v195;
    double v199 = *(double *)&v198 * 0.625;
    LOWORD(v198) = *((_WORD *)a2 + 5);
    double v200 = (double)v198 * 0.625;
    if (a2[14]) {
      int v201 = "concurrent";
    }
    else {
      int v201 = "non-concurrent";
    }
    if (v278) {
      long long v202 = "supported";
    }
    else {
      long long v202 = "unspported";
    }
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009BF7C8);
    }
    int v203 = *((unsigned __int8 *)off_1009F8150 + 204);
    int v204 = *(unsigned __int8 *)(v309 + 144);
    int v205 = "passive";
    if (!*a2) {
      int v205 = "active";
    }
    if (a2[3]) {
      __n128 v206 = "Enabled";
    }
    else {
      __n128 v206 = "Disabled";
    }
    int v207 = *((unsigned __int16 *)a2 + 10);
    int v208 = *((unsigned __int16 *)a2 + 11);
    __n128 v209 = "Yes";
    int v210 = a2[24];
    if (v147) {
      __n128 v211 = "Yes";
    }
    else {
      __n128 v211 = "No";
    }
    int v212 = a2[25];
    if (!a2[18]) {
      __n128 v209 = "No";
    }
    *(_DWORD *)buf = 134224642;
    *(double *)&uint8_t buf[4] = v192;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(double *)&buf[14] = v194;
    *(_WORD *)&buf[22] = 2048;
    *(double *)&uint8_t buf[24] = v196;
    *(_WORD *)&unsigned char buf[32] = 2048;
    *(double *)&buf[34] = v194;
    *(_WORD *)&buf[42] = 2082;
    *(void *)&buf[44] = v197;
    *(_WORD *)&buf[52] = 2048;
    *(double *)&buf[54] = v199;
    *(_WORD *)&buf[62] = 2048;
    *(double *)&buf[64] = v200;
    *(_WORD *)&buf[72] = 2082;
    *(void *)&buf[74] = v201;
    *(_WORD *)&buf[82] = 2082;
    *(void *)&buf[84] = v202;
    *(_WORD *)&buf[92] = 1024;
    *(_DWORD *)&buf[94] = v308;
    *(_WORD *)&buf[98] = 1024;
    *(_DWORD *)&buf[100] = v283;
    *(_WORD *)__int16 v317 = 1024;
    *(_DWORD *)&v317[2] = v203;
    *(_WORD *)uint64_t v318 = 1024;
    *(_DWORD *)&v318[2] = v147;
    __int16 v319 = 1024;
    int v320 = v149;
    __int16 v321 = 1024;
    int v322 = v173 & 1;
    __int16 v323 = 1024;
    int v324 = v280 & 1;
    __int16 v325 = 1024;
    int v326 = v204;
    __int16 v327 = 2082;
    int v328 = v205;
    __int16 v329 = 2082;
    uint64_t v330 = v206;
    __int16 v331 = 1024;
    int v332 = v284;
    __int16 v333 = 2082;
    long long v334 = v211;
    __int16 v335 = 2082;
    long long v336 = v209;
    __int16 v337 = 1024;
    int v338 = v207;
    __int16 v339 = 1024;
    int v340 = v208;
    __int16 v341 = 1024;
    int v342 = v210;
    __int16 v343 = 1024;
    int v344 = v212;
    __int16 v345 = 1024;
    int v346 = v315;
    _os_log_impl((void *)&_mh_execute_header, v189, OS_LOG_TYPE_DEFAULT, "Returning scan parameters: Main:%.2fms/%.2fms LP:%.2fms/%.2fms(%{public}s) SC:%.2fms/%.2fms/%{public}s(%{public}s) Dm:(m:%d/%d) Cond:%d:%d:%d:%d:%d Sc:%d (%{public}s) Dupfilter:%{public}s minScanLevel:%d HD:%{public}s Comp:%{public}s(%d,%d) Pri:%d/%d PS:%d", buf, 0xD8u);
  }
  if (*(unsigned char *)(v309 + 2222))
  {
    unsigned int v213 = *(unsigned __int16 *)(v309 + 2224);
    *((_WORD *)a2 + 2) = v213;
    unsigned int v214 = *(unsigned __int16 *)(v309 + 2226);
    *((_WORD *)a2 + 3) = v214;
    unsigned int v215 = *(unsigned __int16 *)(v309 + 2228);
    *((_WORD *)a2 + 4) = v215;
    unsigned __int16 v216 = *(unsigned char *)(v309 + 2230) ? *(_WORD *)(v309 + 2232) : 0;
    unsigned __int16 v217 = *(unsigned char *)(v309 + 2230) ? 0 : *(_WORD *)(v309 + 2232);
    *((_WORD *)a2 + 6) = v216;
    *((_WORD *)a2 + 5) = v217;
    int v218 = *(unsigned __int8 *)(v309 + 2234);
    a2[14] = v218;
    BOOL v219 = *(unsigned char *)(v309 + 2235) && *(unsigned char *)(v309 + 2238) != 0;
    a2[18] = v219;
    int v220 = *(unsigned char *)(v309 + 2236) ? *(unsigned __int16 *)(v309 + 2240) : 0;
    *uint64_t v275 = v220;
    int v221 = *(unsigned char *)(v309 + 2237) ? *(unsigned __int16 *)(v309 + 2242) : 0;
    *((_WORD *)a2 + 11) = v221;
    unsigned int v222 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 67112450;
      uint64_t v223 = "Yes";
      *(_DWORD *)&uint8_t buf[4] = v213;
      *(_WORD *)&uint8_t buf[8] = 2048;
      if (v218) {
        uint64_t v224 = "Yes";
      }
      else {
        uint64_t v224 = "No";
      }
      *(double *)&buf[10] = (double)v213 * 0.625;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v214;
      if (!v219) {
        uint64_t v223 = "No";
      }
      *(_WORD *)&uint8_t buf[24] = 1024;
      *(_DWORD *)&buf[26] = v215;
      *(_WORD *)&buf[30] = 1024;
      *(_DWORD *)&unsigned char buf[32] = v216;
      *(_WORD *)&buf[36] = 1024;
      *(_DWORD *)&buf[38] = v217;
      *(_WORD *)&buf[42] = 2048;
      *(double *)&buf[44] = (double)v214 * 0.625;
      *(_WORD *)&buf[52] = 2048;
      *(double *)&buf[54] = (double)v215 * 0.625;
      *(_WORD *)&buf[62] = 2048;
      *(double *)&buf[64] = (double)v216 * 0.625;
      *(_WORD *)&buf[72] = 2048;
      *(double *)&buf[74] = (double)v217 * 0.625;
      *(_WORD *)&buf[82] = 2082;
      *(void *)&buf[84] = v224;
      *(_WORD *)&buf[92] = 2082;
      *(void *)&buf[94] = v223;
      *(_WORD *)&buf[102] = 1024;
      *(_DWORD *)__int16 v317 = v220;
      *(_WORD *)&v317[4] = 1024;
      *(_DWORD *)uint64_t v318 = v221;
      _os_log_impl((void *)&_mh_execute_header, v222, OS_LOG_TYPE_DEFAULT, "Returning scan parameters (overridden with ScanCore) Interval %d(%.2fms) Window %d/%d/%d/%d(%.2fms/%.2fms/%.2fms/%.2fms) Concurrent %{public}s Compensation %{public}s percent %d query %d", buf, 0x72u);
    }
  }
  int v225 = *((unsigned __int16 *)a2 + 3);
  unsigned int v226 = *((unsigned __int16 *)a2 + 2);
  uint64_t v227 = +[NSMutableDictionary dictionary];
  uint64_t v228 = +[NSNumber numberWithBool:*a2];
  [v227 setObject:v228 forKeyedSubscript:@"scanParams.passive"];

  uint64_t v229 = +[NSNumber numberWithBool:a2[1]];
  [v227 setObject:v229 forKeyedSubscript:@"scanParams.limited"];

  uint64_t v230 = +[NSNumber numberWithBool:a2[3]];
  [v227 setObject:v230 forKeyedSubscript:@"scanParams.filterDups"];

  LOWORD(v231) = *((_WORD *)a2 + 2);
  int v232 = +[NSNumber numberWithDouble:(double)v231 * 0.625];
  [v227 setObject:v232 forKeyedSubscript:@"scanParams.interval"];

  LOWORD(v233) = *((_WORD *)a2 + 3);
  uint64_t v234 = +[NSNumber numberWithDouble:(double)v233 * 0.625];
  [v227 setObject:v234 forKeyedSubscript:@"scanParams.window"];

  LOWORD(v235) = *((_WORD *)a2 + 4);
  uint64_t v236 = +[NSNumber numberWithDouble:(double)v235 * 0.625];
  [v227 setObject:v236 forKeyedSubscript:@"scanParams.windowLPCore"];

  LOWORD(v237) = *((_WORD *)a2 + 5);
  uint64_t v238 = +[NSNumber numberWithDouble:(double)v237 * 0.625];
  [v227 setObject:v238 forKeyedSubscript:@"scanParams.windowScanCoreELNABypass"];

  LOWORD(v239) = *((_WORD *)a2 + 6);
  uint64_t v240 = +[NSNumber numberWithDouble:(double)v239 * 0.625];
  [v227 setObject:v240 forKeyedSubscript:@"scanParams.windowScanCoreELNAOn"];

  uint64_t v241 = +[NSNumber numberWithBool:a2[14]];
  [v227 setObject:v241 forKeyedSubscript:@"scanParams.concurrencyMode"];

  uint64_t v242 = +[NSNumber numberWithUnsignedChar:a2[15]];
  [v227 setObject:v242 forKeyedSubscript:@"scanParams.scanningPhys"];

  uint64_t v243 = +[NSNumber numberWithBool:a2[16]];
  [v227 setObject:v243 forKeyedSubscript:@"scanParams.retainDuplicates"];

  uint64_t v244 = +[NSNumber numberWithUnsignedChar:a2[17]];
  [v227 setObject:v244 forKeyedSubscript:@"scanParams.priorityConfig"];

  uint64_t v245 = +[NSNumber numberWithBool:a2[18]];
  [v227 setObject:v245 forKeyedSubscript:@"scanParams.isScanCoreCompensated"];

  uint64_t v246 = +[NSNumber numberWithUnsignedShort:*v275];
  [v227 setObject:v246 forKeyedSubscript:@"scanParams.scanCoreCompensationPercent"];

  uint64_t v247 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a2 + 11)];
  [v227 setObject:v247 forKeyedSubscript:@"scanParams.scanCoreCoexQueryPeriod"];

  uint64_t v248 = +[NSNumber numberWithBool:a2[24]];
  [v227 setObject:v248 forKeyedSubscript:@"scanParams.isPrioritizedOverBT"];

  uint64_t v249 = +[NSNumber numberWithBool:a2[25]];
  [v227 setObject:v249 forKeyedSubscript:@"scanParams.isPrioritizedOverWiFi"];

  uint64_t v250 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v309 + 144)];
  [v227 setObject:v250 forKeyedSubscript:@"fScreenState"];

  uint64_t v251 = +[NSNumber numberWithInt:v283];
  [v227 setObject:v251 forKeyedSubscript:@"daemonInterval"];

  __int16 v252 = +[NSNumber numberWithInt:v308];
  [v227 setObject:v252 forKeyedSubscript:@"daemonWindow"];

  int v253 = +[NSNumber numberWithInt:v284];
  [v227 setObject:v253 forKeyedSubscript:@"minScanLevel"];

  uint64_t v254 = +[NSNumber numberWithUnsignedInt:100 * v225 / v226];
  [v227 setObject:v254 forKeyedSubscript:@"scanPercentage"];

  uint64_t v255 = +[NSNumber numberWithBool:v280 & 1];
  [v227 setObject:v255 forKeyedSubscript:@"allowInPause"];

  uint64_t v256 = +[NSNumber numberWithBool:v281];
  [v227 setObject:v256 forKeyedSubscript:@"onlyDoingHWADVBuffer"];

  uint64_t v257 = +[NSNumber numberWithBool:v285];
  [v227 setObject:v257 forKeyedSubscript:@"onlyDoingENHWADVBuffer"];

  uint64_t v258 = +[NSNumber numberWithDouble:v17];
  [v227 setObject:v258 forKeyedSubscript:@"HWADVBufferIntervalMs"];

  uint64_t v259 = +[NSNumber numberWithDouble:v16];
  [v227 setObject:v259 forKeyedSubscript:@"HWADVBufferWindowMs"];

  uint64_t v260 = +[NSNumber numberWithBool:v279];
  [v227 setObject:v260 forKeyedSubscript:@"scanLPCoreEnable"];

  uint64_t v261 = +[NSNumber numberWithBool:v278];
  [v227 setObject:v261 forKeyedSubscript:@"isScanCoreEnabled"];

  char v262 = +[NSNumber numberWithBool:v288];
  [v227 setObject:v262 forKeyedSubscript:@"supportsDiscoveryScanPrioritization"];

  uint64_t v263 = +[NSNumber numberWithBool:v302];
  [v227 setObject:v263 forKeyedSubscript:@"isRangeScan"];

  uint64_t v264 = +[NSNumber numberWithBool:v300 & 1];
  [v227 setObject:v264 forKeyedSubscript:@"isPriorityCritical"];

  uint64_t v265 = +[NSNumber numberWithUnsignedInt:v297];
  [v227 setObject:v265 forKeyedSubscript:@"combinedScanAgentType"];

  uint64_t v266 = +[NSNumber numberWithUnsignedInt:v287];
  [v227 setObject:v266 forKeyedSubscript:@"scanAgentType"];

  uint64_t v267 = +[NSNumber numberWithBool:v306 & 1];
  [v227 setObject:v267 forKeyedSubscript:@"isPrioritizedOverBT"];

  uint64_t v268 = +[NSNumber numberWithBool:v286 & 1];
  [v227 setObject:v268 forKeyedSubscript:@"isPrioritizedOverWiFi"];

  uint64_t v269 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v309 + 1964)];
  [v227 setObject:v269 forKeyedSubscript:@"fObserverState"];

  [v304 setObject:v227 forKeyedSubscript:@"Controller"];
  v311[0] = _NSConcreteStackBlock;
  v311[1] = 3221225472;
  v311[2] = sub_100048810;
  v311[3] = &unk_1009BF508;
  id v270 = v304;
  id v312 = v270;
  sub_100048744((os_unfair_lock_s *)(v309 + 1872), v311);

  return 1;
}

void sub_10003A758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10003AB28(uint64_t a1)
{
  return a1;
}

void sub_10003AC68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, std::locale a12)
{
}

uint64_t sub_10003AC90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int __c)
{
  uint64_t v6 = a1;
  if (a1)
  {
    uint64_t v11 = *(void *)(a5 + 24);
    if (v11 <= a4 - a2) {
      int64_t v12 = 0;
    }
    else {
      int64_t v12 = v11 - (a4 - a2);
    }
    if (a3 - a2 >= 1 && (*(uint64_t (**)(uint64_t))(*(void *)a1 + 96))(a1) != a3 - a2) {
      return 0;
    }
    if (v12 >= 1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v18 = 0;
      sub_10026BD9C(__p, v12, __c);
      long long v13 = v18 >= 0 ? __p : (void **)__p[0];
      uint64_t v14 = (*(uint64_t (**)(uint64_t, void **, int64_t))(*(void *)v6 + 96))(v6, v13, v12);
      if (SHIBYTE(v18) < 0) {
        operator delete(__p[0]);
      }
      if (v14 != v12) {
        return 0;
      }
    }
    uint64_t v15 = a4 - a3;
    if (v15 < 1 || (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 96))(v6, a3, v15) == v15) {
      *(void *)(a5 + 24) = 0;
    }
    else {
      return 0;
    }
  }
  return v6;
}

void sub_10003AE04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10003AE20(uint64_t a1)
{
  return *(unsigned char *)(*(void *)(a1 + 8) + 122) != 0;
}

uint64_t sub_10003AE34(uint64_t a1)
{
  return **(unsigned __int8 **)(a1 + 8);
}

uint64_t sub_10003AE40(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 141);
}

uint64_t sub_10003AE4C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  if (*(char *)(a1 + 103) < 0)
  {
    sub_10003B098((unsigned char *)a2, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 80);
    *(void *)(a2 + 16) = *(void *)(a1 + 96);
  }
  return sub_10003AFB4((uint64_t)v5);
}

void sub_10003AEBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10003AED0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = a2;
  *(unsigned char *)(a1 + 8) = 0;
  sub_10003AF00(a1);
  return a1;
}

void sub_10003AF00(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_1007513D0(v2);
    }
  }
  *(unsigned char *)(a1 + 8) = 1;
  sub_10003AF60(*(pthread_mutex_t **)a1);
}

void sub_10003AF60(pthread_mutex_t *a1)
{
  if (pthread_mutex_lock(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100751300();
    }
  }
}

uint64_t sub_10003AFB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    sub_10003AFE8(a1);
  }
  return a1;
}

void sub_10003AFE8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 8))
  {
    uint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100751454(v2);
    }
  }
  *(unsigned char *)(a1 + 8) = 0;
  sub_10003B044(*(pthread_mutex_t **)a1);
}

void sub_10003B044(pthread_mutex_t *a1)
{
  if (pthread_mutex_unlock(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_100751368();
    }
  }
}

void *sub_10003B098(unsigned char *__dst, void *__src, unint64_t a3)
{
  uint64_t v5 = __dst;
  if (a3 > 0x16)
  {
    if (a3 >= 0x7FFFFFFFFFFFFFF8) {
      abort();
    }
    uint64_t v6 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17) {
      uint64_t v6 = a3 | 7;
    }
    uint64_t v7 = v6 + 1;
    uint64_t v8 = operator new(v6 + 1);
    v5[1] = a3;
    void v5[2] = v7 | 0x8000000000000000;
    *uint64_t v5 = v8;
    uint64_t v5 = v8;
  }
  else
  {
    __dst[23] = a3;
  }

  return memmove(v5, __src, a3 + 1);
}

uint64_t sub_10003B134(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 140);
}

uint64_t sub_10003B140(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 8) + 2);
}

const char *sub_10003B14C(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003B8B0(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003C014(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003C778(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003CEDC(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003D640(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003DDA4(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003E508(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003EC6C(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

const char *sub_10003F3D0(int a1)
{
  if (a1 >= 0x20000)
  {
    if (a1 >= 327680)
    {
      if (a1 > 589824)
      {
        if (a1 <= 2147418111)
        {
          switch(a1)
          {
            case 589825:
              return "FindNearbyPencil";
            case 655360:
              return "AccessDigitalHomeKey";
            case 786432:
              return "ProxControlDeviceClose";
            default:
              return "?";
          }
        }
        else
        {
          switch(a1)
          {
            case 2147418112:
              uint64_t result = "InternalTestNoLockScan";
              break;
            case 2147418113:
              uint64_t result = "InternalTestNoScreenOffScan";
              break;
            case 2147418114:
              uint64_t result = "InternalTestScanWithNoDups";
              break;
            case 2147418115:
              uint64_t result = "InternalTestScanWithDups";
              break;
            case 2147418116:
              uint64_t result = "InternalTestScanFor20Seconds";
              break;
            case 2147418117:
              uint64_t result = "InternalTestActiveScan";
              break;
            case 2147418118:
              uint64_t result = "InternalTestUUIDScan";
              break;
            case 2147418119:
              uint64_t result = "InternalTestScanFor10ClockSeconds";
              break;
            case 2147418120:
              uint64_t result = "InternalTestScanBoost";
              break;
            default:
              return "?";
          }
        }
      }
      else if (a1 > 458752)
      {
        switch(a1)
        {
          case 524288:
            uint64_t result = "ADPD";
            break;
          case 524289:
            uint64_t result = "ADPDBuffer";
            break;
          case 524290:
            uint64_t result = "MicroLocation";
            break;
          case 524291:
            uint64_t result = "MicroLocationLeech";
            break;
          default:
            if (a1 == 458753)
            {
              uint64_t result = "PrecisionFindingFindee";
            }
            else
            {
              if (a1 != 589824) {
                return "?";
              }
              uint64_t result = "FindNearbyRemote";
            }
            break;
        }
      }
      else
      {
        switch(a1)
        {
          case 393216:
            uint64_t result = "CaptiveNetworkJoin";
            break;
          case 393217:
            uint64_t result = "UseCaseSIMTransfer";
            break;
          case 393218:
            uint64_t result = "MacSetup";
            break;
          case 393219:
            uint64_t result = "AppleIDSignIn";
            break;
          case 393220:
            uint64_t result = "AppleIDSignInSettings";
            break;
          default:
            if (a1 == 327680)
            {
              uint64_t result = "RapportThirdParty";
            }
            else
            {
              if (a1 != 458752) {
                return "?";
              }
              uint64_t result = "PrecisionFindingFinder";
            }
            break;
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 131072:
          return "SharingDefault";
        case 131073:
          return "SharingPhoneAutoUnlock";
        case 131074:
          return "SharingSiriWatchAuth";
        case 131075:
          return "SharingMacAutoUnlock";
        case 131076:
          return "SharingEDTScreenOn";
        case 131077:
          return "SharingEDTWiFiDisabled";
        case 131078:
          return "SharingEDTWombatEligibleAsDefaultCamera";
        case 131079:
          return "SharingEDTWombatCameraPicker";
        case 131080:
          return "SharingWombatBackground";
        case 131081:
          return "SharingUniversalControl";
        case 131082:
          return "SharingPeopleProximity";
        case 131083:
          return "SharingEDTEnsembleOpenDisplayPrefs";
        case 131084:
          return "SharingEDTNearbydMotionStopped";
        case 131085:
          return "SharingDoubleBoostGenericScan";
        case 131086:
          return "SharingEDTIncomingAdvertisement ";
        case 131087:
          return "SharingEDTWombatStreamStart";
        case 131088:
          return "SharingOYAutoUnlock";
        case 131089:
          return "?";
        case 131090:
          return "SharingAirDrop";
        case 131091:
          return "SharingNearbyInvitationHost";
        case 131092:
          return "SharingNearbyInvitationParticipant";
        case 131093:
          return "SharingAirDropAskToAirDrop";
        case 131094:
          return "SharingAirDropTempIdentity";
        case 131095:
          return "SharingAirDropNeedsCLink";
        case 131096:
          return "SharingRemoteWidgetUpdate";
        case 131097:
          return "SharingCountryCodeUpdate";
        case 131098:
          return "SharingMacPhoneAutoUnlock";
        case 131099:
          return "SharingVisionProDiscovery";
        case 131100:
          return "SharingVisionProStateChange";
        case 131101:
          return "SharingContinuityScreen";
        case 131102:
          return "SharingEDTRemoteDisplay";
        default:
          if (a1 == 196608)
          {
            uint64_t result = "DigitalIDTSA";
          }
          else
          {
            if (a1 != 0x40000) {
              return "?";
            }
            uint64_t result = "DigitalCarKeyThirdParty";
          }
          break;
      }
    }
  }
  else if (a1 <= 0x20000)
  {
    switch(a1)
    {
      case 65536:
        uint64_t result = "FindMyAction";
        break;
      case 65537:
        uint64_t result = "FindMyBackground";
        break;
      case 65538:
        uint64_t result = "FindMyActionHELE";
        break;
      case 65539:
        uint64_t result = "FindMyBackgroundHELE";
        break;
      case 65540:
        uint64_t result = "FindMyActionTransient";
        break;
      case 65541:
        uint64_t result = "FindMyBackgroundTransient";
        break;
      case 65542:
        uint64_t result = "FindMyActionHELETransient";
        break;
      case 65543:
        uint64_t result = "FindMyBackgroundHELETransient";
        break;
      case 65544:
        uint64_t result = "FindMyNotOptedIn";
        break;
      case 65545:
        uint64_t result = "FindMyOptedIn";
        break;
      case 65546:
        uint64_t result = "FindMySepAlertsEnabled";
        break;
      case 65547:
        uint64_t result = "FindMyTemporaryAggressiveLegacy";
        break;
      case 65548:
        uint64_t result = "FindMyTemporaryLongAggressive";
        break;
      case 65549:
        uint64_t result = "FindMyBTFindingUserInitiated";
        break;
      case 65550:
        uint64_t result = "FindMyHELE";
        break;
      case 65551:
        uint64_t result = "FindMyBeaconOnDemand";
        break;
      case 65552:
        uint64_t result = "FindMyWildTimedScan";
        break;
      case 65553:
        uint64_t result = "FindMyBackgroundLeechScan";
        break;
      case 65554:
        uint64_t result = "FindMySnifferMode";
        break;
      case 65555:
        uint64_t result = "FindMyUnpair";
        break;
      case 65556:
        uint64_t result = "FindMyUnpairHELE";
        break;
      case 65557:
        uint64_t result = "FindMyPlaySound";
        break;
      case 65558:
        uint64_t result = "FindMyPlaySoundHELE";
        break;
      case 65559:
        uint64_t result = "FindMyNotOptedInBeepOnMoveWaking";
        break;
      case 65560:
        uint64_t result = "FindMyUTTransient";
        break;
      case 65561:
        uint64_t result = "FindMyUTHELETransient";
        break;
      default:
        JUMPOUT(0);
    }
  }
  else
  {
    uint64_t result = "Unspecified";
    switch(a1)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "HealthKit";
        break;
      case 2:
        uint64_t result = "HomeKit";
        break;
      case 3:
        uint64_t result = "FindMyObjectConnection";
        break;
      case 4:
        uint64_t result = "FindMyObjectConnectionTransient";
        break;
      case 5:
        uint64_t result = "MIDI";
        break;
      case 6:
        uint64_t result = "Continuity";
        break;
      case 7:
        uint64_t result = "InstantHotSpot";
        break;
      case 8:
        uint64_t result = "NearBy";
        break;
      case 9:
        uint64_t result = "Sharing";
        break;
      case 10:
        uint64_t result = "HearingSupport";
        break;
      case 11:
        uint64_t result = "Magnet";
        break;
      case 12:
        uint64_t result = "HID";
        break;
      case 13:
        uint64_t result = "LEA";
        break;
      case 14:
        uint64_t result = "External";
        break;
      case 15:
        uint64_t result = "ExternalMedical";
        break;
      case 16:
        uint64_t result = "ExternalLock";
        break;
      case 17:
        uint64_t result = "ExternalWatch";
        break;
      case 18:
        uint64_t result = "SmartRouting";
        break;
      case 19:
        uint64_t result = "DigitalID";
        break;
      case 20:
        uint64_t result = "DigitalKey";
        break;
      case 21:
        uint64_t result = "DigitalCarKey";
        break;
      case 22:
        uint64_t result = "HeySiri";
        break;
      case 23:
        uint64_t result = "ThirdPartyApp";
        break;
      case 24:
        uint64_t result = "CNJ";
        break;
      default:
        switch(a1)
        {
          case 256:
            uint64_t result = "DevicePresenceDetection";
            break;
          case 257:
            uint64_t result = "AudioBox";
            break;
          case 258:
            uint64_t result = "SIMTransfer";
            break;
          case 259:
            uint64_t result = "ProximityScreenOnLeechScan";
            break;
          case 260:
            uint64_t result = "MacMigrate";
            break;
          case 263:
            uint64_t result = "HIDUARTService";
            break;
          case 264:
            uint64_t result = "AccessibilitySwitchControlPairing";
            break;
          case 265:
            uint64_t result = "BaseBandFastConnect";
            break;
          case 266:
            uint64_t result = "SafetyAlerts";
            break;
          case 267:
            uint64_t result = "LECarPlay";
            break;
          case 268:
            uint64_t result = "TCCBluetooth";
            break;
          case 269:
            uint64_t result = "AOPBufferLeech";
            break;
          default:
            return "?";
        }
        break;
    }
  }
  return result;
}

uint64_t sub_10003FB34()
{
  if (qword_100A124E8 != -1) {
    dispatch_once(&qword_100A124E8, &stru_1009A9750);
  }
  return qword_100A124E0;
}

BOOL sub_10003FB78(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *(_DWORD *)(v2 + 168);
  memset((char *)&v25[1] + 12, 0, 32);
  memset((char *)&v25[3] + 12, 0, 28);
  long long v4 = *(_OWORD *)(v2 + 296);
  long long v24 = *(_OWORD *)(v2 + 280);
  v25[0] = v4;
  *(_OWORD *)((char *)v25 + 12) = *(_OWORD *)(v2 + 308);
  memset(&v25[2], 0, 24);
  sub_1000375CC(&v25[2], *(void *)(v2 + 328), *(void *)(v2 + 336), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v2 + 336) - *(void *)(v2 + 328)) >> 5));
  memset((char *)&v25[3] + 8, 0, 24);
  sub_100037564((char *)&v25[3] + 8, *(long long **)(v2 + 352), *(long long **)(v2 + 360), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v2 + 360) - *(void *)(v2 + 352)) >> 2));
  LOBYTE(v25[5]) = *(unsigned char *)(v2 + 376);
  uint64_t v5 = sub_10003FFD4();
  int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 184))(v5);
  uint64_t v7 = sub_10003FFD4();
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 192))(v7);
  int v9 = *(unsigned __int8 *)(a1 + 225);
  int v10 = *(unsigned __int8 *)(a1 + 81);
  if (BYTE8(v24))
  {
    if (BYTE4(v24) | BYTE5(v24))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
        sub_100796DD8();
      }
      int v11 = 0;
    }
    else
    {
      int v11 = 1;
    }
    if (BYTE1(v24)) {
      int v13 = 0;
    }
    else {
      int v13 = v6;
    }
    if (v13 == 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
        sub_100796D50();
      }
      int v11 = 0;
    }
    BOOL v12 = v11 != 0;
    if (BYTE2(v24)) {
      char v14 = 1;
    }
    else {
      char v14 = v8;
    }
    if ((v14 & 1) == 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
        sub_100796CD4();
      }
      BOOL v12 = 0;
    }
  }
  else
  {
    BOOL v12 = 1;
  }
  uint64_t v15 = qword_100A19E90;
  if (!v9 && v3 == 23 && v10 != 16)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
    {
      long long v20 = (void *)(a1 + 232);
      if (*(char *)(a1 + 255) < 0) {
        long long v20 = (void *)*v20;
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v20;
      __int16 v27 = 1024;
      LODWORD(v28) = v10;
      _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "agent %s cannot scan, CBUseCaseThirdPartyApp not allowed to scan in background getSessionState:%d", buf, 0x12u);
      BOOL v12 = 0;
      uint64_t v15 = qword_100A19E90;
    }
    else
    {
      BOOL v12 = 0;
    }
  }
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEBUG))
  {
    double v17 = (void *)(a1 + 232);
    if (*(char *)(a1 + 255) < 0) {
      double v17 = (void *)*v17;
    }
    uint64_t v18 = sub_10003EC6C(v3);
    if (v10 <= 7)
    {
      if (v10 == 2)
      {
        uint64_t v19 = "terminated";
        goto LABEL_48;
      }
      if (v10 == 4)
      {
        uint64_t v19 = "suspended";
        goto LABEL_48;
      }
    }
    else
    {
      switch(v10)
      {
        case 8:
          uint64_t v19 = "background-running";
          goto LABEL_48;
        case 16:
          uint64_t v19 = "foreground-running";
          goto LABEL_48;
        case 32:
          uint64_t v19 = "daemon";
          goto LABEL_48;
      }
    }
    uint64_t v19 = "unknown";
LABEL_48:
    sub_100041198((uint64_t)&v24);
    if (v23 >= 0) {
      uint64_t v21 = &v22;
    }
    else {
      uint64_t v21 = v22;
    }
    *(_DWORD *)buf = 136316930;
    *(void *)&uint8_t buf[4] = v17;
    __int16 v27 = 2080;
    id v28 = v18;
    __int16 v29 = 1024;
    BOOL v30 = v12;
    __int16 v31 = 1024;
    int v32 = v6;
    __int16 v33 = 1024;
    int v34 = v8;
    __int16 v35 = 1024;
    int v36 = v9;
    __int16 v37 = 2080;
    uint64_t v38 = v19;
    __int16 v39 = 2080;
    id v40 = v21;
    _os_log_debug_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEBUG, "canScanNow session:%s(%s) allowed:%d  deviceLocked:%d deviceFirstUnlocked:%d allowedInBKG:%d sessionState:%s %s", buf, 0x42u);
    if (v23 < 0) {
      operator delete(v22);
    }
  }
  if (*((void *)&v25[3] + 1))
  {
    *(void *)&v25[4] = *((void *)&v25[3] + 1);
    operator delete(*((void **)&v25[3] + 1));
  }
  *(void *)buf = &v25[2];
  sub_100035EAC((void ***)buf);
  return v12;
}

void sub_10003FF9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1000A7FA4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10003FFD4()
{
  if (qword_100A12508 != -1) {
    dispatch_once(&qword_100A12508, &stru_1009A9790);
  }
  return qword_100A12500;
}

uint64_t sub_100040018(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 1448);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1512);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_100040060(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 1448);
  uint64_t v2 = *(unsigned __int8 *)(a1 + 1513);
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

uint64_t sub_1000400A8()
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009B2E70);
  }
  int v0 = sub_100040454((uint64_t)off_1009F7EF8);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009B2DD0);
  }
  int v1 = sub_10004014C((uint64_t)off_1009F7ED8);
  if (v1) {
    unsigned int v2 = 3;
  }
  else {
    unsigned int v2 = 1;
  }
  if (v0) {
    return v2;
  }
  else {
    return 2 * (v1 != 0);
  }
}

uint64_t sub_10004014C(uint64_t a1)
{
  if (qword_1009F7EC0 != -1) {
    dispatch_once(&qword_1009F7EC0, &stru_1009BEBA0);
  }
  unsigned int v2 = sub_10004034C((uint64_t)off_1009F7EB8);
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 88);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = v2;
  uint64_t v4 = 0;
  id v5 = [v3 countByEnumeratingWithState:&v15 objects:v20 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v6) {
          objc_enumerationMutation(v3);
        }
        int v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        sub_10004191C(__p, "HasBuiltinServices");
        int v9 = sub_100030A04(a1, v8, (uint64_t)__p);
        int v10 = v9;
        if (v14 < 0)
        {
          operator delete(__p[0]);
          if (!v10) {
            continue;
          }
LABEL_12:
          id v11 = sub_100030398(a1, v8);
          uint64_t v4 = (v4 + sub_1006B2218((uint64_t)v11));
          continue;
        }
        if (v9) {
          goto LABEL_12;
        }
      }
      id v5 = [v3 countByEnumeratingWithState:&v15 objects:v20 count:16];
    }
    while (v5);
  }

  sub_10003AFB4((uint64_t)v19);
  return v4;
}

void sub_1000402FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  sub_10003AFB4((uint64_t)&a24);
  _Unwind_Resume(a1);
}

id sub_10004034C(uint64_t a1)
{
  unsigned int v2 = +[NSMutableArray array];
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 120);
  id v3 = *(const unsigned __int8 **)(a1 + 384);
  uint64_t v4 = (const unsigned __int8 **)(a1 + 392);
  if (v3 != (const unsigned __int8 *)(a1 + 392))
  {
    do
    {
      id v5 = sub_100031234(v3 + 32);
      [v2 addObject:v5];

      uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
      if (v6)
      {
        do
        {
          uint64_t v7 = (const unsigned __int8 **)v6;
          uint64_t v6 = *(unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (const unsigned __int8 **)*((void *)v3 + 2);
          BOOL v8 = *v7 == v3;
          id v3 = (const unsigned __int8 *)v7;
        }
        while (!v8);
      }
      id v3 = (const unsigned __int8 *)v7;
    }
    while (v7 != v4);
  }
  sub_10003AFB4((uint64_t)v10);

  return v2;
}

void sub_100040424(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100040454(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 168);
  __p = 0;
  BOOL v8 = 0;
  uint64_t v9 = 0;
  sub_100040550(&__p, a1 + 144);
  sub_10003AFE8((uint64_t)v10);
  unsigned int v2 = (unsigned __int8 **)__p;
  id v3 = v8;
  if (__p == v8)
  {
    uint64_t v4 = 0;
    if (!__p) {
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  uint64_t v4 = 0;
  do
  {
    id v5 = *v2;
    if (sub_100040630(*v2) && sub_1004764A0((uint64_t)v5)) {
      uint64_t v4 = (v4 + sub_10047B784((uint64_t)v5));
    }
    ++v2;
  }
  while (v2 != v3);
  unsigned int v2 = (unsigned __int8 **)__p;
  if (__p)
  {
LABEL_8:
    BOOL v8 = v2;
    operator delete(v2);
  }
LABEL_9:
  sub_10003AFB4((uint64_t)v10);
  return v4;
}

void sub_100040520(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void *sub_100040550(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_1000405B8(a1, v5 >> 3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *sub_1000405B8(void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  uint64_t result = (char *)sub_1000405F8((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void *sub_1000405F8(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    sub_1000616DC();
  }
  return operator new(8 * a2);
}

uint64_t sub_100040630(unsigned __int8 *a1)
{
  if (qword_1009F8778 != -1) {
    dispatch_once(&qword_1009F8778, &stru_1009AF7D8);
  }
  unsigned int v2 = off_1009F8770;

  return sub_100040694((uint64_t)v2, a1);
}

uint64_t sub_100040694(uint64_t a1, unsigned __int8 *a2)
{
  if (!a2) {
    return 0;
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, a1 + 24);
  unint64_t v4 = ((unint64_t)a2[128] << 40) | ((unint64_t)a2[129] << 32) | ((unint64_t)a2[130] << 24) | ((unint64_t)a2[131] << 16) | ((unint64_t)a2[132] << 8) | a2[133];
  for (uint64_t i = *(void **)(a1 + 136); i; uint64_t i = (void *)*i)
  {
    unint64_t v6 = i[4];
    if (v4 >= v6)
    {
      if (v6 >= v4)
      {
LABEL_14:
        uint64_t v9 = 1;
        goto LABEL_15;
      }
      ++i;
    }
  }
  for (j = *(void **)(a1 + 160); j; j = (void *)*j)
  {
    unint64_t v8 = j[4];
    if (v4 >= v8)
    {
      if (v8 >= v4) {
        goto LABEL_14;
      }
      ++j;
    }
  }
  uint64_t v9 = 0;
LABEL_15:
  sub_10003AFB4((uint64_t)v11);
  return v9;
}

uint64_t sub_100040774(uint64_t a1, uint64_t a2)
{
  if (!a2 || !*(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v3 = sub_100041058(a2);
  if (sub_1000409CC(v3, v3))
  {
    unint64_t v4 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = sub_100041058(a2);
      *(_DWORD *)buf = 136315138;
      char v23 = sub_10003E508(v5);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization over WiFi for useCase %s", buf, 0xCu);
    }
    return 1;
  }
  else
  {
    uint64_t v7 = sub_10004104C(a2);
    unint64_t v8 = v7;
    if (v7 && [v7 count])
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v9 = v8;
      uint64_t v6 = (uint64_t)[v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v6)
      {
        uint64_t v10 = *(void *)v18;
        while (2)
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v18 != v10) {
              objc_enumerationMutation(v9);
            }
            BOOL v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
            id v13 = [v12 longLongValue:v17];
            if (sub_1000409CC((uint64_t)v13, (int)v13))
            {
              char v14 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
              {
                long long v15 = sub_10003E508((int)[v12 longLongValue]);
                *(_DWORD *)buf = 136315138;
                char v23 = v15;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization over WiFi for useCase %s", buf, 0xCu);
              }
              uint64_t v6 = 1;
              goto LABEL_23;
            }
          }
          uint64_t v6 = (uint64_t)[v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_23:
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  return v6;
}

void sub_10004099C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000409CC(uint64_t a1, int a2)
{
  if (a2 == 22)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 400);
  }
  else
  {
    if (a2 != 265) {
      return 0;
    }
    uint64_t v2 = sub_100035F54();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 328))(v2)) {
      return 1;
    }
    uint64_t v3 = sub_100035F54();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 384))(v3)) {
      return 1;
    }
    uint64_t v4 = sub_100035F54();
    if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 424))(v4)) {
      return 1;
    }
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 944);
  }
  return v6();
}

uint64_t sub_100040B20(uint64_t a1, uint64_t a2)
{
  if (a2 && *(void *)(a2 + 8))
  {
    int v3 = sub_100041058(a2);
    if (v3 == 2147418120 || v3 == 131101) {
      unsigned int v5 = 32;
    }
    else {
      unsigned int v5 = 0;
    }
    if (v3 == 2147418120 || v3 == 131101)
    {
      uint64_t v6 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = sub_100041058(a2);
        *(_DWORD *)buf = 134218242;
        double v28 = (double)v5 * 0.625;
        __int16 v29 = 2080;
        BOOL v30 = sub_10003E508(v7);
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Scan boost incremental window %.2f msec for %s", buf, 0x16u);
      }
    }
    unint64_t v8 = sub_10004104C(a2);
    id v9 = v8;
    if (v8 && [v8 count])
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      id v10 = v9;
      id v11 = [v10 countByEnumeratingWithState:&v22 objects:v26 count:16];
      uint64_t v21 = v9;
      if (v11)
      {
        uint64_t v12 = *(void *)v23;
        do
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v23 != v12) {
              objc_enumerationMutation(v10);
            }
            char v14 = *(void **)(*((void *)&v22 + 1) + 8 * i);
            unsigned int v15 = [v14 longLongValue];
            if (v15 == 2147418120 || v15 == 131101) {
              unsigned int v17 = 32;
            }
            else {
              unsigned int v17 = 0;
            }
            if (v17 > (unsigned __int16)v5)
            {
              long long v18 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
              {
                long long v19 = sub_10003E508((int)[v14 longLongValue]);
                *(_DWORD *)buf = 134218242;
                double v28 = (double)v17 * 0.625;
                __int16 v29 = 2080;
                BOOL v30 = v19;
                _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Scan boost incremental window %.2f msec for %s", buf, 0x16u);
              }
              LOWORD(v5) = 32;
            }
          }
          id v11 = [v10 countByEnumeratingWithState:&v22 objects:v26 count:16];
        }
        while (v11);
      }

      id v9 = v21;
    }
  }
  else
  {
    LOWORD(v5) = 0;
  }
  return (unsigned __int16)v5;
}

void sub_100040DB8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100040DF4(uint64_t a1, uint64_t a2)
{
  if (!a2 || !*(void *)(a2 + 8)) {
    return 0;
  }
  uint64_t v3 = sub_100041058(a2);
  if (sub_100041064(v3, v3))
  {
    uint64_t v4 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = sub_100041058(a2);
      *(_DWORD *)buf = 136315138;
      long long v23 = sub_10003E508(v5);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization over BT for useCase %s", buf, 0xCu);
    }
    return 1;
  }
  else
  {
    int v7 = sub_10004104C(a2);
    unint64_t v8 = v7;
    if (v7 && [v7 count])
    {
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      id v9 = v8;
      uint64_t v6 = (uint64_t)[v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
      if (v6)
      {
        uint64_t v10 = *(void *)v18;
        while (2)
        {
          for (uint64_t i = 0; i != v6; ++i)
          {
            if (*(void *)v18 != v10) {
              objc_enumerationMutation(v9);
            }
            uint64_t v12 = *(void **)(*((void *)&v17 + 1) + 8 * i);
            id v13 = [v12 longLongValue:v17];
            if (sub_100041064((uint64_t)v13, (int)v13))
            {
              char v14 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
              {
                unsigned int v15 = sub_10003E508((int)[v12 longLongValue]);
                *(_DWORD *)buf = 136315138;
                long long v23 = v15;
                _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Scanning Prioritization over BT for useCase %s", buf, 0xCu);
              }
              uint64_t v6 = 1;
              goto LABEL_23;
            }
          }
          uint64_t v6 = (uint64_t)[v9 countByEnumeratingWithState:&v17 objects:v21 count:16];
          if (v6) {
            continue;
          }
          break;
        }
      }
LABEL_23:
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  return v6;
}

void sub_10004101C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10004104C(uint64_t a1)
{
  return *(id *)(*(void *)(a1 + 8) + 176);
}

uint64_t sub_100041058(uint64_t a1)
{
  return *(unsigned int *)(*(void *)(a1 + 8) + 168);
}

uint64_t sub_100041064(uint64_t a1, int a2)
{
  uint64_t result = 1;
  if (((a2 - 131078) > 9 || ((1 << (a2 - 6)) & 0x203) == 0) && a2 != 22)
  {
    if (a2 == 265)
    {
      uint64_t v5 = sub_100035F54();
      if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 328))(v5)) {
        return 1;
      }
      uint64_t v6 = sub_100035F54();
      if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 384))(v6)) {
        return 1;
      }
      uint64_t v7 = sub_100035F54();
      if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 424))(v7))
      {
        return 1;
      }
      else
      {
        unint64_t v8 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 944);
        return v8();
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100041198(uint64_t a1)
{
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  *(_OWORD *)__p = 0u;
  memset(v29, 0, sizeof(v29));
  sub_1000419CC((uint64_t)v29);
  if (!*(unsigned char *)(a1 + 5) && *(unsigned char *)(a1 + 8))
  {
    sub_10003AB28((uint64_t)v29);
    uint64_t v3 = std::ostream::operator<<();
    sub_10003AB28(v3);
    sub_10003AB28((uint64_t)v29);
    uint64_t v4 = std::ostream::operator<<();
    sub_10003AB28(v4);
    sub_10003AB28((uint64_t)v29);
    uint64_t v5 = std::ostream::operator<<();
    sub_10003AB28(v5);
    sub_10003AB28((uint64_t)v29);
    uint64_t v6 = std::ostream::operator<<();
    sub_10003AB28(v6);
    sub_10003AB28((uint64_t)v29);
    uint64_t v7 = std::ostream::operator<<();
    sub_10003AB28(v7);
    sub_10003AB28((uint64_t)v29);
    uint64_t v8 = std::ostream::operator<<();
    sub_10003AB28(v8);
    sub_10003AB28((uint64_t)v29);
    uint64_t v9 = std::ostream::operator<<();
    sub_10003AB28(v9);
    sub_10003AB28((uint64_t)v29);
    uint64_t v10 = std::ostream::operator<<();
    sub_10003AB28(v10);
    sub_10003AB28((uint64_t)v29);
    uint64_t v11 = std::ostream::operator<<();
    sub_10003AB28(v11);
    sub_10003AB28((uint64_t)v29);
    uint64_t v12 = std::ostream::operator<<();
    sub_10003AB28(v12);
    sub_10003AB28((uint64_t)v29);
    uint64_t v13 = std::ostream::operator<<();
    sub_10003AB28(v13);
    sub_10003AB28((uint64_t)v29);
    uint64_t v14 = std::ostream::operator<<();
    sub_10003AB28(v14);
    sub_10003AB28((uint64_t)v29);
    uint64_t v15 = std::ostream::operator<<();
    sub_10003AB28(v15);
    sub_10003AB28((uint64_t)v29);
    uint64_t v16 = std::ostream::operator<<();
    sub_10003AB28(v16);
    uint64_t v17 = sub_10003AB28((uint64_t)v29);
    sub_10003AB28(v17);
    sub_10003AB28((uint64_t)v29);
    uint64_t v18 = std::ostream::operator<<();
    sub_10003AB28(v18);
    sub_10003AB28((uint64_t)v29);
    uint64_t v20 = *(void *)(a1 + 48);
    uint64_t v19 = *(void *)(a1 + 56);
    if (v19 == v20)
    {
      sub_10003AB28((uint64_t)v29);
    }
    else
    {
      do
      {
        uint64_t v21 = std::ostream::operator<<();
        uint64_t v22 = sub_10003AB28(v21);
        uint64_t v23 = sub_10003AB28(v22);
        sub_10003AB28(v23);
        v20 += 96;
      }
      while (v20 != v19);
    }
    sub_10003AB28((uint64_t)v29);
    uint64_t v24 = *(void *)(a1 + 72);
    uint64_t v25 = *(void *)(a1 + 80);
    if (v25 == v24)
    {
      sub_10003AB28((uint64_t)v29);
    }
    else
    {
      do
      {
        sub_1000417A8(v24, &v27);
        uint64_t v26 = sub_10003AB28((uint64_t)v29);
        sub_10003AB28(v26);
        if (v28 < 0) {
          operator delete(v27);
        }
        v24 += 20;
      }
      while (v24 != v25);
    }
  }
  sub_10003AB28((uint64_t)v29);
  std::stringbuf::str();
  if (SHIBYTE(v31) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100041774(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *sub_1000417A8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)long long __str = 0u;
  long long v23 = 0u;
  switch((*(unsigned char *)a1 >> 1) | (*(unsigned char *)a1 << 7))
  {
    case 0:
      strcpy(__str, "(empty)");
      return sub_10004191C(a2, __str);
    case 1:
      uint64_t v6 = *(unsigned __int16 *)(a1 + 4);
      uint64_t v3 = "0x%04X";
      goto LABEL_6;
    case 2:
      uint64_t v6 = *(unsigned int *)(a1 + 4);
      uint64_t v3 = "0x%08X";
LABEL_6:
      snprintf(__str, 0x80uLL, v3, v6, v7, v8, v9, v10, v11, v12, v13, v14, v15, v16, v17, v18, v19, v20, v21,
        *(void *)__str,
        *(void *)&__str[8],
        v23,
        v24,
        v25,
        v26,
        v27,
        v28,
        v29);
      break;
    case 8:
      snprintf(__str, 0x80uLL, "%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X", *(unsigned __int8 *)(a1 + 4), *(unsigned __int8 *)(a1 + 5), *(unsigned __int8 *)(a1 + 6), *(unsigned __int8 *)(a1 + 7), *(unsigned __int8 *)(a1 + 8), *(unsigned __int8 *)(a1 + 9));
      break;
    default:
      uint64_t v5 = sub_100017768();
      sub_1005C99C8(v5, 0);
  }
  return sub_10004191C(a2, __str);
}

void *sub_10004191C(void *a1, char *__s)
{
  size_t v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8) {
    abort();
  }
  size_t v5 = v4;
  if (v4 >= 0x17)
  {
    uint64_t v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17) {
      uint64_t v7 = v4 | 7;
    }
    uint64_t v8 = v7 + 1;
    uint64_t v6 = operator new(v7 + 1);
    a1[1] = v5;
    a1[2] = v8 | 0x8000000000000000;
    *a1 = v6;
  }
  else
  {
    *((unsigned char *)a1 + 23) = v4;
    uint64_t v6 = a1;
    if (!v4) {
      goto LABEL_9;
    }
  }
  memmove(v6, __s, v5);
LABEL_9:
  *((unsigned char *)v6 + v5) = 0;
  return a1;
}

uint64_t sub_1000419CC(uint64_t a1)
{
  *(void *)a1 = v3;
  *(void *)(a1 + *(void *)(v3 - 24)) = v2;
  size_t v4 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v4, (void *)(a1 + 8));
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_DWORD *)(a1 + 104) = 16;
  return a1;
}

void sub_100041B3C(_Unwind_Exception *a1)
{
}

uint64_t sub_100041B64(int8x8_t *a1, unsigned int a2, uint64_t a3, unsigned int a4, unsigned char *a5)
{
  unint64_t v5 = a4 - (unint64_t)a2 + 8 * (a3 - (void)a1);
  if (*a5) {
    return sub_100041B84(a1, a2, v5);
  }
  else {
    return sub_1006F5A4C((uint64_t *)a1, a2, v5);
  }
}

uint64_t sub_100041B84(int8x8_t *a1, unsigned int a2, unint64_t a3)
{
  uint64_t v3 = a2;
  if (a2)
  {
    if (64 - a2 >= a3) {
      unint64_t v4 = a3;
    }
    else {
      unint64_t v4 = 64 - a2;
    }
    uint64_t v5 = (uint64_t)*a1++;
    uint8x8_t v6 = (uint8x8_t)vcnt_s8((int8x8_t)((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v4)) & (-1 << a2) & v5));
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v3 = v6.u32[0];
    a3 -= v4;
  }
  if (a3 >= 0x40)
  {
    do
    {
      int8x8_t v7 = *a1++;
      uint8x8_t v8 = (uint8x8_t)vcnt_s8(v7);
      v8.i16[0] = vaddlv_u8(v8);
      v3 += v8.u32[0];
      a3 -= 64;
    }
    while (a3 > 0x3F);
  }
  if (a3)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)(*(void *)a1 & (0xFFFFFFFFFFFFFFFFLL >> -(char)a3)));
    v9.i16[0] = vaddlv_u8(v9);
    v3 += v9.u32[0];
  }
  return v3;
}

BOOL sub_100041C28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  return *(unsigned char *)(v1 + 1) && *(unsigned char *)(v1 + 120) != 0;
}

uint64_t sub_100041C4C(uint64_t a1, uint64_t a2)
{
  if (!a2 || !*(void *)(a2 + 8)) {
    return 0;
  }
  int v3 = sub_100041058(a2);
  if (v3 == 2147418120 || v3 == 131101)
  {
    unint64_t v4 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = sub_100041058(a2);
      *(_DWORD *)buf = 136315138;
      long long v25 = sub_10003E508(v5);
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Wall power scan boost for %s is allowed", buf, 0xCu);
    }
    return 1;
  }
  else
  {
    uint8x8_t v8 = sub_10004104C(a2);
    uint8x8_t v9 = v8;
    if (v8 && [v8 count])
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      id v10 = v9;
      id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
      if (v11)
      {
        uint64_t v12 = *(void *)v20;
        while (2)
        {
          for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v20 != v12) {
              objc_enumerationMutation(v10);
            }
            uint64_t v14 = *(void **)(*((void *)&v19 + 1) + 8 * i);
            unsigned int v15 = [v14 longLongValue];
            if (v15 == 2147418120 || v15 == 131101)
            {
              uint64_t v17 = qword_100A19E90;
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v18 = sub_10003E508((int)[v14 longLongValue]);
                *(_DWORD *)buf = 136315138;
                long long v25 = v18;
                _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Wall power scan boost for %s is allowed", buf, 0xCu);
              }
              uint64_t v6 = 1;
              goto LABEL_29;
            }
          }
          id v11 = [v10 countByEnumeratingWithState:&v19 objects:v23 count:16];
          uint64_t v6 = 0;
          if (v11) {
            continue;
          }
          break;
        }
      }
      else
      {
        uint64_t v6 = 0;
      }
LABEL_29:
    }
    else
    {
      uint64_t v6 = 0;
    }
  }
  return v6;
}

void sub_100041EAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000426A4(uint64_t a1)
{
  uint64_t v2 = BKSApplicationStateKey;
  int v3 = [*(id *)(a1 + 32) objectForKeyedSubscript:BKSApplicationStateKey];
  unsigned int v55 = [v3 intValue];

  id v57 = [*(id *)(a1 + 32) objectForKeyedSubscript:BKSApplicationStateDisplayIDKey];
  unint64_t v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:BKSApplicationStateProcessIDKey];
  LODWORD(v52) = [v4 intValue];

  int v5 = [*(id *)(a1 + 32) objectForKeyedSubscript:BKSApplicationStateExtensionKey];
  unsigned int v54 = [v5 BOOLValue];

  uint64_t v56 = [*(id *)(*(void *)(a1 + 40) + 40) objectForKeyedSubscript:v57];
  if (!v56)
  {
    if (!v57) {
      goto LABEL_108;
    }
    uint64_t v18 = qword_100A19F58;
    if (!os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_108;
    }
    int v19 = [*(id *)(a1 + 40) translateApplicationState:v55];
    if (v19 <= 7)
    {
      if (v19 == 2)
      {
        long long v20 = "terminated";
        goto LABEL_73;
      }
      if (v19 == 4)
      {
        long long v20 = "suspended";
        goto LABEL_73;
      }
    }
    else
    {
      switch(v19)
      {
        case 8:
          long long v20 = "background-running";
          goto LABEL_73;
        case 16:
          long long v20 = "foreground-running";
          goto LABEL_73;
        case 32:
          long long v20 = "daemon";
LABEL_73:
          long long v43 = "";
          *(_DWORD *)buf = 138413058;
          id v69 = v57;
          __int16 v70 = 1024;
          if (v54) {
            long long v43 = " (Is an extension)";
          }
          *(_DWORD *)BOOL v71 = v52;
          *(_WORD *)&v71[4] = 2080;
          *(void *)&v71[6] = v20;
          __int16 v72 = 2080;
          uint64_t v73 = v43;
          long long v29 = "%@ [%d] is not in the application map. State: %s%s";
          BOOL v30 = v18;
          uint32_t v31 = 38;
          goto LABEL_76;
      }
    }
    long long v20 = "unknown";
    goto LABEL_73;
  }
  HIDWORD(v52) = [*(id *)(a1 + 40) translateApplicationState:v55];
  id v6 = *(id *)(a1 + 32);
  int8x8_t v7 = [v6 objectForKeyedSubscript:v2];
  unsigned int v8 = [v7 intValue];

  if (v8 == 4)
  {
    [v6 objectForKeyedSubscript:BKSApplicationStateRunningReasonsKey];
    long long v66 = 0u;
    long long v67 = 0u;
    long long v64 = 0u;
    long long v65 = 0u;
    id v9 = (id)objc_claimAutoreleasedReturnValue();
    id v10 = [v9 countByEnumeratingWithState:&v64 objects:buf count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v65;
      uint64_t v12 = BKSApplicationStateRunningReasonAssertionReasonKey;
      while (2)
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v65 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v14 = [*(id *)(*((void *)&v64 + 1) + 8 * i) objectForKeyedSubscript:v12, v52];
          unsigned int v15 = [v14 unsignedIntValue];

          if (v15 == 16 || v15 == 50004)
          {
            int v17 = 1;
            goto LABEL_25;
          }
        }
        id v10 = [v9 countByEnumeratingWithState:&v64 objects:buf count:16];
        int v17 = 0;
        if (v10) {
          continue;
        }
        break;
      }
    }
    else
    {
      int v17 = 0;
    }
LABEL_25:
  }
  else
  {
    int v17 = 0;
  }

  if ((v54 | v17) == 1)
  {
    long long v21 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138412802;
      id v69 = v57;
      __int16 v70 = 1024;
      *(_DWORD *)BOOL v71 = v54;
      *(_WORD *)&v71[4] = 1024;
      *(_DWORD *)&v71[6] = v17;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Overriding bundle %@ state to foregroundRunning isExtension:%d isAssertionReasonWatchConnectivity:%d", buf, 0x18u);
    }
    HIDWORD(v52) = 16;
  }
  if (v55 != 1)
  {
    if ([v56 pid])
    {
      long long v32 = qword_100A19F58;
      if (!os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_92;
      }
      id v33 = [v57 UTF8String];
      unsigned int v34 = [v56 pid];
      if (SHIDWORD(v52) <= 7)
      {
        if (HIDWORD(v52) == 2)
        {
          long long v35 = "terminated";
          goto LABEL_81;
        }
        if (HIDWORD(v52) == 4)
        {
          long long v35 = "suspended";
          goto LABEL_81;
        }
      }
      else
      {
        switch(HIDWORD(v52))
        {
          case 8:
            long long v35 = "background-running";
            goto LABEL_81;
          case 0x10:
            long long v35 = "foreground-running";
            goto LABEL_81;
          case 0x20:
            long long v35 = "daemon";
LABEL_81:
            unsigned int v44 = [v56 isAlive:v52];
            uint64_t v45 = "false";
            *(_DWORD *)buf = 136446978;
            id v69 = v33;
            __int16 v70 = 1024;
            if (v44) {
              uint64_t v45 = "true";
            }
            *(_DWORD *)BOOL v71 = v34;
            *(_WORD *)&v71[4] = 2082;
            *(void *)&v71[6] = v35;
            __int16 v72 = 2080;
            uint64_t v73 = v45;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "Application \"%{public}s\" is still at pid %d, with state \"%{public}s\", isAlive: %s", buf, 0x26u);
LABEL_92:
            uint64_t v48 = qword_100A19F58;
            if (!os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_106;
            }
            id v49 = [v57 UTF8String];
            if (SHIDWORD(v52) <= 7)
            {
              if (HIDWORD(v52) == 2)
              {
                int v50 = "terminated";
                goto LABEL_105;
              }
              if (HIDWORD(v52) == 4)
              {
                int v50 = "suspended";
                goto LABEL_105;
              }
            }
            else
            {
              switch(HIDWORD(v52))
              {
                case 8:
                  int v50 = "background-running";
                  goto LABEL_105;
                case 0x10:
                  int v50 = "foreground-running";
                  goto LABEL_105;
                case 0x20:
                  int v50 = "daemon";
LABEL_105:
                  *(_DWORD *)buf = 136446466;
                  id v69 = v49;
                  __int16 v70 = 2082;
                  *(void *)BOOL v71 = v50;
                  _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "State of application \"%{public}s\" is now \"%{public}s\"", buf, 0x16u);
LABEL_106:
                  [v56 setState:HIDWORD(v52) v52];
                  uint64_t v51 = *(void *)(a1 + 40);
                  if (*(void *)(v51 + 8))
                  {
                    v58[0] = _NSConcreteStackBlock;
                    v58[1] = 3221225472;
                    v58[2] = sub_100051138;
                    v58[3] = &unk_1009997F0;
                    v58[4] = v51;
                    id v59 = v57;
                    char v60 = v53;
                    dispatch_async((dispatch_queue_t)&_dispatch_main_q, v58);
                  }
                  goto LABEL_108;
              }
            }
            int v50 = "unknown";
            goto LABEL_105;
        }
      }
      long long v35 = "unknown";
      goto LABEL_81;
    }
    [v56 setPid:v52];
    long long v39 = qword_100A19F58;
    if (!os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
LABEL_91:
      [*(id *)(a1 + 40) takeAssertionForProcess:v57 duration:10 isUrgent:0];
      goto LABEL_92;
    }
    id v40 = [v57 UTF8String];
    unsigned int v41 = [v56 pid];
    if (SHIDWORD(v52) <= 7)
    {
      if (HIDWORD(v52) == 2)
      {
        uint64_t v42 = "terminated";
        goto LABEL_88;
      }
      if (HIDWORD(v52) == 4)
      {
        uint64_t v42 = "suspended";
        goto LABEL_88;
      }
    }
    else
    {
      switch(HIDWORD(v52))
      {
        case 8:
          uint64_t v42 = "background-running";
          goto LABEL_88;
        case 0x10:
          uint64_t v42 = "foreground-running";
          goto LABEL_88;
        case 0x20:
          uint64_t v42 = "daemon";
LABEL_88:
          unsigned int v46 = [v56 isAlive:v52];
          BOOL v47 = "false";
          *(_DWORD *)buf = 136446978;
          id v69 = v40;
          __int16 v70 = 1024;
          if (v46) {
            BOOL v47 = "true";
          }
          *(_DWORD *)BOOL v71 = v41;
          *(_WORD *)&v71[4] = 2082;
          *(void *)&v71[6] = v42;
          __int16 v72 = 2080;
          uint64_t v73 = v47;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Application \"%{public}s\" is now at pid %d, with state \"%{public}s\", isAlive: %s", buf, 0x26u);
          goto LABEL_91;
      }
    }
    uint64_t v42 = "unknown";
    goto LABEL_88;
  }
  long long v22 = [*(id *)(a1 + 32) objectForKeyedSubscript:BKSApplicationStateExitReasonKey];
  unsigned int v23 = [v22 unsignedIntValue];

  long long v24 = qword_100A19F58;
  if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
  {
    id v25 = [v57 UTF8String];
    long long v26 = "terminated";
    if (v23 == 1) {
      long long v26 = "killed by the user";
    }
    *(_DWORD *)buf = 136446466;
    id v69 = v25;
    __int16 v70 = 2082;
    *(void *)BOOL v71 = v26;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Application \"%{public}s\" has been %{public}s", buf, 0x16u);
  }
  [v56 setPid:0, v52];
  uint64_t v27 = *(void *)(a1 + 40);
  if (*(void *)(v27 + 8))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_100723FBC;
    block[3] = &unk_1009997F0;
    block[4] = v27;
    id v62 = v57;
    BOOL v63 = v23 == 1;
    dispatch_async((dispatch_queue_t)&_dispatch_main_q, block);
  }
  if (v23 == 1)
  {
    uint64_t v28 = qword_100A19F58;
    if (os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 138543362;
      id v69 = v57;
      long long v29 = "bundleID %{public}@ in launch queue but won't resurrect. Reason: killed by user.";
      BOOL v30 = v28;
      uint32_t v31 = 12;
LABEL_76:
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, v29, buf, v31);
    }
  }
  else
  {
    long long v36 = [*(id *)(*(void *)(a1 + 40) + 112) objectForKey:v57];
    long long v37 = qword_100A19F58;
    BOOL v38 = os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT);
    if (v36)
    {
      if (v38)
      {
        *(_DWORD *)buf = 138543362;
        id v69 = v57;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Found bundleID in launch queue, attempting to resurrect - %{public}@", buf, 0xCu);
      }
      [*(id *)(a1 + 40) openBundle:v57 options:v36 attempt:0];
      [*(id *)(*(void *)(a1 + 40) + 112) removeObjectForKey:v57];
    }
    else if (v38)
    {
      *(_DWORD *)buf = 138543362;
      id v69 = v57;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "BundleID not in launch queue - not resurrecting: %{public}@", buf, 0xCu);
    }
  }
LABEL_108:
}

void sub_100043128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000431F4(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  *(void *)(a1[5] + 8 * *(void *)(*(void *)(a1[4] + 8) + 24)) = [v7 UTF8String];
  *(void *)(a1[6] + 8 * (*(void *)(*(void *)(a1[4] + 8) + 24))++) = sub_1000432B8(v6);
}

void sub_1000432A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000432B8(void *a1)
{
  id v1 = a1;
  if ([v1 isNSNumber])
  {
    if (CFNumberIsFloatType((CFNumberRef)v1))
    {
      [v1 doubleValue];
      xpc_object_t v3 = xpc_double_create(v2);
    }
    else
    {
      xpc_object_t v3 = xpc_int64_create((int64_t)[v1 longLongValue]);
    }
  }
  else if ([v1 isNSString])
  {
    xpc_object_t v3 = xpc_string_create((const char *)[v1 UTF8String]);
  }
  else if ([v1 isNSData])
  {
    id v4 = v1;
    xpc_object_t v3 = xpc_data_create([v4 bytes], (size_t)[v4 length]);
  }
  else
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      *(void *)uuid = 0;
      uint64_t v9 = 0;
      [v1 getUUIDBytes:uuid];
      xpc_object_t v3 = xpc_uuid_create(uuid);
    }
    else if ([v1 isNSArray])
    {
      xpc_object_t v3 = sub_100009ABC(v1);
    }
    else if ([v1 isNSDictionary])
    {
      xpc_object_t v3 = (xpc_object_t)sub_1000434C8(v1);
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v7 = [v1 data];
        uint64_t v5 = sub_1000432B8();

        if (v5) {
          goto LABEL_17;
        }
        goto LABEL_16;
      }
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
LABEL_16:
        +[NSException raise:@"Invalid Object", @"Object %@ is invalid", v1 format];
        uint64_t v5 = 0;
        goto LABEL_17;
      }
      xpc_object_t v3 = xpc_null_create();
    }
  }
  uint64_t v5 = (uint64_t)v3;
  if (!v3) {
    goto LABEL_16;
  }
LABEL_17:

  return v5;
}

void sub_1000434A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

xpc_object_t sub_1000434C8(void *a1)
{
  id v1 = a1;
  size_t v2 = (size_t)[v1 count];
  __chkstk_darwin();
  xpc_object_t v3 = (char *)v7 - ((8 * v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v3, 8 * v2);
  __chkstk_darwin();
  id v4 = (xpc_object_t *)v3;
  bzero(v3, 8 * v2);
  v8[0] = 0;
  v8[1] = v8;
  void v8[2] = 0x2020000000;
  v8[3] = 0;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  void v7[2] = sub_1000431F4;
  v7[3] = &unk_1009B2730;
  void v7[4] = v8;
  void v7[5] = v3;
  v7[6] = v3;
  [v1 enumerateKeysAndObjectsUsingBlock:v7];
  for (xpc_object_t i = xpc_dictionary_create((const char *const *)v3, (xpc_object_t *)v3, v2); v2; --v2)
    xpc_release(*v4++);
  _Block_object_dispose(v8, 8);

  return i;
}

void sub_100043654(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 88), 8);

  _Unwind_Resume(a1);
}

double sub_100043690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(unsigned char *)(a1 + 12) |= *(unsigned char *)(v4 + 12);
  *(unsigned char *)(a1 + 13) |= *(unsigned char *)(v4 + 13);
  uint64_t v5 = (void **)(v4 + 16);
  if (*(char *)(v4 + 39) < 0)
  {
    unint64_t v6 = *(void *)(v4 + 24);
    if (!v6) {
      goto LABEL_8;
    }
    sub_10003B098(&__str, *v5, v6);
  }
  else
  {
    if (!*(unsigned char *)(v4 + 39)) {
      goto LABEL_8;
    }
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
    __str.__r_.__value_.__r.__words[2] = *(void *)(v4 + 32);
  }
  std::string::operator=((std::string *)(a1 + 16), &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
LABEL_8:
  uint64_t v7 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 40) = *(_WORD *)(v7 + 40);
  if (*(unsigned char *)(v7 + 42))
  {
    char v8 = *(unsigned char *)(v7 + 43);
    *(unsigned char *)(a1 + 42) = 1;
    *(unsigned char *)(a1 + 43) = v8;
  }
  if (sub_100045F00(v7 + 48))
  {
    uint64_t v9 = sub_100045F00(a1 + 48);
    uint64_t v10 = sub_100045F00(*(void *)(a2 + 8) + 48);
    size_t v11 = v10 + v9;
    __chkstk_darwin(v10, v12);
    uint64_t v14 = (char *)&v42 - v13;
    bzero((char *)&v42 - v13, v11);
    sub_100052430(a1 + 48, v14, v11);
    uint64_t v16 = v15;
    if ((unint64_t)sub_100045F00(a1 + 48) < 3 || (unint64_t)sub_100045F00(*(void *)(a2 + 8) + 48) < 3)
    {
      uint64_t v18 = 0;
    }
    else
    {
      int v17 = (unsigned __int16 *)sub_10004A6E4(a1 + 48);
      uint64_t v18 = 2 * (*v17 == *(unsigned __int16 *)sub_10004A6E4(*(void *)(a2 + 8) + 48));
    }
    uint64_t v19 = *(void *)(a2 + 8) + 48;
    uint64_t v20 = sub_100045F00(v19);
    size_t v21 = sub_1000522C0(v19, &v14[v16], v18, v20 - v18);
    sub_1000335D8(&v42, v14, v21 + v16);
    sub_100049EE0(a1 + 48, (uint64_t)&v42);
    *(void *)&long long v42 = &off_100998428;
    if (*((void *)&v42 + 1)) {
      sub_1000368F4(*((atomic_uint **)&v42 + 1));
    }
  }
  if (sub_100045F00(*(void *)(a2 + 8) + 224))
  {
    size_t v22 = sub_100045F00(*(void *)(a2 + 8) + 224);
    long long v24 = (char *)&v42 - ((__chkstk_darwin(v22, v23) + 15) & 0xFFFFFFFFFFFFFFF0);
    bzero(v24, v22);
    sub_100052430(*(void *)(a2 + 8) + 224, v24, v22);
    sub_1000335D8(&v42, v24, v25);
    sub_100049EE0(a1 + 224, (uint64_t)&v42);
    *(void *)&long long v42 = &off_100998428;
    if (*((void *)&v42 + 1)) {
      sub_1000368F4(*((atomic_uint **)&v42 + 1));
    }
  }
  if (sub_100045F00(*(void *)(a2 + 8) + 448))
  {
    long long v26 = (const void *)sub_10004A6E4(*(void *)(a2 + 8) + 448);
    unsigned int v27 = sub_100045F00(*(void *)(a2 + 8) + 448);
    sub_1000335D8(&v42, v26, v27);
    sub_100049EE0(a1 + 448, (uint64_t)&v42);
    *(void *)&long long v42 = &off_100998428;
    if (*((void *)&v42 + 1)) {
      sub_1000368F4(*((atomic_uint **)&v42 + 1));
    }
  }
  uint64_t v28 = *(void *)(a2 + 8);
  for (xpc_object_t i = *(long long **)(v28 + 64); i != *(long long **)(v28 + 72); xpc_object_t i = (long long *)((char *)i + 20))
  {
    sub_1005B4E20((void *)a1, i);
    uint64_t v28 = *(void *)(a2 + 8);
  }
  for (j = *(long long **)(v28 + 88); j != *(long long **)(v28 + 96); j = (long long *)((char *)j + 20))
  {
    sub_1005B4F44((void *)a1, j);
    uint64_t v28 = *(void *)(a2 + 8);
  }
  uint32_t v31 = *(unsigned __int8 **)(v28 + 112);
  if (v31 != (unsigned __int8 *)(v28 + 120))
  {
    do
    {
      *(void *)&long long v42 = v31 + 32;
      long long v32 = sub_100085C30((uint64_t **)(a1 + 112), v31 + 32, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v42);
      sub_100049EE0((uint64_t)v32 + 56, (uint64_t)(v31 + 56));
      id v33 = (unsigned __int8 *)*((void *)v31 + 1);
      if (v33)
      {
        do
        {
          unsigned int v34 = v33;
          id v33 = *(unsigned __int8 **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unsigned int v34 = (unsigned __int8 *)*((void *)v31 + 2);
          BOOL v35 = *(void *)v34 == (void)v31;
          uint32_t v31 = v34;
        }
        while (!v35);
      }
      uint64_t v28 = *(void *)(a2 + 8);
      uint32_t v31 = v34;
    }
    while (v34 != (unsigned __int8 *)(v28 + 120));
  }
  uint64_t v36 = 0;
  *(unsigned char *)(a1 + 305) |= *(unsigned char *)(v28 + 305);
  *(unsigned char *)(a1 + 304) |= *(unsigned char *)(v28 + 304);
  *(unsigned char *)(a1 + 370) |= *(unsigned char *)(v28 + 370);
  *(void *)(a1 + 376) = *(void *)(v28 + 376);
  *(void *)(a1 + 384) = *(void *)(v28 + 384);
  *(_DWORD *)(a1 + 392) = *(_DWORD *)(v28 + 392);
  uint64_t v37 = *(void *)(a2 + 8);
  *(_WORD *)(a1 + 396) = *(_WORD *)(v37 + 396);
  *(_DWORD *)(a1 + 312) = *(_DWORD *)(v37 + 312);
  *(unsigned char *)(a1 + 316) = *(unsigned char *)(v37 + 316);
  uint64_t v38 = v37 + 168;
  long long v39 = *(_OWORD *)(a1 + 184);
  long long v42 = *(_OWORD *)(a1 + 168);
  long long v43 = v39;
  do
  {
    *(long long *)((char *)&v42 + v36) = (__int128)vorrq_s8(*(int8x16_t *)((char *)&v42 + v36), *(int8x16_t *)(v38 + v36));
    v36 += 16;
  }
  while (v36 != 32);
  double result = *(double *)&v42;
  long long v41 = v43;
  *(_OWORD *)(a1 + 168) = v42;
  *(_OWORD *)(a1 + 184) = v41;
  return result;
}

void sub_100043B8C(_Unwind_Exception *exception_object)
{
  *(void *)(v1 - 144) = &off_100998428;
  xpc_object_t v3 = *(atomic_uint **)(v1 - 136);
  if (v3) {
    sub_1000368F4(v3);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_100043C04(void *a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7, int a8, char a9, char a10, char a11)
{
  id v303 = a1;
  id v302 = a2;
  v310[0] = 0;
  v310[1] = 0;
  uint64_t v309 = (unsigned __int8 *)v310;
  if ((a9 & 1) == 0)
  {
    long long v323 = xmmword_1007BA7E4;
    int v324 = 0;
    sub_100035F98((__n128 *)bytes, (__n128 *)&v323);
    sub_100045F18((uint64_t **)&v309, bytes, (uint64_t)bytes);
  }
  int v301 = a8;
  if ((a11 & 1) == 0)
  {
    long long v321 = xmmword_1007BA8EC;
    int v322 = 0;
    sub_100035F98((__n128 *)bytes, (__n128 *)&v321);
    sub_100045F18((uint64_t **)&v309, bytes, (uint64_t)bytes);
  }
  xpc_object_t v16 = xpc_BOOL_create(*(unsigned char *)(*(void *)(a3 + 8) + 12));
  int v17 = (char *)operator new(0x10uLL);
  uint64_t v18 = v17;
  *(void *)int v17 = "kCBAdvDataIsConnectable";
  *((void *)v17 + 1) = v16;
  if (a6)
  {
    uint64_t v19 = *(void *)(*(void *)(a3 + 8) + 200);
    bytes[0] = BYTE5(v19);
    bytes[1] = BYTE4(v19);
    bytes[2] = BYTE3(v19);
    bytes[3] = BYTE2(v19);
    bytes[4] = BYTE1(v19);
    bytes[5] = v19;
    xpc_object_t v20 = xpc_data_create(bytes, 6uLL);
    size_t v21 = operator new(0x20uLL);
    v21[2] = "kCBAdvDataDeviceAddress";
    v21[3] = v20;
    *(_OWORD *)size_t v21 = *(_OWORD *)v18;
    operator delete(v18);
    xpc_object_t v22 = xpc_int64_create(BYTE6(v19));
    uint64_t v23 = (char *)operator new(0x40uLL);
    long long v24 = v23;
    uint64_t v25 = 0;
    long long v26 = v23 + 64;
    *((void *)v23 + 4) = "kCBAdvDataDeviceAddressType";
    *((void *)v23 + 5) = v22;
    unsigned int v27 = v23 + 48;
    do
    {
      *(_OWORD *)&v23[v25 * 8 + 16] = *(_OWORD *)&v21[v25 + 2];
      v25 -= 2;
    }
    while (v25 != -4);
    operator delete(v21);
    uint64_t v18 = v24;
  }
  else
  {
    long long v26 = v17 + 16;
    unsigned int v27 = v17 + 16;
  }
  uint64_t v28 = *(void *)(a3 + 8);
  uint64_t v30 = *(void *)(v28 + 64);
  uint64_t v31 = *(void *)(v28 + 72);
  long long v29 = (unsigned __int8 **)(v28 + 64);
  if (v31 != v30)
  {
    xpc_object_t v32 = sub_1004F1520(v29, (uint64_t)&v309);
    xpc_object_t v33 = v32;
    if (v27 >= v26)
    {
      uint64_t v34 = (v27 - v18) >> 4;
      unint64_t v35 = v34 + 1;
      if ((unint64_t)(v34 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v35) {
        unint64_t v35 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v36 = v35;
      }
      if (v36)
      {
        if (v36 >> 60) {
          sub_1000616DC();
        }
        uint64_t v37 = (char *)operator new(16 * v36);
      }
      else
      {
        uint64_t v37 = 0;
      }
      uint64_t v38 = &v37[16 * v34];
      long long v26 = &v37[16 * v36];
      *(void *)uint64_t v38 = "kCBAdvDataServiceUUIDs";
      *((void *)v38 + 1) = v33;
      long long v39 = v38 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v38 - 1) = *((_OWORD *)v27 - 1);
          v38 -= 16;
          v27 -= 16;
        }
        while (v27 != v18);
        unsigned int v27 = v18;
      }
      operator delete(v27);
      unsigned int v27 = v39;
      uint64_t v18 = v38;
    }
    else
    {
      *(void *)unsigned int v27 = "kCBAdvDataServiceUUIDs";
      *((void *)v27 + 1) = v32;
      v27 += 16;
    }
  }
  uint64_t v40 = *(void *)(a3 + 8);
  uint64_t v42 = *(void *)(v40 + 88);
  uint64_t v43 = *(void *)(v40 + 96);
  long long v41 = (unsigned __int8 **)(v40 + 88);
  if (v43 != v42)
  {
    xpc_object_t v44 = sub_1004F1520(v41, (uint64_t)&v309);
    xpc_object_t v45 = v44;
    if (v27 >= v26)
    {
      uint64_t v46 = (v27 - v18) >> 4;
      unint64_t v47 = v46 + 1;
      if ((unint64_t)(v46 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v47) {
        unint64_t v47 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v48 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v48 = v47;
      }
      if (v48)
      {
        if (v48 >> 60) {
          sub_1000616DC();
        }
        id v49 = (char *)operator new(16 * v48);
      }
      else
      {
        id v49 = 0;
      }
      int v50 = &v49[16 * v46];
      long long v26 = &v49[16 * v48];
      *(void *)int v50 = "kCBAdvDataSolicitedServiceUUIDs";
      *((void *)v50 + 1) = v45;
      uint64_t v51 = v50 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v50 - 1) = *((_OWORD *)v27 - 1);
          v50 -= 16;
          v27 -= 16;
        }
        while (v27 != v18);
        unsigned int v27 = v18;
      }
      operator delete(v27);
      unsigned int v27 = v51;
      uint64_t v18 = v50;
    }
    else
    {
      *(void *)unsigned int v27 = "kCBAdvDataSolicitedServiceUUIDs";
      *((void *)v27 + 1) = v44;
      v27 += 16;
    }
  }
  if (*(void *)(a4 + 8) != *(void *)a4)
  {
    xpc_object_t v52 = sub_1004F1520((unsigned __int8 **)a4, (uint64_t)&v309);
    xpc_object_t v53 = v52;
    if (v27 >= v26)
    {
      uint64_t v54 = (v27 - v18) >> 4;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v55) {
        unint64_t v55 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v55;
      }
      if (v56)
      {
        if (v56 >> 60) {
          sub_1000616DC();
        }
        id v57 = (char *)operator new(16 * v56);
      }
      else
      {
        id v57 = 0;
      }
      BOOL v58 = &v57[16 * v54];
      long long v26 = &v57[16 * v56];
      *(void *)BOOL v58 = "kCBAdvDataHashedServiceUUIDs";
      *((void *)v58 + 1) = v53;
      id v59 = v58 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v58 - 1) = *((_OWORD *)v27 - 1);
          v58 -= 16;
          v27 -= 16;
        }
        while (v27 != v18);
        unsigned int v27 = v18;
      }
      operator delete(v27);
      unsigned int v27 = v59;
      uint64_t v18 = v58;
    }
    else
    {
      *(void *)unsigned int v27 = "kCBAdvDataHashedServiceUUIDs";
      *((void *)v27 + 1) = v52;
      v27 += 16;
    }
  }
  uint64_t v60 = *(void *)(a3 + 8);
  if (*(char *)(v60 + 39) < 0)
  {
    sub_10003B098(bytes, *(void **)(v60 + 16), *(void *)(v60 + 24));
  }
  else
  {
    *(_OWORD *)bytes = *(_OWORD *)(v60 + 16);
    *(void *)&bytes[16] = *(void *)(v60 + 32);
  }
  if ((bytes[23] & 0x80000000) != 0)
  {
    uint64_t v61 = *(void *)&bytes[8];
    operator delete(*(void **)bytes);
    if (!v61) {
      goto LABEL_92;
    }
  }
  else if (!bytes[23])
  {
    goto LABEL_92;
  }
  uint64_t v62 = *(void *)(a3 + 8);
  if (*(char *)(v62 + 39) < 0)
  {
    sub_10003B098(bytes, *(void **)(v62 + 16), *(void *)(v62 + 24));
  }
  else
  {
    *(_OWORD *)bytes = *(_OWORD *)(v62 + 16);
    *(void *)&bytes[16] = *(void *)(v62 + 32);
  }
  if (bytes[23] >= 0) {
    BOOL v63 = bytes;
  }
  else {
    BOOL v63 = *(const char **)bytes;
  }
  xpc_object_t v64 = xpc_string_create(v63);
  xpc_object_t v65 = v64;
  if (v27 >= v26)
  {
    uint64_t v67 = (v27 - v18) >> 4;
    unint64_t v68 = v67 + 1;
    if ((unint64_t)(v67 + 1) >> 60) {
      abort();
    }
    if ((v26 - v18) >> 3 > v68) {
      unint64_t v68 = (v26 - v18) >> 3;
    }
    if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v69 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v69 = v68;
    }
    if (v69)
    {
      if (v69 >> 60) {
        sub_1000616DC();
      }
      __int16 v70 = (char *)operator new(16 * v69);
    }
    else
    {
      __int16 v70 = 0;
    }
    long long v66 = &v70[16 * v67];
    long long v26 = &v70[16 * v69];
    *(void *)long long v66 = "kCBAdvDataLocalName";
    *((void *)v66 + 1) = v65;
    BOOL v71 = v66;
    if (v27 != v18)
    {
      do
      {
        *((_OWORD *)v71 - 1) = *((_OWORD *)v27 - 1);
        v71 -= 16;
        v27 -= 16;
      }
      while (v27 != v18);
      unsigned int v27 = v18;
    }
    operator delete(v27);
    uint64_t v18 = v71;
  }
  else
  {
    *(void *)unsigned int v27 = "kCBAdvDataLocalName";
    *((void *)v27 + 1) = v64;
    long long v66 = v27;
  }
  unsigned int v27 = v66 + 16;
  if ((bytes[23] & 0x80000000) != 0) {
    operator delete(*(void **)bytes);
  }
LABEL_92:
  uint64_t v72 = *(void *)(a3 + 8);
  if (*(_WORD *)(v72 + 40))
  {
    xpc_object_t v73 = xpc_int64_create(*(unsigned __int16 *)(v72 + 40));
    xpc_object_t v74 = v73;
    if (v27 >= v26)
    {
      uint64_t v76 = (v27 - v18) >> 4;
      unint64_t v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v77) {
        unint64_t v77 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v77;
      }
      if (v78)
      {
        if (v78 >> 60) {
          sub_1000616DC();
        }
        uint64_t v79 = (char *)operator new(16 * v78);
      }
      else
      {
        uint64_t v79 = 0;
      }
      uint64_t v80 = &v79[16 * v76];
      long long v26 = &v79[16 * v78];
      *(void *)uint64_t v80 = "kCBAdvDataAppearance";
      *((void *)v80 + 1) = v74;
      uint64_t v75 = v80 + 16;
      if (v27 != v18)
      {
        do
        {
          *((_OWORD *)v80 - 1) = *((_OWORD *)v27 - 1);
          v80 -= 16;
          v27 -= 16;
        }
        while (v27 != v18);
        unsigned int v27 = v18;
      }
      uint64_t v18 = v80;
      if (v27) {
        operator delete(v27);
      }
    }
    else
    {
      *(void *)unsigned int v27 = "kCBAdvDataAppearance";
      *((void *)v27 + 1) = v73;
      uint64_t v75 = v27 + 16;
    }
  }
  else
  {
    uint64_t v75 = v27;
  }
  uint64_t v81 = *(void *)(a3 + 8);
  if (*(unsigned char *)(v81 + 42))
  {
    xpc_object_t v82 = xpc_int64_create(*(char *)(v81 + 43));
    xpc_object_t v83 = v82;
    if (v75 >= v26)
    {
      uint64_t v85 = (v75 - v18) >> 4;
      unint64_t v86 = v85 + 1;
      if ((unint64_t)(v85 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v86) {
        unint64_t v86 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v87 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v87 = v86;
      }
      if (v87)
      {
        if (v87 >> 60) {
          sub_1000616DC();
        }
        int v88 = (char *)operator new(16 * v87);
      }
      else
      {
        int v88 = 0;
      }
      uint64_t v89 = &v88[16 * v85];
      long long v26 = &v88[16 * v87];
      *(void *)uint64_t v89 = "kCBAdvDataTxPowerLevel";
      *((void *)v89 + 1) = v83;
      uint64_t v84 = v89 + 16;
      if (v75 != v18)
      {
        do
        {
          *((_OWORD *)v89 - 1) = *((_OWORD *)v75 - 1);
          v89 -= 16;
          v75 -= 16;
        }
        while (v75 != v18);
        uint64_t v75 = v18;
      }
      uint64_t v18 = v89;
      if (v75) {
        operator delete(v75);
      }
    }
    else
    {
      *(void *)uint64_t v75 = "kCBAdvDataTxPowerLevel";
      *((void *)v75 + 1) = v82;
      uint64_t v84 = v75 + 16;
    }
  }
  else
  {
    uint64_t v84 = v75;
  }
  char v90 = *(void **)(a3 + 8);
  if (v90[16])
  {
    xpc_object_t v91 = xpc_array_create(0, 0);
    uint64_t v92 = (unsigned __int8 *)v90[14];
    unint64_t v93 = (unsigned __int8 *)(v90 + 15);
    if (v92 != (unsigned __int8 *)(v90 + 15))
    {
      do
      {
        bytes[0] = 0;
        if (v310 == (void **)sub_1005B9080(v309, (unsigned __int8 *)v310, v92 + 32))
        {
          *(_OWORD *)bytes = 0uLL;
          unsigned int v94 = sub_10071D240(v92 + 32, bytes);
          xpc_array_set_data(v91, 0xFFFFFFFFFFFFFFFFLL, bytes, v94);
          uint64_t v95 = (const void *)sub_10004A6E4((uint64_t)(v92 + 56));
          size_t v96 = sub_100045F00((uint64_t)(v92 + 56));
          xpc_array_set_data(v91, 0xFFFFFFFFFFFFFFFFLL, v95, v96);
        }
        long long v97 = (unsigned __int8 *)*((void *)v92 + 1);
        if (v97)
        {
          do
          {
            unsigned int v98 = v97;
            long long v97 = *(unsigned __int8 **)v97;
          }
          while (v97);
        }
        else
        {
          do
          {
            unsigned int v98 = (unsigned __int8 *)*((void *)v92 + 2);
            BOOL v275 = *(void *)v98 == (void)v92;
            uint64_t v92 = v98;
          }
          while (!v275);
        }
        uint64_t v92 = v98;
      }
      while (v98 != v93);
    }
    if (xpc_array_get_count(v91))
    {
      if (v84 >= v26)
      {
        uint64_t v107 = (v84 - v18) >> 4;
        unint64_t v108 = v107 + 1;
        if ((unint64_t)(v107 + 1) >> 60) {
          abort();
        }
        if ((v26 - v18) >> 3 > v108) {
          unint64_t v108 = (v26 - v18) >> 3;
        }
        if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v109 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v109 = v108;
        }
        if (v109)
        {
          if (v109 >> 60) {
            sub_1000616DC();
          }
          uint64_t v110 = (char *)operator new(16 * v109);
        }
        else
        {
          uint64_t v110 = 0;
        }
        uint64_t v115 = &v110[16 * v107];
        long long v26 = &v110[16 * v109];
        *(void *)uint64_t v115 = "kCBAdvDataServiceData";
        *((void *)v115 + 1) = v91;
        unsigned __int16 v99 = v115 + 16;
        if (v84 != v18)
        {
          do
          {
            *((_OWORD *)v115 - 1) = *((_OWORD *)v84 - 1);
            v115 -= 16;
            v84 -= 16;
          }
          while (v84 != v18);
          uint64_t v84 = v18;
        }
        uint64_t v18 = v115;
        if (v84) {
          operator delete(v84);
        }
      }
      else
      {
        *(void *)uint64_t v84 = "kCBAdvDataServiceData";
        *((void *)v84 + 1) = v91;
        unsigned __int16 v99 = v84 + 16;
      }
      goto LABEL_145;
    }
    xpc_release(v91);
  }
  unsigned __int16 v99 = v84;
LABEL_145:
  size_t v100 = sub_100045F00(*(void *)(a3 + 8) + 48);
  uint64_t v101 = (_WORD *)sub_10004A6E4(*(void *)(a3 + 8) + 48);
  uint64_t v102 = sub_100035F54();
  if ((((*(unsigned int (**)(uint64_t))(*(void *)v102 + 384))(v102) | a7) & 1) == 0
    && v100 >= 3
    && *v101 == 76)
  {
    size_t v100 = 0;
  }
  if (_os_feature_enabled_impl())
  {
    uint64_t v103 = *(void *)(a3 + 8);
    if (*(_DWORD *)(v103 + 312) || !v100) {
      goto LABEL_281;
    }
  }
  else
  {
    if (!v100) {
      goto LABEL_281;
    }
    uint64_t v103 = *(void *)(a3 + 8);
  }
  if (*(unsigned char *)(v103 + 361))
  {
    xpc_object_t v104 = xpc_int64_create(1);
    xpc_object_t v105 = v104;
    if (v99 >= v26)
    {
      uint64_t v111 = (v99 - v18) >> 4;
      unint64_t v112 = v111 + 1;
      if ((unint64_t)(v111 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v112) {
        unint64_t v112 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v113 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v113 = v112;
      }
      if (v113)
      {
        if (v113 >> 60) {
          sub_1000616DC();
        }
        uint64_t v114 = (char *)operator new(16 * v113);
      }
      else
      {
        uint64_t v114 = 0;
      }
      uint64_t v116 = &v114[16 * v111];
      long long v26 = &v114[16 * v113];
      *(void *)uint64_t v116 = "kCBAdvDataProximityPairingStatusDecrypted";
      *((void *)v116 + 1) = v105;
      unint64_t v106 = v116 + 16;
      if (v99 != v18)
      {
        do
        {
          *((_OWORD *)v116 - 1) = *((_OWORD *)v99 - 1);
          v116 -= 16;
          v99 -= 16;
        }
        while (v99 != v18);
        unsigned __int16 v99 = v18;
      }
      uint64_t v18 = v116;
      if (v99) {
        operator delete(v99);
      }
    }
    else
    {
      *(void *)unsigned __int16 v99 = "kCBAdvDataProximityPairingStatusDecrypted";
      *((void *)v99 + 1) = v104;
      unint64_t v106 = v99 + 16;
    }
  }
  else
  {
    unint64_t v106 = v99;
  }
  if (*(unsigned char *)(*(void *)(a3 + 8) + 362))
  {
    xpc_object_t v117 = xpc_int64_create(1);
    xpc_object_t v118 = v117;
    if (v106 >= v26)
    {
      uint64_t v120 = (v106 - v18) >> 4;
      unint64_t v121 = v120 + 1;
      if ((unint64_t)(v120 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v121) {
        unint64_t v121 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v122 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v122 = v121;
      }
      if (v122)
      {
        if (v122 >> 60) {
          sub_1000616DC();
        }
        double v123 = (char *)operator new(16 * v122);
      }
      else
      {
        double v123 = 0;
      }
      unsigned int v124 = &v123[16 * v120];
      long long v26 = &v123[16 * v122];
      *(void *)unsigned int v124 = "kCBAdvDataAccessoryStatusDecrypted";
      *((void *)v124 + 1) = v118;
      BOOL v119 = v124 + 16;
      if (v106 != v18)
      {
        do
        {
          *((_OWORD *)v124 - 1) = *((_OWORD *)v106 - 1);
          v124 -= 16;
          v106 -= 16;
        }
        while (v106 != v18);
        unint64_t v106 = v18;
      }
      uint64_t v18 = v124;
      if (v106) {
        operator delete(v106);
      }
    }
    else
    {
      *(void *)unint64_t v106 = "kCBAdvDataAccessoryStatusDecrypted";
      *((void *)v106 + 1) = v117;
      BOOL v119 = v106 + 16;
    }
  }
  else
  {
    BOOL v119 = v106;
  }
  if (!*(void *)(a5 + 16) || *v101 != 76)
  {
    xpc_object_t v127 = xpc_data_create(v101, v100);
    xpc_object_t v128 = v127;
    if (v119 >= v26)
    {
      uint64_t v129 = (v119 - v18) >> 4;
      unint64_t v130 = v129 + 1;
      if ((unint64_t)(v129 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v130) {
        unint64_t v130 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v131 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v131 = v130;
      }
      if (v131)
      {
        if (v131 >> 60) {
          sub_1000616DC();
        }
        int v132 = (char *)operator new(16 * v131);
      }
      else
      {
        int v132 = 0;
      }
      char v141 = &v132[16 * v129];
      long long v26 = &v132[16 * v131];
      *(void *)char v141 = "kCBAdvDataManufacturerData";
      *((void *)v141 + 1) = v128;
      unsigned __int16 v99 = v141 + 16;
      if (v119 != v18)
      {
        do
        {
          *((_OWORD *)v141 - 1) = *((_OWORD *)v119 - 1);
          v141 -= 16;
          v119 -= 16;
        }
        while (v119 != v18);
        BOOL v119 = v18;
      }
      uint64_t v18 = v141;
      if (v119) {
        operator delete(v119);
      }
    }
    else
    {
      *(void *)BOOL v119 = "kCBAdvDataManufacturerData";
      *((void *)v119 + 1) = v127;
      unsigned __int16 v99 = v119 + 16;
    }
    goto LABEL_281;
  }
  CFAbsoluteTime v125 = objc_opt_new();
  __int16 v308 = 76;
  [v125 appendBytes:&v308 length:2];
  if (v100 < 3) {
    goto LABEL_211;
  }
  char v300 = (char *)__p + 1;
  unint64_t v133 = 2;
LABEL_224:
  unsigned int v134 = *((unsigned __int8 *)v101 + v133);
  if (v134 != 1)
  {
    size_t v137 = (v133 + 1);
    if (v100 <= v137)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
      {
        sub_1006ACF44();
        sub_10078084C();
      }
      goto LABEL_258;
    }
    int v136 = *((unsigned char *)v101 + v137) & 0x1F;
    if (v136 == 31)
    {
      size_t v138 = (v133 + 2);
      if (v100 <= v138)
      {
        uint64_t v148 = qword_100A19EC8;
        if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          goto LABEL_258;
        }
        sub_1006ACF44();
        if (v307 >= 0) {
          unsigned __int16 v299 = __p;
        }
        else {
          unsigned __int16 v299 = (void **)__p[0];
        }
        *(_DWORD *)bytes = 138412802;
        *(void *)&bytes[4] = v303;
        *(_WORD *)&bytes[12] = 2080;
        *(void *)&bytes[14] = v299;
        *(_WORD *)&bytes[22] = 2112;
        size_t v312 = (size_t)v302;
        unsigned int v145 = "createXpcAdvData error device:%@ address:%s agent:%@, not enough data for the extended data byte. Ignoring.";
        unsigned int v146 = v148;
        uint32_t v147 = 32;
        goto LABEL_590;
      }
      int v136 = *((unsigned __int8 *)v101 + v138) + 31;
      int v135 = 2;
    }
    else
    {
      int v135 = 1;
    }
    if (v100 < (v136 + v135 + v133))
    {
      uint64_t v143 = qword_100A19EC8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        goto LABEL_258;
      }
      sub_1006ACF44();
      char v144 = __p;
      if (v307 < 0) {
        char v144 = (void **)__p[0];
      }
      *(_DWORD *)bytes = 138413826;
      *(void *)&bytes[4] = v303;
      *(_WORD *)&bytes[12] = 2080;
      *(void *)&bytes[14] = v144;
      *(_WORD *)&bytes[22] = 2112;
      size_t v312 = (size_t)v302;
      __int16 v313 = 1024;
      int v314 = v133;
      __int16 v315 = 1024;
      int v316 = v136;
      __int16 v317 = 1024;
      int v318 = v135;
      __int16 v319 = 2048;
      size_t v320 = v100;
      unsigned int v145 = "createXpcAdvData error device:%@ address:%s agent:%@, ignoring packet since byte offset of %d + payload len"
             "gth of %d + length size of %d doesnt fit in dataLength %zu";
      unsigned int v146 = v143;
      uint32_t v147 = 60;
LABEL_590:
      _os_log_error_impl((void *)&_mh_execute_header, v146, OS_LOG_TYPE_ERROR, v145, bytes, v147);
      if (v307 < 0) {
        operator delete(__p[0]);
      }
      goto LABEL_258;
    }
    id v139 = *(uint64_t ***)(a5 + 8);
    if (!v139) {
      goto LABEL_239;
    }
    while (1)
    {
      unsigned int v140 = *((unsigned __int8 *)v139 + 25);
      if (v134 >= v140)
      {
        if (v140 >= v134)
        {
          [v125 appendBytes:v300];
LABEL_227:
          LODWORD(v137) = v133 + 1;
LABEL_239:
          unint64_t v133 = (v137 + v135 + v136);
          if (v100 <= v133)
          {
LABEL_211:
            int v126 = 0;
            goto LABEL_259;
          }
          goto LABEL_224;
        }
        ++v139;
      }
      id v139 = (uint64_t **)*v139;
      if (!v139) {
        goto LABEL_239;
      }
    }
  }
  if (v100 > (v133 + 16))
  {
    int v135 = 0;
    int v136 = 16;
    goto LABEL_227;
  }
  unsigned __int16 v142 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR))
  {
    sub_1006ACF44();
    uint64_t v298 = v307 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)bytes = 138412802;
    *(void *)&bytes[4] = v303;
    *(_WORD *)&bytes[12] = 2080;
    *(void *)&bytes[14] = v298;
    *(_WORD *)&bytes[22] = 2112;
    size_t v312 = (size_t)v302;
    _os_log_error_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_ERROR, "createXpcAdvData error device:%@ address:%s agent:%@, Invalid length", bytes, 0x20u);
    if (v307 < 0) {
      operator delete(__p[0]);
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
    sub_100780820(__p, v300);
  }
LABEL_258:
  int v126 = 1;
LABEL_259:
  if ((unint64_t)objc_msgSend(v125, "length", v300) < 3)
  {
    unsigned __int16 v99 = v119;
  }
  else
  {
    id v149 = v125;
    xpc_object_t v150 = xpc_data_create([v149 bytes], (size_t)[v149 length]);
    xpc_object_t v151 = v150;
    if (v119 >= v26)
    {
      uint64_t v152 = (v119 - v18) >> 4;
      unint64_t v153 = v152 + 1;
      if ((unint64_t)(v152 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v153) {
        unint64_t v153 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v154 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v154 = v153;
      }
      if (v154)
      {
        if (v154 >> 60) {
          sub_1000616DC();
        }
        unint64_t v155 = (char *)operator new(16 * v154);
      }
      else
      {
        unint64_t v155 = 0;
      }
      char v156 = &v155[16 * v152];
      long long v26 = &v155[16 * v154];
      *(void *)char v156 = "kCBAdvDataManufacturerData";
      *((void *)v156 + 1) = v151;
      unsigned __int16 v99 = v156 + 16;
      if (v119 != v18)
      {
        do
        {
          *((_OWORD *)v156 - 1) = *((_OWORD *)v119 - 1);
          v156 -= 16;
          v119 -= 16;
        }
        while (v119 != v18);
        BOOL v119 = v18;
      }
      uint64_t v18 = v156;
      if (v119) {
        operator delete(v119);
      }
    }
    else
    {
      *(void *)BOOL v119 = "kCBAdvDataManufacturerData";
      *((void *)v119 + 1) = v150;
      unsigned __int16 v99 = v119 + 16;
    }
    int v157 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      id v297 = [v149 length];
      *(_DWORD *)bytes = 138413058;
      *(void *)&bytes[4] = v149;
      *(_WORD *)&bytes[12] = 2048;
      *(void *)&bytes[14] = v297;
      *(_WORD *)&bytes[22] = 2048;
      size_t v312 = v100;
      __int16 v313 = 1024;
      int v314 = v126;
      _os_log_debug_impl((void *)&_mh_execute_header, v157, OS_LOG_TYPE_DEBUG, "createXpcAdvData sending data:%@ length:%lu originalLength:%zu lenError:%d", bytes, 0x26u);
    }
  }

LABEL_281:
  if (sub_100045F00(*(void *)(a3 + 8) + 136) == 7)
  {
    unint64_t v158 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v159 = sub_10004A6E4(*(void *)(a3 + 8) + 136);
      *(void *)bytes = 0x704100202;
      *(_WORD *)&unsigned __int8 bytes[8] = 2096;
      *(void *)&bytes[10] = v159;
      _os_log_impl((void *)&_mh_execute_header, v158, OS_LOG_TYPE_DEFAULT, "Create XPC Adv Data with LE BT Address data: %.7P", bytes, 0x12u);
    }
    int v160 = (const void *)sub_10004A6E4(*(void *)(a3 + 8) + 136);
    xpc_object_t v161 = xpc_data_create(v160, 7uLL);
    xpc_object_t v162 = v161;
    if (v99 >= v26)
    {
      uint64_t v164 = (v99 - v18) >> 4;
      unint64_t v165 = v164 + 1;
      if ((unint64_t)(v164 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v165) {
        unint64_t v165 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v166 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v166 = v165;
      }
      if (v166)
      {
        if (v166 >> 60) {
          sub_1000616DC();
        }
        unsigned int v167 = (char *)operator new(16 * v166);
      }
      else
      {
        unsigned int v167 = 0;
      }
      unsigned int v168 = &v167[16 * v164];
      long long v26 = &v167[16 * v166];
      *(void *)unsigned int v168 = "kCBAdvDataLeBluetoothDeviceAddress";
      *((void *)v168 + 1) = v162;
      int v163 = v168 + 16;
      if (v99 != v18)
      {
        do
        {
          *((_OWORD *)v168 - 1) = *((_OWORD *)v99 - 1);
          v168 -= 16;
          v99 -= 16;
        }
        while (v99 != v18);
        unsigned __int16 v99 = v18;
      }
      uint64_t v18 = v168;
      if (v99) {
        operator delete(v99);
      }
    }
    else
    {
      *(void *)unsigned __int16 v99 = "kCBAdvDataLeBluetoothDeviceAddress";
      *((void *)v99 + 1) = v161;
      int v163 = v99 + 16;
    }
  }
  else
  {
    int v163 = v99;
  }
  if (v301 && (size_t v169 = sub_100045F00(*(void *)(a3 + 8) + 224)) != 0)
  {
    double v170 = (const void *)sub_10004A6E4(*(void *)(a3 + 8) + 224);
    xpc_object_t v171 = xpc_data_create(v170, v169);
    xpc_object_t v172 = v171;
    if (v163 >= v26)
    {
      uint64_t v182 = (v163 - v18) >> 4;
      unint64_t v183 = v182 + 1;
      if ((unint64_t)(v182 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v183) {
        unint64_t v183 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v184 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v184 = v183;
      }
      if (v184)
      {
        if (v184 >> 60) {
          sub_1000616DC();
        }
        int v185 = (char *)operator new(16 * v184);
      }
      else
      {
        int v185 = 0;
      }
      char v296 = &v185[16 * v182];
      long long v26 = &v185[16 * v184];
      *(void *)char v296 = "kCBAdvDataTDSData";
      *((void *)v296 + 1) = v172;
      char v173 = v296 + 16;
      if (v163 != v18)
      {
        do
        {
          *((_OWORD *)v296 - 1) = *((_OWORD *)v163 - 1);
          v296 -= 16;
          v163 -= 16;
        }
        while (v163 != v18);
        int v163 = v18;
      }
      uint64_t v18 = v296;
      if (v163) {
        operator delete(v163);
      }
    }
    else
    {
      *(void *)int v163 = "kCBAdvDataTDSData";
      *((void *)v163 + 1) = v171;
      char v173 = v163 + 16;
    }
  }
  else
  {
    char v173 = v163;
  }
  uint64_t v174 = *(void *)(a3 + 8);
  if (*(unsigned char *)(v174 + 218))
  {
    xpc_object_t v175 = xpc_int64_create(*(unsigned __int8 *)(v174 + 218));
    xpc_object_t v176 = v175;
    if (v173 >= v26)
    {
      uint64_t v178 = (v173 - v18) >> 4;
      unint64_t v179 = v178 + 1;
      if ((unint64_t)(v178 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v179) {
        unint64_t v179 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v180 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v180 = v179;
      }
      if (v180)
      {
        if (v180 >> 60) {
          sub_1000616DC();
        }
        double v181 = (char *)operator new(16 * v180);
      }
      else
      {
        double v181 = 0;
      }
      long long v186 = &v181[16 * v178];
      long long v26 = &v181[16 * v180];
      *(void *)long long v186 = "kCBAdvDataProximityLevel";
      *((void *)v186 + 1) = v176;
      int v177 = v186 + 16;
      if (v173 != v18)
      {
        do
        {
          *((_OWORD *)v186 - 1) = *((_OWORD *)v173 - 1);
          v186 -= 16;
          v173 -= 16;
        }
        while (v173 != v18);
        char v173 = v18;
      }
      uint64_t v18 = v186;
      if (v173) {
        operator delete(v173);
      }
    }
    else
    {
      *(void *)char v173 = "kCBAdvDataProximityLevel";
      *((void *)v173 + 1) = v175;
      int v177 = v173 + 16;
    }
  }
  else
  {
    int v177 = v173;
  }
  if (a7)
  {
    xpc_object_t v187 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 219));
    xpc_object_t v188 = v187;
    if (v177 >= v26)
    {
      uint64_t v190 = (v177 - v18) >> 4;
      unint64_t v191 = v190 + 1;
      if ((unint64_t)(v190 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v191) {
        unint64_t v191 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v192 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v192 = v191;
      }
      if (v192)
      {
        if (v192 >> 60) {
          sub_1000616DC();
        }
        unint64_t v193 = (char *)operator new(16 * v192);
      }
      else
      {
        unint64_t v193 = 0;
      }
      double v194 = &v193[16 * v190];
      long long v26 = &v193[16 * v192];
      *(void *)double v194 = "kCBAdvDataChannel";
      *((void *)v194 + 1) = v188;
      int v189 = v194 + 16;
      if (v177 != v18)
      {
        do
        {
          *((_OWORD *)v194 - 1) = *((_OWORD *)v177 - 1);
          v194 -= 16;
          v177 -= 16;
        }
        while (v177 != v18);
        int v177 = v18;
      }
      uint64_t v18 = v194;
      if (v177) {
        operator delete(v177);
      }
    }
    else
    {
      *(void *)int v177 = "kCBAdvDataChannel";
      *((void *)v177 + 1) = v187;
      int v189 = v177 + 16;
    }
    xpc_object_t v195 = xpc_BOOL_create(*(unsigned char *)(*(void *)(a3 + 8) + 220));
    xpc_object_t v196 = v195;
    if (v189 >= v26)
    {
      uint64_t v198 = (v189 - v18) >> 4;
      unint64_t v199 = v198 + 1;
      if ((unint64_t)(v198 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v199) {
        unint64_t v199 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v200 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v200 = v199;
      }
      if (v200)
      {
        if (v200 >> 60) {
          sub_1000616DC();
        }
        int v201 = (char *)operator new(16 * v200);
      }
      else
      {
        int v201 = 0;
      }
      long long v202 = &v201[16 * v198];
      long long v26 = &v201[16 * v200];
      *(void *)long long v202 = "kCBAdvDataWlanRSSI";
      *((void *)v202 + 1) = v196;
      int v197 = v202 + 16;
      if (v189 == v18) {
        goto LABEL_368;
      }
      do
      {
        *((_OWORD *)v202 - 1) = *((_OWORD *)v189 - 1);
        v202 -= 16;
        v189 -= 16;
      }
      while (v189 != v18);
      if (v18) {
LABEL_368:
      }
        operator delete(v18);
      uint64_t v18 = v202;
    }
    else
    {
      *(void *)int v189 = "kCBAdvDataWlanRSSI";
      *((void *)v189 + 1) = v195;
      int v197 = v189 + 16;
    }
    xpc_object_t v203 = xpc_BOOL_create(*(unsigned char *)(*(void *)(a3 + 8) + 217));
    xpc_object_t v204 = v203;
    if (v197 >= v26)
    {
      uint64_t v205 = (v197 - v18) >> 4;
      unint64_t v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v206) {
        unint64_t v206 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v207 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v207 = v206;
      }
      if (v207)
      {
        if (v207 >> 60) {
          sub_1000616DC();
        }
        int v208 = (char *)operator new(16 * v207);
      }
      else
      {
        int v208 = 0;
      }
      __n128 v209 = &v208[16 * v205];
      long long v26 = &v208[16 * v207];
      *(void *)__n128 v209 = "kCBAdvDataWSaturated";
      *((void *)v209 + 1) = v204;
      int v177 = v209 + 16;
      if (v197 == v18) {
        goto LABEL_385;
      }
      do
      {
        *((_OWORD *)v209 - 1) = *((_OWORD *)v197 - 1);
        v209 -= 16;
        v197 -= 16;
      }
      while (v197 != v18);
      if (v18) {
LABEL_385:
      }
        operator delete(v18);
      uint64_t v18 = v209;
    }
    else
    {
      *(void *)int v197 = "kCBAdvDataWSaturated";
      *((void *)v197 + 1) = v203;
      int v177 = v197 + 16;
    }
  }
  xpc_object_t v210 = xpc_double_create(*(double *)(*(void *)(a3 + 8) + 240));
  xpc_object_t v212 = v210;
  if (v177 >= v26)
  {
    uint64_t v214 = (v177 - v18) >> 4;
    unint64_t v215 = v214 + 1;
    if ((unint64_t)(v214 + 1) >> 60) {
      abort();
    }
    if ((v26 - v18) >> 3 > v215) {
      unint64_t v215 = (v26 - v18) >> 3;
    }
    if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v216 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v216 = v215;
    }
    if (v216)
    {
      if (v216 >> 60) {
        sub_1000616DC();
      }
      unsigned __int16 v217 = (char *)operator new(16 * v216);
    }
    else
    {
      unsigned __int16 v217 = 0;
    }
    int v218 = &v217[16 * v214];
    long long v26 = &v217[16 * v216];
    *(void *)int v218 = "kCBAdvDataTimestamp";
    *((void *)v218 + 1) = v212;
    unsigned int v213 = v218 + 16;
    if (v177 != v18)
    {
      do
      {
        long long v211 = *((_OWORD *)v177 - 1);
        *((_OWORD *)v218 - 1) = v211;
        v218 -= 16;
        v177 -= 16;
      }
      while (v177 != v18);
      int v177 = v18;
    }
    uint64_t v18 = v218;
    if (v177) {
      operator delete(v177);
    }
  }
  else
  {
    *(void *)int v177 = "kCBAdvDataTimestamp";
    *((void *)v177 + 1) = v210;
    unsigned int v213 = v177 + 16;
  }
  LOBYTE(v211) = *(unsigned char *)(*(void *)(a3 + 8) + 341);
  xpc_object_t v219 = xpc_double_create((double)(unint64_t)v211);
  xpc_object_t v221 = v219;
  if (v213 >= v26)
  {
    uint64_t v223 = (v213 - v18) >> 4;
    unint64_t v224 = v223 + 1;
    if ((unint64_t)(v223 + 1) >> 60) {
      abort();
    }
    if ((v26 - v18) >> 3 > v224) {
      unint64_t v224 = (v26 - v18) >> 3;
    }
    if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v225 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v225 = v224;
    }
    if (v225)
    {
      if (v225 >> 60) {
        sub_1000616DC();
      }
      unsigned int v226 = (char *)operator new(16 * v225);
    }
    else
    {
      unsigned int v226 = 0;
    }
    uint64_t v227 = &v226[16 * v223];
    long long v26 = &v226[16 * v225];
    *(void *)uint64_t v227 = "kCBAdvDataRxPrimaryPHY";
    *((void *)v227 + 1) = v221;
    unsigned int v222 = v227 + 16;
    if (v213 == v18) {
      goto LABEL_419;
    }
    do
    {
      long long v220 = *((_OWORD *)v213 - 1);
      *((_OWORD *)v227 - 1) = v220;
      v227 -= 16;
      v213 -= 16;
    }
    while (v213 != v18);
    if (v18) {
LABEL_419:
    }
      operator delete(v18);
    uint64_t v18 = v227;
  }
  else
  {
    *(void *)unsigned int v213 = "kCBAdvDataRxPrimaryPHY";
    *((void *)v213 + 1) = v219;
    unsigned int v222 = v213 + 16;
  }
  LOBYTE(v220) = *(unsigned char *)(*(void *)(a3 + 8) + 342);
  xpc_object_t v228 = xpc_double_create((double)(unint64_t)v220);
  xpc_object_t v229 = v228;
  if (v222 >= v26)
  {
    uint64_t v231 = (v222 - v18) >> 4;
    unint64_t v232 = v231 + 1;
    if ((unint64_t)(v231 + 1) >> 60) {
      abort();
    }
    if ((v26 - v18) >> 3 > v232) {
      unint64_t v232 = (v26 - v18) >> 3;
    }
    if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v233 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v233 = v232;
    }
    if (v233)
    {
      if (v233 >> 60) {
        sub_1000616DC();
      }
      uint64_t v234 = (char *)operator new(16 * v233);
    }
    else
    {
      uint64_t v234 = 0;
    }
    unint64_t v235 = &v234[16 * v231];
    long long v26 = &v234[16 * v233];
    *(void *)unint64_t v235 = "kCBAdvDataRxSecondaryPHY";
    *((void *)v235 + 1) = v229;
    uint64_t v230 = v235 + 16;
    if (v222 == v18) {
      goto LABEL_436;
    }
    do
    {
      *((_OWORD *)v235 - 1) = *((_OWORD *)v222 - 1);
      v235 -= 16;
      v222 -= 16;
    }
    while (v222 != v18);
    if (v18) {
LABEL_436:
    }
      operator delete(v18);
    uint64_t v18 = v235;
  }
  else
  {
    *(void *)unsigned int v222 = "kCBAdvDataRxSecondaryPHY";
    *((void *)v222 + 1) = v228;
    uint64_t v230 = v222 + 16;
  }
  if (a10)
  {
    xpc_object_t v236 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 365));
    xpc_object_t v237 = v236;
    if (v230 >= v26)
    {
      uint64_t v239 = (v230 - v18) >> 4;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v240) {
        unint64_t v240 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v241 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v240;
      }
      if (v241)
      {
        if (v241 >> 60) {
          sub_1000616DC();
        }
        uint64_t v242 = (char *)operator new(16 * v241);
      }
      else
      {
        uint64_t v242 = 0;
      }
      uint64_t v243 = &v242[16 * v239];
      long long v26 = &v242[16 * v241];
      *(void *)uint64_t v243 = "kCBAdvDataScanSourceCore";
      *((void *)v243 + 1) = v237;
      uint64_t v238 = v243 + 16;
      if (v230 == v18) {
        goto LABEL_454;
      }
      do
      {
        *((_OWORD *)v243 - 1) = *((_OWORD *)v230 - 1);
        v243 -= 16;
        v230 -= 16;
      }
      while (v230 != v18);
      if (v18) {
LABEL_454:
      }
        operator delete(v18);
      uint64_t v18 = v243;
    }
    else
    {
      *(void *)uint64_t v230 = "kCBAdvDataScanSourceCore";
      *((void *)v230 + 1) = v236;
      uint64_t v238 = v230 + 16;
    }
    xpc_object_t v244 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 366));
    xpc_object_t v245 = v244;
    if (v238 >= v26)
    {
      uint64_t v247 = (v238 - v18) >> 4;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v248) {
        unint64_t v248 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v249 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v249 = v248;
      }
      if (v249)
      {
        if (v249 >> 60) {
          sub_1000616DC();
        }
        uint64_t v250 = (char *)operator new(16 * v249);
      }
      else
      {
        uint64_t v250 = 0;
      }
      uint64_t v251 = &v250[16 * v247];
      long long v26 = &v250[16 * v249];
      *(void *)uint64_t v251 = "kCBAdvDataIsELNAOn";
      *((void *)v251 + 1) = v245;
      uint64_t v246 = v251 + 16;
      if (v238 == v18) {
        goto LABEL_471;
      }
      do
      {
        *((_OWORD *)v251 - 1) = *((_OWORD *)v238 - 1);
        v251 -= 16;
        v238 -= 16;
      }
      while (v238 != v18);
      if (v18) {
LABEL_471:
      }
        operator delete(v18);
      uint64_t v18 = v251;
    }
    else
    {
      *(void *)uint64_t v238 = "kCBAdvDataIsELNAOn";
      *((void *)v238 + 1) = v244;
      uint64_t v246 = v238 + 16;
    }
    xpc_object_t v252 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 367));
    xpc_object_t v253 = v252;
    if (v246 >= v26)
    {
      uint64_t v255 = (v246 - v18) >> 4;
      unint64_t v256 = v255 + 1;
      if ((unint64_t)(v255 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v256) {
        unint64_t v256 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v257 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v257 = v256;
      }
      if (v257)
      {
        if (v257 >> 60) {
          sub_1000616DC();
        }
        uint64_t v258 = (char *)operator new(16 * v257);
      }
      else
      {
        uint64_t v258 = 0;
      }
      uint64_t v259 = &v258[16 * v255];
      long long v26 = &v258[16 * v257];
      *(void *)uint64_t v259 = "kCBAdvDataIsPassup";
      *((void *)v259 + 1) = v253;
      uint64_t v254 = v259 + 16;
      if (v246 == v18) {
        goto LABEL_488;
      }
      do
      {
        *((_OWORD *)v259 - 1) = *((_OWORD *)v246 - 1);
        v259 -= 16;
        v246 -= 16;
      }
      while (v246 != v18);
      if (v18) {
LABEL_488:
      }
        operator delete(v18);
      uint64_t v18 = v259;
    }
    else
    {
      *(void *)uint64_t v246 = "kCBAdvDataIsPassup";
      *((void *)v246 + 1) = v252;
      uint64_t v254 = v246 + 16;
    }
    xpc_object_t v260 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 368));
    xpc_object_t v261 = v260;
    if (v254 >= v26)
    {
      uint64_t v263 = (v254 - v18) >> 4;
      unint64_t v264 = v263 + 1;
      if ((unint64_t)(v263 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v264) {
        unint64_t v264 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v265 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v265 = v264;
      }
      if (v265)
      {
        if (v265 >> 60) {
          sub_1000616DC();
        }
        uint64_t v266 = (char *)operator new(16 * v265);
      }
      else
      {
        uint64_t v266 = 0;
      }
      uint64_t v267 = &v266[16 * v263];
      long long v26 = &v266[16 * v265];
      *(void *)uint64_t v267 = "kCBAdvDataIsFromSCCompensation";
      *((void *)v267 + 1) = v261;
      char v262 = v267 + 16;
      if (v254 == v18) {
        goto LABEL_505;
      }
      do
      {
        *((_OWORD *)v267 - 1) = *((_OWORD *)v254 - 1);
        v267 -= 16;
        v254 -= 16;
      }
      while (v254 != v18);
      if (v18) {
LABEL_505:
      }
        operator delete(v18);
      uint64_t v18 = v267;
    }
    else
    {
      *(void *)uint64_t v254 = "kCBAdvDataIsFromSCCompensation";
      *((void *)v254 + 1) = v260;
      char v262 = v254 + 16;
    }
    xpc_object_t v268 = xpc_int64_create(*(unsigned __int8 *)(*(void *)(a3 + 8) + 369));
    xpc_object_t v269 = v268;
    if (v262 >= v26)
    {
      uint64_t v270 = (v262 - v18) >> 4;
      unint64_t v271 = v270 + 1;
      if ((unint64_t)(v270 + 1) >> 60) {
        abort();
      }
      if ((v26 - v18) >> 3 > v271) {
        unint64_t v271 = (v26 - v18) >> 3;
      }
      if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v272 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v272 = v271;
      }
      if (v272)
      {
        if (v272 >> 60) {
          sub_1000616DC();
        }
        int v273 = (char *)operator new(16 * v272);
      }
      else
      {
        int v273 = 0;
      }
      uint64_t v274 = &v273[16 * v270];
      long long v26 = &v273[16 * v272];
      *(void *)uint64_t v274 = "kCBAdvDataIsCoexDenied";
      *((void *)v274 + 1) = v269;
      uint64_t v230 = v274 + 16;
      if (v262 == v18) {
        goto LABEL_522;
      }
      do
      {
        *((_OWORD *)v274 - 1) = *((_OWORD *)v262 - 1);
        v274 -= 16;
        v262 -= 16;
      }
      while (v262 != v18);
      if (v18) {
LABEL_522:
      }
        operator delete(v18);
      uint64_t v18 = v274;
    }
    else
    {
      *(void *)char v262 = "kCBAdvDataIsCoexDenied";
      *((void *)v262 + 1) = v268;
      uint64_t v230 = v262 + 16;
    }
  }
  if (*(unsigned char *)(*(void *)(a3 + 8) + 14)) {
    BOOL v275 = a11 == 0;
  }
  else {
    BOOL v275 = 1;
  }
  if (v275)
  {
    BOOL v276 = v230;
    goto LABEL_549;
  }
  xpc_object_t v277 = xpc_int64_create(1);
  xpc_object_t v278 = v277;
  if (v230 < v26)
  {
    *(void *)uint64_t v230 = "kCBAdvDataHostWakeEvent";
    *((void *)v230 + 1) = v277;
    BOOL v276 = v230 + 16;
    goto LABEL_549;
  }
  uint64_t v279 = (v230 - v18) >> 4;
  unint64_t v280 = v279 + 1;
  if ((unint64_t)(v279 + 1) >> 60) {
    abort();
  }
  if ((v26 - v18) >> 3 > v280) {
    unint64_t v280 = (v26 - v18) >> 3;
  }
  if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v281 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v281 = v280;
  }
  if (v281)
  {
    if (v281 >> 60) {
      sub_1000616DC();
    }
    int v282 = (char *)operator new(16 * v281);
  }
  else
  {
    int v282 = 0;
  }
  uint64_t v283 = &v282[16 * v279];
  long long v26 = &v282[16 * v281];
  *(void *)uint64_t v283 = "kCBAdvDataHostWakeEvent";
  *((void *)v283 + 1) = v278;
  BOOL v276 = v283 + 16;
  if (v230 == v18)
  {
    uint64_t v18 = v230;
  }
  else
  {
    do
    {
      *((_OWORD *)v283 - 1) = *((_OWORD *)v230 - 1);
      v283 -= 16;
      v230 -= 16;
    }
    while (v230 != v18);
    if (!v18) {
      goto LABEL_548;
    }
  }
  operator delete(v18);
LABEL_548:
  uint64_t v18 = v283;
LABEL_549:
  if (!sub_100045F00(*(void *)(a3 + 8) + 448))
  {
    unsigned int v288 = v276;
    goto LABEL_569;
  }
  uint64_t v284 = (const void *)sub_10004A6E4(*(void *)(a3 + 8) + 448);
  size_t v285 = sub_100045F00(*(void *)(a3 + 8) + 448);
  xpc_object_t v286 = xpc_data_create(v284, v285);
  xpc_object_t v287 = v286;
  if (v276 < v26)
  {
    *(void *)BOOL v276 = "kCBCoordinatedSetRSIAdv";
    *((void *)v276 + 1) = v286;
    unsigned int v288 = v276 + 16;
    goto LABEL_569;
  }
  uint64_t v289 = (v276 - v18) >> 4;
  unint64_t v290 = v289 + 1;
  if ((unint64_t)(v289 + 1) >> 60) {
    abort();
  }
  if ((v26 - v18) >> 3 > v290) {
    unint64_t v290 = (v26 - v18) >> 3;
  }
  if ((unint64_t)(v26 - v18) >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v290 = 0xFFFFFFFFFFFFFFFLL;
  }
  if (v290)
  {
    if (v290 >> 60) {
      sub_1000616DC();
    }
    unsigned int v291 = (char *)operator new(16 * v290);
  }
  else
  {
    unsigned int v291 = 0;
  }
  uint64_t v292 = &v291[16 * v289];
  *(void *)uint64_t v292 = "kCBCoordinatedSetRSIAdv";
  *((void *)v292 + 1) = v287;
  unsigned int v288 = v292 + 16;
  if (v276 == v18)
  {
    uint64_t v18 = v276;
  }
  else
  {
    do
    {
      *((_OWORD *)v292 - 1) = *((_OWORD *)v276 - 1);
      v292 -= 16;
      v276 -= 16;
    }
    while (v276 != v18);
    if (!v18) {
      goto LABEL_568;
    }
  }
  operator delete(v18);
LABEL_568:
  uint64_t v18 = v292;
LABEL_569:
  xpc_object_t v293 = xpc_dictionary_create(0, 0, 0);
  if (v18 != v288)
  {
    char v294 = (xpc_object_t *)v18;
    do
    {
      xpc_dictionary_set_value(v293, (const char *)*v294, v294[1]);
      xpc_release(v294[1]);
      v294 += 2;
    }
    while (v294 != (xpc_object_t *)v288);
  }
  sub_1000486F0((uint64_t)&v309, v310[0]);
  if (v18) {
    operator delete(v18);
  }

  return v293;
}

void sub_100045DA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,void *a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1000486F0((uint64_t)&a20, a21);
  if (v29) {
    operator delete(v29);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100045F00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return *(void *)(v1 + 16);
  }
  else {
    return 0;
  }
}

char *sub_100045F18(uint64_t **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v5 = (void **)sub_100045FA8((uint64_t)a1, &v9, a2);
  unint64_t v6 = (char *)*v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    unint64_t v6 = (char *)operator new(0x30uLL);
    *(_OWORD *)(v6 + 28) = *(_OWORD *)a3;
    *((_DWORD *)v6 + 11) = *(_DWORD *)(a3 + 16);
    sub_100036CA0(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

void *sub_100045FA8(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = (void *)v4;
        char v8 = (unsigned __int8 *)(v4 + 28);
        if (!sub_10071D284(a3, (unsigned __int8 *)(v4 + 28))) {
          break;
        }
        uint64_t v4 = *v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_10071D284(v8, a3)) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t sub_10004603C(uint64_t a1, unint64_t a2, int a3, uint64_t a4, char a5, int a6)
{
  uint64_t v66 = 0;
  long long v65 = 0u;
  long long v64 = 0u;
  long long v63 = 0u;
  long long v62 = 0u;
  long long v61 = 0u;
  long long v60 = 0u;
  long long v59 = 0u;
  long long v58 = 0u;
  long long v57 = 0u;
  long long v56 = 0u;
  long long v55 = 0u;
  long long v54 = 0u;
  long long v53 = 0u;
  long long v52 = 0u;
  long long v51 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  sub_10004C67C((uint64_t)&v49);
  if (a2)
  {
    ++*(void *)(a1 + 2096);
    if (a6)
    {
      uint64_t v10 = *(void *)(a4 + 8);
      __int16 v11 = *(_WORD *)(v10 + 472);
      uint64_t v12 = *(unsigned __int8 *)(v10 + 474);
      uint64_t v13 = *(unsigned __int8 *)(v10 + 342);
      uint64_t v14 = sub_100050530();
      (*(void (**)(uint64_t, unint64_t))(*(void *)v14 + 680))(v14, ((unint64_t)(v11 & 4) << 16) | (v13 << 24) | ((unint64_t)(v11 & 3) << 8) | v12);
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009BF828);
    }
    v71[1] = 0;
    v71[0] = 0;
    uint64_t v40 = off_1009F7ED8;
    sub_100014B58((uint64_t)off_1009F7ED8, a2, 1u, 1u, 0, 0, (unsigned __int8 *)v71);
    if (!uuid_is_null((const unsigned __int8 *)v71))
    {
      long long v41 = sub_100031234((const unsigned __int8 *)v71);
      sub_100008C34((uint64_t)v40, v41, *(_DWORD *)(*(void *)(a4 + 8) + 312) != 0);
      uint64_t v17 = *(void *)(a4 + 8);
      if (*(unsigned char *)(v17 + 304)) {
        char v18 = 1;
      }
      else {
        char v18 = *(unsigned char *)(v17 + 305) != 0;
      }
      sub_1000076AC((uint64_t)v40, v41, v18);
      uint64_t v21 = *(void *)(a4 + 8);
      if (*(unsigned char *)(v21 + 13))
      {
        sub_1006C119C((uint64_t)v40, v41, 1);
        uint64_t v21 = *(void *)(a4 + 8);
      }
      sub_100006FB4((uint64_t)v40, v41, *(unsigned char *)(v21 + 12));
      uint64_t v22 = *(void *)(a4 + 8);
      if (*(_WORD *)(v22 + 40))
      {
        sub_1006BC558((uint64_t)v40, v41, *(_WORD *)(v22 + 40));
        uint64_t v22 = *(void *)(a4 + 8);
      }
      if (*(void *)(v22 + 128))
      {
        long long v69 = xmmword_1007BA744;
        int v70 = 0;
        sub_100035F98(&v67, (__n128 *)&v69);
        uint64_t v23 = sub_100012C44(v22 + 112, (unsigned __int8 *)&v67);
        if (v22 + 120 != v23)
        {
          uint64_t v24 = v23 + 56;
          if ((unint64_t)sub_100045F00(v23 + 56) >= 3)
          {
            uint64_t v25 = sub_10004A6E4(v24);
            if (*(_WORD *)(v25 + 1))
            {
              long long v26 = +[NSString stringWithFormat:@"%d", *(unsigned __int16 *)(v25 + 1)];
              sub_1006BE60C((uint64_t)v40, v41, @"GHSDeviceType", v26);
              if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
                sub_1007959A0();
              }
            }
          }
        }
      }
      if (*(unsigned char *)(a1 + 3256))
      {
        uint64_t v27 = *(void *)(a4 + 8);
        if (*(unsigned char *)(v27 + 367))
        {
          int v28 = *(unsigned __int8 *)(v27 + 365);
          if (v28 == 1)
          {
            ++*(_DWORD *)(a1 + 3244);
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
              sub_100795938();
            }
          }
          else if (!v28)
          {
            ++*(_DWORD *)(a1 + 3240);
            if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
              sub_1007958D0();
            }
          }
        }
      }
      sub_100006B08((uint64_t)v40, v41);
      sub_100007738((uint64_t)v40, v41, *(double *)(*(void *)(a4 + 8) + 240));
      if (*(unsigned char *)(*(void *)(a4 + 8) + 367)) {
        sub_1006C12B4((uint64_t)v40, v41, a5);
      }
      sub_1000091C4((uint64_t)v40, v41, a5);
      v67.n128_u64[0] = (unint64_t)v71;
      unint64_t v35 = sub_100051A1C((uint64_t **)(a1 + 2064), (unsigned __int8 *)v71, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 **)&v67);
      switch(a3)
      {
        case 0:
        case 2:
        case 3:
          if (a6) {
            uint64_t v36 = (uint64_t)(v35 + 12);
          }
          else {
            uint64_t v36 = (uint64_t)(v35 + 6);
          }
          goto LABEL_62;
        case 1:
          if (a6) {
            uint64_t v36 = (uint64_t)(v35 + 12);
          }
          else {
            uint64_t v36 = (uint64_t)(v35 + 8);
          }
          goto LABEL_62;
        case 4:
          if (a6) {
            uint64_t v36 = (uint64_t)(v35 + 14);
          }
          else {
            uint64_t v36 = (uint64_t)(v35 + 10);
          }
LABEL_62:
          sub_100049EE0(v36, a4);
          break;
        default:
          break;
      }
      v46[1] = 0;
      v46[0] = 0;
      sub_1000521B0(v46);
    }
    uint64_t v15 = *(void *)(a4 + 8);
    if (*(unsigned char *)(v15 + 14))
    {
      xpc_object_t v16 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
      {
        long long v39 = sub_1006AD3F0();
        v67.n128_u32[0] = 138543362;
        *(unint64_t *)((char *)v67.n128_u64 + 4) = (unint64_t)v39;
        _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to get UUID for device \"%{public}@\" that caused AP wakeup", (uint8_t *)&v67, 0xCu);

        uint64_t v15 = *(void *)(a4 + 8);
      }
      __n128 v67 = 0uLL;
      uint64_t v68 = 0;
      if (*(char *)(v15 + 39) < 0)
      {
        sub_10003B098(&v44, *(void **)(v15 + 16), *(void *)(v15 + 24));
      }
      else
      {
        long long v44 = *(_OWORD *)(v15 + 16);
        uint64_t v45 = *(void *)(v15 + 32);
      }
      uint64_t v19 = HIBYTE(v45);
      if (v45 < 0) {
        uint64_t v19 = *((void *)&v44 + 1);
      }
      if (v19)
      {
        uint64_t v20 = *(void *)(a4 + 8);
        if (*(char *)(v20 + 39) < 0)
        {
          sub_10003B098(&v67, *(void **)(v20 + 16), *(void *)(v20 + 24));
        }
        else
        {
          __n128 v67 = *(__n128 *)(v20 + 16);
          uint64_t v68 = *(void *)(v20 + 32);
        }
      }
      else
      {
        sub_10004191C(&v67, "Unknown");
      }
      if (SHIBYTE(v45) < 0) {
        operator delete((void *)v44);
      }
      if (*(unsigned char *)(*(void *)(a4 + 8) + 367)) {
        uint64_t v29 = 2;
      }
      else {
        uint64_t v29 = 1;
      }
      uint64_t v30 = sub_1003731C0();
      uint64_t v31 = *(atomic_uint **)(*(void *)(a4 + 8) + 56);
      unint64_t v47 = &off_100998428;
      unint64_t v48 = v31;
      if (v31) {
        sub_100037354((uint64_t)v31);
      }
      sub_1006AD3F0();
      id v32 = objc_claimAutoreleasedReturnValue();
      id v33 = [v32 UTF8String];
      if (v68 >= 0) {
        uint64_t v34 = &v67;
      }
      else {
        uint64_t v34 = (__n128 *)v67.n128_u64[0];
      }
      (*(void (**)(uint64_t, uint64_t (***)(), uint64_t, const char *, id, __n128 *))(*(void *)v30 + 32))(v30, &v47, v29, "com.apple.bluetoothd", v33, v34);

      unint64_t v47 = &off_100998428;
      if (v48) {
        sub_1000368F4(v48);
      }
      if (SHIBYTE(v68) < 0) {
        operator delete((void *)v67.n128_u64[0]);
      }
    }
  }
  *(void *)((char *)&v49
  *(void *)&long long v50 = v37;
  if (SHIBYTE(v55) < 0) {
    operator delete(*((void **)&v54 + 1));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100048170(_Unwind_Exception *a1)
{
  std::ostream::sentry::~sentry();
  if (*(char *)(v1 + 471) < 0) {
    operator delete(*(void **)(v1 + 448));
  }
  if (*(char *)(v1 + 575) < 0) {
    operator delete(*(void **)(v1 + 552));
  }
  *(void *)(v1 + 376) = &off_100998428;
  xpc_object_t v3 = *(atomic_uint **)(v1 + 384);
  if (v3) {
    sub_1000368F4(v3);
  }

  *(void *)(v1 + 432) = *(void *)(v1 + 184);
  uint64_t v4 = *(atomic_uint **)(v1 + 440);
  if (v4) {
    sub_1000368F4(v4);
  }

  sub_1000518C4(v1 + 856, *(void **)(v1 + 864));
  sub_100742518(v1 + 880);
  sub_100742518(v1 + 1888);
  *(void *)(v1 + 1280) = &off_100998468;
  uint64_t v5 = *(atomic_uint **)(v1 + 1288);
  if (v5) {
    sub_1000368F4(v5);
  }

  sub_100742518(v1 + 1312);
  _Unwind_Resume(a1);
}

void sub_1000486F0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000486F0(a1, *a2);
    sub_1000486F0(a1, a2[1]);
    operator delete(a2);
  }
}

void sub_100048744(os_unfair_lock_s *a1, void *a2)
{
  xpc_object_t v3 = a2;
  os_unfair_lock_lock(a1);
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  uint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    uint64_t v4 = v5;
  }
  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1000487E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100048810(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 64))(a2, *(void *)(a1 + 32));
}

uint64_t sub_100048844(uint64_t a1, uint64_t (***a2)(void, void, void, uint64_t, uint64_t, void, uint64_t, void))
{
  return (**a2)(a2, *(void *)(a1 + 48), *(void *)(a1 + 32), a1 + 56, a1 + 72, *(unsigned __int8 *)(a1 + 120), a1 + 96, *(void *)(a1 + 40));
}

uint64_t sub_100048888(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a2 + 48))(a2, *(void *)(a1 + 32), a1 + 40);
}

uint64_t sub_1000488C0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, void **a4, void *a5)
{
  id v10 = a5;
  __int16 v11 = v10;
  char v46 = 0;
  uint64_t v12 = *(unsigned char **)(a3 + 8);
  if (v12[304] && !v12[370])
  {
    uint64_t v18 = *(void *)(a1 + 8);
    if (!*(unsigned char *)(v18 + 122) && *(unsigned __int16 *)(v18 + 170) << 16 != 0x10000) {
      goto LABEL_17;
    }
    goto LABEL_61;
  }
  if (!v12[305])
  {
    [v10 setString:@"default"];
    if (!sub_100049DF0(a1)) {
      goto LABEL_17;
    }
    if (!sub_100049E7C(a1))
    {
LABEL_44:
      uint64_t v23 = sub_10004A150((uint64_t **)(a1 + 104), a2, a3);
      if ((v24 & 1) == 0)
      {
        uint64_t v25 = v23;
        if (!v46 && (sub_1006FA5BC(a1, v24, a3, (uint64_t)(v23 + 6)) & 1) == 0)
        {
          long long v41 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
          {
            sub_100401EBC(a2, out);
            uint64_t v42 = out[23] >= 0 ? out : *(unsigned char **)out;
            *(_DWORD *)__p = 136446210;
            *(void *)&__p[4] = v42;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "Ignoring duplicate advertisement data for device \"%{public}s\"", __p, 0xCu);
            if ((out[23] & 0x80000000) != 0) {
              operator delete(*(void **)out);
            }
          }
          goto LABEL_17;
        }
        sub_100049EE0((uint64_t)(v25 + 6), a3);
      }
      uint64_t v26 = sub_1000308C0(a1 + 152, a2);
      if (a1 + 160 != v26)
      {
        uint64_t v27 = *(uint64_t **)(v26 + 48);
        uint64_t v28 = *v27;
        *(void *)(v28 + 8) = v27[1];
        *(void *)v27[1] = v28;
        --*(void *)(a1 + 144);
        operator delete(v27);
      }
      uint64_t v29 = sub_100030690(a1 + 128, 0, 0, a2);
      *uint64_t v29 = a1 + 128;
      uint64_t v30 = *(void **)(a1 + 136);
      v29[1] = v30;
      *uint64_t v30 = v29;
      uint64_t v31 = *(void *)(a1 + 144) + 1;
      *(void *)(a1 + 136) = v29;
      *(void *)(a1 + 144) = v31;
      *(void *)uuid_t out = a2;
      sub_10004A018((uint64_t **)(a1 + 152), a2, (uint64_t)&unk_1007BE9D0, (const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *)out)[6] = (uint64_t)v29;
      if (*(void *)(a1 + 144) <= (unint64_t)*(unsigned __int16 *)(a1 + 176))
      {
        int v36 = 1;
      }
      else
      {
        memset(dst, 0, sizeof(dst));
        uuid_copy(dst, (const unsigned __int8 *)(*(void *)(a1 + 128) + 16));
        id v32 = *(uint64_t **)(a1 + 128);
        uint64_t v33 = *v32;
        *(void *)(v33 + 8) = v32[1];
        *(void *)v32[1] = v33;
        --*(void *)(a1 + 144);
        operator delete(v32);
        uint64_t v34 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
        {
          memset(out, 0, 37);
          uuid_unparse_upper(dst, out);
          sub_10004191C(__p, out);
          unint64_t v35 = v49 >= 0 ? __p : *(unsigned char **)__p;
          *(_DWORD *)buf = 136446210;
          long long v51 = v35;
          _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_INFO, "doesDeviceMatch: erasing last device %{public}s", buf, 0xCu);
          if (v49 < 0) {
            operator delete(*(void **)__p);
          }
        }
        sub_1006FDA58((uint64_t **)(a1 + 104), dst);
        sub_1006FDB00((uint64_t **)(a1 + 152), dst);
        int v36 = 0;
      }
      uint64_t v37 = qword_100A19E90;
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
      {
        uint64_t v43 = *(void *)(a1 + 120);
        int v44 = *(unsigned __int16 *)(a1 + 176);
        BOOL v45 = *(void *)(*(void *)(a1 + 8) + 64) != *(void *)(*(void *)(a1 + 8) + 72);
        *(_DWORD *)uuid_t out = 134219008;
        *(void *)&out[4] = v43;
        *(_WORD *)&out[12] = 1024;
        *(_DWORD *)&out[14] = v44;
        *(_WORD *)&out[18] = 2048;
        *(void *)&out[20] = v43;
        *(_WORD *)&out[28] = 1024;
        *(_DWORD *)&out[30] = v45;
        *(_WORD *)&out[34] = 1024;
        *(_DWORD *)&out[36] = v36;
        _os_log_debug_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEBUG, "doesDeviceMatch: fAdvDataMap size:%lu fMaxNumOfReportsInMap:%d fAdvDataMap size:%lu Puck?:%d roomInMap:%d", out, 0x28u);
      }
      goto LABEL_61;
    }
    unint64_t v13 = sub_100045F00(*(void *)(a3 + 8) + 48);
    uint64_t v14 = (_WORD *)sub_10004A6E4(*(void *)(a3 + 8) + 48);
    int v15 = *(_DWORD *)(*(void *)(a1 + 8) + 384);
    if (v15)
    {
      if (v15 == 1)
      {
        if (sub_10004942C(a1) && (sub_100048F88(a1, a2, a3, a4, &v46) & 1) != 0) {
          goto LABEL_44;
        }
        id v17 = [*(id *)(*(void *)(a1 + 8) + 56) count];
        if (v17)
        {
          uint64_t v5 = sub_100031234(a2);
          if (sub_1006F7DC8(a1, v5))
          {
LABEL_14:

            goto LABEL_44;
          }
        }
        uint64_t v20 = *(void *)(a1 + 8);
        if (*(unsigned char *)(v20 + 137))
        {
          if (sub_1006F7EC8(a1, a2, a3))
          {
LABEL_28:
            char v21 = 1;
            goto LABEL_41;
          }
          uint64_t v20 = *(void *)(a1 + 8);
        }
        if (*(void *)(v20 + 64) != *(void *)(v20 + 72))
        {
          if (sub_10005447C(a1, v14, v13, a4, &v46)) {
            goto LABEL_28;
          }
          uint64_t v20 = *(void *)(a1 + 8);
        }
        if (*(void *)(v20 + 96) != *(void *)(v20 + 104)) {
          goto LABEL_40;
        }
        if (!v17) {
          goto LABEL_17;
        }
        goto LABEL_22;
      }
LABEL_17:
      uint64_t v19 = 0;
      goto LABEL_67;
    }
    if (sub_10004942C(a1) && !sub_100048F88(a1, a2, a3, a4, &v46)) {
      goto LABEL_17;
    }
    id v17 = [*(id *)(*(void *)(a1 + 8) + 56) count];
    if (v17)
    {
      uint64_t v5 = sub_100031234(a2);
      if ((sub_1006F7DC8(a1, v5) & 1) == 0)
      {
LABEL_22:

        goto LABEL_17;
      }
    }
    uint64_t v22 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v22 + 137))
    {
      if (!sub_1006F7EC8(a1, a2, a3)) {
        goto LABEL_37;
      }
      uint64_t v22 = *(void *)(a1 + 8);
    }
    if (*(void *)(v22 + 64) == *(void *)(v22 + 72)) {
      goto LABEL_35;
    }
    if (sub_10005447C(a1, v14, v13, a4, &v46))
    {
      uint64_t v22 = *(void *)(a1 + 8);
LABEL_35:
      if (*(void *)(v22 + 96) == *(void *)(v22 + 104))
      {
        if (!v17) {
          goto LABEL_44;
        }
        goto LABEL_14;
      }
LABEL_40:
      char v21 = sub_1006F833C(a1, a2, a3, v16, v11);
LABEL_41:
      if (v17) {

      }
      if ((v21 & 1) == 0) {
        goto LABEL_17;
      }
      goto LABEL_44;
    }
LABEL_37:
    char v21 = 0;
    goto LABEL_41;
  }
  if (!*(_WORD *)(*(void *)(a1 + 8) + 124)) {
    goto LABEL_17;
  }
LABEL_61:
  unsigned int v38 = *(unsigned __int8 *)(a1 + 81);
  uint64_t v19 = 1;
  if (v38 <= 0x20)
  {
    if (((1 << v38) & 0x100010002) != 0)
    {
      long long v39 = (void *)(a1 + 32);
    }
    else
    {
      if (((1 << v38) & 0x110) == 0) {
        goto LABEL_67;
      }
      long long v39 = (void *)(a1 + 24);
    }
    ++*v39;
  }
LABEL_67:

  return v19;
}

void sub_100048F28(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100048F88(uint64_t a1, const unsigned __int8 *a2, uint64_t a3, void **a4, unsigned char *a5)
{
  sub_100049498(*(void *)(a1 + 8), __p);
  if (__p[1] == __p[0])
  {
    uint64_t v10 = *(void *)(a1 + 8);
    uint64_t v12 = *(void *)(v10 + 32);
    uint64_t v11 = *(void *)(v10 + 40);
    if (__p[1]) {
      operator delete(__p[1]);
    }
    if (v11 == v12) {
      return 0;
    }
  }
  else if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  unint64_t v13 = *(void **)(a3 + 8);
  int v44 = 0;
  BOOL v45 = 0;
  uint64_t v46 = 0;
  sub_100049498(*(void *)(a1 + 8), &v44);
  if (*(void *)(*(void *)(a3 + 8) + 72) != *(void *)(*(void *)(a3 + 8) + 64))
  {
    uint64_t v14 = sub_1006FA6E0(v14, a2, (uint64_t)&v44, (unsigned __int8 **)(*(void *)(a3 + 8) + 64));
    if (v14) {
      goto LABEL_39;
    }
  }
  if (v13[16])
  {
    uint64_t v40 = a5;
    __p[0] = 0;
    __p[1] = 0;
    v50[0] = 0;
    int v15 = (void *)v13[14];
    if (v15 != v13 + 15)
    {
      uint64_t v16 = 0;
      do
      {
        id v17 = (long long *)(v15 + 4);
        if ((unint64_t)v16 >= v50[0])
        {
          unint64_t v19 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - (char *)__p[0]) >> 2);
          unint64_t v20 = v19 + 1;
          if (v19 + 1 > 0xCCCCCCCCCCCCCCCLL) {
            abort();
          }
          if (0x999999999999999ALL * ((uint64_t)(v50[0] - (unint64_t)__p[0]) >> 2) > v20) {
            unint64_t v20 = 0x999999999999999ALL * ((uint64_t)(v50[0] - (unint64_t)__p[0]) >> 2);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v50[0] - (unint64_t)__p[0]) >> 2) >= 0x666666666666666) {
            unint64_t v21 = 0xCCCCCCCCCCCCCCCLL;
          }
          else {
            unint64_t v21 = v20;
          }
          if (v21) {
            uint64_t v14 = (uint64_t)sub_10003767C((uint64_t)v50, v21);
          }
          else {
            uint64_t v14 = 0;
          }
          unint64_t v22 = v14 + 20 * v19;
          long long v23 = *v17;
          *(_DWORD *)(v22 + 16) = *((_DWORD *)v15 + 12);
          *(_OWORD *)unint64_t v22 = v23;
          uint64_t v25 = (char *)__p[0];
          uint64_t v24 = (char *)__p[1];
          uint64_t v26 = (char *)v22;
          if (__p[1] != __p[0])
          {
            do
            {
              long long v27 = *(_OWORD *)(v24 - 20);
              *((_DWORD *)v26 - 1) = *((_DWORD *)v24 - 1);
              *(_OWORD *)(v26 - 20) = v27;
              v26 -= 20;
              v24 -= 20;
            }
            while (v24 != v25);
            uint64_t v24 = (char *)__p[0];
          }
          uint64_t v16 = (char *)(v22 + 20);
          __p[0] = v26;
          __p[1] = (void *)(v22 + 20);
          v50[0] = v14 + 20 * v21;
          if (v24) {
            operator delete(v24);
          }
        }
        else
        {
          long long v18 = *v17;
          *((_DWORD *)v16 + 4) = *((_DWORD *)v15 + 12);
          *(_OWORD *)uint64_t v16 = v18;
          v16 += 20;
        }
        __p[1] = v16;
        uint64_t v28 = (void *)v15[1];
        if (v28)
        {
          do
          {
            uint64_t v29 = v28;
            uint64_t v28 = (void *)*v28;
          }
          while (v28);
        }
        else
        {
          do
          {
            uint64_t v29 = (void *)v15[2];
            BOOL v30 = *v29 == (void)v15;
            int v15 = v29;
          }
          while (!v30);
        }
        int v15 = v29;
      }
      while (v29 != v13 + 15);
    }
    char v31 = sub_1006FA6E0(v14, a2, (uint64_t)&v44, (unsigned __int8 **)__p);
    uint64_t v14 = (uint64_t)__p[0];
    a5 = v40;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v31) {
      goto LABEL_39;
    }
  }
  uint64_t v32 = *(void *)(a3 + 8);
  if (*(void *)(v32 + 96) != *(void *)(v32 + 88))
  {
    if (sub_1006FA6E0(v14, a2, (uint64_t)&v44, (unsigned __int8 **)(v32 + 88))) {
      goto LABEL_39;
    }
    uint64_t v32 = *(void *)(a3 + 8);
  }
  unint64_t v34 = sub_100045F00(v32 + 48);
  unint64_t v35 = (_WORD *)sub_10004A6E4(*(void *)(a3 + 8) + 48);
  if (v34 < 3 || *v35 != 76 || !sub_1000497C4(a1, (uint64_t)v35, v34, a4, &v43))
  {
    unsigned int v38 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
    {
      *(_OWORD *)__p = 0u;
      memset(v50, 0, 21);
      uuid_unparse_upper(a2, (char *)__p);
      sub_10004191C(v41, (char *)__p);
      sub_100796C1C((int)__p, (char *)v41, buf, v38);
    }
    uint64_t v33 = 0;
    goto LABEL_56;
  }
  int v36 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO))
  {
    *(_OWORD *)__p = 0u;
    memset(v50, 0, 21);
    uuid_unparse_upper(a2, (char *)__p);
    sub_10004191C(v41, (char *)__p);
    uint64_t v37 = v42 >= 0 ? v41 : (void **)v41[0];
    *(_DWORD *)buf = 136446210;
    unint64_t v48 = v37;
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_INFO, "Device \"%{public}s\" matched MFG data", buf, 0xCu);
    if (v42 < 0) {
      operator delete(v41[0]);
    }
  }
  if (*(unsigned char *)(*(void *)(a1 + 8) + 1)) {
    *a5 = 1;
  }
LABEL_39:
  uint64_t v33 = 1;
LABEL_56:
  if (v44)
  {
    BOOL v45 = v44;
    operator delete(v44);
  }
  return v33;
}

void sub_1000493D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10004942C(uint64_t a1)
{
  sub_100049498(*(void *)(a1 + 8), &v4);
  if (v5 == v4)
  {
    BOOL v2 = *(void *)(*(void *)(a1 + 8) + 40) != *(void *)(*(void *)(a1 + 8) + 32);
    if (!v4) {
      return v2;
    }
    goto LABEL_3;
  }
  BOOL v2 = 1;
  if (v4)
  {
LABEL_3:
    uint64_t v5 = v4;
    operator delete(v4);
  }
  return v2;
}

void sub_100049498(uint64_t a1@<X0>, void **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  xpc_object_t v3 = *(long long **)(a1 + 8);
  for (i = *(long long **)(a1 + 16); v3 != i; xpc_object_t v3 = (long long *)((char *)v3 + 20))
  {
    long long v6 = *v3;
    int v23 = *((_DWORD *)v3 + 4);
    long long v22 = v6;
    if ((sub_100049678(a1, (unsigned __int8 *)&v22) & 1) == 0)
    {
      char v8 = (char *)a2[1];
      uint64_t v7 = (char *)a2[2];
      if (v8 >= v7)
      {
        unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((v8 - (unsigned char *)*a2) >> 2);
        unint64_t v12 = v11 + 1;
        if (v11 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          abort();
        }
        unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - (unsigned char *)*a2) >> 2);
        if (2 * v13 > v12) {
          unint64_t v12 = 2 * v13;
        }
        if (v13 >= 0x666666666666666) {
          unint64_t v14 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14) {
          int v15 = (char *)sub_10003767C((uint64_t)(a2 + 2), v14);
        }
        else {
          int v15 = 0;
        }
        uint64_t v16 = &v15[20 * v11];
        long long v17 = *v3;
        *((_DWORD *)v16 + 4) = *((_DWORD *)v3 + 4);
        *(_OWORD *)uint64_t v16 = v17;
        unint64_t v19 = (char *)*a2;
        long long v18 = (char *)a2[1];
        unint64_t v20 = v16;
        if (v18 != *a2)
        {
          do
          {
            long long v21 = *(_OWORD *)(v18 - 20);
            *((_DWORD *)v20 - 1) = *((_DWORD *)v18 - 1);
            *(_OWORD *)(v20 - 20) = v21;
            v20 -= 20;
            v18 -= 20;
          }
          while (v18 != v19);
          long long v18 = (char *)*a2;
        }
        uint64_t v10 = v16 + 20;
        *a2 = v20;
        a2[1] = v16 + 20;
        a2[2] = &v15[20 * v14];
        if (v18) {
          operator delete(v18);
        }
      }
      else
      {
        long long v9 = *v3;
        *((_DWORD *)v8 + 4) = *((_DWORD *)v3 + 4);
        *(_OWORD *)char v8 = v9;
        uint64_t v10 = v8 + 20;
      }
      a2[1] = v10;
    }
  }
}

void sub_100049658(_Unwind_Exception *exception_object)
{
  xpc_object_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100049678(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  uint64_t v3 = *(void *)(a1 + 104);
  if (v2 == v3) {
    return 0;
  }
  while (1)
  {
    if (*(_DWORD *)(v2 + 104) == 1)
    {
      long long v5 = *(_OWORD *)(v2 + 20);
      int v8 = *(_DWORD *)(v2 + 36);
      long long v7 = v5;
      if (sub_10022A44C(a2, (unsigned __int8 *)&v7)) {
        break;
      }
    }
    v2 += 112;
    if (v2 == v3) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_100049724(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 81) == 32)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    if (*(unsigned char *)(v2 + 1)) {
      return 1;
    }
    if ([*(id *)(v2 + 88) count]) {
      return 1;
    }
    uint64_t v3 = *(void **)(a1 + 8);
    if (v3[8] != v3[9] || v3[2] != v3[1]) {
      return 1;
    }
    long long v7 = v3 + 12;
    long long v6 = v3 + 13;
    return *v7 != *v6;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    long long v6 = (void *)(v5 + 8);
    long long v7 = (void *)(v5 + 16);
    return *v7 != *v6;
  }
  return 0;
}

uint64_t sub_1000497C4(uint64_t a1, uint64_t a2, unint64_t a3, void **a4, unsigned char *a5)
{
  if (a3 >= 3)
  {
    uint64_t v50 = (uint64_t)(a4 + 2);
    uint64_t v8 = 2;
    unsigned int v9 = 2;
    while (1)
    {
      uint64_t v10 = a2 + v8;
      unint64_t v11 = *(unsigned __int8 *)(a2 + v8);
      if (v11 == 1)
      {
        if (v9 + 16 >= a3)
        {
          uint64_t v43 = qword_100A19E90;
          char v15 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT)) {
            return v15 & 1;
          }
          *(_WORD *)long long v55 = 0;
          int v44 = "Invalid length";
          goto LABEL_69;
        }
        uint64_t v12 = *(void *)(a1 + 8);
        if (*(void *)(v12 + 16) != *(void *)(v12 + 8))
        {
          long long v56 = 0;
          v57[0] = 0;
          *(void *)long long v55 = 0;
          sub_100037564((char *)v55, *(long long **)(v12 + 8), *(long long **)(v12 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v12 + 16) - *(void *)(v12 + 8)) >> 2));
          unint64_t v14 = *(_DWORD **)v55;
          unint64_t v13 = v56;
          if (*(_DWORD **)v55 == v56)
          {
            char v15 = 0;
          }
          else
          {
            char v15 = 0;
            uint64_t v16 = v10 + 1;
            do
            {
              __int16 v54 = 0;
              int v17 = v14[4];
              long long v64 = *(_OWORD *)v14;
              int v65 = v17;
              sub_1004AF0D4((unsigned __int8 *)&v64, (unsigned char *)&v54 + 1, &v54);
              if (HIBYTE(v54) <= 0xFuLL && ((*(unsigned __int8 *)(v16 + HIBYTE(v54)) >> v54) & 1) != 0)
              {
                long long v18 = qword_100A19E90;
                if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
                {
                  sub_1000417A8((uint64_t)v14, __p);
                  unint64_t v19 = __p;
                  if (v53 < 0) {
                    unint64_t v19 = (void **)__p[0];
                  }
                  *(_DWORD *)buf = 136446722;
                  long long v59 = v19;
                  __int16 v60 = 1024;
                  int v61 = HIBYTE(v54);
                  __int16 v62 = 1024;
                  int v63 = v54;
                  _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Tentatively matched UUID %{public}s (@ byte: %u, bit: %u)", buf, 0x18u);
                  if (v53 < 0) {
                    operator delete(__p[0]);
                  }
                }
                long long v21 = (char *)a4[1];
                unint64_t v20 = (char *)a4[2];
                if (v21 >= v20)
                {
                  unint64_t v24 = 0xCCCCCCCCCCCCCCCDLL * ((v21 - (unsigned char *)*a4) >> 2);
                  unint64_t v25 = v24 + 1;
                  if (v24 + 1 > 0xCCCCCCCCCCCCCCCLL) {
                    abort();
                  }
                  unint64_t v26 = 0xCCCCCCCCCCCCCCCDLL * ((v20 - (unsigned char *)*a4) >> 2);
                  if (2 * v26 > v25) {
                    unint64_t v25 = 2 * v26;
                  }
                  if (v26 >= 0x666666666666666) {
                    unint64_t v27 = 0xCCCCCCCCCCCCCCCLL;
                  }
                  else {
                    unint64_t v27 = v25;
                  }
                  if (v27) {
                    uint64_t v28 = (char *)sub_10003767C(v50, v27);
                  }
                  else {
                    uint64_t v28 = 0;
                  }
                  uint64_t v29 = &v28[20 * v24];
                  long long v30 = *(_OWORD *)v14;
                  *((_DWORD *)v29 + 4) = v14[4];
                  *(_OWORD *)uint64_t v29 = v30;
                  uint64_t v32 = (char *)*a4;
                  char v31 = (char *)a4[1];
                  uint64_t v33 = v29;
                  if (v31 != *a4)
                  {
                    do
                    {
                      long long v34 = *(_OWORD *)(v31 - 20);
                      *((_DWORD *)v33 - 1) = *((_DWORD *)v31 - 1);
                      *(_OWORD *)(v33 - 20) = v34;
                      v33 -= 20;
                      v31 -= 20;
                    }
                    while (v31 != v32);
                    char v31 = (char *)*a4;
                  }
                  int v23 = v29 + 20;
                  *a4 = v33;
                  a4[1] = v29 + 20;
                  a4[2] = &v28[20 * v27];
                  if (v31) {
                    operator delete(v31);
                  }
                }
                else
                {
                  long long v22 = *(_OWORD *)v14;
                  *((_DWORD *)v21 + 4) = v14[4];
                  *(_OWORD *)long long v21 = v22;
                  int v23 = v21 + 20;
                }
                a4[1] = v23;
                char v15 = 1;
              }
              v14 += 5;
            }
            while (v14 != v13);
            unint64_t v14 = *(_DWORD **)v55;
          }
          if (v14)
          {
            long long v56 = v14;
            operator delete(v14);
          }
          v9 += 17;
          goto LABEL_58;
        }
        int v38 = 0;
        char v15 = 0;
        LODWORD(v35) = v9 + 1;
        int v36 = 16;
      }
      else
      {
        unint64_t v35 = v9 + 1;
        if (v35 >= a3)
        {
          uint64_t v43 = qword_100A19E90;
          char v15 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT)) {
            return v15 & 1;
          }
          *(_WORD *)long long v55 = 0;
          int v44 = "Invalid length, not enough room for the len field.";
LABEL_69:
          uint64_t v46 = v43;
          uint32_t v47 = 2;
LABEL_70:
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, v44, v55, v47);
          break;
        }
        int v36 = *(unsigned char *)(a2 + v35) & 0x1F;
        if (v36 == 31)
        {
          unint64_t v37 = v9 + 2;
          if (v37 >= a3)
          {
            uint64_t v43 = qword_100A19E90;
            char v15 = 0;
            if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT)) {
              return v15 & 1;
            }
            *(_WORD *)long long v55 = 0;
            int v44 = "Not enough data for the extended data byte. Ignoring.";
            goto LABEL_69;
          }
          int v36 = *(unsigned __int8 *)(a2 + v37) + 31;
          int v38 = 2;
        }
        else
        {
          int v38 = 1;
        }
        if (v36 + v9 + v38 > a3)
        {
          uint64_t v45 = qword_100A19E90;
          char v15 = 0;
          if (!os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT)) {
            return v15 & 1;
          }
          *(_DWORD *)long long v55 = 67109888;
          *(_DWORD *)&v55[4] = v9;
          LOWORD(v56) = 1024;
          *(_DWORD *)((char *)&v56 + 2) = v36;
          HIWORD(v56) = 1024;
          LODWORD(v57[0]) = v38;
          WORD2(v57[0]) = 2048;
          *(void *)((char *)v57 + 6) = a3;
          int v44 = "Ignoring packet since byte offset of %d + payload length of %d + length size of %d doesnt fit in dataLength %zu";
          uint64_t v46 = v45;
          uint32_t v47 = 30;
          goto LABEL_70;
        }
        long long v39 = *(int8x8_t **)(a1 + 8);
        buf[0] = 1;
        v55[0] = 0;
        uint64_t v40 = sub_100041B64(v39 + 26, 0, (uint64_t)&v39[30], 0, buf);
        uint64_t v41 = *(void *)(a1 + 8);
        if (v40 && ((*(void *)(v41 + ((v11 >> 3) & 0x18) + 208) >> v11) & 1) != 0)
        {
          char v42 = qword_100A19E90;
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
          {
            *(_DWORD *)long long v55 = 67109120;
            *(_DWORD *)&v55[4] = v11;
            _os_log_debug_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEBUG, "Show dup for given rule with puck type 0x%x", v55, 8u);
            uint64_t v41 = *(void *)(a1 + 8);
          }
          *a5 = 1;
        }
        if (v11 != 2) {
          goto LABEL_54;
        }
        if (![*(id *)(v41 + 88) count])
        {
          uint64_t v41 = *(void *)(a1 + 8);
LABEL_54:
          if (*(void *)(v41 + 64) != *(void *)(v41 + 72)
            && ((*(void *)(v41 + ((v11 >> 3) & 0x18) + 240) >> v11) & 1) != 0)
          {
            sub_10004BB0C(v41, v11);
            char v15 = 1;
            return v15 & 1;
          }
          char v15 = 0;
          goto LABEL_57;
        }
        char v15 = 1;
      }
LABEL_57:
      unsigned int v9 = v35 + v36 + v38;
LABEL_58:
      uint64_t v8 = v9;
      if (v9 >= a3 || (v15 & 1) != 0) {
        return v15 & 1;
      }
    }
  }
  char v15 = 0;
  return v15 & 1;
}

void sub_100049DC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22)
{
}

BOOL sub_100049DF0(uint64_t a1)
{
  uint64_t v2 = sub_100035F54();
  char v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 384))(v2);
  int v4 = *(unsigned __int8 *)(a1 + 81);
  if ((v4 & 0x30) != 0) {
    char v5 = v3;
  }
  else {
    char v5 = 0;
  }
  if ((v5 & 1) != 0 || v4 == 16) {
    return 1;
  }

  return sub_100049724(a1);
}

BOOL sub_100049E7C(uint64_t a1)
{
  if (sub_10004942C(a1)) {
    return 1;
  }
  if ([*(id *)(*(void *)(a1 + 8) + 56) count]) {
    return 1;
  }
  uint64_t v2 = *(void *)(a1 + 8);
  return *(unsigned char *)(v2 + 137)
      || *(void *)(v2 + 64) != *(void *)(v2 + 72)
      || *(void *)(v2 + 96) != *(void *)(v2 + 104);
}

uint64_t sub_100049EE0(uint64_t a1, uint64_t a2)
{
  char v3 = *(atomic_uint **)(a1 + 8);
  uint64_t v4 = *(void *)(a2 + 8);
  if (v3 != (atomic_uint *)v4)
  {
    *(void *)(a1 + 8) = v4;
    if (v4) {
      sub_100037354(v4);
    }
    if (v3) {
      sub_1000368F4(v3);
    }
  }
  return a1;
}

void sub_100049F30(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
}

void sub_100049F3C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
}

void sub_100049F54(uint64_t a1, unint64_t a2, void *a3, uint64_t a4, uint64_t *a5, unsigned int a6, uint64_t a7, void *a8)
{
}

uint64_t **sub_100049F5C(uint64_t **a1, unsigned __int8 *a2, unsigned char *a3)
{
  long long v6 = a1 + 1;
  char v5 = a1[1];
  if (v5)
  {
    unsigned int v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unsigned int v9 = *((unsigned __int8 *)v5 + 25);
        if (v7 >= v9) {
          break;
        }
        char v5 = *v8;
        long long v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      char v5 = v8[1];
      if (!v5)
      {
        long long v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v10 + 25) = *a3;
    sub_100036CA0(a1, (uint64_t)v8, v6, v10);
    return (uint64_t **)v10;
  }
  return v8;
}

uint64_t *sub_10004A018(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 *__attribute__((__org_typedef(uuid_t))) *a4)
{
  uint64_t v9 = 0;
  long long v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v9, uu1);
  double result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1006FD9DC((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, (uint64_t *)v8[0]);
    return (uint64_t *)v8[0];
  }
  return result;
}

void *sub_10004A0BC(uint64_t a1, void *a2, unsigned __int8 *uu1)
{
  char v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        unsigned int v7 = (void *)v4;
        uint64_t v8 = (const unsigned __int8 *)(v4 + 32);
        if ((uuid_compare(uu1, (const unsigned __int8 *)(v4 + 32)) & 0x80000000) == 0) {
          break;
        }
        uint64_t v4 = *v7;
        char v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if ((uuid_compare(v8, uu1) & 0x80000000) == 0) {
        break;
      }
      char v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    unsigned int v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *sub_10004A150(uint64_t **a1, const unsigned __int8 *a2, uint64_t a3)
{
  __p = 0;
  v10[0] = 0;
  v10[1] = 0;
  sub_10004A208((uint64_t)a1, a2, a3, &__p);
  uint64_t v8 = 0;
  uint64_t v4 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v8, (unsigned __int8 *)__p + 32);
  char v5 = *v4;
  if (*v4)
  {
    long long v6 = __p;
    __p = 0;
    if (v6) {
      sub_10004A610((uint64_t)v10, v6);
    }
  }
  else
  {
    sub_100036CA0(a1, v8, v4, (uint64_t *)__p);
    return (uint64_t *)__p;
  }
  return v5;
}

void sub_10004A1E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    sub_10004A610((uint64_t)&a11, __p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10004A208@<X0>(uint64_t a1@<X0>, const unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 8;
  *a4 = 0;
  a4[2] = 0;
  a4[1] = 0;
  uint64_t v8 = a4 + 1;
  uint64_t v9 = operator new(0x40uLL);
  *a4 = v9;
  void *v8 = v7;
  *((unsigned char *)a4 + 16) = 0;
  uint64_t result = sub_10004A2A0((uint64_t)v9 + 32, a2, a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_10004A284(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_10004A610(v2, v3);
  _Unwind_Resume(a1);
}

uint64_t sub_10004A2A0(uint64_t a1, const unsigned __int8 *a2, uint64_t a3)
{
  uuid_copy((unsigned __int8 *)a1, a2);
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a1 + 16) = &off_100998468;
  *(void *)(a1 + 24) = v5;
  if (v5) {
    sub_100037354(v5);
  }
  return a1;
}

uint64_t *sub_10004A2F8(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10004A350(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_10004A338(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_10004A350(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    long long v6 = result + 1;
    do
    {
      uint64_t result = sub_10004A3DC(v5, v6, v4 + 25, v4 + 25);
      uint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10004A3DC(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, unsigned char *a4)
{
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  long long v6 = sub_10004A468(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((unsigned char *)v7 + 25) = *a4;
    sub_100036CA0(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *sub_10004A468(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((unsigned __int8 *)a2 + 25), v6 < v7))
  {
    uint64_t v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      unint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        unint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((unsigned __int8 *)v10 + 25) < v15) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(unsigned __int8 *)(v16 + 25);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    unint64_t v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      unint64_t v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((unsigned __int8 *)a4 + 25))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          long long v21 = (uint64_t *)v20;
          unsigned int v22 = *(unsigned __int8 *)(v20 + 25);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      long long v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_10004A610(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    __p[6] = &off_100998468;
    char v3 = (atomic_uint *)__p[7];
    if (v3) {
      sub_1000368F4(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_10004A68C(uint64_t a1)
{
  uint64_t v1 = a1 + 48;
  if ((unint64_t)sub_100045F00(a1 + 48) < 2)
  {
    return 0;
  }
  else
  {
    __int16 v2 = *(unsigned __int8 *)sub_10004A6E4(v1);
    return (unsigned __int16)(v2 | (*(unsigned __int8 *)(sub_10004A6E4(v1) + 1) << 8));
  }
}

uint64_t sub_10004A6E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  if (v1) {
    return v1 + 24;
  }
  else {
    return 0;
  }
}

void sub_10004A6F8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v12 = a3;
  id v13 = a8;
  if (!*(void *)(a1 + 120)) {
    goto LABEL_7;
  }
  BOOL v14 = *(unsigned __int8 **)(a1 + 128);
  if (!v14) {
    goto LABEL_7;
  }
  if (!*(void *)(a1 + 136)) {
    goto LABEL_7;
  }
  if (*(void *)(a1 + 144)) {
    goto LABEL_7;
  }
  if ((((unint64_t)v14[128] << 40) | ((unint64_t)v14[129] << 32) | ((unint64_t)v14[130] << 24) | ((unint64_t)v14[131] << 16) | ((unint64_t)v14[132] << 8) | v14[133]) != *(void *)(*(void *)(a4 + 8) + 200)) {
    goto LABEL_7;
  }
  uint64_t v15 = sub_100019D1C(a2);
  if (v15 != sub_100019D1C(*(void *)(a1 + 120))) {
    goto LABEL_7;
  }
  uint64_t v16 = sub_100035F54();
  int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 552))(v16);
  if (v17 == 1)
  {
    uint64_t v23 = *(void *)(a4 + 8);
    int v24 = *(unsigned __int8 *)(v23 + 365);
    int v25 = *(_DWORD *)(v23 + 444);
    unint64_t v26 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BDF8();
      unint64_t v27 = "Dropping";
      if (!(v24 | v25)) {
        unint64_t v27 = "Using";
      }
      *(_DWORD *)buf = 136316162;
      if (v34 >= 0) {
        uint64_t v28 = __p;
      }
      else {
        uint64_t v28 = *(unsigned char **)__p;
      }
      *(void *)&uint8_t buf[4] = v27;
      __int16 v36 = 2112;
      id v37 = v12;
      __int16 v38 = 2080;
      long long v39 = v28;
      __int16 v40 = 1024;
      LODWORD(v41[0]) = v25;
      WORD2(v41[0]) = 1024;
      *(_DWORD *)((char *)v41 + 6) = v24;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Warning: BBFC: %s ADV report for %@ %s antenna:%d scanSourceCore:%d", buf, 0x2Cu);
      if (v34 < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!(v24 | v25))
    {
LABEL_31:
      uint64_t v29 = mach_absolute_time();
      long long v30 = qword_100A1A030;
      if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v31 = (v29 - *(void *)(a1 + 184)) * *(unsigned int *)(a1 + 176) / *(unsigned int *)(a1 + 180) / 0xF4240;
        *(_DWORD *)buf = 134217984;
        *(void *)&uint8_t buf[4] = v31;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Scan took:%llu ms", buf, 0xCu);
        long long v30 = qword_100A1A030;
      }
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        sub_100475EE0(*(void *)(a1 + 128), (uint64_t)buf);
        if (v38 >= 0) {
          uint64_t v32 = buf;
        }
        else {
          uint64_t v32 = *(unsigned char **)buf;
        }
        *(_DWORD *)__p = 136446210;
        *(void *)&__p[4] = v32;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Found device \"%{public}s\" ", __p, 0xCu);
        if (SHIBYTE(v38) < 0) {
          operator delete(*(void **)buf);
        }
      }
      *(unsigned char *)(a1 + 232) = 1;
      operator new();
    }
  }
  else
  {
    if (v17 != 2) {
      goto LABEL_31;
    }
    int v18 = *(unsigned __int8 *)(*(void *)(a4 + 8) + 369);
    unint64_t v19 = qword_100A1A030;
    if (os_log_type_enabled((os_log_t)qword_100A1A030, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BDF8();
      uint64_t v20 = "Dropping";
      if (v34 >= 0) {
        long long v21 = __p;
      }
      else {
        long long v21 = *(unsigned char **)__p;
      }
      if (!v18) {
        uint64_t v20 = "Using";
      }
      *(_DWORD *)buf = 136315906;
      *(void *)&uint8_t buf[4] = v20;
      __int16 v36 = 2112;
      id v37 = v12;
      unsigned int v22 = "N";
      __int16 v38 = 2080;
      if (v18) {
        unsigned int v22 = "Y";
      }
      long long v39 = v21;
      __int16 v40 = 2080;
      v41[0] = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Warning: BBFC: %s ADV report for %@ %s coexDenied:%s", buf, 0x2Au);
      if (v34 < 0) {
        operator delete(*(void **)__p);
      }
    }
    if (!v18) {
      goto LABEL_31;
    }
  }
LABEL_7:
}

void sub_10004AFEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004B0CC(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v12 = a3;
  id v13 = a8;
  if (a2 && *(void *)(a1 + 80) == a2)
  {
    uint64_t v75 = 0;
    uint64_t v76 = 0;
    uint64_t v77 = 0;
    sub_100051B34(&v75, *(void *)(a4 + 8) + 112);
    if (v77)
    {
      xpc_object_t v73 = 0;
      xpc_object_t v74 = 0;
      long long v88 = xmmword_1007BA7E4;
      int v89 = 0;
      sub_100035F98((__n128 *)buf, (__n128 *)&v88);
      BOOL v14 = *(atomic_uint **)(sub_10044A7B0((uint64_t)&v75, buf) + 8);
      xpc_object_t v73 = &off_100998428;
      xpc_object_t v74 = v14;
      if (v14) {
        sub_100037354((uint64_t)v14);
      }
      if (sub_100045F00((uint64_t)&v73) == 20)
      {
        uint64_t v15 = *(void *)(a4 + 8);
        if (*(unsigned char *)(v15 + 370))
        {
          uint64_t v16 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v16 + 176))(v16)
            && os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEBUG))
          {
            sub_100769710();
          }
          uint64_t v17 = *(void *)(a4 + 8);
          int v18 = *(char *)(v17 + 396);
          int v19 = *(char *)(v17 + 397);
          int v20 = *(char *)(a1 + 208);
          if (v18 > v20) {
            LOBYTE(v20) = v18;
          }
          *(unsigned char *)(a1 + 208) = v20;
          long long v64 = +[NSData dataWithBytes:sub_10004A6E4((uint64_t)&v73) length:16];
          uint64_t v21 = +[NSData dataWithBytes:sub_10004A6E4((uint64_t)&v73) + 16 length:4];
          uint64_t v22 = *(void *)(a4 + 8);
          double v23 = *(double *)(v22 + 384) - *(double *)(v22 + 376);
          int v24 = (int)v23;
          if ((int)v23 <= 0x3C) {
            int v24 = 60;
          }
          int v62 = v24;
          int v63 = (void *)v21;
          int v25 = sub_100654470(v22, *(uint8x8_t *)&v23);
          double v26 = *(double *)(*(void *)(a4 + 8) + 384);
          uint64_t v27 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v27 + 176))(v27))
          {
            uint64_t v28 = qword_100A19FA0;
            if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_DEBUG))
            {
              long long v58 = sub_1006AD3F0();
              uint64_t v59 = *(void *)(a4 + 8);
              CFTimeInterval v60 = kCFAbsoluteTimeIntervalSince1970 + *(double *)(v59 + 376);
              CFTimeInterval v61 = kCFAbsoluteTimeIntervalSince1970 + *(double *)(v59 + 384);
              *(_DWORD *)buf = 138414594;
              *(void *)&uint8_t buf[4] = v12;
              *(_WORD *)&unsigned char buf[12] = 2112;
              *(void *)&buf[14] = v58;
              *(_WORD *)&buf[22] = 2112;
              *(void *)xpc_object_t v82 = v64;
              *(_WORD *)&v82[8] = 2112;
              *(void *)&v82[10] = v63;
              *(_WORD *)&v82[18] = 1024;
              *(_DWORD *)xpc_object_t v83 = v19;
              *(_WORD *)&v83[4] = 1024;
              *(_DWORD *)&v83[6] = v18;
              __int16 v84 = 2048;
              *(CFTimeInterval *)uint64_t v85 = v60;
              *(_WORD *)&v85[8] = 2048;
              *(CFTimeInterval *)unint64_t v86 = v61;
              *(_WORD *)&v86[8] = 1024;
              *(_DWORD *)unint64_t v87 = v62;
              *(_WORD *)&v87[4] = 1024;
              *(_DWORD *)&v87[6] = v25;
              _os_log_debug_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEBUG, "cached device %@ address:%@ rpi:%@ aem:%@ avgRSSI:%d maxRSSI:%d firstTimestamp:%f lastTimestamp:%f deltaSinceLastStop:%d sec reports:%hu", buf, 0x56u);
            }
          }
          uint64_t v29 = (os_unfair_lock_s *)(a1 + 176);
          v65[0] = _NSConcreteStackBlock;
          v65[1] = 3221225472;
          v65[2] = sub_10044A8B8;
          v65[3] = &unk_1009AE540;
          id v30 = v64;
          id v66 = v30;
          id v31 = v63;
          id v67 = v31;
          char v71 = v19;
          char v72 = v18;
          __int16 v69 = v25;
          double v68 = v26 + kCFAbsoluteTimeIntervalSince1970;
          __int16 v70 = v62;
          sub_10044A7EC(v29, v65);
        }
        else
        {
          int v39 = *(char *)(v15 + 216);
          if (v39 < 1)
          {
            __dst[0] = 0;
            __dst[1] = 0;
            int v80 = 0;
            uint64_t v43 = (const void *)sub_10004A6E4((uint64_t)&v73);
            size_t v44 = sub_100045F00((uint64_t)&v73);
            memcpy(__dst, v43, v44);
            uint64_t v45 = (uint64_t **)(a1 + 48);
            *(void *)buf = __dst;
            uint64_t v46 = (uint64_t *)sub_1004503CC((uint64_t **)(a1 + 48), (uint64_t)__dst, (uint64_t)&unk_1007BE9D0, (_OWORD **)buf);
            sub_10044A8FC(v46 + 7, a4);
            uint64_t v47 = sub_100017768();
            if ((*(unsigned int (**)(uint64_t))(*(void *)v47 + 184))(v47))
            {
              unint64_t v48 = qword_100A19FA0;
              if (os_log_type_enabled((os_log_t)qword_100A19FA0, OS_LOG_TYPE_INFO))
              {
                sub_1006AD3F0();
                id v49 = (id)objc_claimAutoreleasedReturnValue();
                uint64_t v50 = sub_10004A6E4((uint64_t)&v73);
                uint64_t v51 = sub_10004A6E4((uint64_t)&v73);
                uint64_t v52 = *(void *)(a4 + 8);
                int v53 = *(char *)(v52 + 216);
                int v54 = *(unsigned __int8 *)(v52 + 217);
                double v55 = *(double *)(v52 + 240);
                unint64_t v78 = __dst;
                long long v56 = sub_1004503CC(v45, (uint64_t)__dst, (uint64_t)&unk_1007BE9D0, &v78);
                uint64_t v57 = (uint64_t)(*((void *)v56 + 8) - *((void *)v56 + 7)) >> 4;
                *(_DWORD *)buf = 138414594;
                *(void *)&uint8_t buf[4] = v12;
                *(_WORD *)&unsigned char buf[12] = 2112;
                *(void *)&buf[14] = v49;
                *(_WORD *)&buf[22] = 1040;
                *(_DWORD *)xpc_object_t v82 = 16;
                *(_WORD *)&v82[4] = 2096;
                *(void *)&v82[6] = v50;
                *(_WORD *)&v82[14] = 1040;
                *(_DWORD *)&v82[16] = 4;
                *(_WORD *)xpc_object_t v83 = 2096;
                *(void *)&v83[2] = v51 + 16;
                __int16 v84 = 1024;
                *(_DWORD *)uint64_t v85 = v53;
                *(_WORD *)&v85[4] = 1024;
                *(_DWORD *)&v85[6] = v54;
                *(_WORD *)unint64_t v86 = 2048;
                *(double *)&v86[2] = v55 + kCFAbsoluteTimeIntervalSince1970;
                *(_WORD *)unint64_t v87 = 2048;
                *(void *)&v87[2] = v57;
                _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_INFO, "device %@ address:%@ rpi:%.16P aem:%.4P rssi:%d saturated:%d timestamp:%f totalReports:%lu", buf, 0x56u);
              }
            }
          }
          else
          {
            int v40 = *(unsigned __int16 *)(a1 + 274);
            int v41 = 0xFFFF;
            if (v40 != 0xFFFF)
            {
              int v41 = v40 + 1;
              *(_WORD *)(a1 + 274) = v40 + 1;
            }
            char v42 = qword_100A19F90;
            if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)buf = 67109634;
              *(_DWORD *)&uint8_t buf[4] = v39;
              *(_WORD *)&uint8_t buf[8] = 2112;
              *(void *)&buf[10] = v12;
              *(_WORD *)&unsigned char buf[18] = 1024;
              *(_DWORD *)&buf[20] = v41;
              _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Ignoring invalid RSSI level (%d) received from device %@ (fInvalidRSSIReportCounter:%d)", buf, 0x18u);
            }
          }
        }
      }
      else
      {
        uint64_t v32 = qword_100A19F90;
        if (os_log_type_enabled((os_log_t)qword_100A19F90, OS_LOG_TYPE_ERROR)) {
          sub_100769750((uint64_t)v12, v32, v33, v34, v35, v36, v37, v38);
        }
      }
      xpc_object_t v73 = &off_100998428;
      if (v74) {
        sub_1000368F4(v74);
      }
    }
    sub_10004BA8C((uint64_t)&v75, v76);
  }
}

void sub_10004B788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,atomic_uint *a22,char a23,void *a24)
{
  if (a22) {
    sub_1000368F4(a22);
  }
  sub_10004BA8C((uint64_t)&a23, a24);

  _Unwind_Resume(a1);
}

void sub_10004B82C(uint64_t a1)
{
  sub_10004B864(a1);

  operator delete();
}

uint64_t sub_10004B864(uint64_t a1)
{
  *(void *)a1 = &off_1009BCEC0;
  *(void *)(a1 + 448) = &off_100998428;
  __int16 v2 = *(atomic_uint **)(a1 + 456);
  if (v2) {
    sub_1000368F4(v2);
  }
  sub_10004BA28(a1 + 416, *(char **)(a1 + 424));

  *(void *)(a1 + 288) = &off_100998428;
  char v3 = *(atomic_uint **)(a1 + 296);
  if (v3) {
    sub_1000368F4(v3);
  }
  *(void *)(a1 + 272) = &off_100998428;
  uint64_t v4 = *(atomic_uint **)(a1 + 280);
  if (v4) {
    sub_1000368F4(v4);
  }
  *(void *)(a1 + 224) = &off_100998428;
  uint64_t v5 = *(atomic_uint **)(a1 + 232);
  if (v5) {
    sub_1000368F4(v5);
  }
  *(void *)(a1 + 152) = &off_100998428;
  unsigned int v6 = *(atomic_uint **)(a1 + 160);
  if (v6) {
    sub_1000368F4(v6);
  }
  *(void *)(a1 + 136) = &off_100998428;
  unsigned int v7 = *(atomic_uint **)(a1 + 144);
  if (v7) {
    sub_1000368F4(v7);
  }
  sub_10004BA8C(a1 + 112, *(void **)(a1 + 120));
  uint64_t v8 = *(void **)(a1 + 88);
  if (v8)
  {
    *(void *)(a1 + 96) = v8;
    operator delete(v8);
  }
  BOOL v9 = *(void **)(a1 + 64);
  if (v9)
  {
    *(void *)(a1 + 72) = v9;
    operator delete(v9);
  }
  *(void *)(a1 + 48) = &off_100998428;
  uint64_t v10 = *(atomic_uint **)(a1 + 56);
  if (v10) {
    sub_1000368F4(v10);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10004BA28(uint64_t a1, char *a2)
{
  if (a2)
  {
    sub_10004BA28(a1, *(void *)a2);
    sub_10004BA28(a1, *((void *)a2 + 1));
    if (a2[55] < 0) {
      operator delete(*((void **)a2 + 4));
    }
    operator delete(a2);
  }
}

void sub_10004BA8C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10004BA8C(a1, *a2);
    sub_10004BA8C(a1, a2[1]);
    a2[7] = &off_100998428;
    uint64_t v4 = (atomic_uint *)a2[8];
    if (v4) {
      sub_1000368F4(v4);
    }
    operator delete(a2);
  }
}

void sub_10004BB0C(uint64_t a1, int a2)
{
  uint64_t v2 = *(void *)(a1 + 64);
  uint64_t v3 = *(void *)(a1 + 72);
  if (v2 != v3)
  {
    uint64_t v5 = (id *)(a1 + 160);
    do
    {
      if (*(unsigned __int8 *)(v2 + 8) == a2) {
        objc_storeStrong(v5, *(id *)v2);
      }
      v2 += 96;
    }
    while (v2 != v3);
  }
}

void sub_10004BB68(uint64_t a1, id a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  id v12 = a3;
  id v13 = a8;
  id v14 = *(id *)(a1 + 8);
  uint64_t v15 = v14;
  if (!a2 || [v14 sessionHandle] == a2)
  {
    if (v12)
    {
      *(unsigned char *)(a1 + 24) = 1;
      sub_100012054(a1, v12, a4);
    }
    else
    {
      char v16 = *(unsigned char *)(*(void *)(a4 + 8) + 305);
      uint64_t v17 = *(NSObject **)(a1 + 16);
      v18[0] = _NSConcreteStackBlock;
      v18[1] = 3221225472;
      void v18[2] = sub_1000A77A0;
      v18[3] = &unk_100998BB0;
      char v19 = v16;
      v18[4] = v15;
      dispatch_async(v17, v18);
    }
  }
}

void sub_10004BC68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10004BC88(uint64_t a1, void *a2)
{
  id v9 = a2;
  uint64_t v3 = *(void **)(a1 + 224);
  uint64_t v4 = (void *)(a1 + 232);
  if (v3 != (void *)(a1 + 232))
  {
    do
    {
      uint64_t v5 = v3[5];
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 16))(v5)) {
        sub_10004BD78(v5, v9);
      }
      unsigned int v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          unsigned int v7 = v6;
          unsigned int v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          unsigned int v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          uint64_t v3 = v7;
        }
        while (!v8);
      }
      uint64_t v3 = v7;
    }
    while (v7 != v4);
  }
}

void sub_10004BD58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004BD70()
{
  return 0;
}

void sub_10004BD78(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (*(unsigned char *)(a1 + 381) && *(void *)(a1 + 120)) {
    sub_10002F224((void *)a1, 134, v3);
  }
}

void sub_10004BDDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10004BDF0()
{
  return 1;
}

uint64_t sub_10004BDF8()
{
  uint64_t v33 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)__p = 0u;
  long long v22 = 0u;
  memset(v20, 0, sizeof(v20));
  sub_1000419CC((uint64_t)v20);
  int v0 = (void *)sub_10003AB28((uint64_t)v20);
  *(_DWORD *)((char *)v0 + *(void *)(*v0 - 24) + 8) |= 0x4000u;
  unsigned __int8 v19 = 48;
  uint64_t v1 = sub_10004C5B4(v0, &v19);
  uint64_t v2 = *v1;
  *(uint64_t *)((char *)v1 + *(void *)(*v1 - 24) + 24) = 2;
  *(_DWORD *)((char *)v1 + *(void *)(v2 - 24) + 8) = *(_DWORD *)((unsigned char *)v1 + *(void *)(v2 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v3 = std::ostream::operator<<();
  uint64_t v4 = (uint64_t *)sub_10003AB28(v3);
  uint64_t v5 = *v4;
  *(uint64_t *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 2;
  *(_DWORD *)((char *)v4 + *(void *)(v5 - 24) + 8) = *(_DWORD *)((unsigned char *)v4 + *(void *)(v5 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v6 = std::ostream::operator<<();
  unsigned int v7 = (uint64_t *)sub_10003AB28(v6);
  uint64_t v8 = *v7;
  *(uint64_t *)((char *)v7 + *(void *)(*v7 - 24) + 24) = 2;
  *(_DWORD *)((char *)v7 + *(void *)(v8 - 24) + 8) = *(_DWORD *)((unsigned char *)v7 + *(void *)(v8 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v9 = std::ostream::operator<<();
  uint64_t v10 = (uint64_t *)sub_10003AB28(v9);
  uint64_t v11 = *v10;
  *(uint64_t *)((char *)v10 + *(void *)(*v10 - 24) + 24) = 2;
  *(_DWORD *)((char *)v10 + *(void *)(v11 - 24) + 8) = *(_DWORD *)((unsigned char *)v10 + *(void *)(v11 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v12 = std::ostream::operator<<();
  id v13 = (uint64_t *)sub_10003AB28(v12);
  uint64_t v14 = *v13;
  *(uint64_t *)((char *)v13 + *(void *)(*v13 - 24) + 24) = 2;
  *(_DWORD *)((char *)v13 + *(void *)(v14 - 24) + 8) = *(_DWORD *)((unsigned char *)v13 + *(void *)(v14 - 24) + 8) & 0xFFFFFFB5 | 8;
  uint64_t v15 = std::ostream::operator<<();
  char v16 = (uint64_t *)sub_10003AB28(v15);
  uint64_t v17 = *v16;
  *(uint64_t *)((char *)v16 + *(void *)(*v16 - 24) + 24) = 2;
  *(_DWORD *)((char *)v16 + *(void *)(v17 - 24) + 8) = *(_DWORD *)((unsigned char *)v16 + *(void *)(v17 - 24) + 8) & 0xFFFFFFB5 | 8;
  std::ostream::operator<<();
  std::stringbuf::str();
  if (SHIBYTE(v22) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_10004C294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10027E318((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_10004C2C4@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)__p = 0u;
    long long v12 = 0u;
    memset(v10, 0, sizeof(v10));
    long long v9 = 0u;
    sub_10004C67C((uint64_t)&v9);
    unint64_t v3 = 0;
    uint64_t v4 = *(void *)&v10[0];
    *(_DWORD *)((char *)v10 + *(void *)(*(void *)&v10[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v10
                                                                                      + *(void *)(*(void *)&v10[0]
                                                                                                  - 24)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v10 + *(void *)(v4 - 24) + 8) |= 0x4000u;
    while (1)
    {
      unint64_t v5 = *(void *)(a1 + 8);
      if (v5) {
        unint64_t v5 = *(void *)(v5 + 16);
      }
      if (v3 >= v5) {
        break;
      }
      if (v3)
      {
        unsigned __int8 v24 = 32;
        sub_10003AB28((uint64_t)v10);
      }
      unsigned __int8 v24 = 48;
      uint64_t v6 = sub_10004C5B4(v10, &v24);
      *(void *)((char *)v6 + *(void *)(*v6 - 24) + 24) = 2;
      std::ostream::operator<<();
      ++v3;
    }
    std::stringbuf::str();
    *(void *)((char *)&v10[-1]
    *(void *)&v10[0] = v7;
    if (SHIBYTE(v12) < 0) {
      operator delete(__p[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    return (void *)std::ios::~ios();
  }
  else
  {
    return sub_10004191C(a2, "NULL");
  }
}

void sub_10004C594(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_10004C5B4(void *a1, unsigned __int8 *a2)
{
  unint64_t v3 = (char *)a1 + *(void *)(*a1 - 24);
  int v4 = *a2;
  if (*((_DWORD *)v3 + 36) == -1)
  {
    std::ios_base::getloc((const std::ios_base *)((char *)a1 + *(void *)(*a1 - 24)));
    unint64_t v5 = std::locale::use_facet(&v8, &std::ctype<char>::id);
    int v6 = ((uint64_t (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 32);
    std::locale::~locale(&v8);
    *((_DWORD *)v3 + 36) = v6;
  }
  *((_DWORD *)v3 + 36) = v4;
  return a1;
}

void sub_10004C668(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::locale a10)
{
}

uint64_t sub_10004C67C(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  *(void *)a1 = v4;
  *(void *)(a1 + *(void *)(v4 - 24)) = v3;
  *(void *)(a1 + 8) = 0;
  unint64_t v5 = (std::ios_base *)(a1 + *(void *)(*(void *)a1 - 24));
  std::ios_base::init(v5, (void *)(a1 + 24));
  v5[1].__vftable = 0;
  v5[1].__fmtflags_ = -1;
  *(void *)(a1 + 16) = v7;
  *(void *)(v2 + *(void *)(v7 - 24)) = v6;
  *(void *)a1 = v8;
  std::streambuf::basic_streambuf();
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 120) = 24;
  return a1;
}

void sub_10004C92C(_Unwind_Exception *a1)
{
}

uint64_t sub_10004C954(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 1816);
  if (v2 == (void *)(a1 + 1824))
  {
    LOBYTE(v3) = 0;
  }
  else
  {
    int v3 = 0;
    do
    {
      int v4 = *((unsigned __int8 *)v2 + 28);
      int v5 = v3 | 2;
      if (!*((_WORD *)v2 + 16)) {
        int v5 = v3;
      }
      int v6 = v3 | 4;
      if (!*((_WORD *)v2 + 16)) {
        int v6 = v3;
      }
      int v7 = v3 | (*((_WORD *)v2 + 16) != 0);
      if (v4 != 22) {
        int v7 = v3;
      }
      if (v4 == 7) {
        int v7 = v6;
      }
      if (*((unsigned char *)v2 + 28)) {
        int v3 = v7;
      }
      else {
        int v3 = v5;
      }
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          long long v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          long long v9 = (void *)v2[2];
          BOOL v10 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v10);
      }
      uint64_t v2 = v9;
    }
    while (v9 != (void *)(a1 + 1824));
  }
  uint64_t v11 = *(void **)(a1 + 2040);
  long long v12 = (void *)(a1 + 2048);
  if (v11 == (void *)(a1 + 2048))
  {
    unsigned __int8 v13 = 0;
  }
  else
  {
    unsigned __int8 v13 = 0;
    do
    {
      char v14 = sub_10004CCF4(v11[5]);
      if (sub_10004CD04(v11[5])) {
        char v15 = 2;
      }
      else {
        char v15 = 0;
      }
      if (sub_10004CCE4(v11[5])) {
        char v16 = 4;
      }
      else {
        char v16 = 0;
      }
      long long v17 = (void *)v11[1];
      if (v17)
      {
        do
        {
          long long v18 = v17;
          long long v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          long long v18 = (void *)v11[2];
          BOOL v10 = *v18 == (void)v11;
          uint64_t v11 = v18;
        }
        while (!v10);
      }
      v13 |= v14 | v15 | v16;
      uint64_t v11 = v18;
    }
    while (v18 != v12);
  }
  long long v19 = qword_100A19E90;
  if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
  {
    v22[0] = 67109632;
    v22[1] = v3;
    __int16 v23 = 1024;
    int v24 = v13;
    __int16 v25 = 1024;
    int v26 = (v13 ^ v3);
    _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "AOPBTBUFF config current:%d new:%d configChanged:%d", (uint8_t *)v22, 0x14u);
  }
  if (v13 == v3) {
    return 0;
  }
  if (((v13 ^ v3) & 1) == 0)
  {
    uint64_t v20 = 0;
    if (((v13 ^ v3) & 2) == 0) {
      goto LABEL_60;
    }
LABEL_53:
    if ((v13 & 2) != 0)
    {
      uint64_t v20 = sub_1006D6F68(a1, 0);
      if (v20 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100796214();
      }
    }
    else
    {
      uint64_t v20 = sub_1006D6BF8(a1, 0);
      if (v20 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_1007961AC();
      }
    }
    goto LABEL_60;
  }
  if ((v13 & 1) == 0)
  {
    uint64_t v20 = sub_1006D6BF8(a1, 22);
    if (v20 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
    {
      sub_10079627C();
      if (((v13 ^ v3) & 2) != 0) {
        goto LABEL_53;
      }
      goto LABEL_60;
    }
LABEL_52:
    if (((v13 ^ v3) & 2) == 0) {
      goto LABEL_60;
    }
    goto LABEL_53;
  }
  uint64_t v20 = sub_1006D6F68(a1, 22);
  if (!v20 || !os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
    goto LABEL_52;
  }
  sub_1007962E4();
  if (((v13 ^ v3) & 2) != 0) {
    goto LABEL_53;
  }
LABEL_60:
  if (((v13 ^ v3) & 4) != 0)
  {
    if ((v13 & 4) != 0)
    {
      uint64_t v20 = sub_1006D6F68(a1, 7);
      if (v20 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_100796144();
      }
    }
    else
    {
      uint64_t v20 = sub_1006D6BF8(a1, 7);
      if (v20 && os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
        sub_1007960DC();
      }
    }
  }
  return v20;
}

uint64_t sub_10004CCE4(uint64_t a1)
{
  return (*(unsigned __int16 *)(*(void *)(a1 + 8) + 124) >> 2) & 1;
}

uint64_t sub_10004CCF4(uint64_t a1)
{
  return *(_WORD *)(*(void *)(a1 + 8) + 124) & 1;
}

uint64_t sub_10004CD04(uint64_t a1)
{
  return (*(unsigned __int16 *)(*(void *)(a1 + 8) + 124) >> 1) & 1;
}

id sub_10004CD14(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) xpcReceivedMessage:a2];
}

void sub_10004CD20(uint64_t a1)
{
}

void sub_10004CD28(uint64_t a1)
{
}

void sub_10004CD30(uint64_t a1)
{
}

void sub_10004CD38(uint64_t a1)
{
}

void sub_10004CD40(uint64_t a1)
{
}

void sub_10004CD48(uint64_t a1)
{
}

void sub_10004CD50(uint64_t a1)
{
}

void sub_10004CD58(uint64_t a1)
{
}

void sub_10004CD60(uint64_t a1)
{
}

void sub_10004CD68(uint64_t a1)
{
}

void sub_10004CD70(uint64_t a1)
{
}

void sub_10004CD78(uint64_t a1)
{
}

void sub_10004CD80(uint64_t a1)
{
}

void sub_10004CD88(uint64_t a1)
{
}

void sub_10004CD90(uint64_t a1)
{
}

void sub_10004CD98(uint64_t a1)
{
}

void sub_10004CDA8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_100051568(&v1);
}

void sub_10004CDD4(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 48);
  sub_10036CEBC(&v1);
}

void sub_10004CE00(uint64_t a1)
{
}

void sub_10004CE0C(uint64_t a1)
{
}

void sub_10004CE18(uint64_t a1)
{
}

void sub_10004CE20(uint64_t a1)
{
}

void sub_10004CE28(uint64_t a1)
{
}

void sub_10004CE34(uint64_t a1)
{
}

void sub_10004CE3C(uint64_t a1)
{
}

void sub_10004CE48(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void sub_10004CE5C(uint64_t a1)
{
}

void sub_10004CE70(uint64_t a1)
{
}

void sub_10004CE80(uint64_t a1)
{
}

void sub_10004CE94(uint64_t a1)
{
}

uint64_t sub_10004CE9C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CEAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CEBC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CECC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CEDC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CEEC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CEFC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF0C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF1C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF2C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF3C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF4C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF5C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF6C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF7C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF8C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004CF9C(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

__n128 sub_10004CFB0(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[3] = result;
  return result;
}

__n128 sub_10004CFBC(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

__n128 sub_10004CFE0(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

uint64_t sub_10004D004(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return sub_10037DB90((uint64_t)(a1 + 6), a1 + 6, (void *)(a2 + 48));
}

void sub_10004D03C(_Unwind_Exception *a1)
{
  sub_10037D324(v1);
  _Unwind_Resume(a1);
}

__n128 sub_10004D050(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 48);
  *(_OWORD *)(a1 + 60) = *(_OWORD *)(a2 + 60);
  *(__n128 *)(a1 + 48) = result;
  return result;
}

uint64_t sub_10004D064(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004D074(uint64_t result, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 48);
  *(_DWORD *)(result + 51) = *(_DWORD *)(a2 + 51);
  *(_DWORD *)(result + 48) = v2;
  return result;
}

uint64_t sub_10004D088(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004D098(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004D0A8(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

__n128 sub_10004D0B8(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  long long v3 = *(_OWORD *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v5;
  *(_OWORD *)(a1 + 80) = v3;
  *(_OWORD *)(a1 + 96) = v4;
  long long v6 = *(_OWORD *)(a2 + 144);
  long long v7 = *(_OWORD *)(a2 + 160);
  long long v8 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v8;
  *(_OWORD *)(a1 + 144) = v6;
  *(_OWORD *)(a1 + 160) = v7;
  __n128 result = *(__n128 *)(a2 + 208);
  long long v10 = *(_OWORD *)(a2 + 224);
  long long v11 = *(_OWORD *)(a2 + 240);
  *(_OWORD *)(a1 + 255) = *(_OWORD *)(a2 + 255);
  *(_OWORD *)(a1 + 224) = v10;
  *(_OWORD *)(a1 + 240) = v11;
  *(__n128 *)(a1 + 208) = result;
  return result;
}

uint64_t sub_10004D0FC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

uint64_t sub_10004D10C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

void sub_10004D11C(uint64_t a1, uint64_t a2)
{
}

__n128 sub_10004D128(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  a2[3].n128_u64[0] = 0;
  return result;
}

void *sub_10004D144(void *result, void *a2)
{
  result[6] = a2[6];
  long long v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  long long v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    void *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

__n128 sub_10004D180(__n128 *a1, __n128 *a2)
{
  __n128 result = a2[3];
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a1[3] = result;
  return result;
}

void *sub_10004D194(void *result, void *a2)
{
  result[6] = a2[6];
  long long v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  long long v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    void *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

void *sub_10004D1D0(void *result, void *a2)
{
  result[6] = a2[6];
  long long v2 = a2 + 7;
  uint64_t v3 = a2[7];
  result[7] = v3;
  long long v4 = result + 7;
  uint64_t v5 = a2[8];
  result[8] = v5;
  if (v5)
  {
    *(void *)(v3 + 16) = v4;
    a2[6] = v2;
    void *v2 = 0;
    a2[8] = 0;
  }
  else
  {
    result[6] = v4;
  }
  return result;
}

__n128 sub_10004D20C(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v2;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v4 = *(_OWORD *)(a2 + 96);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v4;
  *(_OWORD *)(a1 + 112) = v5;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_10004D230(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

unsigned char *sub_10004D240(uint64_t a1)
{
  __n128 result = *(unsigned char **)(a1 + 32);
  if (result[353]) {
    return [result _update];
  }
  return result;
}

id sub_10004D254(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) _xpcListenerEvent:a2];
}

void sub_10004D260(void *a1, unint64_t a2)
{
  if (a2)
  {
    long long v4 = a1 + 19;
    uint64_t v3 = (void *)a1[19];
    if (v3)
    {
      long long v6 = (uint64_t **)(a1 + 18);
      long long v7 = a1 + 19;
      do
      {
        unint64_t v8 = v3[4];
        BOOL v9 = v8 >= a2;
        if (v8 >= a2) {
          long long v10 = v3;
        }
        else {
          long long v10 = v3 + 1;
        }
        if (v9) {
          long long v7 = v3;
        }
        uint64_t v3 = (void *)*v10;
      }
      while (*v10);
      if (v7 != v4 && v7[4] <= a2)
      {
        sub_10004D3B8((uint64_t **)a1 + 18, v7);
        operator delete(v7);
        long long v11 = *v6;
        if (*v6 != v4)
        {
          do
          {
            if (v11[5] == a2) {
              v11[5] = 0;
            }
            long long v12 = (uint64_t *)v11[1];
            if (v12)
            {
              do
              {
                unsigned __int8 v13 = v12;
                long long v12 = (uint64_t *)*v12;
              }
              while (v12);
            }
            else
            {
              do
              {
                unsigned __int8 v13 = (uint64_t *)v11[2];
                BOOL v14 = *v13 == (void)v11;
                long long v11 = v13;
              }
              while (!v14);
            }
            long long v11 = v13;
          }
          while (v13 != v4);
        }
        long long v17 = (void *)a1[22];
        char v16 = a1 + 22;
        char v15 = v17;
        if (!v17) {
          goto LABEL_34;
        }
        long long v18 = v16;
        do
        {
          unint64_t v19 = v15[4];
          BOOL v20 = v19 >= a2;
          if (v19 >= a2) {
            long long v21 = v15;
          }
          else {
            long long v21 = v15 + 1;
          }
          if (v20) {
            long long v18 = v15;
          }
          char v15 = (void *)*v21;
        }
        while (*v21);
        if (v18 == v16 || v18[4] > a2) {
LABEL_34:
        }
          long long v18 = v16;
        sub_10004D3B8((uint64_t **)v16 - 1, v18);
        operator delete(v18);
      }
    }
  }
}

uint64_t *sub_10004D3B8(uint64_t **a1, uint64_t *a2)
{
  long long v2 = (uint64_t *)a2[1];
  if (v2)
  {
    do
    {
      uint64_t v3 = v2;
      long long v2 = (uint64_t *)*v2;
    }
    while (v2);
  }
  else
  {
    long long v4 = a2;
    do
    {
      uint64_t v3 = (uint64_t *)v4[2];
      BOOL v5 = *v3 == (void)v4;
      long long v4 = v3;
    }
    while (!v5);
  }
  if (*a1 == a2) {
    *a1 = v3;
  }
  long long v6 = a1[1];
  a1[2] = (uint64_t *)((char *)a1[2] - 1);
  sub_10004D42C(v6, a2);
  return v3;
}

uint64_t *sub_10004D42C(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a2;
  if (*a2)
  {
    long long v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      uint64_t v3 = a2;
      goto LABEL_7;
    }
    do
    {
      uint64_t v3 = v4;
      long long v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  long long v6 = (uint64_t **)v3[2];
  long long v7 = *v6;
  if (*v6 == v3)
  {
    *long long v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      long long v7 = 0;
      __n128 result = (uint64_t *)v2;
    }
    else
    {
      long long v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    *uint64_t v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      __n128 result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 == v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      unsigned __int8 v13 = *(uint64_t **)(v12 + 8);
      uint64_t v14 = *v13;
      *(void *)(v12 + 8) = *v13;
      if (v14) {
        *(void *)(v14 + 16) = v12;
      }
      void v13[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
      uint64_t *v13 = v12;
      *(void *)(v12 + 16) = v13;
      if (result == (uint64_t *)*v7) {
        __n128 result = v7;
      }
      long long v7 = *(uint64_t **)(*v7 + 8);
    }
    char v15 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v15 + 24))
    {
      char v16 = (uint64_t *)v7[1];
      if (!v16) {
        goto LABEL_56;
      }
LABEL_55:
      if (*((unsigned char *)v16 + 24))
      {
LABEL_56:
        *((unsigned char *)v15 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v22 = v15[1];
        uint64_t *v7 = v22;
        if (v22) {
          *(void *)(v22 + 16) = v7;
        }
        void v15[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
        v15[1] = v7;
        void v7[2] = (uint64_t)v15;
        char v16 = v7;
      }
      else
      {
        char v15 = v7;
      }
      uint64_t v23 = v15[2];
      *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v16 + 24) = 1;
      int v24 = *(uint64_t **)(v23 + 8);
      uint64_t v25 = *v24;
      *(void *)(v23 + 8) = *v24;
      if (v25) {
        *(void *)(v25 + 16) = v23;
      }
      void v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      *int v24 = v23;
      goto LABEL_72;
    }
    char v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_55;
    }
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      long long v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
LABEL_49:
    long long v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v18 = v7[1];
    *(void *)uint64_t v12 = v18;
    if (v18) {
      *(void *)(v18 + 16) = v12;
    }
    void v7[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
    v7[1] = v12;
    *(void *)(v12 + 16) = v7;
    if (result == (uint64_t *)v12) {
      __n128 result = v7;
    }
    long long v7 = *(uint64_t **)v12;
  }
  unint64_t v19 = (void *)*v7;
  if (*v7 && !*((unsigned char *)v19 + 24)) {
    goto LABEL_68;
  }
  BOOL v20 = (uint64_t *)v7[1];
  if (!v20 || *((unsigned char *)v20 + 24))
  {
    *((unsigned char *)v7 + 24) = 0;
    long long v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  if (v19 && !*((unsigned char *)v19 + 24))
  {
LABEL_68:
    BOOL v20 = v7;
  }
  else
  {
    *((unsigned char *)v20 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v26 = *v20;
    v7[1] = *v20;
    if (v26) {
      *(void *)(v26 + 16) = v7;
    }
    void v20[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
    *BOOL v20 = (uint64_t)v7;
    void v7[2] = (uint64_t)v20;
    unint64_t v19 = v7;
  }
  uint64_t v23 = v20[2];
  *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v19 + 24) = 1;
  int v24 = *(uint64_t **)v23;
  uint64_t v27 = *(void *)(*(void *)v23 + 8);
  *(void *)uint64_t v23 = v27;
  if (v27) {
    *(void *)(v27 + 16) = v23;
  }
  void v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  v24[1] = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void sub_10004D7B0(uint64_t a1, void *a2)
{
}

id sub_10004D7B8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  id result = [*(id *)(a1 + 32) hasPrefix:a2];
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
    *a4 = 1;
  }
  return result;
}

void sub_10004D800(uint64_t a1, void *a2)
{
}

void sub_10004D808(uint64_t a1, int *a2)
{
  if (sub_100050494())
  {
    int v3 = *a2;
    long long v211 = a2;
    switch(*a2)
    {
      case 13:
        v239[0] = @"AvgRSSI";
        long long v4 = +[NSNumber numberWithInt:a2[1]];
        v240[0] = v4;
        v239[1] = @"AvgPER";
        int v5 = +[NSNumber numberWithUnsignedInt:a2[2]];
        v240[1] = v5;
        v239[2] = @"RecentRSSI";
        long long v6 = +[NSNumber numberWithInt:a2[3]];
        v240[2] = v6;
        v239[3] = @"RecentPER";
        long long v7 = +[NSNumber numberWithUnsignedInt:a2[4]];
        v240[3] = v7;
        v239[4] = @"PID";
        int v8 = +[NSNumber numberWithUnsignedInt:a2[5]];
        v240[4] = v8;
        v239[5] = @"VID";
        uint64_t v9 = +[NSNumber numberWithUnsignedInt:a2[6]];
        v240[5] = v9;
        uint64_t v10 = +[NSDictionary dictionaryWithObjects:v240 forKeys:v239 count:6];

        sub_10038094C(a1, 0x5Fu, v10);
        goto LABEL_44;
      case 14:
        v251[0] = @"LastDisconnectedTime";
        uint64_t v23 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 1)];
        v251[1] = @"Version";
        v252[0] = v23;
        int v24 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 4)];
        v252[1] = v24;
        uint64_t v25 = +[NSDictionary dictionaryWithObjects:v252 forKeys:v251 count:2];

        sub_10038094C(a1, 0x69u, v25);
        goto LABEL_44;
      case 15:
        v247[0] = @"Version";
        uint64_t v26 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 4)];
        v248[0] = v26;
        v247[1] = @"Reason";
        uint64_t v27 = +[NSNumber numberWithUnsignedInt:a2[2]];
        v248[1] = v27;
        v247[2] = @"StartTime";
        long long v28 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 2)];
        v248[2] = v28;
        v247[3] = @"StopTime";
        long long v29 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 3)];
        v248[3] = v29;
        v247[4] = @"Duration";
        long long v30 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 4)];
        v248[4] = v30;
        v247[5] = @"UpgradeCount";
        long long v31 = +[NSNumber numberWithUnsignedInt:a2[10]];
        v248[5] = v31;
        v247[6] = @"UpgradeDuration";
        long long v32 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 6)];
        v248[6] = v32;
        v247[7] = @"TimeBetweenUpgrades";
        uint64_t v33 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 7)];
        v248[7] = v33;
        uint64_t v34 = +[NSDictionary dictionaryWithObjects:v248 forKeys:v247 count:8];

        sub_10038094C(a1, 0x6Au, v34);
        goto LABEL_44;
      case 16:
        v245[0] = @"Reason";
        uint64_t v35 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 1)];
        v246[0] = v35;
        v245[1] = @"Tech";
        uint64_t v36 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 16)];
        v246[1] = v36;
        v245[2] = @"StartTime";
        uint64_t v37 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 3)];
        v246[2] = v37;
        v245[3] = @"StopTime";
        uint64_t v38 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 4)];
        v246[3] = v38;
        v245[4] = @"Duration";
        int v39 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 5)];
        v246[4] = v39;
        v245[5] = @"AverageThroughput";
        int v40 = +[NSNumber numberWithUnsignedInt:a2[12]];
        v246[5] = v40;
        v245[6] = @"PayloadSize";
        int v41 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 7)];
        v246[6] = v41;
        v245[7] = @"UpgradeTime";
        char v42 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 8)];
        v246[7] = v42;
        uint64_t v43 = +[NSDictionary dictionaryWithObjects:v246 forKeys:v245 count:8];

        sub_10038094C(a1, 0x6Bu, v43);
        goto LABEL_44;
      case 17:
        v243[0] = @"Module";
        size_t v44 = +[NSNumber numberWithUnsignedInt:a2[1]];
        v244[0] = v44;
        v243[1] = @"Line";
        uint64_t v45 = +[NSNumber numberWithUnsignedInt:a2[2]];
        v244[1] = v45;
        v243[2] = @"Error";
        uint64_t v46 = +[NSNumber numberWithUnsignedInt:a2[3]];
        v244[2] = v46;
        uint64_t v47 = +[NSDictionary dictionaryWithObjects:v244 forKeys:v243 count:3];

        sub_10038094C(a1, 0x6Cu, v47);
        goto LABEL_44;
      case 18:
        v241[0] = @"Connected";
        unint64_t v48 = +[NSNumber numberWithBool:*((unsigned __int8 *)a2 + 4)];
        v242[0] = v48;
        v241[1] = @"StartTime";
        id v49 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 1)];
        v242[1] = v49;
        v241[2] = @"StopTime";
        uint64_t v50 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 2)];
        v242[2] = v50;
        v241[3] = @"Duration";
        uint64_t v51 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 3)];
        v242[3] = v51;
        v241[4] = @"UpgradeCount";
        uint64_t v52 = +[NSNumber numberWithUnsignedInt:a2[8]];
        v242[4] = v52;
        v241[5] = @"UpgradeDuration";
        int v53 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 5)];
        v242[5] = v53;
        v241[6] = @"TimeBetweenUpgrades";
        int v54 = +[NSNumber numberWithUnsignedLongLong:*((void *)a2 + 6)];
        v242[6] = v54;
        v241[7] = @"RSSI";
        double v55 = +[NSNumber numberWithLongLong:*((void *)a2 + 7)];
        v242[7] = v55;
        long long v56 = +[NSDictionary dictionaryWithObjects:v242 forKeys:v241 count:8];

        sub_10038094C(a1, 0x6Du, v56);
        goto LABEL_44;
      case 19:
      case 20:
      case 21:
      case 22:
      case 23:
        goto LABEL_45;
      case 24:
        id v57 = objc_alloc_init((Class)NSMutableDictionary);
        long long v58 = +[NSNumber numberWithUnsignedInt:a2[1]];
        [v57 setObject:v58 forKey:@"LEPhyType"];

        uint64_t v59 = +[NSNumber numberWithUnsignedInt:a2[5]];
        [v57 setObject:v59 forKey:@"LeCoexDenials"];

        CFTimeInterval v60 = +[NSNumber numberWithUnsignedInt:a2[4]];
        [v57 setObject:v60 forKey:@"LeDurationInMs"];

        CFTimeInterval v61 = +[NSNumber numberWithUnsignedInt:a2[2]];
        [v57 setObject:v61 forKey:@"CumulativeLeTxBytes"];

        int v62 = +[NSNumber numberWithUnsignedInt:a2[3]];
        [v57 setObject:v62 forKey:@"CumulativeLeRxBytes"];

        uint64_t v63 = *((void *)a2 + 3);
        uint64_t v213 = *((void *)a2 + 4);
        if (v63 != v213)
        {
          uint64_t v64 = 0;
          uint64_t v65 = 0;
          do
          {
            id v66 = +[NSString stringWithFormat:@"LETxPerVsRssi_PER_%02lu", v65];
            id v67 = +[NSString stringWithFormat:@"LETxPerVsRssi_PER_%02lu", v65];
            double v68 = +[NSString stringWithFormat:@"LETxPerVsRssi_PER_%02lu", v65];
            __int16 v69 = +[NSNumber numberWithUnsignedInt:**(unsigned int **)(v63 + 8 * v65)];
            [v57 setObject:v66 forKey:v69];

            __int16 v70 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v63 + 8 * v65) + 4)];
            [v57 setObject:v67 forKey:v70];

            char v71 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v63 + 8 * v65) + 8)];
            [v57 setObject:v68 forKey:v71];

            ++v65;
            v64 += 8;
          }
          while (v63 + v64 != v213);
        }
        uint64_t v72 = *((void *)v211 + 6);
        uint64_t v214 = *((void *)v211 + 7);
        if (v72 != v214)
        {
          uint64_t v73 = 0;
          uint64_t v74 = 0;
          do
          {
            uint64_t v75 = +[NSString stringWithFormat:@"LERxPerVsRssi_PER_%02lu", v74];
            uint64_t v76 = +[NSString stringWithFormat:@"LERxPerVsRssi_PER_%02lu", v74];
            uint64_t v77 = +[NSString stringWithFormat:@"LERxPerVsRssi_PER_%02lu", v74];
            unint64_t v78 = +[NSNumber numberWithUnsignedInt:**(unsigned int **)(v72 + 8 * v74)];
            [v57 setObject:v75 forKey:v78];

            uint64_t v79 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v72 + 8 * v74) + 4)];
            [v57 setObject:v76 forKey:v79];

            int v80 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v72 + 8 * v74) + 8)];
            [v57 setObject:v77 forKey:v80];

            ++v74;
            v73 += 8;
          }
          while (v72 + v73 != v214);
        }
        uint64_t v81 = *((void *)v211 + 18);
        uint64_t v215 = *((void *)v211 + 19);
        if (v81 != v215)
        {
          uint64_t v82 = 0;
          uint64_t v83 = 0;
          do
          {
            __int16 v84 = +[NSString stringWithFormat:@"ClTxPerVsRssi_PER_%02lu", v83];
            uint64_t v85 = +[NSString stringWithFormat:@"ClTxPerVsRssi_PER_%02lu", v83];
            unint64_t v86 = +[NSString stringWithFormat:@"ClTxPerVsRssi_PER_%02lu", v83];
            unint64_t v87 = +[NSNumber numberWithUnsignedInt:**(unsigned int **)(v81 + 8 * v83)];
            [v57 setObject:v84 forKey:v87];

            long long v88 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v81 + 8 * v83) + 4)];
            [v57 setObject:v85 forKey:v88];

            int v89 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v81 + 8 * v83) + 8)];
            [v57 setObject:v86 forKey:v89];

            ++v83;
            v82 += 8;
          }
          while (v81 + v82 != v215);
        }
        uint64_t v90 = *((void *)v211 + 21);
        uint64_t v216 = *((void *)v211 + 22);
        if (v90 != v216)
        {
          uint64_t v91 = 0;
          uint64_t v92 = 0;
          do
          {
            unint64_t v93 = +[NSString stringWithFormat:@"ClRxPerVsRssi_PER_%02lu", v92];
            unsigned int v94 = +[NSString stringWithFormat:@"ClRxPerVsRssi_PER_%02lu", v92];
            uint64_t v95 = +[NSString stringWithFormat:@"ClRxPerVsRssi_PER_%02lu", v92];
            size_t v96 = +[NSNumber numberWithUnsignedInt:**(unsigned int **)(v90 + 8 * v92)];
            [v57 setObject:v93 forKey:v96];

            long long v97 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v90 + 8 * v92) + 4)];
            [v57 setObject:v94 forKey:v97];

            unsigned int v98 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(*(void *)(v90 + 8 * v92) + 8)];
            [v57 setObject:v95 forKey:v98];

            ++v92;
            v91 += 8;
          }
          while (v90 + v91 != v216);
        }
        uint64_t v99 = *((void *)v211 + 9);
        uint64_t v100 = *((void *)v211 + 10);
        if (v99 != v100)
        {
          uint64_t v101 = 0;
          uint64_t v102 = 0;
          do
          {
            uint64_t v103 = +[NSString stringWithFormat:@"DisconnectDetailsLeCoexDenials_%02lu", v102];
            xpc_object_t v104 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v99 + 4 * v102)];
            [v57 setObject:v103 forKey:v104];

            ++v102;
            v101 += 4;
          }
          while (v99 + v101 != v100);
        }
        uint64_t v105 = *((void *)v211 + 12);
        uint64_t v106 = *((void *)v211 + 13);
        if (v105 != v106)
        {
          uint64_t v107 = 0;
          uint64_t v108 = 0;
          do
          {
            unint64_t v109 = +[NSString stringWithFormat:@"DisconnectDetailsLeRSSI_%02lu", v108];
            uint64_t v110 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v105 + 4 * v108)];
            [v57 setObject:v109 forKey:v110];

            ++v108;
            v107 += 4;
          }
          while (v105 + v107 != v106);
        }
        uint64_t v111 = (unsigned int *)*((void *)v211 + 24);
        unint64_t v112 = (unsigned int *)*((void *)v211 + 25);
        if (v111 != v112)
        {
          uint64_t v113 = 0;
          do
          {
            uint64_t v114 = +[NSString stringWithFormat:@"DisconnectDetailsClCoexDenials_%02d", v113];
            uint64_t v115 = +[NSNumber numberWithUnsignedInt:*v111];
            [v57 setObject:v114 forKey:v115];

            uint64_t v113 = (v113 + 1);
            ++v111;
          }
          while (v111 != v112);
        }
        uint64_t v116 = (unsigned int *)*((void *)v211 + 27);
        xpc_object_t v117 = (unsigned int *)*((void *)v211 + 28);
        if (v116 != v117)
        {
          uint64_t v118 = 0;
          do
          {
            BOOL v119 = +[NSString stringWithFormat:@"DisconnectDetailsClRssi_%02d", v118];
            uint64_t v120 = +[NSNumber numberWithUnsignedInt:*v116];
            [v57 setObject:v119 forKey:v120];

            uint64_t v118 = (v118 + 1);
            ++v116;
          }
          while (v116 != v117);
        }
        sub_10038094C(a1, 0x6Eu, v57);

        goto LABEL_44;
      default:
        if (v3 != 4) {
          goto LABEL_45;
        }
        v249[0] = @"ActivityType";
        uint64_t v11 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 36)];
        v250[0] = v11;
        v249[1] = @"AllowDups";
        uint64_t v12 = +[NSNumber numberWithBool:*((unsigned __int8 *)a2 + 34)];
        v250[1] = v12;
        v249[2] = @"AppExecutionState";
        unsigned __int8 v13 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 32)];
        v250[2] = v13;
        v249[3] = @"BundleIdentifier";
        uint64_t v14 = a2 + 2;
        if (*((char *)a2 + 31) < 0) {
          uint64_t v14 = (void *)*v14;
        }
        char v15 = +[NSString stringWithUTF8String:v14];
        v250[3] = v15;
        v249[4] = @"ExtensionPointTarget";
        char v16 = a2 + 10;
        if (*((char *)a2 + 63) < 0) {
          char v16 = (void *)*v16;
        }
        long long v17 = +[NSString stringWithUTF8String:v16];
        v250[4] = v17;
        v249[5] = @"IsGeneralDiscoveryScan";
        uint64_t v18 = +[NSNumber numberWithBool:*((unsigned __int8 *)a2 + 33)];
        v250[5] = v18;
        v249[6] = @"ParentBundleIdentifier";
        unint64_t v19 = a2 + 16;
        if (*((char *)a2 + 87) < 0) {
          unint64_t v19 = (void *)*v19;
        }
        BOOL v20 = +[NSString stringWithUTF8String:v19];
        v250[6] = v20;
        v249[7] = @"SupportBackground";
        BOOL v21 = +[NSNumber numberWithBool:*((unsigned __int8 *)a2 + 35)];
        v250[7] = v21;
        uint64_t v22 = +[NSDictionary dictionaryWithObjects:v250 forKeys:v249 count:8];

        sub_10038094C(a1, 0x66u, v22);
LABEL_44:
        a2 = v211;
        int v3 = *v211;
LABEL_45:
        BOOL v121 = v3 == 8 || v3 == 6;
        if (!v121) {
          return;
        }
        id v217 = *((id *)a2 + 5);
        if (qword_1009F7EC0 != -1) {
          dispatch_once(&qword_1009F7EC0, &stru_1009AA728);
        }
        unint64_t v122 = off_1009F7EB8;
        sub_1000305AC(__p, v217);
        uint64_t v123 = sub_10068640C((uint64_t)v122, __p);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
        }
        unsigned int v207 = sub_1006C7BB0((uint64_t)off_1009F7ED8, v217);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
        }
        unsigned int v124 = sub_1006C5934((uint64_t)off_1009F7ED8, v217);
        id v205 = v124;
        if (v124 && (unint64_t)[v124 length] >= 5)
        {
          CFAbsoluteTime v125 = (unsigned __int8 *)[v205 bytes];
          uint64_t v126 = *v125;
          unsigned __int16 v127 = *(_WORD *)(v125 + 1);
          unsigned int v202 = *(unsigned __int16 *)(v125 + 3);
        }
        else
        {
          unsigned int v202 = 0;
          unsigned __int16 v127 = 0;
          uint64_t v126 = 0;
        }
        int v218 = 0;
        v219[0] = 0;
        v219[1] = 0;
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
        }
        sub_1006BE040((uint64_t)off_1009F7ED8, v217, (uint64_t *)&v218);
        unsigned __int16 v201 = v127;
        id v128 = objc_alloc_init((Class)NSMutableString);
        uint64_t v129 = v218;
        if (v218 != v219)
        {
          do
          {
            if ([v128 length]) {
              [v128 appendString:@","];
            }
            id v130 = objc_alloc((Class)NSString);
            unint64_t v131 = v129 + 4;
            if (*((char *)v129 + 55) < 0) {
              unint64_t v131 = (void *)*v131;
            }
            id v132 = [v130 initWithUTF8String:v131];
            [v128 appendString:v132];

            unint64_t v133 = v129[1];
            if (v133)
            {
              do
              {
                unsigned int v134 = (char **)v133;
                unint64_t v133 = *(char **)v133;
              }
              while (v133);
            }
            else
            {
              do
              {
                unsigned int v134 = (char **)v129[2];
                BOOL v121 = *v134 == (char *)v129;
                uint64_t v129 = v134;
              }
              while (!v121);
            }
            uint64_t v129 = v134;
          }
          while (v134 != v219);
        }
        uint64_t v135 = sub_100017768();
        int v136 = v211;
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v135 + 8))(v135))
        {
          unint64_t v206 = @"NA";
          goto LABEL_91;
        }
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
        }
        sub_10003093C((uint64_t)off_1009F7ED8, v217, (uint64_t)__p);
        if (v221 >= 0) {
          uint64_t v137 = HIBYTE(v221);
        }
        else {
          uint64_t v137 = *(void *)&__p[8];
        }
        if (SHIBYTE(v221) < 0)
        {
          operator delete(*(void **)__p);
          if (v137)
          {
LABEL_81:
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
            }
            sub_10003093C((uint64_t)off_1009F7ED8, v217, (uint64_t)__p);
            if (v221 >= 0) {
              size_t v138 = __p;
            }
            else {
              size_t v138 = *(unsigned char **)__p;
            }
            unint64_t v206 = +[NSString stringWithUTF8String:v138];
            int v136 = v211;
            if (SHIBYTE(v221) < 0) {
              operator delete(*(void **)__p);
            }
LABEL_91:
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
            }
            int v139 = sub_1006BDC1C((uint64_t)off_1009F7ED8, v217);
            int v199 = v139;
            if (v139 >= 0x20000)
            {
              if (v139 >= 327680)
              {
                if (v139 > 589824)
                {
                  if (v139 <= 2147418111)
                  {
                    switch(v139)
                    {
                      case 589825:
                        unsigned int v140 = "FindNearbyPencil";
                        break;
                      case 655360:
                        unsigned int v140 = "AccessDigitalHomeKey";
                        break;
                      case 786432:
                        unsigned int v140 = "ProxControlDeviceClose";
                        break;
                      default:
LABEL_234:
                        unsigned int v140 = "?";
                        break;
                    }
                  }
                  else
                  {
                    switch(v139)
                    {
                      case 2147418112:
                        unsigned int v140 = "InternalTestNoLockScan";
                        break;
                      case 2147418113:
                        unsigned int v140 = "InternalTestNoScreenOffScan";
                        break;
                      case 2147418114:
                        unsigned int v140 = "InternalTestScanWithNoDups";
                        break;
                      case 2147418115:
                        unsigned int v140 = "InternalTestScanWithDups";
                        break;
                      case 2147418116:
                        unsigned int v140 = "InternalTestScanFor20Seconds";
                        break;
                      case 2147418117:
                        unsigned int v140 = "InternalTestActiveScan";
                        break;
                      case 2147418118:
                        unsigned int v140 = "InternalTestUUIDScan";
                        break;
                      case 2147418119:
                        unsigned int v140 = "InternalTestScanFor10ClockSeconds";
                        break;
                      case 2147418120:
                        unsigned int v140 = "InternalTestScanBoost";
                        break;
                      default:
                        goto LABEL_234;
                    }
                  }
                }
                else if (v139 > 458752)
                {
                  switch(v139)
                  {
                    case 524288:
                      unsigned int v140 = "ADPD";
                      break;
                    case 524289:
                      unsigned int v140 = "ADPDBuffer";
                      break;
                    case 524290:
                      unsigned int v140 = "MicroLocation";
                      break;
                    case 524291:
                      unsigned int v140 = "MicroLocationLeech";
                      break;
                    default:
                      if (v139 == 458753)
                      {
                        unsigned int v140 = "PrecisionFindingFindee";
                      }
                      else
                      {
                        if (v139 != 589824) {
                          goto LABEL_234;
                        }
                        unsigned int v140 = "FindNearbyRemote";
                      }
                      break;
                  }
                }
                else
                {
                  switch(v139)
                  {
                    case 393216:
                      unsigned int v140 = "CaptiveNetworkJoin";
                      break;
                    case 393217:
                      unsigned int v140 = "UseCaseSIMTransfer";
                      break;
                    case 393218:
                      unsigned int v140 = "MacSetup";
                      break;
                    case 393219:
                      unsigned int v140 = "AppleIDSignIn";
                      break;
                    case 393220:
                      unsigned int v140 = "AppleIDSignInSettings";
                      break;
                    default:
                      if (v139 == 327680)
                      {
                        unsigned int v140 = "RapportThirdParty";
                      }
                      else
                      {
                        if (v139 != 458752) {
                          goto LABEL_234;
                        }
                        unsigned int v140 = "PrecisionFindingFinder";
                      }
                      break;
                  }
                }
              }
              else
              {
                switch(v139)
                {
                  case 131072:
                    unsigned int v140 = "SharingDefault";
                    break;
                  case 131073:
                    unsigned int v140 = "SharingPhoneAutoUnlock";
                    break;
                  case 131074:
                    unsigned int v140 = "SharingSiriWatchAuth";
                    break;
                  case 131075:
                    unsigned int v140 = "SharingMacAutoUnlock";
                    break;
                  case 131076:
                    unsigned int v140 = "SharingEDTScreenOn";
                    break;
                  case 131077:
                    unsigned int v140 = "SharingEDTWiFiDisabled";
                    break;
                  case 131078:
                    unsigned int v140 = "SharingEDTWombatEligibleAsDefaultCamera";
                    break;
                  case 131079:
                    unsigned int v140 = "SharingEDTWombatCameraPicker";
                    break;
                  case 131080:
                    unsigned int v140 = "SharingWombatBackground";
                    break;
                  case 131081:
                    unsigned int v140 = "SharingUniversalControl";
                    break;
                  case 131082:
                    unsigned int v140 = "SharingPeopleProximity";
                    break;
                  case 131083:
                    unsigned int v140 = "SharingEDTEnsembleOpenDisplayPrefs";
                    break;
                  case 131084:
                    unsigned int v140 = "SharingEDTNearbydMotionStopped";
                    break;
                  case 131085:
                    unsigned int v140 = "SharingDoubleBoostGenericScan";
                    break;
                  case 131086:
                    unsigned int v140 = "SharingEDTIncomingAdvertisement ";
                    break;
                  case 131087:
                    unsigned int v140 = "SharingEDTWombatStreamStart";
                    break;
                  case 131088:
                    unsigned int v140 = "SharingOYAutoUnlock";
                    break;
                  case 131089:
                    goto LABEL_234;
                  case 131090:
                    unsigned int v140 = "SharingAirDrop";
                    break;
                  case 131091:
                    unsigned int v140 = "SharingNearbyInvitationHost";
                    break;
                  case 131092:
                    unsigned int v140 = "SharingNearbyInvitationParticipant";
                    break;
                  case 131093:
                    unsigned int v140 = "SharingAirDropAskToAirDrop";
                    break;
                  case 131094:
                    unsigned int v140 = "SharingAirDropTempIdentity";
                    break;
                  case 131095:
                    unsigned int v140 = "SharingAirDropNeedsCLink";
                    break;
                  case 131096:
                    unsigned int v140 = "SharingRemoteWidgetUpdate";
                    break;
                  case 131097:
                    unsigned int v140 = "SharingCountryCodeUpdate";
                    break;
                  case 131098:
                    unsigned int v140 = "SharingMacPhoneAutoUnlock";
                    break;
                  case 131099:
                    unsigned int v140 = "SharingVisionProDiscovery";
                    break;
                  case 131100:
                    unsigned int v140 = "SharingVisionProStateChange";
                    break;
                  case 131101:
                    unsigned int v140 = "SharingContinuityScreen";
                    break;
                  case 131102:
                    unsigned int v140 = "SharingEDTRemoteDisplay";
                    break;
                  default:
                    if (v139 == 196608)
                    {
                      unsigned int v140 = "DigitalIDTSA";
                    }
                    else
                    {
                      if (v139 != 0x40000) {
                        goto LABEL_234;
                      }
                      unsigned int v140 = "DigitalCarKeyThirdParty";
                    }
                    break;
                }
              }
            }
            else if (v139 <= 0x20000)
            {
              switch(v139)
              {
                case 65536:
                  unsigned int v140 = "FindMyAction";
                  break;
                case 65537:
                  unsigned int v140 = "FindMyBackground";
                  break;
                case 65538:
                  unsigned int v140 = "FindMyActionHELE";
                  break;
                case 65539:
                  unsigned int v140 = "FindMyBackgroundHELE";
                  break;
                case 65540:
                  unsigned int v140 = "FindMyActionTransient";
                  break;
                case 65541:
                  unsigned int v140 = "FindMyBackgroundTransient";
                  break;
                case 65542:
                  unsigned int v140 = "FindMyActionHELETransient";
                  break;
                case 65543:
                  unsigned int v140 = "FindMyBackgroundHELETransient";
                  break;
                case 65544:
                  unsigned int v140 = "FindMyNotOptedIn";
                  break;
                case 65545:
                  unsigned int v140 = "FindMyOptedIn";
                  break;
                case 65546:
                  unsigned int v140 = "FindMySepAlertsEnabled";
                  break;
                case 65547:
                  unsigned int v140 = "FindMyTemporaryAggressiveLegacy";
                  break;
                case 65548:
                  unsigned int v140 = "FindMyTemporaryLongAggressive";
                  break;
                case 65549:
                  unsigned int v140 = "FindMyBTFindingUserInitiated";
                  break;
                case 65550:
                  unsigned int v140 = "FindMyHELE";
                  break;
                case 65551:
                  unsigned int v140 = "FindMyBeaconOnDemand";
                  break;
                case 65552:
                  unsigned int v140 = "FindMyWildTimedScan";
                  break;
                case 65553:
                  unsigned int v140 = "FindMyBackgroundLeechScan";
                  break;
                case 65554:
                  unsigned int v140 = "FindMySnifferMode";
                  break;
                case 65555:
                  unsigned int v140 = "FindMyUnpair";
                  break;
                case 65556:
                  unsigned int v140 = "FindMyUnpairHELE";
                  break;
                case 65557:
                  unsigned int v140 = "FindMyPlaySound";
                  break;
                case 65558:
                  unsigned int v140 = "FindMyPlaySoundHELE";
                  break;
                case 65559:
                  unsigned int v140 = "FindMyNotOptedInBeepOnMoveWaking";
                  break;
                case 65560:
                  unsigned int v140 = "FindMyUTTransient";
                  break;
                case 65561:
                  unsigned int v140 = "FindMyUTHELETransient";
                  break;
                default:
                  JUMPOUT(0);
              }
            }
            else
            {
              unsigned int v140 = "Unspecified";
              switch(v139)
              {
                case 0:
                  break;
                case 1:
                  unsigned int v140 = "HealthKit";
                  break;
                case 2:
                  unsigned int v140 = "HomeKit";
                  break;
                case 3:
                  unsigned int v140 = "FindMyObjectConnection";
                  break;
                case 4:
                  unsigned int v140 = "FindMyObjectConnectionTransient";
                  break;
                case 5:
                  unsigned int v140 = "MIDI";
                  break;
                case 6:
                  unsigned int v140 = "Continuity";
                  break;
                case 7:
                  unsigned int v140 = "InstantHotSpot";
                  break;
                case 8:
                  unsigned int v140 = "NearBy";
                  break;
                case 9:
                  unsigned int v140 = "Sharing";
                  break;
                case 10:
                  unsigned int v140 = "HearingSupport";
                  break;
                case 11:
                  unsigned int v140 = "Magnet";
                  break;
                case 12:
                  unsigned int v140 = "HID";
                  break;
                case 13:
                  unsigned int v140 = "LEA";
                  break;
                case 14:
                  unsigned int v140 = "External";
                  break;
                case 15:
                  unsigned int v140 = "ExternalMedical";
                  break;
                case 16:
                  unsigned int v140 = "ExternalLock";
                  break;
                case 17:
                  unsigned int v140 = "ExternalWatch";
                  break;
                case 18:
                  unsigned int v140 = "SmartRouting";
                  break;
                case 19:
                  unsigned int v140 = "DigitalID";
                  break;
                case 20:
                  unsigned int v140 = "DigitalKey";
                  break;
                case 21:
                  unsigned int v140 = "DigitalCarKey";
                  break;
                case 22:
                  unsigned int v140 = "HeySiri";
                  break;
                case 23:
                  unsigned int v140 = "ThirdPartyApp";
                  break;
                case 24:
                  unsigned int v140 = "CNJ";
                  break;
                default:
                  switch(v139)
                  {
                    case 256:
                      unsigned int v140 = "DevicePresenceDetection";
                      break;
                    case 257:
                      unsigned int v140 = "AudioBox";
                      break;
                    case 258:
                      unsigned int v140 = "SIMTransfer";
                      break;
                    case 259:
                      unsigned int v140 = "ProximityScreenOnLeechScan";
                      break;
                    case 260:
                      unsigned int v140 = "MacMigrate";
                      break;
                    case 263:
                      unsigned int v140 = "HIDUARTService";
                      break;
                    case 264:
                      unsigned int v140 = "AccessibilitySwitchControlPairing";
                      break;
                    case 265:
                      unsigned int v140 = "BaseBandFastConnect";
                      break;
                    case 266:
                      unsigned int v140 = "SafetyAlerts";
                      break;
                    case 267:
                      unsigned int v140 = "LECarPlay";
                      break;
                    case 268:
                      unsigned int v140 = "TCCBluetooth";
                      break;
                    case 269:
                      unsigned int v140 = "AOPBufferLeech";
                      break;
                    default:
                      goto LABEL_234;
                  }
                  break;
              }
            }
            __n128 v209 = +[NSString stringWithUTF8String:v140];
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
            }
            double v141 = sub_1006BBD44((uint64_t)off_1009F7ED8, v217);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
            }
            double v142 = sub_1006BBE64((uint64_t)off_1009F7ED8, v217);
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
            }
            double v143 = sub_1006BBEF8((uint64_t)off_1009F7ED8, v217);
            if (v142 <= v141) {
              double v144 = 0.0;
            }
            else {
              double v144 = v142 - v141;
            }
            if (v143 <= v141) {
              double v145 = 0.0;
            }
            else {
              double v145 = v143 - v141;
            }
            double Current = CFAbsoluteTimeGetCurrent();
            if (Current <= v143) {
              double v147 = 0.0;
            }
            else {
              double v147 = Current - v143;
            }
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009AA728);
            }
            uint64_t v148 = off_1009F7EB8;
            sub_1000305AC(__p, v217);
            uint64_t v149 = sub_1006865A8((uint64_t)v148, __p);
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009AA728);
            }
            xpc_object_t v150 = off_1009F7EB8;
            sub_1000305AC(__p, v217);
            uint64_t v151 = sub_100686658((uint64_t)v150, __p);
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009AA728);
            }
            uint64_t v152 = off_1009F7EB8;
            sub_1000305AC(__p, v217);
            uint64_t v153 = sub_1006864C4((uint64_t)v152, __p);
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009AA728);
            }
            unint64_t v154 = off_1009F7EB8;
            sub_1000305AC(__p, v217);
            int v155 = sub_100030818((uint64_t)v154, __p);
            if (*v136 == 8)
            {
              v237[0] = @"AppState";
              unint64_t v200 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v136 + 32)];
              v238[0] = v200;
              v237[1] = @"ConnectionIntervalInSlots";
              int v197 = +[NSNumber numberWithUnsignedShort:v123];
              v238[1] = v197;
              v237[2] = @"ConnectionSetupDurationInSec";
              xpc_object_t v195 = +[NSNumber numberWithDouble:v145];
              v238[2] = v195;
              v237[3] = @"ConnectionDurationInSec";
              uint64_t v156 = +[NSNumber numberWithDouble:v147];
              CFStringRef v157 = &stru_1009C1AC8;
              if (v206) {
                CFStringRef v157 = v206;
              }
              unint64_t v193 = (void *)v156;
              v238[3] = v156;
              v238[4] = v157;
              v237[4] = @"DeviceName";
              v237[5] = @"IsAppleDevice";
              unint64_t v191 = +[NSNumber numberWithBool:v207];
              v238[5] = v191;
              v237[6] = @"IsCentral";
              int v189 = +[NSNumber numberWithBool:v155 == 0];
              v238[6] = v189;
              v237[7] = @"MaxCE";
              xpc_object_t v188 = +[NSNumber numberWithUnsignedShort:v153];
              v238[7] = v188;
              v237[8] = @"PeripheralLatency";
              xpc_object_t v187 = +[NSNumber numberWithUnsignedShort:v149];
              v238[8] = v187;
              v237[9] = @"PID";
              unint64_t v158 = +[NSNumber numberWithUnsignedInt:v202];
              v238[9] = v158;
              v237[10] = @"Result";
              uint64_t v159 = +[NSNumber numberWithInt:v136[12]];
              v238[10] = v159;
              v237[11] = @"SessionID";
              int v160 = v136 + 2;
              if (*((char *)v136 + 31) < 0) {
                int v160 = (void *)*v160;
              }
              xpc_object_t v161 = +[NSString stringWithUTF8String:v160];
              v238[11] = v161;
              v237[12] = @"SupervisionTimeout";
              xpc_object_t v162 = +[NSNumber numberWithUnsignedShort:v151];
              v238[12] = v162;
              v238[13] = v128;
              v237[13] = @"Tags";
              v237[14] = @"UseCase";
              v238[14] = v209;
              v237[15] = @"VID";
              int v163 = +[NSNumber numberWithUnsignedShort:v201];
              v238[15] = v163;
              v237[16] = @"VendorIDSource";
              uint64_t v164 = +[NSNumber numberWithUnsignedChar:v126];
              v238[16] = v164;
              v237[17] = @"ConnectionScanCompleteDurationInSec";
              unint64_t v165 = +[NSNumber numberWithDouble:v144];
              v238[17] = v165;
              xpc_object_t v203 = +[NSDictionary dictionaryWithObjects:v238 forKeys:v237 count:18];

              double v166 = CFAbsoluteTimeGetCurrent();
              if (qword_1009F7EE0 != -1) {
                dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
              }
              sub_100030DCC((uint64_t)off_1009F7ED8, *((void **)v211 + 5), 0);
              unsigned int v167 = sub_1006ACEAC();
              unsigned int v168 = @"isAppleDevice";
              if (!v207) {
                unsigned int v168 = v209;
              }
              size_t v169 = v168;
              *(void *)__p = 0;
              *(void *)&__p[8] = 0;
              sub_10003AED0((uint64_t)__p, a1 + 176);
              double v170 = +[NSNumber numberWithDouble:v166 - v141];
              uint64_t v171 = +[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", v169, v170, 0);
              xpc_object_t v172 = *(void **)(a1 + 328);
              *(void *)(a1 + 328) = v171;

              char v173 = [*(id *)(a1 + 312) objectForKey:v167];
              BOOL v174 = v173 == 0;

              if (v174) {
                [*(id *)(a1 + 312) setObject:*(void *)(a1 + 328) forKeyedSubscript:v167];
              }
              if (v207)
              {
                if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 512))(a1, *((void *)v211 + 5)))
                {
                  ++*(_WORD *)(a1 + 132);
                }
              }
              sub_10003AFE8((uint64_t)__p);
              sub_10038094C(a1, 0x62u, v203);
              sub_10003AFB4((uint64_t)__p);

              xpc_object_t v175 = v203;
            }
            else
            {
              v223[0] = @"AppState";
              xpc_object_t v212 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)v136 + 32)];
              v224[0] = v212;
              v223[1] = @"ConnectionIntervalInSlots";
              uint64_t v198 = +[NSNumber numberWithUnsignedShort:v123];
              v224[1] = v198;
              v223[2] = @"ConnectionSetupDurationInSec";
              uint64_t v176 = +[NSNumber numberWithDouble:v145];
              CFStringRef v177 = &stru_1009C1AC8;
              if (v206) {
                CFStringRef v177 = v206;
              }
              xpc_object_t v196 = (void *)v176;
              v224[2] = v176;
              v224[3] = v177;
              v223[3] = @"DeviceName";
              v223[4] = @"IsAppleDevice";
              int v208 = +[NSNumber numberWithBool:v207];
              v224[4] = v208;
              v223[5] = @"IsCentral";
              double v194 = +[NSNumber numberWithBool:v155 == 0];
              v224[5] = v194;
              v223[6] = @"MaxCE";
              uint64_t v225 = +[NSNumber numberWithUnsignedShort:v153];
              v223[7] = @"PeripheralLatency";
              unint64_t v192 = (void *)v225;
              uint64_t v190 = +[NSNumber numberWithUnsignedShort:v149];
              unsigned int v226 = v190;
              v223[8] = @"PID";
              xpc_object_t v204 = +[NSNumber numberWithUnsignedInt:v202];
              uint64_t v227 = v204;
              v223[9] = @"Result";
              uint64_t v178 = +[NSNumber numberWithInt:v136[13]];
              xpc_object_t v228 = v178;
              v223[10] = @"SessionID";
              unint64_t v179 = v136 + 2;
              if (*((char *)v136 + 31) < 0) {
                unint64_t v179 = (void *)*v179;
              }
              unint64_t v180 = +[NSString stringWithUTF8String:v179];
              xpc_object_t v229 = v180;
              v223[11] = @"SupervisionTimeout";
              double v181 = +[NSNumber numberWithUnsignedShort:v151];
              uint64_t v230 = v181;
              id v231 = v128;
              v223[12] = @"Tags";
              v223[13] = @"UseCase";
              unint64_t v232 = v209;
              v223[14] = @"VID";
              uint64_t v182 = +[NSNumber numberWithUnsignedShort:v201];
              unint64_t v233 = v182;
              v223[15] = @"VendorIDSource";
              unint64_t v183 = +[NSNumber numberWithUnsignedChar:v126];
              uint64_t v234 = v183;
              v223[16] = @"NumberOfPendingLEConnectionsForBundleID";
              unint64_t v184 = +[NSNumber numberWithUnsignedInt:v136[12]];
              unint64_t v235 = v184;
              v223[17] = @"ConnectionScanCompleteDurationInSec";
              int v185 = +[NSNumber numberWithDouble:v144];
              xpc_object_t v236 = v185;
              xpc_object_t v175 = +[NSDictionary dictionaryWithObjects:v224 forKeys:v223 count:18];

              if ((v199 & 0xFFFF0000) == 0x10000)
              {
                long long v186 = (id)qword_100A19E50;
                if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)__p = 138412802;
                  *(void *)&__p[4] = v209;
                  *(_WORD *)&unsigned char __p[12] = 2048;
                  *(double *)&__p[14] = v144;
                  __int16 v221 = 2048;
                  double v222 = v145;
                  _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "LE Connection Perf for %@ connection scan complete: %.3f (sec) connection set-up: %.3f (sec)", __p, 0x20u);
                }
              }
              sub_10038094C(a1, 0x60u, v175);
            }

            sub_10004BA28((uint64_t)&v218, v219[0]);
            return;
          }
        }
        else if (v137)
        {
          goto LABEL_81;
        }
        unint64_t v206 = @"NA";
        int v136 = v211;
        goto LABEL_91;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10075B700();
  }
}

void sub_10004FE70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,_Unwind_Exception *exception_object,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

void sub_10005045C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,char *a29)
{
  sub_10004BA28((uint64_t)&a28, a29);
  JUMPOUT(0x100050454);
}

uint64_t sub_100050494()
{
  if (qword_100A138A0 != -1) {
    dispatch_once(&qword_100A138A0, &stru_1009B4648);
  }
  return byte_100A138A8;
}

uint64_t sub_1000504D8()
{
  int v0 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 40);

  return v0();
}

uint64_t sub_100050530()
{
  if (qword_100A124F8 != -1) {
    dispatch_once(&qword_100A124F8, &stru_1009A9770);
  }
  return qword_100A124F0;
}

void sub_100050574()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  bzero(v23, 0x1788uLL);
  if (off_100A0B268)
  {
    if (sub_100058C58((unsigned __int8 *)v3, (uint64_t)v23, v4, v5)) {
      return;
    }
    if (v3 && *(_WORD *)(v3 + 8) && *(void *)(v3 + 16))
    {
      if (byte_100A0B278 == 1 && (v23[16] & 1) == 0) {
        return;
      }
LABEL_16:
      off_100A0B268(v23, v2);
      return;
    }
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Response is empty.", v14, v15, v16, v17, v18, v19, v20, *(uint64_t *)v22);
      BOOL v21 = sub_100050B4C(0x42u);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)uint64_t v22 = 136446210;
        *(void *)&v22[4] = sub_100050714();
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, " %{public}s", v22, 0xCu);
      }
    }
    if (byte_100A0B278 != 1) {
      goto LABEL_16;
    }
  }
  else if (sub_100058654())
  {
    sub_100056E24((uint64_t)"No callbacks defined.", v6, v7, v8, v9, v10, v11, v12, *(uint64_t *)v22);
    unsigned __int8 v13 = sub_100050B4C(0x42u);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      sub_100744F6C();
    }
  }
}

void *sub_100050714()
{
  return &unk_100A107C0;
}

uint64_t (*sub_100050720(uint64_t a1))(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t), uint64_t *a3)
{
  uint64_t v1 = sub_100193604;
  switch(*(unsigned char *)(a1 + 18))
  {
    case 0:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))v1;
    case 1:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100050BF8;
    case 2:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100193608;
    case 3:
      return sub_1001936F4;
    case 4:
      return sub_10019381C;
    case 5:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_10019394C;
    case 6:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100193AF0;
    case 7:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100193C4C;
    case 8:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100193E6C;
    case 9:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100193FEC;
    case 0xA:
      int v3 = sub_100022250(a1);
      if (v3 > 180)
      {
        if (v3 <= 243)
        {
          switch(v3)
          {
            case 181:
              return sub_1001958E0;
            case 182:
            case 185:
            case 186:
            case 187:
              return 0;
            case 183:
              return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100195A0C;
            case 184:
            case 188:
              return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100195AD4;
            default:
              if (v3 == 198)
              {
                uint64_t v2 = sub_100195B9C;
              }
              else
              {
                if (v3 != 230) {
                  return 0;
                }
                uint64_t v2 = sub_100195CF4;
              }
              break;
          }
          return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))v2;
        }
        if (v3 <= 258)
        {
          switch(v3)
          {
            case 244:
              return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100195F40;
            case 245:
              return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_10019638C;
            case 253:
              return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_1001960D8;
            case 254:
              return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_1001962A0;
            case 255:
              return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_1001961B4;
            default:
              return 0;
          }
        }
        switch(v3)
        {
          case 259:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100196534;
          case 263:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_1001969C0;
          case 272:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))nullsub_45;
        }
        return 0;
      }
      if (v3 > 119)
      {
        switch(v3)
        {
          case 143:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100194604;
          case 144:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_1001947C4;
          case 145:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100194928;
          case 146:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100194A38;
          case 147:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100194BAC;
          case 148:
          case 149:
          case 150:
          case 151:
          case 152:
          case 153:
          case 154:
          case 158:
          case 159:
          case 160:
          case 161:
          case 162:
            return 0;
          case 155:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100194D4C;
          case 156:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100195014;
          case 157:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100195190;
          case 163:
            return sub_1001956A8;
          case 164:
            return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_1001957D0;
          default:
            if (v3 == 120)
            {
              uint64_t v2 = sub_1001952CC;
            }
            else
            {
              if (v3 != 132) {
                return 0;
              }
              uint64_t v2 = sub_10019556C;
            }
            break;
        }
        return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))v2;
      }
      if (v3 <= 94)
      {
        if (v3 == 25) {
          return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100194E9C;
        }
        uint64_t v1 = (uint64_t (*)())sub_1001940EC;
        if (v3 == 65) {
          return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))v1;
        }
        if (v3 == 80) {
          return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_1001942F8;
        }
        return 0;
      }
      if (v3 > 113)
      {
        if (v3 == 114) {
          return sub_1001953AC;
        }
        if (v3 == 119) {
          return sub_10019549C;
        }
        return 0;
      }
      if (v3 == 95) {
        return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))nullsub_45;
      }
      if (v3 != 99) {
        return 0;
      }
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_1001943EC;
    case 0xB:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100193BE8;
    case 0xC:
      return (uint64_t (*)(uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t), uint64_t *))sub_100193CB0;
    default:
      sub_10025B8C0();
      return 0;
  }
}

uint64_t sub_100050B4C(unsigned int a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1000DFC04;
  block[3] = &unk_10099A668;
  char v5 = a1;
  if (qword_1009FD288 != -1) {
    dispatch_once(&qword_1009FD288, block);
  }
  if (a1 >= 0x5C) {
    int v2 = 92;
  }
  else {
    int v2 = a1;
  }
  return qword_1009FD290[v2];
}

uint64_t sub_100050BF8(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), uint64_t *a3)
{
  int v3 = a2;
  if (*((unsigned char *)a3 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c");
    int v3 = a2;
  }
  else
  {
    unsigned int v5 = *((unsigned __int16 *)a3 + 5);
    uint64_t v6 = *((unsigned __int16 *)a3 + 6);
    if (v5 != v6)
    {
      if (v5 > v6)
      {
        if (*((unsigned char *)a3 + 14) == 1)
        {
          uint64_t v9 = *a3;
          *((_WORD *)a3 + 6) = v6 + 1;
          uint64_t v7 = *(unsigned __int8 *)(v9 + v6);
          goto LABEL_7;
        }
        uint64_t v10 = "(*pBs).__RWFlag == BYTESTREAM_READ";
      }
      else
      {
        uint64_t v10 = "ByteStream_NumReadBytesAvail(*pBs) >= 1";
      }
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/hci/hcicmdapi.c", 135, v10);
    }
  }
  uint64_t v7 = 0;
  if (a1) {
    a1 = a1;
  }
  else {
    a1 = 605;
  }
LABEL_7:

  return v3(a1, v7);
}

void sub_100050CD4(uint64_t a1)
{
  *(void *)(a1 + 40) = &off_100998468;
  uint64_t v1 = *(atomic_uint **)(a1 + 48);
  if (v1) {
    sub_1000368F4(v1);
  }
}

void sub_100050D04(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100050D14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = &off_100998468;
  *(void *)(a1 + 48) = v3;
  if (v3) {
    sub_100037354(v3);
  }
}

uint64_t sub_100050D48(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100050D64(uint64_t a1, void *a2)
{
}

uint64_t sub_100050D70(uint64_t a1, uint64_t (***a2)(void, void))
{
  return (**a2)(a2, *(unsigned __int8 *)(a1 + 32));
}

void sub_100050DA0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint8x8_t v4 = v3;
      uint64_t v5 = a1[4];
      if (v5) {
        sub_1002EB2D4(v5, a1[6]);
      }
      sub_10008A294(v4);
    }
  }
}

void sub_100050E04(_Unwind_Exception *a1)
{
  sub_10008A294(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100050E18()
{
  return sub_100059C58();
}

uint64_t sub_100050E40()
{
  return sub_100059CE4();
}

void sub_100050E6C(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned __int8 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                              + 128))(v1, &v2))sub_1000077C4(v1, v2);
}

uint64_t sub_100050ED4(uint64_t a1)
{
  return (***(uint64_t (****)(void, void, void))(*(void *)(a1 + 32) + 72))(*(void *)(*(void *)(a1 + 32) + 72), *(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 48));
}

uint64_t sub_100050F08(uint64_t a1)
{
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009BF768);
  }
  unsigned __int8 v2 = off_1009F85C0;
  unint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(unsigned __int8 *)(a1 + 56);
  char v5 = *(unsigned char *)(a1 + 57);
  int v6 = *(unsigned __int8 *)(a1 + 58);

  return sub_10004603C((uint64_t)v2, v3, v4, a1 + 40, v5, v6);
}

uint64_t sub_100050F84(uint64_t a1)
{
  return sub_100055B50(*(void *)(a1 + 32), 0);
}

id sub_100050F90(uint64_t a1)
{
  unsigned __int16 v2 = (unsigned __int16)[*(id *)(a1 + 32) internalFlags];
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v3 = *(void **)(a1 + 40);
  if ((v2 & 0x800) != 0)
  {
    return [v3 deviceBuffered:v4];
  }
  else
  {
    return [v3 deviceFound:v4];
  }
}

void sub_100050FF0(uint64_t a1, void *a2, void *a3)
{
}

uint64_t sub_100051004(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009B7AE8);
  }
  sub_10005332C(qword_1009FB070, *(void *)(v1 + 128));
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
  }
  unsigned __int16 v2 = off_1009F8780;
  unint64_t v3 = *(void *)(v1 + 128);

  return sub_10002CE08((uint64_t)v2, v3, 0);
}

void sub_1000510A4(uint64_t a1)
{
  id v3 = [*(id *)(*(void *)(a1 + 32) + 40) objectForKeyedSubscript:*(void *)(a1 + 40)];
  if ([v3 isApp])
  {
    if (*(unsigned char *)(a1 + 56)) {
      unsigned __int8 v2 = [v3 supportsBackgroundedCentrals];
    }
    else {
      unsigned __int8 v2 = [v3 supportsBackgroundedPeripherals];
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = v2;
  }
}

void sub_100051124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100051138(uint64_t a1)
{
  unsigned __int8 v2 = *(void (****)(void, void **, void))(*(void *)(a1 + 32) + 8);
  sub_10004191C(__p, (char *)[*(id *)(a1 + 40) UTF8String]);
  (**v2)(v2, __p, *(unsigned __int8 *)(a1 + 48));
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000511D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_1000511EC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _triggerPendingExtension];
}

uint64_t sub_1000511F4(uint64_t a1, unint64_t a2)
{
  return sub_100052810((void *)(a1 - 8), a2);
}

uint64_t sub_100051200(uint64_t a1, uint64_t a2)
{
  return sub_100017A20((void *)(a1 - 8), a2);
}

uint64_t sub_100051214(uint64_t a1, uint64_t a2)
{
  return sub_1000537DC(a1 - 8, a2);
}

uint64_t sub_100051228(uint64_t a1, unint64_t a2)
{
  return sub_100017004((void *)(a1 - 8), a2);
}

uint64_t sub_100051234(uint64_t a1, uint64_t a2)
{
  return sub_10005429C(a1 - 8, a2);
}

void sub_100051240(uint64_t a1, unint64_t a2, uint64_t a3)
{
}

void sub_100051248(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100051250(uint64_t a1, const void **a2, char a3)
{
  return sub_100053ED4(a1 - 88, a2, a3);
}

uint64_t sub_100051258()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 1144);

  return v0();
}

void sub_1000512B8(uint64_t a1)
{
}

void sub_1000512C0(uint64_t a1, void *a2)
{
}

uint64_t sub_1000512D8(uint64_t a1, uint64_t a2)
{
  return sub_100053E60(a1 - 24, a2);
}

uint64_t sub_1000512E4(uint64_t a1, uint64_t a2)
{
  return sub_100017CB0((void *)(a1 - 24), a2);
}

uint64_t sub_1000512F0(uint64_t a1, int a2)
{
  return sub_10000FDC8(a1 - 16, a2);
}

void sub_1000512F8(uint64_t a1, BOOL a2)
{
}

uint64_t sub_100051300(uint64_t result, uint64_t a2, uint64_t a3)
{
  while (1)
  {
    if (result == a2) {
      return a2;
    }
    if (*(void *)result == a3) {
      break;
    }
    result += 32;
  }
  if (result != a2)
  {
    for (uint64_t i = result + 32; i != a2; i += 32)
    {
      if (*(void *)i != a3)
      {
        uint64_t v4 = *(void *)(i + 8);
        *(void *)id result = *(void *)i;
        *(void *)(result + 8) = v4;
        *(_DWORD *)(result + 16) = *(_DWORD *)(i + 16);
        *(void *)(result + 24) = *(void *)(i + 24);
        result += 32;
      }
    }
  }
  return result;
}

char *sub_100051368(void *a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  int v6 = (char *)a1[1];
  unint64_t v7 = a1[2];
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v10 = (char *)*a1;
    uint64_t v11 = (uint64_t)&v6[-*a1 + 1];
    if (v11 < 0) {
      abort();
    }
    uint64_t v12 = __src - v10;
    unint64_t v13 = v7 - (void)v10;
    if (2 * v13 > v11) {
      uint64_t v11 = 2 * v13;
    }
    if (v13 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v14 = v11;
    }
    if (v14) {
      uint64_t v15 = (char *)operator new(v14);
    }
    else {
      uint64_t v15 = 0;
    }
    uint64_t v16 = &v15[v12];
    uint64_t v17 = &v15[v14];
    if (v12 == v14)
    {
      if (v12 < 1)
      {
        if ((unint64_t)(2 * v12) <= 1) {
          size_t v19 = 1;
        }
        else {
          size_t v19 = 2 * v12;
        }
        uint64_t v20 = (char *)operator new(v19);
        uint64_t v16 = &v20[v19 >> 2];
        uint64_t v17 = &v20[v19];
        if (v15)
        {
          operator delete(v15);
          uint64_t v10 = (char *)*a1;
        }
      }
      else
      {
        if (v12 + 1 >= 0) {
          uint64_t v18 = v12 + 1;
        }
        else {
          uint64_t v18 = v12 + 2;
        }
        v16 -= v18 >> 1;
      }
    }
    char *v16 = *v3;
    BOOL v21 = v16;
    if (v10 != v4)
    {
      uint64_t v22 = v4;
      BOOL v21 = v16;
      do
      {
        char v23 = *--v22;
        *--BOOL v21 = v23;
      }
      while (v22 != v10);
    }
    int v24 = (unsigned char *)a1[1];
    uint64_t v25 = v24 - v4;
    if (v24 != v4) {
      memmove(v16 + 1, v4, v24 - v4);
    }
    uint64_t v26 = (char *)*a1;
    *a1 = v21;
    a1[1] = &v16[v25 + 1];
    a1[2] = v17;
    if (v26) {
      operator delete(v26);
    }
    return v16;
  }
  else if (__src == v6)
  {
    *char __src = *a3;
    a1[1] = __src + 1;
  }
  else
  {
    uint64_t v8 = __src + 1;
    if (v6)
    {
      *int v6 = *(v6 - 1);
      uint64_t v9 = v6 + 1;
    }
    else
    {
      uint64_t v9 = 0;
    }
    a1[1] = v9;
    if (v6 != v8) {
      memmove(__src + 1, __src, v6 - v8);
    }
    if (v4 <= v3 && a1[1] > (unint64_t)v3) {
      ++v3;
    }
    *uint64_t v4 = *v3;
  }
  return v4;
}

void sub_100051550(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100051568(void ***a1)
{
  unsigned __int8 v2 = *a1;
  if (*v2)
  {
    sub_10007AB48((uint64_t *)v2);
    id v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_1000515BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = a2;
    if (a3 != v3)
    {
      uint64_t v5 = 32 * ((a3 - a2) >> 5);
      uint64_t v4 = a2;
      do
      {
        *(_OWORD *)uint64_t v4 = *(_OWORD *)(v4 + v5);
        *(_DWORD *)(v4 + 16) = *(_DWORD *)(v4 + v5 + 16);
        *(void *)(v4 + 24) = *(void *)(v4 + v5 + 24);
        v4 += 32;
      }
      while (v4 + v5 != v3);
    }
    *(void *)(a1 + 8) = v4;
  }
  return a2;
}

uint64_t *sub_100051620(uint64_t **a1, unint64_t *a2, uint64_t *a3)
{
  int v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    unint64_t v7 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v8 = (uint64_t **)v5;
        unint64_t v9 = v5[4];
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        int v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        int v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v8 = a1 + 1;
LABEL_10:
    uint64_t v10 = (uint64_t *)operator new(0x28uLL);
    _OWORD v10[4] = *a3;
    sub_100036CA0(a1, (uint64_t)v8, v6, v10);
    return v10;
  }
  return (uint64_t *)v8;
}

uint64_t **sub_1000516DC(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        unint64_t v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        unint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        unint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    unint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x38uLL);
    v11[8] = **a4;
    v11[10] = 0;
    *((void *)v11 + 6) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t sub_1000517A4(uint64_t a1, unint64_t *a2)
{
  unsigned __int8 v2 = *(void **)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint64_t v4 = (uint64_t *)(a1 + 8);
  do
  {
    unint64_t v5 = v2[4];
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      unint64_t v7 = v2;
    }
    else {
      unint64_t v7 = v2 + 1;
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    unsigned __int8 v2 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (uint64_t *)(a1 + 8) || v3 < v4[4]) {
    return 0;
  }
  sub_10004D3B8((uint64_t **)a1, v4);
  operator delete(v4);
  return 1;
}

uint64_t *sub_100051820(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  BOOL v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v9, a2);
  id result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100006A10((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

void sub_1000518C4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000518C4(a1, *a2);
    sub_1000518C4(a1, a2[1]);
    sub_100616BE4((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

unsigned char *sub_100051920@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  BOOL v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  id result = v6 + 4;
  int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    id result = sub_10003B098(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)id result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1000519A8(_Unwind_Exception *a1)
{
  sub_100051C6C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1000519C0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000519C0(a1, *a2);
    sub_1000519C0(a1, a2[1]);

    operator delete(a2);
  }
}

uint64_t *sub_100051A1C(uint64_t **a1, unsigned __int8 *uu1, uint64_t a3, const unsigned __int8 **a4)
{
  uint64_t v11 = 0;
  BOOL v6 = (uint64_t **)sub_10004A0BC((uint64_t)a1, &v11, uu1);
  unint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1006F6530((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, v10[0]);
    unint64_t v7 = v10[0];
    v10[0] = 0;
    sub_1006F666C((uint64_t)v10, 0);
  }
  return v7;
}

void sub_100051AD4(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100051AD4(a1, *a2);
    sub_100051AD4(a1, a2[1]);
    sub_1000486F0((uint64_t)(a2 + 6), (void *)a2[7]);
    operator delete(a2);
  }
}

uint64_t *sub_100051B34(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100051B8C(a1, *(unsigned __int8 **)a2, (unsigned __int8 *)(a2 + 8));
  return a1;
}

void sub_100051B74(_Unwind_Exception *a1)
{
  sub_10004BA8C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100051B8C(uint64_t *result, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    BOOL v6 = result + 1;
    do
    {
      id result = sub_1000A96F0(v5, v6, v4 + 32, (uint64_t)(v4 + 32));
      unint64_t v7 = (unsigned __int8 *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          int v8 = v7;
          unint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (unsigned __int8 *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

void sub_100051C18(uint64_t a1)
{
  sub_1000486F0(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    unsigned __int8 v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100051C6C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100051C18((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

int8x16_t *sub_100051CC4@<X0>(uint64_t a1@<X0>, unsigned int a2@<W1>, char a3@<W2>, int8x16_t **a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  id result = (int8x16_t *)operator new(0x108uLL);
  unint64_t v9 = 0;
  *a4 = result;
  *(_OWORD *)(a4 + 1) = xmmword_1007C01F0;
  int8x16_t v10 = vdupq_n_s8(a2);
  int8x16_t *result = v10;
  result[1] = v10;
  result[2] = v10;
  result[3] = v10;
  result[4] = v10;
  result[5] = v10;
  result[6] = v10;
  result[7] = v10;
  result[8] = v10;
  result[9] = v10;
  result[10] = v10;
  result[11] = v10;
  result[12] = v10;
  result[13] = v10;
  result[14] = v10;
  result[15] = v10;
  uint64_t v11 = 255;
  result[16].i8[0] = 0;
  do
  {
    if ((*(void *)(a1 + ((v9 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v9))
    {
      if (*((char *)a4 + 23) >= 0) {
        uint64_t v12 = (uint64_t *)a4;
      }
      else {
        uint64_t v12 = (uint64_t *)*a4;
      }
      *((unsigned char *)v12 + v11) = a3;
    }
    ++v9;
    --v11;
  }
  while (v9 != 256);
  return result;
}

uint64_t sub_100051D80(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D3920;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12700 != -1) {
    dispatch_once(&qword_100A12700, block);
  }
  return byte_100A126F8;
}

uint64_t sub_100051E10(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D3B20;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12710 != -1) {
    dispatch_once(&qword_100A12710, block);
  }
  return byte_100A12708;
}

uint64_t sub_100051EA0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D3D20;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12720 != -1) {
    dispatch_once(&qword_100A12720, block);
  }
  return byte_100A12718;
}

BOOL sub_100051F30(uint64_t a1)
{
  return (*(unsigned int (**)(uint64_t))(*(void *)a1 + 888))(a1) == 3;
}

uint64_t sub_100051F78(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003DB644;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12940 != -1) {
    dispatch_once(&qword_100A12940, block);
  }
  return byte_100A12938;
}

uint64_t sub_100052008()
{
  if (qword_100A127C0 != -1) {
    dispatch_once(&qword_100A127C0, &stru_1009ABD68);
  }
  return byte_100A127B8;
}

uint64_t sub_10005204C()
{
  if (qword_100A127E8 != -1) {
    dispatch_once(&qword_100A127E8, &stru_1009ABD88);
  }
  return byte_100A127E0;
}

uint64_t sub_100052090(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D550C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12790 != -1) {
    dispatch_once(&qword_100A12790, block);
  }
  return byte_100A12788;
}

uint64_t sub_100052120(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003DC100;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12970 != -1) {
    dispatch_once(&qword_100A12970, block);
  }
  return dword_100A12968;
}

void sub_1000521B0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100052284()
{
}

size_t sub_1000522C0(uint64_t a1, void *__dst, uint64_t a3, size_t __n)
{
  uint64_t v5 = *(void *)(a1 + 8);
  if (v5) {
    size_t v6 = *(void *)(v5 + 16);
  }
  else {
    size_t v6 = 0;
  }
  if (__n + a3 > v6)
  {
    uint64_t v9 = sub_100017768();
    sub_1005C99DC(v9, 1);
    _os_log_pack_size();
    __chkstk_darwin();
    __error();
    uint64_t v10 = _os_log_pack_fill();
    *(_DWORD *)uint64_t v10 = 136446210;
    *(void *)(v10 + 4) = "(offset + length) <= getSize()";
    os_log_create("com.apple.bluetooth", "CBCrash");
    qword_1009FC078 = os_log_pack_send_and_compose();
    abort_with_payload();
  }
  if (v5) {
    uint64_t v7 = v5 + 24;
  }
  else {
    uint64_t v7 = 0;
  }
  memcpy(__dst, (const void *)(v7 + a3), __n);
  return __n;
}

void sub_100052430(uint64_t a1, void *__dst, size_t a3)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (!v3)
  {
    size_t v6 = 0;
    size_t v5 = 0;
    goto LABEL_5;
  }
  size_t v5 = *(void *)(v3 + 16);
  if (v5 <= a3)
  {
    size_t v6 = (const void *)(v3 + 24);
LABEL_5:
    memcpy(__dst, v6, v5);
    return;
  }
  uint64_t v7 = sub_100017768();
  sub_1005C99DC(v7, 1);
  _os_log_pack_size();
  __chkstk_darwin();
  __error();
  uint64_t v8 = _os_log_pack_fill();
  *(_DWORD *)uint64_t v8 = 136446210;
  *(void *)(v8 + 4) = "dstSize >= getSize()";
  os_log_create("com.apple.bluetooth", "CBCrash");
  qword_1009FC078 = os_log_pack_send_and_compose();
  uint64_t v9 = abort_with_payload();
  sub_1000525A4(v9, v10);
}

void sub_1000525A4(uint64_t a1, int a2)
{
  unsigned __int8 v2 = *(NSObject **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  v3[2] = sub_100009E58;
  v3[3] = &unk_100997570;
  v3[4] = a1;
  int v4 = a2;
  dispatch_async(v2, v3);
}

void sub_10005261C(os_unfair_lock_s *a1, xpc_object_t object, const char *a3)
{
  xpc_type_t type = xpc_get_type(object);
  if (type == (xpc_type_t)&_xpc_type_connection)
  {
    sub_100007A18(a1, (_xpc_connection_s *)object, a3);
  }
  else if (type == (xpc_type_t)&_xpc_type_error)
  {
    string = xpc_dictionary_get_string(object, _xpc_error_key_description);
    uint64_t v9 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_100786830((uint64_t)a3, (uint64_t)string, v9);
    }
  }
  else
  {
    uint64_t v7 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_1007868A8((uint64_t)a3, (uint64_t)object, v7);
    }
  }
}

void sub_100052718(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  size_t v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        size_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 != v4)
  {
    int64_t v6 = v4 - (v5 + 8);
    if (v4 != v5 + 8) {
      memmove(v5, v5 + 8, v4 - (v5 + 8));
    }
    *(void *)(a1 + 16) = &v5[v6];
    sub_100061554(a1 + 8);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1000527B8(uint64_t a1, char a2)
{
  char v5 = a2;
  id result = sub_100051368((void *)(a1 + 584), *(char **)(a1 + 584), &v5);
  uint64_t v4 = *(void *)(a1 + 592);
  if ((unint64_t)(v4 - *(void *)(a1 + 584)) >= 6) {
    *(void *)(a1 + 592) = v4 - 1;
  }
  return result;
}

uint64_t sub_100052810(void *a1, unint64_t a2)
{
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009B3290);
  }
  uint64_t v3 = sub_100019C0C((void *)qword_1009F8160, a2);
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4))
  {
    char v5 = qword_100A19E68;
    if (os_log_type_enabled((os_log_t)qword_100A19E68, OS_LOG_TYPE_DEFAULT))
    {
      if (v3)
      {
        sub_10003AE4C(v3, (uint64_t)__p);
        if (v19 >= 0) {
          int64_t v6 = __p;
        }
        else {
          int64_t v6 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136315394;
        BOOL v21 = "sessionDetached";
        __int16 v22 = 2082;
        char v23 = (const char *)v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s - session %{public}s is detaching", buf, 0x16u);
        if (v19 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        *(_DWORD *)buf = 136315394;
        BOOL v21 = "sessionDetached";
        __int16 v22 = 2082;
        char v23 = "(NULL)";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s - session %{public}s is detaching", buf, 0x16u);
      }
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  sub_10003AED0((uint64_t)__p, (uint64_t)(a1 + 24));
  uint64_t v7 = (uint64_t *)a1[32];
  if (v7 != a1 + 33)
  {
    uint64_t v8 = (uint64_t **)(a1 + 32);
    do
    {
      unint64_t v9 = v7[4];
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B3290);
      }
      if (sub_1000181D0(qword_1009F8160, v9) == a2)
      {
        uint64_t v13 = v7[5];
        size_t v14 = (std::__shared_weak_count *)v7[6];
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_100509158(v8, v7);
        uint64_t v11 = *v8;
        v17[0] = v13;
        v17[1] = (uint64_t)v14;
        if (v14) {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_10050542C(a1, v17);
        if (v14) {
          sub_10008A294(v14);
        }
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009B3290);
        }
        sub_1005536D8(qword_1009F8160, v9);
        if (v14) {
          sub_10008A294(v14);
        }
      }
      else
      {
        int v10 = (uint64_t *)v7[1];
        if (v10)
        {
          do
          {
            uint64_t v11 = v10;
            int v10 = (uint64_t *)*v10;
          }
          while (v10);
        }
        else
        {
          do
          {
            uint64_t v11 = (uint64_t *)v7[2];
            BOOL v12 = *v11 == (void)v7;
            uint64_t v7 = v11;
          }
          while (!v12);
        }
      }
      uint64_t v7 = v11;
    }
    while (v11 != a1 + 33);
  }
  return sub_10003AFB4((uint64_t)__p);
}

void sub_100052B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
}

uint64_t sub_100052B5C(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1);
  sub_10003AFB4((uint64_t)v3);
  sub_1000486F0(a1 + 104, *(void **)(a1 + 112));
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  return sub_100052DA4(a1);
}

void sub_100052BC0(_Unwind_Exception *a1)
{
  sub_1000486F0(v1 + 104, *(void **)(v1 + 112));
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  sub_100052DA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100052BF4(uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = sub_100052DA8(a1);
  *(void *)(v6 + 64) = 0;
  *(unsigned char *)(v6 + 72) = 0;
  uint64_t v7 = v6 + 80;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098((unsigned char *)v7, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 140) = a3;
  return a1;
}

void sub_100052C74(_Unwind_Exception *a1)
{
  sub_100052DA4(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100052C8C(uint64_t a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, a1);
  *(unsigned char *)(a1 + 72) = 1;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 137) = 0;
  return sub_10003AFB4((uint64_t)v3);
}

uint64_t sub_100052CDC(uint64_t a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_10003AED0((uint64_t)v5, a1);
  *(void *)(a1 + 64) = a2;
  sub_10003AFE8((uint64_t)v5);
  return sub_10003AFB4((uint64_t)v5);
}

void sub_100052D2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

pthread_mutex_t *sub_100052D40(pthread_mutex_t *a1)
{
  if (pthread_mutex_destroy(a1) && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
    sub_100751298();
  }
  return a1;
}

uint64_t sub_100052DAC(uint64_t a1, long long *a2, char a3)
{
  *(_DWORD *)a1 = 1;
  uint64_t v5 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098((unsigned char *)v5, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(unsigned char *)(a1 + 32) = a3;
  return a1;
}

uint64_t sub_100052E08(uint64_t a1, long long *a2, char a3, char a4)
{
  *(_DWORD *)a1 = 0;
  uint64_t v7 = a1 + 8;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098((unsigned char *)v7, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v7 = v8;
  }
  *(unsigned char *)(a1 + 32) = a3;
  *(unsigned char *)(a1 + 33) = a4;
  return a1;
}

uint64_t sub_100052E70()
{
  if (qword_100A12538 != -1) {
    dispatch_once(&qword_100A12538, &stru_1009A97F0);
  }
  return qword_100A12530;
}

uint64_t sub_100052EB4()
{
  if (qword_100A12548 != -1) {
    dispatch_once(&qword_100A12548, &stru_1009A9810);
  }
  return qword_100A12540;
}

BOOL sub_100052EFC(uint64_t a1, unint64_t a2, const unsigned __int8 *a3)
{
  v13[0] = 0;
  v13[1] = 0;
  sub_10003AED0((uint64_t)v13, a1 + 120);
  long long v6 = *(void **)(a1 + 696);
  if (!v6) {
    goto LABEL_12;
  }
  uint64_t v7 = (const unsigned __int8 *)(a1 + 696);
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      int v10 = v6;
    }
    else {
      int v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (const unsigned __int8 *)v6;
    }
    long long v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == (const unsigned __int8 *)(a1 + 696) || *((void *)v7 + 4) > a2) {
LABEL_12:
  }
    uint64_t v7 = (const unsigned __int8 *)(a1 + 696);
  BOOL v11 = uuid_compare(v7 + 40, a3) == 0;
  sub_10003AFB4((uint64_t)v13);
  return v11;
}

void sub_100052FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

double sub_100052FBC(uint64_t a1)
{
  *(_DWORD *)(a1 + 8) = 1;
  *(void *)a1 = &off_1009BCEC0;
  *(_WORD *)(a1 + 12) = 0;
  *(unsigned char *)(a1 + 14) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = &off_100998428;
  *(void *)(a1 + 120) = 0;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = &off_100998428;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = &off_100998428;
  *(_WORD *)(a1 + 222) = 0;
  *(void *)(a1 + 192) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 213) = 0;
  *(void *)(a1 + 224) = &off_100998428;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 272) = &off_100998428;
  *(void *)(a1 + 280) = 0;
  *(void *)(a1 + 288) = &off_100998428;
  *(void *)(a1 + 296) = 0;
  *(_WORD *)(a1 + 304) = 0;
  *(_WORD *)(a1 + 307) = 0;
  *(_DWORD *)(a1 + 312) = 0;
  *(unsigned char *)(a1 + 316) = 0;
  *(void *)(a1 + 320) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = 0;
  *(_DWORD *)(a1 + 344) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 367) = 0;
  *(void *)(a1 + 416) = a1 + 424;
  *(void *)&double result = 0xFF00000000;
  *(void *)(a1 + 440) = 0xFF00000000;
  *(void *)(a1 + 448) = &off_100998428;
  *(void *)(a1 + 456) = 0;
  *(unsigned char *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 468) = 0;
  return result;
}

void sub_10005315C(uint64_t a1, int a2)
{
  if (qword_100A14528 != -1) {
    dispatch_once(&qword_100A14528, &stru_1009BCED0);
  }
  if (a2 == 27 || a2 == 127)
  {
    *(_WORD *)(a1 + 216) = 383;
  }
  else
  {
    char v4 = a2 - 126;
    if (a2 <= 20) {
      char v4 = a2;
    }
    *(unsigned char *)(a1 + 216) = v4;
    *(unsigned char *)(a1 + 217) = a2 > 20;
    int v5 = dword_100A14520;
    if (dword_100A14520)
    {
      int v6 = v4;
      int v7 = dword_100A14520 + v4;
      if (v7 < 21)
      {
        if (v7 <= -128)
        {
          BOOL v9 = qword_100A19F20;
          if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = 67109888;
            int v11 = a2;
            __int16 v12 = 1024;
            int v13 = v6;
            __int16 v14 = 1024;
            int v15 = v5;
            __int16 v16 = 1024;
            int v17 = -127;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: RSSI original: %d converted: %d offset: %d adjusted to %d", (uint8_t *)&v10, 0x1Au);
          }
          LOBYTE(v7) = -127;
        }
      }
      else
      {
        unint64_t v8 = qword_100A19F20;
        if (os_log_type_enabled((os_log_t)qword_100A19F20, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = 67109888;
          int v11 = a2;
          __int16 v12 = 1024;
          int v13 = v6;
          __int16 v14 = 1024;
          int v15 = v5;
          __int16 v16 = 1024;
          int v17 = 20;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: RSSI original: %d converted: %d offset: %d adjusted to %d", (uint8_t *)&v10, 0x1Au);
        }
        LOBYTE(v7) = 20;
      }
      *(unsigned char *)(a1 + 216) = v7;
    }
  }
}

void sub_10005332C(uint64_t a1, unint64_t a2)
{
  if (!a2 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763BBC();
  }
  char v4 = *(void **)(a1 + 24);
  if (v4)
  {
    int v5 = (uint64_t *)(a1 + 24);
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = v4;
      }
      else {
        unint64_t v8 = v4 + 1;
      }
      if (v7) {
        int v5 = v4;
      }
      char v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 != (uint64_t *)(a1 + 24) && v5[4] <= a2)
    {
      uint64_t v9 = v5[5];
      *(unsigned char *)(v9 + 32) = 1;
      int v10 = *(uint64_t **)(v9 + 8);
      if (*(uint64_t **)(v9 + 16) == v10)
      {
LABEL_60:
        sub_10004D3B8((uint64_t **)(a1 + 16), v5);
        operator delete(v5);
        sub_100406E90(v9);
        operator delete();
      }
      while (1)
      {
        uint64_t v11 = *v10;
        if (*(unsigned char *)(*v10 + 4))
        {
          uint64_t v13 = *(void *)(v11 + 120);
          uint64_t v12 = *(void *)(v11 + 128);
          if (v13 == v12) {
            goto LABEL_34;
          }
          do
          {
            if (*(unsigned char *)(v13 + 18) == 1)
            {
              sub_100402710(a1, a2, *(unsigned __int16 *)(v11 + 2), (unsigned __int8 *)(v13 + 2));
              uint64_t v12 = *(void *)(v11 + 128);
            }
            v13 += 26;
          }
          while (v13 != v12);
          if (v12 == *(void *)(v11 + 120))
          {
LABEL_34:
            int v24 = *(uint64_t **)(v9 + 16);
            uint64_t v25 = (char *)v24 - (char *)(v10 + 1);
            if (v24 != v10 + 1) {
              memmove(v10, v10 + 1, (char *)v24 - (char *)(v10 + 1));
            }
            *(void *)(v9 + 16) = (char *)v10 + v25;
            uint64_t v26 = *(void **)(v11 + 120);
            if (v26)
            {
              *(void *)(v11 + 128) = v26;
              operator delete(v26);
            }
            operator delete();
          }
          int v15 = *(void **)(a1 + 96);
          unint64_t v14 = *(void *)(a1 + 104);
          if ((unint64_t)v15 >= v14)
          {
            uint64_t v16 = *(void *)(a1 + 88);
            uint64_t v17 = ((uint64_t)v15 - v16) >> 3;
            if ((unint64_t)(v17 + 1) >> 61) {
              goto LABEL_62;
            }
            uint64_t v18 = v14 - v16;
            uint64_t v19 = v18 >> 2;
            if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
              uint64_t v19 = v17 + 1;
            }
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v19;
            }
            if (v20) {
              BOOL v21 = (char *)sub_1000405F8(a1 + 104, v20);
            }
            else {
              BOOL v21 = 0;
            }
            long long v31 = &v21[8 * v17];
            *(void *)long long v31 = v11;
            char v23 = v31 + 8;
            uint64_t v33 = *(char **)(a1 + 88);
            long long v32 = *(char **)(a1 + 96);
            if (v32 != v33)
            {
              do
              {
                uint64_t v34 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v31 - 1) = v34;
                v31 -= 8;
              }
              while (v32 != v33);
              goto LABEL_54;
            }
            goto LABEL_55;
          }
        }
        else
        {
          if (sub_100400D6C(a1, *v10) != 10) {
            goto LABEL_34;
          }
          int v15 = *(void **)(a1 + 96);
          unint64_t v22 = *(void *)(a1 + 104);
          if ((unint64_t)v15 >= v22)
          {
            uint64_t v27 = *(void *)(a1 + 88);
            uint64_t v28 = ((uint64_t)v15 - v27) >> 3;
            if ((unint64_t)(v28 + 1) >> 61) {
LABEL_62:
            }
              abort();
            uint64_t v29 = v22 - v27;
            uint64_t v30 = v29 >> 2;
            if (v29 >> 2 <= (unint64_t)(v28 + 1)) {
              uint64_t v30 = v28 + 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v20 = v30;
            }
            if (v20) {
              BOOL v21 = (char *)sub_1000405F8(a1 + 104, v20);
            }
            else {
              BOOL v21 = 0;
            }
            long long v31 = &v21[8 * v28];
            *(void *)long long v31 = v11;
            char v23 = v31 + 8;
            uint64_t v35 = *(char **)(a1 + 88);
            long long v32 = *(char **)(a1 + 96);
            if (v32 != v35)
            {
              do
              {
                uint64_t v36 = *((void *)v32 - 1);
                v32 -= 8;
                *((void *)v31 - 1) = v36;
                v31 -= 8;
              }
              while (v32 != v35);
LABEL_54:
              long long v32 = *(char **)(a1 + 88);
            }
LABEL_55:
            *(void *)(a1 + 88) = v31;
            *(void *)(a1 + 96) = v23;
            *(void *)(a1 + 104) = &v21[8 * v20];
            if (v32) {
              operator delete(v32);
            }
            goto LABEL_57;
          }
        }
        void *v15 = v11;
        char v23 = v15 + 1;
LABEL_57:
        *(void *)(a1 + 96) = v23;
        uint64_t v37 = *(uint64_t **)(v9 + 16);
        uint64_t v38 = (char *)v37 - (char *)(v10 + 1);
        if (v37 != v10 + 1) {
          memmove(v10, v10 + 1, (char *)v37 - (char *)(v10 + 1));
        }
        *(void *)(v9 + 16) = (char *)v10 + v38;
        if (v10 == (uint64_t *)((char *)v10 + v38)) {
          goto LABEL_60;
        }
      }
    }
  }
}

BOOL sub_100053640(uint64_t a1)
{
  return *(_WORD *)(a1 + 160) == 2
      && (*(_WORD *)(a1 + 166) & 1) != 0
      && *(_DWORD *)(a1 + 456) == 1
      && *(unsigned char *)(a1 + 452) != 0;
}

void sub_100053678(uint64_t a1)
{
  sub_100011BD8(a1);

  operator delete();
}

uint64_t sub_1000536B4(uint64_t a1)
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return *(void *)(a1 + 496) != 0;
  }
  return result;
}

id sub_1000536F8(uint64_t a1, unsigned int a2)
{
  *(unsigned char *)(a1 + 129) = a2;
  id result = *(id *)(a1 + 400);
  if (result) {
    return sub_10036D72C((uint64_t)result, (a2 >> 4) & 1);
  }
  return result;
}

uint64_t sub_100053710(uint64_t result, int a2)
{
  *(_DWORD *)id result = a2;
  *(void *)(result + 16) = 0;
  *(void *)(result + 24) = 0;
  *(void *)(result + 8) = 0;
  return result;
}

void sub_100053720(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[112];
  uint64_t v3 = (std::__shared_weak_count *)a1[113];
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  char v4 = a1[32];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_100050DA0;
  block[3] = &unk_1009B5C08;
  void block[4] = v2;
  unint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2;
  dispatch_async(v4, block);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_1000537DC(uint64_t a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 88);
  unint64_t v6 = *(uint64_t **)(a1 + 224);
  char v4 = (uint64_t **)(a1 + 224);
  int v5 = v6;
  if (v6 != (uint64_t *)(v4 + 1))
  {
    do
    {
      unint64_t v7 = v5[4];
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009BEBE0);
      }
      uint64_t v8 = sub_1000181D0(qword_1009F8160, v7);
      uint64_t v9 = (uint64_t *)v5[1];
      if (v8 == a2)
      {
        uint64_t v12 = v5;
        if (v9)
        {
          do
          {
            int v10 = (uint64_t **)v9;
            uint64_t v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            int v10 = (uint64_t **)v12[2];
            BOOL v11 = *v10 == v12;
            uint64_t v12 = (uint64_t *)v10;
          }
          while (!v11);
        }
        sub_10004D3B8(v4, v5);
        operator delete(v5);
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009BEBE0);
        }
        sub_1005536D8(qword_1009F8160, v7);
      }
      else if (v9)
      {
        do
        {
          int v10 = (uint64_t **)v9;
          uint64_t v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (uint64_t **)v5[2];
          BOOL v11 = *v10 == v5;
          int v5 = (uint64_t *)v10;
        }
        while (!v11);
      }
      int v5 = (uint64_t *)v10;
    }
    while (v10 != v4 + 1);
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_100053944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10005395C()
{
  return 0;
}

BOOL sub_100053964(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 22) < 4;
}

BOOL sub_100053978(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1200)) {
    return *(unsigned char *)(a1 + 1201) != 0;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 712);
  BOOL v4 = v3 - 1 > 0x7CE || v3 > 0x13;
  int v5 = (1 << v3) & 0x83000;
  BOOL v6 = v4 || v5 == 0;
  if (v6 || (uint64_t v7 = sub_100035F54(), !(*(unsigned int (**)(uint64_t))(*(void *)v7 + 360))(v7)))
  {
    BOOL result = 0;
    *(unsigned char *)(a1 + 1201) = 0;
  }
  else
  {
    BOOL result = 1;
    *(unsigned char *)(a1 + 1201) = 1;
  }
  return result;
}

uint64_t sub_100053A20()
{
  return 0;
}

BOOL sub_100053A28()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 1) < 0x12;
}

uint64_t sub_100053A50(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x102u);
}

uint64_t sub_100053AB0(uint64_t a1, char a2, char a3, int a4)
{
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100050E18;
  v5[3] = &unk_1009A69D8;
  char v6 = a2;
  char v7 = a3;
  char v8 = a4;
  return sub_10001A7D4(a1, 258, a4, v5, 0);
}

uint64_t sub_100053B34(uint64_t a1, char a2)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10032CAF8;
  v3[3] = &unk_1009A6618;
  char v4 = a2;
  return sub_10001A7D4(a1, 24, 1, v3, 0);
}

uint64_t sub_100053BAC(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A6E78);
  }

  return sub_100026140(a1, 0x101u);
}

uint64_t sub_100053C0C(uint64_t a1, char a2, char a3, char a4, int a5)
{
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100050E40;
  v6[3] = &unk_1009A6878;
  char v7 = a2;
  char v8 = a3;
  char v9 = a4;
  char v10 = a5;
  return sub_10001A7D4(a1, 257, a5, v6, 0);
}

BOOL sub_100053C90(unsigned char *a1)
{
  return !a1[197] && !a1[198] && !a1[199] && a1[204] == 0;
}

uint64_t sub_100053CC0(uint64_t a1, unsigned __int16 a2, unsigned __int8 a3)
{
  if ((*(_WORD *)(a1 + 378) & a2 & 0x7FLL) != 0 && *(unsigned char *)(a1 + 272) && *(_DWORD *)(a1 + 276) == 1)
  {
    uint64_t v3 = 4;
  }
  else if (*(unsigned char *)(a1 + 280) && *(unsigned char *)(a1 + 272))
  {
    if (((*(_DWORD *)(a1 + 276) == 1) & a3) != 0) {
      uint64_t v3 = 4;
    }
    else {
      uint64_t v3 = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  if (*(unsigned char *)(a1 + 197) || *(unsigned char *)(a1 + 198) || *(unsigned char *)(a1 + 200)) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 204);
  }
  if (*(unsigned char *)(a1 + 272)) {
    uint64_t v5 = 2 * (*(_DWORD *)(a1 + 276) == 1);
  }
  else {
    uint64_t v5 = 0;
  }
  BOOL v6 = sub_100053DA0(a1);
  uint64_t v7 = 8;
  if (!v6) {
    uint64_t v7 = 0;
  }
  return v4 | v3 | v5 | v7;
}

BOOL sub_100053DA0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 197) && !*(unsigned char *)(a1 + 198)) {
    return 0;
  }
  if (qword_1009F8130 != -1) {
    dispatch_once(&qword_1009F8130, &stru_1009B2E50);
  }
  uint64_t v1 = qword_1009F8128;

  return sub_1002D008C(v1);
}

uint64_t sub_100053E10(uint64_t a1, unsigned char *a2)
{
  uint64_t state64 = 0;
  uint64_t result = notify_get_state(*(_DWORD *)(a1 + 1356), &state64);
  if (result) {
    return 1;
  }
  *a2 = state64 & 1;
  return result;
}

uint64_t sub_100053E60(uint64_t a1, uint64_t a2)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 320);
  uint64_t v4 = sub_100051300(*(void *)(a1 + 384), *(void *)(a1 + 392), a2);
  sub_1000515BC(a1 + 384, v4, *(void *)(a1 + 392));
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100053EC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100053ED4(uint64_t a1, const void **a2, char a3)
{
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 8);
  uint64_t v6 = sub_10003156C(a1 + 96, a2);
  if (a1 + 104 != v6)
  {
    if (*(void *)(a1 + 72))
    {
      uint64_t v7 = *(void **)(v6 + 56);
      char v8 = (void *)(v6 + 64);
      if (v7 != (void *)(v6 + 64))
      {
        do
        {
          uint64_t v9 = v7[4];
          uint64_t v10 = sub_100019878();
          v15[0] = _NSConcreteStackBlock;
          v15[1] = 3221225472;
          void v15[2] = sub_100050ED4;
          v15[3] = &unk_1009A0160;
          v15[4] = a1;
          v15[5] = v9;
          char v16 = a3;
          sub_100013018(v10, v15);
          BOOL v11 = (void *)v7[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              BOOL v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (void *)v7[2];
              BOOL v13 = *v12 == (void)v7;
              uint64_t v7 = v12;
            }
            while (!v13);
          }
          uint64_t v7 = v12;
        }
        while (v12 != v8);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_100054000(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100054018(uint64_t a1, unint64_t a2, int a3)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 56);
  uint64_t v6 = *(void **)(a1 + 16832);
  if (v6)
  {
    uint64_t v7 = a1 + 16832;
    do
    {
      unint64_t v8 = v6[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = v6;
      }
      else {
        uint64_t v10 = v6 + 1;
      }
      if (v9) {
        uint64_t v7 = (uint64_t)v6;
      }
      uint64_t v6 = (void *)*v10;
    }
    while (*v10);
    if (v7 != a1 + 16832 && *(void *)(v7 + 32) <= a2 && *(unsigned char *)(a1 + 41))
    {
      if (qword_1009F8788 != -1) {
        dispatch_once(&qword_1009F8788, &stru_1009BD1C0);
      }
      BOOL v11 = sub_1002F4750((uint64_t)off_1009F8780, a2);
      BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19F28, OS_LOG_TYPE_DEBUG);
      if (v11)
      {
        if (v12)
        {
          sub_10003AE4C(a2, (uint64_t)v17);
          sub_10078CC70();
        }
        uint64_t v15 = *(void *)(v7 + 48);
        sub_100037354(v15);
        *(unsigned char *)(v15 + 336) |= a3 == 16;
        if (a3 == 8 || a3 == 4) {
          sub_10065CE4C(a1, a2);
        }
        else {
          sub_10065D380((void *)a1, a2);
        }
        if (v15) {
          sub_1000368F4((atomic_uint *)v15);
        }
      }
      else
      {
        if (v12)
        {
          sub_10003AE4C(a2, (uint64_t)v17);
          sub_10078CCDC();
        }
        uint64_t v13 = *(void *)(a1 + 48);
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        _DWORD v16[2] = sub_1006639A8;
        v16[3] = &unk_100997528;
        _OWORD v16[4] = a1;
        sub_100013018(v13, v16);
      }
    }
  }
  return sub_10003AFB4((uint64_t)v18);
}

void sub_10005425C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10005429C(uint64_t a1, uint64_t a2)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 48);
  uint64_t v6 = *(uint64_t **)(a1 + 112);
  uint64_t v4 = (uint64_t **)(a1 + 112);
  uint64_t v5 = v6;
  if (v6 != (uint64_t *)(v4 + 1))
  {
    do
    {
      unint64_t v7 = v5[4];
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009B0120);
      }
      uint64_t v8 = sub_1000181D0(qword_1009F8160, v7);
      BOOL v9 = (uint64_t *)v5[1];
      if (v8 == a2)
      {
        BOOL v12 = v5;
        if (v9)
        {
          do
          {
            uint64_t v10 = (uint64_t **)v9;
            BOOL v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (uint64_t **)v12[2];
            BOOL v11 = *v10 == v12;
            BOOL v12 = (uint64_t *)v10;
          }
          while (!v11);
        }
        sub_10004D3B8(v4, v5);
        operator delete(v5);
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009B0120);
        }
        sub_1005536D8(qword_1009F8160, v7);
      }
      else if (v9)
      {
        do
        {
          uint64_t v10 = (uint64_t **)v9;
          BOOL v9 = (uint64_t *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (uint64_t **)v5[2];
          BOOL v11 = *v10 == v5;
          uint64_t v5 = (uint64_t *)v10;
        }
        while (!v11);
      }
      uint64_t v5 = (uint64_t *)v10;
    }
    while (v10 != v4 + 1);
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_100054404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL sub_100054418(unsigned char *a1)
{
  return a1[237] || ((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 8))(a1) & 1) != 0 || a1[89] != 0;
}

uint64_t sub_10005447C(uint64_t a1, _WORD *a2, unint64_t a3, void **a4, unsigned char *a5)
{
  if (a3 < 3 || *(void *)(*(void *)(a1 + 8) + 64) == *(void *)(*(void *)(a1 + 8) + 72) || *a2 != 76) {
    return 0;
  }
  else {
    return sub_1000497C4(a1, (uint64_t)a2, a3, a4, a5);
  }
}

uint64_t sub_1000544AC(uint64_t result, unint64_t a2)
{
  unint64_t v11 = a2;
  uint64_t v2 = *(void **)(result + 192);
  uint64_t v3 = (void *)(result + 200);
  if (v2 != (void *)(result + 200))
  {
    do
    {
      uint64_t v4 = (void *)v2[20];
      if (v4 != v2 + 21)
      {
        do
        {
          uint64_t result = sub_1000517A4((uint64_t)(v4 + 5), &v11);
          if (!v4[7])
          {
            uint64_t v10 = 0;
            operator new();
          }
          uint64_t v5 = (void *)v4[1];
          if (v5)
          {
            do
            {
              uint64_t v6 = v5;
              uint64_t v5 = (void *)*v5;
            }
            while (v5);
          }
          else
          {
            do
            {
              uint64_t v6 = (void *)v4[2];
              BOOL v7 = *v6 == (void)v4;
              uint64_t v4 = v6;
            }
            while (!v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v2 + 21);
      }
      uint64_t v8 = (void *)v2[1];
      if (v8)
      {
        do
        {
          BOOL v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          BOOL v9 = (void *)v2[2];
          BOOL v7 = *v9 == (void)v2;
          uint64_t v2 = v9;
        }
        while (!v7);
      }
      uint64_t v2 = v9;
    }
    while (v9 != v3);
  }
  return result;
}

void sub_1000546CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v12 = a11;
  a11 = 0;
  if (v12) {
    sub_100643684((uint64_t)&a11, v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10005472C(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  do
  {
    unsigned int v3 = *(unsigned __int16 *)(*(void *)(v1[5] + 8) + 124);
    uint64_t result = (v3 >> 2) & 1;
    if ((v3 & 4) != 0) {
      break;
    }
    uint64_t v5 = (void *)v1[1];
    if (v5)
    {
      do
      {
        uint64_t v6 = v5;
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        uint64_t v6 = (void *)v1[2];
        BOOL v7 = *v6 == (void)v1;
        uint64_t v1 = v6;
      }
      while (!v7);
    }
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

BOOL sub_100054794(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  do
  {
    BOOL result = *(unsigned char *)(*(void *)(v1[5] + 8) + 142) != 0;
    if (*(unsigned char *)(*(void *)(v1[5] + 8) + 142)) {
      break;
    }
    uint64_t v4 = (void *)v1[1];
    if (v4)
    {
      do
      {
        uint64_t v5 = v4;
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        uint64_t v5 = (void *)v1[2];
        BOOL v6 = *v5 == (void)v1;
        uint64_t v1 = v5;
      }
      while (!v6);
    }
    uint64_t v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t sub_100054800(uint64_t a1, int a2, int a3)
{
  if (a2 == 48 && a3 == 48) {
    return 0;
  }
  if (a2 == 64 && a3 == 48) {
    return 1;
  }
  if (a2 == 96 && a3 == 48) {
    return 2;
  }
  if (a2 == 144 && a3 == 48) {
    return 3;
  }
  if (a2 == 480 && a3 == 48) {
    return 4;
  }
  if (a3 == 48 && (a2 & 0xFFFE) == 0x608) {
    return 5;
  }
  if (a3) {
    BOOL v4 = 0;
  }
  else {
    BOOL v4 = a2 == 4800;
  }
  if (v4) {
    return 6;
  }
  else {
    return 7;
  }
}

uint64_t sub_1000548AC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  do
  {
    __int16 v3 = *(_WORD *)(*(void *)(v1[5] + 8) + 124);
    uint64_t result = v3 & 1;
    if (v3) {
      break;
    }
    uint64_t v5 = (void *)v1[1];
    if (v5)
    {
      do
      {
        BOOL v6 = v5;
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        BOOL v6 = (void *)v1[2];
        BOOL v7 = *v6 == (void)v1;
        uint64_t v1 = v6;
      }
      while (!v7);
    }
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

uint64_t sub_100054914(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  do
  {
    unsigned int v3 = *(unsigned __int16 *)(*(void *)(v1[5] + 8) + 124);
    uint64_t result = (v3 >> 1) & 1;
    if ((v3 & 2) != 0) {
      break;
    }
    uint64_t v5 = (void *)v1[1];
    if (v5)
    {
      do
      {
        BOOL v6 = v5;
        uint64_t v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        BOOL v6 = (void *)v1[2];
        BOOL v7 = *v6 == (void)v1;
        uint64_t v1 = v6;
      }
      while (!v7);
    }
    uint64_t v1 = v6;
  }
  while (v6 != v2);
  return result;
}

void sub_10005497C(uint64_t a1)
{
  if (*(double *)(a1 + 2712) != 0.0)
  {
    double Current = CFAbsoluteTimeGetCurrent();
    double v3 = *(double *)(a1 + 2712);
    if (Current <= v3) {
      unsigned int v4 = 0;
    }
    else {
      unsigned int v4 = ((Current - v3) * 1000.0);
    }
    unsigned int v5 = *(unsigned __int8 *)(a1 + 2720);
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG)) {
      sub_100793F68();
    }
    uint64_t v6 = a1 + 176 * v5;
    unsigned int v7 = v4 / 0xA;
    if (v4 > 0xC7) {
      unsigned int v7 = 19;
    }
    uint64_t v8 = v6 + 4 * v7;
    __int16 v9 = v4;
    unsigned int v10 = *(unsigned __int16 *)(v6 + 2492);
    if (v10 >= (unsigned __int16)v4) {
      LOWORD(v10) = v4;
    }
    *(_WORD *)(v6 + 2492) = v10;
    if (*(unsigned __int16 *)(v6 + 2494) > (unsigned __int16)v4) {
      __int16 v9 = *(_WORD *)(v6 + 2494);
    }
    *(_WORD *)(v6 + 2494) = v9;
    ++*(_DWORD *)(v8 + 2368);
    if (*(unsigned char *)(a1 + 2721)) {
      *(_DWORD *)(a1 + 176 * v5 + 2512) += v4;
    }
    if (*(unsigned char *)(a1 + 2722)) {
      *(_DWORD *)(a1 + 176 * v5 + 2524) += v4;
    }
    *(_DWORD *)(a1 + 2719) = 0;
    *(void *)(a1 + 2712) = 0;
  }
}

void sub_100054AA0(uint64_t a1)
{
  uint64_t v2 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 3472))(v2))
  {
    uint64_t v3 = *(void *)(a1 + 2208);
    if (v3)
    {
      unsigned int v4 = qword_100A19F40;
      if (!os_log_type_enabled((os_log_t)qword_100A19F40, OS_LOG_TYPE_DEFAULT)
        || (uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3),
            int v6 = 136446210,
            uint64_t v7 = v5,
            _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v6, 0xCu), (uint64_t v3 = *(void *)(a1 + 2208)) != 0))
      {
        (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
      }
      *(void *)(a1 + 2208) = 0;
    }
  }
  sub_10005497C(a1);
}

void sub_100054BEC(uint64_t a1, unsigned __int8 *a2, char a3, int a4, unsigned int a5, unsigned int a6, uint64_t a7, int a8)
{
  char v16 = a2 + 6;
  unsigned int v17 = sub_100054800(a1, *((unsigned __int16 *)a2 + 2), *((unsigned __int16 *)a2 + 3));
  if (v17 == 7) {
    return;
  }
  unsigned int v18 = v17;
  if (a4 && (a3 & 1) == 0)
  {
    uint64_t v19 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
      sub_1007966DC(v19);
    }
    return;
  }
  uint64_t v20 = sub_100035F54();
  uint64_t v21 = (*(uint64_t (**)(uint64_t))(*(void *)v20 + 888))(v20);
  unsigned int v22 = v21 - 2;
  int v41 = v21;
  if ((v21 - 2) < 2)
  {
    int v42 = v21 - 2;
    uint64_t v23 = *(void *)(a1 + ((unint64_t)v18 << 6) + 32 * *a2 + 16 * a5 + 8 * a6 + 3784);
    uint64_t v44 = v23;
    if (*(unsigned char *)a7 || *(_WORD *)(a7 + 2))
    {
      v43[0] = *(_OWORD *)a2;
      *(_OWORD *)((char *)v43 + 10) = *(_OWORD *)(a2 + 10);
      sub_1006EC2D4(v21, (uint64_t)&v44, v18, (uint64_t)v43, (unsigned __int8 *)a7);
      uint64_t v23 = v44;
    }
    unsigned int v24 = *((unsigned __int16 *)a2 + 2);
    if (*((_WORD *)a2 + 2)) {
      unsigned int v25 = 100 * (WORD1(v23) + WORD2(v23)) / v24;
    }
    else {
      unsigned int v25 = 0;
    }
    if (v18 == 6)
    {
      BOOL v31 = (v23 & 0xFFFFFFFFFFFFLL) == 0x2000000020;
    }
    else
    {
      if (v18 != 5)
      {
        BOOL v39 = 0;
        goto LABEL_24;
      }
      BOOL v31 = v25 < 0x32;
    }
    BOOL v39 = v31;
LABEL_24:
    if ((_WORD)v23) {
      int v32 = 100;
    }
    else {
      int v32 = 50;
    }
    if ((v23 & 0xFFFFFFFF0000) == 0) {
      int v32 = 0;
    }
    unsigned int v40 = v32;
    uint64_t v33 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
    {
      int v34 = *((unsigned __int16 *)a2 + 3);
      int v35 = *a2;
      uint64_t v36 = "N";
      *(_DWORD *)buf = 67112194;
      int v46 = v34;
      __int16 v47 = 1024;
      if (v39) {
        uint64_t v36 = "Y";
      }
      int v48 = v24;
      __int16 v49 = 1024;
      unsigned int v50 = v18;
      __int16 v51 = 1024;
      int v52 = v35;
      __int16 v53 = 1024;
      unsigned int v54 = a5;
      __int16 v55 = 1024;
      unsigned int v56 = a6;
      __int16 v57 = 1024;
      int v58 = (unsigned __int16)v23;
      __int16 v59 = 1024;
      int v60 = WORD1(v23);
      __int16 v61 = 1024;
      int v62 = WORD2(v23);
      __int16 v63 = 1024;
      int v64 = BYTE6(v23);
      __int16 v65 = 2082;
      id v66 = v36;
      __int16 v67 = 1024;
      unsigned int v68 = v40;
      __int16 v69 = 1024;
      int v70 = 1;
      _os_log_debug_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEBUG, "scanParamsScanCoreTable: input [window %d interval %d type %d passive %d critical %d range %d] output [MCELNABypass %d SCELNAOn %d SCELNABypass %d concurrent %d] compensation [%{public}s, %d, query %d]", buf, 0x54u);
    }
    unint64_t v29 = (unint64_t)v40 << 16;
    uint64_t v28 = &_mh_execute_header;
    BOOL v30 = v39;
LABEL_31:
    unsigned int v22 = v42;
    goto LABEL_32;
  }
  if (v21 == 1)
  {
    int v42 = -1;
    uint64_t v26 = *a2;
    uint64_t v23 = *(void *)(a1 + ((unint64_t)v18 << 6) + 32 * v26 + 16 * a5 + 8 * a6 + 3272);
    uint64_t v27 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEBUG))
    {
      int v37 = *((unsigned __int16 *)a2 + 3);
      int v38 = *((unsigned __int16 *)a2 + 2);
      *(_DWORD *)buf = 67111424;
      int v46 = v37;
      __int16 v47 = 1024;
      int v48 = v38;
      __int16 v49 = 1024;
      unsigned int v50 = v18;
      __int16 v51 = 1024;
      int v52 = v26;
      __int16 v53 = 1024;
      unsigned int v54 = a5;
      __int16 v55 = 1024;
      unsigned int v56 = a6;
      __int16 v57 = 1024;
      int v58 = (unsigned __int16)v23;
      __int16 v59 = 1024;
      int v60 = WORD1(v23);
      __int16 v61 = 1024;
      int v62 = WORD2(v23);
      __int16 v63 = 1024;
      int v64 = BYTE6(v23);
      _os_log_debug_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEBUG, "scanParamsMainCoreELNABypassTable: input [window %d interval %d type %d passive %d critical %d range %d] output [MCELNABypass %d SCELNAOn %d SCELNABypass %d concurrent %d]", buf, 0x3Eu);
    }
    uint64_t v28 = 0;
    unint64_t v29 = 0;
    BOOL v30 = 0;
    goto LABEL_31;
  }
  uint64_t v23 = 0;
  uint64_t v28 = 0;
  unint64_t v29 = 0;
  BOOL v30 = 0;
LABEL_32:
  sub_10005504C(a1, (uint64_t)a2, v23, v29 | (unint64_t)v28 | v30);
  if (a8 && v18 == 5)
  {
    if (v22 < 2)
    {
      char v16 = a2 + 10;
    }
    else if (v41)
    {
      if (v41 != 1) {
        return;
      }
      char v16 = a2 + 8;
    }
    *v16 += a8;
  }
}

uint64_t sub_10005504C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_WORD *)(a2 + 8) = a3;
  *(_WORD *)(a2 + 12) = WORD1(a3);
  *(_WORD *)(a2 + 10) = WORD2(a3);
  *(unsigned char *)(a2 + 14) = BYTE6(a3) & 1;
  if (*(unsigned char *)(result + 2244))
  {
    uint64_t v6 = sub_100035F54();
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v6 + 672))(v6);
    if (result)
    {
      *(unsigned char *)(a2 + 18) = a4 & 1;
      *(_WORD *)(a2 + 20) = WORD1(a4);
      *(_WORD *)(a2 + 22) = WORD2(a4);
    }
  }
  return result;
}

void sub_1000550E0(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(atomic_uint **)(*(void *)(a3 + 8) + 56);
  unsigned int v25 = &off_100998428;
  uint64_t v26 = v6;
  if (v6) {
    sub_100037354((uint64_t)v6);
  }
  int64_t v7 = sub_100045F00((uint64_t)&v25);
  uint64_t v8 = sub_10004A6E4((uint64_t)&v25);
  if ((unint64_t)v7 >= 2)
  {
    unsigned int v10 = (const void *)v8;
    if (*(unsigned char *)v8 == 76 && !*(unsigned char *)(v8 + 1) && v7 >= 4)
    {
      uint64_t v11 = v8 + v7;
      uint64_t v12 = (unsigned __int8 *)(v8 + 2);
      while (1)
      {
        uint64_t v13 = v12 + 2;
        uint64_t v14 = v12[1] & 0x1F;
        if (v11 - (uint64_t)(v12 + 2) < v14) {
          goto LABEL_53;
        }
        if (*v12 == 7) {
          break;
        }
        uint64_t v12 = &v13[v14];
        if (v11 - (uint64_t)&v13[v14] <= 1) {
          goto LABEL_53;
        }
      }
      if (v14 < 0x11) {
        goto LABEL_53;
      }
      int v15 = *v13;
      if (v15 != 8 && v15 != 6) {
        goto LABEL_53;
      }
      long long v40 = 0uLL;
      int v17 = *v13;
      if (v17 == 6)
      {
        uint64_t v8 = sub_1006F47DC(a1, a2, (uint64_t)&v40);
        if ((v8 & 1) == 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_DEBUG))
          {
            sub_1006ACF44();
            sub_100795BF4();
          }
          goto LABEL_53;
        }
      }
      else if (v17 == 8)
      {
        *(_DWORD *)&_DWORD buf[3] = 0;
        *(_DWORD *)buf = 0;
        uint64_t v18 = sub_1002284B8(a2);
        *(_DWORD *)buf = v18;
        buf[6] = BYTE6(v18);
        *(_WORD *)&uint8_t buf[4] = WORD2(v18);
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_1009BF868);
        }
        uint64_t v8 = sub_100714570(qword_1009F7EC8, buf, &v40);
        if ((v8 & 1) == 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR)) {
            sub_100795C48();
          }
          goto LABEL_53;
        }
      }
      __chkstk_darwin(v8, v9);
      bzero((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
      memcpy((char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v10, v7);
      uint64_t v19 = v13 - (unsigned char *)v10 + 1;
      if (v17 == 6)
      {
        if (sub_10022FE78((uint64_t)&v40, (uint64_t)&v25 + v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), (uint64_t)&v25 + v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7 - v19))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_ERROR))
          {
            sub_1006ACF44();
            sub_100795B4C();
          }
          goto LABEL_53;
        }
        uint64_t v20 = *(void *)(a3 + 8);
        *(unsigned char *)(v20 + 362) = 1;
        uint64_t v21 = qword_100A19ED8;
        if (os_log_type_enabled((os_log_t)qword_100A19ED8, OS_LOG_TYPE_INFO))
        {
          sub_1006ACF44();
          if (v28 >= 0) {
            unsigned int v22 = v27;
          }
          else {
            unsigned int v22 = (void **)v27[0];
          }
          *(_DWORD *)buf = 136447747;
          *(void *)&uint8_t buf[4] = v22;
          *(_WORD *)&unsigned char buf[12] = 2160;
          *(void *)&buf[14] = 1752392040;
          __int16 v30 = 1040;
          int v31 = v7;
          __int16 v32 = 2097;
          uint64_t v33 = v10;
          __int16 v34 = 2160;
          uint64_t v35 = 1752392040;
          __int16 v36 = 1040;
          int v37 = v7;
          __int16 v38 = 2097;
          BOOL v39 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_INFO, "Decrypt AccessoryStatus ADV success: %{public}s, %{private, mask.hash}.*P -> %{private, mask.hash}.*P", buf, 0x40u);
          if (v28 < 0) {
            operator delete(v27[0]);
          }
          uint64_t v20 = *(void *)(a3 + 8);
        }
        goto LABEL_51;
      }
      if (v17 != 8) {
        goto LABEL_53;
      }
      ccaes_ecb_decrypt_mode();
      if (!ccecb_one_shot())
      {
        uint64_t v20 = *(void *)(a3 + 8);
        *(unsigned char *)(v20 + 362) = 1;
        uint64_t v23 = qword_100A19E90;
        if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
        {
          sub_1006ACF44();
          if (v28 >= 0) {
            unsigned int v24 = v27;
          }
          else {
            unsigned int v24 = (void **)v27[0];
          }
          *(_DWORD *)buf = 136447747;
          *(void *)&uint8_t buf[4] = v24;
          *(_WORD *)&unsigned char buf[12] = 2160;
          *(void *)&buf[14] = 1752392040;
          __int16 v30 = 1040;
          int v31 = v7;
          __int16 v32 = 2097;
          uint64_t v33 = v10;
          __int16 v34 = 2160;
          uint64_t v35 = 1752392040;
          __int16 v36 = 1040;
          int v37 = v7;
          __int16 v38 = 2097;
          BOOL v39 = (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Decrypt FindMyAccessory ADV success: %{public}s, %{private, mask.hash}.*P -> %{private, mask.hash}.*P", buf, 0x40u);
          if (v28 < 0) {
            operator delete(v27[0]);
          }
          uint64_t v20 = *(void *)(a3 + 8);
        }
LABEL_51:
        sub_1000335D8(buf, (char *)&v25 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0), v7);
        sub_100049EE0(v20 + 48, (uint64_t)buf);
        *(void *)buf = &off_100998428;
        if (*(void *)&buf[8]) {
          sub_1000368F4(*(atomic_uint **)&buf[8]);
        }
        goto LABEL_53;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_ERROR))
      {
        sub_1006ACF44();
        sub_100795BA0();
      }
    }
  }
LABEL_53:
  unsigned int v25 = &off_100998428;
  if (v26) {
    sub_1000368F4(v26);
  }
}

void sub_100055660(_Unwind_Exception *exception_object)
{
  *(void *)(v2 - 224) = v1;
  unsigned int v4 = *(atomic_uint **)(v2 - 216);
  if (v4) {
    sub_1000368F4(v4);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000556EC(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 2292);
  if (v3)
  {
    int v4 = a2 + v3;
    BOOL v5 = __OFADD__(a2, v3);
    if (v4 != (char)v4) {
      BOOL v5 = 1;
    }
    if (v3 > 0) {
      char v6 = 127;
    }
    else {
      char v6 = 0x80;
    }
    if (v5) {
      LOBYTE(v4) = v6;
    }
    if ((char)v4 >= 19) {
      char v7 = 19;
    }
    else {
      char v7 = v4;
    }
    uint64_t v8 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109632;
      v10[1] = v3;
      __int16 v11 = 1024;
      int v12 = a2;
      __int16 v13 = 1024;
      int v14 = v7;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Applying RSSI offset of %d to %d, new rssi level is %d", (uint8_t *)v10, 0x14u);
    }
  }
  else
  {
    return (char)a2;
  }
  return v7;
}

void sub_1000557F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 2200);
  if (v1)
  {
    int v3 = qword_100A19F40;
    if (!os_log_type_enabled((os_log_t)qword_100A19F40, OS_LOG_TYPE_DEFAULT)
      || (uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 16))(v1),
          int v5 = 136446210,
          uint64_t v6 = v4,
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Destroying %{public}s", (uint8_t *)&v5, 0xCu), (uint64_t v1 = *(void *)(a1 + 2200)) != 0))
    {
      (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
    }
    *(void *)(a1 + 2200) = 0;
  }
}

uint64_t sub_100055908(uint64_t result, unint64_t a2, int a3)
{
  int v3 = *(void **)(result + 2048);
  if (v3)
  {
    uint64_t v6 = result;
    uint64_t v7 = result + 2048;
    do
    {
      unint64_t v8 = v3[4];
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        unsigned int v10 = v3;
      }
      else {
        unsigned int v10 = v3 + 1;
      }
      if (v9) {
        uint64_t v7 = (uint64_t)v3;
      }
      int v3 = (void *)*v10;
    }
    while (*v10);
    if (v7 != result + 2048 && *(void *)(v7 + 32) <= a2)
    {
      uint64_t v11 = *(void *)(v7 + 40);
      sub_1006FC7D0(v11);
      *(unsigned char *)(v11 + 81) = a3;
      if (a3 == 16)
      {
        int v12 = *(unsigned __int8 *)(*(void *)(v11 + 8) + 143);
        __int16 v13 = qword_100A19E90;
        BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_INFO);
        if (v12)
        {
          if (v14)
          {
            sub_10003AE4C(*(void *)(v7 + 32), (uint64_t)__p);
            if (v18 >= 0) {
              int v15 = __p;
            }
            else {
              int v15 = (void **)__p[0];
            }
            *(_DWORD *)buf = 136446210;
            uint64_t v20 = v15;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Session \"%{public}s\" does not need a scan level bump since its doing ContactTracing", buf, 0xCu);
            if (v18 < 0) {
              operator delete(__p[0]);
            }
          }
        }
        else
        {
          if (v14)
          {
            sub_10003AE4C(a2, (uint64_t)__p);
            char v16 = v18 >= 0 ? __p : (void **)__p[0];
            *(_DWORD *)buf = 136446210;
            uint64_t v20 = v16;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Session \"%{public}s\" is now back at scan level 1", buf, 0xCu);
            if (v18 < 0) {
              operator delete(__p[0]);
            }
          }
          *(_DWORD *)(v11 + 96) = 1;
        }
        sub_1006E30E0(v14, a2, v11);
      }
      return sub_100055B50(v6, 0);
    }
  }
  return result;
}

BOOL sub_100055AE4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 2040);
  uint64_t v2 = (void *)(a1 + 2048);
  if (v1 == (void *)(a1 + 2048)) {
    return 0;
  }
  do
  {
    BOOL result = *(unsigned char *)(*(void *)(v1[5] + 8) + 143) != 0;
    if (*(unsigned char *)(*(void *)(v1[5] + 8) + 143)) {
      break;
    }
    uint64_t v4 = (void *)v1[1];
    if (v4)
    {
      do
      {
        int v5 = v4;
        uint64_t v4 = (void *)*v4;
      }
      while (v4);
    }
    else
    {
      do
      {
        int v5 = (void *)v1[2];
        BOOL v6 = *v5 == (void)v1;
        uint64_t v1 = v5;
      }
      while (!v6);
    }
    uint64_t v1 = v5;
  }
  while (v5 != v2);
  return result;
}

uint64_t sub_100055B50(uint64_t a1, char a2)
{
  if ((*(_DWORD *)(a1 + 1960) & 0xFFFFFFFD) == 1)
  {
    return sub_100031668(a1, a2);
  }
  else
  {
    int v3 = qword_100A19E90;
    if (os_log_type_enabled((os_log_t)qword_100A19E90, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Waiting for scan state to settle before updating scan", v4, 2u);
    }
    return 0;
  }
}

uint64_t sub_100055BEC(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a2 + 16))(a2)) {
    return 0;
  }
  uint64_t v3 = sub_1000536B4(a2);
  if (v3)
  {
    uint64_t v4 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(void *)(a2 + 88);
      int v11 = 138412290;
      uint64_t v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding TCC requirement for %@ (DeviceAccess CBManager)", (uint8_t *)&v11, 0xCu);
    }
  }
  if (*(unsigned char *)(a2 + 505))
  {
    BOOL v6 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(a2 + 88);
      int v11 = 138412290;
      uint64_t v12 = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Overriding TCC requirement for %@ (DeviceAccess for Media extension)", (uint8_t *)&v11, 0xCu);
    }
    uint64_t v3 = 1;
  }
  if (*(unsigned char *)(a2 + 506))
  {
    unint64_t v8 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = *(void *)(a2 + 88);
      int v11 = 138412290;
      uint64_t v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding TCC requirement for %@ (DeviceAccess Per Accessory extension)", (uint8_t *)&v11, 0xCu);
    }
    return 1;
  }
  return v3;
}

uint64_t sub_100055D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _OWORD *a5)
{
  if (!a2) {
    return 3;
  }
  if ((a4 & 0x100000000) != 0)
  {
    long long v8 = a5[1];
    v14[0] = *a5;
    v14[1] = v8;
    uint64_t v9 = v14;
    uint64_t v10 = a2;
    int v11 = 0;
LABEL_10:
    sub_10043C108(v10, v11, v9);
    return 0;
  }
  if ((a4 & 0x10000) != 0)
  {
    long long v12 = a5[1];
    v13[0] = *a5;
    v13[1] = v12;
    uint64_t v9 = v13;
    uint64_t v10 = a2;
    int v11 = 1;
    goto LABEL_10;
  }
  if ((a4 & 0x1000000) != 0)
  {
    uint64_t v5 = a2;
    int v6 = 0;
    goto LABEL_14;
  }
  if ((a4 & 0x100) != 0)
  {
    uint64_t v5 = a2;
    int v6 = 1;
LABEL_14:
    sub_10043C21C(v5, v6);
  }
  return 0;
}

void sub_100055E1C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = *(void **)(a1 + 232);
  uint64_t v3 = (void *)(a1 + 232);
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_36;
  }
  int v6 = v3;
  do
  {
    unint64_t v7 = v4[4];
    BOOL v8 = v7 >= a2;
    if (v7 >= a2) {
      uint64_t v9 = v4;
    }
    else {
      uint64_t v9 = v4 + 1;
    }
    if (v8) {
      int v6 = v4;
    }
    uint64_t v4 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v3 && v6[4] <= a2)
  {
    int v10 = (*(uint64_t (**)(void))(*(void *)v6[5] + 16))(v6[5]);
    uint64_t v11 = v6[5];
    if (v10 == 3)
    {
      if (v11 && *(void *)(v11 + 224))
      {
        if (qword_1009F8768 != -1) {
          dispatch_once(&qword_1009F8768, &stru_1009A4F58);
        }
        sub_10060ABEC(off_1009F8760, *(void *)(v11 + 224));
        *(void *)(v11 + 224) = 0;
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
      {
        sub_100754EF4();
      }
    }
    else if (*(_DWORD *)(v11 + 32))
    {
      long long v12 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(a2, (uint64_t)__p);
        if (v15 >= 0) {
          __int16 v13 = __p;
        }
        else {
          __int16 v13 = (void **)__p[0];
        }
        *(_DWORD *)buf = 136446210;
        int v17 = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Unregistering pairing agent for session \"%{public}s\"", buf, 0xCu);
        if (v15 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v11 = v6[5];
      }
      *(_DWORD *)(v11 + 32) = 0;
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_1009A4E98);
      }
      sub_100709F60(qword_1009F7EC8, a2);
    }
  }
  else
  {
LABEL_36:
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_FAULT)) {
      sub_100754E6C(a2);
    }
  }
}

void sub_100056054(uint64_t a1, unint64_t a2)
{
  if (sub_1000066B0(a1, a2, 0))
  {
    if (qword_1009F85D8 != -1) {
      dispatch_once(&qword_1009F85D8, &stru_1009A5058);
    }
    uint64_t v3 = qword_1009F85D0;
    sub_10000E3F4(v3, a2);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR))
  {
    sub_100754E04();
  }
}

void sub_1000560F8(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 178))
  {
    uint64_t v2 = +[NSMutableDictionary dictionary];
    uint64_t v3 = +[NSMutableDictionary dictionary];
    uint64_t v4 = +[NSMutableDictionary dictionary];
    uint64_t v5 = *(void **)(a1 + 224);
    if (v5 != (void *)(a1 + 232))
    {
      do
      {
        int v6 = (*(uint64_t (**)(void))(*(void *)v5[5] + 16))(v5[5]);
        uint64_t v7 = v5[5];
        if (v6)
        {
          if ((*(unsigned int (**)(void))(*(void *)v7 + 16))(v5[5]) == 1)
          {
            BOOL v8 = (void *)v5[5];
            if (*((unsigned char *)v8 + 24))
            {
              if (v8[12] && (*(unsigned int (**)(void))(*v8 + 40))(v5[5]))
              {
                uint64_t v9 = (*(void (**)(void *))(*v8 + 48))(v8);
                if (v9)
                {
                  int v10 = +[NSString stringWithFormat:@"%@ - %@", v8[11], v8[12]];
                  [v4 setObject:v9 forKey:v10];
                  goto LABEL_15;
                }
                goto LABEL_16;
              }
            }
          }
        }
        else if (*(unsigned char *)(v7 + 24) {
               && *(void *)(v7 + 96)
        }
               && (*(unsigned int (**)(void))(*(void *)v7 + 40))(v5[5]))
        {
          uint64_t v9 = (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
          if (v9)
          {
            int v10 = +[NSString stringWithFormat:@"%@ - %@", *(void *)(v7 + 88), *(void *)(v7 + 96)];
            [v3 setObject:v9 forKey:v10];
LABEL_15:
          }
LABEL_16:
        }
        uint64_t v11 = (void *)v5[1];
        if (v11)
        {
          do
          {
            long long v12 = v11;
            uint64_t v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            long long v12 = (void *)v5[2];
            BOOL v13 = *v12 == (void)v5;
            uint64_t v5 = v12;
          }
          while (!v13);
        }
        uint64_t v5 = v12;
      }
      while (v12 != (void *)(a1 + 232));
    }
    if ([v3 count]) {
      [v2 setObject:v3 forKey:@"centralSessions"];
    }
    if ([v4 count]) {
      [v2 setObject:v4 forKey:@"peripheralSessions"];
    }
    id v14 = [v2 count];
    char v15 = qword_100A19F58;
    BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19F58, OS_LOG_TYPE_DEFAULT);
    if (v14)
    {
      if (v16)
      {
        int v17 = sub_1002FABF0();
        char v18 = [v17 absoluteString];
        *(_DWORD *)buf = 138412290;
        unsigned int v24 = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Writing restoration data to %@", buf, 0xCu);
      }
      uint64_t v19 = sub_1002FABF0();
      [v2 writeToURL:v19 error:0];
    }
    else
    {
      if (v16)
      {
        uint64_t v20 = sub_1002FABF0();
        uint64_t v21 = [v20 absoluteString];
        *(_DWORD *)buf = 138412290;
        unsigned int v24 = v21;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "No more restorable session data, removing restoration data at %@", buf, 0xCu);
      }
      uint64_t v19 = +[NSFileManager defaultManager];
      unsigned int v22 = sub_1002FABF0();
      [v19 removeItemAtURL:v22 error:0];
    }
  }
}

void sub_100056520(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000565A8(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  id v6 = v5;
  if (*(unsigned char *)(a1 + 24)) {
    *(unsigned char *)(a1 + 24) = 0;
  }
  else {
    sub_100012054(a1, v5, a3);
  }
}

void sub_100056610(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100056624(uint64_t a1)
{
  sub_100007118(a1);

  operator delete();
}

BOOL sub_100056660(uint64_t a1)
{
  if (!_os_feature_enabled_impl()) {
    return 1;
  }
  if ([*(id *)(a1 + 96) containsString:@"com.apple.deviceaccessd"])
  {
    if (!*(unsigned char *)(a1 + 176)) {
      goto LABEL_11;
    }
    goto LABEL_6;
  }
  if (*(unsigned char *)(a1 + 176))
  {
LABEL_6:
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    sub_1005A222C(*(void **)(a1 + 224), @"NSBluetoothServices", (void **)&v19);
    sub_1005B7EA4((void **)(a1 + 232), *(void *)(a1 + 240), v19, v20, 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)v19) >> 2));
    __p = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    sub_1005A2638(*(void **)(a1 + 224), @"NSBluetoothCompanyIdentifiers", (char **)&__p);
    sub_1005B8170(a1 + 256, *(void *)(a1 + 264), (char *)__p, v17, (v17 - (unsigned char *)__p) >> 1);
    if (__p)
    {
      int v17 = (char *)__p;
      operator delete(__p);
    }
    if (v19)
    {
      uint64_t v20 = v19;
      operator delete(v19);
    }
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a1 + 178)) {
    return 1;
  }
LABEL_11:
  if (*(unsigned char *)(a1 + 177)
    || *(unsigned char *)(a1 + 178)
    || [*(id *)(a1 + 96) containsString:@"com.apple.deviceaccessd"])
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    sub_1005A222C(*(void **)(a1 + 224), @"NSAccessorySetupBluetoothServices", (void **)&v19);
    sub_1005B7EA4((void **)(a1 + 232), *(void *)(a1 + 240), v19, v20, 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)v19) >> 2));
    __p = 0;
    int v17 = 0;
    uint64_t v18 = 0;
    sub_1005A2638(*(void **)(a1 + 224), @"NSAccessorySetupBluetoothCompanyIdentifiers", (char **)&__p);
    sub_1005B8170(a1 + 256, *(void *)(a1 + 264), (char *)__p, v17, (v17 - (unsigned char *)__p) >> 1);
    int64x2_t v14 = 0uLL;
    uint64_t v15 = 0;
    sub_1005A2978(*(void **)(a1 + 224), @"NSAccessorySetupBluetoothNames", &v14);
    sub_1005B843C(a1 + 280, *(long long **)(a1 + 288), (std::string *)v14.i64[0], (long long *)v14.i64[1], 0xAAAAAAAAAAAAAAABLL * ((v14.i64[1] - v14.i64[0]) >> 3));
    unsigned int v22 = &v14;
    sub_100051568((void ***)&v22);
    if (__p)
    {
      int v17 = (char *)__p;
      operator delete(__p);
    }
    if (v19)
    {
      uint64_t v20 = v19;
      operator delete(v19);
    }
  }
  if (*(void *)(a1 + 240) != *(void *)(a1 + 232) || *(void *)(a1 + 264) != *(void *)(a1 + 256))
  {
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    uint64_t v2 = off_1009F8780;
    unint64_t v3 = *(void *)(a1 + 128);
    long long v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    sub_100037564((char *)&v11, *(long long **)(a1 + 232), *(long long **)(a1 + 240), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a1 + 240) - *(void *)(a1 + 232)) >> 2));
    sub_10030786C((uint64_t)v2, v3, (uint64_t *)&v11);
    if (v11)
    {
      long long v12 = v11;
      operator delete(v11);
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    uint64_t v4 = off_1009F8780;
    unint64_t v5 = *(void *)(a1 + 128);
    sub_10030BE04(v10, a1 + 256);
    sub_100307AEC((uint64_t)v4, v5, (unsigned __int16 **)v10);
    if (v10[0])
    {
      v10[1] = v10[0];
      operator delete(v10[0]);
    }
    if (qword_1009F8788 != -1) {
      dispatch_once(&qword_1009F8788, &stru_1009B7AA8);
    }
    id v6 = off_1009F8780;
    unint64_t v7 = *(void *)(a1 + 128);
    memset(v9, 0, sizeof(v9));
    sub_1002B3390((char *)v9, *(long long **)(a1 + 280), *(long long **)(a1 + 288), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 288) - *(void *)(a1 + 280)) >> 3));
    sub_100307D10((uint64_t)v6, v7, v9);
    uint64_t v19 = (long long *)v9;
    sub_100051568((void ***)&v19);
    return 1;
  }
  if (!*(unsigned char *)(a1 + 176)
    && !*(unsigned char *)(a1 + 178)
    && ([*(id *)(a1 + 96) isEqualToString:*(void *)(a1 + 224)] & 1) != 0)
  {
    return 1;
  }
  BOOL result = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR);
  if (result)
  {
    sub_10077FA10();
    return 0;
  }
  return result;
}

void sub_100056A38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  unsigned int v25 = *(void **)(v23 - 80);
  if (v25)
  {
    *(void *)(v23 - 72) = v25;
    operator delete(v25);
  }
  _Unwind_Resume(exception_object);
}

void sub_100056AD4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 89))
  {
    uint64_t v2 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v3 = (void *)(a1 + 56);
      if (*(char *)(a1 + 79) < 0) {
        unint64_t v3 = (void *)*v3;
      }
      *(_DWORD *)buf = 136446210;
      unint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "On-Demand-Install app XPC ended: %{public}s", buf, 0xCu);
    }
  }
  if (*(void *)(a1 + 128))
  {
    uint64_t v4 = sub_100019878();
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_100051004;
    v5[3] = &unk_100997528;
    void v5[4] = a1;
    sub_1000197D8(v4, v5);
    *(void *)(a1 + 128) = 0;
  }
}

BOOL sub_100056BF0(uint64_t a1, unsigned int a2)
{
  BOOL result = 1;
  if (a2 > 0x29 || ((1 << a2) & 0x20000000300) == 0) {
    return a2 == 208;
  }
  return result;
}

void sub_100056C28(uint64_t a1)
{
  (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 24))(a1, 1);

  sub_1000173FC(a1, 5, 0, 0);
}

uint64_t sub_100056C90(uint64_t a1, uint64_t a2, _xpc_connection_s *a3, uint64_t a4)
{
  uint64_t v5 = sub_100013DDC(a1, a2, a3, a4);
  *(void *)uint64_t v5 = off_1009B26B0;
  *(void *)(v5 + 128) = 0;
  *(_DWORD *)(v5 + 136) = 0;
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009B2770);
  }
  *(_DWORD *)(a1 + 140) = sub_100028CB4((uint64_t)off_1009F8740);
  return a1;
}

void sub_100056D14(_Unwind_Exception *a1)
{
  sub_10000C178(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100056D2C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100056D58(uint64_t a1, void *a2)
{
  *a2 = a1;
  return 0;
}

uint64_t sub_100056D64(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_release(v2);
    *(void *)(a1 + 56) = 0;
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return a1;
}

uint64_t sub_100056DA8(uint64_t a1, long long *a2, dispatch_object_t object)
{
  *(_DWORD *)a1 = 0;
  *(unsigned char *)(a1 + 4) = 0;
  uint64_t v5 = a1 + 32;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098((unsigned char *)v5, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(void *)(a1 + 56) = 0;
  if (object)
  {
    dispatch_retain(object);
    *(void *)(a1 + 56) = object;
  }
  return a1;
}

uint64_t sub_100056E24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  long long v17 = unk_10099FB28;
  bzero(&unk_100A107C0, 0x1000uLL);
  uint64_t result = sub_100057728(&v17, a1, &a9);
  if (result)
  {
    WORD2(v17) = 0;
    return sub_1002639B0((uint64_t)&v17, (uint64_t)"Bad format string in debug output (error %d): \"%s\"", v11, v12, v13, v14, v15, v16, result);
  }
  return result;
}

uint64_t sub_100056EA4(char a1, char a2, uint64_t a3)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t result = sub_100059D70(&v19);
  if (!result)
  {
    if (HIBYTE(v20))
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
    }
    else
    {
      uint64_t v10 = WORD2(v20);
      if (WORD1(v20) > WORD2(v20))
      {
        if (BYTE6(v20) == 2)
        {
          ++WORD2(v20);
          *(unsigned char *)(v19 + v10) = 4;
          if (HIBYTE(v20))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
          else if (WORD1(v20) - WORD2(v20) > 2)
          {
            if (BYTE6(v20) == 2)
            {
              uint64_t v11 = v19 + WORD2(v20);
              *(unsigned char *)(v11 + 2) = 0;
              *(_WORD *)uint64_t v11 = 0;
              __int16 v12 = WORD2(v20);
              unsigned __int16 v13 = WORD2(v20) + 3;
              WORD2(v20) += 3;
              if (HIBYTE(v20))
              {
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
              }
              else if (WORD1(v20) > v13)
              {
                if (BYTE6(v20) == 2)
                {
                  WORD2(v20) = v12 + 4;
                  *(unsigned char *)(v19 + v13) = a1;
                  if (HIBYTE(v20))
                  {
                    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                  }
                  else
                  {
                    uint64_t v14 = WORD2(v20);
                    if (WORD1(v20) > WORD2(v20))
                    {
                      if (BYTE6(v20) == 2)
                      {
                        ++WORD2(v20);
                        *(unsigned char *)(v19 + v14) = a2;
                        return sub_10001BCBC(383, v19, BYTE4(v20), a3, (uint64_t)sub_1000260B4, v7, v8, v9);
                      }
                      uint64_t v18 = "(bs).__RWFlag == BYTESTREAM_WRITE";
LABEL_31:
                      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6830, v18);
                    }
                  }
                  uint64_t v18 = "ByteStream_NumReadBytesAvail(bs) >= 1";
                  goto LABEL_31;
                }
                long long v17 = "(bs).__RWFlag == BYTESTREAM_WRITE";
LABEL_27:
                sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6829, v17);
              }
              long long v17 = "ByteStream_NumReadBytesAvail(bs) >= 1";
              goto LABEL_27;
            }
            uint64_t v16 = "(bs).__RWFlag == BYTESTREAM_WRITE";
LABEL_23:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6828, v16);
          }
          uint64_t v16 = "ByteStream_NumReadBytesAvail(bs) >= (3)";
          goto LABEL_23;
        }
        uint64_t v15 = "(bs).__RWFlag == BYTESTREAM_WRITE";
LABEL_19:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6827, v15);
      }
    }
    uint64_t v15 = "ByteStream_NumReadBytesAvail(bs) >= 1";
    goto LABEL_19;
  }
  return result;
}

uint64_t sub_100057104(char a1, char a2, char a3, uint64_t a4)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  uint64_t result = sub_100059D70(&v18);
  if (!result)
  {
    if (HIBYTE(v19))
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
    }
    else
    {
      uint64_t v12 = WORD2(v19);
      if (WORD1(v19) > WORD2(v19))
      {
        if (BYTE6(v19) == 2)
        {
          ++WORD2(v19);
          *(unsigned char *)(v18 + v12) = a1;
          if (HIBYTE(v19))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
          }
          else
          {
            uint64_t v13 = WORD2(v19);
            if (WORD1(v19) > WORD2(v19))
            {
              if (BYTE6(v19) == 2)
              {
                ++WORD2(v19);
                *(unsigned char *)(v18 + v13) = a2;
                if (HIBYTE(v19))
                {
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c");
                }
                else
                {
                  uint64_t v14 = WORD2(v19);
                  if (WORD1(v19) > WORD2(v19))
                  {
                    if (BYTE6(v19) == 2)
                    {
                      ++WORD2(v19);
                      *(unsigned char *)(v18 + v14) = a3;
                      return sub_10001BCBC(631, v18, BYTE4(v19), a4, (uint64_t)sub_1000260B4, v9, v10, v11);
                    }
                    long long v17 = "(bs).__RWFlag == BYTESTREAM_WRITE";
LABEL_24:
                    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6813, v17);
                  }
                }
                long long v17 = "ByteStream_NumReadBytesAvail(bs) >= 1";
                goto LABEL_24;
              }
              uint64_t v16 = "(bs).__RWFlag == BYTESTREAM_WRITE";
LABEL_20:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6812, v16);
            }
          }
          uint64_t v16 = "ByteStream_NumReadBytesAvail(bs) >= 1";
          goto LABEL_20;
        }
        uint64_t v15 = "(bs).__RWFlag == BYTESTREAM_WRITE";
LABEL_16:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/vsc/bcm/bcm_vsc.c", 6811, v15);
      }
    }
    uint64_t v15 = "ByteStream_NumReadBytesAvail(bs) >= 1";
    goto LABEL_16;
  }
  return result;
}

void sub_1000572F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0xCu);
}

void sub_100057310(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

uint64_t sub_100057338(uint64_t result, float a2)
{
  *unint64_t v3 = a2;
  void *v2 = result;
  return result;
}

void sub_100057344(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 0x18u);
}

void sub_100057394(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x16u);
}

void sub_1000573B4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_fault_impl(a1, a2, OS_LOG_TYPE_FAULT, a4, &a9, 0xCu);
}

void sub_1000573D0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 2u);
}

void sub_100057404(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100057420(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x16u);
}

void sub_100057438(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xCu);
}

void sub_100057464(uint64_t a1@<X1>, uint64_t a2@<X8>, float a3@<S0>)
{
  *(float *)a1 = a3;
  *(void *)(a1 + 4) = a2;
}

void sub_10005747C(uint64_t a1@<X0>, uint64_t a2@<X8>, uint64_t a3, ...)
{
  va_start(va, a3);
  *(void *)(v3 - 24) = a2;
  sub_100474E18(a1, (uint64_t *)va);
}

void sub_100057498(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xEu);
}

void sub_1000574B8(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0x12u);
}

void sub_1000574D0(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_fault_impl(a1, log, OS_LOG_TYPE_FAULT, a4, a5, 2u);
}

void sub_1000574F8(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x16u);
}

void sub_100057518(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0x12u);
}

uint64_t sub_100057538(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2080;
  *(void *)(a3 + 14) = a2;
  return result;
}

void *sub_100057550(void *result, uint64_t a2, int a3, float a4)
{
  if (v4 >= 0) {
    uint64_t v5 = result;
  }
  else {
    uint64_t v5 = (void *)*result;
  }
  *(float *)a2 = a4;
  *(void *)(a2 + 4) = v5;
  *(_WORD *)(a2 + 12) = 1024;
  *(_DWORD *)(a2 + 14) = a3;
  return result;
}

void sub_100057594(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 0xEu);
}

id sub_1000575C8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  return v2;
}

uint64_t sub_100057604(uint64_t a1, unsigned char *a2)
{
  if (!a2) {
    return 0;
  }
  char v2 = *a2;
  if (!*a2) {
    return 0;
  }
  int v4 = a2 + 1;
  while (1)
  {
    if (*(_WORD *)(a1 + 2))
    {
      unsigned int v5 = *(unsigned __int16 *)(a1 + 4);
      if (*(unsigned __int16 *)(a1 + 2) - 1 > v5) {
        goto LABEL_9;
      }
    }
    if (!*(unsigned char *)a1) {
      return 0;
    }
    if (!sub_10026327C(a1)) {
      return 106;
    }
    char v2 = *(v4 - 1);
    unsigned int v5 = *(unsigned __int16 *)(a1 + 4);
LABEL_9:
    uint64_t v6 = *(void *)(a1 + 8);
    *(_WORD *)(a1 + 4) = v5 + 1;
    *(unsigned char *)(v6 + v5) = v2;
    int v7 = *v4++;
    char v2 = v7;
    if (!v7) {
      return 0;
    }
  }
}

uint64_t sub_100057698(uint64_t a1, unsigned int a2, int a3)
{
  if ((a3 - 9) >= 0xFFFFFFF8) {
    int v3 = a3;
  }
  else {
    int v3 = 8;
  }
  int v4 = &v7;
  char v7 = 0;
  HIBYTE(v6) = 0;
  do
  {
    *--int v4 = a0123456789abcd_0[a2 & 0xF];
    a2 >>= 4;
    --v3;
  }
  while (v3);
  return sub_100057604(a1, v4);
}

uint64_t sub_100057728(uint64_t a1, unsigned __int8 *a2, char **a3)
{
  int v3 = *a2;
  if (*a2)
  {
    int v4 = a2;
    while (1)
    {
      if (!*(_WORD *)(a1 + 2) || *(unsigned __int16 *)(a1 + 2) - 1 <= *(unsigned __int16 *)(a1 + 4))
      {
        if (!*(unsigned char *)a1) {
          return 0;
        }
        if (!sub_10026327C(a1)) {
          return 106;
        }
        int v3 = *v4;
      }
      if (v3 == 37) {
        break;
      }
      uint64_t v137 = *(void *)(a1 + 8);
      uint64_t v138 = *(unsigned __int16 *)(a1 + 4);
      *(_WORD *)(a1 + 4) = v138 + 1;
      *(unsigned char *)(v137 + v138) = v3;
LABEL_278:
      int v139 = *++v4;
      int v3 = v139;
      if (!v139) {
        return 0;
      }
    }
    uint64_t v6 = 0;
    uint64_t v145 = 0;
    char v144 = 0;
    int v7 = 0;
    char v8 = 1;
    char v146 = 1;
    char v147 = 0;
    while (1)
    {
      if ((v8 & 1) == 0) {
        goto LABEL_278;
      }
      uint64_t v10 = v4 + 1;
      unsigned int v9 = v4[1];
      uint64_t result = 115;
      if (v9 > 0x6B) {
        break;
      }
      unsigned int v12 = v9 - 33;
      uint64_t v13 = 1;
      char v8 = 1;
      switch(v12)
      {
        case 0u:
          uint64_t v14 = a3++;
          sub_10025E0A8(*(unsigned int *)v14);
          uint64_t v16 = v15;
          goto LABEL_272;
        case 2u:
          sub_100057604(a1, "0x");
          goto LABEL_128;
        case 4u:
          char v8 = 0;
          uint64_t v70 = *(void *)(a1 + 8);
          uint64_t v71 = *(unsigned __int16 *)(a1 + 4);
          *(_WORD *)(a1 + 4) = v71 + 1;
          *(unsigned char *)(v70 + v71) = 37;
          goto LABEL_274;
        case 9u:
          uint64_t v72 = (unsigned __int8 **)a3++;
          uint64_t v73 = *v72;
          if (!*v72) {
            goto LABEL_168;
          }
          uint64_t v149 = 0;
          uint64_t v150 = 0;
          sub_10022A6F4(&v149, v73, 0);
          if (*v73)
          {
            unint64_t v74 = 0;
            do
            {
              unsigned int v75 = *((unsigned __int8 *)&v149 + v74);
              char v152 = 0;
              int v76 = -2;
              uint64_t v77 = &v152;
              uint64_t v151 = 0;
              do
              {
                *--uint64_t v77 = a0123456789abcd_0[v75 & 0xF];
                v75 >>= 4;
                BOOL v27 = __CFADD__(v76++, 1);
              }
              while (!v27);
              sub_100057604(a1, v77);
              ++v74;
            }
            while (v74 < *v73);
          }
          break;
        case 0xAu:
          goto LABEL_275;
        case 0xCu:
          char v146 = 0;
          goto LABEL_274;
        case 0xEu:
          unint64_t v78 = a3++;
          uint64_t v16 = *v78;
          if (*v78)
          {
            for (uint64_t i = v16 + 1; ; ++i)
            {
              int v80 = *(i - 1);
              if (v80 == 47 || v80 == 92)
              {
                uint64_t v16 = i;
              }
              else if (!*(i - 1))
              {
                goto LABEL_272;
              }
            }
          }
          sub_100057604(a1, "(null)");
          uint64_t v16 = 0;
          goto LABEL_272;
        case 0xFu:
          LOBYTE(v145) = ((__int16)v7 < 1) | v145;
          if ((__int16)v7 >= 1) {
            v7 *= 10;
          }
          goto LABEL_128;
        case 0x10u:
          int v7 = (10 * v7) | 1;
          goto LABEL_274;
        case 0x11u:
          int v81 = 2;
          goto LABEL_127;
        case 0x12u:
          int v81 = 3;
          goto LABEL_127;
        case 0x13u:
          int v81 = 4;
          goto LABEL_127;
        case 0x14u:
          int v81 = 5;
          goto LABEL_127;
        case 0x15u:
          int v81 = 6;
          goto LABEL_127;
        case 0x16u:
          int v81 = 7;
          goto LABEL_127;
        case 0x17u:
          int v81 = 8;
          goto LABEL_127;
        case 0x18u:
          int v81 = 9;
LABEL_127:
          int v7 = v81 + 10 * v7;
LABEL_128:
          char v8 = 1;
          goto LABEL_274;
        case 0x19u:
          uint64_t v82 = a3++;
          uint64_t v83 = *v82;
          if (!*v82) {
            goto LABEL_168;
          }
          for (uint64_t j = 0; j != 6; ++j)
          {
            if (j) {
              sub_100057604(a1, ":");
            }
            unsigned int v85 = v83[j];
            LOBYTE(v150) = 0;
            int v86 = -2;
            unint64_t v87 = &v150;
            uint64_t v149 = 0;
            do
            {
              *((unsigned char *)v87 - 1) = a0123456789abcd_0[v85 & 0xF];
              unint64_t v87 = (uint64_t *)((char *)v87 - 1);
              v85 >>= 4;
              BOOL v27 = __CFADD__(v86++, 1);
            }
            while (!v27);
            sub_100057604(a1, v87);
          }
          break;
        case 0x1Eu:
          char v147 = 1;
          goto LABEL_274;
        case 0x1Fu:
          long long v88 = a3;
          int v89 = *a3;
          a3 += 2;
          if (!v89) {
            goto LABEL_168;
          }
          uint64_t v90 = *((unsigned int *)v88 + 2);
          if (v90 > 0x8000) {
            return 101;
          }
          if (!(_WORD)v7) {
            int v7 = 16;
          }
          if (v90)
          {
            uint64_t v91 = 0;
            while (v91 != 160)
            {
              unsigned int v92 = v89[v91];
              LOBYTE(v150) = 0;
              int v93 = -2;
              unsigned int v94 = &v150;
              uint64_t v149 = 0;
              do
              {
                *((unsigned char *)v94 - 1) = a0123456789abcd_0[v92 & 0xF];
                unsigned int v94 = (uint64_t *)((char *)v94 - 1);
                v92 >>= 4;
                BOOL v27 = __CFADD__(v93++, 1);
              }
              while (!v27);
              sub_100057604(a1, v94);
              if (((v91 != v90 - 1) & v146) == 1) {
                sub_1002634E0(a1, 1);
              }
              if (++v91 == v90) {
                goto LABEL_230;
              }
            }
            sub_100057604(a1, " ...");
LABEL_230:
            char v8 = 0;
LABEL_231:
            uint64_t v13 = v6;
            goto LABEL_275;
          }
          break;
        case 0x21u:
          uint64_t v95 = a3++;
          if (*(_DWORD *)v95) {
            uint64_t v16 = "TRUE";
          }
          else {
            uint64_t v16 = "FALSE";
          }
          goto LABEL_272;
        case 0x32u:
          goto LABEL_87;
        case 0x33u:
          size_t v96 = a3++;
          long long v97 = *v96;
          uint64_t v149 = 0;
          if (!v97)
          {
            long long v97 = (char *)&v149;
            sub_100026C30((uint64_t)&v149);
          }
          int v98 = *(_DWORD *)v97;
          unint64_t v99 = *((__int16 *)v97 + 2);
          uint64_t v100 = ".";
          if (v99 < 0x64) {
            uint64_t v100 = ".0";
          }
          if (v99 >= 0xA) {
            uint64_t v101 = (char *)v100;
          }
          else {
            uint64_t v101 = ".00";
          }
          sub_100263854(a1, v98 & 0x1FFF);
          sub_100057604(a1, v101);
          unint64_t v102 = v99;
          uint64_t v103 = a1;
          goto LABEL_226;
        case 0x3Au:
          xpc_object_t v104 = (int *)a3++;
          int v105 = *v104;
          if (v105 > 88)
          {
            switch(v105)
            {
              case 'b':
                uint64_t v16 = "\x1B[0;34m";
                break;
              case 'c':
                uint64_t v16 = "\x1B[0;36m";
                break;
              case 'd':
LABEL_255:
                uint64_t v16 = "\x1B[1;30m";
                break;
              case 'e':
              case 'f':
              case 'h':
              case 'i':
              case 'j':
              case 'k':
              case 'n':
              case 'o':
              case 'p':
              case 'q':
                goto LABEL_261;
              case 'g':
                uint64_t v16 = "\x1B[0;32m";
                break;
              case 'l':
LABEL_256:
                uint64_t v16 = "\x1B[0;37m";
                break;
              case 'm':
                uint64_t v16 = "\x1B[0;35m";
                break;
              case 'r':
                uint64_t v16 = "\x1B[0;31m";
                break;
              default:
                if (v105 == 89)
                {
                  uint64_t v16 = "\x1B[1;33m";
                }
                else if (v105 == 121)
                {
                  uint64_t v16 = "\x1B[0;33m";
                }
                else
                {
LABEL_261:
                  uint64_t v16 = "\x1B[0;39;49m";
                }
                break;
            }
          }
          else
          {
            switch(v105)
            {
              case 'B':
                uint64_t v16 = "\x1B[1;34m";
                goto LABEL_272;
              case 'C':
                uint64_t v16 = "\x1B[1;36m";
                goto LABEL_272;
              case 'D':
                goto LABEL_255;
              case 'E':
              case 'F':
              case 'H':
              case 'I':
              case 'J':
              case 'K':
              case 'N':
              case 'O':
              case 'P':
              case 'Q':
                goto LABEL_261;
              case 'G':
                uint64_t v16 = "\x1B[1;32m";
                goto LABEL_272;
              case 'L':
                goto LABEL_256;
              case 'M':
                uint64_t v16 = "\x1B[1;35m";
                goto LABEL_272;
              case 'R':
                uint64_t v16 = "\x1B[1;31m";
                goto LABEL_272;
              default:
                if (v105 == 48)
                {
                  uint64_t v16 = "\x1B[0;30m";
                }
                else
                {
                  if (v105 != 87) {
                    goto LABEL_261;
                  }
                  uint64_t v16 = "\x1B[1;37m";
                }
                break;
            }
          }
          goto LABEL_272;
        case 0x3Du:
          uint64_t v106 = (uint64_t *)a3++;
          if (*v106)
          {
            sub_1001782B0(a1, *v106, 0);
          }
          else
          {
LABEL_168:
            uint64_t v16 = "(null)";
LABEL_272:
            sub_100057604(a1, v16);
          }
          goto LABEL_273;
        case 0x40u:
          uint64_t v107 = a3++;
          uint64_t v108 = *v107;
          if ((v147 & 1) == 0)
          {
            if (v108)
            {
              sub_100263310(a1, v108);
              goto LABEL_254;
            }
LABEL_221:
            uint64_t v129 = "(null)";
            goto LABEL_252;
          }
          unint64_t v109 = a3++;
          if (!v108) {
            goto LABEL_221;
          }
          int v110 = *(_DWORD *)v109;
          if ((_WORD)v110)
          {
            sub_1002633E8(a1, v108, (unsigned __int16)v110);
            goto LABEL_254;
          }
          uint64_t v129 = "(empty)";
LABEL_252:
          uint64_t v128 = a1;
          goto LABEL_253;
        case 0x41u:
          uint64_t v111 = a3++;
          int v112 = *(_DWORD *)v111;
          if (v147)
          {
            uint64_t v113 = (int *)a3++;
            int v7 = *v113;
            if (*v113 << 16 > 0x200000) {
              return result;
            }
          }
          else if (!(_WORD)v7)
          {
            int v7 = 32;
            goto LABEL_234;
          }
          if ((__int16)v7 < 1) {
            goto LABEL_254;
          }
LABEL_234:
          unsigned int v135 = 0x80000000 >> -(char)v7;
          do
          {
            if ((v135 & v112) != 0) {
              int v136 = "1";
            }
            else {
              int v136 = "0";
            }
            sub_100057604(a1, v136);
            BOOL v27 = v135 >= 2;
            v135 >>= 1;
          }
          while (v27);
          char v147 = 0;
          break;
        case 0x42u:
          char v8 = 0;
          uint64_t v114 = a3++;
          LODWORD(v114) = *(_DWORD *)v114;
          uint64_t v115 = *(void *)(a1 + 8);
          uint64_t v116 = *(unsigned __int16 *)(a1 + 4);
          *(_WORD *)(a1 + 4) = v116 + 1;
          *(unsigned char *)(v115 + v116) = (_BYTE)v114;
          goto LABEL_274;
        case 0x43u:
          xpc_object_t v117 = (int *)a3++;
          int v118 = *v117;
          BOOL v119 = "+";
          if ((v6 & 1) == 0) {
            BOOL v119 = 0;
          }
          if (v118 >= 0) {
            uint64_t v120 = (char *)v119;
          }
          else {
            uint64_t v120 = "-";
          }
          if (v118 >= 0) {
            unint64_t v121 = v118;
          }
          else {
            unint64_t v121 = -v118;
          }
          LOWORD(v7) = v7 - ((v118 < 0) | v6 & 1);
          unsigned int v122 = v121;
          do
          {
            int v7 = (__int16)(v7 - 1);
            BOOL v123 = v7 >= 1 && v122 > 9;
            v122 /= 0xAu;
          }
          while (v123);
          if (v7 < 1) {
            goto LABEL_224;
          }
          if (v145)
          {
            sub_100057604(a1, v120);
            sub_1002631D8(a1, "000000000000000", (unsigned __int16)v7);
          }
          else
          {
            sub_1002634E0(a1, v7);
LABEL_224:
            sub_100057604(a1, v120);
          }
          uint64_t v103 = a1;
          unint64_t v102 = v121;
LABEL_226:
          sub_100263854(v103, v102);
          break;
        default:
          return result;
      }
LABEL_240:
      char v8 = 0;
      uint64_t v13 = v6;
LABEL_275:
      uint64_t v6 = v13;
      int v4 = v10;
      if ((__int16)v7 > 32) {
        return 115;
      }
    }
    switch(v4[1])
    {
      case 'p':
        long long v17 = a3++;
        uint64_t v151 = *v17;
        uint64_t v18 = *(void *)(a1 + 8);
        uint64_t v19 = *(unsigned __int16 *)(a1 + 4);
        *(_WORD *)(a1 + 4) = v19 + 1;
        *(unsigned char *)(v18 + v19) = 48;
        uint64_t v20 = *(void *)(a1 + 8);
        uint64_t v21 = *(unsigned __int16 *)(a1 + 4);
        *(_WORD *)(a1 + 4) = v21 + 1;
        *(unsigned char *)(v20 + v21) = 120;
        uint64_t v22 = 7;
        do
        {
          uint64_t v23 = v22;
          unsigned int v24 = *((unsigned __int8 *)&v151 + v22);
          LOBYTE(v150) = 0;
          uint64_t v149 = 0;
          int v25 = -2;
          uint64_t v26 = &v150;
          do
          {
            *((unsigned char *)v26 - 1) = a0123456789abcd_0[v24 & 0xF];
            uint64_t v26 = (uint64_t *)((char *)v26 - 1);
            v24 >>= 4;
            BOOL v27 = __CFADD__(v25++, 1);
          }
          while (!v27);
          sub_100057604(a1, v26);
          uint64_t v22 = v23 - 1;
        }
        while (v23);
        goto LABEL_273;
      case 'q':
      case 'r':
      case 't':
      case 'v':
      case 'w':
        return result;
      case 's':
        if ((v145 & 0x100000000) != 0)
        {
LABEL_87:
          __int16 v61 = (unsigned __int16 **)a3++;
          int v62 = *v61;
          if (v147)
          {
            __int16 v63 = a3++;
            if (v62)
            {
              int v64 = *(_DWORD *)v63;
              if ((_WORD)v64)
              {
                int v65 = (unsigned __int16)v64;
                uint64_t v66 = a1;
LABEL_206:
                sub_1002638E8(v66, v62, v65);
                goto LABEL_254;
              }
              uint64_t v128 = a1;
              uint64_t v129 = "(empty)";
              goto LABEL_253;
            }
          }
          else if (v62)
          {
            uint64_t v66 = a1;
            int v65 = 0xFFFF;
            goto LABEL_206;
          }
          uint64_t v128 = a1;
          uint64_t v129 = "(null)";
LABEL_253:
          sub_100057604(v128, v129);
LABEL_254:
          char v147 = 0;
LABEL_273:
          char v8 = 0;
          goto LABEL_274;
        }
        id v130 = a3++;
        unint64_t v131 = *v130;
        if (v147)
        {
          id v132 = a3++;
          if (v131)
          {
            int v133 = *(_DWORD *)v132;
            if ((_WORD)v133)
            {
              sub_1002631D8(a1, v131, (unsigned __int16)v133);
LABEL_260:
              char v147 = 0;
              char v8 = 0;
              BYTE4(v145) = 0;
LABEL_274:
              uint64_t v13 = v6;
              goto LABEL_275;
            }
            uint64_t v134 = a1;
            unint64_t v131 = "(empty)";
LABEL_259:
            sub_100057604(v134, v131);
            goto LABEL_260;
          }
        }
        else if (v131)
        {
          uint64_t v134 = a1;
          goto LABEL_259;
        }
        uint64_t v134 = a1;
        unint64_t v131 = "(null)";
        goto LABEL_259;
      case 'u':
        if ((v145 & 0x100000000) != 0 || (v144 & 1) == 0)
        {
          CFAbsoluteTime v125 = a3++;
          unint64_t v68 = *(unsigned int *)v125;
        }
        else
        {
          __int16 v67 = (unint64_t *)a3++;
          unint64_t v68 = *v67;
        }
        if ((__int16)v7 >= 1)
        {
          int v126 = (unsigned __int16)v7;
          unint64_t v127 = v68;
          do
          {
            --v126;
            BOOL v123 = v127 > 9;
            v127 /= 0xAuLL;
          }
          while (v123);
          if (v126 >= 1) {
            sub_1002634E0(a1, v126);
          }
        }
        sub_100263854(a1, v68);
        goto LABEL_273;
      case 'x':
        if (!(_WORD)v7) {
          int v7 = 8;
        }
        __int16 v69 = (unsigned int *)a3++;
        sub_100057698(a1, *v69, (__int16)v7);
        goto LABEL_273;
      default:
        if (v9 == 108)
        {
          unsigned int v124 = v4[2] - 98;
          if (v124 > 0x16) {
            return result;
          }
          if (((1 << v124) & 0x4A0007) != 0)
          {
            char v8 = 1;
            uint64_t v13 = v6;
          }
          else
          {
            if (v4[2] != 108 || v4[3] != 117) {
              return result;
            }
            char v8 = 1;
            uint64_t v13 = v6;
            char v144 = 1;
          }
          BYTE4(v145) = 1;
          goto LABEL_275;
        }
        if (v9 != 126) {
          return result;
        }
        char v28 = a3;
        unint64_t v29 = *a3;
        a3 += 2;
        if (!v29)
        {
          sub_100057604(a1, "(null)");
          goto LABEL_240;
        }
        unsigned int v30 = *((_DWORD *)v28 + 2);
        if (v30 > 3) {
          goto LABEL_240;
        }
        int v31 = *((_DWORD *)v29 + 2);
        if (!v31) {
          goto LABEL_240;
        }
        if (!*(void *)v29)
        {
          sub_10025B8C0();
          int v31 = *((_DWORD *)v29 + 2);
        }
        unsigned __int16 v32 = v31;
        if (v31 <= 0)
        {
          sub_10025B8C0();
          unsigned __int16 v32 = *((_WORD *)v29 + 4);
        }
        uint64_t v33 = *(void *)v29;
        unsigned int v143 = v32;
        if (*(void *)v29) {
          BOOL v34 = v32 == 0;
        }
        else {
          BOOL v34 = 1;
        }
        if (v34) {
          sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/support/oi_varstring.c", 388, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
        }
        if (!v32)
        {
          char v8 = 0;
          uint64_t v13 = v6;
          goto LABEL_275;
        }
        unsigned int v35 = 0;
        unsigned int v36 = 0;
        unsigned int v141 = v30;
        unsigned __int16 v142 = v32;
        break;
    }
    while (2)
    {
      switch(v30)
      {
        case 0u:
          sub_10025B8C0();
          goto LABEL_67;
        case 1u:
          if (v143 <= (unsigned __int16)v36) {
            sub_10025B8C0();
          }
          unsigned int v37 = v36 + 1;
          unsigned int v35 = *(unsigned __int8 *)(v33 + (unsigned __int16)v36);
          if (v35 < 0xC0)
          {
            ++v36;
            goto LABEL_67;
          }
          if (v35 <= 0xFC)
          {
            int v39 = 5;
            for (unsigned int k = 252; k >= v35; unsigned int k = (2 * k) & 0xF8)
              --v39;
          }
          else
          {
            unsigned int k = 252;
            int v39 = 5;
          }
          if (v39 + (unsigned __int16)v37 > (int)v143)
          {
            unsigned int v140 = v37;
            sub_10025B8C0();
            unsigned int v37 = v140;
          }
          v35 &= ~k;
          if (!v39)
          {
            unsigned int v36 = v37;
            goto LABEL_57;
          }
          int v50 = v39;
          unsigned int v51 = v37;
          unsigned int v30 = v141;
          do
          {
            uint64_t v52 = (unsigned __int16)v51++;
            unsigned int v35 = *(unsigned char *)(v33 + v52) & 0x3F | (v35 << 6);
            --v50;
          }
          while (v50);
          unsigned int v36 = v37 + v39;
          goto LABEL_67;
        case 2u:
          unsigned int v40 = (unsigned __int16)v36 + 2;
          if (v40 > v143) {
            sub_10025B8C0();
          }
          int v41 = (unsigned __int8 *)(v33 + (unsigned __int16)v36);
          int v42 = *v41;
          LODWORD(v41) = v41[1];
          unsigned int v35 = v42 | (v41 << 8);
          if ((v41 & 0xFC) != 0xD8) {
            goto LABEL_56;
          }
          unsigned int v43 = (unsigned __int16)(v36 + 2);
          unsigned int v36 = v43 + 2;
          if (v43 + 2 > v143) {
            sub_10025B8C0();
          }
          uint64_t v44 = (unsigned __int8 *)(v33 + v43);
          uint64_t v45 = v44 + 1;
          goto LABEL_55;
        case 3u:
          unsigned int v40 = (unsigned __int16)v36 + 2;
          if (v40 > v143) {
            sub_10025B8C0();
          }
          int v46 = (unsigned __int8 *)(v33 + (unsigned __int16)v36);
          int v47 = v46[1];
          LODWORD(v46) = *v46;
          unsigned int v35 = v47 | (v46 << 8);
          if ((v46 & 0xFC) == 0xD8)
          {
            unsigned int v48 = (unsigned __int16)(v36 + 2);
            unsigned int v36 = v48 + 2;
            if (v48 + 2 > v143) {
              sub_10025B8C0();
            }
            uint64_t v45 = (unsigned char *)(v33 + v48);
            uint64_t v44 = v45 + 1;
LABEL_55:
            unsigned int v35 = (*v44 | ((*v45 & 3) << 8) & 0x3FF | ((v35 & 0x3FF) << 10)) + 0x10000;
            unsigned int v49 = *(unsigned __int16 *)(a1 + 2);
            unsigned int v30 = v141;
          }
          else
          {
LABEL_56:
            unsigned int v36 = v40;
LABEL_57:
            unsigned int v30 = v141;
LABEL_67:
            unsigned int v49 = *(unsigned __int16 *)(a1 + 2);
            if (v35 <= 0xFE)
            {
              if (!*(_WORD *)(a1 + 2) || (unsigned int v53 = *(unsigned __int16 *)(a1 + 4), v49 - 1 <= v53))
              {
                char v8 = *(unsigned char *)a1;
                if (!*(unsigned char *)a1) {
                  goto LABEL_231;
                }
                if (!sub_10026327C(a1)) {
                  goto LABEL_230;
                }
                unsigned int v53 = *(unsigned __int16 *)(a1 + 4);
              }
              uint64_t v54 = *(void *)(a1 + 8);
              *(_WORD *)(a1 + 4) = v53 + 1;
              *(unsigned char *)(v54 + v53) = v35;
LABEL_83:
              if ((unsigned __int16)v36 == v142) {
                goto LABEL_230;
              }
              continue;
            }
          }
          unsigned int v55 = v49 - 7;
          if (v49 < 7 || (unsigned int v56 = *(unsigned __int16 *)(a1 + 4), v55 <= v56))
          {
            char v8 = *(unsigned char *)a1;
            if (!*(unsigned char *)a1) {
              goto LABEL_231;
            }
            if (!sub_10026327C(a1)) {
              goto LABEL_230;
            }
            unsigned int v56 = *(unsigned __int16 *)(a1 + 4);
          }
          uint64_t v57 = *(void *)(a1 + 8);
          *(_WORD *)(a1 + 4) = v56 + 1;
          *(unsigned char *)(v57 + v56) = 92;
          LOBYTE(v150) = 0;
          uint64_t v149 = 0;
          int v58 = -6;
          unsigned int v59 = v35;
          int v60 = &v150;
          do
          {
            *((unsigned char *)v60 - 1) = a0123456789abcd_0[v59 & 0xF];
            int v60 = (uint64_t *)((char *)v60 - 1);
            v59 >>= 4;
            BOOL v27 = __CFADD__(v58++, 1);
          }
          while (!v27);
          if (sub_100057604(a1, v60)) {
            goto LABEL_230;
          }
          goto LABEL_83;
        default:
          goto LABEL_67;
      }
    }
  }
  return 0;
}

uint64_t sub_100058654()
{
  return 1;
}

uint64_t sub_100058660(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_10001BDE0(134, a1, a3, a4, a5, a6, a7, a8, a2);
}

uint64_t sub_100058694(int a1, _DWORD *a2)
{
  if (!word_100A04D78) {
    return 0;
  }
  uint64_t v3 = 0;
  for (uint64_t result = qword_100A04D88;
        *(unsigned __int8 *)(result + 8) != a1 && *(unsigned __int8 *)(result + 9) != a1;
        result += 32)
  {
    if (++v3 >= (unint64_t)(unsigned __int16)word_100A04D78) {
      return 0;
    }
  }
  *a2 = v3;
  return result;
}

void sub_1000586E8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(unsigned char *)(a1 + 15))
  {
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c");
  }
  else
  {
    unsigned int v5 = *(unsigned __int16 *)(a1 + 10);
    uint64_t v6 = *(unsigned __int16 *)(a1 + 12);
    if (v5 != v6)
    {
      if (*(unsigned char *)(a1 + 14) != 1) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/corestack/le/LE_Events.c", 1564, "(*pBs).__RWFlag == BYTESTREAM_READ");
      }
      if (v5 <= v6)
      {
        *(unsigned char *)(a1 + 15) = 1;
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"Error retreiving the subevent code.", v17, v18, v19, v20, v21, v22, v23, v37);
          unsigned int v24 = sub_100050B4C(0x42u);
          if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            goto LABEL_6;
          }
        }
      }
      else
      {
        uint64_t v15 = *(void *)a1;
        *(_WORD *)(a1 + 12) = v6 + 1;
        uint64_t v16 = *(unsigned __int8 *)(v15 + v6);
        switch(*(unsigned char *)(v15 + v6))
        {
          case 1:
            sub_10021D484((uint64_t *)a1, a4);
            return;
          case 2:
            sub_10021D97C((uint64_t *)a1, a4);
            return;
          case 3:
            sub_10021DF54((uint64_t *)a1);
            return;
          case 4:
            sub_10021E240((uint64_t *)a1);
            return;
          case 5:
            sub_10021E494((uint64_t *)a1);
            return;
          case 6:
            sub_10021E694(a1);
            return;
          case 7:
            sub_10021E8F8((uint64_t *)a1);
            return;
          case 0xA:
            int v36 = 1;
            goto LABEL_94;
          case 0xC:
            sub_10021EAD8((uint64_t *)a1);
            return;
          case 0xD:
            sub_100007EB4((uint64_t *)a1, a4);
            return;
          case 0xE:
            int v25 = 1;
            goto LABEL_35;
          case 0xF:
            int v26 = 1;
            goto LABEL_90;
          case 0x10:
            sub_100220578(a1);
            return;
          case 0x12:
            sub_10021EE50((uint64_t *)a1);
            return;
          case 0x14:
            sub_10021ECA0((uint64_t *)a1);
            return;
          case 0x18:
            int v27 = 1;
            goto LABEL_83;
          case 0x21:
            sub_100220E1C((uint64_t *)a1);
            return;
          case 0x23:
            sub_100222DC4((uint64_t *)a1);
            return;
          case 0x24:
            int v25 = 2;
LABEL_35:
            sub_10021F860(v25, (uint64_t *)a1);
            break;
          case 0x25:
            int v26 = 2;
LABEL_90:
            sub_10021FEF8(v26, (uint64_t *)a1);
            break;
          case 0x26:
            int v27 = 2;
LABEL_83:
            sub_100220678(v27, (uint64_t *)a1);
            break;
          case 0x27:
            sub_100223164((uint64_t *)a1);
            break;
          case 0x28:
            sub_10022336C((uint64_t *)a1);
            break;
          case 0x29:
            int v36 = 2;
LABEL_94:
            sub_10021F0E8(v36, (uint64_t *)a1, a4);
            break;
          case 0x2D:
            sub_100221198((uint64_t *)a1);
            break;
          case 0x2E:
            sub_100221850((uint64_t *)a1);
            break;
          case 0x2F:
          case 0x34:
            sub_100221678((uint64_t *)a1);
            break;
          case 0x30:
            sub_1002219C8((uint64_t *)a1);
            break;
          case 0x31:
            sub_100221EDC((uint64_t *)a1);
            break;
          case 0x32:
            sub_100222728((uint64_t *)a1);
            break;
          case 0x33:
            return;
          default:
            if (sub_100058654())
            {
              sub_100056E24((uint64_t)"Unknown LE event code 0x%x", v28, v29, v30, v31, v32, v33, v34, v16);
              unsigned int v35 = sub_100050B4C(0x42u);
              if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
                goto LABEL_6;
              }
            }
            break;
        }
      }
      return;
    }
  }
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"Error, the LE command is %d bytes.", v7, v8, v9, v10, v11, v12, v13, 0);
    uint64_t v14 = sub_100050B4C(0x42u);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
LABEL_6:
    }
      sub_100744F6C();
  }
}

uint64_t sub_100058C58(unsigned __int8 *a1, uint64_t a2, uint8x8_t a3, int16x8_t a4)
{
  if (!a1) {
    goto LABEL_126;
  }
  unsigned int v5 = (unsigned __int8 *)(a2 + 5884);
  unsigned int v6 = *a1;
  *(unsigned char *)a2 = v6 & 0xF;
  *(void *)(a2 + 8) = a1 + 1;
  *(unsigned char *)(a2 + 2555) = a1[24];
  *(unsigned char *)(a2 + 5946) = v6 >> 4;
  *(_WORD *)(a2 + 5968) = *((_WORD *)a1 + 13);
  *(_DWORD *)(a2 + 5970) = *((_DWORD *)a1 + 7);
  *(unsigned char *)(a2 + 5974) = a1[43];
  *(unsigned char *)(a2 + 5981) = a1[44];
  a3.i32[0] = *(_DWORD *)(a1 + 45);
  int16x4_t v7 = (int16x4_t)vmovl_u8(a3).u64[0];
  *(int16x4_t *)a4.i8 = vrev32_s16(v7);
  a4.i32[0] = v7.i32[0];
  *(_DWORD *)(a2 + 5982) = vmovn_s16(a4).u32[0];
  *(_WORD *)(a2 + 5986) = *(_WORD *)(a1 + 49);
  *(unsigned char *)(a2 + 2556) = a1[25];
  *(void *)(a2 + 5992) = a1 + 51;
  unsigned int v8 = *((unsigned __int16 *)a1 + 4);
  *(_WORD *)(a2 + 6022) = v8;
  if (!v8 || (uint64_t v9 = *((void *)a1 + 2)) == 0)
  {
LABEL_126:
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Response is empty.", v106, v107, v108, v109, v110, v111, v112, v161);
      uint64_t v113 = sub_100050B4C(0x42u);
      if (os_log_type_enabled(v113, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)buf = 136446210;
        xpc_object_t v175 = sub_100050714();
        _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_INFO, " %{public}s", buf, 0xCu);
      }
    }
    return 0;
  }
  char v169 = 0;
  int v10 = 0;
  if (v8 >= 0x672) {
    unsigned int v11 = 1650;
  }
  else {
    unsigned int v11 = v8;
  }
  uint64_t v166 = a2 + 6016;
  uint64_t v165 = a2 + 5907;
  uint64_t v164 = (void *)(a2 + 5914);
  unsigned int v167 = (void *)(a2 + 5633);
  double v170 = (unsigned __int8 *)(a2 + 5068);
  uint64_t v171 = a2 + 2568;
  __uuid_t dst = (void *)(a2 + 2521);
  xpc_object_t v172 = (unsigned __int8 *)(a2 + 2520);
  uint64_t v173 = a2 + 20;
  while (2)
  {
    if (v8 <= (unsigned __int16)v10) {
      goto LABEL_110;
    }
    uint64_t v12 = *(unsigned __int8 *)(v9 + (unsigned __int16)v10);
    if (!*(unsigned char *)(v9 + (unsigned __int16)v10)) {
      goto LABEL_110;
    }
    unsigned __int8 v13 = v12 - 1;
    if (v12 == 1 || v12 + (unsigned __int16)(v10 + 1) > v11)
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"parseADResponse Error [%@] Invalid advertising response data size (%u + %u)", v115, v116, v117, v118, v119, v120, v121, v9);
        unsigned int v122 = sub_100050B4C(0x42u);
        if (os_log_type_enabled(v122, OS_LOG_TYPE_ERROR)) {
          sub_10074A89C();
        }
      }
      uint64_t v17 = 4059;
      goto LABEL_107;
    }
    uint64_t v15 = (unsigned __int16)v10 + 2;
    int v16 = v15 + v13;
    uint64_t v17 = 0;
    switch(*(unsigned char *)(v9 + (unsigned __int16)v10 + 1))
    {
      case 1:
        uint64_t v17 = 0;
        *(unsigned char *)(a2 + 16) = *(unsigned char *)(v9 + v15);
        goto LABEL_70;
      case 2:
      case 3:
        uint64_t v18 = v9 + (unsigned __int16)v15;
        uint64_t v19 = (v12 - 1);
        uint64_t v20 = 2;
        goto LABEL_18;
      case 4:
      case 5:
        uint64_t v18 = v9 + (unsigned __int16)v15;
        uint64_t v19 = (v12 - 1);
        uint64_t v20 = 4;
        goto LABEL_18;
      case 6:
      case 7:
        uint64_t v18 = v9 + (unsigned __int16)v15;
        uint64_t v19 = (v12 - 1);
        uint64_t v20 = 16;
LABEL_18:
        uint64_t v22 = v172;
        uint64_t v21 = v173;
        goto LABEL_50;
      case 8:
        if ((v12 - 1) < 0x1Fu)
        {
          size_t v79 = (v12 - 1);
          char v80 = 1;
          goto LABEL_64;
        }
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"parseADResponse Error [%@] Invalid size %d for LE_ADV_RESPONSE_FORMAT_PARTIAL_NAME)", v33, v34, v35, v36, v37, v38, v39, v9);
          unsigned int v40 = sub_100050B4C(0x42u);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR)) {
            goto LABEL_32;
          }
        }
        goto LABEL_69;
      case 9:
        if ((v12 - 1) < 0x1Fu)
        {
          size_t v79 = (v12 - 1);
          char v80 = 2;
LABEL_64:
          *(unsigned char *)(a2 + 2552) = v80;
          memmove(__dst, (const void *)(v9 + (unsigned __int16)v15), v79);
          uint64_t v17 = 0;
          *(unsigned char *)(a2 + v13 + 2521) = 0;
          goto LABEL_70;
        }
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"parseADResponse Error [%@] Invalid size %d for LE_ADV_RESPONSE_FORMAT_COMPLETE_NAME)", v43, v44, v45, v46, v47, v48, v49, v9);
          unsigned int v40 = sub_100050B4C(0x42u);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
LABEL_32:
            int v41 = sub_100050714();
            *(_DWORD *)buf = 136446466;
            xpc_object_t v175 = v41;
            __int16 v176 = 1024;
            int v177 = 0;
            int v42 = v40;
            goto LABEL_59;
          }
        }
        goto LABEL_69;
      case 0xA:
        uint64_t v17 = 0;
        *(unsigned char *)(a2 + 2553) = *(unsigned char *)(v9 + v15);
        *(unsigned char *)(a2 + 2554) = 1;
        goto LABEL_70;
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xE:
      case 0xF:
      case 0x11:
      case 0x13:
      case 0x17:
      case 0x18:
      case 0x1C:
      case 0x1D:
      case 0x1E:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x27:
      case 0x28:
      case 0x29:
      case 0x2A:
      case 0x2B:
      case 0x2C:
      case 0x2D:
        goto LABEL_27;
      case 0x10:
        goto LABEL_70;
      case 0x12:
        uint64_t v17 = 0;
        *(_WORD *)(a2 + 2562) = *(_WORD *)(v9 + v15);
        *(_WORD *)(a2 + 2564) = *(_WORD *)(v9 + v15 + 2);
        goto LABEL_70;
      case 0x14:
        uint64_t v18 = v9 + (unsigned __int16)v15;
        uint64_t v19 = (v12 - 1);
        uint64_t v20 = 2;
        goto LABEL_49;
      case 0x15:
        uint64_t v18 = v9 + (unsigned __int16)v15;
        uint64_t v19 = (v12 - 1);
        uint64_t v20 = 16;
        goto LABEL_49;
      case 0x16:
        int v50 = (int8x16_t *)(v9 + (unsigned __int16)v15);
        uint64_t v51 = (v12 - 1);
        uint64_t v52 = 2;
        goto LABEL_53;
      case 0x19:
        uint64_t v17 = 0;
        *(_WORD *)(a2 + 2560) = *(_WORD *)(v9 + v15);
        goto LABEL_70;
      case 0x1A:
        uint64_t v17 = 0;
        *(_WORD *)(a2 + 2558) = *(_WORD *)(v9 + v15);
        goto LABEL_70;
      case 0x1B:
        if ((v12 - 1) == 7)
        {
          uint64_t v53 = v9 + (unsigned __int16)v15;
          int v54 = *(_DWORD *)v53;
          __int16 v55 = *(_WORD *)(v53 + 4);
          *(unsigned char *)(v165 + 6) = *(unsigned char *)(v53 + 6);
          *(_WORD *)(v165 + 4) = v55;
          *(_DWORD *)uint64_t v165 = v54;
          v5[22] = 1;
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"AD Response Parsing: LE BT Device Address %: Type %s", v56, v57, v58, v59, v60, v61, v62, v165);
            __int16 v63 = sub_100050B4C(0x42u);
            if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
            {
              int v64 = sub_100050714();
              *(_DWORD *)buf = 136446210;
              xpc_object_t v175 = v64;
              int v65 = v63;
              os_log_type_t v66 = OS_LOG_TYPE_DEFAULT;
LABEL_68:
              _os_log_impl((void *)&_mh_execute_header, v65, v66, " %{public}s", buf, 0xCu);
            }
          }
        }
        else if (sub_100058654())
        {
          sub_100056E24((uint64_t)"AD Response Parsing: size of LE BT Address %u in advertisement is not compliant with specification.", v81, v82, v83, v84, v85, v86, v87, v12);
          long long v88 = sub_100050B4C(0x42u);
          if (os_log_type_enabled(v88, OS_LOG_TYPE_INFO))
          {
            int v89 = sub_100050714();
            *(_DWORD *)buf = 136446210;
            xpc_object_t v175 = v89;
            int v65 = v88;
            os_log_type_t v66 = OS_LOG_TYPE_INFO;
            goto LABEL_68;
          }
        }
LABEL_69:
        uint64_t v17 = 0;
LABEL_70:
        if (!v17)
        {
          int v10 = v16;
          if ((unsigned __int16)v16 < 0x672u) {
            continue;
          }
        }
        if (v17) {
          goto LABEL_107;
        }
LABEL_110:
        uint64_t v17 = 0;
        *(unsigned char *)(a2 + 2557) = sub_100007040(*(unsigned __int8 *)(a2 + 16));
        return v17;
      case 0x1F:
        uint64_t v18 = v9 + (unsigned __int16)v15;
        uint64_t v19 = (v12 - 1);
        uint64_t v20 = 4;
LABEL_49:
        uint64_t v22 = v170;
        uint64_t v21 = v171;
LABEL_50:
        uint64_t v67 = sub_10022B0F0(v18, v19, v20, v21, v22);
        goto LABEL_54;
      case 0x20:
        int v50 = (int8x16_t *)(v9 + (unsigned __int16)v15);
        uint64_t v51 = (v12 - 1);
        uint64_t v52 = 4;
        goto LABEL_53;
      case 0x21:
        int v50 = (int8x16_t *)(v9 + (unsigned __int16)v15);
        uint64_t v51 = (v12 - 1);
        uint64_t v52 = 16;
LABEL_53:
        uint64_t v67 = sub_10022B274(v50, v51, v52, a2);
LABEL_54:
        uint64_t v17 = v67;
        goto LABEL_70;
      case 0x26:
        if ((v12 - 1) < 0x20u)
        {
          memmove(v164, (const void *)(v9 + (unsigned __int16)v15), (v12 - 1));
          uint64_t v17 = 0;
          v5[61] = v13;
          goto LABEL_70;
        }
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"Invalid size %d for LE_ADV_RESPONSE_FORMAT_TDS)", v68, v69, v70, v71, v72, v73, v74, (v12 - 1));
          unsigned int v75 = sub_100050B4C(0x42u);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_ERROR))
          {
            int v76 = sub_100050714();
            *(_DWORD *)buf = 136446466;
            xpc_object_t v175 = v76;
            __int16 v176 = 1024;
            int v177 = 0xFFFF;
            int v42 = v75;
LABEL_59:
            _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
          }
        }
        goto LABEL_69;
      case 0x2E:
        if ((v12 - 1) != 6) {
          goto LABEL_69;
        }
        uint64_t v17 = 0;
        uint64_t v77 = v9 + (unsigned __int16)v15;
        int v78 = *(_DWORD *)v77;
        *(_WORD *)(v166 + 4) = *(_WORD *)(v77 + 4);
        *(_DWORD *)uint64_t v166 = v78;
        goto LABEL_70;
      default:
        if (*(unsigned __int8 *)(v9 + (unsigned __int16)v10 + 1) != 255)
        {
LABEL_27:
          sub_10025B8C0();
          goto LABEL_69;
        }
        if ((v12 - 1) >= 0xFCu)
        {
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"parseADResponse Error [%@] Invalid size %d for LE_ADV_RESPONSE_FORMAT_MANUFACTURER", v131, v132, v133, v134, v135, v136, v137, v9);
            uint64_t v138 = sub_100050B4C(0x42u);
            uint64_t v17 = 162;
            if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
              goto LABEL_119;
            }
            goto LABEL_107;
          }
          goto LABEL_123;
        }
        if ((unsigned __int16)v10 + 3 < v8)
        {
          int v23 = *(unsigned __int16 *)(v9 + v15);
          if (v23 == 76)
          {
            int v90 = v10 + 4;
            unsigned int v91 = (unsigned __int16)(v10 + 4);
            while (1)
            {
              if (v91 >= (unsigned __int16)v16) {
                goto LABEL_96;
              }
              uint64_t v92 = (unsigned __int16)v90 + 1;
              uint64_t v93 = *(unsigned __int8 *)(v9 + (unsigned __int16)v90);
              if ((unsigned __int16)(v90 + 1) >= (unsigned __int16)v16) {
                break;
              }
              uint64_t v94 = v5[21];
              if (v94 <= 0x13)
              {
                v5[21] = v94 + 1;
                *(unsigned char *)(a2 + v94 + 5885) = v93;
              }
              if (v93 == 18) {
                v5[96] = 1;
              }
              if ((qword_100A19770 & (1 << v93)) != 0)
              {
                if (sub_100058654())
                {
                  sub_100056E24((uint64_t)"found MFGR packet %d, holding power assertion", v95, v96, v97, v98, v99, v100, v101, v93);
                  log = sub_100050B4C(0x42u);
                  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                  {
                    unint64_t v102 = sub_100050714();
                    *(_DWORD *)buf = 136446210;
                    xpc_object_t v175 = v102;
                    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
                  }
                }
                qword_100A0F430 = sub_10010BA04();
                uint64_t v92 = (unsigned __int16)v90 + 1;
                if (!dword_100A0F428)
                {
                  sub_10010C8D4();
                  sub_1000268E4((uint64_t)sub_10022B494, 0, 10, &dword_100A0F428);
                  uint64_t v92 = (unsigned __int16)v90 + 1;
                }
              }
              int v163 = v93;
              if (v93 == 1)
              {
                int v103 = 16;
                LODWORD(v104) = v92;
              }
              else
              {
                int v105 = v90;
                uint64_t v104 = (unsigned __int16)v90 + 2;
                if ((unsigned __int16)v104 >= (unsigned __int16)v16)
                {
                  if (sub_100058654())
                  {
                    sub_100056E24((uint64_t)"parseADResponse Error [%@] Invalid position %d for Apple type %d)", v146, v147, v148, v149, v150, v151, v152, v9);
                    uint64_t v138 = sub_100050B4C(0x42u);
                    uint64_t v17 = 162;
                    if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
                      goto LABEL_119;
                    }
                    goto LABEL_107;
                  }
                  goto LABEL_123;
                }
                int v103 = *(unsigned char *)(v9 + v92) & 0x1F;
                if (v103 == 31)
                {
                  int v103 = *(unsigned __int8 *)(v9 + v104) + 31;
                  LODWORD(v104) = v105 + 3;
                }
              }
              int v90 = v103 + v104;
              unsigned int v91 = (unsigned __int16)v90;
              if ((unsigned __int16)v90 > (unsigned __int16)v16)
              {
                if (sub_100058654())
                {
                  sub_100056E24((uint64_t)"parseADResponse Error [%@] Invalid length %d for Apple type %d)", v139, v140, v141, v142, v143, v144, v145, v9);
                  uint64_t v138 = sub_100050B4C(0x42u);
                  uint64_t v17 = 162;
                  if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR)) {
                    goto LABEL_119;
                  }
                  goto LABEL_107;
                }
LABEL_123:
                uint64_t v17 = 162;
                goto LABEL_107;
              }
              v169 |= v163 == 2;
            }
            if ((v169 & 1) == 0)
            {
              if (!sub_100058654()) {
                goto LABEL_123;
              }
              sub_100056E24((uint64_t)"parseADResponse Error [%@] Invalid position %d for Apple type %d)", v154, v155, v156, v157, v158, v159, v160, v9);
              uint64_t v138 = sub_100050B4C(0x42u);
              uint64_t v17 = 162;
              if (os_log_type_enabled(v138, OS_LOG_TYPE_ERROR))
              {
LABEL_119:
                uint64_t v153 = sub_100050714();
                *(_DWORD *)buf = 136446466;
                xpc_object_t v175 = v153;
                __int16 v176 = 1024;
                int v177 = 162;
                _os_log_error_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_ERROR, "%{public}s (status=%{bluetooth:OI_STATUS}u)", buf, 0x12u);
              }
LABEL_107:
              if (sub_100058654())
              {
                sub_100056E24((uint64_t)"Failed to parse AD response with error %!", v123, v124, v125, v126, v127, v128, v129, v17);
                id v130 = sub_100050B4C(0x42u);
                if (os_log_type_enabled(v130, OS_LOG_TYPE_ERROR)) {
                  sub_100744F6C();
                }
              }
              return v17;
            }
            char v169 = 1;
          }
          else if (v23 == 196)
          {
            if (sub_100058654())
            {
              sub_100056E24((uint64_t)"AD Response parsing: Manufacturer Data vendor 0x%4x", v24, v25, v26, v27, v28, v29, v30, 196);
              uint64_t v31 = sub_100050B4C(0x42u);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v32 = sub_100050714();
                *(_DWORD *)buf = 136446210;
                xpc_object_t v175 = v32;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
              }
            }
          }
        }
LABEL_96:
        memmove(v167, (const void *)(v9 + v15), v13);
        uint64_t v17 = 0;
        *unsigned int v5 = v13;
        goto LABEL_70;
    }
  }
}

void sub_10005986C(unsigned __int16 *a1)
{
  uint64_t v1 = qword_100A10030;
  char v2 = (void (*)(unsigned __int16 *, uint64_t))off_100A10020;
  int v4 = (_DWORD *)((char *)a1 + 1);
  int v3 = *(_DWORD *)((char *)a1 + 1);
  memset(ptr, 0, 15);
  if (v3) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = *((_DWORD *)a1 + 1) == 0;
  }
  if (v5) {
    return;
  }
  if (!*((unsigned char *)a1 + 58)) {
    goto LABEL_9;
  }
  int v7 = *(unsigned __int8 *)v4;
  if (v7 == 255)
  {
    *int v4 = *(_DWORD *)((char *)a1 + 51);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(a1 + 27);
LABEL_9:
    char v8 = *(unsigned char *)v4;
    goto LABEL_10;
  }
  char v8 = v7 - 2;
  *(unsigned char *)int v4 = v8;
LABEL_10:
  if (v8 == 1 && (a1[1] & 0xC0) == 0x40)
  {
    char v52 = 0;
    memset(v51, 0, sizeof(v51));
    if (!sub_100234CFC((unsigned char *)a1 + 1, (uint64_t)v51, &v52))
    {
      if (v52)
      {
        *int v4 = *(_DWORD *)v51;
        *(_DWORD *)((char *)v4 + 3) = *(_DWORD *)&v51[3];
      }
    }
  }
  int v9 = *((char *)a1 + 24);
  if (v9 <= 27)
  {
    if (v9 <= -40)
    {
      if (v9 >= 0xFFFFFFA1) {
        int v10 = (int)((double)(-40 - v9) / 5.0);
      }
      else {
        int v10 = 10;
      }
    }
    else
    {
      int v10 = 0;
    }
  }
  else
  {
    int v10 = 11;
  }
  unsigned int v11 = *((unsigned __int8 *)a1 + 44);
  if (v11 <= 3)
  {
    uint64_t v12 = (int *)&xmmword_100A0FFB8 + v10;
    if (v11 == 1)
    {
      int v13 = *v12;
    }
    else
    {
      int v14 = v12[12];
      v12 += 12;
      int v13 = v14;
    }
    if (v13 != -1) {
      *uint64_t v12 = v13 + 1;
    }
  }
  unsigned int v15 = *((unsigned __int8 *)a1 + 28);
  BOOL v16 = v15 < 3;
  if (v15 >= 3)
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Invalid packet status:%d", v17, v18, v19, v20, v21, v22, v23, *((unsigned __int8 *)a1 + 28));
      uint64_t v24 = sub_100050B4C(0x42u);
      if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    sub_10025B8C0();
  }
  if (sub_100059E10(qword_100A10058)
    && (uint64_t v25 = (void *)sub_1002599CC(qword_100A10058), (ptr[0] = v25) != 0))
  {
    while (1)
    {
      uint64_t v26 = sub_1002599F0((uint64_t)v25);
      if (*v4 == *(_DWORD *)(v26 + 1) && *(_DWORD *)((char *)v4 + 3) == *(_DWORD *)(v26 + 4)) {
        break;
      }
      sub_1002599D4((uint64_t)ptr);
      uint64_t v25 = ptr[0];
      if (!ptr[0]) {
        goto LABEL_40;
      }
    }
    uint64_t v28 = (unsigned __int16 *)v26;
    sub_100259A44(qword_100A10058, (void *)ptr[0], 0);
    if (*((unsigned char *)v28 + 28) != 1) {
      sub_10025B8C0();
    }
  }
  else
  {
LABEL_40:
    if (*((unsigned char *)a1 + 28) != 1)
    {
      uint64_t v28 = 0;
      goto LABEL_47;
    }
    uint64_t v28 = (unsigned __int16 *)sub_100022FE8(0x50uLL);
    *(_OWORD *)uint64_t v28 = 0u;
    *((_OWORD *)v28 + 1) = 0u;
    *((_OWORD *)v28 + 2) = 0u;
    *((_OWORD *)v28 + 3) = 0u;
    *((_OWORD *)v28 + 4) = 0u;
    BOOL v16 = 0;
    *((void *)v28 + 2) = sub_100022FE8(0x672uLL);
  }
  size_t v29 = a1[4];
  if (v29 > 0x671 || (uint64_t v30 = v28[4], v31 = v30 + v29, (unsigned __int16)(v30 + v29) > 0x672u))
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Total advertising data length %d is larger than max advertising length %d", v34, v35, v36, v37, v38, v39, v40, v28[4] + a1[4]);
      int v41 = sub_100050B4C(0x42u);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    sub_10025B8C0();
    goto LABEL_63;
  }
  memmove((void *)(*((void *)v28 + 2) + v30), *((const void **)a1 + 2), v29);
  uint64_t v32 = *((void *)v28 + 2);
  memmove(v28, a1, 0x50uLL);
  *((void *)v28 + 2) = v32;
  v28[4] = v31;
  if (*((unsigned char *)a1 + 28) == 1)
  {
    sub_100259764(qword_100A10058, (uint64_t)v28, 80);
    return;
  }
LABEL_47:
  if (!v16) {
    goto LABEL_62;
  }
  if (!v2)
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Error : got a found event when scan is stopped", v42, v43, v44, v45, v46, v47, v48, v50);
      uint64_t v49 = sub_100050B4C(0x42u);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
      {
        sub_100744F6C();
        if (!v28) {
          return;
        }
        goto LABEL_63;
      }
    }
LABEL_62:
    if (!v28) {
      return;
    }
    goto LABEL_63;
  }
  if (v28) {
    uint64_t v33 = v28;
  }
  else {
    uint64_t v33 = a1;
  }
  v2(v33, v1);
  if (v28)
  {
LABEL_63:
    sub_100023010(*((void **)v28 + 2));
    sub_100023010(v28);
  }
}

uint64_t sub_100059C58()
{
  if (off_100A05C20)
  {
    uint64_t v0 = off_100A05C20();
    if (!v0) {
      return v0;
    }
  }
  else
  {
    uint64_t v0 = 3601;
  }
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"VSC failed %!", v1, v2, v3, v4, v5, v6, v7, v0);
    char v8 = sub_100050B4C(0x54u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100745764();
    }
  }
  return v0;
}

uint64_t sub_100059CE4()
{
  if (off_100A05C18)
  {
    uint64_t v0 = off_100A05C18();
    if (!v0) {
      return v0;
    }
  }
  else
  {
    uint64_t v0 = 3601;
  }
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"VSC failed %!", v1, v2, v3, v4, v5, v6, v7, v0);
    char v8 = sub_100050B4C(0x54u);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_100745764();
    }
  }
  return v0;
}

uint64_t sub_100059D70(void *a1)
{
  if (dword_100A05530)
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"VSC state %d, can not create command", v1, v2, v3, v4, v5, v6, v7, dword_100A05530);
      char v8 = sub_100050B4C(0x54u);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
        sub_100745764();
      }
    }
    return 3600;
  }
  else
  {
    uint64_t result = 0;
    *a1 = &unk_100A0542C;
    a1[1] = 0x2000000FF00FFLL;
  }
  return result;
}

uint64_t sub_100059E10(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

void sub_100059F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005A2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_start(va, a16);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v16 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10005A2CC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = [a3 triggeredDeviceMap];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) += [v4 count];
}

void sub_10005A330(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  id v9 = *(id *)(v4 + 40);
  id v5 = a3;
  uint64_t v7 = CUDescriptionWithLevel();
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v4 + 40), v9);

  uint64_t v6 = [v5 triggeredDeviceMap:v7];

  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  void v8[2] = sub_10005A420;
  v8[3] = &unk_1009971B8;
  void v8[4] = *(void *)(a1 + 32);
  [v6 enumerateKeysAndObjectsUsingBlock:v8];
}

void sub_10005A420(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v4 = *(void **)(v3 + 40);
  id v5 = a3;
  mach_absolute_time();
  [v5 triggerTicks];
  UpTicksToSecondsF();
  uint64_t v6 = CUPrintDurationDouble();
  [v5 present];
  [v5 uiTicks];
  uint64_t v7 = [v5 device];

  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v3 + 40), v4);
}

void *sub_10005A81C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v2 == result[5]) {
    return [result _findExtensionsStart];
  }
  return result;
}

id sub_10005A834(uint64_t a1)
{
  return [*(id *)(a1 + 32) _screenLockedChanged];
}

id sub_10005A83C(uint64_t a1)
{
  return [*(id *)(a1 + 32) screenStateChanged];
}

id sub_10005A844(uint64_t a1)
{
  return [*(id *)(a1 + 32) _triggerPendingExtension];
}

void sub_10005A9AC(id a1, NSString *a2, CBExtension *a3, BOOL *a4)
{
  uint64_t v7 = a2;
  id v5 = a3;
  if (dword_1009F7CA8 <= 30 && (dword_1009F7CA8 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v6 = v7;
    LogPrintF_safe();
  }
  [(CBExtension *)v5 invalidate];
}

void sub_10005AEBC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a3;
  if ([a2 rangeOfString:*(void *)(a1 + 32) options:9] != (id)0x7FFFFFFFFFFFFFFFLL) {
    [v5 reset];
  }
}

void sub_10005B130(id a1, NSString *a2, CBExtension *a3, BOOL *a4)
{
}

id sub_10005B1F0(uint64_t a1)
{
  if (dword_1009F7CA8 <= 30 && (dword_1009F7CA8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40);

  return [v2 trigger];
}

void sub_10005B3F8(uint64_t a1)
{
  int v26 = *(unsigned __int8 *)(*(void *)(a1 + 32) + 27);
  uint64_t v27 = +[LSApplicationRecord enumeratorWithOptions:1];
  [v27 setErrorHandler:&stru_1009973D8];
  uint64_t v34 = 0;
  uint64_t v35 = &v34;
  uint64_t v36 = 0x3032000000;
  uint64_t v37 = sub_10004CE9C;
  uint64_t v38 = sub_10004CD20;
  id v39 = 0;
  uint64_t v1 = CBStackConnectDeviceRequest;
  do
  {
    uint64_t v3 = [v27 nextObject];
    uint64_t v4 = v3;
    if (!v3)
    {
      int v12 = 2;
      goto LABEL_40;
    }
    id v5 = [v3 bundleIdentifier];
    if (v5)
    {
      uint64_t v6 = [v4 entitlements];
      uint64_t v7 = [v6 objectForKey:@"com.apple.bluetooth.discovery" ofClass:objc_opt_class()];

      if (v7)
      {
        char v8 = [v4 entitlements];
        id v9 = [v8 objectForKey:@"com.apple.bluetooth.system" ofClass:objc_opt_class()];

        if ([v9 BOOLValue])
        {
          if (v26)
          {
            uint64_t v10 = 0;
            while ((objc_msgSend(v5, "isEqual:", off_100997138[v10], v24) & 1) == 0)
            {
              if (++v10 == 10)
              {
                int isa = (int)v1[81].isa;
                if (isa <= 90 && (isa != -1 || _LogCategory_Initialize())) {
                  goto LABEL_31;
                }
                goto LABEL_37;
              }
            }
          }
          long long v32 = 0u;
          long long v33 = 0u;
          long long v30 = 0u;
          long long v31 = 0u;
          CFStringGetTypeID();
          int v14 = (void *)CFPrefs_CopyTypedValue();
          unsigned int v15 = [v14 componentsSeparatedByString:@","];

          id v16 = [v15 countByEnumeratingWithState:&v30 objects:v42 count:16];
          if (!v16)
          {
LABEL_26:

            uint64_t v1 = CBStackConnectDeviceRequest;
            CFArrayGetTypeID();
            if (CFDictionaryGetTypedValue())
            {
              CFStringRef v40 = @"legacy";
              int v41 = v7;
              uint64_t v19 = +[NSDictionary dictionaryWithObjects:&v41 forKeys:&v40 count:1];

              uint64_t v7 = (void *)v19;
            }
            v29[0] = _NSConcreteStackBlock;
            v29[1] = 3221225472;
            v29[2] = sub_10005E0C0;
            v29[3] = &unk_100997400;
            _OWORD v29[4] = v5;
            v29[5] = &v34;
            [v7 enumerateKeysAndObjectsUsingBlock:v29, v24];
            int v12 = 0;
            goto LABEL_38;
          }
          uint64_t v17 = *(void *)v31;
LABEL_20:
          uint64_t v18 = 0;
          while (1)
          {
            if (*(void *)v31 != v17) {
              objc_enumerationMutation(v15);
            }
            if (objc_msgSend(*(id *)(*((void *)&v30 + 1) + 8 * v18), "isEqual:", v5, v24)) {
              break;
            }
            if (v16 == (id)++v18)
            {
              id v16 = [v15 countByEnumeratingWithState:&v30 objects:v42 count:16];
              if (v16) {
                goto LABEL_20;
              }
              goto LABEL_26;
            }
          }

          uint64_t v1 = CBStackConnectDeviceRequest;
          if (dword_1009F7CA8 > 30 || dword_1009F7CA8 == -1 && !_LogCategory_Initialize()) {
            goto LABEL_37;
          }
        }
        else
        {
          int v13 = (int)v1[81].isa;
          if (v13 > 90 || v13 == -1 && !_LogCategory_Initialize()) {
            goto LABEL_37;
          }
        }
LABEL_31:
        uint64_t v24 = v5;
        LogPrintF_safe();
LABEL_37:
        int v12 = 3;
LABEL_38:

        goto LABEL_39;
      }
    }
    int v12 = 3;
LABEL_39:

LABEL_40:
  }
  while (v12 != 2);
  id v20 = (id)v35[5];
  _Block_object_dispose(&v34, 8);

  int v21 = (int)v1[81].isa;
  if (v21 <= 30 && (v21 != -1 || _LogCategory_Initialize()))
  {
    [v20 count:v24];
    mach_absolute_time();
    UpTicksToMilliseconds();
    LogPrintF_safe();
  }
  uint64_t v22 = *(void *)(a1 + 32);
  uint64_t v23 = *(NSObject **)(v22 + 64);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10005B9CC;
  block[3] = &unk_100997208;
  void block[4] = v22;
  void block[5] = v20;
  dispatch_async(v23, block);
}

void sub_10005B984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

unsigned char *sub_10005B9CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 25) = 0;
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = *(unsigned __int8 *)(v4 + 24);
  *(unsigned char *)(v4 + 24) = 0;
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[26])
  {
    if (v5)
    {
      if (dword_1009F7CA8 <= 30 && (dword_1009F7CA8 != -1 || _LogCategory_Initialize())) {
        LogPrintF_safe();
      }
      char v8 = *(void **)(*(void *)(a1 + 32) + 40);
      return [v8 trigger:a3];
    }
    else
    {
      uint64_t v7 = *(void *)(a1 + 40);
      return [result _updateExtensions:v7];
    }
  }
  return result;
}

void sub_10005C0C4(id a1, NSString *a2, CBExtension *a3, BOOL *a4)
{
}

void *sub_10005C688(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  uint64_t v3 = *(void *)(result[5] + 32);
  if (dword_1009F7CA8 <= 30)
  {
    if (dword_1009F7CA8 != -1 || (uint64_t result = (void *)_LogCategory_Initialize(), result)) {
      uint64_t result = (void *)LogPrintF_safe();
    }
  }
  if (v2 == v3)
  {
    *(unsigned char *)(v1[5] + 48) = 1;
    uint64_t v4 = *(void **)(v1[5] + 56);
    return [v4 setSystemFlags:1 mask:1];
  }
  return result;
}

void *sub_10005C80C(void *result)
{
  uint64_t v1 = result;
  uint64_t v2 = result[4];
  uint64_t v3 = *(void *)(result[5] + 32);
  if (dword_1009F7CA8 <= 30)
  {
    if (dword_1009F7CA8 != -1 || (uint64_t result = (void *)_LogCategory_Initialize(), result)) {
      uint64_t result = (void *)LogPrintF_safe();
    }
  }
  if (v2 == v3)
  {
    *(unsigned char *)(v1[5] + 48) = 0;
    uint64_t v4 = *(void **)(v1[5] + 56);
    return [v4 setSystemFlags:0 mask:1];
  }
  return result;
}

id sub_10005C98C(uint64_t a1)
{
  if (dword_1009F7CA8 <= 30 && (dword_1009F7CA8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  if (v3 == (void *)v2[4])
  {
    v2[4] = 0;

    *(unsigned char *)(*(void *)(a1 + 40) + 48) = 0;
    [*(id *)(*(void *)(a1 + 40) + 56) setSystemFlags:0 mask:1];
    uint64_t v2 = *(void **)(a1 + 40);
  }

  return [v2 _triggerPendingExtension];
}

void sub_10005D028(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v6 = a3;
  uint64_t v7 = [v6 device];
  if (v7 && [v6 present] && !objc_msgSend(v6, "uiTicks"))
  {
    int v14 = @"unknown";
    if (objc_msgSend(*(id *)(*(void *)(a1 + 32) + 56), "remoteAlertAllowedAndReturnReason:extension:", &v14))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      id v9 = *(void **)(v8 + 56);
      id v13 = 0;
      unsigned __int8 v10 = [v9 remoteAlertStartWithCBExtension:v8 device:v7 error:&v13];
      id v11 = v13;
      if (v10)
      {
        [v6 setUiTicks:mach_absolute_time()];
        *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
        *(unsigned char *)(*(void *)(a1 + 32) + 11) = 1;
        *a4 = 1;
      }
      else if (dword_1009F7CA8 <= 90 && (dword_1009F7CA8 != -1 || _LogCategory_Initialize()))
      {
        int v12 = CUPrintNSError();
        LogPrintF_safe();
      }
    }
    else
    {
      if (dword_1009F7CA8 <= 30 && (dword_1009F7CA8 != -1 || _LogCategory_Initialize())) {
        LogPrintF_safe();
      }
      *a4 = 1;
    }
  }
}

void *sub_10005D544(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[4]) {
    return [result _deviceFound:a2];
  }
  return result;
}

void *sub_10005D560(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[4]) {
    return [result _deviceLost:a2];
  }
  return result;
}

void sub_10005D57C(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v5 + 32))
  {
    if (v3)
    {
      id v12 = v3;
      if (dword_1009F7CA8 <= 90)
      {
        if (dword_1009F7CA8 == -1)
        {
          if (!_LogCategory_Initialize()) {
            goto LABEL_10;
          }
          uint64_t v5 = *(void *)(a1 + 40);
        }
        uint64_t v6 = *(void *)(v5 + 64);
        CUPrintNSError();
        v11 = uint64_t v10 = v6;
        LogPrintF_safe();
      }
LABEL_10:
      [*(id *)(a1 + 32) invalidate:v10, v11];
      uint64_t v7 = *(void *)(a1 + 40);
      uint64_t v8 = *(void **)(v7 + 32);
      *(void *)(v7 + 32) = 0;

      goto LABEL_11;
    }
    if (dword_1009F7CA8 <= 30)
    {
      id v12 = 0;
      if (dword_1009F7CA8 != -1 || (v9 = _LogCategory_Initialize(), uint64_t v4 = 0, v9))
      {
        LogPrintF_safe();
LABEL_11:
        uint64_t v4 = v12;
      }
    }
  }
}

void sub_10005E010(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  id v3 = v2;
  if (dword_1009F7CA8 <= 90)
  {
    uint64_t v6 = v2;
    if (dword_1009F7CA8 != -1 || (int v4 = _LogCategory_Initialize(), v3 = v6, v4))
    {
      uint64_t v5 = CUPrintNSError();
      LogPrintF_safe();

      id v3 = v6;
    }
  }
}

void sub_10005E0C0(uint64_t a1, void *a2, void *a3)
{
  id v15 = a3;
  id v5 = a2;
  id v6 = [objc_alloc((Class)NSString) initWithFormat:@"%@.%@", *(void *)(a1 + 32), v5];

  uint64_t v7 = (void *)_CFXPCCreateXPCObjectFromCFObject();
  if (v7)
  {
    uint64_t v8 = [*(id *)(*(void *)(*(void *)(a1 + 40) + 8) + 40) objectForKeyedSubscript:v6];

    if (v8)
    {
      if (dword_1009F7CA8 <= 90 && (dword_1009F7CA8 != -1 || _LogCategory_Initialize())) {
        LogPrintF_safe();
      }
    }
    else
    {
      int v9 = objc_alloc_init(CBExtension);
      [(CBExtension *)v9 setBundleID:*(void *)(a1 + 32)];
      [(CBExtension *)v9 setDiscoveryInfo:v15];
      [(CBExtension *)v9 setXpcDiscoveryInfo:v7];
      uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      if (!v10)
      {
        id v11 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v12 = *(void *)(*(void *)(a1 + 40) + 8);
        id v13 = *(void **)(v12 + 40);
        *(void *)(v12 + 40) = v11;

        uint64_t v10 = *(void **)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
      }
      [v10 setObject:v9 forKeyedSubscript:v6];
    }
  }
  else if (dword_1009F7CA8 <= 90 && (dword_1009F7CA8 != -1 || _LogCategory_Initialize()))
  {
    int v14 = CUPrintNSObjectOneLine();
    LogPrintF_safe();
  }
}

void sub_10005E51C(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_10005E568(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v6 + 40);
  uint64_t v7 = CUDescriptionWithLevel();
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v6 + 40), obj);

  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (*(int *)(a1 + 48) >= 11 && *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= 0x32uLL) {
    *a4 = 1;
  }
}

void sub_10005E620(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005E99C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 56);
  id v7 = v3;
  if (!v4)
  {
    id v5 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v6 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = v5;

    int v4 = *(void **)(a1 + 56);
    id v3 = v7;
  }
  [v4 addObject:v3];
  if (!*(unsigned char *)(a1 + 64))
  {
    if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_100997860);
    }
    sub_100451228(off_1009F7EE8, a1);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_100997880);
    }
    sub_100061288((uint64_t)off_1009F7EF8 + 240, a1 + 8);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009977E0);
    }
    sub_1000616EC((uint64_t)off_1009F7EA8 + 64, a1 + 16);
    if (qword_1009F7F10 != -1) {
      dispatch_once(&qword_1009F7F10, &stru_1009978A0);
    }
    sub_1000619B8(qword_1009F7F08 + 40, a1 + 24);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_100997800);
    }
    sub_100680938((uint64_t)off_1009F7EB8, a1 + 32, 0);
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_100997840);
    }
    sub_1006CF2B4((uint64_t)off_1009F7ED8, a1 + 40);
    if (qword_1009F7F20 != -1) {
      dispatch_once(&qword_1009F7F20, &stru_1009978C0);
    }
    sub_100061C84(qword_1009F7F18 + 392, a1 + 48);
    *(unsigned char *)(a1 + 64) = 1;
  }
}

void sub_10005EC10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_10005EC24(uint64_t a1)
{
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 updateDevices];
}

id sub_10005ECA8(uint64_t a1)
{
  if (dword_1009F7DD8 <= 20 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 32);

  return [v2 trigger];
}

void sub_10005EE3C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 56) removeObject:];
  if (*(unsigned char *)(a1 + 64) && ![*(id *)(a1 + 56) count])
  {
    if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_100997860);
    }
    sub_100451364((uint64_t)off_1009F7EE8, a1);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_100997880);
    }
    sub_100052718((uint64_t)off_1009F7EF8 + 240, a1 + 8);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_1009977E0);
    }
    sub_100052718((uint64_t)off_1009F7EA8 + 64, a1 + 16);
    if (qword_1009F7F10 != -1) {
      dispatch_once(&qword_1009F7F10, &stru_1009978A0);
    }
    sub_100052718(qword_1009F7F08 + 40, a1 + 24);
    if (qword_1009F7F20 != -1) {
      dispatch_once(&qword_1009F7F20, &stru_1009978C0);
    }
    sub_100052718(qword_1009F7F18 + 392, a1 + 48);
    *(unsigned char *)(a1 + 64) = 0;
  }
}

void sub_10005F01C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005F124(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005F46C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10005F4B0(id a1, NSString *a2, CBDevice *a3, BOOL *a4)
{
  int v4 = a3;
  [(CBDevice *)v4 setChangeFlags:0];
  [(CBDevice *)v4 setOldDiscoveryFlags:[(CBDevice *)v4 discoveryFlags]];
  [(CBDevice *)v4 setDiscoveryFlags:(unint64_t)[(CBDevice *)v4 discoveryFlags] & 0xFFFFFFFFFF5FFFFFLL];
}

void sub_10005F524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005F538(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  unint64_t v6 = (unint64_t)[v5 changeFlags];
  unint64_t v7 = (unint64_t)[v5 oldDiscoveryFlags];
  unint64_t v8 = (unint64_t)[v5 discoveryFlags] ^ v7;
  if (v8) {
    v6 |= 0x800000000uLL;
  }
  unint64_t v9 = v6 | v8;
  [v5 setChangeFlags:((unint64_t)[v5 changeFlags] | v9)];
  if ((*(void *)(*(void *)(a1 + 32) + 64) & v9) != 0
    && (*(void *)(*(void *)(a1 + 32) + 64) & (unint64_t)[v5 discoveryFlags]) != 0)
  {
    if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    id v10 = objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 48));
    id v11 = v10;
    if (v10) {
      (*((void (**)(id, id))v10 + 2))(v10, v5);
    }
  }
  else if (dword_1009F7DD8 <= 10 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
}

void sub_10005F6D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10005F9D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10005FCF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10005FF1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_10005FF54(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (!v2) {
    uint64_t v2 = *(void *)(a2 + 16);
  }
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v2;
  return result;
}

void sub_1000601A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000604F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, void (**a12)(void))
{
  a12[2]();
  _Unwind_Resume(a1);
}

void sub_100060578(uint64_t a1)
{
}

void sub_100060580(uint64_t a1)
{
}

void sub_100060588(void *a1)
{
}

void sub_10006065C(uint64_t a1)
{
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }

  sub_1000606E0(a1);
}

void sub_1000606E0(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_100060FD8;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_10006075C(uint64_t a1)
{
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }

  sub_1000606E0(a1);
}

void sub_1000607F4(uint64_t a1, uint64_t a2)
{
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize()))
  {
    sub_100474E18(a2, &__p);
    LogPrintF_safe();
    if (v5 < 0) {
      operator delete(__p);
    }
  }
  sub_1000606E0(a1);
}

void sub_1000608B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000608D4(uint64_t a1, uint64_t a2)
{
}

void sub_1000608DC(uint64_t a1, uint64_t a2)
{
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize()))
  {
    sub_100474E18(a2, &__p);
    LogPrintF_safe();
    if (v5 < 0) {
      operator delete(__p);
    }
  }
  sub_1000606E0(a1);
}

void sub_1000609B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000609CC(uint64_t a1, uint64_t a2)
{
}

void sub_1000609D4(uint64_t a1)
{
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }

  sub_1000606E0(a1);
}

void sub_100060A68(uint64_t a1)
{
}

void sub_100060A70(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize()))
  {
    id v3 = [v4 UUIDString];
    LogPrintF_safe();
  }
  sub_1000606E0(a1);
}

void sub_100060B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100060B44(uint64_t a1, void *a2)
{
}

void sub_100060B4C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize()))
  {
    id v3 = [v4 UUIDString];
    LogPrintF_safe();
  }
  sub_1000606E0(a1);
}

void sub_100060C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100060C20(uint64_t a1, void *a2)
{
}

void sub_100060C28(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize()))
  {
    id v3 = [v4 UUIDString];
    LogPrintF_safe();
  }
  sub_1000606E0(a1);
}

void sub_100060CDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100060CFC(uint64_t a1, void *a2)
{
}

void sub_100060D04(uint64_t a1)
{
  if (dword_1009F7DD8 <= 30 && (dword_1009F7DD8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }

  sub_1000606E0(a1);
}

void sub_100060D88(uint64_t a1)
{
}

void sub_100060D90(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_100060E14;
  v5[3] = &unk_100997570;
  void v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_100060E14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC0C0);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = *(id *)(v2 + 56);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        unint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        unint64_t v8 = [v7 dispatchQueue];
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        void v9[2] = sub_100060FC0;
        v9[3] = &unk_100997550;
        v9[4] = v7;
        int v10 = *(_DWORD *)(a1 + 40);
        dispatch_async(v8, v9);
      }
      id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC0C0);
}

void sub_100060FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100060FC0(uint64_t a1)
{
  return [*(id *)(a1 + 32) localDeviceEvent:*(unsigned int *)(a1 + 40)];
}

void sub_100060FD0(uint64_t a1, int a2)
{
}

void sub_100060FD8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC0C0);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(v1 + 56);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v2);
        }
        int v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        unint64_t v7 = [v6 dispatchQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_100061178;
        block[3] = &unk_100997450;
        void block[4] = v6;
        dispatch_async(v7, block);
      }
      id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC0C0);
}

void sub_100061158(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100061178(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateDevices];
}

uint64_t sub_100061180(uint64_t a1)
{
  return a1;
}

void sub_1000611AC(uint64_t a1)
{
  operator delete();
}

void sub_100061288(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100061314(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100061314(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    long long v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = &v19[8 * v16];
    __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    size_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        id v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v20;
        size_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)id v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)char __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    long long v9 = __src + 8;
    long long v10 = v6 - 8;
    long long v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_10006151C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100061554(uint64_t a1)
{
  uint64_t v2 = a1 + 16;
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(char **)a1;
  uint64_t v5 = *(unsigned char **)(a1 + 8);
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (uint64_t)v4) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    long long v11 = 0;
    uint64_t v9 = 8 * v6;
    goto LABEL_8;
  }
  unint64_t v7 = (char *)sub_1000405F8(v2, v6);
  uint64_t v4 = *(char **)a1;
  uint64_t v8 = *(char **)(a1 + 8);
  uint64_t v9 = (uint64_t)&v7[8 * v6];
  long long v11 = &v7[8 * v10];
  if (v8 == *(char **)a1)
  {
LABEL_8:
    uint64_t v12 = v9;
    goto LABEL_9;
  }
  uint64_t v12 = v9;
  do
  {
    uint64_t v13 = *((void *)v8 - 1);
    v8 -= 8;
    *(void *)(v12 - 8) = v13;
    v12 -= 8;
  }
  while (v8 != v4);
  uint64_t v4 = *(char **)a1;
LABEL_9:
  *(void *)a1 = v12;
  *(void *)(a1 + 8) = v9;
  *(void *)(a1 + 16) = v11;
  if (v4)
  {
    operator delete(v4);
  }
}

char *sub_100061614(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      uint64_t v9 = *((void *)v8 - 1);
      v8 -= 8;
      *((void *)v7 - 1) = v9;
      v7 -= 8;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  uint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void sub_1000616DC()
{
}

void sub_1000616EC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100061778(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100061778(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = &v19[8 * v16];
    __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    size_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        id v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v20;
        size_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)id v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)char __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100061980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000619B8(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100061A44(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100061A44(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = &v19[8 * v16];
    __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    size_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        id v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v20;
        size_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)id v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)char __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100061C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100061C84(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v5 = *(char **)(a1 + 8);
  uint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        uint64_t v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_100061D10(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_100061D10(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  uint64_t v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    uint64_t v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = &v19[8 * v16];
    __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    size_t v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        uint64_t v23 = (char *)sub_1000405F8(v8, v22);
        id v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        uint64_t v27 = v20;
        size_t v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)id v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)char __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_100061F18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100061F50(id a1)
{
}

void sub_100061F94()
{
}

void sub_100061FB8(id a1)
{
}

void sub_100061FFC()
{
}

void sub_100062020(id a1)
{
}

void sub_100062064()
{
}

void sub_100062088(id a1)
{
}

void sub_1000620CC()
{
}

void sub_1000620F0(id a1)
{
}

void sub_100062134()
{
}

void sub_100062158(id a1)
{
}

void sub_10006219C()
{
}

void sub_1000621C0(id a1)
{
}

void sub_100062204()
{
}

void sub_100062228(id a1)
{
}

void sub_10006226C()
{
}

void sub_1000624AC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 80), 8);
  _Unwind_Resume(a1);
}

void sub_1000624C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  uint64_t v2 = CUDescriptionWithLevel();
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v1 + 40), obj);
}

id sub_1000626B0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _screenOnChanged];
}

id sub_1000626B8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _screenOnChanged];
}

uint64_t sub_100062EA8(void *a1)
{
  id v1 = a1;
  if ([v1 caseInsensitiveCompare:@"Charging"])
  {
    if ([v1 caseInsensitiveCompare:@"Discharging"])
    {
      if ([v1 caseInsensitiveCompare:@"FullyCharged"]) {
        uint64_t v2 = 4 * ([v1 caseInsensitiveCompare:@"OBC"] == 0);
      }
      else {
        uint64_t v2 = 3;
      }
    }
    else
    {
      uint64_t v2 = 2;
    }
  }
  else
  {
    uint64_t v2 = 1;
  }

  return v2;
}

void *sub_100063A48(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[1]) {
    return [result _accessoryDiscoveryFoundDevice:a2];
  }
  return result;
}

void sub_100063A64(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 8))
  {
    id v7 = v3;
    if (dword_1009F7F28 <= 90 && (dword_1009F7F28 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v6 = CUPrintNSError();
      LogPrintF_safe();
    }
    [*(id *)(a1 + 32) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v4 + 8);
    *(void *)(v4 + 8) = 0;

    id v3 = v7;
  }
}

void sub_100063BFC(id a1, NSString *a2, CBAccessoryInfo *a3, BOOL *a4)
{
}

void sub_100063F68(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 40))
  {
    uint64_t v9 = v3;
    unsigned __int16 v5 = (unsigned __int16)[v3 deviceFlags];
    uint64_t v4 = v9;
    if ((v5 & 0x4000) != 0 || (v6 = [v9 deviceFlags], uint64_t v4 = v9, (v6 & 2) != 0))
    {
      id v7 = +[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", [v4 productID]);
      unsigned int v8 = [v7 flags];

      if ((v8 & 0x100000) != 0) {
        [*(id *)(a1 + 40) _update];
      }
      [*(id *)(a1 + 40) _connectionMonitorFoundDevice:v9];
      uint64_t v4 = v9;
    }
  }
}

void sub_100064030(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 40))
  {
    uint64_t v9 = v3;
    unsigned __int16 v5 = (unsigned __int16)[v3 deviceFlags];
    uint64_t v4 = v9;
    if ((v5 & 0x4000) == 0)
    {
      unsigned __int8 v6 = [v9 deviceFlags];
      uint64_t v4 = v9;
      if ((v6 & 2) == 0)
      {
        id v7 = +[CBProductInfo productInfoWithProductID:](CBProductInfo, "productInfoWithProductID:", [v9 productID]);
        unsigned int v8 = [v7 flags];

        uint64_t v4 = v9;
        if ((v8 & 0x100000) != 0)
        {
          [*(id *)(a1 + 40) _update];
          uint64_t v4 = v9;
        }
      }
    }
  }
}

void sub_1000640F0(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (v3 && *(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 40))
  {
    id v7 = v3;
    if (dword_1009F7F28 <= 90 && (dword_1009F7F28 != -1 || _LogCategory_Initialize()))
    {
      unsigned __int8 v6 = CUPrintNSError();
      LogPrintF_safe();
    }
    [*(id *)(a1 + 32) invalidate:v6];
    uint64_t v4 = *(void *)(a1 + 40);
    unsigned __int16 v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0;

    id v3 = v7;
  }
}

void sub_1000646D4(uint64_t a1, void *a2)
{
  id v10 = a2;
  if (v10)
  {
    if (dword_1009F7F28 <= 90 && (dword_1009F7F28 != -1 || _LogCategory_Initialize()))
    {
      unsigned int v8 = CUPrintNSError();
      uint64_t v9 = *(void *)(a1 + 32);
      LogPrintF_safe();
    }
    [*(id *)(a1 + 40) invalidate:v8, v9];
    [*(id *)(*(void *)(a1 + 48) + 32) setObject:0 forKeyedSubscript:*(void *)(a1 + 56)];
  }
  else
  {
    if (dword_1009F7F28 <= 30 && (dword_1009F7F28 != -1 || _LogCategory_Initialize()))
    {
      unsigned int v8 = *(void **)(a1 + 32);
      LogPrintF_safe();
    }
    id v3 = [[*(id *)(a1 + 64) mutableCopy:v8];
    uint64_t v4 = v3;
    if (v3) {
      id v5 = v3;
    }
    else {
      id v5 = objc_alloc_init((Class)NSMutableDictionary);
    }
    unsigned __int8 v6 = v5;

    id v7 = +[NSNumber numberWithDouble:*(double *)(a1 + 72)];
    [v6 setObject:v7 forKeyedSubscript:*(void *)(a1 + 56)];

    CFPrefs_SetValue();
    [*(id *)(a1 + 48) _connectionMonitorUpdate];
  }
}

void *sub_100064D80(void *result)
{
  if (result[4] == *(void *)(result[5] + 72))
  {
    id v1 = result;
    if (dword_1009F7F28 <= 30 && (dword_1009F7F28 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    uint64_t v2 = (void *)v1[5];
    return [v2 _connectionMonitorUpdate];
  }
  return result;
}

id sub_1000663D4()
{
  if (qword_1009FC0F0 != -1) {
    dispatch_once(&qword_1009FC0F0, &stru_100997FE0);
  }
  uint64_t v0 = (void *)qword_1009FC0D0;

  return v0;
}

void sub_100066428(id a1, NSString *a2, BOOL *a3)
{
  id v3 = a2;
  uint64_t v4 = sub_1000663D4();
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 138412290;
    unsigned __int8 v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%@", (uint8_t *)&v5, 0xCu);
  }
}

void sub_10006785C(_Unwind_Exception *a1)
{
}

void sub_10006791C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v6 + 40);
  uint64_t v9 = CUDescriptionWithLevel();
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v6 + 40), obj);

  uint64_t v7 = *(void *)(*(void *)(a1 + 40) + 8);
  unint64_t v8 = *(void *)(v7 + 24) + 1;
  *(void *)(v7 + 24) = v8;
  if (v8 >= 0x14 && *(int *)(a1 + 52) >= 6) {
    *a4 = 1;
  }
}

void sub_1000679C8(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  uint64_t v2 = CUDescriptionWithLevel();
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v1 + 40), obj);
}

void *sub_100067AAC(void *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 8))
  {
    uint64_t v2 = result;
    *(unsigned char *)(v1 + _Block_object_dispose(&STACK[0x338], 8) = 1;
    if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    id v3 = (void *)v2[4];
    return [v3 _activate];
  }
  return result;
}

id sub_100068468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _xpcPublisherConnectionsAction:a2 token:a3 info:a4];
}

void sub_10006847C(id a1, int a2)
{
  if (dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

id sub_100068524(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _xpcPublisherDiscoveryAction:a2 token:a3 info:a4];
}

void sub_100068538(id a1, int a2)
{
  if (dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

id sub_1000685E0(uint64_t a1)
{
  if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  id v2 = *(void **)(a1 + 32);

  return [v2 _prefsChanged];
}

id sub_100068664(uint64_t a1)
{
  if (dword_1009F7F98 <= 15 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 232) = 0;
  id v2 = *(void **)(a1 + 32);

  return [v2 scheduleUpdateImmediate:1];
}

id sub_1000686F4(uint64_t a1)
{
  if (dword_1009F7F98 <= 15 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 232) = 1;
  id v2 = *(void **)(a1 + 32);

  return [v2 scheduleUpdateImmediate:1];
}

NSObject *sub_100068788(uint64_t a1)
{
  uint64_t result = *(NSObject **)(a1 + 32);
  if (result == *(NSObject **)(*(void *)(a1 + 40) + 144))
  {
    char data = dispatch_source_get_data(result);
    if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v7 = CUPrintFlags32();
      LogPrintF_safe();
    }
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = *(_DWORD *)(v4 + 168);
    if (!v5) {
      LOBYTE(v5) = data;
    }
    *(_DWORD *)(v4 + 140) = v5 & 6;
    uint64_t v6 = *(void **)(a1 + 40);
    return [v6 _updateMemoryPressure];
  }
  return result;
}

id sub_100068884(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_10006888C(uint64_t a1)
{
  return [*(id *)(a1 + 32) scheduleSpatialUpdateImmediate:0];
}

id sub_100068898(uint64_t a1)
{
  return [*(id *)(a1 + 32) scheduleSpatialUpdateImmediate:0];
}

id sub_1000688A4(uint64_t a1)
{
  id v2 = +[BLSBacklight sharedBacklight];
  unsigned int v3 = [v2 isAlwaysOnEnabled];
  if (v3) {
    unsigned int v3 = [*(id *)(a1 + 40) screenOn];
  }
  *(_DWORD *)(*(void *)(a1 + 32) + 232) = v3;

  uint64_t v4 = *(void **)(a1 + 32);

  return [v4 _update];
}

uint64_t sub_100068908(uint64_t a1)
{
  int v2 = *(_DWORD *)(*(void *)(a1 + 32) + 156);
  uint64_t state64 = 0;
  uint64_t result = notify_get_state(v2, &state64);
  int v4 = state64 != 0;
  if (dword_1009F7F98 <= 30)
  {
    if (dword_1009F7F98 != -1 || (uint64_t result = _LogCategory_Initialize(), result)) {
      uint64_t result = LogPrintF_safe();
    }
  }
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(unsigned __int8 *)(v5 + 152) != v4)
  {
    *(unsigned char *)(v5 + 152) = v4;
    return (uint64_t)[*(id *)(a1 + 32) scheduleSpatialUpdateImmediate:0];
  }
  return result;
}

id sub_1000689F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateUserControllerCloudDevices];
}

id sub_1000689FC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateUserControllerCloudDevices];
}

uint64_t sub_100068A04(uint64_t a1)
{
  [*(id *)(a1 + 32) descriptionInternalDebug];
  uint64_t v2 = *(void *)(a1 + 32);

  return _CUStateDumpWithObject("CBDaemon", v2, &dword_1009F7F98);
}

id sub_100068A50(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 81) = 20;
  if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _update];
}

id sub_100068BC4(uint64_t a1)
{
  if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _invalidate];
}

id sub_100069DE4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _updateMemoryPressure];
}

void sub_10006A4E8(uint64_t a1)
{
  uint64_t v2 = [*(id *)(a1 + 32) object];
  if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    id v10 = v2;
    LogPrintF_safe();
  }
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    id v3 = *(id *)(*(void *)(a1 + 40) + 536);
    id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v12;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v12 != v6) {
            objc_enumerationMutation(v3);
          }
          unint64_t v8 = [*(id *)(*((void *)&v11 + 1) + 8 * i) activatedController:v10];
          uint64_t v9 = [v8 tipiChangedHandler];

          if (v9) {
            ((void (**)(void, void *))v9)[2](v9, v2);
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
      }
      while (v5);
    }
  }
}

void sub_10006AEF0(uint64_t a1, uint64_t a2)
{
  if (!a2)
  {
    uint64_t v2 = *(void *)(a1 + 32);
    id v3 = *(void **)(v2 + 512);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    void v5[2] = sub_10006AF80;
    v5[3] = &unk_100997B28;
    void v5[4] = v2;
    id v4 = v3;
    [v4 getCloudPairedDevicesWithCompletionHandler:v5];
  }
}

void sub_10006AF80(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (v5)
  {
    if (dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v6 = CUPrintNSError();
      LogPrintF_safe();
    }
  }
  else
  {
    [*(id *)(a1 + 32) _userControllerCloudUpdateWithDevices:v7];
    [*(id *)(a1 + 32) _userControllerUploadLocalControllerInfo];
  }
}

void sub_10006B100(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_10006B114(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[53])
  {
    [result _bleAdvertiserAddressChanged:0];
    id v4 = *(void **)(a1 + 40);
    return [v4 _updateSelfAuthTag];
  }
  return result;
}

void *sub_10006B1AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v2 == result[3]) {
    return [result _update];
  }
  return result;
}

void sub_10006B1C4(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24))
  {
    if (v3)
    {
      if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
      {
        long long v12 = CUPrintNSError();
        LogPrintF_safe();
      }
      [*(id *)(a1 + 32) invalidate:v12];
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void **)(v5 + 24);
      *(void *)(v5 + 24) = 0;
    }
    else
    {
      if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
        LogPrintF_safe();
      }
      if (*(unsigned char *)(a1 + 48))
      {
        if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
          LogPrintF_safe();
        }
        dispatch_source_t v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(*(void *)(a1 + 40) + 88));
        uint64_t v8 = *(void *)(a1 + 40);
        uint64_t v9 = *(void **)(v8 + 48);
        *(void *)(v8 + 4_Block_object_dispose(&STACK[0x338], 8) = v7;
        id v10 = v7;

        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_10006B42C;
        handler[3] = &unk_100997B78;
        handler[4] = v10;
        int8x16_t v13 = *(int8x16_t *)(a1 + 32);
        id v11 = (id)v13.i64[0];
        int8x16_t v15 = vextq_s8(v13, v13, 8uLL);
        dispatch_source_set_event_handler(v10, handler);
        CUDispatchTimerSet();
        dispatch_activate(v10);
      }
    }
  }
}

void *sub_10006B42C(void *result)
{
  if (result[4] == *(void *)(result[5] + 48))
  {
    uint64_t v1 = result;
    if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = v1[6];
      LogPrintF_safe();
    }
    uint64_t v2 = *(void **)(v1[5] + 48);
    if (v2)
    {
      id v3 = v2;
      dispatch_source_cancel(v3);
      uint64_t v4 = v1[5];
      uint64_t v5 = *(void **)(v4 + 48);
      *(void *)(v4 + 4_Block_object_dispose(&STACK[0x338], 8) = 0;
    }
    if (objc_msgSend((id)v1[5], "supportsNCSecondaryAdvertisingInstance", v8)) {
      uint64_t v6 = 6;
    }
    else {
      uint64_t v6 = 2;
    }
    dispatch_source_t v7 = *(void **)(v1[5] + 424);
    return [v7 forceNonConnectableAddressReadAndUpdate:v6];
  }
  return result;
}

id sub_10006B828(uint64_t a1)
{
  if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 40);
  if (v2)
  {
    id v3 = v2;
    dispatch_source_cancel(v3);
    uint64_t v4 = *(void *)(a1 + 32);
    uint64_t v5 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = 0;
  }
  uint64_t v6 = *(void **)(a1 + 32);

  return [v6 scheduleSpatialUpdateImmediate:0];
}

void sub_10006B944(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_10006B958(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a3;
  id v8 = a4;
  uint64_t v9 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v9 + 264))
  {
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v10 = *(id *)(v9 + 536);
    id v11 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v11)
    {
      id v12 = v11;
      uint64_t v13 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v12; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v13) {
            objc_enumerationMutation(v10);
          }
          int8x16_t v15 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          uint64_t v16 = [v15 activatedController:v18];
          unsigned __int16 v17 = (unsigned __int16)[v16 internalFlags];

          if ((v17 & 0x2000) != 0) {
            [v15 xpcReceivedAudioAccessoryEventType:a2 messageData:v7 sourceDevice:v8];
          }
        }
        id v12 = [v10 countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v12);
    }
  }
}

void sub_10006BAB8(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v4 + 264))
  {
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    id v5 = *(id *)(v4 + 536);
    id v6 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
    if (v6)
    {
      id v7 = v6;
      uint64_t v8 = *(void *)v14;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v14 != v8) {
            objc_enumerationMutation(v5);
          }
          id v10 = *(void **)(*((void *)&v13 + 1) + 8 * i);
          id v11 = [v10 activatedController:v13];
          unsigned __int16 v12 = (unsigned __int16)[v11 internalFlags];

          if ((v12 & 0x2000) != 0) {
            [v10 xpcReceivedAudioAccessoryDeviceInfoChange:v3];
          }
        }
        id v7 = [v5 countByEnumeratingWithState:&v13 objects:v17 count:16];
      }
      while (v7);
    }
  }
}

void *sub_10006BCA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[59]) {
    return [result _stackBLEScannerDeviceFound:a2];
  }
  return result;
}

void *sub_10006BCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[59]) {
    return [result _stackBLEScannerDeviceLost:a2];
  }
  return result;
}

void *sub_10006BCD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[59]) {
    return [result _stackBLEScannerDevicesBuffered:a2];
  }
  return result;
}

id sub_10006C1AC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reportDeviceLostIfNeeded:*(void *)(a1 + 40)];
}

void *sub_10006C95C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[37]) {
    return [result _stackClassicScannerDeviceFound:a2];
  }
  return result;
}

void *sub_10006C978(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[37]) {
    return [result _stackClassicScannerDeviceLost:a2];
  }
  return result;
}

void *sub_10006CDA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v2 == result[60]) {
    return [result _updateUserControllerCloudDevices];
  }
  return result;
}

void *sub_10006CDBC(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 480))
  {
    uint64_t v2 = result;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v3 = *(id *)(v1 + 536);
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = [*(id *)(*((void *)&v10 + 1) + 8 * (void)v7) activatedController:v10];
          uint64_t v9 = [v8 discoverableStateChangedHandler];

          if (v9) {
            v9[2](v9);
          }

          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }

    return [(id)v2[5] scheduleUpdateImmediate:0];
  }
  return result;
}

void *sub_10006CF00(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 480))
  {
    uint64_t v2 = result;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    id v3 = *(id *)(v1 + 536);
    id v4 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v11;
      do
      {
        id v7 = 0;
        do
        {
          if (*(void *)v11 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = [*(id *)(*((void *)&v10 + 1) + 8 * (void)v7) activatedController:(void)v10];
          uint64_t v9 = [v8 inquiryStateChangedHandler];

          if (v9) {
            v9[2](v9);
          }

          id v7 = (char *)v7 + 1;
        }
        while (v5 != v7);
        id v5 = [v3 countByEnumeratingWithState:&v10 objects:v14 count:16];
      }
      while (v5);
    }

    return [(id)v2[5] scheduleUpdateImmediate:0];
  }
  return result;
}

void *sub_10006D044(void *result)
{
  uint64_t v1 = result[5];
  if (result[4] == *(void *)(v1 + 480))
  {
    uint64_t v2 = result;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v3 = *(id *)(v1 + 536);
    id v4 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
    if (v4)
    {
      id v5 = v4;
      uint64_t v6 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v6) {
            objc_enumerationMutation(v3);
          }
          uint64_t v8 = *(void **)(*((void *)&v15 + 1) + 8 * i);
          uint64_t v9 = [v8 activatedController:v15];
          long long v10 = [v9 bluetoothStateChangedHandler];

          if (v10) {
            v10[2](v10);
          }

          long long v11 = [v8 activatedDiscovery];
          long long v12 = [v11 bluetoothStateChangedHandler];

          if (v12) {
            v12[2](v12);
          }

          long long v13 = [v8 activatedSpatialInteractionSession];
          long long v14 = [v13 bluetoothStateChangedHandler];

          if (v14) {
            v14[2](v14);
          }
        }
        id v5 = [v3 countByEnumeratingWithState:&v15 objects:v19 count:16];
      }
      while (v5);
    }

    return [(id)v2[5] scheduleUpdateImmediate:0];
  }
  return result;
}

void sub_10006D204(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5)
{
  id v9 = a2;
  id v10 = a3;
  id v11 = a5;
  uint64_t v12 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v12 + 480))
  {
    long long v22 = 0u;
    long long v23 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v13 = *(id *)(v12 + 536);
    id v14 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
    if (v14)
    {
      id v15 = v14;
      uint64_t v16 = *(void *)v21;
      do
      {
        long long v17 = 0;
        do
        {
          if (*(void *)v21 != v16) {
            objc_enumerationMutation(v13);
          }
          long long v18 = [*(id *)(*((void *)&v20 + 1) + 8 * (void)v17) activatedController:v20];
          long long v19 = [v18 relayMessageHandler];

          if (v19) {
            ((void (**)(void, id, id, uint64_t, id))v19)[2](v19, v9, v10, a4, v11);
          }

          long long v17 = (char *)v17 + 1;
        }
        while (v15 != v17);
        id v15 = [v13 countByEnumeratingWithState:&v20 objects:v24 count:16];
      }
      while (v15);
    }
  }
}

void *sub_10006D428(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[38]) {
    return [result _stackDeviceMonitorDeviceFound:a2];
  }
  return result;
}

void *sub_10006D444(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[38]) {
    return [result _stackDeviceMonitorDeviceLost:a2];
  }
  return result;
}

void sub_10006D8DC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10006D980;
  v3[3] = &unk_100997C68;
  void v3[4] = v2;
  id v4 = *(id *)(a1 + 40);
  __int16 v6 = *(_WORD *)(a1 + 52);
  int v5 = *(_DWORD *)(a1 + 48);
  [v2 _performUserControllerActionWithCompletion:v3];
}

void sub_10006D980(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(id *)(*(void *)(a1 + 32) + 512);
  if (v5 || !v3)
  {
    if (dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      id v4 = CUPrintNSError();
      LogPrintF_safe();
    }
  }
  else
  {
    [v3 recordEventWithDeviceIdentifier:*(void *)(a1 + 40) initiator:*(unsigned __int8 *)(a1 + 52) starting:*(unsigned __int8 *)(a1 + 53) useCase:*(unsigned int *)(a1 + 48)];
  }
}

id sub_10006DAE4(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10006DB68;
  v3[3] = &unk_100997CB8;
  void v3[4] = v1;
  char v5 = *(unsigned char *)(a1 + 44);
  int v4 = *(_DWORD *)(a1 + 40);
  return [v1 _performUserControllerActionWithCompletion:v3];
}

void sub_10006DB68(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (!v3)
  {
    [*(id *)(*(void *)(a1 + 32) + 512) recordEventWithStarting:*(unsigned __int8 *)(a1 + 44) useCase:*(unsigned int *)(a1 + 40)];
LABEL_3:
    int v4 = v7;
    goto LABEL_4;
  }
  int v4 = v3;
  if (dword_1009F7F98 <= 90)
  {
    if (dword_1009F7F98 != -1 || (v5 = _LogCategory_Initialize(), int v4 = v7, v5))
    {
      __int16 v6 = CUPrintNSError();
      LogPrintF_safe();

      goto LABEL_3;
    }
  }
LABEL_4:
}

id sub_10006DCDC(uint64_t a1)
{
  if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = *(void **)(a1 + 32);

  return [v2 _identitiesGet];
}

void sub_10006DF80(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  [*(id *)(a1 + 32) invalidate];
  if (*(_DWORD *)(*(void *)(a1 + 40) + 96) == -1) {
    goto LABEL_47;
  }
  if (v6)
  {
    if (dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v28 = CUPrintNSError();
      LogPrintF_safe();
    }
    goto LABEL_47;
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  id v7 = v5;
  id v8 = [v7 countByEnumeratingWithState:&v34 objects:v39 count:16];
  if (v8)
  {
    uint64_t v9 = *(void *)v35;
    while (2)
    {
      for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v35 != v9) {
          objc_enumerationMutation(v7);
        }
        id v11 = *(void **)(*((void *)&v34 + 1) + 8 * i);
        if ([v11 type] == 1)
        {
          uint64_t v13 = *(void *)(a1 + 40);
          id v14 = *(void **)(v13 + 112);
          if (v14)
          {
            LODWORD(v_Block_object_dispose(&STACK[0x338], 8) = [v14 compareWithRPIdentity:v11];
            uint64_t v13 = *(void *)(a1 + 40);
          }
          else
          {
            LODWORD(v_Block_object_dispose(&STACK[0x338], 8) = 2048;
          }
          objc_storeStrong((id *)(v13 + 112), v11);
          goto LABEL_21;
        }
      }
      id v8 = [v7 countByEnumeratingWithState:&v34 objects:v39 count:16];
      if (v8) {
        continue;
      }
      break;
    }
  }
LABEL_21:

  id v15 = *(void **)(*(void *)(a1 + 40) + 112);
  if (!v15)
  {
    if (dword_1009F7F98 <= 60 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    goto LABEL_31;
  }
  if (dword_1009F7F98 <= 30)
  {
    if (dword_1009F7F98 == -1)
    {
      if (!_LogCategory_Initialize()) {
        goto LABEL_31;
      }
      id v15 = *(void **)(*(void *)(a1 + 40) + 112);
    }
    CUPrintFlags32();
    v29 = id v27 = v15;
    LogPrintF_safe();
  }
LABEL_31:
  if (v8) {
    [*(id *)(a1 + 40) _updateSelfAuthTag];
  }
  id v16 = objc_alloc_init((Class)NSMutableArray);
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v17 = v7;
  id v18 = [v17 countByEnumeratingWithState:&v30 objects:v38 count:16];
  if (v18)
  {
    id v19 = v18;
    uint64_t v20 = *(void *)v31;
    do
    {
      for (uint64_t j = 0; j != v19; uint64_t j = (char *)j + 1)
      {
        if (*(void *)v31 != v20) {
          objc_enumerationMutation(v17);
        }
        long long v22 = *(void **)(*((void *)&v30 + 1) + 8 * (void)j);
        if ([v22 type] != 1) {
          [v16 addObject:v22];
        }
      }
      id v19 = [v17 countByEnumeratingWithState:&v30 objects:v38 count:16];
    }
    while (v19);
  }

  id v24 = [v16 copy];
  uint64_t v25 = *(void *)(a1 + 40);
  int v26 = *(void **)(v25 + 448);
  *(void *)(v25 + 44_Block_object_dispose(&STACK[0x338], 8) = v24;

  if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    id v27 = [v17 count:v27, v29, v30];
    LogPrintF_safe();
  }
  [*(id *)(a1 + 40) _identitiesReevaluateDevices:v27];
  [*(id *)(a1 + 40) scheduleAdvertiserUpdateImmediate:0];
  [*(id *)(a1 + 40) scheduleSpatialUpdateImmediate:0];
  [*(id *)(a1 + 40) _updateUserControllerCloudDevices];

LABEL_47:
}

void sub_10006EBB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

void sub_10006EBD8(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  id v6 = [v5 identifier];
  if (v6
    && ([*(id *)(*(void *)(a1 + 32) + 544) objectForKeyedSubscript:v6],
        id v7 = objc_claimAutoreleasedReturnValue(),
        v7,
        !v7))
  {
  }
  else
  {

    uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    uint64_t v9 = *(void **)(v8 + 40);
    if (v9)
    {
      id v10 = [v9 lastSeenTicks];
      if (v10 <= [v5 lastSeenTicks]) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(*(void *)(a1 + 40) + 8);
    }
    objc_storeStrong((id *)(v8 + 40), a3);
  }
LABEL_8:
}

void sub_10006EDC4(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (([v5 internalFlags] & 2) != 0) {
    [*(id *)(a1 + 32) _identitiesResolveNearbyDevice:v5];
  }
}

void sub_10006F7C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  (*(void (**)(void))(a19 + 16))();
  _Block_object_dispose(&a34, 8);
  _Block_object_dispose(&a38, 8);
  _Block_object_dispose((const void *)(v38 - 200), 8);
  _Block_object_dispose((const void *)(v38 - 152), 8);
  _Unwind_Resume(a1);
}

void sub_10006F840(void *a1)
{
  uint64_t v2 = a1[4];
  uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 40);
  if (v3 && dword_1009F7F98 <= 90)
  {
    if (dword_1009F7F98 == -1)
    {
      int v4 = _LogCategory_Initialize();
      uint64_t v2 = a1[4];
      if (!v4) {
        goto LABEL_6;
      }
      uint64_t v3 = *(void *)(*(void *)(v2 + 8) + 40);
    }
    uint64_t v12 = v3;
    LogPrintF_safe();
    uint64_t v2 = a1[4];
  }
LABEL_6:
  uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
  int v6 = *(unsigned __int8 *)(*(void *)(a1[5] + 8) + 24);
  if (dword_1009F7F98 <= 20 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    id v7 = "ResolvedDecryptionFailed";
    uint64_t v8 = "Resolved";
    if (!v5) {
      id v7 = "Resolved";
    }
    if (!v6) {
      uint64_t v8 = "NotResolved";
    }
    uint64_t v13 = v7;
    id v14 = v8;
    uint64_t v12 = *(void *)(*(void *)(a1[6] + 8) + 40);
    LogPrintF_safe();
  }
  uint64_t v9 = +[CBMetricsDaemon sharedCBMetricsDaemon];
  id v15 = v9;
  if (v5) {
    uint64_t v10 = 5;
  }
  else {
    uint64_t v10 = 1;
  }
  if (v6) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = 10;
  }
  [v9 reportAuthTagType:2 authTagStatus:v10 integrityTagStatus:v11 resolutionWindow:*(char *)(*(void *)(a1[7] + 8) + 24)];
}

void sub_10006FF3C(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_1009F7F98 <= 40 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    id v3 = v4;
    LogPrintF_safe();
  }
  [*(id *)(*(void *)(a1 + 32) + 528) remoteControllersChanged:v3];
}

void sub_10006FFE4(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_1009F7F98 <= 40 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    id v3 = v4;
    LogPrintF_safe();
  }
  [*(id *)(*(void *)(a1 + 32) + 528) remoteControllersChanged:v3];
  [*(id *)(a1 + 32) _remoteInvalidateInactiveXPC];
}

void sub_100070094(uint64_t a1, void *a2)
{
  id v4 = a2;
  if (dword_1009F7F98 <= 40 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    id v3 = v4;
    LogPrintF_safe();
  }
  [*(id *)(*(void *)(a1 + 32) + 528) remoteControllersChanged:v3];
}

id sub_10007013C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return [*(id *)(a1 + 32) _remoteReceivedEvent:a2 options:a3];
}

id sub_10007014C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return [*(id *)(a1 + 32) _remoteReceivedRequest:a2 options:a3 responseHandler:a4];
}

void sub_100070160(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 184))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();
      }
      [*(id *)(*(void *)(a1 + 40) + 184) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      int v6 = *(void **)(v5 + 184);
      *(void *)(v5 + 184) = 0;

      *(unsigned char *)(*(void *)(a1 + 40) + 200) = 0;
      goto LABEL_11;
    }
    if (dword_1009F7F98 <= 30)
    {
      id v9 = 0;
      if (dword_1009F7F98 != -1 || (v7 = _LogCategory_Initialize(), id v4 = 0, v7))
      {
        LogPrintF_safe();
LABEL_11:
        id v4 = v9;
      }
    }
  }
}

void sub_10007029C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 208) && dword_1009F7F98 <= 90)
  {
    id v7 = v3;
    if (dword_1009F7F98 != -1 || (v5 = _LogCategory_Initialize(), id v4 = v7, v5))
    {
      int v6 = CUPrintNSError();
      LogPrintF_safe();

      id v4 = v7;
    }
  }
}

void sub_1000703F8(uint64_t a1)
{
  if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = [*(id *)(a1 + 32) name];
  unsigned int v3 = [v2 isEqualToString:@"com.apple.bluetooth.leconnection"];

  if (v3)
  {
    id v4 = [*(id *)(a1 + 32) userInfo];
    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged();

    if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = Int64Ranged;
      LogPrintF_safe();
    }
    int v6 = +[NSNumber numberWithInt:Int64Ranged, v8, @"NUMBER_OF_LE_CONNECTIONS"];
    uint64_t v10 = v6;
    id v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];

    [*(id *)(a1 + 40) sendCoexUpdate:v7];
  }
}

void sub_100070AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_100070B24(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 40)
    && dword_1009F7F98 <= 90
    && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    [*(id *)(a1 + 40) unsignedIntValue];
    CUPrintNSError();
    id v2 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_100070FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100071024(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 56) + 8) + 40))
  {
    uint64_t v1 = result;
    if (dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      [*(id *)(v1 + 40) unsignedIntValue];
      unsigned int v3 = CUPrintNSError();
      LogPrintF_safe();
    }
    id v2 = *(uint64_t (**)(void))(*(void *)(v1 + 48) + 16);
    return v2();
  }
  return result;
}

void *sub_100071704(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[66]) {
    return [result _whbDiscoveryDeviceFound:a2];
  }
  return result;
}

void *sub_100071720(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v3 == result[66]) {
    return [result _whbDiscoveryDeviceLost:a2];
  }
  return result;
}

void sub_100071EC4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if (!v6)
  {
    if (dword_1009F7F98 <= 40 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = *(void *)(a1 + 32);
      unsigned int v9 = [v5 cloudSyncStatus];
      if (v9 > 3) {
        uint64_t v10 = "?";
      }
      else {
        uint64_t v10 = off_100998018[(char)v9];
      }
      uint64_t v13 = v8;
      id v15 = v10;
      LogPrintF_safe();
    }
    uint64_t v11 = *(void **)(*(void *)(a1 + 40) + 480);
    id v16 = 0;
    unsigned __int8 v12 = [v11 updateControllerInfo:v5 error:&v16 v13, v15];
    id v7 = v16;
    if ((v12 & 1) == 0 && dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
    {
      id v14 = CUPrintNSError();
      LogPrintF_safe();
    }
    goto LABEL_16;
  }
  if (dword_1009F7F98 <= 90 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
  {
    CUPrintNSError();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
LABEL_16:
  }
}

void sub_1000721A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v7 = v3;
  if (!v3)
  {
    [*(id *)(*(void *)(a1 + 32) + 512) storeControllerInfo:*(void *)(a1 + 40) completion:&stru_100997EB8];
LABEL_3:
    id v4 = v7;
    goto LABEL_4;
  }
  id v4 = v3;
  if (dword_1009F7F98 <= 90)
  {
    if (dword_1009F7F98 != -1 || (v5 = _LogCategory_Initialize(), id v4 = v7, v5))
    {
      id v6 = CUPrintNSError();
      LogPrintF_safe();

      goto LABEL_3;
    }
  }
LABEL_4:
}

void sub_100072278(id a1, NSError *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (v2)
  {
    if (dword_1009F7F98 <= 90)
    {
      id v6 = v2;
      if (dword_1009F7F98 != -1 || (int v4 = _LogCategory_Initialize(), v3 = v6, v4))
      {
        int v5 = CUPrintNSError();
        LogPrintF_safe();

        id v3 = v6;
      }
    }
  }
}

id sub_1000723F4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activateCBAdvertiser:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100072738(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateCBAdvertiser:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_1000729D0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activateCBController:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100072D24(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateCBController:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100072FBC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activateCBDiscovery:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100073364(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateCBDiscovery:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100073628(uint64_t a1)
{
  return [*(id *)(a1 + 32) _activateCBSpatialInteractionSession:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_10007397C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidateCBSpatialInteractionSession:*(void *)(a1 + 40) completion:*(void *)(a1 + 48)];
}

id sub_100073BE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _aopMessageReceived:*(void *)(a1 + 40)];
}

id sub_100073EFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _notifyConnectedDeviceUUID:*(void *)(a1 + 40) name:*(void *)(a1 + 48) servicesUUIDs:*(void *)(a1 + 56)];
}

void sub_10007448C(void *a1)
{
  uint64_t v2 = [*(id *)(a1[4] + 528) localDeviceForStableId:a1[5]];
  uint64_t v3 = *(void *)(a1[6] + 8);
  int v4 = *(void **)(v3 + 40);
  *(void *)(v3 + 40) = v2;
}

void sub_1000745A0(void *a1)
{
  int v4 = 0;
  uint64_t v2 = *(void **)(a1[4] + 528);
  if (v2)
  {
    uint64_t v3 = [v2 optimalHostIdForStableId:a1[5] result:&v4];
  }
  else
  {
    uint64_t v3 = 0;
    int v4 = 1702;
  }
  (*(void (**)(void))(a1[6] + 16))();
}

void sub_1000747B8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 512);
  *(void *)(v1 + 512) = 0;
}

void sub_1000747C8(uint64_t a1, void *a2)
{
  id v6 = a2;
  if (v6)
  {
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 512);
    *(void *)(v4 + 512) = 0;

    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  else
  {
    if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 40) + 16);
  }
  v3();
}

void sub_1000750F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100075110(uint64_t a1, int a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (!string_ptr) {
    return 1;
  }
  int v5 = strcasecmp(string_ptr, *(const char **)(a1 + 40));
  uint64_t result = 1;
  if (!v5)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    return 0;
  }
  return result;
}

BOOL sub_100075168(uint64_t a1, int a2, xpc_object_t xstring)
{
  string_ptr = xpc_string_get_string_ptr(xstring);
  if (!string_ptr) {
    return 1;
  }
  BOOL result = strcasecmp(string_ptr, *(const char **)(a1 + 40)) != 0;
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  return result;
}

void sub_100075720(uint64_t a1, void *a2)
{
  id v12 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = [*(id *)(a1 + 40) activatedDiscovery];

  int v5 = v12;
  if (v3 == v4)
  {
    id v6 = [v12 identifier];
    if (v6)
    {
      id v7 = [*(id *)(a1 + 40) deviceMap];
      if (!v7)
      {
        id v7 = objc_alloc_init((Class)NSMutableDictionary);
        [*(id *)(a1 + 40) setDeviceMap:v7];
      }
      [v7 setObject:v12 forKeyedSubscript:v6];
      id v8 = *(id *)(*(void *)(a1 + 48) + 392);
      if (v8)
      {
        if ([*(id *)(a1 + 32) keepAlive]) {
          [*(id *)(a1 + 32) memoryPressureFlags];
        }
        xpc_event_publisher_set_subscriber_keepalive();
        xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_string(v9, "eventType", "deviceFound");
        uint64_t v10 = [v12 xpcEventRepresentation];
        xpc_dictionary_set_value(v9, "device", v10);

        xpc_event_publisher_fire();
        if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
        {
          uint64_t v11 = CUPrintErrorCode();
          LogPrintF_safe();
        }
      }
    }
    int v5 = v12;
  }
}

void sub_10007594C(uint64_t a1, void *a2)
{
  id v12 = a2;
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = [*(id *)(a1 + 40) activatedDiscovery];

  int v5 = v12;
  if (v3 == v4)
  {
    id v6 = [v12 identifier];
    if (v6)
    {
      id v7 = [*(id *)(a1 + 40) deviceMap];
      [v7 setObject:0 forKeyedSubscript:v6];
      id v8 = *(id *)(*(void *)(a1 + 48) + 392);
      if (v8)
      {
        xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_string(v9, "eventType", "deviceLost");
        uint64_t v10 = [v12 xpcEventRepresentation];
        xpc_dictionary_set_value(v9, "device", v10);

        xpc_event_publisher_fire();
        if ([*(id *)(a1 + 32) keepAlive] && objc_msgSend(v7, "count")) {
          [*(id *)(a1 + 32) memoryPressureFlags];
        }
        xpc_event_publisher_set_subscriber_keepalive();
        if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize()))
        {
          uint64_t v11 = CUPrintErrorCode();
          LogPrintF_safe();
        }
      }
    }
    int v5 = v12;
  }
}

void sub_100075DA0(id a1)
{
  unsigned int DeviceClass = GestaltGetDeviceClass();
  byte_1009FC0E0 = (DeviceClass < 0xE) & (0x20C2u >> DeviceClass);
}

void sub_100075E2C(id a1)
{
  byte_1009FC0E1 = GestaltGetDeviceClass() == 13;
}

void sub_100075EEC(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 120);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableOrderedSet);
    uint64_t v4 = *(void *)(a1 + 32);
    int v5 = *(void **)(v4 + 120);
    *(void *)(v4 + 120) = v3;

    uint64_t v2 = *(void **)(*(void *)(a1 + 32) + 120);
  }
  if ((unint64_t)[v2 count] >= 0x10) {
    [*(id *)(*(void *)(a1 + 32) + 120) removeObjectAtIndex:0];
  }
  [*(id *)(*(void *)(a1 + 32) + 120) addObject:*(void *)(a1 + 40)];
  uint64_t v6 = *(void *)(a1 + 32);
  if (!*(void *)(v6 + 128))
  {
    dispatch_source_t v7 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, *(dispatch_queue_t *)(v6 + 88));
    uint64_t v8 = *(void *)(a1 + 32);
    xpc_object_t v9 = *(void **)(v8 + 128);
    *(void *)(v8 + 12_Block_object_dispose(&STACK[0x338], 8) = v7;
    uint64_t v10 = v7;

    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    void v12[2] = sub_10007602C;
    v12[3] = &unk_100997208;
    uint64_t v11 = *(void *)(a1 + 32);
    v12[4] = v10;
    v12[5] = v11;
    dispatch_source_set_event_handler(v10, v12);
    CUDispatchTimerSet();
    dispatch_activate(v10);
  }
}

void sub_10007602C(uint64_t a1)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 128))
  {
    if (dword_1009F7F98 <= 30 && (dword_1009F7F98 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 128);
    if (v2)
    {
      id v3 = v2;
      dispatch_source_cancel(v3);
      uint64_t v4 = *(void *)(a1 + 40);
      int v5 = *(void **)(v4 + 128);
      *(void *)(v4 + 12_Block_object_dispose(&STACK[0x338], 8) = 0;
    }
    id v6 = objc_alloc_init((Class)NSMutableOrderedSet);
    uint64_t v7 = *(void *)(a1 + 40);
    uint64_t v8 = *(void **)(v7 + 120);
    *(void *)(v7 + 120) = v6;
  }
}

void sub_1000764A8(id a1)
{
  os_log_t v1 = os_log_create("com.apple.bluetooth", "CBDaemonServerStatedump");
  uint64_t v2 = (void *)qword_1009FC0D0;
  qword_1009FC0D0 = (uint64_t)v1;
}

void sub_100076728(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000773A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a36, 8);
  _Block_object_dispose(&a40, 8);
  _Block_object_dispose(&a44, 8);

  _Block_object_dispose(&a50, 8);
  _Block_object_dispose(&a54, 8);

  _Block_object_dispose(&a60, 8);
  _Block_object_dispose(&a64, 8);

  _Block_object_dispose(&a70, 8);
  _Block_object_dispose(&STACK[0x208], 8);
  _Block_object_dispose(&STACK[0x228], 8);
  _Block_object_dispose(&STACK[0x248], 8);

  _Block_object_dispose(&STACK[0x278], 8);
  _Block_object_dispose(&STACK[0x298], 8);
  _Block_object_dispose((const void *)(v74 - 248), 8);
  _Block_object_dispose((const void *)(v74 - 216), 8);
  _Block_object_dispose((const void *)(v74 - 184), 8);
  _Block_object_dispose((const void *)(v74 - 152), 8);
  _Block_object_dispose((const void *)(v74 - 120), 8);

  _Unwind_Resume(a1);
}

void sub_100077584(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = *(_WORD *)(a2 + 392);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24) = *(unsigned char *)(a2 + 164);
  *(_WORD *)(*(void *)(*(void *)(a1 + 56) + 8) + 24) = *(_WORD *)(a2 + 32);
  char v4 = *(unsigned char *)(*(void *)(*(void *)(a1 + 48) + 8) + 24);
  if (v4) {
    char v4 = *(unsigned char *)(a2 + 232) != 0;
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 64) + 8) + 24) = v4;
  int v5 = (_OWORD *)(a2 + 208);
  if (*(char *)(a2 + 231) < 0)
  {
    sub_10003B098(__p, *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    *(_OWORD *)__p = *v5;
    uint64_t v52 = *(void *)(a2 + 224);
  }
  if (SHIBYTE(v52) < 0)
  {
    uint64_t v7 = __p[0];
    uint64_t v6 = a1 + 72;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = __p[1] != 0;
    operator delete(v7);
  }
  else
  {
    uint64_t v6 = a1 + 72;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 72) + 8) + 24) = SHIBYTE(v52) != 0;
  }
  uint64_t v8 = *(void *)(*(void *)v6 + 8);
  int v9 = *(unsigned __int8 *)(v8 + 24);
  if (*(unsigned char *)(v8 + 24))
  {
    if (*(char *)(a2 + 231) < 0)
    {
      sub_10003B098(__p, *(void **)(a2 + 208), *(void *)(a2 + 216));
    }
    else
    {
      *(_OWORD *)__p = *v5;
      uint64_t v52 = *(void *)(a2 + 224);
    }
    if (v52 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    uint64_t v10 = +[NSString stringWithUTF8String:v11];
  }
  else
  {
    uint64_t v10 = 0;
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 80) + 8) + 40), v10);
  if (v9)
  {

    if (SHIBYTE(v52) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10004191C(v49, "IsHearingAid");
  id v12 = (void *)(a2 + 176);
  uint64_t v13 = (void *)(a2 + 184);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 88) + 8) + 24) = a2 + 184 != sub_10003156C(a2 + 176, (const void **)v49);
  if (v50 < 0) {
    operator delete(v49[0]);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 96) + 8) + 24) = sub_1006B229C(a2);
  sub_10004191C(v47, "IsPrimaryHearingAid");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 104) + 8) + 24) = v13 != (void *)sub_10003156C(a2 + 176, (const void **)v47);
  if (v48 < 0) {
    operator delete(v47[0]);
  }
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 112) + 8) + 40), *(id *)(a2 + 304));
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_100998080);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 120) + 8) + 24) = sub_100030D38((uint64_t)off_1009F7ED8, *(void **)(a1 + 32));
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_100998080);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 128) + 8) + 24) = sub_1006C85E0((uint64_t)off_1009F7ED8, *(void **)(a1 + 32));
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10003B098(__dst, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    *(_OWORD *)__uuid_t dst = *(_OWORD *)(a2 + 104);
    void __dst[2] = *(void **)(a2 + 120);
  }
  if (SHIBYTE(__dst[2]) >= 0) {
    id v14 = __dst;
  }
  else {
    id v14 = (void **)__dst[0];
  }
  uint64_t v15 = +[NSString stringWithUTF8String:v14];
  uint64_t v16 = *(void *)(*(void *)(a1 + 136) + 8);
  id v17 = *(void **)(v16 + 40);
  *(void *)(v16 + 40) = v15;

  if (SHIBYTE(__dst[2]) < 0) {
    operator delete(__dst[0]);
  }
  *(unsigned char *)(*(void *)(*(void *)(a1 + 144) + 8) + 24) = *(unsigned char *)(a2 + 160);
  objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 152) + 8) + 40), *(id *)(a2 + 336));
  int v18 = *(_DWORD *)(a2 + 464);
  if (v18) {
    int v18 = *(_DWORD *)(a2 + 468) / v18;
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 160) + 8) + 24) = v18;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_100998080);
  }
  id v19 = off_1009F7ED8;
  uint64_t v20 = *(void **)(a1 + 32);
  sub_10004191C(v44, "_CTKD_");
  *(unsigned char *)(*(void *)(*(void *)(a1 + 168) + 8) + 24) = sub_100030A04((uint64_t)v19, v20, (uint64_t)v44);
  if (v45 < 0) {
    operator delete(v44[0]);
  }
  long long v21 = (void *)*v12;
  if ((void *)*v12 == v13) {
    return;
  }
  while (1)
  {
    memset(__dst, 0, 24);
    if (*((char *)v21 + 55) < 0)
    {
      sub_10003B098(__dst, (void *)v21[4], v21[5]);
    }
    else
    {
      *(_OWORD *)__uuid_t dst = *((_OWORD *)v21 + 2);
      void __dst[2] = *((void **)v21 + 6);
    }
    char v22 = HIBYTE(__dst[2]);
    if ((SHIBYTE(__dst[2]) & 0x80000000) == 0)
    {
      long long v23 = __dst;
      switch(HIBYTE(__dst[2]))
      {
        case 9:
          goto LABEL_104;
        case 0xC:
          goto LABEL_120;
        case 0x10:
          goto LABEL_114;
        case 0x12:
          BOOL v24 = __dst[0] == (void *)0x4E41524145505041 && __dst[1] == (void *)0x50454D41475F4543;
          if (!v24 || LOWORD(__dst[2]) != 17473) {
            goto LABEL_134;
          }
          goto LABEL_144;
        case 0x13:
          if (__dst[0] == (void *)0x4E41524145505041
            && __dst[1] == (void *)0x5453594F4A5F4543
            && *(void **)((char *)&__dst[1] + 3) == (void *)0x4B43495453594F4ALL)
          {
            goto LABEL_143;
          }
          if (__dst[0] == (void *)0x4E41524145505041
            && __dst[1] == (void *)0x4F4259454B5F4543
            && *(void **)((char *)&__dst[1] + 3) == (void *)0x4452414F4259454BLL)
          {
            goto LABEL_145;
          }
          if ((HIBYTE(__dst[2]) & 0x80) != 0) {
            goto LABEL_102;
          }
          long long v23 = __dst;
          if (HIBYTE(__dst[2]) == 16) {
            goto LABEL_114;
          }
          if (HIBYTE(__dst[2]) == 12) {
            goto LABEL_120;
          }
          if (HIBYTE(__dst[2]) != 9) {
            goto LABEL_134;
          }
          goto LABEL_104;
        default:
          goto LABEL_134;
      }
    }
    long long v23 = (void **)__dst[0];
    int v26 = __dst[1];
    if (__dst[1] == (void *)18)
    {
      BOOL v27 = *(void *)__dst[0] == 0x4E41524145505041 && *((void *)__dst[0] + 1) == 0x50454D41475F4543;
      if (v27 && *((_WORD *)__dst[0] + 8) == 17473)
      {
LABEL_144:
        char v43 = 26;
        goto LABEL_146;
      }
    }
    if (__dst[1] == (void *)19) {
      break;
    }
LABEL_103:
    if (v26 != (void *)9) {
      goto LABEL_113;
    }
LABEL_104:
    if (*v23 == (void *)0x73756F4D454C7349 && *((unsigned char *)v23 + 8) == 101)
    {
LABEL_141:
      char v43 = 25;
      goto LABEL_146;
    }
    if ((HIBYTE(__dst[2]) & 0x80) != 0)
    {
      long long v23 = (void **)__dst[0];
      int v26 = __dst[1];
LABEL_113:
      if (v26 != (void *)16) {
        goto LABEL_127;
      }
      goto LABEL_114;
    }
    if (HIBYTE(__dst[2]) == 12) {
      goto LABEL_120;
    }
    if (HIBYTE(__dst[2]) != 16) {
      goto LABEL_134;
    }
    long long v23 = __dst;
LABEL_114:
    if (*v23 == (void *)0x4E41524145505041 && v23[1] == (void *)0x4553554F4D5F4543) {
      goto LABEL_141;
    }
    if ((HIBYTE(__dst[2]) & 0x80) == 0)
    {
      if (HIBYTE(__dst[2]) != 12) {
        goto LABEL_134;
      }
LABEL_120:
      if (__dst[0] == (void *)0x6E69726165487349 && LODWORD(__dst[1]) == 1684619623) {
        goto LABEL_142;
      }
      goto LABEL_134;
    }
    long long v23 = (void **)__dst[0];
    int v26 = __dst[1];
LABEL_127:
    if (v26 != (void *)12) {
      goto LABEL_133;
    }
    if (*v23 == (void *)0x6E69726165487349 && *((_DWORD *)v23 + 2) == 1684619623)
    {
LABEL_142:
      char v43 = 51;
      goto LABEL_146;
    }
    if ((HIBYTE(__dst[2]) & 0x80) != 0) {
LABEL_133:
    }
      operator delete(v23);
LABEL_134:
    int v41 = (void *)v21[1];
    if (v41)
    {
      do
      {
        uint64_t v42 = v41;
        int v41 = (void *)*v41;
      }
      while (v41);
    }
    else
    {
      do
      {
        uint64_t v42 = (void *)v21[2];
        BOOL v24 = *v42 == (void)v21;
        long long v21 = v42;
      }
      while (!v24);
    }
    long long v21 = v42;
    if (v42 == v13) {
      return;
    }
  }
  if (*(void *)__dst[0] == 0x4E41524145505041
    && *((void *)__dst[0] + 1) == 0x5453594F4A5F4543
    && *(void *)((char *)__dst[0] + 11) == 0x4B43495453594F4ALL)
  {
LABEL_143:
    char v43 = 50;
    goto LABEL_146;
  }
  if (*(void *)__dst[0] != 0x4E41524145505041
    || *((void *)__dst[0] + 1) != 0x4F4259454B5F4543
    || *(void *)((char *)__dst[0] + 11) != 0x4452414F4259454BLL)
  {
LABEL_102:
    long long v23 = (void **)__dst[0];
    int v26 = __dst[1];
    goto LABEL_103;
  }
LABEL_145:
  char v43 = 24;
LABEL_146:
  *(unsigned char *)(*(void *)(*(void *)(a1 + 176) + 8) + 24) = v43;
  if (v22 < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100077CD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a40 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_100077D6C(uint64_t a1)
{
  if ((int)a1 <= 665)
  {
    if ((int)a1 > 570)
    {
      if ((int)a1 > 598)
      {
        switch((int)a1)
        {
          case 613:
            goto LABEL_25;
          case 614:
          case 616:
          case 618:
          case 619:
            goto LABEL_50;
          case 615:
            goto LABEL_11;
          case 617:
            goto LABEL_51;
          case 620:
            os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
            uint64_t v2 = [v1 localizedStringForKey:@"apple_magic_keyboard_keypad" value:&stru_1009C1AC8 table:@"CBLocalizable"];
            break;
          default:
            if (a1 == 599) {
              goto LABEL_49;
            }
            goto LABEL_50;
        }
        goto LABEL_53;
      }
      if (a1 == 571 || a1 == 597 || a1 == 598) {
        goto LABEL_49;
      }
    }
    else if ((int)a1 <= 555)
    {
      if ((int)a1 > 520)
      {
        if (a1 == 521 || a1 == 522) {
          goto LABEL_49;
        }
      }
      else
      {
        if (!a1)
        {
          id v3 = 0;
          goto LABEL_54;
        }
        if (a1 == 520) {
          goto LABEL_49;
        }
      }
    }
    else if ((int)a1 <= 558 || a1 == 569 || a1 == 570)
    {
LABEL_49:
      os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
      uint64_t v2 = [v1 localizedStringForKey:@"apple_wireless_keyboard" value:&stru_1009C1AC8 table:@"CBLocalizable"];
      goto LABEL_53;
    }
LABEL_50:
    os_log_t v1 = +[CBProductInfo productInfoWithProductID:a1];
    uint64_t v2 = [v1 productName];
    goto LABEL_53;
  }
  if ((int)a1 <= 799)
  {
    if ((int)a1 > 776)
    {
      switch((int)a1)
      {
        case 777:
          os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
          uint64_t v2 = [v1 localizedStringForKey:@"apple_wireless_mouse" value:&stru_1009C1AC8 table:@"CBLocalizable"];
          break;
        case 780:
          os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
          uint64_t v2 = [v1 localizedStringForKey:@"apple_mighty_mouse" value:&stru_1009C1AC8 table:@"CBLocalizable"];
          break;
        case 781:
LABEL_51:
          os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
          uint64_t v2 = [v1 localizedStringForKey:@"apple_magic_mouse" value:&stru_1009C1AC8 table:@"CBLocalizable"];
          break;
        case 782:
LABEL_25:
          os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
          uint64_t v2 = [v1 localizedStringForKey:@"apple_magic_trackpad" value:&stru_1009C1AC8 table:@"CBLocalizable"];
          break;
        default:
          goto LABEL_50;
      }
      goto LABEL_53;
    }
    switch(a1)
    {
      case 0x29A:
LABEL_45:
        os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
        uint64_t v2 = [v1 localizedStringForKey:@"apple_magic_keyboard_touch" value:&stru_1009C1AC8 table:@"CBLocalizable"];
        break;
      case 0x29C:
LABEL_11:
        os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
        uint64_t v2 = [v1 localizedStringForKey:@"apple_magic_keyboard" value:&stru_1009C1AC8 table:@"CBLocalizable"];
        break;
      case 0x29F:
LABEL_33:
        os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
        uint64_t v2 = [v1 localizedStringForKey:@"apple_magic_keyboard_touch_keypad" value:&stru_1009C1AC8 table:@"CBLocalizable"];
        break;
      default:
        goto LABEL_50;
    }
  }
  else
  {
    if ((int)a1 <= 8212)
    {
      switch((int)a1)
      {
        case 800:
          goto LABEL_11;
        case 801:
          goto LABEL_45;
        case 802:
          goto LABEL_33;
        case 803:
          goto LABEL_51;
        case 804:
          goto LABEL_25;
        default:
          goto LABEL_50;
      }
    }
    if (a1 != 8220 && a1 != 8216 && a1 != 8213) {
      goto LABEL_50;
    }
    os_log_t v1 = +[NSBundle bundleWithIdentifier:@"com.apple.CoreBluetooth"];
    uint64_t v2 = [v1 localizedStringForKey:@"apple_airpods_case" value:&stru_1009C1AC8 table:@"CBLocalizable"];
  }
LABEL_53:
  id v3 = (void *)v2;

LABEL_54:

  return v3;
}

void sub_1000786FC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007A6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  a39 = v52 - 120;
  sub_100051568((void ***)&a39);

  _Unwind_Resume(a1);
}

void sub_10007AAE0(id a1)
{
}

void sub_10007AB24()
{
}

void sub_10007AB48(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 24)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_10007AB98(id a1)
{
}

void sub_10007ABDC()
{
}

void sub_10007AC00(id a1)
{
}

void sub_10007AC44()
{
}

void sub_10007AC68(id a1)
{
}

void sub_10007ACAC()
{
}

void sub_10007ACD0(id a1)
{
}

void sub_10007AD14()
{
}

void sub_10007AD38(id a1)
{
}

void sub_10007AD7C()
{
}

void sub_10007ADA0(id a1)
{
}

void sub_10007ADE4()
{
}

void sub_10007AE08(id a1)
{
}

void sub_10007AE4C()
{
}

void sub_10007AE70(id a1)
{
}

void sub_10007AEB4()
{
}

uint64_t sub_10007BA84(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  id v6 = [*(id *)(a1 + 32) calculateMetricforDevice:*(void *)(a1 + 40) onHost:a2];
  id v7 = [*(id *)(a1 + 32) calculateMetricforDevice:*(void *)(a1 + 40) onHost:v5];
  if (v6 == v7)
  {
    uint64_t v8 = [v5 isEqual:@"CBLocalHostID"];
  }
  else if (v6 < v7)
  {
    uint64_t v8 = 1;
  }
  else
  {
    uint64_t v8 = -1;
  }

  return v8;
}

void sub_10007BC6C(uint64_t a1)
{
  if (dword_1009F80B8 <= 30 && (dword_1009F80B8 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  uint64_t v2 = [*(id *)(a1 + 32) name];
  unsigned int v3 = [v2 isEqualToString:@"com.apple.bluetooth.leconnection"];

  if (v3)
  {
    char v4 = [*(id *)(a1 + 32) userInfo];
    uint64_t Int64Ranged = CFDictionaryGetInt64Ranged();

    if (dword_1009F80B8 <= 30 && (dword_1009F80B8 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = Int64Ranged;
      LogPrintF_safe();
    }
    id v6 = +[NSNumber numberWithInt:Int64Ranged, v8, @"NUMBER_OF_LE_CONNECTIONS"];
    uint64_t v10 = v6;
    id v7 = +[NSDictionary dictionaryWithObjects:&v10 forKeys:&v9 count:1];

    [*(id *)(a1 + 40) updateCoexUpdate:v7 whbHost:@"CBLocalHostID"];
  }
}

id sub_10007C8E8(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) removeDeviceFromDeviceTable:a2 value:*(void *)(a1 + 40)];
}

void sub_10007D438(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_10007D450(uint64_t a1, uint64_t a2, void *a3, unsigned char *a4)
{
  id v10 = a3;
  unsigned int v8 = [*(id *)(a1 + 32) isEqual:a2];
  uint64_t v9 = v10;
  if (v8)
  {
    if (dword_1009F80B8 <= 30 && (dword_1009F80B8 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    *a4 = 1;
    objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 48) + 8) + 40), a3);
    uint64_t v9 = v10;
  }
}

_WORD *sub_10007DA30(_WORD *result)
{
  void *result = 256;
  return result;
}

void sub_10007DA3C(unsigned char *a1, uint64_t a2)
{
  uint64_t v2 = (const mach_header_64 *)(a2 & 0xFFFFFFFF00000000);
  int v3 = (a2 & 0xFFFFFFFF00000000) == (void)&_mh_execute_header;
  if (*a1 != v3)
  {
    *a1 = v3;
    char v4 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      id v5 = "not associated";
      if (v2 == &_mh_execute_header) {
        id v5 = "associated";
      }
      int v12 = 136315138;
      uint64_t v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Latency WiFi is %s to 2.4GHz band", (uint8_t *)&v12, 0xCu);
    }
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009982A0);
    }
    if (*((void *)off_1009F80A8 + 26))
    {
      id v6 = (char *)*((void *)off_1009F80A8 + 24);
      id v7 = (char *)off_1009F80A8 + 200;
      if (v6 != (char *)off_1009F80A8 + 200)
      {
        do
        {
          uint64_t v8 = *((void *)v6 + 5);
          if (*(_WORD *)(v8 + 84))
          {
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009982A0);
            }
            sub_10008CD0C(*((void *)off_1009F80A8 + 27), 0, *(unsigned __int16 *)(v8 + 84));
          }
          uint64_t v9 = (char *)*((void *)v6 + 1);
          if (v9)
          {
            do
            {
              id v10 = v9;
              uint64_t v9 = *(char **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              id v10 = (char *)*((void *)v6 + 2);
              BOOL v11 = *(void *)v10 == (void)v6;
              id v6 = v10;
            }
            while (!v11);
          }
          id v6 = v10;
        }
        while (v10 != v7);
      }
    }
  }
}

uint64_t sub_10007DC04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = _os_feature_enabled_impl();
  if (a3)
  {
    if (result)
    {
      uint64_t result = sub_10007DD8C(a1, a3);
      if (result)
      {
        uint64_t v7 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 328))(v7))
        {
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009982A0);
          }
          (*(void (**)(void *, uint64_t))(*(void *)off_1009F80A8 + 88))(off_1009F80A8, a2);
        }
        uint64_t v8 = sub_100035F54();
        uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8);
        if (result)
        {
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009982A0);
          }
          uint64_t v9 = *(uint64_t (**)(void))(*(void *)off_1009F80A8 + 88);
          return v9();
        }
      }
    }
  }
  return result;
}

uint64_t sub_10007DD8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 240))(v4)
    && *(unsigned char *)(a1 + 1)
    && (sub_100478B2C(a2, 49) & 1) != 0)
  {
    return 1;
  }
  id v6 = qword_100A19E48;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v7)
  {
    uint64_t v8 = sub_100035F54();
    int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 240))(v8);
    int v10 = *(unsigned __int8 *)(a1 + 1);
    v11[0] = 67109632;
    v11[1] = v9;
    __int16 v12 = 1024;
    int v13 = v10;
    __int16 v14 = 1024;
    int v15 = sub_100478B2C(a2, 49);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Advanced Sniff not allowed %d %d %d", (uint8_t *)v11, 0x14u);
    return 0;
  }
  return result;
}

void sub_10007DEE4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_10007DFF4(a1, a2);
  if (v3)
  {
    uint64_t v4 = sub_10007DFF4(v3, a2);
    ++*(unsigned char *)(v4 + 2);
    uint64_t v5 = qword_100A19E48;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
    if (!v6) {
      return;
    }
    int v7 = *(unsigned __int8 *)(sub_10007DFF4(v6, a2) + 2);
    v12[0] = 67109120;
    v12[1] = v7;
    uint64_t v8 = "Advanced Sniff increased pending count %d";
    int v9 = v5;
    uint32_t v10 = 8;
  }
  else
  {
    uint64_t v11 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v12[0]) = 0;
    uint64_t v8 = "Advanced Sniff increase pending count for invalid device";
    int v9 = v11;
    uint32_t v10 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)v12, v10);
}

uint64_t sub_10007DFF4(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  if (!a2) {
    return 0;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009982A0);
  }
  uint64_t v3 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v3) {
    goto LABEL_15;
  }
  uint64_t v4 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      int v7 = v3;
    }
    else {
      int v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v4 = (char *)v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (char *)off_1009F80A8 + 200 || *((void *)v4 + 4) > a2) {
LABEL_15:
  }
    uint64_t v4 = (char *)off_1009F80A8 + 200;
  if (v4 == (char *)off_1009F80A8 + 200) {
    return 0;
  }
  uint32_t v10 = &v9;
  return *(void *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v9, (uint64_t)&unk_1007B8190, (uint64_t **)&v10)[5]
                   + 48);
}

void sub_10007E0DC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_10007DFF4(a1, a2);
  if (v3)
  {
    uint64_t v4 = sub_10007DFF4(v3, a2);
    int v5 = *(unsigned __int8 *)(v4 + 2);
    uint64_t v6 = sub_10007DFF4(v4, a2);
    if (v5)
    {
      --*(unsigned char *)(v6 + 2);
      uint64_t v7 = qword_100A19E48;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (!v8) {
        return;
      }
      int v9 = *(unsigned __int8 *)(sub_10007DFF4(v8, a2) + 2);
      v14[0] = 67109120;
      v14[1] = v9;
      uint32_t v10 = "Advanced Sniff decreased pending count %d";
      uint64_t v11 = v7;
      uint32_t v12 = 8;
      goto LABEL_10;
    }
    *(unsigned char *)(v6 + 2) = 0;
    uint64_t v13 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v14[0]) = 0;
    uint32_t v10 = "Advanced Sniff pending count 0";
  }
  else
  {
    uint64_t v13 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v14[0]) = 0;
    uint32_t v10 = "Advanced Sniff decrease pending count for invalid device";
  }
  uint64_t v11 = v13;
  uint32_t v12 = 2;
LABEL_10:
  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v10, (uint8_t *)v14, v12);
}

void sub_10007E234(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (_os_feature_enabled_impl())
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009982C0);
    }
    uint64_t v7 = sub_100030F10((uint64_t)off_1009F7EF8, a3, 1);
    if (!v7) {
      goto LABEL_29;
    }
    unint64_t v8 = v7;
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009982A0);
    }
    int v9 = (void *)*((void *)off_1009F80A8 + 25);
    if (!v9) {
      goto LABEL_18;
    }
    uint32_t v10 = (char *)off_1009F80A8 + 200;
    do
    {
      unint64_t v11 = v9[4];
      BOOL v12 = v11 >= v8;
      if (v11 >= v8) {
        uint64_t v13 = v9;
      }
      else {
        uint64_t v13 = v9 + 1;
      }
      if (v12) {
        uint32_t v10 = (char *)v9;
      }
      int v9 = (void *)*v13;
    }
    while (*v13);
    if (v10 == (char *)off_1009F80A8 + 200 || v8 < *((void *)v10 + 4)) {
LABEL_18:
    }
      uint32_t v10 = (char *)off_1009F80A8 + 200;
    if (v10 == (char *)off_1009F80A8 + 200)
    {
LABEL_29:
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_10074435C();
      }
    }
    else
    {
      __int16 v14 = qword_100A19E48;
      BOOL v15 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v15)
      {
        int v16 = *(unsigned __int8 *)sub_10007DFF4(v15, v8);
        *(_DWORD *)buf = 67109376;
        int v23 = v16;
        __int16 v24 = 1024;
        int v25 = a4;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Sniff/Active mode change: %d->%d", buf, 0xEu);
      }
      id v17 = (unsigned char *)sub_10007DFF4(v15, v8);
      *id v17 = a4;
      int v18 = (unsigned char *)sub_10007DFF4((uint64_t)v17, v8);
      if (!*v18)
      {
        uint64_t v19 = sub_10007DFF4((uint64_t)v18, v8);
        if (*(unsigned char *)(v19 + 1))
        {
          *(unsigned char *)(sub_10007DFF4(v19, v8) + 1) = 0;
          uint64_t v20 = sub_1004AFB34();
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_10007E494;
          v21[3] = &unk_100998260;
          v21[4] = a1;
          v21[5] = v8;
          sub_100013018(v20, v21);
        }
      }
    }
  }
}

unsigned char *sub_10007E494(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  char v15 = 0;
  sub_10001B8E0(&v15);
  uint64_t v3 = (unsigned __int16 *)sub_100197A30(*(void *)(a1 + 40) + 128);
  sub_10001B910(&v15);
  uint64_t v4 = qword_100A19E48;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Enter Advanced Sniff after unsniff", buf, 2u);
    }
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009982A0);
    }
    int v5 = *((void *)off_1009F80A8 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007E6E4;
    block[3] = &unk_100998260;
    uint64_t v6 = *(void *)(a1 + 40);
    void block[4] = v2;
    void block[5] = v6;
    dispatch_async(v5, block);
    uint64_t v7 = sub_10003FB34();
    BYTE2(v11) = 1;
    LOWORD(v11) = 2;
    if ((*(unsigned int (**)(uint64_t, void, uint64_t, uint64_t, uint64_t, uint64_t, void, void, uint64_t, int))(*(void *)v7 + 1528))(v7, *v3, 24, 20, 8, 1, 0, 0, 0xFFFF00000001, v11))
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009982A0);
      }
      unint64_t v8 = *((void *)off_1009F80A8 + 32);
      v12[0] = _NSConcreteStackBlock;
      v12[1] = 3221225472;
      _DWORD v12[2] = sub_10007E6F0;
      v12[3] = &unk_100998260;
      uint64_t v9 = *(void *)(a1 + 40);
      v12[4] = v2;
      v12[5] = v9;
      dispatch_async(v8, v12);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_100744390();
  }
  return sub_10001B8AC(&v15);
}

void sub_10007E6CC(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 65));
  _Unwind_Resume(a1);
}

void sub_10007E6E4(uint64_t a1)
{
}

void sub_10007E6F0(uint64_t a1)
{
}

id sub_10007E6F8(uint64_t a1, int a2)
{
  uint64_t v3 = +[NSMutableString stringWithFormat:&stru_1009C1AC8];
  uint64_t v4 = v3;
  if (a2 > 239)
  {
    if (a2 == 240)
    {
      CFStringRef v5 = @"ADVANCEDSNIFF";
      goto LABEL_10;
    }
    if (a2 == 241)
    {
      CFStringRef v5 = @"SEMI-ADVANCEDSNIFF";
      goto LABEL_10;
    }
  }
  else
  {
    if (!a2)
    {
      CFStringRef v5 = @"ACTIVE";
      goto LABEL_10;
    }
    if (a2 == 2)
    {
      CFStringRef v5 = @"CLASSICSNIFF";
LABEL_10:
      [v3 appendString:v5];
      goto LABEL_11;
    }
  }
  [v3 appendString:@"UNKNOWN"];
  uint64_t v7 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Unknown Advanced Sniff mode", v8, 2u);
  }
LABEL_11:

  return v4;
}

void sub_10007E800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10007E810(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  unint64_t v11 = ((unint64_t)*a3 << 40) | ((unint64_t)a3[1] << 32) | ((unint64_t)a3[2] << 24) | ((unint64_t)a3[3] << 16) | ((unint64_t)a3[4] << 8) | a3[5];
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009982C0);
  }
  uint64_t v12 = sub_100030F10((uint64_t)off_1009F7EF8, v11, 1);
  if (v12)
  {
    unint64_t v13 = v12;
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009982A0);
    }
    __int16 v14 = (void *)*((void *)off_1009F80A8 + 25);
    if (!v14) {
      goto LABEL_17;
    }
    char v15 = (char *)off_1009F80A8 + 200;
    do
    {
      unint64_t v16 = v14[4];
      BOOL v17 = v16 >= v13;
      if (v16 >= v13) {
        int v18 = v14;
      }
      else {
        int v18 = v14 + 1;
      }
      if (v17) {
        char v15 = (char *)v14;
      }
      __int16 v14 = (void *)*v18;
    }
    while (*v18);
    if (v15 == (char *)off_1009F80A8 + 200 || v13 < *((void *)v15 + 4)) {
LABEL_17:
    }
      char v15 = (char *)off_1009F80A8 + 200;
    if (v15 != (char *)off_1009F80A8 + 200)
    {
      char v35 = 0;
      sub_10001B8E0(&v35);
      uint64_t v19 = sub_100197A30(v13 + 128);
      uint64_t v20 = sub_10001B910(&v35);
      if (!v19)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
          sub_1007443C4();
        }
        goto LABEL_60;
      }
      long long v21 = (unsigned __int8 *)sub_10007DFF4(v20, v13);
      if (a7 && *v21 == a4)
      {
        char v22 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
          sub_1007443F8(a7, a4, v22);
        }
LABEL_60:
        sub_10001B8AC(&v35);
        return;
      }
      uint64_t v24 = sub_10007DFF4((uint64_t)v21, v13);
      if (!*(unsigned char *)(v24 + 2))
      {
        long long v33 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "Advanced Sniff mode change ignored, not for media", buf, 2u);
        }
        goto LABEL_60;
      }
      sub_10007E0DC(v24, v13);
      if (a7) {
        BOOL v25 = 0;
      }
      else {
        BOOL v25 = a4 == 240;
      }
      if (v25) {
        unsigned __int8 v26 = -15;
      }
      else {
        unsigned __int8 v26 = a4;
      }
      BOOL v27 = qword_100A19E48;
      BOOL v28 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v28)
      {
        size_t v29 = (unsigned __int8 *)sub_10007DFF4(v28, v13);
        long long v30 = sub_10007E6F8((uint64_t)v29, *v29);
        long long v31 = sub_10007E6F8((uint64_t)v30, v26);
        *(_DWORD *)buf = 138413058;
        long long v37 = v30;
        __int16 v38 = 2112;
        id v39 = v31;
        __int16 v40 = 1024;
        int v41 = a7;
        __int16 v42 = 1024;
        int v43 = a8;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Low Latency Game Advanced Sniff changed %@->%@, max_age:%d, maxRetry:%d", buf, 0x22u);
      }
      if (a7 || v26 != 241)
      {
        if (!a7 || v26 != 240)
        {
          if (!v26)
          {
            *(unsigned char *)sub_10007DFF4(v28, v13) = 0;
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009982A0);
            }
            sub_100563678((uint64_t)off_1009F80A8, 0, v13);
          }
          int v34 = 1;
          goto LABEL_55;
        }
        *(unsigned char *)sub_10007DFF4(v28, v13) = -16;
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009982A0);
        }
        unsigned int v32 = 4;
      }
      else
      {
        *(unsigned char *)sub_10007DFF4(v28, v13) = -15;
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009982A0);
        }
        unsigned int v32 = 3;
      }
      sub_100563678((uint64_t)off_1009F80A8, v32, v13);
      int v34 = 2;
LABEL_55:
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009982A0);
      }
      sub_100573DAC((uint64_t)off_1009F80A8, v13, v34);
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009982A0);
      }
      sub_100573B74((uint64_t)off_1009F80A8, v13, v26);
      goto LABEL_60;
    }
  }
  int v23 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "Advanced Sniff mode change ignored: couldn't find the device", buf, 2u);
  }
}

void sub_10007ECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  sub_10001B8AC(&a13);
  _Unwind_Resume(a1);
}

void sub_10007ED00(uint64_t a1, uint64_t a2, unsigned __int8 *a3, int a4, uint64_t a5, uint64_t a6, int a7, int a8)
{
  uint64_t v12 = _os_feature_enabled_impl();
  if (v12)
  {
    sub_10007E810(v12, 0, a3, a4, v13, v14, a7, a8);
  }
}

void sub_10007ED80(uint64_t a1, int a2)
{
  uint64_t v4 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v5 = "True";
    if (*(unsigned char *)(a1 + 1)) {
      uint64_t v6 = "True";
    }
    else {
      uint64_t v6 = "false";
    }
    if (!a2) {
      CFStringRef v5 = "false";
    }
    int v7 = 136315394;
    unint64_t v8 = v6;
    __int16 v9 = 2080;
    uint32_t v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Advanced Sniff State changed %s->%s", (uint8_t *)&v7, 0x16u);
  }
  *(unsigned char *)(a1 + 1) = a2;
}

void sub_10007EE64(uint64_t a1, unint64_t a2)
{
  char v4 = _os_feature_enabled_impl();
  if (!a2 || (v4 & 1) == 0)
  {
    uint64_t v13 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v14 = "Exit Advanced Sniff but feature flag off";
LABEL_26:
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 2u);
    return;
  }
  uint64_t v5 = sub_10007DD8C(a1, a2);
  if ((v5 & 1) == 0)
  {
    uint64_t v13 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v14 = "Exit Advanced Sniff but not allowed";
    goto LABEL_26;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009982A0);
  }
  uint64_t v6 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v6) {
    goto LABEL_17;
  }
  int v7 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint32_t v10 = v6;
    }
    else {
      uint32_t v10 = v6 + 1;
    }
    if (v9) {
      int v7 = (char *)v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_1009F80A8 + 200 || *((void *)v7 + 4) > a2) {
LABEL_17:
  }
    int v7 = (char *)off_1009F80A8 + 200;
  if (v7 == (char *)off_1009F80A8 + 200)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100744484();
    }
  }
  else
  {
    unint64_t v11 = (unsigned __int8 *)sub_10007DFF4(v5, a2);
    if (*v11 == 240 || *(unsigned __int8 *)sub_10007DFF4((uint64_t)v11, a2) == 241)
    {
      uint64_t v12 = sub_1004AFB34();
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      _DWORD v16[2] = sub_10007F088;
      v16[3] = &unk_100998260;
      _OWORD v16[4] = a1;
      void v16[5] = a2;
      sub_100013018(v12, v16);
    }
    else
    {
      char v15 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_1007444B8(a2, v15);
      }
    }
  }
}

unsigned char *sub_10007F088(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Exit Advanced Sniff...", buf, 2u);
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  char v4 = (unsigned __int16 *)sub_100197A30(*(void *)(a1 + 40) + 128);
  sub_10001B910(buf);
  if (v4)
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009982A0);
    }
    uint64_t v5 = *((void *)off_1009F80A8 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007F2DC;
    block[3] = &unk_100998260;
    uint64_t v6 = *(void *)(a1 + 40);
    void block[4] = v2;
    void block[5] = v6;
    dispatch_async(v5, block);
    uint64_t v7 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t, void, uint64_t))(*(void *)v7 + 1536))(v7, *v4, 1))
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009982A0);
      }
      unint64_t v8 = *((void *)off_1009F80A8 + 32);
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      _DWORD v11[2] = sub_10007F2E8;
      v11[3] = &unk_100998260;
      uint64_t v9 = *(void *)(a1 + 40);
      v11[4] = v2;
      v11[5] = v9;
      dispatch_async(v8, v11);
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
        sub_100744578();
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_100744544();
  }
  return sub_10001B8AC(buf);
}

void sub_10007F2C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_10007F2DC(uint64_t a1)
{
}

void sub_10007F2E8(uint64_t a1)
{
}

void sub_10007F2F0(uint64_t a1, unint64_t a2, int a3)
{
  if (!a2) {
    goto LABEL_34;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009982A0);
  }
  uint64_t v6 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v6) {
    goto LABEL_15;
  }
  uint64_t v7 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint32_t v10 = v6;
    }
    else {
      uint32_t v10 = v6 + 1;
    }
    if (v9) {
      uint64_t v7 = (char *)v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_1009F80A8 + 200 || *((void *)v7 + 4) > a2) {
LABEL_15:
  }
    uint64_t v7 = (char *)off_1009F80A8 + 200;
  if (v7 == (char *)off_1009F80A8 + 200)
  {
LABEL_34:
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_1007445E4();
    }
  }
  else
  {
    unint64_t v11 = (unsigned __int8 *)sub_10007DFF4(a1, a2);
    int v12 = *v11;
    uint64_t v13 = (unsigned char *)sub_10007DFF4((uint64_t)v11, a2);
    if (v12 == 2)
    {
      v13[1] = 1;
      uint64_t v14 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Enter Advanced Sniff on sniff link", buf, 2u);
      }
      uint64_t v15 = sub_1004AFB34();
      v22[0] = _NSConcreteStackBlock;
      v22[1] = 3221225472;
      _DWORD v22[2] = sub_10007F544;
      v22[3] = &unk_100997528;
      v22[4] = a2;
      unint64_t v16 = v22;
      goto LABEL_28;
    }
    if (*v13 != 2)
    {
      uint64_t v15 = sub_1004AFB34();
      v20[0] = _NSConcreteStackBlock;
      v20[1] = 3221225472;
      void v20[2] = sub_10007F5EC;
      v20[3] = &unk_100998280;
      int v21 = a3;
      _OWORD v20[4] = a1;
      v20[5] = a2;
      unint64_t v16 = v20;
LABEL_28:
      sub_100013018(v15, v16);
      return;
    }
    int v17 = *(unsigned __int8 *)sub_10007DFF4((uint64_t)v13, a2);
    int v18 = qword_100A19E48;
    BOOL v19 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR);
    if (v17 == 240)
    {
      if (v19) {
        sub_100744618();
      }
    }
    else if (v19)
    {
      sub_10074464C(a2, v18);
    }
  }
}

unsigned char *sub_10007F544(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Unsniffing for Advanced Sniff", buf, 2u);
  }
  char v4 = 0;
  sub_10001B8E0(&v4);
  sub_10018354C(*(void *)(a1 + 32) + 128);
  sub_10001B910(&v4);
  return sub_10001B8AC(&v4);
}

void sub_10007F5D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

unsigned char *sub_10007F5EC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 48);
    *(_DWORD *)buf = 67109120;
    int v24 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Enter Advanced Sniff, send command for config: %d", buf, 8u);
  }
  buf[0] = 0;
  sub_10001B8E0(buf);
  uint64_t v5 = (unsigned __int16 *)sub_100197A30(*(void *)(a1 + 40) + 128);
  sub_10001B910(buf);
  if (v5)
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009982A0);
    }
    uint64_t v6 = *((void *)off_1009F80A8 + 32);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10007FA70;
    block[3] = &unk_100998260;
    uint64_t v7 = *(void *)(a1 + 40);
    void block[4] = v2;
    void block[5] = v7;
    dispatch_async(v6, block);
    int v8 = *(_DWORD *)(a1 + 48);
    switch(v8)
    {
      case 3:
        uint64_t v15 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, void, void, uint64_t, void, void, void, uint64_t))(*(void *)v15 + 1544))(v15, *v5, 0, 0xFFFFLL, 0, 0, 0, 1))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
            sub_10074470C();
          }
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009982A0);
          }
          uint32_t v10 = *((void *)off_1009F80A8 + 32);
          v20[0] = _NSConcreteStackBlock;
          v20[1] = 3221225472;
          void v20[2] = sub_10007FA88;
          v20[3] = &unk_100998260;
          uint64_t v16 = *(void *)(a1 + 40);
          _OWORD v20[4] = v2;
          v20[5] = v16;
          int v12 = v20;
          goto LABEL_27;
        }
        break;
      case 2:
        uint64_t v13 = sub_10003FB34();
        if ((*(unsigned int (**)(uint64_t, void, void, uint64_t, void, uint64_t, void, uint64_t))(*(void *)v13 + 1544))(v13, *v5, 0, 0xFFFFLL, 0, 20, 0, 1))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
            sub_100744778();
          }
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009982A0);
          }
          uint32_t v10 = *((void *)off_1009F80A8 + 32);
          v19[0] = _NSConcreteStackBlock;
          v19[1] = 3221225472;
          void v19[2] = sub_10007FB38;
          v19[3] = &unk_100998260;
          uint64_t v14 = *(void *)(a1 + 40);
          v19[4] = v2;
          v19[5] = v14;
          int v12 = v19;
          goto LABEL_27;
        }
        break;
      case 1:
        uint64_t v9 = sub_10003FB34();
        BYTE2(v1_Block_object_dispose(&STACK[0x338], 8) = 1;
        LOWORD(v1_Block_object_dispose(&STACK[0x338], 8) = 2;
        if ((*(unsigned int (**)(uint64_t, void, uint64_t, void, uint64_t, uint64_t, void, void, uint64_t, int))(*(void *)v9 + 1528))(v9, *v5, 24, 0, 8, 1, 0, 0, 0xFFFF00000001, v18))
        {
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009982A0);
          }
          uint32_t v10 = *((void *)off_1009F80A8 + 32);
          v21[0] = _NSConcreteStackBlock;
          v21[1] = 3221225472;
          v21[2] = sub_10007FA7C;
          v21[3] = &unk_100998260;
          uint64_t v11 = *(void *)(a1 + 40);
          v21[4] = v2;
          v21[5] = v11;
          int v12 = v21;
LABEL_27:
          dispatch_async(v10, v12);
        }
        break;
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_1007446D8();
  }
  return sub_10001B8AC(buf);
}

void sub_10007FA50(_Unwind_Exception *a1)
{
  sub_10001B8AC((unsigned char *)(v1 - 96));
  _Unwind_Resume(a1);
}

void sub_10007FA70(uint64_t a1)
{
}

void sub_10007FA7C(uint64_t a1)
{
}

uint64_t sub_10007FA88(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Reconfig failed, back to FTO", v5, 2u);
  }
  sub_10007E0DC(v3, *(void *)(a1 + 40));
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009982A0);
  }
  return sub_100563678(off_1009F80A8, 3, *(void *)(a1 + 40));
}

uint64_t sub_10007FB38(uint64_t a1)
{
  uint64_t v2 = qword_100A19E48;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Reconfig failed, back to FTO", v5, 2u);
  }
  sub_10007E0DC(v3, *(void *)(a1 + 40));
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009982A0);
  }
  return sub_100563678(off_1009F80A8, 3, *(void *)(a1 + 40));
}

uint64_t sub_10007FBE8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1);
}

void sub_10007FBF0(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = sub_10007DFF4(a1, a2);
    int v4 = qword_100A19E48;
    if (v3)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = *(unsigned __int8 *)(a2 + 1373);
        v8[0] = 67109120;
        v8[1] = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Advanced Sniff band switched %d", (uint8_t *)v8, 8u);
      }
      if (*(unsigned char *)(a2 + 1373))
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009982A0);
        }
        uint64_t v6 = off_1009F80A8;
        unsigned int v7 = 6;
      }
      else
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009982A0);
        }
        uint64_t v6 = off_1009F80A8;
        unsigned int v7 = 5;
      }
      sub_100563678((uint64_t)v6, v7, a2);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
    {
      sub_100744818();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
  {
    sub_1007447E4();
  }
}

void sub_10007FD58(uint64_t a1, int a2, uint64_t a3)
{
  if (sub_100485128(a3))
  {
    if (a2 == 2)
    {
      if (qword_1009F8130 != -1) {
        dispatch_once(&qword_1009F8130, &stru_1009982E0);
      }
      char v5 = 1;
    }
    else
    {
      if (a2 != 1) {
        return;
      }
      if (qword_1009F8130 != -1) {
        dispatch_once(&qword_1009F8130, &stru_1009982E0);
      }
      char v5 = 0;
    }
    uint64_t v6 = qword_1009F8128;
    sub_1002CFB04(v6, v5, a3);
  }
}

void sub_10007FE20(uint64_t a1, int a2, unint64_t a3)
{
  switch(a2)
  {
    case 0:
      sub_10007EE64(a1, a3);
      return;
    case 1:
      unint64_t v3 = a3;
      int v4 = 1;
      goto LABEL_4;
    case 2:
      unint64_t v3 = a3;
      int v4 = 2;
      goto LABEL_4;
    case 3:
      unint64_t v3 = a3;
      int v4 = 3;
LABEL_4:
      sub_10007F2F0(a1, v3, v4);
      break;
    default:
      return;
  }
}

void sub_10007FE8C(uint64_t a1, int a2, unint64_t a3)
{
  char v5 = qword_100A19E48;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    unsigned int v7 = "stopped";
    if (a2) {
      unsigned int v7 = "started";
    }
    int v12 = 136315138;
    uint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi StreamState %s", (uint8_t *)&v12, 0xCu);
  }
  if (a3 && (uint64_t v8 = sub_10007DFF4(v6, a3)) != 0)
  {
    uint64_t v9 = sub_10007DFF4(v8, a3);
    *(unsigned char *)(v9 + 3) = a2;
    if (a2) {
      int v10 = 2;
    }
    else {
      int v10 = 1;
    }
    sub_10007FD58(v9, v10, a3);
  }
  else
  {
    uint64_t v11 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v12) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi StreamState update skipped, device gone", (uint8_t *)&v12, 2u);
    }
  }
}

uint64_t sub_10007FFC4(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_10007DFF4(a1, a2);
  *(_WORD *)(v3 + 4) = 0;
  uint64_t result = sub_10007DFF4(v3, a2);
  *(_WORD *)(result + 6) = 0;
  return result;
}

void sub_10007FFF8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a2 && *(unsigned char *)(sub_10007DFF4(a1, a2) + 3))
  {
    uint64_t v5 = sub_100017768();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 8))(v5)) {
      goto LABEL_9;
    }
    int v29 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "BiAoS");
    sub_10004191C(__p, "bypassHAoSMonitor");
    (*(void (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v6 + 88))(v6, buf, __p, &v29);
    if (v28 < 0) {
      operator delete(__p[0]);
    }
    if (v31 < 0) {
      operator delete(*(void **)buf);
    }
    if (!v29)
    {
LABEL_9:
      unsigned int v7 = qword_100A19E48;
      BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (*(unsigned char *)(a2 + 1373)) {
          uint64_t v9 = "UBO";
        }
        else {
          uint64_t v9 = "ISM";
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v9;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi monitor band: %s", buf, 0xCu);
      }
      BOOL v10 = *(unsigned char *)(a2 + 1373) == 0;
      int v11 = *(char *)(a3 + 6);
      uint64_t v12 = sub_10007DFF4(v8, a2);
      if (v10)
      {
        if (v11 < -74)
        {
          *(_WORD *)(v12 + 6) = 0;
        }
        else
        {
          ++*(_WORD *)(v12 + 6);
          uint64_t v20 = qword_100A19E48;
          BOOL v21 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
          if (v21)
          {
            int v22 = *(char *)(a3 + 6);
            int v23 = *(__int16 *)(sub_10007DFF4(v21, a2) + 6);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v22;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi ISM RSSI %d over threshold %d times", buf, 0xEu);
          }
          if (*(__int16 *)(sub_10007DFF4(v21, a2) + 6) >= 20)
          {
            int v24 = qword_100A19E48;
            BOOL v25 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
            if (v25)
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi request UBO band", buf, 2u);
            }
            uint64_t v26 = sub_10007DFF4(v25, a2);
            *(_WORD *)(v26 + 6) = 0;
            sub_10007FD58(v26, 2, a2);
          }
        }
      }
      else if (v11 > -80)
      {
        *(_WORD *)(v12 + 4) = 0;
      }
      else
      {
        ++*(_WORD *)(v12 + 4);
        uint64_t v13 = qword_100A19E48;
        BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
        if (v14)
        {
          int v15 = *(char *)(a3 + 6);
          int v16 = *(__int16 *)(sub_10007DFF4(v14, a2) + 4);
          *(_DWORD *)buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v15;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v16;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi UBO RSSI %d under threshold %d times", buf, 0xEu);
        }
        if (*(__int16 *)(sub_10007DFF4(v14, a2) + 4) >= 2)
        {
          int v17 = qword_100A19E48;
          BOOL v18 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
          if (v18)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Advanced Sniff Bi request ISM band", buf, 2u);
          }
          uint64_t v19 = sub_10007DFF4(v18, a2);
          *(_WORD *)(v19 + 4) = 0;
          sub_10007FD58(v19, 1, a2);
        }
      }
    }
  }
}

void sub_100080380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000803BC(id a1)
{
}

void sub_100080400()
{
}

void sub_100080424(id a1)
{
}

void sub_100080468()
{
}

void sub_10008048C(id a1)
{
}

void sub_1000804D0()
{
}

void sub_1000804F4(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, &a9, 2u);
}

void sub_100080510(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, a2, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

id sub_100080528()
{
  uint64_t v0 = (void *)CFPreferencesCopyAppValue(@"SelfGeneratedLocalAddress", @"com.apple.BTServer");

  return v0;
}

void sub_100080560(void *a1)
{
  id v1 = a1;
  CFPreferencesSetAppValue(@"SelfGeneratedLocalAddress", v1, @"com.apple.BTServer");
  CFPreferencesAppSynchronize(@"com.apple.BTServer");
}

void sub_1000805C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000805D8()
{
  id v1 = (void *)CFPreferencesCopyAppValue(@"Daemon", @"com.apple.MobileBluetooth.debug");
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    uint64_t v2 = [v1 objectForKey:@"DisableReadAddressFromIOREGForDebugging"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v3 = v2;
      if (([v3 isEqualToString:@"TRUE"] & 1) != 0
        || ([v3 isEqualToString:@"YES"] & 1) != 0)
      {
        uint64_t v4 = 1;
      }
      else
      {
        if (([v3 isEqualToString:@"FALSE"] & 1) == 0) {
          [v3 isEqualToString:@"NO"];
        }
        uint64_t v4 = 0;
      }
    }
    else
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        uint64_t v4 = (uint64_t)[v2 BOOLValue];
      }
      else {
        uint64_t v4 = 0;
      }
    }
  }
  else
  {
    uint64_t v4 = 0;
  }

  return v4;
}

void sub_100080724(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t start()
{
  getpid();
  proc_disable_wakemon();
  pthread_set_qos_class_self_np(QOS_CLASS_USER_INITIATED, 0);
  uint64_t v0 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "com.apple.server.bluetooth";
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "%s: Bluetooth Super Server Robot Destroyer\n", buf, 0xCu);
  }
  fprintf(__stderrp, "%s: Bluetooth Super Server Robot Destroyer\n", "com.apple.server.bluetooth");
  if ((_set_user_dir_suffix() & 1) == 0)
  {
    id v1 = (id)qword_100A19E50;
    if (os_log_type_enabled(v1, OS_LOG_TYPE_ERROR))
    {
      uint64_t v2 = __error();
      sub_1007449F8(v2, (uint64_t)v58, v1);
    }

    id v3 = __stderrp;
    uint64_t v4 = __error();
    fprintf(v3, "### _set_user_dir_suffix failed: %d", *v4);
  }
  bzero(v57, 0x400uLL);
  if (!confstr(65537, v57, 0x400uLL))
  {
    uint64_t v5 = (id)qword_100A19E50;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = __error();
      sub_1007449B8(v6, (uint64_t)v56, v5);
    }

    unsigned int v7 = __stderrp;
    BOOL v8 = __error();
    fprintf(v7, "### _CS_DARWIN_USER_TEMP_DIR failed: %d", *v8);
  }
  qword_1009FC120 = (uint64_t)SCDynamicStoreCreate(kCFAllocatorDefault, @"com.apple.BTServer", 0, 0);
  SCDynamicStoreSetDispatchQueue((SCDynamicStoreRef)qword_1009FC120, (dispatch_queue_t)&_dispatch_main_q);
  SCDynamicStoreSetDisconnectCallBack();
  SCDynamicStoreRemoveValue((SCDynamicStoreRef)qword_1009FC120, @"com.apple.MobileBluetooth");
  word_1009FC10C = 0;
  dword_1009FC108 = 0;
  uint64_t v9 = getenv("BT_DEVICE_ADDRESS");
  if (v9 && (BOOL v10 = v9, strlen(v9) == 17))
  {
    sscanf(v10, "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx", &dword_1009FC108, (char *)&dword_1009FC108 + 1, (char *)&dword_1009FC108 + 2, (char *)&dword_1009FC108 + 3, &word_1009FC10C, (char *)&word_1009FC10C + 1);
    dword_1009FC108 = 0;
    word_1009FC10C = 0;
    int v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Local address from ENV:%s\n", buf, 0xCu);
    }
    fprintf(__stderrp, "Local address from ENV:%s\n");
  }
  else
  {
    uint64_t v12 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "could not find BT_DEVICE_ADDRESS env variable\n", buf, 2u);
    }
    fwrite("could not find BT_DEVICE_ADDRESS env variable\n", 0x2EuLL, 1uLL, __stderrp);
    if (sub_100081BB0("marconi-bt") || sub_100081BB0("bluetooth"))
    {
      uint64_t v13 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress Deleting local address from plist\n", buf, 2u);
      }
      fwrite("FindLocalMacAddress Deleting local address from plist\n", 0x36uLL, 1uLL, __stderrp);
      CFPreferencesSetAppValue(@"SelfGeneratedLocalAddress", 0, @"com.apple.BTServer");
      CFPreferencesAppSynchronize(@"com.apple.BTServer");
    }
    else
    {
      bzero(buf, 0x400uLL);
      size_t v55 = 1024;
      int v14 = sysctlbyname("kern.bootargs", buf, &v55, 0, 0);
      if (v14)
      {
        int v15 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v61) = 67109120;
          DWORD1(v61) = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress did not find bootargs, sysctlbyname returned %d", (uint8_t *)&v61, 8u);
        }
        fprintf(__stderrp, "FindLocalMacAddress did not find bootargs, sysctlbyname returned %d");
      }
      else
      {
        char v35 = strtok(buf, " ");
        if (v35)
        {
          long long v36 = v35;
          while (!strstr(v36, "wlan.debug.generate-mac"))
          {
            if (strstr(v36, "wlan.factory"))
            {
              long long v37 = strchr(v36, 61);
              __int16 v38 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v61) = 0;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress found wlan.factory\n", (uint8_t *)&v61, 2u);
              }
              fwrite("FindLocalMacAddress found wlan.factory\n", 0x27uLL, 1uLL, __stderrp);
              uint64_t v39 = strtol(v37 + 1, 0, 16);
              if ((v39 & 4) != 0)
              {
                int v43 = qword_100A19E50;
                if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(v61) = 134217984;
                  *(void *)((char *)&v61 + 4) = v39;
                  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress found wlan.factory with a value of %llu\n", (uint8_t *)&v61, 0xCu);
                }
                fprintf(__stderrp, "FindLocalMacAddress found wlan.factory with a value of %llu\n", v39);
                goto LABEL_78;
              }
            }
            long long v36 = strtok(0, " ");
            if (!v36) {
              goto LABEL_63;
            }
          }
          __int16 v42 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v61) = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress found wlan.debug.generate-mac\n", (uint8_t *)&v61, 2u);
          }
          fwrite("FindLocalMacAddress found wlan.debug.generate-mac\n", 0x32uLL, 1uLL, __stderrp);
LABEL_78:
          uint64_t v44 = sub_100080528();
          char v45 = v44;
          if (v44 && [v44 length])
          {
            id v46 = v45;
            sscanf((const char *)[v46 UTF8String], "%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx", &dword_1009FC108, (char *)&dword_1009FC108 + 1, (char *)&dword_1009FC108 + 2, (char *)&dword_1009FC108 + 3, &word_1009FC10C, (char *)&word_1009FC10C + 1);
            uint64_t v47 = (id)qword_100A19E50;
            if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
            {
              id v48 = [v46 UTF8String];
              LODWORD(v61) = 136315138;
              *(void *)((char *)&v61 + 4) = v48;
              _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress Local address from plist:%s.\n", (uint8_t *)&v61, 0xCu);
            }

            uint64_t v49 = __stderrp;
            id v50 = v46;
            fprintf(v49, "FindLocalMacAddress Local address from plist:%s.\n", (const char *)[v50 UTF8String]);
            setenv("BT_DEVICE_ADDRESS", (const char *)[v50 UTF8String], 1);
          }
          else
          {
            for (uint64_t i = 0; i != 6; ++i)
              *((unsigned char *)&dword_1009FC108 + i) = arc4random_uniform(0xFFu);
            long long v61 = 0uLL;
            __int16 v62 = 0;
            snprintf((char *)&v61, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", dword_1009FC108, BYTE1(dword_1009FC108), BYTE2(dword_1009FC108), HIBYTE(dword_1009FC108), word_1009FC10C, HIBYTE(word_1009FC10C));
            uint64_t v52 = +[NSString stringWithUTF8String:&v61];
            sub_100080560(v52);

            uint64_t v53 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v59 = 136315138;
              uint64_t v60 = &v61;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress Storing local address to plist:%s.\n", v59, 0xCu);
            }
            fprintf(__stderrp, "FindLocalMacAddress Storing local address to plist:%s.\n", (const char *)&v61);
            setenv("BT_DEVICE_ADDRESS", (const char *)&v61, 1);
          }
        }
        else
        {
LABEL_63:
          __int16 v40 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v61) = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "FindLocalMacAddress did not find bootargs for random address generation", (uint8_t *)&v61, 2u);
          }
          fwrite("FindLocalMacAddress did not find bootargs for random address generation", 0x47uLL, 1uLL, __stderrp);
          CFPreferencesSetAppValue(@"SelfGeneratedLocalAddress", 0, @"com.apple.BTServer");
          CFPreferencesAppSynchronize(@"com.apple.BTServer");
        }
      }
    }
  }
  uint64_t v16 = sub_10003FFD4();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v16 + 264))(v16))
  {
    WORD2(v61) = 0;
    LODWORD(v61) = 0;
    if (dword_1009FC108 | (unsigned __int16)word_1009FC10C)
    {
      if (access("/dev/cu.bluetooth", 0) != -1 || access("/dev/uart.bluetooth", 0) != -1) {
        goto LABEL_38;
      }
      CFDictionaryRef v18 = IOServiceNameMatching("marconi-bt");
      if (v18 && (io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v18)) != 0
        || (CFDictionaryRef v20 = IOServiceNameMatching("bluetooth")) != 0
        && (io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v20)) != 0)
      {
        IOObjectRelease(MatchingService);
        goto LABEL_38;
      }
      sub_100744868(buf);
    }
    else
    {
      sub_100744910(buf);
    }
    fprintf(__stderrp, *(const char **)buf, "com.apple.server.bluetooth");
    errx(0, "No bluetooth on this device.\n");
  }
  int v17 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Bluetooth is running inside a Virtual Machine, so skipping check for Bluetooth available", buf, 2u);
  }
LABEL_38:
  for (uint64_t j = 0; j != 3; ++j)
  {
    int v22 = dword_1007B81A0[j];
    signal(v22, (void (__cdecl *)(int))1);
    dispatch_source_t v23 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, v22, 0, (dispatch_queue_t)&_dispatch_main_q);
    int v24 = (dispatch_object_t *)((char *)&unk_1009FC128 + 8 * j);
    dispatch_object_t v25 = *v24;
    *int v24 = v23;

    uint64_t v26 = *v24;
    *(void *)buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 3221225472;
    *(void *)&uint8_t buf[16] = sub_100081EC0;
    int v64 = &unk_100998300;
    int v65 = v22;
    dispatch_source_set_event_handler(v26, buf);
    dispatch_resume(*v24);
  }
  os_state_add_handler();
  LODWORD(v61) = dword_1009FC108;
  WORD2(v61) = word_1009FC10C;
  uint64_t v27 = sub_1003705E4();
  (*(void (**)(uint64_t, long long *))(*(void *)v27 + 40))(v27, &v61);
  int v28 = sub_100550F34("com.apple.bluetoothd");
  if (v28)
  {
    int v29 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.server.bluetooth";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v28;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%s: Unable to attach local bluetooth session: %d\n", buf, 0x12u);
    }
    fprintf(__stderrp, "%s: Unable to attach local bluetooth session: %d\n");
LABEL_54:
    return 1;
  }
  int v30 = sub_10046A828(qword_1009FC110, (unint64_t *)&qword_1009FC118);
  if (v30)
  {
    char v31 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.server.bluetooth";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v30;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "%s: Unable to get local device: %d\n", buf, 0x12u);
    }
    fprintf(__stderrp, "%s: Unable to get local device: %d\n");
    goto LABEL_54;
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_100998380);
  }
  sub_100554778(qword_1009F8160, qword_1009FC118);
  int v32 = sub_10046A954(qword_1009FC118, (long long *)off_1009F8138, 0);
  if (v32)
  {
    long long v33 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.server.bluetooth";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = v32;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "%s: Unable to attach local device callbacks: %d\n", buf, 0x12u);
    }
    fprintf(__stderrp, "%s: Unable to attach local device callbacks: %d\n");
    goto LABEL_54;
  }
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_100998360);
  }
  if ((sub_1004F8E78((uint64_t)off_1009F8150) & 1) == 0) {
    sub_10074484C();
  }
  int v41 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "com.apple.server.bluetooth";
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "%s: Server attached, going into msg loop.\n", buf, 0xCu);
  }
  fprintf(__stderrp, "%s: Server attached, going into msg loop.\n", "com.apple.server.bluetooth");
  CFRunLoopRun();
  sub_100550FEC((unint64_t *)&qword_1009FC110);
  return 0;
}

void sub_100081650(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000816A0()
{
  uint64_t v0 = objc_alloc_init(CBStackAdaptorBTStack);
  id v1 = [[CBDaemonServer alloc] initWithCBStackAdaptor:v0];
  [(CBDaemonServer *)v1 activate];
  uint64_t v2 = objc_opt_new();
  id v3 = (void *)qword_100A147E0;
  qword_100A147E0 = v2;

  [(id)qword_100A147E0 startListening];
  id v4 = (id)qword_100A147E0;
  signal(31, (void (__cdecl *)(int))1);
  dispatch_source_t v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_signal, 0x1FuLL, 0, (dispatch_queue_t)&_dispatch_main_q);
  uint64_t v6 = (void *)qword_1009FC140;
  qword_1009FC140 = (uint64_t)v5;

  unsigned int v7 = qword_1009FC140;
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100082114;
  handler[3] = &unk_100997450;
  id v11 = v4;
  id v8 = v4;
  dispatch_source_set_event_handler(v7, handler);
  dispatch_resume((dispatch_object_t)qword_1009FC140);

  uint64_t v9 = +[ContactTracingDaemonBridge sharedDaemonBridge];
  [v9 activate];
}

void sub_100081800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008182C()
{
  int v4 = 0;
  if (sub_10046AE3C(qword_1009FC118, 1, &v4))
  {
    uint64_t v0 = (id)qword_100A19E50;
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR))
    {
      int v1 = sub_10046AE3C(qword_1009FC118, 1, &v4);
      sub_100744A38((uint64_t)v5, v1, v0);
    }

    uint64_t v2 = __stderrp;
    int v3 = sub_10046AE3C(qword_1009FC118, 1, &v4);
    fprintf(v2, "Failed to update Dynamic Store. BTLocalDeviceGetModulePower returned %d", v3);
  }
  else
  {
    sub_100081930(v4);
  }
}

void sub_100081918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100081930(int a1)
{
  keys = @"Powered";
  uint64_t v2 = (void **)&kCFBooleanTrue;
  if (a1 != -1) {
    uint64_t v2 = (void **)&kCFBooleanFalse;
  }
  values = *v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    switch(a1)
    {
      case -1:
        int v4 = "On";
        break;
      case -889275714:
        int v4 = "Transitioning";
        break;
      case -559038737:
        int v4 = "Unknown";
        break;
      default:
        int v4 = "Off";
        if (a1 == -1122640211) {
          int v4 = "Terminated";
        }
        break;
    }
    *(_DWORD *)buf = 136315394;
    id v11 = v4;
    __int16 v12 = 1024;
    BOOL v13 = a1 == -1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Update Dynamic Store with state %s\t value %d", buf, 0x12u);
  }
  switch(a1)
  {
    case -1:
      dispatch_source_t v5 = "On";
      break;
    case -889275714:
      dispatch_source_t v5 = "Transitioning";
      break;
    case -559038737:
      dispatch_source_t v5 = "Unknown";
      break;
    default:
      dispatch_source_t v5 = "Off";
      if (a1 == -1122640211) {
        dispatch_source_t v5 = "Terminated";
      }
      break;
  }
  fprintf(__stderrp, "Update Dynamic Store with state %s\t value %d", v5, a1 == -1);
  CFDictionaryRef v6 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)&keys, (const void **)&values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (!SCDynamicStoreSetValue((SCDynamicStoreRef)qword_1009FC120, @"com.apple.MobileBluetooth", v6))
  {
    int v7 = SCError();
    id v8 = SCErrorString(v7);
    uint64_t v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100744A74((uint64_t)v8, v9);
    }
    fprintf(__stderrp, "Update Dynamic Store failed with error %s", v8);
  }
  CFRelease(v6);
}

BOOL sub_100081BB0(const char *a1)
{
  if (sub_1000805D8())
  {
    uint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v14 = a1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s: read from IOREG is disabled for debugging\n", buf, 0xCu);
    }
    fprintf(__stderrp, "%s: read from IOREG is disabled for debugging\n");
    return 0;
  }
  CFDictionaryRef v3 = IOServiceNameMatching(a1);
  if (!v3) {
    goto LABEL_15;
  }
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v3);
  if (!MatchingService)
  {
    BOOL v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100744AEC((uint64_t)a1, v10);
    }
    fprintf(__stderrp, "%s: Unable to match bluetooth service in device tree.\n", a1);
LABEL_15:
    BOOL v7 = 0;
    goto LABEL_16;
  }
  io_object_t v5 = MatchingService;
  CFDataRef v6 = (const __CFData *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", @"local-mac-address", kCFAllocatorDefault, 1u);
  BOOL v7 = v6 != 0;
  if (v6)
  {
    CFDataRef v8 = v6;
    *(void *)std::string __str = 0;
    uint64_t v18 = 0;
    __int16 v19 = 0;
    v20.location = 0;
    v20.length = 6;
    CFDataGetBytes(v6, v20, (UInt8 *)&dword_1009FC108);
    snprintf(__str, 0x12uLL, "%02x:%02x:%02x:%02x:%02x:%02x", dword_1009FC108, BYTE1(dword_1009FC108), BYTE2(dword_1009FC108), HIBYTE(dword_1009FC108), word_1009FC10C, HIBYTE(word_1009FC10C));
    uint64_t v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      int v14 = a1;
      __int16 v15 = 2080;
      uint64_t v16 = __str;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "%s: Got local-mac-address: %s\n", buf, 0x16u);
    }
    fprintf(__stderrp, "%s: Got local-mac-address: %s\n", a1, __str);
    setenv("BT_DEVICE_ADDRESS", __str, 1);
    CFRelease(v8);
  }
  IOObjectRelease(v5);
LABEL_16:
  *(_WORD *)&__str[4] = 0;
  *(_DWORD *)std::string __str = 0;
  if (!(dword_1009FC108 | (unsigned __int16)word_1009FC10C))
  {
    id v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      int v14 = a1;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "%s: Not a valid MAC address (all 00s).\n", buf, 0xCu);
    }
    fprintf(__stderrp, "%s: Not a valid MAC address (all 00s).\n");
    return 0;
  }
  return v7;
}

uint64_t sub_100081EC0(uint64_t result)
{
  int v1 = *(_DWORD *)(result + 32);
  switch(v1)
  {
    case 31:
      CFDictionaryRef v3 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)io_object_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "-SIGUSR2 received -- triggering our statedump.", v5, 2u);
      }
      return sub_100464788(qword_1009FC110);
    case 30:
      unint64_t v4 = qword_1009FC110;
      return sub_1004646F8(v4);
    case 15:
      if (qword_1009F8158 != -1) {
        dispatch_once(&qword_1009F8158, &stru_100998360);
      }
      sub_1004FAFC0((uint64_t)off_1009F8150, 1);
      unint64_t v2 = qword_1009FC118;
      return sub_10046AF74(v2);
  }
  return result;
}

os_state_data_s *__cdecl sub_100081FD8(id a1, os_state_hints_s *a2)
{
  if (a2->var2 == 3)
  {
    unint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "bluetoothd received OS_STATE_API_REQUEST (from sysdiagnose?) -- triggering our statedump.", v4, 2u);
    }
    sub_100464788(qword_1009FC110);
  }
  return 0;
}

void sub_10008205C(uint64_t a1, int a2, int a3)
{
  if (!(a3 | a2))
  {
    int v5 = 0;
    if (!sub_10046AE3C(qword_1009FC118, 1, &v5))
    {
      sub_100081930(v5);
      if (v5 == -1)
      {
        if (qword_1009FC0F8) {
          return;
        }
        uint64_t v3 = os_transaction_create();
        unint64_t v4 = (void *)qword_1009FC0F8;
      }
      else
      {
        if (v5)
        {
          if (v5 == -1122640211) {
            _exit(0);
          }
          return;
        }
        unint64_t v4 = (void *)qword_1009FC0F8;
        if (!qword_1009FC0F8) {
          return;
        }
        uint64_t v3 = 0;
      }
      qword_1009FC0F8 = v3;
    }
  }
}

void sub_100082114(uint64_t a1)
{
  id v1 = *(id *)(a1 + 32);
  id v2 = v1;
  if (v1) {
    [v1 dumpDaemonState];
  }
  else {
    fwrite("Invalid WPDaemonServer", 0x16uLL, 1uLL, __stderrp);
  }
}

void sub_100082184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100082198(id a1)
{
}

void sub_100082328()
{
}

void sub_10008234C(id a1)
{
}

void sub_100082390()
{
}

void sub_1000823B4(void *a1, int a2, os_log_t log, const char *a4, uint8_t *a5)
{
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, a5, 8u);
}

void sub_1000823D0(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_impl(a1, v9, OS_LOG_TYPE_DEFAULT, a4, &a9, 0xCu);
}

void sub_100082464(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100082B68(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100082D38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100082F74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *sub_100082F8C(uint64_t a1)
{
  if (*(void *)(a1 + 40) && *(unsigned char *)(a1 + 72))
  {
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_100998478);
    }
    int v2 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 40));
    if (v2
      && v2 != -310000
      && dword_1009F8170 <= 90
      && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
    {
      BOOL v7 = CUPrintErrorCode();
      LogPrintF_safe();
    }
  }
  if (*(void *)(a1 + 48) && *(unsigned char *)(a1 + 73))
  {
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_100998478);
    }
    int v3 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 48));
    if (v3
      && v3 != -310000
      && dword_1009F8170 <= 90
      && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
    {
      BOOL v7 = CUPrintErrorCode();
      LogPrintF_safe();
    }
  }
  if (*(void *)(a1 + 56) && *(unsigned char *)(a1 + 74))
  {
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_100998478);
    }
    int v4 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 56));
    if (v4
      && v4 != -310000
      && dword_1009F8170 <= 90
      && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
    {
      BOOL v7 = CUPrintErrorCode();
      LogPrintF_safe();
    }
  }
  if (*(void *)(a1 + 64) && *(unsigned char *)(a1 + 75))
  {
    if (qword_1009F8248 != -1) {
      dispatch_once(&qword_1009F8248, &stru_100998478);
    }
    int v5 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 64));
    if (v5
      && v5 != -310000
      && dword_1009F8170 <= 90
      && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
    {
      BOOL v7 = CUPrintErrorCode();
      LogPrintF_safe();
    }
  }
  uint64_t result = [*(id *)(*(void *)(a1 + 32) + 136) count:v7];
  if (result)
  {
    char v8 = 0;
    sub_10001B8E0(&v8);
    sub_100229480(0);
    sub_10001B910(&v8);
    return sub_10001B8AC(&v8);
  }
  return result;
}

void sub_1000832E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100083314(unint64_t *a1)
{
  if (a1[4])
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_100998438);
    }
    int v2 = sub_10000A678(qword_1009F8160, a1[4]);
    if (v2) {
      BOOL v3 = v2 == -310000;
    }
    else {
      BOOL v3 = 1;
    }
    if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
    {
      CUPrintErrorCode();
      id v7 = (id)objc_claimAutoreleasedReturnValue();
      LogPrintF_safe();
    }
  }
  if (a1[5])
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_100998438);
    }
    int v4 = sub_10000A678(qword_1009F8160, a1[5]);
    if (v4
      && v4 != -310000
      && dword_1009F8170 <= 90
      && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
    {
      CUPrintErrorCode();
      id v8 = (id)objc_claimAutoreleasedReturnValue();
      LogPrintF_safe();
    }
  }
  if (a1[6])
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_100998438);
    }
    int v5 = sub_10000A678(qword_1009F8160, a1[6]);
    if (v5
      && v5 != -310000
      && dword_1009F8170 <= 90
      && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
    {
      CUPrintErrorCode();
      id v9 = (id)objc_claimAutoreleasedReturnValue();
      LogPrintF_safe();
    }
  }
  if (a1[7])
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_100998438);
    }
    int v6 = sub_10000A678(qword_1009F8160, a1[7]);
    if (v6
      && v6 != -310000
      && dword_1009F8170 <= 90
      && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
    {
      CUPrintErrorCode();
      id v10 = (id)objc_claimAutoreleasedReturnValue();
      LogPrintF_safe();
    }
  }
}

void sub_100083630(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100083A94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,atomic_uint *a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a21) {
    sub_1000368F4(a21);
  }

  _Unwind_Resume(a1);
}

void sub_1000841F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084330(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_100998478);
  }
  int v2 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 32));
  if (v2) {
    BOOL v3 = v2 == -310000;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_100084424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100084438(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_100998478);
  }
  int v2 = sub_10065B544((uint64_t)off_1009F8240, *(void *)(a1 + 32), a1 + 40, 1);
  if (v2) {
    BOOL v3 = v2 == -310000;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_100084534(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_100084548(void *a1)
{
  *a1 = &off_100998468;
  int v2 = (atomic_uint *)a1[1];
  if (v2) {
    sub_1000368F4(v2);
  }
  return a1;
}

void sub_100084B30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100084C20(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_100998478);
  }
  int v2 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 32));
  if (v2) {
    BOOL v3 = v2 == -310000;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_100084D14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100084D28(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_100998478);
  }
  int v2 = sub_10065B544((uint64_t)off_1009F8240, *(void *)(a1 + 32), a1 + 40, 1);
  if (v2) {
    BOOL v3 = v2 == -310000;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_100084E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100085214(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000852A0(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_100998478);
  }
  int v2 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 32));
  if (v2) {
    BOOL v3 = v2 == -310000;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_100085394(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000853A8(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_100998478);
  }
  int v2 = sub_10065B544((uint64_t)off_1009F8240, *(void *)(a1 + 32), a1 + 40, 1);
  if (v2) {
    BOOL v3 = v2 == -310000;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_1000854A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100085894(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100085920(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_100998478);
  }
  int v2 = sub_10065DB34((uint64_t)off_1009F8240, *(void *)(a1 + 32));
  if (v2) {
    BOOL v3 = v2 == -310000;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_100085A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100085A28(uint64_t a1)
{
  if (qword_1009F8248 != -1) {
    dispatch_once(&qword_1009F8248, &stru_100998478);
  }
  int v2 = sub_10065B544((uint64_t)off_1009F8240, *(void *)(a1 + 32), a1 + 40, 1);
  if (v2) {
    BOOL v3 = v2 == -310000;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3 && dword_1009F8170 <= 90 && (dword_1009F8170 != -1 || _LogCategory_Initialize()))
  {
    CUPrintErrorCode();
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
  }
}

void sub_100085B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

_OWORD *sub_100085C30(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v11 = 0;
  int v6 = (void **)sub_100085CE4((uint64_t)a1, &v11, a2);
  id v7 = *v6;
  if (!*v6)
  {
    id v8 = (uint64_t **)v6;
    id v7 = operator new(0x48uLL);
    int v9 = *((_DWORD *)*a4 + 4);
    void v7[2] = **a4;
    *((_DWORD *)v7 + 12) = v9;
    *((void *)v7 + 7) = &off_100998428;
    *((void *)v7 + _Block_object_dispose(&STACK[0x338], 8) = 0;
    sub_100036CA0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

void *sub_100085CE4(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        id v7 = (void *)v4;
        id v8 = (unsigned __int8 *)(v4 + 32);
        if (!sub_10071D284(a3, (unsigned __int8 *)(v4 + 32))) {
          break;
        }
        uint64_t v4 = *v7;
        int v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (!sub_10071D284(v8, a3)) {
        break;
      }
      int v5 = v7 + 1;
      uint64_t v4 = v7[1];
    }
    while (v4);
  }
  else
  {
    id v7 = (void *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

void *sub_100085D78(void *a1)
{
  *a1 = &off_100998428;
  int v2 = (atomic_uint *)a1[1];
  if (v2) {
    sub_1000368F4(v2);
  }
  return a1;
}

void sub_100085DC4(void *a1)
{
  *a1 = &off_100998428;
  id v1 = (atomic_uint *)a1[1];
  if (v1) {
    sub_1000368F4(v1);
  }

  operator delete();
}

void sub_100085E30(id a1)
{
}

void sub_100085E74()
{
}

void sub_100085E98(void *a1)
{
  *a1 = &off_100998468;
  id v1 = (atomic_uint *)a1[1];
  if (v1) {
    sub_1000368F4(v1);
  }

  operator delete();
}

void sub_100085F04(id a1)
{
}

void sub_100085F48()
{
}

void sub_1000860EC(id a1)
{
  id v1 = objc_alloc_init(CBMetricsDaemon);
  int v2 = (void *)qword_1009FC148;
  qword_1009FC148 = (uint64_t)v1;
}

void sub_100086264(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100086688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21)
{
  _Unwind_Resume(a1);
}

id sub_1000867E0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reportEvents];
}

void sub_10008687C(uint64_t a1)
{
  if (dword_1009F8250 <= 30 && (dword_1009F8250 != -1 || _LogCategory_Initialize()))
  {
    BOOL v3 = CUPrintDuration64();
    LogPrintF_safe();
  }
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_ALLOW_BATTERY, 1);
  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_REPEATING, 1);
  xpc_dictionary_set_int64(v2, XPC_ACTIVITY_INTERVAL, XPC_ACTIVITY_INTERVAL_15_MIN);
  xpc_dictionary_set_string(v2, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_100086A18;
  handler[3] = &unk_1009984C0;
  void handler[4] = *(void *)(a1 + 32);
  xpc_activity_register("com.apple.bluetooth.CBMetrics", v2, handler);
}

void sub_100086A00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100086A18(uint64_t a1, void *a2)
{
  activity = a2;
  if (xpc_activity_should_defer(activity))
  {
    if (!xpc_activity_set_state(activity, 3)
      && dword_1009F8250 <= 90
      && (dword_1009F8250 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF_safe();
    }
  }
  else
  {
    [*(id *)(a1 + 32) _reportEvents];
  }
}

void sub_100086AD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100086B6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _reportAuthTagType:*(unsigned __int8 *)(a1 + 40) authTagStatus:*(unsigned __int8 *)(a1 + 41) integrityTagStatus:*(unsigned __int8 *)(a1 + 42) resolutionWindow:*(char *)(a1 + 43)];
}

void sub_100086DDC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087138(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087180(uint64_t a1)
{
  v14[0] = @"actn";
  xpc_object_t v2 = (id *)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 32) action];
  uint64_t v4 = (void *)v3;
  if (v3) {
    CFStringRef v5 = (const __CFString *)v3;
  }
  else {
    CFStringRef v5 = &stru_1009C1AC8;
  }
  v15[0] = v5;
  v14[1] = @"apID";
  uint64_t v6 = [*v2 appID];
  id v7 = (void *)v6;
  if (v6) {
    CFStringRef v8 = (const __CFString *)v6;
  }
  else {
    CFStringRef v8 = &stru_1009C1AC8;
  }
  v15[1] = v8;
  _DWORD v14[2] = @"cid";
  int v9 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(a1 + 32) clientID]);
  void v15[2] = v9;
  v14[3] = @"dsFl";
  id v10 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [*(id *)(a1 + 32) discoveryFlags]);
  v15[3] = v10;
  _OWORD v14[4] = @"scnR";
  uint64_t v11 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [*(id *)(a1 + 32) scanRate]);
  v15[4] = v11;
  __int16 v12 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:5];

  uint64_t v13 = sub_100050530();
  (*(void (**)(uint64_t, void *))(*(void *)v13 + 232))(v13, v12);
}

void sub_100087340(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;

  _Unwind_Resume(a1);
}

void sub_1000875D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10008762C(uint64_t a1)
{
  xpc_object_t v2 = *(void **)(*(void *)(a1 + 32) + 56);
  if (!v2)
  {
    id v3 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v4 = *(void *)(a1 + 32);
    CFStringRef v5 = *(void **)(v4 + 56);
    *(void *)(v4 + 56) = v3;

    xpc_object_t v2 = *(void **)(*(void *)(a1 + 32) + 56);
  }
  uint64_t v6 = [v2 objectForKey:*(void *)(a1 + 40)];

  if (!v6)
  {
    id v19 = objc_alloc_init((Class)NSMutableArray);
    [*(id *)(*(void *)(a1 + 32) + 56) setObject:v19 forKeyedSubscript:*(void *)(a1 + 40)];

    CFRange v20 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)];
    [v20 addObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

    goto LABEL_29;
  }
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  id v7 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)];
  id v8 = [v7 countByEnumeratingWithState:&v23 objects:v27 count:16];
  if (!v8)
  {

LABEL_28:
    BOOL v21 = [*(id *)(*(void *)(a1 + 32) + 56) objectForKeyedSubscript:*(void *)(a1 + 40)];
    [v21 addObject:*(void *)(*(void *)(*(void *)(a1 + 64) + 8) + 40)];

    goto LABEL_29;
  }
  char v9 = 0;
  uint64_t v10 = *(void *)v24;
  do
  {
    for (uint64_t i = 0; i != v8; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v24 != v10) {
        objc_enumerationMutation(v7);
      }
      __int16 v12 = *(void **)(*((void *)&v23 + 1) + 8 * i);
      id v13 = [v12 discoveryFlags];
      if (v13 == [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) discoveryFlags])
      {
        int v14 = (unsigned __int8 *)[v12 discoveryTypesPtr];
        __int16 v15 = (unsigned __int8 *)[*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) discoveryTypesPtr];
        if (*(_DWORD *)v14 == *(_DWORD *)v15 && v14[4] == v15[4])
        {
          unsigned int v17 = [v12 scanRateScreenOn];
          if (v17 == [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scanRateScreenOn])
          {
            unsigned int v18 = [v12 scanRateScreenOff];
            if (v18 == [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scanRateScreenOff])
            {
              if ([*(id *)(a1 + 48) isEqual:@"agsN"])
              {
                [v12 setScanScreenOnCount:((char *)[v12 scanScreenOnCount] + 1)];
              }
              else if ([*(id *)(a1 + 48) isEqual:@"agsF"])
              {
                [v12 setScanScreenOffCount:[v12 scanScreenOffCount] + 1];
              }
              objc_storeStrong((id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40), v12);
              char v9 = 1;
            }
          }
        }
      }
    }
    id v8 = [v7 countByEnumeratingWithState:&v23 objects:v27 count:16];
  }
  while (v8);

  if ((v9 & 1) == 0) {
    goto LABEL_28;
  }
LABEL_29:
  id result = [*(id *)(a1 + 32) _setupAggressiveScanMetricExportTimer];
  if (dword_1009F8250 <= 20)
  {
    if (dword_1009F8250 != -1 || (id result = (id)_LogCategory_Initialize(), result))
    {
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scanScreenOnCount];
      [*(id *)(*(void *)(*(void *)(a1 + 64) + 8) + 40) scanScreenOffCount];
      return (id)LogPrintF_safe();
    }
  }
  return result;
}

void sub_1000879AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087B28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *sub_100087B40(void *result)
{
  id v1 = (void *)result[4];
  if (v1 == *(void **)(result[5] + 64))
  {
    xpc_object_t v2 = result;
    if (v1)
    {
      id v3 = v1;
      dispatch_source_cancel(v3);
      uint64_t v4 = v2[5];
      CFStringRef v5 = *(void **)(v4 + 64);
      *(void *)(v4 + 64) = 0;
    }
    uint64_t v6 = (void *)v2[5];
    return [v6 _reportAggressiveScanMetricEvents];
  }
  return result;
}

void sub_100087D48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100087D70(uint64_t a1, void *a2, void *a3)
{
  id v20 = a2;
  id v15 = a3;
  unint64_t v19 = +[CBDaemonXPCConnection indexForCBApprovedAppID:v20];
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  id obj = v15;
  id v4 = [obj countByEnumeratingWithState:&v22 objects:v28 count:16];
  if (v4)
  {
    uint64_t v17 = *(void *)v23;
    do
    {
      id v21 = v4;
      for (uint64_t i = 0; i != v21; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v23 != v17) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void **)(*((void *)&v22 + 1) + 8 * i);
        v27[0] = v20;
        v26[0] = @"apID";
        v26[1] = @"apIX";
        id v7 = +[NSNumber numberWithUnsignedLong:v19];
        v27[1] = v7;
        v26[2] = @"dsFl";
        id v8 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v6 discoveryFlags]);
        v27[2] = v8;
        v26[3] = @"dsTy";
        [v6 discoveryTypesPtr];
        char v9 = CBDiscoveryTypesEnumToString();
        v27[3] = v9;
        v26[4] = @"scnR";
        uint64_t v10 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 scanRateScreenOn]);
        v27[4] = v10;
        v26[5] = @"sonC";
        uint64_t v11 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v6 scanScreenOnCount]);
        v27[5] = v11;
        v26[6] = @"srsO";
        __int16 v12 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 scanRateScreenOff]);
        v27[6] = v12;
        v26[7] = @"sofC";
        id v13 = +[NSNumber numberWithUnsignedLongLong:](NSNumber, "numberWithUnsignedLongLong:", [v6 scanScreenOffCount]);
        v27[7] = v13;
        int v14 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:8];

        [*(id *)(a1 + 32) addObject:v14];
      }
      id v4 = [obj countByEnumeratingWithState:&v22 objects:v28 count:16];
    }
    while (v4);
  }
}

void sub_10008804C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

id sub_100088184(uint64_t a1)
{
  id result = [*(id *)(a1 + 32) nearbyActionNoWakeType];
  if (result)
  {
    uint64_t v3 = sub_100050530();
    id v4 = [*(id *)(a1 + 32) nearbyActionNoWakeType];
    CFStringRef v5 = *(uint64_t (**)(uint64_t, id))(*(void *)v3 + 408);
    return (id)v5(v3, v4);
  }
  return result;
}

id sub_1000882B0(uint64_t a1)
{
  unsigned int v2 = [*(id *)(a1 + 32) isEqual:@"RSSILevelNoChange"];
  uint64_t v3 = 80;
  if (v2) {
    uint64_t v3 = 72;
  }
  ++*(void *)(*(void *)(a1 + 40) + v3);
  id v4 = *(void **)(a1 + 40);

  return [v4 _setupMetricExportTimer];
}

void sub_100088454(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *sub_10008846C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v2 == result[11]) {
    return [result _whbMetricExportTimerFired];
  }
  return result;
}

void sub_10008860C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088748(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100088764()
{
  uint64_t v0 = *(uint64_t (**)(void))(*(void *)sub_100050530() + 240);

  return v0();
}

void sub_100088A44(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v2 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_100088A90(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v6 + 40);
  id v7 = CUDescriptionWithLevel();
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v6 + 40), obj);

  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (*(int *)(a1 + 48) >= 11 && *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= 0x32uLL) {
    *a4 = 1;
  }
}

void sub_100088B48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100088FE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, std::__shared_weak_count *a17, int a18, __int16 a19, char a20,char a21)
{
  if (a17) {
    sub_10008A294(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100089058(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC160);
  char v9 = (void *)qword_1009FC158;
  uint64_t v10 = +[NSNumber numberWithLong:a5];
  uint64_t v11 = [v9 objectForKeyedSubscript:v10];

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC160);
  if (v11)
  {
    __int16 v12 = [v11 dispatchQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008A1B4;
    block[3] = &unk_100998570;
    void block[4] = v11;
    void block[5] = a3;
    int v14 = a2;
    int v15 = a4;
    dispatch_async(v12, block);
  }
  else if (dword_1009F82C0 <= 90 && (dword_1009F82C0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
}

void sub_1000891D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000891F0(uint64_t a1, int a2, uint64_t a3, int a4, uint64_t a5)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC160);
  char v9 = (void *)qword_1009FC158;
  uint64_t v10 = +[NSNumber numberWithLong:a5];
  uint64_t v11 = [v9 objectForKeyedSubscript:v10];

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC160);
  if (v11)
  {
    __int16 v12 = [v11 dispatchQueue];
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10008A1A4;
    block[3] = &unk_100998570;
    void block[4] = v11;
    void block[5] = a3;
    int v14 = a2;
    int v15 = a4;
    dispatch_async(v12, block);
  }
  else if (dword_1009F82C0 <= 90 && (dword_1009F82C0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
}

void sub_10008936C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10008955C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100089660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000898C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100089A5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  id v13 = v12;

  _Unwind_Resume(a1);
}

void sub_100089D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (v13) {
    sub_100744B64((uint64_t)&a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008A088(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15) {
    sub_10008A294(a15);
  }
  _Unwind_Resume(exception_object);
}

id sub_10008A1A4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _discoveryEvent:*(unsigned int *)(a1 + 48) device:*(void *)(a1 + 40) attributes:*(unsigned int *)(a1 + 52)];
}

id sub_10008A1B4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _statusEvent:*(unsigned int *)(a1 + 48) device:*(void *)(a1 + 40) result:*(unsigned int *)(a1 + 52)];
}

void sub_10008A1C4(id a1)
{
}

void sub_10008A208()
{
}

void sub_10008A22C(id a1)
{
}

void sub_10008A270()
{
}

void sub_10008A294(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void sub_10008A308(id a1)
{
}

void sub_10008A34C()
{
}

void sub_10008A370(id a1)
{
}

void sub_10008A3B4()
{
}

void sub_10008A6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v14 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_10008A6D4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v1 + 40), obj);
}

void sub_10008A724(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v6 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v6 + 40), obj);
  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (*(int *)(a1 + 48) >= 11 && *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= 0x32uLL) {
    *a4 = 1;
  }
}

void *sub_10008ABC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v4 == result[11]) {
    return [result _receivedWHBUpdateEvent:a2 options:a3];
  }
  return result;
}

void sub_10008ABE8(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24))
  {
    id v3 = a2;
    id v4 = objc_alloc_init((Class)CBDevice);
    [v4 updateWithCBDevice:v3];

    [*(id *)(a1 + 40) deviceFound:v4 remoteController:0];
  }
}

void *sub_10008AC88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[3]) {
    return [result deviceLost:a2 remoteController:0];
  }
  return result;
}

void sub_10008ACA8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 24))
  {
    if (v3)
    {
      id v9 = v3;
      if (dword_1009F83A0 <= 30 && (dword_1009F83A0 != -1 || _LogCategory_Initialize()))
      {
        id v8 = CUPrintNSError();
        LogPrintF_safe();
      }
      [*(id *)(a1 + 32) invalidate:v8];
      uint64_t v5 = *(void *)(a1 + 40);
      uint64_t v6 = *(void **)(v5 + 24);
      *(void *)(v5 + 24) = 0;

      goto LABEL_11;
    }
    if (dword_1009F83A0 <= 30)
    {
      id v9 = 0;
      if (dword_1009F83A0 != -1 || (v7 = _LogCategory_Initialize(), id v4 = 0, v7))
      {
        LogPrintF_safe();
LABEL_11:
        id v4 = v9;
      }
    }
  }
}

void sub_10008AED4(id a1, NSString *a2, CBWHBRemoteController *a3, BOOL *a4)
{
}

void sub_10008B440(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va, a10);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_10008B460(uint64_t a1, uint64_t a2, void *a3)
{
  return [a3 setDiscoveryFlags:*(void *)(*(void *)(a1 + 32) + 16)];
}

void sub_10008B474(uint64_t a1, void *a2, void *a3)
{
  id v12 = a2;
  id v5 = a3;
  uint64_t v6 = [*(id *)(*(void *)(a1 + 32) + 32) objectForKeyedSubscript:v12];

  if (!v6)
  {
    int v7 = objc_alloc_init(CBWHBRemoteController);
    [(CBWHBRemoteController *)v7 setControllerID:v12];
    [(CBWHBRemoteController *)v7 setDaemonServer:*(void *)(*(void *)(a1 + 32) + 48)];
    [(CBWHBRemoteController *)v7 setDiscoveryFlags:*(void *)(*(void *)(a1 + 32) + 16)];
    [(CBWHBRemoteController *)v7 setDispatchQueue:*(void *)(*(void *)(a1 + 32) + 80)];
    [(CBWHBRemoteController *)v7 setRemoteDevice:v5];
    [(CBWHBRemoteController *)v7 setWhbDaemon:*(void *)(a1 + 32)];
    [(CBWHBRemoteController *)v7 activate];
    id v8 = *(void **)(*(void *)(a1 + 32) + 32);
    if (!v8)
    {
      id v9 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v10 = *(void *)(a1 + 32);
      uint64_t v11 = *(void **)(v10 + 32);
      *(void *)(v10 + 32) = v9;

      id v8 = *(void **)(*(void *)(a1 + 32) + 32);
    }
    [v8 setObject:v7 forKeyedSubscript:v12];
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
}

void sub_10008BAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va1, a9);
  va_start(va, a9);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  _Block_object_dispose(va, 8);
  _Block_object_dispose(va1, 8);
  _Unwind_Resume(a1);
}

void sub_10008BB10(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  id v5 = [v9 lastSeenTicks];
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v8 = *(void *)(v6 + 40);
  int v7 = (id *)(v6 + 40);
  if (!v8 || (unint64_t)v5 >= *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    objc_storeStrong(v7, a3);
    *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v5;
  }
}

id sub_10008C254(void *a1)
{
  id v1 = a1;
  uint64_t v2 = [v1 idsDeviceIdentifier];
  id v3 = [v1 name];
  id v4 = [v1 roomName];
  id v5 = [v1 model];
  uint64_t v6 = [v1 sourceVersion];

  int v7 = NSPrintF_safe();

  return v7;
}

void *sub_10008C600(void *result, uint64_t a2)
{
  uint64_t v2 = result[5];
  if (result[4] == *(void *)(v2 + 16)) {
    return [*(id *)(v2 + 64) deviceFound:a2];
  }
  return result;
}

void *sub_10008C620(void *result, uint64_t a2)
{
  uint64_t v2 = result[5];
  if (result[4] == *(void *)(v2 + 16)) {
    return [*(id *)(v2 + 64) deviceLost:a2];
  }
  return result;
}

void sub_10008C640(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 16))
  {
    if (v3)
    {
      if (dword_1009F83A0 <= 40 && (dword_1009F83A0 != -1 || _LogCategory_Initialize()))
      {
        unsigned int v18 = CUPrintNSError();
        LogPrintF_safe();
      }
      ++*(void *)(*(void *)(a1 + 40) + 72);
      long long v21 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      long long v24 = 0u;
      id v5 = [*(id *)(a1 + 32) discoveredDevices:v18];
      id v6 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
      if (v6)
      {
        id v7 = v6;
        uint64_t v8 = *(void *)v22;
        do
        {
          for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v22 != v8) {
              objc_enumerationMutation(v5);
            }
            uint64_t v10 = *(void *)(*((void *)&v21 + 1) + 8 * i);
            uint64_t v11 = [*(id *)(a1 + 32) deviceLostHandler];
            v11[2](v11, v10);
          }
          id v7 = [v5 countByEnumeratingWithState:&v21 objects:v25 count:16];
        }
        while (v7);
      }

      [*(id *)(a1 + 32) invalidate];
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void **)(v12 + 16);
      *(void *)(v12 + 16) = 0;

      unint64_t v14 = *(void *)(*(void *)(a1 + 40) + 72);
      if (v14 > 5)
      {
        if (dword_1009F83A0 <= 40 && (dword_1009F83A0 != -1 || _LogCategory_Initialize()))
        {
          unint64_t v19 = CUPrintNSError();
          LogPrintF_safe();
        }
      }
      else
      {
        dispatch_time_t v15 = dispatch_time(0, 5000000000 * v14);
        uint64_t v16 = *(void *)(a1 + 40);
        uint64_t v17 = *(NSObject **)(v16 + 48);
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_10008C95C;
        block[3] = &unk_100997230;
        void block[4] = v16;
        dispatch_after(v15, v17, block);
      }
    }
    else
    {
      if (dword_1009F83A0 <= 40 && (dword_1009F83A0 != -1 || _LogCategory_Initialize())) {
        LogPrintF_safe();
      }
      *(void *)(*(void *)(a1 + 40) + 72) = 0;
    }
  }
}

unsigned char *sub_10008C95C(uint64_t a1)
{
  id result = *(unsigned char **)(a1 + 32);
  if (!result[8])
  {
    if (dword_1009F83A0 <= 40)
    {
      if (dword_1009F83A0 != -1 || (int v3 = _LogCategory_Initialize(), result = *(unsigned char **)(a1 + 32), v3))
      {
        LogPrintF_safe();
        id result = *(unsigned char **)(a1 + 32);
      }
    }
    return [result activate];
  }
  return result;
}

uint64_t sub_10008CBD8(uint64_t result)
{
  uint64_t v1 = 0;
  *(void *)(result + 160) = "kLatencyStateMax";
  *(_OWORD *)(result + 112) = *(_OWORD *)off_1009987B8;
  *(_OWORD *)(result + 12_Block_object_dispose(&STACK[0x338], 8) = *(_OWORD *)off_1009987C8;
  *(_OWORD *)(result + 144) = *(_OWORD *)off_1009987D8;
  *(_OWORD *)(result + 4_Block_object_dispose(&STACK[0x338], 8) = *(_OWORD *)off_100998778;
  *(_OWORD *)(result + 64) = *(_OWORD *)off_100998788;
  *(_OWORD *)(result + 80) = *(_OWORD *)off_100998798;
  *(_OWORD *)(result + 96) = *(_OWORD *)off_1009987A8;
  *(_OWORD *)(result + 200) = *(_OWORD *)off_100998810;
  *(_OWORD *)(result + 184) = *(_OWORD *)off_100998800;
  *(_OWORD *)(result + 16_Block_object_dispose(&STACK[0x338], 8) = *(_OWORD *)off_1009987F0;
  *(void *)(result + 264) = "kTriggerMax";
  *(_OWORD *)(result + 24_Block_object_dispose(&STACK[0x338], 8) = *(_OWORD *)off_100998840;
  *(_OWORD *)(result + 232) = *(_OWORD *)off_100998830;
  *(_OWORD *)(result + 216) = *(_OWORD *)off_100998820;
  *(_DWORD *)(result + 5) = 0;
  *(unsigned char *)(result + 4) = 0;
  *(_DWORD *)id result = 1;
  *(_DWORD *)(result + 12) = 100;
  *(_WORD *)(result + 16) = 150;
  *(_DWORD *)(result + 20) = 0;
  *(unsigned char *)(result + 9) = 0;
  do
  {
    *(_WORD *)(result + v1 + 24) = -25444;
    v1 += 6;
  }
  while (v1 != 18);
  return result;
}

void sub_10008CC88(unint64_t a1, unsigned int a2)
{
  *(_WORD *)(a1 + 7) = 0;
  *(unsigned char *)(a1 + 5) = 0;
  *(unsigned char *)(a1 + 3) = 0;
  *(unsigned char *)(a1 + 9) = 0;
  if (!*(unsigned char *)a1)
  {
    uint64_t v4 = sub_10003FFD4();
    (*(void (**)(uint64_t, unint64_t))(*(void *)v4 + 152))(v4, a1);
  }

  sub_10008CD0C(a1, 0, a2);
}

void sub_10008CD0C(unint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = a2;
  id v5 = (unsigned __int8 *)a1;
  unint64_t v57 = a2;
  if (!a2)
  {
    a1 = sub_10008DBD8(a1, a3);
    unint64_t v4 = a1;
    unint64_t v57 = a1;
    if (!a1) {
      goto LABEL_41;
    }
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  id v6 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v6) {
    goto LABEL_16;
  }
  id v7 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= v4;
    if (v8 >= v4) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      id v7 = (char *)v6;
    }
    id v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_1009F80A8 + 200 || v4 < *((void *)v7 + 4)) {
LABEL_16:
  }
    id v7 = (char *)off_1009F80A8 + 200;
  if (v7 == (char *)off_1009F80A8 + 200)
  {
LABEL_41:
    sub_10009126C(v5, v4, a3);
    goto LABEL_42;
  }
  uint64_t v11 = (unsigned char *)sub_10008F65C(a1, v4);
  if (!*v11)
  {
    uint64_t v35 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    int v32 = "Dynamic Latency defaults writes enabled don't allow screen off dynamic latency transition.";
    long long v33 = v35;
    uint32_t v34 = 2;
    goto LABEL_46;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  uint64_t v12 = (char **)*((void *)off_1009F80A8 + 139);
  if (!v12) {
    goto LABEL_32;
  }
  uint64_t v13 = (char *)off_1009F80A8 + 1112;
  do
  {
    unsigned int v14 = *((unsigned __int16 *)v12 + 16);
    BOOL v15 = v14 >= a3;
    if (v14 >= a3) {
      uint64_t v16 = v12;
    }
    else {
      uint64_t v16 = v12 + 1;
    }
    if (v15) {
      uint64_t v13 = (char *)v12;
    }
    uint64_t v12 = (char **)*v16;
  }
  while (*v16);
  if (v13 == (char *)off_1009F80A8 + 1112 || *((unsigned __int16 *)v13 + 16) > a3) {
LABEL_32:
  }
    uint64_t v13 = (char *)off_1009F80A8 + 1112;
  uint64_t v17 = (char *)off_1009F80A8;
  if (!*(unsigned char *)(sub_10008F65C((uint64_t)v11, v4) + 1))
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    BOOL v18 = sub_10056A3FC((uint64_t)off_1009F80A8);
    if (!v18)
    {
      uint64_t v36 = sub_100090FB8(v18, a3);
      if (v36)
      {
        int v20 = v36;
        uint64_t v19 = (uint64_t)v5;
        goto LABEL_38;
      }
      long long v37 = v17 + 1112;
      if (v13 != v37)
      {
        if (*(_DWORD *)(sub_10008F65C(v36, v4) + 20) != 6)
        {
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          *(void *)buf = &v57;
          if (*(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v57, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]
                         + 76) == 2)
          {
            if (qword_1009F8418 == -1) {
              goto LABEL_56;
            }
            goto LABEL_121;
          }
          goto LABEL_105;
        }
LABEL_42:
        uint64_t v21 = qword_100A19E48;
        if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
          return;
        }
        int v22 = v5[1];
        int v23 = v5[3];
        int v24 = v5[5];
        int v25 = v5[2];
        int v26 = v5[8];
        int v27 = v5[7];
        int v28 = *v5;
        int v29 = v5[6];
        int v30 = v5[9];
        int v31 = v5[4];
        *(_DWORD *)buf = 67111424;
        *(_DWORD *)&uint8_t buf[4] = v22;
        __int16 v59 = 1024;
        int v60 = v23;
        __int16 v61 = 1024;
        int v62 = v24;
        __int16 v63 = 1024;
        int v64 = v25;
        __int16 v65 = 1024;
        int v66 = v26;
        __int16 v67 = 1024;
        int v68 = v27;
        __int16 v69 = 1024;
        BOOL v70 = v28;
        __int16 v71 = 1024;
        int v72 = v29;
        __int16 v73 = 1024;
        int v74 = v30;
        __int16 v75 = 1024;
        int v76 = v31;
        int v32 = "Dynamic Latency Trigger fKeyboardOn =%d, fVoiceOverOn=%d, fGameModeOn=%d, fGarageBandOn=%d, fSpatialVideoO"
              "n=%d, fSpatialMusicOn=%d, fScreenOn =%d, fExpanseOn =%d, fAudioInputAggregateOn=%d, fConsoleGameModeOn=%d";
        long long v33 = v21;
        uint32_t v34 = 62;
LABEL_46:
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v32, buf, v34);
        return;
      }
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      *(void *)buf = &v57;
      if (**(unsigned __int8 **)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v57, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 48) == 240)goto LABEL_65; {
      if (qword_1009F80B0 != -1)
      }
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      *(void *)buf = &v57;
      uint64_t v39 = sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v57, (uint64_t)&unk_1007B8580, (uint64_t **)buf);
      if (**(unsigned __int8 **)(v39[5] + 48) == 241)
      {
LABEL_65:
        sub_1000910BC((uint64_t)v5, v57, a3);
        goto LABEL_42;
      }
      if (*v5
        || *(_DWORD *)(sub_10008F65C((uint64_t)v39, v57) + 20) == 7
        || (uint64_t v40 = sub_10008FB20(v5, 0), (v40 & 1) != 0)
        || v5[8]
        || v5[7]
        || v5[6]
        || v5[9]
        || v5[4]
        || v5[5])
      {
        uint64_t v41 = sub_100035F54();
        uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v41 + 792))(v41, 5);
        if ((v42 & 1) == 0 && !v5[1] && !v5[3] && !v5[5] && !v5[2] && !v5[8] && !v5[7] && !v5[4]
          || !*v5
          || v5[6]
          || v5[9]
          || (uint64_t v42 = sub_10009119C(v42, v57), (v42 & 1) != 0))
        {
          if ((v5[1] || v5[3] || v5[5] || v5[2] || v5[8] || v5[7] || v5[4] || !*v5) && !v5[6] && !v5[9]
            || *(_DWORD *)(sub_10008F65C(v42, v57) + 20) == 6)
          {
            goto LABEL_42;
          }
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          *(void *)buf = &v57;
          if (*(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v57, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]
                         + 76) != 2)
            goto LABEL_42;
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          *(void *)buf = &v57;
          if (*(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v57, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]
                         + 76) == 2)
          {
            if (qword_1009F8418 == -1)
            {
LABEL_56:
              if (sub_1004190FC(qword_1009F8410, a3) < 8)
              {
LABEL_57:
                int v38 = 150;
LABEL_58:
                sub_100090E5C((uint64_t)v5, v38, a3);
                goto LABEL_42;
              }
              goto LABEL_105;
            }
LABEL_121:
            dispatch_once(&qword_1009F8418, &stru_1009988C0);
            goto LABEL_56;
          }
LABEL_105:
          int v43 = 6;
          goto LABEL_106;
        }
        if (*(_DWORD *)(sub_10008F65C(v42, v57) + 20) == 6)
        {
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          *(void *)buf = &v57;
          if (*(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v57, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]
                         + 76) == 2)
          {
            if (qword_1009F8418 != -1) {
              dispatch_once(&qword_1009F8418, &stru_1009988C0);
            }
            if (sub_1004190FC(qword_1009F8410, a3) < 8) {
              goto LABEL_57;
            }
          }
          size_t v55 = qword_100A19E48;
          BOOL v56 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
          if (v56)
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Adaptive Latency start with valid link", buf, 2u);
          }
          *(_WORD *)(sub_10008F65C(v56, v57) + 44) = -1;
          *((_WORD *)v5 + _Block_object_dispose(&STACK[0x338], 8) = 60;
          int v43 = 1;
LABEL_106:
          uint64_t v44 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            int v45 = v5[1];
            int v46 = v5[3];
            int v47 = v5[5];
            int v48 = v5[2];
            int v49 = v5[8];
            int v50 = v5[7];
            int v51 = *v5;
            int v52 = v5[6];
            int v53 = v5[9];
            int v54 = v5[4];
            *(_DWORD *)buf = 67111680;
            *(_DWORD *)&uint8_t buf[4] = v45;
            __int16 v59 = 1024;
            int v60 = v46;
            __int16 v61 = 1024;
            int v62 = v47;
            __int16 v63 = 1024;
            int v64 = v48;
            __int16 v65 = 1024;
            int v66 = v49;
            __int16 v67 = 1024;
            int v68 = v50;
            __int16 v69 = 1024;
            BOOL v70 = v13 != v37;
            __int16 v71 = 1024;
            int v72 = v51;
            __int16 v73 = 1024;
            int v74 = v52;
            __int16 v75 = 1024;
            int v76 = v53;
            __int16 v77 = 1024;
            int v78 = v54;
            _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "Dynamic Latency Trigger fKeyboardOn =%d, fVoiceOverOn=%d, fGameModeOn=%d, fGarageBandOn=%d, fSpatialVideoOn=%d, fSpatialMusicOn=%d, aggregated = %d, fScreenOn =%d, fExpanseOn =%d, fAudioInputAggregateOn =%d, fConsoleGameModeOn=%d", buf, 0x44u);
          }
          sub_100090AFC((uint64_t)v5, a3, v43);
          goto LABEL_42;
        }
      }
      else if (*(_DWORD *)(sub_10008F65C(v40, v57) + 20) == 6)
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        *(void *)buf = &v57;
        if (*(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v57, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]
                       + 76) == 2)
        {
          if (qword_1009F8418 != -1) {
            dispatch_once(&qword_1009F8418, &stru_1009988C0);
          }
          if (sub_1004190FC(qword_1009F8410, a3) < 8) {
            goto LABEL_57;
          }
        }
        int v43 = 7;
        goto LABEL_106;
      }
      sub_100090AFC((uint64_t)v5, a3, 6);
      int v38 = 2000;
      goto LABEL_58;
    }
  }
  uint64_t v19 = (uint64_t)v5;
  int v20 = 1000;
LABEL_38:

  sub_100090E5C(v19, v20, a3);
}

void sub_10008D710(unsigned char *a1, unsigned int a2, int a3)
{
  char v6 = sub_10008DAD4((uint64_t)a1, a2);
  id v7 = qword_100A19E48;
  BOOL v8 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      int v9 = a1[7];
      *(_DWORD *)buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v9;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adaptive Latency a2dpSpatialMusicStateChanged:%d, %d", buf, 0xEu);
    }
    if (a1[7] != a3)
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      sub_1005656D4(off_1009F80A8, a3);
      a1[7] = a3;
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      uint64_t v10 = sub_10057295C((uint64_t)off_1009F80A8);
      unint64_t v11 = sub_10008DBD8(v10, a2);
      unint64_t v20 = v11;
      if (v11)
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        uint64_t v12 = (void *)*((void *)off_1009F80A8 + 25);
        if (!v12) {
          goto LABEL_23;
        }
        uint64_t v13 = (char *)off_1009F80A8 + 200;
        do
        {
          unint64_t v14 = v12[4];
          BOOL v15 = v14 >= v11;
          if (v14 >= v11) {
            uint64_t v16 = v12;
          }
          else {
            uint64_t v16 = v12 + 1;
          }
          if (v15) {
            uint64_t v13 = (char *)v12;
          }
          uint64_t v12 = (void *)*v16;
        }
        while (*v16);
        if (v13 == (char *)off_1009F80A8 + 200 || v11 < *((void *)v13 + 4)) {
LABEL_23:
        }
          uint64_t v13 = (char *)off_1009F80A8 + 200;
        if (v13 != (char *)off_1009F80A8 + 200)
        {
          *(void *)buf = &v20;
          if (*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v20, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5])
          {
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009988E0);
            }
            sub_100568D64((uint64_t)off_1009F80A8, (uint64_t)buf);
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009988E0);
            }
            uint64_t v21 = &v20;
            uint64_t v17 = *(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v20, (uint64_t)&unk_1007B8580, (uint64_t **)&v21)[5];
            uint64_t v18 = v17 + 472;
            if (*(char *)(v17 + 495) < 0) {
              operator delete(*(void **)v18);
            }
            *(_OWORD *)uint64_t v18 = *(_OWORD *)buf;
            *(void *)(v18 + 16) = v23;
            if (a1[7] && a1[5])
            {
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              *(void *)buf = &v20;
              *(unsigned char *)(*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v20, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 161) = 1;
            }
          }
        }
      }
      if (!*a1)
      {
        uint64_t v19 = sub_10003FFD4();
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v19 + 152))(v19, a1);
      }
      sub_10008CD0C((unint64_t)a1, 0, a2);
    }
  }
  else if (v8)
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Adaptive Latency a2dpSpatialMusicStateChanged return a2dpHandle:%d", buf, 8u);
  }
}

void sub_10008DAB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10008DAD4(uint64_t a1, int a2)
{
  uint64_t v3 = sub_100035F54();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 792))(v3, 5);
  if (!v4) {
    return 1;
  }
  uint64_t v5 = sub_10008DBD8(v4, a2);
  if (!v5) {
    return 1;
  }
  unint64_t v6 = v5;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  id v7 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v7) {
    goto LABEL_16;
  }
  BOOL v8 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v9 = v7[4];
    BOOL v10 = v9 >= v6;
    if (v9 >= v6) {
      unint64_t v11 = v7;
    }
    else {
      unint64_t v11 = v7 + 1;
    }
    if (v10) {
      BOOL v8 = (char *)v7;
    }
    id v7 = (void *)*v11;
  }
  while (*v11);
  if (v8 == (char *)off_1009F80A8 + 200 || v6 < *((void *)v8 + 4)) {
LABEL_16:
  }
    BOOL v8 = (char *)off_1009F80A8 + 200;
  if (v8 == (char *)off_1009F80A8 + 200) {
    return 1;
  }
  uint64_t v12 = (unsigned char *)sub_10008F65C(v5, v6);
  uint64_t result = 0;
  *uint64_t v12 = 0;
  return result;
}

uint64_t sub_10008DBD8(uint64_t a1, int a2)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  uint64_t v3 = (void *)*((void *)off_1009F80A8 + 24);
  if (v3 == (void *)((char *)off_1009F80A8 + 200)) {
    return 0;
  }
  uint64_t result = 0;
  do
  {
    int v5 = *(unsigned __int16 *)(v3[5] + 84);
    BOOL v6 = v5 != a2 || v5 == 0;
    if (!v6) {
      uint64_t result = v3[4];
    }
    id v7 = (void *)v3[1];
    if (v7)
    {
      do
      {
        BOOL v8 = v7;
        id v7 = (void *)*v7;
      }
      while (v7);
    }
    else
    {
      do
      {
        BOOL v8 = (void *)v3[2];
        BOOL v6 = *v8 == (void)v3;
        uint64_t v3 = v8;
      }
      while (!v6);
    }
    uint64_t v3 = v8;
  }
  while (v8 != (void *)((char *)off_1009F80A8 + 200));
  return result;
}

void sub_10008DC90(unint64_t a1)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  if (*((void *)off_1009F80A8 + 26))
  {
    uint64_t v2 = (char *)*((void *)off_1009F80A8 + 24);
    uint64_t v3 = (char *)off_1009F80A8 + 200;
    if (v2 != (char *)off_1009F80A8 + 200)
    {
      do
      {
        uint64_t v4 = *((void *)v2 + 5);
        if (*(_WORD *)(v4 + 84) && sub_10008DAD4(a1, *(unsigned __int16 *)(v4 + 84)))
        {
          int v5 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)unint64_t v9 = 0;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Dynamic Latency screen call decision for default logic", v9, 2u);
          }
          sub_10008CD0C(a1, 0, *(unsigned __int16 *)(v4 + 84));
        }
        BOOL v6 = (char *)*((void *)v2 + 1);
        if (v6)
        {
          do
          {
            id v7 = v6;
            BOOL v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            id v7 = (char *)*((void *)v2 + 2);
            BOOL v8 = *(void *)v7 == (void)v2;
            uint64_t v2 = v7;
          }
          while (!v8);
        }
        uint64_t v2 = v7;
      }
      while (v7 != v3);
    }
  }
}

void sub_10008DDC8(unsigned char *a1, unsigned int a2, int a3)
{
  if (sub_10008DAD4((uint64_t)a1, a2))
  {
    BOOL v6 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      id v7 = "on";
      if (a1[8]) {
        BOOL v8 = "on";
      }
      else {
        BOOL v8 = "off";
      }
      if (!a3) {
        id v7 = "off";
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&unsigned char buf[14] = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adaptive Latency fSpatialVideoOn from %s -> %s", buf, 0x16u);
    }
    if (a1[8] != a3)
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      sub_1005656D4(off_1009F80A8, a3);
      a1[8] = a3;
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      uint64_t v9 = sub_10057295C((uint64_t)off_1009F80A8);
      unint64_t v10 = sub_10008DBD8(v9, a2);
      unint64_t v19 = v10;
      if (v10)
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        unint64_t v11 = (void *)*((void *)off_1009F80A8 + 25);
        if (!v11) {
          goto LABEL_28;
        }
        uint64_t v12 = (char *)off_1009F80A8 + 200;
        do
        {
          unint64_t v13 = v11[4];
          BOOL v14 = v13 >= v10;
          if (v13 >= v10) {
            BOOL v15 = v11;
          }
          else {
            BOOL v15 = v11 + 1;
          }
          if (v14) {
            uint64_t v12 = (char *)v11;
          }
          unint64_t v11 = (void *)*v15;
        }
        while (*v15);
        if (v12 == (char *)off_1009F80A8 + 200 || v10 < *((void *)v12 + 4)) {
LABEL_28:
        }
          uint64_t v12 = (char *)off_1009F80A8 + 200;
        if (v12 != (char *)off_1009F80A8 + 200)
        {
          *(void *)buf = &v19;
          if (*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v19, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5])
          {
            if (a1[8])
            {
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              sub_100568D64((uint64_t)off_1009F80A8, (uint64_t)buf);
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              unint64_t v20 = &v19;
              uint64_t v16 = *(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v19, (uint64_t)&unk_1007B8580, (uint64_t **)&v20)[5];
              uint64_t v17 = v16 + 472;
              if (*(char *)(v16 + 495) < 0) {
                operator delete(*(void **)v17);
              }
              *(_OWORD *)uint64_t v17 = *(_OWORD *)buf;
              *(void *)(v17 + 16) = *(void *)&buf[16];
              if (a1[8] && a1[5])
              {
                if (qword_1009F80B0 != -1) {
                  dispatch_once(&qword_1009F80B0, &stru_1009988E0);
                }
                *(void *)buf = &v19;
                *(unsigned char *)(*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v19, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 162) = 1;
              }
            }
          }
        }
      }
      if (!*a1)
      {
        uint64_t v18 = sub_10003FFD4();
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v18 + 152))(v18, a1);
      }
      sub_10008CD0C((unint64_t)a1, 0, a2);
    }
  }
}

void sub_10008E150(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10008E174(unsigned char *a1, unsigned int a2, int a3)
{
  BOOL v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = "on";
    if (a1[3]) {
      BOOL v8 = "on";
    }
    else {
      BOOL v8 = "off";
    }
    if (!a3) {
      id v7 = "off";
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v20 = 2080;
    uint64_t v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adaptive Latency fVoiceOverOn from %s -> %s", buf, 0x16u);
  }
  uint64_t v9 = sub_10008DAD4((uint64_t)a1, a2);
  if (v9)
  {
    a1[3] = a3;
    if (a3)
    {
      if (a1[5])
      {
        uint64_t v10 = sub_10008DBD8(v9, a2);
        unint64_t v18 = v10;
        if (v10)
        {
          unint64_t v11 = v10;
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          uint64_t v12 = (void *)*((void *)off_1009F80A8 + 25);
          if (!v12) {
            goto LABEL_25;
          }
          unint64_t v13 = (char *)off_1009F80A8 + 200;
          do
          {
            unint64_t v14 = v12[4];
            BOOL v15 = v14 >= v11;
            if (v14 >= v11) {
              uint64_t v16 = v12;
            }
            else {
              uint64_t v16 = v12 + 1;
            }
            if (v15) {
              unint64_t v13 = (char *)v12;
            }
            uint64_t v12 = (void *)*v16;
          }
          while (*v16);
          if (v13 == (char *)off_1009F80A8 + 200 || v11 < *((void *)v13 + 4)) {
LABEL_25:
          }
            unint64_t v13 = (char *)off_1009F80A8 + 200;
          if (v13 != (char *)off_1009F80A8 + 200)
          {
            *(void *)buf = &v18;
            if (*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v18, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5])
            {
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              *(void *)buf = &v18;
              *(unsigned char *)(*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v18, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 164) = 1;
            }
          }
        }
      }
    }
    if (!*a1)
    {
      uint64_t v17 = sub_10003FFD4();
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v17 + 152))(v17, a1);
    }
    sub_10008CD0C((unint64_t)a1, 0, a2);
  }
}

void sub_10008E3E8(unsigned char *a1, unsigned int a2, int a3)
{
  BOOL v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    id v7 = "on";
    if (a1[9]) {
      BOOL v8 = "on";
    }
    else {
      BOOL v8 = "off";
    }
    if (!a3) {
      id v7 = "off";
    }
    int v10 = 136315394;
    unint64_t v11 = v8;
    __int16 v12 = 2080;
    unint64_t v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Adaptive Latency A2dpAudioAndInputAggregationChanged from %s -> %s", (uint8_t *)&v10, 0x16u);
  }
  if (sub_10008DAD4((uint64_t)a1, a2))
  {
    a1[9] = a3;
    if (!*a1)
    {
      uint64_t v9 = sub_10003FFD4();
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 152))(v9, a1);
    }
    sub_10008CD0C((unint64_t)a1, 0, a2);
  }
}

void sub_10008E524(unint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 1) != a2)
  {
    *(unsigned char *)(a1 + 1) = a2;
    uint64_t v4 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (a2) {
        int v5 = "enabled";
      }
      int v12 = 136315138;
      unint64_t v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Latency keyboard %s", (uint8_t *)&v12, 0xCu);
    }
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    if (*((void *)off_1009F80A8 + 26))
    {
      BOOL v6 = (char *)*((void *)off_1009F80A8 + 24);
      id v7 = (char *)off_1009F80A8 + 200;
      if (v6 != (char *)off_1009F80A8 + 200)
      {
        do
        {
          uint64_t v8 = *((void *)v6 + 5);
          if (*(_WORD *)(v8 + 84)) {
            sub_10008CD0C(a1, 0, *(unsigned __int16 *)(v8 + 84));
          }
          uint64_t v9 = (char *)*((void *)v6 + 1);
          if (v9)
          {
            do
            {
              int v10 = v9;
              uint64_t v9 = *(char **)v9;
            }
            while (v9);
          }
          else
          {
            do
            {
              int v10 = (char *)*((void *)v6 + 2);
              BOOL v11 = *(void *)v10 == (void)v6;
              BOOL v6 = v10;
            }
            while (!v11);
          }
          BOOL v6 = v10;
        }
        while (v10 != v7);
      }
    }
  }
}

void sub_10008E698(unint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 2) != a2)
  {
    *(unsigned char *)(a1 + 2) = a2;
    uint64_t v4 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (a2) {
        int v5 = "enabled";
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Dynamic Latency GarageBand %s", buf, 0xCu);
    }
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    if (*((void *)off_1009F80A8 + 26))
    {
      BOOL v6 = (char *)*((void *)off_1009F80A8 + 24);
      id v7 = (char *)off_1009F80A8 + 200;
      if (v6 != (char *)off_1009F80A8 + 200)
      {
        do
        {
          uint64_t v8 = *((void *)v6 + 5);
          unsigned int v9 = *(unsigned __int16 *)(v8 + 84);
          if (*(_WORD *)(v8 + 84))
          {
            if (*(unsigned char *)(a1 + 2) && *(unsigned char *)(a1 + 5))
            {
              unint64_t v18 = 0;
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              unint64_t v18 = sub_100567A58((uint64_t)off_1009F80A8, *(unsigned __int16 *)(v8 + 84));
              if (v18)
              {
                if (qword_1009F80B0 != -1) {
                  dispatch_once(&qword_1009F80B0, &stru_1009988E0);
                }
                int v10 = (void *)*((void *)off_1009F80A8 + 25);
                if (!v10) {
                  goto LABEL_29;
                }
                BOOL v11 = (char *)off_1009F80A8 + 200;
                do
                {
                  unint64_t v12 = v10[4];
                  BOOL v13 = v12 >= v18;
                  if (v12 >= v18) {
                    unint64_t v14 = v10;
                  }
                  else {
                    unint64_t v14 = v10 + 1;
                  }
                  if (v13) {
                    BOOL v11 = (char *)v10;
                  }
                  int v10 = (void *)*v14;
                }
                while (*v14);
                if (v11 == (char *)off_1009F80A8 + 200 || v18 < *((void *)v11 + 4)) {
LABEL_29:
                }
                  BOOL v11 = (char *)off_1009F80A8 + 200;
                if (v11 != (char *)off_1009F80A8 + 200)
                {
                  *(void *)buf = &v18;
                  if (*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v18, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5])
                  {
                    if (qword_1009F80B0 != -1) {
                      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
                    }
                    *(void *)buf = &v18;
                    *(unsigned char *)(*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v18, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 165) = 1;
                  }
                }
              }
              unsigned int v9 = *(unsigned __int16 *)(v8 + 84);
            }
            sub_10008CD0C(a1, 0, v9);
          }
          BOOL v15 = (char *)*((void *)v6 + 1);
          if (v15)
          {
            do
            {
              uint64_t v16 = v15;
              BOOL v15 = *(char **)v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              uint64_t v16 = (char *)*((void *)v6 + 2);
              BOOL v17 = *(void *)v16 == (void)v6;
              BOOL v6 = v16;
            }
            while (!v17);
          }
          BOOL v6 = v16;
        }
        while (v16 != v7);
      }
    }
  }
}

void sub_10008E97C(unint64_t a1, int a2)
{
  int v2 = a2;
  if (*(unsigned char *)(a1 + 4)) {
    BOOL v4 = 1;
  }
  else {
    BOOL v4 = *(unsigned char *)(a1 + 5) != 0;
  }
  *(unsigned char *)(a1 + 4) = a2;
  int v5 = qword_100A19E48;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    id v7 = "disabled";
    int v8 = *(unsigned __int8 *)(a1 + 5);
    unsigned int v9 = "enabled";
    *(_DWORD *)buf = 136316162;
    if (v2) {
      int v10 = "enabled";
    }
    else {
      int v10 = "disabled";
    }
    *(void *)int v25 = v10;
    if (v4) {
      BOOL v11 = "enabled";
    }
    else {
      BOOL v11 = "disabled";
    }
    *(_WORD *)&v25[8] = 2080;
    int v26 = v10;
    if (v8) {
      id v7 = "enabled";
    }
    else {
      unsigned int v9 = v10;
    }
    __int16 v27 = 2080;
    int v28 = v7;
    __int16 v29 = 2080;
    int v30 = v11;
    __int16 v31 = 2080;
    int v32 = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low Latency Game console mode update, new mode: %s, fConsoleGameModeOn: %s, fGameModeOn: %s, fCombinedGameOn: %s->%s", buf, 0x34u);
    int v2 = *(unsigned __int8 *)(a1 + 4);
  }
  if (v2)
  {
    if (v4) {
      return;
    }
  }
  else if (v4 == (*(unsigned char *)(a1 + 5) != 0))
  {
    return;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  if (*((void *)off_1009F80A8 + 26))
  {
    unint64_t v12 = (char *)*((void *)off_1009F80A8 + 24);
    BOOL v13 = (char *)off_1009F80A8 + 200;
    if (v12 != (char *)off_1009F80A8 + 200)
    {
      do
      {
        uint64_t v14 = *((void *)v12 + 5);
        if (*(_WORD *)(v14 + 84))
        {
          uint64_t v15 = *((void *)v12 + 4);
          uint64_t v16 = sub_10008DBD8(v6, *(unsigned __int16 *)(v14 + 84));
          if (!_os_feature_enabled_impl()) {
            goto LABEL_31;
          }
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          if (*((void *)off_1009F80A8 + 28)
            && sub_10007DD8C(*((void *)off_1009F80A8 + 28), v16)
            && !*(unsigned char *)(a1 + 4)
            && !*(unsigned char *)(a1 + 5))
          {
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009988E0);
            }
            sub_100563678((uint64_t)off_1009F80A8, 8u, v16);
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009988E0);
            }
            sub_100571CCC((uint64_t)off_1009F80A8, v16, 0);
          }
          else
          {
LABEL_31:
            sub_10008CD0C(a1, 0, *(unsigned __int16 *)(v14 + 84));
          }
          if (*(unsigned char *)(a1 + 4)) {
            BOOL v17 = 1;
          }
          else {
            BOOL v17 = *(unsigned char *)(a1 + 5) != 0;
          }
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          int v18 = sub_10007FBE8(*((void *)off_1009F80A8 + 28));
          unint64_t v19 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(a1 + 4)) {
              BOOL v20 = 1;
            }
            else {
              BOOL v20 = *(unsigned char *)(a1 + 5) != 0;
            }
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)int v25 = v20;
            *(_WORD *)&v25[4] = 1024;
            *(_DWORD *)&_OWORD v25[6] = v18;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Low Latency Game console mode change, notify BTHAL low Latency Game: %d, HID: %d", buf, 0xEu);
          }
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          sub_100573C94((uint64_t)off_1009F80A8, v15, *(unsigned __int16 *)(v14 + 84), v17 & v18);
        }
        uint64_t v21 = (char *)*((void *)v12 + 1);
        if (v21)
        {
          do
          {
            int v22 = v21;
            uint64_t v21 = *(char **)v21;
          }
          while (v21);
        }
        else
        {
          do
          {
            int v22 = (char *)*((void *)v12 + 2);
            BOOL v23 = *(void *)v22 == (void)v12;
            unint64_t v12 = v22;
          }
          while (!v23);
        }
        unint64_t v12 = v22;
      }
      while (v22 != v13);
    }
  }
}

void sub_10008ED6C(unsigned char *a1, unsigned int a2, int a3)
{
  BOOL v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "a2dpExpanseStateChanged:%d", (uint8_t *)v8, 8u);
  }
  if (sub_10008DAD4((uint64_t)a1, a2))
  {
    a1[6] = a3;
    if (!*a1)
    {
      uint64_t v7 = sub_10003FFD4();
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 152))(v7, a1);
    }
    sub_10008CD0C((unint64_t)a1, 0, a2);
  }
}

void sub_10008EE78(unsigned char *a1, uint64_t a2, int a3)
{
  if (a1[4]) {
    BOOL v6 = 1;
  }
  else {
    BOOL v6 = a1[5] != 0;
  }
  if (sub_10008DAD4((uint64_t)a1, a2))
  {
    a1[5] = a3;
    uint64_t v7 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = a1[4];
      if (a3) {
        unsigned int v9 = "enabled";
      }
      else {
        unsigned int v9 = "disabled";
      }
      *(_DWORD *)buf = 136315906;
      if (v6) {
        int v10 = "enabled";
      }
      else {
        int v10 = "disabled";
      }
      BOOL v11 = v8 == 0;
      if (v8) {
        unint64_t v12 = "enabled";
      }
      else {
        unint64_t v12 = "disabled";
      }
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2080;
      __int16 v29 = v9;
      if (v11) {
        BOOL v13 = v9;
      }
      else {
        BOOL v13 = "enabled";
      }
      __int16 v30 = 2080;
      __int16 v31 = v10;
      __int16 v32 = 2080;
      long long v33 = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Game State (Ambience) Changed, fConsoleGameModeOn: %s, fGameModeOn: %s, fCombinedGameOn: %s->%s", buf, 0x2Au);
    }
    if (a1[4])
    {
      if (v6) {
        return;
      }
    }
    else if (v6 == (a1[5] != 0))
    {
      return;
    }
    unint64_t v27 = 0;
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    unint64_t v27 = sub_100567A58((uint64_t)off_1009F80A8, a2);
    if (v27)
    {
      if (a1[4] || a1[5])
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        uint64_t v14 = (void *)*((void *)off_1009F80A8 + 25);
        if (!v14) {
          goto LABEL_41;
        }
        uint64_t v15 = (char *)off_1009F80A8 + 200;
        do
        {
          unint64_t v16 = v14[4];
          BOOL v17 = v16 >= v27;
          if (v16 >= v27) {
            int v18 = v14;
          }
          else {
            int v18 = v14 + 1;
          }
          if (v17) {
            uint64_t v15 = (char *)v14;
          }
          uint64_t v14 = (void *)*v18;
        }
        while (*v18);
        if (v15 == (char *)off_1009F80A8 + 200 || v27 < *((void *)v15 + 4)) {
LABEL_41:
        }
          uint64_t v15 = (char *)off_1009F80A8 + 200;
        if (v15 != (char *)off_1009F80A8 + 200)
        {
          *(void *)buf = &v27;
          if (*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v27, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5])
          {
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009988E0);
            }
            *(void *)buf = &v27;
            *(unsigned char *)(*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v27, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 160) = 1;
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009988E0);
            }
            *(void *)buf = &v27;
            if (*(unsigned char *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v27, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 72))
            {
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              *(void *)buf = &v27;
              *(unsigned char *)(*(void *)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v27, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 163) = 1;
            }
          }
        }
      }
      if (!*a1)
      {
        uint64_t v19 = sub_10003FFD4();
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v19 + 152))(v19, a1);
      }
      if (!_os_feature_enabled_impl() || a1[4] || a1[5])
      {
        sub_10008CD0C((unint64_t)a1, 0, a2);
      }
      else
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        sub_100563678((uint64_t)off_1009F80A8, 8u, v27);
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        sub_100571CCC((uint64_t)off_1009F80A8, v27, 0);
      }
      if (a1[4]) {
        BOOL v20 = 1;
      }
      else {
        BOOL v20 = a1[5] != 0;
      }
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      int v23 = sub_10007FBE8(*((void *)off_1009F80A8 + 28));
      int v24 = v20 & v23;
      int v25 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        if (a1[4]) {
          int v26 = 1;
        }
        else {
          int v26 = a1[5];
        }
        *(_DWORD *)buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v26;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v23;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Game State (Ambience) notify BTHAL low Latency Game: %d, HID: %d", buf, 0xEu);
      }
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      sub_100573C94((uint64_t)off_1009F80A8, v27, a2, v24);
    }
    else
    {
      uint64_t v21 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        if (a1[5]) {
          int v22 = "true";
        }
        else {
          int v22 = "false";
        }
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Couldn't trigger Game State change (%s) - couldn't find the device", buf, 0xCu);
      }
    }
  }
}

void sub_10008F424(uint64_t a1, int a2, int a3)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  if (*((void *)off_1009F80A8 + 26))
  {
    int v5 = (char *)*((void *)off_1009F80A8 + 24);
    BOOL v6 = (char *)off_1009F80A8 + 200;
    if (v5 != (char *)off_1009F80A8 + 200)
    {
      do
      {
        uint64_t v7 = *((void *)v5 + 5);
        if (*(unsigned __int16 *)(v7 + 84) == a2)
        {
          unint64_t v8 = *((void *)v5 + 4);
          uint64_t v9 = a3 ? mach_absolute_time() : 0;
          uint64_t v10 = *(void *)(v7 + 40);
          *(void *)(v10 + _Block_object_dispose(&STACK[0x338], 8) = v9;
          *(unsigned char *)(v10 + 1) = 0;
          if (_os_feature_enabled_impl())
          {
            BOOL v11 = qword_100A19E48;
            BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
            if (v12)
            {
              int v13 = *(_DWORD *)(sub_10008F65C(v12, v8) + 20);
              *(_DWORD *)buf = 67109120;
              int v21 = v13;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Low Latency Game a2dpDynamicLatencyTransitionCompleted new latencymode: %d", buf, 8u);
            }
            uint64_t v14 = sub_10008F65C(v12, v8);
            if (*(_DWORD *)(v14 + 20) == 1
              || (uint64_t v15 = sub_10008F65C(v14, v8), *(_DWORD *)(v15 + 20) == 2)
              || (uint64_t v16 = sub_10008F65C(v15, v8), *(_DWORD *)(v16 + 20) == 3)
              || *(_DWORD *)(sub_10008F65C(v16, v8) + 20) == 10)
            {
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              sub_100563678((uint64_t)off_1009F80A8, 0xAu, v8);
            }
          }
        }
        BOOL v17 = (char *)*((void *)v5 + 1);
        if (v17)
        {
          do
          {
            int v18 = v17;
            BOOL v17 = *(char **)v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            int v18 = (char *)*((void *)v5 + 2);
            BOOL v19 = *(void *)v18 == (void)v5;
            int v5 = v18;
          }
          while (!v19);
        }
        int v5 = v18;
      }
      while (v18 != v6);
    }
  }
}

uint64_t sub_10008F65C(uint64_t a1, unint64_t a2)
{
  unint64_t v3 = a2;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  BOOL v4 = &v3;
  return *(void *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v3, (uint64_t)&unk_1007B8580, (uint64_t **)&v4)[5] + 40);
}

uint64_t sub_10008F6D8(uint64_t a1, int a2)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  if (!*((void *)off_1009F80A8 + 26)) {
    return 0;
  }
  unint64_t v3 = (void *)*((void *)off_1009F80A8 + 24);
  if (v3 == (void *)((char *)off_1009F80A8 + 200))
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = v3[5];
      if (*(unsigned __int16 *)(v5 + 84) == a2 && *(_DWORD *)(*(void *)(v5 + 40) + 20) == 7) {
        char v4 = 1;
      }
      BOOL v6 = (void *)v3[1];
      if (v6)
      {
        do
        {
          uint64_t v7 = v6;
          BOOL v6 = (void *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v7 = (void *)v3[2];
          BOOL v8 = *v7 == (void)v3;
          unint64_t v3 = v7;
        }
        while (!v8);
      }
      unint64_t v3 = v7;
    }
    while (v7 != (void *)((char *)off_1009F80A8 + 200));
  }
  return v4 & 1;
}

uint64_t sub_10008F7B4(uint64_t a1, int a2)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  if (!*((void *)off_1009F80A8 + 26)) {
    return 0;
  }
  unint64_t v3 = (void *)*((void *)off_1009F80A8 + 24);
  if (v3 == (void *)((char *)off_1009F80A8 + 200))
  {
    char v4 = 0;
  }
  else
  {
    char v4 = 0;
    do
    {
      uint64_t v5 = v3[5];
      if (*(unsigned __int16 *)(v5 + 84) == a2)
      {
        uint64_t v6 = *(void *)(v5 + 40);
        if (*(unsigned char *)(v6 + 1) || (*(_DWORD *)(v6 + 20) - 1) <= 4) {
          char v4 = 1;
        }
      }
      uint64_t v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          BOOL v8 = v7;
          uint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          BOOL v8 = (void *)v3[2];
          BOOL v9 = *v8 == (void)v3;
          unint64_t v3 = v8;
        }
        while (!v9);
      }
      unint64_t v3 = v8;
    }
    while (v8 != (void *)((char *)off_1009F80A8 + 200));
  }
  return v4 & 1;
}

BOOL sub_10008F8A0(uint64_t a1, unint64_t a2)
{
  int v2 = *(unsigned __int16 *)(sub_10008F65C(a1, a2) + 44);
  unint64_t v3 = qword_100A19E48;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v2 == 0xFFFF)
  {
    if (v4)
    {
      *(_WORD *)buf = 0;
      uint64_t v5 = "Adaptive Latency Streaming stopped";
      uint64_t v6 = buf;
      goto LABEL_6;
    }
  }
  else if (v4)
  {
    __int16 v8 = 0;
    uint64_t v5 = "Adaptive Latency Streaming started";
    uint64_t v6 = (uint8_t *)&v8;
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
  }
  return v2 != 0xFFFF;
}

uint64_t sub_10008F948(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v6 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 328))(v6))
  {
    if (!a4) {
      return 0;
    }
  }
  else
  {
    uint64_t v8 = sub_100035F54();
    char v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 384))(v8);
    uint64_t result = 0;
    if (!a4 || (v9 & 1) == 0) {
      return result;
    }
  }
  uint64_t v10 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    v12[0] = 67109376;
    v12[1] = a3;
    __int16 v13 = 1024;
    int v14 = a4;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Dynamic Latency Coex notify check LLM enter or exit curr=%d,new=%d", (uint8_t *)v12, 0xEu);
  }
  if ((a4 - 1) > 4 || (uint64_t result = 1, a3 <= 5) && a3)
  {
    if ((a4 & 0xFFFFFFFE) == 6 && a3 < 6) {
      return 2;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_10008FAB4(uint64_t a1, uint64_t a2, int a3)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  uint64_t v5 = off_1009F80A8;

  sub_100563CCC((uint64_t)v5, a2, a3);
}

uint64_t sub_10008FB20(unsigned char *a1, int a2)
{
  uint64_t v4 = sub_100035F54();
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v4 + 792))(v4, 2);
  if (result)
  {
    uint64_t v6 = sub_100035F54();
    BOOL v7 = (*(unsigned int (**)(uint64_t))(*(void *)v6 + 328))(v6)
      && a1[7]
      && !a1[6]
      && !a1[9]
      && !a1[4]
      && !a1[5];
    uint64_t v8 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v8 + 384))(v8)
      && (a1[7] || a1[8])
      && !a1[6]
      && !a1[9]
      && !a1[4]
      && !a1[5])
    {
      BOOL v7 = 1;
    }
    uint64_t v9 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 336))(v9) && a1[8] && !a1[9] && !a1[4] && !a1[5]) {
      BOOL v7 = 1;
    }
    uint64_t v10 = sub_100035F54();
    unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v10 + 792))(v10, 5) ^ 1;
    if (v7) {
      uint64_t result = v11;
    }
    else {
      uint64_t result = 0;
    }
    if (result == 1 && a2 != 0)
    {
      __int16 v13 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v14 = a1[7];
        int v15 = a1[8];
        uint64_t v16 = sub_100017768();
        int v17 = (*(uint64_t (**)(uint64_t))(*(void *)v16 + 592))(v16);
        int v18 = a1[6];
        uint64_t v19 = sub_100017768();
        int v20 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 8))(v19);
        uint64_t v21 = *(void *)sub_100035F54();
        int v22 = (*(uint64_t (**)(void))(v21 + 792))();
        v23[0] = 67110400;
        v23[1] = v14;
        __int16 v24 = 1024;
        int v25 = v15;
        __int16 v26 = 1024;
        int v27 = v17;
        __int16 v28 = 1024;
        int v29 = v18;
        __int16 v30 = 1024;
        int v31 = v20;
        __int16 v32 = 1024;
        int v33 = v22;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Adaptive Latency Spatial:%d,%d,%d,%d,%d,%d", (uint8_t *)v23, 0x26u);
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_10008FE60(uint64_t result, __int16 a2)
{
  *(_WORD *)(result + 16) = a2;
  return result;
}

void sub_10008FE68(uint64_t a1, unint64_t a2, unsigned int a3, uint64_t a4, int a5)
{
  uint64_t v10 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v10 + 792))(v10, 2)) {
    return;
  }
  unsigned int v11 = a4 ? *(unsigned __int8 *)(a4 + 6) : 0;
  int v79 = 0;
  uint64_t v12 = sub_10008FB20((unsigned char *)a1, 1);
  if (!v12) {
    return;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  __int16 v13 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v13) {
    goto LABEL_19;
  }
  int v14 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v15 = v13[4];
    BOOL v16 = v15 >= a2;
    if (v15 >= a2) {
      int v17 = v13;
    }
    else {
      int v17 = v13 + 1;
    }
    if (v16) {
      int v14 = (char *)v13;
    }
    __int16 v13 = (void *)*v17;
  }
  while (*v17);
  if (v14 == (char *)off_1009F80A8 + 200 || *((void *)v14 + 4) > a2) {
LABEL_19:
  }
    int v14 = (char *)off_1009F80A8 + 200;
  if (v14 == (char *)off_1009F80A8 + 200)
  {
    int v33 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100744B88(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    return;
  }
  unsigned int v18 = sub_100090758(v12, a2);
  uint64_t v19 = sub_1000908A0(a1, v18, &v79, 1);
  if (!v19) {
    return;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  int v20 = (char **)*((void *)off_1009F80A8 + 139);
  if (!v20) {
    goto LABEL_35;
  }
  uint64_t v21 = (char **)((char *)off_1009F80A8 + 1112);
  do
  {
    unsigned int v22 = *((unsigned __int16 *)v20 + 16);
    BOOL v23 = v22 >= v18;
    if (v22 >= v18) {
      __int16 v24 = v20;
    }
    else {
      __int16 v24 = v20 + 1;
    }
    if (v23) {
      uint64_t v21 = v20;
    }
    int v20 = (char **)*v24;
  }
  while (*v24);
  if (v21 == (char **)((char *)off_1009F80A8 + 1112) || v18 < *((unsigned __int16 *)v21 + 16)) {
LABEL_35:
  }
    uint64_t v21 = (char **)((char *)off_1009F80A8 + 1112);
  if (v21 != (char **)((char *)off_1009F80A8 + 1112)) {
    return;
  }
  uint64_t v25 = sub_10008F65C(v19, a2);
  if (*(__int16 *)(v25 + 44) == -1)
  {
    sub_100090A40(a1, a2);
    uint64_t v41 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v42 = "Adaptive Latency Reset on First Stats";
    int v43 = v41;
    uint32_t v44 = 2;
LABEL_103:
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, v42, buf, v44);
    return;
  }
  BOOL v26 = 0;
  int v27 = 0;
  int v28 = 0;
  if (a4 && (a5 & 1) == 0)
  {
    uint64_t v29 = a1 + 24 + 6 * *(int *)(a1 + 20);
    int v30 = *(_DWORD *)(a4 + 217);
    *(_WORD *)(v29 + 4) = *(_WORD *)(a4 + 221);
    *(_DWORD *)uint64_t v29 = v30;
    *(_DWORD *)(a1 + 20) = (*(_DWORD *)(a1 + 20) + 1) % 3;
    LODWORD(v29) = *(char *)(a1 + 30) + *(char *)(a1 + 24) + *(char *)(a1 + 36);
    int v27 = (__int16)v29 / 3;
    int v28 = (__int16)(*(char *)(a1 + 31) + *(char *)(a1 + 25) + *(char *)(a1 + 37)) / 3;
    BOOL v26 = (int)v29 > -240 || *(char *)(a1 + 31) + *(char *)(a1 + 25) + *(char *)(a1 + 37) > -255;
  }
  if ((char)v11 <= -70)
  {
    if (v11 <= 0xB5)
    {
      if (v11 <= 0xB0) {
        int v32 = 8;
      }
      else {
        int v32 = 6;
      }
    }
    else
    {
      int v32 = 4;
    }
  }
  else
  {
    int v32 = 0;
  }
  int v45 = *(_DWORD *)(a1 + 12);
  if (v45 == 100)
  {
    if (35 - v32 < a3)
    {
      int v78 = v28;
      unsigned int v47 = 60 - v32;
      int v48 = 3;
      goto LABEL_66;
    }
  }
  else if (v45 != 80)
  {
    int v46 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67110400;
      int v81 = v45;
      __int16 v82 = 1024;
      int v83 = v32;
      __int16 v84 = 1024;
      int v85 = (char)v11;
      __int16 v86 = 1024;
      unsigned int v87 = a3;
      __int16 v88 = 1024;
      int v89 = v79;
      __int16 v90 = 1024;
      int v91 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "Adaptive Latency wrong stats! cutoff:%d, step,%d, rssi,%u, reTx,%d, old,%d, score new, %d", buf, 0x26u);
    }
    return;
  }
  int v78 = v28;
  if (20 - v32 >= a3)
  {
    int v48 = 1;
    goto LABEL_69;
  }
  unsigned int v47 = 35 - v32;
  int v48 = 2;
LABEL_66:
  if (v47 <= a3)
  {
    uint64_t v25 = sub_10008F65C(v25, a2);
    ++*(_WORD *)(v25 + 46);
  }
LABEL_69:
  if (a5) {
    goto LABEL_70;
  }
  BOOL v50 = (char)v11 < -74 && v26;
  if (v50 && (char)v11 >= -84)
  {
    int v51 = *(_DWORD *)(a1 + 12);
    if (v51 == 80)
    {
      int v48 = 6;
    }
    else if (v51 == 100)
    {
      int v48 = 3;
    }
    uint64_t v52 = sub_10008F65C(v25, a2);
    *(_WORD *)(v52 + 46) = 0;
    uint64_t v25 = sub_10008F65C(v52, a2);
    *(_WORD *)(v25 + 44) = 0;
  }
  uint64_t v25 = sub_10008F65C(v25, a2);
  BOOL v53 = (char)v11 < -79 && v26;
  BOOL v54 = (char)v11 > -85 || v26;
  if (*(__int16 *)(v25 + 46) > 2 || v53 || !v54)
  {
LABEL_70:
    uint64_t v49 = sub_10008F65C(v25, a2);
    *(_WORD *)(v49 + 46) = 0;
    *(_WORD *)(sub_10008F65C(v49, a2) + 44) = 0;
    int v48 = 6;
  }
  size_t v55 = qword_100A19E48;
  uint64_t v56 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v56)
  {
    int v57 = *(_DWORD *)(a1 + 12);
    int v77 = v48;
    int v58 = v79;
    uint64_t v59 = sub_10008F65C(v56, a2);
    int v76 = v27;
    int v60 = *(__int16 *)(v59 + 46);
    int v61 = *(__int16 *)(sub_10008F65C(v59, a2) + 44);
    *(_DWORD *)buf = 67111424;
    int v81 = v57;
    __int16 v82 = 1024;
    int v83 = v26;
    __int16 v84 = 1024;
    int v85 = v58;
    int v48 = v77;
    __int16 v86 = 1024;
    unsigned int v87 = v77;
    __int16 v88 = 1024;
    int v89 = v60;
    __int16 v90 = 1024;
    int v91 = v61;
    __int16 v92 = 1024;
    int v93 = a5;
    __int16 v94 = 1024;
    int v95 = v76;
    __int16 v96 = 1024;
    int v97 = v78;
    __int16 v98 = 1024;
    int v99 = (char)v11;
    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Adaptive Latency cutoff:%d,congestRF:%d,old:%d,new:%d,cnt:%d,%d,fl:%u,nfavg:%d,%d,rssi:%d", buf, 0x3Eu);
  }
  if (!v79 || v79 == v48)
  {
    uint64_t v67 = sub_10008F65C(v56, a2);
    *(_WORD *)(v67 + 44) = 0;
    uint64_t v68 = sub_10008F65C(v67, a2);
    *(_WORD *)(v68 + 46) = 0;
    *(_WORD *)(a1 + 16) = sub_100090A98(v68, v48, a2);
    uint64_t v66 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)buf = 67109120;
    int v81 = v48;
    uint64_t v42 = "Adaptive Latency stay same :%d";
    goto LABEL_102;
  }
  if (v48 == 6 || v79 == 6)
  {
    if (v79 == 6)
    {
      if ((uint64_t v56 = sub_10008F65C(v56, a2), ++*(_WORD *)(v56 + 44), (char)v11 >= -59) && v48 == 1
        || (uint64_t v56 = sub_10008F65C(v56, a2), *(__int16 *)(v56 + 44) >= 3))
      {
        *(_WORD *)(a1 + 16) = sub_100090A98(v56, v48, a2);
        sub_100090AFC(a1, v18, v48);
        uint64_t v70 = sub_10008F65C(v69, a2);
        *(_WORD *)(v70 + 44) = 0;
        *(_WORD *)(sub_10008F65C(v70, a2) + 46) = 0;
        __int16 v71 = qword_100A19E48;
        uint64_t v56 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
        if (v56)
        {
          *(_DWORD *)buf = 67109120;
          int v81 = v48;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "Adaptive Latency exit flush :%d", buf, 8u);
        }
      }
    }
    if (v48 == 6)
    {
      *(_WORD *)(a1 + 16) = sub_100090A98(v56, 6, a2);
      sub_100090AFC(a1, v18, 6);
      uint64_t v73 = sub_10008F65C(v72, a2);
      *(_WORD *)(v73 + 44) = 0;
      *(_WORD *)(sub_10008F65C(v73, a2) + 46) = 0;
      uint64_t v66 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v81 = 6;
        uint64_t v42 = "Adaptive Latency enter flush :%d";
        goto LABEL_102;
      }
    }
  }
  else if (v79 <= v48)
  {
    if (v79 < v48)
    {
      *(_WORD *)(a1 + 16) = sub_100090A98(v56, v48, a2);
      sub_100090AFC(a1, v18, v48);
      uint64_t v75 = sub_10008F65C(v74, a2);
      *(_WORD *)(v75 + 44) = 0;
      *(_WORD *)(sub_10008F65C(v75, a2) + 46) = 0;
      uint64_t v66 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v81 = v48;
        uint64_t v42 = "Adaptive Latency downgrade to :%d";
        goto LABEL_102;
      }
    }
  }
  else
  {
    uint64_t v62 = sub_10008F65C(v56, a2);
    ++*(_WORD *)(v62 + 44);
    uint64_t v63 = sub_10008F65C(v62, a2);
    if (*(__int16 *)(v63 + 44) >= 3)
    {
      *(_WORD *)(a1 + 16) = sub_100090A98(v63, v48, a2);
      sub_100090AFC(a1, v18, v48);
      uint64_t v65 = sub_10008F65C(v64, a2);
      *(_WORD *)(v65 + 44) = 0;
      *(_WORD *)(sub_10008F65C(v65, a2) + 46) = 0;
      uint64_t v66 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        int v81 = v48;
        uint64_t v42 = "Adaptive Latency upgrade to :%d";
LABEL_102:
        int v43 = v66;
        uint32_t v44 = 8;
        goto LABEL_103;
      }
    }
  }
}

uint64_t sub_100090758(uint64_t a1, unint64_t a2)
{
  unint64_t v9 = a2;
  if (!a2) {
    return 0;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  unint64_t v3 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v3) {
    goto LABEL_15;
  }
  uint64_t v4 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v5 = v3[4];
    BOOL v6 = v5 >= a2;
    if (v5 >= a2) {
      BOOL v7 = v3;
    }
    else {
      BOOL v7 = v3 + 1;
    }
    if (v6) {
      uint64_t v4 = (char *)v3;
    }
    unint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v4 == (char *)off_1009F80A8 + 200 || *((void *)v4 + 4) > a2) {
LABEL_15:
  }
    uint64_t v4 = (char *)off_1009F80A8 + 200;
  if (v4 == (char *)off_1009F80A8 + 200) {
    return 0;
  }
  uint64_t v10 = &v9;
  if (!*(_WORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v9, (uint64_t)&unk_1007B8580, (uint64_t **)&v10)[5] + 84)) {
    return 0;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  uint64_t v10 = &v9;
  return *(unsigned __int16 *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v9, (uint64_t)&unk_1007B8580, (uint64_t **)&v10)[5]+ 84);
}

uint64_t sub_1000908A0(uint64_t a1, int a2, _DWORD *a3, int a4)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  if (!*((void *)off_1009F80A8 + 26)) {
    return 0;
  }
  BOOL v7 = (void *)*((void *)off_1009F80A8 + 24);
  if (v7 == (void *)((char *)off_1009F80A8 + 200)) {
    return 0;
  }
  while (1)
  {
    uint64_t v8 = v7[5];
    if (*(unsigned __int16 *)(v8 + 84) == a2) {
      break;
    }
    unint64_t v9 = (void *)v7[1];
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        unint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)v7[2];
        BOOL v11 = *v10 == (void)v7;
        BOOL v7 = v10;
      }
      while (!v11);
    }
    BOOL v7 = v10;
    if (v10 == (void *)((char *)off_1009F80A8 + 200)) {
      return 0;
    }
  }
  unint64_t v12 = v7[4];
  if (v12)
  {
    if (sub_100092270(a1, v12)) {
      return 0;
    }
  }
  __int16 v13 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = *(void *)(v8 + 40);
    int v15 = *(_DWORD *)(v14 + 20);
    LODWORD(v14) = *(unsigned __int8 *)(v14 + 1);
    v17[0] = 67109376;
    v17[1] = v15;
    __int16 v18 = 1024;
    int v19 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Adaptive Latency mode:%d, inTransition:%d", (uint8_t *)v17, 0xEu);
  }
  if (a4 && *(unsigned char *)(*(void *)(v8 + 40) + 1)) {
    return 0;
  }
  if (a3) {
    *a3 = *(_DWORD *)(*(void *)(v8 + 40) + 20);
  }
  return 1;
}

uint64_t sub_100090A40(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_10008F65C(a1, a2);
  *(_WORD *)(v4 + 44) = 0;
  uint64_t result = sub_10008F65C(v4, a2);
  uint64_t v6 = 0;
  *(_WORD *)(result + 46) = 0;
  *(_DWORD *)(a1 + 20) = 0;
  do
  {
    *(_WORD *)(a1 + v6 + 24) = -25444;
    v6 += 6;
  }
  while (v6 != 18);
  return result;
}

uint64_t sub_100090A98(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_10047B7A8(a3, (_DWORD *)&v6 + 1, &v6, (_DWORD *)&v5 + 1, &v5);
  if ((a2 - 1) > 9) {
    return 150;
  }
  else {
    return dword_1007B8584[a2 - 1];
  }
}

void sub_100090AFC(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_10008DBD8(a1, a2);
  uint64_t v27 = v6;
  if (v6)
  {
    unint64_t v7 = v6;
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    uint64_t v8 = (void *)*((void *)off_1009F80A8 + 25);
    if (!v8) {
      goto LABEL_15;
    }
    unint64_t v9 = (char *)off_1009F80A8 + 200;
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= v7;
      if (v10 >= v7) {
        unint64_t v12 = v8;
      }
      else {
        unint64_t v12 = v8 + 1;
      }
      if (v11) {
        unint64_t v9 = (char *)v8;
      }
      uint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 == (char *)off_1009F80A8 + 200 || v7 < *((void *)v9 + 4)) {
LABEL_15:
    }
      unint64_t v9 = (char *)off_1009F80A8 + 200;
    if (v9 != (char *)off_1009F80A8 + 200)
    {
      __int16 v13 = qword_100A19E48;
      BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        int v15 = *(_DWORD *)(sub_10008F65C(v14, v7) + 20);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v15;
        __int16 v29 = 1024;
        int v30 = a3;
        __int16 v31 = 1024;
        int v32 = a2;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Dynamic Latency trying to change jitter buffer from = 0x%x to = 0x%x on handle = %x", buf, 0x14u);
      }
      uint64_t v16 = sub_10008F65C(v14, v7);
      uint64_t v18 = sub_10008F948(v16, v17, *(_DWORD *)(v16 + 20), a3);
      sub_10008FAB4(v18, v7, v18);
      *(_DWORD *)(sub_10008F65C(v19, v7) + 20) = a3;
      uint64_t v20 = *(void *)sub_100035F54();
      uint64_t v21 = (*(uint64_t (**)(void))(v20 + 792))();
      if (v21)
      {
        __int16 v22 = sub_100090A98(v21, a3, v7);
        sub_100093BDC(a1, v7, v22);
      }
      *(unsigned char *)(sub_10008F65C(v21, v7) + 1) = 1;
      uint64_t v23 = sub_1004AFB34();
      v24[0] = _NSConcreteStackBlock;
      v24[1] = 3221225472;
      void v24[2] = sub_100093E14;
      v24[3] = &unk_100998880;
      __int16 v26 = a2;
      int v25 = a3;
      sub_100013018(v23, v24);
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      *(void *)buf = &v27;
      if (*(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, (unint64_t *)&v27, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 76) == 2)
      {
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        sub_10056BC7C((uint64_t *)off_1009F80A8, v27);
      }
    }
  }
}

uint64_t sub_100090DF0(uint64_t a1, int a2)
{
  if (a2 == 300) {
    int v2 = 7;
  }
  else {
    int v2 = 6;
  }
  if (a2 == 100) {
    unsigned int v3 = 3;
  }
  else {
    unsigned int v3 = v2;
  }
  if (a2 == 80) {
    int v4 = 2;
  }
  else {
    int v4 = 6;
  }
  if (a2 == 60) {
    int v5 = 1;
  }
  else {
    int v5 = v4;
  }
  if (a2 <= 99) {
    unsigned int v3 = v5;
  }
  if (a2 == 30) {
    unsigned int v6 = 10;
  }
  else {
    unsigned int v6 = 6;
  }
  if (a2 == 5) {
    unsigned int v6 = 5;
  }
  if (a2 == 4) {
    unsigned int v6 = 4;
  }
  if (a2 <= 59) {
    return v6;
  }
  else {
    return v3;
  }
}

void sub_100090E5C(uint64_t a1, int a2, __int16 a3)
{
  unsigned int v6 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v13 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Dynamic Latency: Delay Latency State Decision by %d ", buf, 8u);
  }
  dispatch_time_t v7 = dispatch_time(0, 1000000 * a2);
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  uint64_t v8 = *((void *)off_1009F80A8 + 32);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_100093D04;
  v9[3] = &unk_100997570;
  v9[4] = a1;
  __int16 v10 = a3;
  __int16 v11 = a3;
  dispatch_after(v7, v8, v9);
}

uint64_t sub_100090FB8(uint64_t a1, int a2)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  unsigned int v3 = (void *)*((void *)off_1009F80A8 + 24);
  if (v3 == (void *)((char *)off_1009F80A8 + 200)) {
    return 0;
  }
  while (1)
  {
    uint64_t v4 = v3[5];
    if (*(unsigned __int16 *)(v4 + 84) == a2) {
      break;
    }
    int v5 = (void *)v3[1];
    if (v5)
    {
      do
      {
        unsigned int v6 = v5;
        int v5 = (void *)*v5;
      }
      while (v5);
    }
    else
    {
      do
      {
        unsigned int v6 = (void *)v3[2];
        BOOL v7 = *v6 == (void)v3;
        unsigned int v3 = v6;
      }
      while (!v7);
    }
    unsigned int v3 = v6;
    if (v6 == (void *)((char *)off_1009F80A8 + 200)) {
      return 0;
    }
  }
  if (!*(void *)(*(void *)(v4 + 40) + 8)) {
    return 0;
  }
  uint64_t v8 = off_1009F80A8;
  uint64_t v9 = mach_absolute_time();
  float v10 = sub_100568CF4((uint64_t)v8, v9 - *(void *)(*(void *)(v4 + 40) + 8), 1);
  unsigned int v11 = (float)(1000.0 - v10);
  if (v11 <= 0xA) {
    unsigned int v11 = 10;
  }
  if (v10 >= 1000.0) {
    return 0;
  }
  else {
    return v11;
  }
}

void sub_1000910BC(uint64_t a1, unint64_t a2, unsigned int a3)
{
  int v6 = _os_feature_enabled_impl();
  if (!a2 || !v6) {
    goto LABEL_9;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  if (sub_10007DD8C(*((void *)off_1009F80A8 + 28), a2))
  {
    sub_100092650(a1, a2, a3);
  }
  else
  {
LABEL_9:
    BOOL v7 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100744BC0(v7, v8, v9, v10, v11, v12, v13, v14);
    }
  }
}

BOOL sub_10009119C(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_100035F54();
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v3 + 792))(v3, 2);
  int v5 = v4;
  int v6 = *(_DWORD *)(sub_10008F65C(v4, a2) + 20);
  BOOL result = v6 == 1;
  if (v5) {
    BOOL result = v6 == 1
  }
          || (uint64_t v8 = sub_10008F65C(result, a2), *(_DWORD *)(v8 + 20) == 2)
          || (uint64_t v9 = sub_10008F65C(v8, a2), *(_DWORD *)(v9 + 20) == 3)
          || (uint64_t v10 = sub_10008F65C(v9, a2), *(_DWORD *)(v10 + 20) == 4)
          || *(_DWORD *)(sub_10008F65C(v10, a2) + 20) == 5;
  return result;
}

void sub_10009126C(unsigned char *a1, unint64_t a2, unsigned int a3)
{
  unint64_t v46 = a2;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  int v6 = (char **)*((void *)off_1009F80A8 + 139);
  if (!v6) {
    goto LABEL_14;
  }
  BOOL v7 = (char **)((char *)off_1009F80A8 + 1112);
  do
  {
    unsigned int v8 = *((unsigned __int16 *)v6 + 16);
    BOOL v9 = v8 >= a3;
    if (v8 >= a3) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      BOOL v7 = v6;
    }
    int v6 = (char **)*v10;
  }
  while (*v10);
  if (v7 == (char **)((char *)off_1009F80A8 + 1112) || *((unsigned __int16 *)v7 + 16) > a3) {
LABEL_14:
  }
    BOOL v7 = (char **)((char *)off_1009F80A8 + 1112);
  uint64_t v11 = (char **)((char *)off_1009F80A8 + 1112);
  if (v7 == (char **)((char *)off_1009F80A8 + 1112))
  {
    if (a1[6] || a1[9])
    {
      int v12 = 6;
    }
    else if (*a1)
    {
      if (a1[1] || a1[3] || a1[5] || a1[2] || a1[8] || a1[7])
      {
        int v12 = 1;
      }
      else if (a1[4])
      {
        int v12 = 1;
      }
      else
      {
        int v12 = 6;
      }
    }
    else
    {
      int v12 = 7;
    }
  }
  else
  {
    int v12 = 0;
  }
  uint64_t v13 = sub_10008DBD8((uint64_t)a1, a3);
  if (v13 | a2)
  {
    if (!v13 && a2)
    {
      uint64_t v14 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a3;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Dynamic Latency creating AudioLinkManager device for handle %d, ", buf, 8u);
      }
      operator new();
    }
    if (a2)
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      int v15 = (void *)*((void *)off_1009F80A8 + 25);
      if (!v15) {
        goto LABEL_40;
      }
      uint64_t v16 = (char *)off_1009F80A8 + 200;
      do
      {
        unint64_t v17 = v15[4];
        BOOL v18 = v17 >= v46;
        if (v17 >= v46) {
          uint64_t v19 = v15;
        }
        else {
          uint64_t v19 = v15 + 1;
        }
        if (v18) {
          uint64_t v16 = (char *)v15;
        }
        int v15 = (void *)*v19;
      }
      while (*v19);
      if (v16 == (char *)off_1009F80A8 + 200 || v46 < *((void *)v16 + 4)) {
LABEL_40:
      }
        uint64_t v16 = (char *)off_1009F80A8 + 200;
      if (v16 != (char *)off_1009F80A8 + 200)
      {
        uint64_t v20 = sub_10008FB20(a1, 0);
        if (v20)
        {
          *(unsigned char *)sub_10008F65C(v20, v46) = 1;
        }
        else
        {
          uint64_t v22 = sub_100035F54();
          uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 792))(v22, 5);
          if (v23)
          {
            *(unsigned char *)sub_10008F65C(v23, v46) = 0;
            int v12 = 1;
LABEL_49:
            __int16 v24 = qword_100A19E48;
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
            {
              int v25 = a1[1];
              unsigned int v26 = a1[3];
              int v27 = a1[5];
              int v28 = a1[2];
              int v29 = a1[8];
              int v30 = a1[7];
              int v31 = a1[6];
              int v32 = a1[4];
              *(_DWORD *)buf = 67111168;
              *(_DWORD *)&uint8_t buf[4] = v25;
              __int16 v48 = 1024;
              unsigned int v49 = v26;
              __int16 v50 = 1024;
              int v51 = v27;
              __int16 v52 = 1024;
              int v53 = v28;
              __int16 v54 = 1024;
              int v55 = v29;
              __int16 v56 = 1024;
              int v57 = v30;
              __int16 v58 = 1024;
              int v59 = v31;
              __int16 v60 = 1024;
              BOOL v61 = v7 != v11;
              __int16 v62 = 1024;
              int v63 = v32;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Dynamic Latency Non streaming Trigger fKeyboardOn = %d, fVoiceOverOn=%d, fGameModeOn=%d, fGarageBandOn=%d, fSpatialVideoOn=%d, fSpatialMusicOn=%d, fExpanseOn =%d, aggregated=%d fConsoleGameModeOn=%d", buf, 0x38u);
              __int16 v24 = qword_100A19E48;
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 67109376;
              *(_DWORD *)&uint8_t buf[4] = v12;
              __int16 v48 = 1024;
              unsigned int v49 = a3;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Dynamic Latency trying to initialize jitter buffer to = 0x%x on handle = %x", buf, 0xEu);
            }
            uint64_t v33 = sub_100035F54();
            uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v33 + 792))(v33, 2);
            if (v34)
            {
              uint64_t v35 = v46;
              __int16 v36 = sub_100090A98(v34, v12, v46);
              sub_100093BDC((uint64_t)a1, v35, v36);
            }
            if (qword_1009F80B0 != -1) {
              dispatch_once(&qword_1009F80B0, &stru_1009988E0);
            }
            *(void *)buf = &v46;
            uint64_t v37 = sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v46, (uint64_t)&unk_1007B8580, (uint64_t **)buf);
            if (v37[5])
            {
              uint64_t v38 = v46;
              uint64_t v39 = sub_10008F65C((uint64_t)v37, v46);
              uint64_t v41 = sub_10008F948(v39, v40, *(_DWORD *)(v39 + 20), v12);
              sub_10008FAB4(v41, v38, v41);
            }
            uint64_t v42 = sub_1004AFB34();
            v43[0] = _NSConcreteStackBlock;
            v43[1] = 3221225472;
            _OWORD v43[2] = sub_100093C9C;
            v43[3] = &unk_100998880;
            __int16 v45 = a3;
            int v44 = v12;
            sub_100013018(v42, v43);
            return;
          }
        }
        if (v7 != v11) {
          return;
        }
        goto LABEL_49;
      }
    }
  }
  else
  {
    uint64_t v21 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Dynamic Latency no valid device object passed / found", buf, 2u);
    }
  }
}

void sub_100091848()
{
}

void sub_100091874(unint64_t a1, unint64_t a2)
{
  unint64_t v25 = a2;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  *(void *)buf = &v25;
  uint64_t v3 = sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v25, (uint64_t)&unk_1007B8580, (uint64_t **)buf);
  unsigned int v4 = *(unsigned __int16 *)(v3[5] + 84);
  int v5 = *(_DWORD *)(sub_10008F65C((uint64_t)v3, v25) + 20);
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  *(void *)buf = &v25;
  int v6 = *(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v25, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5] + 76);
  if (v6 == 2)
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    *(void *)buf = &v25;
    if (**(unsigned __int8 **)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v25, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 48) == 240)goto LABEL_12; {
    if (qword_1009F80B0 != -1)
    }
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    *(void *)buf = &v25;
    if (**(unsigned __int8 **)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v25, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]+ 48) == 241)
    {
LABEL_12:
      sub_1000910BC(a1, v25, v4);
      return;
    }
  }
  uint64_t v7 = sub_100035F54();
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 792))(v7, 5);
  if (v8)
  {
    if (v4)
    {
      *(unsigned char *)sub_10008F65C(v8, v25) = 0;
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      *(void *)buf = &v25;
      if (*(__int16 *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v25, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]
                      + 62) == -1
        || v5 != 1)
      {
        if (v6 == 2)
        {
          if (qword_1009F8418 != -1) {
            dispatch_once(&qword_1009F8418, &stru_1009988C0);
          }
          if (sub_1004190FC(qword_1009F8410, v4) <= 7)
          {
            *(unsigned char *)a1 = 1;
            BOOL v9 = qword_100A19E48;
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Constant Low Latency delay latency decision", buf, 2u);
            }
LABEL_51:
            sub_100090E5C(a1, 150, v4);
            return;
          }
        }
        uint64_t v21 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Constant Low Latency overwrite latency with 60", buf, 2u);
        }
        goto LABEL_57;
      }
    }
  }
  else
  {
    uint64_t v10 = sub_100035F54();
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 328))(v10);
    if (v11 && (uint64_t v11 = sub_10008FB20((unsigned char *)a1, 0), v11))
    {
      int v12 = *(unsigned __int16 *)(a1 + 16);
      uint64_t v13 = qword_100A19E48;
      BOOL v14 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v14)
      {
        uint64_t v15 = sub_100035F54();
        int v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 792))(v15, 5);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v12;
        __int16 v27 = 1024;
        int v28 = v5;
        __int16 v29 = 1024;
        int v30 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "check default latency %d, %d, %d", buf, 0x14u);
      }
      if (v4)
      {
        *(unsigned char *)sub_10008F65C(v14, v25) = 1;
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        *(void *)buf = &v25;
        if (*(__int16 *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v25, (uint64_t)&unk_1007B8580, (uint64_t **)buf)[5]
                        + 62) == -1
          || (v12 != 60 || v5 != 1)
          && (v12 != 80 || v5 != 2)
          && (v12 != 100 || v5 != 3)
          && (v12 != 120 || v5 != 4)
          && (v12 != 140 || v5 != 5)
          && (v12 != 150 || v5 != 6))
        {
          unint64_t v17 = qword_100A19E48;
          uint64_t v18 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
          if (v18)
          {
            int v19 = *(unsigned __int8 *)(sub_10008F65C(v18, v25) + 1);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v12;
            __int16 v27 = 1024;
            int v28 = v19;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Adaptive Latency overwritting with LLM JBL %d, tran:%d", buf, 0xEu);
          }
          if (v6 == 2)
          {
            if (qword_1009F8418 != -1) {
              dispatch_once(&qword_1009F8418, &stru_1009988C0);
            }
            uint64_t v18 = sub_1004190FC(qword_1009F8410, v4);
            if (v18 <= 7) {
              goto LABEL_51;
            }
          }
          if (!*(unsigned char *)(sub_10008F65C(v18, v25) + 1))
          {
            if (v12 <= 99)
            {
              if (v12 == 60)
              {
LABEL_57:
                uint64_t v22 = a1;
                int v23 = v4;
                int v24 = 1;
LABEL_58:
                sub_100090AFC(v22, v23, v24);
                return;
              }
              if (v12 == 80)
              {
                uint64_t v22 = a1;
                int v23 = v4;
                int v24 = 2;
                goto LABEL_58;
              }
            }
            else
            {
              switch(v12)
              {
                case 100:
                  uint64_t v22 = a1;
                  int v23 = v4;
                  int v24 = 3;
                  goto LABEL_58;
                case 120:
                  uint64_t v22 = a1;
                  int v23 = v4;
                  int v24 = 4;
                  goto LABEL_58;
                case 140:
                  uint64_t v22 = a1;
                  int v23 = v4;
                  int v24 = 5;
                  goto LABEL_58;
              }
            }
          }
        }
      }
    }
    else if (v4)
    {
      uint64_t v20 = (unsigned char *)sub_10008F65C(v11, v25);
      if (!*v20)
      {
        *(unsigned char *)sub_10008F65C((uint64_t)v20, v25) = 1;
        sub_10008CD0C(a1, v25, v4);
      }
    }
  }
}

uint64_t sub_100091F40(uint64_t a1, int a2)
{
  uint64_t result = sub_10008DBD8(a1, a2);
  if (result)
  {
    unint64_t v3 = result;
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    unsigned int v4 = (void *)*((void *)off_1009F80A8 + 25);
    if (!v4) {
      goto LABEL_15;
    }
    int v5 = (char *)off_1009F80A8 + 200;
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= v3;
      if (v6 >= v3) {
        uint64_t v8 = v4;
      }
      else {
        uint64_t v8 = v4 + 1;
      }
      if (v7) {
        int v5 = (char *)v4;
      }
      unsigned int v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 == (char *)off_1009F80A8 + 200 || v3 < *((void *)v5 + 4)) {
LABEL_15:
    }
      int v5 = (char *)off_1009F80A8 + 200;
    return v5 != (char *)off_1009F80A8 + 200 && *(unsigned char *)(sub_10008F65C(result, v3) + 2) != 0;
  }
  return result;
}

uint64_t sub_100092004(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = 0;
  BOOL v9 = &v8;
  uint64_t v10 = 0x2020000000;
  uint64_t v11 = 0;
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  unsigned int v4 = *((void *)off_1009F80A8 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000920EC;
  block[3] = &unk_100998860;
  void block[5] = a1;
  void block[6] = a2;
  void block[4] = &v8;
  dispatch_sync(v4, block);
  uint64_t v5 = v9[3];
  _Block_object_dispose(&v8, 8);
  return v5;
}

void sub_1000920EC(uint64_t a1)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  int v2 = (char *)*((void *)off_1009F80A8 + 24);
  unint64_t v3 = (char *)off_1009F80A8 + 200;
  if (v2 != (char *)off_1009F80A8 + 200)
  {
    do
    {
      uint64_t v4 = *((void *)v2 + 5);
      if (*(_DWORD *)(v4 + 76) == 2)
      {
        uint64_t v5 = *(void *)(v4 + 40);
        if (*(unsigned char *)(v5 + 2))
        {
          uint64_t v6 = *((void *)v2 + 4);
          int v7 = *(unsigned __int16 *)(v5 + 16);
          **(_WORD **)(a1 + 4_Block_object_dispose(&STACK[0x338], 8) = v7;
          uint64_t v8 = qword_100A19E48;
          if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 67109120;
            int v13 = v7;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Returning currentJitterBuffer %u", buf, 8u);
          }
          *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v6;
        }
      }
      BOOL v9 = (char *)*((void *)v2 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          BOOL v9 = *(char **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (char *)*((void *)v2 + 2);
          BOOL v11 = *(void *)v10 == (void)v2;
          int v2 = v10;
        }
        while (!v11);
      }
      int v2 = v10;
    }
    while (v10 != v3);
  }
}

BOOL sub_100092270(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_10008F65C(a1, a2);
  BOOL result = 0;
  if (v3)
  {
    uint64_t v4 = sub_10008F65C(v3, a2);
    if (*(int *)(v4 + 24) >= 4 && *(int *)(sub_10008F65C(v4, a2) + 24) < 14) {
      return 1;
    }
  }
  return result;
}

void sub_1000922CC(unsigned char *a1, unint64_t a2, unsigned int a3)
{
  if (!a2) {
    goto LABEL_24;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  uint64_t v6 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v6) {
    goto LABEL_15;
  }
  int v7 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      int v7 = (char *)v6;
    }
    uint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_1009F80A8 + 200 || *((void *)v7 + 4) > a2) {
LABEL_15:
  }
    int v7 = (char *)off_1009F80A8 + 200;
  if (v7 == (char *)off_1009F80A8 + 200)
  {
LABEL_24:
    int v16 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100744BF8(v16, v17, v18, v19, v20, v21, v22, v23);
    }
  }
  else if (!a1[4] && !a1[5] && !sub_100092270((uint64_t)a1, a2))
  {
    if (sub_10008FB20(a1, 0))
    {
      uint64_t v11 = sub_100035F54();
      uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 328))(v11);
      if (v12)
      {
        uint64_t v13 = sub_10008F65C(v12, a2);
        *(_WORD *)(v13 + 50) = a3;
        if (a3 <= 0x32)
        {
          __int16 v14 = sub_100090758(v13, a2);
          uint64_t v15 = sub_1004AFB34();
          v24[0] = _NSConcreteStackBlock;
          v24[1] = 3221225472;
          void v24[2] = sub_10009248C;
          v24[3] = &unk_100998300;
          __int16 v25 = a3;
          __int16 v26 = v14;
          sub_100013018(v15, v24);
        }
      }
    }
  }
}

void sub_10009248C(uint64_t a1)
{
  int v2 = qword_100A19E48;
  if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
    sub_100744C30(a1, v2);
  }
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009988C0);
  }
  sub_100418FB4(qword_1009F8410, *(unsigned __int16 *)(a1 + 34), 0x28u);
}

void sub_100092514(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v9 = a2;
  if ((a3 & 1) == 0)
  {
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    uint64_t v4 = (void *)*((void *)off_1009F80A8 + 25);
    if (!v4) {
      goto LABEL_15;
    }
    uint64_t v5 = (char *)off_1009F80A8 + 200;
    do
    {
      unint64_t v6 = v4[4];
      BOOL v7 = v6 >= a2;
      if (v6 >= a2) {
        unint64_t v8 = v4;
      }
      else {
        unint64_t v8 = v4 + 1;
      }
      if (v7) {
        uint64_t v5 = (char *)v4;
      }
      uint64_t v4 = (void *)*v8;
    }
    while (*v8);
    if (v5 == (char *)off_1009F80A8 + 200 || *((void *)v5 + 4) > a2) {
LABEL_15:
    }
      uint64_t v5 = (char *)off_1009F80A8 + 200;
    if (v5 != (char *)off_1009F80A8 + 200)
    {
      uint64_t v10 = &v9;
      *(unsigned char *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v9, (uint64_t)&unk_1007B8580, (uint64_t **)&v10)[5] + 72) = 0;
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      uint64_t v10 = &v9;
      *(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v9, (uint64_t)&unk_1007B8580, (uint64_t **)&v10)[5] + 76) = 0;
    }
  }
}

void sub_100092650(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v38 = a2;
  if (!a2) {
    goto LABEL_25;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  unint64_t v6 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v6) {
    goto LABEL_15;
  }
  BOOL v7 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v8 = v6[4];
    BOOL v9 = v8 >= a2;
    if (v8 >= a2) {
      uint64_t v10 = v6;
    }
    else {
      uint64_t v10 = v6 + 1;
    }
    if (v9) {
      BOOL v7 = (char *)v6;
    }
    unint64_t v6 = (void *)*v10;
  }
  while (*v10);
  if (v7 == (char *)off_1009F80A8 + 200 || *((void *)v7 + 4) > a2) {
LABEL_15:
  }
    BOOL v7 = (char *)off_1009F80A8 + 200;
  if (v7 == (char *)off_1009F80A8 + 200)
  {
LABEL_25:
    uint64_t v14 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)buf = 0;
    uint64_t v15 = "Low Latency Game, LatencyHubDevice object doesn't exist";
    int v16 = v14;
    uint32_t v17 = 2;
    goto LABEL_27;
  }
  if (*(unsigned char *)(sub_10008F65C(a1, a2) + 1)) {
    goto LABEL_21;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  BOOL v11 = sub_10056A3FC((uint64_t)off_1009F80A8);
  if (v11)
  {
LABEL_21:
    uint64_t v12 = a1;
    int v13 = 1000;
LABEL_22:
    sub_100090E5C(v12, v13, a3);
    return;
  }
  int v13 = sub_100090FB8(v11, a3);
  if (v13)
  {
    uint64_t v12 = a1;
    goto LABEL_22;
  }
  uint64_t v18 = qword_100A19E48;
  BOOL v19 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v19)
  {
    uint64_t v20 = sub_10008F65C(v19, a2);
    int v21 = *(_DWORD *)(v20 + 24);
    int v22 = *(_DWORD *)(sub_10008F65C(v20, a2) + 20);
    *(_DWORD *)buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v21;
    __int16 v40 = 1024;
    int v41 = v22;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "Low Latency Game, decideLowLatencyGameStateTransition %d, %d", buf, 0xEu);
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  *(void *)buf = &v38;
  uint64_t v23 = (uint64_t)sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v38, (uint64_t)&unk_1007B8580, (uint64_t **)buf);
  if (*(_DWORD *)(*(void *)(v23 + 40) + 76) == 2)
  {
    if (qword_1009F8418 != -1) {
      dispatch_once(&qword_1009F8418, &stru_1009988C0);
    }
    uint64_t v23 = sub_1004190FC(qword_1009F8410, a3);
    if (v23 <= 7)
    {
      int v24 = qword_100A19E48;
      uint64_t v25 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Low Latency Game, Sink JBL not filled, wait 150ms", buf, 2u);
      }
      char v26 = 0;
      int v27 = 0;
      char v28 = 1;
      int v29 = 150;
      goto LABEL_62;
    }
  }
  uint64_t v30 = sub_10008F65C(v23, v38);
  if (*(_DWORD *)(v30 + 20) != 1
    && (uint64_t v30 = sub_10008F65C(v30, v38), *(_DWORD *)(v30 + 20) != 2)
    && (uint64_t v30 = sub_10008F65C(v30, v38), *(_DWORD *)(v30 + 20) != 3)
    || (uint64_t v30 = sub_10008F65C(v30, v38), *(_DWORD *)(v30 + 24) != 4))
  {
    if (*(unsigned char *)(a1 + 5)
      || *(unsigned char *)(a1 + 4)
      || (uint64_t v30 = sub_10008F65C(v30, v38), *(_DWORD *)(v30 + 24) != 7)
      || (uint64_t v30 = sub_10008F65C(v30, v38), *(_DWORD *)(v30 + 20) != 10))
    {
      uint64_t v25 = sub_10008F65C(v30, v38);
      if (*(_DWORD *)(v25 + 24) != 7 || (uint64_t v25 = sub_10008F65C(v25, v38), *(_DWORD *)(v25 + 20) != 10))
      {
        int v29 = 0;
        int v27 = 0;
        char v26 = 1;
        char v28 = 1;
        goto LABEL_62;
      }
      int v32 = qword_100A19E48;
      uint64_t v25 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        *(_WORD *)buf = 0;
        uint64_t v33 = "Low Latency Game, Jitter T -> 60ms";
        goto LABEL_59;
      }
    }
    else
    {
      int v32 = qword_100A19E48;
      uint64_t v25 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v25)
      {
        *(_WORD *)buf = 0;
        uint64_t v33 = "Low Latency Game, Jitter -> 60ms";
LABEL_59:
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, v33, buf, 2u);
      }
    }
    int v29 = 0;
    char v28 = 0;
    char v26 = 1;
    int v27 = 1;
    goto LABEL_62;
  }
  int v31 = qword_100A19E48;
  uint64_t v25 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
  if (v25)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "Low Latency Game, Jitter -> 30ms", buf, 2u);
  }
  int v29 = 0;
  char v28 = 0;
  int v27 = 10;
  char v26 = 1;
LABEL_62:
  if (*(_DWORD *)(sub_10008F65C(v25, v38) + 20) == v27)
  {
    uint64_t v34 = qword_100A19E48;
    if (!os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = 30;
    uint64_t v15 = "Low Latency Game, Latency is already set to %d";
    int v16 = v34;
    uint32_t v17 = 8;
LABEL_27:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    return;
  }
  if (v26)
  {
    if ((v28 & 1) == 0)
    {
      uint64_t v35 = qword_100A19E48;
      if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
      {
        int v36 = *(unsigned __int8 *)(a1 + 5);
        int v37 = *(unsigned __int8 *)(a1 + 4);
        *(_DWORD *)buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v27;
        __int16 v40 = 1024;
        int v41 = v36;
        __int16 v42 = 1024;
        int v43 = v37;
        _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "Low Latency Game, Dynamic Latency for AoS %u, fGameModeOn %d, fConsoleGameModeOn %d", buf, 0x14u);
      }
      sub_100090AFC(a1, a3, v27);
    }
  }
  else
  {
    sub_100090E5C(a1, v29, a3);
  }
}

void sub_100092C30(uint64_t a1, unint64_t a2)
{
  if (_os_feature_enabled_impl())
  {
    if (*(unsigned char *)(a1 + 4))
    {
      BOOL v4 = 1;
      if (!a2) {
        return;
      }
    }
    else
    {
      BOOL v4 = *(unsigned char *)(a1 + 5) != 0;
      if (!a2) {
        return;
      }
    }
    if (v4)
    {
      uint64_t v5 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 8))(v5))
      {
        int v27 = 0;
        uint64_t v6 = sub_100017768();
        sub_10004191C(buf, "UniAoS");
        sub_10004191C(__p, "ignoreFlush");
        uint64_t v7 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v6 + 88))(v6, buf, __p, &v27);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        if (v31 < 0) {
          operator delete(*(void **)buf);
        }
        if (v27)
        {
          *(unsigned char *)(sub_10008F65C(v7, a2) + 32) = 0;
          return;
        }
      }
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      uint64_t v8 = sub_10007DD8C(*((void *)off_1009F80A8 + 28), a2);
      if (v8)
      {
        uint64_t v9 = sub_10008F65C(v8, a2);
        if (*(int *)(v9 + 24) > 9 || *(int *)(sub_10008F65C(v9, a2) + 24) <= 13)
        {
          uint64_t v10 = mach_absolute_time();
          uint64_t v11 = sub_10008F65C(v10, a2);
          ++*(unsigned char *)(v11 + 32);
          BOOL v12 = sub_100485128(a2);
          if (!v12 || !*(unsigned char *)(a2 + 1373))
          {
            uint64_t v15 = qword_100A19E48;
            BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
            if (v16)
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Low Latency Game 2G flush, score->20", buf, 2u);
            }
            goto LABEL_26;
          }
          uint64_t v13 = sub_10008F65C(v12, a2);
          if (*(float *)(v13 + 40) == 0.0)
          {
            *(float *)(sub_10008F65C(v13, a2) + 40) = (float)v10;
            uint64_t v14 = qword_100A19E48;
            if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Low Latency Game 1st flush in one second", buf, 2u);
            }
            return;
          }
          if (qword_1009F80B0 != -1) {
            dispatch_once(&qword_1009F80B0, &stru_1009988E0);
          }
          uint32_t v17 = off_1009F80A8;
          uint64_t v18 = sub_10008F65C(v13, a2);
          float v19 = sub_100568CF4((uint64_t)v17, (unint64_t)(float)((float)v10 - *(float *)(v18 + 40)), 1);
          *(float *)(sub_10008F65C(v20, a2) + 40) = (float)v10;
          int v21 = qword_100A19E48;
          BOOL v22 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
          if (v22)
          {
            int v23 = *(unsigned __int8 *)(sub_10008F65C(v22, a2) + 32);
            *(_DWORD *)buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v23;
            __int16 v29 = 2048;
            double v30 = v19;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Low Latency Game flush %d in a second, delta: %f", buf, 0x12u);
          }
          if (v19 <= 20.0)
          {
            *(_DWORD *)(sub_10008F65C(v22, a2) + 2_Block_object_dispose(&STACK[0x338], 8) = 20;
            int v24 = qword_100A19E48;
            BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
            if (v16)
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Low Latency Game, 2inrow flush, score->20", buf, 2u);
            }
LABEL_26:
            *(unsigned char *)(sub_10008F65C(v16, a2) + 32) = 4;
          }
        }
      }
    }
  }
}

void sub_100093020(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10009305C(uint64_t a1, unint64_t a2, int a3, uint64_t a4)
{
  int v76 = 20;
  int v77 = 40;
  int v75 = 15;
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    if (*(unsigned char *)(a1 + 4))
    {
      BOOL v9 = 1;
      if (!a2) {
        return result;
      }
    }
    else
    {
      BOOL v9 = *(unsigned char *)(a1 + 5) != 0;
      if (!a2) {
        return result;
      }
    }
    if (v9)
    {
      if (qword_1009F80B0 != -1) {
        dispatch_once(&qword_1009F80B0, &stru_1009988E0);
      }
      uint64_t result = sub_10007DD8C(*((void *)off_1009F80A8 + 28), a2);
      if (result)
      {
        uint64_t v10 = sub_100017768();
        uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 8))(v10);
        if (v11)
        {
          uint64_t v12 = sub_100017768();
          sub_10004191C(buf, "UniAoS");
          sub_10004191C(__p, "ReTxThreshold");
          (*(void (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v12 + 88))(v12, buf, __p, &v77);
          if (v74 < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE1(v84) < 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v13 = sub_100017768();
          sub_10004191C(buf, "UniAoS");
          sub_10004191C(__p, "NakThreshold");
          (*(void (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v13 + 88))(v13, buf, __p, &v76);
          if (v74 < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE1(v84) < 0) {
            operator delete(*(void **)buf);
          }
          uint64_t v14 = sub_100017768();
          sub_10004191C(buf, "UniAoS");
          sub_10004191C(__p, "IsmBandFactor");
          uint64_t v11 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v14 + 88))(v14, buf, __p, &v75);
          if (v74 < 0) {
            operator delete(__p[0]);
          }
          if (SBYTE1(v84) < 0) {
            operator delete(*(void **)buf);
          }
          if (!v77) {
            int v77 = 40;
          }
          if (!v76) {
            int v76 = 20;
          }
          if (!v75) {
            int v75 = 15;
          }
        }
        if (*(_WORD *)(a4 + 16)) {
          unsigned int v15 = 100 * *(unsigned __int16 *)(a4 + 179) / *(unsigned __int16 *)(a4 + 16);
        }
        else {
          LOBYTE(v15) = 0;
        }
        uint64_t v16 = sub_10008F65C(v11, a2);
        if (*(_DWORD *)(v16 + 24) == 1)
        {
          uint32_t v17 = qword_100A19E48;
          BOOL v18 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
          if (v18)
          {
            int v19 = v76;
            int v20 = v77;
            int v21 = *(_DWORD *)(sub_10008F65C(v18, a2) + 28);
            *(_DWORD *)buf = 67110144;
            *(_DWORD *)&uint8_t buf[4] = a3;
            __int16 v79 = 1024;
            int v80 = v20;
            __int16 v81 = 1024;
            int v82 = v15;
            __int16 v83 = 1024;
            int v84 = v19;
            __int16 v85 = 1024;
            int v86 = v21;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "pre Low Latency Game, reTx:%u / %u, nak:%u / %u, score:%u", buf, 0x20u);
          }
          if (v77 >= a3 && v76 >= v15)
          {
            uint64_t v30 = sub_10008F65C(v18, a2);
            if (*(_DWORD *)(v30 + 28))
            {
              uint64_t v31 = sub_10008F65C(v30, a2);
              --*(_DWORD *)(v31 + 28);
              int v32 = qword_100A19E48;
              uint64_t v30 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
              if (v30)
              {
                int v33 = *(_DWORD *)(sub_10008F65C(v30, a2) + 28);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v33;
                _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "pre Low Latency Game(out), decreased score %u", buf, 8u);
              }
            }
            uint64_t v16 = sub_10008F65C(v30, a2);
            if (!*(_DWORD *)(v16 + 28))
            {
              uint64_t v34 = qword_100A19E48;
              if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "pre Low Latency Game, LLM promote to AoS, request UBO", buf, 2u);
              }
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              uint64_t v35 = sub_100563678((uint64_t)off_1009F80A8, 2u, a2);
              if (!v35)
              {
                uint64_t v39 = qword_100A19E48;
                uint64_t v16 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
                if (!v16) {
                  goto LABEL_58;
                }
                *(_WORD *)buf = 0;
                int v27 = "pre Low Latency Game, transition busy delay 1 second";
                char v28 = v39;
                uint32_t v29 = 2;
                goto LABEL_40;
              }
              uint64_t v36 = sub_10008F65C(v35, a2);
              *(_DWORD *)(v36 + 36) = 20;
              *(_DWORD *)(sub_10008F65C(v36, a2) + 2_Block_object_dispose(&STACK[0x338], 8) = 0;
              if (*(_WORD *)(a4 + 16))
              {
                LOWORD(v37) = *(_WORD *)(a4 + 18);
                int v38 = (int)(float)((float)((float)v37 * 100.0) / (float)*(unsigned __int16 *)(a4 + 16));
              }
              else
              {
                int v38 = 0;
              }
              int v40 = *(char *)(a4 + 6);
              if (qword_1009F80B0 != -1)
              {
                int v72 = *(char *)(a4 + 6);
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
                int v40 = v72;
              }
              sub_100571A14((uint64_t)off_1009F80A8, a2, v38, v40, 0);
            }
          }
          else
          {
            uint64_t v22 = sub_10008F65C(v18, a2);
            unsigned int v23 = *(_DWORD *)(v22 + 28);
            uint64_t v16 = sub_10008F65C(v22, a2);
            if (v23 < *(_DWORD *)(v16 + 36))
            {
              uint64_t v24 = sub_10008F65C(v16, a2);
              ++*(_DWORD *)(v24 + 28);
              uint64_t v25 = qword_100A19E48;
              uint64_t v16 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
              if (v16)
              {
                int v26 = *(_DWORD *)(sub_10008F65C(v16, a2) + 28);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v26;
                int v27 = "pre Low Latency Game, increased score %u";
                char v28 = v25;
                uint32_t v29 = 8;
LABEL_40:
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
              }
            }
          }
        }
LABEL_58:
        uint64_t v41 = sub_10008F65C(v16, a2);
        if (*(int *)(v41 + 24) < 10) {
          goto LABEL_86;
        }
        uint64_t v41 = sub_10008F65C(v41, a2);
        if (*(int *)(v41 + 24) > 13) {
          goto LABEL_86;
        }
        __int16 v42 = qword_100A19E48;
        BOOL v43 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
        if (v43)
        {
          uint64_t v44 = sub_10008F65C(v43, a2);
          int v45 = *(_DWORD *)(v44 + 24);
          int v46 = v76;
          int v47 = v77;
          int v48 = *(_DWORD *)(sub_10008F65C(v44, a2) + 28);
          *(_DWORD *)buf = 67110400;
          *(_DWORD *)&uint8_t buf[4] = v45;
          __int16 v79 = 1024;
          int v80 = a3;
          __int16 v81 = 1024;
          int v82 = v47;
          __int16 v83 = 1024;
          int v84 = v15;
          __int16 v85 = 1024;
          int v86 = v46;
          __int16 v87 = 1024;
          int v88 = v48;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "In Low Latency Game, State:%u, reTx:%u / %u, nak:%u / %u, score:%u", buf, 0x26u);
        }
        if (qword_1009F80B0 != -1) {
          dispatch_once(&qword_1009F80B0, &stru_1009988E0);
        }
        sub_100571814((uint64_t)off_1009F80A8, a2, a3, *(unsigned char *)(a4 + 6));
        uint64_t v50 = sub_10008F65C(v49, a2);
        if (*(unsigned __int8 *)(v50 + 32) < 4u)
        {
          if (v77 >= a3 && v76 >= v15)
          {
            uint64_t v52 = sub_10008F65C(v50, a2);
            if (*(_DWORD *)(v52 + 28) >= 0xAu)
            {
              uint64_t v69 = qword_100A19E48;
              BOOL v70 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
              if (v70)
              {
                int v71 = *(_DWORD *)(sub_10008F65C(v70, a2) + 28);
                *(_DWORD *)buf = 67109120;
                *(_DWORD *)&uint8_t buf[4] = v71;
                _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "In Low Latency Game, decreased score %u", buf, 8u);
              }
              uint64_t v52 = sub_10008F65C(v70, a2);
              *(_DWORD *)(v52 + 28) -= 10;
            }
LABEL_72:
            uint64_t v41 = sub_10008F65C(v52, a2);
            if (*(_DWORD *)(v41 + 28) >= 0x14u)
            {
              if (qword_1009F80B0 != -1) {
                dispatch_once(&qword_1009F80B0, &stru_1009988E0);
              }
              uint64_t v59 = sub_100563678((uint64_t)off_1009F80A8, 8u, a2);
              if (v59)
              {
                *(_DWORD *)(sub_10008F65C(v59, a2) + 2_Block_object_dispose(&STACK[0x338], 8) = 20;
                if (qword_1009F80B0 != -1) {
                  dispatch_once(&qword_1009F80B0, &stru_1009988E0);
                }
                sub_100571CCC((uint64_t)off_1009F80A8, a2, 1);
                BOOL v60 = sub_100485128(a2);
                if (!v60 || !*(unsigned char *)(a2 + 1373))
                {
                  int v61 = v75;
                  *(_DWORD *)(sub_10008F65C(v60, a2) + 2_Block_object_dispose(&STACK[0x338], 8) = 20 * v61;
                }
                uint64_t v62 = qword_100A19E48;
                uint64_t v41 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
                if (!v41) {
                  goto LABEL_86;
                }
                int v63 = *(_DWORD *)(sub_10008F65C(v41, a2) + 28);
                *(_DWORD *)buf = 67109376;
                *(_DWORD *)&uint8_t buf[4] = v63;
                __int16 v79 = 1024;
                int v80 = v75;
                uint64_t v64 = "Low Latency Game, AoS demoted to LLM on ISM, score %u, ISM factor %d";
                uint64_t v65 = v62;
                uint32_t v66 = 14;
                goto LABEL_85;
              }
              uint64_t v67 = qword_100A19E48;
              uint64_t v41 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
              if (v41)
              {
                *(_WORD *)buf = 0;
                uint64_t v64 = "In Low Latency Game, transition busy delay 1 second";
                uint64_t v65 = v67;
                uint32_t v66 = 2;
LABEL_85:
                _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, v64, buf, v66);
              }
            }
LABEL_86:
            uint64_t v68 = sub_10008F65C(v41, a2);
            *(unsigned char *)(v68 + 32) = 0;
            uint64_t result = sub_10008F65C(v68, a2);
            *(_DWORD *)(result + 40) = 0;
            return result;
          }
          uint64_t v56 = sub_10008F65C(v50, a2);
          *(_DWORD *)(v56 + 28) += 10;
          uint64_t v57 = qword_100A19E48;
          uint64_t v52 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
          if (!v52) {
            goto LABEL_72;
          }
          int v58 = *(_DWORD *)(sub_10008F65C(v52, a2) + 28);
          *(_DWORD *)buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v58;
          int v53 = "In Low Latency Game, increased score %u";
          __int16 v54 = v57;
          uint32_t v55 = 8;
        }
        else
        {
          *(_DWORD *)(sub_10008F65C(v50, a2) + 2_Block_object_dispose(&STACK[0x338], 8) = 20;
          uint64_t v51 = qword_100A19E48;
          uint64_t v52 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
          if (!v52) {
            goto LABEL_72;
          }
          *(_WORD *)buf = 0;
          int v53 = "In Low Latency Game, per second flush count exceed";
          __int16 v54 = v51;
          uint32_t v55 = 2;
        }
        _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, v53, buf, v55);
        goto LABEL_72;
      }
    }
  }
  return result;
}

void sub_100093A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100093AAC(uint64_t a1, unint64_t a2)
{
  uint64_t v3 = sub_10008F65C(a1, a2);
  *(unsigned char *)(v3 + 32) = 0;
  uint64_t v4 = sub_10008F65C(v3, a2);
  *(_DWORD *)(v4 + 40) = 0;
  uint64_t v5 = sub_10008F65C(v4, a2);
  *(_DWORD *)(v5 + 2_Block_object_dispose(&STACK[0x338], 8) = 2;
  uint64_t result = sub_10008F65C(v5, a2);
  *(_DWORD *)(result + 36) = 2;
  return result;
}

unsigned char *sub_100093AFC(uint64_t a1, uint64_t a2)
{
  uint64_t result = (unsigned char *)sub_100478B2C(a2, 13);
  if (result)
  {
    uint64_t v4 = sub_100035F54();
    uint64_t result = (unsigned char *)(*(uint64_t (**)(uint64_t, void))(*(void *)v4 + 792))(v4, 0);
    if (result)
    {
      char v7 = 0;
      sub_10001B8E0(&v7);
      int v5 = sub_10017E77C(a2 + 128);
      sub_10001B910(&v7);
      if (v5)
      {
        uint64_t v6 = qword_100A19E48;
        if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
          sub_100744CAC(v5, v6);
        }
      }
      return sub_10001B8AC(&v7);
    }
  }
  return result;
}

void sub_100093BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100093BDC(uint64_t a1, uint64_t a2, __int16 a3)
{
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  uint64_t v6 = *((void *)off_1009F80A8 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100093E7C;
  block[3] = &unk_1009988A0;
  void block[4] = a1;
  void block[5] = a2;
  __int16 v8 = a3;
  dispatch_async(v6, block);
}

uint64_t sub_100093C9C(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009988C0);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 36);
  int v4 = *(_DWORD *)(a1 + 32);

  return sub_100418B84(v2, v3, v4);
}

void sub_100093D04(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = sub_10008DBD8(a1, *(unsigned __int16 *)(a1 + 40));
  unint64_t v10 = v3;
  if (v3)
  {
    unint64_t v4 = v3;
    if (qword_1009F80B0 != -1) {
      dispatch_once(&qword_1009F80B0, &stru_1009988E0);
    }
    int v5 = (void *)*((void *)off_1009F80A8 + 25);
    if (!v5) {
      goto LABEL_15;
    }
    uint64_t v6 = (char *)off_1009F80A8 + 200;
    do
    {
      unint64_t v7 = v5[4];
      BOOL v8 = v7 >= v4;
      if (v7 >= v4) {
        BOOL v9 = v5;
      }
      else {
        BOOL v9 = v5 + 1;
      }
      if (v8) {
        uint64_t v6 = (char *)v5;
      }
      int v5 = (void *)*v9;
    }
    while (*v9);
    if (v6 == (char *)off_1009F80A8 + 200 || v4 < *((void *)v6 + 4)) {
LABEL_15:
    }
      uint64_t v6 = (char *)off_1009F80A8 + 200;
    if (v6 != (char *)off_1009F80A8 + 200)
    {
      uint64_t v11 = &v10;
      if (*(_DWORD *)(sub_1000097B0((uint64_t **)off_1009F80A8 + 24, &v10, (uint64_t)&unk_1007B8580, (uint64_t **)&v11)[5]
                     + 76) == 2)
        sub_10008CD0C(v2, 0, *(unsigned __int16 *)(a1 + 42));
    }
  }
}

uint64_t sub_100093E14(uint64_t a1)
{
  if (qword_1009F8418 != -1) {
    dispatch_once(&qword_1009F8418, &stru_1009988C0);
  }
  uint64_t v2 = qword_1009F8410;
  unsigned int v3 = *(unsigned __int16 *)(a1 + 36);
  int v4 = *(_DWORD *)(a1 + 32);

  return sub_100418B84(v2, v3, v4);
}

void sub_100093E7C(uint64_t a1)
{
  uint64_t v1 = (uint64_t *)(a1 + 40);
  if (!*(void *)(a1 + 40)) {
    goto LABEL_21;
  }
  if (qword_1009F80B0 != -1) {
    dispatch_once(&qword_1009F80B0, &stru_1009988E0);
  }
  unsigned int v3 = (void *)*((void *)off_1009F80A8 + 25);
  if (!v3) {
    goto LABEL_15;
  }
  unint64_t v4 = *v1;
  int v5 = (char *)off_1009F80A8 + 200;
  do
  {
    unint64_t v6 = v3[4];
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      BOOL v8 = v3;
    }
    else {
      BOOL v8 = v3 + 1;
    }
    if (v7) {
      int v5 = (char *)v3;
    }
    unsigned int v3 = (void *)*v8;
  }
  while (*v8);
  if (v5 == (char *)off_1009F80A8 + 200 || v4 < *((void *)v5 + 4)) {
LABEL_15:
  }
    int v5 = (char *)off_1009F80A8 + 200;
  if (v5 == (char *)off_1009F80A8 + 200)
  {
LABEL_21:
    unsigned int v15 = qword_100A19E48;
    if (os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_ERROR)) {
      sub_100744D34(v1, v15);
    }
  }
  else
  {
    uint64_t v9 = sub_10008F65C(a1, *(void *)(a1 + 40));
    int v10 = *(unsigned __int16 *)(a1 + 48);
    if (*(unsigned __int16 *)(v9 + 16) != v10)
    {
      uint64_t v11 = qword_100A19E48;
      BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19E48, OS_LOG_TYPE_DEFAULT);
      if (v12)
      {
        int v13 = *(unsigned __int16 *)(sub_10008F65C(v12, *(void *)(a1 + 40)) + 16);
        int v14 = *(unsigned __int16 *)(a1 + 48);
        v16[0] = 67109376;
        v16[1] = v13;
        __int16 v17 = 1024;
        int v18 = v14;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Updated currentJitterBuffer from %u to %u", (uint8_t *)v16, 0xEu);
        LOWORD(v10) = *(_WORD *)(a1 + 48);
      }
      *(_WORD *)(sub_10008F65C(v12, *v1) + 16) = v10;
      notify_post("com.apple.bluetooth.AdaptiveJitterBufferChanged");
    }
  }
}

void sub_100094038(uint64_t a1, char a2, __int16 a3, int a4)
{
  *(unsigned char *)(a1 + 56) = 0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(unsigned char *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 5_Block_object_dispose(&STACK[0x338], 8) = a3;
  *(_WORD *)(a1 + 60) = a3;
  *(_WORD *)(a1 + 62) = -1;
  *(void *)(a1 + 64) = 0xFFFF00000000;
  *(unsigned char *)(a1 + 72) = a2;
  *(_DWORD *)(a1 + 76) = a4;
  *(_WORD *)(a1 + 86) = 0;
  *(unsigned char *)(a1 + 8_Block_object_dispose(&STACK[0x338], 8) = 0;
  *(void *)(a1 + 100) = 0;
  *(void *)(a1 + 92) = 0;
  operator new();
}

void sub_10009410C(id a1)
{
}

void sub_100094150()
{
}

void sub_100094174(id a1)
{
}

void sub_1000941B8()
{
}

const char *sub_100094A08(int a1)
{
  if (a1 <= 39)
  {
    if (a1 > 19)
    {
      if (a1 != 20) {
        return "270 ms";
      }
      return "350 ms";
    }
    else
    {
      if (a1 != 10)
      {
        if (a1 == 15) {
          return "1022.5 ms";
        }
        return "270 ms";
      }
      return "2 seconds";
    }
  }
  else if (a1 <= 44)
  {
    if (a1 != 40)
    {
      if (a1 == 42) {
        return "120 ms";
      }
      return "270 ms";
    }
    return "181.25 ms";
  }
  else
  {
    switch(a1)
    {
      case '-':
        return "60 ms";
      case '2':
        return "30 ms";
      case '<':
        return "20 ms";
      default:
        return "270 ms";
    }
  }
}

BOOL sub_100094B64(id a1)
{
  return 1;
}

BOOL sub_100094C04(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 880);
  id v3 = *(id *)(a1 + 32);
  id v4 = v2;
  BOOL v5 = v3 != v4;
  if (v3 == v4)
  {

LABEL_8:
    return v5;
  }
  unint64_t v6 = v4;
  if ((v3 == 0) == (v4 != 0))
  {

    goto LABEL_7;
  }
  unsigned __int8 v7 = [v3 isEqual:v4];

  if ((v7 & 1) == 0)
  {
LABEL_7:
    BOOL v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = v8;
    id v3 = *(id *)(v9 + 880);
    *(void *)(v9 + 880) = v10;
    goto LABEL_8;
  }
  return 0;
}

BOOL sub_100094D2C(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(_DWORD *)(v2 + 860);
  if (v1 != v3)
  {
    *(_DWORD *)(v2 + 860) = v1;
    *(unsigned char *)(*(void *)(a1 + 32) + 80_Block_object_dispose(&STACK[0x338], 8) = 1;
  }
  return v1 != v3;
}

BOOL sub_100094DCC(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(v2 + 858);
  if (v1 != v3) {
    *(unsigned char *)(v2 + 85_Block_object_dispose(&STACK[0x338], 8) = v1;
  }
  return v1 != v3;
}

BOOL sub_100094E88(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 920);
  id v3 = *(id *)(a1 + 32);
  id v4 = v2;
  BOOL v5 = v3 != v4;
  if (v3 == v4)
  {

LABEL_8:
    return v5;
  }
  unint64_t v6 = v4;
  if ((v3 == 0) == (v4 != 0))
  {

    goto LABEL_7;
  }
  unsigned __int8 v7 = [v3 isEqual:v4];

  if ((v7 & 1) == 0)
  {
LABEL_7:
    BOOL v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = v8;
    id v3 = *(id *)(v9 + 920);
    *(void *)(v9 + 920) = v10;
    goto LABEL_8;
  }
  return 0;
}

BOOL sub_100094FD8(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 936);
  id v3 = *(id *)(a1 + 32);
  id v4 = v2;
  BOOL v5 = v3 != v4;
  if (v3 == v4)
  {

LABEL_8:
    return v5;
  }
  unint64_t v6 = v4;
  if ((v3 == 0) == (v4 != 0))
  {

    goto LABEL_7;
  }
  unsigned __int8 v7 = [v3 isEqual:v4];

  if ((v7 & 1) == 0)
  {
LABEL_7:
    BOOL v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = v8;
    id v3 = *(id *)(v9 + 936);
    *(void *)(v9 + 936) = v10;
    goto LABEL_8;
  }
  return 0;
}

BOOL sub_100095128(uint64_t a1)
{
  uint64_t v2 = *(void **)(*(void *)(a1 + 40) + 928);
  id v3 = *(id *)(a1 + 32);
  id v4 = v2;
  BOOL v5 = v3 != v4;
  if (v3 == v4)
  {

LABEL_8:
    return v5;
  }
  unint64_t v6 = v4;
  if ((v3 == 0) == (v4 != 0))
  {

    goto LABEL_7;
  }
  unsigned __int8 v7 = [v3 isEqual:v4];

  if ((v7 & 1) == 0)
  {
LABEL_7:
    BOOL v8 = *(void **)(a1 + 32);
    uint64_t v9 = *(void *)(a1 + 40);
    id v10 = v8;
    id v3 = *(id *)(v9 + 928);
    *(void *)(v9 + 92_Block_object_dispose(&STACK[0x338], 8) = v10;
    goto LABEL_8;
  }
  return 0;
}

id sub_100095294(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 24) = 1;
  return [*(id *)(a1 + 32) _activateWithCompletion:*(void *)(a1 + 40)];
}

void *sub_1000954D0(void *result)
{
  uint64_t v1 = result[4];
  if (!*(unsigned char *)(v1 + 32))
  {
    uint64_t v2 = result;
    *(unsigned char *)(v1 + 32) = 1;
    if (dword_1009F8420 <= 30 && (dword_1009F8420 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    id v3 = (void *)v2[4];
    return [v3 _invalidate];
  }
  return result;
}

id sub_1000959A8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _update];
}

id sub_100096698(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 12_Block_object_dispose(&STACK[0x338], 8) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 192) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 256) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 320) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 384) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 44_Block_object_dispose(&STACK[0x338], 8) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 512) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 576) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 640) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 80_Block_object_dispose(&STACK[0x338], 8) = 1;
  *(unsigned char *)(*(void *)(a1 + 32) + 704) = 1;
  return [*(id *)(a1 + 32) _update];
}

void *sub_100096EBC(void *result)
{
  uint64_t v1 = (void *)result[4];
  if (v1 == *(void **)(result[6] + 40))
  {
    uint64_t v2 = result;
    if (v1)
    {
      id v3 = v1;
      dispatch_source_cancel(v3);
      uint64_t v4 = v2[6];
      BOOL v5 = *(void **)(v4 + 40);
      *(void *)(v4 + 40) = 0;
    }
    *(unsigned char *)(v2[5] + 24) = 1;
    unint64_t v6 = (void *)v2[5];
    return [v6 _update];
  }
  return result;
}

void sub_10009B574(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 56);
}

void sub_10009B8C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  _Block_object_dispose(va, 8);
  _Block_object_dispose((const void *)(v15 - 96), 8);

  _Unwind_Resume(a1);
}

void sub_10009B8FC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v6 + 40);
  unsigned __int8 v7 = CUDescriptionWithLevel();
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v6 + 40), obj);

  ++*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  if (*(int *)(a1 + 48) >= 11 && *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) >= 0x32uLL) {
    *a4 = 1;
  }
}

void sub_10009B9B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009BCF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_10009BD30(uint64_t a1)
{
  if (*(void *)(a1 + 40))
  {
    if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize())) {
LABEL_10:
    }
      LogPrintF_safe();
  }
  else if (*(unsigned char *)(a1 + 56) {
         && dword_1009F84F0 <= 30
  }
         && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
  {
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if (qword_1009F85C8 != -1) {
      dispatch_once(&qword_1009F85C8, &stru_100998C50);
    }
    if (sub_1006E1A9C((uint64_t)off_1009F85C0, *(void *)(a1 + 48), 1, 1, 0)
      && dword_1009F84F0 <= 90
      && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
    {
      id v3 = CUPrintErrorCode();
      LogPrintF_safe();
    }
  }
  if (*(void *)(a1 + 40))
  {
    if (qword_1009F85C8 != -1) {
      dispatch_once(&qword_1009F85C8, &stru_100998C50);
    }
    if (sub_1006DFE0C((uint64_t)off_1009F85C0, *(void *)(a1 + 48), *(void *)(a1 + 40)))
    {
      if (dword_1009F84F0 <= 90 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v4 = CUPrintErrorCode();
        LogPrintF_safe();
      }
      uint64_t v2 = *(void *)(a1 + 40);
      if (v2)
      {
        sub_1000A7EA8(v2);
        operator delete();
      }
    }
  }
}

void sub_10009BFFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009C1E4(_Unwind_Exception *exception_object)
{
}

void sub_10009C204(uint64_t a1)
{
  if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_100998C50);
  }
  sub_1006E1A9C((uint64_t)off_1009F85C0, *(void *)(a1 + 40), 1, 1, 0);
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(NSObject **)(v2 + 240);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10009C318;
  block[3] = &unk_100997450;
  void block[4] = v2;
  dispatch_async(v3, block);
}

id sub_10009C318(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 96) = 0;
  return [*(id *)(a1 + 32) _invalidated];
}

void sub_10009C4A8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10009C4B8(uint64_t a1)
{
  if (*(void *)(a1 + 32))
  {
    if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    if (qword_1009F85D8 != -1) {
      dispatch_once(&qword_1009F85D8, &stru_100998C70);
    }
    sub_10000E3F4(qword_1009F85D0, *(void *)(a1 + 32));
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_100998C30);
  }
  uint64_t v2 = qword_1009F8160;
  unint64_t v3 = *(void *)(a1 + 40);

  return sub_10000A678(v2, v3);
}

void sub_10009C708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  int v13 = v12;

  _Unwind_Resume(a1);
}

void sub_10009C814(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10009CC1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CDD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009CE9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10009D1C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009D37C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10009D3B4(uint64_t a1)
{
  if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_100998C50);
  }
  uint64_t v2 = off_1009F85C0;
  unint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned __int8 *)(a1 + 40);

  return sub_1006E4038((uint64_t)v2, v3, v4);
}

void sub_10009D62C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009E0C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,id a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose(&a47, 8);

  _Unwind_Resume(a1);
}

void sub_10009E2A4(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(a1 + 32) objectForKeyedSubscript:v5];
  id v8 = v6;
  uint64_t v9 = v8;
  if (v7 == v8)
  {
  }
  else
  {
    if ((v8 != 0) != (v7 == 0))
    {
      unsigned __int8 v10 = [v7 isEqual:v8];

      if (v10) {
        goto LABEL_18;
      }
    }
    else
    {
    }
    if ([v5 length] == (id)7)
    {
      [v5 subdataWithRange:1, 6];
      id v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v11 = v5;
    }
    BOOL v12 = v11;
    if ([v5 length] == (id)7) {
      char v13 = *(unsigned char *)[v5 bytes];
    }
    else {
      char v13 = 0;
    }
    if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
    {
      int v14 = CUPrintNSDataAddress();
      uint64_t v16 = CUPrintNSObjectMasked();
      LogPrintF_safe();
    }
    uint64_t v15 = sub_100019878();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _DWORD v17[2] = sub_10009E580;
    v17[3] = &unk_100998A80;
    char v21 = v13;
    id v18 = v5;
    int v19 = v12;
    id v20 = v9;
    sub_100013018(v15, v17);
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
LABEL_18:
}

void sub_10009E514(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009E580(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] == (id)6 || objc_msgSend(*(id *)(a1 + 32), "length") == (id)7)
  {
    if ([*(id *)(a1 + 32) length] == (id)6)
    {
      *(_DWORD *)((char *)v10 + 3) = 0;
      v10[0] = 0;
      uint64_t v2 = [*(id *)(a1 + 32) bytes];
      unint64_t v3 = 0;
      __int16 v4 = v2[2];
      *(_DWORD *)((char *)v10 + 1) = *(_DWORD *)v2;
      *(_WORD *)((char *)&v10[1] + 1) = v4;
    }
    else
    {
      unint64_t v5 = sub_1006ADC58(*(void **)(a1 + 32));
      uint64_t v6 = sub_1002284B8(v5);
      v10[0] = v6;
      BYTE2(v10[1]) = BYTE6(v6);
      LOWORD(v10[1]) = WORD2(v6);
      unint64_t v3 = (unint64_t)v6 << 48;
    }
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_100998C90);
    }
    sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)BYTE1(v10[0]) << 40) | ((unint64_t)BYTE2(v10[0]) << 32) | ((unint64_t)HIBYTE(v10[0]) << 24) | ((unint64_t)LOBYTE(v10[1]) << 16) | ((unint64_t)BYTE1(v10[1]) << 8) | BYTE2(v10[1]) | v3, 0, 1u, 0, 0, v11);
    id v7 = sub_100031234(v11);
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_100998CB0);
    }
    if (sub_100008DC4(qword_1009F7EC8, v7))
    {
      if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
      {
        id v8 = CUPrintNSDataAddress();
        uint64_t v9 = CUPrintNSObjectMasked();
        LogPrintF_safe();
      }
    }
    else
    {
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_100998CB0);
      }
      sub_10071170C(qword_1009F7EC8, v10);
    }
  }
}

void sub_10009E808(_Unwind_Exception *a1)
{
  __int16 v4 = v1;

  _Unwind_Resume(a1);
}

void sub_10009E83C(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = [*(id *)(*(void *)(a1 + 32) + 72) objectForKeyedSubscript:v5];
  id v8 = v6;
  uint64_t v9 = v8;
  if (v7 == v8)
  {
  }
  else
  {
    if ((v8 != 0) != (v7 == 0))
    {
      unsigned __int8 v10 = [v7 isEqual:v8];

      if (v10) {
        goto LABEL_18;
      }
    }
    else
    {
    }
    if ([v5 length] == (id)7)
    {
      [v5 subdataWithRange:1, 6];
      id v11 = (id)objc_claimAutoreleasedReturnValue();
    }
    else
    {
      id v11 = v5;
    }
    BOOL v12 = v11;
    if ([v5 length] == (id)7) {
      char v13 = *(unsigned char *)[v5 bytes];
    }
    else {
      char v13 = 0;
    }
    if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
    {
      int v14 = CUPrintNSDataAddress();
      uint64_t v16 = CUPrintNSObjectMasked();
      LogPrintF_safe();
    }
    uint64_t v15 = sub_100019878();
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    _DWORD v17[2] = sub_10009EB1C;
    v17[3] = &unk_100998A80;
    id v18 = v5;
    char v21 = v13;
    id v19 = v9;
    id v20 = v12;
    sub_100013018(v15, v17);
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);
  }
LABEL_18:
}

void sub_10009EAB0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009EB1C(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] == (id)6 || objc_msgSend(*(id *)(a1 + 32), "length") == (id)7)
  {
    if ([*(id *)(a1 + 32) length] == (id)6)
    {
      *(_DWORD *)&v10[3] = 0;
      *(_DWORD *)unsigned __int8 v10 = 0;
      uint64_t v2 = [*(id *)(a1 + 32) bytes];
      unint64_t v3 = 0;
      __int16 v4 = v2[2];
      *(_DWORD *)&v10[1] = *(_DWORD *)v2;
      *(_WORD *)&v10[5] = v4;
    }
    else
    {
      unint64_t v5 = sub_1006ADC58(*(void **)(a1 + 32));
      uint64_t v6 = sub_1002284B8(v5);
      *(_DWORD *)unsigned __int8 v10 = v6;
      v10[6] = BYTE6(v6);
      *(_WORD *)&_OWORD v10[4] = WORD2(v6);
      unint64_t v3 = (unint64_t)v6 << 48;
    }
    if ([*(id *)(a1 + 40) length] == (id)16)
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_100998C90);
      }
      sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)v10[1] << 40) | ((unint64_t)v10[2] << 32) | ((unint64_t)v10[3] << 24) | ((unint64_t)v10[4] << 16) | ((unint64_t)v10[5] << 8) | v10[6] | v3, 0, 1u, 0, 0, v11);
      id v7 = sub_100031234(v11);
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_100998CB0);
      }
      if (sub_100008DC4(qword_1009F7EC8, v7))
      {
        if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
        {
          id v8 = CUPrintNSDataAddress();
          uint64_t v9 = CUPrintNSObjectMasked();
          LogPrintF_safe();
        }
      }
      else
      {
        if (qword_1009F7ED0 != -1) {
          dispatch_once(&qword_1009F7ED0, &stru_100998CB0);
        }
        sub_1007071C4(qword_1009F7EC8, v10, (uint64_t)[*(id *)(a1 + 40) bytes]);
      }
    }
  }
}

void sub_10009EDC8(_Unwind_Exception *a1)
{
  __int16 v4 = v1;

  _Unwind_Resume(a1);
}

void sub_10009EDFC(uint64_t a1)
{
  if (qword_1009F85E8 != -1) {
    dispatch_once(&qword_1009F85E8, &stru_100998CD0);
  }
  uint64_t v2 = qword_1009F85E0;
  unint64_t v3 = *(void **)(a1 + 32);

  sub_1003C4920(v2, v3);
}

void sub_10009EEF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009EF08(id a1, NSData *a2, NSData *a3, BOOL *a4)
{
  unint64_t v5 = a2;
  uint64_t v6 = a3;
  if ((id)[(NSData *)v5 length] == (id)7)
  {
    -[NSData subdataWithRange:](v5, "subdataWithRange:", 1, 6);
    id v7 = (NSData *)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v7 = v5;
  }
  id v8 = v7;
  if ((id)[(NSData *)v5 length] == (id)7) {
    [(NSData *)v5 bytes];
  }
  if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v9 = CUPrintNSDataAddress();
    char v13 = CUPrintNSObjectMasked();
    LogPrintF_safe();
  }
  uint64_t v10 = sub_100019878();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  _DWORD v14[2] = sub_10009F130;
  v14[3] = &unk_100998510;
  id v11 = v5;
  uint64_t v15 = v11;
  BOOL v12 = v6;
  uint64_t v16 = v12;
  sub_100013018(v10, v14);
}

void sub_10009F0DC(_Unwind_Exception *a1)
{
  uint64_t v6 = v5;

  _Unwind_Resume(a1);
}

void sub_10009F130(uint64_t a1)
{
  if ([*(id *)(a1 + 32) length] == (id)6)
  {
    char v7 = 0;
    uint64_t v2 = [*(id *)(a1 + 32) bytes];
    __int16 v3 = v2[2];
    int v8 = *(_DWORD *)v2;
    __int16 v9 = v3;
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_100998C90);
    }
    sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)v8 << 40) | ((unint64_t)BYTE1(v8) << 32) | ((unint64_t)BYTE2(v8) << 24) | ((unint64_t)HIBYTE(v8) << 16) | ((unint64_t)v9 << 8) | HIBYTE(v9), 0, 1u, 0, 0, v10);
    __int16 v4 = sub_100031234(v10);
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_100998CB0);
    }
    if (sub_100008DC4(qword_1009F7EC8, v4))
    {
      if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
      {
        unint64_t v5 = CUPrintNSDataAddress();
        uint64_t v6 = CUPrintNSObjectMasked();
        LogPrintF_safe();
      }
    }
    else
    {
      if (qword_1009F7ED0 != -1) {
        dispatch_once(&qword_1009F7ED0, &stru_100998CB0);
      }
      sub_10071170C(qword_1009F7EC8, &v7);
    }
  }
}

void sub_10009F334(_Unwind_Exception *a1)
{
  __int16 v4 = v2;

  _Unwind_Resume(a1);
}

void sub_10009F69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,id a43)
{
  _Block_object_dispose(&a38, 8);
  _Unwind_Resume(a1);
}

void sub_10009F73C(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v6 = [v5 irkData];
  id v7 = [v6 length];

  if (v7 == (id)16 && [v5 keyType])
  {
    int v8 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
    __int16 v9 = [v5 irkData];
    id v10 = [v8 objectForKey:v9];

    if (!v10)
    {
      long long v36 = 0uLL;
      id v15 = [v5 irkData];
      long long v36 = *(_OWORD *)[v15 bytes];

      [*(id *)(a1 + 32) bytes];
      uint64_t v16 = SipHash();
      __int16 v34 = v16;
      char v35 = BYTE2(v16);
      id v17 = [objc_alloc((Class)NSData) initWithBytes:&v34 length:3];
      if (([*(id *)(a1 + 40) isEqualToData:v17] & 1) == 0)
      {

        id v10 = 0;
LABEL_17:

        goto LABEL_18;
      }
      id v10 = *(id *)(a1 + 40);
      id v18 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      if (!v18)
      {
        id v19 = objc_alloc_init((Class)NSMutableDictionary);
        uint64_t v20 = *(void *)(*(void *)(a1 + 56) + 8);
        char v21 = *(void **)(v20 + 40);
        *(void *)(v20 + 40) = v19;

        id v18 = *(void **)(*(void *)(*(void *)(a1 + 56) + 8) + 40);
      }
      uint64_t v22 = *(void *)(a1 + 40);
      unsigned int v23 = [v5 irkData];
      [v18 setObject:v22 forKeyedSubscript:v23];

      if (!v10) {
        goto LABEL_17;
      }
    }
    if (dword_1009F84F0 <= 20 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
    {
      id v11 = [v5 irkData];
      BOOL v12 = CUPrintNSObjectMasked();
      char v13 = [v5 btAddressData];
      int v14 = CUPrintNSDataAddress();
      CUPrintNSDataAddress();
      v33 = int v32 = v14;
      uint64_t v31 = v12;
      LogPrintF_safe();
    }
    id v24 = [objc_alloc((Class)NSData) initWithData:*(void *)(a1 + 32)];
    [v5 setBtAddressData:v24];

    uint64_t v25 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    if (!v25)
    {
      id v26 = objc_alloc((Class)NSMutableArray);
      int v27 = [*(id *)(a1 + 48) oobKeys];
      id v28 = [v26 initWithArray:v27];
      uint64_t v29 = *(void *)(*(void *)(a1 + 64) + 8);
      uint64_t v30 = *(void **)(v29 + 40);
      *(void *)(v29 + 40) = v28;

      uint64_t v25 = *(void **)(*(void *)(*(void *)(a1 + 64) + 8) + 40);
    }
    [v25 replaceObjectAtIndex:a3 withObject:v5, v31, v32, v33];
    goto LABEL_17;
  }
LABEL_18:
}

void sub_10009FA80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10009FEA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A0064(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1000A0084(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t result = *(void **)(a1 + 40);
  if (v2 == result[11]) {
    return [result _rescanTimerFired];
  }
  return result;
}

void sub_1000A09D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000A0E80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1000A0F24(uint64_t a1)
{
  if (qword_1009F85E8 != -1) {
    dispatch_once(&qword_1009F85E8, &stru_100998CD0);
  }
  uint64_t v2 = qword_1009F85E0;
  __int16 v3 = *(void **)(a1 + 32);

  sub_1003C5CB4(v2, v3);
}

void sub_1000A10C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A279C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,atomic_uint *a46)
{
  if (a46) {
    sub_1000368F4(a46);
  }

  _Unwind_Resume(a1);
}

void sub_1000A36C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  _Unwind_Resume(a1);
}

void sub_1000A3AC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A3E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1000A3F4C(void *a1, void *a2, void *a3, long long *a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14)
{
  id v17 = a2;
  id v18 = a3;
  long long v42 = *a4;
  int v43 = *((_DWORD *)a4 + 4);
  id v19 = v18;
  sub_1000A89F8((uint64_t)v44, v17, v18, (uint64_t)&v42, a5, a6, a7, a8, a9, a10, a11, a12, a13, a14, 1);
  unint64_t v20 = a1[13];
  if (v20 >= a1[14])
  {
    uint64_t v21 = sub_1000A8670(a1 + 12, v44);
  }
  else
  {
    sub_1000A8794((uint64_t)(a1 + 14), a1[13], v44);
    uint64_t v21 = v20 + 112;
    a1[13] = v20 + 112;
  }
  a1[13] = v21;

  int v47 = &off_100998428;
  if (v48) {
    sub_1000368F4(v48);
  }
  int v45 = &off_100998428;
  if (v46) {
    sub_1000368F4(v46);
  }

  unint64_t v22 = a1[3];
  unint64_t v23 = a1[2];
  if (v23 >= v22)
  {
    uint64_t v26 = a1[1];
    unint64_t v27 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v23 - v26) >> 2);
    unint64_t v28 = v27 + 1;
    if (v27 + 1 > 0xCCCCCCCCCCCCCCCLL) {
      abort();
    }
    unint64_t v29 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v22 - v26) >> 2);
    if (2 * v29 > v28) {
      unint64_t v28 = 2 * v29;
    }
    if (v29 >= 0x666666666666666) {
      unint64_t v30 = 0xCCCCCCCCCCCCCCCLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30) {
      uint64_t v31 = (char *)sub_10003767C((uint64_t)(a1 + 3), v30);
    }
    else {
      uint64_t v31 = 0;
    }
    int v32 = &v31[20 * v27];
    int v33 = &v31[20 * v30];
    long long v34 = *a4;
    *((_DWORD *)v32 + 4) = *((_DWORD *)a4 + 4);
    *(_OWORD *)int v32 = v34;
    uint64_t v25 = v32 + 20;
    long long v36 = (char *)a1[1];
    char v35 = (char *)a1[2];
    if (v35 != v36)
    {
      do
      {
        long long v37 = *(_OWORD *)(v35 - 20);
        *((_DWORD *)v32 - 1) = *((_DWORD *)v35 - 1);
        *(_OWORD *)(v32 - 20) = v37;
        v32 -= 20;
        v35 -= 20;
      }
      while (v35 != v36);
      char v35 = (char *)a1[1];
    }
    a1[1] = v32;
    a1[2] = v25;
    a1[3] = v33;
    if (v35) {
      operator delete(v35);
    }
  }
  else
  {
    long long v24 = *a4;
    *(_DWORD *)(v23 + 16) = *((_DWORD *)a4 + 4);
    *(_OWORD *)unint64_t v23 = v24;
    uint64_t v25 = (char *)(v23 + 20);
  }
  a1[2] = v25;
}

void sub_1000A4200(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000A8124((uint64_t)va);

  _Unwind_Resume(a1);
}

void sub_1000A4910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  _Unwind_Resume(a1);
}

void sub_1000A4CA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A4E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000A50AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A63B0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A66C0(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  if ([v5 length] == (id)7)
  {
    [v5 subdataWithRange:1, 6];
    id v7 = (id)objc_claimAutoreleasedReturnValue();
  }
  else
  {
    id v7 = v5;
  }
  int v8 = v7;
  if ([v5 length] == (id)7) {
    [v5 bytes];
  }
  uint64_t v9 = *(void *)(*(void *)(a1 + 32) + 8);
  id v10 = *(void **)(v9 + 40);
  id v11 = CUPrintNSDataAddress();
  BOOL v12 = CUPrintNSObjectMasked();
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v9 + 40), v10);

  *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 0;
}

void sub_1000A6834(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000A6EAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  _Block_object_dispose(&a62, 8);
  _Unwind_Resume(a1);
}

void sub_1000A6F60(uint64_t a1)
{
  if (qword_1009F85D8 != -1) {
    dispatch_once(&qword_1009F85D8, &stru_100998C70);
  }
  uint64_t v2 = qword_1009F85D0;
  __int16 v4 = *(void **)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);

  sub_1005D8C48(v2, v3, v4, 0);
}

void sub_1000A6FC8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", [v6 bleRSSIThresholdHint]);
  int v8 = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", [v6 bleSensorRssiIncreaseScanThreshold]);
  uint64_t v9 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v6 bleSensorIncreaseScanRate]);
  unsigned __int8 v10 = [v6 bleSensorEnableRssiIncreaseScan];
  id v11 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v6 bleSensorIncreaseScanTimeout]);
  unsigned __int8 v23 = v10;
  BOOL v12 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v6 bleSensorTimeoutBetweenIncreaseScan]);
  if ([v9 intValue] == 75)
  {
    __int16 v13 = 40;
LABEL_5:
    __int16 v14 = 30;
    goto LABEL_6;
  }
  if ([v9 intValue] == 50)
  {
    __int16 v13 = 60;
    goto LABEL_5;
  }
  if ([v9 intValue] == 10)
  {
    __int16 v13 = 30;
    __int16 v14 = 300;
  }
  else
  {
    unsigned int v17 = [v9 intValue];
    if (v17 == 3) {
      __int16 v14 = 966;
    }
    else {
      __int16 v14 = 0;
    }
    if (v17 == 3) {
      __int16 v13 = 30;
    }
    else {
      __int16 v13 = 0;
    }
  }
LABEL_6:
  if (([*(id *)(*(void *)(a1 + 32) + 112) containsObject:v5] & 1) == 0)
  {
    long long v24 = v8;
    uint64_t v21 = v7;
    unint64_t v22 = v5;
    unsigned int v15 = [v7 intValue];
    if (v15) {
      int v16 = v15;
    }
    else {
      int v16 = -127;
    }
    if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    uint64_t v18 = *(void *)(*(void *)(a1 + 32) + 120);
    uint64_t v19 = sub_100019878();
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_1000A7380;
    _OWORD v25[3] = &unk_100998B60;
    uint64_t v30 = v18;
    id v5 = v22;
    id v26 = v22;
    char v35 = *(unsigned char *)(a1 + 52);
    int v20 = *(_DWORD *)(a1 + 48);
    int v31 = v16;
    int v32 = v20;
    unsigned __int8 v36 = v23;
    id v27 = v24;
    __int16 v33 = v14;
    __int16 v34 = v13;
    id v28 = v11;
    id v29 = v12;
    sub_100013018(v19, v25);
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24);

    id v7 = v21;
    int v8 = v24;
  }
}

void sub_1000A72C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,void *a21,void *a22,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1000A7380(uint64_t a1)
{
  if (qword_1009F85D8 != -1) {
    dispatch_once(&qword_1009F85D8, &stru_100998C70);
  }
  uint64_t v2 = qword_1009F85D0;
  unint64_t v3 = *(void *)(a1 + 64);
  unsigned int v13 = *(unsigned __int8 *)(a1 + 84);
  int v4 = *(char *)(a1 + 72);
  unsigned __int8 v5 = *(unsigned char *)(a1 + 76);
  char v6 = *(unsigned char *)(a1 + 85);
  id v7 = *(void **)(a1 + 32);
  char v8 = [*(id *)(a1 + 40) intValue];
  int v9 = *(_DWORD *)(a1 + 80);
  unsigned __int16 v10 = (unsigned __int16)[*(id *)(a1 + 48) intValue];
  HIWORD(v12) = (unsigned __int16)[*(id *)(a1 + 56) intValue];
  LOWORD(v12) = v10;
  if (sub_1005D7400(v2, v3, v7, 0, 0, v13, v4, v5, 0, 0, 0, 0, v6, v8, v9, v12)
    && dword_1009F84F0 <= 90
    && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
  {
    id v11 = CUPrintErrorCode();
    LogPrintF_safe();
  }
}

void sub_1000A7518(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

id sub_1000A77A0(uint64_t a1)
{
  int v1 = *(unsigned __int8 *)(a1 + 40);
  uint64_t v2 = *(void **)(a1 + 32);
  if (v1) {
    return [v2 _aopBTBufferDrained];
  }
  else {
    return [v2 _advBufferDrained];
  }
}

void sub_1000A77B4()
{
  if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
}

void sub_1000A7828()
{
  if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
}

void sub_1000A789C()
{
  if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
}

void sub_1000A7910(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  if (dword_1009F84F0 <= 30 && (dword_1009F84F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  if ((a3 & 0xFFFFFFFD) == 1)
  {
    id v6 = objc_alloc_init((Class)CBDevice);
    id v7 = [v5 UUIDString];
    [v6 setIdentifier:v7];

    [v6 setDiscoveryFlags:0x20000000];
    [v6 setInternalFlags:2];
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_100998C90);
    }
    uint64_t v8 = sub_100030DCC((uint64_t)off_1009F7ED8, v5, 0);
    if (v8)
    {
      v16[0] = BYTE5(v8);
      v16[1] = BYTE4(v8);
      _DWORD v16[2] = BYTE3(v8);
      v16[3] = BYTE2(v8);
      _OWORD v16[4] = BYTE1(v8);
      void v16[5] = v8;
      id v9 = [objc_alloc((Class)NSData) initWithBytes:v16 length:6];
      [v6 setBtAddressData:v9];
    }
    unsigned __int16 v10 = *(NSObject **)(a1 + 16);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000A7BB8;
    block[3] = &unk_100998A38;
    void block[4] = v6;
    void block[5] = a1;
    dispatch_async(v10, block);
    goto LABEL_13;
  }
  if (a3 == 2)
  {
    id v11 = *(NSObject **)(a1 + 16);
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 3221225472;
    _DWORD v12[2] = sub_1000A7BC4;
    v12[3] = &unk_100998A38;
    uint64_t v14 = a1;
    id v13 = v5;
    dispatch_async(v11, v12);
    id v6 = v13;
LABEL_13:
  }
}

void sub_1000A7B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000A7BB8(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 8) deviceFound:*(void *)(a1 + 32)];
}

id sub_1000A7BC4(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 8) deviceLost:*(void *)(a1 + 32)];
}

void sub_1000A7BDC(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  id v5 = *(char **)(a1 + 8);
  int v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        id v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1000A7C68(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1000A7C68(uint64_t a1, char *__src, char *a3)
{
  unint64_t v3 = a3;
  int v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    id v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    int v20 = &v19[8 * v16];
    __p = v19;
    id v27 = v20;
    id v28 = v20;
    id v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        unsigned __int8 v23 = (char *)sub_1000405F8(v8, v22);
        int v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        id v27 = v20;
        id v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        id v27 = v20;
      }
    }
    *(void *)int v20 = *(void *)v3;
    id v28 = v20 + 8;
    int v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)char __src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x208], 8) = __src + 8;
  }
  else
  {
    id v9 = __src + 8;
    unsigned __int16 v10 = v6 - 8;
    id v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x208], 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int v4 = *(void *)v3;
  }
  return v4;
}

void sub_1000A7E70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1000A7EA8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x208], 8) = 0;

  unint64_t v3 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = 0;

  unsigned __int16 v10 = (void **)(a1 + 440);
  sub_100051568(&v10);
  int v4 = *(void **)(a1 + 416);
  if (v4)
  {
    *(void *)(a1 + 424) = v4;
    operator delete(v4);
  }
  id v5 = *(void **)(a1 + 392);
  if (v5)
  {
    *(void *)(a1 + 400) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 352);
  if (v6)
  {
    *(void *)(a1 + 360) = v6;
    operator delete(v6);
  }
  unsigned __int16 v10 = (void **)(a1 + 328);
  sub_100035EAC(&v10);

  unsigned __int16 v10 = (void **)(a1 + 96);
  sub_1000A7FF0(&v10);

  unsigned __int16 v10 = (void **)(a1 + 64);
  sub_1000A8BDC(&v10);

  unint64_t v7 = *(void **)(a1 + 32);
  if (v7)
  {
    *(void *)(a1 + 40) = v7;
    operator delete(v7);
  }
  uint64_t v8 = *(void **)(a1 + 8);
  if (v8)
  {
    *(void *)(a1 + 16) = v8;
    operator delete(v8);
  }
  return a1;
}

uint64_t sub_1000A7FA4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  int v4 = (void **)(a1 + 48);
  sub_100035EAC(&v4);
  return a1;
}

void sub_1000A7FF0(void ***a1)
{
  int v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    id v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 112;
        sub_1000A8088((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      id v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000A8088(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 56) = &off_100998428;
  unint64_t v3 = *(atomic_uint **)(a2 + 64);
  if (v3) {
    sub_1000368F4(v3);
  }
  *(void *)(a2 + 40) = &off_100998428;
  uint64_t v4 = *(atomic_uint **)(a2 + 48);
  if (v4) {
    sub_1000368F4(v4);
  }

  id v5 = *(void **)a2;
}

uint64_t sub_1000A8124(uint64_t a1)
{
  *(void *)(a1 + 56) = &off_100998428;
  uint64_t v2 = *(atomic_uint **)(a1 + 64);
  if (v2) {
    sub_1000368F4(v2);
  }
  *(void *)(a1 + 40) = &off_100998428;
  unint64_t v3 = *(atomic_uint **)(a1 + 48);
  if (v3) {
    sub_1000368F4(v3);
  }

  return a1;
}

uint64_t sub_1000A81B8(uint64_t a1)
{
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x208], 8) = 0u;
  *(_WORD *)(a1 + 124) = 0;
  *(_DWORD *)a1 = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 8_Block_object_dispose(&STACK[0x208], 8) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_DWORD *)(a1 + 119) = 0;
  *(void *)(a1 + 12_Block_object_dispose(&STACK[0x208], 8) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 139) = 1;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  *(_DWORD *)(a1 + 140) = 0;
  *(_WORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 16_Block_object_dispose(&STACK[0x208], 8) = 0;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 0;
  *(unsigned char *)(a1 + 196) = 0;
  *(void *)(a1 + 18_Block_object_dispose(&STACK[0x208], 8) = 0;
  *(_WORD *)(a1 + 197) = 257;
  *(_DWORD *)(a1 + 199) = 0;
  *(unsigned char *)(a1 + 203) = 8;
  *(_WORD *)(a1 + 280) = 256;
  *(_OWORD *)(a1 + 20_Block_object_dispose(&STACK[0x208], 8) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_WORD *)(a1 + 272) = 0;
  *(_DWORD *)(a1 + 282) = 0;
  *(unsigned char *)(a1 + 286) = 1;
  *(_DWORD *)(a1 + 320) = 0;
  *(_DWORD *)(a1 + 287) = 0;
  *(_WORD *)(a1 + 291) = 0;
  *(void *)(a1 + 309) = 0;
  *(void *)(a1 + 294) = 0;
  *(void *)(a1 + 302) = 0;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(_OWORD *)(a1 + 32_Block_object_dispose(&STACK[0x208], 8) = 0u;
  *(unsigned char *)(a1 + 376) = 1;
  *(_DWORD *)(a1 + 384) = 0;
  *(_OWORD *)(a1 + 392) = 0u;
  *(_OWORD *)(a1 + 40_Block_object_dispose(&STACK[0x208], 8) = 0u;
  *(_OWORD *)(a1 + 424) = 0u;
  *(_OWORD *)(a1 + 440) = 0u;
  *(void *)(a1 + 456) = 0;
  uint64_t v2 = +[NSMutableArray array];
  unint64_t v3 = *(void **)(a1 + 88);
  *(void *)(a1 + 8_Block_object_dispose(&STACK[0x208], 8) = v2;

  *(unsigned char *)(a1 + 4) = 0;
  uint64_t v4 = +[NSSet set];
  id v5 = *(void **)(a1 + 152);
  *(void *)(a1 + 152) = v4;

  return a1;
}

void sub_1000A8310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v15 = v11;
  a10 = v15;
  sub_100051568(&a10);
  uint64_t v17 = *(void **)(v10 + 416);
  if (v17)
  {
    *(void *)(v10 + 424) = v17;
    operator delete(v17);
  }
  unint64_t v18 = *v14;
  if (*v14)
  {
    *(void *)(v10 + 400) = v18;
    operator delete(v18);
  }
  sub_1000A7FA4(v12);

  sub_1000A7FF0(&a10);
  sub_1000A8BDC(&a10);

  uint64_t v19 = *(void **)(v10 + 32);
  if (v19)
  {
    *(void *)(v10 + 40) = v19;
    operator delete(v19);
  }
  int v20 = *v13;
  if (*v13)
  {
    *(void *)(v10 + 16) = v20;
    operator delete(v20);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1000A83B4(uint64_t a1)
{
  *(void *)(a1 + 32) = &off_100998428;
  uint64_t v2 = *(atomic_uint **)(a1 + 40);
  if (v2) {
    sub_1000368F4(v2);
  }
  *(void *)(a1 + 16) = &off_100998428;
  unint64_t v3 = *(atomic_uint **)(a1 + 24);
  if (v3) {
    sub_1000368F4(v3);
  }

  return a1;
}

uint64_t sub_1000A8448(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x2AAAAAAAAAAAAAALL) {
    abort();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555) {
    unint64_t v7 = 0x2AAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_100037714((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  id v11 = v8;
  uint64_t v12 = &v8[96 * v2];
  unint64_t v14 = &v8[96 * v7];
  sub_100036748(v6, (uint64_t)v12, a2);
  id v13 = v12 + 96;
  sub_1000A8554(a1, &v11);
  uint64_t v9 = a1[1];
  sub_1000A85F4(&v11);
  return v9;
}

void sub_1000A8540(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A85F4((void **)va);
  _Unwind_Resume(a1);
}

void sub_1000A8554(uint64_t *a1, void *a2)
{
  id v5 = (uint64_t *)*a1;
  uint64_t v4 = (uint64_t *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (uint64_t *)*a1)
  {
    do
    {
      v6 -= 96;
      v4 -= 12;
      sub_100036748((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void **sub_1000A85F4(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000A8628(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    sub_100036858(v4, i - 96);
  }
}

uint64_t sub_1000A8670(uint64_t *a1, long long *a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x249249249249249) {
    abort();
  }
  uint64_t v6 = (uint64_t)(a1 + 2);
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 4)) >= 0x124924924924924) {
    unint64_t v7 = 0x249249249249249;
  }
  else {
    unint64_t v7 = v3;
  }
  uint64_t v15 = a1 + 2;
  if (v7) {
    uint64_t v8 = (char *)sub_1000A8930((uint64_t)(a1 + 2), v7);
  }
  else {
    uint64_t v8 = 0;
  }
  id v11 = v8;
  uint64_t v12 = &v8[112 * v2];
  unint64_t v14 = &v8[112 * v7];
  sub_1000A8794(v6, (uint64_t)v12, a2);
  id v13 = v12 + 112;
  sub_1000A8890(a1, &v11);
  uint64_t v9 = a1[1];
  sub_1000A897C(&v11);
  return v9;
}

void sub_1000A8780(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000A897C((void **)va);
  _Unwind_Resume(a1);
}

__n128 sub_1000A8794(uint64_t a1, uint64_t a2, long long *a3)
{
  long long v5 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  *(_OWORD *)a2 = v5;
  long long v6 = a3[1];
  *(void *)(a2 + 32) = *((void *)a3 + 4);
  *(_OWORD *)(a2 + 16) = v6;
  uint64_t v7 = *((void *)a3 + 6);
  *(void *)(a2 + 40) = &off_100998428;
  *(void *)(a2 + 4_Block_object_dispose(&STACK[0x208], 8) = v7;
  if (v7) {
    sub_100037354(v7);
  }
  uint64_t v8 = *((void *)a3 + 8);
  *(void *)(a2 + 56) = &off_100998428;
  *(void *)(a2 + 64) = v8;
  if (v8) {
    sub_100037354(v8);
  }
  __n128 result = *(__n128 *)((char *)a3 + 72);
  *(void *)(a2 + 8_Block_object_dispose(&STACK[0x208], 8) = *((void *)a3 + 11);
  *(__n128 *)(a2 + 72) = result;
  uint64_t v10 = *((void *)a3 + 12);
  *((void *)a3 + 12) = 0;
  *(void *)(a2 + 96) = v10;
  *(_DWORD *)(a2 + 104) = *((_DWORD *)a3 + 26);
  return result;
}

void sub_1000A885C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v2;
  uint64_t v4 = *(atomic_uint **)(v1 + 48);
  if (v4) {
    sub_1000368F4(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1000A8890(uint64_t *a1, void *a2)
{
  long long v5 = (long long *)*a1;
  uint64_t v4 = (long long *)a1[1];
  uint64_t v6 = a2[1];
  if (v4 != (long long *)*a1)
  {
    do
    {
      v6 -= 112;
      v4 -= 7;
      sub_1000A8794((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *sub_1000A8930(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    sub_1000616DC();
  }
  return operator new(112 * a2);
}

void **sub_1000A897C(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_1000A89B0(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 112;
    sub_1000A8088(v4, i - 112);
  }
}

uint64_t sub_1000A89F8(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, char a8, char a9, char a10, char a11, char a12, char a13, char a14, char a15)
{
  id v22 = a2;
  id v23 = a3;
  id v24 = v22;
  *(void *)a1 = v24;
  id v25 = v23;
  *(void *)(a1 + _Block_object_dispose(&STACK[0x208], 8) = v25;
  *(_WORD *)(a1 + 16) = 0;
  int v26 = *(_DWORD *)(a4 + 16);
  *(_OWORD *)(a1 + 20) = *(_OWORD *)a4;
  *(_DWORD *)(a1 + 36) = v26;
  uint64_t v27 = *(void *)(a5 + 8);
  *(void *)(a1 + 40) = &off_100998428;
  *(void *)(a1 + 4_Block_object_dispose(&STACK[0x208], 8) = v27;
  if (v27) {
    sub_100037354(v27);
  }
  uint64_t v28 = *(void *)(a6 + 8);
  *(void *)(a1 + 56) = &off_100998428;
  *(void *)(a1 + 64) = v28;
  if (v28) {
    sub_100037354(v28);
  }
  *(unsigned char *)(a1 + 72) = a7;
  *(unsigned char *)(a1 + 73) = a8;
  *(unsigned char *)(a1 + 74) = a9;
  *(unsigned char *)(a1 + 75) = a10;
  *(unsigned char *)(a1 + 76) = a11;
  *(unsigned char *)(a1 + 77) = a13;
  *(unsigned char *)(a1 + 7_Block_object_dispose(&STACK[0x208], 8) = a14;
  *(unsigned char *)(a1 + 79) = a15;
  *(void *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 1;

  return a1;
}

void sub_1000A8B38(_Unwind_Exception *a1)
{
  *(void *)(v1 + 40) = v4;
  uint64_t v6 = *(atomic_uint **)(v1 + 48);
  if (v6) {
    sub_1000368F4(v6);
  }

  _Unwind_Resume(a1);
}

void sub_1000A8B74(id a1)
{
}

void sub_1000A8BB8()
{
}

void sub_1000A8BDC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        sub_100036858((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_1000A8C74(id a1)
{
}

void sub_1000A8CB8()
{
}

void sub_1000A8CDC(id a1)
{
}

void sub_1000A8D20()
{
}

void sub_1000A8D44(id a1)
{
}

void sub_1000A8D88()
{
}

void sub_1000A8DAC(id a1)
{
}

void sub_1000A8DF0()
{
}

void sub_1000A8E14(id a1)
{
}

void sub_1000A8E58()
{
}

uint64_t sub_1000A8E7C(uint64_t a1)
{
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 12_Block_object_dispose(&STACK[0x208], 8) = 0u;
  uint64_t v2 = a1 + 128;
  *(_OWORD *)(a1 + _Block_object_dispose(&STACK[0x208], 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_DWORD *)(a1 + 160) = 1065353216;
  *(_DWORD *)(a1 + 40) = 0;
  *(void *)(a1 + 104) = 0;
  unint64_t v3 = *(void **)(a1 + 120);
  *(void *)(a1 + 120) = 0;

  atomic_store(0, (unsigned __int8 *)(a1 + 96));
  unsigned __int8 v7 = 7;
  uint64_t v8 = &v7;
  uint64_t v4 = sub_1000A8FD0(v2, &v7, (uint64_t)&unk_1007B89C4, &v8);
  *(void *)((char *)v4 + 20) = 3263299584;
  *((unsigned char *)v4 + 2_Block_object_dispose(&STACK[0x208], 8) = 0;
  void v4[4] = 0xC2340000C2820000;
  unsigned __int8 v7 = 22;
  uint64_t v8 = &v7;
  long long v5 = sub_1000A8FD0(v2, &v7, (uint64_t)&unk_1007B89C4, &v8);
  *(void *)((char *)v5 + 20) = 3264217088;
  *((unsigned char *)v5 + 2_Block_object_dispose(&STACK[0x208], 8) = 0;
  void v5[4] = 0xC2700000C2A00000;
  return a1;
}

void sub_1000A8F88(_Unwind_Exception *a1)
{
  sub_1000A9450(v2);

  uint64_t v4 = *(void **)(v1 + 8);
  if (v4)
  {
    *(void *)(v1 + 16) = v4;
    operator delete(v4);
  }
  _Unwind_Resume(a1);
}

void *sub_1000A8FD0(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *a2;
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      id v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
            if (*((unsigned __int8 *)v11 + 16) == v6) {
              return v11;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
          id v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  id v11 = operator new(0x28uLL);
  *id v11 = 0;
  v11[1] = v6;
  *((unsigned char *)v11 + 16) = **a4;
  *((_DWORD *)v11 + 9) = 0;
  *(void *)((char *)v11 + 20) = 0;
  *(void *)((char *)v11 + 2_Block_object_dispose(&STACK[0x208], 8) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_1000A9204(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
      else {
        unint64_t v9 = v6;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v9);
  if (v20)
  {
    *id v11 = *v20;
LABEL_38:
    *int v20 = v11;
    goto LABEL_39;
  }
  *id v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1000A91F0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1000A9204(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      sub_1000A92F4(a1, prime);
    }
  }
}

void sub_1000A92F4(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      sub_1000616DC();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x208], 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v_Block_object_dispose(&STACK[0x208], 8) = a1 + 16;
      id v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            void *v7 = *v11;
            *id v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            id v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          id v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    uint64_t v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x208], 8) = 0;
  }
}

uint64_t sub_1000A9450(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      unint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  int8x8_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void sub_1000A949C(id a1)
{
}

void sub_1000A94E0()
{
}

void *sub_1000A9504(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = (uint64_t)result;
    sub_1000376C4(result, a4);
    return (void *)sub_1000A9568(v6, a2, a3);
  }
  return result;
}

uint64_t sub_1000A9568(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result;
  uint64_t v4 = *(void *)(result + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      __n128 result = sub_1000A95DC(v4 + v7, a2 + v7);
      v7 += 96;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(v3 + _Block_object_dispose(&STACK[0x208], 8) = v4;
  return result;
}

void sub_1000A95D4(_Unwind_Exception *a1)
{
  *(void *)(v1 + _Block_object_dispose(&STACK[0x208], 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_1000A95DC(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(_WORD *)(a1 + _Block_object_dispose(&STACK[0x208], 8) = *(_WORD *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = &off_100998428;
  *(void *)(a1 + 24) = v4;
  if (v4) {
    sub_100037354(v4);
  }
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = &off_100998428;
  *(void *)(a1 + 40) = v5;
  if (v5) {
    sub_100037354(v5);
  }
  int v6 = *(_DWORD *)(a2 + 48);
  *(unsigned char *)(a1 + 52) = *(unsigned char *)(a2 + 52);
  *(_DWORD *)(a1 + 4_Block_object_dispose(&STACK[0x208], 8) = v6;
  *(void *)(a1 + 56) = *(id *)(a2 + 56);
  int v7 = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 6_Block_object_dispose(&STACK[0x208], 8) = *(unsigned char *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v7;
  *(void *)(a1 + 72) = *(id *)(a2 + 72);
  int v8 = *(_DWORD *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_DWORD *)(a1 + 8_Block_object_dispose(&STACK[0x208], 8) = v8;
  return a1;
}

void sub_1000A96C4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 16) = v2;
  uint64_t v4 = *(atomic_uint **)(v1 + 24);
  if (v4) {
    sub_1000368F4(v4);
  }

  _Unwind_Resume(a1);
}

uint64_t *sub_1000A96F0(uint64_t **a1, uint64_t *a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  int v6 = (uint64_t **)sub_1000A9780(a1, a2, &v10, &v9, a3);
  __n128 result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_1000A9918((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned __int8 *sub_1000A9780(void *a1, uint64_t *a2, unsigned __int8 **a3, uint64_t *a4, unsigned __int8 *a5)
{
  uint64_t v9 = (unsigned __int8 *)(a1 + 1);
  if (a1 + 1 != a2 && !sub_10071D284(a5, (unsigned __int8 *)a2 + 32))
  {
    if (!sub_10071D284((unsigned __int8 *)a2 + 32, a5))
    {
      *a3 = (unsigned __int8 *)a2;
      *a4 = (uint64_t)a2;
      return (unsigned __int8 *)a4;
    }
    a4 = a2 + 1;
    uint64_t v13 = a2[1];
    if (v13)
    {
      float v14 = (unsigned __int8 *)a2[1];
      do
      {
        BOOL v15 = v14;
        float v14 = *(unsigned __int8 **)v14;
      }
      while (v14);
    }
    else
    {
      size_t v18 = (unsigned __int8 *)a2;
      do
      {
        BOOL v15 = (unsigned __int8 *)*((void *)v18 + 2);
        BOOL v17 = *(void *)v15 == (void)v18;
        size_t v18 = v15;
      }
      while (!v17);
    }
    if (v15 != v9)
    {
      if (!sub_10071D284(a5, v15 + 32)) {
        goto LABEL_28;
      }
      uint64_t v13 = *a4;
    }
    if (v13)
    {
      *a3 = v15;
      return v15;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
    }
    return (unsigned __int8 *)a4;
  }
  if ((uint64_t *)*a1 == a2)
  {
    unint64_t v12 = (unsigned __int8 *)a2;
LABEL_16:
    if (*a2)
    {
      *a3 = v12;
      return v12 + 8;
    }
    else
    {
      *a3 = (unsigned __int8 *)a2;
      return (unsigned __int8 *)a2;
    }
  }
  id v11 = (unsigned __int8 *)*a2;
  if (*a2)
  {
    do
    {
      unint64_t v12 = v11;
      id v11 = (unsigned __int8 *)*((void *)v11 + 1);
    }
    while (v11);
  }
  else
  {
    unint64_t v16 = a2;
    do
    {
      unint64_t v12 = (unsigned __int8 *)v16[2];
      BOOL v17 = *(void *)v12 == (void)v16;
      unint64_t v16 = (uint64_t *)v12;
    }
    while (v17);
  }
  if (sub_10071D284(v12 + 32, a5)) {
    goto LABEL_16;
  }
LABEL_28:

  return (unsigned __int8 *)sub_100085CE4((uint64_t)a1, a3, a5);
}

void sub_1000A9918(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  int v6 = a3 + 1;
  int v7 = operator new(0x48uLL);
  *a3 = v7;
  *int v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  void v7[2] = *(_OWORD *)a2;
  *((_DWORD *)v7 + 12) = *(_DWORD *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  *((void *)v7 + 7) = &off_100998428;
  *((void *)v7 + _Block_object_dispose(&STACK[0x208], 8) = v8;
  if (v8) {
    sub_100037354(v8);
  }
  *((unsigned char *)a3 + 16) = 1;
}

void sub_1000A99BC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000A99D8(v2, v3);
  _Unwind_Resume(a1);
}

void sub_1000A99D8(uint64_t a1, void *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    __p[7] = &off_100998428;
    uint64_t v3 = (atomic_uint *)__p[8];
    if (v3) {
      sub_1000368F4(v3);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

void sub_1000AA3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Block_object_dispose(&a67, 8);
  _Unwind_Resume(a1);
}

void sub_1000AA42C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v1 + 40), obj);
}

void sub_1000AA47C(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v1 + 40), obj);
}

void sub_1000AA4CC(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 32) + 8);
  id obj = *(id *)(v1 + 40);
  NSAppendPrintF_safe();
  objc_storeStrong((id *)(v1 + 40), obj);
}

void sub_1000AA8E4(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (dword_1009F85F0 <= 30)
  {
    id v7 = v3;
    if (dword_1009F85F0 != -1 || (v5 = _LogCategory_Initialize(), uint64_t v4 = v7, v5))
    {
      int v6 = CUPrintNSError();
      LogPrintF_safe();

      uint64_t v4 = v7;
    }
  }
  if (!*(unsigned char *)(a1 + 44))
  {
    uint64_t v8 = v4;
    [*(id *)(a1 + 32) invalidate];
    uint64_t v4 = v8;
  }
}

void sub_1000AB480(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = v3;
  if (*(void *)(a1 + 32) == *(void *)(*(void *)(a1 + 40) + 152))
  {
    if (v3)
    {
      if (dword_1009F85F0 > 90) {
        goto LABEL_2;
      }
      id v8 = v3;
      if (dword_1009F85F0 == -1)
      {
        int v5 = _LogCategory_Initialize();
        uint64_t v4 = v8;
        if (!v5) {
          goto LABEL_2;
        }
      }
      id v7 = CUPrintNSError();
      LogPrintF_safe();
    }
    else
    {
      if (dword_1009F85F0 > 30) {
        goto LABEL_2;
      }
      id v8 = 0;
      if (dword_1009F85F0 == -1)
      {
        int v6 = _LogCategory_Initialize();
        uint64_t v4 = 0;
        if (!v6) {
          goto LABEL_2;
        }
      }
      LogPrintF_safe();
    }
    uint64_t v4 = v8;
  }
LABEL_2:
}

void sub_1000AB5AC(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v7 = a2;
  id v8 = a3;
  id v9 = a4;
  if (dword_1009F85F0 <= 20 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v10 = CUPrintNSObjectOneLine();
    size_t v18 = CUPrintNSError();
    LogPrintF_safe();
  }
  id v11 = v7;
  if (!v11 || v9)
  {
    float v14 = *(void **)(a1 + 32);
    if (v9)
    {
      [*(id *)(a1 + 32) _xpcSendReplyError:v9 request:*(void *)(a1 + 40)];
    }
    else
    {
      BOOL v17 = CBErrorF();
      [v14 _xpcSendReplyError:v17 request:*(void *)(a1 + 40)];
    }
  }
  else
  {
    unint64_t v12 = (void *)_CFXPCCreateXPCObjectFromCFObject();
    if (v12)
    {
      uint64_t v13 = CUXPCDictionaryCreateReply();
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 3221225472;
      applier[2] = sub_1000AB7B0;
      applier[3] = &unk_1009992E0;
      applier[4] = v13;
      xpc_dictionary_apply(v12, applier);
      [*(id *)(a1 + 32) _xpcSendReply:v13];
    }
    else
    {
      BOOL v15 = *(void **)(a1 + 32);
      unint64_t v16 = CBErrorF();
      [v15 _xpcSendReplyError:v16 request:*(void *)(a1 + 40)];
    }
  }
}

uint64_t sub_1000AB7B0(uint64_t a1, const char *a2, void *a3)
{
  return 1;
}

void sub_1000AB7D0(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (dword_1009F85F0 <= 20)
  {
    id v7 = v2;
    if (dword_1009F85F0 != -1 || (int v5 = _LogCategory_Initialize(), v3 = v7, v5))
    {
      uint64_t v4 = CUPrintNSObjectOneLine();
      int v6 = CUPrintNSError();
      LogPrintF_safe();

      id v3 = v7;
    }
  }
}

void sub_1000ABDAC(uint64_t a1, void *a2)
{
  id v2 = a2;
  id v3 = v2;
  if (dword_1009F85F0 <= 20)
  {
    id v7 = v2;
    if (dword_1009F85F0 != -1 || (int v5 = _LogCategory_Initialize(), v3 = v7, v5))
    {
      uint64_t v4 = CUPrintNSObjectOneLine();
      int v6 = CUPrintNSError();
      LogPrintF_safe();

      id v3 = v7;
    }
  }
}

id sub_1000AC6C0(id result)
{
  uint64_t v1 = (void *)*((void *)result + 5);
  if (*((void *)result + 4) == v1[9])
  {
    id v2 = [*((id *)result + 5) _powerStateForClient];
    return [v1 _xpcPowerStateChanged:v2];
  }
  return result;
}

void sub_1000AC718(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) != *(void *)(v1 + 72)) {
    return;
  }
  id v3 = [*(id *)(v1 + 136) addressMonitor];
  uint64_t v4 = [v3 connectableAddressData];

  int v5 = [*(id *)(a1 + 32) advertisingAddressDataConnectable];
  id v24 = v4;
  id v6 = v5;
  if (v24 == v6)
  {

    goto LABEL_7;
  }
  if ((v24 == 0) != (v6 != 0))
  {
    unsigned __int8 v7 = [v24 isEqual:v6];

    if ((v7 & 1) == 0) {
      goto LABEL_9;
    }
LABEL_7:
    int v8 = 0;
    goto LABEL_10;
  }

LABEL_9:
  [*(id *)(a1 + 32) setAdvertisingAddressDataConnectable:v24];
  int v8 = 1;
LABEL_10:
  id v9 = [*(id *)(*(void *)(a1 + 40) + 136) addressMonitor];
  uint64_t v10 = [v9 nonConnectableAddressData];

  id v11 = [*(id *)(a1 + 32) advertisingAddressDataNonConnectable];
  id v12 = v10;
  id v13 = v11;
  if (v12 == v13)
  {

    goto LABEL_15;
  }
  float v14 = v13;
  if ((v12 == 0) != (v13 != 0))
  {
    unsigned __int8 v15 = [v12 isEqual:v13];

    if ((v15 & 1) == 0) {
      goto LABEL_17;
    }
LABEL_15:
    int v16 = 0;
    goto LABEL_18;
  }

LABEL_17:
  [*(id *)(a1 + 32) setAdvertisingAddressDataNonConnectable:v12];
  int v16 = 1;
LABEL_18:
  BOOL v17 = [*(id *)(*(void *)(a1 + 40) + 136) addressMonitor];
  size_t v18 = [v17 nonConnectableSecondaryAddressData];

  uint64_t v19 = [*(id *)(a1 + 32) advertisingAddressDataNonConnectableSecondary];
  id v20 = v18;
  id v21 = v19;
  if (v20 == v21)
  {

    goto LABEL_23;
  }
  id v22 = v21;
  if ((v20 == 0) != (v21 != 0))
  {
    unsigned __int8 v23 = [v20 isEqual:v21];

    if ((v23 & 1) == 0) {
      goto LABEL_26;
    }
LABEL_23:
    if ((v8 | v16) != 1) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }

LABEL_26:
  [*(id *)(a1 + 32) setAdvertisingAddressDataNonConnectableSecondary:v20];
LABEL_27:
  [*(id *)(a1 + 40) _xpcAdvertisingAddressChanged];
LABEL_28:
}

void sub_1000ACC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000ACCD8(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    id v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000AD320(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 152), 8);
  _Unwind_Resume(a1);
}

id sub_1000AD374(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    id v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void *sub_1000AD450(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v2 == result[10]) {
    return [result _xpcCBConnection:pairingCompletedWithDevice:error:];
  }
  return result;
}

void *sub_1000AD470(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v2 == result[10]) {
    return [result _xpcCBConnection:pairingPromptWithPairingInfo:];
  }
  return result;
}

void *sub_1000AD48C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[10]) {
    return [result _xpcSendEvent:a2];
  }
  return result;
}

void sub_1000AD4A8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = v3;
  if (v3)
  {
    id v4 = v3;
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (v6 = _LogCategory_Initialize(), id v4 = v10, v6))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        CUPrintNSError();
        id v9 = v8 = v5;
        LogPrintF_safe();

        id v4 = v10;
      }
    }
    [*(id *)(a1 + 40) _xpcSendReplyError:v4 request:*(void *)(a1 + 48) error:v8];
  }
  else
  {
    if (dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    uint64_t v7 = CUXPCDictionaryCreateReply();
    [*(id *)(a1 + 40) _xpcSendReply:v7];
  }
}

void sub_1000AD5F8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v10 = v3;
  if (v3)
  {
    id v4 = v3;
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (v6 = _LogCategory_Initialize(), id v4 = v10, v6))
      {
        uint64_t v5 = *(void *)(a1 + 32);
        CUPrintNSError();
        id v9 = v8 = v5;
        LogPrintF_safe();

        id v4 = v10;
      }
    }
    [*(id *)(a1 + 40) _xpcSendReplyError:v4 request:*(void *)(a1 + 48) error:v8];
  }
  else
  {
    if (dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    uint64_t v7 = CUXPCDictionaryCreateReply();
    [*(id *)(a1 + 40) _xpcSendReply:v7];
  }
}

void sub_1000ADA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000ADAA4(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000AE01C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  (*(void (**)(uint64_t))(v15 + 16))(v15);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000AE05C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

id sub_1000AE5C4(id result)
{
  uint64_t v1 = (void *)*((void *)result + 5);
  if (*((void *)result + 4) == v1[11])
  {
    id v2 = [*((id *)result + 5) _powerStateForClient];
    return [v1 _xpcPowerStateChanged:v2];
  }
  return result;
}

void sub_1000AE61C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v1 + 88))
  {
    id v2 = [*(id *)(v1 + 136) stackController];
    [v1 _xpcDiscoverableStateChanged:[v2 discoverableState]];
  }
}

void sub_1000AE694(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) == *(void *)(v1 + 88))
  {
    id v2 = [*(id *)(v1 + 136) stackController];
    [v1 _xpcInquiryStateChanged:[v2 inquiryState]];
  }
}

void *sub_1000AE70C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v6 == result[11]) {
    return [result _xpcReceivedRelayMessageType:a4 messageData:a5 conduitDevice:a2 sourceDevice:a3];
  }
  return result;
}

void *sub_1000AE734(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[11]) {
    return [result _xpcTipiChanged:a2];
  }
  return result;
}

void sub_1000AF3CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000AF43C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000AF808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  (*(void (**)(uint64_t))(v14 + 16))(v14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000AF848(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000AFBF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000AFC3C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B0464(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_1000B04BC(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B0598(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v8 = v3;
  if (dword_1009F85F0 <= 30)
  {
    if (dword_1009F85F0 != -1 || (int v5 = _LogCategory_Initialize(), v3 = v8, v5))
    {
      int v4 = CUPrintNSObjectOneLine();
      uint64_t v7 = CUPrintNSError();
      LogPrintF_safe();

      id v3 = v8;
    }
  }
  if (v3)
  {
    [*(id *)(a1 + 48) _xpcSendReplyError:v3 request:*(void *)(a1 + 56)];
  }
  else
  {
    uint64_t v6 = CUXPCDictionaryCreateReply();
    if (v6)
    {
      [*(id *)(a1 + 48) _xpcSendReply:v6];
    }
    else if (dword_1009F85F0 <= 90 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF_safe();
    }
  }
}

void sub_1000B09F0(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_1000B0A2C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        id v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B0B08(uint64_t a1, void *a2, void *a3)
{
  id v11 = a2;
  id v5 = a3;
  if (dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
  {
    id v10 = CUPrintNSError();
    LogPrintF_safe();
  }
  id v6 = v5;
  if (v6)
  {
    [*(id *)(a1 + 48) _xpcSendReplyError:v6 request:*(void *)(a1 + 56)];
  }
  else if (v11)
  {
    uint64_t v7 = CUXPCDictionaryCreateReply();
    if (v7)
    {
      CUXPCEncodeObject();
      [*(id *)(a1 + 48) _xpcSendReply:v7];
    }
    else if (dword_1009F85F0 <= 90 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF_safe();
    }
  }
  else
  {
    id v8 = *(void **)(a1 + 48);
    id v9 = CBErrorF();
    [v8 _xpcSendReplyError:v9 request:*(void *)(a1 + 56)];
  }
}

void sub_1000B25F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
}

id sub_1000B26AC(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        id v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    id v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

uint64_t sub_1000B2A70()
{
  if (dword_1009F85F0 <= 30)
  {
    if (dword_1009F85F0 != -1) {
      return LogPrintF_safe();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF_safe();
    }
  }
  return result;
}

void sub_1000B2AF0(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = *(void **)(a1 + 32);
  int v4 = [*(id *)(*(void *)(a1 + 40) + 136) testAdvertiser];

  uint64_t v5 = v8;
  if (v3 == v4)
  {
    if (v8)
    {
      if (dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v7 = CUPrintNSError();
        LogPrintF_safe();
      }
      [*(id *)(a1 + 32) invalidate:v7];
      [*(id *)(*(void *)(a1 + 40) + 136) setTestAdvertiser:0];
      goto LABEL_11;
    }
    if (dword_1009F85F0 <= 30)
    {
      if (dword_1009F85F0 != -1 || (v6 = _LogCategory_Initialize(), uint64_t v5 = 0, v6))
      {
        LogPrintF_safe();
LABEL_11:
        uint64_t v5 = v8;
      }
    }
  }
}

void sub_1000B2DE4(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = *(void **)(a1 + 32);
  int v4 = [*(id *)(*(void *)(a1 + 40) + 136) testAssertion];

  uint64_t v5 = v8;
  if (v3 == v4)
  {
    if (v8)
    {
      if (dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v7 = CUPrintNSError();
        LogPrintF_safe();
      }
      [*(id *)(a1 + 32) invalidate:v7];
      [*(id *)(*(void *)(a1 + 40) + 136) setTestAssertion:0];
      goto LABEL_11;
    }
    if (dword_1009F85F0 <= 30)
    {
      if (dword_1009F85F0 != -1 || (v6 = _LogCategory_Initialize(), uint64_t v5 = 0, v6))
      {
        LogPrintF_safe();
LABEL_11:
        uint64_t v5 = v8;
      }
    }
  }
}

void sub_1000B31C4(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(void **)(a1 + 32);
  int v4 = [*(id *)(*(void *)(a1 + 40) + 136) testDiscovery];

  if (v3 == v4 && dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
}

void sub_1000B3280(uint64_t a1, void *a2)
{
  id v5 = a2;
  id v3 = *(void **)(a1 + 32);
  int v4 = [*(id *)(*(void *)(a1 + 40) + 136) testDiscovery];

  if (v3 == v4 && dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
}

uint64_t sub_1000B333C()
{
  if (dword_1009F85F0 <= 30)
  {
    if (dword_1009F85F0 != -1) {
      return LogPrintF_safe();
    }
    uint64_t result = _LogCategory_Initialize();
    if (result) {
      return LogPrintF_safe();
    }
  }
  return result;
}

void sub_1000B33BC(uint64_t a1, void *a2)
{
  id v8 = a2;
  id v3 = *(void **)(a1 + 32);
  int v4 = [*(id *)(*(void *)(a1 + 40) + 136) testDiscovery];

  id v5 = v8;
  if (v3 == v4)
  {
    if (v8)
    {
      if (dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
      {
        uint64_t v7 = CUPrintNSError();
        LogPrintF_safe();
      }
      [*(id *)(a1 + 32) invalidate:v7];
      [*(id *)(*(void *)(a1 + 40) + 136) setTestDiscovery:0];
      goto LABEL_11;
    }
    if (dword_1009F85F0 <= 30)
    {
      if (dword_1009F85F0 != -1 || (v6 = _LogCategory_Initialize(), id v5 = 0, v6))
      {
        LogPrintF_safe();
LABEL_11:
        id v5 = v8;
      }
    }
  }
}

void sub_1000B37B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  (*(void (**)(uint64_t))(v11 + 16))(v11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B37F4(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        id v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B3FF0(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v12 = v3;
  if (v3)
  {
    id v4 = v3;
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (v8 = _LogCategory_Initialize(), id v4 = v12, v8))
      {
        uint64_t v5 = *(int *)(a1 + 48);
        if (v5 > 2) {
          int v6 = "?";
        }
        else {
          int v6 = off_100999530[v5];
        }
        CUPrintNSError();
        v10 = id v9 = v6;
        LogPrintF_safe();

        id v4 = v12;
      }
    }
    [*(id *)(a1 + 32) _xpcSendReplyError:v4 request:*(void *)(a1 + 40) error:v9];
  }
  else
  {
    xpc_object_t reply = xpc_dictionary_create_reply(*(xpc_object_t *)(a1 + 40));
    if (dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v11 = CUPrintNSError();
      LogPrintF_safe();
    }
    if (reply)
    {
      [*(id *)(a1 + 32) _xpcSendReply:reply];
    }
    else if (dword_1009F85F0 <= 90 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
    {
      LogPrintF_safe();
    }
  }
}

void sub_1000B4600(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B4640(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B4D28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

id sub_1000B4DA0(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B5298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_start(va, a14);
  (*(void (**)(uint64_t))(v14 + 16))(v14);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B52EC(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B5898(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 136), 8);
  _Unwind_Resume(a1);
}

id sub_1000B58E0(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B5D38(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_1000B5D7C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  (*(void (**)(uint64_t))(v26 + 16))(v26);
  _Block_object_dispose(&a26, 8);
  _Unwind_Resume(a1);
}

id sub_1000B62D4(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B66A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B66E8(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B6B40(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 112), 8);
  _Unwind_Resume(a1);
}

id sub_1000B6B84(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B6F20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B6F5C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        int v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    int v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B7318(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1000B733C(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  id v5 = objc_alloc((Class)CBDeviceIdentity);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id obj = *(id *)(v6 + 40);
  id v7 = [v5 initWithXPCObject:v4 error:&obj];

  objc_storeStrong((id *)(v6 + 40), obj);
  if (v7)
  {
    [*(id *)(a1 + 32) addObject:v7];
  }
  else if (dword_1009F85F0 <= 90 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
  {
    id v9 = CUPrintNSError();
    LogPrintF_safe();
  }
  return 1;
}

void sub_1000B7A00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B7A18(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (void *)v1[12];
  if (*(void **)(a1 + 40) == v2)
  {
    id v3 = v2;
    [v1 _xpcPowerStateChanged:[v1 _powerStateForClient]];
  }
}

void *sub_1000B7A8C(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) == result[12]) {
    return [result _xpcDeviceFound:a2];
  }
  return result;
}

void *sub_1000B7AB0(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) == result[12]) {
    return [result _xpcDeviceLost:a2];
  }
  return result;
}

void *sub_1000B7AD4(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) == result[12]) {
    return [result _xpcDevicesBuffered:a2];
  }
  return result;
}

void *sub_1000B7AF8(uint64_t a1)
{
  id result = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) == result[12]) {
    return [result _xpcSystemOverrideChanged];
  }
  return result;
}

void sub_1000B7B18(void *a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if ([v5 discoveryTypesContainCBDiscovery:a1[4]])
  {
    uint64_t v6 = *(void **)(a1[5] + 128);
    if (!v6)
    {
      id v7 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v8 = a1[5];
      id v9 = *(void **)(v8 + 128);
      *(void *)(v8 + 12_Block_object_dispose(&STACK[0x2C0], 8) = v7;

      uint64_t v6 = *(void **)(a1[5] + 128);
    }
    [v6 setObject:v5 forKeyedSubscript:v14];
    if (!*(void *)(*(void *)(a1[6] + 8) + 40))
    {
      xpc_object_t v10 = xpc_array_create(0, 0);
      uint64_t v11 = *(void *)(a1[6] + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
    xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
    [v5 encodeWithXPCObject:v13];
    xpc_array_append_value(*(xpc_object_t *)(*(void *)(a1[6] + 8) + 40), v13);
  }
}

void sub_1000B7FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

void sub_1000B7FCC(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (void *)v1[13];
  if (*(void **)(a1 + 40) == v2)
  {
    id v3 = v2;
    [v1 _xpcPowerStateChanged:[v1 _powerStateForClient]];
  }
}

void *sub_1000B8040(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) == result[13]) {
    return [result _xpcDeviceFound:a2];
  }
  return result;
}

void *sub_1000B8064(uint64_t a1, uint64_t a2)
{
  id result = *(void **)(a1 + 32);
  if (*(void *)(a1 + 40) == result[13]) {
    return [result _xpcDeviceLost:a2];
  }
  return result;
}

void sub_1000B8088(void *a1, void *a2, void *a3)
{
  id v14 = a2;
  id v5 = a3;
  if ([v5 discoveryTypesContainCBDiscovery:a1[4]])
  {
    uint64_t v6 = *(void **)(a1[5] + 128);
    if (!v6)
    {
      id v7 = objc_alloc_init((Class)NSMutableDictionary);
      uint64_t v8 = a1[5];
      id v9 = *(void **)(v8 + 128);
      *(void *)(v8 + 12_Block_object_dispose(&STACK[0x2C0], 8) = v7;

      uint64_t v6 = *(void **)(a1[5] + 128);
    }
    [v6 setObject:v5 forKeyedSubscript:v14];
    if (!*(void *)(*(void *)(a1[6] + 8) + 40))
    {
      xpc_object_t v10 = xpc_array_create(0, 0);
      uint64_t v11 = *(void *)(a1[6] + 8);
      id v12 = *(void **)(v11 + 40);
      *(void *)(v11 + 40) = v10;
    }
    xpc_object_t v13 = xpc_dictionary_create(0, 0, 0);
    [v5 encodeWithXPCObject:v13];
    xpc_array_append_value(*(xpc_object_t *)(*(void *)(a1[6] + 8) + 40), v13);
  }
}

void sub_1000B8518(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(v1 + 16))(v1);
  _Block_object_dispose((const void *)(v2 - 128), 8);
  _Unwind_Resume(a1);
}

id sub_1000B855C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B8638(uint64_t a1, void *a2, void *a3)
{
  id v7 = a2;
  id v5 = a3;
  if (dword_1009F85F0 <= 30 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
  {
    [*(id *)(a1 + 32) clientID];
    LogPrintF_safe();
  }
  uint64_t v6 = CUXPCDictionaryCreateReply();
  if (v6)
  {
    if (v5) {
      CUXPCEncodeNSError();
    }
    CUXPCEncodeObject();
    [*(id *)(a1 + 48) _xpcSendReply:v6];
  }
  else if (dword_1009F85F0 <= 90 && (dword_1009F85F0 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
}

void sub_1000B8A5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B8A9C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B8D14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  (*(void (**)(uint64_t))(v9 + 16))(v9);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000B8D4C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B8E28(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  if ((*(void *)(a1 + 40) & (unint64_t)[v5 discoveryFlags]) != 0)
  {
    xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
    [v5 encodeWithXPCObject:v4];
    xpc_array_append_value(*(xpc_object_t *)(a1 + 32), v4);
  }
}

void sub_1000B98BC(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v1 - 152), 8);
  _Unwind_Resume(a1);
}

id sub_1000B9924(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        uint64_t v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000B9A00(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 32) != *(void *)(v1 + 112)) {
    return;
  }
  unsigned __int8 v3 = [*(id *)(v1 + 136) supportsNCSecondaryAdvertisingInstance];
  int v4 = [*(id *)(*(void *)(a1 + 40) + 136) addressMonitor];
  uint64_t v5 = v4;
  if (v3) {
    [v4 nonConnectableSecondaryAddressData];
  }
  else {
  id v12 = [v4 nonConnectableAddressData];
  }

  uint64_t v6 = v12;
  if (v12)
  {
    uint64_t v7 = [*(id *)(a1 + 32) advertisingAddressData];
    id v8 = v12;
    id v9 = v7;
    if (v8 == v9)
    {
    }
    else
    {
      xpc_object_t v10 = v9;
      if (v9)
      {
        unsigned __int8 v11 = [v8 isEqual:v9];

        uint64_t v6 = v12;
        if (v11) {
          goto LABEL_14;
        }
      }
      else
      {
      }
      [*(id *)(a1 + 32) setAdvertisingAddressData:v8];
      [*(id *)(a1 + 40) _xpcAdvertisingAddressChanged];
    }
    uint64_t v6 = v12;
  }
LABEL_14:
}

void *sub_1000B9B34(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[14]) {
    return [result _xpcSpatialInteractionAOPDataReceived:a2];
  }
  return result;
}

id sub_1000B9B50(id result)
{
  uint64_t v1 = (void *)*((void *)result + 5);
  if (*((void *)result + 4) == v1[14])
  {
    id v2 = [*((id *)result + 5) _powerStateForClient];
    return [v1 _xpcPowerStateChanged:v2];
  }
  return result;
}

void *sub_1000B9BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[14]) {
    return [result _xpcDeviceFound:a2];
  }
  return result;
}

void *sub_1000B9BC4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[14]) {
    return [result _xpcDeviceLost:a2];
  }
  return result;
}

void *sub_1000B9BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[12]) {
    return [result _spatialInteractionDeviceFound:a2 checkOnly:0];
  }
  return result;
}

void *sub_1000B9C00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v3 == result[12]) {
    return [result _spatialInteractionDeviceLost:a2 removeUnmatched:1 reason:"BLE lost"];
  }
  return result;
}

void sub_1000B9C28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  if (v2 == *(void *)(v1 + 96))
  {
    if (*(unsigned char *)(v1 + 10))
    {
      [(id)v1 _xpcSystemOverrideChanged];
    }
    else
    {
      uint64_t v3 = *(NSObject **)(v1 + 144);
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000B9CD4;
      block[3] = &unk_100997230;
      void block[4] = v1;
      dispatch_async(v3, block);
    }
  }
}

id sub_1000B9CD4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _xpcSystemOverrideChanged];
}

void sub_1000B9CDC(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (([v4 discoveryFlags] & 0x40000) != 0) {
    [*(id *)(a1 + 32) _spatialInteractionDeviceFound:v4 checkOnly:0];
  }
}

void sub_1000BA088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, ...)
{
  va_start(va, a13);
  (*(void (**)(uint64_t))(v13 + 16))(v13);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

id sub_1000BA0D0(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        id v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000BA6BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  (*(void (**)(void))(a16 + 16))();
  _Block_object_dispose((const void *)(v16 - 160), 8);
  _Unwind_Resume(a1);
}

id sub_1000BA71C(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        id v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

void sub_1000BA7F8(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if ([v4 spatialInteractionPeerID] == *(_DWORD *)(a1 + 32)) {
    [v4 setSpatialInteractionPeerID:*(unsigned int *)(a1 + 36)];
  }
}

void sub_1000BACE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
}

id sub_1000BAD54(void *a1)
{
  uint64_t v2 = a1[6];
  id result = *(id *)(*(void *)(v2 + 8) + 40);
  if (result)
  {
    if (dword_1009F85F0 <= 90)
    {
      if (dword_1009F85F0 != -1 || (int v4 = _LogCategory_Initialize(), v2 = a1[6], v4))
      {
        id v8 = CUPrintNSError();
        LogPrintF_safe();

        uint64_t v2 = a1[6];
      }
    }
    uint64_t v5 = *(void *)(*(void *)(v2 + 8) + 40);
    uint64_t v6 = (void *)a1[4];
    uint64_t v7 = a1[5];
    return [v6 _xpcSendReplyError:v5 request:v7];
  }
  return result;
}

id sub_1000BBCA0()
{
  if (qword_1009FC170 != -1) {
    dispatch_once(&qword_1009FC170, &stru_1009994D8);
  }
  uint64_t v0 = (void *)qword_1009FC168;

  return v0;
}

void sub_1000BC558(uint64_t a1)
{
  uint64_t v2 = +[NSDate date];
  [v2 timeIntervalSince1970];
  double v4 = v3;

  uint64_t v5 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [*(id *)(*(void *)(a1 + 32) + 112) clientID]);
  uint64_t v6 = [*(id *)(a1 + 40) getSpatialInteractionDeviceTimestampArrayForClientID:v5];
  uint64_t v7 = [v6 lastObject];
  id v8 = v7;
  if (v7
    && [v7 reason] == *(unsigned __int8 *)(a1 + 48)
    && ([v8 timestamp], v9 * -1000.0 + v4 * 1000.0 < 1500.0))
  {
    [v8 setDuplicateCount:[v8 duplicateCount] + 1];
  }
  else
  {
    id v10 = objc_alloc_init((Class)CBSpatialInteractionDeviceTimestampInfo);
    [v10 setTimestamp:v4];
    [v10 setReason:*(unsigned __int8 *)(a1 + 48)];
    [v10 setDuplicateCount:0];
    if ((unint64_t)[v6 count] >= 9) {
      [v6 removeObjectAtIndex:0];
    }
    [v6 addObject:v10];
  }
  [*(id *)(a1 + 40) setSpatialInteractionDeviceTimestampArrayForClientID:v6 clientID:v5];
  uint64_t v11 = [*(id *)(a1 + 40) spatialInteractionDeviceTimestampArrayClientIDs];
  if (v11)
  {
    id v12 = (void *)v11;
    uint64_t v13 = [*(id *)(a1 + 40) spatialInteractionDeviceTimestampArrayDictionary];
    if (v13)
    {
      id v14 = (void *)v13;
      uint64_t v15 = [*(id *)(a1 + 40) spatialInteractionDeviceTimestampArrayClientIDs];
      id v16 = [v15 count];
      BOOL v17 = [*(id *)(a1 + 40) spatialInteractionDeviceTimestampArrayDictionary];
      id v18 = [v17 count];

      if (v16 == v18) {
        goto LABEL_16;
      }
    }
    else
    {
    }
  }
  uint64_t v19 = sub_1000BBCA0();
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
    sub_100744F28(v19);
  }

  [*(id *)(a1 + 40) setSpatialInteractionDeviceTimestampArrayDictionary:0];
  [*(id *)(a1 + 40) setSpatialInteractionDeviceTimestampArrayClientIDs:0];
LABEL_16:
}

void *sub_1000BD3BC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id result = *(void **)(a1 + 40);
  if (v2 == result[7]) {
    return [result _whbTimerFired];
  }
  return result;
}

void sub_1000BD7E0(id a1)
{
  os_log_t v1 = os_log_create("com.apple.bluetooth", "CBDaemonXPCConnection");
  uint64_t v2 = (void *)qword_1009FC168;
  qword_1009FC168 = (uint64_t)v1;
}

void sub_1000BDD30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BE4F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  _Unwind_Resume(a1);
}

void sub_1000BE9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  v23[2](v23);
  _Block_object_dispose(&a22, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000BEA78(uint64_t result)
{
  if (*(void *)(*(void *)(*(void *)(result + 32) + 8) + 24))
  {
    uint64_t v1 = result;
    if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_100999A58);
    }
    uint64_t v2 = qword_1009F8160;
    unint64_t v3 = *(void *)(*(void *)(*(void *)(v1 + 32) + 8) + 24);
    return sub_10000A678(v2, v3);
  }
  return result;
}

void sub_1000BEC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1000BF128(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = *(unsigned int *)(a1 + 48);
  id v11 = 0;
  [v2 setLowPowerModeWithReason:v3 error:&v11];
  id v4 = v11;
  uint64_t v5 = *(NSObject **)(*(void *)(a1 + 32) + 112);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1000BF1F8;
  block[3] = &unk_100999608;
  id v6 = *(id *)(a1 + 40);
  id v9 = v4;
  id v10 = v6;
  id v7 = v4;
  dispatch_async(v5, block);
}

uint64_t sub_1000BF1F8(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 40) + 16))(*(void *)(a1 + 40), *(void *)(a1 + 32));
}

void sub_1000BF598(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000BF5F4(uint64_t a1)
{
  if (qword_1009F8758 != -1) {
    dispatch_once(&qword_1009F8758, &stru_100999B18);
  }
  sub_100265BB0((uint64_t)off_1009F8750);
  if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
  v8[0] = @"errorCode";
  v8[1] = @"errorCount";
  v9[0] = &off_1009E0C98;
  v9[1] = &off_1009E0CB0;
  _DWORD v8[2] = @"timeToEnter";
  uint64_t v2 = +[NSNumber numberWithUnsignedLongLong:sub_10010BA04() - *(void *)(a1 + 32)];
  void v9[2] = v2;
  uint64_t v3 = +[NSDictionary dictionaryWithObjects:v9 forKeys:v8 count:3];

  uint64_t v4 = sub_100017768();
  sub_10004191C(__p, "LPM entry timeout");
  sub_1005C9A14(v4, (uint64_t *)__p, 3172327085);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v5 = sub_100050530();
  (*(void (**)(uint64_t, void *))(*(void *)v5 + 216))(v5, v3);
}

void sub_1000BF7BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1000BF8C0(uint64_t a1)
{
  if (qword_1009F8758 != -1) {
    dispatch_once(&qword_1009F8758, &stru_100999B18);
  }
  uint64_t result = sub_10026AF5C((uint64_t)off_1009F8750, *(void **)(a1 + 32));
  if (result)
  {
    if (dword_1009F8660 <= 90)
    {
      if (dword_1009F8660 != -1) {
        return LogPrintF_safe();
      }
      uint64_t v3 = result;
      int v4 = _LogCategory_Initialize();
      uint64_t result = v3;
      if (v4) {
        return LogPrintF_safe();
      }
    }
  }
  return result;
}

void sub_1000BFF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *a17)
{
  id v18 = v17;

  _Unwind_Resume(a1);
}

void sub_1000C0344(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1000C036C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(void **)(a1 + 40);
  id v7 = v3;
  if (!v4)
  {
    id v5 = objc_alloc_init((Class)NSMutableSet);
    id v6 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v5;

    int v4 = *(void **)(a1 + 40);
    id v3 = v7;
  }
  [v4 addObject:v3];
  if (!*(unsigned char *)(a1 + 48))
  {
    if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_100999C58);
    }
    sub_100451228(off_1009F7EE8, a1);
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_100999CD8);
    }
    sub_1000CED0C((uint64_t)off_1009F87A0 + 24, a1 + 8);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_100999BD8);
    }
    sub_100680938((uint64_t)off_1009F7EB8, a1 + 16, 0);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_100999AD8);
    }
    sub_1000616EC((uint64_t)off_1009F7EA8 + 64, a1 + 24);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_100999AB8);
    }
    sub_1004D12B0(off_1009F8088, a1 + 32);
    *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = 1;
  }
}

void sub_1000C0568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C0A20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0A84(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 40) removeObject:];
  if (*(unsigned char *)(a1 + 48) && ![*(id *)(a1 + 40) count])
  {
    if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_100999C58);
    }
    sub_100451364((uint64_t)off_1009F7EE8, a1);
    if (qword_1009F87A8 != -1) {
      dispatch_once(&qword_1009F87A8, &stru_100999CD8);
    }
    sub_100052718((uint64_t)off_1009F87A0 + 24, a1 + 8);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_100999AD8);
    }
    sub_100052718((uint64_t)off_1009F7EA8 + 64, a1 + 24);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_100999AB8);
    }
    sub_1004D13BC((uint64_t)off_1009F8088, a1 + 32);
    *(unsigned char *)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = 0;
  }
}

void sub_1000C0C24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C0DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C0EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C1154(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C1350(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C15F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_1000C1BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void (**a12)(void), uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35)
{
  a12[2]();
  _Block_object_dispose((const void *)(v37 - 152), 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000C1CDC(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (result)
  {
    if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
    {
      int v4 = CUPrintNSError();
      LogPrintF_safe();
    }
    id v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v3();
  }
  return result;
}

void sub_1000C1DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C1DD0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  id v3 = [*(id *)(a1 + 40) timer];

  if (v2 == v3)
  {
    uint64_t v6 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 40);
    id v5 = *(void **)(v6 + 8);
    CBErrorF();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    [v5 _connectDeviceCompleteRequest:v4];
  }
}

void sub_1000C1E70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C1FF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1000C220C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1000C2BE0(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 105) < 0) {
    operator delete(*(void **)(v2 - 128));
  }

  _Unwind_Resume(a1);
}

void sub_1000C2E3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C3268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000C3710(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C38B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C3D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000C3E20(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 231) < 0)
  {
    sub_10003B098(&v4, *(void **)(a2 + 208), *(void *)(a2 + 216));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 208);
    uint64_t v5 = *(void *)(a2 + 224);
  }
  if (SHIBYTE(v5) < 0)
  {
    id v3 = (void *)v4;
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *((void *)&v4 + 1) != 0;
    operator delete(v3);
  }
  else
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = SHIBYTE(v5) != 0;
  }
}

void sub_1000C3EB4(uint64_t a1)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_100999C18);
  }
  uint64_t v2 = qword_1009F7EC8;
  id v3 = *(void **)(a1 + 32);

  sub_10070BF0C(v2, v3);
}

void sub_1000C4228(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C426C(uint64_t a1)
{
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_100999C18);
  }
  uint64_t v2 = qword_1009F7EC8;
  id v3 = *(void **)(a1 + 32);

  sub_10070BF0C(v2, v3);
}

void sub_1000C4C88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,int a50,__int16 a51,char a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1000C4E84(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    uint64_t v3 = *(void *)(a2 + 16);
  }
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10003B098(__p, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 104);
    uint64_t v9 = *(void *)(a2 + 120);
  }
  if (v9 >= 0) {
    long long v4 = __p;
  }
  else {
    long long v4 = (void **)__p[0];
  }
  uint64_t v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v4, __p[0], __p[1], v9);
  uint64_t v6 = *(void *)(*(void *)(a1 + 40) + 8);
  id v7 = *(void **)(v6 + 40);
  *(void *)(v6 + 40) = v5;

  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1000C4F40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C533C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C5460(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C5998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void (**a12)(void), void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,id a44)
{
  a12[2](a12);
  _Block_object_dispose(&a39, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000C5A8C(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (result)
  {
    if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
    {
      long long v4 = CUPrintNSError();
      LogPrintF_safe();
    }
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v3();
  }
  return result;
}

void sub_1000C5B70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C5B80(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) timer];

  if (v2 == v3)
  {
    uint64_t v6 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v6 + 8);
    CBErrorF();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    [v5 _modifyDeviceCompleteRequest:v4];
  }
}

void sub_1000C5C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C5DE0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C6268(_Unwind_Exception *a1)
{
  _Block_object_dispose((const void *)(v5 - 128), 8);
  _Unwind_Resume(a1);
}

void sub_1000C6314()
{
}

void sub_1000C631C(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  [v3 modifyDevice:v2 leDevice:a2 settings:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_1000C6370(void *a1, uint64_t a2)
{
  uint64_t v3 = (void *)a1[4];
  uint64_t v2 = a1[5];
  uint64_t v4 = a1[6];
  uint64_t v5 = *(void *)(a1[7] + 8);
  id obj = *(id *)(v5 + 40);
  [v3 modifyDevice:v2 leDevice:a2 settings:v4 error:&obj];
  objc_storeStrong((id *)(v5 + 40), obj);
}

void sub_1000C7A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  _Unwind_Resume(a1);
}

void sub_1000C8170(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _Unwind_Exception *exception_object, void *a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  _Unwind_Resume(a1);
}

void sub_1000C82B8(uint64_t a1)
{
  uint64_t v2 = (char *)[*(id *)(a1 + 32) UTF8String];
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_100999B38);
  }
  uint64_t v3 = off_1009F7ED8;
  sub_1000305AC(v9, *(void *)(a1 + 40));
  sub_10004191C(__p, v2);
  sub_1006B7F8C((uint64_t)v3, (unsigned __int8 *)v9, (uint64_t)__p, 3);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_100999C78);
  }
  sub_100640F3C((os_unfair_lock_s *)qword_1009F7F08, *(void **)(a1 + 40));
  if (qword_1009F7F10 != -1) {
    dispatch_once(&qword_1009F7F10, &stru_100999C78);
  }
  uint64_t v4 = qword_1009F7F08;
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_100999C98);
  }
  if (off_1009F8780) {
    uint64_t v5 = (char *)off_1009F8780 + 48;
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void *)(a1 + 48);
  sub_1000305AC(v10, *(void *)(a1 + 40));
  sub_10004191C(v9, v2);
  sub_10063EC3C(v4, (uint64_t)v5, v6, v10, (uint64_t *)v9);
}

void sub_1000C8478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000C84B0(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_100999B38);
  }
  sub_1006C8110((uint64_t)off_1009F7ED8, *(void **)(a1 + 32), *(unsigned __int8 *)(a1 + 56), *(void **)(a1 + 40), 2);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_100999B38);
  }
  uint64_t v2 = off_1009F7ED8;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [*(id *)(a1 + 48) controllerInfo];
  sub_1006C840C((uint64_t)v2, v3, (int)[v4 fastLEConnectionAllowed]);
}

void sub_1000C8584(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C8598(uint64_t a1)
{
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_100999B38);
  }
  uint64_t v2 = off_1009F7ED8;
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = *(void **)(a1 + 40);

  sub_1006C84AC((uint64_t)v2, v3, v4);
}

void sub_1000C8748(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1000C94F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,id a55)
{
  v58[2](v58);
  _Block_object_dispose(&a50, 8);

  _Unwind_Resume(a1);
}

uint64_t sub_1000C9694(uint64_t a1)
{
  uint64_t result = *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 40);
  if (result)
  {
    if (dword_1009F8660 <= 20 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
    {
      id v4 = CUPrintNSError();
      LogPrintF_safe();
    }
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);
    return v3();
  }
  return result;
}

void sub_1000C977C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1000C978C(uint64_t result, uint64_t a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *(void *)(a2 + 16);
  return result;
}

void sub_1000C97A0(int a1, uint64_t a2, char a3)
{
  id v6 = (id)qword_1009FC178;
  id v7 = [v6 dispatchQueue];
  char v8 = v7;
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000CEC40;
    block[3] = &unk_1009999C0;
    void block[4] = v6;
    void block[5] = a2;
    int v10 = a1;
    char v11 = a3;
    dispatch_async(v7, block);
  }
}

void sub_1000C9864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C9874(int a1, uint64_t a2, char a3)
{
  id v6 = (id)qword_1009FC178;
  id v7 = [v6 dispatchQueue];
  char v8 = v7;
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000CEC54;
    block[3] = &unk_1009999C0;
    int v10 = a1;
    void block[4] = v6;
    void block[5] = a2;
    char v11 = a3;
    dispatch_async(v7, block);
  }
}

void sub_1000C9938(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C9948(int a1, uint64_t a2, char a3)
{
  id v6 = (id)qword_1009FC178;
  id v7 = [v6 dispatchQueue];
  char v8 = v7;
  if (v7)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000CEC6C;
    block[3] = &unk_1009999C0;
    int v10 = a1;
    void block[4] = v6;
    void block[5] = a2;
    char v11 = a3;
    dispatch_async(v7, block);
  }
}

void sub_1000C9A0C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000C9A1C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = [*(id *)(a1 + 40) timer];

  if (v2 == v3)
  {
    uint64_t v6 = a1 + 40;
    uint64_t v4 = *(void *)(a1 + 40);
    uint64_t v5 = *(void **)(v6 + 8);
    CBErrorF();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    [v5 _completePerformDeviceRequest:v4];
  }
}

void sub_1000C9ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000C9C64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1000C9F08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CA1DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CA448(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CA660(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CA860(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CAFA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1000CB3A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CB468(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CB590(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CB7CC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CBB04(_Unwind_Exception *a1)
{
  v2[2](v2);

  _Block_object_dispose((const void *)(v3 - 96), 8);
  _Unwind_Resume(a1);
}

void sub_1000CBB58(uint64_t a1)
{
  if (*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v2 = CUPrintNSError();
      LogPrintF_safe();
    }
    if (*(void *)(a1 + 40)) {
      **(void **)(a1 + 40) = *(id *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
    }
  }
}

void sub_1000CBC24(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CBC34(uint64_t a1, unsigned int a2, unint64_t a3, int a4)
{
  unint64_t v5 = a3;
  if (a3)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_100999B58);
    }
    unint64_t v5 = sub_1004A930C((uint64_t)off_1009F7EF8, v5);
  }
  if (a4) {
    int v7 = a4 + 310000;
  }
  else {
    int v7 = 0;
  }
  if (dword_1009F8660 > 30 || dword_1009F8660 == -1 && !_LogCategory_Initialize()) {
    goto LABEL_19;
  }
  if (a2 > 3)
  {
    if (!v5) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
  if (v5) {
LABEL_12:
  }
    sub_100474E18(v5, &__p);
LABEL_16:
  char v11 = CUPrintErrorCode();
  LogPrintF_safe();

  if (!v5)
  {
    if (a2 != 3) {
      return;
    }
    goto LABEL_26;
  }
  if (v15 < 0) {
    operator delete(__p);
  }
LABEL_19:
  if (a2 != 3) {
    return;
  }
  if (v5)
  {
    id v8 = (id)qword_1009FC178;
    uint64_t v9 = [v8 dispatchQueue];
    int v10 = v9;
    if (v9)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000CECD8;
      block[3] = &unk_100999A10;
      void block[4] = v8;
      void block[5] = v5;
      int v13 = v7;
      dispatch_async(v9, block);
    }
    return;
  }
LABEL_26:
  if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
}

void sub_1000CBE80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_start(va, a12);

  if (v12) {
    sub_100744B64((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

void sub_1000CBEB0(uint64_t a1, unint64_t a2, unsigned int a3)
{
  unint64_t v4 = a2;
  if (a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_100999B58);
    }
    unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, v4);
  }
  if (dword_1009F8660 > 30 || dword_1009F8660 == -1 && !_LogCategory_Initialize())
  {
    if (v4) {
      goto LABEL_13;
    }
LABEL_32:
    if (dword_1009F8660 > 90 || dword_1009F8660 == -1 && !_LogCategory_Initialize()) {
      return;
    }
LABEL_34:
    LogPrintF_safe();
    return;
  }
  if (v4)
  {
    sub_100474E18(v4, __p);
    if ((SBYTE7(v23) & 0x80u) == 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
  }
  else
  {
    uint64_t v6 = (void **)"NULL";
  }
  id v14 = v6;
  uint64_t v15 = a3;
  LogPrintF_safe();
  if (!v4) {
    goto LABEL_32;
  }
  if (SBYTE7(v23) < 0) {
    operator delete(__p[0]);
  }
LABEL_13:
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_100999BF8);
  }
  uint64_t v7 = sub_10060AEF8(off_1009F8760, a1);
  if (!v7)
  {
    if (dword_1009F8660 > 90 || dword_1009F8660 == -1 && !_LogCategory_Initialize()) {
      return;
    }
    goto LABEL_34;
  }
  unsigned int v8 = sub_100476054(v4);
  if (v8 > 0x18 || (char v9 = 1, ((1 << v8) & 0x1001980) == 0)) {
    char v9 = 0;
  }
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v24 = 0u;
  long long v25 = 0u;
  *(_OWORD *)__p = 0u;
  long long v23 = 0u;
  int v20 = 0;
  uint64_t v19 = 0;
  int v18 = 0;
  sub_10047B7A8(v4, &v20, (_DWORD *)&v19 + 1, &v19, &v18);
  if ((HIDWORD(v19) == 1452 || HIDWORD(v19) == 76) && (v19 - 780) <= 2)
  {
    if (dword_1009F8660 <= 50 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    strcpy((char *)__p, "0000");
    sub_10061625C(v21, (char *)__p);
    sub_100607F98(v7, v4);
  }
  if (v9)
  {
    RandomString();
    sub_10061625C(v21, (char *)__p);
    sub_100607F98(v7, v4);
  }
  strcpy((char *)__p, "0000");
  int v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", __p, v14, v15);
  id v11 = (id)qword_1009FC178;
  uint64_t v12 = [v11 dispatchQueue];
  int v13 = v12;
  if (v12)
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1000CECB4;
    block[3] = &unk_1009999E8;
    void block[5] = v10;
    void block[6] = v4;
    char v17 = v9;
    void block[4] = v11;
    dispatch_async(v12, block);
  }
}

void sub_1000CC3E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CC448(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  if (a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_100999B58);
    }
    unint64_t v2 = sub_1004A930C((uint64_t)off_1009F7EF8, v2);
  }
  if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    if (v2) {
      sub_100474E18(v2, &v8);
    }
    uint64_t v6 = CUPrintFlags32();
    LogPrintF_safe();

    if (v2)
    {
      if (v9 < 0) {
        operator delete(v8);
      }
      goto LABEL_11;
    }
  }
  else if (v2)
  {
LABEL_11:
    id v3 = (id)qword_1009FC178;
    unint64_t v4 = [v3 dispatchQueue];
    unint64_t v5 = v4;
    if (v4)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000CEC84;
      block[3] = &unk_100998A38;
      void block[4] = v3;
      void block[5] = v2;
      dispatch_async(v4, block);
    }

    return;
  }
  if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
}

void sub_1000CC640(_Unwind_Exception *a1)
{
  if (v1) {
    sub_100744B64(v3 - 56);
  }
  _Unwind_Resume(a1);
}

void sub_1000CC670(uint64_t a1, unint64_t a2, uint64_t a3, int a4)
{
  unint64_t v6 = a2;
  if (a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_100999B58);
    }
    unint64_t v6 = sub_1004A930C((uint64_t)off_1009F7EF8, v6);
  }
  if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    if (v6) {
      sub_100474E18(v6, &v13);
    }
    LogPrintF_safe();
    if (v6)
    {
      if (v14 < 0) {
        operator delete(v13);
      }
      goto LABEL_11;
    }
  }
  else if (v6)
  {
LABEL_11:
    id v7 = [objc_alloc((Class)NSString) initWithFormat:@"%06d", a3];
    id v8 = (id)qword_1009FC178;
    char v9 = [v8 dispatchQueue];
    int v10 = v9;
    if (v9)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000CECE8;
      block[3] = &unk_100999A38;
      int v12 = a4;
      void block[5] = v7;
      void block[6] = v6;
      void block[4] = v8;
      dispatch_async(v9, block);
    }

    return;
  }
  if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
}

void sub_1000CC8A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100744B64(v2 - 72);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CC8C8(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v4 = a2;
  if (a2)
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_100999B58);
    }
    unint64_t v4 = sub_1004A930C((uint64_t)off_1009F7EF8, v4);
  }
  if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    if (v4) {
      sub_100474E18(v4, &v10);
    }
    LogPrintF_safe();
    if (v4)
    {
      if (v11 < 0) {
        operator delete(v10);
      }
      goto LABEL_11;
    }
  }
  else if (v4)
  {
LABEL_11:
    id v5 = [objc_alloc((Class)NSString) initWithFormat:@"%u", a3];
    id v6 = (id)qword_1009FC178;
    id v7 = [v6 dispatchQueue];
    id v8 = v7;
    if (v7)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 3221225472;
      block[2] = sub_1000CEC9C;
      block[3] = &unk_1009996F8;
      void block[5] = v5;
      void block[6] = v4;
      void block[4] = v6;
      dispatch_async(v7, block);
    }

    return;
  }
  if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }
}

void sub_1000CCACC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100744B64(v2 - 56);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CCAF4()
{
  if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    LogPrintF_safe();
  }
}

void sub_1000CCC2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CCF18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CD200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_1000CD524(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  _Unwind_Resume(a1);
}

void sub_1000CD72C(uint64_t a1, uint64_t a2, int a3, __int16 a4, __int16 a5)
{
  id v17 = 0;
  id v9 = [objc_alloc((Class)CBDevice) initWithBTStackDevice:a2 error:&v17];
  id v10 = v17;
  if (v9)
  {
    if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    uint64_t v11 = sub_100019878();
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 3221225472;
    _OWORD v13[2] = sub_1000CD8F4;
    v13[3] = &unk_100998570;
    v13[4] = v9;
    v13[5] = a1;
    int v14 = a3;
    __int16 v15 = a4;
    __int16 v16 = a5;
    sub_100013018(v11, v13);
  }
  else if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    int v12 = CUPrintNSError();
    LogPrintF_safe();
  }
}

void sub_1000CD8D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CD8F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC180);
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v3 = *(id *)(v2 + 40);
  id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v15;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v15 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        id v8 = [v7 dispatchQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000CDAA4;
        block[3] = &unk_1009996F8;
        uint64_t v9 = *(void *)(a1 + 32);
        void block[4] = v7;
        void block[5] = v9;
        int v10 = *(_DWORD *)(a1 + 52);
        int v12 = *(_DWORD *)(a1 + 48);
        int v13 = v10;
        dispatch_async(v8, block);
      }
      id v4 = [v3 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC180);
}

void sub_1000CDA84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CDAA4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessoryCommandStatusWithDevice:*(void *)(a1 + 40) type:*(unsigned int *)(a1 + 48) result:*(unsigned __int16 *)(a1 + 52) reason:*(unsigned __int16 *)(a1 + 54)];
}

void sub_1000CDABC(uint64_t a1, uint64_t a2, uint64_t a3, char a4, unsigned int a5, uint64_t a6)
{
  int v23 = a3;
  __int16 v24 = WORD2(a3);
  id v22 = 0;
  id v10 = [objc_alloc((Class)CBDevice) initWithBTStackDevice:a2 error:&v22];
  id v11 = v22;
  if (v10)
  {
    id v12 = objc_alloc_init((Class)CBDevice);
    id v13 = [objc_alloc((Class)NSData) initWithBytes:&v23 length:6];
    [v12 setBtAddressData:v13];

    long long v14 = CUPrintAddress();
    [v12 setIdentifier:v14];

    id v15 = [objc_alloc((Class)NSData) initWithBytes:a6 length:a5];
    char v16 = a4;
    if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
    {
      long long v17 = [v12 identifier];
      int v18 = CUPrintNSDataHex();
      LogPrintF_safe();
    }
    uint64_t v19 = sub_100019878();
    v20[0] = _NSConcreteStackBlock;
    v20[1] = 3221225472;
    void v20[2] = sub_1000CDDB4;
    v20[3] = &unk_1009997A0;
    char v21 = v16;
    _OWORD v20[4] = v15;
    v20[5] = v10;
    void v20[6] = v12;
    v20[7] = a1;
    sub_100013018(v19, v20);

    goto LABEL_7;
  }
  if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    CUPrintNSError();
    id v12 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
LABEL_7:
  }
}

void sub_1000CDD50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CDDB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC180);
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  id v3 = *(id *)(v2 + 40);
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v14;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v14 != v5) {
          objc_enumerationMutation(v3);
        }
        id v7 = *(void **)(*((void *)&v13 + 1) + 8 * i);
        id v8 = [v7 dispatchQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000CDF70;
        block[3] = &unk_100999778;
        void block[4] = v7;
        char v12 = *(unsigned char *)(a1 + 64);
        long long v10 = *(_OWORD *)(a1 + 32);
        uint64_t v11 = *(void *)(a1 + 48);
        dispatch_async(v8, block);
      }
      id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC180);
}

void sub_1000CDF50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CDF70(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessoryReceivedRelayMessageType:*(unsigned __int8 *)(a1 + 64) messageData:*(void *)(a1 + 40) conduitDevice:*(void *)(a1 + 48) sourceDevice:*(void *)(a1 + 56)];
}

void sub_1000CDF84(uint64_t a1, uint64_t a2, int a3)
{
  id v25 = 0;
  id v18 = [objc_alloc((Class)CBDevice) initWithBTStackDevice:a2 error:&v25];
  id v17 = v25;
  if (v18)
  {
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_100999AB8);
    }
    id v6 = off_1009F8088;
    [v18 setConnectedServices:sub_1004D41B4((uint64_t)off_1009F8088, a2)];
    if (sub_10047B300(a2)) {
      uint64_t v7 = sub_1004D6124((uint64_t)v6, a2);
    }
    else {
      uint64_t v7 = 0xFFFFFFFFLL;
    }
    [v18 setSupportedServices:v7];
    [v18 setSupportedServices:((unint64_t)[v18 supportedServices] & 0xFFEFFFFF)];
    if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
    {
      CUPrintErrorCode();
      v16 = id v14 = v18;
      LogPrintF_safe();
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC180);
    long long v23 = 0u;
    long long v24 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    id v8 = *(id *)(a1 + 40);
    id v9 = [v8 countByEnumeratingWithState:&v21 objects:v26 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v22;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v22 != v10) {
            objc_enumerationMutation(v8);
          }
          char v12 = *(void **)(*((void *)&v21 + 1) + 8 * i);
          long long v13 = [v12 dispatchQueue:v14 withPriority:v16];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000CE310;
          block[3] = &unk_1009997C8;
          void block[4] = v12;
          void block[5] = v18;
          int v20 = a3;
          dispatch_async(v13, block);
        }
        id v9 = [v8 countByEnumeratingWithState:&v21 objects:v26 count:16];
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC180);
  }
  else if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    long long v15 = CUPrintNSError();
    LogPrintF_safe();
  }
}

void sub_1000CE2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1000CE310(uint64_t a1)
{
  return [*(id *)(a1 + 32) _connectDeviceUpdateRequests:*(void *)(a1 + 40) btResult:*(unsigned int *)(a1 + 48)];
}

void sub_1000CE320(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1000CE328(uint64_t a1, char a2, void *a3)
{
  id v5 = a3;
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC180);
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id obj = *(id *)(a1 + 40);
  id v6 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v16;
    do
    {
      for (uint64_t i = 0; i != v6; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v16 != v7) {
          objc_enumerationMutation(obj);
        }
        id v9 = *(void **)(*((void *)&v15 + 1) + 8 * i);
        uint64_t v10 = [v9 dispatchQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000CE500;
        block[3] = &unk_1009997F0;
        void block[4] = v9;
        id v13 = v5;
        char v14 = a2;
        dispatch_async(v10, block);
      }
      id v6 = [obj countByEnumeratingWithState:&v15 objects:v19 count:16];
    }
    while (v6);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC180);
}

void sub_1000CE4D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1000CE500(uint64_t a1)
{
  [*(id *)(a1 + 32) setFastLEConnectionInfoData:*(void *)(a1 + 40)];
  [*(id *)(a1 + 32) setFastLEConnectionInfoVersion:*(unsigned __int8 *)(a1 + 48)];
  if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    uint64_t v2 = *(unsigned __int8 *)(a1 + 48);
    LogPrintF_safe();
  }
  [*(id *)(a1 + 32) controllerDataChangedHandler:v2];
  id v3 = (void (**)(void))objc_claimAutoreleasedReturnValue();
  if (v3) {
    v3[2]();
  }
}

void sub_1000CE5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000CE5E0(uint64_t a1, char a2, void *a3)
{
}

void sub_1000CE5E8(uint64_t a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  void v5[2] = sub_1000CE66C;
  v5[3] = &unk_100997570;
  void v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1000CE66C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC180);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  id v3 = *(id *)(v2 + 40);
  id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
  if (v4)
  {
    uint64_t v5 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v4; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v12 != v5) {
          objc_enumerationMutation(v3);
        }
        uint64_t v7 = *(void **)(*((void *)&v11 + 1) + 8 * i);
        id v8 = [v7 dispatchQueue];
        v9[0] = _NSConcreteStackBlock;
        v9[1] = 3221225472;
        void v9[2] = sub_1000CE818;
        void v9[3] = &unk_100997550;
        v9[4] = v7;
        int v10 = *(_DWORD *)(a1 + 40);
        dispatch_async(v8, v9);
      }
      id v4 = [v3 countByEnumeratingWithState:&v11 objects:v15 count:16];
    }
    while (v4);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC180);
}

void sub_1000CE7F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000CE818(uint64_t a1)
{
  return [*(id *)(a1 + 32) localDeviceEvent:*(unsigned int *)(a1 + 40)];
}

void sub_1000CE828(uint64_t a1, int a2)
{
}

void sub_1000CE830(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
  if (a4 == 11 && (a3 + 1) <= 1 && a5)
  {
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC180);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id obj = *(id *)(a1 + 40);
    id v9 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(obj);
          }
          long long v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          long long v13 = [v12 dispatchQueue];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000CEA04;
          block[3] = &unk_100998570;
          int v16 = a3;
          int v17 = a5;
          void block[4] = v12;
          void block[5] = a2;
          dispatch_async(v13, block);
        }
        id v9 = [obj countByEnumeratingWithState:&v18 objects:v22 count:16];
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC180);
  }
}

void sub_1000CE9E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  _Unwind_Resume(a1);
}

void sub_1000CEA04(uint64_t a1)
{
  id v2 = objc_alloc((Class)CBDevice);
  uint64_t v3 = *(void *)(a1 + 40);
  id v12 = 0;
  id v4 = [v2 initWithBTStackDevice:v3 error:&v12];
  id v5 = v12;
  if (v4)
  {
    int v6 = [v4 btAddressData];
    if (dword_1009F8660 <= 30 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v7 = *(unsigned int *)(a1 + 48);
      long long v11 = CUPrintErrorCode();
      LogPrintF_safe();

      [*(id *)(a1 + 32) _connectDeviceUpdateRequests:v4 btResult:*(unsigned int *)(a1 + 52) v7 v6 v11];
    }
    else
    {
      [*(id *)(a1 + 32) _connectDeviceUpdateRequests:v4 btResult:*(unsigned int *)(a1 + 52) v8 v9 v10];
    }
    goto LABEL_7;
  }
  if (dword_1009F8660 <= 90 && (dword_1009F8660 != -1 || _LogCategory_Initialize()))
  {
    int v6 = CUPrintNSError();
    LogPrintF_safe();
LABEL_7:
  }
}

void sub_1000CEB74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CEBA8(uint64_t a1, uint64_t a2, int a3, int a4, int a5)
{
}

uint64_t sub_1000CEBB0(uint64_t a1)
{
  return a1;
}

void sub_1000CEBDC(uint64_t a1)
{
  operator delete();
}

id sub_1000CEC40(uint64_t a1)
{
  return [*(id *)(a1 + 32) _readRSSIWithConnectionHandle:*(void *)(a1 + 40) status:*(unsigned int *)(a1 + 48) rssi:*(char *)(a1 + 52)];
}

id sub_1000CEC54(uint64_t a1)
{
  return [*(id *)(a1 + 32) _readTxPowerWithFlags:2 status:*(unsigned int *)(a1 + 48) connectionHandle:*(void *)(a1 + 40) txPowerLevel:*(char *)(a1 + 52)];
}

id sub_1000CEC6C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _readTxPowerWithFlags:4 status:*(unsigned int *)(a1 + 48) connectionHandle:*(void *)(a1 + 40) txPowerLevel:*(char *)(a1 + 52)];
}

id sub_1000CEC84(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pairingPromptWithBTDevice:*(void *)(a1 + 40) pairingType:0 pinString:0 flags:0];
}

id sub_1000CEC9C(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pairingPromptWithBTDevice:*(void *)(a1 + 48) pairingType:1 pinString:*(void *)(a1 + 40) flags:0];
}

id sub_1000CECB4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    uint64_t v1 = 1;
  }
  else {
    uint64_t v1 = 2;
  }
  return [*(id *)(a1 + 32) _pairingPromptWithBTDevice:*(void *)(a1 + 48) pairingType:v1 pinString:*(void *)(a1 + 40) flags:0];
}

id sub_1000CECD8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pairingCompletedWithBTDevice:*(void *)(a1 + 40) result:*(unsigned int *)(a1 + 48)];
}

id sub_1000CECE8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _pairingPromptWithBTDevice:*(void *)(a1 + 48) pairingType:4 * (*(_DWORD *)(a1 + 56) != 0) pinString:*(void *)(a1 + 40) flags:0];
}

void sub_1000CED0C(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  id v5 = *(char **)(a1 + 8);
  id v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        id v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1000CED98(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1000CED98(uint64_t a1, char *__src, char *a3)
{
  uint64_t v3 = a3;
  id v4 = __src;
  uint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    long long v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    long long v20 = &v19[8 * v16];
    __p = v19;
    long long v27 = v20;
    long long v28 = v20;
    long long v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        long long v23 = (char *)sub_1000405F8(v8, v22);
        long long v20 = &v23[8 * (v22 >> 2)];
        __p = v23;
        long long v27 = v20;
        long long v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)long long v20 = *(void *)v3;
    long long v28 = v20 + 8;
    id v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)char __src = *(void *)a3;
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    uint64_t v10 = v6 - 8;
    long long v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)id v4 = *(void *)v3;
  }
  return v4;
}

void sub_1000CEFA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1000CEFD8(id a1)
{
}

void sub_1000CF01C()
{
}

void sub_1000CF040(id a1)
{
}

void sub_1000CF084()
{
}

void sub_1000CF0A8(id a1)
{
}

void sub_1000CF0FC()
{
}

void sub_1000CF120(id a1)
{
}

void sub_1000CF164()
{
}

void sub_1000CF188(id a1)
{
}

void sub_1000CF1CC()
{
}

void sub_1000CF1F0(id a1)
{
}

void sub_1000CF234()
{
}

void sub_1000CF258(id a1)
{
}

void sub_1000CF29C()
{
}

void sub_1000CF2C0(id a1)
{
}

void sub_1000CF304()
{
}

void sub_1000CF328(id a1)
{
}

void sub_1000CF36C()
{
}

void sub_1000CF390(id a1)
{
}

void sub_1000CF3D4()
{
}

void sub_1000CF3F8(id a1)
{
}

void sub_1000CF43C()
{
}

void sub_1000CF460(id a1)
{
}

void sub_1000CF4A4()
{
}

void sub_1000CF4C8(id a1)
{
}

void sub_1000CF50C()
{
}

void sub_1000CF530(id a1)
{
}

void sub_1000CF574()
{
}

void sub_1000CF598(id a1)
{
}

void sub_1000CF5DC()
{
}

void sub_1000CF600(id a1)
{
}

void sub_1000CF644()
{
}

void sub_1000CF668(id a1)
{
}

void sub_1000CF6AC()
{
}

void sub_1000CF6D0(id a1)
{
}

void sub_1000CF714()
{
}

void sub_1000CF738(id a1)
{
}

void sub_1000CF77C()
{
}

void sub_1000CF7A0(id a1)
{
}

void sub_1000CF7E4()
{
}

void sub_1000CF808(id a1)
{
}

void sub_1000CF84C()
{
}

void sub_1000CFBC8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000CFC20()
{
  JUMPOUT(0x1000CFC10);
}

void sub_1000D03C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  objc_sync_exit(v20);

  _Block_object_dispose(&a15, 8);
  _Unwind_Resume(a1);
}

void sub_1000D03F4(uint64_t a1, void *a2, void *a3)
{
  id v10 = a2;
  id v5 = a3;
  if (!*(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 40))
  {
    xpc_object_t v6 = xpc_array_create(0, 0);
    uint64_t v7 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v8 = *(void **)(v7 + 40);
    *(void *)(v7 + 40) = v6;
  }
  uint64_t v9 = [v5 xpcObjectRepresentation];
  xpc_array_append_value(*(xpc_object_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), v9);
}

void sub_1000D04A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D064C(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 24);
  id v7 = v3;
  if (!v4)
  {
    id v5 = objc_alloc_init((Class)NSMutableSet);
    xpc_object_t v6 = *(void **)(a1 + 24);
    *(void *)(a1 + 24) = v5;

    id v4 = *(void **)(a1 + 24);
    id v3 = v7;
  }
  [v4 addObject:v3];
  if (!*(unsigned char *)(a1 + 32))
  {
    if (dword_1009F87B0 <= 30 && (dword_1009F87B0 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_10099A060);
    }
    sub_100451228(off_1009F7EE8, a1);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_10099A080);
    }
    sub_100061288((uint64_t)off_1009F7EF8 + 240, a1 + 8);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_10099A040);
    }
    sub_1000616EC((uint64_t)off_1009F7EA8 + 64, a1 + 16);
    *(unsigned char *)(a1 + 32) = 1;
  }
}

void sub_1000D07D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D08C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 24) removeObject:];
  if (*(unsigned char *)(a1 + 32) && ![*(id *)(a1 + 24) count])
  {
    if (dword_1009F87B0 <= 30 && (dword_1009F87B0 != -1 || _LogCategory_Initialize())) {
      LogPrintF_safe();
    }
    if (qword_1009F7EF0 != -1) {
      dispatch_once(&qword_1009F7EF0, &stru_10099A060);
    }
    sub_100451364((uint64_t)off_1009F7EE8, a1);
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_10099A080);
    }
    sub_100052718((uint64_t)off_1009F7EF8 + 240, a1 + 8);
    if (qword_1009F7EB0 != -1) {
      dispatch_once(&qword_1009F7EB0, &stru_10099A040);
    }
    sub_100052718((uint64_t)off_1009F7EA8 + 64, a1 + 16);
    *(unsigned char *)(a1 + 32) = 0;
  }
}

void sub_1000D0A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D0B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D0C78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D0D20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D0DC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D1034(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1000D10B0(id a1, NSString *a2, AudioAccessoryDeviceInfo *a3, BOOL *a4)
{
  id v4 = a3;
  [(AudioAccessoryDeviceInfo *)v4 setChangeFlags:0];
  [(AudioAccessoryDeviceInfo *)v4 setDiscoveryFlags:[(AudioAccessoryDeviceInfo *)v4 discoveryFlags] & 0xFFFFFFFFFFDFFFFFLL];
}

void sub_1000D110C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D1120(uint64_t a1, uint64_t a2, void *a3)
{
  id v9 = a3;
  id v4 = [v9 changeFlags];
  id v5 = [v9 discoveryFlags];
  if (v4 && v5)
  {
    if (dword_1009F87B0 <= 30 && (dword_1009F87B0 != -1 || _LogCategory_Initialize()))
    {
      uint64_t v8 = [v9 identifier];
      LogPrintF_safe();
    }
    xpc_object_t v6 = (void (**)(void, void))objc_retainBlock(*(id *)(*(void *)(a1 + 32) + 48));
    if (v6)
    {
      id v7 = [v9 xpcObjectRepresentation];
      ((void (**)(void, void *))v6)[2](v6, v7);
    }
    goto LABEL_12;
  }
  if (dword_1009F87B0 <= 10 && (dword_1009F87B0 != -1 || _LogCategory_Initialize()))
  {
    xpc_object_t v6 = [v9 identifier];
    LogPrintF_safe();
LABEL_12:
  }
}

void sub_1000D1284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D13EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1000D15C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D16B8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  id v22 = 0;
  id v16 = [objc_alloc((Class)CBDevice) initWithBTStackDevice:a2 error:&v22];
  id v15 = v22;
  if (v16)
  {
    id v7 = [objc_alloc((Class)NSData) initWithBytes:a4 length:a3];
    if (dword_1009F87B0 <= 30 && (dword_1009F87B0 != -1 || _LogCategory_Initialize()))
    {
      id v14 = v16;
      LogPrintF_safe();
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC190);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = *(id *)(a1 + 24);
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          long long v13 = [v12 dispatchQueue:v14];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000D19C4;
          block[3] = &unk_100999680;
          void block[4] = v12;
          void block[5] = v7;
          void block[6] = v16;
          dispatch_async(v13, block);
        }
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC190);
    goto LABEL_14;
  }
  if (dword_1009F87B0 <= 90 && (dword_1009F87B0 != -1 || _LogCategory_Initialize()))
  {
    CUPrintNSError();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
LABEL_14:
  }
}

void sub_1000D1970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1000D19C4(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessoryConversationDetectMessageData:*(void *)(a1 + 40) device:*(void *)(a1 + 48)];
}

void sub_1000D19D4(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  id v22 = 0;
  id v16 = [objc_alloc((Class)CBDevice) initWithBTStackDevice:a2 error:&v22];
  id v15 = v22;
  if (v16)
  {
    id v7 = [objc_alloc((Class)NSData) initWithBytes:a4 length:a3];
    if (dword_1009F87B0 <= 30 && (dword_1009F87B0 != -1 || _LogCategory_Initialize()))
    {
      id v14 = v16;
      LogPrintF_safe();
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC190);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = *(id *)(a1 + 24);
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          long long v13 = [v12 dispatchQueue:v14];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000D1CE0;
          block[3] = &unk_100999680;
          void block[4] = v12;
          void block[5] = v7;
          void block[6] = v16;
          dispatch_async(v13, block);
        }
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC190);
    goto LABEL_14;
  }
  if (dword_1009F87B0 <= 90 && (dword_1009F87B0 != -1 || _LogCategory_Initialize()))
  {
    CUPrintNSError();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
LABEL_14:
  }
}

void sub_1000D1C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1000D1CE0(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessoryContextMessageData:*(void *)(a1 + 40) device:*(void *)(a1 + 48)];
}

void sub_1000D1CF0(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  id v22 = 0;
  id v16 = [objc_alloc((Class)CBDevice) initWithBTStackDevice:a2 error:&v22];
  id v15 = v22;
  if (v16)
  {
    id v7 = [objc_alloc((Class)NSData) initWithBytes:a4 length:a3];
    if (dword_1009F87B0 <= 30 && (dword_1009F87B0 != -1 || _LogCategory_Initialize()))
    {
      id v14 = v16;
      LogPrintF_safe();
    }
    os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC190);
    long long v20 = 0u;
    long long v21 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    id v8 = *(id *)(a1 + 24);
    id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v9)
    {
      uint64_t v10 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v10) {
            objc_enumerationMutation(v8);
          }
          uint64_t v12 = *(void **)(*((void *)&v18 + 1) + 8 * i);
          long long v13 = [v12 dispatchQueue];
          block[0] = _NSConcreteStackBlock;
          block[1] = 3221225472;
          block[2] = sub_1000D1FFC;
          block[3] = &unk_100999680;
          void block[4] = v12;
          void block[5] = v7;
          void block[6] = v16;
          dispatch_async(v13, block);
        }
        id v9 = [v8 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v9);
    }

    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC190);
    goto LABEL_14;
  }
  if (dword_1009F87B0 <= 90 && (dword_1009F87B0 != -1 || _LogCategory_Initialize()))
  {
    CUPrintNSError();
    id v7 = (id)objc_claimAutoreleasedReturnValue();
    LogPrintF_safe();
LABEL_14:
  }
}

void sub_1000D1FA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11)
{
  _Unwind_Resume(a1);
}

id sub_1000D1FFC(uint64_t a1)
{
  return [*(id *)(a1 + 32) _accessoryPMEConfigData:*(void *)(a1 + 40) device:*(void *)(a1 + 48)];
}

void sub_1000D200C(uint64_t a1)
{
  if (dword_1009F87B0 <= 30 && (dword_1009F87B0 != -1 || _LogCategory_Initialize())) {
    LogPrintF_safe();
  }

  sub_1000D20A0(a1);
}

void sub_1000D20A0(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC190);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(a1 + 24);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v2);
        }
        xpc_object_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        id v7 = [v6 dispatchQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000D2408;
        block[3] = &unk_100997450;
        void block[4] = v6;
        dispatch_async(v7, block);
      }
      id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC190);
}

void sub_1000D2220(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2240(uint64_t a1)
{
}

void sub_1000D2248(uint64_t a1, int a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC190);
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  id v4 = *(id *)(a1 + 24);
  id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
  if (v5)
  {
    uint64_t v6 = *(void *)v13;
    do
    {
      for (uint64_t i = 0; i != v5; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v13 != v6) {
          objc_enumerationMutation(v4);
        }
        id v8 = *(void **)(*((void *)&v12 + 1) + 8 * i);
        long long v9 = [v8 dispatchQueue];
        v10[0] = _NSConcreteStackBlock;
        v10[1] = 3221225472;
        _DWORD v10[2] = sub_1000D23F0;
        v10[3] = &unk_100997550;
        _OWORD v10[4] = v8;
        int v11 = a2;
        dispatch_async(v9, v10);
      }
      id v5 = [v4 countByEnumeratingWithState:&v12 objects:v16 count:16];
    }
    while (v5);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC190);
}

void sub_1000D23D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000D23F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) localDeviceEvent:*(unsigned int *)(a1 + 40)];
}

void sub_1000D2400(uint64_t a1, int a2)
{
}

id sub_1000D2408(uint64_t a1)
{
  return [*(id *)(a1 + 32) updateAccessoryInfo];
}

uint64_t sub_1000D2410(uint64_t a1)
{
  return a1;
}

void sub_1000D243C(uint64_t a1)
{
  operator delete();
}

void sub_1000D2490(id a1)
{
}

void sub_1000D24D4()
{
}

void sub_1000D24F8(id a1)
{
}

void sub_1000D253C()
{
}

void sub_1000D2560(id a1)
{
}

void sub_1000D25A4()
{
}

void sub_1000D26B4(_Unwind_Exception *a1)
{
  id v5 = v4;

  _Unwind_Resume(a1);
}

void sub_1000D27C8(uint64_t a1, void *a2)
{
  id v3 = a2;
  id v4 = *(void **)(a1 + 8);
  id v7 = v3;
  if (!v4)
  {
    id v5 = objc_alloc_init((Class)NSMutableSet);
    uint64_t v6 = *(void **)(a1 + 8);
    *(void *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = v5;

    id v4 = *(void **)(a1 + 8);
    id v3 = v7;
  }
  [v4 addObject:v3];
  if (!*(unsigned char *)(a1 + 16))
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_10099A150);
    }
    sub_100680938((uint64_t)off_1009F7EB8, a1, 0);
    *(unsigned char *)(a1 + 16) = 1;
  }
}

void sub_1000D288C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D2958(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D296C(uint64_t a1, void *a2)
{
  id v3 = a2;
  [*(id *)(a1 + 8) removeObject:];
  if (*(unsigned char *)(a1 + 16) && ![*(id *)(a1 + 8) count])
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_10099A150);
    }
    sub_100680A44((uint64_t)off_1009F7EB8, a1);
    *(unsigned char *)(a1 + 16) = 0;
  }
}

void sub_1000D2A0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1000D2D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1000D2EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

unint64_t sub_1000D2EDC(uint64_t a1, unsigned __int8 a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC1A0);
  if (qword_1009FC1A8)
  {
    *(_DWORD *)&v5[3] = 0;
    *(_DWORD *)id v5 = 0;
    sub_1002296C8(a2, (uint64_t)v5);
    unint64_t v3 = ((unint64_t)v5[1] << 40) | ((unint64_t)v5[2] << 32) | ((unint64_t)v5[3] << 24) | ((unint64_t)v5[4] << 16) | ((unint64_t)v5[5] << 8) | v5[6] | ((unint64_t)v5[0] << 48);
  }
  else
  {
    unint64_t v3 = 0;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC1A0);
  return v3;
}

void sub_1000D30D4(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1000D3150;
  v3[3] = &unk_100997528;
  void v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1000D3150(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1009FC1A0);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  id v2 = *(id *)(v1 + 8);
  id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v10;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v10 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v9 + 1) + 8 * i);
        id v7 = [v6 dispatchQueue];
        block[0] = _NSConcreteStackBlock;
        block[1] = 3221225472;
        block[2] = sub_1000D32F0;
        block[3] = &unk_100997450;
        void block[4] = v6;
        dispatch_async(v7, block);
      }
      id v3 = [v2 countByEnumeratingWithState:&v9 objects:v13 count:16];
    }
    while (v3);
  }

  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1009FC1A0);
}

void sub_1000D32D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1000D32F0(uint64_t a1)
{
  return [*(id *)(a1 + 32) addressChanged:0];
}

void sub_1000D3300(id a1)
{
}

void sub_1000D3344()
{
}

void IOBTDebug::create(IOBTDebug *this)
{
}

uint64_t IOBTDebug::init(IOBTDebug *this)
{
  kern_return_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  const char *v24;

  std::mutex::lock((std::mutex *)this);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    long long v23 = 136315138;
    uint64_t v24 = "init";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: \n", (uint8_t *)&v23, 0xCu);
  }
  CFDictionaryRef v2 = IOServiceMatching("BTDebug");
  if (v2)
  {
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v2);
    *((_DWORD *)this + 16) = MatchingService;
    if (MatchingService)
    {
      uint64_t v4 = IOServiceOpen(MatchingService, mach_task_self_, 0, (io_connect_t *)this + 17);
      if (!v4)
      {
        long long v21 = 1;
        goto LABEL_13;
      }
      if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        sub_1000D3EB0(v4);
      }
    }
    else
    {
      long long v13 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
      if (v13) {
        sub_1000D3E34(v13, v14, v15, v16, v17, v18, v19, v20);
      }
    }
  }
  else
  {
    id v5 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v5) {
      sub_1000D3DB8(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  long long v21 = 0;
LABEL_13:
  std::mutex::unlock((std::mutex *)this);
  return v21;
}

void sub_1000D3554(_Unwind_Exception *exception_object)
{
}

void IOBTDebug::~IOBTDebug(IOBTDebug *this)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    long long v9 = "~IOBTDebug";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: \n", buf, 0xCu);
  }
  io_connect_t v2 = *((_DWORD *)this + 17);
  if (v2)
  {
    IOServiceClose(v2);
    *((_DWORD *)this + 17) = 0;
  }
  io_object_t v3 = *((_DWORD *)this + 16);
  if (v3)
  {
    IOObjectRelease(v3);
    *((_DWORD *)this + 16) = 0;
  }
  uint64_t v4 = *((void *)this + 9);
  if (*((void *)this + 10))
  {
    if (v4)
    {
      block[0] = _NSConcreteStackBlock;
      block[1] = 0x40000000;
      block[2] = sub_1000D3750;
      block[3] = &unk_10099A170;
      void block[4] = this;
      dispatch_sync(v4, block);
      dispatch_release(*((dispatch_object_t *)this + 9));
      *((void *)this + 9) = 0;
      goto LABEL_11;
    }
    id v5 = "fQueue";
    int v6 = 65;
LABEL_16:
    __assert_rtn("~IOBTDebug", "IOBTDebug.cpp", v6, v5);
  }
  if (v4)
  {
    id v5 = "!fQueue";
    int v6 = 78;
    goto LABEL_16;
  }
LABEL_11:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    long long v9 = "~IOBTDebug";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: --done\n", buf, 0xCu);
  }
  std::mutex::~mutex((std::mutex *)this);
}

void sub_1000D3744(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_100060588(a1);
}

void sub_1000D3750(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  std::mutex::lock((std::mutex *)v1);
  io_connect_t v2 = *(IONotificationPort **)(v1 + 80);
  if (v2)
  {
    IONotificationPortDestroy(v2);
    *(void *)(v1 + 80) = 0;
  }

  std::mutex::unlock((std::mutex *)v1);
}

void sub_1000D379C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void IOBTDebug::setNotificationPort(IOBTDebug *this)
{
  if (!*((void *)this + 10))
  {
    if (*((void *)this + 9)) {
      sub_1000D3F9C();
    }
    io_connect_t v2 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
    dispatch_queue_t v3 = dispatch_queue_create("com.apple.BTDebug.IOBTDebug", v2);
    *((void *)this + 9) = v3;
    if (!v3) {
      sub_1000D3F44();
    }
    uint64_t v4 = IONotificationPortCreate(kIOMainPortDefault);
    *((void *)this + 10) = v4;
    if (!v4) {
      sub_1000D3F70();
    }
    id v5 = *((void *)this + 9);
    IONotificationPortSetDispatchQueue(v4, v5);
  }
}

uint64_t IOBTDebug::coreDump(std::mutex *this, uint64_t a2, const char *a3, void (*a4)(void *, int), void *a5)
{
  long long v39 = 0u;
  long long v40 = 0u;
  *(_OWORD *)reference = 0u;
  long long v38 = 0u;
  std::mutex::lock(this);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    long long v33 = "coreDump";
    __int16 v34 = 1024;
    int v35 = a2;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: size %u\n", buf, 0x12u);
  }
  if (!a4)
  {
    BOOL v10 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v10) {
      sub_1000D4044(v10, v11, v12, v13, v14, v15, v16, v17);
    }
  }
  IOBTDebug::setNotificationPort((IOBTDebug *)this);
  long long v18 = *(IONotificationPort **)&this[1].__m_.__opaque[8];
  if (v18)
  {
    uint64_t input = a2;
    reference[1] = (uint64_t)a4;
    *(void *)&long long v38 = a5;
    mach_port_t sig_high = HIDWORD(this[1].__m_.__sig);
    mach_port_t MachPort = IONotificationPortGetMachPort(v18);
    size_t v21 = strlen(a3);
    uint64_t v22 = IOConnectCallAsyncMethod(sig_high, 0, MachPort, reference, 3u, &input, 1u, a3, v21 + 1, 0, 0, 0, 0);
  }
  else
  {
    uint64_t v22 = 3758097112;
    BOOL v23 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR);
    if (v23) {
      sub_1000D3FC8(v23, v24, v25, v26, v27, v28, v29, v30);
    }
  }
  std::mutex::unlock(this);
  return v22;
}

void sub_1000D39E4(_Unwind_Exception *exception_object)
{
}

uint64_t IOBTDebug::enableLogging(uint64_t a1, uint64_t a2, unsigned int a3, int *a4, int *a5, unsigned int a6)
{
  uint64_t v6 = 3758097090;
  if (a4)
  {
    id v7 = a5;
    if (a5)
    {
      if (a6 - 1 <= 2)
      {
        long long v9 = a4;
        unsigned int v11 = a2;
        uint64_t v13 = (std::mutex *)__chkstk_darwin(a1, a2);
        uint64_t v15 = &buf[-v14];
        std::mutex::lock(v13);
        if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315906;
          BOOL v23 = "enableLogging";
          __int16 v24 = 1024;
          unsigned int v25 = v11;
          __int16 v26 = 1024;
          unsigned int v27 = a3;
          __int16 v28 = 1024;
          unsigned int v29 = a6;
          _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: bufferSize %u, numReads %u, numLogs %u\n", buf, 0x1Eu);
        }
        input[0] = v11;
        input[1] = a3;
        uint64_t v16 = v15 + 4;
        uint64_t v17 = a6;
        do
        {
          int v19 = *v7++;
          int v18 = v19;
          int v20 = *v9++;
          *(v16 - 1) = v20;
          _DWORD *v16 = v18;
          v16 += 2;
          --v17;
        }
        while (v17);
        uint64_t v6 = IOConnectCallMethod(*(_DWORD *)(a1 + 68), 1u, input, 2u, v15, 8 * a6, 0, 0, 0, 0);
        std::mutex::unlock((std::mutex *)a1);
      }
    }
  }
  return v6;
}

void sub_1000D3BB4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IOBTDebug::disableLogging(IOBTDebug *this)
{
  std::mutex::lock((std::mutex *)this);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    id v5 = "disableLogging";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: \n", (uint8_t *)&v4, 0xCu);
  }
  uint64_t v2 = IOConnectCallScalarMethod(*((_DWORD *)this + 17), 2u, 0, 0, 0, 0);
  std::mutex::unlock((std::mutex *)this);
  return v2;
}

void sub_1000D3CA0(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t IOBTDebug::dumpLogs(IOBTDebug *this, const char *a2)
{
  std::mutex::lock((std::mutex *)this);
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    id v8 = "dumpLogs";
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "IOBTDebug::%s: \n", (uint8_t *)&v7, 0xCu);
  }
  size_t v4 = strlen(a2);
  uint64_t v5 = IOConnectCallStructMethod(*((_DWORD *)this + 17), 3u, a2, v4 + 1, 0, 0);
  std::mutex::unlock((std::mutex *)this);
  return v5;
}

void sub_1000D3DA4(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_1000D3DB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D3E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D3EB0(int a1)
{
  int v1 = 136315394;
  uint64_t v2 = "init";
  __int16 v3 = 1024;
  int v4 = a1;
  _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "IOBTDebug::%s: could not open service: 0x%x\n", (uint8_t *)&v1, 0x12u);
}

void sub_1000D3F44()
{
}

void sub_1000D3F70()
{
  __assert_rtn("setNotificationPort", "IOBTDebug.cpp", 135, "fNotificationPort != MACH_PORT_NULL");
}

void sub_1000D3F9C()
{
}

void sub_1000D3FC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1000D4044(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1000D40C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_1000D410C(a1, a2, a3, a4, a5);
  uint64_t v7 = sub_1000D46F8(v6, v5, v10);
  sub_1000D412C(v7, (uint64_t)&off_10099A318, v8);
  return (v11 >> 2) & 1;
}

void sub_1000D410C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  bzero(va, 0x98uLL);
}

void sub_1000D412C(uint64_t a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  sub_1000D4EA4((uint64_t)va, a2, (uint64_t)va1);
}

BOOL sub_1000D4144(void *a1, uint64_t a2, uint64_t a3)
{
  memset(a1, 0, 0x40uLL);
  *a1 = a2;
  a1[1] = a3;

  return sub_1000D4198((uint64_t)a1);
}

BOOL sub_1000D4198(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 16);
  uint64_t v2 = *(uint64_t **)a1;
  unsigned int v3 = *(unsigned __int16 *)(*(void *)a1 + 32);
  if (v1 < v3)
  {
    uint64_t v4 = *v2;
    uint64_t v5 = *(unsigned __int16 *)(a1 + 18);
    unsigned int v6 = *(_DWORD *)(*v2 + 4 * v5);
    *(unsigned char *)(a1 + 30) = BYTE1(v6);
    if ((v6 & 3) == 2)
    {
      LODWORD(v7) = *(_DWORD *)(v4 + 4 * (v5 + 1));
      unsigned int v8 = *(_DWORD *)(v4 + 4 * (v5 + 2));
      int v9 = *(_DWORD *)(v4 + 4 * (v5 + 3));
      *(_WORD *)(a1 + 2_Block_object_dispose(&STACK[0x2C0], 8) = HIWORD(v6);
      *(_WORD *)(a1 + 24) = (v7 >> 2) & 0xFFC0 | (v6 >> 2);
    }
    else if ((v6 & 3) == 1)
    {
      unsigned int v10 = *(_DWORD *)(v4 + 4 * v5 + 4);
      *(_WORD *)(a1 + 2_Block_object_dispose(&STACK[0x2C0], 8) = HIWORD(v6) & 0xFFF;
      *(_WORD *)(a1 + 24) = (v10 >> 22) & 0x3C0 | (v6 >> 2);
      LODWORD(v7) = v6 >> 28;
      unsigned int v8 = (unsigned __int16)v10;
      int v9 = HIWORD(v10) & 0xFFF;
    }
    else if ((v6 & 3) != 0)
    {
      uint64_t v7 = (_DWORD *)(v4 + 4 * v5);
      unsigned int v11 = v7[1];
      unsigned int v8 = v7[2];
      int v9 = v7[3];
      *(_WORD *)(a1 + 2_Block_object_dispose(&STACK[0x2C0], 8) = v7[4];
      *(_WORD *)(a1 + 24) = (v11 >> 2) & 0xFFC0 | (v6 >> 2);
      LOBYTE(v7) = v11;
    }
    else
    {
      *(_WORD *)(a1 + 2_Block_object_dispose(&STACK[0x2C0], 8) = 1;
      *(_WORD *)(a1 + 24) = v6 >> 2;
      LODWORD(v7) = HIBYTE(v6) & 0xF;
      unsigned int v8 = BYTE2(v6);
      int v9 = v6 >> 28;
    }
    char v12 = BYTE1(v6);
    *(_WORD *)(a1 + 26) = v9;
    uint64_t v13 = *(void *)(a1 + 8);
    if (v13)
    {
      uint64_t v14 = (void *)(v13 + v8);
      int v15 = v6 & 0x3000;
      uint64_t v16 = (char *)(a1 + 28);
      if ((v12 & 0x40 | 0x80) != 0x80) {
        uint64_t v16 = 0;
      }
      *(void *)(a1 + 32) = v14;
      if (v15 == 0x2000) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = 0;
      }
      if ((_BYTE)v7) {
        uint64_t v17 = (char *)v14 - (char)v7;
      }
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = v17;
      if ((v12 & 0xC0) == 0x80) {
        *(void *)(a1 + 40) = *v14;
      }
      else {
        *(void *)(a1 + 40) = v14;
      }
    }
    else
    {
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = 0;
    }
    if ((v12 & 0xE) == 8) {
      uint64_t v18 = *(void *)(v2[1] + 8 * *(unsigned __int16 *)(a1 + 22));
    }
    else {
      uint64_t v18 = 0;
    }
    *(void *)(a1 + 56) = v18;
  }
  return v1 < v3;
}

BOOL sub_1000D4320(void *a1, void *a2)
{
  uint64_t v4 = a2 + 1;
  uint64_t v5 = *(_DWORD ***)(*a2 + 16);
  if ((**v5 & 0xC000) != 0x8000) {
    uint64_t v4 = (void *)*v4;
  }
  BOOL result = sub_1000D4144(a1, (uint64_t)v5, (uint64_t)v4);
  a1[6] = a2 + 3;
  return result;
}

BOOL sub_1000D4378(_WORD *a1)
{
  return a1[8] != 0;
}

double sub_1000D43B0(_WORD *a1)
{
  unsigned __int16 v1 = a1[8] + 1;
  a1[8] = v1;
  if (*(unsigned __int16 *)(*(void *)a1 + 32) <= v1)
  {
    double result = 0.0;
    *((void *)a1 + 2) = 0;
  }
  else
  {
    uint64_t v2 = (unsigned __int16)a1[9];
    int v3 = *(_DWORD *)(**(void **)a1 + 4 * v2);
    a1[9] = v2 + (1 << (v3 & 3));
    __int16 v4 = a1[10];
    if ((v3 & 0x3000) == 0) {
      ++v4;
    }
    a1[10] = v4;
    if ((v3 & 0xE00) == 0x800) {
      __int16 v5 = a1[11] + 1;
    }
    else {
      __int16 v5 = a1[11];
    }
    a1[11] = v5;
  }
  return result;
}

uint64_t sub_1000D4420(unsigned __int16 *a1, unsigned int a2)
{
  unsigned int v2 = a1[12];
  if (v2 == a2) {
    return 1;
  }
  if (*(unsigned __int16 *)(*(void *)a1 + 36) >= a2)
  {
    int v6 = a1[8];
    if (v2 > a2) {
      a1[8] = *(_WORD *)(*(void *)a1 + 32);
    }
    while (1)
    {
      sub_1000D43B0(a1);
      sub_1000D45B4();
      if (((a2 ^ (v7 >> 2)) & 0x3F) == 0)
      {
        sub_1000D4198((uint64_t)a1);
        if (a1[12] == a2 && (a1[15] & 0xF) != 0xA) {
          break;
        }
      }
      if (a1[8] == v6)
      {
        sub_1000D4198((uint64_t)a1);
        return 0;
      }
    }
    return 1;
  }
  return 0;
}

BOOL sub_1000D44D8(uint64_t a1)
{
  if ((*(unsigned char *)(a1 + 30) & 0xF) == 0xA) {
    return 1;
  }
  int v3 = *(unsigned __int16 *)(a1 + 16);
  while (1)
  {
    sub_1000D43B0((_WORD *)a1);
    sub_1000D45B4();
    if ((v4 & 0xF00) == 0xA00) {
      break;
    }
    if (*(unsigned __int16 *)(a1 + 16) == v3)
    {
      sub_1000D4198(a1);
      return 0;
    }
  }

  return sub_1000D4198(a1);
}

uint64_t sub_1000D4564(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_WORD *)(a3 + 26) == 16)
  {
    int v3 = *(uint64_t (***)(uint64_t, uint64_t, void))(a3 + 40);
    if (v3)
    {
      if (a1)
      {
        __int16 v4 = *v3;
        if (*v3)
        {
          __int16 v5 = v3 + 1;
          return v4(a1, a3, v5);
        }
      }
      if (a2)
      {
        __int16 v4 = *v3;
        if (*v3)
        {
          __int16 v5 = v3 + 1;
          a1 = a2;
          return v4(a1, a3, v5);
        }
      }
    }
  }
  return 1;
}

void sub_1000D45C8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3)
  {
    unint64_t v3 = a3;
    if (a2 || *(uint64_t (**)(uint64_t, unsigned char *, uint64_t))a1 == sub_1000D46CC)
    {
      if (*(void *)(a1 + 16) >= a3 && ((*(uint64_t (**)(uint64_t))a1)(a1) & 1) != 0)
      {
        *(void *)(a1 + 16) -= v3;
      }
      else
      {
        sub_1000D5AB0();
        sub_1000D5ABC();
        *(void *)(a1 + 24) = v5;
      }
    }
    else
    {
      while (v3 >= 0x11)
      {
        if (!sub_1000D45C8(a1, v6, 16)) {
          return;
        }
        v3 -= 16;
      }
      sub_1000D45C8(a1, v6, v3);
    }
  }
}

uint64_t sub_1000D46CC(uint64_t a1, unsigned char *a2, uint64_t a3)
{
  unint64_t v3 = *(char **)(a1 + 8);
  *(void *)(a1 + _Block_object_dispose(&STACK[0x2C0], 8) = &v3[a3];
  if (a2 && a3)
  {
    do
    {
      char v4 = *v3++;
      *a2++ = v4;
      --a3;
    }
    while (a3);
  }
  return 1;
}

uint64_t sub_1000D46F8@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = sub_1000D46CC;
  a3[1] = result;
  a3[2] = a2;
  a3[3] = 0;
  return result;
}

void sub_1000D4710(uint64_t a1, uint64_t a2)
{
}

void sub_1000D4718(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  sub_1000D5AE0();
  sub_1000D48B8(v6, (uint64_t)&v16);
  if (v7)
  {
    int v8 = v16;
    if ((char)v16 < 0)
    {
      int v8 = v16 & 0x7F;
      unsigned __int8 v9 = 7;
      while (1)
      {
        sub_1000D48B8(v3, (uint64_t)&v16);
        if (!v10) {
          break;
        }
        int v11 = v9;
        if (v9 < 0x20u)
        {
          v8 |= (v16 & 0x7F) << v9;
        }
        else
        {
          if (v9 >= 0x3Fu) {
            int v12 = 1;
          }
          else {
            int v12 = 255;
          }
          BOOL v14 = v8 < 0 && v12 == v16;
          if ((v16 & 0x7F) == 0) {
            BOOL v14 = 1;
          }
          if (v9 > 0x3Fu || !v14) {
            goto LABEL_28;
          }
        }
        v9 += 7;
        if ((v16 & 0x80) == 0)
        {
          if (v11 == 28 && (v16 & 0x70) != 0)
          {
LABEL_28:
            sub_1000D5AB0();
            sub_1000D5ABC();
            *(void *)(v3 + 24) = v15;
            return;
          }
          goto LABEL_3;
        }
      }
    }
    else
    {
LABEL_3:
      *char v4 = v8;
    }
  }
  else if (a3 && !*(void *)(v3 + 16))
  {
    *a3 = 1;
  }
}

void sub_1000D482C()
{
  sub_1000D5AE0();
  unsigned __int8 v2 = 0;
  uint64_t v3 = 0;
  while (1)
  {
    unsigned __int8 v4 = v2;
    if (v2 >= 0x40u) {
      break;
    }
    sub_1000D48B8(v0, (uint64_t)&v7);
    if (!v5) {
      return;
    }
    v3 |= (unint64_t)(v7 & 0x7F) << v4;
    unsigned __int8 v2 = v4 + 7;
    if ((v7 & 0x80) == 0)
    {
      void *v1 = v3;
      return;
    }
  }
  sub_1000D5AB0();
  sub_1000D5ABC();
  *(void *)(v0 + 24) = v6;
}

void sub_1000D48B8(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 16) && ((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))a1)(a1, a2, 1) & 1) != 0)
  {
    --*(void *)(a1 + 16);
  }
  else
  {
    sub_1000D5AB0();
    sub_1000D5ABC();
    *(void *)(a1 + 24) = v3;
  }
}

void sub_1000D492C(uint64_t a1, int *a2, unsigned int *a3, unsigned char *a4)
{
  *a4 = 0;
  *a2 = 0;
  *a3 = 0;
  sub_1000D4718(a1, (uint64_t)&v8, a4);
  if (v6)
  {
    char v7 = v8;
    *a3 = v8 >> 3;
    *a2 = v7 & 7;
  }
}

void sub_1000D4988(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
      do
        sub_1000D45C8(a1, (uint64_t)&v7, 1uLL);
      while (v3 && v7 < 0);
      break;
    case 1:
      unint64_t v4 = 8;
      goto LABEL_11;
    case 2:
      sub_1000D4710(a1, (uint64_t)&v8);
      if (v5) {
        sub_1000D45C8(a1, 0, v8);
      }
      break;
    case 5:
      unint64_t v4 = 4;
LABEL_11:
      sub_1000D45C8(a1, 0, v4);
      break;
    default:
      sub_1000D5AB0();
      sub_1000D5ABC();
      *(void *)(a1 + 24) = v6;
      break;
  }
}

void sub_1000D4A88()
{
  sub_1000D5AE0();
  sub_1000D4710(v2, (uint64_t)&v7);
  if (v3)
  {
    long long v4 = *(_OWORD *)(v0 + 16);
    _OWORD *v1 = *(_OWORD *)v0;
    v1[1] = v4;
    uint64_t v5 = v7;
    if (*((void *)v1 + 2) >= (unint64_t)v7)
    {
      *((void *)v1 + 2) = v7;
      *(void *)(v0 + 16) -= v5;
    }
    else
    {
      sub_1000D5AB0();
      sub_1000D5ABC();
      *(void *)(v0 + 24) = v6;
    }
  }
}

void sub_1000D4B00()
{
  sub_1000D5AE0();
  unint64_t v3 = *(void *)(v2 + 16);
  if (!v3 || (sub_1000D45C8(v1, 0, v3), v4))
  {
    *(void *)(v0 + _Block_object_dispose(&STACK[0x2C0], 8) = *(void *)(v1 + 8);
    *(void *)(v0 + 24) = *(void *)(v1 + 24);
  }
}

void sub_1000D4B4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unsigned __int16 v53 = 0;
  uint64_t v52 = 0;
  BOOL v6 = sub_1000D4144(v44, a2, a3);
  if ((a4 & 1) == 0 && v6)
  {
    sub_1000D4FB8((uint64_t)v44, v7, v8, v9, v10, v11, v12, v13);
    if ((v14 & 1) == 0)
    {
      sub_1000D5AB0();
LABEL_74:
      sub_1000D5ABC();
      *(void *)(a1 + 24) = v39;
      return;
    }
  }
  int v40 = 0;
  uint64_t v15 = 0;
  unsigned int v16 = 0;
  int v17 = 0xFFFF;
  while (*(void *)(a1 + 16))
  {
    sub_1000D492C(a1, (int *)&v42, &v43, &v41);
    if ((v18 & 1) == 0)
    {
      if (!v41) {
        return;
      }
      break;
    }
    uint64_t v19 = v43;
    if (!v43)
    {
      if ((a4 & 4) == 0)
      {
LABEL_55:
        sub_1000D5ABC();
        *(void *)(a1 + 24) = v31;
        return;
      }
      break;
    }
    if (sub_1000D4420(v44, v43) && (v49 & 0xF) != 0xA)
    {
      if ((v49 & 0x30) == 0x20 && v51 == &v48)
      {
        if (v17 != v45)
        {
          if (v17 != 0xFFFF && v53 != v40) {
            goto LABEL_55;
          }
          unsigned __int16 v53 = 0;
          int v40 = v48;
          int v17 = v45;
        }
        uint64_t v51 = &v53;
      }
      if ((v49 & 0x30) == 0 && v46 <= 0x3Fu) {
        *(_DWORD *)((char *)&v52 + (((unint64_t)v46 >> 3) & 0x1FFC)) |= 1 << v46;
      }
      sub_1000D515C(a1, v42, (uint64_t)v44);
      if ((v23 & 1) == 0) {
        return;
      }
    }
    else
    {
      if (!v16)
      {
        if (sub_1000D44D8((uint64_t)v44))
        {
          uint64_t v15 = (void **)*v50;
          unsigned int v20 = v47;
        }
        else
        {
          unsigned int v20 = 0;
        }
        if (v15) {
          unsigned int v16 = v20;
        }
        else {
          unsigned int v16 = -1;
        }
      }
      uint64_t v24 = v42;
      if (v19 < v16) {
        goto LABEL_36;
      }
      uint64_t v26 = *(void *)(a1 + 16);
      uint64_t v27 = v26;
      __int16 v28 = v15;
      if (v15)
      {
        while (v26 == v27)
        {
          unsigned int v29 = (uint64_t (*)(uint64_t, void **, uint64_t, uint64_t))**v28;
          if (v29)
          {
            if ((v29(a1, v28, v19, v24) & 1) == 0) {
              return;
            }
          }
          else
          {
            if (!sub_1000D4320(v54, v28)) {
              goto LABEL_55;
            }
            if (v19 == v55)
            {
              if (v54[1])
              {
                *((unsigned char *)v28 + 24) = 1;
                sub_1000D515C(a1, v24, (uint64_t)v54);
                if (!v30) {
                  return;
                }
              }
            }
          }
          __int16 v28 = (void **)v28[2];
          uint64_t v27 = *(void *)(a1 + 16);
          if (!v28) {
            break;
          }
        }
      }
      if (v26 == v27)
      {
        LODWORD(v24) = v42;
LABEL_36:
        sub_1000D4988(a1, v24);
        if ((v25 & 1) == 0) {
          return;
        }
      }
    }
  }
  if (v17 != 0xFFFF && v53 != v40) {
    goto LABEL_73;
  }
  if (*(_WORD *)(*(void *)v44 + 34))
  {
    unsigned int v33 = *(unsigned __int16 *)(*(void *)v44 + 34) >= 0x40u ? 64 : *(unsigned __int16 *)(*(void *)v44 + 34);
    uint64_t v34 = v33 >> 5;
    int v35 = (int *)&v52;
    uint64_t v36 = v34;
    while (v36)
    {
      int v37 = *v35++;
      --v36;
      if (v37 != -1) {
        goto LABEL_73;
      }
    }
    int v38 = v33 & 0x1F;
    if (v38)
    {
      if (*((_DWORD *)&v52 + v34) != 0xFFFFFFFF >> -(char)v38)
      {
LABEL_73:
        sub_1000D5AB0();
        goto LABEL_74;
      }
    }
  }
}

void sub_1000D4EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1000D4EAC(uint64_t a1, BOOL *a2)
{
  sub_1000D4710(a1, (uint64_t)&v4);
  if (v3) {
    *a2 = v4 != 0;
  }
}

void sub_1000D4EF0(uint64_t a1, unint64_t *a2)
{
  sub_1000D482C();
  if (v3) {
    *a2 = -(uint64_t)(v4 & 1) ^ (v4 >> 1);
  }
}

void sub_1000D4F38(uint64_t a1, _DWORD *a2)
{
  sub_1000D45C8(a1, (uint64_t)&v4, 4uLL);
  if (v3) {
    *a2 = v4;
  }
}

void sub_1000D4F78(uint64_t a1, void *a2)
{
  sub_1000D45C8(a1, (uint64_t)&v4, 8uLL);
  if (v3) {
    *a2 = v4;
  }
}

void sub_1000D4FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v27 = 0u;
  long long v28 = 0u;
  uint64_t v26 = 0;
  if (*(void *)(*(void *)a1 + 16))
  {
    *((void *)&v27 + 1) = *(void *)(*(void *)a1 + 16);
    long long v28 = 0xFFFFFFFFFFFFFFFFLL;
    sub_1000D5AF8(a1, a2, a3, a4, a5, a6, a7, a8, v25, SWORD2(v25), SBYTE6(v25), SHIBYTE(v25), 0, 0, (char)sub_1000D46CC);
    if (!v9) {
      return;
    }
  }
  while (1)
  {
    char v10 = *(unsigned char *)(a1 + 30);
    if ((v10 & 0xF) == 0xA) {
      break;
    }
    if ((v10 & 0xC0) == 0x80)
    {
      **(void **)(a1 + 32) = 0;
      if ((v10 & 0x20) != 0) {
        goto LABEL_24;
      }
    }
    else if ((*(unsigned char *)(a1 + 30) & 0xC0) == 0)
    {
      int v12 = v10 & 0x30;
      if (v12 == 48 || v12 == 32)
      {
LABEL_24:
        **(_WORD **)(a1 + 4_Block_object_dispose(&STACK[0x2C0], 8) = 0;
        goto LABEL_25;
      }
      if (v12 == 16)
      {
        uint64_t v13 = *(unsigned char **)(a1 + 48);
        if (v13) {
          unsigned char *v13 = 0;
        }
      }
      if ((v10 & 0xE) == 8
        && ((uint64_t v14 = *(void *)(a1 + 56), *(void *)(v14 + 16)) || *(void *)(v14 + 24) || **(void **)(v14 + 8)))
      {
        if (sub_1000D4144(v29, v14, *(void *)(a1 + 40)) && !sub_1000D4FB8(v29)) {
          return;
        }
      }
      else
      {
        memset(*(void **)(a1 + 40), 0, *(unsigned __int16 *)(a1 + 26));
      }
    }
LABEL_25:
    if (HIDWORD(v26) && HIDWORD(v26) == *(unsigned __int16 *)(a1 + 24))
    {
      sub_1000D515C((uint64_t)&v27, v26, a1);
      if (!v15) {
        return;
      }
      sub_1000D5AF8(v15, v16, v17, v18, v19, v20, v21, v22, v25, SWORD2(v25), SBYTE6(v25), SHIBYTE(v25), v26, HIDWORD(v26), v27);
      if (!v23) {
        return;
      }
      uint64_t v24 = *(unsigned char **)(a1 + 48);
      if (v24) {
        *uint64_t v24 = 0;
      }
    }
    if (!sub_1000D4378((_WORD *)a1)) {
      return;
    }
  }
  uint64_t v11 = **(void **)(a1 + 40);
  if (!v11) {
    goto LABEL_25;
  }
  while (1)
  {
    if (sub_1000D4320(v29, (void *)v11))
    {
      *(unsigned char *)(v11 + 24) = 0;
      if (!sub_1000D4FB8(v29)) {
        break;
      }
    }
    uint64_t v11 = *(void *)(v11 + 16);
    if (!v11) {
      goto LABEL_25;
    }
  }
}

void sub_1000D515C(uint64_t a1, int a2, uint64_t a3)
{
  unsigned int v4 = *(unsigned __int8 *)(a3 + 30);
  if ((v4 & 0xC0) == 0x80) {
    goto LABEL_19;
  }
  if ((v4 & 0xC0) == 0x40)
  {
    if (!*(void *)(*(void *)a3 + 24))
    {
      sub_1000D4988(a1, a2);
      return;
    }
    switch(a2)
    {
      case 2:
        sub_1000D4A88();
        if (!v8) {
          return;
        }
        unint64_t v16 = v43;
        while (1)
        {
          uint64_t v17 = sub_1000D5AC8(v8, v9, v10, v11, v12, v13, v14, v15, v41, v42[0]);
          uint64_t v8 = v18(v17);
          if ((v8 & 1) == 0) {
            break;
          }
          if (v43) {
            BOOL v19 = v43 >= v16;
          }
          else {
            BOOL v19 = 1;
          }
          unint64_t v16 = v43;
          if (v19)
          {
            sub_1000D4B00();
            return;
          }
        }
        goto LABEL_19;
      case 5:
        uint64_t v21 = 4;
        sub_1000D45C8(a1, (uint64_t)v45, 4uLL);
        if ((v22 & 1) == 0) {
          return;
        }
        break;
      case 1:
        uint64_t v21 = 8;
        sub_1000D45C8(a1, (uint64_t)v45, 8uLL);
        if (!v22) {
          return;
        }
        break;
      case 0:
        uint64_t v21 = 0;
        while (v21 != 10)
        {
          sub_1000D45C8(a1, (uint64_t)&v45[v21], 1uLL);
          if (!v22) {
            return;
          }
          int v30 = (char)v45[v21++];
          if ((v30 & 0x80000000) == 0) {
            goto LABEL_59;
          }
        }
        sub_1000D5AB0();
        goto LABEL_20;
      default:
LABEL_19:
        sub_1000D5AB0();
LABEL_20:
        sub_1000D5ABC();
        *(void *)(a1 + 24) = v20;
        return;
    }
LABEL_59:
    v42[1] = v45;
    unint64_t v43 = v21;
    uint64_t v44 = 0;
    uint64_t v39 = sub_1000D5AC8(v22, v23, v24, v25, v26, v27, v28, v29, v41, (char)sub_1000D46CC);
    v40(v39);
    return;
  }
  if ((v4 & 0xC0) != 0) {
    goto LABEL_19;
  }
  switch((v4 >> 4) & 3)
  {
    case 1u:
      uint64_t v7 = *(unsigned char **)(a3 + 48);
      if (v7) {
        unsigned char *v7 = 1;
      }
      goto LABEL_39;
    case 2u:
      unsigned int v31 = v4 & 0xE;
      if (a2 != 2 || v31 > 5)
      {
        unsigned int v33 = *(_WORD **)(a3 + 48);
        unsigned int v34 = (unsigned __int16)*v33;
        *(void *)(a3 + 40) = *(void *)(a3 + 32)
                             + *(unsigned __int16 *)(a3 + 26) * (unint64_t)(unsigned __int16)*v33;
        _WORD *v33 = v34 + 1;
        if (v34 >= *(unsigned __int16 *)(a3 + 28)) {
          goto LABEL_63;
        }
LABEL_39:
        sub_1000D557C(a1, a2, a3);
      }
      else
      {
        uint64_t v36 = *(_WORD **)(a3 + 48);
        *(void *)(a3 + 40) = *(void *)(a3 + 32)
                             + (unsigned __int16)*v36 * (unint64_t)*(unsigned __int16 *)(a3 + 26);
        sub_1000D4A88();
        if (v37)
        {
          while (1)
          {
            if (!v43) {
              goto LABEL_64;
            }
            if ((unsigned __int16)*v36 >= *(unsigned __int16 *)(a3 + 28)) {
              goto LABEL_63;
            }
            sub_1000D557C((uint64_t)v42, 255, a3);
            if (!v38) {
              break;
            }
            ++*v36;
            *(void *)(a3 + 40) += *(unsigned __int16 *)(a3 + 26);
          }
          if (v43)
          {
LABEL_63:
            sub_1000D5AB0();
            goto LABEL_20;
          }
LABEL_64:
          sub_1000D4B00();
        }
      }
      break;
    case 3u:
      if ((v4 & 0xE) == 8 && **(unsigned __int16 **)(a3 + 48) != *(unsigned __int16 *)(a3 + 24))
      {
        memset(*(void **)(a3 + 40), 0, *(unsigned __int16 *)(a3 + 26));
        uint64_t v35 = *(void *)(a3 + 56);
        if ((*(void *)(v35 + 16) || *(void *)(v35 + 24) || **(void **)(v35 + 8))
          && sub_1000D4144(v42, v35, *(void *)(a3 + 40))
          && !sub_1000D4FB8(v42))
        {
          goto LABEL_20;
        }
      }
      **(_WORD **)(a3 + 4_Block_object_dispose(&STACK[0x2C0], 8) = *(_WORD *)(a3 + 24);
      sub_1000D557C(a1, a2, a3);
      return;
    default:
      goto LABEL_39;
  }
}

void sub_1000D557C(uint64_t a1, int a2, uint64_t a3)
{
  int v4 = *(unsigned char *)(a3 + 30) & 0xF;
  switch(*(unsigned char *)(a3 + 30) & 0xF)
  {
    case 0:
      if (a2 && a2 != 255) {
        goto LABEL_45;
      }
      uint64_t v14 = *(BOOL **)(a3 + 40);
      sub_1000D4EAC(a1, v14);
      return;
    case 1:
    case 2:
    case 3:
      if (a2 && a2 != 255) {
        goto LABEL_45;
      }
      if (v4 != 2)
      {
        if (v4 == 3)
        {
          sub_1000D4EF0(a1, &v39);
          if (!v25) {
            return;
          }
          int v26 = *(unsigned __int16 *)(a3 + 26);
        }
        else
        {
          sub_1000D482C();
          if (!v27) {
            return;
          }
          int v26 = *(unsigned __int16 *)(a3 + 26);
          unint64_t v28 = v40[0];
          if (v26 == 8)
          {
LABEL_85:
            **(void **)(a3 + 40) = v28;
            return;
          }
          unint64_t v39 = SLODWORD(v40[0]);
        }
        switch(v26)
        {
          case 1:
            unint64_t v7 = v39;
            **(unsigned char **)(a3 + 40) = v39;
            uint64_t v9 = (char)v7;
            goto LABEL_82;
          case 2:
            unint64_t v7 = v39;
            **(_WORD **)(a3 + 40) = v39;
            uint64_t v9 = (__int16)v7;
            goto LABEL_82;
          case 4:
            unint64_t v7 = v39;
            **(_DWORD **)(a3 + 40) = v39;
            uint64_t v9 = (int)v7;
LABEL_82:
            if (v9 != v7) {
              goto LABEL_83;
            }
            return;
          case 8:
            unint64_t v28 = v39;
            goto LABEL_85;
          default:
LABEL_83:
            sub_1000D5AB0();
            break;
        }
        goto LABEL_46;
      }
      sub_1000D482C();
      if (v6)
      {
        switch(*(_WORD *)(a3 + 26))
        {
          case 1:
            sub_1000D5AEC();
            unsigned char *v8 = v7;
            uint64_t v9 = v7;
            goto LABEL_82;
          case 2:
            sub_1000D5AEC();
            _WORD *v35 = v7;
            uint64_t v9 = (unsigned __int16)v7;
            goto LABEL_82;
          case 4:
            sub_1000D5AEC();
            _DWORD *v36 = v7;
            uint64_t v9 = v7;
            goto LABEL_82;
          case 8:
            sub_1000D5AEC();
            void *v38 = v37;
            break;
          default:
            goto LABEL_83;
        }
      }
      return;
    case 4:
      if (a2 != 5 && a2 != 255) {
        goto LABEL_45;
      }
      uint64_t v15 = *(_DWORD **)(a3 + 40);
      sub_1000D4F38(a1, v15);
      return;
    case 5:
      if (a2 != 1 && a2 != 255) {
        goto LABEL_45;
      }
      unint64_t v16 = *(void **)(a3 + 40);
      sub_1000D4F78(a1, v16);
      return;
    case 6:
      if (a2 != 2) {
        goto LABEL_45;
      }
      sub_1000D4710(a1, (uint64_t)v40);
      if (!v17) {
        return;
      }
      unint64_t v18 = LODWORD(v40[0]);
      if (LODWORD(v40[0]) >= 0x10000
        || (*(unsigned char *)(a3 + 30) & 0xC0) == 0x80
        || (unint64_t)LODWORD(v40[0]) + 2 > *(unsigned __int16 *)(a3 + 26))
      {
        goto LABEL_40;
      }
      BOOL v19 = *(_WORD **)(a3 + 40);
      *BOOL v19 = v40[0];
      uint64_t v20 = (uint64_t)(v19 + 1);
      goto LABEL_72;
    case 7:
      if (a2 != 2) {
        goto LABEL_45;
      }
      uint64_t v21 = *(void *)(a3 + 40);
      sub_1000D4710(a1, (uint64_t)v40);
      if (!v22) {
        return;
      }
      unint64_t v18 = LODWORD(v40[0]);
      if (LODWORD(v40[0]) == -1
        || (*(unsigned char *)(a3 + 30) & 0xC0) == 0x80
        || LODWORD(v40[0]) >= *(unsigned __int16 *)(a3 + 26))
      {
        goto LABEL_40;
      }
      *(unsigned char *)(v21 + LODWORD(v40[0])) = 0;
      uint64_t v34 = a1;
      uint64_t v20 = v21;
      goto LABEL_79;
    case 8:
    case 9:
      if (a2 != 2) {
        goto LABEL_45;
      }
      sub_1000D4A88();
      if (!v10) {
        return;
      }
      if (!*(void *)(a3 + 56))
      {
LABEL_45:
        sub_1000D5AB0();
        goto LABEL_46;
      }
      if ((*(unsigned char *)(a3 + 30) & 0xF) == 9 && (uint64_t v11 = *(void *)(a3 + 48)) != 0)
      {
        uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 - 16);
        if (v12)
        {
          int v13 = v12(v40, a3, v11 - 8);
          LOBYTE(v12) = v40[2] == 0;
          goto LABEL_58;
        }
      }
      else
      {
        LOBYTE(v12) = 0;
      }
      int v13 = 1;
LABEL_58:
      if ((v12 & 1) == 0 && v13)
      {
        unsigned int v29 = *(unsigned __int8 *)(a3 + 30);
        BOOL v30 = v29 >= 0x40;
        int v31 = v29 & 0x30;
        uint64_t v33 = !v30 && v31 != 32;
        sub_1000D4B4C(v40, *(void *)(a3 + 56), *(void *)(a3 + 40), v33);
      }
      sub_1000D4B00();
      return;
    case 0xB:
      if (a2 != 2) {
        goto LABEL_45;
      }
      sub_1000D4710(a1, (uint64_t)v40);
      if (!v23) {
        return;
      }
      if (LODWORD(v40[0]) >= 0x10000) {
        goto LABEL_40;
      }
      if (LODWORD(v40[0]))
      {
        unint64_t v18 = *(unsigned __int16 *)(a3 + 26);
        if (LODWORD(v40[0]) == v18)
        {
          uint64_t v20 = *(void *)(a3 + 40);
LABEL_72:
          uint64_t v34 = a1;
LABEL_79:
          sub_1000D45C8(v34, v20, v18);
        }
        else
        {
LABEL_40:
          sub_1000D5AB0();
LABEL_46:
          sub_1000D5ABC();
          *(void *)(a1 + 24) = v24;
        }
      }
      else
      {
        memset(*(void **)(a3 + 40), 0, *(unsigned __int16 *)(a3 + 26));
      }
      return;
    default:
      goto LABEL_45;
  }
}

uint64_t sub_1000D5AB0()
{
  return 0;
}

char *sub_1000D5AC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  return &a10;
}

void sub_1000D5AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12, int a13, unsigned int a14, char a15)
{
  sub_1000D492C((uint64_t)&a15, &a13, &a14, &a12);
}

uint64_t sub_1000D5B18()
{
  if (qword_1009FC1B0)
  {
    sub_10025B778("HCI/SCO Pool Info:");
    sub_100196C90(qword_1009FC1B0);
  }
  if (qword_1009FC1B8)
  {
    sub_10025B778("ACL Pool Info:");
    sub_100196C90(qword_1009FC1B8);
  }
  return sub_10025B778("%s: [END]", "pcie_dump_state");
}

uint64_t sub_1000D5BA4()
{
  if (qword_1009FC1D8 != -1) {
    dispatch_once(&qword_1009FC1D8, &stru_10099A3A0);
  }
  if (qword_1009FC1D0) {
    return 0;
  }
  else {
    return 114;
  }
}

uint64_t sub_1000D5BF4(int a1, __int16 a2, unsigned int a3)
{
  if (a1 > 2)
  {
    if (a1 == 3)
    {
      unsigned int v6 = 3;
    }
    else
    {
      if (a1 != 243) {
        goto LABEL_25;
      }
      unsigned int v6 = 4;
    }
    unint64_t v7 = &qword_1009FC1B0;
  }
  else
  {
    if (a1 != 1)
    {
      if (a1 == 2)
      {
        unsigned int v6 = 4;
        unint64_t v7 = &qword_1009FC1B8;
        goto LABEL_11;
      }
LABEL_25:
      sub_10025B778("PCIe default packet type: 0x%x\n", a1);
      off_1009FC1C8("PCIe bad packet type", 1);
      return 101;
    }
    unsigned int v6 = 3;
    unint64_t v7 = &qword_1009FC1B0;
  }
LABEL_11:
  uint64_t v8 = sub_100197134(*v7);
  if (!v8)
  {
    uint64_t v9 = malloc_type_malloc(v6 + (unint64_t)a3, 0xB25B399EuLL);
    if (!v9)
    {
      sub_10025B778("failed to allocate memory for tx_buff");
      off_1009FC1C8("PCIe memory allocation failure", 1);
      return 106;
    }
    uint64_t v8 = (uint64_t)v9;
  }
  *(_WORD *)uint64_t v8 = a2;
  *(unsigned char *)(v8 + 2) = a3;
  if (a1 == 243 || a1 == 2) {
    *(unsigned char *)(v8 + 3) = BYTE1(a3);
  }
  if (a3) {
    sub_100022CA0((char *)(v8 + v6));
  }
  else {
    sub_100023604();
  }
  if (AppleConvergedTransportWrite()) {
    return 625;
  }
  if (!byte_1009FC1C1)
  {
    sub_10025B778("PCIe write failed: type %u\n", a1);
    off_1009FC1C8("PCIe write failed", 1);
  }
  return 1205;
}

uint64_t sub_1000D5E3C()
{
  kern_return_t v3;
  io_connect_t connect;

  sub_10025B778("PCIe FLR\n");
  CFDictionaryRef v0 = IOServiceMatching("AppleBluetoothModule");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v0);
  if (MatchingService)
  {
    connect = 0;
    if (IOServiceOpen(MatchingService, mach_task_self_, 0, &connect))
    {
      sub_10025B778("PCIe could not open AppleBluetoothModule service: %#x\n");
    }
    else
    {
      int v3 = IOConnectCallScalarMethod(connect, 5u, 0, 0, 0, 0);
      if (!v3)
      {
        IOServiceClose(connect);
        return 0;
      }
      sub_10025B778("PCIe FLR failed: %#x\n", v3);
      IOServiceClose(connect);
    }
  }
  else
  {
    sub_10025B778("PCIe could not find AppleBluetoothModule service\n");
  }
  return 1205;
}

uint64_t sub_1000D5F20(int a1)
{
  sub_10025B778("PCIe Download Firmware, size = %d\n", a1);
  AppleConvergedTransportInitParameters();
  uint64_t v1 = 1205;
  if (AppleConvergedTransportCreate())
  {
    int v2 = AppleConvergedTransportSendImage();
    BOOL v3 = v2 == 0;
    if (v2) {
      int v4 = "PCIe Download Firmware -- Done\n";
    }
    else {
      int v4 = "PCIe failed to send image\n";
    }
    if (v3) {
      uint64_t v1 = 1205;
    }
    else {
      uint64_t v1 = 0;
    }
  }
  else
  {
    int v4 = "PCIe failed to create BTI transport\n";
  }
  sub_10025B778(v4);
  if (AppleConvergedTransportIsValid() && (AppleConvergedTransportFree() & 1) == 0) {
    sub_10025B778("PCIe free BTI transport failed\n");
  }
  return v1;
}

uint64_t sub_1000D6030(uint64_t (*a1)(void, void), uint64_t a2, uint64_t (*a3)(void, void))
{
  if (a1 && a2 && a3)
  {
    if (qword_1009FC1D8 != -1) {
      dispatch_once(&qword_1009FC1D8, &stru_10099A3A0);
    }
    if (qword_1009FC1D0)
    {
      off_1009FC1C8 = a1;
      if (!AppleConvergedTransportRegisterEventBlockQ())
      {
        sub_10025B778("PCIe failed to register event listener\n", _NSConcreteStackBlock, 0x40000000, sub_1000D6174, &unk_10099A340, a1, a2);
        uint64_t result = 0;
        off_1009FC1C8 = 0;
        return result;
      }
      sub_10025B778("PCIe registered event listener successfully\n", _NSConcreteStackBlock, 0x40000000, sub_1000D6174, &unk_10099A340, a1, a2);
      if (sub_100263A58(qword_1009FC1D0, a3))
      {
        sub_10025B778("Registered ABTM listener successfully\n");
        return 1;
      }
      sub_10025B778("Failed to register ABTM listener\n");
    }
    else
    {
      sub_10025B778("Initialization failed\n");
    }
  }
  else
  {
    sub_10025B778("Bad argument\n");
  }
  return 0;
}

uint64_t sub_1000D6174(uint64_t a1, int a2, const char *a3, int a4)
{
  if (a2 == 2)
  {
    sub_10025B778("PCIe detected controller is resetting");
    unint64_t v7 = *(uint64_t (**)(const char *, uint64_t))(a1 + 40);
    uint64_t v9 = (uint64_t)&byte_1009FC1C1;
    uint64_t v8 = a3;
  }
  else
  {
    if (a2)
    {
      sub_10025B778("Non-fatal event: %s\n", a3);
      unint64_t v7 = *(uint64_t (**)(const char *, uint64_t))(a1 + 32);
      uint64_t v8 = a3;
      uint64_t v9 = 0;
    }
    else
    {
      byte_1009FC1C1 = 1;
      sub_10025B778("Fatal event: %s\n", a3);
      usleep(1000 * a4);
      unint64_t v7 = *(uint64_t (**)(const char *, uint64_t))(a1 + 32);
      uint64_t v8 = a3;
      uint64_t v9 = 1;
    }
  }
  return v7(v8, v9);
}

uint64_t sub_1000D625C(uint64_t a1)
{
  if (a1)
  {
    if (qword_1009FC1D8 != -1) {
      dispatch_once(&qword_1009FC1D8, &stru_10099A3A0);
    }
    if (qword_1009FC1D0)
    {
      if (AppleConvergedTransportRegisterTimeSyncEventBlockQ())
      {
        sub_10025B778("PCIe registered time sync listener successfully\n");
        return 1;
      }
      sub_10025B778("PCIe failed to register time sync listener\n");
    }
    else
    {
      sub_10025B778("Initialization failed\n");
    }
  }
  else
  {
    sub_10025B778("Bad argument\n");
  }
  return 0;
}

uint64_t sub_1000D634C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

void sub_1000D6358(id a1)
{
  uint64_t v1 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  qword_1009FC1D0 = (uint64_t)dispatch_queue_create("com.apple.bluetoothd.pcie-event", v1);
}

uint64_t sub_1000D6394()
{
  return 0;
}

uint64_t sub_1000D639C()
{
  qword_1009FC1B0 = (uint64_t)sub_100196EE4(0x10u, 0x200uLL);
  if (qword_1009FC1B0)
  {
    qword_1009FC1B8 = (uint64_t)sub_100196EE4(0x10u, 0x1000uLL);
    if (qword_1009FC1B8)
    {
      if ((AppleConvergedTransportIsValid() & 1) != 0
        || (AppleConvergedTransportIsValid() & 1) != 0
        || AppleConvergedTransportIsValid())
      {
        sub_10025B8C0();
      }
      long long v2 = 0u;
      long long v3 = 0u;
      HIDWORD(v1) = 0;
      byte_1009FC1C1 = 0;
      AppleConvergedTransportInitParameters();
      DWORD2(v2) = 5000;
      LODWORD(v3) = 12;
      *(void *)((char *)&v3 + 4) = 0x10200000020;
      HIDWORD(v4) = 0;
      if (AppleConvergedTransportCreate())
      {
        AppleConvergedTransportInitParameters();
        LODWORD(v1) = 3;
        DWORD2(v2) = 5000;
        LODWORD(v3) = 12;
        *(void *)((char *)&v3 + 4) = 0xA2200000020;
        LODWORD(v4) = 33;
        if (AppleConvergedTransportCreate())
        {
          AppleConvergedTransportInitParameters();
          LODWORD(v1) = 4;
          DWORD2(v2) = 5000;
          LODWORD(v3) = 12;
          *(void *)((char *)&v3 + 4) = 0x10200000020;
          LODWORD(v4) = 33;
          if (AppleConvergedTransportCreate()) {
            return 0;
          }
          sub_10025B778("PCIe failed to create SCO transport\n", v1, 0, &stru_10099A560, *((void *)&v2 + 1), v3, &stru_10099A5A0, &stru_10099A5E0, 0, 0, v4);
        }
        else
        {
          sub_10025B778("PCIe failed to create ACL transport\n", v1, 0, &stru_10099A4A0, *((void *)&v2 + 1), v3, &stru_10099A4E0, &stru_10099A520, 0, 0, v4);
        }
      }
      else
      {
        sub_10025B778("PCIe failed to create HCI transport\n", 2, 0, &stru_10099A3E0, *((void *)&v2 + 1), v3, &stru_10099A420, &stru_10099A460, 0, 0, 25);
      }
      sub_1000D6904();
      sub_1000D69F8();
      off_1009FC1C8("PCIe transport creation failed", 1);
    }
    else
    {
      sub_100196E48((pthread_mutex_t *)qword_1009FC1B0);
      off_1009FC1C8("acl mempool allocation failure", 1);
    }
  }
  else
  {
    off_1009FC1C8("hci-sco mempool allocation failure", 1);
  }
  return 633;
}

void sub_1000D65FC(id a1, int a2, void *a3, void *a4)
{
}

void sub_1000D662C(id a1, int a2, void *a3, unsigned int a4)
{
}

void sub_1000D6634(uint64_t a1, int a2, unsigned __int8 *a3, unsigned __int16 a4)
{
  if (!a2)
  {
    if (!byte_1009FC1C1)
    {
      if ((byte_1009FC1C0 & 1) == 0)
      {
        sub_100023344();
        v9[0] = 0;
        v9[1] = 0;
        uint64_t v8 = sub_100023438(a1, a3, a4, (uint64_t)v9);
        sub_100023868(a1, a3, v8, (uint64_t)v9);
        sub_1000232E0();
        if (!a3) {
          return;
        }
LABEL_10:
        free(a3);
        return;
      }
      sub_100025840();
    }
    if (!a3) {
      return;
    }
    goto LABEL_10;
  }
  if (!byte_1009FC1C1)
  {
    sub_10025B778("PCIe read failed: type %u, status 0x%x\n", a1, a2);
    sleep(0xC8u);
    uint64_t v5 = (void (*)(const char *, uint64_t))off_1009FC1C8;
    v5("PCIe read failed", 1);
  }
}

void sub_1000D6738(id a1, int a2, void *a3, unsigned int a4)
{
  if (a2 && !byte_1009FC1C1)
  {
    sub_10025B778("PCIe HCI write failed: 0x%x\n", a2);
    sleep(0xC8u);
    uint64_t v4 = (void (*)(const char *, uint64_t))off_1009FC1C8;
    v4("PCIe HCI write failed", 1);
  }
}

void sub_1000D67AC(id a1, int a2, void *a3, void *a4)
{
}

void sub_1000D67DC(id a1, int a2, void *a3, unsigned int a4)
{
}

void sub_1000D67E4(id a1, int a2, void *a3, unsigned int a4)
{
  if (a2 && !byte_1009FC1C1)
  {
    sub_10025B778("PCIe ACL write failed: 0x%x\n", a2);
    sleep(0xC8u);
    uint64_t v4 = (void (*)(const char *, uint64_t))off_1009FC1C8;
    v4("PCIe ACL write failed", 1);
  }
}

void sub_1000D6858(id a1, int a2, void *a3, void *a4)
{
}

void sub_1000D6888(id a1, int a2, void *a3, unsigned int a4)
{
}

void sub_1000D6890(id a1, int a2, void *a3, unsigned int a4)
{
  if (a2 && !byte_1009FC1C1)
  {
    sub_10025B778("PCIe SCO write failed: 0x%x\n", a2);
    sleep(0xC8u);
    uint64_t v4 = (void (*)(const char *, uint64_t))off_1009FC1C8;
    v4("PCIe SCO write failed", 1);
  }
}

uint64_t sub_1000D6904()
{
  if (AppleConvergedTransportIsValid() && (AppleConvergedTransportFree() & 1) == 0)
  {
    sub_10025B778("PCIe free HCI transport failed\n");
    off_1009FC1C8("PCIe free HCI transport failed", 1);
  }
  if (AppleConvergedTransportIsValid() && (AppleConvergedTransportFree() & 1) == 0)
  {
    sub_10025B778("PCIe free ACL transport failed\n");
    off_1009FC1C8("PCIe free ACL transport failed", 1);
  }
  uint64_t result = AppleConvergedTransportIsValid();
  if (result)
  {
    uint64_t result = AppleConvergedTransportFree();
    if ((result & 1) == 0)
    {
      sub_10025B778("PCIe free SCO transport failed\n");
      uint64_t v1 = (uint64_t (*)(const char *, uint64_t))off_1009FC1C8;
      return v1("PCIe free SCO transport failed", 1);
    }
  }
  return result;
}

void sub_1000D69F8()
{
  if (qword_1009FC1B0)
  {
    sub_10019707C(qword_1009FC1B0);
    sub_100196E48((pthread_mutex_t *)qword_1009FC1B0);
    qword_1009FC1B0 = 0;
  }
  if (qword_1009FC1B8)
  {
    sub_10019707C(qword_1009FC1B8);
    sub_100196E48((pthread_mutex_t *)qword_1009FC1B8);
    qword_1009FC1B8 = 0;
  }
}

uint64_t sub_1000D6A4C()
{
  return 0;
}

uint64_t sub_1000D6A54()
{
  return 0;
}

uint64_t sub_1000D6A7C()
{
  return 2594;
}

uint64_t sub_1000D6A84(unint64_t a1)
{
  return sub_1001971E0(qword_1009FC1B0, a1);
}

uint64_t sub_1000D6A94(unint64_t a1)
{
  return sub_1001971E0(qword_1009FC1B8, a1);
}

uint64_t sub_1000D6AA8()
{
  return 0;
}

uint64_t sub_1000D6AB0()
{
  return 0;
}

void sub_1000D6AB8()
{
  byte_1009FC1C1 = 1;
}

void sub_1000D6AC8()
{
  byte_1009FC1C0 = 1;
}

uint64_t sub_1000D6AD8()
{
  kern_return_t v3;
  io_connect_t connect;

  if (!sub_10017F03C()) {
    return 114;
  }
  sub_10025B778("pcie_force_doorbell_flush AppleConvergedIPCOLYBTControl\n");
  CFDictionaryRef v0 = IOServiceMatching("AppleConvergedIPCOLYBTControl");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v0);
  if (MatchingService)
  {
    connect = 0;
    if (IOServiceOpen(MatchingService, mach_task_self_, 0, &connect))
    {
      sub_10025B778("PCIe could not open AppleConvergedIPCOLYBTControl service: %#x\n");
    }
    else
    {
      long long v3 = IOConnectCallScalarMethod(connect, 4u, 0, 0, 0, 0);
      if (!v3)
      {
        IOServiceClose(connect);
        sub_10025B778("pcie_force_doorbell_flush completed successfully\n");
        return 0;
      }
      sub_10025B778("PCIe doorbell flush failed: %#x\n", v3);
      IOServiceClose(connect);
    }
  }
  else
  {
    sub_10025B778("PCIe could not find AppleConvergedIPCOLYBTControl service\n");
  }
  return 1205;
}

void sub_1000D6BD8(id a1, int a2, void *a3, void *a4)
{
}

uint64_t sub_1000D6C08()
{
  qword_1009FC1F8 = 0;
  qword_1009FC200 = -1;
  qword_1009FC210 = 0;
  qword_1009FC218 = -1;
  unk_1009FC221 = 0;
  unk_1009FC209 = 0;
  qword_1009FC228 = 0;
  qword_1009FC230 = -1;
  unk_1009FC239 = 0;
  byte_1009FC1C1 = 0;
  if ((sub_1000D6E20("hci", (uint64_t)&qword_1009FC1F8) & 0x80000000) != 0)
  {
    sub_10025B778("PCIe Skywalk failed to create HCI transport\n");
    goto LABEL_5;
  }
  byte_1009FC208 = 4;
  unk_1009FC209 = 25448;
  byte_1009FC20B = 105;
  if (pthread_create((pthread_t *)&qword_100A147E8, 0, (void *(__cdecl *)(void *))sub_10002302C, &qword_1009FC1F8))
  {
    sub_10025B778("failed to create hci rx thread\n");
LABEL_5:
    sub_1000D7434();
    off_1009FC1C8("PCIe Skywalk transport creation failed", 1);
    return 633;
  }
  sub_100117AD8((_opaque_pthread_t *)qword_100A147E8, 63);
  if ((sub_1000D6E20("acl", (uint64_t)&qword_1009FC210) & 0x80000000) != 0)
  {
    sub_10025B778("PCIe Skywalk failed to create ACL transport\n");
    goto LABEL_5;
  }
  byte_1009FC220 = 2;
  unk_1009FC221 = 25441;
  byte_1009FC223 = 108;
  if (pthread_create((pthread_t *)&qword_100A147F0, 0, (void *(__cdecl *)(void *))sub_10002302C, &qword_1009FC210))
  {
    sub_10025B778("failed to create acl rx thread\n");
    goto LABEL_5;
  }
  sub_100117AD8((_opaque_pthread_t *)qword_100A147F0, 63);
  if ((sub_1000D6E20("sco", (uint64_t)&qword_1009FC228) & 0x80000000) != 0)
  {
    sub_10025B778("PCIe Skywalk failed to create SCO transport\n");
    goto LABEL_5;
  }
  byte_1009FC238 = 3;
  unk_1009FC239 = 25459;
  byte_1009FC23B = 111;
  if (pthread_create((pthread_t *)&qword_100A147F8, 0, (void *(__cdecl *)(void *))sub_10002302C, &qword_1009FC228))
  {
    sub_10025B778("failed to create sco rx thread\n");
    goto LABEL_5;
  }
  sub_100117AD8((_opaque_pthread_t *)qword_100A147F8, 63);
  uint64_t result = 0;
  byte_1009FD240 = 0;
  return result;
}

uint64_t sub_1000D6E20(const char *a1, uint64_t a2)
{
  kern_return_t v11;
  io_object_t v12;
  io_registry_entry_t v13;
  BOOL v14;
  CFRunLoopRunResult v15;
  io_object_t v16;
  BOOL v17;
  CFStringRef v18;
  CFStringRef v19;
  uint64_t v20;
  int v21;
  int v22;
  int v23;
  int v24;
  unint64_t v25;
  int v27;
  CFStringRef v28;
  CFStringRef v29;
  io_iterator_t notification[2];
  kevent changelist;
  uuid_t uu;
  char buffer[8];
  uint64_t v34;
  char in[16];
  unsigned char v36[21];

  if (!a1 || !a2)
  {
    sub_10025B778("%s: invalid input. protocol/channel_data null\n");
    return 0xFFFFFFFFLL;
  }
  memset(&changelist, 0, sizeof(changelist));
  memset(uu, 0, sizeof(uu));
  sub_10025B778("retrieving uuid for %s\n", a1);
  notification[0] = 0;
  *(_OWORD *)in = 0u;
  memset(v36, 0, sizeof(v36));
  uint64_t v4 = IONotificationPortCreate(kIOMainPortDefault);
  RunLoopSource = IONotificationPortGetRunLoopSource(v4);
  double Current = CFRunLoopGetCurrent();
  CFRunLoopAddSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
  CFMutableDictionaryRef v7 = IOServiceMatching("AppleConvergedIPCInterface");
  if (!v7)
  {
    sub_10025B778("%s: could not create matching dictionary", "get_uuid");
    goto LABEL_28;
  }
  CFMutableDictionaryRef v8 = v7;
  CFStringRef v9 = CFStringCreateWithCString(kCFAllocatorDefault, a1, 0x600u);
  if (!v9)
  {
    sub_10025B778("%s: failed to create stringRef", "get_uuid");
    CFRelease(v8);
    goto LABEL_28;
  }
  CFStringRef v10 = v9;
  CFDictionarySetValue(v8, @"ACIPCInterfaceProtocol", v9);
  CFRelease(v10);
  uint64_t v11 = IOServiceAddMatchingNotification(v4, "IOServiceFirstMatch", v8, (IOServiceMatchingCallback)sub_1000D73F4, Current, notification);
  if (!v11)
  {
    uint64_t v12 = IOIteratorNext(notification[0]);
    if (v12)
    {
      int v13 = v12;
      uint64_t v14 = 0;
      uint64_t v15 = 0xFFFF;
    }
    else
    {
      do
      {
        sub_10025B778("ACIPCInterface not found, waiting for it to appear");
        uint64_t v15 = CFRunLoopRunInMode(kCFRunLoopDefaultMode, 5.0, 0);
        unint64_t v16 = IOIteratorNext(notification[0]);
        uint64_t v14 = v16 == 0;
        if (v16) {
          int v17 = 1;
        }
        else {
          int v17 = v15 == kCFRunLoopRunTimedOut;
        }
      }
      while (!v17);
      int v13 = v16;
    }
    CFRunLoopRemoveSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
    IONotificationPortDestroy(v4);
    IOObjectRelease(notification[0]);
    if (!v14 && (v15 == 0xFFFF || v15 == kCFRunLoopRunStopped))
    {
      unint64_t v18 = (const __CFString *)IORegistryEntrySearchCFProperty(v13, "IOService", @"ACIPCInterfaceTransport", kCFAllocatorDefault, 1u);
      if (v18)
      {
        BOOL v19 = v18;
        *(void *)buffer = 0;
        uint64_t v34 = 0;
        if (CFStringGetCString(v18, buffer, 16, 0x600u))
        {
          sub_10025B778("ACIPCInterfaceTransport \"%s\"\n", buffer);
          if (*(void *)buffer == 0x6B6C6177796B73)
          {
            int v27 = 0;
            while (1)
            {
              unint64_t v28 = (const __CFString *)IORegistryEntrySearchCFProperty(v13, "IOService", @"IOSkywalkNexusUUID", kCFAllocatorDefault, 1u);
              if (v28) {
                break;
              }
              usleep(0x30D40u);
              sub_10025B778("Retry: %d - trying to find ACIPCInterfaceTransport + IOSkywalkNexusUUID\n", v27++);
              if (v27 == 25) {
                goto LABEL_47;
              }
            }
            unsigned int v29 = v28;
            if (CFStringGetCString(v28, in, 37, 0x600u))
            {
              sub_10025B778("protocol: %s, uuidstr: %s\n", a1, in);
              uuid_parse(in, uu);
            }
            else
            {
              sub_10025B778("protocol: %s, failed to get uuid CString\n", a1);
            }
            sub_10025B778("ACIPCInterfaceTransport + IOSkywalkNexusUUID found\n");
            CFRelease(v29);
          }
          else
          {
            sub_10025B778("ACIPCInterfaceTransport is not skywalk\n");
          }
        }
        else
        {
          sub_10025B778("failed to get cstring property");
        }
LABEL_47:
        CFRelease(v19);
        if (!v13) {
          goto LABEL_28;
        }
        goto LABEL_27;
      }
      sub_10025B778("ACIPCInterface found, ACIPCInterfaceTransport property not found");
    }
    else
    {
      sub_10025B778("ACIPCInterface not found after 5 second -- runLoopResult = 0x%02x");
    }
    if (!v13) {
      goto LABEL_28;
    }
LABEL_27:
    IOObjectRelease(v13);
    goto LABEL_28;
  }
  sub_10025B778("IOServiceAddMatchingNotification returned 0x%08x", v11);
  CFRunLoopRemoveSource(Current, RunLoopSource, kCFRunLoopDefaultMode);
  IONotificationPortDestroy(v4);
LABEL_28:
  uint64_t v20 = os_channel_create();
  if (v20)
  {
    *(void *)a2 = v20;
    if (os_channel_attr_create())
    {
      if (!os_channel_read_attr())
      {
        *(void *)in = 0;
        *(void *)buffer = 0;
        *(void *)notification = 0;
        os_channel_attr_get();
        os_channel_attr_get();
        os_channel_attr_get();
        sub_10025B778("(%s) skywalk channel slotlen: %llu, rxslots: %llu, txslots: %llu\n", a1, *(void *)in, *(void *)buffer, *(void *)notification);
      }
      os_channel_attr_destroy();
    }
    uint64_t v21 = kqueue();
    if (v21 == -1)
    {
      sub_10025B778("(%s) failed to create write kqueue\n");
    }
    else
    {
      int v22 = v21;
      *(_DWORD *)(a2 + _Block_object_dispose(&STACK[0x2C0], 8) = v21;
      changelist.ident = (int)os_channel_get_fd();
      *(_DWORD *)&changelist.filter = 393214;
      memset(&changelist.fflags, 0, 20);
      if (kevent(v22, &changelist, 1, 0, 0, 0) == -1)
      {
        sub_10025B778("(%s) write kevent registration failed\n");
      }
      else
      {
        int v23 = kqueue();
        if (v23 == -1)
        {
          sub_10025B778("(%s) failed to create read kqueue\n");
        }
        else
        {
          uint64_t v24 = v23;
          int v25 = (unint64_t)&changelist | 0xC;
          *(_DWORD *)(a2 + 12) = v23;
          changelist.ident = (int)os_channel_get_fd();
          *(_DWORD *)&changelist.filter = 393215;
          *(void *)int v25 = 0;
          *(void *)(v25 + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
          *(_DWORD *)(v25 + 16) = 0;
          if (kevent(v24, &changelist, 1, 0, 0, 0) != -1)
          {
            sub_10025B778("(%s) channel created successfully\n", a1);
            return 0;
          }
          sub_10025B778("(%s) read kevent registration failed\n");
        }
      }
    }
  }
  else
  {
    sub_10025B778("(%s) failed to create channel\n");
  }
  sub_10025B778("(%s) failed to create channel\n");
  return 0xFFFFFFFFLL;
}

void sub_1000D73F4(__CFRunLoop *a1)
{
  sub_10025B778("ACIPCInterface found, releasing waiting thread");

  CFRunLoopStop(a1);
}

uint64_t sub_1000D7434()
{
  sub_10025B778("closing hci channel\n");
  sub_1000D749C((uint64_t)&qword_1009FC1F8);
  sub_10025B778("closing acl channel\n");
  sub_1000D749C((uint64_t)&qword_1009FC210);
  sub_10025B778("closing sco channel\n");

  return sub_1000D749C((uint64_t)&qword_1009FC228);
}

uint64_t sub_1000D749C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    int v2 = *(_DWORD *)(result + 8);
    if (v2 != -1)
    {
      close(v2);
      *(_DWORD *)(v1 + _Block_object_dispose(&STACK[0x2C0], 8) = -1;
    }
    int v3 = *(_DWORD *)(v1 + 12);
    if (v3 != -1)
    {
      close(v3);
      *(_DWORD *)(v1 + 12) = -1;
    }
    uint64_t result = *(void *)v1;
    if (*(void *)v1)
    {
      uint64_t result = os_channel_destroy();
      *(void *)uint64_t v1 = 0;
    }
  }
  return result;
}

uint64_t sub_1000D7504()
{
  return 0;
}

uint64_t sub_1000D750C()
{
  sub_1000D7434();
  sub_1000232E0();
  int v0 = pthread_join((pthread_t)qword_100A147E8, 0);
  if (v0) {
    sub_10025B778("hci thread join failed: %d\n", v0);
  }
  sub_10025B778("hci thread joined\n");
  int v1 = pthread_join((pthread_t)qword_100A147F0, 0);
  if (v1) {
    sub_10025B778("acl thread join failed: %d\n", v1);
  }
  sub_10025B778("acl thread joined\n");
  int v2 = pthread_join((pthread_t)qword_100A147F8, 0);
  if (v2) {
    sub_10025B778("sco thread join failed: %d\n", v2);
  }
  sub_10025B778("sco thread joined\n");
  sub_100023344();
  return 0;
}

uint64_t sub_1000D75C8()
{
  return 2594;
}

uint64_t sub_1000D75D0()
{
  return 0;
}

uint64_t sub_1000D75D8()
{
  return 0;
}

void sub_1000D75E0()
{
  byte_1009FC1C1 = 1;
}

void sub_1000D75F0()
{
  byte_1009FC1C0 = 1;
}

uint64_t sub_1000D7600(uint64_t a1)
{
  if (a1)
  {
    if (*(void *)(a1 + 8) || (sub_10025B8C0(), *(void *)(a1 + 8)))
    {
      if (*(void *)(a1 + 16) || (sub_10025B8C0(), *(void *)(a1 + 16)))
      {
        qword_100A14800 = a1;
        void v3[2] = 0;
        v3[1] = 0x200010004;
        v3[0] = off_10099A640;
        return sub_10010E5E4((uint64_t)v3);
      }
    }
  }
  else
  {
    sub_10025B8C0();
  }
  return 101;
}

uint64_t sub_1000D76C0(uint64_t a1, uint64_t a2)
{
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"AACP_CLIENT_Connect(addr=%:)", v4, v5, v6, v7, v8, v9, v10, a1);
    uint64_t v11 = sub_100050B4C(0x53u);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = sub_100050714();
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)&buf, 0xCu);
    }
  }
  if (!a2)
  {
    sub_10025B8C0();
    return 101;
  }
  if (!*(void *)(a2 + 8))
  {
    sub_10025B8C0();
    if (!*(void *)(a2 + 8)) {
      return 101;
    }
  }
  if (!*(void *)(a2 + 16))
  {
    sub_10025B8C0();
    if (!*(void *)(a2 + 16)) {
      return 101;
    }
  }
  uint64_t v12 = (unsigned char *)qword_1009FD248;
  if (qword_1009FD248 || (uint64_t v12 = sub_10010CE48(0xF8uLL), (qword_1009FD248 = (uint64_t)v12) != 0))
  {
    int v13 = (unsigned char *)sub_1000D79F4((unsigned __int8 *)a1);
    if (v13 && *v13)
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"Aready connected/connection in progress", v14, v15, v16, v17, v18, v19, v20, v61);
        uint64_t v21 = sub_100050B4C(0x53u);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      return 133;
    }
    else
    {
      uint64_t v24 = 8;
      while (v12[v24] != 1)
      {
        v24 += 48;
        if (v24 == 248)
        {
          uint64_t v25 = sub_1000D7A80();
          if (v25)
          {
            int v26 = (_OWORD *)v25;
            *(void *)(v25 + 24) = a2;
            *(void *)(v25 + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
            int v27 = *(_DWORD *)a1;
            *(_WORD *)(v25 + 5) = *(_WORD *)(a1 + 4);
            *(_DWORD *)(v25 + 1) = v27;
            *(unsigned char *)uint64_t v25 = 1;
            uint64_t v63 = 0;
            *((void *)&buf + 1) = 4;
            *(_DWORD *)(v25 + 32) = 0;
            *(void *)&long long buf = off_10099A640;
            *(_DWORD *)((char *)&buf + 10) = 131073;
            uint64_t v28 = sub_10010F3E4(v25 + 1, (uint64_t)&buf);
            uint64_t v22 = v28;
            if (v28 && v28 != 133)
            {
              if (sub_100058654())
              {
                sub_100056E24((uint64_t)"AAP Client Connect failure %u", v29, v30, v31, v32, v33, v34, v35, v22);
                uint64_t v36 = sub_100050B4C(0x53u);
                if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
                  sub_100744F6C();
                }
              }
              sub_1000D7ADC(v26);
            }
          }
          else
          {
            if (sub_100058654())
            {
              sub_100056E24((uint64_t)"No free AACP connection slot ", v53, v54, v55, v56, v57, v58, v59, v61);
              BOOL v60 = sub_100050B4C(0x53u);
              if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR)) {
                sub_100744F6C();
              }
            }
            return 104;
          }
          return v22;
        }
      }
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"Another AACP connection in progress", v37, v38, v39, v40, v41, v42, v43, v61);
        uint64_t v44 = sub_100050B4C(0x53u);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      return 118;
    }
  }
  else
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"init failed..!", v45, v46, v47, v48, v49, v50, v51, v61);
      uint64_t v52 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    return 106;
  }
}

uint64_t sub_1000D79F4(unsigned __int8 *a1)
{
  uint64_t v1 = 0;
  if (a1 && qword_1009FD248)
  {
    uint64_t v2 = 0;
    int v5 = *a1;
    int v3 = a1 + 1;
    int v4 = v5;
    for (uint64_t i = qword_1009FD248 + 10; ; i += 48)
    {
      if (*(unsigned __int8 *)(qword_1009FD248 + 48 * v2 + 9) == v4)
      {
        unint64_t v7 = 0;
        do
        {
          unint64_t v8 = v7;
          if (v7 == 5) {
            break;
          }
          int v9 = *(unsigned __int8 *)(i + v7);
          int v10 = v3[v7++];
        }
        while (v9 == v10);
        if (v8 >= 5) {
          break;
        }
      }
      if (++v2 == 5) {
        return 0;
      }
    }
    return qword_1009FD248 + 48 * v2 + 8;
  }
  return v1;
}

uint64_t sub_1000D7A80()
{
  int v0 = (char *)qword_1009FD248;
  if (!qword_1009FD248)
  {
    int v0 = (char *)sub_10010CE48(0xF8uLL);
    qword_1009FD248 = (uint64_t)v0;
  }
  uint64_t v1 = 0;
  while (*(void *)&v0[v1 + 32])
  {
    v1 += 48;
    if (v1 == 240) {
      return 0;
    }
  }
  return (uint64_t)&v0[v1 + 8];
}

void sub_1000D7ADC(_OWORD *a1)
{
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  if (qword_1009FD248)
  {
    uint64_t v1 = 32;
    while (!*(void *)(qword_1009FD248 + v1))
    {
      v1 += 48;
      if (v1 == 272)
      {
        sub_100023010((void *)qword_1009FD248);
        qword_1009FD248 = 0;
        return;
      }
    }
  }
}

uint64_t sub_1000D7B30(unsigned __int8 *a1)
{
  uint64_t v1 = sub_1000D79F4(a1);
  if (v1 && *(unsigned char *)v1 == 2)
  {
    uint64_t result = *(unsigned int *)(v1 + 8);
    if (result)
    {
      sub_10010E830(result);
      return 0;
    }
  }
  else
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"No active connection", v3, v4, v5, v6, v7, v8, v9, v11);
      int v10 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    return 408;
  }
  return result;
}

uint64_t sub_1000D7BB8(unsigned __int8 *a1, int a2, int a3)
{
  uint64_t v6 = sub_1000D79F4(a1);
  if (!v6) {
    return 122;
  }
  uint64_t v7 = (int *)v6;
  if (!*(_DWORD *)(v6 + 8)) {
    return 122;
  }
  v31[0] = 0;
  if (*(unsigned char *)v6 != 2) {
    return 408;
  }
  uint64_t v8 = malloc_type_malloc(0xAuLL, 0x100004001E4F5AEuLL);
  uint64_t v30 = v8;
  if (v8)
  {
    int v9 = *(_DWORD *)a1;
    *((_WORD *)v8 + 2) = *((_WORD *)a1 + 2);
    _DWORD *v8 = v9;
    *((unsigned char *)v8 + 6) = a2;
    *((_WORD *)v8 + 4) = a3;
    v31[1] = &v30;
    LOWORD(v31[0]) = 8;
    switch(a2)
    {
      case 2:
        int v10 = v7 + 10;
        uint64_t v11 = sub_1000D7EA0;
        goto LABEL_17;
      case 1:
        int v10 = v7 + 9;
        uint64_t v11 = sub_1000D7E18;
        goto LABEL_17;
      case 0:
        int v10 = v7 + 8;
        uint64_t v11 = sub_1000D7D64;
LABEL_17:
        sub_1000268E4((uint64_t)v11, v31, a3, v10);
        return 0;
    }
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Invalid type for Request Periodically", v21, v22, v23, v24, v25, v26, v27, v29);
      uint64_t v28 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    free(v30);
    return 117;
  }
  else
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Memory allocation failure for AACP_PERIODICAL_REQUEST_ARG", v13, v14, v15, v16, v17, v18, v19, v29);
      uint64_t v20 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    return 106;
  }
}

uint64_t sub_1000D7D64(uint64_t a1)
{
  v10.tv_sec = 0;
  *(void *)&v10.tv_usec = 0;
  uint64_t v8 = 0;
  gettimeofday(&v10, 0);
  v7[0] = v10.tv_sec;
  v7[1] = v10.tv_usec;
  uint64_t v9 = 0;
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t result = sub_1000D8AF0((unsigned __int8 *)v2, (uint64_t)v7);
  if (!result)
  {
    uint64_t v4 = sub_1000D79F4((unsigned __int8 *)v2);
    int v5 = *(unsigned __int16 *)(v2 + 8);
    uint64_t v6 = (int *)(v4 + 4 * *(unsigned __int8 *)(v2 + 6) + 32);
    return sub_1000268E4((uint64_t)sub_1000D7D64, (const void **)a1, v5, v6);
  }
  return result;
}

uint64_t sub_1000D7E18(uint64_t a1)
{
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t result = sub_1000D88D4((unsigned __int8 *)v2, 0x20u, 0, 0);
  if (!result)
  {
    uint64_t v4 = sub_1000D79F4((unsigned __int8 *)v2);
    int v5 = *(unsigned __int16 *)(v2 + 8);
    uint64_t v6 = (int *)(v4 + 4 * *(unsigned __int8 *)(v2 + 6) + 32);
    return sub_1000268E4((uint64_t)sub_1000D7E18, (const void **)a1, v5, v6);
  }
  return result;
}

uint64_t sub_1000D7EA0(uint64_t a1)
{
  *(_DWORD *)&v5[3] = 6;
  *(_DWORD *)int v5 = 100684801;
  uint64_t v2 = **(void **)(a1 + 8);
  uint64_t result = sub_1000D88D4((unsigned __int8 *)v2, 4u, 7u, v5);
  if (!result)
  {
    uint64_t v4 = sub_1000D79F4((unsigned __int8 *)v2);
    return sub_1000268E4((uint64_t)sub_1000D7EA0, (const void **)a1, *(unsigned __int16 *)(v2 + 8), (int *)(v4 + 4 * *(unsigned __int8 *)(v2 + 6) + 32));
  }
  return result;
}

uint64_t sub_1000D7F2C(unsigned __int8 *a1, unsigned int a2)
{
  uint64_t v3 = sub_1000D79F4(a1);
  if (!v3 || !*(_DWORD *)(v3 + 8)) {
    return 122;
  }
  if (*(unsigned char *)v3 != 2) {
    return 408;
  }
  if (a2 > 1)
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Invalid type for Cancel Request Periodically", v6, v7, v8, v9, v10, v11, v12, v14);
      uint64_t v13 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    return 117;
  }
  else
  {
    uint64_t v4 = v3 + 4 * a2;
    sub_100026DB4(*(unsigned int *)(v4 + 32));
    uint64_t result = 0;
    *(_DWORD *)(v4 + 32) = 0;
  }
  return result;
}

uint64_t sub_1000D7FDC(unsigned __int8 *a1, void *a2, size_t a3)
{
  uint64_t v6 = sub_1000D79F4(a1);
  if (v6 && (uint64_t v7 = v6, *(_DWORD *)(v6 + 8)))
  {
    if (*(unsigned char *)v6 == 2)
    {
      uint64_t v35 = 0;
      uint64_t v8 = sub_10017E2D4((uint64_t)a1, &v35);
      if (v8)
      {
        uint64_t v9 = v8;
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"BT_AACP_CLIENT_SendData: Unable to retrieve ACL handle, status: %u", v10, v11, v12, v13, v14, v15, v16, v9);
          uint64_t v17 = sub_100050B4C(0x53u);
          if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
            sub_100744F6C();
          }
        }
        goto LABEL_22;
      }
      if (*(unsigned char *)(v35 + 278) && *(unsigned __int16 *)(v7 + 14) >= 0xA12u)
      {
        if (a3 >= 0xA13)
        {
          if (!sub_100058654()) {
            goto LABEL_20;
          }
          sub_100056E24((uint64_t)"BT_AACP_CLIENT_SendData: Attempting to send too much data, dataLen: %u, MTU: %u", v18, v19, v20, v21, v22, v23, v24, a3);
          uint64_t v25 = sub_100050B4C(0x53u);
          if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
            goto LABEL_20;
          }
          goto LABEL_19;
        }
      }
      else if (a3 >= 0x3F4)
      {
        if (!sub_100058654()) {
          goto LABEL_20;
        }
        sub_100056E24((uint64_t)"BT_AACP_CLIENT_SendData: Attempting to send too much data, dataLen: %u, MTU: %u", v26, v27, v28, v29, v30, v31, v32, a3);
        uint64_t v33 = sub_100050B4C(0x53u);
        if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
          goto LABEL_20;
        }
LABEL_19:
        sub_100744F6C();
LABEL_20:
        uint64_t v9 = 142;
LABEL_22:
        sub_100023010(a2);
        return v9;
      }
      uint64_t v9 = sub_10010FBE0(*(unsigned int *)(v7 + 8), (char *)a2, a3);
      if (v9) {
        goto LABEL_22;
      }
    }
    else
    {
      sub_100023010(a2);
      return 408;
    }
  }
  else
  {
    sub_100023010(a2);
    return 122;
  }
  return v9;
}

uint64_t sub_1000D8194(unsigned __int8 *a1, char a2)
{
  uint64_t v4 = sub_100022FE8(4uLL);
  if (!v4) {
    return 106;
  }
  *(_WORD *)uint64_t v4 = 1;
  void v4[2] = a2;

  return sub_1000D7FDC(a1, v4, 3uLL);
}

uint64_t sub_1000D81FC(unsigned __int8 *a1, char a2)
{
  uint64_t v4 = sub_100022FE8(3uLL);
  if (!v4) {
    return 106;
  }
  *(_WORD *)uint64_t v4 = 3;
  void v4[2] = a2;

  return sub_1000D7FDC(a1, v4, 3uLL);
}

uint64_t sub_1000D8270(unsigned __int8 *a1)
{
  uint64_t v2 = sub_100022FE8(2uLL);
  if (!v2) {
    return 106;
  }
  _WORD *v2 = 5;

  return sub_1000D7FDC(a1, v2, 2uLL);
}

uint64_t sub_1000D82D0(unsigned __int8 *a1)
{
  uint64_t v2 = sub_100022FE8(2uLL);
  if (!v2) {
    return 106;
  }
  _WORD *v2 = 7;

  return sub_1000D7FDC(a1, v2, 2uLL);
}

uint64_t sub_1000D8330(unsigned __int8 *a1, char a2, int a3)
{
  uint64_t v6 = (char *)sub_100022FE8(7uLL);
  if (!v6) {
    return 106;
  }
  *(_WORD *)uint64_t v6 = 9;
  void v6[2] = a2;
  *(_DWORD *)(v6 + 3) = a3;

  return sub_1000D7FDC(a1, v6, 7uLL);
}

uint64_t sub_1000D83C4(unsigned __int8 *a1)
{
  uint64_t v2 = sub_100022FE8(2uLL);
  if (!v2) {
    return 106;
  }
  _WORD *v2 = 13;

  return sub_1000D7FDC(a1, v2, 2uLL);
}

uint64_t sub_1000D8424(unsigned __int8 *a1, __int16 a2, __int16 a3)
{
  uint64_t v6 = sub_100022FE8(6uLL);
  if (!v6) {
    return 106;
  }
  *uint64_t v6 = 15;
  v6[1] = a2;
  void v6[2] = a3;

  return sub_1000D7FDC(a1, v6, 6uLL);
}

uint64_t sub_1000D84B0(unsigned __int8 *a1, uint64_t a2, unsigned int a3, const void *a4)
{
  unsigned __int16 v8 = a3 + 10;
  uint64_t v9 = sub_100022FE8(a3 + 10);
  if (!v9) {
    return 106;
  }
  if (v8 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1910, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v8) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1908, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  uint64_t v10 = v9;
  *uint64_t v9 = 16;
  if (v8 <= 7u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1911, "ByteStream_NumReadBytesAvail(bs) >= OI_BD_ADDR_BYTE_SIZE");
  }
  sub_100008A18((uint64_t)(v9 + 1), a2, 6uLL);
  if (v8 <= 9u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1912, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  void v10[4] = a3;
  if (v8 - 10 < a3) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1913, "ByteStream_NumReadBytesAvail(bs) >= (len)");
  }
  memmove(v10 + 5, a4, a3);

  return sub_1000D7FDC(a1, v10, v8);
}

uint64_t sub_1000D8610(unsigned __int8 *a1, uint64_t a2, unsigned int a3, const void *a4)
{
  size_t v8 = a3 + 9;
  uint64_t v9 = sub_100022FE8(v8);
  if (!v9) {
    return 106;
  }
  uint64_t v10 = v9;
  *uint64_t v9 = 18;
  sub_100008A18((uint64_t)(v9 + 1), a2, 6uLL);
  unsigned __int8 v10[8] = a3;
  if (a3) {
    memmove(v10 + 9, a4, a3);
  }
  else {
    size_t v8 = 9;
  }

  return sub_1000D7FDC(a1, v10, v8);
}

uint64_t sub_1000D86C8(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  int v6 = 6 * a2;
  uint64_t v7 = sub_100022FE8(6 * a2 + 3);
  if (!v7) {
    return 106;
  }
  size_t v8 = v7;
  _WORD *v7 = 20;
  *((unsigned char *)v7 + 2) = a2;
  if (a2)
  {
    uint64_t v9 = 0;
    uint64_t v10 = v6 - 2;
    uint64_t v11 = 6 * a2;
    do
    {
      if (v9 + 3 >= v10) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1973, "ByteStream_NumReadBytesAvail(bs) >= OI_BD_ADDR_BYTE_SIZE");
      }
      sub_100008A18((uint64_t)v8 + v9 + 3, a3 + v9, 6uLL);
      v9 += 6;
    }
    while (v11 != v9);
    unsigned __int16 v12 = v9 + 3;
  }
  else
  {
    unsigned __int16 v12 = 3;
  }

  return sub_1000D7FDC(a1, v8, v12);
}

uint64_t sub_1000D87CC(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = sub_100022FE8(8uLL);
  if (!v4) {
    return 106;
  }
  int v5 = v4;
  *uint64_t v4 = 21;
  sub_100008A18((uint64_t)(v4 + 1), a2, 6uLL);

  return sub_1000D7FDC(a1, v5, 8uLL);
}

uint64_t sub_1000D884C(unsigned __int8 *a1, uint64_t a2, char a3)
{
  int v6 = sub_100022FE8(9uLL);
  if (!v6) {
    return 106;
  }
  uint64_t v7 = v6;
  *int v6 = 22;
  sub_100008A18((uint64_t)(v6 + 1), a2, 6uLL);
  v7[8] = a3;

  return sub_1000D7FDC(a1, v7, 9uLL);
}

uint64_t sub_1000D88D4(unsigned __int8 *a1, unsigned int a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v8 = sub_1000D79F4(a1);
  if (!v8) {
    return 122;
  }
  unsigned int v9 = *(_DWORD *)(v8 + 16);
  if (v9 >= 0x10002) {
    int v10 = 8;
  }
  else {
    int v10 = 6;
  }
  if (a2 == 4 && a3 >= 2 && *a4 - 1 > 1) {
    return 101;
  }
  unsigned __int16 v11 = v10 + a3;
  unsigned __int16 v12 = sub_100022FE8(v10 + a3);
  if (!v12) {
    return 106;
  }
  if (v11 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2070, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v11) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2068, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  uint64_t v13 = v12;
  *unsigned __int16 v12 = 23;
  if (v9 > 0x10001)
  {
    if (v11 <= 5u) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2074, "ByteStream_NumReadBytesAvail(bs) >= 4");
    }
    unsigned int v18 = HIWORD(a2);
    v12[1] = a2;
    unsigned int v14 = 3;
    char v15 = 24;
    uint64_t v16 = 5;
    uint64_t v17 = 2;
  }
  else
  {
    if (v11 <= 3u) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2072, "ByteStream_NumReadBytesAvail(bs) >= 2");
    }
    unsigned int v14 = 2;
    char v15 = 8;
    uint64_t v16 = 3;
    uint64_t v17 = 1;
    LOBYTE(v1_Block_object_dispose(&STACK[0x2C0], 8) = a2;
  }
  LOBYTE(v12[v17]) = v18;
  *((unsigned char *)v12 + v16) = a2 >> v15;
  if ((int)(v11 - v14 * 2) <= 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2076, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  v12[v14] = a3;
  unsigned int v20 = v14 * 2 + 2;
  if (a3)
  {
    if ((int)(v11 - v20) < (int)a3) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2078, "ByteStream_NumReadBytesAvail(bs) >= (len)");
    }
    memmove((char *)v12 + v20, a4, a3);
    LOWORD(v20) = v20 + a3;
  }

  return sub_1000D7FDC(a1, v13, (unsigned __int16)v20);
}

uint64_t sub_1000D8AF0(unsigned __int8 *a1, uint64_t a2)
{
  unsigned __int16 v4 = *(_WORD *)(a2 + 8) + 12;
  int v5 = (char *)sub_100022FE8(*(unsigned __int16 *)(a2 + 8) + 12);
  if (!v5) {
    return 106;
  }
  if (v4 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2103, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v4) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2101, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  int v6 = v5;
  *(_WORD *)int v5 = 27;
  if (v4 <= 5u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2104, "ByteStream_NumReadBytesAvail(bs) >= 4");
  }
  *((_WORD *)v5 + 1) = *(_DWORD *)a2;
  void v5[4] = *(_WORD *)(a2 + 2);
  void v5[5] = *(unsigned char *)(a2 + 3);
  if (v4 <= 9u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2105, "ByteStream_NumReadBytesAvail(bs) >= 4");
  }
  *((_WORD *)v5 + 3) = *(_DWORD *)(a2 + 4);
  unsigned __int8 v5[8] = *(_WORD *)(a2 + 6);
  v5[9] = *(unsigned char *)(a2 + 7);
  if (v4 <= 0xBu) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2106, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  v5[10] = *(unsigned char *)(a2 + 8);
  v5[11] = *(unsigned char *)(a2 + 9);
  size_t v7 = *(unsigned __int16 *)(a2 + 8);
  if (v4 - 12 < v7) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2107, "ByteStream_NumReadBytesAvail(bs) >= (timeStamp->strLen)");
  }
  memmove(v5 + 12, *(const void **)(a2 + 16), v7);
  size_t v8 = (unsigned __int16)(*(_WORD *)(a2 + 8) + 12);

  return sub_1000D7FDC(a1, v6, v8);
}

uint64_t sub_1000D8CA0(unsigned __int8 *a1, char a2, unsigned int a3, const void *a4)
{
  unsigned __int16 v8 = a3 + 5;
  unsigned int v9 = (char *)sub_100022FE8(a3 + 5);
  if (!v9) {
    return 106;
  }
  if (v8 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2156, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v8) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2154, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  int v10 = v9;
  *(_WORD *)unsigned int v9 = 26;
  if (v8 <= 2u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2157, "ByteStream_NumReadBytesAvail(bs) >= 1");
  }
  void v9[2] = a2;
  if (v8 <= 4u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2158, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  *(_WORD *)(v9 + 3) = a3;
  if (a3)
  {
    if (v8 - 5 < a3) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2160, "ByteStream_NumReadBytesAvail(bs) >= (len)");
    }
    memmove(v9 + 5, a4, a3);
  }
  else
  {
    unsigned __int16 v8 = 5;
  }

  return sub_1000D7FDC(a1, v10, v8);
}

uint64_t sub_1000D8DF4(unsigned __int8 *a1, unsigned int a2, char a3)
{
  if (a2 > 0x1F) {
    return 101;
  }
  char v5 = a2;
  size_t v7 = sub_100022FE8(4uLL);
  if (!v7) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2186, "stream");
  }
  *(_WORD *)size_t v7 = 30;
  _DWORD v7[2] = a3;
  v7[3] = (4 * v5) | 0x80;

  return sub_1000D7FDC(a1, v7, 4uLL);
}

uint64_t sub_1000D8E98(unsigned __int8 *a1, unsigned int a2, unsigned int a3, const void *a4)
{
  if (a2 > 0x1F || !a4) {
    return 101;
  }
  __int16 v6 = a2;
  unsigned __int16 v8 = a3 + 4;
  unsigned int v9 = (char *)sub_100022FE8(a3 + 4);
  if (!v9) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2213, "stream");
  }
  if (v8 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2215, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v8) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2214, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  int v10 = v9;
  *(_WORD *)unsigned int v9 = 30;
  if (v8 <= 3u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2216, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  void v9[2] = a3;
  void v9[3] = (unsigned __int16)((v6 << 10) | a3) >> 8;
  if (v8 - 4 < a3) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2217, "ByteStream_NumReadBytesAvail(bs) >= (len)");
  }
  memmove(v9 + 4, a4, a3);

  return sub_1000D7FDC(a1, v10, v8);
}

uint64_t sub_1000D8FF0(unsigned __int8 *a1, char a2, int a3)
{
  __int16 v6 = (char *)sub_100022FE8(7uLL);
  if (!v6) {
    return 106;
  }
  *(_WORD *)__int16 v6 = 31;
  void v6[2] = a2;
  *(_DWORD *)(v6 + 3) = a3;

  return sub_1000D7FDC(a1, v6, 7uLL);
}

uint64_t sub_1000D9084(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  if (!a2 || !a3) {
    return 101;
  }
  unsigned __int16 v6 = a2 + 4;
  size_t v7 = sub_100022FE8(a2 + 4);
  if (!v7) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2262, "stream");
  }
  if (v6 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2264, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v6) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2263, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  unsigned __int16 v8 = v7;
  _WORD *v7 = 32;
  if (v6 <= 3u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2265, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  v7[1] = a2;
  if (v6 - 4 < a2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2266, "ByteStream_NumReadBytesAvail(bs) >= (len)");
  }
  memmove(v7 + 2, a3, a2);

  return sub_1000D7FDC(a1, v8, v6);
}

uint64_t sub_1000D91C4(unsigned __int8 *a1, char a2, char a3, unsigned int a4, const void *a5)
{
  unsigned __int16 v10 = a4 + 6;
  unsigned __int16 v11 = (char *)sub_100022FE8(a4 + 6);
  if (!v11) {
    return 106;
  }
  if (v10 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2291, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v10) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2289, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  unsigned __int16 v12 = v11;
  *(_WORD *)unsigned __int16 v11 = 33;
  if (v10 <= 2u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2292, "ByteStream_NumReadBytesAvail(bs) >= 1");
  }
  _DWORD v11[2] = a2;
  if (v10 == 3) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2293, "ByteStream_NumReadBytesAvail(bs) >= 1");
  }
  v11[3] = a3;
  if (v10 <= 5u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2294, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  *((_WORD *)v11 + 2) = a4;
  if (a4)
  {
    if (v10 - 6 < a4) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2296, "ByteStream_NumReadBytesAvail(bs) >= (pldLen)");
    }
    memmove(v11 + 6, a5, a4);
  }
  else
  {
    unsigned __int16 v10 = 6;
  }

  return sub_1000D7FDC(a1, v12, v10);
}

uint64_t sub_1000D934C(unsigned __int8 *a1)
{
  uint64_t v2 = sub_100022FE8(2uLL);
  if (!v2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2314, "stream");
  }
  _WORD *v2 = 34;

  return sub_1000D7FDC(a1, v2, 2uLL);
}

uint64_t sub_1000D93B4(unsigned __int8 *a1, __int16 a2, unsigned int a3, const void *a4)
{
  unsigned __int16 v8 = a3 + 6;
  unsigned int v9 = sub_100022FE8(a3 + 6);
  if (!v9) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2338, "data");
  }
  if (v8 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2341, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v8) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2339, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  unsigned __int16 v10 = v9;
  *unsigned int v9 = 36;
  if (v8 <= 3u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2342, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  v9[1] = a2;
  if (v8 <= 5u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2343, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  void v9[2] = a3;
  if (a3)
  {
    if (v8 - 6 < a3) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2345, "ByteStream_NumReadBytesAvail(bs) >= (pLen)");
    }
    memmove(v9 + 3, a4, a3);
  }
  else
  {
    unsigned __int16 v8 = 6;
  }

  return sub_1000D7FDC(a1, v10, v8);
}

uint64_t sub_1000D9508(unsigned __int8 *a1, int a2)
{
  uint64_t result = 101;
  if (a1)
  {
    __int16 v4 = a2;
    if (a2)
    {
      char v5 = sub_100022FE8(4uLL);
      if (v5)
      {
        *char v5 = 48;
        v5[1] = v4;
        return sub_1000D7FDC(a1, v5, 4uLL);
      }
      else
      {
        return 106;
      }
    }
  }
  return result;
}

uint64_t sub_1000D9584(unsigned __int8 *a1, unsigned int a2, uint64_t a3, int a4)
{
  if (!a2) {
    return 101;
  }
  uint64_t v5 = a3;
  char v6 = a2;
  uint64_t v8 = a2;
  unsigned int v9 = (__int16 *)(a3 + 2);
  unsigned __int16 v10 = 3;
  uint64_t v11 = a2;
  do
  {
    __int16 v12 = *v9;
    v9 += 8;
    v10 += v12 + 4;
    --v11;
  }
  while (v11);
  if (!a1) {
    return 101;
  }
  uint64_t v13 = (char *)sub_100022FE8(v10);
  if (!v13) {
    return 106;
  }
  if (v10 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2415, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v10) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2412, "(msgLen) > 0");
  }
  unsigned int v14 = v13;
  if (a4) {
    char v15 = 49;
  }
  else {
    char v15 = 50;
  }
  char *v13 = v15;
  v13[1] = 0;
  if (v10 <= 2u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2416, "ByteStream_NumReadBytesAvail(bs) >= 1");
  }
  _OWORD v13[2] = v6;
  int v16 = 3;
  do
  {
    if ((unsigned __int16)(v10 - 1) <= (unsigned __int16)v16) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2419, "ByteStream_NumReadBytesAvail(bs) >= 2");
    }
    uint64_t v17 = &v14[(unsigned __int16)v16];
    *uint64_t v17 = *(unsigned char *)v5;
    v17[1] = *(unsigned char *)(v5 + 1);
    if ((unsigned __int16)(v10 - 1) <= (unsigned __int16)(v16 + 2)) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2420, "ByteStream_NumReadBytesAvail(bs) >= 2");
    }
    unsigned int v18 = &v14[(unsigned __int16)(v16 + 2)];
    *unsigned int v18 = *(unsigned char *)(v5 + 2);
    v18[1] = *(unsigned char *)(v5 + 3);
    int v19 = v16 + 4;
    size_t v20 = *(unsigned __int16 *)(v5 + 2);
    if (v10 - (unsigned __int16)(v16 + 4) < (int)v20) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2423, "ByteStream_NumReadBytesAvail(bs) >= (keys[i].keyLength)");
    }
    memmove(&v14[(unsigned __int16)v19], *(const void **)(v5 + 8), v20);
    int v16 = *(unsigned __int16 *)(v5 + 2) + v19;
    v5 += 16;
    --v8;
  }
  while (v8);

  return sub_1000D7FDC(a1, v14, (unsigned __int16)v16);
}

uint64_t sub_1000D9784(unsigned __int8 *a1, unsigned int a2, uint64_t a3)
{
  return sub_1000D9584(a1, a2, a3, 1);
}

uint64_t sub_1000D978C(uint64_t a1, int a2, uint64_t a3, unsigned __int16 *a4)
{
  if (!a3)
  {
    sub_10025B8C0();
    return 101;
  }
  if (!*(void *)(a3 + 8))
  {
    sub_10025B8C0();
    if (!*(void *)(a3 + 8)) {
      return 101;
    }
  }
  if (!*(void *)(a3 + 16))
  {
    sub_10025B8C0();
    if (!*(void *)(a3 + 16)) {
      return 101;
    }
  }
  if (qword_1009FD248 || (qword_1009FD248 = (uint64_t)sub_10010CE48(0xF8uLL)) != 0)
  {
    uint64_t v8 = (unsigned char *)sub_1000D79F4((unsigned __int8 *)a1);
    if (v8 && *v8)
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"BT_AACP_CLIENT_fastConnectCreateChannel Aready connected/connection in progress", v9, v10, v11, v12, v13, v14, v15, v56[0]);
        int v16 = sub_100050B4C(0x53u);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      return 133;
    }
    else
    {
      uint64_t v19 = sub_1000D7A80();
      if (v19)
      {
        uint64_t v20 = v19;
        *(void *)(v19 + 24) = a3;
        *(void *)(v19 + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
        uint64_t v21 = (int *)(v19 + 8);
        __int16 v22 = *(_WORD *)(a1 + 4);
        *(_DWORD *)(v19 + 1) = *(_DWORD *)a1;
        uint64_t v23 = v19 + 1;
        *(_WORD *)(v23 + 4) = v22;
        *(_DWORD *)(v23 + 31) = 0;
        if (a2)
        {
          v56[2] = 0;
          v56[1] = 0x200010004;
          v56[0] = (uint64_t)off_10099A640;
          *(_WORD *)(v20 + 12) = a2;
          uint64_t v17 = sub_100110330(v23, a2, (uint64_t)v56, a4, v21);
          if (v17)
          {
            if (sub_100058654())
            {
              sub_100056E24((uint64_t)"BT_AACP_CLIENT_fastConnectCreateChannel: Error creating AAP", v24, v25, v26, v27, v28, v29, v30, v56[0]);
              uint64_t v31 = sub_100050B4C(0x53u);
              if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
                sub_100744FE4();
              }
            }
          }
          else
          {
            *(unsigned char *)uint64_t v20 = 2;
          }
        }
        else
        {
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"BT_AACP_CLIENT_fastConnectCreateChannel invalid PSM", v48, v49, v50, v51, v52, v53, v54, v56[0]);
            uint64_t v55 = sub_100050B4C(0x53u);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_ERROR)) {
              sub_100744F6C();
            }
          }
          return 131;
        }
      }
      else
      {
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"BT_AACP_CLIENT_fastConnectCreateChannel No free AACP connection slot ", v32, v33, v34, v35, v36, v37, v38, v56[0]);
          uint64_t v39 = sub_100050B4C(0x53u);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
            sub_100744F6C();
          }
        }
        return 104;
      }
    }
  }
  else
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"init failed..!", v40, v41, v42, v43, v44, v45, v46, v56[0]);
      uint64_t v47 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    return 106;
  }
  return v17;
}

void sub_1000D9A44(unsigned __int8 *a1, unsigned int a2)
{
  __int16 v4 = (_OWORD *)sub_1000D79F4(a1);
  if (v4) {
    sub_1000D7ADC(v4);
  }

  sub_100110704((uint64_t)a1, a2);
}

uint64_t sub_1000D9A8C(int a1, int a2, __int16 a3, unsigned __int8 *a4)
{
  uint64_t v7 = sub_1000D79F4(a4);
  if (!v7) {
    return 114;
  }
  uint64_t v8 = v7;
  uint64_t result = 0;
  *(_WORD *)(v8 + 14) = a3;
  *(_DWORD *)(v8 + 16) = a1 | (a2 << 16);
  return result;
}

uint64_t sub_1000D9AE4(unsigned __int8 *a1, const void *a2, unsigned int a3)
{
  if (!a2) {
    return 101;
  }
  size_t v6 = a3 + 2;
  uint64_t v7 = sub_100022FE8(v6);
  if (!v7) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2605, "stream");
  }
  uint64_t v8 = v7;
  _WORD *v7 = 41;
  memmove(v7 + 1, a2, a3);

  return sub_1000D7FDC(a1, v8, v6);
}

uint64_t sub_1000D9B94(unsigned __int8 *a1)
{
  uint64_t v2 = sub_100022FE8(2uLL);
  if (!v2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2629, "data");
  }
  _WORD *v2 = 38;

  return sub_1000D7FDC(a1, v2, 2uLL);
}

uint64_t sub_1000D9BFC(unsigned __int8 *a1)
{
  uint64_t v2 = sub_100022FE8(2uLL);
  if (!v2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2677, "data");
  }
  _WORD *v2 = 45;

  return sub_1000D7FDC(a1, v2, 2uLL);
}

uint64_t sub_1000D9C64(unsigned __int8 *a1, const void *a2, uint64_t a3, char a4)
{
  if (a2 && a3)
  {
    unsigned __int16 v8 = a3 + 6;
    uint64_t v9 = (char *)sub_100022FE8((a3 + 6));
    if (!v9) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2706, "data");
    }
    if (v8 == 1) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2709, "ByteStream_NumReadBytesAvail(bs) >= 2");
    }
    if (!v8) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2707, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
    }
    uint64_t v10 = v9;
    *(_WORD *)uint64_t v9 = 44;
    if (v8 <= 2u) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2710, "ByteStream_NumReadBytesAvail(bs) >= 1");
    }
    void v9[2] = a4;
    if (v8 == 3) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2711, "ByteStream_NumReadBytesAvail(bs) >= 1");
    }
    void v9[3] = 1;
    if (v8 <= 5u) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2712, "ByteStream_NumReadBytesAvail(bs) >= 2");
    }
    *((_WORD *)v9 + 2) = a3;
    if (v8 - 6 < a3) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2713, "ByteStream_NumReadBytesAvail(bs) >= (len)");
    }
    memmove(v9 + 6, a2, a3);
    return sub_1000D7FDC(a1, v10, (unsigned __int16)(a3 + 6));
  }
  else
  {
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"BT_AACP_CLIENT_GAPASendChallenge: Invalid data or len (%u)", v12, v13, v14, v15, v16, v17, v18, a3);
      uint64_t v19 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    return 101;
  }
}

uint64_t sub_1000D9E48(unsigned __int8 *a1, const void *a2, unsigned int a3)
{
  if (!a1 || !a2 || !a3) {
    return 101;
  }
  unsigned __int16 v6 = a3 + 4;
  uint64_t v7 = sub_100022FE8(a3 + 4);
  if (!v7) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2740, "packet");
  }
  if (v6 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2743, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v6) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2741, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  unsigned __int16 v8 = v7;
  _WORD *v7 = 68;
  if (v6 <= 3u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2744, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  v7[1] = a3;
  if (v6 - 4 < a3) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2745, "ByteStream_NumReadBytesAvail(bs) >= (len)");
  }
  memmove(v7 + 2, a2, a3);

  return sub_1000D7FDC(a1, v8, (unsigned __int16)(a3 + 4));
}

uint64_t sub_1000D9F90(unsigned __int8 *a1, const void *a2, unsigned int a3)
{
  if (!a1 || !a2 || !a3) {
    return 101;
  }
  unsigned __int16 v6 = a3 + 4;
  uint64_t v7 = sub_100022FE8(a3 + 4);
  if (!v7) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2771, "packet");
  }
  if (v6 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2774, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v6) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2772, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  unsigned __int16 v8 = v7;
  _WORD *v7 = 75;
  if (v6 <= 3u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2775, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  v7[1] = a3;
  if (v6 - 4 < a3) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2776, "ByteStream_NumReadBytesAvail(bs) >= (len)");
  }
  memmove(v7 + 2, a2, a3);

  return sub_1000D7FDC(a1, v8, (unsigned __int16)(a3 + 4));
}

uint64_t sub_1000DA0D8(unsigned __int8 *a1)
{
  if (!a1) {
    return 101;
  }
  uint64_t v2 = sub_100022FE8(2uLL);
  if (!v2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2796, "packet");
  }
  _WORD *v2 = 69;

  return sub_1000D7FDC(a1, v2, 2uLL);
}

uint64_t sub_1000DA154(unsigned __int8 *a1, int a2)
{
  if (!a1) {
    return 101;
  }
  __int16 v4 = (char *)sub_100022FE8(6uLL);
  if (!v4) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2819, "packet");
  }
  uint64_t v5 = v4;
  *(_WORD *)__int16 v4 = 72;
  *(_DWORD *)(v4 + 2) = a2;
  uint64_t v6 = sub_1000D79F4(a1);
  if (v6 && (uint64_t v7 = (unsigned char *)v6, v8 = *(unsigned int *)(v6 + 8), v8))
  {
    if (*v7 == 2)
    {
      sub_10010FE80(v8, v5, 6uLL);
      uint64_t v10 = v9;
      if (!v9) {
        return v10;
      }
    }
    else
    {
      uint64_t v10 = 408;
    }
  }
  else
  {
    uint64_t v10 = 122;
  }
  sub_100023010(v5);
  return v10;
}

uint64_t sub_1000DA22C(unsigned __int8 *a1)
{
  if (!a1) {
    return 101;
  }
  uint64_t v2 = sub_100022FE8(2uLL);
  if (!v2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2842, "packet");
  }
  _WORD *v2 = 74;

  return sub_1000D7FDC(a1, v2, 2uLL);
}

uint64_t sub_1000DA2A8(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  if (!a2 || !a1 || !a3) {
    return 101;
  }
  unsigned __int16 v6 = a2 + 5;
  uint64_t v7 = sub_100022FE8(a2 + 5);
  if (!v7) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2871, "packet");
  }
  if (v6 == 1) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2874, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  if (!v6) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2872, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
  }
  uint64_t v8 = v7;
  _WORD *v7 = 76;
  if (v6 <= 3u) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2875, "ByteStream_NumReadBytesAvail(bs) >= 2");
  }
  v7[1] = a2;
  if (v6 - 4 < a2) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2876, "ByteStream_NumReadBytesAvail(bs) >= (avMsgLen)");
  }
  memmove(v7 + 2, a3, a2);

  return sub_1000D7FDC(a1, v8, (unsigned __int16)(a2 + 4));
}

uint64_t sub_1000DA3F0(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  uint64_t result = 101;
  if (a2 && a1 && a3)
  {
    unsigned __int16 v7 = a2 + 4;
    uint64_t v8 = sub_100022FE8(a2 + 4);
    if (v8)
    {
      if (v7 == 1) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2910, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      if (!v7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2908, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
      }
      uint64_t v9 = v8;
      _WORD *v8 = 79;
      if (v7 <= 3u) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2911, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      v8[1] = a2;
      if (v7 - 4 < a2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2912, "ByteStream_NumReadBytesAvail(bs) >= (dataLen)");
      }
      memmove(v8 + 2, a3, a2);
      return sub_1000D7FDC(a1, v9, (unsigned __int16)(a2 + 4));
    }
    else
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"BT_AACP_CLIENT_SendUARPData - failed to allocate memory", v10, v11, v12, v13, v14, v15, v16, v18);
        uint64_t v17 = sub_100050B4C(0x53u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      return 106;
    }
  }
  return result;
}

uint64_t sub_1000DA564(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1) {
    return 101;
  }
  __int16 v4 = (char *)sub_100022FE8(0xAuLL);
  if (!v4) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2933, "packet");
  }
  *(_WORD *)__int16 v4 = 77;
  *(void *)(v4 + 2) = a2;

  return sub_1000D7FDC(a1, v4, 0xAuLL);
}

uint64_t sub_1000DA620(unsigned __int8 *a1, uint64_t a2)
{
  if (!a1) {
    return 101;
  }
  __int16 v4 = (char *)sub_100022FE8(0xAuLL);
  if (!v4) {
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2957, "packet");
  }
  *(_WORD *)__int16 v4 = 78;
  *(void *)(v4 + 2) = a2;

  return sub_1000D7FDC(a1, v4, 0xAuLL);
}

uint64_t sub_1000DA6DC(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  uint64_t result = 101;
  if (a2 && a1 && a3)
  {
    unsigned __int16 v7 = a2 + 4;
    uint64_t v8 = sub_100022FE8(a2 + 4);
    if (v8)
    {
      if (v7 == 1) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2994, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      if (!v7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2992, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
      }
      uint64_t v9 = v8;
      _WORD *v8 = 82;
      if (v7 <= 3u) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2995, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      v8[1] = a2;
      if (v7 - 4 < a2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 2996, "ByteStream_NumReadBytesAvail(bs) >= (dataLen)");
      }
      memmove(v8 + 2, a3, a2);
      return sub_1000D7FDC(a1, v9, (unsigned __int16)(a2 + 4));
    }
    else
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"BT_AACP_CLIENT_SendSourceContextMessage - failed to allocate memory", v10, v11, v12, v13, v14, v15, v16, v18);
        uint64_t v17 = sub_100050B4C(0x53u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      return 106;
    }
  }
  return result;
}

uint64_t sub_1000DA850(unsigned __int8 *a1, unsigned int a2, const void *a3)
{
  uint64_t result = 101;
  if (a2 && a1 && a3)
  {
    unsigned __int16 v7 = a2 + 4;
    uint64_t v8 = sub_100022FE8(a2 + 4);
    if (v8)
    {
      if (v7 == 1) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 3030, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      if (!v7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 3028, "((bs).__data != NULL) && ((bs).__trueSize > 0)");
      }
      uint64_t v9 = v8;
      _WORD *v8 = 83;
      if (v7 <= 3u) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 3031, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      v8[1] = a2;
      if (v7 - 4 < a2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 3032, "ByteStream_NumReadBytesAvail(bs) >= (dataLen)");
      }
      memmove(v8 + 2, a3, a2);
      return sub_1000D7FDC(a1, v9, (unsigned __int16)(a2 + 4));
    }
    else
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"BT_AACP_CLIENT_SendPMEConfig - failed to allocate memory", v10, v11, v12, v13, v14, v15, v16, v18);
        uint64_t v17 = sub_100050B4C(0x53u);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      return 106;
    }
  }
  return result;
}

uint64_t sub_1000DA9C4(unsigned __int8 *a1, unsigned int a2)
{
  __int16 v4 = (unsigned char *)qword_1009FD248;
  if (!qword_1009FD248)
  {
    __int16 v4 = sub_10010CE48(0xF8uLL);
    qword_1009FD248 = (uint64_t)v4;
  }
  if (sub_1000D79F4(a1))
  {
    if (!sub_100058654()) {
      return sub_1001E121C(a2, 436);
    }
    sub_100056E24((uint64_t)"address already connected", v5, v6, v7, v8, v9, v10, v11, v34);
    uint64_t v12 = sub_100050B4C(0x53u);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      return sub_1001E121C(a2, 436);
    }
    goto LABEL_6;
  }
  if (v4)
  {
    uint64_t v14 = 8;
    while (v4[v14] != 1)
    {
      v14 += 48;
      if (v14 == 248) {
        goto LABEL_13;
      }
    }
    if (!sub_100058654()) {
      return sub_1001E121C(a2, 436);
    }
    sub_100056E24((uint64_t)"Another AACP connection in progress", v18, v19, v20, v21, v22, v23, v24, v34);
    uint64_t v25 = sub_100050B4C(0x53u);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      return sub_1001E121C(a2, 436);
    }
LABEL_6:
    sub_100744F6C();
    return sub_1001E121C(a2, 436);
  }
LABEL_13:
  uint64_t result = sub_1000D7A80();
  if (!result)
  {
    if (!sub_100058654()) {
      return sub_1001E121C(a2, 436);
    }
    sub_100056E24((uint64_t)"No free AACP connection slot ", v26, v27, v28, v29, v30, v31, v32, v34);
    uint64_t v33 = sub_100050B4C(0x53u);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      return sub_1001E121C(a2, 436);
    }
    goto LABEL_6;
  }
  uint64_t v15 = (uint64_t (**)(unsigned __int8 *))qword_100A14800;
  *(void *)(result + 24) = qword_100A14800;
  *(void *)(result + _Block_object_dispose(&STACK[0x2C0], 8) = 0;
  int v16 = *(_DWORD *)a1;
  *(_WORD *)(result + 5) = *((_WORD *)a1 + 2);
  *(_DWORD *)(result + 1) = v16;
  *(_DWORD *)(result + 32) = 0;
  if (v15)
  {
    uint64_t v17 = *v15;
    if (*v15)
    {
      return v17(a1);
    }
  }
  return result;
}

void sub_1000DAB60(unsigned __int8 *a1, uint64_t a2, int a3, __int16 a4, int a5, int a6)
{
  uint64_t v11 = sub_1000D79F4(a1);
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"AACP: aapConnectCb  uint64_t result = %d", v12, v13, v14, v15, v16, v17, v18, a2);
    uint64_t v19 = sub_100050B4C(0x53u);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136446210;
      uint64_t v33 = sub_100050714();
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, " %{public}s", buf, 0xCu);
    }
  }
  if (v11)
  {
    int v20 = a6 | (a5 << 16);
    if (a2) {
      __int16 v21 = 0;
    }
    else {
      __int16 v21 = a4;
    }
    if (a2) {
      int v22 = 0;
    }
    else {
      int v22 = a3;
    }
    *(_WORD *)(v11 + 14) = v21;
    if (a2) {
      int v20 = 0;
    }
    *(_DWORD *)(v11 + _Block_object_dispose(&STACK[0x2C0], 8) = v22;
    *(_DWORD *)(v11 + 16) = v20;
    sub_1000DDD44(a2, v22);
  }
  else if (sub_100058654())
  {
    sub_100056E24((uint64_t)"No connection associated with address", v23, v24, v25, v26, v27, v28, v29, v31);
    uint64_t v30 = sub_100050B4C(0x53u);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR)) {
      sub_100744F6C();
    }
  }
}

void sub_1000DACC4(uint64_t a1)
{
  uint64_t v2 = qword_1009FD248;
  if (qword_1009FD248)
  {
    uint64_t v3 = 0;
    while (*(_DWORD *)(qword_1009FD248 + v3 + 16) != a1)
    {
      v3 += 48;
      if (v3 == 240)
      {
        uint64_t v4 = 8;
        while (*(unsigned char *)(qword_1009FD248 + v4) != 1)
        {
          v4 += 48;
          if (v4 == 248) {
            goto LABEL_8;
          }
        }
        goto LABEL_20;
      }
    }
    int v13 = *(unsigned __int8 *)(qword_1009FD248 + v3 + 8);
    if (v13 == 1)
    {
LABEL_20:
      sub_1000DDD44(3570, a1);
      return;
    }
    if (v13 != 2) {
      return;
    }
    for (uint64_t i = 0; i != 240; i += 48)
    {
      uint64_t v15 = qword_1009FD248 + i;
      if (*(_DWORD *)(qword_1009FD248 + i + 16) == a1)
      {
        (*(void (**)(uint64_t))(*(void *)(v15 + 32) + 16))(v15 + 9);
        uint64_t v24 = (_DWORD *)(v15 + 40);
        uint64_t v25 = 4;
        do
        {
          uint64_t v26 = *v24;
          if (v26)
          {
            sub_100026DB4(v26);
            *uint64_t v24 = 0;
          }
          ++v24;
          --v25;
        }
        while (v25);
        sub_1000D7ADC((_OWORD *)(v2 + i + 8));
        return;
      }
    }
    if (!sub_100058654()) {
      return;
    }
    sub_100056E24((uint64_t)"AAP Handle %d is not valid!\n", v16, v17, v18, v19, v20, v21, v22, a1);
    uint64_t v23 = sub_100050B4C(0x53u);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      return;
    }
    goto LABEL_18;
  }
LABEL_8:
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"No connection associated with handle (%d)!\n", v5, v6, v7, v8, v9, v10, v11, a1);
    uint64_t v12 = sub_100050B4C(0x53u);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
LABEL_18:
    }
      sub_100744F6C();
  }
}

void sub_1000DAE84(uint64_t a1, void *ptr)
{
  if (qword_1009FD248)
  {
    uint64_t v4 = 0;
    while (*(_DWORD *)(qword_1009FD248 + v4 + 16) != a1)
    {
      v4 += 48;
      if (v4 == 240) {
        goto LABEL_5;
      }
    }
    int v13 = *(void (**)(uint64_t, void *))(*(void *)(qword_1009FD248 + v4 + 32) + 24);
    if (v13) {
      v13(qword_1009FD248 + v4 + 9, ptr);
    }
    sub_100023010(ptr);
  }
  else
  {
LABEL_5:
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"No connection associated with handle (%d)", v5, v6, v7, v8, v9, v10, v11, a1);
      uint64_t v12 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
  }
}

void sub_1000DAF60(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  uint64_t v4 = qword_1009FD248;
  if (!qword_1009FD248)
  {
LABEL_5:
    if (!sub_100058654()) {
      return;
    }
    sub_100056E24((uint64_t)"No connection associated with handle (%d)", v8, v9, v10, v11, v12, v13, v14, a1);
    uint64_t v15 = sub_100050B4C(0x53u);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return;
    }
LABEL_553:
    sub_100744F6C();
    return;
  }
  uint64_t v7 = 0;
  while (*(_DWORD *)(qword_1009FD248 + v7 + 16) != a1)
  {
    v7 += 48;
    if (v7 == 240) {
      goto LABEL_5;
    }
  }
  if (!a2)
  {
    v418 = "data";
    goto LABEL_591;
  }
  if (a3 == 1)
  {
    uint64_t v16 = 0;
LABEL_35:
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Unknown AACP opcode: 0x%04x (AAP len %u)", v35, v36, v37, v38, v39, v40, v41, v16);
      uint64_t v42 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
      {
        buf[0] = 136446210;
        *(void *)&buf[1] = sub_100050714();
        _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)buf, 0xCu);
      }
    }
    return;
  }
  if (!a3)
  {
    v418 = "(length) > 0";
LABEL_591:
    sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 402, v418);
  }
  uint64_t v16 = *a2;
  unsigned int v17 = 1;
  switch(*a2)
  {
    case 2u:
      unsigned int v52 = a3;
      if (a3 < 3)
      {
        uint64_t v54 = a2;
        unsigned int v55 = 0;
        int v53 = 1;
        int v56 = 2;
      }
      else
      {
        int v53 = 0;
        uint64_t v54 = a2;
        unsigned int v55 = *((unsigned __int8 *)a2 + 2);
        int v56 = 3;
      }
      xpc_object_t v260 = (char *)sub_10010CE48(5 * v55);
      if (v260)
      {
        v430 = (void **)v260;
        if (!v55)
        {
LABEL_376:
          unint64_t v265 = *(void (**)(uint64_t, void, void **))(*(void *)(v4 + v7 + 32) + 32);
          if (v265) {
            v265(v4 + v7 + 9, v55, v430);
          }
          uint64_t v266 = v430;
          goto LABEL_484;
        }
        xpc_object_t v261 = v260 + 1;
        uint64_t v262 = v55;
        while (!v53)
        {
          if (v52 <= (unsigned __int16)v56) {
            goto LABEL_281;
          }
          int v53 = 0;
          *((unsigned char *)v261 - 1) = *((unsigned char *)v54 + (unsigned __int16)v56);
          char v263 = 1;
          ++v56;
LABEL_282:
          unsigned int v264 = *((unsigned __int8 *)v261 - 1);
          if (v264 <= 0x4F)
          {
            switch(*((unsigned char *)v261 - 1))
            {
              case 1:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 2:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 3:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_356;
              case 4:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_356;
              case 5:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_356;
              case 6:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_356;
              case 7:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_356;
              case 8:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_356;
              case 9:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0xA:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0xB:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0xC:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0xD:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0xF:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x10:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x11:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x12:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x13:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x14:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x15:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x16:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x17:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x18:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x20:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              case 0x30:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
LABEL_356:
                if ((int)(v52 - 3) <= (unsigned __int16)v56) {
                  goto LABEL_374;
                }
                int v53 = 0;
                *xpc_object_t v261 = *(_DWORD *)((char *)v54 + (unsigned __int16)v56);
                v56 += 4;
                break;
              case 0x40:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                goto LABEL_371;
              default:
                goto LABEL_375;
            }
            goto LABEL_375;
          }
          if (*((unsigned __int8 *)v261 - 1) > 0xAFu)
          {
            if (*((unsigned __int8 *)v261 - 1) <= 0xCFu)
            {
              if (v264 == 176)
              {
                if ((v263 & 1) == 0)
                {
LABEL_373:
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
LABEL_374:
                  int v53 = 1;
                  goto LABEL_375;
                }
              }
              else
              {
                if (v264 != 192) {
                  goto LABEL_375;
                }
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
              }
            }
            else
            {
              switch(v264)
              {
                case 0xD0u:
                  if ((v263 & 1) == 0) {
                    goto LABEL_373;
                  }
                  break;
                case 0xE0u:
                  if ((v263 & 1) == 0) {
                    goto LABEL_373;
                  }
                  break;
                case 0xF0u:
                  if ((v263 & 1) == 0) {
                    goto LABEL_373;
                  }
                  break;
                default:
                  goto LABEL_375;
              }
            }
          }
          else if (*((unsigned __int8 *)v261 - 1) <= 0x7Fu)
          {
            if (v264 == 80)
            {
              if ((v263 & 1) == 0) {
                goto LABEL_373;
              }
            }
            else
            {
              if (v264 != 96) {
                goto LABEL_375;
              }
              if ((v263 & 1) == 0) {
                goto LABEL_373;
              }
            }
          }
          else
          {
            switch(v264)
            {
              case 0x80u:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                break;
              case 0x90u:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                break;
              case 0xA0u:
                if ((v263 & 1) == 0) {
                  goto LABEL_373;
                }
                break;
              default:
                goto LABEL_375;
            }
          }
LABEL_371:
          if (v52 <= (unsigned __int16)v56) {
            goto LABEL_374;
          }
          int v53 = 0;
          *(unsigned char *)xpc_object_t v261 = *((unsigned char *)v54 + (unsigned __int16)v56++);
LABEL_375:
          xpc_object_t v261 = (_DWORD *)((char *)v261 + 5);
          if (!--v262) {
            goto LABEL_376;
          }
        }
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
LABEL_281:
        char v263 = 0;
        int v53 = 1;
        goto LABEL_282;
      }
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"AACP_MSG_CAPABILITIES_RESP Could not allocate %d bytes", v319, v320, v321, v322, v323, v324, v325, 5 * v55);
      int v326 = sub_100050B4C(0x53u);
      if (!os_log_type_enabled(v326, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_553;
    case 4u:
      if (a3 >= 3 && (uint64_t v57 = *((unsigned __int8 *)a2 + 2), *((unsigned char *)a2 + 2)))
      {
        uint64_t v58 = 5 * v57;
        v429 = (void **)sub_10010CE48(5 * v57);
        if (v429)
        {
          uint64_t v425 = v57;
          unsigned int v59 = a3;
          uint64_t v60 = 0;
          int v61 = 0;
          uint64_t v62 = 3;
          while (!v61)
          {
            if (v59 <= (unsigned __int16)v62) {
              goto LABEL_57;
            }
            uint64_t v63 = (unsigned __int16)v62 + 1;
            *((unsigned char *)v429 + v60) = *((unsigned char *)a2 + (unsigned __int16)v62);
            if (v59 <= (unsigned __int16)(v62 + 1)) {
              goto LABEL_58;
            }
            uint64_t v64 = (unsigned __int16)v62 + 2;
            *((unsigned char *)v429 + v60 + 1) = *((unsigned char *)a2 + v63);
            uint64_t v63 = v64;
            if (v59 <= (unsigned __int16)v64) {
              goto LABEL_59;
            }
            uint64_t v65 = (unsigned __int16)v62 + 3;
            *((unsigned char *)v429 + v60 + 2) = *((unsigned char *)a2 + v64);
            uint64_t v63 = v65;
            if (v59 > (unsigned __int16)v65)
            {
              uint64_t v63 = (unsigned __int16)v62 + 4;
              *((unsigned char *)v429 + v60 + 3) = *((unsigned char *)a2 + v65);
              if (v59 <= (unsigned __int16)v63)
              {
                int v61 = 1;
              }
              else
              {
                int v61 = 0;
                *((unsigned char *)v429 + v60 + 4) = *((unsigned char *)a2 + v63);
                uint64_t v63 = (v62 + 5);
              }
              goto LABEL_61;
            }
LABEL_60:
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
            int v61 = 1;
LABEL_61:
            v60 += 5;
            uint64_t v62 = v63;
            if (v58 == v60)
            {
              char v370 = *(void (**)(uint64_t, uint64_t, void **))(*(void *)(v4 + v7 + 32) + 40);
              if (v370) {
                v370(v4 + v7 + 9, v425, v429);
              }
              uint64_t v266 = v429;
              goto LABEL_484;
            }
          }
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
LABEL_57:
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
          uint64_t v63 = v62;
LABEL_58:
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
LABEL_59:
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
          goto LABEL_60;
        }
        if (!sub_100058654()) {
          return;
        }
        sub_100056E24((uint64_t)"BATT_INFO_MSG_BATT_INFO Could not allocate %d bytes", v392, v393, v394, v395, v396, v397, v398, 5 * v57);
        v399 = sub_100050B4C(0x53u);
        if (!os_log_type_enabled(v399, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      else
      {
        if (!sub_100058654()) {
          return;
        }
        sub_100056E24((uint64_t)"BATT_INFO_MSG_BATT_INFO: size_t count = 0", v243, v244, v245, v246, v247, v248, v249, v419);
        uint64_t v250 = sub_100050B4C(0x53u);
        if (!os_log_type_enabled(v250, OS_LOG_TYPE_ERROR)) {
          return;
        }
      }
      goto LABEL_553;
    case 6u:
      LOWORD(buf[0]) = 0;
      if ((a3 & 0xFFFE) != 2) {
        LOWORD(buf[0]) = a2[1];
      }
      uint64_t v66 = qword_1009FD248 + v7;
      uint64_t v67 = *(void (**)(uint64_t, _DWORD *))(*(void *)(qword_1009FD248 + v7 + 32) + 48);
      if (!v67) {
        return;
      }
      goto LABEL_383;
    case 8u:
      buf[0] = 0;
      if (a3 <= 2)
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      }
      else
      {
        LOBYTE(buf[0]) = *((unsigned char *)a2 + 2);
        if (a3 != 3)
        {
          BYTE1(buf[0]) = *((unsigned char *)a2 + 3);
          if (a3 > 4)
          {
            BYTE2(buf[0]) = *((unsigned char *)a2 + 4);
            if (a3 != 5) {
              HIBYTE(buf[0]) = *((unsigned char *)a2 + 5);
            }
LABEL_382:
            uint64_t v66 = v4 + v7;
            uint64_t v67 = *(void (**)(uint64_t, _DWORD *))(*(void *)(v4 + v7 + 32) + 56);
            if (v67) {
LABEL_383:
            }
              v67(v66 + 9, buf);
            return;
          }
LABEL_381:
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
          goto LABEL_382;
        }
      }
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      goto LABEL_381;
    case 9u:
      if (a3 <= 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1124, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      if (a3 <= 6) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1125, "ByteStream_NumReadBytesAvail(bs) >= 4");
      }
      uint64_t v68 = qword_1009FD248 + v7;
      uint64_t v69 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(qword_1009FD248 + v7 + 32) + 160);
      if (v69)
      {
        uint64_t v70 = *((unsigned __int8 *)a2 + 2);
        uint64_t v71 = *(unsigned int *)((char *)a2 + 3);
        v69(v68 + 9, v70, v71);
      }
      return;
    case 0xBu:
      if (a3 <= 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 627, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      if (a3 == 3) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 628, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      uint64_t v72 = *((unsigned __int8 *)a2 + 2);
      v423 = a2;
      uint64_t v73 = *((unsigned __int8 *)a2 + 3);
      if (v73)
      {
        unsigned int v426 = v72;
        char v74 = (void **)sub_10010CE48(6 * v73);
        uint64_t v75 = 0;
        unsigned __int16 v76 = 4;
        while (1)
        {
          int v77 = v76;
          uint64_t v78 = -6 * v75;
          char v79 = 1;
          while (1)
          {
            if ((v79 & 1) == 0)
            {
              sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
              goto LABEL_88;
            }
            if ((int)a3 - 5 > v77) {
              break;
            }
LABEL_88:
            char v79 = 0;
            ++v75;
            v78 -= 6;
            if (v73 == v75)
            {
              if (!sub_100058654()) {
                goto LABEL_521;
              }
              sub_100056E24((uint64_t)"AACP_MSG_DEV_LIST error initializing device list", v252, v253, v254, v255, v256, v257, v258, v419);
              uint64_t v259 = sub_100050B4C(0x53u);
              if (!os_log_type_enabled(v259, OS_LOG_TYPE_ERROR)) {
                goto LABEL_521;
              }
              goto LABEL_588;
            }
          }
          sub_100008A18((uint64_t)v74 - v78, (uint64_t)v423 + v77, 6uLL);
          unsigned __int16 v76 = v77 + 6;
          if (v73 - 1 == v75++)
          {
            uint64_t v72 = v426;
            goto LABEL_480;
          }
        }
      }
      char v74 = 0;
LABEL_480:
      __int16 v327 = *(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)(v4 + v7 + 32) + 64);
      if (v327) {
        v327(v4 + v7 + 9, v72, v73, v74);
      }
      if (!v74) {
        return;
      }
      goto LABEL_483;
    case 0xCu:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 652, "ByteStream_NumReadBytesAvail(bs) >= OI_BD_ADDR_BYTE_SIZE");
      }
      sub_100008A18((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 == 8)
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        uint64_t v81 = 0;
      }
      else
      {
        uint64_t v81 = *((unsigned __int8 *)a2 + 8);
        if (a3 >= 0xA)
        {
          uint64_t v296 = *((unsigned __int8 *)a2 + 9);
          goto LABEL_439;
        }
      }
      uint64_t v296 = 0;
LABEL_439:
      id v297 = *(void (**)(uint64_t, _DWORD *, uint64_t, uint64_t))(*(void *)(v4 + v7 + 32) + 72);
      if (v297) {
        v297(v4 + v7 + 9, buf, v81, v296);
      }
      return;
    case 0xEu:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 664, "ByteStream_NumReadBytesAvail(bs) >= OI_BD_ADDR_BYTE_SIZE");
      }
      sub_100008A18((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 == 8) {
        uint64_t v82 = 0;
      }
      else {
        uint64_t v82 = *((unsigned __int8 *)a2 + 8);
      }
      uint64_t v94 = v4 + v7;
      int v95 = *(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)(v4 + v7 + 32) + 80);
      if (v95) {
        goto LABEL_443;
      }
      return;
    case 0x11u:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 687, "ByteStream_NumReadBytesAvail(bs) >= OI_BD_ADDR_BYTE_SIZE");
      }
      sub_100008A18((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 <= 9) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 688, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      __int16 v83 = a2;
      size_t v84 = a2[4];
      __int16 v85 = (void **)sub_10010CE48(v84);
      char v74 = v85;
      if (!v85 || !v84) {
        goto LABEL_518;
      }
      if ((int)a3 - 10 < (int)v84)
      {
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"AACP_MSG_RELAY_MSG_INDICATION, error initializing relayData", v86, v87, v88, v89, v90, v91, v92, v419);
          int v93 = sub_100050B4C(0x53u);
          if (os_log_type_enabled(v93, OS_LOG_TYPE_ERROR)) {
            sub_100744F6C();
          }
        }
        goto LABEL_521;
      }
      long long v347 = (char *)(v83 + 5);
      char v348 = (char *)v85;
      do
      {
        char v349 = *v347++;
        *v348++ = v349;
      }
      while (v348 < (char *)v85 + v84);
LABEL_518:
      long long v350 = *(void (**)(uint64_t, _DWORD *, size_t, void **))(*(void *)(v4 + v7 + 32) + 88);
      if (v350) {
        v350(v4 + v7 + 9, buf, v84, v85);
      }
      goto LABEL_520;
    case 0x13u:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 675, "ByteStream_NumReadBytesAvail(bs) >= OI_BD_ADDR_BYTE_SIZE");
      }
      sub_100008A18((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 == 8) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 676, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      uint64_t v94 = v4 + v7;
      int v95 = *(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)(v4 + v7 + 32) + 96);
      if (!v95) {
        return;
      }
      goto LABEL_117;
    case 0x15u:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 710, "ByteStream_NumReadBytesAvail(bs) >= OI_BD_ADDR_BYTE_SIZE");
      }
      sub_100008A18((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      uint64_t v66 = v4 + v7;
      uint64_t v67 = *(void (**)(uint64_t, _DWORD *))(*(void *)(v4 + v7 + 32) + 104);
      if (!v67) {
        return;
      }
      goto LABEL_383;
    case 0x16u:
      LOWORD(buf[1]) = 0;
      buf[0] = 0;
      if (a3 <= 7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 721, "ByteStream_NumReadBytesAvail(bs) >= OI_BD_ADDR_BYTE_SIZE");
      }
      sub_100008A18((uint64_t)buf, (uint64_t)(a2 + 1), 6uLL);
      if (a3 == 8) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 722, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      uint64_t v94 = v4 + v7;
      int v95 = *(void (**)(uint64_t, _DWORD *, uint64_t))(*(void *)(v4 + v7 + 32) + 112);
      if (v95)
      {
LABEL_117:
        uint64_t v82 = *((unsigned __int8 *)a2 + 8);
LABEL_443:
        v95(v94 + 9, buf, v82);
      }
      return;
    case 0x17u:
      if (*(_DWORD *)(qword_1009FD248 + v7 + 24) > 0x10001u)
      {
        if (a3 >= 6)
        {
          uint64_t v96 = *(unsigned int *)(a2 + 1);
          unsigned int v97 = 3;
LABEL_386:
          if ((int)(a3 - v97 * 2) > 1)
          {
            int v267 = a3;
            size_t v100 = a2[v97];
            uint64_t v269 = v97 * 2 + 2;
            uint64_t v270 = (void **)sub_10010CE48(v100);
            unint64_t v102 = v270;
            if (v267 - (int)v269 >= (int)v100 && v100)
            {
              uint64_t v271 = 0;
              do
              {
                *((unsigned char *)v270 + v271) = *((unsigned char *)a2 + v269 + v271);
                ++v271;
              }
              while ((char *)v270 + v271 < (char *)v270 + v100);
            }
LABEL_434:
            uint64_t v294 = v4 + v7;
            uint64_t v295 = *(void (**)(uint64_t, uint64_t, size_t, void **))(*(void *)(v4 + v7 + 32) + 120);
            if (v295) {
LABEL_446:
            }
              v295(v294 + 9, v96, v100, v102);
LABEL_447:
            uint64_t v266 = v102;
            goto LABEL_484;
          }
LABEL_433:
          unint64_t v102 = (void **)sub_10010CE48(0);
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
          size_t v100 = 0;
          goto LABEL_434;
        }
      }
      else if (a3 >= 4)
      {
        uint64_t v96 = a2[1];
        unsigned int v97 = 2;
        goto LABEL_386;
      }
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      uint64_t v96 = 0;
      goto LABEL_433;
    case 0x1Cu:
      if (a3 < 6) {
        uint64_t v98 = 0;
      }
      else {
        uint64_t v98 = *(unsigned int *)(a2 + 1);
      }
      uint64_t v197 = qword_1009FD248 + v7;
      uint64_t v198 = *(void (**)(uint64_t, uint64_t))(*(void *)(qword_1009FD248 + v7 + 32) + 152);
      if (v198) {
        goto LABEL_394;
      }
      return;
    case 0x1Du:
      if (a3 <= 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 762, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      uint64_t v96 = *((unsigned __int8 *)a2 + 2);
      if (a3 <= 4)
      {
        unint64_t v102 = (void **)sub_10010CE48(0);
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        size_t v100 = 0;
      }
      else
      {
        size_t v100 = *(unsigned __int16 *)((char *)a2 + 3);
        uint64_t v101 = (void **)sub_10010CE48(v100);
        unint64_t v102 = v101;
        if ((int)a3 - 5 >= (int)v100 && v100)
        {
          uint64_t v103 = 0;
          do
          {
            *((unsigned char *)v101 + v103) = *((unsigned char *)a2 + v103 + 5);
            ++v103;
          }
          while ((char *)v101 + v103 < (char *)v101 + v100);
        }
      }
      uint64_t v294 = v4 + v7;
      uint64_t v295 = *(void (**)(uint64_t, uint64_t, size_t, void **))(*(void *)(v4 + v7 + 32) + 168);
      if (v295) {
        goto LABEL_446;
      }
      goto LABEL_447;
    case 0x1Eu:
      if (a3 <= 3)
      {
        if (!sub_100058654()) {
          return;
        }
        sub_100056E24((uint64_t)"AACP_MSG_EA_SESSION_DOWNLOAD, invalid PDU", v272, v273, v274, v275, v276, v277, v278, v419);
        uint64_t v279 = sub_100050B4C(0x53u);
        if (!os_log_type_enabled(v279, OS_LOG_TYPE_ERROR)) {
          return;
        }
        goto LABEL_553;
      }
      unsigned int v104 = *((char *)a2 + 3);
      if ((v104 & 0x80000000) != 0)
      {
        if (!sub_100058654()) {
          return;
        }
        sub_100056E24((uint64_t)"AACP_MSG_EA_SESSION_DOWNLOAD received unsupported control message", v371, v372, v373, v374, v375, v376, v377, v419);
        uint64_t v378 = sub_100050B4C(0x53u);
        if (!os_log_type_enabled(v378, OS_LOG_TYPE_ERROR)) {
          return;
        }
        goto LABEL_553;
      }
      int v105 = a3;
      size_t v107 = (*((unsigned __int8 *)a2 + 2) | (unsigned __int16)(*((unsigned __int8 *)a2 + 3) << 8)) & 0x3FF;
      uint64_t v108 = (void **)sub_100022FE8(v107);
      char v74 = v108;
      if (v105 - 4 >= (int)v107)
      {
        if (v107)
        {
          int v379 = (char *)(a2 + 2);
          v380 = (char *)v108;
          do
          {
            char v381 = *v379++;
            *v380++ = v381;
          }
          while (v380 < (char *)v108 + v107);
        }
        unint64_t v193 = *(void (**)(uint64_t, uint64_t, size_t, void **))(*(void *)(v4 + v7 + 32) + 176);
        if (v193)
        {
          uint64_t v195 = (v104 >> 2) & 0x1F;
          uint64_t v194 = v4 + v7 + 9;
          goto LABEL_407;
        }
        goto LABEL_483;
      }
      if (!sub_100058654()) {
        goto LABEL_521;
      }
      sub_100056E24((uint64_t)"AACP_MSG_EA_SESSION_DOWNLOAD, invalid PDU", v109, v110, v111, v112, v113, v114, v115, v419);
      uint64_t v116 = sub_100050B4C(0x53u);
      if (!os_log_type_enabled(v116, OS_LOG_TYPE_ERROR)) {
        goto LABEL_521;
      }
      goto LABEL_588;
    case 0x20u:
      if (a3 <= 3)
      {
        char v74 = (void **)sub_10010CE48(0);
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        size_t v118 = 0;
      }
      else
      {
        size_t v118 = a2[1];
        uint64_t v119 = (void **)sub_10010CE48(v118);
        char v74 = v119;
        if ((int)a3 - 4 >= (int)v118 && v118)
        {
          uint64_t v120 = 0;
          do
          {
            *((unsigned char *)v119 + v120) = *((unsigned char *)a2 + v120 + 4);
            ++v120;
          }
          while ((char *)v119 + v120 < (char *)v119 + v118);
        }
      }
      unint64_t v280 = *(void (**)(uint64_t, size_t, void **))(*(void *)(v4 + v7 + 32) + 184);
      if (v280) {
        v280(v4 + v7 + 9, v118, v74);
      }
      goto LABEL_483;
    case 0x21u:
      if (a3 <= 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 824, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      if (a3 == 3) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 825, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      uint64_t v121 = *((unsigned __int8 *)a2 + 2);
      uint64_t v122 = *((unsigned __int8 *)a2 + 3);
      if (a3 < 6)
      {
        uint64_t v123 = 0;
      }
      else
      {
        uint64_t v123 = a2[2];
        if (a2[2])
        {
          uint64_t v125 = (void **)sub_10010CE48(a2[2]);
          uint64_t v126 = v125;
          if ((int)a3 - 6 >= (int)v123)
          {
            uint64_t v127 = 0;
            do
            {
              *((unsigned char *)v125 + v127) = *((unsigned char *)a2 + v127 + 6);
              ++v127;
            }
            while ((char *)v125 + v127 < (char *)v125 + v123);
          }
LABEL_450:
          uint64_t v298 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)(v4 + v7 + 32) + 192);
          if (v298) {
            v298(v4 + v7 + 9, v121, v122, v123, v126);
          }
          if (!v126) {
            return;
          }
          uint64_t v266 = v126;
          goto LABEL_484;
        }
      }
      uint64_t v126 = 0;
      goto LABEL_450;
    case 0x23u:
      memset((char *)&buf[2] + 2, 0, 20);
      if (a3 <= 2)
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      }
      else
      {
        int v128 = a3;
        unsigned int v129 = *((unsigned __int8 *)a2 + 2);
        LOBYTE(buf[0]) = *((unsigned char *)a2 + 2);
        if (a3 > 4)
        {
          *(_WORD *)((char *)buf + 1) = *(unsigned __int16 *)((char *)a2 + 3);
          if (a3 > 8)
          {
            *(_DWORD *)((char *)buf + 3) = *(_DWORD *)((char *)a2 + 5);
            if (a3 > 0xA)
            {
              *(_WORD *)((char *)&buf[1] + 3) = *(unsigned __int16 *)((char *)a2 + 9);
              if (a3 != 11)
              {
                BYTE1(buf[2]) = *((unsigned char *)a2 + 11);
                if (a3 <= 0xD)
                {
                  sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
                  uint64_t v130 = 0;
                }
                else
                {
                  uint64_t v130 = a2[6];
                  *(void *)((char *)&buf[2] + 2) = v130;
                  if (a3 != 14)
                  {
                    uint64_t v131 = *((unsigned __int8 *)a2 + 14);
                    uint64_t v133 = v131 + 1;
                    uint64_t v134 = (void **)sub_10010CE48(v131 + 1);
                    char v74 = v134;
                    *(void *)((char *)&buf[5] + 2) = v134;
                    if (v128 - 15 > (int)v131)
                    {
                      uint64_t v135 = 0;
                      do
                      {
                        *((unsigned char *)v134 + v135) = *((unsigned char *)a2 + v135 + 15);
                        ++v135;
                      }
                      while ((char *)v134 + v135 < (char *)v134 + v133);
                      if (v129 <= 1)
                      {
LABEL_474:
                        int v318 = *(void (**)(uint64_t, _DWORD *))(*(void *)(v4 + v7 + 32) + 200);
                        if (v318)
                        {
                          v318(v4 + v7 + 9, buf);
                          char v74 = *(void ***)((char *)&buf[5] + 2);
                        }
LABEL_520:
                        if (!v74) {
                          return;
                        }
LABEL_521:
                        __int16 v317 = v74;
                        goto LABEL_522;
                      }
                      uint64_t v136 = v133 + 15;
                      if (v128 - (int)v136 > 1)
                      {
                        unint64_t v137 = ((unint64_t)*((unsigned __int8 *)a2 + v136) << 16) | ((unint64_t)*((unsigned __int8 *)a2 + v136 + 1) << 24);
                        if (v128 - ((int)v131 + 18) > 3)
                        {
                          uint64_t v138 = v133 + 21;
                          *(void *)((char *)&buf[2] + 2) = v130 | ((unint64_t)*(unsigned int *)((char *)a2 + v133 + 17) << 32) | v137;
                          if (v128 - (int)v138 >= 4) {
                            *(_DWORD *)((char *)&buf[4] + 2) = *(_DWORD *)((char *)a2 + v138);
                          }
                          goto LABEL_474;
                        }
                        goto LABEL_473;
                      }
LABEL_472:
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/a"
                                             "acp/aacp_client.c");
                      unint64_t v137 = 0;
LABEL_473:
                      *(void *)((char *)&buf[2] + 2) = v130 | v137;
                      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/a"
                                             "acp/aacp_client.c");
                      goto LABEL_474;
                    }
LABEL_470:
                    if (v129 <= 1) {
                      goto LABEL_474;
                    }
                    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
                    goto LABEL_472;
                  }
                }
                char v74 = (void **)sub_10010CE48(1uLL);
                *(void *)((char *)&buf[5] + 2) = v74;
                sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
                goto LABEL_470;
              }
LABEL_613:
              sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 854, "ByteStream_NumReadBytesAvail(bs) >= 1");
            }
LABEL_612:
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
            goto LABEL_613;
          }
LABEL_611:
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
          goto LABEL_612;
        }
      }
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      goto LABEL_611;
    case 0x24u:
      if (a3 <= 3)
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        unsigned __int16 v139 = 0;
      }
      else
      {
        unsigned __int16 v139 = a2[1];
        if (a3 > 5)
        {
          int v140 = a3;
          size_t v107 = a2[2];
          uint64_t v142 = (void **)sub_10010CE48(v107);
          char v74 = v142;
          if (v140 - 6 >= (int)v107 && v107)
          {
            uint64_t v143 = 0;
            do
            {
              *((unsigned char *)v142 + v143) = *((unsigned char *)a2 + v143 + 6);
              ++v143;
            }
            while ((char *)v142 + v143 < (char *)v142 + v107);
          }
LABEL_405:
          unint64_t v193 = *(void (**)(uint64_t, uint64_t, size_t, void **))(*(void *)(v4 + v7 + 32) + 208);
          if (v193)
          {
            uint64_t v194 = v4 + v7 + 9;
            uint64_t v195 = v139;
LABEL_407:
            size_t v196 = v107;
LABEL_408:
            v193(v194, v195, v196, v74);
          }
LABEL_483:
          uint64_t v266 = v74;
LABEL_484:
          sub_100023010(v266);
          return;
        }
      }
      char v74 = (void **)sub_10010CE48(0);
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      size_t v107 = 0;
      goto LABEL_405;
    case 0x27u:
      if (a3 <= 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 901, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      if (a3 == 3) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 902, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      if (a3 <= 4) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 903, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      if (a3 == 5) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 904, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      unsigned int v144 = *((unsigned __int8 *)a2 + 2);
      uint64_t v145 = *((unsigned __int8 *)a2 + 3);
      unsigned int v146 = *((unsigned __int8 *)a2 + 4);
      uint64_t v147 = *((unsigned __int8 *)a2 + 5);
      uint64_t v148 = (void **)sub_10010CE48(v147 + 1);
      char v74 = v148;
      if ((int)a3 - 6 < (int)v147)
      {
        if (!sub_100058654()) {
          goto LABEL_521;
        }
        sub_100056E24((uint64_t)"AACP_MSG_GET_CERTIFICATES_RESP error reading serialNumber", v149, v150, v151, v152, v153, v154, v155, v419);
        uint64_t v156 = sub_100050B4C(0x53u);
        if (!os_log_type_enabled(v156, OS_LOG_TYPE_ERROR)) {
          goto LABEL_521;
        }
        goto LABEL_588;
      }
      if (v147)
      {
        id v303 = (char *)(a2 + 3);
        uint64_t v304 = (char *)v148;
        do
        {
          char v305 = *v303++;
          *v304++ = v305;
        }
        while (v304 < (char *)v148 + v147);
      }
      unsigned int v427 = v146;
      if ((int)a3 - ((int)v147 + 6) <= 1) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 915, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      int v306 = a2;
      size_t v307 = *(unsigned __int16 *)((char *)a2 + v147 + 6);
      __int16 v308 = (void **)sub_10010CE48(v307);
      unint64_t v102 = v308;
      if ((int)a3 - ((int)v147 + 8) < (int)v307)
      {
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"AACP_MSG_GET_CERTIFICATES_RESP error reading certificateData", v309, v310, v311, v312, v313, v314, v315, v419);
          int v316 = sub_100050B4C(0x53u);
          if (os_log_type_enabled(v316, OS_LOG_TYPE_ERROR)) {
            sub_100744F6C();
          }
        }
        sub_100023010(v74);
        __int16 v317 = v102;
        goto LABEL_522;
      }
      if (v307)
      {
        double v351 = (char *)v306 + v147 + 8;
        __int16 v352 = (char *)v308;
        do
        {
          char v353 = *v351++;
          *v352++ = v353;
        }
        while (v352 < (char *)v308 + v307);
      }
      __int16 v354 = *(void (**)(uint64_t, void, uint64_t, void, uint64_t, void **, size_t, void **))(*(void *)(v4 + v7 + 32) + 216);
      if (v354) {
        v354(v4 + v7 + 9, v144, v145, v427, v147, v74, v307, v308);
      }
      sub_100023010(v74);
      goto LABEL_447;
    case 0x28u:
      if (a3 <= 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 939, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      if (a3 <= 4) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 940, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      uint64_t v157 = *((unsigned __int8 *)a2 + 2);
      size_t v159 = *(unsigned __int16 *)((char *)a2 + 3);
      uint64_t v160 = (void **)sub_10010CE48(v159);
      char v74 = v160;
      if ((int)a3 - 5 >= (int)v159)
      {
        if (v159)
        {
          unsigned __int16 v299 = (char *)a2 + 5;
          char v300 = (char *)v160;
          do
          {
            char v301 = *v299++;
            *v300++ = v301;
          }
          while (v300 < (char *)v160 + v159);
        }
        id v302 = *(void (**)(uint64_t, void **, size_t, uint64_t))(*(void *)(v4 + v7 + 32) + 224);
        if (v302) {
          v302(v4 + v7 + 9, v160, v159, v157);
        }
        goto LABEL_483;
      }
      if (!sub_100058654()) {
        goto LABEL_521;
      }
      sub_100056E24((uint64_t)"AACP_MSG_GYRO_INFO, invalid gyroInfoData", v161, v162, v163, v164, v165, v166, v167, v419);
      unsigned int v168 = sub_100050B4C(0x53u);
      if (!os_log_type_enabled(v168, OS_LOG_TYPE_ERROR)) {
        goto LABEL_521;
      }
      goto LABEL_588;
    case 0x2Bu:
      if (a3 <= 2)
      {
        uint64_t v171 = a2;
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        uint64_t v169 = 0;
        uint64_t v281 = 2;
      }
      else
      {
        uint64_t v169 = *((unsigned __int8 *)a2 + 2);
        if (a3 > 4)
        {
          int v170 = a3;
          uint64_t v171 = a2;
          uint64_t v172 = *(unsigned __int16 *)((char *)a2 + 3);
          if (a3 > 8)
          {
            uint64_t v173 = *(unsigned int *)((char *)a2 + 5);
            if (a3 > 0xC)
            {
              v173 |= (unint64_t)*(unsigned int *)((char *)a2 + 9) << 32;
              BOOL v174 = (char *)malloc_type_calloc(*(unsigned __int16 *)((char *)a2 + 3), 1uLL, 0x100004077774924uLL);
              xpc_object_t v175 = (char *)v171 + 13;
              __int16 v176 = &v174[v172];
              int v177 = v170 - 13;
              goto LABEL_505;
            }
            uint64_t v281 = 9;
LABEL_504:
            BOOL v174 = (char *)malloc_type_calloc(v172, 1uLL, 0x100004077774924uLL);
            xpc_object_t v175 = (char *)v171 + v281;
            __int16 v176 = &v174[v172];
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
            int v177 = 0;
LABEL_505:
            if (v177 >= (int)v172 && v172)
            {
              uint64_t v330 = v174;
              do
              {
                char v331 = *v175++;
                *v330++ = v331;
              }
              while (v330 < v176);
            }
            int v332 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *))(*(void *)(v4 + v7 + 32) + 232);
            if (v332) {
              v332(v4 + v7 + 9, v169, v173, v172, v174);
            }
            xpc_object_t v293 = v174;
LABEL_492:
            free(v293);
            return;
          }
          uint64_t v281 = 5;
LABEL_503:
          sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
          uint64_t v173 = 0;
          goto LABEL_504;
        }
        uint64_t v171 = a2;
        uint64_t v281 = 3;
      }
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      uint64_t v172 = 0;
      goto LABEL_503;
    case 0x2Cu:
      if (a3 <= 5)
      {
        if (!sub_100058654()) {
          return;
        }
        sub_100056E24((uint64_t)"Invalid length=%d for GAPA message", v178, v179, v180, v181, v182, v183, v184, a3);
        int v185 = sub_100050B4C(0x53u);
        if (!os_log_type_enabled(v185, OS_LOG_TYPE_ERROR)) {
          return;
        }
        goto LABEL_553;
      }
      if ((a3 & 0xFFFE) == 4)
      {
        char v74 = (void **)sub_10010CE48(0);
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
LABEL_513:
        if (!sub_100058654()) {
          goto LABEL_521;
        }
        sub_100056E24((uint64_t)"AACP_MSG_GAPA, invalid gapaData", v339, v340, v341, v342, v343, v344, v345, v419);
        int v346 = sub_100050B4C(0x53u);
        if (!os_log_type_enabled(v346, OS_LOG_TYPE_ERROR)) {
          goto LABEL_521;
        }
        goto LABEL_588;
      }
      uint64_t v333 = *((unsigned __int8 *)a2 + 2);
      uint64_t v335 = *((unsigned __int8 *)a2 + 3);
      size_t v337 = a2[2];
      int v338 = (void **)sub_10010CE48(v337);
      char v74 = v338;
      if ((int)a3 - 6 < v337) {
        goto LABEL_513;
      }
      if (v337)
      {
        v387 = (char *)(a2 + 3);
        v388 = (char *)v338;
        do
        {
          char v389 = *v387++;
          *v388++ = v389;
        }
        while (v388 < (char *)v338 + v337);
        unsigned __int16 v390 = v337 + 6;
        unsigned int v391 = v337 + 7;
      }
      else
      {
        unsigned int v391 = 7;
        unsigned __int16 v390 = 6;
      }
      if (v333 != 2) {
        goto LABEL_582;
      }
      if (v391 <= a3)
      {
        if (a3 > v390)
        {
          uint64_t v408 = *((unsigned __int8 *)a2 + v390);
LABEL_583:
          if (v335 == 2)
          {
            v409 = *(void (**)(uint64_t, void **, size_t, uint64_t, uint64_t))(*(void *)(v4 + v7 + 32) + 248);
            if (v409) {
              v409(v4 + v7 + 9, v74, v337, v333, v408);
            }
            goto LABEL_521;
          }
          if (!sub_100058654()) {
            goto LABEL_521;
          }
          sub_100056E24((uint64_t)"Unknown GAPA message type %d", v410, v411, v412, v413, v414, v415, v416, v335);
          v417 = sub_100050B4C(0x53u);
          if (!os_log_type_enabled(v417, OS_LOG_TYPE_ERROR)) {
            goto LABEL_521;
          }
LABEL_588:
          sub_100744F6C();
          goto LABEL_521;
        }
      }
      else if (sub_100058654())
      {
        sub_100056E24((uint64_t)"Invalid length=%d for GAPA version=%d message", v400, v401, v402, v403, v404, v405, v406, a3);
        v407 = sub_100050B4C(0x53u);
        if (os_log_type_enabled(v407, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
LABEL_582:
      uint64_t v408 = 0;
      goto LABEL_583;
    case 0x2Eu:
      if (a3 <= 2)
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      }
      else if (a3 != 3)
      {
        if (a3 > 4)
        {
          uint64_t v186 = *((unsigned __int8 *)a2 + 3);
          size_t v188 = *((unsigned __int8 *)a2 + 4);
          int v189 = (void **)sub_10010CE48(8 * v188);
          char v74 = v189;
          if ((int)a3 - 5 >= 8 * (int)v188)
          {
            if (v188)
            {
              uint64_t v190 = (char *)a2 + 5;
              unint64_t v191 = (char *)v189;
              do
              {
                char v192 = *v190++;
                *v191++ = v192;
              }
              while (v191 < (char *)&v189[v188]);
            }
            unint64_t v193 = *(void (**)(uint64_t, uint64_t, size_t, void **))(*(void *)(v4 + v7 + 32) + 240);
            if (v193)
            {
              uint64_t v194 = v4 + v7 + 9;
              uint64_t v195 = v186;
              size_t v196 = v188;
              goto LABEL_408;
            }
            goto LABEL_483;
          }
LABEL_415:
          if (!sub_100058654()) {
            goto LABEL_521;
          }
          sub_100056E24((uint64_t)"AACP_MSG_TIPI_TABLE, error initializing tipiTable", v282, v283, v284, v285, v286, v287, v288, v419);
          uint64_t v289 = sub_100050B4C(0x53u);
          if (!os_log_type_enabled(v289, OS_LOG_TYPE_ERROR)) {
            goto LABEL_521;
          }
          goto LABEL_588;
        }
LABEL_414:
        char v74 = (void **)sub_10010CE48(0);
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        goto LABEL_415;
      }
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      goto LABEL_414;
    case 0x30u:
      if (a3 <= 3) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1020, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      uint64_t v197 = qword_1009FD248 + v7;
      uint64_t v198 = *(void (**)(uint64_t, uint64_t))(*(void *)(qword_1009FD248 + v7 + 32) + 128);
      if (!v198) {
        return;
      }
      uint64_t v98 = a2[1];
LABEL_394:
      v198(v197 + 9, v98);
      return;
    case 0x31u:
    case 0x32u:
      if (a3 <= 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1031, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      uint64_t v18 = *((unsigned __int8 *)a2 + 2);
      uint64_t v19 = (void **)sub_10010CE48(16 * v18);
      if (!v18)
      {
        uint64_t v43 = *(void (**)(uint64_t, uint64_t, void **, BOOL))(*(void *)(v4 + v7 + 32) + 136);
        if (!v43) {
          goto LABEL_500;
        }
        goto LABEL_496;
      }
      int v420 = v16;
      int v421 = a3;
      v422 = a2;
      uint64_t v20 = 0;
      int v21 = 0;
      int v424 = a3 - 1;
      int v22 = 3;
      break;
    case 0x40u:
      if (a3 <= 3) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1112, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      if (a3 <= 5) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1113, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      if (a3 <= 7) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1114, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      int v199 = *(void (**)(uint64_t, void, void, uint64_t))(*(void *)(qword_1009FD248 + v7 + 32) + 144);
      if (v199)
      {
        unsigned __int16 v200 = a2[1];
        if (v200)
        {
          unsigned __int16 v201 = a2[2];
          uint64_t v202 = a2[3];
          uint64_t v203 = qword_1009FD248 + v7 + 9;
          v199(v203, v200, v201, v202);
        }
      }
      return;
    case 0x47u:
      xpc_object_t v204 = (unsigned __int8 *)(qword_1009FD248 + v7 + 9);
      sub_10010AB08(v204);
      return;
    case 0x49u:
      uint64_t v205 = qword_1009FD248 + v7 + 9;
      sub_10010B158(v205);
      return;
    case 0x4Bu:
      if (!*(void *)(*(void *)(qword_1009FD248 + v7 + 32) + 256)) {
        return;
      }
      if (a3 >= 4)
      {
        uint64_t v206 = a2[1];
        if (v206 > 1)
        {
          int v382 = a3;
          xpc_object_t v236 = malloc_type_malloc(a2[1], 0x3418A0C6uLL);
          if (!v236) {
            sub_10025B8C0();
          }
          if (v382 - 4 >= (int)v206)
          {
            v384 = (char *)(a2 + 2);
            v385 = v236;
            do
            {
              char v386 = *v384++;
              *v385++ = v386;
            }
            while (v385 < &v236[v206]);
          }
          (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)(v4 + v7 + 32) + 256))(v4 + v7 + 9, v236, v206);
          goto LABEL_431;
        }
      }
      if (!sub_100058654()) {
        return;
      }
      sub_100056E24((uint64_t)"CD message data length cannot be less than 2 bytes", v207, v208, v209, v210, v211, v212, v213, v419);
      uint64_t v214 = sub_100050B4C(0x53u);
      if (!os_log_type_enabled(v214, OS_LOG_TYPE_ERROR)) {
        return;
      }
      goto LABEL_553;
    case 0x4Cu:
      if (a3 <= 3)
      {
        int v218 = (char *)malloc_type_malloc(0, 0x6660EB2DuLL);
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        size_t v216 = 0;
      }
      else
      {
        size_t v216 = a2[1];
        id v217 = (char *)malloc_type_malloc(v216, 0x6660EB2DuLL);
        int v218 = v217;
        if ((int)a3 - 4 >= (int)v216 && v216)
        {
          uint64_t v219 = 0;
          do
          {
            v217[v219] = *((unsigned char *)a2 + v219 + 4);
            ++v219;
          }
          while (&v217[v219] < &v217[v216]);
        }
      }
      uint64_t v290 = v4 + v7;
      unsigned int v291 = *(void (**)(uint64_t, size_t, char *))(*(void *)(v4 + v7 + 32) + 264);
      if (!v291) {
        goto LABEL_491;
      }
      goto LABEL_490;
    case 0x4Eu:
      long long v220 = *(void (**)(uint64_t, void))(*(void *)(qword_1009FD248 + v7 + 32) + 272);
      if (!v220) {
        return;
      }
      if (a3 < 0xA)
      {
        v220(qword_1009FD248 + v7 + 9, 0);
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      }
      else
      {
        v220(qword_1009FD248 + v7 + 9, *(void *)(a2 + 1));
        unsigned int v17 = 5;
LABEL_236:
        if ((int)(a3 - v17 * 2) > 1)
        {
          int v221 = a3;
          double v222 = a2;
          size_t v216 = a2[v17];
          uint64_t v223 = v17 * 2 + 2;
          unint64_t v224 = (char *)malloc_type_malloc(v216, 0x4EA369F6uLL);
          int v218 = v224;
          if (v221 - (int)v223 >= (int)v216 && v216)
          {
            uint64_t v225 = 0;
            do
            {
              v224[v225] = *((unsigned char *)v222 + v223 + v225);
              ++v225;
            }
            while (&v224[v225] < &v224[v216]);
          }
LABEL_489:
          uint64_t v290 = v4 + v7;
          unsigned int v291 = *(void (**)(uint64_t, size_t, char *))(*(void *)(v4 + v7 + 32) + 280);
          if (v291) {
LABEL_490:
          }
            v291(v290 + 9, v216, v218);
LABEL_491:
          xpc_object_t v293 = v218;
          goto LABEL_492;
        }
      }
      int v218 = (char *)malloc_type_malloc(0, 0x4EA369F6uLL);
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      size_t v216 = 0;
      goto LABEL_489;
    case 0x4Fu:
      goto LABEL_236;
    case 0x50u:
      if (a3 <= 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c", 1231, "ByteStream_NumReadBytesAvail(bs) >= 1");
      }
      uint64_t v238 = *((unsigned __int8 *)a2 + 2);
      switch(*((unsigned char *)a2 + 2))
      {
        case 0:
          unint64_t v240 = malloc_type_malloc(9uLL, 0x10000408EEE02DCuLL);
          unint64_t v241 = v240;
          if ((a3 - 12) <= 0xFFFFFFF6)
          {
            for (uint64_t i = 0; i != 9; ++i)
              *((unsigned char *)v240 + i) = *((unsigned char *)a2 + i + 3);
          }
          break;
        case 1:
          int v363 = malloc_type_malloc(0xBuLL, 0x10000403B807CB7uLL);
          unint64_t v241 = v363;
          if ((a3 - 14) <= 0xFFFFFFF4)
          {
            for (uint64_t j = 0; j != 11; ++j)
              *((unsigned char *)v363 + j) = *((unsigned char *)a2 + j + 3);
          }
          break;
        case 2:
          uint64_t v365 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
          unint64_t v241 = v365;
          if ((a3 - 11) <= 0xFFFFFFF7)
          {
            for (uint64_t k = 0; k != 8; ++k)
              *((unsigned char *)v365 + k) = *((unsigned char *)a2 + k + 3);
          }
          break;
        case 3:
          __int16 v367 = malloc_type_malloc(8uLL, 0x100004000313F17uLL);
          unint64_t v241 = v367;
          if ((a3 - 11) <= 0xFFFFFFF7)
          {
            for (uint64_t m = 0; m != 8; ++m)
              *((unsigned char *)v367 + m) = *((unsigned char *)a2 + m + 3);
          }
          break;
        default:
          if (sub_100058654())
          {
            sub_100056E24((uint64_t)"PerfStats: subtype %d not found", v355, v356, v357, v358, v359, v360, v361, v238);
            uint64_t v362 = sub_100050B4C(0x53u);
            if (os_log_type_enabled(v362, OS_LOG_TYPE_DEFAULT))
            {
              buf[0] = 136446210;
              *(void *)&buf[1] = sub_100050714();
              _os_log_impl((void *)&_mh_execute_header, v362, OS_LOG_TYPE_DEFAULT, " %{public}s", (uint8_t *)buf, 0xCu);
            }
          }
          unint64_t v241 = 0;
          break;
      }
      uint64_t v369 = *(void (**)(uint64_t, uint64_t, void *))(*(void *)(v4 + v7 + 32) + 288);
      if (v369) {
        v369(v4 + v7 + 9, v238, v241);
      }
      free(v241);
      return;
    case 0x52u:
      if (a3 <= 3)
      {
        int v218 = (char *)malloc_type_malloc(0, 0x92CFC020uLL);
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        size_t v216 = 0;
      }
      else
      {
        size_t v216 = a2[1];
        uint64_t v227 = (char *)malloc_type_malloc(v216, 0x92CFC020uLL);
        int v218 = v227;
        if ((int)a3 - 4 >= (int)v216 && v216)
        {
          uint64_t v228 = 0;
          do
          {
            v227[v228] = *((unsigned char *)a2 + v228 + 4);
            ++v228;
          }
          while (&v227[v228] < &v227[v216]);
        }
      }
      uint64_t v290 = v4 + v7;
      unsigned int v291 = *(void (**)(uint64_t, size_t, char *))(*(void *)(v4 + v7 + 32) + 296);
      if (!v291) {
        goto LABEL_491;
      }
      goto LABEL_490;
    case 0x53u:
      if (a3 <= 3)
      {
        int v218 = (char *)malloc_type_malloc(0, 0x3F0D6E75uLL);
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        size_t v216 = 0;
      }
      else
      {
        size_t v216 = a2[1];
        uint64_t v230 = (char *)malloc_type_malloc(v216, 0x3F0D6E75uLL);
        int v218 = v230;
        if ((int)a3 - 4 >= (int)v216 && v216)
        {
          uint64_t v231 = 0;
          do
          {
            v230[v231] = *((unsigned char *)a2 + v231 + 4);
            ++v231;
          }
          while (&v230[v231] < &v230[v216]);
        }
      }
      uint64_t v290 = v4 + v7;
      unsigned int v291 = *(void (**)(uint64_t, size_t, char *))(*(void *)(v4 + v7 + 32) + 304);
      if (!v291) {
        goto LABEL_491;
      }
      goto LABEL_490;
    case 0x55u:
      if (a3 <= 2)
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
        uint64_t v232 = 0;
      }
      else
      {
        uint64_t v232 = *((unsigned __int8 *)a2 + 2);
        if (a3 > 4)
        {
          size_t v234 = *(unsigned __int16 *)((char *)a2 + 3);
          unint64_t v235 = (char *)malloc_type_malloc(v234, 0x586C5573uLL);
          xpc_object_t v236 = v235;
          if ((int)a3 - 5 >= (int)v234 && v234)
          {
            uint64_t v237 = 0;
            do
            {
              v235[v237] = *((unsigned char *)a2 + v237 + 5);
              ++v237;
            }
            while (&v235[v237] < &v235[v234]);
          }
LABEL_429:
          uint64_t v292 = *(void (**)(uint64_t, uint64_t, size_t, unsigned char *))(*(void *)(v4 + v7 + 32) + 312);
          if (v292) {
            v292(v4 + v7 + 9, v232, v234, v236);
          }
LABEL_431:
          xpc_object_t v293 = v236;
          goto LABEL_492;
        }
      }
      xpc_object_t v236 = malloc_type_malloc(0, 0x586C5573uLL);
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      size_t v234 = 0;
      goto LABEL_429;
    default:
      goto LABEL_35;
  }
  do
  {
    if (v21)
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    }
    else if (v424 > (unsigned __int16)v22)
    {
      LOWORD(v19[2 * v20]) = *(unsigned __int16 *)((char *)v422 + (unsigned __int16)v22);
      if (v424 <= (unsigned __int16)(v22 + 2))
      {
        char v23 = 0;
        int v428 = 1;
        v22 += 2;
      }
      else
      {
        int v428 = 0;
        WORD1(v19[2 * v20]) = *(unsigned __int16 *)((char *)v422 + (unsigned __int16)(v22 + 2));
        v22 += 4;
        char v23 = 1;
      }
      goto LABEL_21;
    }
    sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
    char v23 = 0;
    int v428 = 1;
LABEL_21:
    uint64_t v24 = v19;
    uint64_t v25 = (char *)&v19[2 * v20];
    unsigned int v27 = *((unsigned __int16 *)v25 + 1);
    uint64_t v26 = (unsigned __int16 *)(v25 + 2);
    uint64_t v28 = sub_10010CE48(v27);
    *(void *)(v26 + 3) = v28;
    uint64_t v29 = *v26;
    if (v23)
    {
      int v30 = v421 - (unsigned __int16)v22;
    }
    else
    {
      sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/profiles/aacp/aacp_client.c");
      int v30 = 0;
    }
    int v31 = *v26;
    if (v30 >= v31)
    {
      if (v29)
      {
        uint64_t v32 = (char *)v422 + (unsigned __int16)v22;
        uint64_t v33 = &v28[v29];
        do
        {
          char v34 = *v32++;
          *v28++ = v34;
        }
        while (v28 < v33);
        int v31 = *v26;
      }
      v22 += v31;
      int v21 = v428;
    }
    else
    {
      int v21 = 1;
    }
    ++v20;
    uint64_t v19 = v24;
  }
  while (v20 != v18);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, void **, BOOL))(*(void *)(v4 + v7 + 32) + 136);
  if (!v43) {
    goto LABEL_497;
  }
  if (!v21)
  {
    LODWORD(v16) = v420;
LABEL_496:
    v43(v4 + v7 + 9, v18, v19, v16 != 49);
    goto LABEL_497;
  }
  if (sub_100058654())
  {
    sub_100056E24((uint64_t)"AACP_MSG_DELETE_KEYS, error getting keys", v44, v45, v46, v47, v48, v49, v50, v419);
    uint64_t v51 = sub_100050B4C(0x53u);
    if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      sub_100744F6C();
    }
  }
LABEL_497:
  if (v18)
  {
    int v328 = v19 + 1;
    do
    {
      __int16 v329 = *v328;
      v328 += 2;
      sub_100023010(v329);
      --v18;
    }
    while (v18);
  }
LABEL_500:
  __int16 v317 = v19;
LABEL_522:
  sub_100023010(v317);
}

void sub_1000DDD44(uint64_t a1, int a2)
{
  if (qword_1009FD248)
  {
    for (uint64_t i = 0; i != 240; i += 48)
    {
      if (*(_DWORD *)(qword_1009FD248 + i + 16) == a2)
      {
        uint64_t v13 = qword_1009FD248 + i + 8;
        goto LABEL_13;
      }
    }
    uint64_t v4 = 8;
    while (*(unsigned char *)(qword_1009FD248 + v4) != 1)
    {
      v4 += 48;
      if (v4 == 248) {
        goto LABEL_8;
      }
    }
    uint64_t v13 = qword_1009FD248 + v4;
LABEL_13:
    int v14 = *(_DWORD *)(v13 + 8);
    if (a1)
    {
      if (v14)
      {
        if (sub_100058654())
        {
          sub_100056E24((uint64_t)"ConnectComplete result %d handle %u -- disconnecting AAP", v15, v16, v17, v18, v19, v20, v21, a1);
          int v22 = sub_100050B4C(0x53u);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR)) {
            sub_100744F6C();
          }
        }
        sub_10010E830(*(unsigned int *)(v13 + 8));
      }
      else
      {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)(v13 + 24) + 8))(v13 + 1, *(unsigned __int16 *)(v13 + 14), a1);
        sub_1000D7ADC((_OWORD *)v13);
      }
    }
    else if (v14)
    {
      *(unsigned char *)uint64_t v13 = 2;
      char v23 = *(void (**)(uint64_t, uint64_t, void))(*(void *)(v13 + 24) + 8);
      uint64_t v24 = *(unsigned __int16 *)(v13 + 14);
      v23(v13 + 1, v24, 0);
    }
  }
  else
  {
LABEL_8:
    if (sub_100058654())
    {
      sub_100056E24((uint64_t)"Not a valid Connection complete event!\n", v5, v6, v7, v8, v9, v10, v11, v25);
      uint64_t v12 = sub_100050B4C(0x53u);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
  }
}

void sub_1000DDF08(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 0x12u);
}

uint64_t sub_1000DDF28(void *a1)
{
  off_1009FD250 = a1;
  return 0;
}

uint64_t sub_1000DDF38(void *a1)
{
  off_1009FD258 = a1;
  return 0;
}

uint64_t sub_1000DDF48(unsigned char *a1)
{
  BOOL v2 = sub_100117BB4("applebt_rx_main");
  if (!a1 || !a1[19])
  {
    sub_10025B8C0();
    uint64_t v41 = sub_100050B4C(0x3Au);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR)) {
      sub_1007450A4();
    }
    sub_10025B8C0();
    uint64_t v42 = sub_100050B4C(0x3Au);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
      sub_100745070();
    }
    goto LABEL_111;
  }
  uint64_t v124 = v111;
  uint64_t v125 = (*(int *)(*(void *)a1 + 20) + 4) * *(int *)(*(void *)a1 + 64);
  __chkstk_darwin(v2, v125);
  uint64_t v127 = (uint64_t)v111 - v3;
  bzero((char *)v111 - v3, v4);
  uint64_t v126 = a1;
  uint64_t v5 = *(int **)a1;
  size_t v6 = (*(int *)(*(void *)a1 + 24) + 4) * *(int *)(*(void *)a1 + 68);
  __chkstk_darwin(v7, v8);
  unint64_t v128 = (unint64_t)v111 - v9;
  bzero((char *)v111 - v9, v6);
  size_t v10 = (v5[7] + 4) * v5[18];
  __chkstk_darwin(v11, v12);
  int v14 = (char *)v111 - v13;
  bzero((char *)v111 - v13, v10);
  size_t v15 = (v5[8] + 4) * v5[19];
  __chkstk_darwin(v16, v17);
  uint64_t v19 = (char *)v111 - v18;
  bzero((char *)v111 - v18, v15);
  size_t v20 = (v5[9] + 4) * v5[20];
  __chkstk_darwin(v21, v22);
  uint64_t v24 = (char *)v111 - v23;
  bzero((char *)v111 - v23, v20);
  size_t v25 = v5[10] + 4;
  __chkstk_darwin(v26, v27);
  uint64_t v29 = (char *)v111 - ((v28 + 19) & 0xFFFFFFFFFFFFFFF0);
  bzero(v29, v25);
  inputStruct[0] = 65285;
  int v142 = 65287;
  int v145 = 65289;
  int v148 = 65288;
  int v151 = 65286;
  inputStruct[1] = v125;
  uint64_t v141 = v127;
  int v143 = v10;
  unsigned int v144 = v14;
  int v146 = v20;
  uint64_t v147 = v24;
  int v149 = v15;
  uint64_t v150 = v19;
  int v152 = v6;
  uint64_t v153 = (char *)v128;
  int v154 = 266;
  int v155 = v25;
  uint64_t v156 = v29;
  memset(outputStruct, 0, sizeof(outputStruct));
  int v30 = sub_1001A0CA0(6, inputStruct, outputStruct);
  if (!v30)
  {
    uint64_t v43 = 0;
    int v33 = 0;
    unint64_t v123 = (unint64_t)&v131;
    *(void *)&long long v31 = 67109376;
    long long v122 = v31;
    *(void *)&long long v31 = 67109632;
    long long v121 = v31;
    *(void *)&long long v31 = 67109634;
    long long v120 = v31;
    char v34 = v126;
    while (1)
    {
      do
      {
        uint64_t v44 = (int *)&outputStruct[v43];
        if (*v44 != -536870160 && *v44 != 0)
        {
          sub_10025B8C0();
          uint64_t v46 = sub_100050B4C(0x3Au);
          int v33 = -536870167;
          if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
          {
            unsigned int v91 = LOBYTE(inputStruct[4 * v43]);
            int v92 = *v44;
            int v93 = sub_1001A01CC(v92);
            *(void *)&v138[0] = __PAIR64__(v91, v120);
            WORD4(v138[0]) = 1024;
            *(_DWORD *)((char *)v138 + 10) = v92;
            HIWORD(v138[0]) = 2080;
            *(void *)&v138[1] = v93;
            _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "applebt_rx_main: after applebt_hci_read, pipe %d returned status (0x%08X, %s)\n", (uint8_t *)v138, 0x18u);
          }
        }
        ++v43;
      }
      while (v43 != 6);
      if (v33)
      {
        int v32 = 0;
        goto LABEL_5;
      }
      if (!v34[32]) {
        break;
      }
      uint64_t v47 = sub_100050B4C(0x3Au);
      if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v138[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: rx route is suspended before terminate - dropping packets\n", (uint8_t *)v138, 2u);
      }
LABEL_42:
      int v48 = sub_1001A0CA0(6, inputStruct, outputStruct);
      int v33 = 0;
      uint64_t v43 = 0;
      if (v48)
      {
        int v32 = v48;
        goto LABEL_5;
      }
    }
    uint64_t v49 = 0;
    while (1)
    {
      uint64_t v125 = v49;
      unint64_t v50 = (unint64_t)&outputStruct[v49];
      if (*(unsigned char *)(v50 + 4)) {
        break;
      }
LABEL_96:
      uint64_t v49 = v125 + 1;
      if (v125 == 5) {
        goto LABEL_42;
      }
    }
    int v51 = 0;
    uint64_t v52 = v50 | 4;
    int v53 = (unsigned __int8 *)&inputStruct[4 * v125];
    uint64_t v54 = (char *)*v53;
    unsigned int v55 = (unsigned __int16 *)*((void *)v53 + 1);
    uint64_t v127 = v52;
    unint64_t v128 = (unint64_t)v54;
    int v56 = &v54[(void)v34 + 8];
    while (1)
    {
      uint64_t v58 = v55 + 1;
      int v57 = *((unsigned __int8 *)v55 + 2);
      int v59 = *v56;
      *int v56 = v59 + 1;
      if (v57 != v59)
      {
        sub_10025B8C0();
        uint64_t v60 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
        {
          int v89 = *v56 - 1;
          int v90 = *v58;
          *(void *)&v138[0] = __PAIR64__(v128, 67109888);
          WORD4(v138[0]) = 1024;
          *(_DWORD *)((char *)v138 + 10) = v51;
          HIWORD(v138[0]) = 1024;
          LODWORD(v138[1]) = v89;
          WORD2(v138[1]) = 1024;
          *(_DWORD *)((char *)&v138[1] + 6) = v90;
          _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "applebt_rx_main: seq_num[pipe=%d,item=%d] mismatch, expected %d received %d\n", (uint8_t *)v138, 0x1Au);
        }
        sub_10025B8C0();
        int v61 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v61, OS_LOG_TYPE_ERROR)) {
          sub_1007454E4(v130, (unsigned __int8 *)v55 + 2, (int *)v123, v61);
        }
        *int v56 = *v58 + 1;
      }
      unsigned int v62 = *v55;
      sub_100023344();
      if (!v34[19]) {
        goto LABEL_110;
      }
      if (v128 == 10)
      {
        unsigned int v63 = *v55;
        if (*v55)
        {
          unsigned __int16 v64 = 0;
          uint64_t v65 = (unsigned int *)(v55 + 2);
          do
          {
            uint64_t v66 = *v65;
            uint64_t v67 = (unsigned __int8 *)(v65 + 1);
            __int16 v68 = *((_WORD *)v65 + 3);
            unsigned __int16 v69 = v68 + 4;
            v64 += v68 + 8;
            v138[0] = 0uLL;
            uint64_t v70 = mach_continuous_time();
            unint64_t v71 = v70 & 0xFFFFFFF000000000 | (16 * v66);
            if (v70 - v71 > 0x800000000) {
              v71 -= 0x1000000000;
            }
            *(void *)&v138[0] = v71;
            uint64_t v72 = v69;
            if (v63 - v64 == 1)
            {
              sub_1000DF54C(&v67[v69], 1u, (uint64_t)v138);
              int v80 = v138;
              uint64_t v81 = 6;
              uint64_t v82 = v67;
              unint64_t v83 = v69;
              goto LABEL_94;
            }
            unsigned int v73 = v64;
            sub_100023868(6, v67, v72, (uint64_t)v138);
            uint64_t v65 = (unsigned int *)((char *)v72 + (void)v67);
          }
          while (v64 < v63);
          char v34 = v126;
          if (v73 != v63)
          {
            sub_10025B8C0();
            char v74 = sub_100050B4C(0x3Au);
            if (os_log_type_enabled(v74, OS_LOG_TYPE_ERROR))
            {
              *(void *)&v138[0] = __PAIR64__(v73, v122);
              WORD4(v138[0]) = 1024;
              *(_DWORD *)((char *)v138 + 10) = v63;
              _os_log_error_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_ERROR, "packet buffering: current_item_size != packet_len current_item_size: %u, packet_len: %u", (uint8_t *)v138, 0xEu);
            }
          }
        }
        goto LABEL_95;
      }
      unsigned int v75 = v62 - 1;
      unsigned int v76 = *((unsigned __int8 *)v55 + 4);
      int v77 = (unsigned __int8 *)v55 + 5;
      if (v76 == 7)
      {
        unsigned __int8 v78 = *v77 + 1;
        long long v134 = 0uLL;
        *(void *)&long long v134 = mach_continuous_time();
        BYTE8(v134) = 0;
        if ((int)v75 <= v78)
        {
          if (v62 <= v78)
          {
            sub_10025B8C0();
            size_t v84 = sub_100050B4C(0x3Au);
            if (os_log_type_enabled(v84, OS_LOG_TYPE_ERROR))
            {
              LODWORD(v138[0]) = v122;
              DWORD1(v138[0]) = v78;
              WORD4(v138[0]) = 1024;
              *(_DWORD *)((char *)v138 + 10) = v75;
              _os_log_error_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_ERROR, "applebt_rx_main: WARNING! LMP packet length(%d) is larger than actual packet length(%d) - truncating!", (uint8_t *)v138, 0xEu);
            }
            unsigned __int8 v78 = v75;
          }
        }
        else
        {
          sub_1000DF54C((unsigned char *)v55 + v78 + 5, v75 - v78, (uint64_t)&v134);
        }
        BOOL v85 = sub_1001DA4A4();
        unint64_t v83 = v78;
        if (!v85)
        {
          sub_100025840();
          char v34 = v126;
          if (BYTE8(v134))
          {
            memset(v138, 0, 100);
            snprintf((char *)v138, 0x64uLL, "BT Controller HCI_LMP wakeupCause (len=0x%hhX)", *v77);
            sub_10025B778("applebt_rx_main: %s", (const char *)v138);
            sub_100116128((const char *)v138);
          }
          goto LABEL_95;
        }
        uint64_t v81 = *((unsigned __int8 *)v55 + 4);
        int v80 = &v134;
        uint64_t v82 = (unsigned __int8 *)v55 + 5;
      }
      else
      {
        switch(v76)
        {
          case 4u:
            unsigned __int16 v79 = v62 - 1;
            if (v75 >= 2) {
              unsigned __int16 v79 = *((unsigned __int8 *)v55 + 6) + 2;
            }
            break;
          case 3u:
            unsigned __int16 v79 = v62 - 1;
            if (v75 >= 3) {
              unsigned __int16 v79 = *((unsigned __int8 *)v55 + 7) + 3;
            }
            break;
          case 2u:
            unsigned __int16 v79 = v62 - 1;
            if (v75 >= 4) {
              unsigned __int16 v79 = *(unsigned __int16 *)((char *)v55 + 7) + 4;
            }
            break;
          default:
            sub_10025B8C0();
            uint64_t v86 = sub_100050B4C(0x3Au);
            unsigned __int16 v79 = v75;
            if (os_log_type_enabled(v86, OS_LOG_TYPE_ERROR))
            {
              *(void *)&v138[0] = __PAIR64__(v76, v122);
              WORD4(v138[0]) = 1024;
              *(_DWORD *)((char *)v138 + 10) = v75;
              _os_log_error_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "applebt_get_hci_packet_length: Unknown HCI packet type=%d, length=%d", (uint8_t *)v138, 0xEu);
              unsigned __int16 v79 = v75;
            }
            break;
        }
        if (v75 >= v79)
        {
          unsigned __int16 v88 = v79;
        }
        else
        {
          sub_10025B8C0();
          uint64_t v87 = sub_100050B4C(0x3Au);
          unsigned __int16 v88 = v75;
          if (os_log_type_enabled(v87, OS_LOG_TYPE_ERROR))
          {
            *(void *)&v138[0] = __PAIR64__(v76, v121);
            WORD4(v138[0]) = 1024;
            *(_DWORD *)((char *)v138 + 10) = v79;
            HIWORD(v138[0]) = 1024;
            LODWORD(v138[1]) = v75;
            _os_log_error_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_ERROR, "applebt_get_hci_packet_length: WARNING! HCI packet length (type=%d, length=%d) is larger than actual packet length(%d) - truncating!", (uint8_t *)v138, 0x14u);
            unsigned __int16 v88 = v75;
          }
        }
        v138[0] = 0uLL;
        *(void *)&v138[0] = mach_continuous_time();
        BYTE8(v138[0]) = 0;
        if ((int)v75 > v88) {
          sub_1000DF54C((unsigned char *)v55 + v88 + 5, v75 - v88, (uint64_t)v138);
        }
        uint64_t v81 = *((unsigned __int8 *)v55 + 4);
        int v80 = v138;
        uint64_t v82 = (unsigned __int8 *)v55 + 5;
        unint64_t v83 = v88;
      }
LABEL_94:
      sub_100023868(v81, v82, v83, (uint64_t)v80);
      char v34 = v126;
LABEL_95:
      sub_1000232E0();
      unsigned int v55 = (unsigned __int16 *)((char *)v55 + *v55 + 4);
      if (++v51 >= *(unsigned __int8 *)v127) {
        goto LABEL_96;
      }
    }
  }
  int v32 = v30;
  int v33 = 0;
  char v34 = v126;
LABEL_5:
  sub_10025B8C0();
  uint64_t v35 = sub_100050B4C(0x3Au);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR)) {
    sub_100745434(v32, v33, v35);
  }
  if (v32 != -536870195 && v34[19])
  {
    bzero(v138, 0x400uLL);
    sub_100023344();
    sub_10018EDB8(1205);
    sub_1000232E0();
    sub_10025B8C0();
    uint64_t v36 = sub_100050B4C(0x3Au);
    if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR)) {
      sub_1007453B0();
    }
    if (v32 == -536870167)
    {
      uint64_t v129 = 2048;
      if (sub_10014A918(&byte_100A14820, (size_t *)&v129))
      {
        sub_10025B8C0();
        uint64_t v37 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR)) {
          sub_100745348();
        }
      }
      else if (v129 == 1024)
      {
        sub_10025B8C0();
        int v105 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR)) {
          sub_1007452D0();
        }
        memcpy(v138, &byte_100A14820, sizeof(v138));
        uint64_t v106 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v106, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v134) = 67109120;
          DWORD1(v134) = DWORD1(v138[12]);
          _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: ID !! applebt_read_crash_data succeeded.(ID %d)\n", (uint8_t *)&v134, 8u);
        }
        size_t v107 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v134) = 67109120;
          DWORD1(v134) = DWORD2(v138[13]);
          _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: PC !! applebt_read_crash_data succeeded.(PC 0x%08X)\n", (uint8_t *)&v134, 8u);
        }
        uint64_t v108 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
        {
          *(void *)&long long v134 = __PAIR64__(HIDWORD(v138[13]), 67109888);
          WORD4(v134) = 1024;
          *(_DWORD *)((char *)&v134 + 10) = v138[14];
          HIWORD(v134) = 1024;
          int v135 = DWORD1(v138[14]);
          __int16 v136 = 1024;
          int v137 = DWORD2(v138[14]);
          _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: LR !! applebt_read_crash_data succeeded.(LR0 0x%08X, LR1 0x%08X, LR2 0x%08X, LR3 0x%08X)\n", (uint8_t *)&v134, 0x1Au);
        }
        uint64_t v109 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v109, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(v134) = 136315138;
          *(void *)((char *)&v134 + 4) = &v138[32];
          _os_log_impl((void *)&_mh_execute_header, v109, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: STR !! applebt_read_crash_data succeeded.(%s)\n", (uint8_t *)&v134, 0xCu);
        }
        bzero(&byte_100A14820, 0x800uLL);
        dword_100A14845[0] = DWORD1(v138[12]);
        *(_OWORD *)&word_100A14835 = *(_OWORD *)((char *)&v138[12] + 8);
        *(_OWORD *)&dword_100A14859 = *(_OWORD *)((char *)&v138[13] + 8);
        dword_100A14869[0] = DWORD2(v138[14]);
      }
      else if (v129 == 2048)
      {
        sub_10025B8C0();
        uint64_t v98 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v98, OS_LOG_TYPE_ERROR)) {
          sub_100745258();
        }
        int v99 = dword_100A14845[0];
        DWORD1(v138[12]) = dword_100A14845[0];
        bzero(&v134, 0x400uLL);
        unint64_t v128 = byte_100A14820;
        uint64_t v127 = byte_100A14825;
        uint64_t v125 = byte_100A14826;
        unint64_t v123 = byte_100A14827;
        *(void *)&long long v122 = byte_100A14828;
        snprintf((char *)&v134, 0x400uLL, "abort %d;version=%d;bin_id=%u;uuid=%02X%02X%02X%02X-%02X%02X-%02X%02X-%02X%02X-%02X%02X%02X%02X%02X%02X;BT:%d."
          "%d.%d.%d;PHY:%u.%u.%u.%u;ID=%d;p1=0x%X;p2=0x%X; p3=0x%X;p4=0x%X;EOS",
          v99,
          byte_100A14820,
          unk_100A14821,
          byte_100A14825,
          byte_100A14826,
          byte_100A14827,
          byte_100A14828,
          byte_100A14829,
          byte_100A1482A,
          byte_100A1482B,
          byte_100A1482C,
          byte_100A1482D,
          byte_100A1482E,
          byte_100A1482F,
          byte_100A14830,
          byte_100A14831,
          byte_100A14832,
          byte_100A14833,
          byte_100A14834,
          word_100A14835,
          unk_100A14837,
          unk_100A14839,
          unk_100A1483B,
          unk_100A1483D,
          unk_100A1483F,
          unk_100A14841,
          unk_100A14843,
          v99,
          dword_100A14845[1],
          dword_100A14845[2],
          dword_100A14845[3],
          dword_100A14845[4]);
        size_t v100 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
        {
          int v132 = 136315138;
          uint64_t v133 = &v134;
          _os_log_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: BT-MAC-ABORT-STR1!!(%s)\n", (uint8_t *)&v132, 0xCu);
        }
        *(void *)&long long v121 = *(void *)&dword_100A14869[19];
        uint64_t v116 = byte_100A148D9;
        uint64_t v114 = byte_100A148DA;
        uint64_t v112 = byte_100A148DB;
        v111[3] = byte_100A14918;
        unint64_t v128 = dword_100A14845[0];
        uint64_t v127 = dword_100A14859;
        uint64_t v125 = dword_100A1485D;
        unint64_t v123 = dword_100A14861;
        *(void *)&long long v122 = dword_100A14865;
        uint64_t v119 = *(void *)&dword_100A14869[21];
        *(void *)&long long v120 = dword_100A14869[0];
        uint64_t v118 = dword_100A14869[1];
        uint64_t v117 = dword_100A14869[2];
        uint64_t v115 = dword_100A14869[3];
        uint64_t v113 = dword_100A14869[4];
        v111[9] = dword_100A14869[5];
        v111[8] = dword_100A14869[6];
        v111[7] = dword_100A14869[7];
        v111[6] = dword_100A14869[8];
        v111[5] = dword_100A14869[9];
        v111[4] = dword_100A14869[10];
        v111[2] = dword_100A14869[11];
        v111[1] = dword_100A14869[12];
        v111[0] = dword_100A14869[13];
        snprintf((char *)&v134, 0x400uLL, "abort %d;PC=0x%x;LR1=0x%x;LR2=0x%x;LR3=0x%x;LR4=0x%x;LR5=0x%x;cpsr=0x%x;dfar=0x%x;dfsr=0x%x;ifar=0x%x;ifsr=0x%"
          "x;vic0_vicrawintr=0x%X;vic1_vicrawintr=0x%X;vic2_vicrawintr=0x%X;irq_vic_0=0x%X;irq_vic_1=0x%X;irq_vic_2=0x%X;"
          "fiq_vic_0=0x%X;fiq_vic_1=0x%X;fiq_vic_2=0x%X;vic3_vicrawintr=0x%X;irq_vic_3=0x%X;fiq_vic_3=0x%X;raw_irq_status"
          "=0x%llx;prev_raw_irq_status=0x%llx;local_bt_clk=0x%X;coex_activity_bits=0x%X;coex_envelop_bits=0x%X;top_semaph"
          "ores_lock_status_hw=0x%X;top_semaphores_lock_status_fw=0x%X;context=0x%X;abort_counter=0x%X;unhandled_exceptio"
          "n_counter=0x%X;syndrome0=0x%X;far0=0x%X;pc0=0x%X;lr0=0x%X;psr0=0x%X;syndrome1=0x%X;far1=0x%X;pc1=0x%X;lr1=0x%X"
          ";psr1=0x%X;syndrome2=0x%X;far2=0x%X;pc2=0x%X;lr2=0x%X;psr2=0x%X;system_exit_status=0x%X;EOS",
          dword_100A14845[0],
          dword_100A14859,
          dword_100A1485D,
          dword_100A14861,
          dword_100A14865,
          dword_100A14869[0],
          dword_100A14869[1],
          dword_100A14869[2],
          dword_100A14869[3],
          dword_100A14869[4],
          dword_100A14869[5],
          dword_100A14869[6],
          dword_100A14869[7],
          dword_100A14869[8],
          dword_100A14869[9],
          dword_100A14869[10],
          dword_100A14869[11],
          dword_100A14869[12],
          dword_100A14869[13],
          dword_100A14869[14],
          dword_100A14869[15],
          dword_100A14869[16],
          dword_100A14869[17],
          dword_100A14869[18],
          *(void *)&dword_100A14869[19],
          *(void *)&dword_100A14869[21],
          dword_100A14869[23],
          dword_100A14869[24],
          dword_100A14869[25],
          dword_100A14869[26],
          dword_100A14869[27],
          byte_100A148D9,
          byte_100A148DA,
          byte_100A148DB,
          dword_100A148DC,
          unk_100A148E0,
          dword_100A148E4,
          unk_100A148E8,
          dword_100A148EC,
          unk_100A148F0,
          dword_100A148F4,
          unk_100A148F8,
          dword_100A148FC,
          unk_100A14900,
          dword_100A14904,
          unk_100A14908,
          dword_100A1490C,
          unk_100A14910,
          dword_100A14914,
          byte_100A14918);
        uint64_t v101 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v101, OS_LOG_TYPE_DEFAULT))
        {
          int v132 = 136315138;
          uint64_t v133 = &v134;
          _os_log_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: BT-MAC-ABORT-STR2!!(%s)\n", (uint8_t *)&v132, 0xCu);
        }
        unint64_t v128 = unk_100A1491D;
        uint64_t v127 = byte_100A1491F;
        uint64_t v125 = byte_100A14920;
        unint64_t v123 = byte_100A14921;
        *(void *)&long long v122 = (unsigned __int16)word_100A14922;
        *(void *)&long long v121 = byte_100A14924;
        *(void *)&long long v120 = byte_100A14925;
        uint64_t v119 = byte_100A14926;
        uint64_t v118 = byte_100A14927;
        uint64_t v117 = byte_100A14928;
        uint64_t v116 = byte_100A14929;
        uint64_t v115 = byte_100A1492A;
        uint64_t v114 = byte_100A1492B;
        uint64_t v113 = byte_100A1492C;
        uint64_t v112 = unk_100A14947;
        snprintf((char *)&v134, 0x400uLL, "abort %d;rx_header_status=0x%x;tx_header_status=0x%x;sync_valid=0x%x;hw_machine_sig=0x%x;general_status=0x%x;e"
          "sco_tx_en_state=0x%x;sch_current_mrl=0x%x;rx_data_type=0x%x;tx_data_type=0x%x;rx_packet_length=0x%x;tx_packet_"
          "length=0x%x;total_rx_tx_length=0x%X;rx_watchdog_timer_counter=0x%X;rx_watchdog_occured=0x%X;dbl_buf_index=0x%X"
          ";last_scheduled_btclk=0x%X;prev_scheduled_btclk=0x%X;prev_activity_type=0x%X;bt_clk_freeze0=0x%X;bt_clk_freeze"
          "1=0x%X;bt_clk_freeze2=0x%X;pt_freeze0=0x%X;pt_freeze1=0x%X;pt_freeze2=0x%X;sm_clk_freeze=0x%X;max_dram_wakeup_"
          "duration=0x%X;dram_protection_mode=0x%X;dram_access_allowed=0x%X;dram_is_enable=0x%X;force_dram_awake_bit=0x%X"
          ";etm_etb_enabled=0x%X;trx_timers_supported=0x%X;dart_error_occurred=0x%X;syncrhonous_external_abort_occured=0x"
          "%X;init_state=0x%X;recovery_state=0x%X;sleep_wakeup_state=0x%X;sleep_go_to_deep_sleep_state=0x%X;rtkit_assert_"
          "state=0x%X;rtkit_power_off_state=0x%X;EOS",
          dword_100A14845[0],
          unk_100A14919,
          unk_100A1491D,
          byte_100A1491F,
          byte_100A14920,
          byte_100A14921,
          (unsigned __int16)word_100A14922,
          byte_100A14924,
          byte_100A14925,
          byte_100A14926,
          byte_100A14927,
          byte_100A14928,
          byte_100A14929,
          byte_100A1492A,
          byte_100A1492B,
          byte_100A1492C,
          unk_100A14931,
          unk_100A14935,
          byte_100A14939,
          unk_100A1493B,
          unk_100A1493F,
          unk_100A14943,
          unk_100A14947,
          unk_100A14949,
          unk_100A1494B,
          unk_100A1494D,
          unk_100A14951,
          byte_100A14953,
          byte_100A14954 & 1,
          (byte_100A14954 >> 1) & 1,
          (byte_100A14954 >> 2) & 1,
          (byte_100A14954 >> 3) & 1,
          (byte_100A14954 >> 4) & 1,
          (byte_100A14954 >> 5) & 1,
          (byte_100A14954 >> 6) & 1,
          byte_100A14955,
          byte_100A14956,
          byte_100A14957,
          byte_100A14958,
          byte_100A14959,
          byte_100A1495A);
        unint64_t v102 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          int v132 = 136315138;
          uint64_t v133 = &v134;
          _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: BT-MAC-ABORT-STR3!!(%s)\n", (uint8_t *)&v132, 0xCu);
        }
        snprintf((char *)&v138[32], 0x200uLL, "abort %d p1=0x%X p2=0x%X p3=0x%X p4=0x%X;ID:%d;BT:%d.%d.%d.%d;PHY:%u.%u.%u.%u;PC:0x%x;LR1:0x%x;LR2:0x%x;LR3:0x%x;LR4:0x%x;EOS",
          dword_100A14845[0],
          dword_100A14845[1],
          dword_100A14845[2],
          dword_100A14845[3],
          dword_100A14845[4],
          dword_100A14845[0],
          word_100A14835,
          unk_100A14837,
          unk_100A14839,
          unk_100A1483B,
          unk_100A1483D,
          unk_100A1483F,
          unk_100A14841,
          unk_100A14843,
          dword_100A14859,
          dword_100A1485D,
          dword_100A14861,
          dword_100A14865,
          dword_100A14869[0]);
        memcpy(&unk_100A15020, &v138[32], 0x200uLL);
        uint64_t v103 = sub_100050B4C(0x3Au);
        BOOL v104 = os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT);
        char v34 = v126;
        if (v104)
        {
          int v132 = 136315138;
          uint64_t v133 = &v138[32];
          _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: BT-MAC-ABORT-STR4!!(%s)\n", (uint8_t *)&v132, 0xCu);
        }
      }
      else
      {
        sub_10025B8C0();
        uint64_t v110 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v110, OS_LOG_TYPE_ERROR)) {
          sub_1007451DC(&v129, v110);
        }
      }
    }
    if (sub_1001A039C())
    {
      sub_10025B8C0();
      uint64_t v38 = sub_100050B4C(0x3Au);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR)) {
        sub_100745174();
      }
    }
    sub_100023344();
    if (v32 == -536870167)
    {
      sub_10025B8C0();
      uint64_t v39 = sub_100050B4C(0x3Au);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        sub_1007450D8();
      }
      if (v34[33]) {
        sub_10025B958();
      }
      if (off_1009FD250) {
        off_1009FD250(7, DWORD1(v138[12]) | ((unint64_t)dword_100A14859 << 32), &v138[32]);
      }
      uint64_t v40 = 1214;
    }
    else
    {
      sub_10025B8C0();
      uint64_t v94 = sub_100050B4C(0x3Au);
      BOOL v95 = os_log_type_enabled(v94, OS_LOG_TYPE_ERROR);
      if (v32 == -536870211)
      {
        if (v95) {
          sub_10074510C();
        }
        if (off_1009FD258) {
          off_1009FD258(0);
        }
        uint64_t v40 = 1206;
      }
      else
      {
        if (v95) {
          sub_100745140();
        }
        if (off_1009FD258) {
          off_1009FD258(1);
        }
        uint64_t v40 = 1205;
      }
    }
    sync();
    sub_10018EE24(v40);
LABEL_110:
    sub_1000232E0();
  }
LABEL_111:
  uint64_t v96 = sub_100050B4C(0x3Au);
  if (os_log_type_enabled(v96, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v138[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v96, OS_LOG_TYPE_DEFAULT, "applebt_rx_main: Exiting rx thread\n", (uint8_t *)v138, 2u);
  }
  return 0;
}

void sub_1000DF54C(unsigned char *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = 2147483649;
  memset(v10, 0, 9);
  if (a1)
  {
    if (!a2) {
      return;
    }
    uint64_t v5 = a1;
    while (1)
    {
      unint64_t v6 = *v5;
      unint64_t v7 = v6;
      if (v6 != 1)
      {
        if (v6 != 2)
        {
          if (*v5)
          {
            uint64_t v3 = 2147483650;
            goto LABEL_16;
          }
          return;
        }
        unint64_t v7 = 9;
      }
      unsigned int v8 = a2;
      if (v7 > a2) {
        goto LABEL_16;
      }
      __memcpy_chk();
      if (v6 == 2) {
        *(void *)a3 = *(void *)((char *)v10 + 1);
      }
      else {
        *(unsigned char *)(a3 + _Block_object_dispose(&STACK[0x2C0], 8) = 1;
      }
      v5 += v7;
      a2 = v8 - v7;
      if (v8 == v7) {
        return;
      }
    }
  }
  uint64_t v3 = 2147483651;
LABEL_16:
  sub_10025B8C0();
  uint64_t v9 = sub_100050B4C(0x3Au);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
    sub_100745538(v3, v9);
  }
}

uint64_t sub_1000DF664()
{
  return 0;
}

uint64_t sub_1000DF67C(int a1)
{
  int v1 = sub_10014A588(a1);
  if (v1 == -536870201) {
    unsigned int v2 = 102;
  }
  else {
    unsigned int v2 = 105;
  }
  if (v1) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1000DF6B4(char a1)
{
  byte_1009FD281 = a1;
  return 0;
}

uint64_t sub_1000DF6C4(unsigned __int16 a1, const void *a2, unsigned int a3)
{
  return sub_10014A704(a1, a2, a3);
}

uint64_t sub_1000DF6CC(int a1)
{
  memset(v2, 0, sizeof(v2));
  if (a1) {
    *(void *)&v2[0] = 1;
  }
  return sub_10014A0E0((uint64_t *)v2);
}

uint64_t sub_1000DF730(int a1, uint64_t a2, int a3)
{
  if (!byte_1009FD273) {
    return 1205;
  }
  __int16 v4 = a2;
  if (a1 == 1)
  {
    unsigned int v8 = 0;
  }
  else if (a1 == 3)
  {
    unsigned int v8 = &_mh_execute_header.magic + 2;
  }
  else
  {
    if (a1 != 2) {
      return 1214;
    }
    int v6 = sub_10019CCFC(a2);
    if (v6 == 2) {
      int v7 = 4;
    }
    else {
      int v7 = 1;
    }
    if (v6 == 1) {
      unsigned int v8 = 3;
    }
    else {
      unsigned int v8 = v7;
    }
  }
  if (a1 == 2) {
    int v10 = 5;
  }
  else {
    int v10 = 4;
  }
  int v11 = v10 + a3;
  if (v10 + a3 > *(_DWORD *)(qword_1009FD260 + 4 * v8))
  {
    sub_10025B8C0();
    uint64_t v12 = sub_100050B4C(0x3Au);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      int v18 = *(_DWORD *)(qword_1009FD260 + 4 * v8);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v10 + a3;
      LOWORD(v20) = 1024;
      *(_DWORD *)((char *)&v20 + 2) = v8;
      HIWORD(v20) = 1024;
      int v21 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "applebt_transport_send_request: headerBytes + length (%d) is greater than pipe[%d] size (%d)\n", buf, 0x14u);
    }
    if (v11 > *(_DWORD *)(qword_1009FD260 + 4 * v8)) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Stack/Platforms/Darwin/applebt_transport.c", 949, "headerBytes + length <= btdev->pipe_items_info->size[pipe_id]");
    }
  }
  __chkstk_darwin();
  int v14 = &buf[-v13];
  bzero(&buf[-v13], v15);
  void v14[4] = a1;
  *(_WORD *)(v14 + 5) = v4;
  v14[7] = a3;
  if (a1 == 2) {
    unsigned char v14[8] = BYTE1(a3);
  }
  if (a3) {
    sub_100022CA0((char *)&v14[v10 + 4]);
  }
  else {
    sub_100023604();
  }
  *(_WORD *)int v14 = v11;
  unsigned __int8 v16 = *((unsigned char *)&qword_1009FD260 + v8 + 8);
  *((unsigned char *)&qword_1009FD260 + v8 + _Block_object_dispose(&STACK[0x2C0], 8) = v16 + 1;
  *((_WORD *)v14 + 1) = v16;
  size_t v20 = v14;
  *(_DWORD *)long long buf = v8;
  buf[1] = 1;
  *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)v11 + 4;
  if (!sub_1001A0808(1, buf)) {
    return 625;
  }
  uint64_t v9 = 1205;
  sub_10018EDB8(1205);
  return v9;
}

uint64_t sub_1000DF9C8()
{
  return 0;
}

uint64_t sub_1000DF9D0()
{
  if (byte_1009FD273) {
    return 1205;
  }
  uint64_t v0 = sub_10019FCEC();
  if (!v0)
  {
    uint64_t v0 = sub_1001A0608();
    if (v0)
    {
      sync();
      sub_10018EE24(1205);
    }
    qword_1009FD260 = (uint64_t)sub_1000F7A98();
    if (!qword_1009FD260)
    {
      sync();
      sub_10018EE24(1218);
    }
    byte_1009FD280 = 0;
    byte_1009FD273 = 1;
    if (pthread_create((pthread_t *)&qword_1009FD278, 0, (void *(__cdecl *)(void *))sub_1000DDF48, &qword_1009FD260))
    {
      sync();
      sub_10018EE24(1218);
    }
    else
    {
      sub_100117AD8((_opaque_pthread_t *)qword_1009FD278, 63);
    }
  }
  return v0;
}

uint64_t sub_1000DFA98()
{
  return 0;
}

uint64_t sub_1000DFAA0()
{
  if (!byte_1009FD273) {
    return 1205;
  }
  byte_1009FD273 = 0;
  if (sub_1001A039C())
  {
    sub_10025B8C0();
    uint64_t v0 = sub_100050B4C(0x3Au);
    if (os_log_type_enabled(v0, OS_LOG_TYPE_ERROR)) {
      sub_100745618();
    }
  }
  sub_1000232E0();
  uint64_t v1 = pthread_join((pthread_t)qword_1009FD278, 0);
  sub_100023344();
  if (v1)
  {
    sub_10025B8C0();
    unsigned int v2 = sub_100050B4C(0x3Au);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR)) {
      sub_1007455B0();
    }
  }
  return v1;
}

uint64_t sub_1000DFB58()
{
  if (!byte_1009FD273)
  {
    sync();
    sub_10018EE24(1205);
  }
  return (unsigned __int16)(*(_WORD *)(qword_1009FD260 + 4) - 1);
}

uint64_t sub_1000DFB98()
{
  return 0;
}

uint64_t sub_1000DFBA0()
{
  return 0;
}

void sub_1000DFBA8()
{
  byte_1009FD280 = 1;
}

uint64_t sub_1000DFBB8()
{
  uint64_t result = sub_1000DFAA0();
  if (!result)
  {
    return sub_1000DF9D0();
  }
  return result;
}

os_log_t sub_1000DFC04(uint64_t a1)
{
  for (uint64_t i = 0; i != 93; ++i)
  {
    if (*(unsigned char *)(a1 + 32) == 91)
    {
      uint64_t v3 = "Stack.ALL";
    }
    else
    {
      long long v20 = 0u;
      long long v21 = 0u;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v14 = 0u;
      long long v15 = 0u;
      long long v12 = 0u;
      long long v13 = 0u;
      long long v10 = 0u;
      long long v11 = 0u;
      long long v8 = 0u;
      long long v9 = 0u;
      *(_OWORD *)std::string __str = 0u;
      long long v7 = 0u;
      __int16 v4 = sub_10025B450(i);
      snprintf(__str, 0x100uLL, "Stack.%s", v4);
      uint64_t v3 = __str;
    }
    os_log_t result = os_log_create("com.apple.bluetooth", v3);
    qword_1009FD290[i] = result;
  }
  return result;
}

void sub_1000DFD08()
{
  if (dword_1009F8C40 == -1)
  {
    dword_1009F8C40 = open("/dev/btwake", 0);
    if (dword_1009F8C40 == -1)
    {
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"Unable to turn on BT)_WAKE signal", v0, v1, v2, v3, v4, v5, v6, v8);
        long long v7 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
    }
  }
}

uint64_t sub_1000DFD90()
{
  uint64_t result = dword_1009F8C40;
  if (dword_1009F8C40 != -1)
  {
    uint64_t result = close(dword_1009F8C40);
    dword_1009F8C40 = -1;
  }
  return result;
}

uint64_t sub_1000DFDC8(int a1, uint64_t a2)
{
  long long v125 = 0u;
  long long v126 = 0u;
  long long v123 = 0u;
  long long v124 = 0u;
  long long v121 = 0u;
  long long v122 = 0u;
  long long v119 = 0u;
  long long v120 = 0u;
  long long v117 = 0u;
  long long v118 = 0u;
  long long v115 = 0u;
  long long v116 = 0u;
  long long v113 = 0u;
  long long v114 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v112 = 0u;
  unsigned int v4 = sub_10016B630();
  if (v4) {
    unsigned int v5 = v4;
  }
  else {
    unsigned int v5 = 2400000;
  }
  if (a2 && (__strlcpy_chk(), HIBYTE(v126) = 0, (uint64_t v6 = strtok(__str, ",")) != 0))
  {
    long long v7 = v6;
    uint64_t v8 = strtok(0, ",");
    if (v8) {
      unsigned int v5 = strtoul(v8, 0, 0);
    }
  }
  else
  {
    long long v7 = "com.apple.uart.sk.bluetooth";
  }
  memset(&v143, 0, sizeof(v143));
  sockaddr v109 = (sockaddr)0;
  long long v110 = 0u;
  int v142 = 0;
  long long v140 = 0u;
  long long v141 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  long long v136 = 0u;
  long long v137 = 0u;
  socklen_t v108 = 0;
  dword_1009F8CC8 = socket(32, 1, 2);
  if (dword_1009F8CC8 < 0)
  {
    if (sub_100058654())
    {
      long long v18 = __error();
      long long v19 = strerror(*v18);
      sub_100056E24((uint64_t)"socket failed (CFErrorRef error = %s)\n", v20, v21, v22, v23, v24, v25, v26, (uint64_t)v19);
      uint64_t v27 = sub_100050B4C(0x3Au);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    return 1201;
  }
  *(_DWORD *)&v109.sa_len = 139296;
  long long v136 = 0u;
  long long v137 = 0u;
  long long v138 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  long long v141 = 0u;
  int v142 = 0;
  __strlcpy_chk();
  if (ioctl(dword_1009F8CC8, 0xC0644E03uLL, &v136))
  {
    if (sub_100058654())
    {
      long long v9 = __error();
      strerror(*v9);
      sub_100056E24((uint64_t)"ioctl(CTLIOCGINFO, %s) failed (CFErrorRef error = %s)\n", v10, v11, v12, v13, v14, v15, v16, (uint64_t)v7);
      long long v17 = sub_100050B4C(0x3Au);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    goto LABEL_14;
  }
  *(_DWORD *)&v109.sa_data[2] = v136;
  *(_DWORD *)&v109.sa_data[6] = 0;
  if (connect(dword_1009F8CC8, &v109, 0x20u) == -1)
  {
    if (sub_100058654())
    {
      long long v31 = __error();
      strerror(*v31);
      sub_100056E24((uint64_t)"connect(%s) failed (CFErrorRef error = %s)\n", v32, v33, v34, v35, v36, v37, v38, (uint64_t)v7);
      uint64_t v39 = sub_100050B4C(0x3Au);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
        sub_100744F6C();
      }
    }
    goto LABEL_14;
  }
  if (!strcmp(v7, "com.apple.uart.sk.bluetooth"))
  {
    *(void *)uuid_t uu = 0;
    uint64_t v135 = 0;
    memset(out, 0, 37);
    int v107 = 63;
    uint64_t v106 = 0x3F00000400;
    if (setsockopt(dword_1009F8CC8, 2, -2146675692, &v106, 0xCu) == -1)
    {
      if (!sub_100058654()) {
        goto LABEL_14;
      }
      int v59 = __error();
      strerror(*v59);
      sub_100056E24((uint64_t)"set IOAOSSKYSETCHANNELSPEC (on %s) failed (CFErrorRef error = %s)\n", v60, v61, v62, v63, v64, v65, v66, (uint64_t)v7);
      uint64_t v67 = sub_100050B4C(0x3Au);
      if (!os_log_type_enabled(v67, OS_LOG_TYPE_ERROR)) {
        goto LABEL_14;
      }
    }
    else
    {
      socklen_t v108 = 16;
      if (getsockopt(dword_1009F8CC8, 2, 1074811922, uu, &v108) == -1)
      {
        if (!sub_100058654()) {
          goto LABEL_14;
        }
        __int16 v68 = __error();
        strerror(*v68);
        sub_100056E24((uint64_t)"get IOAOSSKYGETCHANNELUUID (on %s) failed (CFErrorRef error = %s)\n", v69, v70, v71, v72, v73, v74, v75, (uint64_t)v7);
        unsigned int v76 = sub_100050B4C(0x3Au);
        if (!os_log_type_enabled(v76, OS_LOG_TYPE_ERROR)) {
          goto LABEL_14;
        }
      }
      else
      {
        uuid_unparse_upper(uu, out);
        qword_1009FE578 = os_channel_create();
        if (qword_1009FE578)
        {
          dword_1009F8CCC = kqueue();
          if (dword_1009F8CCC == -1)
          {
            if (sub_100058654())
            {
              uint64_t v40 = __error();
              uint64_t v41 = strerror(*v40);
              sub_100056E24((uint64_t)"creating write kqueue failed (CFErrorRef error = %s)\n", v42, v43, v44, v45, v46, v47, v48, (uint64_t)v41);
              uint64_t v49 = sub_100050B4C(0x3Au);
              if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR)) {
                sub_100744F6C();
              }
            }
          }
          changelist.ident = (int)os_channel_get_fd();
          memset(&changelist.fflags, 0, 20);
          *(_DWORD *)&changelist.filter = 393214;
          unint64_t v128 = &dword_1009FE580;
          uint64_t v131 = 0;
          uint64_t v130 = 0;
          int v129 = 393206;
          int v132 = 0;
          if (kevent(dword_1009F8CCC, &changelist, 2, 0, 0, 0) == -1)
          {
            close(dword_1009F8CCC);
            dword_1009F8CCC = -1;
            os_channel_destroy();
            qword_1009FE578 = 0;
            close(dword_1009F8CC8);
            dword_1009F8CC8 = -1;
            if (!sub_100058654()) {
              return 1201;
            }
            uint64_t v86 = __error();
            strerror(*v86);
            sub_100056E24((uint64_t)"creating write kevent (on %s) failed (CFErrorRef error = %s)\n", v87, v88, v89, v90, v91, v92, v93, (uint64_t)v7);
            uint64_t v94 = sub_100050B4C(0x3Au);
            if (!os_log_type_enabled(v94, OS_LOG_TYPE_ERROR)) {
              return 1201;
            }
          }
          else
          {
            dword_1009F8CD0 = kqueue();
            if (dword_1009F8CD0 == -1)
            {
              if (sub_100058654())
              {
                unint64_t v50 = __error();
                int v51 = strerror(*v50);
                sub_100056E24((uint64_t)"creating read kqueue failed (CFErrorRef error = %s)\n", v52, v53, v54, v55, v56, v57, v58, (uint64_t)v51);
                int v105 = sub_100050B4C(0x3Au);
                if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR)) {
                  sub_100744F6C();
                }
              }
            }
            changelist.ident = (int)os_channel_get_fd();
            *(_DWORD *)&changelist.filter = 393215;
            memset(&changelist.fflags, 0, 20);
            unint64_t v128 = &dword_1009FE580;
            int v129 = 393206;
            uint64_t v130 = 0;
            uint64_t v131 = 0;
            int v132 = 0;
            if (kevent(dword_1009F8CD0, &changelist, 2, 0, 0, 0) != -1)
            {
              if (os_channel_attr_create())
              {
                if (!os_channel_read_attr())
                {
                  os_channel_attr_get();
                  os_channel_attr_get();
                  os_channel_attr_get();
                }
                os_channel_attr_destroy();
              }
              goto LABEL_21;
            }
            close(dword_1009F8CD0);
            dword_1009F8CD0 = -1;
            close(dword_1009F8CCC);
            dword_1009F8CCC = -1;
            os_channel_destroy();
            qword_1009FE578 = 0;
            close(dword_1009F8CC8);
            dword_1009F8CC8 = -1;
            if (!sub_100058654()) {
              return 1201;
            }
            BOOL v95 = __error();
            strerror(*v95);
            sub_100056E24((uint64_t)"creating read kevent (on %s) failed (CFErrorRef error = %s)\n", v96, v97, v98, v99, v100, v101, v102, (uint64_t)v7);
            uint64_t v103 = sub_100050B4C(0x3Au);
            if (!os_log_type_enabled(v103, OS_LOG_TYPE_ERROR)) {
              return 1201;
            }
          }
          sub_100744F6C();
          return 1201;
        }
        if (!sub_100058654()
          || (int v77 = __error(),
              strerror(*v77),
              sub_100056E24((uint64_t)"os_channel_create (on %s) failed (error = %s)\n", v78, v79, v80, v81, v82, v83, v84, (uint64_t)v7), BOOL v85 = sub_100050B4C(0x3Au), !os_log_type_enabled(v85, OS_LOG_TYPE_ERROR)))
        {
LABEL_14:
          close(dword_1009F8CC8);
          dword_1009F8CC8 = -1;
          return 1201;
        }
      }
    }
    sub_100744F6C();
    goto LABEL_14;
  }
LABEL_21:
  socklen_t v108 = 72;
  getsockopt(dword_1009F8CC8, 2, 1078490131, &v143, &v108);
  cfmakeraw(&v143);
  cfsetspeed(&v143, v5);
  if (a1 == 2 || a1 == 1)
  {
    tcflag_t v29 = v143.c_iflag | 0x10;
    tcflag_t v30 = v143.c_cflag & 0xFFFFFFFFFFFCCFFFLL | 0x1000;
  }
  else
  {
    if (a1) {
      return 101;
    }
    tcflag_t v29 = v143.c_iflag | 4;
    tcflag_t v30 = 232192;
  }
  v143.c_iflag = v29;
  v143.c_cflag = v30;
  setsockopt(dword_1009F8CC8, 2, -2142735340, &v143, 0x48u);
  dword_1009FE580 = 0;
  dword_1009FE584 = 0;
  sub_100117BD4(&stru_1009FE588);
  if (sub_100117A38((pthread_t *)&qword_1009FE5B8, (void *(__cdecl *)(void *))sub_1000E0A98, 0))
  {
    sub_100117AD8((_opaque_pthread_t *)qword_1009FE5B8, 63);
    sub_10016A98C();
    return 0;
  }
  else
  {
    uint64_t v104 = sub_10010B394(104);
    return sub_1000E0658(v104);
  }
}

uint64_t sub_1000E0658()
{
  int v0 = dword_1009F8CC8;
  if (dword_1009F8CC8 != -1)
  {
    dword_1009FE580 = 1;
    if (dword_1009F8CCC != -1 || dword_1009F8CD0 != -1)
    {
      v3.ident = (uintptr_t)&dword_1009FE580;
      *(void *)&v3.filter = 0x10000000000FFF6;
      v3.char data = 0;
      v3.uchar data = 0;
      kevent(dword_1009F8CCC, &v3, 1, 0, 0, 0);
      kevent(dword_1009F8CD0, &v3, 1, 0, 0, 0);
      int v0 = dword_1009F8CC8;
    }
    close(v0);
    while (!dword_1009FE584)
      sub_1001035E0(&stru_1009FE588);
    if (qword_1009FE578)
    {
      os_channel_destroy();
      qword_1009FE578 = 0;
    }
    if (dword_1009F8CCC != -1)
    {
      close(dword_1009F8CCC);
      dword_1009F8CCC = -1;
    }
    if (dword_1009F8CD0 != -1)
    {
      close(dword_1009F8CD0);
      dword_1009F8CD0 = -1;
    }
    sub_100117BFC(&stru_1009FE588);
    dword_1009F8CC8 = -1;
  }
  return 0;
}

uint64_t sub_1000E079C(char *__buf, unsigned int a2)
{
  unsigned int v2 = a2;
  if (!qword_1009FE578)
  {
    if (a2)
    {
      while (1)
      {
        unsigned int v17 = write(dword_1009F8CC8, __buf, (unsigned __int16)v2);
        if ((v17 & 0x80000000) != 0) {
          break;
        }
        __buf += v17;
        LOWORD(v2) = v2 - v17;
        if (!(_WORD)v2) {
          return 625;
        }
      }
      if (sub_100058654())
      {
        uint64_t v22 = __error();
        uint64_t v23 = strerror(*v22);
        sub_100056E24((uint64_t)"BM3UART write failed: %s", v24, v25, v26, v27, v28, v29, v30, (uint64_t)v23);
        long long v31 = sub_100050B4C(0x3Au);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          sub_100744F6C();
        }
      }
      return 1205;
    }
    return 625;
  }
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  *(_OWORD *)__uuid_t dst = 0u;
  os_channel_ring_id();
  os_channel_tx_ring();
  uint64_t next_slot = os_channel_get_next_slot();
  if (__buf != (char *)&unk_1009FD578) {
    sub_10025B8C0();
  }
  if (v2 > 0x1000)
  {
    sub_10025B8C0();
  }
  else if (!v2)
  {
    uint64_t v5 = 0;
    unsigned __int16 v6 = 0;
LABEL_7:
    if (v2 != v6) {
      sub_10025B8C0();
    }
    if (v5)
    {
      os_channel_advance_slot();
      if (os_channel_sync() == -1)
      {
        if (!sub_100058654()) {
          return 1205;
        }
        long long v7 = __error();
        uint64_t v8 = strerror(*v7);
        sub_100056E24((uint64_t)"BM3UART os_channel_sync tx failed: %s", v9, v10, v11, v12, v13, v14, v15, (uint64_t)v8);
        uint64_t v16 = sub_100050B4C(0x3Au);
        if (!os_log_type_enabled(v16, OS_LOG_TYPE_ERROR)) {
          return 1205;
        }
        goto LABEL_13;
      }
    }
    return 625;
  }
  unsigned __int16 v6 = 0;
  uint64_t v5 = 0;
  while (!v5 || next_slot)
  {
    if (!next_slot)
    {
LABEL_25:
      while (1)
      {
        memset(&eventlist, 0, sizeof(eventlist));
        if (kevent(dword_1009F8CCC, 0, 0, &eventlist, 1, 0) == -1 || (unsigned __int16)eventlist.filter != 65534) {
          return 1205;
        }
        uint64_t v20 = os_channel_get_next_slot();
        if (v20)
        {
          uint64_t next_slot = v20;
          break;
        }
      }
    }
    uint64_t v5 = next_slot;
    if (WORD1(v44) >= (unsigned __int16)(v2 - v6)) {
      size_t v21 = (unsigned __int16)(v2 - v6);
    }
    else {
      size_t v21 = WORD1(v44);
    }
    memmove(__dst[0], &__buf[v6], v21);
    WORD1(v44) = v21;
    os_channel_set_slot_properties();
    v6 += v21;
    uint64_t next_slot = os_channel_get_next_slot();
    if (v2 <= v6) {
      goto LABEL_7;
    }
  }
  os_channel_advance_slot();
  if (os_channel_sync() != -1) {
    goto LABEL_25;
  }
  if (!sub_100058654()) {
    return 1205;
  }
  uint64_t v33 = __error();
  uint64_t v34 = strerror(*v33);
  sub_100056E24((uint64_t)"BM3UART os_channel_sync tx partial failed: %s", v35, v36, v37, v38, v39, v40, v41, (uint64_t)v34);
  uint64_t v42 = sub_100050B4C(0x3Au);
  if (!os_log_type_enabled(v42, OS_LOG_TYPE_ERROR)) {
    return 1205;
  }
LABEL_13:
  sub_100744F6C();
  return 1205;
}

uint64_t sub_1000E0A98()
{
  sub_100117BB4("RxLoop");
  memset(v26, 0, sizeof(v26));
  int v0 = dword_1009F8CC8;
  if (__darwin_check_fd_set_overflow(dword_1009F8CC8, v26, 0)) {
    *(_DWORD *)((char *)v26 + (((unint64_t)v0 >> 3) & 0x1FFFFFFFFFFFFFFCLL)) |= 1 << v0;
  }
  if (qword_1009FE578)
  {
    os_channel_ring_id();
    os_channel_rx_ring();
    int v1 = 4096;
    do
    {
      long long v24 = 0u;
      long long v25 = 0u;
      long long v22 = 0u;
      long long v23 = 0u;
      memset(&eventlist, 0, sizeof(eventlist));
      int v2 = kevent(dword_1009F8CD0, 0, 0, &eventlist, 1, 0);
      if (eventlist.filter != -1) {
        break;
      }
      int v3 = v2;
      sub_100023344();
      if (os_channel_get_next_slot())
      {
        do
        {
          int v4 = WORD1(v22);
          if (WORD1(v22))
          {
            unsigned int v5 = 0;
            do
            {
              int v6 = v4 - v5;
              if (v1 >= v6) {
                int v7 = v6;
              }
              else {
                int v7 = v1;
              }
              int v1 = sub_10016A99C();
              v5 += v7;
              int v4 = WORD1(v22);
            }
            while (v5 < WORD1(v22));
          }
          else
          {
            unsigned int v5 = 0;
          }
          if (v5 != v4) {
            sub_10025B8C0();
          }
        }
        while (os_channel_get_next_slot());
        os_channel_advance_slot();
      }
      sub_1000232E0();
      if (v3 < 1) {
        break;
      }
    }
    while (!dword_1009FE580);
  }
  else
  {
    int v8 = 4096;
    do
    {
      if (v8 >= 4096) {
        int v9 = 4096;
      }
      else {
        int v9 = v8;
      }
      if ((int)read(dword_1009F8CC8, &unk_1009FE5C0, v9) < 1) {
        break;
      }
      sub_100023344();
      int v8 = sub_10016A99C();
      sub_1000232E0();
    }
    while (!dword_1009FE580);
  }
  if (dword_1009FE580)
  {
    sub_100023344();
    dword_1009FE584 = 1;
    j__pthread_cond_signal(&stru_1009FE588);
    sub_1000232E0();
  }
  else if (sub_100058654())
  {
    uint64_t v10 = __error();
    uint64_t v11 = strerror(*v10);
    sub_100056E24((uint64_t)"BM3UART read failed: %s\n", v12, v13, v14, v15, v16, v17, v18, (uint64_t)v11);
    long long v19 = sub_100050B4C(0x3Au);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_100744F6C();
    }
  }
  return 0;
}