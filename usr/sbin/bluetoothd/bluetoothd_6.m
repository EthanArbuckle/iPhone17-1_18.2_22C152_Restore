BOOL sub_10034D20C()
{
  CFPropertyListRef v0;
  const void *v1;
  BOOL v2;

  v0 = CFPreferencesCopyAppValue(@"ENLoggingEntitledApp", @"com.apple.MobileBluetooth.debug");
  if (!v0) {
    return 0;
  }
  v1 = v0;
  v2 = CFEqual(v0, @"yes") != 0;
  CFRelease(v1);
  return v2;
}

BOOL sub_10034D26C()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"sensitiveLogging", @"com.apple.MobileBluetooth.debug");
  if (!v0) {
    return 0;
  }
  v1 = v0;
  BOOL v2 = CFEqual(v0, @"yes") != 0;
  CFRelease(v1);
  return v2;
}

BOOL sub_10034D2CC()
{
  CFPropertyListRef v0 = CFPreferencesCopyAppValue(@"rpiLogging", @"com.apple.MobileBluetooth.debug");
  if (!v0) {
    return 0;
  }
  v1 = v0;
  BOOL v2 = CFEqual(v0, @"yes") != 0;
  CFRelease(v1);
  return v2;
}

void sub_10034D32C(unsigned char *a1)
{
  a1[253] = a1[250];
  BOOL v2 = ((*(unsigned int (**)(unsigned char *))(*(void *)a1 + 8))(a1) && !a1[252] || a1[249])
    && a1[250]
    && a1[251] != 0;
  a1[254] = v2;
  v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = a1[250];
    int v5 = a1[251];
    int v6 = a1[252];
    int v7 = a1[249];
    int v8 = a1[253];
    v9[0] = 67110400;
    v9[1] = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    __int16 v16 = 1024;
    int v17 = v8;
    __int16 v18 = 1024;
    BOOL v19 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fENSensitiveLogging: %d, fENRPILogging: %d, fRequireENLoggingProfileOnInternal:%d, fENAppHasLoggingEntitlement:%d, fPrivacySensitiveENLoggingEnabled:%d fRPIENLoggingEnabled: %d", (uint8_t *)v9, 0x26u);
  }
}

BOOL sub_10034D478(unsigned char *a1)
{
  BOOL v2 = (((*(uint64_t (**)(unsigned char *))(*(void *)a1 + 8))(a1) & 1) != 0 || a1[249]) && a1[248] != 0;
  v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = a1[249];
    int v5 = a1[248];
    v7[0] = 67109376;
    v7[1] = v4;
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fENAppHasLoggingEntitlement:%d fInsecureDatabasePath:%d", (uint8_t *)v7, 0xEu);
  }
  return v2;
}

uint64_t sub_10034D580(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 257);
}

uint64_t sub_10034D588(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 258);
}

uint64_t sub_10034D590(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 259);
}

uint64_t sub_10034D598(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6)
{
  return sub_10034D5B8(a1, "CBUseCaseDigitalID", a2, a3, a4, a5, a6);
}

uint64_t sub_10034D5B8(uint64_t a1, const std::string::value_type *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, unsigned char *a7)
{
  int v13 = *a3;
  int v48 = *a4;
  int v49 = v13;
  int v14 = *a5;
  int v15 = *a6;
  int v46 = *a7;
  int v47 = v14;
  memset(&v45, 0, sizeof(v45));
  sub_10004191C(&v45, "LEConnectionPrioritization");
  std::string::append(&v45, a2);
  uint64_t v16 = sub_100017768();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    int v17 = &v45;
  }
  else {
    int v17 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  sub_10004191C(buf, (char *)v17);
  sub_10004191C(__p, "priority");
  int v18 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v16 + 128))(v16, buf, __p, &v49);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v18) {
      goto LABEL_14;
    }
  }
  else if (!v18)
  {
    goto LABEL_14;
  }
  BOOL v19 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v20 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v20 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v20;
    __int16 v51 = 1024;
    int v52 = v49;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "%s priority parameter set to %d", buf, 0x12u);
  }
LABEL_14:
  uint64_t v21 = sub_100017768();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v22 = &v45;
  }
  else {
    v22 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  sub_10004191C(buf, (char *)v22);
  sub_10004191C(__p, "protectWLAN");
  int v23 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v21 + 128))(v21, buf, __p, &v48);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v23) {
      goto LABEL_28;
    }
  }
  else if (!v23)
  {
    goto LABEL_28;
  }
  v24 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v25 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v25 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v25;
    __int16 v51 = 1024;
    int v52 = v48;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s protectWLAN parameter set to %d", buf, 0x12u);
  }
  int v18 = 1;
LABEL_28:
  uint64_t v26 = sub_100017768();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v27 = &v45;
  }
  else {
    v27 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  sub_10004191C(buf, (char *)v27);
  sub_10004191C(__p, "protectLEA");
  int v28 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v26 + 128))(v26, buf, __p, &v47);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v28) {
      goto LABEL_42;
    }
  }
  else if (!v28)
  {
    goto LABEL_42;
  }
  v29 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v30 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v30 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v30;
    __int16 v51 = 1024;
    int v52 = v47;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "%s protectLEA parameter set to %d", buf, 0x12u);
  }
  int v18 = 1;
LABEL_42:
  uint64_t v31 = sub_100017768();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v32 = &v45;
  }
  else {
    v32 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  sub_10004191C(buf, (char *)v32);
  sub_10004191C(__p, "protectHFPA2DP");
  int v33 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v31 + 128))(v31, buf, __p, &v47);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (!v33) {
      goto LABEL_56;
    }
  }
  else if (!v33)
  {
    goto LABEL_56;
  }
  v34 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v35 = &v45;
    if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      v35 = (std::string *)v45.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = v35;
    __int16 v51 = 1024;
    int v52 = v15;
    _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "%s protectHFPA2DP parameter set to %d", buf, 0x12u);
  }
  int v18 = 1;
LABEL_56:
  uint64_t v36 = sub_100017768();
  if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    v37 = &v45;
  }
  else {
    v37 = (std::string *)v45.__r_.__value_.__r.__words[0];
  }
  sub_10004191C(buf, (char *)v37);
  sub_10004191C(__p, "percentageWithCriticalPriority");
  int v38 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, int *))(*(void *)v36 + 128))(v36, buf, __p, &v46);
  if (v44 < 0) {
    operator delete(__p[0]);
  }
  if (v53 < 0)
  {
    operator delete(*(void **)buf);
    if (v38)
    {
LABEL_63:
      v39 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        v40 = &v45;
        if ((v45.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          v40 = (std::string *)v45.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = v40;
        __int16 v51 = 1024;
        int v52 = v46;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "%s percentageWithCriticalPriority parameter set to %d", buf, 0x12u);
      }
      goto LABEL_69;
    }
  }
  else if (v38)
  {
    goto LABEL_63;
  }
  if (v18)
  {
LABEL_69:
    *a3 = v49;
    *a4 = v48;
    *a5 = v47;
    *a6 = v15;
    *a7 = v46;
    uint64_t v41 = 1;
    goto LABEL_71;
  }
  uint64_t v41 = 0;
LABEL_71:
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  return v41;
}

void sub_10034DC04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034DC8C(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6)
{
  return sub_10034D5B8(a1, "CBUseCaseDigitalIDTSA", a2, a3, a4, a5, a6);
}

uint64_t sub_10034DCAC(uint64_t result, uint64_t a2)
{
  *(void *)(result + 280) = a2;
  return result;
}

BOOL sub_10034DCB4(uint64_t a1, int a2, unint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 280);
  return !v3 || v3 + *(void *)(a1 + 288) * a2 < a3;
}

uint64_t sub_10034DCDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 268);
}

uint64_t sub_10034DCE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 272);
}

BOOL sub_10034DCEC(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 8))(a1)) {
    return 0;
  }
  char v7 = 0;
  sub_10004191C(v5, "Scan");
  sub_10004191C(__p, "DisableRssiFilter");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)a1 + 72))(a1, v5, __p, &v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return v7 != 0;
}

void sub_10034DDC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10034DDFC(uint64_t a1)
{
  if (!(*(unsigned int (**)(uint64_t))(*(void *)a1 + 8))(a1)) {
    return 0;
  }
  char v7 = 0;
  sub_10004191C(v5, "Scan");
  sub_10004191C(__p, "EnableNearbyActionNoWakeAdvMatchingRuleScan");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)a1 + 72))(a1, v5, __p, &v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  return v7 != 0;
}

void sub_10034DED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10034DF0C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 253);
}

uint64_t sub_10034DF14(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 254);
}

uint64_t sub_10034DF1C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 89);
}

uint64_t sub_10034DF24(uint64_t a1)
{
  return *(unsigned int *)(a1 + 192);
}

uint64_t sub_10034DF2C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 218);
}

uint64_t sub_10034DF34(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 219);
}

uint64_t sub_10034DF3C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 183);
}

uint64_t sub_10034DF44(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 196);
}

uint64_t sub_10034DF4C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 238);
}

uint64_t sub_10034DF54(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 237);
}

uint64_t sub_10034DF5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 264);
}

uint64_t sub_10034DF64(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 265);
}

uint64_t sub_10034DF6C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 239);
}

uint64_t sub_10034DF74(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 240);
}

uint64_t sub_10034DF7C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 241);
}

uint64_t sub_10034DF84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 242);
}

uint64_t sub_10034DF8C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 243);
}

uint64_t sub_10034DF94(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 244);
}

uint64_t sub_10034DF9C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 245);
}

uint64_t sub_10034DFA4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 246);
}

uint64_t sub_10034DFAC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 247);
}

uint64_t sub_10034DFB4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 255);
}

uint64_t sub_10034DFBC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_10034DFC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 260);
}

void sub_10034DFCC(id a1)
{
}

void sub_10034E010()
{
}

void sub_10034E034(id a1)
{
}

void sub_10034E078()
{
}

void sub_10034E09C(id a1)
{
}

void sub_10034E0E0()
{
}

void sub_10034E104(id a1)
{
}

void sub_10034E148()
{
}

void sub_10034E16C(void *a1)
{
  *a1 = &off_1009A7850;
  sub_100373300();
}

uint64_t sub_10034E1B4(uint64_t a1)
{
  *(void *)a1 = &off_1009A7850;
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));
  return a1;
}

void sub_10034E21C(uint64_t a1)
{
  *(void *)a1 = &off_1009A7850;
  (***(void (****)(void))(a1 + 8))(*(void *)(a1 + 8));

  operator delete();
}

uint64_t sub_10034E2A4(uint64_t a1)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 8) + 48))(*(void *)(a1 + 8), 0, 0);
}

void sub_10034E2D4(uint64_t a1, unsigned int a2)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009A7898);
  }
  uint64_t v3 = off_1009F8098;

  sub_1002AF4EC((uint64_t)v3, a2);
}

void sub_10034E350(id a1)
{
}

void sub_10034E394()
{
}

void sub_10034E3B8(void (***a1)(void, void, const UInt8 *, void))
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v3[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Firmware Debug Settings", (uint8_t *)v3, 2u);
  }
  memset(v3, 0, sizeof(v3));
  if (sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"fw.TraceMode", -1, 7, (const char **)off_1009FB290) != -1)sub_10034E8FC(); {
  if (sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"fw.TraceLevel", -1, 7, (const char **)off_1009FB2D0) != -1)sub_10034E990();
  }
  if (sub_10034EA24(@"com.apple.MobileBluetooth.debug", @"fw.TraceMask", v3, 32)) {
    sub_10034ED04();
  }
  if (sub_10034EA24(@"com.apple.MobileBluetooth.debug", @"phy.TraceMask", v3, 32)) {
    sub_10034ED98();
  }
  if (sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"phy.TraceLevel", -1, 256, 0) != -1) {
    sub_10034EE2C();
  }
  if (sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"fw.CaptureTimeout", -1, (uint64_t)&_mh_execute_header, 0) != -1)sub_10034EEC0(); {
  if (sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"fw.TriggerCapture", -1, (uint64_t)&_mh_execute_header, 0) != -1)sub_10034EF54();
  }
  if (sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"fw.TapToRadar", -1, 2, 0) != -1) {
    sub_10034F098();
  }
  sub_10034F12C(a1, @"com.apple.MobileBluetooth.debug", @"fw.GeneralDebug");
}

uint64_t sub_10034E5EC(const __CFString *a1, CFStringRef theString, uint64_t a3, uint64_t a4, const char **a5)
{
  uint64_t v7 = a3;
  uint64_t valuePtr = a3;
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  CFStringRef v11 = (const __CFString *)CFPreferencesCopyAppValue(theString, a1);
  __int16 v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }
  if (v11)
  {
    CFTypeID v13 = CFGetTypeID(v11);
    if (v13 == CFNumberGetTypeID())
    {
      int Value = CFNumberGetValue((CFNumberRef)v11, kCFNumberSInt64Type, &valuePtr);
      uint64_t v15 = valuePtr;
      uint64_t v16 = "";
      if (Value && valuePtr > v7 && valuePtr < a4)
      {
        if (a5)
        {
LABEL_9:
          uint64_t v16 = a5[v15];
          goto LABEL_31;
        }
LABEL_30:
        uint64_t v16 = "int";
      }
    }
    else
    {
      CFTypeID v17 = CFGetTypeID(v11);
      if (v17 != CFStringGetTypeID() || (int v18 = CFStringGetCStringPtr(v11, 0x8000100u)) == 0)
      {
        uint64_t v16 = "";
        uint64_t v15 = v7;
        goto LABEL_35;
      }
      uint64_t v16 = v18;
      if (!a5) {
        goto LABEL_21;
      }
      BOOL v19 = *a5;
      if (*a5)
      {
        uint64_t v20 = 0;
        uint64_t v21 = a5 + 1;
        while (strcasecmp(v16, v19))
        {
          v22 = *v21++;
          BOOL v19 = v22;
          v20 += 0x100000000000000;
          if (!v22) {
            goto LABEL_17;
          }
        }
        uint64_t v15 = v20 >> 56;
      }
      else
      {
LABEL_17:
        uint64_t v15 = -1;
      }
      uint64_t valuePtr = v15;
      if (v15 == v7)
      {
LABEL_21:
        *(void *)buf = 0;
        uint64_t v23 = strtoq(v16, (char **)buf, 0);
        uint64_t valuePtr = v23;
        if (**(unsigned char **)buf) {
          BOOL v24 = 1;
        }
        else {
          BOOL v24 = v23 <= v7;
        }
        if (v24 || v23 >= a4)
        {
          uint64_t valuePtr = v7;
          uint64_t v15 = v7;
          goto LABEL_31;
        }
        uint64_t v15 = v23;
        if (a5) {
          goto LABEL_9;
        }
        goto LABEL_30;
      }
    }
LABEL_31:
    if (*v16 && v15 != v7)
    {
      uint64_t v26 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315650;
        *(void *)&buf[4] = CStringPtr;
        __int16 v31 = 2080;
        v32 = v16;
        __int16 v33 = 2048;
        uint64_t v34 = v15;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "\t%s = %s(%lld)", buf, 0x20u);
      }
LABEL_38:
      CFRelease(v11);
      return valuePtr;
    }
LABEL_35:
    v27 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315650;
      *(void *)&buf[4] = CStringPtr;
      __int16 v31 = 2080;
      v32 = v16;
      __int16 v33 = 2048;
      uint64_t v34 = v15;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Warning: \tIllegal %s value %s(%lld), ignoring!", buf, 0x20u);
    }
    uint64_t valuePtr = v7;
    goto LABEL_38;
  }
  return v7;
}

void sub_10034E8FC()
{
  sub_100023344();
  int v0 = sub_1002004D8();
  sub_1000232E0();
  if (v0)
  {
    v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetTraceMode not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10034E990()
{
  sub_100023344();
  int v0 = sub_100200564();
  sub_1000232E0();
  if (v0)
  {
    v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetTraceLevel not implemented for current chipset!", v2, 2u);
    }
  }
}

void *sub_10034EA24(const __CFString *a1, CFStringRef theString, void *a3, int a4)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  CFPropertyListRef v9 = CFPreferencesCopyAppValue(theString, a1);
  __int16 v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v30 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }
  if (!v9) {
    return 0;
  }
  CFTypeID v11 = CFGetTypeID(v9);
  if (v11 == CFDataGetTypeID())
  {
    CFIndex Length = CFDataGetLength((CFDataRef)v9);
    BytePtr = CFDataGetBytePtr((CFDataRef)v9);
    uint64_t v15 = 0;
    if (BytePtr && Length)
    {
      uint64_t v16 = BytePtr;
      __chkstk_darwin(BytePtr, v14);
      int v18 = &buf[-((v17 + 16) & 0xFFFFFFFFFFFFFFF0)];
      bzero(v18, 3 * Length + 1);
      sub_10025B74C((uint64_t)v18, (unsigned __int16)(3 * Length + 1), (uint64_t)"%@", v19, v20, v21, v22, v23, (uint64_t)v16);
      BOOL v24 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315394;
        v30 = CStringPtr;
        __int16 v31 = 2080;
        *(void *)v32 = v18;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "\t%s = <%s>", buf, 0x16u);
      }
      if (Length == a4)
      {
        memcpy(a3, v16, Length);
      }
      else
      {
        v27 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)buf = 136315650;
          v30 = CStringPtr;
          __int16 v31 = 1024;
          *(_DWORD *)v32 = Length;
          *(_WORD *)&v32[4] = 1024;
          *(_DWORD *)&v32[6] = a4;
          _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "Warning: \t\tIllegal %s value len %d expecting %d, ignoring!", buf, 0x18u);
        }
        a3 = 0;
      }
      uint64_t v15 = a3;
    }
  }
  else
  {
    v25 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      CFTypeID v26 = CFGetTypeID(v9);
      *(_DWORD *)buf = 136315394;
      v30 = CStringPtr;
      __int16 v31 = 2048;
      *(void *)v32 = v26;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: \tIllegal %s data type %lu should be Data, ignoring!", buf, 0x16u);
    }
    uint64_t v15 = 0;
  }
  CFRelease(v9);
  return v15;
}

void sub_10034ED04()
{
  sub_100023344();
  int v0 = sub_10020067C();
  sub_1000232E0();
  if (v0)
  {
    v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetTraceMask not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10034ED98()
{
  sub_100023344();
  int v0 = sub_100200708();
  sub_1000232E0();
  if (v0)
  {
    v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetPhyTraceMask not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10034EE2C()
{
  sub_100023344();
  int v0 = sub_1002005F0();
  sub_1000232E0();
  if (v0)
  {
    v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetPhyTraceLevel not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10034EEC0()
{
  sub_100023344();
  int v0 = sub_100200794();
  sub_1000232E0();
  if (v0)
  {
    v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_SetCaptureTimeout not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10034EF54()
{
  int v0 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "initiating FW triggerCapture", buf, 2u);
  }
  sub_100023344();
  int v1 = sub_100200820();
  sub_1000232E0();
  BOOL v2 = qword_100A19E50;
  BOOL v3 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v1)
  {
    if (!v3) {
      return;
    }
    __int16 v8 = 0;
    char v4 = "Warning: BT_VSC_TriggerCapture not implemented for current chipset!";
    int v5 = (uint8_t *)&v8;
    goto LABEL_10;
  }
  if (v3)
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "waiting for FW triggerCapture completion...", v7, 2u);
  }
  sub_100103A08(byte_100A12438, 0);
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v6 = 0;
    char v4 = "FW triggerCapture Completed";
    int v5 = (uint8_t *)&v6;
LABEL_10:
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
  }
}

void sub_10034F098()
{
  sub_100023344();
  int v0 = sub_1002008AC();
  sub_1000232E0();
  if (v0)
  {
    int v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_EnableTapToRadar not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10034F12C(void (***a1)(void, void, const UInt8 *, void), const __CFString *a2, CFStringRef theString)
{
  CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u);
  CFPropertyListRef v7 = CFPreferencesCopyAppValue(theString, a2);
  __int16 v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    v54 = CStringPtr;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Checking for %s", buf, 0xCu);
  }
  if (v7)
  {
    CFTypeID v9 = CFGetTypeID(v7);
    if (v9 == CFArrayGetTypeID())
    {
      CFIndex Count = CFArrayGetCount((CFArrayRef)v7);
      CFTypeID v11 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        v54 = CStringPtr;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "\t%s = (", buf, 0xCu);
      }
      if (Count >= 1)
      {
        CFIndex v13 = 0;
        *(void *)&long long v12 = 67109120;
        long long v51 = v12;
        *(void *)&long long v12 = 136315138;
        long long v52 = v12;
        v50[0] = a1;
        do
        {
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex((CFArrayRef)v7, v13);
          uint64_t v15 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "\t\t{", buf, 2u);
          }
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(ValueAtIndex, @"Description");
          if (Value)
          {
            CFStringRef v17 = Value;
            CFTypeID v18 = CFGetTypeID(Value);
            if (v18 == CFStringGetTypeID())
            {
              uint64_t v19 = CFStringGetCStringPtr(v17, 0x8000100u);
              uint64_t v20 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v52;
                v54 = v19;
                _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "\t\t\tDescription: %s;", buf, 0xCu);
              }
            }
          }
          CFDataRef v21 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, @"Code");
          if (v21 && (v22 = v21, CFTypeID v23 = CFGetTypeID(v21), v23 == CFDataGetTypeID()) && CFDataGetLength(v22) == 2)
          {
            BytePtr = CFDataGetBytePtr(v22);
            v25 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              unsigned int v26 = bswap32(*(unsigned __int16 *)BytePtr) >> 16;
              *(_DWORD *)buf = v51;
              LODWORD(v54) = v26;
              _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "\t\t\tCode: <%04X>;", buf, 8u);
            }
            CFDataRef v27 = (const __CFData *)CFDictionaryGetValue(ValueAtIndex, @"Value");
            if (!v27)
            {
              v42 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Warning: \t\t\tValue: <empty>;",
                  buf,
                  2u);
              }
              LOWORD(Length) = 0;
              __int16 v31 = (const UInt8 *)"";
              goto LABEL_34;
            }
            CFDataRef v28 = v27;
            CFTypeID v29 = CFGetTypeID(v27);
            if (v29 == CFDataGetTypeID())
            {
              CFIndex Length = CFDataGetLength(v28);
              __int16 v31 = CFDataGetBytePtr(v28);
              v50[1] = v50;
              __chkstk_darwin(v31, v32);
              uint64_t v34 = (char *)v50 - ((v33 + 16) & 0xFFFFFFFFFFFFFFF0);
              bzero(v34, 3 * Length + 1);
              sub_10025B74C((uint64_t)v34, (unsigned __int16)(3 * Length + 1), (uint64_t)"%@", v35, v36, v37, v38, v39, (uint64_t)v31);
              v40 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = v52;
                v54 = v34;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "\t\t\tValue: <%s>;", buf, 0xCu);
              }
              a1 = (void (***)(void, void, const UInt8 *, void))v50[0];
LABEL_34:
              v43 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "\t\t}", buf, 2u);
              }
              (**a1)(a1, *(unsigned __int16 *)BytePtr, v31, (unsigned __int16)Length);
              goto LABEL_29;
            }
            uint64_t v41 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Warning: \t\t\tValue: wrong type, ignoring this entry!", buf, 2u);
              uint64_t v41 = qword_100A19E50;
            }
            if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_29;
            }
          }
          else
          {
            uint64_t v41 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Warning: \t\t\tCode: missing or wrong type or len, ignoring this entry!", buf, 2u);
              uint64_t v41 = qword_100A19E50;
            }
            if (!os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_29;
            }
          }
          *(_WORD *)buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "\t\t}", buf, 2u);
LABEL_29:
          ++v13;
        }
        while (Count != v13);
      }
      uint64_t v49 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_46;
      }
      *(_WORD *)buf = 0;
      int v46 = "\t)";
      int v47 = v49;
      uint32_t v48 = 2;
    }
    else
    {
      uint64_t v44 = qword_100A19E50;
      if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
LABEL_46:
        CFRelease(v7);
        return;
      }
      CFTypeID v45 = CFGetTypeID(v7);
      *(_DWORD *)buf = 136315394;
      v54 = CStringPtr;
      __int16 v55 = 2048;
      CFTypeID v56 = v45;
      int v46 = "Warning: \tIllegal %s data type %lu should be Array, ignoring!";
      int v47 = v44;
      uint32_t v48 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, buf, v48);
    goto LABEL_46;
  }
}

void sub_10034F758()
{
  sub_100023344();
  int v0 = sub_100200938();
  sub_1000232E0();
  if (v0)
  {
    int v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v2 = 0;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Warning: BT_VSC_GeneralDebug not implemented for current chipset!", v2, 2u);
    }
  }
}

void sub_10034F804(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetTraceMode completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_10034F8A8(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetTraceLevel completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_10034F94C(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetPhyTraceLevel completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_10034F9F0(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetTraceMask completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_10034FA94(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetPhyTraceMask completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_10034FB38(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_SetCaptureTimeout completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

uint64_t sub_10034FBDC(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_TriggerCapture completed with status 0x%08X", (uint8_t *)v4, 8u);
  }
  return sub_100103CD4(byte_100A12438);
}

void sub_10034FC8C(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_EnableTapToRadar completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void sub_10034FD30(int a1)
{
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = a1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BT_VSC_GeneralDebug completed with status 0x%08X", (uint8_t *)v3, 8u);
  }
}

void *sub_10034FDD4(void *a1)
{
  *a1 = &off_1009A78E0;
  uint64_t v9 = 0;
  sub_1001E694C(a1 + 1, &v9);
  uint64_t v2 = a1[1];
  uint64_t v3 = qword_100A19E50;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_DWORD *)buf = 134217984;
      uint64_t v11 = v2;
      int v5 = "Warning: BT driver=0x%08llX";
      __int16 v6 = v3;
      uint32_t v7 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
    }
  }
  else if (v4)
  {
    *(_WORD *)buf = 0;
    int v5 = "Warning: BT driver not ready yet!, skipping";
    __int16 v6 = v3;
    uint32_t v7 = 2;
    goto LABEL_6;
  }
  return a1;
}

void sub_10034FEE8(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Driver Debug Settings", buf, 2u);
  }
  *(_OWORD *)buf = 0u;
  long long v12 = 0u;
  if (*(void *)(a1 + 8))
  {
    uint64_t v3 = sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"driver.TraceMode", -1, 5, (const char **)off_1009FB310);
    if (v3 != -1) {
      sub_10035012C(a1, v3);
    }
    uint64_t v4 = sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"driver.TraceLevel", -1, 7, (const char **)off_1009FB340);
    if (v4 != -1) {
      sub_10035022C(a1, v4);
    }
    int v5 = sub_10034EA24(@"com.apple.MobileBluetooth.debug", @"driver.TraceMask", buf, 32);
    if (v5) {
      sub_10035032C(a1, (uint64_t)v5);
    }
    uint64_t v6 = sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"driver.CaptureTimeout", -1, (uint64_t)&_mh_execute_header, 0);
    if (v6 != -1) {
      sub_10035042C(a1, v6);
    }
    uint64_t v7 = sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"driver.TriggerCapture", -1, (uint64_t)&_mh_execute_header, 0);
    if (v7 != -1) {
      sub_10035052C(a1, v7);
    }
    uint64_t v8 = sub_10034E5EC(@"com.apple.MobileBluetooth.debug", @"driver.TapToRadar", -1, 2, 0);
    if (v8 != -1) {
      sub_10035062C(a1, v8 != 0);
    }
    sub_10034F12C((void (***)(void, void, const UInt8 *, void))a1, @"com.apple.MobileBluetooth.debug", @"driver.GeneralDebug");
  }
  else
  {
    uint64_t v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Warning: BT driver not ready yet!, skipping", v10, 2u);
    }
  }
}

void sub_10035012C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 8) + 64);
  if (!v2)
  {
    uint64_t v9 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::setTraceMode not implemented for current chipset!";
    uint64_t v7 = v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }
  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::setTraceMode failed with status 0x%08X!";
      uint64_t v7 = v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_10035022C(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 8) + 72);
  if (!v2)
  {
    uint64_t v9 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::setTraceLevel not implemented for current chipset!";
    uint64_t v7 = v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }
  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::setTraceLevel failed with status 0x%08X!";
      uint64_t v7 = v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_10035032C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 80);
  if (!v2)
  {
    uint64_t v9 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::setTraceMask not implemented for current chipset!";
    uint64_t v7 = v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }
  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::setTraceMask failed with status 0x%08X!";
      uint64_t v7 = v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_10035042C(uint64_t a1, unsigned __int16 a2)
{
  uint64_t v2 = *(uint64_t (**)(void))(*(void *)(a1 + 8) + 88);
  if (!v2)
  {
    uint64_t v9 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::setCaptureTimeout not implemented for current chipset!";
    uint64_t v7 = v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }
  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::setCaptureTimeout failed with status 0x%08X!";
      uint64_t v7 = v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_10035052C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 96);
  if (!v2)
  {
    uint64_t v9 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::triggerCapture not implemented for current chipset!";
    uint64_t v7 = v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }
  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::triggerCapture failed with status 0x%08X!";
      uint64_t v7 = v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_10035062C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 104);
  if (!v2)
  {
    uint64_t v9 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::enableTapToRadar not implemented for current chipset!";
    uint64_t v7 = v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }
  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::enableTapToRadar failed with status 0x%08X!";
      uint64_t v7 = v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_10035072C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t (**)(uint64_t))(*(void *)(a1 + 8) + 120);
  if (!v2)
  {
    uint64_t v9 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v6 = "Warning: HciDriver_t::enableBtDriverFwTraces not implemented for current chipset!";
    uint64_t v7 = v9;
    uint32_t v8 = 2;
    goto LABEL_7;
  }
  int v3 = v2(a2);
  if (v3)
  {
    int v4 = v3;
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v10[0] = 67109120;
      v10[1] = v4;
      uint64_t v6 = "Warning: Calling HciDriver_t::enableBtDriverFwTraces failed with status 0x%08X!";
      uint64_t v7 = v5;
      uint32_t v8 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v10, v8);
    }
  }
}

void sub_10035082C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(a1 + 8) + 112);
  if (!v4)
  {
    uint64_t v11 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v12[0]) = 0;
    uint32_t v8 = "Warning: HciDriver_t::generalDebug not implemented for current chipset!";
    uint64_t v9 = v11;
    uint32_t v10 = 2;
    goto LABEL_7;
  }
  int v5 = v4(a2, a3, a4);
  if (v5)
  {
    int v6 = v5;
    uint64_t v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      v12[0] = 67109120;
      v12[1] = v6;
      uint32_t v8 = "Warning: Calling HciDriver_t::generalDebug failed with status 0x%08X!";
      uint64_t v9 = v7;
      uint32_t v10 = 8;
LABEL_7:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, (uint8_t *)v12, v10);
    }
  }
}

uint64_t sub_100350934()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    int v1 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
      sub_10075896C(v1);
    }
    return (sub_1003FAF7C() & 0xFFFFFFFE) == 44;
  }
  return result;
}

uint64_t sub_1003509A0()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  unsigned int v1 = v0 - 1;
  BOOL v2 = v0 - 2000 < 0x7D0;
  BOOL v3 = v0 >= 0xA;
  unsigned int v4 = (0x1F3u >> v0) & 1;
  if (v3) {
    unsigned int v4 = 1;
  }
  if (v1 <= 0x7CE) {
    return v4;
  }
  else {
    return v2;
  }
}

uint64_t sub_1003509EC()
{
  int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  uint64_t v1 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    if ((v0 - 18) <= 0x7BD)
    {
      BOOL v2 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v9 = 0;
        BOOL v3 = "UWBS supported, Mac, Chipset >= BCM_4364B3";
        unsigned int v4 = (uint8_t *)&v9;
LABEL_13:
        _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v3, v4, 2u);
        return 1;
      }
      return 1;
    }
    return 0;
  }
  uint64_t v5 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 336))(v5))
  {
    if ((v0 - 12) <= 0x7C3)
    {
      BOOL v2 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v8 = 0;
        BOOL v3 = "UWBS supported, Chipset >= BCM_4355C0";
        unsigned int v4 = (uint8_t *)&v8;
        goto LABEL_13;
      }
      return 1;
    }
    return 0;
  }
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    int v7 = sub_1003FAF7C();
    if ((v7 - 150) >= 0xB) {
      return 0;
    }
    else {
      return (0x701u >> (v7 + 106)) & 1;
    }
  }
  return result;
}

BOOL sub_100350B58()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  uint64_t v1 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1)) {
    return v0 - 20 < 0x7BC;
  }
  uint64_t v2 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 328))(v2)) {
    BOOL v3 = v0 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3 || v0 > 0x7CF)
  {
    uint64_t v5 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 336))(v5)) {
      return 0;
    }
    int v6 = sub_1003FAF7C();
    if ((v6 - 150) >= 0xB) {
      return 0;
    }
    else {
      return (0x701u >> (v6 + 106)) & 1;
    }
  }
  else
  {
    if (v0 > 0x12) {
      return 1;
    }
    uint64_t v4 = 1;
    int v7 = sub_1003FAF7C();
    if (((v7 - 81) > 0x1D || ((1 << (v7 - 81)) & 0x30C00003) == 0) && v7 != 19) {
      return 0;
    }
  }
  return v4;
}

uint64_t sub_100350CA0(uint64_t a1, unsigned int a2)
{
  if (a2 > 6) {
    return 0;
  }
  if (((1 << a2) & 0x65) == 0) {
    return 1;
  }
  uint64_t v2 = sub_100035F54();
  return (*(unsigned int (**)(uint64_t))(*(void *)v2 + 424))(v2) ^ 1;
}

uint64_t sub_100350D18(uint64_t a1)
{
  unsigned int v1 = *(_DWORD *)(a1 + 712);
  uint64_t v2 = sub_100035F54();
  unsigned int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 328))(v2);
  if (v1) {
    unsigned int v4 = v3;
  }
  else {
    unsigned int v4 = 0;
  }
  if (v1 >= 0x7D0) {
    unsigned int v4 = 0;
  }
  if (v1 > 0xE) {
    return v4;
  }
  else {
    return 0;
  }
}

BOOL sub_100350D80(uint64_t a1)
{
  return (*(_DWORD *)(a1 + 712) - 20) < 0x7BC;
}

uint64_t sub_100350D94(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 712);
  uint64_t v2 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 328))(v2))
  {
    if ((v1 - 23) > 0x7B8) {
      return 0;
    }
  }
  else
  {
    uint64_t v3 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v3 + 384))(v3) || (v1 - 23) >= 0x7B9) {
      return 0;
    }
  }

  return _os_feature_enabled_impl();
}

BOOL sub_100350E68()
{
  uint64_t v0 = sub_100035F54();
  return ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 384))(v0) & 1) == 0
      && (sub_1003FAF7C() & 0xFFFFFFFE) != 4;
}

BOOL sub_100350EC8()
{
  int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  uint64_t v1 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1)) {
    return (v0 - 20) < 0x7BC;
  }
  else {
    return (v0 - 19) < 0x7BD;
  }
}

BOOL sub_100350F3C()
{
  int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  uint64_t v1 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1)) {
    return (v0 - 20) < 0x7BC;
  }
  else {
    return (v0 - 12) < 0x7C4;
  }
}

BOOL sub_100350FB0()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 20) < 0x7BC;
}

uint64_t sub_100350FD8(uint64_t a1)
{
  if ((*(_DWORD *)(sub_10003FB34() + 712) - 22) > 0x7B9) {
    return 0;
  }
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 16))(v4, a1);
  if (v5 < 0)
  {
    if (v4[1] == (void *)2)
    {
      unsigned int v2 = bswap32(*(unsigned __int16 *)v4[0]);
      operator delete(v4[0]);
      if (HIWORD(v2) == 17200) {
        return 0;
      }
    }
    else
    {
      operator delete(v4[0]);
    }
  }
  else if (v5 == 2 && bswap32(LOWORD(v4[0])) >> 16 == 17200)
  {
    return 0;
  }
  return 1;
}

BOOL sub_10035109C()
{
  return (sub_1003FAF7C() & 0xFFFFFFFE) == 44;
}

BOOL sub_1003510C0(uint64_t a1)
{
  if ((*(_DWORD *)(sub_10003FB34() + 712) - 1) <= 0x7CE
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 40))(a1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 56))(a1))
  {
    return 0;
  }
  uint64_t v2 = 1;
  int v3 = sub_1003FAF7C();
  if (((v3 - 233) > 0x24 || ((1 << (v3 + 23)) & 0x1FFFFFF6FDLL) == 0)
    && ((v3 - 112) > 0x11 || ((1 << (v3 - 112)) & 0x3FF0F) == 0))
  {
    return (v3 - 44) < 6;
  }
  return v2;
}

BOOL sub_1003511E0()
{
  return (sub_1003FAF7C() & 0xFFFFFFFE) == 40;
}

uint64_t sub_100351204()
{
  int v0 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 424);

  return v0();
}

uint64_t sub_100351254()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  BOOL v1 = v0 - 2001 < 2;
  BOOL v2 = v0 >= 0x19;
  BOOL v4 = v0 == 25;
  int v3 = (1 << v0) & 0x2D89040;
  BOOL v4 = !v4 && v2 || v3 == 0;
  return !v4 || v1;
}

uint64_t sub_10035129C()
{
  unsigned int v0 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "supports PER based power control check", (uint8_t *)v10, 2u);
  }
  int v1 = *(_DWORD *)(sub_10003FB34() + 712);
  uint64_t v2 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v2 + 352))(v2) & 1) != 0
    || (uint64_t v3 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 360))(v3) & 1) != 0)
    || (uint64_t v4 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 376))(v4) & 1) != 0))
  {
    unsigned int v5 = 1;
  }
  else
  {
    uint64_t v9 = sub_100035F54();
    unsigned int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 424))(v9);
  }
  if ((v1 - 2000) < 0x7D0) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  int v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v10[0] = 67109120;
    v10[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "supports PER based power control check return : %d", (uint8_t *)v10, 8u);
  }
  return v6;
}

uint64_t sub_100351464()
{
  uint64_t v0 = sub_100035F54();
  int v1 = (*(uint64_t (**)(uint64_t))(*(void *)v0 + 384))(v0);
  unsigned int v2 = *(_DWORD *)(sub_10003FB34() + 712);
  if (v1)
  {
    return v2 - 1 <= 0x7CE && (v2 == 14 || v2 > 0x12);
  }
  else
  {
    unsigned int v5 = sub_1003FAF7C();
    BOOL v4 = v5 - 149 <= 9 && ((1 << (v5 + 107)) & 0x20B) != 0 || v5 < 4;
    uint64_t v6 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v6 + 352))(v6) & 1) != 0
      || (uint64_t v7 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 360))(v7) & 1) != 0)
      || (uint64_t v8 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v8 + 376))(v8) & 1) != 0))
    {
      int v9 = 1;
    }
    else
    {
      uint64_t v13 = sub_100035F54();
      int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 424))(v13);
    }
    if (v2 - 1 <= 0x7CE)
    {
      if (v2 > 0xB || v2 == 9) {
        int v11 = v9;
      }
      else {
        int v11 = 0;
      }
      return v4 | v11;
    }
  }
  return v4;
}

uint64_t sub_100351610()
{
  uint64_t v0 = sub_100035F54();
  uint64_t v1 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(void *)v0 + 384))(v0) & 1) == 0)
  {
    switch(sub_1003FAF7C())
    {
      case 0x10u:
      case 0x11u:
      case 0x12u:
      case 0x14u:
      case 0x15u:
      case 0x16u:
      case 0x17u:
      case 0x1Cu:
      case 0x1Du:
      case 0x1Eu:
      case 0x1Fu:
      case 0x20u:
      case 0x21u:
      case 0x22u:
      case 0x23u:
      case 0x24u:
      case 0x25u:
      case 0x26u:
      case 0x27u:
      case 0x28u:
      case 0x29u:
      case 0x2Au:
      case 0x2Bu:
      case 0x2Cu:
      case 0x2Du:
      case 0x2Eu:
      case 0x2Fu:
      case 0x30u:
      case 0x31u:
      case 0x32u:
      case 0x43u:
      case 0x44u:
      case 0x45u:
      case 0x46u:
      case 0x47u:
      case 0x48u:
      case 0x49u:
      case 0x4Au:
      case 0x59u:
      case 0x5Au:
      case 0x5Bu:
      case 0x5Cu:
      case 0x5Du:
      case 0x5Eu:
      case 0x5Fu:
      case 0x60u:
      case 0x61u:
      case 0x62u:
      case 0x63u:
      case 0x64u:
      case 0x65u:
      case 0x66u:
      case 0x69u:
      case 0x6Au:
      case 0x6Bu:
      case 0x6Cu:
      case 0x6Fu:
      case 0x70u:
      case 0x71u:
      case 0x72u:
      case 0x73u:
      case 0x74u:
      case 0x75u:
      case 0x78u:
      case 0x79u:
      case 0x7Au:
      case 0x7Bu:
      case 0x7Cu:
      case 0x7Du:
      case 0x7Eu:
      case 0x7Fu:
      case 0x80u:
      case 0x81u:
      case 0x82u:
      case 0x83u:
      case 0x84u:
      case 0x85u:
      case 0x86u:
      case 0x87u:
      case 0x8Eu:
      case 0x8Fu:
      case 0x90u:
      case 0x91u:
      case 0x92u:
      case 0x93u:
      case 0x9Au:
        uint64_t v1 = 1;
        break;
      default:
        return v1;
    }
  }
  return v1;
}

BOOL sub_1003518C8()
{
  uint64_t v0 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 384))(v0)) {
    return 0;
  }
  unsigned int v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v6[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "supports PER based power control check", (uint8_t *)v6, 2u);
  }
  int v3 = sub_1003FAF7C();
  BOOL v1 = (v3 - 156) <= 0x3D && ((1 << (v3 + 100)) & 0x3EFFFFFFC3C1E003) != 0
    || v3 == 27;
  BOOL v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "supports PER based power control check return : %d", (uint8_t *)v6, 8u);
  }
  return v1;
}

BOOL sub_100351A24()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 19) < 0x7BD;
}

BOOL sub_100351A4C()
{
  return sub_1003FAF7C() - 6 < 4;
}

uint64_t sub_100351A70()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  if (v0 - 1 > 0x7CE) {
    goto LABEL_18;
  }
  if (v0 > 0xE)
  {
    uint64_t v1 = 76;
    goto LABEL_31;
  }
  BOOL v2 = v0 > 0xB || v0 == 9;
  if (!v2 && v0 != 6)
  {
LABEL_18:
    uint64_t v1 = 34;
    goto LABEL_31;
  }
  LODWORD(v1) = 34;
  int v4 = sub_1003FAF7C();
  if (v4 <= 61)
  {
    if (v4 >= 4)
    {
      if ((v4 - 57) >= 2)
      {
        if (v4 == 61) {
          LODWORD(v1) = 48;
        }
        goto LABEL_28;
      }
      goto LABEL_24;
    }
LABEL_20:
    LODWORD(v1) = 32;
    goto LABEL_28;
  }
  if (v4 > 160)
  {
    if ((v4 - 161) < 4) {
      LODWORD(v1) = 42;
    }
    goto LABEL_28;
  }
  if ((v4 - 79) < 2) {
    goto LABEL_20;
  }
  if (v4 == 62)
  {
    LODWORD(v1) = 44;
    goto LABEL_28;
  }
  if (v4 == 88) {
LABEL_24:
  }
    LODWORD(v1) = 36;
LABEL_28:
  uint64_t v5 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 384))(v5)) {
    uint64_t v1 = 56;
  }
  else {
    uint64_t v1 = v1;
  }
LABEL_31:
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ePA low Tx power is : %d", (uint8_t *)v8, 8u);
  }
  return v1;
}

uint64_t sub_100351C10()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  if (v0 - 1 > 0x7CE) {
    goto LABEL_18;
  }
  if (v0 >= 0xF)
  {
    if (sub_1003FAF7C() == 149) {
      uint64_t v1 = 42;
    }
    else {
      uint64_t v1 = 76;
    }
    goto LABEL_40;
  }
  BOOL v2 = v0 > 0xB || v0 == 9;
  if (!v2 && v0 != 6)
  {
LABEL_18:
    uint64_t v1 = 34;
    goto LABEL_40;
  }
  int v4 = sub_1003FAF7C();
  if (v4 <= 77)
  {
    if (v4 > 74)
    {
      if (v4 != 76) {
        goto LABEL_35;
      }
      goto LABEL_36;
    }
    if (v4 > 0x3E) {
      goto LABEL_31;
    }
    if (((1 << v4) & 0x3C0) != 0)
    {
      LODWORD(v1) = 54;
      goto LABEL_37;
    }
    if (((1 << v4) & 0x2200000000000000) != 0) {
      goto LABEL_35;
    }
    if (((1 << v4) & 0x4400000000000000) == 0)
    {
LABEL_31:
      if (v4 >= 2)
      {
        if ((v4 - 2) < 2)
        {
          LODWORD(v1) = 48;
          goto LABEL_37;
        }
        goto LABEL_45;
      }
LABEL_35:
      LODWORD(v1) = 52;
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  if (v4 > 87)
  {
    if ((v4 - 161) < 4)
    {
      LODWORD(v1) = 42;
      goto LABEL_37;
    }
    if (v4 == 88) {
      goto LABEL_35;
    }
    goto LABEL_45;
  }
  if (v4 <= 79)
  {
    if (v4 != 78) {
      goto LABEL_35;
    }
    goto LABEL_36;
  }
  switch(v4)
  {
    case 'P':
      goto LABEL_36;
    case 'Q':
      goto LABEL_35;
    case 'R':
LABEL_36:
      LODWORD(v1) = 44;
      goto LABEL_37;
  }
LABEL_45:
  LODWORD(v1) = 34;
LABEL_37:
  uint64_t v5 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 384))(v5)) {
    uint64_t v1 = 56;
  }
  else {
    uint64_t v1 = v1;
  }
LABEL_40:
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "ePA high Tx power is : %d", (uint8_t *)v8, 8u);
  }
  return v1;
}

uint64_t sub_100351E88()
{
  if ((*(_DWORD *)(sub_10003FB34() + 712) - 12) > 0x7C3)
  {
    unsigned __int8 v1 = 34;
  }
  else
  {
    int v0 = sub_1003FAF7C();
    if ((v0 - 6) <= 3) {
      unsigned __int8 v1 = 0x2E2A2E2Au >> (8 * (v0 - 6));
    }
    else {
      unsigned __int8 v1 = 34;
    }
  }
  BOOL v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v1;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "ePA mid Tx power is : %d", (uint8_t *)v4, 8u);
  }
  return v1;
}

BOOL sub_100351F70()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 10) < 0x7C6;
}

uint64_t sub_100351F98()
{
  uint64_t v0 = 1;
  unsigned int v1 = sub_1003FAF7C();
  switch(v1)
  {
    case 0x92u:
    case 0x9Cu:
    case 0x9Du:
    case 0xBAu:
    case 0xBBu:
    case 0xBCu:
    case 0xBDu:
    case 0xC2u:
    case 0xC3u:
    case 0xC4u:
    case 0xC5u:
    case 0xC6u:
    case 0xC7u:
    case 0xC8u:
    case 0xC9u:
    case 0xCAu:
    case 0xCBu:
    case 0xCCu:
    case 0xCDu:
    case 0xCEu:
    case 0xCFu:
    case 0xD0u:
    case 0xD1u:
    case 0xD2u:
    case 0xD3u:
    case 0xD5u:
    case 0xD6u:
    case 0xD7u:
    case 0xD8u:
    case 0xD9u:
      return v0;
    case 0x93u:
    case 0x94u:
    case 0x95u:
    case 0x96u:
    case 0x97u:
    case 0x98u:
    case 0x99u:
    case 0x9Au:
    case 0x9Bu:
    case 0x9Eu:
    case 0x9Fu:
    case 0xA0u:
    case 0xA1u:
    case 0xA2u:
    case 0xA3u:
    case 0xA4u:
    case 0xA5u:
    case 0xA6u:
    case 0xA7u:
    case 0xA8u:
    case 0xA9u:
    case 0xAAu:
    case 0xABu:
    case 0xACu:
    case 0xADu:
    case 0xAEu:
    case 0xAFu:
    case 0xB0u:
    case 0xB1u:
    case 0xB2u:
    case 0xB3u:
    case 0xB4u:
    case 0xB5u:
    case 0xB6u:
    case 0xB7u:
    case 0xB8u:
    case 0xB9u:
    case 0xBEu:
    case 0xBFu:
    case 0xC0u:
    case 0xC1u:
    case 0xD4u:
      goto LABEL_5;
    default:
      if (v1 > 0x32 || ((1 << v1) & 0x7FFDFE0700000) == 0) {
LABEL_5:
      }
        uint64_t v0 = 0;
      break;
  }
  return v0;
}

uint64_t sub_10035213C()
{
  uint64_t v0 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v0 + 352))(v0))
  {
    unsigned int v1 = 1980;
    int v2 = -20;
  }
  else
  {
    uint64_t v3 = sub_100035F54();
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 360))(v3);
    if (!result) {
      return result;
    }
    unsigned int v1 = 1977;
    int v2 = -23;
  }
  return *(_DWORD *)(sub_10003FB34() + 712) + v2 < v1;
}

uint64_t sub_1003521E8()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result) {
    return (*(_DWORD *)(sub_10003FB34() + 712) - 22) < 0x7BA;
  }
  return result;
}

const char *sub_100352668(uint64_t a1, int a2)
{
  if (a2 > 1999)
  {
    if (a2 > 2001)
    {
      if (a2 == 2002)
      {
        return "APPLE_M2_5";
      }
      else if (a2 == 6000)
      {
        return "APPLE_VIRTUAL";
      }
      else
      {
        return "Unknown Chipset";
      }
    }
    else if (a2 == 2000)
    {
      return "APPLE_M1";
    }
    else
    {
      return "APPLE_M2";
    }
  }
  else
  {
    uint64_t result = "THIRD_PARTY_DONGLE";
    switch(a2)
    {
      case 0:
        return result;
      case 1:
        uint64_t result = "BCM_4350C2";
        break;
      case 2:
        uint64_t result = "BCM_20702A3";
        break;
      case 3:
        uint64_t result = "BCM_20702B0";
        break;
      case 4:
        uint64_t result = "BCM_4350";
        break;
      case 5:
        uint64_t result = "BCM_4350A0";
        break;
      case 6:
        uint64_t result = "BCM_4350C5";
        break;
      case 7:
        uint64_t result = "BCM_20703A1";
        break;
      case 8:
        uint64_t result = "BCM_20703A2";
        break;
      case 9:
        uint64_t result = "BCM_43430";
        break;
      case 10:
        uint64_t result = "BCM_43452";
        break;
      case 11:
        uint64_t result = "BCM_4355B3";
        break;
      case 12:
        uint64_t result = "BCM_4355C0";
        break;
      case 13:
        uint64_t result = "BCM_4355C1";
        break;
      case 14:
        uint64_t result = "BCM_4355";
        break;
      case 15:
        uint64_t result = "BCM_4357";
        break;
      case 16:
        uint64_t result = "BCM_4364";
        break;
      case 17:
        uint64_t result = "BCM_4364B0";
        break;
      case 18:
        uint64_t result = "BCM_4364B3";
        break;
      case 19:
        uint64_t result = "BCM_4377";
        break;
      case 20:
        uint64_t result = "BCM_4378";
        break;
      case 21:
        uint64_t result = "BCM_4378B3";
        break;
      case 22:
        uint64_t result = "BCM_4387";
        break;
      case 23:
        uint64_t result = "BCM_4388";
        break;
      case 24:
        uint64_t result = "BCM_4388C2";
        break;
      case 25:
        uint64_t result = "BCM_4399";
        break;
      default:
        return "Unknown Chipset";
    }
  }
  return result;
}

const char *sub_1003528A0(int a1)
{
  if (a1 > 1)
  {
    if (a1 != 2)
    {
      if (a1 == 240) {
        return "Advanced Sniff";
      }
      return "Unknown";
    }
    return "Sniff";
  }
  else
  {
    if (a1)
    {
      if (a1 == 1) {
        return "Reserved";
      }
      return "Unknown";
    }
    return "Active";
  }
}

uint64_t sub_100352900(uint64_t a1)
{
  uint64_t v2 = a1 + 373;
  unsigned int v3 = *(_DWORD *)(a1 + 712);
  uint64_t v4 = a1 + 168;
  bzero((void *)(a1 + 168), 0x220uLL);
  if (v3 - 1 <= 0x7CE)
  {
    *(_WORD *)(a1 + 171) = 257;
    *(unsigned char *)(a1 + 174) = 1;
    *(unsigned char *)(a1 + 176) = 1;
    *(_WORD *)(a1 + 178) = 257;
    *(unsigned char *)(a1 + 189) = 1;
    *(unsigned char *)(a1 + 193) = 1;
    *(unsigned char *)(a1 + 195) = 1;
    *(_WORD *)(v4 + 153) = 257;
    *(_WORD *)(a1 + 324) = 257;
    *(_WORD *)(v4 + 161) = 257;
    *(unsigned char *)(a1 + 335) = 1;
    *(_WORD *)(v4 + 169) = 257;
    *(_WORD *)(a1 + 198) = 257;
    *(unsigned char *)(a1 + 342) = 1;
    *(unsigned char *)(a1 + 293) = 1;
    *(unsigned char *)(a1 + 420) = 1;
    *(unsigned char *)(a1 + 319) = 1;
    *(_DWORD *)(v4 + 147) = 16843009;
    *(_DWORD *)(v4 + 199) = 16843009;
    *(_DWORD *)(a1 + 364) = 16843009;
    *(void *)uint64_t v2 = 0x101010101010101;
    *(unsigned char *)(a1 + 212) = (*(_DWORD *)(sub_10003FB34() + 712) - 19) < 0x7BD;
    *(unsigned char *)(a1 + 301) = (*(_DWORD *)(sub_10003FB34() + 712) - 20) < 0x7BC;
    *(unsigned char *)(a1 + 192) = 1;
    *(unsigned char *)(a1 + 332) = 1;
    *(_WORD *)(a1 + 205) = 257;
    *(_DWORD *)(a1 + 201) = 16843009;
    int v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 2160))(a1) ^ 1;
    if (v3 == 9) {
      LOBYTE(v5) = 0;
    }
    *(unsigned char *)(a1 + 341) = v5;
    *(unsigned char *)(a1 + 386) = 1;
    *(unsigned char *)(a1 + 175) = 1;
    *(unsigned char *)(a1 + 177) = 1;
    *(unsigned char *)(a1 + 183) = 1;
    *(_WORD *)(a1 + 181) = 257;
    *(unsigned char *)(a1 + 326) = 1;
    *(_WORD *)(a1 + 384) = 257;
    BOOL v8 = v3 != 1 && v3 != 11 && v3 != 16;
    *(_WORD *)(a1 + 169) = 257;
    *(unsigned char *)(a1 + 209) = v8;
    *(unsigned char *)(a1 + 336) = 1;
    *(unsigned char *)(a1 + 194) = 1;
    *(_WORD *)(a1 + 190) = 257;
    *(_WORD *)(a1 + 185) = 257;
    *(unsigned char *)(a1 + 338) = 1;
    *(unsigned char *)(a1 + 333) = 1;
    *(_WORD *)(a1 + 381) = 257;
    *(unsigned char *)(a1 + 200) = 1;
    unsigned int v9 = v3 - 6;
    if (v3 == 6)
    {
      int v10 = 0;
      int v11 = 0;
      *(unsigned char *)(a1 + 343) = 1;
      *(unsigned char *)(a1 + 207) = 1;
      *(unsigned char *)(a1 + 340) = 1;
      goto LABEL_82;
    }
    if (v3 >= 0xA)
    {
      *(unsigned char *)(a1 + 196) = 1;
      if (v3 == 10) {
        goto LABEL_81;
      }
      *(unsigned char *)(a1 + 180) = 1;
      *(unsigned char *)(a1 + 207) = 1;
      *(unsigned char *)(a1 + 340) = 1;
      *(unsigned char *)(a1 + 173) = 1;
      *(unsigned char *)(a1 + 219) = 1;
      *(unsigned char *)(a1 + 222) = 1;
    }
    if (v3 == 15)
    {
      int v10 = 0;
      int v11 = 0;
      *(_WORD *)(a1 + 319) = 256;
      *(_WORD *)(a1 + 187) = 257;
      *(unsigned char *)(a1 + 343) = 1;
      *(unsigned char *)(a1 + 213) = 1;
      *(unsigned char *)(a1 + 218) = 1;
      *(unsigned char *)(a1 + 339) = 1;
      *(unsigned char *)(a1 + 345) = 1;
      *(unsigned char *)(a1 + 208) = 1;
      *(unsigned char *)(a1 + 321) = 0;
      goto LABEL_82;
    }
    if (v3 != 9)
    {
LABEL_34:
      if (v3 < 0xC) {
        goto LABEL_81;
      }
      int v10 = 0;
      int v11 = 0;
      *(_WORD *)(a1 + 319) = 256;
      *(unsigned char *)(a1 + 321) = 0;
      if (v3 < 0x13) {
        goto LABEL_82;
      }
      *(_WORD *)(a1 + 260) = 257;
      *(unsigned char *)(a1 + 339) = 1;
      *(unsigned char *)(a1 + 345) = 1;
      *(unsigned char *)(a1 + 347) = 1;
      *(_DWORD *)(a1 + 224) = 16843009;
      *(_WORD *)(a1 + 228) = 257;
      if (v3 <= 0x14) {
        *(unsigned char *)(a1 + 188) = 1;
      }
      *(unsigned char *)(a1 + 344) = 1;
      *(unsigned char *)(a1 + 210) = 1;
      *(unsigned char *)(a1 + 416) = 1;
      *(_WORD *)(a1 + 327) = 257;
      *(unsigned char *)(a1 + 264) = 1;
      *(unsigned char *)(a1 + 272) = 1;
      *(unsigned char *)(a1 + 282) = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2320))(a1) != 0;
      *(_WORD *)(a1 + 273) = 257;
      *(unsigned char *)(a1 + 279) = 1;
      *(_WORD *)(a1 + 283) = 257;
      *(unsigned char *)(a1 + 285) = 1;
      *(_WORD *)(a1 + 387) = 257;
      *(unsigned char *)(a1 + 389) = 1;
      *(unsigned char *)(a1 + 392) = 1;
      *(unsigned char *)(a1 + 394) = 1;
      *(_WORD *)(a1 + 398) = 257;
      *(unsigned char *)(a1 + 400) = 1;
      *(_WORD *)(a1 + 371) = 257;
      *(_WORD *)(a1 + 256) = 257;
      *(unsigned char *)(a1 + 360) = 1;
      *(unsigned char *)(a1 + 208) = 1;
      *(unsigned char *)(a1 + 353) = 1;
      *(_DWORD *)(a1 + 349) = 16843009;
      *(_DWORD *)(v2 + 56) = 16843009;
      if (v3 == 19)
      {
        *(unsigned char *)(a1 + 263) = 1;
      }
      else if ((v3 & 0xFFFFFFFE) == 0x14)
      {
        goto LABEL_70;
      }
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        if (__p.__r_.__value_.__l.__size_ != 2)
        {
          operator delete(__p.__r_.__value_.__l.__data_);
          goto LABEL_72;
        }
        int v19 = *(unsigned __int16 *)__p.__r_.__value_.__l.__data_;
        operator delete(__p.__r_.__value_.__l.__data_);
        if (v19 != 12355)
        {
LABEL_72:
          if (v3 == 21)
          {
            int v20 = 0;
            int v10 = 1;
            *(unsigned char *)(a1 + 393) = 1;
            *(unsigned char *)(a1 + 265) = 1;
            *(unsigned char *)(a1 + 348) = 1;
            *(unsigned char *)(a1 + 240) = 1;
            int v21 = 1;
            int v11 = 1;
LABEL_85:
            *(unsigned char *)(a1 + 405) = 1;
            int v23 = v21;
LABEL_86:
            if (v3 >= 0x17)
            {
              *(unsigned char *)(a1 + 235) = 1;
              *(_DWORD *)(a1 + 231) = 16843009;
              *(_DWORD *)(a1 + 236) = 16842752;
              *(unsigned char *)(a1 + 243) = 1;
              *(_WORD *)(a1 + 241) = 257;
              *(unsigned char *)(a1 + 184) = 1;
              *(unsigned char *)(a1 + 334) = 1;
              *(unsigned char *)(a1 + 298) = 1;
              *(_WORD *)(a1 + 426) = 257;
              *(_WORD *)(a1 + 303) = 257;
              *(void *)(a1 + 247) = 0x101010101010101;
              *(unsigned char *)(a1 + 255) = 1;
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2736))(a1))
            {
              *(unsigned char *)(a1 + 412) = 1;
              *(_DWORD *)(a1 + 408) = 16843009;
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2752))(a1)) {
              *(_WORD *)(a1 + 413) = 257;
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2088))(a1)) {
              *(unsigned char *)(a1 + 436) = 1;
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2560))(a1)) {
              *(unsigned char *)(a1 + 434) = 1;
            }
            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2568))(a1)) {
              *(unsigned char *)(a1 + 407) = 1;
            }
            switch(v3)
            {
              case 6u:
                *(unsigned char *)(a1 + 208) = 1;
                if (v11) {
                  goto LABEL_138;
                }
                goto LABEL_151;
              case 0xAu:
                memset(&__p, 0, sizeof(__p));
                uint64_t v24 = sub_1003705E4();
                if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v24 + 64))(v24, &__p)) {
                  goto LABEL_126;
                }
                std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = __p.__r_.__value_.__l.__size_;
                }
                if (!size || sub_1003174A4((uint64_t *)&__p, "Bacchus", 0) == -1) {
                  goto LABEL_126;
                }
                unsigned int v26 = qword_100A19E50;
                if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_125;
                }
                *(_WORD *)buf = 0;
                CFDataRef v27 = "BCM_43452 that supports Wireless Splitter";
                goto LABEL_124;
              case 0xCu:
                memset(&__p, 0, sizeof(__p));
                uint64_t v28 = sub_1003705E4();
                if (!(*(unsigned int (**)(uint64_t, std::string *))(*(void *)v28 + 64))(v28, &__p))
                {
                  std::string::size_type v29 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v29 = __p.__r_.__value_.__l.__size_;
                  }
                  if (v29
                    && (sub_1003174A4((uint64_t *)&__p, "Joy", 0) != -1
                     || sub_1003174A4((uint64_t *)&__p, "Anger", 0) != -1
                     || sub_1003174A4((uint64_t *)&__p, "Fear", 0) != -1
                     || sub_1003174A4((uint64_t *)&__p, "Elsa", 0) != -1
                     || sub_1003174A4((uint64_t *)&__p, "Kristoff", 0) != -1
                     || sub_1003174A4((uint64_t *)&__p, "Olaf", 0) != -1
                     || sub_1003174A4((uint64_t *)&__p, "Sven", 0) != -1))
                  {
                    unsigned int v26 = qword_100A19E50;
                    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      CFDataRef v27 = "BCM_4355C0 that supports Wireless Splitter";
LABEL_124:
                      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v27, buf, 2u);
                    }
LABEL_125:
                    *(unsigned char *)(a1 + 271) = 1;
                  }
                }
LABEL_126:
                *(unsigned char *)(a1 + 208) = 1;
                goto LABEL_136;
              case 0xDu:
                memset(&__p, 0, sizeof(__p));
                uint64_t v30 = sub_1003705E4();
                if (!(*(unsigned int (**)(uint64_t, std::string *))(*(void *)v30 + 64))(v30, &__p))
                {
                  std::string::size_type v31 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
                  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v31 = __p.__r_.__value_.__l.__size_;
                  }
                  if (v31
                    && (sub_1003174A4((uint64_t *)&__p, "Figaro", 0) != -1
                     || sub_1003174A4((uint64_t *)&__p, "Rudder", 0) != -1))
                  {
                    uint64_t v32 = qword_100A19E50;
                    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "BCM_4355C1 that supports Wireless Splitter", buf, 2u);
                    }
                    *(unsigned char *)(a1 + 271) = 1;
                  }
                }
LABEL_136:
                if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
                  goto LABEL_137;
                }
                operator delete(__p.__r_.__value_.__l.__data_);
                if (!v11) {
                  goto LABEL_151;
                }
                goto LABEL_138;
              default:
                if (v3 < 0xF)
                {
LABEL_137:
                  if (!v11) {
                    goto LABEL_151;
                  }
                }
                else
                {
                  *(unsigned char *)(a1 + 256) = 1;
                  *(unsigned char *)(a1 + 271) = 1;
                  *(unsigned char *)(a1 + 294) = 1;
                  if (!v11) {
                    goto LABEL_151;
                  }
                }
LABEL_138:
                if ((v3 & 0xFFFFFFFE) == 0x14) {
                  goto LABEL_142;
                }
                (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
                int v33 = std::string::compare(&__p, "C2");
                if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__p.__r_.__value_.__l.__data_);
                }
                if ((v33 & 0x80000000) == 0 || v3 == 25 || v3 == 23) {
LABEL_142:
                }
                  *(_WORD *)(a1 + 401) = 257;
                uint64_t v34 = sub_100035F54();
                if ((*(unsigned int (**)(uint64_t))(*(void *)v34 + 408))(v34)) {
                  *(_WORD *)(a1 + 357) = 257;
                }
                *(unsigned char *)(a1 + 192) = 0;
                *(unsigned char *)(a1 + 323) = 1;
                *(unsigned char *)(a1 + 359) = 1;
                *(unsigned char *)(a1 + 396) = 1;
                *(unsigned char *)(a1 + 225) = 1;
                *(unsigned char *)(a1 + 272) = 1;
                *(unsigned char *)(a1 + 282) = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2320))(a1) != 0;
                *(_WORD *)(a1 + 273) = 257;
                if (v3 == 20)
                {
                  uint64_t v35 = sub_100035F54();
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v35 + 328))(v35)) {
                    *(unsigned char *)(a1 + 277) = 1;
                  }
                }
                *(unsigned char *)(a1 + 279) = 1;
                *(_WORD *)(a1 + 283) = 257;
                *(unsigned char *)(a1 + 285) = 1;
                *(unsigned char *)(a1 + 292) = 1;
                *(_WORD *)(a1 + 295) = 257;
                *(unsigned char *)(a1 + 299) = 1;
                *(unsigned char *)(a1 + 355) = 1;
                *(unsigned char *)(a1 + 305) = 1;
                *(unsigned char *)(a1 + 297) = 1;
                if (sub_100351F98())
                {
                  *(_WORD *)(a1 + 290) = 257;
                  *(_DWORD *)(a1 + 286) = 16843009;
                }
                *(unsigned char *)(a1 + 417) = 1;
LABEL_151:
                if (v20)
                {
                  *(unsigned char *)(a1 + 354) = 1;
                  *(unsigned char *)(a1 + 300) = 1;
                  *(unsigned char *)(a1 + 396) = 1;
                  *(unsigned char *)(a1 + 302) = 1;
                  *(unsigned char *)(a1 + 404) = 1;
                  *(unsigned char *)(a1 + 225) = 1;
                  *(unsigned char *)(a1 + 272) = 1;
                  *(unsigned char *)(a1 + 282) = (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2320))(a1) != 0;
                  *(_WORD *)(a1 + 273) = 257;
                  *(unsigned char *)(a1 + 277) = 1;
                  *(_WORD *)(a1 + 279) = 257;
                  *(unsigned char *)(a1 + 281) = 1;
                  *(_WORD *)(a1 + 283) = 257;
                  *(unsigned char *)(a1 + 285) = 1;
                  *(unsigned char *)(a1 + 397) = 1;
                  *(unsigned char *)(a1 + 363) = 1;
                  uint64_t v36 = sub_100035F54();
                  if ((*(unsigned int (**)(uint64_t))(*(void *)v36 + 328))(v36)) {
                    *(unsigned char *)(a1 + 278) = 1;
                  }
                }
                uint64_t v37 = sub_100035F54();
                if ((*(unsigned int (**)(uint64_t))(*(void *)v37 + 352))(v37))
                {
                  if (v9 < 0xF && ((0x6251u >> v9) & 1) != 0)
                  {
                    BOOL v41 = 1;
                  }
                  else
                  {
                    (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
                    int v38 = std::string::compare(&__p, "C2");
                    BOOL v41 = v3 == 23 || v38 >= 0 || v3 == 25;
                  }
                  if ((v3 > 0x14 || ((1 << v3) & 0x189440) == 0) && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (v41) {
                    *(unsigned char *)(a1 + 361) = 1;
                  }
                }
                uint64_t v42 = sub_100035F54();
                if ((v23 & (*(unsigned int (**)(uint64_t))(*(void *)v42 + 408))(v42)) == 1) {
                  *(unsigned char *)(a1 + 361) = 1;
                }
                *(unsigned char *)(a1 + 415) = 0;
                if (v10) {
                  *(unsigned char *)(a1 + 362) = 1;
                }
                if (v3 - 21 <= 4)
                {
                  *(_WORD *)(a1 + 267) = 257;
                  *(_WORD *)(a1 + 306) = 257;
                }
                if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2760))(a1)) {
                  *(_DWORD *)(a1 + 308) = 16843009;
                }
                break;
            }
            goto LABEL_181;
          }
          if (v3 >= 0x16)
          {
            *(unsigned char *)(a1 + 356) = 1;
            *(unsigned char *)(a1 + 393) = 1;
            *(unsigned char *)(a1 + 230) = 1;
            *(unsigned char *)(a1 + 424) = 1;
            *(unsigned char *)(a1 + 406) = 1;
            *(unsigned char *)(a1 + 403) = 1;
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            {
              if (__p.__r_.__value_.__l.__size_ == 2)
              {
                int v51 = *(unsigned __int16 *)__p.__r_.__value_.__l.__data_;
                operator delete(__p.__r_.__value_.__l.__data_);
                if (v51 == 12355) {
                  goto LABEL_204;
                }
              }
              else
              {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
            else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) == 2 && LOWORD(__p.__r_.__value_.__l.__data_) == 12355)
            {
              goto LABEL_204;
            }
            *(unsigned char *)(a1 + 423) = 1;
            *(unsigned char *)(a1 + 425) = 1;
LABEL_204:
            if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 3544))(a1)) {
              *(unsigned char *)(a1 + 395) = 1;
            }
            int v10 = 1;
            *(unsigned char *)(a1 + 265) = 1;
            if ((v3 & 0xFFFFFFFE) == 0x14) {
              goto LABEL_207;
            }
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
            int v53 = std::string::compare(&__p, "C2");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            if (v3 - 23 < 3 || (v53 & 0x80000000) == 0)
            {
LABEL_207:
              *(unsigned char *)(a1 + 348) = 1;
              *(unsigned char *)(a1 + 240) = 1;
            }
            int v11 = 1;
LABEL_82:
            (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)a1 + 16))(&__p, a1);
            int v22 = std::string::compare(&__p, "C2");
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            int v21 = 0;
            int v23 = 0;
            int v20 = v10;
            if (v22 < 0) {
              goto LABEL_86;
            }
            goto LABEL_85;
          }
          if (v3 == 20)
          {
            int v10 = 0;
            int v11 = 1;
            *(unsigned char *)(a1 + 348) = 1;
            *(unsigned char *)(a1 + 240) = 1;
            goto LABEL_82;
          }
LABEL_81:
          int v10 = 0;
          int v11 = 0;
          goto LABEL_82;
        }
      }
      else if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) != 2 || LOWORD(__p.__r_.__value_.__l.__data_) != 12355)
      {
        goto LABEL_72;
      }
LABEL_70:
      *(unsigned char *)(a1 + 353) = 0;
      goto LABEL_72;
    }
    memset(&__p, 0, sizeof(__p));
    uint64_t v12 = sub_1003705E4();
    if ((*(unsigned int (**)(uint64_t, std::string *))(*(void *)v12 + 64))(v12, &__p))
    {
LABEL_29:
      uint64_t v13 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "43430B0", buf, 2u);
      }
      *(_WORD *)(a1 + 368) = 0;
      *(unsigned char *)(a1 + 370) = 0;
      *(unsigned char *)(a1 + 341) = 0;
      *(unsigned char *)(a1 + 209) = 0;
      *(void *)uint64_t v2 = 0;
LABEL_32:
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      goto LABEL_34;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      int64_t v14 = __p.__r_.__value_.__l.__size_;
      if (!__p.__r_.__value_.__l.__size_) {
        goto LABEL_29;
      }
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    else
    {
      int64_t v14 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if (!*((unsigned char *)&__p.__r_.__value_.__s + 23)) {
        goto LABEL_29;
      }
      p_p = &__p;
    }
    if (v14 >= 2)
    {
      uint64_t v16 = (char *)p_p + v14;
      CFStringRef v17 = p_p;
      while (1)
      {
        CFTypeID v18 = (char *)memchr(v17, 66, v14 - 1);
        if (!v18) {
          break;
        }
        if (*(_WORD *)v18 == 12610)
        {
          if (v18 == v16 || v18 - (char *)p_p == -1) {
            goto LABEL_29;
          }
          long long v52 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "43430B1", buf, 2u);
          }
          *(unsigned char *)(a1 + 207) = 1;
          goto LABEL_32;
        }
        CFStringRef v17 = (std::string *)(v18 + 1);
        int64_t v14 = v16 - (char *)v17;
        if (v16 - (char *)v17 < 2) {
          goto LABEL_29;
        }
      }
    }
    goto LABEL_29;
  }
  if (v3 - 2000 <= 0x7CF)
  {
    *(unsigned char *)(a1 + 169) = 1;
    *(unsigned char *)(a1 + 176) = 1;
    *(unsigned char *)(a1 + 189) = 1;
    *(unsigned char *)(a1 + 197) = 1;
    *(unsigned char *)(a1 + 191) = 1;
    *(_WORD *)(a1 + 171) = 257;
    *(unsigned char *)(a1 + 209) = 1;
    *(unsigned char *)(a1 + 199) = 1;
    *(unsigned char *)(a1 + 180) = 1;
    *(unsigned char *)(a1 + 211) = 1;
    *(unsigned char *)(a1 + 220) = 1;
    *(unsigned char *)(a1 + 185) = 1;
    *(unsigned char *)(a1 + 259) = 1;
    *(unsigned char *)(a1 + 293) = 1;
    *(unsigned char *)(a1 + 317) = 1;
    *(unsigned char *)(a1 + 315) = 1;
    *(unsigned char *)(a1 + 329) = 1;
    *(unsigned char *)(a1 + 335) = 1;
    *(unsigned char *)(a1 + 325) = 1;
    *(unsigned char *)(a1 + 330) = 1;
    *(unsigned char *)(a1 + 342) = 1;
    *(unsigned char *)(a1 + 223) = 1;
    *(unsigned char *)(a1 + 346) = 1;
    *(unsigned char *)(a1 + 369) = 1;
    *(_WORD *)(a1 + 382) = 257;
    *(unsigned char *)(a1 + 256) = 1;
    *(unsigned char *)(a1 + 262) = 1;
    *(_WORD *)(a1 + 269) = 257;
    *(_DWORD *)(a1 + 214) = 16843009;
    *(_DWORD *)(a1 + 364) = 16843009;
    *(void *)uint64_t v2 = 0x101010101010101;
    if (v3 > 0x7D0)
    {
      *(unsigned char *)(a1 + 258) = 1;
      *(unsigned char *)(a1 + 322) = 1;
      *(unsigned char *)(a1 + 392) = 1;
      *(unsigned char *)(a1 + 394) = 1;
      *(unsigned char *)(a1 + 415) = 1;
      *(_DWORD *)(a1 + 224) = 16843009;
      *(_DWORD *)(v2 + 13) = 16843009;
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 3440))(a1)) {
        *(unsigned char *)(a1 + 418) = 1;
      }
      if (sub_100351F98())
      {
        *(unsigned char *)(a1 + 288) = 1;
        *(unsigned char *)(a1 + 291) = 1;
      }
      *(_WORD *)(a1 + 305) = 257;
      *(_WORD *)(a1 + 371) = 257;
      *(unsigned char *)(a1 + 396) = 1;
      *(_WORD *)(a1 + 421) = 257;
      *(unsigned char *)(a1 + 433) = 1;
      *(unsigned char *)(a1 + 428) = 1;
      *(unsigned char *)(a1 + 307) = 1;
      *(unsigned char *)(a1 + 406) = 1;
      *(unsigned char *)(a1 + 333) = 1;
      *(unsigned char *)(a1 + 351) = 1;
      *(unsigned char *)(a1 + 314) = 1;
      *(_WORD *)(a1 + 312) = 257;
      if (v3 >= 0x7D2)
      {
        *(unsigned char *)(a1 + 419) = 1;
        *(unsigned char *)(a1 + 439) = 1;
      }
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2312))(a1)) {
      *(_WORD *)(a1 + 272) = 257;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2312))(a1)
      || (*(unsigned int (**)(uint64_t))(*(void *)a1 + 2464))(a1))
    {
      *(unsigned char *)(a1 + 279) = 1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2464))(a1))
    {
      *(unsigned char *)(a1 + 285) = 1;
      *(unsigned char *)(a1 + 274) = 1;
      *(_WORD *)(a1 + 283) = 257;
      *(_WORD *)(a1 + 275) = 257;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2560))(a1)) {
      *(unsigned char *)(a1 + 434) = 1;
    }
    if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2568))(a1)) {
      *(unsigned char *)(a1 + 407) = 1;
    }
  }
LABEL_181:
  v43 = qword_100A19E50;
  BOOL v44 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v44)
  {
    CFTypeID v45 = sub_100352668(v44, v3);
    *(_DWORD *)buf = 136446210;
    CFTypeID v56 = v45;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "%{public}s supports the following VSCs", buf, 0xCu);
  }
  for (uint64_t i = 0; i != 272; ++i)
  {
    if (*(unsigned char *)(a1 + 168 + i))
    {
      int v47 = qword_100A19E50;
      BOOL v48 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO);
      if (v48)
      {
        uint64_t v49 = sub_10001AA04(v48, i);
        *(_DWORD *)buf = 136446210;
        CFTypeID v56 = v49;
        _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_INFO, "%{public}s", buf, 0xCu);
      }
    }
  }
  return 0;
}

void sub_100353D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100353D70(int *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 180);
  if (!(*(unsigned int (**)(int *, int *))(*(void *)a1 + 1216))(a1, a1 + 180))
  {
    uint64_t result = sub_1001F7D80(a1[178], v2);
    if (!result) {
      return result;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100758BB8();
    }
  }
  return 110;
}

uint64_t sub_100353E10()
{
  uint64_t result = sub_1000DDF28(sub_100353E78);
  if (result)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100758CC0();
    }
    return 110;
  }
  return result;
}

void sub_100353E78(uint64_t a1, uint64_t a2, char *a3)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A8780);
  }
  uint64_t v6 = off_1009F8068;

  sub_1004E297C((uint64_t)v6, a1, a2, a3);
}

uint64_t sub_100353EF4()
{
  uint64_t result = sub_1000DDF38(sub_100353F5C);
  if (result)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100758D28();
    }
    return 110;
  }
  return result;
}

void sub_100353F5C(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A8780);
  }
  uint64_t v2 = off_1009F8068;

  sub_1004E2824((uint64_t)v2, a1);
}

uint64_t sub_100353FC0(uint64_t a1, uint64_t a2)
{
  v4[1] = 0;
  uint64_t v5 = a2;
  v4[0] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 8);
  sub_100051620((uint64_t **)(a1 + 136), (unint64_t *)&v5, &v5);
  return sub_10003AFB4((uint64_t)v4);
}

void sub_100354014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100354028(uint64_t a1, unint64_t a2)
{
  v4[1] = 0;
  unint64_t v5 = a2;
  v4[0] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 8);
  sub_1000517A4(a1 + 136, &v5);
  return sub_10003AFB4((uint64_t)v4);
}

void sub_100354078(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10035408C(_DWORD *a1, uint64_t a2, int a3)
{
  if (a1[41] == a3) {
    return 0;
  }
  switch(a3)
  {
    case 1:
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 3664))(a1);
      if (!result) {
        goto LABEL_12;
      }
      break;
    case 2:
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 3656))(a1);
      if (!result) {
        goto LABEL_12;
      }
      break;
    case 3:
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 3672))(a1);
      if (!result) {
        goto LABEL_12;
      }
      break;
    case 4:
      uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 3680))(a1);
      if (!result) {
LABEL_12:
      }
        a1[41] = a3;
      break;
    default:
      uint64_t result = 1;
      break;
  }
  return result;
}

BOOL sub_1003541E8()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712) - 1;
  if (v0 >= 0xF9F && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_100758D90();
  }
  return v0 < 0x7CF;
}

uint64_t sub_100354254(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 256);
}

uint64_t sub_10035425C()
{
  return 2 * ((*(_DWORD *)(sub_10003FB34() + 712) - 19) < 0x7BD);
}

uint64_t sub_100354288()
{
  int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  unsigned int v1 = v0 - 19;
  if ((v0 - 2001) >= 0x7CF) {
    unsigned int v2 = 0;
  }
  else {
    unsigned int v2 = 3;
  }
  if (v0 == 19) {
    unsigned int v3 = 1;
  }
  else {
    unsigned int v3 = 4;
  }
  if (v1 <= 0x7BC) {
    return v3;
  }
  else {
    return v2;
  }
}

uint64_t sub_1003542CC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 257);
}

uint64_t sub_1003542D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 416);
}

uint64_t sub_1003542DC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 356);
}

BOOL sub_1003542E4()
{
  uint64_t v0 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v0 + 344))(v0)
    && (uint64_t v1 = sub_10003FB34(), ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 2368))(v1) & 1) != 0))
  {
    return 1;
  }
  else
  {
    return (*(_DWORD *)(sub_10003FB34() + 712) - 19) < 0x7BD;
  }
}

void sub_10035437C()
{
  if (qword_100A12440 != -1) {
    dispatch_once(&qword_100A12440, &stru_1009A78E8);
  }
  if (dword_1009FB380 == 3)
  {
    uint64_t v0 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "BT Sleep now", buf, 2u);
    }
    char v1 = 0;
    sub_10001B8E0(&v1);
    sub_100103D34();
    sub_10001B910(&v1);
    sub_10001B8AC(&v1);
  }
}

void sub_10035443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_100354450(id a1)
{
  dword_1009FB380 = sub_10016B718();
}

uint64_t sub_100354470(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100354500;
  block[3] = &unk_100997528;
  block[4] = a2;
  if (qword_100A12450 != -1) {
    dispatch_once(&qword_100A12450, block);
  }
  return byte_100A12448;
}

void sub_100354500(uint64_t a1)
{
  **(unsigned char **)(a1 + 32) = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "Device");
  sub_10004191C(__p, "GazeOnHeadOverride");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, void))(*(void *)v2 + 72))(v2, buf, __p, *(void *)(a1 + 32));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((v9 & 0x80000000) == 0)
  {
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)buf);
  if (v3) {
LABEL_5:
  }
    byte_100A12448 = 1;
LABEL_6:
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = **(unsigned __int8 **)(a1 + 32);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "gazeOverrideConfiguration is %d", buf, 8u);
  }
}

void sub_10035464C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100354688(uint64_t a1, uint64_t a2)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100354718;
  block[3] = &unk_100997528;
  block[4] = a2;
  if (qword_100A12460 != -1) {
    dispatch_once(&qword_100A12460, block);
  }
  return byte_100A12458;
}

void sub_100354718(uint64_t a1)
{
  **(unsigned char **)(a1 + 32) = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "Device");
  sub_10004191C(__p, "GazePresentOverride");
  int v3 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, void))(*(void *)v2 + 72))(v2, buf, __p, *(void *)(a1 + 32));
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if ((v9 & 0x80000000) == 0)
  {
    if (!v3) {
      goto LABEL_6;
    }
    goto LABEL_5;
  }
  operator delete(*(void **)buf);
  if (v3) {
LABEL_5:
  }
    byte_100A12458 = 1;
LABEL_6:
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = **(unsigned __int8 **)(a1 + 32);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "forceGazePresentOverride is %d", buf, 8u);
  }
}

void sub_100354864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003548A0(uint64_t a1)
{
  int v2 = sub_1003FAF7C() - 20;
  uint64_t result = 2;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 91:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 98:
    case 99:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 122:
    case 123:
    case 124:
    case 125:
    case 126:
    case 127:
    case 134:
    case 158:
    case 159:
    case 160:
    case 161:
    case 166:
    case 167:
    case 168:
    case 169:
    case 170:
    case 171:
    case 172:
    case 173:
    case 174:
    case 175:
    case 176:
    case 177:
    case 178:
    case 179:
    case 180:
    case 181:
    case 182:
    case 183:
    case 184:
    case 185:
    case 186:
    case 187:
    case 188:
    case 189:
    case 190:
    case 191:
    case 192:
    case 193:
    case 194:
    case 195:
    case 196:
    case 197:
      return result;
    default:
      uint64_t v4 = sub_100035F54();
      if ((*(uint64_t (**)(uint64_t))(*(void *)v4 + 344))(v4))
      {
        uint64_t result = 0;
      }
      else
      {
        uint64_t v5 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 384))(v5))
        {
          unsigned int v6 = *(_DWORD *)(a1 + 712);
          unsigned int v7 = v6 - 1;
          unsigned int v8 = 2 * (v6 > 0x14);
          if (v7 <= 0x7CE) {
            uint64_t result = v8;
          }
          else {
            uint64_t result = 0;
          }
        }
        else
        {
          uint64_t result = 1;
        }
      }
      break;
  }
  return result;
}

BOOL sub_100354CA4(uint64_t a1, unsigned int a2)
{
  unsigned int v2 = *(_DWORD *)(a1 + 712);
  if (!v2) {
    return 0;
  }
  if (a2 - 1 <= 0x7CE && v2 < 0x7D0) {
    return v2 >= a2;
  }
  if (v2 < 0x7D0) {
    return 0;
  }
  BOOL result = 0;
  if (a2 - 2000 <= 0x7CF && v2 <= 0xF9F) {
    return v2 >= a2;
  }
  return result;
}

uint64_t sub_100354CF8(int a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009A8780);
  }

  return sub_100026140(a1, 0xF7u);
}

uint64_t sub_100354D58(_DWORD *a1, char a2)
{
  if ((a1[178] - 2001) > 0x7CE) {
    return 0;
  }
  if ((*(unsigned int (**)(_DWORD *))(*(void *)a1 + 2640))(a1)) {
    a1[179] |= 1u;
  }
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100354E3C;
  v5[3] = &unk_1009A65D8;
  v5[4] = a1;
  char v6 = a2;
  return sub_10001A7D4((uint64_t)a1, 247, 1, v5, 0);
}

uint64_t sub_100354E3C()
{
  return sub_1001F9E68();
}

BOOL sub_100354E64()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 19) < 0x7BD;
}

uint64_t sub_100354E8C()
{
  int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  return ((v0 - 1) < 0x13) & (0x8B000u >> v0);
}

BOOL sub_100354EC4(uint64_t a1)
{
  return _os_feature_enabled_impl() && (*(_DWORD *)(a1 + 712) - 2001) < 0x7CF;
}

BOOL sub_100354F18(uint64_t a1, int a2)
{
  int v4 = _os_feature_enabled_impl();
  unsigned int v5 = *(_DWORD *)(a1 + 712);
  if (v4 && v5 - 2001 < 0x7CF) {
    return 1;
  }
  if (v5 - 1 > 0xF9E) {
    return 0;
  }
  switch(a2)
  {
    case 0:
    case 1:
      int v7 = *(unsigned __int8 *)(a1 + 382);
      goto LABEL_15;
    case 2:
    case 3:
    case 4:
      goto LABEL_8;
    case 5:
      goto LABEL_13;
    case 6:
      int v7 = *(unsigned __int8 *)(a1 + 407);
      goto LABEL_15;
    default:
      if (a2 != 100) {
        return 0;
      }
LABEL_8:
      if (v5 > 0x7CF)
      {
        if (v5 != 2000) {
          return 1;
        }
      }
      else if (v5 - 20 < 6)
      {
        return 1;
      }
LABEL_13:
      int v7 = *(unsigned __int8 *)(a1 + 403);
LABEL_15:
      BOOL result = v7 != 0;
      break;
  }
  return result;
}

void sub_100355010(uint64_t a1)
{
  sub_10031717C(a1);

  operator delete();
}

void *sub_100355048@<X0>(void *a1@<X8>)
{
  return sub_10004191C(a1, "");
}

uint64_t sub_100355058()
{
  return 0;
}

uint64_t sub_100355060()
{
  return 0;
}

uint64_t sub_100355068()
{
  return 0;
}

uint64_t sub_100355070()
{
  return 0;
}

uint64_t sub_100355078()
{
  return 0;
}

uint64_t sub_100355080()
{
  return 0;
}

uint64_t sub_100355088()
{
  return 0;
}

uint64_t sub_100355090()
{
  return 0;
}

uint64_t sub_100355098()
{
  return 0;
}

uint64_t sub_1003550A0()
{
  return 0;
}

uint64_t sub_1003550A8()
{
  return 0;
}

uint64_t sub_1003550B0()
{
  return 0;
}

uint64_t sub_1003550B8()
{
  return 0;
}

uint64_t sub_1003550C0()
{
  return 0;
}

uint64_t sub_1003550C8()
{
  return 0;
}

uint64_t sub_1003550D0()
{
  return 0;
}

uint64_t sub_1003550D8()
{
  return 0;
}

uint64_t sub_1003550E0()
{
  return 0;
}

uint64_t sub_1003550E8()
{
  return 0;
}

uint64_t sub_1003550F0(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_1003550FC()
{
  return 0;
}

uint64_t sub_100355104()
{
  return 0;
}

uint64_t sub_10035510C(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_100355118()
{
  return 0;
}

uint64_t sub_100355120()
{
  return 0;
}

uint64_t sub_100355128()
{
  return 0;
}

uint64_t sub_100355130()
{
  return 0;
}

uint64_t sub_100355138()
{
  return 2;
}

uint64_t sub_100355140()
{
  return 2;
}

uint64_t sub_100355148()
{
  return 2;
}

uint64_t sub_100355150()
{
  return 2;
}

uint64_t sub_100355158()
{
  return 2;
}

uint64_t sub_100355160()
{
  return 2;
}

uint64_t sub_100355168()
{
  return 2;
}

uint64_t sub_100355170()
{
  return 2;
}

uint64_t sub_100355178()
{
  return 2;
}

uint64_t sub_100355180()
{
  return 2;
}

uint64_t sub_100355188()
{
  return 2;
}

uint64_t sub_100355190()
{
  return 2;
}

uint64_t sub_100355198()
{
  return 2;
}

uint64_t sub_1003551A0()
{
  return 2;
}

uint64_t sub_1003551A8()
{
  return 2;
}

uint64_t sub_1003551B0()
{
  return 2;
}

uint64_t sub_1003551B8()
{
  return 2;
}

uint64_t sub_1003551C0()
{
  return 2;
}

uint64_t sub_1003551C8()
{
  return 2;
}

uint64_t sub_1003551D0()
{
  return 2;
}

uint64_t sub_1003551D8()
{
  return 2;
}

uint64_t sub_1003551E0()
{
  return 2;
}

uint64_t sub_1003551E8()
{
  return 2;
}

uint64_t sub_1003551F0()
{
  return 2;
}

uint64_t sub_1003551F8()
{
  return 2;
}

uint64_t sub_100355200()
{
  return 2;
}

uint64_t sub_100355208()
{
  return 2;
}

uint64_t sub_100355210()
{
  return 2;
}

uint64_t sub_100355218(uint64_t a1, unsigned char *a2)
{
  *a2 = 0;
  return 2;
}

uint64_t sub_100355224()
{
  return 2;
}

uint64_t sub_10035522C()
{
  return 2;
}

uint64_t sub_100355234()
{
  return 2;
}

uint64_t sub_10035523C()
{
  return 2;
}

uint64_t sub_100355244()
{
  return 2;
}

uint64_t sub_10035524C()
{
  return 2;
}

uint64_t sub_100355254()
{
  return 2;
}

uint64_t sub_10035525C()
{
  return 2;
}

uint64_t sub_100355264()
{
  return 2;
}

uint64_t sub_10035526C()
{
  return 2;
}

uint64_t sub_100355274()
{
  return 2;
}

uint64_t sub_10035527C()
{
  return 2;
}

uint64_t sub_100355284()
{
  return 2;
}

uint64_t sub_10035528C()
{
  return 2;
}

uint64_t sub_10035529C()
{
  return 2;
}

uint64_t sub_1003552A4()
{
  return 2;
}

uint64_t sub_1003552AC()
{
  return 2;
}

uint64_t sub_1003552B4()
{
  return 2;
}

uint64_t sub_1003552BC()
{
  return 2;
}

uint64_t sub_1003552C4()
{
  return 2;
}

uint64_t sub_1003552CC()
{
  return 2;
}

uint64_t sub_1003552D4()
{
  return 2;
}

uint64_t sub_1003552DC()
{
  return 2;
}

uint64_t sub_1003552E4()
{
  return 2;
}

uint64_t sub_1003552EC()
{
  return 2;
}

uint64_t sub_1003552F4()
{
  return 2;
}

uint64_t sub_1003552FC()
{
  return 2;
}

uint64_t sub_100355304()
{
  return 2;
}

uint64_t sub_10035530C()
{
  return 2;
}

uint64_t sub_100355314()
{
  return 2;
}

uint64_t sub_10035531C()
{
  return 2;
}

uint64_t sub_100355324()
{
  return 2;
}

uint64_t sub_10035532C()
{
  return 2;
}

uint64_t sub_100355334()
{
  return 2;
}

uint64_t sub_10035533C()
{
  return 2;
}

uint64_t sub_100355344()
{
  return 2;
}

uint64_t sub_10035534C()
{
  return 2;
}

uint64_t sub_100355354()
{
  return 2;
}

uint64_t sub_10035535C()
{
  return 2;
}

uint64_t sub_100355364()
{
  return 2;
}

uint64_t sub_10035536C()
{
  return 2;
}

uint64_t sub_100355374()
{
  return 2;
}

uint64_t sub_10035537C()
{
  return 2;
}

uint64_t sub_100355384()
{
  return 2;
}

uint64_t sub_10035538C()
{
  return 2;
}

uint64_t sub_100355394()
{
  return 2;
}

uint64_t sub_10035539C()
{
  return 2;
}

uint64_t sub_1003553A4()
{
  return 2;
}

uint64_t sub_1003553AC(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 2;
}

uint64_t sub_1003553B8()
{
  return 2;
}

uint64_t sub_1003553C0()
{
  return 2;
}

uint64_t sub_1003553C8()
{
  return 2;
}

uint64_t sub_1003553D0()
{
  return 2;
}

uint64_t sub_1003553D8()
{
  return 2;
}

uint64_t sub_1003553E0()
{
  return 2;
}

uint64_t sub_1003553E8()
{
  return 2;
}

uint64_t sub_1003553F0()
{
  return 2;
}

uint64_t sub_1003553F8()
{
  return 2;
}

uint64_t sub_100355400()
{
  return 2;
}

uint64_t sub_100355408()
{
  return 2;
}

uint64_t sub_100355410()
{
  return 2;
}

uint64_t sub_100355418()
{
  return 2;
}

uint64_t sub_100355420()
{
  return 2;
}

uint64_t sub_100355428()
{
  return 2;
}

uint64_t sub_100355430()
{
  return 2;
}

uint64_t sub_100355438()
{
  return 2;
}

uint64_t sub_100355440()
{
  return 2;
}

uint64_t sub_100355448()
{
  return 2;
}

uint64_t sub_100355450()
{
  return 2;
}

uint64_t sub_100355458()
{
  return 2;
}

uint64_t sub_100355460()
{
  return 2;
}

uint64_t sub_100355468()
{
  return 2;
}

uint64_t sub_100355470()
{
  return 2;
}

uint64_t sub_100355478()
{
  return 2;
}

uint64_t sub_100355480()
{
  return 2;
}

uint64_t sub_100355488()
{
  return 2;
}

uint64_t sub_100355490()
{
  return 2;
}

uint64_t sub_100355498()
{
  return 2;
}

uint64_t sub_1003554A0()
{
  return 2;
}

uint64_t sub_1003554A8()
{
  return 2;
}

uint64_t sub_1003554B0()
{
  return 2;
}

uint64_t sub_1003554B8()
{
  return 2;
}

uint64_t sub_1003554C0()
{
  return 2;
}

uint64_t sub_1003554C8()
{
  return 2;
}

uint64_t sub_1003554D0()
{
  return 2;
}

uint64_t sub_1003554D8()
{
  return 2;
}

uint64_t sub_1003554E0()
{
  return 2;
}

uint64_t sub_1003554E8()
{
  return 2;
}

uint64_t sub_1003554F0()
{
  return 2;
}

uint64_t sub_1003554F8()
{
  return 2;
}

uint64_t sub_100355500()
{
  return 2;
}

uint64_t sub_100355508()
{
  return 2;
}

uint64_t sub_100355510()
{
  return 2;
}

uint64_t sub_100355518()
{
  return 2;
}

uint64_t sub_100355520()
{
  return 2;
}

uint64_t sub_100355528()
{
  return 2;
}

uint64_t sub_100355530()
{
  return 2;
}

uint64_t sub_100355538()
{
  return 2;
}

uint64_t sub_100355540()
{
  return 2;
}

uint64_t sub_100355548()
{
  return 2;
}

uint64_t sub_100355550()
{
  return 2;
}

uint64_t sub_100355558()
{
  return 2;
}

uint64_t sub_100355560()
{
  return 2;
}

uint64_t sub_100355568()
{
  return 2;
}

uint64_t sub_100355570()
{
  return 2;
}

uint64_t sub_100355578()
{
  return 2;
}

uint64_t sub_100355580()
{
  return 2;
}

uint64_t sub_100355588()
{
  return 2;
}

uint64_t sub_100355590()
{
  return 2;
}

uint64_t sub_100355598()
{
  return 2;
}

uint64_t sub_1003555A0()
{
  return 2;
}

uint64_t sub_1003555A8()
{
  return 2;
}

uint64_t sub_1003555B0()
{
  return 2;
}

uint64_t sub_1003555B8()
{
  return 2;
}

uint64_t sub_1003555C0()
{
  return 2;
}

uint64_t sub_1003555C8()
{
  return 2;
}

uint64_t sub_1003555D0()
{
  return 2;
}

uint64_t sub_1003555D8()
{
  return 2;
}

uint64_t sub_1003555E0()
{
  return 2;
}

uint64_t sub_1003555E8()
{
  return 2;
}

uint64_t sub_1003555F0()
{
  return 2;
}

uint64_t sub_1003555F8()
{
  return 2;
}

uint64_t sub_100355600()
{
  return 2;
}

uint64_t sub_100355608()
{
  return 2;
}

uint64_t sub_100355610()
{
  return 2;
}

uint64_t sub_100355618()
{
  return 2;
}

uint64_t sub_100355620()
{
  return 2;
}

uint64_t sub_100355628()
{
  return 2;
}

uint64_t sub_100355630()
{
  return 2;
}

uint64_t sub_100355638()
{
  return 2;
}

uint64_t sub_100355640()
{
  return 2;
}

uint64_t sub_100355648()
{
  return 2;
}

uint64_t sub_100355650()
{
  return 2;
}

uint64_t sub_100355658()
{
  return 2;
}

uint64_t sub_100355660()
{
  return 2;
}

uint64_t sub_100355668()
{
  return 2;
}

uint64_t sub_100355670()
{
  return 2;
}

uint64_t sub_100355678()
{
  return 2;
}

uint64_t sub_100355680()
{
  return 2;
}

uint64_t sub_100355688()
{
  return 2;
}

uint64_t sub_100355690()
{
  return 2;
}

uint64_t sub_100355698()
{
  return 2;
}

uint64_t sub_1003556A0()
{
  return 2;
}

uint64_t sub_1003556A8()
{
  return 2;
}

uint64_t sub_1003556B0()
{
  return 2;
}

uint64_t sub_1003556B8()
{
  return 2;
}

uint64_t sub_1003556C0()
{
  return 2;
}

uint64_t sub_1003556C8()
{
  return 2;
}

uint64_t sub_1003556D0()
{
  return 2;
}

uint64_t sub_1003556D8()
{
  return 2;
}

uint64_t sub_1003556E0()
{
  return 2;
}

uint64_t sub_1003556E8()
{
  return 2;
}

uint64_t sub_1003556F0()
{
  return 2;
}

uint64_t sub_1003556F8()
{
  return 2;
}

uint64_t sub_100355700()
{
  return 2;
}

uint64_t sub_100355708()
{
  return 2;
}

uint64_t sub_100355710()
{
  return 2;
}

uint64_t sub_100355718()
{
  return 2;
}

uint64_t sub_100355720()
{
  return 2;
}

uint64_t sub_100355728()
{
  return 2;
}

uint64_t sub_100355730()
{
  return 2;
}

uint64_t sub_100355738()
{
  return 2;
}

uint64_t sub_100355740()
{
  return 0;
}

uint64_t sub_100355748()
{
  return 2;
}

uint64_t sub_100355760()
{
  return 0;
}

uint64_t sub_100355768()
{
  return 0;
}

uint64_t sub_100355770()
{
  return 0;
}

uint64_t sub_100355778()
{
  return 0;
}

uint64_t sub_100355780()
{
  return 0;
}

uint64_t sub_100355788()
{
  return 0;
}

uint64_t sub_100355790()
{
  return 0;
}

uint64_t sub_100355798()
{
  return 0;
}

uint64_t sub_1003557A0()
{
  return 0;
}

uint64_t sub_1003557A8()
{
  return 0;
}

uint64_t sub_1003557B0()
{
  return 0;
}

uint64_t sub_1003557B8()
{
  return 0;
}

uint64_t sub_1003557C0()
{
  return 0;
}

uint64_t sub_1003557C8()
{
  return 0;
}

uint64_t sub_1003557D0()
{
  return 0;
}

uint64_t sub_1003557D8()
{
  return 0;
}

uint64_t sub_1003557E0()
{
  return 0;
}

uint64_t sub_1003557E8()
{
  return 0;
}

uint64_t sub_1003557F0()
{
  return 0;
}

uint64_t sub_1003557F8()
{
  return 0;
}

uint64_t sub_100355800()
{
  return 0;
}

uint64_t sub_100355808()
{
  return 0;
}

uint64_t sub_100355810()
{
  return 0;
}

uint64_t sub_100355818()
{
  return 0;
}

uint64_t sub_100355820()
{
  return 0;
}

uint64_t sub_100355828()
{
  return 0;
}

uint64_t sub_100355830()
{
  return 0;
}

uint64_t sub_100355838()
{
  return 0;
}

uint64_t sub_100355840()
{
  return 0;
}

uint64_t sub_100355848()
{
  return 0;
}

uint64_t sub_100355850()
{
  return 0;
}

uint64_t sub_100355858()
{
  return 0;
}

uint64_t sub_100355860()
{
  return 0;
}

uint64_t sub_100355868()
{
  return 0;
}

uint64_t sub_100355870()
{
  return 0;
}

uint64_t sub_100355878()
{
  return 0;
}

uint64_t sub_100355880()
{
  return 0;
}

uint64_t sub_100355888()
{
  return 0;
}

uint64_t sub_100355890()
{
  return 0;
}

uint64_t sub_100355898()
{
  return 0;
}

uint64_t sub_1003558A0()
{
  return 0;
}

uint64_t sub_1003558A8()
{
  return 0;
}

uint64_t sub_1003558B0()
{
  return 0;
}

uint64_t sub_1003558B8()
{
  return 0;
}

uint64_t sub_1003558C0()
{
  return 0;
}

uint64_t sub_1003558C8()
{
  return 0;
}

uint64_t sub_1003558D0()
{
  return 0;
}

uint64_t sub_1003558D8()
{
  return 0;
}

uint64_t sub_1003558E0()
{
  return 0;
}

uint64_t sub_1003558E8()
{
  return 0;
}

uint64_t sub_1003558F0()
{
  return 0;
}

uint64_t sub_1003558F8()
{
  return 0;
}

uint64_t sub_100355900()
{
  return 0;
}

uint64_t sub_100355908()
{
  return 0;
}

uint64_t sub_100355910()
{
  return 0;
}

uint64_t sub_100355918()
{
  return 0;
}

uint64_t sub_100355920()
{
  return 0;
}

uint64_t sub_100355928()
{
  return 0;
}

uint64_t sub_100355930()
{
  return 0;
}

uint64_t sub_100355938()
{
  return 0;
}

uint64_t sub_100355940()
{
  return 0;
}

uint64_t sub_100355948()
{
  return 0;
}

uint64_t sub_100355950()
{
  return 0;
}

uint64_t sub_100355958()
{
  return 0;
}

uint64_t sub_100355960()
{
  return 0;
}

uint64_t sub_100355968()
{
  return 0;
}

uint64_t sub_100355970()
{
  return 0;
}

uint64_t sub_100355978()
{
  return 0;
}

uint64_t sub_100355980()
{
  return 0;
}

uint64_t sub_100355988()
{
  return 0;
}

uint64_t sub_100355990()
{
  return 0;
}

uint64_t sub_100355998()
{
  return 0;
}

uint64_t sub_1003559A0()
{
  return 0;
}

uint64_t sub_1003559A8()
{
  return 0;
}

uint64_t sub_1003559B0()
{
  return 0;
}

uint64_t sub_1003559B8()
{
  return 0;
}

uint64_t sub_1003559C0()
{
  return 0;
}

uint64_t sub_1003559C8()
{
  return 0;
}

uint64_t sub_1003559D0()
{
  return 0;
}

uint64_t sub_1003559D8()
{
  return 48;
}

uint64_t sub_1003559E0()
{
  return 0;
}

uint64_t sub_1003559E8()
{
  return 0;
}

uint64_t sub_1003559F0()
{
  return 0;
}

uint64_t sub_1003559F8()
{
  return 0;
}

uint64_t sub_100355A00()
{
  return 0;
}

uint64_t sub_100355A08()
{
  return 0;
}

uint64_t sub_100355A10()
{
  return 0;
}

uint64_t sub_100355A18()
{
  return 0;
}

uint64_t sub_100355A20()
{
  return 0;
}

uint64_t sub_100355A28()
{
  return 0;
}

uint64_t sub_100355A30()
{
  return 0;
}

uint64_t sub_100355A38()
{
  return 0;
}

uint64_t sub_100355A40()
{
  return 0;
}

uint64_t sub_100355A48()
{
  return 0;
}

uint64_t sub_100355A50()
{
  return 0;
}

uint64_t sub_100355A58()
{
  return 0;
}

uint64_t sub_100355A60()
{
  return 0;
}

uint64_t sub_100355A68()
{
  return 0;
}

uint64_t sub_100355A70()
{
  return 2;
}

uint64_t sub_100355A78()
{
  return 2;
}

uint64_t sub_100355A80()
{
  return 2;
}

uint64_t sub_100355A88()
{
  return 2;
}

uint64_t sub_100355A90()
{
  return 2;
}

uint64_t sub_100355A98()
{
  return 2;
}

uint64_t sub_100355AA0()
{
  return 2;
}

uint64_t sub_100355AA8()
{
  return 2;
}

uint64_t sub_100355AB0()
{
  return 2;
}

uint64_t sub_100355AB8()
{
  return 2;
}

uint64_t sub_100355AC0()
{
  return 2;
}

uint64_t sub_100355AC8()
{
  return 2;
}

uint64_t sub_100355AD0()
{
  return 2;
}

uint64_t sub_100355AD8()
{
  return 2;
}

uint64_t sub_100355AE0()
{
  return 2;
}

uint64_t sub_100355AE8()
{
  return 2;
}

uint64_t sub_100355AF0()
{
  return 2;
}

uint64_t sub_100355AF8()
{
  return 2;
}

uint64_t sub_100355B00()
{
  return 2;
}

uint64_t sub_100355B08()
{
  return 2;
}

uint64_t sub_100355B10()
{
  return 2;
}

uint64_t sub_100355B18()
{
  return 2;
}

uint64_t sub_100355B20()
{
  return 2;
}

uint64_t sub_100355B28()
{
  return 2;
}

uint64_t sub_100355B30()
{
  return 2;
}

uint64_t sub_100355B38()
{
  return 2;
}

uint64_t sub_100355B40()
{
  return 2;
}

uint64_t sub_100355B48()
{
  return 2;
}

uint64_t sub_100355B50(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 712) = a2;
  return 0;
}

uint64_t sub_100355B5C()
{
  return 2;
}

uint64_t sub_100355B64()
{
  return 2;
}

uint64_t sub_100355B6C()
{
  return 2;
}

uint64_t sub_100355B74()
{
  return 2;
}

uint64_t sub_100355B7C()
{
  return 2;
}

uint64_t sub_100355B84()
{
  return 2;
}

uint64_t sub_100355B8C()
{
  return 2;
}

uint64_t sub_100355B94()
{
  return 2;
}

uint64_t sub_100355B9C()
{
  return 2;
}

uint64_t sub_100355BA4()
{
  return 2;
}

uint64_t sub_100355BAC()
{
  return 2;
}

uint64_t sub_100355BB4()
{
  return 2;
}

uint64_t sub_100355BBC()
{
  return 2;
}

uint64_t sub_100355BC4()
{
  return 2;
}

uint64_t sub_100355BCC()
{
  return 2;
}

uint64_t sub_100355BD4()
{
  return 2;
}

uint64_t sub_100355BDC()
{
  return 2;
}

uint64_t sub_100355BE4()
{
  return 2;
}

uint64_t sub_100355BEC()
{
  return 2;
}

uint64_t sub_100355BF4()
{
  return 2;
}

uint64_t sub_100355BFC()
{
  return 2;
}

uint64_t sub_100355C04()
{
  return 2;
}

uint64_t sub_100355C0C()
{
  return 2;
}

uint64_t sub_100355C14()
{
  return 2;
}

uint64_t sub_100355C1C()
{
  return 2;
}

uint64_t sub_100355C24()
{
  return 2;
}

uint64_t sub_100355C2C()
{
  return 2;
}

uint64_t sub_100355C34()
{
  return 2;
}

uint64_t sub_100355C3C()
{
  return 2;
}

uint64_t sub_100355C44()
{
  return 2;
}

uint64_t sub_100355C4C()
{
  return 2;
}

uint64_t sub_100355C54()
{
  return 2;
}

uint64_t sub_100355C5C()
{
  return 2;
}

uint64_t sub_100355C6C()
{
  return 2;
}

uint64_t sub_100355C74()
{
  return 0;
}

uint64_t sub_100355C7C()
{
  return 0;
}

uint64_t sub_100355C84()
{
  return 2;
}

uint64_t sub_100355C8C()
{
  return 2;
}

uint64_t sub_100355C94()
{
  return 2;
}

uint64_t sub_100355C9C()
{
  return 2;
}

uint64_t sub_100355CA4()
{
  return 2;
}

uint64_t sub_100355CAC()
{
  return 2;
}

uint64_t sub_100355CB4()
{
  return 2;
}

uint64_t sub_100355CBC()
{
  return 2;
}

uint64_t sub_100355CC4()
{
  return 2;
}

uint64_t sub_100355CCC()
{
  return 2;
}

uint64_t sub_100355CD4()
{
  return 0;
}

uint64_t sub_100355CDC()
{
  return 2;
}

uint64_t sub_100355CE4()
{
  return 2;
}

uint64_t sub_100355CEC()
{
  return 2;
}

uint64_t sub_100355CF4()
{
  return 0;
}

uint64_t sub_100355CFC()
{
  return 0;
}

uint64_t sub_100355D04()
{
  return 0;
}

uint64_t sub_100355D0C()
{
  return 0;
}

uint64_t sub_100355D14()
{
  return 0;
}

uint64_t sub_100355D1C()
{
  return 0;
}

uint64_t sub_100355D24()
{
  return 0;
}

uint64_t sub_100355D2C()
{
  return 8;
}

uint64_t sub_100355D34()
{
  return 0;
}

uint64_t sub_100355D3C()
{
  return 2;
}

uint64_t sub_100355D44()
{
  return 0;
}

uint64_t sub_100355D4C()
{
  return 0;
}

uint64_t sub_100355D54()
{
  return 0;
}

uint64_t sub_100355D5C()
{
  return 2;
}

uint64_t sub_100355D64()
{
  return 2;
}

uint64_t sub_100355D6C()
{
  return 2;
}

uint64_t sub_100355D74()
{
  return 2;
}

uint64_t sub_100355D7C()
{
  return 2;
}

uint64_t sub_100355D84()
{
  return 2;
}

uint64_t sub_100355D8C()
{
  return 2;
}

uint64_t sub_100355D94()
{
  return 2;
}

uint64_t sub_100355D9C()
{
  return 2;
}

uint64_t sub_100355DA4()
{
  return 0;
}

uint64_t sub_100355DAC()
{
  return 0;
}

uint64_t sub_100355DB4()
{
  return 0;
}

uint64_t sub_100355DBC()
{
  return 0;
}

void sub_100355DC4(id a1)
{
}

void sub_100355E08()
{
}

void *sub_100355E2C(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  sub_100052DA8(a1 + 2);
  return a1;
}

uint64_t sub_100355E5C(uint64_t a1)
{
  v10[0] = 0;
  v10[1] = 0;
  sub_10003AED0((uint64_t)v10, a1 + 16);
  unsigned int v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_time_t v3 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v2, v3, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
  }
  else
  {
    global_queue = dispatch_get_global_queue(0, 0);
    unsigned int v5 = dispatch_source_create((dispatch_source_type_t)&_dispatch_source_type_timer, 0, 0, global_queue);
    *(void *)(a1 + 8) = v5;
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100355F84;
    handler[3] = &unk_100997528;
    handler[4] = a1;
    dispatch_source_set_event_handler(v5, handler);
    char v6 = *(NSObject **)(a1 + 8);
    dispatch_time_t v7 = dispatch_time(0, 10000000000);
    dispatch_source_set_timer(v6, v7, 0xFFFFFFFFFFFFFFFFLL, 0x3B9ACA00uLL);
    dispatch_resume(*(dispatch_object_t *)(a1 + 8));
  }
  return sub_10003AFB4((uint64_t)v10);
}

uint64_t sub_100355F84(uint64_t a1)
{
  return sub_100355F8C(*(void *)(a1 + 32));
}

uint64_t sub_100355F8C(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 16);
  if (*(void *)a1)
  {
    sqlite3_close(*(sqlite3 **)a1);
    *(void *)a1 = 0;
    unsigned int v2 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)unsigned int v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Closed device database", v5, 2u);
    }
  }
  dispatch_time_t v3 = *(NSObject **)(a1 + 8);
  if (v3)
  {
    dispatch_source_cancel(v3);
    dispatch_release(*(dispatch_object_t *)(a1 + 8));
    *(void *)(a1 + 8) = 0;
  }
  return sub_10003AFB4((uint64_t)v6);
}

void sub_100356038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10035604C(uint64_t a1@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  sub_10004191C(__p, "/Library/Application Support/BTServer/pincode_defaults.db");
  if (qword_1009FB288 != -1) {
    dispatch_once(&qword_1009FB288, &stru_1009A8C68);
  }
  uint64_t v2 = sub_10030D7C4(qword_1009FB280, 1);
  if (v2)
  {
    v14[0] = 0;
    v14[1] = 0;
    uint64_t v15 = 0;
    sub_100503538(v2, (uint64_t)v14);
    dispatch_time_t v3 = (void *)HIBYTE(v15);
    char v4 = HIBYTE(v15);
    if (v15 < 0) {
      dispatch_time_t v3 = v14[1];
    }
    if (v3)
    {
      *(_OWORD *)a1 = *(_OWORD *)v14;
      uint64_t v5 = v15;
LABEL_12:
      *(void *)(a1 + 16) = v5;
      goto LABEL_13;
    }
    if (SHIBYTE(v17) < 0)
    {
      sub_10003B098((unsigned char *)a1, __p[0], (unint64_t)__p[1]);
      if ((v15 & 0x8000000000000000) == 0) {
        goto LABEL_13;
      }
    }
    else
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      *(void *)(a1 + 16) = v17;
      if ((v4 & 0x80) == 0) {
        goto LABEL_13;
      }
    }
    operator delete(v14[0]);
  }
  else
  {
    char v6 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
      sub_100758DF8(v6, v7, v8, v9, v10, v11, v12, v13);
    }
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
      *(_OWORD *)a1 = *(_OWORD *)__p;
      uint64_t v5 = v17;
      goto LABEL_12;
    }
    sub_10003B098((unsigned char *)a1, __p[0], (unint64_t)__p[1]);
  }
LABEL_13:
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003561A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003561D8(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  dispatch_time_t v3 = a2;
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2;
  }
  else {
    uint64_t v5 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  int v6 = (char)a3[23];
  if (v6 >= 0) {
    uint64_t v7 = a3;
  }
  else {
    uint64_t v7 = *(unsigned __int8 **)a3;
  }
  if (v6 >= 0) {
    uint64_t v8 = a3[23];
  }
  else {
    uint64_t v8 = *((void *)a3 + 1);
  }
  if (v8)
  {
    uint64_t v9 = &v5[v4];
    if (v4 < v8 || (uint64_t v10 = (uint64_t)&v9[-v8 + 1], (unsigned __int8 *)v10 == v5))
    {
LABEL_20:
      uint64_t v5 = v9;
    }
    else
    {
      while (1)
      {
        __darwin_ct_rune_t v11 = *v7;
        __darwin_ct_rune_t v12 = __toupper(*v5);
        if (v12 == __toupper(v11)) {
          break;
        }
LABEL_19:
        if (++v5 == (unsigned __int8 *)v10) {
          goto LABEL_20;
        }
      }
      uint64_t v13 = 1;
      while (v8 != v13)
      {
        __darwin_ct_rune_t v14 = v7[v13];
        __darwin_ct_rune_t v15 = __toupper(v5[v13++]);
        if (v15 != __toupper(v14)) {
          goto LABEL_19;
        }
      }
    }
  }
  if ((char)v3[23] < 0)
  {
    uint64_t v17 = v3;
    dispatch_time_t v3 = *(unsigned __int8 **)v3;
    uint64_t v16 = *((void *)v17 + 1);
  }
  else
  {
    uint64_t v16 = v3[23];
  }
  if (&v3[v16] == v5) {
    return -1;
  }
  else {
    return v5 - v3;
  }
}

void sub_1003562F4(const std::string *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  long long v24 = 0uLL;
  uint64_t v25 = 0;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  long long v7 = 0u;
  sub_100356530((void (__cdecl ***)(std::istringstream *__hidden))&v7, a1, 8);
  while (1)
  {
    dispatch_time_t v3 = (void *)sub_1003566B4((uint64_t)&v7);
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
      break;
    }
    unint64_t v4 = *(void *)(a2 + 8);
    if (v4 >= *(void *)(a2 + 16))
    {
      int v6 = sub_1002B42D4((char **)a2, &v24);
    }
    else
    {
      if (SHIBYTE(v25) < 0)
      {
        sub_10003B098(*(unsigned char **)(a2 + 8), (void *)v24, *((unint64_t *)&v24 + 1));
      }
      else
      {
        long long v5 = v24;
        *(void *)(v4 + 16) = v25;
        *(_OWORD *)unint64_t v4 = v5;
      }
      int v6 = (char *)(v4 + 24);
      *(void *)(a2 + 8) = v4 + 24;
    }
    *(void *)(a2 + 8) = v6;
  }
  if (SBYTE7(v13) < 0) {
    operator delete(__p[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v25) < 0) {
    operator delete((void *)v24);
  }
}

void sub_1003564EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void (__cdecl ***sub_100356530(void (__cdecl ***a1)(std::istringstream *__hidden this), const std::string *a2, int a3))(std::istringstream *__hidden this)
{
  uint64_t v6 = (uint64_t)(a1 + 2);
  *a1 = v8;
  *(void *)((char *)*(v8 - 3) + (void)a1) = v7;
  a1[1] = 0;
  long long v9 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v9, a1 + 2);
  v9[1].__vftable = 0;
  v9[1].__fmtflags_ = -1;
  sub_100358FC4(v6, a2, a3 | 8);
  return a1;
}

void sub_10035668C(_Unwind_Exception *a1)
{
}

uint64_t sub_1003566B4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100356814(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

sqlite3_stmt *sub_100356918(sqlite3 **a1, const std::string::value_type *a2)
{
  if (!*a1)
  {
    unint64_t v4 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
      sub_100758EA8(v4, v5, v6, v7, v8, v9, v10, v11);
    }
  }
  memset(&v19, 0, sizeof(v19));
  sub_10004191C(&v19, "SELECT ");
  unint64_t v12 = 0;
  long long v13 = "devices.id";
  do
  {
    std::string::append(&v19, v13);
    if (v12 <= 7) {
      std::string::append(&v19, ", ");
    }
    ++v12;
    v13 += 136;
  }
  while (v12 != 9);
  std::string::append(&v19, a2);
  long long v18 = 0;
  if ((v19.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    long long v14 = &v19;
  }
  else {
    long long v14 = (std::string *)v19.__r_.__value_.__r.__words[0];
  }
  if (sqlite3_prepare(*a1, (const char *)v14, -1, &v18, 0)
    && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
  {
    long long v15 = sqlite3_errmsg(*a1);
    sub_100758E70((uint64_t)v15, (uint64_t)v20);
  }
  long long v16 = v18;
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  return v16;
}

void sub_100356A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

sqlite3_stmt *sub_100356ABC(sqlite3 **a1)
{
  if (!*a1)
  {
    uint64_t v2 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
      sub_100758EA8(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  sub_10004191C(__p, "SELECT makes.name, makes.common_abbreviation, makes.make_name_match_BOOLean_modifiers FROM makes WHERE makes.name IS NOT NULL");
  long long v14 = 0;
  if (v16 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (sqlite3_prepare(*a1, (const char *)v10, -1, &v14, 0)
    && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = sqlite3_errmsg(*a1);
    sub_100758E70((uint64_t)v11, (uint64_t)v17);
  }
  unint64_t v12 = v14;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_100356BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

sqlite3_stmt *sub_100356BF4(sqlite3 **a1)
{
  if (!*a1)
  {
    uint64_t v2 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
      sub_100758EA8(v2, v3, v4, v5, v6, v7, v8, v9);
    }
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  sub_10004191C(__p, "SELECT makeGroups.make_group_name, makeGroups.make_group_friendly_names FROM makeGroups WHERE makeGroups.make_group_friendly_names IS NOT NULL");
  long long v14 = 0;
  if (v16 >= 0) {
    uint64_t v10 = __p;
  }
  else {
    uint64_t v10 = (void **)__p[0];
  }
  if (sqlite3_prepare(*a1, (const char *)v10, -1, &v14, 0)
    && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = sqlite3_errmsg(*a1);
    sub_100758E70((uint64_t)v11, (uint64_t)v17);
  }
  unint64_t v12 = v14;
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  return v12;
}

void sub_100356D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100356D2C(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3)
{
  if (!*a1)
  {
    uint64_t v5 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
      sub_100758EA8(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  uint64_t v13 = 0;
  while (1)
  {
    while (1)
    {
      int v14 = sqlite3_step(a2);
      if (v14 != 100) {
        break;
      }
      if (v13)
      {
        long long v15 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
        {
          int v16 = sqlite3_column_int(a2, 0);
          *(_DWORD *)buf = 67109376;
          int v26 = v13;
          __int16 v27 = 1024;
          int v28 = v16;
          _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Device database returned more than one row (%d and %d) - db is corrupt", buf, 0xEu);
        }
      }
      else
      {
        uint64_t v13 = sqlite3_column_int(a2, 0);
        if (sqlite3_column_count(a2) >= 2)
        {
          int v17 = 1;
          do
          {
            long long v18 = sqlite3_column_name(a2, v17);
            std::string v19 = sqlite3_column_text(a2, v17);
            if (v18)
            {
              long long v20 = v19;
              if (v19)
              {
                uint64_t v21 = 0;
                while (strcmp(v18, &aDevicesId[v21 + 200]))
                {
                  v21 += 136;
                  if (v21 == 1088) {
                    goto LABEL_22;
                  }
                }
                (*(void (**)(uint64_t, const unsigned __int8 *))&aDevicesId[v21 + 264])(a3, v20);
              }
            }
LABEL_22:
            ++v17;
          }
          while (v17 < sqlite3_column_count(a2));
        }
      }
    }
    if (v14 == 1 || v14 == 21) {
      break;
    }
    if (v14 == 101) {
      return v13;
    }
  }
  long long v22 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_100758F20(a1, v22);
  }
  return v13;
}

BOOL sub_100356F60(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  sub_100475F84(a4, (uint64_t)&v81);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = v81.__r_.__value_.__l.__size_;
    operator delete(v81.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_3;
    }
  }
  else if (*((unsigned char *)&v81.__r_.__value_.__s + 23))
  {
LABEL_3:
    if (!*a1)
    {
      uint64_t v5 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
        sub_100758EA8(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }
    v67 = (std::string *)(a3 + 88);
    while (1)
    {
      while (1)
      {
        int v13 = sqlite3_step(a2);
        if (v13 > 20) {
          break;
        }
        if (v13 != 5)
        {
          if (v13 == 1) {
            goto LABEL_115;
          }
          goto LABEL_117;
        }
      }
      if (v13 != 100) {
        break;
      }
      if (sqlite3_column_count(a2) >= 1)
      {
        int v14 = 0;
        LOBYTE(v15) = 0;
        LOBYTE(v16) = 0;
        char v17 = 0;
        long long v18 = 0;
        __s = 0;
        do
        {
          std::string v19 = sqlite3_column_name(a2, v14);
          long long v20 = sqlite3_column_text(a2, v14);
          if (v19)
          {
            uint64_t v21 = (const char *)v20;
            if (!strcmp(v19, "name"))
            {
              __s = (std::string::value_type *)v21;
            }
            else if (!strcmp(v19, "common_abbreviation"))
            {
              long long v18 = (char *)v21;
            }
            else if (!strcmp(v19, "make_name_match_BOOLean_modifiers"))
            {
              unint64_t v22 = atol(v21);
              char v17 = v22 & 1;
              uint64_t v16 = (v22 >> 1) & 1;
              uint64_t v15 = (v22 >> 2) & 1;
            }
          }
          ++v14;
        }
        while (v14 < sqlite3_column_count(a2));
        if (__s)
        {
          memset(&v76, 0, sizeof(v76));
          if (v16) {
            std::string::assign(&v76, " ");
          }
          std::string::append(&v76, __s);
          if (v15) {
            std::string::append(&v76, " ");
          }
          if (v17)
          {
            sub_100475F84(a4, (uint64_t)&v81);
            char v23 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
            long long v24 = (void *)v81.__r_.__value_.__r.__words[0];
            if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v25 = &v81;
            }
            else {
              uint64_t v25 = (std::string *)v81.__r_.__value_.__r.__words[0];
            }
            if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int v26 = &v76;
            }
            else {
              int v26 = (std::string *)v76.__r_.__value_.__r.__words[0];
            }
            if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              int64_t v27 = HIBYTE(v76.__r_.__value_.__r.__words[2]);
            }
            else {
              int64_t v27 = v76.__r_.__value_.__l.__size_;
            }
            if (v27)
            {
              if ((v81.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int64_t v28 = HIBYTE(v81.__r_.__value_.__r.__words[2]);
              }
              else {
                int64_t v28 = v81.__r_.__value_.__l.__size_;
              }
              if (v28 >= v27)
              {
                std::string __p = (void *)v81.__r_.__value_.__r.__words[0];
                uint64_t v32 = (char *)v25 + v28;
                int v33 = v26->__r_.__value_.__s.__data_[0];
                uint64_t v34 = v25;
                do
                {
                  int64_t v35 = v28 - v27;
                  if (v35 == -1) {
                    break;
                  }
                  uint64_t v36 = (char *)memchr(v34, v33, v35 + 1);
                  if (!v36) {
                    break;
                  }
                  uint64_t v37 = v36;
                  if (!memcmp(v36, v26, v27)) {
                    goto LABEL_53;
                  }
                  uint64_t v34 = (std::string *)(v37 + 1);
                  int64_t v28 = v32 - (v37 + 1);
                }
                while (v28 >= v27);
                uint64_t v37 = v32;
LABEL_53:
                BOOL v29 = v37 != v32 && v37 - (char *)v25 != -1;
                long long v24 = __p;
              }
              else
              {
                BOOL v29 = 0;
              }
            }
            else
            {
              BOOL v29 = 1;
            }
            if (v23 < 0) {
              operator delete(v24);
            }
            if (v29)
            {
              sub_10004191C(&v81, __s);
              std::string::operator=(v67, &v81);
              *(unsigned char *)(a3 + 80) = 1;
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v81.__r_.__value_.__l.__data_);
              }
              v61 = qword_100A19EB8;
              if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEBUG))
              {
                sub_100475F84(a4, (uint64_t)&__str);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_str = &__str;
                }
                else {
                  p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                v63 = &v76;
                if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v63 = (std::string *)v76.__r_.__value_.__r.__words[0];
                }
                LODWORD(v81.__r_.__value_.__l.__data_) = 136446722;
                *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_str;
                WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v63;
                HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                int v82 = 1;
                goto LABEL_139;
              }
              goto LABEL_111;
            }
          }
          else
          {
            uint64_t v30 = sub_100475F84(a4, (uint64_t)&v81);
            uint64_t v31 = sub_1003561D8(v30, (unsigned __int8 *)&v81, (unsigned __int8 *)&v76);
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            if (v31 != -1)
            {
              sub_10004191C(&v81, __s);
              std::string::operator=(v67, &v81);
              *(unsigned char *)(a3 + 80) = 1;
              if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v81.__r_.__value_.__l.__data_);
              }
              v61 = qword_100A19EB8;
              if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEBUG))
              {
                sub_100475F84(a4, (uint64_t)&__str);
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  v64 = &__str;
                }
                else {
                  v64 = (std::string *)__str.__r_.__value_.__r.__words[0];
                }
                v65 = &v76;
                if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  v65 = (std::string *)v76.__r_.__value_.__r.__words[0];
                }
                LODWORD(v81.__r_.__value_.__l.__data_) = 136446722;
                *(std::string::size_type *)((char *)v81.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
                WORD2(v81.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&v81.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v65;
                HIWORD(v81.__r_.__value_.__r.__words[2]) = 1024;
                int v82 = v17 & 1;
LABEL_139:
                _os_log_debug_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEBUG, "Friendly Name: \"%{public}s\" to Make Name substring matched: \"%s\", require case sensitive match: %d", (uint8_t *)&v81, 0x1Cu);
                if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__str.__r_.__value_.__l.__data_);
                }
              }
LABEL_111:
              if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v76.__r_.__value_.__l.__data_);
              }
              return 1;
            }
          }
          if (v18)
          {
            memset(&v81, 0, sizeof(v81));
            sub_10004191C(&__str, v18);
            sub_1003562F4(&__str, (uint64_t)&v81);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            std::string::size_type v39 = v81.__r_.__value_.__l.__size_;
            std::string::size_type v70 = v81.__r_.__value_.__l.__size_;
            std::string::size_type v40 = v81.__r_.__value_.__r.__words[0];
            if (v81.__r_.__value_.__r.__words[0] != v81.__r_.__value_.__l.__size_)
            {
              while (1)
              {
                sub_100475F84(a4, (uint64_t)&__str);
                char v41 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                uint64_t v42 = (void *)__str.__r_.__value_.__r.__words[0];
                v43 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__str
                    : (std::string *)__str.__r_.__value_.__r.__words[0];
                int v44 = *(char *)(v40 + 23);
                CFTypeID v45 = v44 >= 0 ? (unsigned __int8 *)v40 : *(unsigned __int8 **)v40;
                int64_t v46 = v44 >= 0 ? *(unsigned __int8 *)(v40 + 23) : *(void *)(v40 + 8);
                if (!v46) {
                  break;
                }
                if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  int64_t v47 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
                }
                else {
                  int64_t v47 = __str.__r_.__value_.__l.__size_;
                }
                BOOL v48 = (char *)v43 + v47;
                if (v47 >= v46)
                {
                  __pa = (void *)__str.__r_.__value_.__r.__words[0];
                  int v51 = *v45;
                  long long v52 = v43;
                  do
                  {
                    int64_t v53 = v47 - v46;
                    if (v53 == -1) {
                      break;
                    }
                    v54 = (char *)memchr(v52, v51, v53 + 1);
                    if (!v54) {
                      break;
                    }
                    uint64_t v49 = v54;
                    if (!memcmp(v54, v45, v46)) {
                      goto LABEL_90;
                    }
                    long long v52 = (std::string *)(v49 + 1);
                    int64_t v47 = v48 - (v49 + 1);
                  }
                  while (v47 >= v46);
                  uint64_t v49 = v48;
LABEL_90:
                  std::string::size_type v39 = v70;
                  uint64_t v42 = __pa;
                }
                else
                {
                  uint64_t v49 = (char *)v43 + v47;
                }
                if (v49 == v48) {
                  uint64_t v50 = -1;
                }
                else {
                  uint64_t v50 = v49 - (char *)v43;
                }
                if (v41 < 0) {
                  goto LABEL_95;
                }
LABEL_96:
                if (v50 != -1)
                {
                  sub_10004191C(&__str, __s);
                  std::string::operator=(v67, &__str);
                  *(unsigned char *)(a3 + 80) = 1;
                  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__str.__r_.__value_.__l.__data_);
                  }
                  v58 = qword_100A19EB8;
                  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEBUG))
                  {
                    sub_100475F84(a4, (uint64_t)&__str);
                    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                      v66 = &__str;
                    }
                    else {
                      v66 = (std::string *)__str.__r_.__value_.__r.__words[0];
                    }
                    if (*(char *)(v40 + 23) < 0) {
                      std::string::size_type v40 = *(void *)v40;
                    }
                    *(_DWORD *)buf = 136446466;
                    v78 = v66;
                    __int16 v79 = 2082;
                    std::string::size_type v80 = v40;
                    _os_log_debug_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEBUG, "Friendly Name: \"%{public}s\" to Make Abbreviation matched: \"%{public}s\"", buf, 0x16u);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__str.__r_.__value_.__l.__data_);
                    }
                  }
                  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
                  sub_100051568((void ***)&__str);
                  goto LABEL_111;
                }
                v40 += 24;
                if (v40 == v39) {
                  goto LABEL_98;
                }
              }
              uint64_t v50 = 0;
              if ((*((unsigned char *)&__str.__r_.__value_.__s + 23) & 0x80) == 0) {
                goto LABEL_96;
              }
LABEL_95:
              operator delete(v42);
              goto LABEL_96;
            }
LABEL_98:
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v81;
            sub_100051568((void ***)&__str);
          }
          if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v76.__r_.__value_.__l.__data_);
          }
        }
      }
    }
    if (v13 == 21)
    {
LABEL_115:
      v59 = qword_100A19EB8;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_1007590D0(a1, v59);
      return 0;
    }
    if (v13 == 101) {
      return 0;
    }
LABEL_117:
    v60 = qword_100A19EB8;
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    sub_100759038(a4, v60);
    return 0;
  }
  uint64_t v56 = qword_100A19EB8;
  BOOL result = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEBUG);
  if (!result) {
    return result;
  }
  sub_100758FA8(a4, v56);
  return 0;
}

void sub_10035772C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003577D8(sqlite3 **a1, sqlite3_stmt *a2, uint64_t a3, uint64_t a4)
{
  sub_100475F84(a4, (uint64_t)&v51);
  if ((SHIBYTE(v53) & 0x80000000) == 0)
  {
    if (HIBYTE(v53)) {
      goto LABEL_3;
    }
LABEL_59:
    uint64_t v38 = qword_100A19EB8;
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEBUG);
    if (!result) {
      return result;
    }
    sub_10075915C(a4, v38);
    return 0;
  }
  uint64_t v37 = v52;
  operator delete(v51);
  if (!v37) {
    goto LABEL_59;
  }
LABEL_3:
  if (!*a1)
  {
    uint64_t v6 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
      sub_100758EA8(v6, v7, v8, v9, v10, v11, v12, v13);
    }
  }
  CFTypeID v45 = a1;
  while (1)
  {
LABEL_7:
    while (1)
    {
      int v14 = sqlite3_step(a2);
      if (v14 > 20) {
        break;
      }
      if (v14 != 5)
      {
        if (v14 != 1)
        {
LABEL_71:
          uint64_t v42 = qword_100A19EB8;
          BOOL result = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR);
          if (!result) {
            return result;
          }
          sub_1007591EC(a4, v42);
          return 0;
        }
        goto LABEL_69;
      }
    }
    if (v14 != 100)
    {
      if (v14 != 21)
      {
        if (v14 != 101) {
          goto LABEL_71;
        }
        return 0;
      }
LABEL_69:
      char v41 = qword_100A19EB8;
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      sub_100759284(a1, v41);
      return 0;
    }
    if (sqlite3_column_count(a2) >= 1)
    {
      int v15 = 0;
      uint64_t v16 = 0;
      char v17 = 0;
      do
      {
        long long v18 = sqlite3_column_name(a2, v15);
        std::string v19 = sqlite3_column_text(a2, v15);
        if (v18)
        {
          long long v20 = (char *)v19;
          if (!strcmp(v18, "make_group_name"))
          {
            char v17 = v20;
          }
          else if (!strcmp(v18, "make_group_friendly_names"))
          {
            uint64_t v16 = v20;
          }
        }
        ++v15;
      }
      while (v15 < sqlite3_column_count(a2));
      if (v17 && v16) {
        break;
      }
    }
  }
  int v51 = 0;
  long long v52 = 0;
  uint64_t v53 = 0;
  sub_10004191C(&__p, v16);
  sub_1003562F4(&__p, (uint64_t)&v51);
  __s = v17;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  unint64_t v22 = (unsigned __int8 *)v51;
  uint64_t v21 = (unsigned __int8 *)v52;
  BOOL v48 = (unsigned __int8 *)v52;
  while (2)
  {
    if (v22 == v21)
    {
      __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
      sub_100051568((void ***)&__p);
      a1 = v45;
      goto LABEL_7;
    }
    sub_100475F84(a4, (uint64_t)&__p);
    char v23 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    long long v24 = (void *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    int v26 = (char)v22[23];
    if (v26 >= 0) {
      int64_t v27 = v22;
    }
    else {
      int64_t v27 = *(unsigned __int8 **)v22;
    }
    if (v26 >= 0) {
      int64_t v28 = v22[23];
    }
    else {
      int64_t v28 = *((void *)v22 + 1);
    }
    if (v28)
    {
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int64_t size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        int64_t size = __p.__r_.__value_.__l.__size_;
      }
      uint64_t v30 = (char *)p_p + size;
      if (size >= v28)
      {
        int64_t v47 = (void *)__p.__r_.__value_.__r.__words[0];
        int v33 = *v27;
        uint64_t v34 = p_p;
        do
        {
          int64_t v35 = size - v28;
          if (v35 == -1) {
            break;
          }
          uint64_t v36 = (char *)memchr(v34, v33, v35 + 1);
          if (!v36) {
            break;
          }
          uint64_t v31 = v36;
          if (!memcmp(v36, v27, v28)) {
            goto LABEL_47;
          }
          uint64_t v34 = (std::string *)(v31 + 1);
          int64_t size = v30 - (v31 + 1);
        }
        while (size >= v28);
        uint64_t v31 = v30;
LABEL_47:
        long long v24 = v47;
      }
      else
      {
        uint64_t v31 = (char *)p_p + size;
      }
      if (v31 == v30) {
        uint64_t v32 = -1;
      }
      else {
        uint64_t v32 = v31 - (char *)p_p;
      }
      if (v23 < 0) {
LABEL_52:
      }
        operator delete(v24);
    }
    else
    {
      uint64_t v32 = 0;
      if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0) {
        goto LABEL_52;
      }
    }
    if (v32 == -1)
    {
      v22 += 24;
      uint64_t v21 = v48;
      continue;
    }
    break;
  }
  sub_10004191C(&__p, __s);
  std::string::operator=((std::string *)(a3 + 88), &__p);
  *(unsigned char *)(a3 + 80) = 1;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::size_type v40 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEBUG))
  {
    sub_100475F84(a4, (uint64_t)&__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      v43 = &__p;
    }
    else {
      v43 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((char)v22[23] < 0) {
      unint64_t v22 = *(unsigned __int8 **)v22;
    }
    *(_DWORD *)buf = 136446466;
    __int16 v55 = v43;
    __int16 v56 = 2082;
    v57 = v22;
    _os_log_debug_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEBUG, "Friendly Name: \"%{public}s\" to Make Group matched: \"%{public}s\"", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v51;
  sub_100051568((void ***)&__p);
  return 1;
}

void sub_100357C40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::string __p = &a21;
  sub_100051568((void ***)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100357C9C(sqlite3 **a1, uint64_t a2)
{
  v67[0] = 0;
  v67[1] = 0;
  sub_10003AED0((uint64_t)v67, (uint64_t)(a1 + 2));
  uint64_t v89 = 0;
  long long v88 = 0u;
  memset(v87, 0, sizeof(v87));
  long long v85 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v83 = 0u;
  *(_OWORD *)v84 = 0u;
  long long v81 = 0u;
  *(_OWORD *)int v82 = 0u;
  sub_1006161E0((uint64_t)&v81 + 1);
  BYTE2(v82[0]) = 0;
  BYTE4(v82[0]) = 0;
  BYTE2(v84[0]) = 0;
  BYTE4(v84[0]) = 0;
  DWORD1(v87[1]) = 0;
  long long v83 = 0uLL;
  v82[1] = 0;
  LOBYTE(v84[0]) = 0;
  long long v85 = 0uLL;
  v84[1] = 0;
  LOBYTE(__p[0]) = 0;
  memset(v87, 0, 19);
  __p[1] = 0;
  BYTE8(v87[1]) = 1;
  BYTE2(v89) = 0;
  *(void *)((char *)&v87[1] + 14) = 0;
  *(void *)((char *)&v87[1] + 9) = 0;
  long long v88 = 0uLL;
  *((void *)&v87[2] + 1) = 0;
  LOBYTE(v89) = 0;
  if (!*a1)
  {
    memset(v72, 0, 24);
    sub_10035604C((uint64_t)v72);
    uint64_t v4 = v72[23] >= 0 ? v72 : *(const char **)v72;
    int v5 = sqlite3_open_v2(v4, a1, 1, 0);
    uint64_t v6 = qword_100A19EB8;
    if (v5)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
      {
        uint64_t v7 = sqlite3_errmsg(*a1);
        sub_100759348((uint64_t)v7, (uint64_t)v80);
      }
      sub_100355F8C((uint64_t)a1);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v21 = v72;
      if (v72[23] < 0) {
        uint64_t v21 = *(unsigned char **)v72;
      }
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v21;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Opened device database at location %s", (uint8_t *)&__str, 0xCu);
    }
    if ((v72[23] & 0x80000000) != 0) {
      operator delete(*(void **)v72);
    }
    if (v5)
    {
      uint64_t v22 = 1;
      goto LABEL_158;
    }
  }
  sub_100475F84(a2, (uint64_t)v72);
  if ((v72[23] & 0x80000000) != 0)
  {
    uint64_t v8 = *(void *)&v72[8];
    operator delete(*(void **)v72);
    if (!v8)
    {
LABEL_43:
      int v18 = 0;
      goto LABEL_44;
    }
  }
  else if (!v72[23])
  {
    goto LABEL_43;
  }
  uint64_t v9 = sub_100356918(a1, " FROM devices, manufacturers, matching_rules_oui, oui_assignments, makes WHERE ((oui_assignments.oui = ?1) AND (matching_rules_oui.manufacturer_id = oui_assignments.manufacturer_id)) AND (matching_rules_oui.name = ?2) AND (matching_rules_oui.manufacturer_id = manufacturers.id) AND (matching_rules_oui.device_id = devices.id) AND CASE WHEN devices.make_id is NULL THEN (makes.id = 0) ELSE (devices.make_id = makes.id) END");
  if (!v9) {
    goto LABEL_43;
  }
  memset(v72, 0, 24);
  sub_1004A82EC((unsigned __int8 *)(a2 + 128), &__str);
  std::string::basic_string((std::string *)v72, &__str, 0, 8uLL, (std::allocator<char> *)buf);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  memset(&__str, 0, sizeof(__str));
  sub_100475F84(a2, (uint64_t)&__str);
  uint64_t v10 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = v72;
    if (v72[23] < 0) {
      uint64_t v11 = *(unsigned char **)v72;
    }
    p_str = &__str;
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = p_str;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Looking up by OUI %s and Name %s", buf, 0x16u);
  }
  if (v72[23] >= 0) {
    uint64_t v13 = v72;
  }
  else {
    uint64_t v13 = *(const char **)v72;
  }
  if (v72[23] >= 0) {
    int v14 = v72[23];
  }
  else {
    int v14 = *(_DWORD *)&v72[8];
  }
  if (sqlite3_bind_text(v9, 1, v13, v14, 0)
    || ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (int v15 = &__str)
      : (int v15 = (std::string *)__str.__r_.__value_.__r.__words[0]),
        (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
      ? (int v16 = HIBYTE(__str.__r_.__value_.__r.__words[2]))
      : (int v16 = __str.__r_.__value_.__r.__words[1]),
        sqlite3_bind_text(v9, 2, (const char *)v15, v16, 0)))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
    {
      char v17 = sqlite3_errmsg(*a1);
      sub_100759310((uint64_t)v17, (uint64_t)v76);
    }
  }
  else
  {
    int v56 = sub_100356D2C(a1, v9, (uint64_t)&v81);
    if (v56)
    {
      v57 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, buf);
        v58 = v78 >= 0 ? buf : *(uint8_t **)buf;
        *(_DWORD *)v75 = 136446466;
        *(void *)&v75[4] = v58;
        *(_WORD *)&v75[12] = 1024;
        *(_DWORD *)&v75[14] = v56;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "Found a OUI profile for device %{public}s at row %d", v75, 0x12u);
        if (v78 < 0) {
          operator delete(*(void **)buf);
        }
      }
      int v18 = 1;
      goto LABEL_39;
    }
  }
  int v18 = 0;
LABEL_39:
  sqlite3_finalize(v9);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if ((v72[23] & 0x80000000) != 0) {
    operator delete(*(void **)v72);
  }
LABEL_44:
  sub_100475F84(a2, (uint64_t)v72);
  if ((v72[23] & 0x80000000) != 0)
  {
    if (!*(void *)&v72[8])
    {
      char v23 = *(void **)v72;
LABEL_82:
      operator delete(v23);
      goto LABEL_83;
    }
  }
  else if (!v72[23])
  {
    goto LABEL_83;
  }
  if (sub_1004829FC(a2))
  {
    if ((v72[23] & 0x80000000) != 0) {
      operator delete(*(void **)v72);
    }
    goto LABEL_64;
  }
  char v19 = sub_100482A30(a2);
  char v20 = v19;
  if ((v72[23] & 0x80000000) == 0)
  {
    if ((v19 & 1) == 0) {
      goto LABEL_83;
    }
    goto LABEL_64;
  }
  operator delete(*(void **)v72);
  if (v20)
  {
LABEL_64:
    long long v24 = sub_100356918(a1, " FROM devices, matching_rules_hash, makes WHERE ((matching_rules_hash.name IS NULL) OR (matching_rules_hash.name = ?1)) AND ((matching_rules_hash.primaryHash IS NULL) OR (matching_rules_hash.primaryHash = ?2)) AND ((matching_rules_hash.secondaryHash IS NULL) OR (matching_rules_hash.secondaryHash = ?3)) AND (matching_rules_hash.device_id = devices.id) AND CASE WHEN devices.make_id is NULL THEN (makes.id = 0) ELSE (devices.make_id = makes.id) END");
    if (!v24) {
      goto LABEL_83;
    }
    memset(&__str, 0, sizeof(__str));
    sub_100475F84(a2, (uint64_t)&__str);
    memset(buf, 0, 20);
    sub_100482A04(a2, (uint64_t)buf);
    memset(v75, 0, 20);
    sub_100482A38(a2, (uint64_t)v75);
    uint64_t v25 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      int v26 = &__str;
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        int v26 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)v72 = 136316162;
      *(void *)&v72[4] = v26;
      *(_WORD *)&v72[12] = 1042;
      *(_DWORD *)&v72[14] = 20;
      *(_WORD *)&v72[18] = 2098;
      *(void *)&v72[20] = buf;
      uint64_t v73 = 0x832000000140412;
      v74 = v75;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Looking up by name %s, primaryHash %{public}.20P, secondaryHash %{public}.20P", v72, 0x2Cu);
    }
    int64_t v27 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__str
        : (std::string *)__str.__r_.__value_.__r.__words[0];
    int v28 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__str.__r_.__value_.__r.__words[2])
        : LODWORD(__str.__r_.__value_.__r.__words[1]);
    if (sqlite3_bind_text(v24, 1, (const char *)v27, v28, 0)
      || sqlite3_bind_blob(v24, 2, buf, 20, 0)
      || sqlite3_bind_blob(v24, 3, v75, 20, 0))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
      {
        BOOL v29 = sqlite3_errmsg(*a1);
        sub_100759310((uint64_t)v29, (uint64_t)v68);
      }
    }
    else
    {
      int v59 = sub_100356D2C(a1, v24, (uint64_t)&v81);
      if (v59)
      {
        v60 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, v72);
          v61 = v72[23] >= 0 ? v72 : *(unsigned char **)v72;
          *(_DWORD *)v68 = 136446466;
          v69 = v61;
          __int16 v70 = 1024;
          int v71 = v59;
          _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "Found a hash profile for device %{public}s at row %d", v68, 0x12u);
          if ((v72[23] & 0x80000000) != 0) {
            operator delete(*(void **)v72);
          }
        }
        int v18 = 1;
      }
    }
    sqlite3_finalize(v24);
    if ((SHIBYTE(__str.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_83;
    }
    char v23 = (void *)__str.__r_.__value_.__r.__words[0];
    goto LABEL_82;
  }
LABEL_83:
  *(void *)v65 = 0;
  *(void *)v66 = 0;
  if (sub_10047B7A8(a2, &v66[1], v66, &v65[1], v65))
  {
    uint64_t v30 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      int v32 = v66[0];
      int v31 = v66[1];
      int v33 = v65[0];
      int v34 = v65[1];
      sub_100474E18(a2, &__str);
      int64_t v35 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)v72 = 67110146;
      *(_DWORD *)&v72[4] = v31;
      *(_WORD *)&v72[8] = 1024;
      *(_DWORD *)&v72[10] = v32;
      *(_WORD *)&v72[14] = 1024;
      *(_DWORD *)&v72[16] = v34;
      *(_WORD *)&v72[20] = 1024;
      *(_DWORD *)&v72[22] = v33;
      *(_WORD *)&v72[26] = 2080;
      uint64_t v73 = (uint64_t)v35;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "Looking up by vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x for %s", v72, 0x24u);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v36 = sub_100356918(a1, " FROM devices, matching_rules_did, makes WHERE ((matching_rules_did.vid_src IS NULL) OR (matching_rules_did.vid_src = ?1)) AND ((matching_rules_did.vid IS NULL) OR (matching_rules_did.vid = ?2)) AND ((matching_rules_did.pid IS NULL) OR (matching_rules_did.pid = ?3)) AND ((matching_rules_did.version IS NULL) OR (matching_rules_did.version = ?4)) AND (matching_rules_did.device_id = devices.id) AND CASE WHEN devices.make_id is NULL THEN (makes.id = 0) ELSE (devices.make_id = makes.id) END");
    uint64_t v37 = v36;
    if (v36)
    {
      if (sqlite3_bind_int(v36, 1, v66[1])
        || sqlite3_bind_int(v37, 2, v66[0])
        || sqlite3_bind_int(v37, 3, v65[1])
        || sqlite3_bind_int(v37, 4, v65[0]))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
        {
          uint64_t v38 = sqlite3_errmsg(*a1);
          sub_100759310((uint64_t)v38, (uint64_t)v75);
        }
      }
      else
      {
        int v62 = sub_100356D2C(a1, v37, (uint64_t)&v81);
        if (v62)
        {
          v63 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, v72);
            v64 = v72[23] >= 0 ? v72 : *(unsigned char **)v72;
            LODWORD(__str.__r_.__value_.__l.__data_) = 136446466;
            *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v64;
            WORD2(__str.__r_.__value_.__r.__words[1]) = 1024;
            *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = v62;
            _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "Found a DID profile for device %{public}s at row %d", (uint8_t *)&__str, 0x12u);
            if ((v72[23] & 0x80000000) != 0) {
              operator delete(*(void **)v72);
            }
          }
          int v18 = 1;
        }
      }
      sqlite3_finalize(v37);
    }
  }
  memset(v72, 0, 24);
  if (!LOBYTE(__p[0]) || (std::string::operator=((std::string *)v72, (const std::string *)&__p[1]), !LOBYTE(__p[0])))
  {
    std::string::size_type v39 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, &__str);
      std::string::size_type v40 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__str
          : (std::string *)__str.__r_.__value_.__r.__words[0];
      *(_DWORD *)buf = 136446210;
      *(void *)&uint8_t buf[4] = v40;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "Performing substring search for make name of device %{public}s", buf, 0xCu);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
    char v41 = sub_100356ABC(a1);
    if (v41)
    {
      if (sub_100356F60(a1, v41, (uint64_t)&v81, a2))
      {
        if (LOBYTE(__p[0])) {
          std::string::operator=((std::string *)v72, (const std::string *)&__p[1]);
        }
        uint64_t v42 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, &__str);
          if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            v43 = &__str;
          }
          else {
            v43 = (std::string *)__str.__r_.__value_.__r.__words[0];
          }
          int v44 = v72;
          if (v72[23] < 0) {
            int v44 = *(unsigned char **)v72;
          }
          *(_DWORD *)buf = 136446466;
          *(void *)&uint8_t buf[4] = v43;
          *(_WORD *)&unsigned char buf[12] = 2082;
          *(void *)&buf[14] = v44;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Found make of device: %{public}s, Make: %{public}s", buf, 0x16u);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
        int v18 = 1;
      }
      else
      {
        CFTypeID v45 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
        {
          sub_100474E18(a2, &__str);
          int64_t v46 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__str
              : (std::string *)__str.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136446210;
          *(void *)&uint8_t buf[4] = v46;
          _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "No make name found for device %{public}s", buf, 0xCu);
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__str.__r_.__value_.__l.__data_);
          }
        }
      }
      sqlite3_finalize(v41);
      if (!LOBYTE(__p[0])
        || (std::string::operator=((std::string *)v72, (const std::string *)&__p[1]), !LOBYTE(__p[0])))
      {
        int64_t v47 = sub_100356BF4(a1);
        if (v47)
        {
          BOOL v48 = qword_100A19EB8;
          if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
          {
            sub_100474E18(a2, &__str);
            uint64_t v49 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__str
                : (std::string *)__str.__r_.__value_.__r.__words[0];
            *(_DWORD *)buf = 136446210;
            *(void *)&uint8_t buf[4] = v49;
            _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "Performing friendly name search for make group of device %{public}s", buf, 0xCu);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          if (sub_1003577D8(a1, v47, (uint64_t)&v81, a2))
          {
            if (LOBYTE(__p[0])) {
              std::string::operator=((std::string *)v72, (const std::string *)&__p[1]);
            }
            uint64_t v50 = qword_100A19EB8;
            if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(a2, &__str);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                int v51 = &__str;
              }
              else {
                int v51 = (std::string *)__str.__r_.__value_.__r.__words[0];
              }
              long long v52 = v72;
              if (v72[23] < 0) {
                long long v52 = *(unsigned char **)v72;
              }
              *(_DWORD *)buf = 136446466;
              *(void *)&uint8_t buf[4] = v51;
              *(_WORD *)&unsigned char buf[12] = 2082;
              *(void *)&buf[14] = v52;
              _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Found make group of device: %{public}s, Make Group: %{public}s", buf, 0x16u);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
            int v18 = 1;
          }
          else
          {
            uint64_t v53 = qword_100A19EB8;
            if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
            {
              sub_100474E18(a2, &__str);
              v54 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                  ? &__str
                  : (std::string *)__str.__r_.__value_.__r.__words[0];
              *(_DWORD *)buf = 136446210;
              *(void *)&uint8_t buf[4] = v54;
              _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "No make group found for device %{public}s", buf, 0xCu);
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
            }
          }
          sqlite3_finalize(v47);
        }
      }
    }
  }
  sub_100355E5C((uint64_t)a1);
  if (v18)
  {
    sub_10047829C(a2);
    sub_100478314((uint64_t *)a2, (uint64_t)&v81);
  }
  if ((v72[23] & 0x80000000) != 0) {
    operator delete(*(void **)v72);
  }
  uint64_t v22 = 0;
LABEL_158:
  if (SHIBYTE(v87[0]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete(v84[1]);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(v82[1]);
  }
  nullsub_95((char *)&v81 + 1);
  sub_10003AFB4((uint64_t)v67);
  return v22;
}

void sub_100358A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
}

unint64_t sub_100358B58(uint64_t a1, char *a2)
{
  unint64_t result = atol(a2);
  *(unsigned char *)(a1 + 49) = result & 1;
  *(unsigned char *)(a1 + 48) = 1;
  *(unsigned char *)(a1 + 19) = (result & 2) != 0;
  *(unsigned char *)(a1 + 18) = 1;
  *(unsigned char *)(a1 + 51) = (result & 4) != 0;
  *(unsigned char *)(a1 + 50) = 1;
  *(unsigned char *)(a1 + 112) = (result & 8) != 0;
  *(unsigned char *)(a1 + 113) = (result & 0x10) != 0;
  *(unsigned char *)(a1 + 114) = (result & 0x20) != 0;
  *(unsigned char *)(a1 + 121) = (result & 0x40) != 0;
  *(unsigned char *)(a1 + 122) = (result & 0x80) != 0;
  *(unsigned char *)(a1 + 123) = BYTE1(result) & 1;
  *(unsigned char *)(a1 + 132) = (result & 0x200) != 0;
  *(unsigned char *)(a1 + 133) = (result & 0x400) != 0;
  *(unsigned char *)(a1 + 120) = (result & 0x800) != 0;
  uint64x2_t v4 = (uint64x2_t)vdupq_n_s64(result);
  int16x8_t v5 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1007BBE00), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1007BBDF0));
  *(int8x8_t *)v5.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v5), (int8x8_t)0x1000100010001);
  *(_DWORD *)(a1 + 140) = vmovn_s16(v5).u32[0];
  *(unsigned char *)(a1 + 144) = BYTE2(result) & 1;
  *(unsigned char *)(a1 + 145) = (result & 0x20000) != 0;
  *(int8x8_t *)(a1 + 147) = vand_s8(vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1007BBE20), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1007BBE10)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1007BBE40), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1007BBE30)))), (int8x8_t)0x101010101010101);
  int16x8_t v6 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1007BBE60), (int32x4_t)vshlq_u64(v4, (uint64x2_t)xmmword_1007BBE50));
  *(int8x8_t *)v6.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v6), (int8x8_t)0x1000100010001);
  *(_DWORD *)(a1 + 155) = vmovn_s16(v6).u32[0];
  *(unsigned char *)(a1 + 159) = (result & 0x40000000) != 0;
  BOOL v7 = (result & 0xFFFFFFFF80000000) != 0;
  *(unsigned char *)(a1 + 160) = v7;
  *(unsigned char *)(a1 + 161) = v7;
  *(unsigned char *)(a1 + 146) = v7;
  *(unsigned char *)(a1 + 162) = v7;
  return result;
}

void sub_100358CCC(std::string *a1, char *a2)
{
  sub_10004191C(&__str, a2);
  std::string::operator=(a1 + 1, &__str);
  a1->__r_.__value_.__s.__data_[20] = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100358D20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100358D3C(uint64_t a1, char *a2)
{
  sub_10061625C((char *)&v4, a2);
  sub_100616288((__n128 *)(a1 + 1), &v4);
  *(unsigned char *)a1 = 1;
  return nullsub_95(&v4);
}

void sub_100358DB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, int a9, __int16 a10, char a11, char a12)
{
}

uint64_t sub_100358DD0(uint64_t a1, char *a2)
{
  if (a2) {
    uint64_t result = atoi(a2);
  }
  else {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 136) = result;
  return result;
}

uint64_t sub_100358E08(uint64_t a1, char *a2)
{
  if (a2) {
    uint64_t result = atoi(a2);
  }
  else {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 128) = result;
  return result;
}

uint64_t sub_100358E40(uint64_t result)
{
  *(_DWORD *)(result + 124) = 36;
  return result;
}

uint64_t sub_100358E4C(uint64_t a1, char *a2)
{
  if (a2) {
    uint64_t result = atoi(a2);
  }
  else {
    uint64_t result = 0;
  }
  *(_DWORD *)(a1 + 116) = result;
  return result;
}

void sub_100358E84(uint64_t a1, char *a2)
{
  sub_10004191C(&__str, a2);
  std::string::operator=((std::string *)(a1 + 88), &__str);
  *(unsigned char *)(a1 + 80) = 1;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100358ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100358EF4(id a1)
{
}

void sub_100358F78()
{
  uint64_t v3 = *v2;
  if (*v2)
  {
    *(void *)(v0 + 48) = v3;
    operator delete(v3);
  }
  sub_10030F284(v1, *(void **)(v0 + 16));

  operator delete();
}

uint64_t sub_100358FC4(uint64_t a1, const std::string *a2, int a3)
{
  uint64_t v6 = std::streambuf::basic_streambuf();
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_DWORD *)(v6 + 96) = a3;
  std::string::operator=((std::string *)(v6 + 64), a2);
  sub_100359064(a1);
  return a1;
}

void sub_100359040(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 87) < 0) {
    operator delete(*v2);
  }
  std::streambuf::~streambuf();
  _Unwind_Resume(a1);
}

void sub_100359064(uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    __n128 v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    __n128 v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 32) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        __n128 v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t sub_100359178(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = result;
  return result;
}

void sub_100359184(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_debug_impl(a1, v13, OS_LOG_TYPE_DEBUG, a4, &buf, 0xCu);
}

void sub_1003591A4(uint64_t a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100474E18(a1, (uint64_t *)va);
}

void *sub_1003591BC(void *a1)
{
  *a1 = &off_1009A8C98;
  sub_100052DA8(a1 + 1);
  sub_10035931C();
  char v3 = (void *)_CFPreferencesCopyKeyListWithContainer();
  CFArrayRef v4 = CFPreferencesCopyKeyList(@"com.apple.MobileBluetooth.devices", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  if (![v3 count] && -[__CFArray count](v4, "count"))
  {
    unint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string::size_type v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Using legacy keys", v7, 2u);
    }
    byte_1009FB388 = 0;
  }

  return a1;
}

void sub_1003592EC(_Unwind_Exception *a1)
{
  sub_100052DA4(v1);
  _Unwind_Resume(a1);
}

CFStringRef sub_10035931C()
{
  CFStringRef result = (CFStringRef)qword_100A12468;
  if (!qword_100A12468)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v4 = 0;
    uint64_t v1 = sub_10003FFD4();
    (*(void (**)(uint64_t, void **))(*(void *)v1 + 168))(v1, __p);
    if (v4 >= 0) {
      uint64_t v2 = __p;
    }
    else {
      uint64_t v2 = (void **)__p[0];
    }
    CFStringRef result = CFStringCreateWithCString(kCFAllocatorDefault, (const char *)v2, 0x8000100u);
    qword_100A12468 = (uint64_t)result;
    if (SHIBYTE(v4) < 0)
    {
      operator delete(__p[0]);
      return (CFStringRef)qword_100A12468;
    }
  }
  return result;
}

void sub_1003593C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003593E4(void *a1)
{
  *a1 = &off_1009A8C98;
  sub_100052DA4(a1 + 1);
  return a1;
}

void sub_100359428(void *a1)
{
  *a1 = &off_1009A8C98;
  sub_100052DA4(a1 + 1);

  operator delete();
}

uint64_t sub_10035948C(uint64_t a1, void **a2)
{
  if (byte_1009FB388)
  {
    sub_10035931C();
    uint64_t v3 = _CFPreferencesCopyKeyListWithContainer();
  }
  else
  {
    uint64_t v3 = (uint64_t)CFPreferencesCopyKeyList(@"com.apple.MobileBluetooth.devices", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
  uint64_t v4 = (void *)v3;
  if (v3)
  {
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      unint64_t v5 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
        sub_100759380(v5, v6, v7, v8, v9, v10, v11, v12);
      }
    }
  }
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  id v13 = v4;
  id v14 = [v13 countByEnumeratingWithState:&v36 objects:v40 count:16];
  if (v14)
  {
    uint64_t v15 = *(void *)v37;
    do
    {
      int v16 = 0;
      do
      {
        if (*(void *)v37 != v15) {
          objc_enumerationMutation(v13);
        }
        char v17 = *(void **)(*((void *)&v36 + 1) + 8 * (void)v16);
        __int16 v35 = 0;
        int v34 = 0;
        if (sub_1004A82DC((uint64_t)&v34, (unsigned __int8 *)objc_msgSend(v17, "UTF8String", context)))
        {
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009A9290);
          }
          uint64_t v18 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v34, 1);
          uint64_t v19 = v18;
          uint64_t v21 = (uint64_t *)a2[1];
          unint64_t v20 = (unint64_t)a2[2];
          if ((unint64_t)v21 >= v20)
          {
            uint64_t v23 = ((char *)v21 - (unsigned char *)*a2) >> 3;
            if ((unint64_t)(v23 + 1) >> 61) {
              abort();
            }
            uint64_t v24 = v20 - (void)*a2;
            uint64_t v25 = v24 >> 2;
            if (v24 >> 2 <= (unint64_t)(v23 + 1)) {
              uint64_t v25 = v23 + 1;
            }
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v25;
            }
            if (v26) {
              int64_t v27 = (char *)sub_1000405F8((uint64_t)(a2 + 2), v26);
            }
            else {
              int64_t v27 = 0;
            }
            int v28 = (uint64_t *)&v27[8 * v23];
            *int v28 = v19;
            uint64_t v22 = v28 + 1;
            uint64_t v30 = (char *)*a2;
            BOOL v29 = (char *)a2[1];
            if (v29 != *a2)
            {
              do
              {
                uint64_t v31 = *((void *)v29 - 1);
                v29 -= 8;
                *--int v28 = v31;
              }
              while (v29 != v30);
              BOOL v29 = (char *)*a2;
            }
            *a2 = v28;
            a2[1] = v22;
            a2[2] = &v27[8 * v26];
            if (v29) {
              operator delete(v29);
            }
          }
          else
          {
            *uint64_t v21 = v18;
            uint64_t v22 = v21 + 1;
          }
          a2[1] = v22;
        }
        int v16 = (char *)v16 + 1;
      }
      while (v16 != v14);
      id v14 = [v13 countByEnumeratingWithState:&v36 objects:v40 count:16];
    }
    while (v14);
  }

  return 0;
}

void sub_100359760(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100359798()
{
  if (byte_1009FB388) {
    uint64_t v0 = &kCFPreferencesAnyUser;
  }
  else {
    uint64_t v0 = &kCFPreferencesCurrentUser;
  }
  return __CFPreferencesFlushCachesForIdentifier(@"com.apple.MobileBluetooth.devices", *v0);
}

uint64_t sub_1003597C8()
{
  uint64_t v0 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_DEFAULT, "Disable cfprefs daemon cache", v2, 2u);
  }
  return _CFPreferencesSetDaemonCacheEnabled();
}

uint64_t sub_10035985C(uint64_t a1, uint64_t a2)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A9290);
  }
  char v3 = sub_1004AB1F0((uint64_t)off_1009F7EF8);
  uint64_t v4 = qword_100A19E50;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475F84(a2, (uint64_t)__p);
      unint64_t v5 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136315138;
      uint64_t v22 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Trying to delete device %s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    int v8 = *(_DWORD *)(a2 + 128);
    uint64_t v7 = a2 + 128;
    *(_DWORD *)buf = v8;
    LOWORD(v22) = *(_WORD *)(v7 + 4);
    sub_1004A82EC(buf, __p);
    if (v20 >= 0) {
      uint64_t v9 = __p;
    }
    else {
      uint64_t v9 = (void **)__p[0];
    }
    uint64_t v10 = +[NSString stringWithUTF8String:v9];
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    sub_100359B84(v10, 0);

    int v17 = *(_DWORD *)v7;
    __int16 v18 = *(_WORD *)(v7 + 4);
    sub_1004A82EC((unsigned __int8 *)&v17, __p);
    if (v20 >= 0) {
      uint64_t v11 = __p;
    }
    else {
      uint64_t v11 = (void **)__p[0];
    }
    uint64_t v12 = +[NSString stringWithUTF8String:v11];
    if (v20 < 0) {
      operator delete(__p[0]);
    }
    id v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_1004A82EC((unsigned __int8 *)&v17, __p);
      id v14 = v20 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446210;
      uint64_t v22 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Deleting address %{public}s", buf, 0xCu);
      if (v20 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v15 = (void *)sub_100359C20(v12);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_1007593F8();
    }

    return 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100759438(a2);
    }
    return 1;
  }
}

void sub_100359B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_100359B84(CFStringRef key, CFPropertyListRef value)
{
  if (byte_1009FB388)
  {
    CFStringRef v4 = sub_10035931C();
    __CFPreferencesSetAppValueWithContainer(key, value, @"com.apple.MobileBluetooth.devices", v4);
  }
  else
  {
    CFPreferencesSetValue(key, value, @"com.apple.MobileBluetooth.devices", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
}

CFPropertyListRef sub_100359C20(CFStringRef key)
{
  if (byte_1009FB388)
  {
    CFStringRef v2 = sub_10035931C();
    return (CFPropertyListRef)__CFPreferencesCopyAppValueWithContainer(key, @"com.apple.MobileBluetooth.devices", v2);
  }
  else
  {
    return CFPreferencesCopyValue(key, @"com.apple.MobileBluetooth.devices", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
  }
}

uint64_t sub_100359CB0(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "Name", a3);
}

uint64_t sub_100359CC0(uint64_t a1, unsigned __int8 *a2, const char *a3, std::string *a4)
{
  int v8 = sub_10035BABC((uint64_t)v7, (uint64_t)a2, (uint64_t)a3);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    id v9 = v8;
    std::string::assign(a4, (const std::string::value_type *)[v9 UTF8String]);

    return 0;
  }
  else
  {

    if (!strncmp("Name", a3, 4uLL)
      && sub_100040630(a2)
      && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_1007594D0((uint64_t)a2);
    }
    return 1;
  }
}

void sub_100359DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100359DD0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_100359DF8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  if (*((char *)a4 + 23) >= 0) {
    id v9 = a4;
  }
  else {
    id v9 = (uint64_t *)*a4;
  }
  uint64_t v10 = +[NSString stringWithUTF8String:v9];
  sub_10035BE74(a1, a2, a3, v10);

  return 0;
}

void sub_100359E84(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100359E94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"DevicePrimaryHash", a3, (id)0x14);
}

uint64_t sub_100359EA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, id a5)
{
  uint64_t v10 = sub_10035BABC((uint64_t)v9, a2, a3);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v10 length] == a5)
  {
    [v10 getBytes:a4 length:a5];
    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_100359F58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100359F68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_100359F94(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (a4)
  {
    uint64_t v11 = +[NSData dataWithBytes:a4 length:a5];
  }
  else
  {
    uint64_t v11 = 0;
  }
  sub_10035BE74(a1, a2, a3, v11);

  return 0;
}

void sub_10035A028(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035A038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"DeviceSecondaryHash", a3, (id)0x14);
}

uint64_t sub_10035A04C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035A078(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return sub_100359EA8(a1, a2, (uint64_t)"DevicePrimaryHashData", a3, (id)a4);
}

uint64_t sub_10035A090(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return 0;
}

uint64_t sub_10035A0C0(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "DeviceBundleID", a3);
}

uint64_t sub_10035A0D0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A0F8(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "DeviceCarVendorName", a3);
}

uint64_t sub_10035A108(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A130(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "DeviceManufacturerName", a3);
}

uint64_t sub_10035A140(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A168(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "DeviceModelName", a3);
}

uint64_t sub_10035A178(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A1A0(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "DeviceHWRevision", a3);
}

uint64_t sub_10035A1B0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A1D8(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "DeviceFWRevision", a3);
}

uint64_t sub_10035A1E8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A210(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "DeviceSWRevision", a3);
}

uint64_t sub_10035A220(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A248(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "UserNameKey", a3);
}

uint64_t sub_10035A258(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A280(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "DefaultName", a3);
}

uint64_t sub_10035A290(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035A2B8(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v6 = (void *)(a3 + 8);
  sub_1000486F0(a3, *(void **)(a3 + 8));
  *(void *)a3 = v6;
  *(void *)(a3 + 16) = 0;
  *uint64_t v6 = 0;
  memset(&__p, 0, sizeof(__p));
  uint64_t v7 = 1;
  if (!sub_100359CC0(a1, a2, "ServiceHandsfree", &__p))
  {
    int v8 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 1;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v8;
  }
  if (!sub_100359CC0(a1, a2, "ServicePhoneBook", &__p))
  {
    int v9 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 2;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v9;
  }
  if (!sub_100359CC0(a1, a2, "ServiceRemote", &__p))
  {
    int v10 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 8;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v10;
  }
  if (!sub_100359CC0(a1, a2, "ServiceA2DP", &__p))
  {
    int v11 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 16;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v11;
  }
  if (!sub_100359CC0(a1, a2, "ServiceHID", &__p))
  {
    int v12 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 32;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v12;
  }
  if (!sub_100359CC0(a1, a2, "ServiceWiAP", &__p))
  {
    int v13 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 128;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v13;
  }
  if (!sub_100359CC0(a1, a2, "ServiceNetSharing", &__p))
  {
    int v14 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 256;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v14;
  }
  if (!sub_100359CC0(a1, a2, "ServiceNetSharingUser", &__p))
  {
    int v15 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 4096;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v15;
  }
  if (!sub_100359CC0(a1, a2, "ServiceGaming", &__p))
  {
    int v16 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 2048;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v16;
  }
  if (!sub_100359CC0(a1, a2, "ServiceBraille", &__p))
  {
    int v17 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 0x2000;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v17;
  }
  if (!sub_100359CC0(a1, a2, "ServiceMAP", &__p))
  {
    int v18 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 512;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v18;
  }
  if (!sub_100359CC0(a1, a2, "ServiceWiAPSink", &__p))
  {
    int v19 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 0x20000;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v19;
  }
  if (!sub_100359CC0(a1, a2, "ServiceWirelessCarPlay", &__p))
  {
    int v20 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 0x40000;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v20;
  }
  if (!sub_100359CC0(a1, a2, "ServiceAACP", &__p))
  {
    int v21 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 0x80000;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v21;
  }
  if (!sub_100359CC0(a1, a2, "ServiceGATT", &__p))
  {
    int v22 = sub_10035A8EC(0, &__p);
    unsigned int v24 = 0x100000;
    unint64_t v26 = &v24;
    uint64_t v7 = 0;
    *((_DWORD *)sub_100360348((uint64_t **)a3, &v24, (uint64_t)&unk_1007BE9D0, &v26) + 8) = v22;
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  return v7;
}

void sub_10035A894(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035A8EC(int a1, std::string *this)
{
  uint64_t result = std::string::compare(this, "Unknown");
  if (result)
  {
    if (!std::string::compare(this, "Unsupported"))
    {
      return 1;
    }
    else if (!std::string::compare(this, "Unlikely"))
    {
      return 2;
    }
    else if (!std::string::compare(this, "Likely"))
    {
      return 3;
    }
    else
    {
      return 4 * (std::string::compare(this, "Supported") == 0);
    }
  }
  return result;
}

uint64_t sub_10035A990(uint64_t a1, uint64_t a2, void *a3)
{
  char v3 = a3 + 1;
  CFStringRef v4 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    do
    {
      int v7 = *((_DWORD *)v4 + 7);
      if (v7 <= 511)
      {
        if (v7 <= 15)
        {
          switch(v7)
          {
            case 1:
              sub_10035ADA0((int *)v4 + 8, &__p);
              sub_100359DF8(a1, a2, "ServiceHandsfree", (uint64_t *)&__p);
              goto LABEL_38;
            case 2:
              sub_10035ADA0((int *)v4 + 8, &__p);
              sub_100359DF8(a1, a2, "ServicePhoneBook", (uint64_t *)&__p);
              goto LABEL_38;
            case 8:
              sub_10035ADA0((int *)v4 + 8, &__p);
              sub_100359DF8(a1, a2, "ServiceRemote", (uint64_t *)&__p);
              goto LABEL_38;
          }
        }
        else if (v7 > 127)
        {
          if (v7 == 128)
          {
            sub_10035ADA0((int *)v4 + 8, &__p);
            sub_100359DF8(a1, a2, "ServiceWiAP", (uint64_t *)&__p);
            goto LABEL_38;
          }
          if (v7 == 256)
          {
            sub_10035ADA0((int *)v4 + 8, &__p);
            sub_100359DF8(a1, a2, "ServiceNetSharing", (uint64_t *)&__p);
            goto LABEL_38;
          }
        }
        else
        {
          if (v7 == 16)
          {
            sub_10035ADA0((int *)v4 + 8, &__p);
            sub_100359DF8(a1, a2, "ServiceA2DP", (uint64_t *)&__p);
            goto LABEL_38;
          }
          if (v7 == 32)
          {
            sub_10035ADA0((int *)v4 + 8, &__p);
            sub_100359DF8(a1, a2, "ServiceHID", (uint64_t *)&__p);
            goto LABEL_38;
          }
        }
      }
      else if (v7 >= 0x20000)
      {
        if (v7 >= 0x80000)
        {
          if (v7 == 0x80000)
          {
            sub_10035ADA0((int *)v4 + 8, &__p);
            sub_100359DF8(a1, a2, "ServiceAACP", (uint64_t *)&__p);
LABEL_38:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            goto LABEL_40;
          }
          if (v7 == 0x100000)
          {
            sub_10035ADA0((int *)v4 + 8, &__p);
            sub_100359DF8(a1, a2, "ServiceGATT", (uint64_t *)&__p);
            goto LABEL_38;
          }
        }
        else
        {
          if (v7 == 0x20000)
          {
            sub_10035ADA0((int *)v4 + 8, &__p);
            sub_100359DF8(a1, a2, "ServiceWiAPSink", (uint64_t *)&__p);
            goto LABEL_38;
          }
          if (v7 == 0x40000)
          {
            sub_10035ADA0((int *)v4 + 8, &__p);
            sub_100359DF8(a1, a2, "ServiceWirelessCarPlay", (uint64_t *)&__p);
            goto LABEL_38;
          }
        }
      }
      else if (v7 > 4095)
      {
        if (v7 == 4096)
        {
          sub_10035ADA0((int *)v4 + 8, &__p);
          sub_100359DF8(a1, a2, "ServiceNetSharingUser", (uint64_t *)&__p);
          goto LABEL_38;
        }
        if (v7 == 0x2000)
        {
          sub_10035ADA0((int *)v4 + 8, &__p);
          sub_100359DF8(a1, a2, "ServiceBraille", (uint64_t *)&__p);
          goto LABEL_38;
        }
      }
      else
      {
        if (v7 == 512)
        {
          sub_10035ADA0((int *)v4 + 8, &__p);
          sub_100359DF8(a1, a2, "ServiceMAP", (uint64_t *)&__p);
          goto LABEL_38;
        }
        if (v7 == 2048)
        {
          sub_10035ADA0((int *)v4 + 8, &__p);
          sub_100359DF8(a1, a2, "ServiceGaming", (uint64_t *)&__p);
          goto LABEL_38;
        }
      }
LABEL_40:
      int v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          int v9 = v8;
          int v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          int v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          CFStringRef v4 = v9;
        }
        while (!v10);
      }
      CFStringRef v4 = v9;
    }
    while (v9 != v3);
  }
  return 0;
}

void sub_10035AD4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_10035ADA0@<X0>(int *a1@<X1>, std::string *a2@<X8>)
{
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = *a1;
  if (v3 < 5) {
    return std::string::assign(a2, off_1009A92B0[v3]);
  }
  return result;
}

void sub_10035ADE8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10035AE04(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return sub_10035AE14(a1, a2, (uint64_t)"PhonebookSyncSettings", a3);
}

BOOL sub_10035AE14(uint64_t a1, uint64_t a2, uint64_t a3, _DWORD *a4)
{
  int v8 = sub_10035BABC((uint64_t)v7, a2, a3);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass) {
    *a4 = [v8 intValue];
  }

  return (isKindOfClass & 1) == 0;
}

void sub_10035AEA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035AEB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035AED8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v9 = +[NSNumber numberWithInt:a4];
  sub_10035BE74(a1, a2, a3, v9);

  return 0;
}

void sub_10035AF58(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035AF68(uint64_t a1, uint64_t a2, int **a3)
{
  int v22 = -1;
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v7 = *a3 == a3[1];
    *(_DWORD *)buf = 67109120;
    int v24 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Group list is empty: %d", buf, 8u);
  }
  sub_10035AE14(a1, a2, (uint64_t)"PhonebookSyncGroup", &v22);
  int v8 = *a3;
  a3[1] = *a3;
  int v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    int v24 = v22;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Read group ID: %d", buf, 8u);
    int v8 = a3[1];
  }
  unint64_t v10 = (unint64_t)a3[2];
  if ((unint64_t)v8 >= v10)
  {
    int v12 = *a3;
    uint64_t v13 = v8 - *a3;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      abort();
    }
    uint64_t v15 = v10 - (void)v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      int v17 = (char *)sub_1002C44F0((uint64_t)(a3 + 2), v16);
      int v12 = *a3;
      int v8 = a3[1];
    }
    else
    {
      int v17 = 0;
    }
    int v18 = (int *)&v17[4 * v13];
    int v19 = (int *)&v17[4 * v16];
    *int v18 = v22;
    int v11 = v18 + 1;
    while (v8 != v12)
    {
      int v20 = *--v8;
      *--int v18 = v20;
    }
    *a3 = v18;
    a3[1] = v11;
    a3[2] = v19;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *int v8 = v22;
    int v11 = v8 + 1;
  }
  a3[1] = v11;
  return 0;
}

uint64_t sub_10035B168(uint64_t a1, uint64_t a2, unsigned int **a3)
{
  return 0;
}

uint64_t sub_10035B194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B1BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"DeviceClass", a3, (id)4);
}

uint64_t sub_10035B1D0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "DeviceClass", (uint64_t)&v4, 4);
  return 0;
}

BOOL sub_10035B208(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"PincodeHasSucceeded", a3);
}

BOOL sub_10035B218(uint64_t a1, uint64_t a2, uint64_t a3, unsigned char *a4)
{
  int v8 = sub_10035BABC((uint64_t)v7, a2, a3);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass) {
    *a4 = [v8 BOOLValue];
  }

  return (isKindOfClass & 1) == 0;
}

void sub_10035B2A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035B2B4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    BOOL v7 = &__kCFBooleanTrue;
  }
  else {
    BOOL v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "PincodeHasSucceeded", v7);
  return 0;
}

BOOL sub_10035B324(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"AllowScoForTBT", a3);
}

uint64_t sub_10035B334(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    BOOL v7 = &__kCFBooleanTrue;
  }
  else {
    BOOL v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "AllowScoForTBT", v7);
  return 0;
}

uint64_t sub_10035B3A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastAVRCPVersion", a3, (id)2);
}

uint64_t sub_10035B3B8(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastAVRCPVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B3F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastPBAPVersion", a3, (id)2);
}

uint64_t sub_10035B404(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastPBAPVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B43C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastPBAPSupportedFeatures", a3, (id)2);
}

uint64_t sub_10035B450(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastPBAPSupportedFeatures", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B488(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastAVRCPControllerVersion", a3, (id)2);
}

uint64_t sub_10035B49C(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastAVRCPControllerVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastAVRCPControllerSupportedFeatures", a3, (id)2);
}

uint64_t sub_10035B4E8(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastAVRCPControllerSupportedFeatures", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B520(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastAVRCPTargetVersion", a3, (id)2);
}

uint64_t sub_10035B534(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastAVRCPTargetVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B56C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastAVRCPTargetSupportedFeatures", a3, (id)2);
}

uint64_t sub_10035B580(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastAVRCPTargetSupportedFeatures", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B5B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastHandsfreeVersion", a3, (id)2);
}

uint64_t sub_10035B5CC(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastHandsfreeVersion", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastHandsfreeSupportedFeatures", a3, (id)2);
}

uint64_t sub_10035B618(uint64_t a1, uint64_t a2, __int16 a3)
{
  __int16 v4 = a3;
  sub_100359F94(a1, a2, "LastHandsfreeSupportedFeatures", (uint64_t)&v4, 2);
  return 0;
}

uint64_t sub_10035B650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastA2DPSinkVersion", a3, (id)2);
}

uint64_t sub_10035B664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B690(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastA2DPSinkSupportedFeatures", a3, (id)2);
}

uint64_t sub_10035B6A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B6D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastMAPVersion", a3, (id)2);
}

uint64_t sub_10035B6E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B710(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastOBEXObjectPushVersion", a3, (id)2);
}

uint64_t sub_10035B724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B750(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastPNPInformationVersion", a3, (id)2);
}

uint64_t sub_10035B764(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B790(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastSerialPortVersion", a3, (id)2);
}

uint64_t sub_10035B7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastHIDVersion", a3, (id)2);
}

uint64_t sub_10035B7E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastGATTVersion", a3, (id)2);
}

uint64_t sub_10035B824(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B850(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastWIAPVersion", a3, (id)2);
}

uint64_t sub_10035B864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastAVDTPVersion", a3, (id)2);
}

uint64_t sub_10035B8A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

uint64_t sub_10035B8D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LastAVCTPVersion", a3, (id)2);
}

uint64_t sub_10035B8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return 0;
}

BOOL sub_10035B910(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"initiateSDPMirroringState", a3);
}

uint64_t sub_10035B920(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    BOOL v7 = &__kCFBooleanTrue;
  }
  else {
    BOOL v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "initiateSDPMirroringState", v7);
  return 0;
}

uint64_t sub_10035B990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"AssetLastCheckedTime", a3, (id)8);
}

uint64_t sub_10035B9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  sub_100359F94(a1, a2, "AssetLastCheckedTime", (uint64_t)&v4, 8);
  return 0;
}

uint64_t sub_10035B9DC(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned char *a4)
{
  int v8 = sub_10035BABC((uint64_t)v7, a2, (uint64_t)"DeviceTags");
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    if (*((char *)a3 + 23) >= 0) {
      int v9 = a3;
    }
    else {
      int v9 = (uint64_t *)*a3;
    }
    unint64_t v10 = +[NSString stringWithUTF8String:v9];
    *a4 = [v8 containsObject:v10];

    uint64_t v11 = 0;
  }
  else
  {
    uint64_t v11 = 1;
  }

  return v11;
}

void sub_10035BA9C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10035BABC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A9290);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    int v12 = *(_DWORD *)(a2 + 128);
    __int16 v13 = *(_WORD *)(a2 + 132);
    sub_1004A82EC((unsigned __int8 *)&v12, __p);
    if (v15 >= 0) {
      unint64_t v5 = __p;
    }
    else {
      unint64_t v5 = *(unsigned char **)__p;
    }
    uint64_t v6 = +[NSString stringWithUTF8String:v5];
    if (v15 < 0) {
      operator delete(*(void **)__p);
    }
    BOOL v7 = +[NSString stringWithUTF8String:a3];
    int v8 = (void *)sub_100359C20(v6);
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      int v9 = [v8 objectForKey:v7];
    }
    else
    {
      int v9 = 0;
    }
  }
  else
  {
    unint64_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "System has not passed first unlock (or device prefs not read yet). Do not read device property %s", __p, 0xCu);
    }
    int v9 = 0;
  }

  return v9;
}

void sub_10035BC7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035BCC8(uint64_t a1, uint64_t a2, void *a3)
{
  BOOL v7 = sub_10035BABC((uint64_t)v6, a2, (uint64_t)"DeviceTags");
  if (!v7 || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    if (*((char *)a3 + 23) >= 0) {
      int v8 = a3;
    }
    else {
      int v8 = (void *)*a3;
    }
    int v9 = +[NSString stringWithUTF8String:v8];
    unint64_t v10 = +[NSMutableSet setWithArray:v7];
    [v10 addObject:v9];
    if (!_os_feature_enabled_impl()) {
      goto LABEL_15;
    }
    int v11 = *((char *)a3 + 23);
    if (v11 < 0)
    {
      if (a3[1] != 34)
      {
LABEL_15:
        __int16 v13 = [v10 allObjects];
        uint64_t v12 = sub_10035BE74(a1, a2, "DeviceTags", v13);

        goto LABEL_16;
      }
      a3 = (void *)*a3;
    }
    else if (v11 != 34)
    {
      goto LABEL_15;
    }
    if (!memcmp(a3, "_DENY_INCOMING_CLASSIC_CONNECTION_", 0x22uLL)) {
      sub_10048E36C(a2, 1);
    }
    goto LABEL_15;
  }
  uint64_t v12 = 1;
LABEL_16:

  return v12;
}

void sub_10035BE3C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035BE74(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  id v7 = a4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A9290);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    int v25 = *(_DWORD *)(a2 + 128);
    __int16 v26 = *(_WORD *)(a2 + 132);
    sub_1004A82EC((unsigned __int8 *)&v25, __p);
    if (v30 >= 0) {
      int v8 = __p;
    }
    else {
      int v8 = (void **)__p[0];
    }
    int v9 = +[NSString stringWithUTF8String:v8];
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    unint64_t v10 = +[NSString stringWithUTF8String:a3];
    *(_OWORD *)std::string __p = 0uLL;
    sub_10003AED0((uint64_t)__p, a1 + 8);
    int v11 = (void *)sub_100359C20(v9);
    if (v11)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        uint64_t v12 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
          sub_100759568(v12, v13, v14, v15, v16, v17, v18, v19);
        }
      }
    }
    else if (!v7)
    {
      int v24 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        int v28 = a3;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Trying to write property %s but no dictionary", buf, 0xCu);
      }
      goto LABEL_18;
    }
    int v22 = +[NSMutableDictionary dictionaryWithDictionary:v11];
    [v22 setValue:v7 forKey:v10];
    sub_100359B84(v9, v22);

LABEL_18:
    sub_10003AFB4((uint64_t)__p);

    uint64_t v21 = 0;
    goto LABEL_19;
  }
  int v20 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = a3;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "System has not passed first unlock (or device prefs not read yet). Do not write device property %s", (uint8_t *)__p, 0xCu);
  }
  uint64_t v21 = 1;
LABEL_19:

  return v21;
}

void sub_10035C0F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_10003AFB4((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_10035C170(uint64_t a1, uint64_t a2, void *a3)
{
  id v7 = sub_10035BABC((uint64_t)v6, a2, (uint64_t)"DeviceTags");
  int v8 = +[NSMutableArray arrayWithArray:v7];

  if (v8)
  {
    if (*((char *)a3 + 23) >= 0) {
      int v9 = a3;
    }
    else {
      int v9 = (void *)*a3;
    }
    unint64_t v10 = +[NSString stringWithUTF8String:v9];
    if (![v8 containsObject:v10])
    {
      uint64_t v15 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        int v21 = *((char *)a3 + 23);
        int v22 = (void *)*a3;
        sub_100474E18(a2, __p);
        uint64_t v23 = v21 >= 0 ? a3 : v22;
        int v24 = v26 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)buf = 136446466;
        int v28 = v23;
        __int16 v29 = 2082;
        char v30 = v24;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Tag: \"%{public}s\" wasn't stored for device %{public}s", buf, 0x16u);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v12 = 1;
      goto LABEL_16;
    }
    [v8 removeObject:v10];
    int v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
    {
      int v17 = *((char *)a3 + 23);
      uint64_t v18 = (void *)*a3;
      sub_100474E18(a2, __p);
      uint64_t v19 = v17 >= 0 ? a3 : v18;
      int v20 = v26 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)buf = 136446466;
      int v28 = v19;
      __int16 v29 = 2082;
      char v30 = v20;
      _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "Removing tag: \"%{public}s\" for %{public}s from device settings", buf, 0x16u);
      if (v26 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v12 = sub_10035BE74(a1, a2, "DeviceTags", v8);
    if (_os_feature_enabled_impl())
    {
      int v13 = *((char *)a3 + 23);
      if (v13 < 0)
      {
        if (a3[1] == 34)
        {
          a3 = (void *)*a3;
          goto LABEL_20;
        }
      }
      else if (v13 == 34)
      {
LABEL_20:
        if (!memcmp(a3, "_DENY_INCOMING_CLASSIC_CONNECTION_", 0x22uLL)) {
          sub_10048E36C(a2, 0);
        }
      }
    }
LABEL_16:

    goto LABEL_17;
  }
  uint64_t v14 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_100474E18(a2, __p);
    sub_1007595E0((char *)__p, (uint64_t)buf, v14);
  }
  uint64_t v12 = 1;
LABEL_17:

  return v12;
}

void sub_10035C488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035C4C4(uint64_t a1, uint64_t a2)
{
  sub_10035C724((uint64_t)v3, a2, (uint64_t)"DeviceTags");
  return 0;
}

uint64_t sub_10035C508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035BABC((uint64_t)v3, a2, (uint64_t)"DeviceTags");
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    unint64_t v5 = qword_100A19E50;
    uint64_t v6 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = 138412290;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "statedump:    Tags: %@", (uint8_t *)&v8, 0xCu);
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 1;
  }

  return v6;
}

void sub_10035C610(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10035C628(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10035BABC((uint64_t)v3, a2, (uint64_t)"DeviceTags");

  return v4;
}

BOOL sub_10035C684(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  int v8 = sub_10035BABC((uint64_t)v7, a2, a3);
  objc_opt_class();
  char isKindOfClass = objc_opt_isKindOfClass();
  if (isKindOfClass) {
    *a4 = (int)[v8 intValue];
  }

  return (isKindOfClass & 1) == 0;
}

void sub_10035C714(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035C724(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A9290);
  }
  if (sub_1004AB1F0((uint64_t)off_1009F7EF8))
  {
    int v20 = *(_DWORD *)(a2 + 128);
    __int16 v21 = *(_WORD *)(a2 + 132);
    sub_1004A82EC((unsigned __int8 *)&v20, __p);
    if (v23 >= 0) {
      unint64_t v5 = __p;
    }
    else {
      unint64_t v5 = *(unsigned char **)__p;
    }
    uint64_t v6 = +[NSString stringWithUTF8String:v5];
    if (v23 < 0) {
      operator delete(*(void **)__p);
    }
    id v7 = +[NSString stringWithUTF8String:a3];
    int v8 = (void *)sub_100359C20(v6);
    if (v8)
    {
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        int v9 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
          sub_100759568(v9, v10, v11, v12, v13, v14, v15, v16);
        }
      }
    }
    int v17 = +[NSMutableDictionary dictionaryWithDictionary:v8];
    [v17 removeObjectForKey:v7];
    sub_100359B84(v6, v17);

    return 0;
  }
  else
  {
    uint64_t v19 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = a3;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "System has not passed first unlock (or device prefs not read yet). Do not delete device property %s", __p, 0xCu);
    }
    return 1;
  }
}

void sub_10035C910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035C96C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  int v9 = +[NSNumber numberWithLongLong:a4];
  sub_10035BE74(a1, a2, a3, v9);

  return 0;
}

void sub_10035C9EC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10035C9FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"EnableMAP", a3, (id)1);
}

uint64_t sub_10035CA10(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_100359F94(a1, a2, "EnableMAP", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10035CA48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"WiAPAssoc", a3, (id)4);
}

uint64_t sub_10035CA5C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "WiAPAssoc", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035CA94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v48 = 0;
  uint64_t v49 = 0;
  uint64_t v47 = 0;
  uint64_t v6 = (os_log_t *)&qword_100A19E50;
  id v7 = qword_100A19E50;
  if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)
    || ((sub_100474E18(a2, &v52), v53 >= 0) ? (int v8 = &v52) : (int v8 = (long long *)v52),
        *(_DWORD *)buf = 136446210,
        *(void *)&uint8_t buf[4] = v8,
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Starting SDP record processing for device %{public}s", buf, 0xCu), (SHIBYTE(v53) & 0x80000000) == 0))
  {
    if (a2) {
      goto LABEL_7;
    }
    return 1;
  }
  operator delete((void *)v52);
  if (!a2) {
    return 1;
  }
LABEL_7:
  if (*(void *)(a3 + 16))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075971C();
    }
    return 1;
  }
  BOOL v9 = sub_10035AE14(a1, a2, (uint64_t)"SdpCacheVersion", &v47);
  uint64_t v10 = qword_100A19E50;
  BOOL v11 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v9)
  {
    if (v11)
    {
      LOWORD(v52) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Read SDP cache version failed", (uint8_t *)&v52, 2u);
    }
  }
  else
  {
    int v12 = v47;
    if (v11)
    {
      LODWORD(v52) = 67109120;
      DWORD1(v52) = v47;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Read SDP cache version success %d", (uint8_t *)&v52, 8u);
    }
    if (v12 != 1)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_1007596E8();
      }
      sub_10035C724((uint64_t)v24, a2, (uint64_t)"SdpCacheSize");
      sub_10035C724((uint64_t)v25, a2, (uint64_t)"SdpCache");
      sub_10035C724((uint64_t)v26, a2, (uint64_t)"SdpCacheVersion");
      return 1;
    }
    sub_10035AED8(a1, a2, "SdpCacheVersion", 0);
  }
  uint64_t v13 = (unsigned __int16 *)malloc_type_malloc(0xFA0uLL, 0xFDC7E519uLL);
  if (!v13)
  {
    uint64_t v19 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      LODWORD(v52) = 136446210;
      *(void *)((char *)&v52 + 4) = "pSerializedData";
      _os_log_fault_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&v52, 0xCu);
      uint64_t v19 = qword_100A19E50;
    }
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      sub_10075964C();
    }
    return 1;
  }
  BOOL v14 = sub_10035AE14(a1, a2, (uint64_t)"SdpCacheSize", (_DWORD *)&v47 + 1);
  int v44 = (uint64_t **)a3;
  uint64_t v15 = qword_100A19E50;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (v16)
    {
      LOWORD(v52) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SDP record cache size is empty", (uint8_t *)&v52, 2u);
    }
    int v17 = 0;
    uint64_t v18 = 1;
  }
  else
  {
    if (v16)
    {
      LODWORD(v52) = 67109120;
      DWORD1(v52) = HIDWORD(v47);
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "SDP record cache size is %d", (uint8_t *)&v52, 8u);
    }
    if (v9)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_1007596B4();
      }
      sub_10035AED8(a1, a2, "SdpCacheVersion", 0);
    }
    __int16 v20 = WORD2(v47);
    if ((HIDWORD(v47) - 1) > 0xF9F
      || sub_100359EA8(a1, a2, (uint64_t)"SdpCache", (uint64_t)v13, (id)HIDWORD(v47)))
    {
      goto LABEL_74;
    }
    BOOL v48 = v13;
    LOWORD(v49) = v20;
    HIWORD(v49) = 1;
    WORD1(v49) = v20;
    if ((v20 & 0xFFFE) == 0) {
      sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1334, "ByteStream_NumReadBytesAvail(bs) >= 2");
    }
    int v28 = *v13;
    WORD2(v49) = 2;
    int v43 = v28;
    if (!v28) {
      goto LABEL_62;
    }
    int v29 = 0;
    int v30 = 1;
    char v41 = "ByteStream_NumReadBytesAvail(bs) >= 2";
    uint64_t v42 = a1;
    do
    {
      int64_t v46 = 0;
      int64_t v46 = malloc_type_calloc(1uLL, 0x10uLL, 0x10F2040C8FBA5E1uLL);
      int v31 = sub_1002D54E4((uint64_t *)&v48, (uint64_t)v46);
      if (HIBYTE(v49))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
LABEL_70:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1341, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      if (WORD1(v49) - WORD2(v49) <= 1) {
        goto LABEL_70;
      }
      if (BYTE6(v49) != 1) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1341, "(bs).__RWFlag == BYTESTREAM_READ");
      }
      int v32 = v13;
      int v33 = v6;
      unsigned int v34 = *(unsigned __int16 *)((char *)v48 + WORD2(v49));
      v30 &= v31;
      WORD2(v49) += 2;
      *((void *)&v52 + 1) = 0;
      uint64_t v53 = 0;
      *(void *)&long long v52 = (char *)&v52 + 8;
      if (v34)
      {
        int v35 = 0;
        while (1)
        {
          unsigned int v45 = 0;
          memset(buf, 0, sizeof(buf));
          if (HIBYTE(v49)) {
            break;
          }
          if (WORD1(v49) - WORD2(v49) <= 1) {
            goto LABEL_67;
          }
          if (BYTE6(v49) != 1)
          {
            std::string::size_type v40 = "(bs).__RWFlag == BYTESTREAM_READ";
            goto LABEL_66;
          }
          unsigned int v45 = *(unsigned __int16 *)((char *)v48 + WORD2(v49));
          WORD2(v49) += 2;
          int v36 = sub_1002D54E4((uint64_t *)&v48, (uint64_t)buf);
          uint64_t v50 = &v45;
          long long v37 = sub_100360408((uint64_t **)&v52, &v45, (uint64_t)&unk_1007BE9D0, &v50);
          v30 &= v36;
          *(_OWORD *)(v37 + 5) = *(_OWORD *)buf;
          if (v34 <= ++v35) {
            goto LABEL_58;
          }
        }
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
        std::string::size_type v40 = "ByteStream_NumReadBytesAvail(bs) >= 2";
LABEL_66:
        char v41 = v40;
LABEL_67:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1349, v41);
      }
LABEL_58:
      *(void *)buf = &v46;
      long long v38 = (uint64_t **)(sub_1002CC204(v44, (unint64_t *)&v46, (uint64_t)&unk_1007BE9D0, (uint64_t **)buf) + 5);
      if (v38 != (uint64_t **)&v52) {
        sub_1003604CC(v38, (void *)v52, (void *)&v52 + 1);
      }
      sub_1000486F0((uint64_t)&v52, *((void **)&v52 + 1));
      ++v29;
      uint64_t v6 = v33;
      uint64_t v13 = v32;
      a1 = v42;
    }
    while (v29 != v43);
    if (!v30)
    {
LABEL_74:
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR)) {
        sub_100759680();
      }
      sub_10035C724((uint64_t)v21, a2, (uint64_t)"SdpCacheSize");
      sub_10035C724((uint64_t)v22, a2, (uint64_t)"SdpCache");
      sub_10035C724((uint64_t)v23, a2, (uint64_t)"SdpCacheVersion");
    }
    else
    {
LABEL_62:
      sub_10035AED8(a1, a2, "SdpCacheVersion", 1);
      long long v39 = *v6;
      if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v52) = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "SDP cache read complete, writing version", (uint8_t *)&v52, 2u);
      }
    }
    uint64_t v18 = 0;
    int v17 = 1;
  }
  *(_DWORD *)(a2 + 608) = v17;
  free(v13);
  return v18;
}

void sub_10035D21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,void *a24)
{
}

uint64_t sub_10035D244(uint64_t a1, uint64_t a2, void *a3)
{
  if (!a2) {
    return 1;
  }
  uint64_t v6 = (void *)*a3;
  id v7 = (unsigned __int16 *)malloc_type_malloc(0xFA0uLL, 0x113E263BuLL);
  int v8 = qword_100A19E50;
  if (!v7)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      LODWORD(__p) = 136446210;
      *(void *)((char *)&__p + 4) = "pSerializedData";
      _os_log_fault_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_FAULT, "Assertion failed: %{public}s", (uint8_t *)&__p, 0xCu);
      int v8 = qword_100A19E50;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
      sub_10075964C();
    }
    return 1;
  }
  BOOL v9 = v7;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    uint64_t v10 = v39 >= 0 ? &__p : (long long *)__p;
    *(_DWORD *)buf = 136446210;
    char v41 = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Writing SDP record for device %{public}s to disk", buf, 0xCu);
    if (SHIBYTE(v39) < 0) {
      operator delete((void *)__p);
    }
  }
  unsigned int v34 = v9;
  __int16 v35 = 4000;
  __int16 v37 = 2;
  int v36 = 135072;
  BOOL v11 = a3 + 1;
  *BOOL v9 = 0;
  if (v6 != v11)
  {
    unsigned __int16 v12 = 0;
    while (sub_1002D5CE8((uint64_t *)&v34, (unsigned __int8 *)v6[4]))
    {
      if (HIBYTE(v37))
      {
        sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
LABEL_59:
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1423, "ByteStream_NumReadBytesAvail(bs) >= 2");
      }
      uint64_t v13 = HIWORD(v36);
      if ((unsigned __int16)v36 - HIWORD(v36) <= 1) {
        goto LABEL_59;
      }
      if (v37 != 2) {
        sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1423, "(bs).__RWFlag == BYTESTREAM_WRITE");
      }
      *(unsigned __int16 *)((char *)v34 + HIWORD(v36)) = 0;
      HIWORD(v36) += 2;
      long long __p = 0uLL;
      uint64_t v39 = 0;
      sub_100360748((uint64_t)&__p, (uint64_t)(v6 + 5));
      ++v12;
      BOOL v14 = (_OWORD *)__p;
      if ((long long *)__p == (long long *)((char *)&__p + 8))
      {
        LOBYTE(v15) = 0;
        char v19 = 0;
      }
      else
      {
        __int16 v15 = 0;
        while (1)
        {
          if (HIBYTE(v37))
          {
            sub_10025A794((uint64_t)"/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm");
LABEL_54:
            int v33 = "ByteStream_NumReadBytesAvail(bs) >= 2";
LABEL_56:
            sub_10014327C("/Library/Caches/com.apple.xbs/Sources/MobileBluetooth_base/Server/Platforms/Darwin/DeviceSettings.mm", 1430, v33);
          }
          if ((unsigned __int16)v36 - HIWORD(v36) <= 1) {
            goto LABEL_54;
          }
          if (v37 != 2)
          {
            int v33 = "(bs).__RWFlag == BYTESTREAM_WRITE";
            goto LABEL_56;
          }
          *(unsigned __int16 *)((char *)v34 + HIWORD(v36)) = *((_DWORD *)v14 + 8);
          HIWORD(v36) += 2;
          ++v15;
          if (!sub_1002D5CE8((uint64_t *)&v34, (unsigned __int8 *)v14 + 40)) {
            break;
          }
          BOOL v16 = (void *)*((void *)v14 + 1);
          if (v16)
          {
            do
            {
              int v17 = v16;
              BOOL v16 = (void *)*v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              int v17 = (_OWORD *)*((void *)v14 + 2);
              BOOL v18 = *(void *)v17 == (void)v14;
              BOOL v14 = v17;
            }
            while (!v18);
          }
          BOOL v14 = v17;
          if (v17 == (long long *)((char *)&__p + 8)) {
            goto LABEL_30;
          }
        }
        unsigned __int16 v12 = 0;
LABEL_30:
        char v19 = HIBYTE(v15);
      }
      *((unsigned char *)v34 + v13) = v15;
      *((unsigned char *)v34 + v13 + 1) = v19;
      sub_1000486F0((uint64_t)&__p, *((void **)&__p + 1));
      __int16 v20 = (void *)v6[1];
      if (v20)
      {
        do
        {
          __int16 v21 = v20;
          __int16 v20 = (void *)*v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          __int16 v21 = (void *)v6[2];
          BOOL v18 = *v21 == (void)v6;
          uint64_t v6 = v21;
        }
        while (!v18);
      }
      uint64_t v6 = v21;
      if (v21 == v11)
      {
        if (!v12) {
          break;
        }
        unsigned __int16 *v34 = v12;
        uint64_t v22 = HIWORD(v36);
        char v23 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p) = 67109376;
          DWORD1(__p) = v22;
          WORD4(__p) = 1024;
          *(_DWORD *)((char *)&__p + 10) = v12;
          _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "SDP record cache size %d with %d services", (uint8_t *)&__p, 0xEu);
        }
        if (v22 <= 0xFA0)
        {
          sub_10035AED8(a1, a2, "SdpCacheSize", v22);
          sub_100359F94(a1, a2, "SdpCache", (uint64_t)v34, v22);
          sub_10035AED8(a1, a2, "SdpCacheVersion", 1);
          goto LABEL_45;
        }
        uint64_t v32 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p) = 67109120;
          DWORD1(__p) = v22;
          int v28 = "SDP record cache size %d larger than storage";
          int v29 = v32;
          uint32_t v30 = 8;
          goto LABEL_44;
        }
        goto LABEL_45;
      }
    }
  }
  sub_10035C724((uint64_t)v24, a2, (uint64_t)"SdpCacheSize");
  sub_10035C724((uint64_t)v25, a2, (uint64_t)"SdpCache");
  sub_10035C724((uint64_t)v26, a2, (uint64_t)"SdpCacheVersion");
  uint64_t v27 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    int v28 = "Exiting Write SDP due to numOfServices being zero, wiping cache";
    int v29 = v27;
    uint32_t v30 = 2;
LABEL_44:
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v28, (uint8_t *)&__p, v30);
  }
LABEL_45:
  free(v9);
  return 0;
}

void sub_10035D808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12)
{
}

uint64_t sub_10035D82C(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  sub_10035AE14(a1, a2, (uint64_t)"SdpCacheVersion", (_DWORD *)&v6 + 1);
  sub_10035AE14(a1, a2, (uint64_t)"SdpCacheSize", &v6);
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109376;
    int v8 = HIDWORD(v6);
    __int16 v9 = 1024;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "SDP cache [version 0x%x, size 0x%x]", buf, 0xEu);
  }
  return 0;
}

uint64_t sub_10035D914(uint64_t a1, _WORD *a2)
{
  __int16 v15 = &off_100998428;
  BOOL v16 = 0;
  int v12 = 0;
  int v13 = 0;
  if (sub_10047B6EC(a2, (uint64_t)&v15, (_WORD *)&v13 + 1, &v13, (_WORD *)&v12 + 1, &v12))
  {
    int v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18((uint64_t)a2, __p);
      unint64_t v5 = v18 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)buf = 136446210;
      __int16 v20 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Writing HID Data to disk for %{public}s", buf, 0xCu);
      if (v18 < 0) {
        operator delete(*(void **)__p);
      }
    }
    unint64_t v6 = sub_100045F00((uint64_t)&v15);
    unint64_t v14 = v6;
    if (v6 <= 0x1000)
    {
      sub_100359F94(a1, (uint64_t)a2, "HIDDescriptorSize", (uint64_t)&v14, 8);
      uint64_t v7 = sub_10004A6E4((uint64_t)&v15);
      sub_100359F94(a1, (uint64_t)a2, "HIDDescriptor", v7, v14);
      sub_100359F94(a1, (uint64_t)a2, "HIDVendorID", (uint64_t)&v13 + 2, 2);
      sub_100359F94(a1, (uint64_t)a2, "HIDVendorIDSource", (uint64_t)&v13, 2);
      sub_100359F94(a1, (uint64_t)a2, "HIDProductID", (uint64_t)&v12 + 2, 2);
      sub_100359F94(a1, (uint64_t)a2, "HIDVersion", (uint64_t)&v12, 2);
      uint64_t v8 = 0;
      goto LABEL_15;
    }
    __int16 v9 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long __p = 134217984;
      *(void *)&__p[4] = v6;
      _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "Writing HID descriptor size %zu which is too large!", __p, 0xCu);
      __int16 v9 = qword_100A19E50;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      sub_100759750(v6, v9, v10);
    }
  }
  uint64_t v8 = 1;
LABEL_15:
  __int16 v15 = &off_100998428;
  if (v16) {
    sub_1000368F4(v16);
  }
  return v8;
}

void sub_10035DB98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
}

uint64_t sub_10035DBC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  int v4 = (_WORD *)v3;
  uint64_t v5 = v2;
  size_t v17 = 0;
  if (sub_100359EA8(v2, v3, (uint64_t)"HIDDescriptorSize", (uint64_t)&v17, (id)8)) {
    return 1;
  }
  uint64_t v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18((uint64_t)v4, __p);
    uint64_t v8 = v20 >= 0 ? __p : *(unsigned char **)__p;
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Reading HID Data from disk for %{public}s", (uint8_t *)&buf, 0xCu);
    if (v20 < 0) {
      operator delete(*(void **)__p);
    }
  }
  __int16 v9 = (void *)v17;
  if (v17 > 0x1000)
  {
    int v12 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
    {
      *(_DWORD *)long long __p = 134217984;
      *(void *)&__p[4] = v9;
      _os_log_fault_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_FAULT, "Reading HID descriptor size %zu which is too large!", __p, 0xCu);
      __int16 v9 = (void *)v17;
      if (v17 <= 0x1000) {
        goto LABEL_11;
      }
      int v12 = qword_100A19E50;
    }
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      sub_100759834((uint64_t)v9, v12, v13);
    }
    return 1;
  }
LABEL_11:
  bzero(__p, 0x1000uLL);
  __int16 v16 = -1;
  __int16 v15 = 0;
  int v14 = 0;
  if (sub_100359EA8(v5, (uint64_t)v4, (uint64_t)"HIDDescriptor", (uint64_t)__p, v9))
  {
    uint64_t v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007597C0((uint64_t *)&v17, v10, v11);
    }
  }
  sub_100359EA8(v5, (uint64_t)v4, (uint64_t)"HIDVendorID", (uint64_t)&v16, (id)2);
  sub_100359EA8(v5, (uint64_t)v4, (uint64_t)"HIDVendorIDSource", (uint64_t)&v15, (id)2);
  sub_100359EA8(v5, (uint64_t)v4, (uint64_t)"HIDProductID", (uint64_t)&v14 + 2, (id)2);
  sub_100359EA8(v5, (uint64_t)v4, (uint64_t)"HIDVersion", (uint64_t)&v14, (id)2);
  sub_1000335D8(&buf, __p, v17);
  sub_10047B508(v4, (uint64_t)&buf, v16, v15, SHIWORD(v14), v14);
  *(void *)&long long buf = &off_100998428;
  if (*((void *)&buf + 1)) {
    sub_1000368F4(*((atomic_uint **)&buf + 1));
  }
  return 0;
}

void sub_10035DE98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12)
{
  if (a12) {
    sub_1000368F4(a12);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_10035DED4(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5 = 0;
  BOOL result = sub_10035AE14(a1, a2, (uint64_t)"LastSeenTime", &v5);
  if (result) {
    return 1;
  }
  *a3 = v5;
  return result;
}

uint64_t sub_10035DF24(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return 0;
}

uint64_t sub_10035DF4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"MicMode", a3, (id)4);
}

uint64_t sub_10035DF60(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "MicMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035DF98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"DoubleTapAction", a3, (id)4);
}

uint64_t sub_10035DFAC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "DoubleTapAction", (uint64_t)&v4, 4);
  return 0;
}

BOOL sub_10035DFE4(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"InEarDetection", a3);
}

uint64_t sub_10035DFF4(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "InEarDetection", v7);
  return 0;
}

uint64_t sub_10035E064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"SmartRouteMode", a3, (id)4);
}

uint64_t sub_10035E078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"SpatialAudio", a3, (id)4);
}

uint64_t sub_10035E08C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"SpatialAudioAllowed", a3, (id)4);
}

uint64_t sub_10035E0A0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "SpatialAudioAllowed", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035E0D8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "SmartRouteMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035E110(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"ListeningMode", a3, (id)4);
}

uint64_t sub_10035E124(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "ListeningMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035E15C(uint64_t a1, unsigned __int8 *a2, uint64_t *a3)
{
  *(void *)int v36 = 0;
  uint64_t v37 = 0;
  __int16 v38 = 0;
  sub_10007AB48(a3);
  sub_10004191C(__p, "");
  unint64_t v6 = a3[2];
  unint64_t v7 = a3[1];
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a3) >> 3);
    unint64_t v10 = v9 + 1;
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a3) >> 3);
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v10;
    }
    __int16 v35 = a3 + 2;
    if (v12) {
      uint64_t v13 = (char *)sub_1002B3440((uint64_t)(a3 + 2), v12);
    }
    else {
      uint64_t v13 = 0;
    }
    int v14 = &v13[24 * v9];
    long long v15 = *(_OWORD *)__p;
    *((void *)v14 + 2) = v32;
    *(_OWORD *)int v14 = v15;
    __p[1] = 0;
    uint64_t v32 = 0;
    __p[0] = 0;
    uint64_t v17 = *a3;
    unint64_t v16 = a3[1];
    if (v16 == *a3)
    {
      int64x2_t v20 = vdupq_n_s64(v16);
      char v18 = &v13[24 * v9];
    }
    else
    {
      char v18 = &v13[24 * v9];
      do
      {
        long long v19 = *(_OWORD *)(v16 - 24);
        *((void *)v18 - 1) = *(void *)(v16 - 8);
        *(_OWORD *)(v18 - 24) = v19;
        v18 -= 24;
        *(void *)(v16 - 16) = 0;
        *(void *)(v16 - 8) = 0;
        *(void *)(v16 - 24) = 0;
        v16 -= 24;
      }
      while (v16 != v17);
      int64x2_t v20 = *(int64x2_t *)a3;
    }
    uint64_t v21 = (uint64_t)(v14 + 24);
    *a3 = (uint64_t)v18;
    a3[1] = (uint64_t)(v14 + 24);
    *(int64x2_t *)&v33.__r_.__value_.__r.__words[1] = v20;
    uint64_t v22 = a3[2];
    a3[2] = (uint64_t)&v13[24 * v12];
    uint64_t v34 = v22;
    v33.__r_.__value_.__r.__words[0] = v20.i64[0];
    sub_1002B4440((uint64_t)&v33);
    int v23 = SHIBYTE(v32);
    a3[1] = v21;
    if (v23 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v8 = *(_OWORD *)__p;
    *(void *)(v7 + 16) = v32;
    *(_OWORD *)unint64_t v7 = v8;
    a3[1] = v7 + 24;
  }
  for (int i = 1; ; ++i)
  {
    memset(&v33, 0, sizeof(v33));
    sprintf(v36, "AACPVersionInfo%d", i);
    if (sub_100359CC0(a1, a2, v36, &v33)) {
      break;
    }
    unint64_t v25 = a3[1];
    if (v25 >= a3[2])
    {
      uint64_t v27 = sub_1002B42D4((char **)a3, (long long *)&v33);
    }
    else
    {
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10003B098((unsigned char *)a3[1], v33.__r_.__value_.__l.__data_, v33.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v26 = *(_OWORD *)&v33.__r_.__value_.__l.__data_;
        *(void *)(v25 + 16) = *((void *)&v33.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v25 = v26;
      }
      uint64_t v27 = (char *)(v25 + 24);
      a3[1] = v25 + 24;
    }
    a3[1] = (uint64_t)v27;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v33.__r_.__value_.__l.__data_);
    }
  }
  if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v33.__r_.__value_.__l.__data_);
  }
  uint64_t v29 = *a3;
  uint64_t v28 = a3[1];
  if (0xAAAAAAAAAAAAAAABLL * ((v28 - v29) >> 3) < sub_1004804A4((uint64_t)a2, 1)) {
    return 1;
  }
  if (*(char *)(*a3 + 71) < 0)
  {
    if (!*(void *)(*a3 + 56)) {
      return 1;
    }
  }
  else if (!*(unsigned char *)(*a3 + 71))
  {
    return 1;
  }
  return 0;
}

void sub_10035E43C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10035E480(uint64_t a1, uint64_t a2, void *a3)
{
  *(void *)unint64_t v12 = 0;
  uint64_t v13 = 0;
  __int16 v14 = 0;
  sub_100480344(a2, 2u, v10);
  if (v11 < 0)
  {
    unint64_t v9 = v10[1];
    operator delete(v10[0]);
    if (v9) {
      goto LABEL_3;
    }
  }
  else if (v11)
  {
LABEL_3:
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) >= 2)
    {
      unint64_t v6 = 1;
      uint64_t v7 = 24;
      do
      {
        sprintf(v12, "AACPVersionInfo%d", v6);
        sub_100359DF8(a1, a2, v12, (uint64_t *)(*a3 + v7));
        ++v6;
        v7 += 24;
      }
      while (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a3[1] - *a3) >> 3) > v6);
    }
    return 0;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_1007598A4();
  }
  return 1;
}

uint64_t sub_10035E5D0(uint64_t a1, unsigned __int8 *a2, std::string *a3)
{
  return sub_100359CC0(a1, a2, "ANCAssetVersion", a3);
}

uint64_t sub_10035E5E0(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return 0;
}

uint64_t sub_10035E608(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  if (sub_100359EA8(a1, (uint64_t)a2, (uint64_t)"CaseInfoMessageVersion", (uint64_t)a3, (id)1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_100759960((uint64_t)a2);
    }
    return 1;
  }
  if (*a3 >= 2u) {
    uint64_t v6 = 8;
  }
  else {
    uint64_t v6 = 2;
  }
  if (sub_100359EA8(a1, (uint64_t)a2, (uint64_t)"CaseInfoVersion", (uint64_t)(a3 + 16), (id)v6))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_1007598D8((uint64_t)a2);
    }
    return 1;
  }
  sub_100359EA8(a1, (uint64_t)a2, (uint64_t)"CaseInfoVID", (uint64_t)(a3 + 2), (id)2);
  sub_100359EA8(a1, (uint64_t)a2, (uint64_t)"CaseInfoPID", (uint64_t)(a3 + 4), (id)4);
  sub_100359EA8(a1, (uint64_t)a2, (uint64_t)"CaseInfoVIDSource", (uint64_t)(a3 + 8), (id)2);
  sub_100359EA8(a1, (uint64_t)a2, (uint64_t)"CaseInfoColor", (uint64_t)(a3 + 10), (id)1);
  sub_100359CC0(a1, a2, "CaseInfoName", (std::string *)(a3 + 32));
  return 0;
}

uint64_t sub_10035E76C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v6 = (uint64_t *)(a3 + 32);
  if (*a3 >= 2u) {
    uint64_t v7 = 8;
  }
  else {
    uint64_t v7 = 2;
  }
  sub_100359F94(a1, a2, "CaseInfoVersion", (uint64_t)(a3 + 16), v7);
  sub_100359F94(a1, a2, "CaseInfoMessageVersion", (uint64_t)a3, 1);
  sub_100359F94(a1, a2, "CaseInfoVID", (uint64_t)(a3 + 2), 2);
  sub_100359F94(a1, a2, "CaseInfoPID", (uint64_t)(a3 + 4), 4);
  sub_100359F94(a1, a2, "CaseInfoVIDSource", (uint64_t)(a3 + 8), 2);
  sub_100359F94(a1, a2, "CaseInfoColor", (uint64_t)(a3 + 10), 1);
  sub_100359DF8(a1, a2, "CaseInfoName", v6);
  return 0;
}

uint64_t sub_10035E86C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"ListeningModeConfigs", a3, (id)4);
}

uint64_t sub_10035E880(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "ListeningModeConfigs", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035E8B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"SingleClickMode", a3, (id)4);
}

uint64_t sub_10035E8CC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "SingleClickMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035E904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"DoubleClickMode", a3, (id)4);
}

uint64_t sub_10035E918(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "DoubleClickMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035E950(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"ClickHoldMode", a3, (id)4);
}

uint64_t sub_10035E964(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "ClickHoldMode", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035E99C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"SingleClickInterval", a3, (id)4);
}

uint64_t sub_10035E9B0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "SingleClickInterval", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035E9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"ClickHoldInterval", a3, (id)4);
}

uint64_t sub_10035E9FC(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "ClickHoldInterval", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035EA34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"OneBudANCMode", a3, (id)1);
}

uint64_t sub_10035EA48(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_100359F94(a1, a2, "OneBudANCMode", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10035EA80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"VolumeSwipeMode", a3, (id)1);
}

uint64_t sub_10035EA94(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_100359F94(a1, a2, "VolumeSwipeMode", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10035EACC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"VolumeSwipeInterval", a3, (id)4);
}

uint64_t sub_10035EAE0(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "VolumeSwipeInterval", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035EB18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"AdaptiveVolumeMode", a3, (id)1);
}

uint64_t sub_10035EB2C(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_100359F94(a1, a2, "AdaptiveVolumeMode", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10035EB64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"CallManagementConfig", a3, (id)4);
}

uint64_t sub_10035EB78(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "CallManagementConfig", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035EBB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"AdaptiveControlsProxStatusKey", a3, (id)8);
}

uint64_t sub_10035EBC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3;
  sub_100359F94(a1, a2, "AdaptiveControlsProxStatusKey", (uint64_t)&v4, 8);
  return 0;
}

uint64_t sub_10035EBFC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unsigned int v11 = 0;
  if (sub_10035AE14(a1, a2, (uint64_t)"AACPCapabilitiesLength", &v11)) {
    return 1;
  }
  uint64_t v7 = (void *)v11;
  if ((int)v11 < 1) {
    return 12;
  }
  uint64_t v8 = *a3;
  unint64_t v9 = a3[1] - *a3;
  if (v11 != v9)
  {
    char v10 = 0;
    if (v11 <= v9)
    {
      if (v11 < v9) {
        a3[1] = v8 + v11;
      }
    }
    else
    {
      sub_100360A68(a3, v11 - v9, &v10);
      uint64_t v8 = *a3;
    }
  }
  return sub_100359EA8(a1, a2, (uint64_t)"AACPCapabilitiesBits", v8, v7);
}

uint64_t sub_10035ECBC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v7 = a3[1];
  if (v7 == *a3)
  {
    uint64_t v8 = qword_100A19E50;
    BOOL v9 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
    LODWORD(v6) = v7;
    if (v9)
    {
      *(_WORD *)unsigned int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "writeAACPCapabilityBits delete key", v11, 2u);
      uint64_t v6 = *a3;
      uint64_t v7 = a3[1];
    }
  }
  sub_10035AED8(a1, a2, "AACPCapabilitiesLength", (v7 - v6));
  sub_100359F94(a1, a2, "AACPCapabilitiesBits", *a3, a3[1] - *a3);
  return 0;
}

uint64_t sub_10035ED8C(uint64_t a1, uint64_t a2, void *a3)
{
  unsigned int v18 = 0;
  BOOL v6 = sub_10035AE14(a1, a2, (uint64_t)"AACPCapabilitiesIntegersLength", &v18);
  if (v6) {
    return 1;
  }
  uint64_t v9 = v18;
  if (v18 - 256 < 0xFFFFFF01) {
    return 12;
  }
  if (v18 != (uint64_t)(a3[1] - *a3) >> 2)
  {
    *(_DWORD *)long long buf = 0;
    sub_10035EF6C((uint64_t)a3, v18, buf);
  }
  __chkstk_darwin(v6, v7);
  char v10 = (char *)v16 - ((4 * v9 + 15) & 0x7FFFFFFF0);
  bzero(v10, 4 * v9);
  if (sub_100359EA8(a1, a2, (uint64_t)"AACPCapabulitiesIntegers", (uint64_t)v10, (id)(4 * v9))) {
    return 1;
  }
  v16[1] = v16;
  uint64_t v12 = 0;
  uint64_t v13 = qword_100A19E50;
  __int16 v14 = v10 + 3;
  *(void *)&long long v11 = 67109376;
  long long v17 = v11;
  do
  {
    int v15 = *(_DWORD *)(v14 - 3);
    *(_DWORD *)(*a3 + 4 * v12) = v15;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = v17;
      int v20 = v12;
      __int16 v21 = 1024;
      int v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "readAACPCapabilityIntegers: index %d, value %d", buf, 0xEu);
      uint64_t v13 = qword_100A19E50;
    }
    v14 += 4;
    ++v12;
  }
  while (v9 != v12);
  return 0;
}

void sub_10035EF6C(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    sub_100360B90((void **)a1, a2 - v3, a3);
  }
}

uint64_t sub_10035EF9C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v3 = a3[1] - *a3;
  if (v3 > 0x3FC) {
    return 3;
  }
  uint64_t v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = sub_10035AED8(a1, a2, "AACPCapabilitiesIntegersLength", v3 >> 2);
  uint64_t v9 = a3[1];
  uint64_t v10 = v9 - *a3;
  if (v9 == *a3)
  {
    int v23 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, (os_log_type_t)v10))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "writeAACPCapabilityIntegers delete key", buf, 2u);
    }
    sub_100359F94(v7, v6, "AACPCapabulitiesIntegers", 0, 0);
  }
  else
  {
    __chkstk_darwin(v8, v10);
    uint64_t v12 = (char *)v24 - v11;
    bzero((char *)v24 - v11, v13);
    uint64_t v15 = *a3;
    uint64_t v16 = a3[1];
    if (v16 == *a3)
    {
      uint64_t v22 = 0;
    }
    else
    {
      v24[1] = v24;
      uint64_t v25 = v7;
      uint64_t v26 = v6;
      unint64_t v17 = 0;
      unsigned int v18 = qword_100A19E50;
      *(void *)&long long v14 = 67109376;
      long long v27 = v14;
      do
      {
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          int v19 = *(_DWORD *)(v15 + 4 * v17);
          *(_DWORD *)long long buf = v27;
          int v29 = v17;
          __int16 v30 = 1024;
          int v31 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "writeAACPCapabilityIntegers: index %d, value %d", buf, 0xEu);
          unsigned int v18 = qword_100A19E50;
          uint64_t v15 = *a3;
          uint64_t v16 = a3[1];
        }
        uint64_t v20 = v15 + 4 * v17;
        __int16 v21 = &v12[(4 * v17)];
        *(_WORD *)__int16 v21 = *(_DWORD *)v20;
        v21[2] = *(_WORD *)(v20 + 2);
        v21[3] = *(unsigned char *)(v20 + 3);
        ++v17;
        uint64_t v22 = v16 - v15;
      }
      while (v17 < (v16 - v15) >> 2);
      uint64_t v7 = v25;
      uint64_t v6 = v26;
    }
    sub_100359F94(v7, v6, "AACPCapabulitiesIntegers", (uint64_t)v12, v22);
  }
  return 0;
}

BOOL sub_10035F1E0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"SpatialAudioPrefInitialized", a3);
}

uint64_t sub_10035F1F0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "SpatialAudioPrefInitialized", v7);
  return 0;
}

uint64_t sub_10035F260(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "GuestMode", v7);
  return 0;
}

BOOL sub_10035F2D0(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"GuestMode", a3);
}

uint64_t sub_10035F2E0(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "GuestModeNotInContacts", v7);
  return 0;
}

BOOL sub_10035F350(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"GuestModeNotInContacts", a3);
}

uint64_t sub_10035F360(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  return 0;
}

BOOL sub_10035F388(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  int v5 = 0;
  BOOL result = sub_10035AE14(a1, a2, (uint64_t)"GuestLastSeenTime", &v5);
  if (result) {
    return 1;
  }
  *a3 = v5;
  return result;
}

uint64_t sub_10035F3D8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "OwnerAutoAggregation", v7);
  return 0;
}

BOOL sub_10035F448(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"OwnerAutoAggregation", a3);
}

uint64_t sub_10035F458(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "OwnerNoMagicPairing", v7);
  return 0;
}

BOOL sub_10035F4C8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"OwnerNoMagicPairing", a3);
}

uint64_t sub_10035F4D8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3) {
    uint64_t v7 = &__kCFBooleanTrue;
  }
  else {
    uint64_t v7 = &__kCFBooleanFalse;
  }
  sub_10035BE74(a1, a2, "GuestPairingMode", v7);
  return 0;
}

BOOL sub_10035F548(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_10035B218(a1, a2, (uint64_t)"GuestPairingMode", a3);
}

uint64_t sub_10035F558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"ColorInfo", a3, (id)4);
}

uint64_t sub_10035F56C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "ColorInfo", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035F5A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"MIDFeatureBits", a3, (id)4);
}

uint64_t sub_10035F5B8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "MIDFeatureBits", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035F5F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"DosimetrySensitivity", a3, (id)4);
}

uint64_t sub_10035F604(uint64_t a1, uint64_t a2, float a3)
{
  float v4 = a3;
  sub_100359F94(a1, a2, "DosimetrySensitivity", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035F63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v18 = 0;
  memset(v17, 0, sizeof(v17));
  if (sub_100359EA8(a1, a2, (uint64_t)"DosimetryVolumeCurve", (uint64_t)v17, (id)0x44)) {
    return 1;
  }
  uint64_t v5 = 0;
  uint64_t v6 = (void *)(a3 + 16);
  uint64_t v7 = *(_DWORD **)(a3 + 8);
  do
  {
    if ((unint64_t)v7 >= *v6)
    {
      uint64_t v9 = *(_DWORD **)a3;
      uint64_t v10 = ((uint64_t)v7 - *(void *)a3) >> 2;
      unint64_t v11 = v10 + 1;
      if ((unint64_t)(v10 + 1) >> 62) {
        abort();
      }
      uint64_t v12 = *v6 - (void)v9;
      if (v12 >> 1 > v11) {
        unint64_t v11 = v12 >> 1;
      }
      if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v13 = v11;
      }
      if (v13)
      {
        long long v14 = (char *)sub_1002C44F0(a3 + 16, v13);
        uint64_t v9 = *(_DWORD **)a3;
        uint64_t v7 = *(_DWORD **)(a3 + 8);
      }
      else
      {
        long long v14 = 0;
      }
      uint64_t v15 = &v14[4 * v10];
      *(_DWORD *)uint64_t v15 = *((_DWORD *)v17 + v5);
      uint64_t v8 = v15 + 4;
      while (v7 != v9)
      {
        int v16 = *--v7;
        *((_DWORD *)v15 - 1) = v16;
        v15 -= 4;
      }
      *(void *)a3 = v15;
      *(void *)(a3 + 8) = v8;
      *(void *)(a3 + 16) = &v14[4 * v13];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *uint64_t v7 = *((_DWORD *)v17 + v5);
      uint64_t v8 = v7 + 1;
    }
    *(void *)(a3 + 8) = v8;
    ++v5;
    uint64_t v7 = v8;
  }
  while (v5 != 17);
  return 0;
}

uint64_t sub_10035F7B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(const void **)a3;
  uint64_t v6 = *(void *)(a3 + 8);
  __chkstk_darwin(a1, v6 - *(void *)a3);
  uint64_t v8 = (char *)&v12 - v7;
  bzero((char *)&v12 - v7, v9);
  size_t v10 = v6 - (void)v5;
  if (v10) {
    memmove(v8, v5, v10);
  }
  sub_100359F94(a1, a2, "DosimetryVolumeCurve", (uint64_t)v8, v10);
  return 0;
}

uint64_t sub_10035F88C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"EncryptionKeySize", a3, (id)1);
}

uint64_t sub_10035F8A0(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_100359F94(a1, a2, "EncryptionKeySize", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10035F8D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"EncryptionMode", a3, (id)1);
}

uint64_t sub_10035F8EC(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_100359F94(a1, a2, "EncryptionMode", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10035F924(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"LowSecurityStatus", a3, (id)4);
}

uint64_t sub_10035F938(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "LowSecurityStatus", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035F970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"HIDDeviceBehavior", a3, (id)4);
}

uint64_t sub_10035F984(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "HIDDeviceBehavior", (uint64_t)&v4, 4);
  return 0;
}

uint64_t sub_10035F9BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"UserSelectedDeviceType", a3, (id)1);
}

uint64_t sub_10035F9D0(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  sub_100359F94(a1, a2, "UserSelectedDeviceType", (uint64_t)&v4, 1);
  return 0;
}

uint64_t sub_10035FA08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"CarPlayType", a3, (id)4);
}

uint64_t sub_10035FA1C(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "CarPlayType", (uint64_t)&v4, 4);
  return 0;
}

void sub_10035FA54(uint64_t a1, uint64_t a2)
{
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  if (sub_10035AE14(a1, a2, (uint64_t)"DeviceIdVendorSource", (_DWORD *)&v29 + 1))
  {
    uint64_t v4 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    sub_100474E18(a2, __p);
    if (v36 >= 0) {
      uint64_t v5 = __p;
    }
    else {
      uint64_t v5 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v5;
    uint64_t v6 = "Did not read property DID_VID_SOURCE_KEY on device %{public}s";
LABEL_19:
    size_t v9 = v4;
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v6, buf, 0xCu);
    if (SHIBYTE(v36) < 0) {
      operator delete(*(void **)__p);
    }
    return;
  }
  if (sub_10035AE14(a1, a2, (uint64_t)"DeviceIdVendor", &v29))
  {
    uint64_t v4 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    sub_100474E18(a2, __p);
    if (v36 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    uint64_t v6 = "Did not read property DID_VID_KEY on device %{public}s";
    goto LABEL_19;
  }
  if (sub_10035AE14(a1, a2, (uint64_t)"DeviceIdProduct", (_DWORD *)&v28 + 1))
  {
    uint64_t v4 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    sub_100474E18(a2, __p);
    if (v36 >= 0) {
      uint64_t v8 = __p;
    }
    else {
      uint64_t v8 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v8;
    uint64_t v6 = "Did not read property DID_PID_KEY on device %{public}s";
    goto LABEL_19;
  }
  BOOL v10 = sub_10035AE14(a1, a2, (uint64_t)"DeviceIdVersion", &v28);
  unint64_t v11 = qword_100A19E50;
  BOOL v12 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (!v12) {
      return;
    }
    sub_100474E18(a2, __p);
    if (v36 >= 0) {
      unint64_t v13 = __p;
    }
    else {
      unint64_t v13 = *(unsigned char **)__p;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v13;
    uint64_t v6 = "Did not read property DID_VERSION_KEY on device %{public}s";
    size_t v9 = v11;
    goto LABEL_20;
  }
  if (v12)
  {
    sub_100474E18(a2, buf);
    if (v31 >= 0) {
      long long v14 = buf;
    }
    else {
      long long v14 = *(unsigned char **)buf;
    }
    int v16 = v29;
    int v15 = HIDWORD(v29);
    int v18 = v28;
    int v17 = HIDWORD(v28);
    *(_DWORD *)long long __p = 136447234;
    *(void *)&__p[4] = v14;
    __int16 v33 = 1024;
    int v34 = HIDWORD(v29);
    __int16 v35 = 1024;
    int v36 = v29;
    __int16 v37 = 1024;
    int v38 = HIDWORD(v28);
    __int16 v39 = 1024;
    int v40 = v28;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "readDID %{public}s deviceId information: vidSrc 0x%x vid 0x%x pid 0x%x version 0x%x", __p, 0x24u);
    if (v31 < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    int v16 = v29;
    int v15 = HIDWORD(v29);
    int v18 = v28;
    int v17 = HIDWORD(v28);
  }
  sub_10047C89C(a2, v15, v16, v17, v18);
  if (!sub_10035AE14(a1, a2, (uint64_t)"AppleDevFeatures", (_DWORD *)&v27 + 1))
  {
    int v19 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v20 = v36 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Did read property APPLE_DEV_FEATURES_KEY on device %{public}s", buf, 0xCu);
      if (SHIBYTE(v36) < 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_10047CC64(a2, SHIDWORD(v27), 1);
  }
  BOOL v21 = sub_10035AE14(a1, a2, (uint64_t)"AppleDevFeaturesVersion", &v27);
  if (!v21)
  {
    uint64_t v22 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      int v23 = v36 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Did read property APPLE_DEV_FEATURES_VERSION_KEY on device %{public}s", buf, 0xCu);
      if (SHIBYTE(v36) < 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_10047D0F8(a2, (unsigned __int16)v27);
  }
  if (!sub_10035C684(v21, a2, (uint64_t)"AppleDevExtendedFeatures", &v26))
  {
    int v24 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, __p);
      uint64_t v25 = v36 >= 0 ? __p : *(unsigned char **)__p;
      *(_DWORD *)long long buf = 136446210;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Did read property APPLE_DEV_EXTENDED_FEATURES_KEY on device %{public}s", buf, 0xCu);
      if (SHIBYTE(v36) < 0) {
        operator delete(*(void **)__p);
      }
    }
    sub_10047CF64(a2, __ROR8__(v26, 32), 1);
  }
}

void sub_10035FF84(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  if (sub_10047B7A8(a2, (_DWORD *)&v15 + 1, &v15, (_DWORD *)&v14 + 1, &v14))
  {
    sub_10035AED8(a1, a2, "DeviceIdVendorSource", HIDWORD(v15));
    sub_10035AED8(a1, a2, "DeviceIdVendor", v15);
    sub_10035AED8(a1, a2, "DeviceIdProduct", HIDWORD(v14));
    sub_10035AED8(a1, a2, "DeviceIdVersion", v14);
    if (sub_10047D434(a2, (_DWORD *)&v13 + 1))
    {
      sub_10035AED8(a1, a2, "AppleDevFeatures", HIDWORD(v13));
      uint64_t v4 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        uint64_t v5 = v11 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        int v17 = v5;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Did write APPLE_DEV_FEATURES_KEY info for %{public}s to disk", buf, 0xCu);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    if (sub_10047D4D4(a2, &v13))
    {
      sub_10035AED8(a1, a2, "AppleDevFeaturesVersion", v13);
      uint64_t v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        uint64_t v7 = v11 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136446210;
        int v17 = v7;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Did write APPLE_DEV_FEATURES_VERSION_KEY info for %{public}s to disk", buf, 0xCu);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    if (sub_10047D4F0(a2, &v12))
    {
      sub_10035C96C(a1, a2, "AppleDevExtendedFeatures", HIDWORD(v12) | ((unint64_t)v12 << 32));
      uint64_t v8 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(a2, __p);
        if (v11 >= 0) {
          size_t v9 = __p;
        }
        else {
          size_t v9 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136446210;
        int v17 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Did write APPLE_DEV_EXTENDED_FEATURES_KEY info for %{public}s to disk", buf, 0xCu);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_1007599E8(a2);
  }
}

uint64_t sub_100360294(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100359EA8(a1, a2, (uint64_t)"GAPAFlags", a3, (id)4);
}

uint64_t sub_1003602A8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  sub_100359F94(a1, a2, "GAPAFlags", (uint64_t)&v4, 4);
  return 0;
}

void sub_1003602E0(id a1)
{
}

void sub_100360324()
{
}

uint64_t *sub_100360348(uint64_t **a1, unsigned int *a2, uint64_t a3, unsigned int **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    char v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_100036CA0(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t **sub_100360408(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        size_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    size_t v9 = a1 + 1;
LABEL_10:
    char v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = 0;
    *((void *)v11 + 6) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_1003604CC(uint64_t **result, void *a2, void *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    *BOOL result = (uint64_t *)(result + 1);
    _DWORD v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      unsigned int v8 = (uint64_t *)v6[1];
    }
    else {
      unsigned int v8 = v6;
    }
    uint64_t v14 = result;
    uint64_t v15 = v8;
    int v16 = v8;
    if (v8)
    {
      uint64_t v15 = sub_1002D8040((uint64_t)v8);
      if (a2 != a3)
      {
        size_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          *(_OWORD *)(v8 + 5) = *(_OWORD *)(v9 + 5);
          sub_100360638(v5, (uint64_t)v8);
          unsigned int v8 = v15;
          int v16 = v15;
          if (v15) {
            uint64_t v15 = sub_1002D8040((uint64_t)v15);
          }
          unsigned int v10 = (void *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              unsigned int v10 = (void *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (void *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              size_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          size_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    BOOL result = (uint64_t **)sub_1002D8094((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      BOOL result = (uint64_t **)sub_1003606A8(v5, (uint64_t)(a2 + 4));
      uint64_t v12 = (void *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (void *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_100360624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002D8094((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100360638(uint64_t **a1, uint64_t a2)
{
  unint64_t v3 = a1 + 1;
  int v4 = a1[1];
  if (v4)
  {
    do
    {
      while (1)
      {
        unint64_t v3 = (uint64_t **)v4;
        if (*(_DWORD *)(a2 + 32) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        int v4 = (uint64_t *)*v4;
        uint64_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      int v4 = (uint64_t *)v4[1];
    }
    while (v4);
    uint64_t v5 = v3 + 1;
  }
  else
  {
    uint64_t v5 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v3, v5, (uint64_t *)a2);
  return a2;
}

_OWORD *sub_1003606A8(uint64_t **a1, uint64_t a2)
{
  int v4 = operator new(0x38uLL);
  uint64_t v5 = v4;
  void v4[2] = *(_OWORD *)a2;
  *((void *)v4 + 6) = *(void *)(a2 + 16);
  uint64_t v6 = a1 + 1;
  uint64_t v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        uint64_t v6 = (uint64_t **)v7;
        if (*((_DWORD *)v4 + 8) >= *((_DWORD *)v7 + 8)) {
          break;
        }
        uint64_t v7 = (uint64_t *)*v7;
        unsigned int v8 = v6;
        if (!*v6) {
          goto LABEL_8;
        }
      }
      uint64_t v7 = (uint64_t *)v7[1];
    }
    while (v7);
    unsigned int v8 = v6 + 1;
  }
  else
  {
    unsigned int v8 = a1 + 1;
  }
LABEL_8:
  sub_100036CA0(a1, (uint64_t)v6, v8, (uint64_t *)v4);
  return v5;
}

uint64_t sub_100360748(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  sub_1003607A0((_OWORD *)a1, *(unsigned int **)a2, (unsigned int *)(a2 + 8));
  return a1;
}

void sub_100360788(_Unwind_Exception *a1)
{
  sub_1000486F0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

_OWORD *sub_1003607A0(_OWORD *result, unsigned int *a2, unsigned int *a3)
{
  if (a2 != a3)
  {
    int v4 = a2;
    uint64_t v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t *)result + 1;
    do
    {
      BOOL result = sub_10036082C(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint64_t v7 = (unsigned int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unsigned int v8 = v7;
          uint64_t v7 = *(unsigned int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unsigned int v8 = (unsigned int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          int v4 = v8;
        }
        while (!v9);
      }
      int v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

_OWORD *sub_10036082C(uint64_t **a1, uint64_t *a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v10 = 0;
  BOOL v11 = 0;
  uint64_t v6 = sub_1003608C0(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (_OWORD *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    uint64_t v7 = operator new(0x38uLL);
    _DWORD v7[2] = *(_OWORD *)a4;
    *((void *)v7 + 6) = *(void *)(a4 + 16);
    sub_100036CA0(a1, (uint64_t)v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_1003608C0(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  uint64_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (unsigned int v6 = *a5, v7 = *((_DWORD *)a2 + 8), *a5 < v7))
  {
    unsigned int v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      BOOL v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        BOOL v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      uint64_t v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        uint64_t v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 8) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          int v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 32);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          uint64_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        uint64_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      int v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    uint64_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      uint64_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    int v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      int v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 8))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          BOOL v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 32);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          uint64_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        uint64_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      BOOL v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void sub_100360A68(void *a1, unint64_t a2, unsigned char *a3)
{
  unint64_t v4 = a2;
  unsigned int v7 = (unsigned char *)a1[1];
  uint64_t v6 = a1[2];
  if (v6 - (uint64_t)v7 >= a2)
  {
    if (a2)
    {
      uint64_t v13 = &v7[a2];
      do
      {
        *v7++ = *a3;
        --v4;
      }
      while (v4);
      unsigned int v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    unsigned int v8 = &v7[-*a1];
    unint64_t v9 = (unint64_t)&v8[a2];
    if ((uint64_t)&v8[a2] < 0) {
      abort();
    }
    unint64_t v10 = v6 - *a1;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = operator new(v11);
    }
    else {
      uint64_t v12 = 0;
    }
    BOOL v14 = &v8[(void)v12];
    unsigned int v15 = &v8[(void)v12 + v4];
    uint64_t v16 = &v8[(void)v12];
    do
    {
      *v16++ = *a3;
      --v4;
    }
    while (v4);
    int v17 = (unsigned char *)*a1;
    if (v7 != (unsigned char *)*a1)
    {
      do
      {
        char v18 = *--v7;
        *--BOOL v14 = v18;
      }
      while (v7 != v17);
      unsigned int v7 = (unsigned char *)*a1;
    }
    *a1 = v14;
    a1[1] = v15;
    a1[2] = (char *)v12 + v11;
    if (v7)
    {
      operator delete(v7);
    }
  }
}

void sub_100360B90(void **a1, unint64_t a2, _DWORD *a3)
{
  unsigned int v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unsigned int v7 = v8;
  unint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      int v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unsigned int v15 = (char *)sub_1002C44F0(v6, v14);
    }
    else {
      unsigned int v15 = 0;
    }
    char v18 = &v15[4 * v12];
    int v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    BOOL v21 = v18;
    do
    {
      *(_DWORD *)BOOL v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    unsigned int v22 = &v15[4 * v14];
    int v23 = (char *)*a1;
    for (int i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void sub_100360CB0(void *a1, int a2, int a3, const char *a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint8_t buf)
{
  _os_log_error_impl(a1, v13, OS_LOG_TYPE_ERROR, a4, &buf, 0xCu);
}

void *sub_100360CD0(void *a1)
{
  *a1 = &off_1009A92E8;
  uint64_t v2 = dispatch_queue_attr_make_with_autorelease_frequency(0, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
  a1[1] = dispatch_queue_create("com.apple.MobileBluetooth.LeDeviceCache", v2);
  return a1;
}

uint64_t sub_100360D30(uint64_t a1)
{
  *(void *)a1 = &off_1009A92E8;
  dispatch_release(*(dispatch_object_t *)(a1 + 8));
  return a1;
}

void sub_100360D78(uint64_t a1)
{
  *(void *)a1 = &off_1009A92E8;
  dispatch_release(*(dispatch_object_t *)(a1 + 8));

  operator delete();
}

uint64_t sub_100360DE0(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  unsigned int v7 = &v6;
  uint64_t v8 = 0x2020000000;
  char v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100360E90;
  block[3] = &unk_100998860;
  block[4] = &v6;
  void block[5] = a1;
  block[6] = a2;
  dispatch_sync(v2, block);
  uint64_t v3 = *((unsigned __int8 *)v7 + 24);
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_100360E90(void *a1)
{
  uint64_t v2 = a1[5];
  id v3 = +[LeDeviceCache sharedInstance];
  *(unsigned char *)(*(void *)(a1[4] + 8) + 24) = [v3 initializeDatabases:a1[6] queue:*(void *)(v2 + 8)];
}

void sub_100360EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100360F10(uint64_t a1)
{
}

void sub_100360F20(id a1)
{
  id v1 = +[LeDeviceCache sharedInstance];
  [v1 tryLoadProtectedCache];
}

void sub_100360F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100360F84(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  id v5 = a2;
  uint64_t v12 = 0;
  uint64_t v13 = &v12;
  uint64_t v14 = 0x4812000000;
  unsigned int v15 = sub_10004CFBC;
  uint64_t v16 = sub_10004CDA8;
  int v17 = "";
  memset(v18, 0, sizeof(v18));
  uint64_t v6 = *(NSObject **)(a1 + 8);
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  _DWORD v9[2] = sub_1003610F0;
  v9[3] = &unk_1009A9320;
  unint64_t v11 = &v12;
  id v7 = v5;
  id v10 = v7;
  dispatch_sync(v6, v9);
  uint64_t v8 = v13;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  sub_1002B3390((char *)a3, (long long *)v8[6], (long long *)v8[7], 0xAAAAAAAAAAAAAAABLL * ((v8[7] - v8[6]) >> 3));

  _Block_object_dispose(&v12, 8);
  int v19 = (void **)v18;
  sub_100051568(&v19);
}

void sub_1003610C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, uint64_t a7, ...)
{
  va_start(va, a7);

  _Block_object_dispose(va, 8);
  *(void *)(v9 - 40) = v8;
  sub_100051568((void ***)(v9 - 40));

  _Unwind_Resume(a1);
}

void sub_1003610F0(uint64_t a1)
{
  id v3 = +[LeDeviceCache sharedInstance];
  unint64_t v4 = v3;
  if (v3)
  {
    [v3 findUUIDsWithCustomProperties:*(void *)(a1 + 32)];
  }
  else
  {
    long long v6 = 0uLL;
    uint64_t v7 = 0;
  }
  uint64_t v5 = *(void *)(*(void *)(a1 + 40) + 8);
  sub_10036A268((uint64_t *)(v5 + 48));
  *(_OWORD *)(v5 + 48) = v6;
  *(void *)(v5 + 64) = v7;
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  uint64_t v8 = (void **)&v6;
  sub_100051568(&v8);
}

void sub_1003611A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003611B0(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  id v7 = a2;
  uint64_t v17 = 0;
  char v18 = &v17;
  uint64_t v19 = 0x2020000000;
  uint64_t v20 = 0;
  uint64_t v8 = *(NSObject **)(a1 + 8);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_100361290;
  v12[3] = &unk_1009A9348;
  id v13 = v7;
  uint64_t v14 = &v17;
  uint64_t v15 = a3;
  char v16 = a4;
  id v9 = v7;
  dispatch_sync(v8, v12);
  uint64_t v10 = v18[3];

  _Block_object_dispose(&v17, 8);
  return v10;
}

void sub_100361290(uint64_t a1)
{
  id v3 = +[LeDeviceCache sharedInstance];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 loadPairedDevice:*(void *)(a1 + 32) address:*(void *)(a1 + 48) ifMissing:*(unsigned __int8 *)(a1 + 56)];
}

void sub_100361308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100361318(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  long long v6 = *(NSObject **)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1003613B4;
  v8[3] = &unk_100998A38;
  id v9 = v5;
  uint64_t v10 = a2;
  id v7 = v5;
  dispatch_sync(v6, v8);
}

void sub_1003613B4(uint64_t a1)
{
  id v3 = +[LeDeviceCache sharedInstance];
  [v3 removeDevicesDuplicatesOf:*(void *)(a1 + 40) originalUuid:*(void *)(a1 + 32)];
}

void sub_100361418(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100361428(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v11 = 0;
  uint64_t v12 = &v11;
  uint64_t v13 = 0x2020000000;
  uint64_t v14 = 0;
  unint64_t v4 = *(NSObject **)(a1 + 8);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1003614F0;
  v8[3] = &unk_1009A9320;
  id v9 = v3;
  uint64_t v10 = &v11;
  id v5 = v3;
  dispatch_sync(v4, v8);
  uint64_t v6 = v12[3];

  _Block_object_dispose(&v11, 8);
  return v6;
}

void sub_1003614F0(uint64_t a1)
{
  id v3 = +[LeDeviceCache sharedInstance];
  *(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = [v3 readDevice:*(void *)(a1 + 32)];
}

void sub_100361560(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100361570(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  id v7 = &v6;
  uint64_t v8 = 0x2020000000;
  uint64_t v9 = 0;
  uint64_t v2 = *(NSObject **)(a1 + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_100361618;
  v5[3] = &unk_100999720;
  v5[4] = &v6;
  void v5[5] = a2;
  dispatch_sync(v2, v5);
  uint64_t v3 = v7[3];
  _Block_object_dispose(&v6, 8);
  return v3;
}

void sub_100361618(uint64_t a1)
{
  uint64_t v3 = +[LeDeviceCache sharedInstance];
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = [v3 readDeviceByAddress:*(void *)(a1 + 40)];
}

void sub_100361688(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100361698(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  uint64_t v14 = 0;
  uint64_t v15 = &v14;
  uint64_t v16 = 0x2020000000;
  int v17 = 0;
  uint64_t v6 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100361768;
  block[3] = &unk_1009A9370;
  uint64_t v12 = &v14;
  uint64_t v13 = a3;
  id v11 = v5;
  id v7 = v5;
  dispatch_sync(v6, block);
  uint64_t v8 = *((unsigned int *)v15 + 6);

  _Block_object_dispose(&v14, 8);
  return v8;
}

void sub_100361768(void *a1)
{
  id v2 = +[LeDeviceCache sharedInstance];
  *(_DWORD *)(*(void *)(a1[5] + 8) + 24) = [v2 duplicatePairedDevicesForAddress:a1[6] originalUuid:a1[4]];
}

void sub_1003617D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003617E4(uint64_t a1, void *a2)
{
  if (!*a2 && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT)) {
    sub_100759A70();
  }
  unint64_t v4 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_10036189C;
  block[3] = &unk_100997528;
  void block[4] = a2;
  dispatch_sync(v4, block);
}

void sub_10036189C(uint64_t a1)
{
  id v2 = +[LeDeviceCache sharedInstance];
  [v2 writeDevice:*(void *)(a1 + 32)];
}

void sub_1003618F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100361908(uint64_t a1, uint64_t a2)
{
  id v2 = *(NSObject **)(a1 + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_100361978;
  block[3] = &unk_100997528;
  void block[4] = a2;
  dispatch_sync(v2, block);
}

void sub_100361978(uint64_t a1)
{
  id v2 = +[LeDeviceCache sharedInstance];
  [v2 removeDevice:*(void *)(a1 + 32) internal:0];
}

void sub_1003619D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003619E8(uint64_t a1)
{
}

void sub_1003619F8(id a1)
{
  id v1 = +[LeDeviceCache sharedInstance];
  [v1 clearAllDatabases];
}

void sub_100361A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100361A5C(uint64_t a1)
{
}

void sub_100361A6C(id a1)
{
  id v1 = +[LeDeviceCache sharedInstance];
  [v1 printDebug];
}

void sub_100361ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100361B24(id a1)
{
  if (!qword_100A12470)
  {
    id v1 = objc_alloc_init(LeDeviceCache);
    id v2 = (void *)qword_100A12470;
    qword_100A12470 = (uint64_t)v1;
  }
}

void sub_100361E28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }

  _Unwind_Resume(a1);
}

void sub_10036206C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036232C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036281C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void sub_1003628E4(uint64_t a1)
{
  id v2 = qword_100A19E78;
  if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
  {
    v8[0] = 67109120;
    v8[1] = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d", (uint8_t *)v8, 8u);
  }
  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_FAULT))
  {
    sub_100759CA0();
  }
  id v5 = *(void **)(a1 + 32);
  uint64_t v3 = (id *)(a1 + 32);
  id v4 = v5;
  if (!v5[3])
  {
    uint64_t v6 = qword_100A19E78;
    if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Received first unlock notification - loading protected cache", (uint8_t *)v8, 2u);
      id v4 = *v3;
    }
    if ([v4 loadDatabase:1])
    {
      [*v3 updateProtectedCacheMetrics];
    }
    else
    {
      id v7 = qword_100A19E78;
      if (os_log_type_enabled((os_log_t)qword_100A19E78, OS_LOG_TYPE_ERROR)) {
        sub_100759C18(v3, v7);
      }
    }
  }
}

void sub_100362B3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100362F20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100363484(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100363800(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100363B00(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100363C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003642C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  _Unwind_Resume(a1);
}

void sub_100364824(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100365918(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, void *a18, void *a19, void *a20,uint64_t a21,void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  _Unwind_Resume(a1);
}

void sub_100365D14(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003666D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

void sub_100366A08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100366C64(uint64_t a1)
{
  return (***(uint64_t (****)(void, void, void))(*(void *)(a1 + 32) + 8))(*(void *)(*(void *)(a1 + 32) + 8), *(unsigned int *)(a1 + 40), *(unsigned int *)(a1 + 44));
}

void sub_100366D70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100367220(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_100051568((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_10036777C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_100051568((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100367A8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100367D1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100367F18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100368188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003684C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036875C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003689AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100368AA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003690A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,void *a31,void *a32,void *a33,void *a34,void *a35,void *a36,void *a37,void *a38,void *a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  _Unwind_Resume(a1);
}

void sub_1003692B0(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_100369784(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036A064(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,void *a22,void *a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10036A138(uint64_t a1, void *a2, uint64_t a3)
{
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = a3;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 168) = 0;
  *(_WORD *)(a1 + 172) = 0;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 83) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 132) = 0u;
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 158) = 0;
  *(void *)(a1 + 176) = a1 + 184;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_DWORD *)(a1 + 234) = 0;
  *(unsigned char *)(a1 + 238) = 0;
  *(_OWORD *)(a1 + 240) = 0u;
  *(void *)(a1 + 256) = &_mh_execute_header;
  *(_WORD *)(a1 + 264) = 0;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_DWORD *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 356) = 3;
  *(_DWORD *)(a1 + 364) = 0;
  *(void *)(a1 + 357) = 0;
  *(unsigned char *)(a1 + 368) = 1;
  *(void *)(a1 + 372) = 0;
  *(void *)(a1 + 379) = 0;
  *(unsigned char *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  *(_OWORD *)(a1 + 460) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(unsigned char *)(a1 + 476) = 127;
  *(void *)(a1 + 480) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(_DWORD *)(a1 + 532) = 0;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(void *)(a1 + 552) = 0;
  *(unsigned char *)(a1 + 560) = 0;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_DWORD *)(a1 + 527) = 0;
  *(void *)(a1 + 569) = 0;
  *(void *)(a1 + 562) = 0;
  *(_DWORD *)(a1 + 607) = 0;
  *(void *)(a1 + 600) = 0;
  *(_OWORD *)(a1 + 584) = 0u;
  return a1;
}

void sub_10036A268(uint64_t *a1)
{
  if (*a1)
  {
    sub_10007AB48(a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

void sub_10036A2A4(id a1)
{
}

void sub_10036A434()
{
}

void sub_10036A474(void *a1@<X0>, const char *a2@<X3>, uint8_t *a3@<X4>, NSObject *a4@<X8>)
{
  _os_log_fault_impl(a1, a4, OS_LOG_TYPE_FAULT, a2, a3, 0x16u);
}

void sub_10036A49C()
{
  qword_100A19A58[0] = objc_opt_class();
  qword_100A19A60 = objc_opt_class();
  qword_100A19A68 = objc_opt_class();
  qword_100A19A70 = objc_opt_class();
  qword_100A19A78 = objc_opt_class();
  qword_100A19A80 = objc_opt_class();
  qword_100A19A88 = objc_opt_class();
  qword_100A19A90 = objc_opt_class();
  qword_100A19A98 = objc_opt_class();
  qword_100A19AA0 = objc_opt_class();
}

void *sub_10036A564(void *a1, uint64_t a2)
{
  a1[1] = a2;
  *a1 = off_1009A9420;
  a1[2] = off_1009A9490;
  a1[3] = 0;
  a1[7] = 0;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = a1 + 7;
  uint64_t v3 = (uint64_t **)(a1 + 6);
  a1[8] = 0;
  uint64_t v4 = (uint64_t)(a1 + 9);
  sub_10027710C(a1 + 72, a1 + 16, "com.apple.BTServer.map", 0);
  for (uint64_t i = qword_100A19E20; (_UNKNOWN *)i != &unk_100A19E18; uint64_t i = *(void *)(i + 8))
  {
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v12 = 0;
    if (*(char *)(i + 39) < 0)
    {
      sub_10003B098(__dst, *(void **)(i + 16), *(void *)(i + 24));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(i + 16);
      uint64_t v12 = *(void *)(i + 32);
    }
    memset(v10, 0, sizeof(v10));
    sub_10036C2FC(__p, (long long *)__dst, v10);
    sub_10036D0F0(v3, (const void **)__p, (uint64_t)__p);
    uint64_t v13 = (void **)&v9;
    sub_10036CEBC(&v13);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    __p[0] = v10;
    sub_10036CEBC((void ***)__p);
    if (SHIBYTE(v12) < 0) {
      operator delete(__dst[0]);
    }
  }
  sub_10027714C(v4);
  sub_10036A7B4((uint64_t)a1);
  return a1;
}

void sub_10036A6F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_10036D04C(v24, *v25);
  sub_10036CF5C((void ***)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10036A768(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_10036CEBC(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10036A7B4(uint64_t a1)
{
  uint64_t v2 = a1 + 72;
  sub_100277398(a1 + 72, "kStart", 0, 0);
  uint64_t v3 = *(void *)sub_10003FFD4();
  if (((*(uint64_t (**)(void))(v3 + 432))() & 1) == 0)
  {
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    void v4[2] = sub_10036AFA0;
    v4[3] = &unk_1009A0598;
    v4[4] = a1;
    sub_1002774C0(v2, "kGetImCoreInitialMessages", 0, v4);
  }
}

void sub_10036A89C(uint64_t a1)
{
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_10036A910;
  v1[3] = &unk_100997528;
  v1[4] = a1;
  sub_1002771FC(a1 + 72, v1);
}

uint64_t sub_10036A910(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 72))();
  }
  return result;
}

size_t sub_10036A940(uint64_t a1, char *a2)
{
  time_t v5 = time(0);
  uint64_t v3 = localtime(&v5);
  return strftime(a2, 0x10uLL, "%Y%m%dT%H%M%S", v3);
}

void sub_10036A994(uint64_t a1, uint64_t *a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  uint64_t v4 = *a2;
  if (*(char *)(*a2 + 111) < 0)
  {
    sub_10003B098(__p, *(void **)(v4 + 88), *(void *)(v4 + 96));
    uint64_t v4 = *a2;
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(v4 + 88);
    uint64_t v17 = *(void *)(v4 + 104);
  }
  string = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_10036AB54(v4, (uint64_t)&string);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_10036C578((void *)(*a2 + 136), 0, &v10);
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  uint64_t v6 = v5;
  if (SHIBYTE(v15) < 0)
  {
    if (!v14) {
      goto LABEL_10;
    }
    p_string = string;
  }
  else
  {
    if (!HIBYTE(v15)) {
      goto LABEL_10;
    }
    p_string = (const char *)&string;
  }
  xpc_dictionary_set_string(v5, "kRecipientPhoneNumber", p_string);
LABEL_10:
  if (SHIBYTE(v12) < 0)
  {
    if (!v11) {
      goto LABEL_16;
    }
    char v8 = v10;
  }
  else
  {
    if (!HIBYTE(v12)) {
      goto LABEL_16;
    }
    char v8 = (const char *)&v10;
  }
  xpc_dictionary_set_string(v6, "kRecipientEmail", v8);
LABEL_16:
  if (v17 >= 0) {
    uint64_t v9 = __p;
  }
  else {
    uint64_t v9 = (void **)__p[0];
  }
  xpc_dictionary_set_string(v6, "kBody", (const char *)v9);
  sub_100277398(a1 + 72, "kSendTextMessage", v6, 0);
  if (SHIBYTE(v12) < 0) {
    operator delete(v10);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(string);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10036AB08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036AB54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  sub_10036C478((void *)(a1 + 136), 0, (uint64_t)v3);
  *(_OWORD *)a2 = *(_OWORD *)v3;
  *(void *)(a2 + 16) = v4;
  v3[1] = 0;
  uint64_t v4 = 0;
  v3[0] = 0;
  if (v6 < 0)
  {
    operator delete(__p);
    if (SHIBYTE(v4) < 0) {
      operator delete(v3[0]);
    }
  }
}

void sub_10036ABC4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  if (*(char *)(a2 + 23) < 0) {
    sub_10003B098(&__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  sub_10036AC5C(a1, &__p, a3);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_10036AC40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036AC5C(uint64_t a1@<X0>, const std::string *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = *(void **)(a1 + 48);
  xpc_object_t v5 = (void *)(a1 + 56);
  if (v4 == (void *)(a1 + 56))
  {
LABEL_13:
    *a3 = 0;
    a3[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v13 = 0;
      uint64_t v14 = 0;
      uint64_t v15 = 0;
      sub_10036C388((char *)&v13, (void *)v4[7], (void *)v4[8], (uint64_t)(v4[8] - v4[7]) >> 4);
      id v7 = v13;
      char v8 = v14;
      uint64_t v16 = a2;
      if (v13 != v14)
      {
        while (!sub_10036C5D8(&v16, v7))
        {
          v7 += 2;
          if (v7 == v8)
          {
            id v7 = v8;
            break;
          }
        }
        if (v7 != v14) {
          break;
        }
      }
      uint64_t v17 = (void **)&v13;
      sub_10036CEBC(&v17);
      uint64_t v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (void *)v4[2];
          BOOL v11 = *v10 == (void)v4;
          uint64_t v4 = v10;
        }
        while (!v11);
      }
      uint64_t v4 = v10;
      if (v10 == v5) {
        goto LABEL_13;
      }
    }
    *a3 = *v7;
    uint64_t v12 = v7[1];
    a3[1] = v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v17 = (void **)&v13;
    sub_10036CEBC(&v17);
  }
}

void sub_10036AD88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a10;
  sub_10036CEBC(&a14);
  _Unwind_Resume(a1);
}

void sub_10036ADA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = (uint64_t **)a2;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  if (*((char *)a2 + 23) < 0) {
    sub_10003B098(&__p, (void *)*a2, a2[1]);
  }
  else {
    std::string __p = *(std::string *)a2;
  }
  sub_10036AC5C(a1, &__p, &v11);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = v11;
  if (v11)
  {
    *(unsigned char *)(v11 + 122) = 1;
    memset(buf, 0, sizeof(buf));
    uint64_t v14 = 0;
    if (*(char *)(v4 + 31) < 0)
    {
      sub_10003B098(buf, *(void **)(v4 + 8), *(void *)(v4 + 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(v4 + 8);
      uint64_t v14 = *(void *)(v4 + 24);
      *(_OWORD *)long long buf = v5;
    }
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    char v8 = v7;
    if (v14 >= 0) {
      uint64_t v9 = buf;
    }
    else {
      uint64_t v9 = *(uint8_t **)buf;
    }
    xpc_dictionary_set_string(v7, "kMessageGUID", (const char *)v9);
    sub_100277398(a1 + 72, "kMarkMessageRead", v8, 0);
    if (SHIBYTE(v14) < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    char v6 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v2 + 23) < 0) {
        uint64_t v2 = (uint64_t **)*v2;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v2;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Could not mark message %s{public} read, guid does not exist", buf, 0xCu);
    }
  }
  if (v12) {
    sub_10008A294(v12);
  }
}

void sub_10036AF50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    sub_10008A294(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036AFA0(uint64_t a1, xpc_object_t xdict)
{
  uint64_t v2 = *(void **)(a1 + 32);
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kMsgArgs");
  if (value)
  {
    uint64_t v4 = value;
    sub_10004191C(__p, "inbox");
    sub_10036B034(v2, v4, (unsigned __int8 *)__p, 0);
    if (v6 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_10036B018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036B034(void *a1, xpc_object_t xdict, unsigned __int8 *a3, int a4)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kMessagesInfo");
  if (value)
  {
    char v8 = value;
    if (xpc_get_type(value) == (xpc_type_t)&_xpc_type_array)
    {
      uint64_t v55 = 0;
      int v56 = &v55;
      uint64_t v57 = 0x4812000000;
      v58 = sub_10004CFE0;
      int v59 = sub_10004CDD4;
      v60 = "";
      memset(v61, 0, sizeof(v61));
      applier[0] = _NSConcreteStackBlock;
      applier[1] = 3221225472;
      applier[2] = sub_10036B688;
      applier[3] = &unk_1009A94B0;
      applier[4] = &v55;
      xpc_array_apply(v8, applier);
      uint64_t v10 = (uint64_t *)v56[6];
      uint64_t v9 = (uint64_t *)v56[7];
      if (v10 != v9)
      {
        uint64_t v11 = (os_log_t *)&qword_100A1A020;
        int v37 = a4;
        do
        {
          uint64_t v13 = *v10;
          uint64_t v12 = (std::__shared_weak_count *)v10[1];
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((char)a3[23] < 0)
          {
            sub_10003B098(__p, *(void **)a3, *((void *)a3 + 1));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)a3;
            uint64_t v53 = *((void *)a3 + 2);
          }
          uint64_t v50 = v13;
          int v51 = v12;
          if (v12) {
            atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(void *, void **, uint64_t *))(*a1 + 56))(a1, __p, &v50);
          if (v51) {
            sub_10008A294(v51);
          }
          if (SHIBYTE(v53) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v14 = *v11;
          if (os_log_type_enabled(*v11, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = v11;
            uint64_t v16 = a3;
            if ((char)a3[23] < 0) {
              uint64_t v16 = *(void **)a3;
            }
            sub_10036B818(v13, &v49);
            if ((v49.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v17 = &v49;
            }
            else {
              uint64_t v17 = (std::string *)v49.__r_.__value_.__r.__words[0];
            }
            if (*(char *)(v13 + 31) < 0)
            {
              sub_10003B098(__dst, *(void **)(v13 + 8), *(void *)(v13 + 16));
            }
            else
            {
              long long v18 = *(_OWORD *)(v13 + 8);
              uint64_t v48 = *(void *)(v13 + 24);
              *(_OWORD *)__dst = v18;
            }
            uint64_t v19 = __dst;
            if (v48 < 0) {
              uint64_t v19 = (void **)__dst[0];
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = v16;
            __int16 v63 = 2080;
            v64 = v17;
            __int16 v65 = 2080;
            v66 = v19;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Inserting record into %s with shortGUID %s and messageGUID %s", buf, 0x20u);
            if (SHIBYTE(v48) < 0) {
              operator delete(__dst[0]);
            }
            uint64_t v11 = v15;
            if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v49.__r_.__value_.__l.__data_);
            }
            a4 = v37;
          }
          if (!a4) {
            goto LABEL_72;
          }
          int v20 = a3[23];
          if ((char)a3[23] < 0)
          {
            uint64_t v22 = *((void *)a3 + 1);
            if (v22 != 5) {
              goto LABEL_49;
            }
            BOOL v21 = *(unsigned __int8 **)a3;
          }
          else
          {
            BOOL v21 = a3;
            if (v20 != 5) {
              goto LABEL_43;
            }
          }
          int v23 = *(_DWORD *)v21;
          int v24 = v21[4];
          if (v23 == 1868721769 && v24 == 120)
          {
            uint64_t v29 = sub_10003FFD4();
            if (!(*(unsigned int (**)(uint64_t))(*(void *)v29 + 432))(v29))
            {
              int v36 = (void (***)(void, uint64_t *))a1[1];
              uint64_t v45 = v13;
              int64_t v46 = v12;
              if (v12) {
                atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (**v36)(v36, &v45);
              int v34 = v46;
              if (!v46) {
                goto LABEL_72;
              }
              goto LABEL_71;
            }
            int v20 = a3[23];
            if ((v20 & 0x80) == 0)
            {
LABEL_43:
              uint64_t v26 = a3;
              if (v20 == 4) {
                goto LABEL_59;
              }
              if (v20 != 6) {
                goto LABEL_72;
              }
              int v27 = 0;
              uint64_t v28 = (unsigned __int16 *)a3;
              goto LABEL_51;
            }
          }
          else if ((v20 & 0x80) == 0)
          {
            goto LABEL_43;
          }
          uint64_t v22 = *((void *)a3 + 1);
LABEL_49:
          if (v22 != 6) {
            goto LABEL_57;
          }
          uint64_t v28 = *(unsigned __int16 **)a3;
          int v27 = 1;
LABEL_51:
          int v30 = *(_DWORD *)v28;
          int v31 = v28[2];
          if (v30 == 1651799407 && v31 == 30831)
          {
            uint64_t v35 = a1[1];
            uint64_t v43 = v13;
            int v44 = v12;
            if (v12) {
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v35 + 8))(v35, &v43, 1);
            int v34 = v44;
            if (!v44) {
              goto LABEL_72;
            }
            goto LABEL_71;
          }
          if (!v27) {
            goto LABEL_72;
          }
          uint64_t v22 = *((void *)a3 + 1);
LABEL_57:
          if (v22 == 4)
          {
            uint64_t v26 = *(_DWORD **)a3;
LABEL_59:
            if (*v26 != 1953391987) {
              goto LABEL_72;
            }
            sub_10004191C(v41, "outbox");
            sub_10036B818(v13, &v40);
            sub_10036B9B0((uint64_t)a1, (const void **)v41, (uint64_t **)&v40);
            if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v40.__r_.__value_.__l.__data_);
            }
            if (v42 < 0) {
              operator delete(v41[0]);
            }
            uint64_t v33 = a1[1];
            uint64_t v38 = v13;
            __int16 v39 = v12;
            if (v12) {
              atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, uint64_t *))(*(void *)v33 + 16))(v33, &v38);
            int v34 = v39;
            if (!v39) {
              goto LABEL_72;
            }
LABEL_71:
            sub_10008A294(v34);
          }
LABEL_72:
          if (v12) {
            sub_10008A294(v12);
          }
          v10 += 2;
        }
        while (v10 != v9);
      }
      _Block_object_dispose(&v55, 8);
      *(void *)long long buf = v61;
      sub_10036CEBC((void ***)buf);
    }
  }
}

void sub_10036B5B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a32) {
    sub_10008A294(a32);
  }
  if (v49) {
    sub_10008A294(v49);
  }
  _Block_object_dispose((const void *)(v50 - 216), 8);
  *(void *)(v50 - 144) = a10;
  sub_10036CEBC((void ***)(v50 - 144));
  _Unwind_Resume(a1);
}

void sub_10036B688()
{
}

void sub_10036B7DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10008A294(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036B818(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v3 = (const std::string *)(a1 + 8);
  std::string::basic_string(&v13, (const std::string *)(a1 + 8), 0, 8uLL, (std::allocator<char> *)&v12);
  std::string::basic_string(&v12, v3, 9uLL, 4uLL, (std::allocator<char> *)&v11);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v12;
  }
  else {
    uint64_t v4 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  char v6 = std::string::append(&v13, (const std::string::value_type *)v4, size);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v14.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v14.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  std::string::basic_string(&v11, v3, 0xEuLL, 3uLL, (std::allocator<char> *)&v15);
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    char v8 = &v11;
  }
  else {
    char v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  }
  if ((v11.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v9 = HIBYTE(v11.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v9 = v11.__r_.__value_.__l.__size_;
  }
  uint64_t v10 = std::string::append(&v14, (const std::string::value_type *)v8, v9);
  *a2 = *v10;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
}

void sub_10036B94C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036B9B0(uint64_t a1, const void **a2, uint64_t **a3)
{
  uint64_t v4 = a2;
  long long v5 = (uint64_t *)sub_10036C70C(a1 + 48, a2);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  *(void *)uint64_t v16 = a3;
  if (v6 == v7) {
    goto LABEL_18;
  }
  char v8 = v5;
  while (!sub_10036C748((const std::string **)v16, (uint64_t *)v6))
  {
    v6 += 16;
    if (v6 == v7)
    {
      uint64_t v6 = v7;
      break;
    }
  }
  std::string::size_type v9 = (long long *)v8[1];
  if ((long long *)v6 == v9)
  {
LABEL_18:
    char v15 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t **)*a3;
      }
      if (*((char *)v4 + 23) < 0) {
        uint64_t v4 = (const void **)*v4;
      }
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)&v16[4] = a3;
      __int16 v17 = 2080;
      long long v18 = v4;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Deletion Failure on short GUID %s from folder %s", v16, 0x16u);
    }
  }
  else
  {
    uint64_t v10 = qword_100A1A020;
    if (os_log_type_enabled((os_log_t)qword_100A1A020, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a3 + 23) < 0) {
        a3 = (uint64_t **)*a3;
      }
      if (*((char *)v4 + 23) < 0) {
        uint64_t v4 = (const void **)*v4;
      }
      *(_DWORD *)uint64_t v16 = 136315394;
      *(void *)&v16[4] = a3;
      __int16 v17 = 2080;
      long long v18 = v4;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Deletion Success on short GUID %s from folder %s", v16, 0x16u);
      std::string::size_type v9 = (long long *)v8[1];
    }
    sub_10036C850((uint64_t)v16, (long long *)(v6 + 16), v9, v6);
    uint64_t v12 = v11;
    uint64_t v13 = v8[1];
    if (v13 != v11)
    {
      do
      {
        std::string v14 = *(std::__shared_weak_count **)(v13 - 8);
        if (v14) {
          sub_10008A294(v14);
        }
        v13 -= 16;
      }
      while (v13 != v12);
    }
    v8[1] = v12;
  }
}

void sub_10036BB90(uint64_t a1, char *a2, xpc_object_t object)
{
  xpc_retain(object);
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  sub_10004191C(&v11, a2);
  if (qword_1009FB398 != -1) {
    dispatch_once(&qword_1009FB398, &stru_1009A9538);
  }
  uint64_t v6 = qword_1009FB390;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3321888768;
  _DWORD v7[2] = sub_10036BCE8;
  v7[3] = &unk_1009A94D0;
  v7[4] = a1;
  if (SHIBYTE(v12) < 0)
  {
    sub_10003B098(&__p, (void *)v11, *((unint64_t *)&v11 + 1));
  }
  else
  {
    long long __p = v11;
    uint64_t v9 = v12;
  }
  xpc_object_t v10 = object;
  sub_1004C9DF0(v6, v7);
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete((void *)v11);
  }
}

void sub_10036BCB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (*(char *)(v19 - 33) < 0) {
    operator delete(*(void **)(v19 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_10036BCE8(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (_DWORD *)(a1 + 40);
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v7 = *(void *)(a1 + 48);
    if (v7 == 13 && **(void **)v3 == 0x6567617373654D6BLL && *(void *)(*(void *)v3 + 5) == 0x6465646441656761) {
      goto LABEL_41;
    }
    if (v7 == 19)
    {
      if (**(void **)v3 == 0x676E69646E65506BLL
        && *(void *)(*(void *)v3 + 8) == 0x7373654D646E6553
        && *(void *)(*(void *)v3 + 11) == 0x6567617373654D64)
      {
LABEL_43:
        long long v18 = *(void **)(a1 + 64);
        sub_10004191C(v21, "outbox");
        sub_10036B034(v2, v18, (unsigned __int8 *)v21, 1);
        if ((v22 & 0x80000000) == 0) {
          goto LABEL_46;
        }
        char v15 = (void **)v21;
        goto LABEL_45;
      }
      uint64_t v7 = *(void *)(a1 + 48);
    }
    if (v7 != 12) {
      goto LABEL_46;
    }
    uint64_t v3 = *(_DWORD **)v3;
LABEL_29:
    uint64_t v11 = *(void *)v3;
    int v12 = v3[2];
    if (v11 == 0x6567617373654D6BLL && v12 == 1953391955)
    {
      std::string v14 = *(void **)(a1 + 64);
      sub_10004191C(v19, "sent");
      sub_10036B034(v2, v14, (unsigned __int8 *)v19, 1);
      if (v20 < 0)
      {
        char v15 = (void **)v19;
        goto LABEL_45;
      }
    }
    goto LABEL_46;
  }
  int v4 = *(unsigned __int8 *)(a1 + 63);
  if (v4 == 12) {
    goto LABEL_29;
  }
  if (v4 != 13)
  {
    if (v4 != 19) {
      goto LABEL_46;
    }
    BOOL v5 = *(void *)v3 == 0x676E69646E65506BLL && *(void *)(a1 + 48) == 0x7373654D646E6553;
    if (!v5 || *(void *)(a1 + 51) != 0x6567617373654D64) {
      goto LABEL_46;
    }
    goto LABEL_43;
  }
  if (*(void *)v3 == 0x6567617373654D6BLL && *(void *)(a1 + 45) == 0x6465646441656761)
  {
LABEL_41:
    __int16 v17 = *(void **)(a1 + 64);
    sub_10004191C(v23, "inbox");
    sub_10036B034(v2, v17, (unsigned __int8 *)v23, 1);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_46;
    }
    char v15 = (void **)v23;
LABEL_45:
    operator delete(*v15);
  }
LABEL_46:
  xpc_release(*(xpc_object_t *)(a1 + 64));
}

void sub_10036BF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10036BFA4(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0) {
    return sub_10003B098(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  long long v3 = *(_OWORD *)(a2 + 40);
  result[2] = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_10036BFD4(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

void sub_10036BFE8(uint64_t a1, char *a2, void *a3)
{
}

void sub_10036BFF4(uint64_t a1)
{
}

void sub_10036BFFC(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X8>)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  sub_10036C8BC(a1, (const void **)__p, a3);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10036C074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036C090(uint64_t a1, uint64_t a2)
{
  sub_10004191C(v8, "inbox");
  sub_10004191C(v6, "deleted");
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
  }
  sub_10036CC9C(a1, (uint64_t)v8, (uint64_t)v6, (uint64_t)__p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(v6[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
}

void sub_10036C148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v21 - 17) < 0) {
    operator delete(*(void **)(v21 - 40));
  }
  _Unwind_Resume(exception_object);
}

void **sub_10036C194(uint64_t a1, const void **a2, long long *a3)
{
  int v4 = (char **)sub_10036C70C(a1 + 48, a2);

  return sub_10036CAE4(v4, a3);
}

uint64_t sub_10036C1D0(uint64_t a1)
{
  *(void *)a1 = off_1009A9420;
  *(void *)(a1 + 16) = off_1009A9490;
  sub_100277148(a1 + 72);
  sub_10036D04C(a1 + 48, *(void **)(a1 + 56));
  long long v3 = (void **)(a1 + 24);
  sub_10036CF5C(&v3);
  return a1;
}

void sub_10036C25C(uint64_t a1)
{
  *(void *)a1 = off_1009A9420;
  *(void *)(a1 + 16) = off_1009A9490;
  sub_100277148(a1 + 72);
  sub_10036D04C(a1 + 48, *(void **)(a1 + 56));
  uint64_t v2 = (void **)(a1 + 24);
  sub_10036CF5C(&v2);
  operator delete();
}

unsigned char *sub_10036C2FC(unsigned char *__dst, long long *a2, void **a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  sub_10036C388(__dst + 24, *a3, a3[1], ((char *)a3[1] - (char *)*a3) >> 4);
  return __dst;
}

void sub_10036C36C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10036C388(char *result, void *a2, void *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_10036C400(result, a4);
    for (uint64_t i = (void *)*((void *)v6 + 1); a2 != a3; a2 += 2)
    {
      uint64_t v8 = a2[1];
      *uint64_t i = *a2;
      i[1] = v8;
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      i += 2;
    }
    *((void *)v6 + 1) = i;
  }
  return result;
}

char *sub_10036C400(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  uint64_t result = (char *)sub_10036C440((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *sub_10036C440(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    sub_1000616DC();
  }
  return operator new(16 * a2);
}

void *sub_10036C478@<X0>(void *result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4 = result[29];
  if (0x6DB6DB6DB6DB6DB7 * ((result[30] - v4) >> 3) <= a2)
  {
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    *(void *)(a3 + 48) = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    *(_DWORD *)(a3 + 24) = 0;
  }
  else
  {
    uint64_t v6 = (long long *)(v4 + 56 * a2);
    if (*((char *)v6 + 23) < 0)
    {
      sub_10003B098((unsigned char *)a3, *(void **)v6, *((void *)v6 + 1));
    }
    else
    {
      long long v7 = *v6;
      *(void *)(a3 + 16) = *((void *)v6 + 2);
      *(_OWORD *)a3 = v7;
    }
    uint64_t v8 = v4 + 56 * a2;
    *(_DWORD *)(a3 + 24) = *(_DWORD *)(v8 + 24);
    uint64_t result = (void *)(a3 + 32);
    char v9 = (long long *)(v8 + 32);
    if (*((char *)v6 + 55) < 0)
    {
      return sub_10003B098(result, *(void **)v9, *(void *)(v4 + 56 * a2 + 40));
    }
    else
    {
      long long v10 = *v9;
      *(void *)(a3 + 48) = *((void *)v9 + 2);
      *(_OWORD *)uint64_t result = v10;
    }
  }
  return result;
}

void sub_10036C55C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10036C578@<X0>(void *result@<X0>, unint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = result[35];
  if (0xAAAAAAAAAAAAAAABLL * ((result[36] - v3) >> 3) <= a2) {
    return sub_10004191C(a3, "");
  }
  uint64_t v4 = (long long *)(v3 + 24 * a2);
  if (*((char *)v4 + 23) < 0) {
    return sub_10003B098(a3, *(void **)v4, *((void *)v4 + 1));
  }
  long long v5 = *v4;
  a3[2] = *((void *)v4 + 2);
  *(_OWORD *)a3 = v5;
  return result;
}

BOOL sub_10036C5D8(const std::string **a1, uint64_t *a2)
{
  memset(&v13, 0, sizeof(v13));
  sub_10036B818(*a2, &v13);
  std::string::size_type size = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  char v4 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
  long long v5 = (std::string *)v13.__r_.__value_.__r.__words[0];
  if ((v13.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v13.__r_.__value_.__l.__size_;
  }
  else {
    long long v5 = &v13;
  }
  if (size)
  {
    std::string::size_type v6 = 0;
    while (v5->__r_.__value_.__s.__data_[v6] == 48)
    {
      if (size == ++v6) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    std::string::size_type v6 = -1;
  }
  long long v7 = *a1;
  if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
  {
    char v9 = (const std::string *)v7->__r_.__value_.__r.__words[0];
    std::string::size_type v8 = v7->__r_.__value_.__l.__size_;
    if (!v8)
    {
LABEL_16:
      std::string::size_type v10 = -1;
      goto LABEL_17;
    }
  }
  else
  {
    std::string::size_type v8 = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
    char v9 = *a1;
    if (!*((unsigned char *)&(*a1)->__r_.__value_.__s + 23)) {
      goto LABEL_16;
    }
  }
  std::string::size_type v10 = 0;
  while (v9->__r_.__value_.__s.__data_[v10] == 48)
  {
    if (v8 == ++v10) {
      goto LABEL_16;
    }
  }
LABEL_17:
  if (v6 == -1 && v10 == -1)
  {
    BOOL v11 = 1;
  }
  else
  {
    BOOL v11 = 0;
    if (v6 != -1 && v10 != -1)
    {
      BOOL v11 = std::string::compare(&v13, v6, 0xFFFFFFFFFFFFFFFFLL, v7, v10, 0xFFFFFFFFFFFFFFFFLL) == 0;
      char v4 = HIBYTE(v13.__r_.__value_.__r.__words[2]);
    }
  }
  if (v4 < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_10036C6F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036C70C(uint64_t a1, const void **a2)
{
  uint64_t v4 = 0;
  uint64_t v2 = *sub_1000314CC(a1, &v4, a2);
  if (!v2) {
    abort();
  }
  return v2 + 56;
}

BOOL sub_10036C748(const std::string **a1, uint64_t *a2)
{
  memset(&v12, 0, sizeof(v12));
  sub_10036B818(*a2, &v12);
  std::string::size_type size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t v4 = &v12;
  }
  else {
    uint64_t v4 = (std::string *)v12.__r_.__value_.__r.__words[0];
  }
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v12.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    std::string::size_type v5 = 0;
    while (v4->__r_.__value_.__s.__data_[v5] == 48)
    {
      if (size == ++v5) {
        goto LABEL_10;
      }
    }
  }
  else
  {
LABEL_10:
    std::string::size_type v5 = -1;
  }
  std::string::size_type v6 = *a1;
  if (SHIBYTE((*a1)->__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type v8 = (const std::string *)v6->__r_.__value_.__r.__words[0];
    std::string::size_type v7 = v6->__r_.__value_.__l.__size_;
    if (!v7)
    {
LABEL_18:
      std::string::size_type v9 = -1;
      goto LABEL_19;
    }
  }
  else
  {
    std::string::size_type v7 = HIBYTE((*a1)->__r_.__value_.__r.__words[2]);
    std::string::size_type v8 = *a1;
    if (!*((unsigned char *)&(*a1)->__r_.__value_.__s + 23)) {
      goto LABEL_18;
    }
  }
  std::string::size_type v9 = 0;
  while (v8->__r_.__value_.__s.__data_[v9] == 48)
  {
    if (v7 == ++v9) {
      goto LABEL_18;
    }
  }
LABEL_19:
  int v10 = std::string::compare(&v12, v5, 0xFFFFFFFFFFFFFFFFLL, v6, v9, 0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
  return v10 == 0;
}

void sub_10036C834(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_10036C850(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  std::string::size_type v5 = a2;
  if (a2 != a3)
  {
    do
    {
      long long v7 = *v5;
      *(void *)std::string::size_type v5 = 0;
      *((void *)v5 + 1) = 0;
      std::string::size_type v8 = *(std::__shared_weak_count **)(a4 + 8);
      *(_OWORD *)a4 = v7;
      if (v8) {
        sub_10008A294(v8);
      }
      ++v5;
      a4 += 16;
    }
    while (v5 != a3);
    return a3;
  }
  return v5;
}

void sub_10036C8BC(uint64_t a1@<X0>, const void **a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = a1 + 48;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  if (a1 + 56 != sub_10003156C(a1 + 48, a2))
  {
    std::string::size_type v6 = (void **)sub_10036C70C(v5, a2);
    uint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    sub_10036C388((char *)&v28, *v6, v6[1], ((char *)v6[1] - (char *)*v6) >> 4);
    long long v7 = v28;
    for (uint64_t i = v29; v7 != i; ++v7)
    {
      long long v9 = *v7;
      int v10 = (std::__shared_weak_count *)*((void *)v7 + 1);
      if (v10)
      {
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
        BOOL v11 = a3[1];
        unint64_t v12 = (unint64_t)a3[2];
        if ((unint64_t)v11 >= v12) {
          goto LABEL_9;
        }
        *(_OWORD *)BOOL v11 = v9;
        atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      else
      {
        BOOL v11 = a3[1];
        unint64_t v12 = (unint64_t)a3[2];
        if ((unint64_t)v11 >= v12)
        {
LABEL_9:
          long long v27 = v9;
          uint64_t v14 = (v11 - *a3) >> 4;
          unint64_t v15 = v14 + 1;
          if ((unint64_t)(v14 + 1) >> 60) {
            abort();
          }
          uint64_t v16 = v12 - (void)*a3;
          if (v16 >> 3 > v15) {
            unint64_t v15 = v16 >> 3;
          }
          if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v17 = v15;
          }
          int v34 = a3 + 2;
          long long v18 = (char *)sub_10036C440((uint64_t)(a3 + 2), v17);
          char v20 = &v18[16 * v14];
          *(_OWORD *)char v20 = v27;
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v22 = *a3;
          uint64_t v21 = a3[1];
          if (v21 == *a3)
          {
            int64x2_t v25 = vdupq_n_s64((unint64_t)v21);
            int v23 = &v18[16 * v14];
          }
          else
          {
            int v23 = &v18[16 * v14];
            do
            {
              long long v24 = *((_OWORD *)v21 - 1);
              v21 -= 16;
              *((_OWORD *)v23 - 1) = v24;
              v23 -= 16;
              *(void *)uint64_t v21 = 0;
              *((void *)v21 + 1) = 0;
            }
            while (v21 != v22);
            int64x2_t v25 = *(int64x2_t *)a3;
          }
          std::string v13 = v20 + 16;
          *a3 = v23;
          a3[1] = v20 + 16;
          int64x2_t v32 = v25;
          uint64_t v26 = a3[2];
          a3[2] = &v18[16 * v19];
          uint64_t v33 = v26;
          int v31 = (long long **)v25.i64[0];
          sub_10036CC14((void **)&v31);
          goto LABEL_23;
        }
        *(_OWORD *)BOOL v11 = (unint64_t)v9;
      }
      std::string v13 = v11 + 16;
LABEL_23:
      a3[1] = v13;
      if (v10) {
        sub_10008A294(v10);
      }
    }
    int v31 = &v28;
    sub_10036CEBC((void ***)&v31);
  }
}

void sub_10036CAA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10036CEBC((void ***)va);
  _Unwind_Resume(a1);
}

void **sub_10036CAE4(char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  long long v7 = (char *)*(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    long long v27 = result;
    uint64_t v14 = (char *)sub_10036C440((uint64_t)result, v13);
    uint64_t v16 = &v14[16 * v10];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v16 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *a1;
    long long v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v22 = vdupq_n_s64((unint64_t)v18);
      char v20 = &v14[16 * v10];
    }
    else
    {
      char v20 = &v14[16 * v10];
      do
      {
        long long v21 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(void *)long long v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v19);
      int64x2_t v22 = *(int64x2_t *)a1;
    }
    long long v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    int64x2_t v25 = v22;
    int v23 = a1[2];
    a1[2] = &v14[16 * v15];
    uint64_t v26 = v23;
    uint64_t v24 = v22.i64[0];
    uint64_t result = sub_10036CC14((void **)&v24);
  }
  else
  {
    *(void *)long long v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    long long v9 = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

void **sub_10036CC14(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_10036CC48(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      sub_10008A294(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void sub_10036CC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v17 = 0;
  long long v18 = 0;
  if (*(char *)(a4 + 23) < 0) {
    sub_10003B098(&__dst, *(void **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __dst = *(std::string *)a4;
  }
  sub_10036AC5C(a1, &__dst, &v17);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10003B098(v14, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a2;
    uint64_t v15 = *(void *)(a2 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10003B098(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a4;
    uint64_t v13 = *(void *)(a4 + 16);
  }
  sub_10036B9B0(a1, (const void **)v14, (uint64_t **)__p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10003B098(v10, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v10 = *(_OWORD *)a3;
    uint64_t v11 = *(void *)(a3 + 16);
  }
  uint64_t v8 = v17;
  long long v9 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, void **, uint64_t *))(*(void *)a1 + 56))(a1, v10, &v8);
  if (v9) {
    sub_10008A294(v9);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(v10[0]);
  }
  if (v18) {
    sub_10008A294(v18);
  }
}

void sub_10036CE3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  int64x2_t v32 = *(std::__shared_weak_count **)(v30 - 40);
  if (v32) {
    sub_10008A294(v32);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036CEBC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10036CF10((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10036CF10(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      sub_10008A294(v4);
    }
  }
  a1[1] = v2;
}

void sub_10036CF5C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_10036CFF4((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10036CFF4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void sub_10036D04C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10036D04C(a1, *a2);
    sub_10036D04C(a1, a2[1]);
    sub_10036D0A8((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10036D0A8(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 24);
  sub_10036CEBC(&v2);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
}

_OWORD *sub_10036D0F0(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t v11 = 0;
  unint64_t v5 = (void **)sub_1000314CC((uint64_t)a1, &v11, a2);
  unint64_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    uint64_t v10 = 0;
    unint64_t v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    void v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    LOBYTE(v10) = 1;
    sub_100036CA0(a1, v11, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_10036D1C8((uint64_t)v9, 0);
  }
  return v6;
}

void sub_10036D1C8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10036D0A8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_10036D220(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_10036D290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  a10 = 0;
  if (v10) {
    sub_10036D2F8((uint64_t)&a10, v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10036D2B4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10036D2EC(uint64_t a1)
{
}

void sub_10036D2F8(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 1007) < 0) {
      operator delete(*(void **)(a2 + 984));
    }
    sub_1005D428C(a2 + 560);
    sub_1005D428C(a2 + 136);
    if (*(char *)(a2 + 111) < 0) {
      operator delete(*(void **)(a2 + 88));
    }
    if (*(char *)(a2 + 87) < 0) {
      operator delete(*(void **)(a2 + 64));
    }
    if (*(char *)(a2 + 63) < 0) {
      operator delete(*(void **)(a2 + 40));
    }
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    operator delete();
  }
}

void sub_10036D3A4(id a1)
{
}

void sub_10036D3E8()
{
}

uint64_t sub_10036D40C(uint64_t a1, void *a2, void *a3, char a4)
{
  id v8 = a2;
  id v9 = a3;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = off_1009A9568;
  *(unsigned char *)(a1 + 16) = a4;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  objc_storeStrong((id *)(a1 + 8), a2);
  id v10 = objc_alloc_init((Class)NSMutableArray);
  uint64_t v11 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v10;

  id v12 = objc_alloc_init((Class)NSMutableSet);
  uint64_t v13 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v12;

  sub_10036D508(a1, v9);
  return a1;
}

void sub_10036D4DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036D508(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Adding %@ to %@ session", (uint8_t *)&v6, 0x16u);
  }
  [*(id *)(a1 + 24) addObject:v3];
  sub_10036D850(a1, v3);
}

void sub_10036D5E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10036D604(uint64_t a1)
{
  *(void *)a1 = off_1009A9568;
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  id v3 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_INFO))
  {
    uint64_t v4 = *(void *)(a1 + 8);
    int v6 = 138412290;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Tearing down CattPendingConnection for %@", (uint8_t *)&v6, 0xCu);
  }

  return a1;
}

void sub_10036D6F4(uint64_t a1)
{
  sub_10036D604(a1);

  operator delete();
}

id sub_10036D72C(uint64_t a1, int a2)
{
  *(unsigned char *)(a1 + 16) = a2;
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    v5[0] = _NSConcreteStackBlock;
    v5[1] = 3221225472;
    v5[2] = sub_10036D7C8;
    v5[3] = &unk_1009A9578;
    v5[4] = a1;
    return [v2 enumerateObjectsUsingBlock:v5];
  }
  else
  {
    uint64_t v4 = *(void **)(a1 + 32);
    return [v4 removeAllObjects];
  }
}

void sub_10036D7C8(uint64_t a1, void *a2, uint64_t a3, unsigned char *a4)
{
  id v6 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  id v8 = v6;
  if (objc_msgSend(*(id *)(v7 + 32), "containsObject:")) {
    *a4 = 1;
  }
  else {
    sub_10036D850(v7, v8);
  }
}

void sub_10036D83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_10036D850(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009A9598);
  }
  uint64_t v4 = sub_100030DCC((uint64_t)off_1009F7ED8, v3, 0);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009A95B8);
  }
  uint64_t v5 = sub_100030F10((uint64_t)off_1009F7EF8, v4, 1);
  if (v5)
  {
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009A95D8);
    }
    BOOL v6 = *((unsigned char *)off_1009F8150 + 197)
      || *((unsigned char *)off_1009F8150 + 198)
      || *((unsigned char *)off_1009F8150 + 199)
      || *((unsigned __int8 *)off_1009F8150 + 204) != 0;
    BOOL v7 = sub_10048BAE8(v5, 10);
    unsigned int v8 = [*(id *)(a1 + 32) containsObject:v3];
    if (sub_100476610(v5) && (!*(unsigned char *)(a1 + 16) ? (int v9 = 1) : (int v9 = v6), (v9 | v8 | v7) == 1))
    {
      id v10 = qword_100A19F00;
      if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
      {
        sub_100474E18(v5, __p);
        if (v21 >= 0) {
          uint64_t v11 = __p;
        }
        else {
          uint64_t v11 = (void **)__p[0];
        }
        int v12 = *(unsigned __int8 *)(a1 + 16);
        *(_DWORD *)long long buf = 136447234;
        int v23 = v11;
        __int16 v24 = 1024;
        int v25 = v12;
        __int16 v26 = 1024;
        BOOL v27 = v6;
        __int16 v28 = 1024;
        BOOL v29 = v7;
        __int16 v30 = 1024;
        unsigned int v31 = v8;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Not making outgoing page to device %{public}s isForegroundActive %d, streaming %d, tooRecentConnection %d, alreadyPaged %d", buf, 0x24u);
        if (v21 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      if (qword_1009F8090 != -1) {
        dispatch_once(&qword_1009F8090, &stru_1009A95F8);
      }
      uint64_t v13 = off_1009F8088;
      v16[0] = _NSConcreteStackBlock;
      v16[1] = 3221225472;
      void v16[2] = sub_10036DBEC;
      v16[3] = &unk_100998570;
      uint64_t v18 = a1;
      uint64_t v19 = v5;
      id v17 = v3;
      sub_1004D3990((uint64_t)v13, v16);
    }
  }
  else
  {
    uint64_t v14 = qword_100A19F00;
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
    {
      sub_1006AD3F0();
      uint64_t v15 = (void **)objc_claimAutoreleasedReturnValue();
      *(_DWORD *)long long buf = 138412290;
      int v23 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "No device found for device %@", buf, 0xCu);
    }
  }
}

void sub_10036DBA4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10036DBE4(uint64_t a1)
{
  return [*(id *)(a1 + 24) count];
}

void sub_10036DBEC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009A95F8);
  }
  id v3 = (uint64_t *)(a1 + 48);
  uint64_t v4 = sub_1004D41B4((uint64_t)off_1009F8088, *(void *)(a1 + 48));
  uint64_t v5 = qword_100A19F00;
  if ((v4 & 0x100000) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
      sub_10075A7B8((uint64_t *)(a1 + 48));
    }
    goto LABEL_20;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(*v3, &__p);
    BOOL v6 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
       ? &__p
       : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)long long buf = 136446210;
    uint64_t v16 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Making outgoing connection to device %{public}s for CATT", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  if (qword_1009F8090 != -1) {
    dispatch_once(&qword_1009F8090, &stru_1009A95F8);
  }
  uint64_t v7 = *v3;
  memset(&__p, 0, sizeof(__p));
  int v8 = sub_1004D2DCC((int64x2_t *)off_1009F8088, v7, 0x100000, &__p, 0);
  int v9 = v8;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!v9)
    {
LABEL_20:
      uint64_t v10 = sub_100019878();
      v11[0] = _NSConcreteStackBlock;
      v11[1] = 3221225472;
      v11[2] = sub_10036DE68;
      v11[3] = &unk_100998A38;
      uint64_t v13 = v2;
      id v12 = *(id *)(a1 + 32);
      sub_100013018(v10, v11);

      return;
    }
  }
  else if (!v8)
  {
    goto LABEL_20;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_ERROR)) {
    sub_10075A718(v3);
  }
}

void sub_10036DE34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

id sub_10036DE68(uint64_t a1)
{
  return [*(id *)(*(void *)(a1 + 40) + 32) addObject:*(void *)(a1 + 32)];
}

void sub_10036DE74(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = qword_100A19F00;
  if (os_log_type_enabled((os_log_t)qword_100A19F00, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 8);
    int v6 = 138412546;
    id v7 = v3;
    __int16 v8 = 2112;
    uint64_t v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Removing %@ from %@ session", (uint8_t *)&v6, 0x16u);
  }
  [*(id *)(a1 + 24) removeObject:v3];
}

void sub_10036DF48(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10036DF60(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(unsigned __int8 *)(a1 + 16);
  uint64_t v4 = [*(id *)(a1 + 24) description];
  uint64_t v5 = [*(id *)(a1 + 32) description];
  int v6 = +[NSString stringWithFormat:@"%@ isForegroundActive: %d Devices: %@, Devices already paged: %@", v2, v3, v4, v5];

  return v6;
}

void sub_10036E004(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10036E020(id a1)
{
}

void sub_10036E064()
{
}

void sub_10036E088(id a1)
{
}

void sub_10036E0CC()
{
}

void sub_10036E0F0(id a1)
{
}

void sub_10036E280()
{
}

void sub_10036E2A4(id a1)
{
}

void sub_10036E2E8()
{
}

uint64_t sub_10036E30C(uint64_t a1, int a2, int a3, uint64_t a4)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  sub_100052DA8(a1 + 16);
  *(_DWORD *)(a1 + 80) = a2;
  *(void *)(a1 + 88) = a4;
  *(_DWORD *)(a1 + 96) = a3;
  sub_100370324(a1 + 136);
  sub_100370324(a1 + 12512);
  sub_1002B80C0((pthread_cond_t *)(a1 + 24864));
  sub_100052DA8(a1 + 24912);
  *(void *)(a1 + 12488) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(unsigned char *)(a1 + 12496) = 0;
  *(void *)(a1 + 12504) = 0;
  *(unsigned char *)(a1 + 24976) = 0;
  *(_DWORD *)(a1 + 24977) = -1;
  *(_WORD *)(a1 + 24981) = -1;
  *(void *)(a1 + 24984) = 0;
  *(void *)(a1 + 24992) = dispatch_queue_create("com.apple.bluetooth.netrbclientqueue", 0);
  return a1;
}

void sub_10036E3FC(_Unwind_Exception *a1)
{
  uint64_t v6 = v4;
  sub_1002B812C(v6);
  sub_10037036C(v5);
  sub_10037036C(v3);
  sub_100052DA4(v2);
  __int16 v8 = *(std::__shared_weak_count **)(v1 + 8);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10036E45C(uint64_t a1)
{
  dispatch_release(*(dispatch_object_t *)(a1 + 24992));
  sub_100052DA4(a1 + 24912);
  sub_1002B812C(a1 + 24864);
  sub_10037036C(a1 + 12512);
  sub_10037036C(a1 + 136);
  sub_100052DA4(a1 + 16);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_10036E4CC(uint64_t result)
{
  if (*(void *)(result + 88)) {
    operator new();
  }
  return result;
}

uint64_t sub_10036E55C(uint64_t a1, uint64_t a2)
{
  memset(&v8, 0, sizeof(v8));
  sched_param v7 = 0;
  if (!a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075A858();
    }
    return 3470;
  }
  if (*(void *)(a1 + 24984))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075A928();
    }
    return 3470;
  }
  *(unsigned char *)(a1 + 12496) = 0;
  if (sub_10036E7CC(a1))
  {
    if (*(_DWORD *)(a1 + 80) != 1)
    {
LABEL_13:
      sub_1003702E0(a1 + 136);
      sub_1003702E0(a1 + 12512);
      *(void *)(a1 + 24984) = a2;
      sub_10036EA18(a1);
      pthread_attr_init(&v8);
      pthread_attr_setdetachstate(&v8, 2);
      pthread_attr_getschedparam(&v8, &v7);
      v7.sched_priority = 50;
      pthread_attr_setschedparam(&v8, &v7);
      pthread_create((pthread_t *)(a1 + 128), &v8, (void *(__cdecl *)(void *))sub_10036EAA8, (void *)a1);
      pthread_create((pthread_t *)(a1 + 12488), &v8, (void *(__cdecl *)(void *))sub_10036EAC4, (void *)a1);
      pthread_create((pthread_t *)(a1 + 12504), &v8, (void *(__cdecl *)(void *))sub_10036EAE0, (void *)a1);
      return 0;
    }
    uint64_t v5 = _NETRBClientCreate();
    *(void *)(a1 + 120) = v5;
    if (v5)
    {
      if (_NETRBClientIsAllowedMoreHost()) {
        goto LABEL_13;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075A8C0();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_10075A88C();
    }
    uint64_t v6 = *(const void **)(a1 + 104);
    if (v6)
    {
      CFRelease(v6);
      *(void *)(a1 + 104) = 0;
    }
    if (*(void *)(a1 + 120))
    {
      _NETRBClientDestroy();
      *(void *)(a1 + 120) = 0;
    }
    return 2101;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075A8F4();
    }
    return 3471;
  }
}

BOOL sub_10036E7CC(uint64_t a1)
{
  __int16 v18 = 0;
  int v17 = 0;
  if (sub_100183EF4((uint64_t)&v17))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075A95C();
    }
    return *(void *)(a1 + 104) != 0;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 96);
  if (v2)
  {
    LOBYTE(v17) = v17 | 2;
    if (v2 != 1) {
      *(_WORD *)((char *)&v17 + 1) = bswap32(v2) >> 16;
    }
  }
  CFDataRef v3 = CFDataCreate(kCFAllocatorDefault, (const UInt8 *)&v17, 6);
  if (v3)
  {
    CFDataRef v4 = v3;
    keys[0] = @"InterfaceRole";
    int v5 = *(_DWORD *)(a1 + 80);
    CFStringRef v6 = @"Bluetooth P2P";
    if (!v5) {
      CFStringRef v6 = @"Bluetooth PAN";
    }
    if (v5 == 1) {
      CFStringRef v7 = @"Bluetooth PAN-NAP";
    }
    else {
      CFStringRef v7 = v6;
    }
    values[0] = (void *)v7;
    CFDictionaryRef v8 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, 1, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (!v8) {
      goto LABEL_26;
    }
    CFDictionaryRef v9 = v8;
    if (*(_DWORD *)(a1 + 80) == 2)
    {
      LODWORD(keys[0]) = 1000;
      CFNumberRef v10 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, keys);
      if (!v10)
      {
LABEL_25:
        CFRelease(v9);
LABEL_26:
        CFRelease(v4);
        return *(void *)(a1 + 104) != 0;
      }
      CFNumberRef v11 = v10;
      CFBooleanRef v12 = kCFBooleanTrue;
    }
    else
    {
      CFNumberRef v11 = 0;
      CFBooleanRef v12 = 0;
    }
    keys[0] = (void *)kIOEthernetHardwareAddress;
    keys[1] = @"IOUserEthernetInterfaceMergeProperties";
    keys[2] = @"P2PInstance";
    keys[3] = @"MaxTransferUnit";
    values[0] = v4;
    values[1] = v9;
    values[2] = v12;
    values[3] = v11;
    if (v12) {
      CFIndex v13 = 4;
    }
    else {
      CFIndex v13 = 2;
    }
    CFDictionaryRef v14 = CFDictionaryCreate(kCFAllocatorDefault, (const void **)keys, (const void **)values, v13, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (v14)
    {
      CFDictionaryRef v15 = v14;
      *(void *)(a1 + 104) = IOEthernetControllerCreate();
      CFRelease(v15);
    }
    if (v11) {
      CFRelease(v11);
    }
    goto LABEL_25;
  }
  return *(void *)(a1 + 104) != 0;
}

int sub_10036EA10(id a1, int a2, void *a3)
{
  return 0;
}

uint64_t sub_10036EA18(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 104);
  if (result)
  {
    IOEthernetControllerRegisterEnableCallback();
    IOEthernetControllerRegisterDisableCallback();
    uint64_t v3 = *(void *)(a1 + 104);
    return _IOEthernetControllerRegisterPacketAvailableCallback(v3, sub_10036EE00, a1);
  }
  return result;
}

uint64_t sub_10036EAA8(uint64_t a1)
{
  return 0;
}

uint64_t sub_10036EAC4(uint64_t a1)
{
  return 0;
}

uint64_t sub_10036EAE0(uint64_t a1)
{
  return 0;
}

uint64_t sub_10036EAFC(uint64_t a1)
{
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, a1 + 16);
  if (*(void *)(a1 + 24984))
  {
    *(void *)(a1 + 24984) = 0;
    if (*(_DWORD *)(a1 + 80) == 1 && *(void *)(a1 + 120))
    {
      if ((_NETRBClientSetHostCount() & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075A9F8();
      }
      if ((_NETRBClientStopService() & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075A9C4();
      }
      if ((_NETRBClientDestroy() & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075A990();
      }
    }
    *(unsigned char *)(a1 + 12496) = 0;
    sub_1003703A0(a1 + 136);
    sub_1003703A0(a1 + 12512);
    if (*(void *)(a1 + 104)) {
      IOEthernetControllerSetLinkStatus();
    }
    if (*(void *)(a1 + 112) && *(void *)(a1 + 104)) {
      IOEthernetControllerUnscheduleFromRunLoop();
    }
    while (1)
    {
      unsigned int v2 = *(__CFRunLoop **)(a1 + 112);
      if (!v2) {
        break;
      }
      CFRunLoopStop(v2);
      sub_10003AFE8((uint64_t)v6);
      usleep(0x2710u);
      sub_10003AF00((uint64_t)v6);
    }
    uint64_t v3 = *(const void **)(a1 + 104);
    if (v3)
    {
      CFRelease(v3);
      uint64_t v4 = 0;
      *(void *)(a1 + 104) = 0;
    }
    else
    {
      uint64_t v4 = 0;
    }
  }
  else
  {
    uint64_t v4 = 2105;
  }
  sub_10003AFB4((uint64_t)v6);
  return v4;
}

void sub_10036EC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10036ECB0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 120);
  if (result)
  {
    if (_NETRBClientIsAllowedMoreHost())
    {
      if (_NETRBClientAddHost())
      {
        return 0;
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075AA2C();
        }
        return 3472;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075A8C0();
      }
      return 3473;
    }
  }
  return result;
}

uint64_t sub_10036ED54(uint64_t a1)
{
  if (*(void *)(a1 + 120)) {
    _NETRBClientRemoveHost();
  }
  return 0;
}

BOOL sub_10036ED7C(uint64_t a1)
{
  v4[0] = 0;
  v4[1] = 0;
  sub_10003AED0((uint64_t)v4, a1 + 16);
  if (*(void *)(a1 + 104)) {
    BOOL v2 = IOEthernetControllerSetLinkStatus() == 0;
  }
  else {
    BOOL v2 = 0;
  }
  sub_10003AFB4((uint64_t)v4);
  return v2;
}

void sub_10036EDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10036EDF8(uint64_t a1, uint64_t a2)
{
  return sub_10036EAFC(a2);
}

uint64_t sub_10036EE00(uint64_t a1, uint64_t a2)
{
  return sub_10036F080(a2);
}

uint64_t sub_10036EE08(pthread_cond_t *a1)
{
  v3[0] = 0;
  v3[1] = 0;
  sub_10003AED0((uint64_t)v3, (uint64_t)&a1[519]);
  sub_1002B818C(a1 + 518);
  a1[260].__opaque[8] ^= 1u;
  return sub_10003AFB4((uint64_t)v3);
}

void sub_10036EE68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10036EE7C(uint64_t a1, const void *a2, unsigned int a3)
{
  uint64_t result = 3474;
  if (a3 && *(void *)(a1 + 104))
  {
    uint64_t v7 = a1 + 12512;
    uint64_t result = sub_1003703EC(a1 + 12512);
    if (result)
    {
      memcpy((void *)result, a2, a3);
      sub_100370510(v7, a3);
      return 0;
    }
  }
  return result;
}

uint64_t sub_10036EEF4(uint64_t a1)
{
  CFDictionaryRef v8 = 0;
  uint64_t v9 = 0;
  uint64_t v7 = 0;
  sub_10036FC10(&v7, (void *)a1);
  while (1)
  {
    uint64_t v2 = sub_10037047C(a1 + 12512, &v9);
    if (!v2) {
      break;
    }
    if (*(unsigned char *)(a1 + 24976) && (*(unsigned char *)v2 & 1) == 0)
    {
      int v3 = *(_DWORD *)(a1 + 24977);
      *(_WORD *)(v2 + 4) = *(_WORD *)(a1 + 24981);
      *(_DWORD *)uint64_t v2 = v3;
    }
    int v4 = IOEthernetControllerWritePacket();
    if (v4)
    {
      int v5 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        int v11 = v4;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "OI_NETIFC_Write() failed with %d", buf, 8u);
      }
    }
    sub_100370580(a1 + 12512);
  }
  if (v8) {
    sub_10008A294(v8);
  }
  return 0;
}

void sub_10036F05C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
}

uint64_t sub_10036F080(uint64_t a1)
{
  uint64_t v2 = a1 + 136;
  uint64_t result = sub_1003703EC(a1 + 136);
  if (result)
  {
    uint64_t v4 = result;
    do
    {
      uint64_t result = IOEthernetControllerReadPacket();
      if (result < 1) {
        break;
      }
      if (*(unsigned char *)(a1 + 24976))
      {
        if ((*(unsigned char *)v4 & 1) == 0)
        {
          int v5 = *(_DWORD *)(v4 + 6);
          *(_WORD *)(a1 + 24981) = *(_WORD *)(v4 + 10);
          *(_DWORD *)(a1 + 24977) = v5;
        }
      }
      sub_100370510(v2, result);
      uint64_t result = sub_1003703EC(v2);
      uint64_t v4 = result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_10036F128(uint64_t a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v8 = 0;
  sub_10036FC10(&v8, (void *)a1);
  uint64_t v2 = (unsigned char *)(a1 + 12496);
  while (1)
  {
    uint64_t v3 = sub_10037047C(a1 + 136, &v10);
    if (!v3) {
      break;
    }
    if (*v2)
    {
      *(void *)long long buf = 0;
      uint64_t v12 = 0;
      sub_10003AED0((uint64_t)buf, a1 + 24912);
      if (*v2) {
        sub_1002B8184((pthread_cond_t *)(a1 + 24864), (pthread_mutex_t **)buf);
      }
      sub_10003AFB4((uint64_t)buf);
    }
    sub_100023344();
    uint64_t v4 = *(uint64_t (**)(uint64_t, void))(a1 + 24984);
    if (!v4)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075AA60();
      }
      sub_1000232E0();
      break;
    }
    int v5 = v4(v3, (unsigned __int16)v10);
    if (v5)
    {
      CFStringRef v6 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v5;
        _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "BTStackReceiveCallBack returned error %d", buf, 8u);
      }
    }
    else
    {
      *v2 ^= 1u;
    }
    sub_1000232E0();
    pthread_yield_np();
    sub_100370580(a1 + 136);
  }
  *(void *)(a1 + 12488) = 0;
  if (v9) {
    sub_10008A294(v9);
  }
  return 0;
}

void sub_10036F2EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, char a15)
{
  if (a13) {
    sub_10008A294(a13);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10036F324(uint64_t a1)
{
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, a1 + 16);
  uint64_t v30 = 0;
  unsigned int v31 = 0;
  sub_10036FC10(&v30, (void *)a1);
  if (!*(void *)(a1 + 104)) {
    goto LABEL_78;
  }
  io_registry_entry_t IONetworkInterfaceObject = IOEthernetControllerGetIONetworkInterfaceObject();
  if (IONetworkInterfaceObject)
  {
    sub_10003AFE8((uint64_t)v32);
    for (int i = -50; ; ++i)
    {
      CFStringRef CFProperty = (const __CFString *)IORegistryEntryCreateCFProperty(IONetworkInterfaceObject, @"BSD Name", kCFAllocatorDefault, 0);
      if (CFProperty || i == 0) {
        break;
      }
      usleep(0x186A0u);
    }
    sub_10003AF00((uint64_t)v32);
    int v6 = *(_DWORD *)(a1 + 80);
    if ((v6 | 2) != 2)
    {
      *(void *)buffer = 0;
      uint64_t v34 = 0;
      if (CFProperty && CFStringGetCString(CFProperty, buffer, 16, 0x600u))
      {
        xpc_object_t v15 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_uint64(v15, netrbClientDeviceType, 4uLL);
        xpc_dictionary_set_string(v15, netrbClientInterfaceName, buffer);
        char started = _NETRBClientStartService();
        xpc_release(v15);
        if (started)
        {
          if (_NETRBClientAddHost()) {
            goto LABEL_74;
          }
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10075AA2C();
          }
        }
        else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          sub_10075AAFC();
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10075AAC8();
      }
      sub_10036E4CC(a1);
LABEL_76:
      if (CFProperty) {
        CFRelease(CFProperty);
      }
      goto LABEL_78;
    }
    uint64_t v7 = (const void *)_SCNetworkInterfaceCreateWithIONetworkInterfaceObject();
    if (!v7)
    {
      SCError();
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075AB30();
      }
      goto LABEL_74;
    }
    uint64_t v8 = SCPreferencesCreateWithAuthorization(kCFAllocatorDefault, @"BT-PAN", 0, 0);
    uint64_t v9 = v8;
    if (!v8)
    {
      SCError();
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075AB98();
      }
      goto LABEL_73;
    }
    if (!SCPreferencesLock(v8, 1u))
    {
      SCPreferencesSynchronize(v9);
      if (!SCPreferencesLock(v9, 1u))
      {
        SCError();
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075AC00();
        }
        goto LABEL_72;
      }
    }
    SCNetworkSetRef cf = SCNetworkSetCopyCurrent(v9);
    if (cf)
    {
      if (SCNetworkSetEstablishDefaultInterfaceConfiguration() || !SCError())
      {
        CFArrayRef theArray = SCNetworkServiceCopyAll(v9);
        if (theArray)
        {
          CFIndex Count = CFArrayGetCount(theArray);
          if (Count >= 1)
          {
            CFIndex v11 = 0;
LABEL_19:
            CFDictionaryRef ValueAtIndex = (const __SCNetworkService *)CFArrayGetValueAtIndex(theArray, v11);
            for (SCNetworkInterfaceRef j = SCNetworkServiceGetInterface(ValueAtIndex); ; SCNetworkInterfaceRef j = SCNetworkInterfaceGetInterface(v14))
            {
              CFDictionaryRef v14 = j;
              if (!j)
              {
                if (++v11 != Count) {
                  goto LABEL_19;
                }
                goto LABEL_65;
              }
              if (CFEqual(v7, j)) {
                break;
              }
            }
            int v17 = (const void **)&kSCValNetIPv4ConfigMethodDHCP;
            if (v6 == 2) {
              int v17 = (const void **)&kSCValNetIPv4ConfigMethodLinkLocal;
            }
            sub_10036FAD0(ValueAtIndex, kSCNetworkProtocolTypeIPv4, kSCPropNetIPv4ConfigMethod, *v17);
            __int16 v18 = (const void **)&kSCValNetIPv6ConfigMethodAutomatic;
            if (v6 == 2) {
              __int16 v18 = (const void **)&kSCValNetIPv6ConfigMethodLinkLocal;
            }
            sub_10036FAD0(ValueAtIndex, kSCNetworkProtocolTypeIPv6, kSCPropNetIPv6ConfigMethod, *v18);
            if (!ValueAtIndex) {
              goto LABEL_65;
            }
            CFArrayRef v19 = SCNetworkSetCopyAll(v9);
            CFArrayRef v27 = v19;
            if (!v19)
            {
              SCError();
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
                sub_10075AD04();
              }
              goto LABEL_67;
            }
            CFIndex v20 = CFArrayGetCount(v19);
            if (v20 < 1)
            {
LABEL_61:
              if (SCPreferencesCommitChanges(v9))
              {
                if (!SCPreferencesApplyChanges(v9))
                {
                  SCError();
                  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
                    sub_10075AE3C();
                  }
                }
              }
              else
              {
                SCError();
                if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
                  sub_10075ADD4();
                }
              }
            }
            else
            {
              CFIndex v21 = 0;
              while (1)
              {
                int64x2_t v22 = (const __SCNetworkSet *)CFArrayGetValueAtIndex(v27, v21);
                CFArrayRef v23 = SCNetworkSetCopyServices(v22);
                CFArrayRef v24 = v23;
                if (!v23
                  || (v35.length = CFArrayGetCount(v23),
                      v35.location = 0,
                      int v25 = CFArrayContainsValue(v24, v35, ValueAtIndex),
                      CFRelease(v24),
                      !v25))
                {
                  if (!SCNetworkSetAddService(v22, ValueAtIndex)) {
                    break;
                  }
                }
                if (v20 == ++v21) {
                  goto LABEL_61;
                }
              }
              SCError();
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
                sub_10075AD6C();
              }
            }
            SCPreferencesUnlock(v9);
            CFRelease(v27);
            goto LABEL_68;
          }
        }
LABEL_65:
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075ACD0();
        }
LABEL_67:
        SCPreferencesUnlock(v9);
LABEL_68:
        if (theArray) {
          CFRelease(theArray);
        }
        if (cf) {
          CFRelease(cf);
        }
LABEL_72:
        CFRelease(v9);
LABEL_73:
        CFRelease(v7);
LABEL_74:
        *(void *)(a1 + 112) = CFRunLoopGetCurrent();
        if (*(void *)(a1 + 104))
        {
          IOEthernetControllerScheduleWithRunLoop();
          sub_10003AFE8((uint64_t)v32);
          CFRunLoopRun();
          sub_10003AF00((uint64_t)v32);
        }
        goto LABEL_76;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075AEA4();
      }
    }
    else
    {
      SCError();
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075AC68();
      }
    }
    CFArrayRef theArray = 0;
    goto LABEL_67;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10075AA94();
  }
LABEL_78:
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 128) = 0;
  sub_10003AFE8((uint64_t)v32);
  if (v31) {
    sub_10008A294(v31);
  }
  sub_10003AFB4((uint64_t)v32);
  return 0;
}

void sub_10036FA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, std::__shared_weak_count *a6, ...)
{
  va_start(va, a6);
  if (a6) {
    sub_10008A294(a6);
  }
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10036FA94()
{
}

uint64_t sub_10036FAA8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 96))();
}

void sub_10036FAD0(const __SCNetworkService *a1, const __CFString *a2, const void *a3, const void *a4)
{
  uint64_t v8 = SCNetworkServiceCopyProtocol(a1, a2);
  if (v8)
  {
LABEL_4:
    CFDictionaryRef Configuration = SCNetworkProtocolGetConfiguration(v8);
    if (Configuration) {
      MutableCopy = CFDictionaryCreateMutableCopy(0, 0, Configuration);
    }
    else {
      MutableCopy = CFDictionaryCreateMutable(0, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    }
    CFDictionaryRef v11 = MutableCopy;
    CFDictionarySetValue(MutableCopy, a3, a4);
    int v12 = SCNetworkProtocolSetConfiguration(v8, v11);
    CFRelease(v11);
    if (v8) {
      CFRelease(v8);
    }
    if (!v12)
    {
      SCError();
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075AF74();
      }
    }
    return;
  }
  if (SCNetworkServiceAddProtocolType(a1, a2))
  {
    uint64_t v8 = SCNetworkServiceCopyProtocol(a1, a2);
    goto LABEL_4;
  }
  SCError();
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10075AF0C();
  }
}

uint64_t sub_10036FC10(void *a1, void *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  *a1 = *a2;
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    a1[1] = v4;
    if (v4) {
      return (uint64_t)a1;
    }
  }
  else
  {
    a1[1] = 0;
  }
  sub_10036FC54();
  return sub_10036FC54();
}

uint64_t sub_10036FC54()
{
  return sub_10036FC6C();
}

id *sub_10036FC6C(id *a1)
{
  return a1;
}

void sub_10036FCB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315138;
    CFDictionaryRef v14 = "HciTransportOpen";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v13, 0xCu);
  }
  *(_DWORD *)(a1 + 8) = *(_DWORD *)a2;
  id v5 = objc_retainBlock(*(id *)(a2 + 16));
  int v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = v5;

  id v7 = objc_retainBlock(*(id *)(a2 + 48));
  uint64_t v8 = *(void **)(a1 + 24);
  *(void *)(a1 + 24) = v7;

  id v9 = objc_retainBlock(*(id *)(a2 + 56));
  uint64_t v10 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v9;

  id v11 = objc_retainBlock(*(id *)(a2 + 64));
  int v12 = *(void **)(a1 + 40);
  *(void *)(a1 + 40) = v11;
}

void sub_10036FDC0(void *a1)
{
  uint64_t v2 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    uint64_t v8 = "HciTransportClose";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "%s", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v3 = (void *)a1[2];
  a1[2] = 0;

  uint64_t v4 = (void *)a1[3];
  a1[3] = 0;

  id v5 = (void *)a1[4];
  a1[4] = 0;

  int v6 = (void *)a1[5];
  a1[5] = 0;
}

void sub_10036FE9C(uint64_t a1, uint64_t *a2)
{
  if (*(void *)(a1 + 24))
  {
    __int16 v3 = *((_WORD *)a2 + 5);
    uint64_t v4 = *a2;
    dispatch_time_t v5 = dispatch_time(0, 5000000);
    int v6 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_10036FF98;
    block[3] = &unk_1009988A0;
    __int16 v9 = v3;
    void block[4] = a1;
    void block[5] = v4;
    dispatch_after(v5, v6, block);
  }
  else
  {
    int v7 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR)) {
      sub_10075AFDC(v7);
    }
  }
}

unsigned char *sub_10036FF98(unsigned char *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 24))
  {
    uint64_t v2 = result;
    char v5 = 0;
    sub_10001B8E0(&v5);
    __int16 v3 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((unsigned __int16 *)v2 + 24);
      *(_DWORD *)long long buf = 136315394;
      int v7 = "sendTransport_block_invoke";
      __int16 v8 = 1024;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s: send HCI event to virtual transport size %d", buf, 0x12u);
    }
    (*(void (**)(void))(*(void *)(v1 + 24) + 16))();
    sub_10001B910(&v5);
    return sub_10001B8AC(&v5);
  }
  return result;
}

void sub_1003700A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

void sub_1003700BC(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  if (*(void *)(a1 + 24))
  {
    __int16 v4 = *((_WORD *)a2 + 5);
    uint64_t v5 = *a2;
    dispatch_time_t v6 = dispatch_time(0, 1000000 * a3);
    int v7 = dispatch_get_global_queue(0, 0);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003701BC;
    block[3] = &unk_1009988A0;
    __int16 v10 = v4;
    void block[4] = a1;
    void block[5] = v5;
    dispatch_after(v6, v7, block);
  }
  else
  {
    __int16 v8 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_ERROR)) {
      sub_10075B060(v8);
    }
  }
}

unsigned char *sub_1003701BC(unsigned char *result)
{
  uint64_t v1 = *((void *)result + 4);
  if (*(void *)(v1 + 24))
  {
    uint64_t v2 = result;
    char v5 = 0;
    sub_10001B8E0(&v5);
    __int16 v3 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *((unsigned __int16 *)v2 + 24);
      *(_DWORD *)long long buf = 136315394;
      int v7 = "sendTransportDelay_block_invoke";
      __int16 v8 = 1024;
      int v9 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "%s send HCI event to virtual transport size %d", buf, 0x12u);
    }
    (*(void (**)(void))(*(void *)(v1 + 24) + 16))();
    sub_10001B910(&v5);
    return sub_10001B8AC(&v5);
  }
  return result;
}

void sub_1003702C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
}

uint64_t sub_1003702E0(uint64_t a1)
{
  pthread_mutex_init((pthread_mutex_t *)a1, 0);
  uint64_t result = pthread_cond_init((pthread_cond_t *)(a1 + 64), 0);
  *(void *)(a1 + 12336) = 0;
  *(void *)(a1 + 12341) = 0;
  return result;
}

uint64_t sub_100370324(uint64_t a1)
{
  *(void *)(a1 + 12336) = 0;
  *(void *)(a1 + 12341) = 0;
  return a1;
}

uint64_t sub_10037036C(uint64_t a1)
{
  return a1;
}

uint64_t sub_1003703A0(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  *(unsigned char *)(a1 + 12348) = 1;
  pthread_cond_signal((pthread_cond_t *)(a1 + 64));

  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t sub_1003703EC(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  uint64_t v2 = (unsigned char *)(a1 + 12348);
  if (*(_DWORD *)(a1 + 12344) == 8)
  {
    while (!*v2)
    {
      pthread_cond_wait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1);
      if (*(_DWORD *)(a1 + 12344) != 8) {
        goto LABEL_4;
      }
    }
  }
  else
  {
LABEL_4:
    if (!*v2)
    {
      uint64_t v3 = a1 + 1528 * *(unsigned int *)(a1 + 12340) + 112;
      goto LABEL_7;
    }
  }
  uint64_t v3 = 0;
LABEL_7:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v3;
}

uint64_t sub_10037047C(uint64_t a1, void *a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  int v4 = (unsigned char *)(a1 + 12348);
  if (*(_DWORD *)(a1 + 12344))
  {
LABEL_4:
    if (!*v4)
    {
      uint64_t v6 = a1 + 1528 * *(unsigned int *)(a1 + 12336);
      uint64_t v5 = v6 + 112;
      *a2 = *(void *)(v6 + 1632);
      goto LABEL_7;
    }
  }
  else
  {
    while (!*v4)
    {
      pthread_cond_wait((pthread_cond_t *)(a1 + 64), (pthread_mutex_t *)a1);
      if (*(_DWORD *)(a1 + 12344)) {
        goto LABEL_4;
      }
    }
  }
  uint64_t v5 = 0;
LABEL_7:
  pthread_mutex_unlock((pthread_mutex_t *)a1);
  return v5;
}

uint64_t sub_100370510(uint64_t a1, uint64_t a2)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  unsigned int v4 = *(_DWORD *)(a1 + 12340);
  *(void *)(a1 + 1528 * v4 + 1632) = a2;
  *(_DWORD *)(a1 + 12340) = ((_BYTE)v4 + 1) & 7;
  int v5 = *(_DWORD *)(a1 + 12344);
  *(_DWORD *)(a1 + 12344) = v5 + 1;
  if (!v5) {
    pthread_cond_signal((pthread_cond_t *)(a1 + 64));
  }

  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t sub_100370580(uint64_t a1)
{
  pthread_mutex_lock((pthread_mutex_t *)a1);
  *(_DWORD *)(a1 + 12336) = (*(_DWORD *)(a1 + 12336) + 1) & 7;
  int v2 = *(_DWORD *)(a1 + 12344);
  *(_DWORD *)(a1 + 12344) = v2 - 1;
  if (v2 == 8) {
    pthread_cond_signal((pthread_cond_t *)(a1 + 64));
  }

  return pthread_mutex_unlock((pthread_mutex_t *)a1);
}

uint64_t sub_1003705E4()
{
  if (qword_100A12488 != -1) {
    dispatch_once(&qword_100A12488, &stru_1009A9690);
  }
  return qword_100A12480;
}

void sub_100370628(id a1)
{
}

void sub_1003706CC()
{
}

void sub_1003706F0(id a1)
{
}

void sub_100370734()
{
}

uint64_t sub_100370758()
{
  if (qword_100A124A8 != -1) {
    dispatch_once(&qword_100A124A8, &stru_1009A96D0);
  }
  return qword_100A124A0;
}

void sub_10037079C(id a1)
{
}

void sub_1003707E0()
{
}

uint64_t sub_100370804()
{
  if (qword_100A124B8 != -1) {
    dispatch_once(&qword_100A124B8, &stru_1009A96F0);
  }
  return qword_100A124B0;
}

void sub_100370848(id a1)
{
}

void sub_10037088C()
{
}

uint64_t sub_1003708B0()
{
  if (qword_100A124C8 != -1) {
    dispatch_once(&qword_100A124C8, &stru_1009A9710);
  }
  return qword_100A124C0;
}

void sub_1003708F4(id a1)
{
}

void sub_100370938()
{
}

void sub_10037095C(id a1)
{
}

void sub_1003709A0()
{
}

void sub_1003709C4(id a1)
{
  uint64_t v1 = getenv("BT_CHIP");
  if (v1 && !strcmp(v1, "ACI BT")) {
    operator new();
  }
  if (qword_100A12508 != -1) {
    dispatch_once(&qword_100A12508, &stru_1009A9790);
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)qword_100A12500 + 264))(qword_100A12500)) {
    operator new();
  }
  if (!qword_100A124E0)
  {
    int v5 = 1046806126;
    *(_OWORD *)long long buf = xmmword_1007BBE90;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1639077591;
    *(_OWORD *)long long buf = xmmword_1007BBECC;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1032708406;
    *(_OWORD *)long long buf = xmmword_1007BBEF4;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1527788847;
    *(_OWORD *)long long buf = xmmword_1007BBFA8;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -350584140;
    *(_OWORD *)long long buf = xmmword_1007BBFD0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 317289457;
    *(_OWORD *)long long buf = xmmword_1007BC0C0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 289690957;
    *(_OWORD *)long long buf = xmmword_1007BC160;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 414393924;
    *(_OWORD *)long long buf = xmmword_1007BC1B0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -232427879;
    *(_OWORD *)long long buf = xmmword_1007BC23C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 2030516999;
    *(_OWORD *)long long buf = xmmword_1007BC278;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1276010597;
    *(_OWORD *)long long buf = xmmword_1007BC2A0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1902732724;
    *(_OWORD *)long long buf = xmmword_1007BC2C8;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -342357580;
    *(_OWORD *)long long buf = xmmword_1007BC2F0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -820493242;
    *(_OWORD *)long long buf = xmmword_1007BC318;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -61007701;
    *(_OWORD *)long long buf = xmmword_1007BC32C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -235416490;
    *(_OWORD *)long long buf = xmmword_1007BC340;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -121925081;
    *(_OWORD *)long long buf = xmmword_1007BC354;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1126727276;
    *(_OWORD *)long long buf = xmmword_1007BC368;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 300130091;
    *(_OWORD *)long long buf = xmmword_1007BC37C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 343814884;
    *(_OWORD *)long long buf = xmmword_1007BC390;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1675932945;
    *(_OWORD *)long long buf = xmmword_1007BC3A4;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1278131292;
    *(_OWORD *)long long buf = xmmword_1007BC3B8;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 659506830;
    *(_OWORD *)long long buf = xmmword_1007BC3E0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1071957977;
    *(_OWORD *)long long buf = xmmword_1007BC408;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 438437663;
    *(_OWORD *)long long buf = xmmword_1007BC41C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -382792827;
    *(_OWORD *)long long buf = xmmword_1007BC430;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1575123478;
    *(_OWORD *)long long buf = xmmword_1007BC444;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 123138233;
    *(_OWORD *)long long buf = xmmword_1007BC458;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 681511593;
    *(_OWORD *)long long buf = xmmword_1007BC46C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 713503427;
    *(_OWORD *)long long buf = xmmword_1007BC480;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1632750650;
    *(_OWORD *)long long buf = xmmword_1007BC494;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1431778695;
    *(_OWORD *)long long buf = xmmword_1007BC4A8;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 533419158;
    *(_OWORD *)long long buf = xmmword_1007BC4BC;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1106979518;
    *(_OWORD *)long long buf = xmmword_1007BC4D0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1820426635;
    *(_OWORD *)long long buf = xmmword_1007BC4E4;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -937652876;
    *(_OWORD *)long long buf = xmmword_1007BC4F8;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -609570151;
    *(_OWORD *)long long buf = xmmword_1007BC50C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -874769875;
    *(_OWORD *)long long buf = xmmword_1007BC520;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1874287171;
    *(_OWORD *)long long buf = xmmword_1007BC534;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -781324731;
    *(_OWORD *)long long buf = xmmword_1007BC548;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1223847566;
    *(_OWORD *)long long buf = xmmword_1007BC55C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 185580364;
    *(_OWORD *)long long buf = xmmword_1007BC570;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1214880059;
    *(_OWORD *)long long buf = xmmword_1007BC584;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 426359977;
    *(_OWORD *)long long buf = xmmword_1007BC598;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 345196535;
    *(_OWORD *)long long buf = xmmword_1007BC5AC;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 440949464;
    *(_OWORD *)long long buf = xmmword_1007BC5C0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -695298128;
    *(_OWORD *)long long buf = xmmword_1007BC5D4;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 804488105;
    *(_OWORD *)long long buf = xmmword_1007BC5FC;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 460218192;
    *(_OWORD *)long long buf = xmmword_1007BC624;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 2144905009;
    *(_OWORD *)long long buf = xmmword_1007BC64C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 688565114;
    *(_OWORD *)long long buf = xmmword_1007BC674;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -493418906;
    *(_OWORD *)long long buf = xmmword_1007BC688;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -545612308;
    *(_OWORD *)long long buf = xmmword_1007BC69C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1178062702;
    *(_OWORD *)long long buf = xmmword_1007BC6B0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -773054213;
    *(_OWORD *)long long buf = xmmword_1007BC6C4;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1204420428;
    *(_OWORD *)long long buf = xmmword_1007BC6D8;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 958549802;
    *(_OWORD *)long long buf = xmmword_1007BC6EC;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -12497897;
    *(_OWORD *)long long buf = xmmword_1007BC700;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1377540371;
    *(_OWORD *)long long buf = xmmword_1007BC714;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -518121279;
    *(_OWORD *)long long buf = xmmword_1007BC728;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1878025452;
    *(_OWORD *)long long buf = xmmword_1007BC73C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1725957070;
    *(_OWORD *)long long buf = xmmword_1007BC750;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 538967431;
    *(_OWORD *)long long buf = xmmword_1007BC764;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 2060712151;
    *(_OWORD *)long long buf = xmmword_1007BC778;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 802516499;
    *(_OWORD *)long long buf = xmmword_1007BC78C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1919324456;
    *(_OWORD *)long long buf = xmmword_1007BC7A0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1127969586;
    *(_OWORD *)long long buf = xmmword_1007BC7B4;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1292009573;
    *(_OWORD *)long long buf = xmmword_1007BC7C8;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1737149739;
    *(_OWORD *)long long buf = xmmword_1007BC7DC;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1918230744;
    *(_OWORD *)long long buf = xmmword_1007BC7F0;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1899561076;
    *(_OWORD *)long long buf = xmmword_1007BC804;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -435113336;
    *(_OWORD *)long long buf = xmmword_1007BC82C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1997581659;
    *(_OWORD *)long long buf = xmmword_1007BC840;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -1441055153;
    *(_OWORD *)long long buf = xmmword_1007BC854;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -2098731532;
    *(_OWORD *)long long buf = xmmword_1007BC868;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -340360463;
    *(_OWORD *)long long buf = xmmword_1007BC87C;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = 1605231531;
    *(_OWORD *)long long buf = xmmword_1007BC890;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -584398440;
    *(_OWORD *)long long buf = xmmword_1007BC8A4;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v5 = -879476163;
    *(_OWORD *)long long buf = xmmword_1007BC8B8;
    if (MGIsDeviceOneOfType()) {
      operator new();
    }
    int v2 = (id)qword_100A19E50;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_FAULT))
    {
      int v3 = MGGetProductType();
      sub_10075B0E4(v3, buf, v2);
    }
  }
}

void sub_100372C08(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100372D80(id a1)
{
}

void sub_100372DC4()
{
}

void sub_100372DE8(id a1)
{
}

void sub_100372E2C()
{
}

uint64_t sub_100372E50()
{
  if (qword_100A12518 != -1) {
    dispatch_once(&qword_100A12518, &stru_1009A97B0);
  }
  return qword_100A12510;
}

void sub_100372E94(id a1)
{
}

uint64_t sub_100372EE4()
{
  if (qword_100A12528 != -1) {
    dispatch_once(&qword_100A12528, &stru_1009A97D0);
  }
  return qword_100A12520;
}

void sub_100372F28(id a1)
{
  if (sub_10053FDE0()) {
    operator new();
  }
}

void sub_100372F74()
{
}

void sub_100372F98(id a1)
{
}

void sub_100372FDC()
{
}

void sub_100373000(id a1)
{
}

void sub_100373044()
{
}

uint64_t sub_100373068()
{
  if (qword_100A12558 != -1) {
    dispatch_once(&qword_100A12558, &stru_1009A9830);
  }
  return qword_100A12550;
}

void sub_1003730AC(id a1)
{
}

void sub_1003730F0()
{
}

uint64_t sub_100373114()
{
  if (qword_100A12568 != -1) {
    dispatch_once(&qword_100A12568, &stru_1009A9850);
  }
  return qword_100A12560;
}

void sub_100373158(id a1)
{
}

void sub_10037319C()
{
}

uint64_t sub_1003731C0()
{
  if (qword_100A12578 != -1) {
    dispatch_once(&qword_100A12578, &stru_1009A9870);
  }
  return qword_100A12570;
}

void sub_100373204(id a1)
{
}

uint64_t sub_100373254()
{
  if (qword_100A12588 != -1) {
    dispatch_once(&qword_100A12588, &stru_1009A9890);
  }
  return qword_100A12580;
}

void sub_100373298(id a1)
{
}

void sub_1003732DC()
{
}

void sub_100373300()
{
}

void sub_100373348()
{
}

void sub_10037336C()
{
}

void sub_1003733B4()
{
}

void sub_1003733D8()
{
}

void sub_100373438()
{
}

uint64_t sub_10037345C()
{
  if (qword_1009FB3A8 != -1) {
    dispatch_once(&qword_1009FB3A8, &stru_1009A98D0);
  }
  return qword_1009FB3A0;
}

id sub_1003734A0()
{
  if (_os_feature_enabled_impl())
  {
    if (qword_100A12598 != -1) {
      dispatch_once(&qword_100A12598, &stru_1009A98B0);
    }
    id v0 = (id)qword_100A12590;
  }
  else
  {
    id v0 = 0;
  }

  return v0;
}

void sub_100373518(id a1)
{
  uint64_t v1 = +[SPOwnerInterface cbPeripheralManagementSession];
  int v2 = (void *)qword_100A12590;
  qword_100A12590 = v1;
}

void *sub_100373558()
{
  if (qword_1009FB3B8 != -1) {
    dispatch_once(&qword_1009FB3B8, &stru_1009A98F0);
  }
  return off_1009FB3B0;
}

void sub_10037359C(id a1)
{
}

void sub_1003735E0()
{
}

void sub_100373604(id a1)
{
}

void sub_100373648()
{
}

uint64_t sub_10037366C(uint64_t a1, uint64_t a2, int a3)
{
  sub_1003737B4((void **)&v16);
  uint64_t v6 = v16;
  int v7 = v17;
  if (v16)
  {
    int v17 = v16;
    operator delete(v16);
  }
  id v9 = objc_alloc_init((Class)CNContactStore);
  __int16 v10 = v9;
  if (a2 == -2)
  {
    uint64_t v11 = +[NSMutableArray array];
    int v12 = (void *)v11;
  }
  else
  {
    int v13 = sub_100373840((uint64_t)v9, v9, a2);
    int v12 = sub_1003739F8(a1, v10, v13, 0, 0, -1, 0);
  }
  if (a2 != -1 && a3) {
    sub_100373C14(v11, v10, v12);
  }
  uint64_t v14 = [v12 count] + ((unint64_t)(v7 - v6) >> 2);

  return v14;
}

void sub_10037378C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003737B4(void **a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v2 = sub_1002C44F0((uint64_t)(a1 + 2), 1uLL);
  int v3 = (char *)*a1;
  unsigned int v4 = (char *)a1[1];
  uint64_t v6 = &v2[v5];
  *int v2 = 0;
  int v7 = v2 + 1;
  while (v4 != v3)
  {
    int v8 = *((_DWORD *)v4 - 1);
    v4 -= 4;
    *--int v2 = v8;
  }
  *a1 = v2;
  a1[1] = v7;
  a1[2] = v6;
  if (v3) {
    operator delete(v3);
  }
  a1[1] = v7;
}

void sub_100373824(_Unwind_Exception *exception_object)
{
  int v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

id sub_100373840(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  if (a3 == -1)
  {
    uint64_t v11 = 0;
  }
  else
  {
    if (a3 == -2)
    {
      uint64_t v5 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_FAULT)) {
        sub_10075B194(v5);
      }
    }
    uint64_t v6 = +[CNGroup predicateForiOSLegacyIdentifier:a3];
    id v13 = 0;
    int v7 = [v4 groupsMatchingPredicate:v6 error:&v13];
    id v8 = v13;
    if ([v7 count] == (id)1)
    {
      id v9 = [v7 firstObject];
      __int16 v10 = [v9 identifier];
      uint64_t v11 = +[CNContact predicateForContactsInGroupWithIdentifier:v10];
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
        sub_10075B12C();
      }
      uint64_t v11 = 0;
    }
  }

  return v11;
}

void sub_1003739B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003739F8(uint64_t a1, void *a2, void *a3, int a4, unsigned int a5, int a6, int a7)
{
  id v12 = a2;
  id v13 = a3;
  id v14 = objc_alloc((Class)CNContactFetchRequest);
  xpc_object_t v15 = sub_100376AF8((uint64_t)v14, a4, a7);
  id v16 = [v14 initWithKeysToFetch:v15];

  int v17 = +[NSMutableArray array];
  [v16 setPredicate:v13];
  if (a4 == 2) {
    [v16 setSortOrder:1];
  }
  id v26 = 0;
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3221225472;
  void v24[2] = sub_100376D1C;
  v24[3] = &unk_1009A9958;
  id v18 = v17;
  id v25 = v18;
  [v12 enumerateContactsWithFetchRequest:v16 error:&v26 usingBlock:v24];
  id v19 = v26;
  if (v19)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_10075B218();
    }

    id v18 = 0;
  }
  else
  {
    sub_100376B90(0, v18, a4);
    sub_100376C64(v20, v18, a5, a6);
  }
  CFIndex v21 = v25;
  id v22 = v18;

  return v22;
}

void sub_100373BC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100373C14(uint64_t a1, void *a2, void *a3)
{
  id v4 = a2;
  id v5 = a3;
  xpc_object_t v15 = v4;
  id v6 = [objc_alloc((Class)CNFavorites) initWithContactStore:v4];
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  int v7 = [v6 entries];
  id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (v8)
  {
    unint64_t v9 = 0;
    uint64_t v10 = *(void *)v17;
    do
    {
      for (int i = 0; i != v8; int i = (char *)i + 1)
      {
        if (*(void *)v17 != v10) {
          objc_enumerationMutation(v7);
        }
        id v12 = [*(id *)(*((void *)&v16 + 1) + 8 * i) contactProperty];
        id v13 = [v12 contact];

        id v14 = [v5 indexOfObject:v13];
        if (v14 == (id)0x7FFFFFFFFFFFFFFFLL)
        {
          [v5 insertObject:v13 atIndex:v9];
        }
        else
        {
          if ((unint64_t)v14 < v9) {
            goto LABEL_11;
          }
          [v5 exchangeObjectAtIndex:v14 withObjectAtIndex:v9];
        }
        ++v9;
LABEL_11:
      }
      id v8 = [v7 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v8);
  }
}

void sub_100373DB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_100373E14()
{
}

void sub_100373E78()
{
}

uint64_t sub_100373E9C()
{
  id v14 = objc_alloc_init((Class)CNContactStore);
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v15 = [objc_alloc((Class)CNFavorites) initWithContactStore:v14];
  uint64_t v1 = [v15 entries];
  id v2 = [v1 countByEnumeratingWithState:&v16 objects:v20 count:16];
  context = v0;
  uint64_t v3 = 0;
  if (v2)
  {
    uint64_t v4 = *(void *)v17;
    uint64_t v5 = CNActionTypeAudioCall;
    uint64_t v6 = CNActionBundleIdentifierPhone;
    do
    {
      for (int i = 0; i != v2; int i = (char *)i + 1)
      {
        if (*(void *)v17 != v4) {
          objc_enumerationMutation(v1);
        }
        id v8 = *(void **)(*((void *)&v16 + 1) + 8 * i);
        unint64_t v9 = [v8 actionType];
        if ([v9 isEqualToString:v5])
        {
          uint64_t v10 = [v8 bundleIdentifier];
          unsigned int v11 = [v10 isEqualToString:v6];

          uint64_t v3 = v3 + v11;
        }
        else
        {
        }
      }
      id v2 = [v1 countByEnumeratingWithState:&v16 objects:v20 count:16];
    }
    while (v2);
  }

  return v3;
}

void sub_100374054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_1003740AC(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, unsigned int a6, int a7)
{
  std::string __p = 0;
  id v26 = 0;
  uint64_t v27 = 0;
  sub_1003737B4(&__p);
  id v14 = __p;
  unint64_t v15 = (v26 - (unsigned char *)__p) >> 2;
  if (v15 <= a5)
  {
    unsigned int v18 = a5 - ((unint64_t)(v26 - (unsigned char *)__p) >> 2);
    id v26 = __p;
  }
  else
  {
    if (a5)
    {
      long long v16 = (char *)__p + 4 * a5;
      uint64_t v17 = v26 - v16;
      if (v26 != v16) {
        memmove(__p, v16, v26 - v16);
      }
      id v26 = &v14[v17];
      unint64_t v15 = (&v14[v17] - (unsigned char *)__p) >> 2;
    }
    if (v15 < a6) {
      a6 -= v15;
    }
    else {
      a6 = 0;
    }
    unsigned int v18 = 0;
  }
  id v20 = objc_alloc_init((Class)CNContactStore);
  CFIndex v21 = v20;
  if (a2 == -2)
  {
    uint64_t v22 = +[NSMutableArray array];
    CFArrayRef v23 = (void *)v22;
  }
  else
  {
    CFArrayRef v24 = sub_100373840((uint64_t)v20, v20, a2);
    CFArrayRef v23 = sub_1003739F8(a1, v21, v24, a4, v18, a6, a7);
  }
  if (a2 != -1)
  {
    if (a3) {
      sub_100373C14(v22, v21, v23);
    }
  }
  operator new();
}

void sub_100374270(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1003742D4()
{
}

void sub_100374358()
{
}

void sub_10037439C()
{
  id v12 = objc_alloc_init((Class)CNContactStore);
  id v1 = [objc_alloc((Class)CNFavorites) initWithContactStore:v12];
  id v13 = +[NSMutableArray array];
  long long v16 = 0u;
  long long v17 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  id v2 = [v1 entries];
  id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v15;
    uint64_t v5 = CNActionTypeAudioCall;
    uint64_t v6 = CNActionBundleIdentifierPhone;
    do
    {
      for (int i = 0; i != v3; int i = (char *)i + 1)
      {
        if (*(void *)v15 != v4) {
          objc_enumerationMutation(v2);
        }
        id v8 = *(void **)(*((void *)&v14 + 1) + 8 * i);
        unint64_t v9 = [v8 actionType];
        if ([v9 isEqualToString:v5])
        {
          uint64_t v10 = [v8 bundleIdentifier];
          unsigned int v11 = [v10 isEqualToString:v6];

          if (v11) {
            [v13 addObject:v8];
          }
        }
        else
        {
        }
      }
      id v3 = [v2 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v3);
  }

  operator new();
}

void sub_10037459C()
{
}

void sub_100374628()
{
}

void sub_10037469C()
{
}

uint64_t sub_1003746C0(unsigned int a1)
{
  uint64_t v10 = 0;
  long long v9 = 0u;
  memset(v8, 0, sizeof(v8));
  memset(&v7, 0, sizeof(v7));
  if (a1 != 1)
  {
    if (!a1)
    {
      id v1 = +[Communicator myNumber];
      id v2 = v1;
      if (v1)
      {
        std::string::assign((std::string *)v8, (const std::string::value_type *)[v1 UTF8String]);
      }
      else
      {
        uint64_t v4 = qword_100A19EF0;
        if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
          sub_10075B304(v4);
        }
        std::string::assign((std::string *)v8, "**APPLE**");
      }
      *(_DWORD *)&v8[24] = 2;
      sub_100379650(@"MY_NUMBER", @"My Number");
      id v5 = objc_claimAutoreleasedReturnValue();
      std::string::assign(&v7, (const std::string::value_type *)[v5 UTF8String]);

      operator new();
    }
    if (a1 >= 3)
    {
      id v3 = qword_100A19EF0;
      if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_FAULT)) {
        sub_10075B280(v3);
      }
    }
  }
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v7.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete((void *)v9);
  }
  if ((v8[23] & 0x80000000) != 0) {
    operator delete(*(void **)v8);
  }
  return 0;
}

void sub_1003749D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v35 - 113) < 0) {
    operator delete(*(void **)(v35 - 136));
  }
  sub_100376850(v35 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_100374AB0(uint64_t a1, uint64_t a2, int a3)
{
  id v6 = objc_alloc_init((Class)CNContactStore);
  std::string v7 = +[CNContact predicateForLegacyIdentifier:a2];
  id v8 = sub_100374C1C(a3);
  long long v9 = [v6 unifiedContactsMatchingPredicate:v7 keysToFetch:v8 error:0];
  if ([v9 count]) {
    operator new();
  }

  return 0;
}

void sub_100374BBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100374C1C(int a1)
{
  id v2 = +[NSMutableArray array];
  if ((a1 & 6) != 0)
  {
    id v3 = +[CNContactFormatter descriptorForRequiredKeysForStyle:0];
    [v2 addObject:v3];

    if ((a1 & 4) != 0)
    {
      [v2 addObject:CNContactPhoneticGivenNameKey];
      [v2 addObject:CNContactPhoneticFamilyNameKey];
    }
  }
  if ((a1 & 0x80) != 0) {
    [v2 addObject:CNContactPhoneNumbersKey];
  }
  if ((a1 & 8) != 0) {
    [v2 addObject:CNContactThumbnailImageDataKey];
  }
  if ((a1 & 0x20) != 0) {
    [v2 addObject:CNContactPostalAddressesKey];
  }
  if ((a1 & 0x100) != 0) {
    [v2 addObject:CNContactEmailAddressesKey];
  }
  if ((a1 & 0x1000) != 0) {
    [v2 addObject:CNContactJobTitleKey];
  }
  if ((a1 & 0x10000) != 0)
  {
    [v2 addObject:CNContactOrganizationNameKey];
    [v2 addObject:CNContactDepartmentNameKey];
  }
  if ((a1 & 0x100000) != 0) {
    [v2 addObject:CNContactUrlAddressesKey];
  }
  if ((a1 & 0x200000) != 0) {
    [v2 addObject:CNContactIOSLegacyIdentifierKey];
  }
  if ((a1 & 0x800000) != 0) {
    [v2 addObject:CNContactNicknameKey];
  }

  return v2;
}

void sub_100374DB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100374DD0(uint64_t a1, void *a2, int a3, int a4)
{
  LODWORD(v5) = a3;
  id v84 = a2;
  int v83 = (int)v5;
  if ((v5 & 6) == 0) {
    goto LABEL_45;
  }
  if ((v5 & 2) != 0)
  {
    id v6 = +[CNContactFormatter stringFromContact:v84 style:0];
    uint64_t v4 = v6;
    if (v6)
    {
      sub_10004191C(&__str, (char *)[v6 UTF8String]);
      std::string::operator=((std::string *)(a1 + 16), &__str);
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
    }
  }
  std::string v7 = [v84 givenName];
  id v8 = [v7 length];
  if (!v8)
  {
    uint64_t v4 = [v84 familyName];
    if (![v4 length])
    {

      goto LABEL_20;
    }
  }
  BOOL v9 = [v84 contactType] == (id)1;
  if (!v8)
  {

    if (v9) {
      goto LABEL_20;
    }
LABEL_13:
    uint64_t v10 = [v84 givenName];
    unsigned int v11 = v10;
    if (v10)
    {
      sub_10004191C(&v143, (char *)[v10 UTF8String]);
      std::string::operator=((std::string *)(a1 + 64), &v143);
      if (SHIBYTE(v143.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v143.__r_.__value_.__l.__data_);
      }
    }

    id v12 = [v84 familyName];
    id v13 = v12;
    if (!v12) {
      goto LABEL_28;
    }
    id v13 = v12;
    sub_10004191C(&v142, (char *)[v13 UTF8String]);
    std::string::operator=((std::string *)(a1 + 40), &v142);
    if ((SHIBYTE(v142.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    long long v14 = &v142;
    goto LABEL_27;
  }

  if (!v9) {
    goto LABEL_13;
  }
LABEL_20:
  long long v15 = [v84 organizationName];
  if (!v15)
  {
    id v13 = 0;
    goto LABEL_28;
  }
  long long v16 = +[CNContactsUserDefaults sharedDefaults];
  BOOL v17 = [v16 sortOrder] == (id)2;

  id v18 = v15;
  id v13 = v18;
  if (v17)
  {
    sub_10004191C(&v145, (char *)[v18 UTF8String]);
    std::string::operator=((std::string *)(a1 + 64), &v145);
    if ((SHIBYTE(v145.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    long long v14 = &v145;
  }
  else
  {
    sub_10004191C(&v144, (char *)[v18 UTF8String]);
    std::string::operator=((std::string *)(a1 + 40), &v144);
    if ((SHIBYTE(v144.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_28;
    }
    long long v14 = &v144;
  }
LABEL_27:
  operator delete(v14->__r_.__value_.__l.__data_);
LABEL_28:

  long long v19 = [v84 middleName];
  id v20 = v19;
  if (v19)
  {
    sub_10004191C(&v141, (char *)[v19 UTF8String]);
    std::string::operator=((std::string *)(a1 + 88), &v141);
    if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v141.__r_.__value_.__l.__data_);
    }
  }

  CFIndex v21 = [v84 namePrefix];
  uint64_t v22 = v21;
  if (v21)
  {
    sub_10004191C(&v140, (char *)[v21 UTF8String]);
    std::string::operator=((std::string *)(a1 + 112), &v140);
    if (SHIBYTE(v140.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v140.__r_.__value_.__l.__data_);
    }
  }

  CFArrayRef v23 = [v84 nameSuffix];
  id v5 = v23;
  if (v23)
  {
    sub_10004191C(&v139, (char *)[v23 UTF8String]);
    std::string::operator=((std::string *)(a1 + 136), &v139);
    if (SHIBYTE(v139.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v139.__r_.__value_.__l.__data_);
    }
  }

  LOBYTE(v5) = v83;
  if ((v83 & 4) != 0)
  {
    CFArrayRef v24 = [v84 phoneticFamilyName];
    id v25 = v24;
    if (v24)
    {
      sub_10004191C(&v138, (char *)[v24 UTF8String]);
      std::string::operator=((std::string *)(a1 + 160), &v138);
      if (SHIBYTE(v138.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v138.__r_.__value_.__l.__data_);
      }
    }

    id v26 = [v84 phoneticGivenName];
    id v5 = v26;
    if (v26)
    {
      sub_10004191C(&v137, (char *)[v26 UTF8String]);
      std::string::operator=((std::string *)(a1 + 184), &v137);
      if (SHIBYTE(v137.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v137.__r_.__value_.__l.__data_);
      }
    }

    LOBYTE(v5) = v83;
  }
LABEL_45:
  if ((v5 & 0x80) != 0)
  {
    long long v135 = 0u;
    long long v136 = 0u;
    long long v133 = 0u;
    long long v134 = 0u;
    obSCNetworkInterfaceRef j = [v84 phoneNumbers];
    id v27 = [obj countByEnumeratingWithState:&v133 objects:v150 count:16];
    if (v27)
    {
      uint64_t v28 = *(void *)v134;
      do
      {
        for (int i = 0; i != v27; int i = (char *)i + 1)
        {
          if (*(void *)v134 != v28) {
            objc_enumerationMutation(obj);
          }
          uint64_t v30 = *(void **)(*((void *)&v133 + 1) + 8 * i);
          *(void *)&long long v118 = 0;
          long long v116 = 0u;
          long long __src = 0u;
          long long v115 = 0u;
          unsigned int v31 = [v30 value];
          int64x2_t v32 = [v31 stringValue];
          uint64_t v33 = sub_100376D28(v32);

          id v34 = v33;
          std::string::assign((std::string *)&v115, (const std::string::value_type *)[v34 UTF8String]);
          uint64_t v35 = [v30 label];
          int v36 = v35;
          if (v35)
          {
            DWORD2(v116) = sub_100376F68(v35);
            if (a4)
            {
              id v37 = +[CNLabeledValue localizedStringForLabel:v36];
              std::string::assign((std::string *)&__src, (const std::string::value_type *)[v37 UTF8String]);
            }
          }

          if (SBYTE7(v116) < 0)
          {
            sub_10003B098(&__dst, (void *)v115, *((unint64_t *)&v115 + 1));
          }
          else
          {
            long long __dst = v115;
            uint64_t v129 = v116;
          }
          int v130 = DWORD2(v116);
          if (SBYTE7(v118) < 0)
          {
            sub_10003B098(&__p, (void *)__src, *((unint64_t *)&__src + 1));
          }
          else
          {
            long long __p = __src;
            uint64_t v132 = v118;
          }
          sub_1003767F0((uint64_t *)a1, &__dst);
          if (SHIBYTE(v132) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v129) < 0) {
            operator delete((void *)__dst);
          }

          if (SBYTE7(v118) < 0) {
            operator delete((void *)__src);
          }
          if (SBYTE7(v116) < 0) {
            operator delete((void *)v115);
          }
        }
        id v27 = [obj countByEnumeratingWithState:&v133 objects:v150 count:16];
      }
      while (v27);
    }

    LOBYTE(v5) = v83;
  }
  if ((v5 & 8) != 0)
  {
    uint64_t v38 = [v84 thumbnailImageData];
    BOOL v39 = v38 == 0;

    if (!v39)
    {
      std::string v40 = [v84 thumbnailImageData];
      char v41 = sub_100377094(v40);

      if (v41)
      {
        id v42 = [v41 base64EncodedStringWithOptions:0];
        sub_10004191C(&v127, (char *)[v42 UTF8String]);
        std::string::operator=((std::string *)(a1 + 208), &v127);
        if (SHIBYTE(v127.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v127.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  __int16 v43 = v83;
  if ((v83 & 0x20) != 0)
  {
    long long v125 = 0u;
    long long v126 = 0u;
    long long v123 = 0u;
    long long v124 = 0u;
    id v85 = [v84 postalAddresses];
    id v44 = [v85 countByEnumeratingWithState:&v123 objects:v149 count:16];
    if (v44)
    {
      uint64_t v45 = *(void *)v124;
      do
      {
        for (SCNetworkInterfaceRef j = 0; j != v44; SCNetworkInterfaceRef j = (char *)j + 1)
        {
          if (*(void *)v124 != v45) {
            objc_enumerationMutation(v85);
          }
          uint64_t v47 = *(void **)(*((void *)&v123 + 1) + 8 * (void)j);
          long long v121 = 0u;
          long long v122 = 0u;
          long long v119 = 0u;
          long long v120 = 0u;
          long long __src = 0u;
          long long v118 = 0u;
          long long v115 = 0u;
          long long v116 = 0u;
          uint64_t v48 = [v47 value];
          std::string v49 = [v48 street];

          if (v49) {
            std::string::assign((std::string *)&v115, (const std::string::value_type *)[v49 UTF8String]);
          }

          uint64_t v50 = [v47 value];
          int v51 = [v50 city];

          if (v51) {
            std::string::assign((std::string *)((char *)&v116 + 8), (const std::string::value_type *)[v51 UTF8String]);
          }

          long long v52 = [v47 value];
          uint64_t v53 = [v52 state];

          if (v53) {
            std::string::assign((std::string *)&v118, (const std::string::value_type *)[v53 UTF8String]);
          }

          v54 = [v47 value];
          uint64_t v55 = [v54 postalCode];

          if (v55) {
            std::string::assign((std::string *)((char *)&v119 + 8), (const std::string::value_type *)[v55 UTF8String]);
          }

          int v56 = [v47 value];
          uint64_t v57 = [v56 country];

          if (v57) {
            std::string::assign((std::string *)&v121, (const std::string::value_type *)[v57 UTF8String]);
          }

          v58 = [v47 label];
          int v59 = v58;
          if (v58) {
            DWORD2(v122) = sub_100376F68(v58);
          }

          sub_100378F54((char *)v105, &v115);
          sub_100378C1C((uint64_t *)(a1 + 256), (long long *)v105);
          if (v114 < 0) {
            operator delete(v113);
          }
          if (v112 < 0) {
            operator delete(v111);
          }
          if (v110 < 0) {
            operator delete(v109);
          }
          if (v108 < 0) {
            operator delete(v107);
          }
          if (v106 < 0) {
            operator delete(v105[0]);
          }
          if (SBYTE7(v122) < 0) {
            operator delete((void *)v121);
          }
          if (SHIBYTE(v120) < 0) {
            operator delete(*((void **)&v119 + 1));
          }
          if (SBYTE7(v119) < 0) {
            operator delete((void *)v118);
          }
          if (SHIBYTE(__src) < 0) {
            operator delete(*((void **)&v116 + 1));
          }
          if (SBYTE7(v116) < 0) {
            operator delete((void *)v115);
          }
        }
        id v44 = [v85 countByEnumeratingWithState:&v123 objects:v149 count:16];
      }
      while (v44);
    }

    __int16 v43 = v83;
  }
  if ((v43 & 0x100) != 0)
  {
    long long v103 = 0u;
    long long v104 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    v60 = [v84 emailAddresses];
    id v61 = [v60 countByEnumeratingWithState:&v101 objects:v148 count:16];
    if (v61)
    {
      uint64_t v62 = *(void *)v102;
      do
      {
        for (k = 0; k != v61; k = (char *)k + 1)
        {
          if (*(void *)v102 != v62) {
            objc_enumerationMutation(v60);
          }
          v64 = *(void **)(*((void *)&v101 + 1) + 8 * (void)k);
          long long v115 = 0uLL;
          *(void *)&long long v116 = 0;
          __int16 v65 = [v64 value];
          v66 = v65;
          if (v65) {
            std::string::assign((std::string *)&v115, (const std::string::value_type *)[v65 UTF8String]);
          }

          if (SBYTE7(v116) < 0)
          {
            sub_10003B098(&v99, (void *)v115, *((unint64_t *)&v115 + 1));
          }
          else
          {
            long long v99 = v115;
            uint64_t v100 = v116;
          }
          sub_10037734C(a1, &v99);
          if (SHIBYTE(v100) < 0) {
            operator delete((void *)v99);
          }
          if (SBYTE7(v116) < 0) {
            operator delete((void *)v115);
          }
        }
        id v61 = [v60 countByEnumeratingWithState:&v101 objects:v148 count:16];
      }
      while (v61);
    }

    __int16 v43 = v83;
  }
  if ((v43 & 0x1000) != 0)
  {
    v67 = [v84 jobTitle];
    v68 = v67;
    if (v67)
    {
      sub_10004191C(&v98, (char *)[v67 UTF8String]);
      std::string::operator=((std::string *)(a1 + 304), &v98);
      if (SHIBYTE(v98.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v98.__r_.__value_.__l.__data_);
      }
    }
  }
  if ((v83 & 0x10000) != 0)
  {
    v69 = [v84 organizationName];
    __int16 v70 = v69;
    if (v69)
    {
      sub_10004191C(&v97, (char *)[v69 UTF8String]);
      std::string::operator=((std::string *)(a1 + 328), &v97);
      if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v97.__r_.__value_.__l.__data_);
      }
    }

    int v71 = [v84 departmentName];
    v72 = v71;
    if (v71)
    {
      sub_10004191C(&v96, (char *)[v71 UTF8String]);
      std::string::operator=((std::string *)(a1 + 352), &v96);
      if (SHIBYTE(v96.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v96.__r_.__value_.__l.__data_);
      }
    }
  }
  int v73 = v83;
  if ((v83 & 0x100000) != 0)
  {
    long long v94 = 0u;
    long long v95 = 0u;
    long long v92 = 0u;
    long long v93 = 0u;
    v74 = [v84 urlAddresses];
    id v75 = [v74 countByEnumeratingWithState:&v92 objects:v147 count:16];
    if (v75)
    {
      uint64_t v76 = *(void *)v93;
      do
      {
        for (m = 0; m != v75; m = (char *)m + 1)
        {
          if (*(void *)v93 != v76) {
            objc_enumerationMutation(v74);
          }
          char v78 = *(void **)(*((void *)&v92 + 1) + 8 * (void)m);
          long long v115 = 0uLL;
          *(void *)&long long v116 = 0;
          __int16 v79 = [v78 value];
          std::string::size_type v80 = v79;
          if (v79) {
            std::string::assign((std::string *)&v115, (const std::string::value_type *)[v79 UTF8String]);
          }

          if (SBYTE7(v116) < 0)
          {
            sub_10003B098(v90, (void *)v115, *((unint64_t *)&v115 + 1));
          }
          else
          {
            *(_OWORD *)v90 = v115;
            uint64_t v91 = v116;
          }
          sub_100377390(a1, (long long *)v90);
          if (SHIBYTE(v91) < 0) {
            operator delete(v90[0]);
          }
          if (SBYTE7(v116) < 0) {
            operator delete((void *)v115);
          }
        }
        id v75 = [v74 countByEnumeratingWithState:&v92 objects:v147 count:16];
      }
      while (v75);
    }

    int v73 = v83;
  }
  if ((v73 & 0x200000) != 0) {
    *(_DWORD *)(a1 + 8) = [v84 iOSLegacyIdentifier] + 2;
  }
  if ((v83 & 0x800000) != 0)
  {
    long long v81 = [v84 nickname];
    int v82 = v81;
    if (v81)
    {
      sub_10004191C(&v89, (char *)[v81 UTF8String]);
      std::string::operator=((std::string *)(a1 + 400), &v89);
      if (SHIBYTE(v89.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v89.__r_.__value_.__l.__data_);
      }
    }
  }
}

void sub_100375BAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  if (SLOBYTE(STACK[0x407]) < 0) {
    operator delete((void *)STACK[0x3F0]);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100376070(uint64_t a1, unsigned int a2)
{
  if (a2 > 1) {
    uint64_t v2 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 72))(a1, a2 - 2);
  }
  else {
    uint64_t v2 = sub_1003746C0(a2);
  }
  if (v2) {
    operator new();
  }
  return 0;
}

void sub_100376120()
{
}

uint64_t sub_100376144(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, int a5)
{
  id v11 = objc_alloc_init((Class)CNContactStore);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  id v12 = +[NSString stringWithUTF8String:a2];
  id v13 = +[CNContact predicateForContactsMatchingName:v12];

  sub_1003739F8(a1, v11, v13, a3, a4, a5, 0);
  if (objc_claimAutoreleasedReturnValue()) {
    operator new();
  }

  return 0;
}

void sub_100376288(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_1003762EC(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, int a5)
{
  id v11 = objc_alloc_init((Class)CNContactStore);
  id v12 = objc_alloc((Class)CNPhoneNumber);
  if (*((char *)a2 + 23) < 0) {
    a2 = (uint64_t *)*a2;
  }
  id v13 = +[NSString stringWithUTF8String:a2];
  id v14 = [v12 initWithStringValue:v13];

  long long v15 = +[CNContact predicateForContactsMatchingPhoneNumber:v14];
  sub_1003739F8(a1, v11, v15, a3, a4, a5, 0);
  if (objc_claimAutoreleasedReturnValue()) {
    operator new();
  }

  return 0;
}

void sub_100376450(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
}

uint64_t sub_1003764C0(uint64_t a1, unsigned int a2)
{
  id v4 = objc_alloc_init((Class)CNContactStore);
  id v5 = [objc_alloc((Class)CNFavorites) initWithContactStore:v4];
  id v6 = [v5 entries];
  id v7 = [v6 count];

  if ((unint64_t)v7 > a2)
  {
    id v8 = [v5 entries];
    BOOL v9 = [v8 objectAtIndexedSubscript:a2];

    uint64_t v10 = [v9 actionType];
    if ([v10 isEqualToString:CNActionTypeAudioCall])
    {
      id v11 = [v9 bundleIdentifier];
      unsigned int v12 = [v11 isEqualToString:CNActionBundleIdentifierPhone];

      if (v12) {
        operator new();
      }
    }
    else
    {
    }
  }

  return 0;
}

void sub_100376720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  sub_100376850((uint64_t)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1003767F0(uint64_t *a1, long long *a2)
{
  unint64_t v4 = a1[31];
  id v3 = a1 + 31;
  unint64_t v5 = *(v3 - 1);
  if (v5 >= v4)
  {
    uint64_t result = sub_100378898(a1 + 29, a2);
  }
  else
  {
    sub_1003789BC((int)v3, (void *)*(v3 - 1), a2);
    uint64_t result = v5 + 56;
    a1[30] = v5 + 56;
  }
  a1[30] = result;
  return result;
}

void sub_100376848(_Unwind_Exception *a1)
{
  *(void *)(v1 + 240) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100376850(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100376894(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  id v3 = objc_alloc_init((Class)CNContactStore);
  v18[0] = CNContactNicknameKey;
  v18[1] = CNContactGivenNameKey;
  unint64_t v4 = +[NSArray arrayWithObjects:v18 count:2];
  id v5 = objc_alloc_init((Class)NSString);
  id v17 = 0;
  id v6 = [v3 _ios_meContactWithKeysToFetch:v4 error:&v17];
  id v7 = v17;
  if (!v7)
  {
    BOOL v9 = [v6 nickname];
    BOOL v10 = [v9 length] == 0;

    if (v10)
    {
      unsigned int v12 = [v6 givenName];
      BOOL v13 = [v12 length] == 0;

      if (v13)
      {
        id v14 = v5;
        goto LABEL_9;
      }
      uint64_t v11 = [v6 givenName];
    }
    else
    {
      uint64_t v11 = [v6 nickname];
    }
    id v14 = (void *)v11;

LABEL_9:
    id v5 = v14;
    sub_10004191C(&v15, (char *)[v5 UTF8String]);
    *(_OWORD *)a1 = v15;
    a1[2] = v16;
    goto LABEL_10;
  }
  id v8 = qword_100A19EF0;
  if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
    sub_10075B348((uint64_t)v7, v8);
  }
LABEL_10:
}

void sub_100376A84(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

id sub_100376AF8(uint64_t a1, int a2, int a3)
{
  id v5 = +[NSMutableArray array];
  id v6 = v5;
  if (a2 == 1) {
    [v5 addObject:CNContactIOSLegacyIdentifierKey];
  }
  if (a3) {
    [v6 addObject:CNContactPhoneNumbersKey];
  }

  return v6;
}

void sub_100376B80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100376B90(uint64_t a1, void *a2, int a3)
{
  id v4 = a2;
  if (a3 == 1) {
    [v4 sortUsingComparator:&stru_1009A9930];
  }
}

void sub_100376BEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

int64_t sub_100376C00(id a1, CNContact *a2, CNContact *a3)
{
  id v4 = a3;
  unsigned int v5 = [(CNContact *)a2 iOSLegacyIdentifier];
  unsigned int v6 = [(CNContact *)v4 iOSLegacyIdentifier];
  if (v5 < v6) {
    int64_t v7 = -1;
  }
  else {
    int64_t v7 = v5 > v6;
  }

  return v7;
}

void sub_100376C50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100376C64(uint64_t a1, void *a2, unsigned int a3, int a4)
{
  id v8 = a2;
  unint64_t v6 = a4 + a3;
  if ((unint64_t)[v8 count] > v6) {
    [v8 removeObjectsInRange:v6, [v8 count] - v6];
  }
  if (a3)
  {
    if ((unint64_t)[v8 count] >= a3) {
      uint64_t v7 = a3;
    }
    else {
      uint64_t v7 = [v8 count];
    }
    [v8 removeObjectsInRange:0, v7];
  }
}

void sub_100376D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

id sub_100376D1C(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) addObject:a2];
}

id sub_100376D28(void *a1)
{
  id v1 = a1;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  id v2 = [&off_1009E1918 countByEnumeratingWithState:&v14 objects:v18 count:16];
  if (v2)
  {
    uint64_t v13 = *(void *)v15;
    do
    {
      for (int i = 0; i != v2; int i = (char *)i + 1)
      {
        if (*(void *)v15 != v13) {
          objc_enumerationMutation(&off_1009E1918);
        }
        uint64_t v4 = *(void *)(*((void *)&v14 + 1) + 8 * i);
        id v5 = objc_alloc_init((Class)NSNumberFormatter);
        unint64_t v6 = +[NSLocale localeWithLocaleIdentifier:v4];
        [v5 setLocale:v6];

        uint64_t v7 = 0;
        id v8 = v1;
        do
        {
          BOOL v9 = +[NSNumber numberWithInteger:v7];
          BOOL v10 = [v5 stringFromNumber:v9];
          uint64_t v11 = [v9 stringValue];
          id v1 = [v8 stringByReplacingOccurrencesOfString:v10 withString:v11];

          ++v7;
          id v8 = v1;
        }
        while (v7 != 10);
      }
      id v2 = [&off_1009E1918 countByEnumeratingWithState:&v14 objects:v18 count:16];
    }
    while (v2);
  }

  return v1;
}

void sub_100376EFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100376F68(void *a1)
{
  id v1 = a1;
  if ([v1 isEqualToString:CNLabelPhoneNumberMobile])
  {
    uint64_t v2 = 1;
  }
  else if ([v1 isEqualToString:CNLabelPhoneNumberiPhone])
  {
    uint64_t v2 = 2;
  }
  else if ([v1 isEqualToString:CNLabelHome])
  {
    uint64_t v2 = 3;
  }
  else if ([v1 isEqualToString:CNLabelWork])
  {
    uint64_t v2 = 4;
  }
  else if ([v1 isEqualToString:CNLabelPhoneNumberMain])
  {
    uint64_t v2 = 5;
  }
  else if (([v1 isEqualToString:CNLabelPhoneNumberHomeFax] & 1) != 0 {
         || ([v1 isEqualToString:CNLabelPhoneNumberWorkFax] & 1) != 0
  }
         || [v1 isEqualToString:CNLabelPhoneNumberOtherFax])
  {
    uint64_t v2 = 6;
  }
  else
  {
    uint64_t v2 = 0;
  }

  return v2;
}

void sub_100377084(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

__CFData *sub_100377094(void *a1)
{
  CFDataRef v1 = a1;
  uint64_t v2 = (__CFData *)objc_opt_new();
  v15[0] = kCGImageSourceCreateThumbnailFromImageAlways;
  v15[1] = kCGImageSourceThumbnailMaxPixelSize;
  v16[0] = &__kCFBooleanTrue;
  v16[1] = &off_1009E0DE8;
  CFDictionaryRef v4 = +[NSDictionary dictionaryWithObjects:v16 forKeys:v15 count:2];
  id v5 = CGImageSourceCreateWithData(v1, 0);
  ThumbnailAtIndex = CGImageSourceCreateThumbnailAtIndex(v5, 0, v4);
  uint64_t v7 = CGImageDestinationCreateWithData(v2, @"public.jpeg", 1uLL, 0);
  CFStringRef v13 = kCGImageDestinationLossyCompressionQuality;
  long long v14 = &off_1009E1AC8;
  CFDictionaryRef v8 = +[NSDictionary dictionaryWithObjects:&v14 forKeys:&v13 count:1];
  CGImageDestinationAddImage(v7, ThumbnailAtIndex, v8);
  CGImageDestinationFinalize(v7);
  CFRelease(v5);
  CFRelease(ThumbnailAtIndex);
  CFRelease(v7);
  if (v2 && [(__CFData *)v2 length])
  {
    int v9 = 1;
  }
  else
  {
    BOOL v10 = qword_100A19EF0;
    if (os_log_type_enabled((os_log_t)qword_100A19EF0, OS_LOG_TYPE_ERROR)) {
      sub_10075B3C0(v10);
    }
    int v9 = 0;
  }

  if (v9) {
    uint64_t v11 = v2;
  }
  else {
    uint64_t v11 = 0;
  }

  return v11;
}

void sub_10037728C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003772D8(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_10037734C(uint64_t a1, long long *a2)
{
  id v3 = (char **)(a1 + 280);
  unint64_t v4 = *(void *)(a1 + 288);
  if (v4 >= *(void *)(a1 + 296))
  {
    uint64_t result = sub_10037913C(v3, a2);
  }
  else
  {
    sub_1003790DC(v3, a2);
    uint64_t result = (char *)(v4 + 24);
  }
  *(void *)(a1 + 288) = result;
  return result;
}

char *sub_100377390(uint64_t a1, long long *a2)
{
  id v3 = (char **)(a1 + 376);
  unint64_t v4 = *(void *)(a1 + 384);
  if (v4 >= *(void *)(a1 + 392))
  {
    uint64_t result = sub_100379308(v3, a2);
  }
  else
  {
    sub_1003792A8(v3, a2);
    uint64_t result = (char *)(v4 + 24);
  }
  *(void *)(a1 + 384) = result;
  return result;
}

uint64_t sub_1003773D4(const std::string *a1)
{
  if (!std::string::compare(a1, "mobile")) {
    return 1;
  }
  if (!std::string::compare(a1, "iPhone")) {
    return 2;
  }
  if (!std::string::compare(a1, "home")) {
    return 3;
  }
  if (!std::string::compare(a1, "work")) {
    return 4;
  }
  if (!std::string::compare(a1, "main")) {
    return 5;
  }
  if (!std::string::compare(a1, "home fax")
    || !std::string::compare(a1, "work fax")
    || !std::string::compare(a1, "other fax"))
  {
    return 6;
  }
  return 0;
}

uint64_t sub_1003774C4(uint64_t a1, size_t a2, void *a3)
{
  id v5 = a3;
  sub_1005DB244(a1, a2);
  *(void *)a1 = off_1009A9988;
  *(void *)(a1 + 24) = v5;
  *(_DWORD *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  return a1;
}

void sub_100377530(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100377540(uint64_t a1)
{
  return sub_1005DB2B0(a1);
}

id sub_10037758C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 32) != a2)
  {
    *(_DWORD *)(a1 + 32) = a2;
    uint64_t v3 = sub_100374C1C(a2);
    unint64_t v4 = *(void **)(a1 + 40);
    *(void *)(a1 + 40) = v3;
  }
  id v5 = *(void **)(a1 + 40);

  return v5;
}

void *sub_1003775E8(void *a1, void *a2, _DWORD *a3, void *a4)
{
  id v7 = a2;
  id v8 = a4;
  sub_1003774C4((uint64_t)a1, (unsigned __int16)((unsigned __int16)[v8 count] + ((a3[2] - *a3) >> 2)), v7);
  *a1 = off_1009A99B8;
  sub_1002EACE8(a1 + 6, (uint64_t)a3);
  a1[9] = v8;

  return a1;
}

void sub_100377680(_Unwind_Exception *a1)
{
  sub_100377540(v2);

  _Unwind_Resume(a1);
}

uint64_t sub_1003776A4(uint64_t a1)
{
  *(void *)a1 = off_1009A99B8;

  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }

  return sub_100377540(a1);
}

void sub_100377710(uint64_t a1)
{
  sub_1003776A4(a1);

  operator delete();
}

uint64_t sub_100377748(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v1 = *(void *)(a1 + 56);
  long long v13 = 0u;
  long long v14 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  id v3 = *(id *)(a1 + 72);
  id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
  unint64_t v5 = (unint64_t)(v1 - v2) >> 2;
  if (v4)
  {
    uint64_t v6 = *(void *)v14;
    do
    {
      id v7 = 0;
      do
      {
        if (*(void *)v14 != v6) {
          objc_enumerationMutation(v3);
        }
        id v8 = *(void **)(*((void *)&v13 + 1) + 8 * (void)v7);
        if (objc_msgSend(v8, "isKeyAvailable:", CNContactPhoneNumbersKey, (void)v13))
        {
          BOOL v10 = [v8 phoneNumbers];
          unsigned __int16 v11 = (unsigned __int16)[v10 count];

          LOWORD(v5) = v5 + v11;
        }
        id v7 = (char *)v7 + 1;
      }
      while (v4 != v7);
      id v4 = [v3 countByEnumeratingWithState:&v13 objects:v17 count:16];
    }
    while (v4);
  }

  return (unsigned __int16)v5;
}

void sub_10037789C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003778C8(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  if (a2 >= (unint64_t)((*(void *)(a1 + 56) - v2) >> 2)) {
    operator new();
  }
  unsigned int v3 = *(_DWORD *)(v2 + 4 * a2);

  return sub_1003746C0(v3);
}

void sub_100377A18(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100377A70(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v4 = sub_1004AF53C(a2);
  id v5 = objc_alloc_init((Class)CNContactStore);
  sub_1003774C4(a1, v4, v5);

  *(void *)a1 = off_1009A99E8;
  *(void *)(a1 + 48) = a2;
  *(void *)(a1 + 56) = 0;
  id v6 = objc_alloc_init((Class)NSDateFormatter);
  id v7 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v6;

  id v8 = [objc_alloc((Class)NSLocale) initWithLocaleIdentifier:@"en_US_POSIX"];
  [*(id *)(a1 + 56) setLocale:v8];

  [*(id *)(a1 + 56) setDateFormat:@"yyyyMMdd'T'HHmmss"];
  return a1;
}

void sub_100377B44(_Unwind_Exception *a1)
{
  unsigned int v3 = v2;

  sub_100377540(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100377B7C(uint64_t a1)
{
  *(void *)a1 = off_1009A99E8;
  sub_1004AF498(*(void *)(a1 + 48));

  return sub_100377540(a1);
}

void sub_100377BDC(_Unwind_Exception *a1)
{
  sub_100377540(v1);
  _Unwind_Resume(a1);
}

void sub_100377BFC(uint64_t a1)
{
  sub_100377B7C(a1);

  operator delete();
}

uint64_t sub_100377C34(uint64_t a1)
{
  return (unsigned __int16)sub_1004AF53C(*(void *)(a1 + 48));
}

void sub_100377C54()
{
}

void sub_100378160(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_100376850(v29 - 144);

  _Unwind_Resume(a1);
}

void *sub_100378264(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  sub_1003774C4((uint64_t)a1, (unsigned __int16)[v6 count], v5);
  *a1 = off_1009A9A18;
  a1[6] = v6;

  return a1;
}

void sub_1003782DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003782F0(uint64_t a1)
{
  return sub_100377540(a1);
}

void sub_10037832C(uint64_t a1)
{
  sub_100377540(a1);

  operator delete();
}

uint64_t sub_10037837C(uint64_t a1)
{
  return (unsigned __int16)[*(id *)(a1 + 48) count];
}

void sub_10037839C()
{
}

void sub_100378640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }

  sub_100376850((uint64_t)&a20);
  _Unwind_Resume(a1);
}

void sub_100378700()
{
  JUMPOUT(0x1003786F4);
}

void sub_10037870C()
{
}

void sub_100378714()
{
}

void sub_100378738()
{
}

void sub_100378750(void *a1)
{
  sub_10037881C(a1);

  operator delete();
}

uint64_t sub_100378788(uint64_t a1)
{
  return (unsigned __int16)(28087
                          * ((*(_DWORD *)(*(void *)(a1 + 24) + 240)
                                          - *(_DWORD *)(*(void *)(a1 + 24) + 232)) >> 3));
}

void sub_1003787B0()
{
}

void sub_1003787F8()
{
}

uint64_t sub_10037881C(void *a1)
{
  *a1 = &off_1009A9AD0;
  uint64_t v2 = a1[3];
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  return sub_1005DB2B0((uint64_t)a1);
}

uint64_t sub_100378898(uint64_t *a1, long long *a2)
{
  uint64_t v2 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x492492492492492) {
    abort();
  }
  int v6 = a1 + 16;
  if (0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3) > v3) {
    unint64_t v3 = 0xDB6DB6DB6DB6DB6ELL * ((a1[2] - *a1) >> 3);
  }
  if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((a1[2] - *a1) >> 3)) >= 0x249249249249249) {
    unint64_t v7 = 0x492492492492492;
  }
  else {
    unint64_t v7 = v3;
  }
  long long v15 = a1 + 2;
  if (v7) {
    id v8 = (char *)sub_100378AFC((uint64_t)(a1 + 2), v7);
  }
  else {
    id v8 = 0;
  }
  unsigned __int16 v11 = v8;
  unsigned int v12 = &v8[56 * v2];
  long long v14 = &v8[56 * v7];
  sub_1003789BC(v6, v12, a2);
  long long v13 = v12 + 56;
  sub_100378A58(a1, &v11);
  uint64_t v9 = a1[1];
  sub_100378B48(&v11);
  return v9;
}

void sub_1003789A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100378B48((void **)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_1003789BC(int a1, void *__dst, long long *a3)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v5 = *a3;
    __dst[2] = *((void *)a3 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  *((_DWORD *)__dst + 6) = *((_DWORD *)a3 + 6);
  uint64_t result = __dst + 4;
  if (*((char *)a3 + 55) < 0) {
    return sub_10003B098(result, *((void **)a3 + 4), *((void *)a3 + 5));
  }
  long long v7 = a3[2];
  __dst[6] = *((void *)a3 + 6);
  *(_OWORD *)uint64_t result = v7;
  return result;
}

void sub_100378A3C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100378A58(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 56;
      long long v6 = *(_OWORD *)(v3 - 56);
      *(void *)(v4 - 40) = *(void *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v6;
      *(void *)(v3 - 48) = 0;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 56) = 0;
      *(_DWORD *)(v4 - 32) = *(_DWORD *)(v3 - 32);
      long long v7 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v7;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v3 -= 56;
      v4 -= 56;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v8 = *result;
  *uint64_t result = v5;
  a2[1] = v8;
  uint64_t v9 = result[1];
  result[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = result[2];
  result[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *sub_100378AFC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_1000616DC();
  }
  return operator new(56 * a2);
}

void **sub_100378B48(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100378B7C(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 56;
    sub_100378BC4(v4, i - 56);
  }
}

void sub_100378BC4(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 55) < 0) {
    operator delete(*(void **)(a2 + 32));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

void *sub_100378C1C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = (uint64_t)(v7 - *a1) >> 7;
    if ((unint64_t)(v10 + 1) >> 57) {
      abort();
    }
    uint64_t v11 = v5 - *a1;
    uint64_t v12 = v11 >> 6;
    if (v11 >> 6 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFF80) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      long long v14 = (char *)sub_100378E18(v4, v13);
    }
    else {
      long long v14 = 0;
    }
    long long v15 = v14;
    long long v16 = &v14[128 * v10];
    id v18 = &v14[128 * v13];
    sub_100378F54(v16, a2);
    long long v17 = v16 + 128;
    sub_100378D2C(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = sub_100378E50(&v15);
  }
  else
  {
    uint64_t result = sub_100378F54(*(char **)(v4 - 8), a2);
    uint64_t v9 = v7 + 128;
    a1[1] = v7 + 128;
  }
  a1[1] = v9;
  return result;
}

void sub_100378D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100378D2C(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 128;
      long long v6 = *(_OWORD *)(v3 - 128);
      *(void *)(v4 - 112) = *(void *)(v3 - 112);
      *(_OWORD *)(v4 - 128) = v6;
      *(void *)(v3 - 120) = 0;
      *(void *)(v3 - 112) = 0;
      *(void *)(v3 - 128) = 0;
      long long v7 = *(_OWORD *)(v3 - 104);
      *(void *)(v4 - 88) = *(void *)(v3 - 88);
      *(_OWORD *)(v4 - 104) = v7;
      *(void *)(v3 - 96) = 0;
      *(void *)(v3 - 88) = 0;
      *(void *)(v3 - 104) = 0;
      long long v8 = *(_OWORD *)(v3 - 80);
      *(void *)(v4 - 64) = *(void *)(v3 - 64);
      *(_OWORD *)(v4 - 80) = v8;
      *(void *)(v3 - 72) = 0;
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 80) = 0;
      long long v9 = *(_OWORD *)(v3 - 56);
      *(void *)(v4 - 40) = *(void *)(v3 - 40);
      *(_OWORD *)(v4 - 56) = v9;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 48) = 0;
      *(void *)(v3 - 40) = 0;
      long long v10 = *(_OWORD *)(v3 - 32);
      *(void *)(v4 - 16) = *(void *)(v3 - 16);
      *(_OWORD *)(v4 - 32) = v10;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 24) = 0;
      *(void *)(v3 - 16) = 0;
      *(_DWORD *)(v4 - 8) = *(_DWORD *)(v3 - 8);
      v3 -= 128;
      v4 -= 128;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v11 = *result;
  *uint64_t result = v5;
  a2[1] = v11;
  uint64_t v12 = result[1];
  result[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = result[2];
  result[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return result;
}

void *sub_100378E18(uint64_t a1, unint64_t a2)
{
  if (a2 >> 57) {
    sub_1000616DC();
  }
  return operator new(a2 << 7);
}

void **sub_100378E50(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100378E84(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 128;
    sub_100378ECC(v4, i - 128);
  }
}

void sub_100378ECC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 119) < 0) {
    operator delete(*(void **)(a2 + 96));
  }
  if (*(char *)(a2 + 95) < 0) {
    operator delete(*(void **)(a2 + 72));
  }
  if (*(char *)(a2 + 71) < 0) {
    operator delete(*(void **)(a2 + 48));
  }
  if (*(char *)(a2 + 47) < 0) {
    operator delete(*(void **)(a2 + 24));
  }
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t v3 = *(void **)a2;
    operator delete(v3);
  }
}

char *sub_100378F54(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10003B098(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10003B098(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10003B098(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  long long v8 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_10003B098(v8, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v9 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *(_OWORD *)long long v8 = v9;
  }
  *((_DWORD *)__dst + 30) = *((_DWORD *)a2 + 30);
  return __dst;
}

void sub_100379078(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003790DC(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10003B098((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_100379134(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_10037913C(char **a1, long long *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  long long v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v25 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_1002B3440(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[24 * v3];
  uint64_t v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  CFArrayRef v24 = &v11[24 * v10];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(v12, *(void **)a2, *((void *)a2 + 1));
    long long v14 = (char *)v23.i64[1];
    uint64_t v12 = (char *)v23.i64[0];
  }
  else
  {
    long long v13 = *a2;
    *((void *)v12 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    long long v14 = &v11[24 * v3];
  }
  long long v16 = *a1;
  unint64_t v15 = (unint64_t)a1[1];
  if ((char *)v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      long long v17 = *(_OWORD *)(v15 - 24);
      *((void *)v12 - 1) = *(void *)(v15 - 8);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 24;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 8) = 0;
      *(void *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((char *)v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
  }
  uint64_t v19 = v14 + 24;
  *a1 = v12;
  a1[1] = v14 + 24;
  int64x2_t v23 = v18;
  id v20 = a1[2];
  a1[2] = v24;
  CFArrayRef v24 = v20;
  uint64_t v22 = (char *)v18.i64[0];
  sub_1002B4440((uint64_t)&v22);
  return v19;
}

void sub_100379294(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002B4440((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1003792A8(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    uint64_t result = sub_10003B098((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_100379300(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_100379308(char **a1, long long *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    abort();
  }
  long long v8 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v8 - v2) >> 3);
  if (2 * v9 > v4) {
    unint64_t v4 = 2 * v9;
  }
  if (v9 >= 0x555555555555555) {
    unint64_t v10 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v10 = v4;
  }
  uint64_t v25 = v7;
  if (v10) {
    uint64_t v11 = (char *)sub_1002B3440(v7, v10);
  }
  else {
    uint64_t v11 = 0;
  }
  uint64_t v12 = &v11[24 * v3];
  uint64_t v22 = v11;
  v23.i64[0] = (uint64_t)v12;
  v23.i64[1] = (uint64_t)v12;
  CFArrayRef v24 = &v11[24 * v10];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(v12, *(void **)a2, *((void *)a2 + 1));
    long long v14 = (char *)v23.i64[1];
    uint64_t v12 = (char *)v23.i64[0];
  }
  else
  {
    long long v13 = *a2;
    *((void *)v12 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v12 = v13;
    long long v14 = &v11[24 * v3];
  }
  long long v16 = *a1;
  unint64_t v15 = (unint64_t)a1[1];
  if ((char *)v15 == *a1)
  {
    int64x2_t v18 = vdupq_n_s64(v15);
  }
  else
  {
    do
    {
      long long v17 = *(_OWORD *)(v15 - 24);
      *((void *)v12 - 1) = *(void *)(v15 - 8);
      *(_OWORD *)(v12 - 24) = v17;
      v12 -= 24;
      *(void *)(v15 - 16) = 0;
      *(void *)(v15 - 8) = 0;
      *(void *)(v15 - 24) = 0;
      v15 -= 24;
    }
    while ((char *)v15 != v16);
    int64x2_t v18 = *(int64x2_t *)a1;
  }
  uint64_t v19 = v14 + 24;
  *a1 = v12;
  a1[1] = v14 + 24;
  int64x2_t v23 = v18;
  id v20 = a1[2];
  a1[2] = v24;
  CFArrayRef v24 = v20;
  uint64_t v22 = (char *)v18.i64[0];
  sub_1002B4440((uint64_t)&v22);
  return v19;
}

void sub_100379460(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1002B4440((uint64_t)va);
  _Unwind_Resume(a1);
}

id sub_100379474(void *a1, void *a2, void *a3)
{
  id v5 = a1;
  id v6 = a2;
  id v7 = a3;
  if (qword_100A125A8 != -1) {
    dispatch_once(&qword_100A125A8, &stru_1009A9AF0);
  }
  id v8 = (id)qword_100A125A0;
  unint64_t v9 = v8;
  if (v8)
  {
    unint64_t v10 = [v8 localizations];
    uint64_t v11 = +[NSLocale preferredLanguages];
    uint64_t v12 = (void *)v11;
    if (!v10 || !v11) {
      goto LABEL_11;
    }
    long long v14 = +[NSBundle preferredLocalizationsFromArray:v10 forPreferences:v12];
    unint64_t v15 = [v14 firstObject];

    if (v15)
    {
      id v16 = [v9 localizedStringForKey:v5 value:v6 table:v7 localization:v15];
    }
    else
    {
      id v16 = 0;
    }

    if (!v16)
    {
LABEL_11:
      id v16 = [v9 localizedStringForKey:v5 value:v6 table:v7];
    }
  }
  else
  {
    id v16 = v6;
  }

  return v16;
}

void sub_100379600(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_100379650(void *a1, void *a2)
{
  uint64_t v2 = sub_100379474(a1, a2, @"Localizable");

  return v2;
}

id sub_100379684(void *a1, void *a2)
{
  uint64_t v2 = sub_100379474(a1, a2, @"Localizable-Internal");

  return v2;
}

void sub_1003796B8(id a1)
{
  id v3 = +[NSURL fileURLWithPath:@"/System/Library/PrivateFrameworks/MobileBluetooth.framework"];
  uint64_t v1 = +[NSBundle bundleWithURL:](NSBundle, "bundleWithURL:");
  uint64_t v2 = (void *)qword_100A125A0;
  qword_100A125A0 = v1;
}

void sub_100379734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void *sub_100379748(void *a1, uint64_t a2)
{
  int v3 = a1 + 8;
  *a1 = off_1009A9B20;
  a1[1] = off_1009A9C10;
  a1[2] = a2;
  int v4 = a1 + 24;
  uint64_t v5 = sub_1004AFB34();
  uint64_t v6 = sub_10027710C(v4, v3, "com.apple.BTServer.avrcp", *(dispatch_queue_t *)(v5 + 8));
  sub_10027714C(v6);
  return a1;
}

void sub_1003797D4(_Unwind_Exception *a1)
{
  sub_100277148(v1);
  _Unwind_Resume(a1);
}

void sub_1003797EC(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  v1[0] = _NSConcreteStackBlock;
  v1[1] = 3221225472;
  v1[2] = sub_100379864;
  v1[3] = &unk_100997528;
  v1[4] = a1;
  sub_1002771FC(a1 + 24, v1);
}

uint64_t sub_100379864(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 200))();
  }
  return result;
}

void sub_100379894(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 - 501) <= 0xB && ((0xF1Fu >> (a3 + 11)))
  {
    int64_t v5 = qword_1007BC8F0[a3 - 501];
    xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_int64(v6, "kCommand", v5);
    sub_1004A82EC((unsigned __int8 *)(a2 + 128), __p);
    if (v9 >= 0) {
      id v7 = __p;
    }
    else {
      id v7 = (void **)__p[0];
    }
    xpc_dictionary_set_string(v6, "kSource", (const char *)v7);
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    sub_100379984(a1, "SendCommand", v6, 0);
  }
}

void sub_100379968(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100379984(uint64_t a1, char *a2, void *a3, void *a4)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10037CDB0;
  v8[3] = &unk_1009A9CF0;
  uint64_t v6 = a1 + 24;
  id v9 = a4;
  unint64_t v10 = a2;
  id v7 = v9;
  sub_100277398(v6, a2, a3, v8);
}

void sub_100379A34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_100379A4C(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100379B04;
  v4[3] = &unk_1009A9C30;
  id v5 = a2;
  uint64_t v6 = a1;
  id v3 = v5;
  sub_100379984(a1, "GetSettings", 0, v4);
}

void sub_100379AEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100379B04(uint64_t a1, int a2, xpc_object_t xdict)
{
  int v6 = 1;
  int v7 = 1;
  if (a2 == 4) {
    sub_100379B80(a1, xdict, &v7, &v6);
  }
  int v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v4();
}

unint64_t sub_100379B80(int a1, xpc_object_t xdict, _DWORD *a3, _DWORD *a4)
{
  unint64_t int64 = xpc_dictionary_get_int64(xdict, "kRepeatMode");
  if (int64 <= 3) {
    *a3 = dword_1007BC950[int64];
  }
  unint64_t result = xpc_dictionary_get_int64(xdict, "kShuffleMode");
  if (result <= 3) {
    *a4 = dword_1007BC960[result];
  }
  return result;
}

void sub_100379C00(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100379CB8;
  v4[3] = &unk_1009A9C58;
  id v5 = a2;
  id v3 = v5;
  sub_100379984(a1, "GetPlayStatus", 0, v4);
}

void sub_100379CA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100379CB8(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4)
  {
    xpc_dictionary_get_double(xdict, "kTrackDuration");
    xpc_dictionary_get_double(xdict, "kTrackPosition");
    xpc_dictionary_get_int64(xdict, "kPlaybackState");
  }
  id v5 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v5();
}

void sub_100379D70(uint64_t a1, void *a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  void v4[2] = sub_100379E28;
  v4[3] = &unk_1009A9C58;
  id v5 = a2;
  id v3 = v5;
  sub_100379984(a1, "GetElementAttributes", 0, v4);
}

void sub_100379E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100379E28(uint64_t a1, int a2, void *a3)
{
  long long v19 = 0u;
  memset(&__p, 0, sizeof(__p));
  *(_OWORD *)long long v17 = 0u;
  *(_OWORD *)int64x2_t v18 = 0u;
  *(_OWORD *)unint64_t v15 = 0u;
  long long v16 = 0u;
  *(_OWORD *)long long v14 = 0u;
  sub_10004191C(v14, "");
  sub_10004191C(&v15[1], "");
  sub_10004191C(v17, "");
  sub_10004191C(&v18[1], "");
  sub_10004191C(&__p, "");
  if (a2 == 4)
  {
    string = xpc_dictionary_get_string(a3, "kTitle");
    if (string) {
      std::string::assign((std::string *)v14, string);
    }
    int v7 = xpc_dictionary_get_string(a3, "kAlbum");
    if (v7) {
      std::string::assign((std::string *)v17, v7);
    }
    id v8 = xpc_dictionary_get_string(a3, "kArtist");
    if (v8) {
      std::string::assign((std::string *)&v15[1], v8);
    }
    id v9 = xpc_dictionary_get_string(a3, "kGenre");
    if (v9) {
      std::string::assign((std::string *)&v18[1], v9);
    }
    xpc_object_t value = xpc_dictionary_get_value(a3, "kQueueIndex");
    if (value) {
      xpc_int64_get_value(value);
    }
    xpc_object_t v11 = xpc_dictionary_get_value(a3, "kQueueCount");
    if (v11) {
      xpc_int64_get_value(v11);
    }
    xpc_object_t v12 = xpc_dictionary_get_value(a3, "kDuration");
    if (v12) {
      xpc_double_get_value(v12);
    }
    long long v13 = xpc_dictionary_get_string(a3, "kImageHandle");
    if (v13) {
      std::string::assign(&__p, v13);
    }
  }
  (*(void (**)(void, BOOL))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), a2 == 4);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  if (SHIBYTE(v18[0]) < 0) {
    operator delete(v17[0]);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v15[0]) < 0) {
    operator delete(v14[0]);
  }
}

void sub_10037A060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
}

uint64_t sub_10037A0F4(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10037A168(uint64_t a1, int a2, int a3)
{
  uint64_t v4 = 3;
  uint64_t v5 = -1;
  if (a2 == 2) {
    uint64_t v5 = 2;
  }
  BOOL v6 = a2 == 3 || a2 == 2;
  if (a2 != 3) {
    uint64_t v4 = v5;
  }
  int v7 = a2 == 1 || v6;
  if (a2 == 1) {
    int64_t v8 = 1;
  }
  else {
    int64_t v8 = v4;
  }
  if (a3 == 1)
  {
    int64_t v9 = 1;
  }
  else if (a3 == 2)
  {
    int64_t v9 = 3;
  }
  else
  {
    if (!v7) {
      return;
    }
    int64_t v9 = -1;
  }
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v10, "kRepeatMode", v8);
  xpc_dictionary_set_int64(v10, "kShuffleMode", v9);

  sub_100379984(a1, "SetSettings", v10, 0);
}

void sub_10037A264(uint64_t a1, void *a2, uint64_t a3)
{
  xpc_object_t v5 = xpc_array_create(0, 0);
  for (uint64_t i = *(void *)(a3 + 8); i != a3; uint64_t i = *(void *)(i + 8))
    xpc_array_set_int64(v5, 0xFFFFFFFFFFFFFFFFLL, *(unsigned int *)(i + 16));
  xpc_dictionary_set_value(a2, "kAttributeIDs", v5);

  xpc_release(v5);
}

const char *sub_10037A2EC@<X0>(xpc_object_t xdict@<X1>, void *a2@<X8>)
{
  *a2 = a2;
  a2[1] = a2;
  a2[2] = 0;
  if (xpc_dictionary_get_string(xdict, "kTitle")) {
    operator new();
  }
  if (xpc_dictionary_get_string(xdict, "kArtist")) {
    operator new();
  }
  if (xpc_dictionary_get_string(xdict, "kAlbum")) {
    operator new();
  }
  if (xpc_dictionary_get_string(xdict, "kTrackNumber")) {
    operator new();
  }
  if (xpc_dictionary_get_string(xdict, "kTrackCount")) {
    operator new();
  }
  if (xpc_dictionary_get_string(xdict, "kGenre")) {
    operator new();
  }
  if (xpc_dictionary_get_string(xdict, "kPlayingTime")) {
    operator new();
  }
  unint64_t result = xpc_dictionary_get_string(xdict, "kImageHandle");
  if (result) {
    operator new();
  }
  return result;
}

void sub_10037A8E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void sub_10037AA24(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v6, "kPlayerId", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10037AB18;
  v8[3] = &unk_1009A9C58;
  id v7 = v5;
  id v9 = v7;
  sub_100379984(a1, "SetAddressedPlayer", v6, v8);
}

void sub_10037AAF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10037AB18(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10037AB28(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v6, "kPlayerId", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10037AC1C;
  v8[3] = &unk_1009A9C58;
  id v7 = v5;
  id v9 = v7;
  sub_100379984(a1, "SetBrowsedPlayer", v6, v8);
}

void sub_10037ABFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10037AC1C(uint64_t a1, int a2, xpc_object_t xdict)
{
  v7[0] = 0;
  v7[1] = v7;
  _DWORD v7[2] = 0x4812000000;
  v7[3] = sub_10004D004;
  v7[4] = sub_10004CE00;
  void v7[5] = 0;
  v8[0] = v8;
  v8[1] = v8;
  _DWORD v8[2] = 0;
  if (a2 == 4)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kFolders");
    xpc_dictionary_get_int64(xdict, "kNumItems");
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    void v6[2] = sub_10037AD94;
    v6[3] = &unk_1009A94B0;
    v6[4] = v7;
    xpc_array_apply(value, v6);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_object_dispose(v7, 8);
  sub_10037D324(v8);
}

void sub_10037AD70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  _Block_object_dispose(va, 8);
  sub_10037D324(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_10037AD94(uint64_t a1, int a2, xpc_object_t xstring)
{
  string_ptr = (char *)xpc_string_get_string_ptr(xstring);
  id v5 = *(void **)(*(void *)(a1 + 32) + 8);
  sub_10004191C(&v9, string_ptr);
  xpc_object_t v6 = operator new(0x28uLL);
  v6[4] = v10;
  *((_OWORD *)v6 + 1) = v9;
  uint64_t v7 = v5[6];
  v5 += 6;
  *xpc_object_t v6 = v7;
  v6[1] = v5;
  *(void *)(v7 + 8) = v6;
  *id v5 = v6;
  ++v5[2];
  return 1;
}

void sub_10037AE10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10037AE2C(uint64_t a1, unsigned int a2, BOOL a3, int64_t a4, void *a5)
{
  id v9 = a5;
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v10, "kUidCounter", a2);
  xpc_dictionary_set_BOOL(v10, "kDotDot", a3);
  xpc_dictionary_set_int64(v10, "kUid", a4);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_10037AF58;
  v12[3] = &unk_1009A9C58;
  id v11 = v9;
  id v13 = v11;
  sub_100379984(a1, "ChangePath", v10, v12);
}

void sub_10037AF38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10037AF58(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4) {
    xpc_dictionary_get_int64(xdict, "kNumItems");
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v4();
}

void sub_10037AFC0(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, void *a6)
{
  id v11 = a6;
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v12, "kScope", a2);
  xpc_dictionary_set_int64(v12, "kStartItem", a3);
  xpc_dictionary_set_int64(v12, "kEndItem", a4);
  if (*(void *)(a5 + 16)) {
    sub_10037A264(v13, v12, a5);
  }
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10037B114;
  v15[3] = &unk_1009A9CA8;
  uint64_t v17 = a1;
  char v18 = a2;
  id v14 = v11;
  id v16 = v14;
  sub_100379984(a1, "GetFolderItems", v12, v15);
}

void sub_10037B0F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void *sub_10037B114(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v13 = 0;
  id v14 = &v13;
  uint64_t v15 = 0x4812000000;
  id v16 = sub_10037B2B4;
  uint64_t v17 = sub_10037B300;
  uint64_t v18 = 0;
  v19[0] = v19;
  v19[1] = v19;
  void v19[2] = 0;
  if (a2 == 4)
  {
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kItems");
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 3221225472;
    v11[2] = sub_10037B308;
    v11[3] = &unk_1009A9C80;
    char v12 = *(unsigned char *)(a1 + 48);
    void v11[4] = &v13;
    v11[5] = v4;
    xpc_array_apply(value, v11);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  xpc_object_t v6 = v14;
  uint64_t v7 = v14 + 6;
  int64_t v8 = (void *)v14[7];
  while (v8 != v7)
  {
    uint64_t v9 = v8[2];
    if (v9)
    {
      (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
      xpc_object_t v6 = v14;
    }
    int64_t v8 = (void *)v8[1];
    uint64_t v7 = v6 + 6;
  }
  _Block_object_dispose(&v13, 8);
  return sub_1002B308C(v19);
}

void sub_10037B290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  _Block_object_dispose(va, 8);
  sub_1002B308C(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_10037B2B4(uint64_t *a1, uint64_t a2)
{
  a1[6] = (uint64_t)(a1 + 6);
  a1[7] = (uint64_t)(a1 + 6);
  a1[8] = 0;
  return sub_10037DB90((uint64_t)(a1 + 6), a1 + 6, (void *)(a2 + 48));
}

void sub_10037B2EC(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

void *sub_10037B300(uint64_t a1)
{
  return sub_1002B308C((void *)(a1 + 48));
}

void sub_10037B308(uint64_t a1, int a2, xpc_object_t xdict)
{
  xpc_dictionary_get_string(xdict, "kName");
  if (*(unsigned char *)(a1 + 48))
  {
    BOOL v5 = xpc_dictionary_get_BOOL(xdict, "kIsFolder");
    xpc_dictionary_get_int64(xdict, "kUid");
    if (v5)
    {
      xpc_dictionary_get_int64(xdict, "kFolderType");
      operator new();
    }
    v15[0] = v15;
    v15[1] = v15;
    uint64_t v16 = 0;
    xpc_object_t value = xpc_dictionary_get_value(xdict, "kAttributes");
    if (value)
    {
      sub_10037A2EC(value, &v12);
      sub_1002B308C(v15);
      uint64_t v7 = v14;
      if (v14)
      {
        uint64_t v9 = v12;
        int64_t v8 = v13;
        uint64_t v10 = *v13;
        *(void *)(v10 + 8) = *(void *)(v12 + 8);
        **(void **)(v9 + 8) = v10;
        uint64_t v11 = v15[0];
        *(void *)(v15[0] + 8) = v8;
        *int64_t v8 = v11;
        *(void *)(v9 + 8) = v15;
        uint64_t v14 = 0;
        v15[0] = v9;
        v16 += v7;
      }
      sub_1002B308C(&v12);
    }
    operator new();
  }
  xpc_dictionary_get_int64(xdict, "kPlayerId");
  xpc_dictionary_get_int64(xdict, "kPlaybackState");
  operator new();
}

void sub_10037B5CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

void sub_10037B620(uint64_t a1, unsigned int a2, int64_t a3, unsigned int a4, uint64_t a5, void *a6)
{
  id v11 = a6;
  xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v12, "kScope", a2);
  xpc_dictionary_set_int64(v12, "kUid", a3);
  xpc_dictionary_set_int64(v12, "kUidCounter", a4);
  sub_10037A264(v13, v12, a5);
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 3221225472;
  void v15[2] = sub_10037B768;
  v15[3] = &unk_1009A9C30;
  uint64_t v17 = a1;
  id v14 = v11;
  id v16 = v14;
  sub_100379984(a1, "GetItemAttributes", v12, v15);
}

void sub_10037B748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void *sub_10037B768(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v15 = (uint64_t)&v15;
  id v16 = &v15;
  uint64_t v17 = 0;
  if (a2 == 4)
  {
    sub_10037A2EC(xdict, &v12);
    sub_1002B308C(&v15);
    uint64_t v4 = v14;
    if (v14)
    {
      uint64_t v6 = v12;
      BOOL v5 = v13;
      uint64_t v7 = *v13;
      *(void *)(v7 + 8) = *(void *)(v12 + 8);
      **(void **)(v6 + 8) = v7;
      uint64_t v8 = v15;
      *(void *)(v15 + 8) = v5;
      *BOOL v5 = v8;
      *(void *)(v6 + 8) = &v15;
      uint64_t v14 = 0;
      uint64_t v15 = v6;
      v17 += v4;
    }
    sub_1002B308C(&v12);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  for (uint64_t i = v16; i != &v15; uint64_t i = (uint64_t *)i[1])
  {
    uint64_t v10 = i[2];
    if (v10)
    {
      if (*(char *)(v10 + 31) < 0) {
        operator delete(*(void **)(v10 + 8));
      }
      operator delete();
    }
  }
  return sub_1002B308C(&v15);
}

void sub_10037B880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1002B308C((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_10037B898(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  uint64_t v7 = v6;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v8 = (const char *)a2;
  }
  else {
    uint64_t v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "kSearchString", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10037B998;
  v10[3] = &unk_1009A9C58;
  id v9 = v5;
  id v11 = v9;
  sub_100379984(a1, "Search", v7, v10);
}

void sub_10037B978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10037B998(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4) {
    xpc_dictionary_get_int64(xdict, "kNumItems");
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v4();
}

void sub_10037BA04(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v6, "kScope", a2);
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_10037BAF8;
  v8[3] = &unk_1009A9C58;
  id v7 = v5;
  id v9 = v7;
  sub_100379984(a1, "GetTotalNumberOfItems", v6, v8);
}

void sub_10037BAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10037BAF8(uint64_t a1, int a2, xpc_object_t xdict)
{
  if (a2 == 4) {
    xpc_dictionary_get_int64(xdict, "kNumItems");
  }
  uint64_t v4 = *(uint64_t (**)(void))(*(void *)(a1 + 32) + 16);

  return v4();
}

void sub_10037BB64(uint64_t a1, unsigned int a2, int64_t a3, unsigned int a4, void *a5)
{
  id v9 = a5;
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  xpc_dictionary_set_int64(v10, "kScope", a2);
  xpc_dictionary_set_int64(v10, "kUid", a3);
  xpc_dictionary_set_int64(v10, "kUidCounter", a4);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_10037BC90;
  v12[3] = &unk_1009A9C58;
  id v11 = v9;
  id v13 = v11;
  sub_100379984(a1, "PlayItem", v10, v12);
}

void sub_10037BC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10037BC90(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10037BCA0(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  id v7 = v6;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v8 = (const char *)a2;
  }
  else {
    uint64_t v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "kImageHandle", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10037BDA0;
  v10[3] = &unk_1009A9C58;
  id v9 = v5;
  id v11 = v9;
  sub_100379984(a1, "GetImageProperties", v7, v10);
}

void sub_10037BD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_10037BDA0(uint64_t a1, int a2, xpc_object_t xdict)
{
  v19[0] = 0;
  v19[1] = v19;
  void v19[2] = 0x4812000000;
  void v19[3] = sub_10037C0BC;
  v19[4] = sub_10037C0E0;
  v19[5] = "";
  CFIndex v21 = 0;
  uint64_t v22 = 0;
  id v20 = 0;
  v15[0] = 0;
  v15[1] = v15;
  void v15[2] = 0x4812000000;
  v15[3] = sub_10037C0F8;
  void v15[4] = sub_10037C11C;
  v15[5] = "";
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  id v16 = 0;
  v11[0] = 0;
  v11[1] = v11;
  v11[2] = 0x4812000000;
  v11[3] = sub_10037C0F8;
  void v11[4] = sub_10037C11C;
  v11[5] = "";
  id v13 = 0;
  uint64_t v14 = 0;
  std::string __p = 0;
  if (!a2)
  {
    xpc_object_t array = xpc_dictionary_get_array(xdict, "kEncodings");
    applier[0] = _NSConcreteStackBlock;
    applier[1] = 3221225472;
    applier[2] = sub_10037C134;
    applier[3] = &unk_1009A94B0;
    applier[4] = v19;
    xpc_array_apply(array, applier);
    xpc_object_t v6 = xpc_dictionary_get_array(xdict, "kWidths");
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_10037C230;
    v9[3] = &unk_1009A94B0;
    void v9[4] = v15;
    xpc_array_apply(v6, v9);
    xpc_object_t v7 = xpc_dictionary_get_array(xdict, "kHeights");
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 3221225472;
    _DWORD v8[2] = sub_10037C318;
    v8[3] = &unk_1009A94B0;
    void v8[4] = v11;
    xpc_array_apply(v7, v8);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  _Block_object_dispose(v11, 8);
  if (__p)
  {
    id v13 = __p;
    operator delete(__p);
  }
  _Block_object_dispose(v15, 8);
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  _Block_object_dispose(v19, 8);
  if (v20)
  {
    CFIndex v21 = v20;
    operator delete(v20);
  }
}

void sub_10037C05C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40)
{
  _Block_object_dispose(&a24, 8);
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  _Block_object_dispose(&a33, 8);
  if (a39)
  {
    a40 = (uint64_t)a39;
    operator delete(a39);
  }
  _Block_object_dispose((const void *)(v40 - 136), 8);
  id v42 = *(void **)(v40 - 88);
  if (v42)
  {
    *(void *)(v40 - 80) = v42;
    operator delete(v42);
  }
  _Unwind_Resume(a1);
}

__n128 sub_10037C0BC(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10037C0E0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

__n128 sub_10037C0F8(__n128 *a1, __n128 *a2)
{
  a1[3].n128_u64[0] = 0;
  a1[3].n128_u64[1] = 0;
  a1[4].n128_u64[0] = 0;
  __n128 result = a2[3];
  a1[3] = result;
  a1[4].n128_u64[0] = a2[4].n128_u64[0];
  a2[3].n128_u64[0] = 0;
  a2[3].n128_u64[1] = 0;
  a2[4].n128_u64[0] = 0;
  return result;
}

void sub_10037C11C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

uint64_t sub_10037C134(uint64_t a1, int a2, xpc_object_t xint)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  char value = xpc_int64_get_value(xint);
  char v5 = value;
  xpc_object_t v7 = (unsigned char *)v3[7];
  unint64_t v6 = v3[8];
  if ((unint64_t)v7 >= v6)
  {
    unint64_t v9 = v3[6];
    xpc_object_t v10 = &v7[-v9];
    uint64_t v11 = (uint64_t)&v7[-v9 + 1];
    if (v11 < 0) {
      abort();
    }
    unint64_t v12 = v6 - v9;
    if (2 * v12 > v11) {
      uint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v13 = v11;
    }
    if (v13) {
      uint64_t v14 = operator new(v13);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[v13];
    v10[(void)v14] = v5;
    uint64_t v8 = (uint64_t)&v10[(void)v14 + 1];
    if (v7 == (unsigned char *)v9)
    {
      uint64_t v14 = &v10[(void)v14];
    }
    else
    {
      id v16 = &v7[~v9];
      do
      {
        char v17 = *--v7;
        (v16--)[(void)v14] = v17;
      }
      while (v7 != (unsigned char *)v9);
      xpc_object_t v7 = (unsigned char *)v3[6];
    }
    v3[6] = v14;
    v3[7] = v8;
    v3[8] = v15;
    if (v7) {
      operator delete(v7);
    }
  }
  else
  {
    *xpc_object_t v7 = value;
    uint64_t v8 = (uint64_t)(v7 + 1);
  }
  v3[7] = v8;
  return 1;
}

uint64_t sub_10037C230(uint64_t a1, int a2, xpc_object_t xint)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  __int16 value = xpc_int64_get_value(xint);
  __int16 v5 = value;
  unint64_t v6 = (char *)v3[7];
  unint64_t v7 = v3[8];
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v9 = (char *)v3[6];
    uint64_t v10 = v6 - v9;
    if (v6 - v9 <= -3) {
      abort();
    }
    uint64_t v11 = v10 >> 1;
    unint64_t v12 = v7 - (void)v9;
    if (v12 <= (v10 >> 1) + 1) {
      unint64_t v13 = v11 + 1;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)sub_1002C5544((uint64_t)(v3 + 8), v14);
      unint64_t v9 = (char *)v3[6];
      unint64_t v6 = (char *)v3[7];
    }
    else
    {
      uint64_t v15 = 0;
    }
    id v16 = &v15[2 * v11];
    char v17 = &v15[2 * v14];
    *(_WORD *)id v16 = v5;
    uint64_t v8 = v16 + 2;
    while (v6 != v9)
    {
      __int16 v18 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v16 - 1) = v18;
      v16 -= 2;
    }
    v3[6] = v16;
    v3[7] = v8;
    v3[8] = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_WORD *)unint64_t v6 = value;
    uint64_t v8 = v6 + 2;
  }
  v3[7] = v8;
  return 1;
}

uint64_t sub_10037C318(uint64_t a1, int a2, xpc_object_t xint)
{
  id v3 = *(void **)(*(void *)(a1 + 32) + 8);
  __int16 value = xpc_int64_get_value(xint);
  __int16 v5 = value;
  unint64_t v6 = (char *)v3[7];
  unint64_t v7 = v3[8];
  if ((unint64_t)v6 >= v7)
  {
    unint64_t v9 = (char *)v3[6];
    uint64_t v10 = v6 - v9;
    if (v6 - v9 <= -3) {
      abort();
    }
    uint64_t v11 = v10 >> 1;
    unint64_t v12 = v7 - (void)v9;
    if (v12 <= (v10 >> 1) + 1) {
      unint64_t v13 = v11 + 1;
    }
    else {
      unint64_t v13 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v14 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v14 = v13;
    }
    if (v14)
    {
      uint64_t v15 = (char *)sub_1002C5544((uint64_t)(v3 + 8), v14);
      unint64_t v9 = (char *)v3[6];
      unint64_t v6 = (char *)v3[7];
    }
    else
    {
      uint64_t v15 = 0;
    }
    id v16 = &v15[2 * v11];
    char v17 = &v15[2 * v14];
    *(_WORD *)id v16 = v5;
    uint64_t v8 = v16 + 2;
    while (v6 != v9)
    {
      __int16 v18 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v16 - 1) = v18;
      v16 -= 2;
    }
    v3[6] = v16;
    v3[7] = v8;
    v3[8] = v17;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *(_WORD *)unint64_t v6 = value;
    uint64_t v8 = v6 + 2;
  }
  v3[7] = v8;
  return 1;
}

void sub_10037C400(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, void *a5)
{
  id v9 = a5;
  xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
  uint64_t v11 = v10;
  if (*(char *)(a2 + 23) >= 0) {
    unint64_t v12 = (const char *)a2;
  }
  else {
    unint64_t v12 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v10, "kImageHandle", v12);
  xpc_dictionary_set_int64(v11, "kWidth", a3);
  xpc_dictionary_set_int64(v11, "kHeight", a4);
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  v14[2] = sub_10037C538;
  v14[3] = &unk_1009A9C58;
  id v13 = v9;
  id v15 = v13;
  sub_100379984(a1, "GetImage", v11, v14);
}

void sub_10037C518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10037C538(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0;
  if (!a2) {
    xpc_dictionary_get_data(xdict, "kImageData", &length);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10037C5AC(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  unint64_t v7 = v6;
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v8 = (const char *)a2;
  }
  else {
    uint64_t v8 = *(const char **)a2;
  }
  xpc_dictionary_set_string(v6, "kImageHandle", v8);
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_10037C6AC;
  v10[3] = &unk_1009A9C58;
  id v9 = v5;
  id v11 = v9;
  sub_100379984(a1, "GetImage", v7, v10);
}

void sub_10037C68C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10037C6AC(uint64_t a1, int a2, xpc_object_t xdict)
{
  size_t length = 0;
  if (!a2) {
    xpc_dictionary_get_data(xdict, "kImageData", &length);
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_10037C720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10037C79C;
  v3[3] = &unk_1009A9CC8;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_100379984(a1, "RegisterForPlaybackStateChanges", 0, v3);
}

uint64_t (***sub_10037C79C(uint64_t a1, int a2, xpc_object_t xdict))(void)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2 == 4) {
    xpc_dictionary_get_int64(xdict, "kPlaybackState");
  }
  __n128 result = *(uint64_t (****)(void))(v3 + 16);
  if (result)
  {
    id v5 = **result;
    return (uint64_t (***)(void))v5();
  }
  return result;
}

void sub_10037C830(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10037C8AC;
  v3[3] = &unk_1009A9CC8;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_100379984(a1, "RegisterForTrackChanges", 0, v3);
}

uint64_t sub_10037C8AC(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a2 == 4) {
    xpc_dictionary_get_int64(xdict, "kUid");
  }
  uint64_t result = *(void *)(v3 + 16);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v5();
  }
  return result;
}

void sub_10037C940(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10037C9BC;
  v3[3] = &unk_1009A9CC8;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_100379984(a1, "RegisterForSettingsChanges", 0, v3);
}

uint64_t sub_10037C9BC(uint64_t a1, int a2, xpc_object_t xdict)
{
  uint64_t v3 = *(void *)(a1 + 32);
  int v6 = 1;
  int v7 = 1;
  if (a2 == 4) {
    sub_100379B80(a1, xdict, &v7, &v6);
  }
  uint64_t result = *(void *)(v3 + 16);
  if (result)
  {
    id v5 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v5();
  }
  return result;
}

void sub_10037CA60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10037CADC;
  v3[3] = &unk_1009A9CC8;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_100379984(a1, "RegisterForChanges", 0, v3);
}

uint64_t sub_10037CADC(void *a1)
{
  uint64_t result = *(void *)(a1[4] + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)result + 24))(result, 0, a1[5], a1[6]);
  }
  return result;
}

void sub_10037CB1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10037CB98;
  v3[3] = &unk_1009A9CC8;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_100379984(a1, "RegisterForChanges", 0, v3);
}

uint64_t sub_10037CB98(void *a1)
{
  uint64_t result = *(void *)(a1[4] + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)result + 32))(result, 0, a1[5], a1[6]);
  }
  return result;
}

void sub_10037CBD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10037CC54;
  v3[3] = &unk_1009A9CC8;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_100379984(a1, "RegisterForPlayerChanges", 0, v3);
}

int64_t sub_10037CC54(void *a1, int a2, xpc_object_t xdict)
{
  uint64_t v4 = a1[4];
  if (a2 == 4) {
    int64_t result = xpc_dictionary_get_int64(xdict, "kPlayerId");
  }
  else {
    int64_t result = 1;
  }
  uint64_t v6 = *(void *)(v4 + 16);
  if (v6)
  {
    uint64_t v7 = a1[5];
    uint64_t v8 = a1[6];
    id v9 = *(uint64_t (**)(uint64_t, uint64_t, void, void, uint64_t, uint64_t))(*(void *)v6 + 40);
    uint64_t v10 = (unsigned __int16)result;
    uint64_t v11 = *(void *)(v4 + 16);
    return v9(v11, v10, 0, 0, v7, v8);
  }
  return result;
}

void sub_10037CCF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_10037CD6C;
  v3[3] = &unk_1009A9CC8;
  v3[4] = a1;
  v3[5] = a2;
  v3[6] = a3;
  sub_100379984(a1, "RegisterForChanges", 0, v3);
}

uint64_t sub_10037CD6C(void *a1)
{
  uint64_t result = *(void *)(a1[4] + 16);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, void, void, void))(*(void *)result + 48))(result, 0, 0, a1[5], a1[6]);
  }
  return result;
}

uint64_t sub_10037CDB0(uint64_t a1, xpc_object_t object)
{
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    unsigned __int8 int64 = xpc_dictionary_get_int64(object, "kMsgStatus");
    xpc_object_t value = xpc_dictionary_get_value(object, "kMsgArgs");
  }
  else
  {
    uint64_t v4 = qword_100A19EA8;
    if (os_log_type_enabled((os_log_t)qword_100A19EA8, OS_LOG_TYPE_ERROR)) {
      sub_10075B40C(a1, object, v4);
    }
    xpc_object_t value = 0;
    unsigned __int8 int64 = 3;
  }
  uint64_t result = *(void *)(a1 + 32);
  if (result) {
    return (*(uint64_t (**)(uint64_t, void, xpc_object_t))(result + 16))(result, int64, value);
  }
  return result;
}

uint64_t sub_10037CE70(uint64_t a1, char *__s1, void *a3)
{
  if (!strcmp(__s1, "PlayerDidChange"))
  {
    xpc_dictionary_get_int64(a3, "kPlayerId");
    (*(void (**)(void, uint64_t, void, void))(**(void **)(a1 + 16) + 32))(*(void *)(a1 + 16), 1, 0, 0);
    uint64_t v7 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 40);
    return v7();
  }
  else
  {
    if (!strcmp(__s1, "PlaybackStateDidChange"))
    {
      xpc_dictionary_get_int64(a3, "kPlaybackState");
      uint64_t v6 = ***(uint64_t (****)(void))(a1 + 16);
      return v6();
    }
    if (!strcmp(__s1, "TrackDidChange"))
    {
      xpc_dictionary_get_int64(a3, "kUid");
      uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 8);
      return v6();
    }
    if (!strcmp(__s1, "SettingsDidChange"))
    {
      int v12 = 1;
      int v13 = 1;
      sub_100379B80(0, a3, &v13, &v12);
      id v9 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 16);
      return v9();
    }
    else
    {
      if (strcmp(__s1, "PlaybackQueueDidChange"))
      {
        if (strcmp(__s1, "LibraryDidChange"))
        {
          uint64_t v11 = sub_100017768();
          sub_1005C99C8(v11, 0);
        }
        uint64_t v6 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 48);
        return v6();
      }
      uint64_t v10 = *(uint64_t (**)(void))(**(void **)(a1 + 16) + 24);
      return v10();
    }
  }
}

uint64_t sub_10037D1A8(uint64_t a1, char *a2, void *a3)
{
  return sub_10037CE70(a1 - 8, a2, a3);
}

void sub_10037D1B0(uint64_t a1)
{
  (*(void (**)(void, void, uint64_t, void, void))(**(void **)(a1 + 16) + 48))(*(void *)(a1 + 16), 0, 1, 0, 0);

  sub_100379984(a1, "RegisterForChanges", 0, 0);
}

void sub_10037D22C(uint64_t a1)
{
}

void *sub_10037D234(void *a1)
{
  *a1 = off_1009A9B20;
  a1[1] = off_1009A9C10;
  sub_100277148(a1 + 3);
  return a1;
}

void sub_10037D29C(void *a1)
{
  *a1 = off_1009A9B20;
  a1[1] = off_1009A9C10;
  sub_100277148(a1 + 3);

  operator delete();
}

void sub_10037D324(void **a1)
{
  if (a1[2])
  {
    uint64_t v3 = (void **)*a1;
    uint64_t v2 = (void **)a1[1];
    uint64_t v4 = *v2;
    v4[1] = *((void *)*a1 + 1);
    *v3[1] = v4;
    a1[2] = 0;
    if (v2 != a1)
    {
      do
      {
        id v5 = (void **)v2[1];
        sub_10037D388((int)a1, v2);
        uint64_t v2 = v5;
      }
      while (v5 != a1);
    }
  }
}

void sub_10037D388(int a1, void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

uint64_t sub_10037D3CC(uint64_t a1)
{
  *(void *)a1 = off_1009A9D58;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_10037D41C(uint64_t a1)
{
  *(void *)a1 = off_1009A9D58;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  operator delete();
}

uint64_t sub_10037D48C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v1 = *(void *)(a1 + 32);
  }
  else {
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  }
  return (unsigned __int16)(v1 + 31);
}

uint64_t sub_10037D4AC()
{
  return 27;
}

uint64_t sub_10037D4B4(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(unsigned char *)a2 = *(unsigned char *)(a1 + 10);
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a2 + 3) = *(unsigned char *)(a1 + 49);
  *(unsigned char *)(a2 + 5) = *(unsigned char *)(a1 + 50);
  *(unsigned char *)(a2 + 9) = *(_DWORD *)(a1 + 52);
  *(unsigned char *)(a2 + 8) = BYTE1(*(_DWORD *)(a1 + 52));
  *(unsigned char *)(a2 + 7) = *(_WORD *)(a1 + 54);
  *(unsigned char *)(a2 + 6) = *(unsigned char *)(a1 + 55);
  *(unsigned char *)(a2 + 10) = *(unsigned char *)(a1 + 56);
  *(_OWORD *)(a2 + 11) = *(_OWORD *)(a1 + 57);
  *(unsigned char *)(a2 + 28) = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a2 + 27) = *(unsigned char *)(a1 + 9);
  int v4 = sub_10037D564(a1, a2 + 29, (unsigned __int16)(a3 - 29));
  *(_WORD *)(a2 + 1) = bswap32(v4 + 26) >> 16;
  return (unsigned __int16)(v4 + 29);
}

uint64_t sub_10037D564(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else {
    LODWORD(v3) = *(unsigned __int8 *)(a1 + 47);
  }
  int v4 = (const std::string *)(a1 + 24);
  if ((unint64_t)(unsigned __int16)v3 + 2 <= a3) {
    unsigned int v5 = v3;
  }
  else {
    unsigned int v5 = a3 - 2;
  }
  *(_WORD *)a2 = bswap32(v5) >> 16;
  std::string::copy(v4, (std::string::value_type *)(a2 + 2), (unsigned __int16)v5, 0);
  return (unsigned __int16)(v5 + 2);
}

uint64_t sub_10037D5D0(uint64_t a1)
{
  *(void *)a1 = off_1009A9D58;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void sub_10037D620(uint64_t a1)
{
  *(void *)a1 = off_1009A9D58;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  operator delete();
}

uint64_t sub_10037D690(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v1 = *(void *)(a1 + 32);
  }
  else {
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  }
  return (unsigned __int16)(v1 + 17);
}

uint64_t sub_10037D6B0()
{
  return 15;
}

uint64_t sub_10037D6B8(uint64_t a1, uint64_t a2, __int16 a3)
{
  *(unsigned char *)a2 = *(unsigned char *)(a1 + 10);
  *(void *)(a2 + 3) = *(void *)(a1 + 16);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 49);
  *(unsigned char *)(a2 + 14) = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a2 + 13) = *(unsigned char *)(a1 + 9);
  int v4 = sub_10037D564(a1, a2 + 15, (unsigned __int16)(a3 - 15));
  *(_WORD *)(a2 + 1) = bswap32(v4 + 12) >> 16;
  return (unsigned __int16)(v4 + 15);
}

uint64_t sub_10037D734(uint64_t a1, uint64_t a2)
{
  *(_WORD *)(a1 + 8) = 106;
  *(unsigned char *)(a1 + 10) = 3;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)a1 = &off_1009A9DC8;
  *(unsigned char *)(a1 + 48) = 0;
  sub_10037D974((void *)(a1 + 56), a2);
  return a1;
}

void sub_10037D7A4(_Unwind_Exception *exception_object)
{
  *(void *)uint64_t v1 = off_1009A9D58;
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10037D7E0(uint64_t a1)
{
  sub_10037DA10(a1);

  operator delete();
}

uint64_t sub_10037D818(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v1 = *(void *)(a1 + 32);
  }
  else {
    LOWORD(v1) = *(unsigned __int8 *)(a1 + 47);
  }
  unsigned __int16 v2 = v1 + 17;
  for (uint64_t i = *(void *)(a1 + 64); i != a1 + 56; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v4 = *(void *)(i + 16);
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v4 = *(void *)(v4 + 16);
    }
    else {
      LOWORD(v4) = *(unsigned __int8 *)(v4 + 31);
    }
    v2 += v4 + 8;
  }
  return v2;
}

uint64_t sub_10037D870()
{
  return 15;
}

uint64_t sub_10037D878(uint64_t a1, uint64_t a2, unsigned int a3)
{
  *(unsigned char *)a2 = *(unsigned char *)(a1 + 10);
  *(void *)(a2 + 3) = *(void *)(a1 + 16);
  *(unsigned char *)(a2 + 11) = *(unsigned char *)(a1 + 48);
  *(unsigned char *)(a2 + 13) = *(unsigned char *)(a1 + 8);
  *(unsigned char *)(a2 + 12) = *(unsigned char *)(a1 + 9);
  int v6 = sub_10037D564(a1, a2 + 14, (unsigned __int16)(a3 - 15));
  int v7 = v6 + 15;
  uint64_t v8 = (unsigned __int16)(v6 + 14);
  *(unsigned char *)(a2 + v8) = 0;
  uint64_t v9 = a1 + 56;
  for (uint64_t i = *(void *)(a1 + 64); i != v9; uint64_t i = *(void *)(i + 8))
  {
    uint64_t v11 = *(void *)(i + 16);
    if (*(char *)(v11 + 31) < 0) {
      uint64_t v12 = *(void *)(v11 + 16);
    }
    else {
      LOWORD(v12) = *(unsigned __int8 *)(v11 + 31);
    }
    unsigned __int16 v13 = v12 + 8;
    int v14 = a3 - (unsigned __int16)v7;
    if (v14 < v13) {
      break;
    }
    if (a3 <= (unsigned __int16)v7) {
      LOWORD(v14) = 0;
    }
    int v15 = sub_10037DAD4(v11, a2 + (unsigned __int16)v7, (unsigned __int16)v14);
    if (!v15) {
      break;
    }
    v7 += v15;
    ++*(unsigned char *)(a2 + v8);
  }
  uint64_t result = (unsigned __int16)v7;
  *(_WORD *)(a2 + 1) = bswap32(v7 - 3) >> 16;
  return result;
}

void *sub_10037D974(void *a1, uint64_t a2)
{
  *a1 = a1;
  a1[1] = a1;
  a1[2] = 0;
  uint64_t v3 = *(void *)(a2 + 8);
  if (v3 != a2)
  {
    uint64_t v5 = 1;
    int v6 = a1;
    do
    {
      int v7 = operator new(0x18uLL);
      uint64_t v8 = *(void *)(v3 + 16);
      v7[1] = a1;
      _DWORD v7[2] = v8;
      *int v7 = v6;
      v6[1] = v7;
      *a1 = v7;
      a1[2] = v5;
      uint64_t v3 = *(void *)(v3 + 8);
      ++v5;
      int v6 = v7;
    }
    while (v3 != a2);
  }
  return a1;
}

void sub_10037D9FC(_Unwind_Exception *a1)
{
  sub_1002B308C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10037DA10(uint64_t a1)
{
  *(void *)a1 = &off_1009A9DC8;
  unsigned __int16 v2 = (void *)(a1 + 56);
  for (uint64_t i = *(void **)(a1 + 64); i != v2; uint64_t i = (void *)i[1])
  {
    uint64_t v4 = i[2];
    if (v4)
    {
      if (*(char *)(v4 + 31) < 0) {
        operator delete(*(void **)(v4 + 8));
      }
      operator delete();
    }
  }
  sub_1002B308C(v2);
  *(void *)a1 = off_1009A9D58;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_10037DAD4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 >= 8)
  {
    uint64_t v4 = a1;
    *(unsigned char *)(a2 + 3) = *(_DWORD *)(a1 + 4);
    *(unsigned char *)(a2 + 2) = BYTE1(*(_DWORD *)(a1 + 4));
    *(unsigned char *)(a2 + 1) = *(_WORD *)(a1 + 6);
    *(unsigned char *)a2 = *(unsigned char *)(a1 + 7);
    *(unsigned char *)(a2 + 5) = *(unsigned char *)a1;
    *(unsigned char *)(a2 + 4) = *(unsigned char *)(a1 + 1);
    uint64_t v5 = (const std::string *)(a1 + 8);
    if (*(char *)(v4 + 31) < 0) {
      uint64_t v4 = *(void *)(v4 + 16);
    }
    else {
      LODWORD(v4) = *(unsigned __int8 *)(v4 + 31);
    }
    if ((unint64_t)(unsigned __int16)v4 + 8 <= a3) {
      unsigned int v6 = v4;
    }
    else {
      unsigned int v6 = a3 - 8;
    }
    *(_WORD *)(a2 + 6) = bswap32(v6) >> 16;
    std::string::copy(v5, (std::string::value_type *)(a2 + 8), (unsigned __int16)v6, 0);
    return (unsigned __int16)(v6 + 8);
  }
  else
  {
    return 0;
  }
}

uint64_t sub_10037DB90(uint64_t result, uint64_t *a2, void *a3)
{
  uint64_t v3 = a3[2];
  if (v3)
  {
    uint64_t v5 = *a3;
    uint64_t v4 = (uint64_t *)a3[1];
    uint64_t v6 = *v4;
    *(void *)(v6 + 8) = *(void *)(*a3 + 8);
    **(void **)(v5 + 8) = v6;
    uint64_t v7 = *a2;
    *(void *)(v7 + 8) = v4;
    *uint64_t v4 = v7;
    *a2 = v5;
    *(void *)(v5 + 8) = a2;
    *(void *)(result + 16) += v3;
    a3[2] = 0;
  }
  return result;
}

void sub_10037DC2C(id a1)
{
  uint64_t v1 = objc_alloc_init(AudioDeviceManager);
  unsigned __int16 v2 = (void *)qword_100A125B0;
  qword_100A125B0 = (uint64_t)v1;
}

void sub_10037DCF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_10037DDE0(uint64_t a1, uint64_t a2)
{
  return [*(id *)(a1 + 32) handleListenerEvent:a2];
}

void sub_10037E01C()
{
}

void sub_10037E258(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_10003AFB4((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void sub_10037E5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10037E5CC(uint64_t a1)
{
  return sub_10030FDCC(*(void *)(a1 + 32));
}

void sub_10037E858(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_10037E944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_10037E9F4()
{
}

void sub_10037EA88()
{
}

void sub_10037EB80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10037ECE4(void *result, void *a2, void *a3)
{
  if (result == a2)
  {
LABEL_4:
    uint64_t result = a2;
  }
  else
  {
    while (*result != *a3)
    {
      if (++result == a2) {
        goto LABEL_4;
      }
    }
  }
  if (result != a2)
  {
    for (uint64_t i = result + 1; i != a2; ++i)
    {
      if (*i != *a3) {
        *result++ = *i;
      }
    }
  }
  return result;
}

uint64_t *sub_10037EDE4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v9, a2);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10037EE88((uint64_t)a1, a4, v8);
    sub_100036CA0(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_10037EE88@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  *uint64_t v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_10003B098(result, *(void **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)uint64_t result = v10;
  }
  *((void *)v7 + 7) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10037EF20(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1002B386C(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10037EF3C(uint64_t **a1, const void **a2)
{
  uint64_t v3 = sub_10003156C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_100006AC4(a1, v3);
  return 1;
}

uint64_t sub_10037EF84(uint64_t a1)
{
  *(void *)a1 = off_1009A9E60;
  *(void *)(a1 + 8) = &off_1009AA1E0;
  *(void *)(a1 + 16) = off_1009AA1F8;
  *(void *)(a1 + 24) = &off_1009AA238;
  *(void *)(a1 + 32) = off_1009AA250;
  *(void *)(a1 + 40) = off_1009AA280;
  *(void *)(a1 + 48) = off_1009AA2D0;
  *(void *)(a1 + 56) = &off_1009AA300;
  *(void *)(a1 + 64) = off_1009AA318;
  *(void *)(a1 + 72) = &off_1009AA3C8;
  *(void *)(a1 + 80) = off_1009AA3E0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_DWORD *)(a1 + 132) = 0;
  *(_WORD *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_WORD *)(a1 + 128) = 0;
  sub_100052DA8(a1 + 176);
  sub_100052DA8(a1 + 240);
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  *(void *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 344) = 0u;
  *(_OWORD *)(a1 + 360) = 0u;
  *(void *)(a1 + 376) = 0;
  *(void *)(a1 + 384) = a1 + 392;
  *(void *)(a1 + 408) = a1 + 416;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 432) = a1 + 440;
  *(unsigned char *)(a1 + 456) = 0;
  *(void *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = a1 + 480;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 496) = a1 + 504;
  *(_DWORD *)(a1 + 548) = 0;
  *(unsigned char *)(a1 + 552) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(_DWORD *)(a1 + 531) = 0;
  *(void *)(a1 + 536) = 0;
  *(unsigned char *)(a1 + 544) = 0;
  *(void *)(a1 + 570) = 0;
  *(void *)(a1 + 556) = 0;
  *(void *)(a1 + 564) = 0;
  *(unsigned char *)(a1 + 578) = 1;
  *(_DWORD *)(a1 + 580) = -1;
  *(void *)(a1 + 584) = 0;
  *(_WORD *)(a1 + 592) = 0;
  *(void *)(a1 + 596) = 0;
  *(_DWORD *)(a1 + 608) = 0;
  *(_WORD *)(a1 + 612) = 0;
  *(_OWORD *)(a1 + 632) = 0u;
  *(_OWORD *)(a1 + 616) = 0u;
  *(_DWORD *)(a1 + 648) = 1065353216;
  *(void *)(a1 + 672) = 0;
  *(void *)(a1 + 664) = 0;
  *(void *)(a1 + 656) = a1 + 664;
  *(void *)(a1 + 800) = 0;
  return a1;
}

void sub_10037F218(_Unwind_Exception *a1)
{
  sub_100052DA4(v1);

  _Unwind_Resume(a1);
}

void sub_10037F240(uint64_t a1)
{
  if (sub_100050494())
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AA668);
    }
    sub_100061288((uint64_t)off_1009F7EF8 + 240, a1 + 32);
    if (qword_1009F8768 != -1) {
      dispatch_once(&qword_1009F8768, &stru_1009AA688);
    }
    sub_10060C070(off_1009F8760, a1 + 16);
    if (qword_1009F8090 != -1) {
      dispatch_once(&qword_1009F8090, &stru_1009AA6A8);
    }
    sub_1004D12B0(off_1009F8088, a1 + 24);
    if (qword_1009F8158 != -1) {
      dispatch_once(&qword_1009F8158, &stru_1009AA6C8);
    }
    sub_1004F9E94((uint64_t)off_1009F8150, a1 + 40);
    if (qword_1009F8070 != -1) {
      dispatch_once(&qword_1009F8070, &stru_1009AA6E8);
    }
    sub_10026B36C((uint64_t)off_1009F8068 + 64, a1 + 48);
    if (qword_1009F7ED0 != -1) {
      dispatch_once(&qword_1009F7ED0, &stru_1009AA708);
    }
    sub_100708564((void *)qword_1009F7EC8, a1 + 80);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AA728);
    }
    sub_100680938((uint64_t)off_1009F7EB8, a1 + 64, 0);
    if (qword_1009FB3D0 != -1) {
      dispatch_once(&qword_1009FB3D0, &stru_1009AA748);
    }
    sub_1005442CC(qword_1009FB3C8, a1 + 8);
    uint64_t v2 = sub_10003FFD4();
    sub_1003B84A0(v2 + 1208, a1 + 56);
    uint64_t v3 = sub_10003FFD4();
    sub_10026B948(v3 + 288, a1 + 72);
    id v4 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v5 = *(void **)(a1 + 304);
    *(void *)(a1 + 304) = v4;

    id v6 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v7 = *(void **)(a1 + 312);
    *(void *)(a1 + 312) = v6;

    id v8 = objc_alloc_init((Class)NSMutableArray);
    uint64_t v9 = *(void **)(a1 + 328);
    *(void *)(a1 + 328) = v8;

    id v10 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v11 = *(void **)(a1 + 336);
    *(void *)(a1 + 336) = v10;

    id v12 = objc_alloc_init((Class)NSMutableArray);
    unsigned __int16 v13 = *(void **)(a1 + 344);
    *(void *)(a1 + 344) = v12;

    uint64_t v14 = objc_opt_new();
    int v15 = *(void **)(a1 + 800);
    *(void *)(a1 + 800) = v14;

    id v16 = objc_alloc_init((Class)NSMutableDictionary);
    char v17 = *(void **)(a1 + 352);
    *(void *)(a1 + 352) = v16;

    id v18 = objc_alloc_init((Class)NSMutableDictionary);
    long long v19 = *(void **)(a1 + 360);
    *(void *)(a1 + 360) = v18;

    id v20 = objc_alloc_init((Class)NSMutableDictionary);
    uint64_t v21 = *(void **)(a1 + 368);
    *(void *)(a1 + 368) = v20;

    id v22 = objc_alloc_init((Class)NSMutableArray);
    int64x2_t v23 = *(void **)(a1 + 376);
    *(void *)(a1 + 376) = v22;

    sub_1003B8F18(a1 + 384, *(void **)(a1 + 392));
    *(void *)(a1 + 392) = 0;
    *(void *)(a1 + 400) = 0;
    *(void *)(a1 + 384) = a1 + 392;
    xpc_object_t v24 = xpc_dictionary_create(0, 0, 0);
    xpc_dictionary_set_BOOL(v24, XPC_ACTIVITY_REPEATING, 1);
    xpc_dictionary_set_int64(v24, XPC_ACTIVITY_DELAY, XPC_ACTIVITY_INTERVAL_1_DAY);
    xpc_dictionary_set_int64(v24, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
    xpc_dictionary_set_string(v24, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_UTILITY);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_10037F6A0;
    handler[3] = &unk_1009AA3F8;
    handler[4] = a1;
    xpc_activity_register(off_1009FB3C0, v24, handler);
    sub_10037F890(a1);
    *(unsigned char *)(a1 + 681) = 0;
    *(unsigned char *)(a1 + 684) = 0;
    *(unsigned char *)(a1 + 682) = sub_10037FB30();
    *(unsigned char *)(a1 + 683) = 0;
    *(_OWORD *)(a1 + 736) = 0u;
    *(_OWORD *)(a1 + 752) = 0u;
    *(_OWORD *)(a1 + 768) = 0u;
    *(_OWORD *)(a1 + 780) = 0u;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075B700();
  }
}

void sub_10037F690(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10037F6A0(uint64_t a1)
{
}

void sub_10037F6A8(void *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)id v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending all day metrics to CoreAnalytics", v6, 2u);
  }
  sub_1003AEF74((uint64_t)a1);
  sub_1003AFDDC((uint64_t)a1);
  uint64_t v3 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 352))(v3) & 1) != 0
    || (uint64_t v4 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v4 + 376))(v4)))
  {
    sub_100387524();
  }
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AA7C8);
  }
  sub_1006F4E44((uint64_t)off_1009F85C0);
  if (qword_1009F8788 != -1) {
    dispatch_once(&qword_1009F8788, &stru_1009AA7E8);
  }
  sub_100305DB4(off_1009F8780);
  uint64_t v5 = a1[12];
  if (v5) {
    (*(void (**)(void))(v5 + 16))();
  }
  sub_1003AFE58((uint64_t)a1);
  sub_1003AFED4((uint64_t)a1);
  sub_1003AFF50((uint64_t)a1);
  sub_1003AFFCC((uint64_t)a1);
  sub_1003B0048((uint64_t)a1);
  sub_1003B00C4((uint64_t)a1);
  sub_1003B0140((uint64_t)a1);
  sub_1003B01BC((uint64_t)a1);
  (*(void (**)(void *))(*a1 + 656))(a1);
  sub_1003B0238((uint64_t)a1);
}

void sub_10037F890(uint64_t a1)
{
  unsigned int v10 = 90;
  uint64_t v2 = sub_100017768();
  sub_10004191C(v8, "HID");
  sub_10004191C(&__p, "HIDLatencyAnomalyThreshold");
  char v3 = (*(uint64_t (**)(uint64_t, void **, void **, unsigned int *))(*(void *)v2 + 128))(v2, v8, &__p, &v10);
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v9 < 0)
  {
    operator delete(v8[0]);
    if (v3) {
      goto LABEL_5;
    }
LABEL_8:
    unsigned int v10 = 90;
    goto LABEL_9;
  }
  if ((v3 & 1) == 0) {
    goto LABEL_8;
  }
LABEL_5:
  if (v10 <= 7)
  {
    *(unsigned char *)(a1 + 680) = 0;
    goto LABEL_11;
  }
  if (v10 <= 0xB)
  {
    char v4 = 1;
    goto LABEL_10;
  }
  if (v10 <= 0xF)
  {
    char v4 = 2;
    goto LABEL_10;
  }
  if (v10 <= 0x16)
  {
    char v4 = 3;
    goto LABEL_10;
  }
  if (v10 <= 0x1E)
  {
    char v4 = 4;
    goto LABEL_10;
  }
  if (v10 <= 0x2D)
  {
    char v4 = 5;
    goto LABEL_10;
  }
  if (v10 <= 0x3C)
  {
    char v4 = 6;
    goto LABEL_10;
  }
  if (v10 > 0x5A)
  {
    if (v10 > 0x78)
    {
      if (v10 > 0x96)
      {
        if (v10 > 0x1F4)
        {
          if (v10 > 0x2EE) {
            char v4 = 12;
          }
          else {
            char v4 = 11;
          }
        }
        else
        {
          char v4 = 10;
        }
      }
      else
      {
        char v4 = 9;
      }
    }
    else
    {
      char v4 = 8;
    }
    goto LABEL_10;
  }
LABEL_9:
  char v4 = 7;
LABEL_10:
  *(unsigned char *)(a1 + 680) = v4;
LABEL_11:
  uint64_t v5 = (id)qword_100A19E50;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = *(unsigned __int8 *)(a1 + 680);
    sub_1003B4CE8(v6, v8);
    if (v9 >= 0) {
      uint64_t v7 = v8;
    }
    else {
      uint64_t v7 = (void **)v8[0];
    }
    LODWORD(__p) = 67109378;
    HIDWORD(__p) = v6;
    __int16 v12 = 2080;
    unsigned __int16 v13 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "HID latency anomaly threshold bin index is %d for %s", (uint8_t *)&__p, 0x12u);
    if (v9 < 0) {
      operator delete(v8[0]);
    }
  }
}

void sub_10037FAE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  _Unwind_Resume(a1);
}

uint64_t sub_10037FB30()
{
  unsigned __int8 valuePtr = 0;
  CFNumberRef v0 = (const __CFNumber *)CFPreferencesCopyAppValue(@"BTPowerStateMonitorNumOfDays", @"com.apple.BTServer");
  if (v0)
  {
    CFNumberRef v1 = v0;
    CFNumberGetValue(v0, kCFNumberCharType, &valuePtr);
    CFRelease(v1);
  }
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v6 = valuePtr;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "readBTPowerStateMonitorNumOfDays : numOfDays = %d", buf, 8u);
  }
  return valuePtr;
}

uint64_t sub_10037FC10(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Registering for Core Time Change Notification", buf, 2u);
  }
  char v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 578);
    *(_DWORD *)long long buf = 67109120;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Core Time Initial AutoDateTimeEnabled: %d", buf, 8u);
  }
  uint64_t v5 = *(NSObject **)(sub_1004AFD94() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_10037FD64;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  return notify_register_dispatch("SignificantTimeChangeNotification", (int *)(a1 + 580), v5, handler);
}

void sub_10037FD64(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 578) = TMIsAutomaticTimeEnabled() != 0;
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(v1 + 578);
    v4[0] = 67109120;
    v4[1] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Core Time Changed: AutoDateTimeEnabled: %d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_10037FE20(uint64_t a1, uint64_t a2)
{
  memset(v7, 0, 320);
  sub_1003B87B0((uint64_t)v7, a2);
  uint64_t v3 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_10037FF5C;
  v5[3] = &unk_1009AA418;
  v5[4] = a1;
  sub_1003B87B0((uint64_t)v6, (uint64_t)v7);
  sub_100013018(v3, v5);
  sub_1003B8A60((uint64_t)v6);
  return sub_1003B8A60((uint64_t)v7);
}

void sub_10037FF30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  sub_1003B8A60(v55);
  sub_1003B8A60((uint64_t)&a55);
  _Unwind_Resume(a1);
}

void sub_10037FF5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v61[0] = 0;
  v61[1] = 0;
  uint64_t v62 = 0;
  sub_1002E4C60(v2 + 320, a1 + 40, 3);
  v59[0] = 0;
  v59[1] = 0;
  uint64_t v60 = 0;
  sub_1002E4C60(v2 + 320, a1 + 104, 8);
  v57[0] = 0;
  v57[1] = 0;
  uint64_t v58 = 0;
  sub_1002E4C60(v2 + 320, a1 + 112, 8);
  v55[0] = 0;
  v55[1] = 0;
  uint64_t v56 = 0;
  sub_1002E4C60(v2 + 320, a1 + 288, 20);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v54 = 0;
  sub_1002E4C60(v2 + 320, a1 + 308, 20);
  id v3 = objc_alloc_init((Class)NSMutableDictionary);
  int v4 = +[NSString stringWithUTF8String:v61];
  [v3 setObject:v4 forKey:@"oui"];

  uint64_t v5 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 43)];
  [v3 setObject:v5 forKey:@"isHIDServicePresent"];

  int v6 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 44)];
  [v3 setObject:v6 forKey:@"chipsetManufacturerName"];

  uint64_t v7 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 46)];
  [v3 setObject:v7 forKey:@"lmpSubVersion"];

  id v8 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 48)];
  [v3 setObject:v8 forKey:@"lmpVersion"];

  int v9 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 50)];
  [v3 setObject:v9 forKey:@"gATTVersion"];

  unsigned int v10 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 52)];
  [v3 setObject:v10 forKey:@"wIAPVersion"];

  uint64_t v11 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 54)];
  [v3 setObject:v11 forKey:@"mapProfileVersion"];

  __int16 v12 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 56)];
  [v3 setObject:v12 forKey:@"handsfreeVersion"];

  unsigned __int16 v13 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 58)];
  [v3 setObject:v13 forKey:@"handsfreeFeatures"];

  char v14 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 60)];
  [v3 setObject:v14 forKey:@"a2DPVersion"];

  int v15 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 62)];
  [v3 setObject:v15 forKey:@"a2DPFeatures"];

  id v16 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 64)];
  [v3 setObject:v16 forKey:@"aVRCPVersion"];

  char v17 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 66)];
  [v3 setObject:v17 forKey:@"aVRCPFeatures"];

  id v18 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 68)];
  [v3 setObject:v18 forKey:@"pNPVersion"];

  long long v19 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 70)];
  [v3 setObject:v19 forKey:@"obexObjectPushVersion"];

  id v20 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 72)];
  [v3 setObject:v20 forKey:@"serialPortVersion"];

  uint64_t v21 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 74)];
  [v3 setObject:v21 forKey:@"hIDVersion"];

  id v22 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 76)];
  [v3 setObject:v22 forKey:@"aVDTPVersion"];

  int64x2_t v23 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a1 + 78)];
  [v3 setObject:v23 forKey:@"aVCTPVersion"];

  xpc_object_t v24 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 80)];
  [v3 setObject:v24 forKey:@"vendorIDSource"];

  uint64_t v25 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 84)];
  [v3 setObject:v25 forKey:@"vendorID"];

  id v26 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 88)];
  [v3 setObject:v26 forKey:@"productID"];

  id v27 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 92)];
  [v3 setObject:v27 forKey:@"version"];

  uint64_t v28 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)];
  [v3 setObject:v28 forKey:@"fwVersion"];

  uint64_t v29 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 100)];
  [v3 setObject:v29 forKey:@"classOfDevice"];

  uint64_t v30 = +[NSString stringWithUTF8String:v59];
  [v3 setObject:v30 forKey:@"linkLayerRemoteSupportedFeatures"];

  unsigned int v31 = +[NSString stringWithUTF8String:v57];
  [v3 setObject:v31 forKey:@"classicExtendedFeaturesPage1"];

  int64x2_t v32 = (void *)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    int64x2_t v32 = (void *)*v32;
  }
  uint64_t v33 = +[NSString stringWithUTF8String:v32];
  [v3 setObject:v33 forKey:@"bundleID"];

  id v34 = (void *)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    id v34 = (void *)*v34;
  }
  uint64_t v35 = +[NSString stringWithUTF8String:v34];
  [v3 setObject:v35 forKey:@"disManufacturerNameString"];

  int v36 = (void *)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    int v36 = (void *)*v36;
  }
  id v37 = +[NSString stringWithUTF8String:v36];
  [v3 setObject:v37 forKey:@"disModelNumberString"];

  uint64_t v38 = (void *)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    uint64_t v38 = (void *)*v38;
  }
  BOOL v39 = +[NSString stringWithUTF8String:v38];
  [v3 setObject:v39 forKey:@"carVendorName"];

  uint64_t v40 = (void *)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    uint64_t v40 = (void *)*v40;
  }
  char v41 = +[NSString stringWithUTF8String:v40];
  [v3 setObject:v41 forKey:@"disHardwareRevisionString"];

  id v42 = (void *)(a1 + 240);
  if (*(char *)(a1 + 263) < 0) {
    id v42 = (void *)*v42;
  }
  __int16 v43 = +[NSString stringWithUTF8String:v42];
  [v3 setObject:v43 forKey:@"disFirmwareRevisionString"];

  id v44 = (void *)(a1 + 264);
  if (*(char *)(a1 + 287) < 0) {
    id v44 = (void *)*v44;
  }
  uint64_t v45 = +[NSString stringWithUTF8String:v44];
  [v3 setObject:v45 forKey:@"disSoftwareRevisionString"];

  if (v56 >= 0) {
    int64_t v46 = v55;
  }
  else {
    int64_t v46 = (void **)v55[0];
  }
  uint64_t v47 = +[NSString stringWithUTF8String:v46];
  [v3 setObject:v47 forKey:@"primaryHash"];

  if (v54 >= 0) {
    uint64_t v48 = __p;
  }
  else {
    uint64_t v48 = (void **)__p[0];
  }
  std::string v49 = +[NSString stringWithUTF8String:v48];
  [v3 setObject:v49 forKey:@"secondaryHash"];

  uint64_t v50 = (void *)(a1 + 328);
  if (*(char *)(a1 + 351) < 0)
  {
    if (!*(void *)(a1 + 336)) {
      goto LABEL_27;
    }
    uint64_t v50 = (void *)*v50;
    goto LABEL_26;
  }
  if (*(unsigned char *)(a1 + 351))
  {
LABEL_26:
    int v51 = +[NSString stringWithUTF8String:v50];
    [v3 setObject:v51 forKey:@"friendlyName"];
  }
LABEL_27:
  long long v52 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 352)];
  [v3 setObject:v52 forKey:@"isGHSServicePresent"];

  sub_10038094C(v2, 0x30u, v3);
  if (SHIBYTE(v54) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(v55[0]);
  }
  if (SHIBYTE(v58) < 0) {
    operator delete(v57[0]);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(v59[0]);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(v61[0]);
  }
}

void sub_100380818(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (*(char *)(v35 - 49) < 0) {
    operator delete(*(void **)(v35 - 72));
  }
  _Unwind_Resume(a1);
}

void sub_10038094C(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  int v6 = sub_1003AEC2C(a1, v5);
  uint64_t v7 = sub_1003AEED8((uint64_t)v6, a2);
  id v8 = v6;
  int v9 = AnalyticsSendEventLazy();
  unsigned int v10 = qword_100A19E50;
  if (v9)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
      sub_10075B734((uint64_t)v7, v10);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    __int16 v12 = v7;
    __int16 v13 = 1024;
    int v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "BT Stats for metric '%@' sent to CoreAnalytics with result %u", buf, 0x12u);
  }
}

void sub_100380AC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100380B00(uint64_t a1, uint64_t a2)
{
  return sub_1003B87B0(a1 + 40, a2 + 40);
}

uint64_t sub_100380B0C(uint64_t a1)
{
  return sub_1003B8A60(a1 + 40);
}

void sub_100380B14(uint64_t a1, _OWORD *a2)
{
  v5[0] = 0;
  v5[1] = v5;
  v5[2] = 0x5012000000;
  v5[3] = sub_10004D050;
  v5[4] = nullsub_23;
  void v5[5] = "";
  v6[0] = *a2;
  *(_OWORD *)((char *)v6 + 12) = *(_OWORD *)((char *)a2 + 12);
  id v3 = *(NSObject **)(sub_1004AFD94() + 8);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_100380C0C;
  v4[3] = &unk_100999720;
  void v4[4] = v5;
  void v4[5] = a1;
  dispatch_async(v3, v4);
  _Block_object_dispose(v5, 8);
}

void sub_100380BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_100380C0C(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 40);
  unsigned __int16 v2 = *(_WORD *)(v1 + 116) + *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 60);
  *(_WORD *)(v1 + 116) = v2;
  int v3 = *(_DWORD *)(v1 + 108);
  *(_DWORD *)(v1 + 104) = (*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 48) + *(_DWORD *)(v1 + 104)) / v2;
  *(_DWORD *)(v1 + 108) = (*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 52) + v3) / v2;
  *(_DWORD *)(v1 + 112) = (*(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 56) + *(_DWORD *)(v1 + 112)) / v2;
  *(_WORD *)(v1 + 118) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 62);
  *(_WORD *)(v1 + 120) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 64);
  *(_WORD *)(v1 + 122) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 66);
  *(_WORD *)(v1 + 124) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 68);
  *(_WORD *)(v1 + 126) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 70);
  *(_WORD *)(v1 + 128) += *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 72);
  return result;
}

void sub_100380D0C(uint64_t a1, void *a2)
{
}

void sub_100380D18(uint64_t a1, void *a2)
{
  id v6 = a2;
  int v3 = [v6 objectForKey:@"CBWHBMetricsKeyEventType"];
  int v4 = v3;
  if (v3)
  {
    if ([v3 isEqualToString:@"RSSILevelEvent"])
    {
      unsigned int v5 = 120;
    }
    else if ([v4 isEqualToString:@"CoexUpdateEvent"])
    {
      unsigned int v5 = 119;
    }
    else
    {
      if (![v4 isEqualToString:@"WhbStateEvent"]) {
        goto LABEL_9;
      }
      unsigned int v5 = 121;
    }
    sub_10038094C(a1, v5, v6);
  }
LABEL_9:
}

void sub_100380DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100380DF4(uint64_t a1, void *a2)
{
}

void sub_100380E00(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v24 = a1;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  CFStringRef v3 = @"No Sync";
  if (a2[4] == 1) {
    CFStringRef v3 = @"NACK or CRC";
  }
  if (a2[4]) {
    CFStringRef v4 = v3;
  }
  else {
    CFStringRef v4 = @"No ReTx";
  }
  if (*((unsigned char *)a2 + 44))
  {
    unsigned int v5 = sub_100197864(*a2);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009AA728);
    }
    id v6 = sub_100686130((uint64_t)off_1009F7EB8, (uint64_t)v5);
    if (v6)
    {
      if (qword_1009F7EC0 != -1) {
        dispatch_once(&qword_1009F7EC0, &stru_1009AA728);
      }
      uint64_t v7 = off_1009F7EB8;
      sub_1000305AC(v31, v6);
      uint64_t v8 = sub_1006865A8((uint64_t)v7, v31);
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
      }
      int v9 = sub_1006C5934((uint64_t)off_1009F7ED8, v6);
      unsigned int v10 = v9;
      if (v9 && (unint64_t)objc_msgSend(v9, "length", v24) >= 5)
      {
        uint64_t v11 = (unsigned __int8 *)[v10 bytes];
        HIDWORD(v28) = *v11;
        LODWORD(v28) = *(unsigned __int16 *)(v11 + 1);
        LODWORD(v27) = *(unsigned __int16 *)(v11 + 3);
      }
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
      }
      if (sub_1006C2740((uint64_t)off_1009F7ED8, v6, 11))
      {
        +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", "Magnet", +[NSString defaultCStringEncoding]);
        id v26 = (__CFString *)objc_claimAutoreleasedReturnValue();
      }
      else
      {
        id v26 = @"Unspecified";
      }
    }
    else
    {
      uint64_t v8 = 0;
      id v26 = @"Unspecified";
    }
  }
  else
  {
    uint64_t v12 = *((void *)a2 + 6);
    if (v12) {
      sub_10047B7A8(v12, (_DWORD *)&v28 + 1, &v28, &v27, (_DWORD *)&v27 + 1);
    }
    uint64_t v8 = 0;
    id v26 = @"Unspecified";
  }
  v29[0] = @"AvgRSSI";
  __int16 v13 = +[NSNumber numberWithShort:](NSNumber, "numberWithShort:", (__int16)a2[2], v24);
  v30[0] = v13;
  v29[1] = @"AvgSNR";
  int v14 = +[NSNumber numberWithShort:(__int16)a2[3]];
  v30[1] = v14;
  v29[2] = @"AvgPacketType";
  if (*((char *)a2 + 39) >= 0) {
    int v15 = a2 + 8;
  }
  else {
    int v15 = (unsigned __int16 *)*((void *)a2 + 2);
  }
  id v16 = +[NSString stringWithUTF8String:v15];
  v30[2] = v16;
  v30[3] = v4;
  v29[3] = @"ReTxReason";
  v29[4] = @"IsLEDevice";
  char v17 = +[NSNumber numberWithBool:*((unsigned __int8 *)a2 + 44)];
  v30[4] = v17;
  v29[5] = @"PeripheralLatency";
  id v18 = +[NSNumber numberWithUnsignedShort:v8];
  v30[5] = v18;
  v29[6] = @"PID";
  long long v19 = +[NSNumber numberWithUnsignedInt:v27];
  v30[6] = v19;
  v29[7] = @"VID";
  id v20 = +[NSNumber numberWithUnsignedInt:v28];
  v30[7] = v20;
  v29[8] = @"Version";
  uint64_t v21 = +[NSNumber numberWithUnsignedInt:HIDWORD(v27)];
  v30[8] = v21;
  v29[9] = @"VIDSource";
  id v22 = +[NSNumber numberWithUnsignedInt:HIDWORD(v28)];
  v29[10] = @"LEDeviceUseCase";
  v30[9] = v22;
  v30[10] = v26;
  int64x2_t v23 = +[NSDictionary dictionaryWithObjects:v30 forKeys:v29 count:11];

  sub_10038094C(v25, 0x46u, v23);
}

void sub_10038124C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_100381514(uint64_t a1, void *a2, int a3, unsigned int a4, uint64_t a5, void *a6, int a7)
{
  id v12 = a2;
  id v13 = a6;
  int v14 = v13;
  if (a4 - 9 > 0xFFFFFFF7)
  {
    if (v12 && a5 && v13)
    {
      unsigned int v15 = a4 * a3;
      if (a4 * a3)
      {
        unsigned int v16 = 0;
        do
        {
          switch(a4)
          {
            case 1u:
              uint64_t v17 = *(unsigned __int8 *)(a5 + v16);
              if (a7) {
                +[NSNumber numberWithChar:v17];
              }
              else {
                +[NSNumber numberWithUnsignedChar:v17];
              }
              goto LABEL_27;
            case 2u:
              if (a7) {
                +[NSNumber numberWithShort:*(__int16 *)(a5 + v16)];
              }
              else {
                +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a5 + v16)];
              }
              goto LABEL_27;
            case 3u:
              uint64_t v19 = *(unsigned __int16 *)(a5 + v16) | (*(unsigned __int8 *)(a5 + v16 + 2) << 16);
              if (a7) {
                goto LABEL_16;
              }
              goto LABEL_30;
            case 4u:
              uint64_t v19 = *(unsigned int *)(a5 + v16);
              if (a7) {
LABEL_16:
              }
                +[NSNumber numberWithInt:v19];
              else {
LABEL_30:
              }
                +[NSNumber numberWithUnsignedInt:v19];
              goto LABEL_27;
            case 5u:
              unint64_t v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32);
              if (a7) {
                goto LABEL_26;
              }
              goto LABEL_32;
            case 6u:
              unint64_t v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 5) << 40);
              if (a7) {
                goto LABEL_26;
              }
              goto LABEL_32;
            case 7u:
              unint64_t v20 = *(unsigned int *)(a5 + v16) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 4) << 32) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 5) << 40) | ((unint64_t)*(unsigned __int8 *)(a5 + v16 + 6) << 48);
              if (a7) {
                goto LABEL_26;
              }
              goto LABEL_32;
            case 8u:
              unint64_t v20 = *(void *)(a5 + v16);
              if (a7) {
LABEL_26:
              }
                +[NSNumber numberWithLongLong:v20];
              else {
LABEL_32:
              }
                +[NSNumber numberWithUnsignedLongLong:v20];
              id v18 = LABEL_27:;
              uint64_t v21 = +[NSString stringWithFormat:@"%@_%u", v12, v16 / a4];
              [v14 setObject:v18 forKey:v21];

              break;
            default:
              id v18 = +[NSString stringWithFormat:@"%@_%u", v12, v16 / a4];
              [v14 setObject:&off_1009E0E00 forKey:v18];
              break;
          }

          v16 += a4;
        }
        while (v16 < v15);
      }
    }
    else
    {
      id v22 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 138412802;
        id v24 = v12;
        __int16 v25 = 2048;
        uint64_t v26 = a5;
        __int16 v27 = 2112;
        uint64_t v28 = v14;
        _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "addExpandedArrayToDictionary: Invalid parameters. arrayName: %@, array: %p, dict: %@", buf, 0x20u);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075B7BC();
  }
}

void sub_100381BFC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100381D0C(uint64_t a1, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 4);
  unsigned int v3 = *(_DWORD *)(a2 + 8);
  long long v34 = *(_OWORD *)(a2 + 28);
  long long v35 = *(_OWORD *)(a2 + 44);
  v36[0] = *(_OWORD *)(a2 + 60);
  *(_OWORD *)((char *)v36 + 12) = *(_OWORD *)(a2 + 72);
  long long v33 = *(_OWORD *)(a2 + 12);
  double v4 = *(double *)(a2 + 88);
  long long v31 = *(_OWORD *)(a2 + 96);
  int v32 = *(_DWORD *)(a2 + 112);
  unsigned int v5 = v3 - v2;
  if (v2 - 1 >= 0x3B)
  {
    if (v2) {
      unsigned int v6 = vcvtad_u64_f64((double)v2 / 60.0);
    }
    else {
      unsigned int v6 = 0;
    }
  }
  else
  {
    unsigned int v6 = 1;
  }
  if (v5 - 1 >= 0x3B)
  {
    if (v3 == v2) {
      unsigned int v7 = 0;
    }
    else {
      unsigned int v7 = vcvtad_u64_f64((double)v5 / 60.0);
    }
  }
  else
  {
    unsigned int v7 = 1;
  }
  unsigned int v8 = *(_DWORD *)(a2 + 116);
  if (v3 - 1 < 0x3B)
  {
    unsigned int v9 = 1;
LABEL_15:
    int v10 = v8 / v9;
    goto LABEL_18;
  }
  if (v3)
  {
    unsigned int v9 = vcvtad_u64_f64((double)v3 / 60.0);
    if (v9) {
      goto LABEL_15;
    }
  }
  else
  {
    unsigned int v9 = 0;
  }
  int v10 = 0;
LABEL_18:
  uint64_t v11 = *(void *)(a2 + 120);
  if (v6) {
    double v4 = (double)v7 / (double)v6;
  }
  uint64_t v12 = sub_1004AFD94();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  long long v19 = v34;
  long long v20 = v35;
  *(_OWORD *)uint64_t v21 = v36[0];
  *(_OWORD *)&v21[12] = *(_OWORD *)((char *)v36 + 12);
  v14[2] = sub_100381F3C;
  v14[3] = &unk_1009AA448;
  void v14[4] = a1;
  unsigned int v15 = v3 - v2;
  unsigned int v16 = v2;
  unsigned int v17 = v3;
  long long v18 = v33;
  double v22 = v4;
  long long v23 = v31;
  int v24 = v32;
  unsigned int v25 = v8;
  uint64_t v26 = v11;
  int v27 = v10;
  unsigned int v28 = v9;
  unsigned int v29 = v6;
  unsigned int v30 = v7;
  sub_100013018(v12, v14);
}

void sub_100381F3C(uint64_t a1)
{
  uint64_t v12 = *(void *)(a1 + 32);
  v17[0] = @"AccessoryPID";
  unsigned int v16 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 152)];
  v18[0] = v16;
  v17[1] = @"AoSCategory";
  unsigned int v15 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 164)];
  v18[1] = v15;
  v17[2] = @"EndReason";
  int v14 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 160)];
  void v18[2] = v14;
  v17[3] = @"EndRetx";
  id v13 = +[NSNumber numberWithLongLong:*(void *)(a1 + 112)];
  void v18[3] = v13;
  _OWORD v17[4] = @"EndRSSI";
  unsigned int v2 = +[NSNumber numberWithLongLong:*(void *)(a1 + 120)];
  v18[4] = v2;
  v17[5] = @"GlitchesPerMin";
  unsigned int v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 168)];
  v18[5] = v3;
  v17[6] = @"ISMvsUBORatio";
  double v4 = +[NSNumber numberWithDouble:*(double *)(a1 + 128)];
  v18[6] = v4;
  v17[7] = @"StartDelay";
  unsigned int v5 = +[NSNumber numberWithDouble:*(double *)(a1 + 144)];
  v18[7] = v5;
  v17[8] = @"StartRetx";
  unsigned int v6 = +[NSNumber numberWithLongLong:*(void *)(a1 + 96)];
  v18[8] = v6;
  v17[9] = @"StartRSSI";
  unsigned int v7 = +[NSNumber numberWithLongLong:*(void *)(a1 + 104)];
  v18[9] = v7;
  v17[10] = @"TotalDuration";
  unsigned int v8 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 172)];
  v18[10] = v8;
  v17[11] = @"5GDuration";
  unsigned int v9 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176)];
  v18[11] = v9;
  v17[12] = @"2GDuration";
  int v10 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 180)];
  v18[12] = v10;
  uint64_t v11 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:13];

  sub_10038094C(v12, 6u, v11);
}

void sub_10038220C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  _Unwind_Resume(a1);
}

void sub_1003822D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 64);
  uint64_t v202 = 0;
  uint64_t v201 = 0;
  if (v3) {
    sub_10047B7A8(v3, (_DWORD *)&v202 + 1, &v202, &v201, (_DWORD *)&v201 + 1);
  }
  memset(&v200, 0, sizeof(v200));
  sub_10004191C(&v200, "");
  unsigned int v5 = *(_DWORD *)(a2 + 108);
  int v6 = *(_DWORD *)(a2 + 24);
  v197 = 0;
  v198 = 0;
  v199 = 0;
  v194 = 0;
  v195 = 0;
  v196 = 0;
  double v8 = *(double *)(a2 + 128);
  double v7 = *(double *)(a2 + 136);
  if (!v3)
  {
    BOOL v10 = 0;
    v189 = @"Unknown";
    goto LABEL_17;
  }
  sub_100475F84(v3, (uint64_t)__p);
  sub_100383D54((uint64_t)__p, &__str);
  std::string::operator=(&v200, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (v193 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v200.__r_.__value_.__l.__size_)
    {
      unsigned int v9 = (std::string *)v200.__r_.__value_.__r.__words[0];
      goto LABEL_14;
    }
LABEL_15:
    v189 = @"Unknown";
    goto LABEL_16;
  }
  if (!*((unsigned char *)&v200.__r_.__value_.__s + 23)) {
    goto LABEL_15;
  }
  unsigned int v9 = &v200;
LABEL_14:
  +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v9, +[NSString defaultCStringEncoding]);
  v189 = (__CFString *)objc_claimAutoreleasedReturnValue();
LABEL_16:
  BOOL v10 = sub_100476504(v3);
LABEL_17:
  unsigned int v186 = v5;
  uint64_t v190 = v3;
  BOOL v183 = v10;
  uint64_t v11 = *(int ***)(a2 + 328);
  uint64_t v12 = *(int ***)(a2 + 336);
  if (v11 == v12)
  {
    uint64_t v26 = v195;
  }
  else
  {
    do
    {
      int v13 = **v11;
      int v14 = v198;
      if (v198 >= v199)
      {
        unsigned int v16 = (char *)v197;
        uint64_t v17 = (v198 - (unsigned char *)v197) >> 2;
        unint64_t v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 62) {
          abort();
        }
        uint64_t v19 = v199 - (unsigned char *)v197;
        if ((v199 - (unsigned char *)v197) >> 1 > v18) {
          unint64_t v18 = v19 >> 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v18;
        }
        if (v20)
        {
          uint64_t v21 = (char *)sub_1002C44F0((uint64_t)&v199, v20);
          unsigned int v16 = (char *)v197;
          int v14 = v198;
        }
        else
        {
          uint64_t v21 = 0;
        }
        double v22 = &v21[4 * v17];
        *(_DWORD *)double v22 = v13;
        unsigned int v15 = v22 + 4;
        while (v14 != v16)
        {
          int v23 = *((_DWORD *)v14 - 1);
          v14 -= 4;
          *((_DWORD *)v22 - 1) = v23;
          v22 -= 4;
        }
        v197 = v22;
        v198 = v15;
        v199 = &v21[4 * v20];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)v198 = v13;
        unsigned int v15 = v14 + 4;
      }
      v198 = v15;
      int v24 = *((char *)*v11 + 8);
      unsigned int v25 = v195;
      if (v195 >= v196)
      {
        int v27 = (char *)v194;
        uint64_t v28 = (v195 - (unsigned char *)v194) >> 2;
        unint64_t v29 = v28 + 1;
        if ((unint64_t)(v28 + 1) >> 62) {
          abort();
        }
        uint64_t v30 = v196 - (unsigned char *)v194;
        if ((v196 - (unsigned char *)v194) >> 1 > v29) {
          unint64_t v29 = v30 >> 1;
        }
        if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v29;
        }
        if (v31)
        {
          int v32 = (char *)sub_1002C44F0((uint64_t)&v196, v31);
          int v27 = (char *)v194;
          unsigned int v25 = v195;
        }
        else
        {
          int v32 = 0;
        }
        long long v33 = &v32[4 * v28];
        *(_DWORD *)long long v33 = v24;
        uint64_t v26 = v33 + 4;
        while (v25 != v27)
        {
          int v34 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v33 - 1) = v34;
          v33 -= 4;
        }
        v194 = v33;
        v195 = v26;
        v196 = &v32[4 * v31];
        if (v27) {
          operator delete(v27);
        }
      }
      else
      {
        *(_DWORD *)v195 = v24;
        uint64_t v26 = v25 + 4;
      }
      v195 = v26;
      ++v11;
    }
    while (v11 != v12);
  }
  if (v194 == v26)
  {
    uint64_t v35 = 0;
    int v40 = 0;
    signed int v37 = v6;
    uint64_t v43 = v190;
    unsigned int v44 = v186;
  }
  else
  {
    LODWORD(v35) = 0;
    int v36 = (unsigned int *)v194;
    signed int v37 = v6;
    do
    {
      unsigned int v39 = *v36++;
      unsigned int v38 = v39;
      if (v39 <= 0xFFFFFF9B) {
        uint64_t v35 = v35;
      }
      else {
        uint64_t v35 = v38;
      }
    }
    while (v36 != (unsigned int *)v26);
    int v40 = *(_DWORD *)(a2 + 316) - ((unint64_t)(v26 - (unsigned char *)v194) >> 2);
    char v41 = (id)qword_100A19E50;
    if (os_log_type_enabled(v41, OS_LOG_TYPE_INFO))
    {
      int v42 = *(_DWORD *)(a2 + 316);
      LODWORD(__str.__r_.__value_.__l.__data_) = 67109632;
      HIDWORD(__str.__r_.__value_.__r.__words[0]) = v40;
      LOWORD(__str.__r_.__value_.__r.__words[1]) = 1024;
      *(_DWORD *)((char *)&__str.__r_.__value_.__r.__words[1] + 2) = v42;
      HIWORD(__str.__r_.__value_.__r.__words[1]) = 2048;
      __str.__r_.__value_.__r.__words[2] = (v195 - (unsigned char *)v194) >> 2;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_INFO, "TotalFrameDropped calculation: totalFrameDropped = %d, a2dpMetric.fTotalPurgeCFIndex Count = %u, rssiAtSkip.size() = %lu", (uint8_t *)&__str, 0x18u);
    }

    uint64_t v43 = v190;
    unsigned int v44 = v186;
  }
  if (v197 == v198)
  {
    unsigned int v47 = 0;
    unsigned int v45 = 0;
    goto LABEL_71;
  }
  unsigned int v45 = *((_DWORD *)v198 - 1);
  if (v45 - 1 >= 0x3B)
  {
    if (v45)
    {
      double v4 = (double)v45 / 60.0;
      unsigned int v46 = vcvtad_u64_f64(v4);
      goto LABEL_69;
    }
    unsigned int v47 = 0;
LABEL_71:
    unsigned int v46 = 0;
    goto LABEL_72;
  }
  unsigned int v46 = 1;
LABEL_69:
  unsigned int v47 = (v40 & ~(v40 >> 31)) / v45;
LABEL_72:
  unsigned int v48 = *(_DWORD *)(a2 + 248);
  unsigned int v49 = v45 - v48;
  if (v45 != v48 && v48)
  {
    double v4 = (double)v49 / (double)v48;
    *(double *)(a2 + 240) = v4;
  }
  unsigned int v50 = v49 - 1 < 0x3B;
  if (v49 - 1 >= 0x3B && v45 != v48)
  {
    double v4 = (double)v49 / 60.0;
    unsigned int v50 = vcvtad_u64_f64(v4);
  }
  *(_DWORD *)(a2 + 252) = v50;
  unsigned int v51 = v48 - 1 < 0x3B;
  if (v48 >= 0x3C)
  {
    double v4 = (double)v48 / 60.0;
    unsigned int v51 = vcvtad_u64_f64(v4);
  }
  *(_DWORD *)(a2 + 248) = v51;
  unsigned int v52 = *(_DWORD *)(a2 + 232);
  if (v52 - 1 >= 0x3B)
  {
    if (v52)
    {
      double v4 = (double)v52 / 60.0;
      unsigned int v52 = vcvtad_u64_f64(v4);
    }
  }
  else
  {
    unsigned int v52 = 1;
  }
  *(_DWORD *)(a2 + 232) = v52;
  uint64_t v53 = *(void *)(a2 + 288);
  if (v53) {
    uint64_t v54 = *(void *)(a2 + 264) / v53;
  }
  else {
    uint64_t v54 = 0;
  }
  uint64_t v55 = *(void *)(a2 + 280);
  if (v55)
  {
    uint64_t v56 = *(unsigned int *)(a2 + 272) / v55;
    if (v46)
    {
LABEL_89:
      LODWORD(v4) = *(_DWORD *)(a2 + 256);
      double v4 = (double)*(unint64_t *)&v4;
      double v57 = v4 / (double)v46;
      goto LABEL_92;
    }
  }
  else
  {
    uint64_t v56 = 0;
    if (v46) {
      goto LABEL_89;
    }
  }
  double v57 = 0.0;
LABEL_92:
  uint64_t v58 = *(unsigned int **)(a2 + 352);
  int v59 = *(unsigned int **)(a2 + 360);
  if (v58 == v59)
  {
    uint64_t v62 = 0;
    unsigned int v61 = 0;
  }
  else
  {
    unsigned int v60 = 0;
    unsigned int v61 = 0;
    LODWORD(v62) = 0;
    do
    {
      unsigned int v64 = *v58++;
      unsigned int v63 = v64;
      unsigned int v65 = v64 - 1;
      if (v64 <= v62) {
        unsigned int v66 = v62;
      }
      else {
        unsigned int v66 = v63;
      }
      if (v65 >= 0x64) {
        uint64_t v62 = v62;
      }
      else {
        uint64_t v62 = v66;
      }
      if (v65 >= 0x64) {
        unsigned int v63 = 0;
      }
      else {
        ++v61;
      }
      v60 += v63;
    }
    while (v58 != v59);
    if (v61) {
      unsigned int v61 = v60 / v61;
    }
  }
  BOOL v67 = v51 == 0;
  if (v51) {
    uint64_t v68 = 2 * *(char *)(a2 + 388) - (int)v54;
  }
  else {
    uint64_t v68 = *(char *)(a2 + 388);
  }
  if (v67) {
    uint64_t v69 = v61;
  }
  else {
    uint64_t v69 = 2 * v61 - v56;
  }
  *(void *)(a2 + 296) = v68;
  *(void *)(a2 + 304) = v69;
  if (v45 >> 7 > 0x2A2 || (double v4 = (double)v45, v8 + v7 >= (double)v45))
  {
    unsigned int v70 = 0;
  }
  else
  {
    double v4 = v4 - (v8 + v7);
    unsigned int v70 = v4;
  }
  uint64_t v141 = v56;
  uint64_t v142 = v54;
  unsigned int v153 = v47;
  unsigned int v163 = v40 & ~(v40 >> 31);
  unsigned int v159 = v61;
  unsigned int v181 = v46;
  if (v202 != 76)
  {
    unsigned int v175 = 0;
    unsigned int v173 = 0;
    goto LABEL_137;
  }
  unsigned int v71 = v8;
  if (v8 < 0x15180)
  {
    if (v71 - 1 < 0x3B)
    {
      unsigned int v72 = 1;
LABEL_124:
      unsigned int v175 = v72;
      goto LABEL_126;
    }
    if (v71)
    {
      double v4 = (double)v71 / 60.0;
      unsigned int v72 = vcvtad_u64_f64(v4);
      goto LABEL_124;
    }
  }
  unsigned int v175 = 0;
LABEL_126:
  if (v70 - 1 >= 0x3B)
  {
    if (v70)
    {
      double v4 = (double)v70 / 60.0;
      unsigned int v73 = vcvtad_u64_f64(v4);
    }
    else
    {
      unsigned int v73 = 0;
    }
  }
  else
  {
    unsigned int v73 = 1;
  }
  unsigned int v74 = v7;
  unsigned int v173 = v73;
  if (v7 < 0x15180)
  {
    if (v74 - 1 < 0x3B)
    {
      unsigned int v75 = 1;
LABEL_136:
      unsigned int v177 = v75;
      goto LABEL_138;
    }
    if (v74)
    {
      double v4 = (double)v74 / 60.0;
      unsigned int v75 = vcvtad_u64_f64(v4);
      goto LABEL_136;
    }
  }
LABEL_137:
  unsigned int v177 = 0;
LABEL_138:
  unsigned int v76 = *(_DWORD *)(a2 + 412);
  if (v76)
  {
    unsigned int v147 = (v76 >> 1) & 1;
    unsigned int v149 = *(_DWORD *)(a2 + 412) & 1;
    unsigned int v145 = (v76 >> 2) & 1;
    unsigned int v143 = (v76 >> 3) & 1;
    if (v44) {
      goto LABEL_140;
    }
LABEL_143:
    unsigned int v179 = 0;
    if (v37) {
      goto LABEL_141;
    }
    goto LABEL_144;
  }
  unsigned int v149 = 0;
  unsigned int v147 = 0;
  unsigned int v145 = 0;
  unsigned int v143 = 0;
  if (!v44) {
    goto LABEL_143;
  }
LABEL_140:
  LODWORD(v4) = *(_DWORD *)(a2 + 104);
  unsigned int v179 = ((double)*(unint64_t *)&v4 / (double)v44 * 100.0);
  if (v37)
  {
LABEL_141:
    unsigned int v169 = *(_DWORD *)a2 / v37;
    unsigned int v167 = *(_DWORD *)(a2 + 8) / v37;
    unsigned int v165 = *(_DWORD *)(a2 + 16) / v37;
    unsigned int v171 = *(_DWORD *)(a2 + 28) / v37;
    goto LABEL_145;
  }
LABEL_144:
  unsigned int v171 = 0;
  unsigned int v169 = 0;
  unsigned int v167 = 0;
  unsigned int v165 = 0;
LABEL_145:
  uint64_t v77 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v77 + 136))(v77))
  {
    unsigned int v161 = 0;
    unsigned int v157 = 0;
    uint64_t v81 = 0;
    uint64_t v82 = 0;
    uint32x2_t v83 = 0;
    goto LABEL_158;
  }
  unsigned int v79 = *(_DWORD *)(a2 + 36);
  if (!v79)
  {
    unsigned int v161 = 0;
    unsigned int v80 = *(_DWORD *)(a2 + 40);
    if (v80) {
      goto LABEL_148;
    }
LABEL_151:
    unsigned int v157 = 0;
    goto LABEL_152;
  }
  unsigned int v80 = *(_DWORD *)(a2 + 40);
  unsigned int v161 = vcvtas_u32_f32((float)((float)v79 * 100.0) / (float)(v80 + v79 + *(_DWORD *)(a2 + 60)));
  if (!v80) {
    goto LABEL_151;
  }
LABEL_148:
  unsigned int v157 = vcvtas_u32_f32((float)((float)v80 * 100.0) / (float)(v80 + v79 + *(_DWORD *)(a2 + 60)));
LABEL_152:
  unsigned int v84 = *(_DWORD *)(a2 + 44);
  unsigned int v85 = *(_DWORD *)(a2 + 48);
  *(float *)v78.i32 = (float)v85;
  unsigned int v86 = vcvtps_u32_f32((float)v85 / (float)v84);
  if (v84) {
    uint64_t v81 = v86;
  }
  else {
    uint64_t v81 = 0;
  }
  uint64_t v82 = v80 + v79;
  if (v85)
  {
    LODWORD(v82) = vcvtps_u32_f32((float)v82 / *(float *)v78.i32);
    uint32x2_t v83 = vcvt_u32_f32(vrndp_f32(vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)(a2 + 52)), (float32x2_t)vdup_lane_s32(v78, 0))));
  }
  else
  {
    uint32x2_t v83 = *(uint32x2_t *)(a2 + 52);
  }
LABEL_158:
  uint32x2_t v187 = v83;
  uint64_t v87 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v87 + 160))(v87) && (unsigned int v88 = *(_DWORD *)(a2 + 60)) != 0)
  {
    unsigned int v155 = vcvtas_u32_f32((float)((float)v88 * 100.0) / (float)(*(_DWORD *)(a2 + 36) + v88 + *(_DWORD *)(a2 + 40)));
    if (!v43) {
      goto LABEL_171;
    }
  }
  else
  {
    unsigned int v155 = 0;
    if (!v43)
    {
LABEL_171:
      CFStringRef v90 = @"Unknown";
      goto LABEL_172;
    }
  }
  if (!sub_100478B2C(v43, 12))
  {
    uint64_t v43 = 0;
    goto LABEL_171;
  }
  sub_100480344(v43, 0xAu, &__str);
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_str = &__str;
  }
  else {
    p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
  }
  CFStringRef v90 = +[NSString stringWithUTF8String:p_str];
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  uint64_t v43 = 1;
LABEL_172:
  unsigned int v91 = *(_DWORD *)(a2 + 440);
  if (v91 < 0x15180)
  {
    if (v91 - 1 < 0x3B)
    {
      unsigned int v92 = 1;
LABEL_177:
      unsigned int v151 = v92;
      goto LABEL_179;
    }
    if (v91)
    {
      unsigned int v92 = vcvtad_u64_f64((double)v91 / 60.0);
      goto LABEL_177;
    }
  }
  unsigned int v151 = 0;
LABEL_179:
  if (*(char *)(a2 + 471) >= 0) {
    uint64_t v93 = a2 + 448;
  }
  else {
    uint64_t v93 = *(void *)(a2 + 448);
  }
  v191 = +[NSString stringWithUTF8String:v93];
  int v94 = *(char *)(a2 + 495);
  v185 = (__CFString *)v90;
  if (v94 < 0)
  {
    long long v95 = *(_DWORD **)(a2 + 472);
    if (*(void *)(a2 + 480) != 7)
    {
LABEL_190:
      uint64_t v97 = +[NSString stringWithUTF8String:v95];

      v191 = (void *)v97;
      goto LABEL_191;
    }
  }
  else
  {
    long long v95 = (_DWORD *)(a2 + 472);
    if (v94 != 7) {
      goto LABEL_190;
    }
  }
  if (*v95 != 1852534357 || *(_DWORD *)((char *)v95 + 3) != 1853321070) {
    goto LABEL_190;
  }
LABEL_191:
  v203[0] = @"AccessoryPID";
  long long v122 = +[NSNumber numberWithUnsignedInt:v201];
  v204[0] = v122;
  v204[1] = v191;
  v203[1] = @"AudioCategory";
  v203[2] = @"AvgMaxGoodPcktsPerSwitch";
  std::string v139 = +[NSNumber numberWithUnsignedInt:v187.u32[0]];
  v204[2] = v139;
  v203[3] = @"AvgMinGoodPcktsPerSwitch";
  v188 = +[NSNumber numberWithUnsignedInt:v187.u32[1]];
  v204[3] = v188;
  v203[4] = @"AvgPacketsPerSwitch";
  std::string v138 = +[NSNumber numberWithUnsignedInt:v82];
  v204[4] = v138;
  v203[5] = @"AvgSwitchesPerSecond";
  std::string v137 = +[NSNumber numberWithUnsignedInt:v81];
  v204[5] = v137;
  v203[6] = @"BitRateLowAvg";
  long long v121 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 376)];
  v204[6] = v121;
  v203[7] = @"BitRateMediumAvg";
  long long v136 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 380)];
  v204[7] = v136;
  v203[8] = @"BtRole";
  long long v135 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 320)];
  v204[8] = v135;
  v203[9] = @"DurationInMinutes";
  v182 = +[NSNumber numberWithUnsignedInt:v181];
  v204[9] = v182;
  v203[10] = @"EpaCallTimeRatio";
  v180 = +[NSNumber numberWithUnsignedInt:v179];
  v204[10] = v180;
  v204[11] = v90;
  v203[11] = @"FWVersion";
  v203[12] = @"HighLatencyDurationMins";
  long long v120 = +[NSNumber numberWithUnsignedInt:v177];
  v204[12] = v120;
  v203[13] = @"HDRSession";
  v184 = +[NSNumber numberWithBool:v183];
  v204[13] = v184;
  v203[14] = @"IsAppleAudioDevice";
  v178 = +[NSNumber numberWithBool:v43];
  v204[14] = v178;
  v203[15] = @"LowLatencyDurationMins";
  v176 = +[NSNumber numberWithUnsignedInt:v175];
  v204[15] = v176;
  v203[16] = @"MidLatencyDurationMins";
  v174 = +[NSNumber numberWithUnsignedInt:v173];
  v204[16] = v174;
  v203[17] = @"MaxOverwaitDurationMs";
  long long v119 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 504)];
  v204[17] = v119;
  v203[18] = @"NoiseFloorAvgOnGoodChannels";
  v172 = +[NSNumber numberWithUnsignedInt:v171];
  v204[18] = v172;
  v203[19] = @"NoiseFloorMinOnGoodChannels";
  long long v134 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 32)];
  v204[19] = v134;
  v203[20] = @"NoiseFloor50Percentile";
  v170 = +[NSNumber numberWithInt:v169];
  v204[20] = v170;
  v203[21] = @"NoiseFloor50Max";
  long long v133 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 4)];
  v204[21] = v133;
  v203[22] = @"NoiseFloor75Percentile";
  long long v118 = +[NSNumber numberWithInt:v167];
  v204[22] = v118;
  v203[23] = @"NoiseFloor75Max";
  v168 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 12)];
  v204[23] = v168;
  v203[24] = @"NoiseFloor90Percentile";
  v166 = +[NSNumber numberWithInt:v165];
  v204[24] = v166;
  v203[25] = @"NoiseFloor90Max";
  uint64_t v132 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 20)];
  v204[25] = v132;
  v203[26] = @"OverwaitCountMoreThan50ms";
  v131 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 496)];
  v204[26] = v131;
  v203[27] = @"PacketLoss";
  v117 = +[NSNumber numberWithInt:v163];
  v204[27] = v117;
  v203[28] = @"PercentPacketsAnt0";
  v164 = +[NSNumber numberWithUnsignedInt:v161];
  v204[28] = v164;
  v203[29] = @"PercentPacketsAnt1";
  v162 = +[NSNumber numberWithUnsignedInt:v157];
  v204[29] = v162;
  v203[30] = @"PercentPacketsTxBF";
  v158 = +[NSNumber numberWithUnsignedInt:v155];
  v204[30] = v158;
  v203[31] = @"ReTransmissionRate";
  v160 = +[NSNumber numberWithUnsignedInt:v159];
  v204[31] = v160;
  v203[32] = @"ReTransmissionRateMax";
  long long v116 = +[NSNumber numberWithUnsignedInt:v62];
  v204[32] = v116;
  v203[33] = @"RssiAverage";
  uint64_t v98 = *(int *)(a2 + 424);
  if (v98) {
    uint64_t v99 = *(void *)(a2 + 416) / v98;
  }
  else {
    uint64_t v99 = 0;
  }
  v156 = +[NSNumber numberWithInt:v99];
  v204[33] = v156;
  v203[34] = @"RssiMax";
  int v130 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 432)];
  v204[34] = v130;
  v203[35] = @"RssiMin";
  uint64_t v129 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 428)];
  v204[35] = v129;
  v203[36] = @"RssiAtSkip";
  v128 = +[NSNumber numberWithInt:v35];
  v204[36] = v128;
  v204[37] = v189;
  v203[37] = @"SanitizedDeviceName";
  v203[38] = @"SpatialProfileSessionDuration";
  long long v115 = +[NSNumber numberWithUnsignedInt:v151];
  v204[38] = v115;
  v203[39] = @"SkipperMin";
  v154 = +[NSNumber numberWithUnsignedInt:v153];
  v204[39] = v154;
  v203[40] = @"TxCountIncludingReTx";
  v152 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 512)];
  v204[40] = v152;
  v203[41] = @"VendorID";
  std::string v127 = +[NSNumber numberWithUnsignedInt:v202];
  v204[41] = v127;
  v203[42] = @"Version";
  long long v126 = +[NSNumber numberWithUnsignedInt:HIDWORD(v201)];
  v204[42] = v126;
  v203[43] = @"VersionIDSource";
  char v114 = +[NSNumber numberWithUnsignedInt:HIDWORD(v202)];
  v204[43] = v114;
  v203[44] = @"WirelessSplitterOff";
  long long v125 = +[NSNumber numberWithBool:v76 == 0];
  v204[44] = v125;
  v203[45] = @"WirelessSplitterGuestRole";
  v150 = +[NSNumber numberWithBool:v149];
  v204[45] = v150;
  v203[46] = @"WirelessSplitterOwnerRole";
  v148 = +[NSNumber numberWithBool:v147];
  v204[46] = v148;
  v203[47] = @"WirelessSplitterUser1Type";
  v146 = +[NSNumber numberWithBool:v145];
  v204[47] = v146;
  v203[48] = @"WirelessSplitterUser2Type";
  uint64_t v112 = +[NSNumber numberWithBool:v143];
  v204[48] = v112;
  v203[49] = @"BTBand";
  if (*(char *)(a2 + 191) >= 0) {
    uint64_t v100 = a2 + 168;
  }
  else {
    uint64_t v100 = *(void *)(a2 + 168);
  }
  std::string v144 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v100, v112);
  v204[49] = v144;
  v203[50] = @"TipiConnected";
  long long v124 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a2 + 192)];
  v204[50] = v124;
  v203[51] = @"AoSDuration";
  long long v123 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 232)];
  v204[51] = v123;
  v203[52] = @"ISMvsUBORatio";
  long long v101 = +[NSNumber numberWithDouble:*(double *)(a2 + 240)];
  v204[52] = v101;
  v203[53] = @"2GDuration";
  long long v102 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 252)];
  v204[53] = v102;
  v203[54] = @"5GDuration";
  long long v103 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 248)];
  v204[54] = v103;
  v203[55] = @"FlushSessionRatio";
  long long v104 = +[NSNumber numberWithDouble:v57];
  v204[55] = v104;
  v203[56] = @"AvgAoSRSSI5G";
  v105 = +[NSNumber numberWithInt:v142];
  v204[56] = v105;
  v203[57] = @"AvgAoSRSSI2G";
  char v106 = +[NSNumber numberWithLongLong:*(void *)(a2 + 296)];
  v204[57] = v106;
  v203[58] = @"AvgRetx5G";
  v107 = +[NSNumber numberWithInt:v141];
  v204[58] = v107;
  v203[59] = @"AvgRetx2G";
  char v108 = +[NSNumber numberWithLongLong:*(void *)(a2 + 304)];
  v204[59] = v108;
  v203[60] = @"JitterBuffer";
  v109 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 312)];
  v204[60] = v109;
  char v110 = +[NSDictionary dictionaryWithObjects:v204 forKeys:v203 count:61];

  v111 = (id)qword_100A19E50;
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__str.__r_.__value_.__l.__data_) = 138412290;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v110;
    _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "A2dpLinkQuality stats %@", (uint8_t *)&__str, 0xCu);
  }

  sub_10038094C(a1, 7u, v110);
  if (v194)
  {
    v195 = (char *)v194;
    operator delete(v194);
  }
  if (v197)
  {
    v198 = (char *)v197;
    operator delete(v197);
  }

  if (SHIBYTE(v200.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v200.__r_.__value_.__l.__data_);
  }
}

void sub_1003838DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (*(char *)(v71 - 137) < 0) {
    operator delete(*(void **)(v71 - 160));
  }

  if (__p) {
    operator delete(__p);
  }
  if (a71) {
    operator delete(a71);
  }

  if (SLOBYTE(STACK[0x21F]) < 0) {
    operator delete((void *)STACK[0x208]);
  }
  _Unwind_Resume(a1);
}

void sub_100383D54(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4))
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    a2[2] = *(void *)(a1 + 16);
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(void *)a1 = 0;
  }
  else
  {
    uint64_t v10 = 0;
    v11[0] = 0;
    v11[1] = 0;
    sub_10004191C(v12, "accent");
    sub_10004191C(v13, "audi");
    sub_10004191C(v14, "azera");
    sub_10004191C(v15, "blue&me");
    sub_10004191C(v16, "bmw");
    sub_10004191C(v17, "buick");
    sub_10004191C(v18, "cadillac");
    sub_10004191C(v19, "car m_media");
    sub_10004191C(v20, "car multimedia");
    sub_10004191C(v21, "chevrolet");
    sub_10004191C(v22, "elantra");
    sub_10004191C(v23, "ferrari");
    sub_10004191C(v24, "genesis");
    sub_10004191C(v25, "gmc");
    sub_10004191C(v26, "handsfreelink");
    sub_10004191C(v27, "hands free system");
    sub_10004191C(v28, "jaguar");
    sub_10004191C(v29, "kia motors");
    sub_10004191C(v30, "lexus");
    sub_10004191C(v31, "mazda");
    sub_10004191C(v32, "mb bluetooth");
    sub_10004191C(v33, "my-car");
    sub_10004191C(v34, "my altima");
    sub_10004191C(v35, "my armada");
    sub_10004191C(v36, "my car");
    sub_10004191C(v37, "my maxima");
    sub_10004191C(v38, "my murano");
    sub_10004191C(v39, "my pathfinder");
    sub_10004191C(v40, "my rogue");
    sub_10004191C(v41, "my sentra");
    sub_10004191C(v42, "my titan");
    sub_10004191C(v43, "my versa");
    sub_10004191C(v44, "my quest");
    sub_10004191C(v45, "pcm");
    sub_10004191C(v46, "range rover");
    sub_10004191C(v47, "santa fe");
    sub_10004191C(v48, "sonata");
    sub_10004191C(v49, "subaru");
    sub_10004191C(v50, "sync");
    sub_10004191C(v51, "tesla");
    sub_10004191C(v52, "toyota");
    sub_10004191C(v53, "tucson");
    sub_10004191C(v54, "uconnect");
    sub_10004191C(v55, "veloster");
    sub_10004191C(v56, "vw");
    sub_10004191C(v57, "aukey ep-b4");
    sub_10004191C(v58, "bluebuds x");
    sub_10004191C(v59, "dr-bt50");
    sub_10004191C(v60, "freedom sprint");
    sub_10004191C(v61, "hesh 2 wireless");
    sub_10004191C(v62, "jabra rox wireless");
    sub_10004191C(v63, "jaybird bluebud x");
    sub_10004191C(v64, "jbl micro wireless");
    sub_10004191C(v65, "koss bt540i");
    sub_10004191C(v66, "lg hbs760");
    sub_10004191C(v67, "marsee one x");
    sub_10004191C(v68, "mdr-1rbt");
    sub_10004191C(v69, "motorola s9-hd");
    sub_10004191C(v70, "parrot zik 3");
    sub_10004191C(v71, "pdx-b11 yamaha");
    sub_10004191C(v72, "plt_m70");
    sub_10004191C(v73, "presence");
    sub_10004191C(v74, "s11-flex hd");
    sub_10004191C(v75, "sb2 wireless");
    sub_10004191C(v76, "sync by 50");
    sub_1003B9544((uint64_t)&v10, v12, 65);
    uint64_t v5 = 195;
    do
    {
      if (SHIBYTE(v12[v5 - 1]) < 0) {
        operator delete(v11[v5 - 1]);
      }
      v5 -= 3;
    }
    while (v5 * 8);
    if (*(char *)(a1 + 23) < 0)
    {
      double v7 = *(unsigned char **)a1;
      int v6 = (unsigned char *)(*(void *)a1 + *(void *)(a1 + 8));
    }
    else
    {
      int v6 = (unsigned char *)(a1 + *(unsigned __int8 *)(a1 + 23));
      double v7 = (unsigned char *)a1;
    }
    while (v7 != v6)
    {
      *double v7 = __tolower(*v7);
      ++v7;
    }
    uint64_t v8 = sub_10003156C((uint64_t)&v10, (const void **)a1);
    if (v11 == (char **)v8)
    {
      sub_10004191C(a2, "");
    }
    else if (*(char *)(v8 + 55) < 0)
    {
      sub_10003B098(a2, *(void **)(v8 + 32), *(void *)(v8 + 40));
    }
    else
    {
      long long v9 = *(_OWORD *)(v8 + 32);
      a2[2] = *(void *)(v8 + 48);
      *(_OWORD *)a2 = v9;
    }
    sub_10004BA28((uint64_t)&v10, v11[0]);
  }
}

void sub_100384478(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13)
{
  uint64_t v15 = 1560;
  while (1)
  {
    if (*(char *)(v13 + v15 - 1) < 0) {
      operator delete(*(void **)(v13 + v15 - 24));
    }
    v15 -= 24;
    if (!v15) {
      _Unwind_Resume(exception_object);
    }
  }
}

uint64_t sub_1003844EC(uint64_t a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  sub_1003B8B04((uint64_t)v7, a2);
  uint64_t v3 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_1003845E4;
  v5[3] = &unk_1009AA468;
  v5[4] = a1;
  sub_1003B8B04((uint64_t)v6, v7);
  sub_100013018(v3, v5);
  sub_1003B8C7C((uint64_t)v6);
  return sub_1003B8C7C((uint64_t)v7);
}

void sub_1003845C0(_Unwind_Exception *a1)
{
  sub_1003B8C7C(v1);
  sub_1003B8C7C(v2 - 224);
  _Unwind_Resume(a1);
}

void sub_1003845E4(uint64_t a1)
{
  uint64_t v2 = *(unsigned __int8 **)(a1 + 32);
  v28[0] = @"AccessoryPID";
  unsigned int v25 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 76)];
  v29[0] = v25;
  v28[1] = @"AoSEnabled";
  uint64_t v3 = (void *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    uint64_t v3 = (void *)*v3;
  }
  int v24 = +[NSString stringWithUTF8String:v3];
  v29[1] = v24;
  v28[2] = @"AudioCategory";
  uint64_t v4 = (void *)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    uint64_t v4 = (void *)*v4;
  }
  int v23 = +[NSString stringWithUTF8String:v4];
  v29[2] = v23;
  void v28[3] = @"BTBand";
  uint64_t v5 = (void *)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    uint64_t v5 = (void *)*v5;
  }
  double v22 = +[NSString stringWithUTF8String:v5];
  void v29[3] = v22;
  v28[4] = @"FWVersion";
  int v6 = (void *)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
    int v6 = (void *)*v6;
  }
  uint64_t v21 = +[NSString stringWithUTF8String:v6];
  v29[4] = v21;
  v28[5] = @"JitterBuffer";
  unint64_t v20 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 176)];
  v29[5] = v20;
  v28[6] = @"NoiseFloor50Percentile";
  uint64_t v19 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 180)];
  v29[6] = v19;
  v28[7] = @"NoiseFloor50Max";
  unint64_t v18 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 44)];
  v29[7] = v18;
  v28[8] = @"NumberOfClassicDevicesConnected";
  uint64_t v17 = +[NSNumber numberWithUnsignedChar:v2[528]];
  v29[8] = v17;
  v28[9] = @"NumberOfClassicHIDDevicesConnected";
  double v7 = +[NSNumber numberWithUnsignedChar:v2[531]];
  v29[9] = v7;
  v28[10] = @"NumberOfLEDevicesConnected";
  uint64_t v8 = +[NSNumber numberWithUnsignedChar:v2[529]];
  v29[10] = v8;
  v28[11] = @"NumberOfLEHIDDevicesConnected";
  long long v9 = +[NSNumber numberWithUnsignedChar:v2[530]];
  void v29[11] = v9;
  v28[12] = @"ReTransmissionRate";
  uint64_t v10 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 184)];
  v29[12] = v10;
  v28[13] = @"RssiAverage";
  uint64_t v11 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 192)];
  v29[13] = v11;
  v28[14] = @"RssiMax";
  uint64_t v12 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 196)];
  v29[14] = v12;
  v28[15] = @"RssiMin";
  uint64_t v13 = +[NSNumber numberWithInt:*(unsigned int *)(a1 + 200)];
  v29[15] = v13;
  v28[16] = @"TipiConnected";
  int v14 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a1 + 204)];
  v29[16] = v14;
  uint64_t v15 = +[NSDictionary dictionaryWithObjects:v29 forKeys:v28 count:17];

  unsigned int v16 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    int v27 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "A2dpPacketFlush sendA2DPPacketFlushMetric stats %@", buf, 0xCu);
  }
  sub_10038094C((uint64_t)v2, 8u, v15);
}

void sub_1003849E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100384AF0(uint64_t a1, uint64_t a2)
{
  return sub_1003B8B04(a1 + 40, (long long *)(a2 + 40));
}

uint64_t sub_100384AFC(uint64_t a1)
{
  return sub_1003B8C7C(a1 + 40);
}

float sub_100384B04(unsigned __int8 *a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = a1[530];
    int v5 = a1[529];
    int v6 = a1[531];
    int v7 = a1[528];
    v8[0] = 67109888;
    v8[1] = v7;
    __int16 v9 = 1024;
    int v10 = v6;
    __int16 v11 = 1024;
    int v12 = v5;
    __int16 v13 = 1024;
    int v14 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "NumberOfClassicDevicesConnected = %d, NumberOfClassicHIDDevicesConnected = %u, NumberOfLEDevicesConnected = %u, NumberOfLEHIDDevicesConnected = %u", (uint8_t *)v8, 0x1Au);
  }
  return result;
}

void sub_100384BD0(unsigned __int8 *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 64);
  uint64_t v142 = 0;
  uint64_t v143 = 0;
  if (v4) {
    sub_10047B7A8(v4, (_DWORD *)&v143 + 1, &v143, &v142, (_DWORD *)&v142 + 1);
  }
  unsigned int v5 = *(_DWORD *)(a2 + 180);
  memset(&v141, 0, sizeof(v141));
  sub_10004191C(&v141, "");
  int v7 = *(_DWORD *)(a2 + 172);
  BOOL v8 = 1;
  if ((v7 - 128) >= 2) {
    BOOL v8 = v7 == 255;
  }
  if (v7 == 256 || v7 == 127)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 164);
    double v6 = (double)*(unint64_t *)&v6 / 0.0075;
    unsigned int v124 = v6;
    CFStringRef v106 = @"Mono";
    CFStringRef v9 = @"Cellular Voice Call";
LABEL_10:
    CFStringRef v122 = v9;
    goto LABEL_11;
  }
  if (v8)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 164);
    double v6 = (double)*(unint64_t *)&v6 / 0.015;
    unsigned int v124 = v6;
    CFStringRef v106 = @"Stereo";
    CFStringRef v9 = @"FaceTime";
    goto LABEL_10;
  }
  unsigned int v124 = 0;
  CFStringRef v122 = @"Unknown";
  CFStringRef v106 = @"Unknown";
LABEL_11:
  if (v5)
  {
    LODWORD(v6) = *(_DWORD *)(a2 + 176);
    double v10 = (double)*(unint64_t *)&v6;
    if (*(unsigned char *)(a2 + 237))
    {
      double v6 = v10 / (double)*(unint64_t *)(a2 + 296) * 100.0;
      unsigned int v130 = v6;
    }
    else
    {
      unsigned int v130 = (v10 / (double)v5 * 100.0);
      __int16 v11 = (id)qword_100A19E50;
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = *(_DWORD *)(a2 + 176);
        *(_DWORD *)long long buf = 67109888;
        *(_DWORD *)&uint8_t buf[4] = v12;
        __int16 v147 = 1024;
        unsigned int v148 = v5;
        __int16 v149 = 2048;
        *(double *)v150 = (double)v12 / (double)v5;
        *(_WORD *)&v150[8] = 1024;
        *(_DWORD *)unsigned int v151 = v130;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Calculated PLCUsage: %u / %u  i.e %lf * 100 = %u", buf, 0x1Eu);
      }
    }
    unsigned int v13 = *(_DWORD *)(a2 + 180);
    BOOL v14 = v124 >= v13;
    unsigned int v15 = v124 - v13;
    if (v15 != 0 && v14)
    {
      unsigned int v94 = v15;
      double v6 = (double)v15 / (double)v5 * 100.0;
      unsigned int v126 = v6;
      goto LABEL_22;
    }
  }
  else
  {
    unsigned int v130 = 0;
  }
  unsigned int v126 = 0;
  unsigned int v94 = 0;
LABEL_22:
  unsigned int v16 = *(_DWORD *)(a2 + 164);
  if (v16 - 1 < 0x3B)
  {
    unsigned int v17 = 1;
    goto LABEL_26;
  }
  if (v16)
  {
    double v6 = (double)v16 / 60.0;
    unsigned int v17 = vcvtad_u64_f64(v6);
LABEL_26:
    unsigned int v128 = v17;
    if (!v4) {
      goto LABEL_38;
    }
    goto LABEL_27;
  }
  unsigned int v128 = 0;
  if (!v4) {
    goto LABEL_38;
  }
LABEL_27:
  sub_100475F84(v4, (uint64_t)__p);
  sub_100383D54((uint64_t)__p, buf);
  std::string::operator=(&v141, (const std::string *)buf);
  if ((v150[7] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v140 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0)
  {
    if (v141.__r_.__value_.__l.__size_)
    {
      unint64_t v18 = (std::string *)v141.__r_.__value_.__r.__words[0];
      goto LABEL_36;
    }
  }
  else if (*((unsigned char *)&v141.__r_.__value_.__s + 23))
  {
    unint64_t v18 = &v141;
LABEL_36:
    +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", v18, +[NSString defaultCStringEncoding]);
    long long v136 = (__CFString *)objc_claimAutoreleasedReturnValue();
    goto LABEL_39;
  }
LABEL_38:
  long long v136 = @"Unknown";
LABEL_39:
  unsigned int v20 = *(_DWORD *)(a2 + 104);
  unsigned int v19 = *(_DWORD *)(a2 + 108);
  if (v20)
  {
    if (v19)
    {
      if (*(unsigned char *)(a2 + 237))
      {
        double v21 = (double)*(unint64_t *)(a2 + 248);
        double v22 = (double)*(unint64_t *)(a2 + 280);
      }
      else
      {
        double v21 = (double)(*(_DWORD *)(a2 + 132) + *(_DWORD *)(a2 + 128));
        double v22 = (double)(v19 + v20);
      }
      double v6 = v21 / v22 * 100.0;
      unsigned int v118 = v6;
    }
    else
    {
      unsigned int v118 = 0;
    }
    LODWORD(v6) = *(_DWORD *)(a2 + 128);
    *(double *)&unint64_t v24 = (double)*(unint64_t *)&v6 / (double)v20 * 100.0;
    unsigned int v120 = *(double *)&v24;
    LODWORD(v24) = *(_DWORD *)(a2 + 96);
    *(double *)&unint64_t v25 = (double)v24 / (double)v20 * 100.0;
    uint64_t v23 = *(double *)&v25;
    LODWORD(v25) = *(_DWORD *)(a2 + 112);
    *(double *)&unint64_t v26 = (double)v25 / (double)v20 * 100.0;
    unsigned int v100 = *(double *)&v26;
    LODWORD(v26) = *(_DWORD *)(a2 + 120);
    double v6 = (double)v26 / (double)v20 * 100.0;
    unsigned int v104 = v6;
    if (v19) {
      goto LABEL_50;
    }
LABEL_44:
    unsigned int v98 = 0;
    unsigned int v102 = 0;
    goto LABEL_51;
  }
  unsigned int v118 = 0;
  unsigned int v120 = 0;
  uint64_t v23 = 0;
  unsigned int v100 = 0;
  unsigned int v104 = 0;
  if (!v19) {
    goto LABEL_44;
  }
LABEL_50:
  LODWORD(v6) = *(_DWORD *)(a2 + 116);
  *(double *)&unint64_t v27 = (double)*(unint64_t *)&v6 / (double)v19 * 100.0;
  unsigned int v98 = *(double *)&v27;
  LODWORD(v27) = *(_DWORD *)(a2 + 124);
  unsigned int v102 = ((double)v27 / (double)v19 * 100.0);
LABEL_51:
  unsigned int v28 = *(_DWORD *)(a2 + 24);
  if (v28)
  {
    unsigned int v116 = *(_DWORD *)a2 / (int)v28;
    unsigned int v114 = *(_DWORD *)(a2 + 16) / (int)v28;
    unsigned int v112 = *(_DWORD *)(a2 + 28) / v28;
  }
  else
  {
    unsigned int v116 = 0;
    unsigned int v114 = 0;
    unsigned int v112 = 0;
  }
  uint64_t v29 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v29 + 136))(v29))
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    unsigned int v110 = 0;
    unsigned int v108 = 0;
    uint32x2_t v35 = 0;
    goto LABEL_67;
  }
  unsigned int v31 = *(_DWORD *)(a2 + 36);
  if (!v31)
  {
    unsigned int v110 = 0;
    unsigned int v32 = *(_DWORD *)(a2 + 40);
    if (v32) {
      goto LABEL_57;
    }
LABEL_60:
    unsigned int v108 = 0;
    goto LABEL_61;
  }
  unsigned int v32 = *(_DWORD *)(a2 + 40);
  unsigned int v110 = vcvtas_u32_f32((float)((float)v31 * 100.0) / (float)(v32 + v31 + *(_DWORD *)(a2 + 60)));
  if (!v32) {
    goto LABEL_60;
  }
LABEL_57:
  unsigned int v108 = vcvtas_u32_f32((float)((float)v32 * 100.0) / (float)(v32 + v31 + *(_DWORD *)(a2 + 60)));
LABEL_61:
  unsigned int v36 = *(_DWORD *)(a2 + 44);
  unsigned int v37 = *(_DWORD *)(a2 + 48);
  *(float *)v30.i32 = (float)v37;
  unsigned int v38 = vcvtps_u32_f32((float)v37 / (float)v36);
  if (v36) {
    uint64_t v33 = v38;
  }
  else {
    uint64_t v33 = 0;
  }
  uint64_t v34 = v32 + v31;
  if (v37)
  {
    LODWORD(v34) = vcvtps_u32_f32((float)v34 / *(float *)v30.i32);
    uint32x2_t v35 = vcvt_u32_f32(vrndp_f32(vdiv_f32(vcvt_f32_u32(*(uint32x2_t *)(a2 + 52)), (float32x2_t)vdup_lane_s32(v30, 0))));
  }
  else
  {
    uint32x2_t v35 = *(uint32x2_t *)(a2 + 52);
  }
LABEL_67:
  uint32x2_t v134 = v35;
  uint64_t v39 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v39 + 160))(v39) && (unsigned int v40 = *(_DWORD *)(a2 + 60)) != 0)
  {
    LODWORD(v2) = vcvtas_u32_f32((float)((float)v40 * 100.0) / (float)(*(_DWORD *)(a2 + 36) + v40 + *(_DWORD *)(a2 + 40)));
    if (!v4) {
      goto LABEL_79;
    }
  }
  else
  {
    uint64_t v2 = 0;
    if (!v4)
    {
LABEL_79:
      uint64_t v43 = 0;
      std::string v138 = @"Unknown";
      goto LABEL_80;
    }
  }
  if (!sub_100478B2C(v4, 12)) {
    goto LABEL_79;
  }
  sub_100480344(v4, 0xAu, buf);
  if (v150[7] >= 0) {
    char v41 = buf;
  }
  else {
    char v41 = *(uint8_t **)buf;
  }
  uint64_t v42 = +[NSString stringWithUTF8String:v41];
  if ((v150[7] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  std::string v138 = (__CFString *)v42;
  uint64_t v43 = 1;
LABEL_80:
  long long v133 = +[NSString stringWithFormat:@"%dms", *(void *)(a2 + 224)];
  unsigned int v45 = *(_DWORD *)(a2 + 240);
  unsigned int v44 = *(_DWORD *)(a2 + 244);
  if (*(void *)(a2 + 240))
  {
    double v46 = (double)(v44 + v45);
    LODWORD(v97) = ((double)v44 / v46 * 100.0);
    HIDWORD(v97) = ((double)v45 / v46 * 100.0);
  }
  else
  {
    uint64_t v97 = 0;
  }
  unint64_t v47 = *(void *)(a2 + 280);
  if (v47) {
    int32x2_t v48 = vmovn_s64((int64x2_t)vcvtq_u64_f64(vmulq_f64(vdivq_f64(vcvtq_f64_u64(*(uint64x2_t *)(a2 + 264)), (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v47), 0)), (float64x2_t)vdupq_n_s64(0x4059000000000000uLL))));
  }
  else {
    int32x2_t v48 = 0;
  }
  int32x2_t v132 = v48;
  unint64_t v49 = *(void *)(a2 + 296);
  if (v49) {
    unsigned int v96 = ((double)*(unint64_t *)(a2 + 288) / (double)v49 * 100.0);
  }
  else {
    unsigned int v96 = 0;
  }
  uint64_t v50 = *(unsigned int *)(a2 + 232);
  sub_100384B04(a1);
  unsigned int v51 = (id)qword_100A19E50;
  if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
  {
    int v52 = *(_DWORD *)(a2 + 172);
    uint64_t v53 = *(int *)(a2 + 200);
    if (v53) {
      uint64_t v53 = *(void *)(a2 + 192) / v53;
    }
    int v55 = *(_DWORD *)(a2 + 216);
    int v54 = *(_DWORD *)(a2 + 220);
    int v56 = *(_DWORD *)(a2 + 240);
    int v57 = *(_DWORD *)(a2 + 244);
    *(_DWORD *)long long buf = 67112192;
    *(_DWORD *)&uint8_t buf[4] = v52;
    __int16 v147 = 1024;
    unsigned int v148 = v128;
    __int16 v149 = 1024;
    *(_DWORD *)v150 = v130;
    *(_WORD *)&v150[4] = 1024;
    *(_DWORD *)&v150[6] = v126;
    *(_WORD *)unsigned int v151 = 1024;
    *(_DWORD *)&v151[2] = 0;
    __int16 v152 = 1024;
    unsigned int v153 = v5;
    __int16 v154 = 1024;
    unsigned int v155 = v124;
    __int16 v156 = 1024;
    unsigned int v157 = v94;
    __int16 v158 = 1024;
    int v159 = v53;
    __int16 v160 = 1024;
    int v161 = v54;
    __int16 v162 = 1024;
    int v163 = v55;
    __int16 v164 = 1024;
    int v165 = v56;
    __int16 v166 = 1024;
    int v167 = v57;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Sending HFPLinkQuality stats: Codec = %u, DurationInMinutes = %u, PlcUsage = %u, MissingSCORate = %u, SilenceCycleRate = %u,[TotalFrameCFIndex Count = %u, ExpectedSCOCFIndex Count = %u, MissingSCOCFIndex Count = %u] RssiAverage = %d, ReTransmission_RX = %u, ReTransmission_TX = %u 2GDurationSecs = %u 5GDurationSecs = %u", buf, 0x50u);
  }

  v144[0] = @"AvgMaxGoodPcktsPerSwitch";
  long long v95 = +[NSNumber numberWithUnsignedInt:v134.u32[0]];
  v145[0] = v95;
  v144[1] = @"AvgMinGoodPcktsPerSwitch";
  uint64_t v93 = +[NSNumber numberWithUnsignedInt:v134.u32[1]];
  v145[1] = v93;
  v144[2] = @"AvgPacketsPerSwitch";
  unsigned int v92 = +[NSNumber numberWithUnsignedInt:v34];
  v145[2] = v92;
  v144[3] = @"AvgSwitchesPerSecond";
  long long v135 = +[NSNumber numberWithUnsignedInt:v33];
  v145[3] = v135;
  v144[4] = @"BtRole";
  unsigned int v91 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 161)];
  v145[4] = v91;
  v144[5] = @"CallCreationTime";
  CFStringRef v90 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 224)];
  v145[5] = v90;
  v145[6] = v122;
  v144[6] = @"CallType";
  v144[7] = @"Codec";
  std::string v89 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 172)];
  v145[7] = v89;
  v144[8] = @"CpuNorm";
  unsigned int v88 = +[NSNumber numberWithUnsignedInt:v23];
  v145[8] = v88;
  v144[9] = @"Desense";
  long long v125 = +[NSNumber numberWithBool:0];
  v145[9] = v125;
  v144[10] = @"DurationInMinutes";
  uint64_t v87 = +[NSNumber numberWithUnsignedInt:v128];
  v145[10] = v87;
  v144[11] = @"EpaCallTimeRatio";
  unsigned int v86 = +[NSNumber numberWithUnsignedInt:v120];
  v145[11] = v86;
  v144[12] = @"EpaPacketRatio";
  unsigned int v85 = +[NSNumber numberWithUnsignedInt:v118];
  v145[12] = v85;
  v145[13] = v133;
  v144[13] = @"eSCOCreationTime";
  v144[14] = @"eSCOSetupFailure";
  unsigned int v84 = +[NSNumber numberWithInt:v50];
  v145[14] = v84;
  v145[15] = v138;
  v144[15] = @"FWVersion";
  v144[16] = @"HDRSession";
  uint64_t v129 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a2 + 236)];
  v145[16] = v129;
  v144[17] = @"IsAppleAudioDevice";
  uint32x2_t v83 = +[NSNumber numberWithBool:v43];
  v145[17] = v83;
  v144[18] = @"MissingSCORate";
  uint64_t v82 = +[NSNumber numberWithUnsignedInt:v126];
  v145[18] = v82;
  v144[19] = @"NoiseFloor50Max";
  uint64_t v81 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 4)];
  v145[19] = v81;
  v144[20] = @"NoiseFloor50Percentile";
  v117 = +[NSNumber numberWithInt:v116];
  v145[20] = v117;
  v144[21] = @"NoiseFloor90Max";
  std::string v127 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 20)];
  v145[21] = v127;
  v144[22] = @"NoiseFloor90Percentile";
  long long v115 = +[NSNumber numberWithInt:v114];
  v145[22] = v115;
  v144[23] = @"NoiseFloorAverageGoodChannels";
  id v113 = +[NSNumber numberWithInt:v112];
  v145[23] = v113;
  v144[24] = @"PercentPacketsAnt0";
  v111 = +[NSNumber numberWithUnsignedInt:v110];
  v145[24] = v111;
  v144[25] = @"PercentPacketsAnt1";
  v109 = +[NSNumber numberWithUnsignedInt:v108];
  v145[25] = v109;
  v144[26] = @"PercentPacketsTxBF";
  long long v123 = +[NSNumber numberWithUnsignedInt:v2];
  v145[26] = v123;
  v144[27] = @"PlcUsage";
  unsigned int v80 = +[NSNumber numberWithUnsignedInt:v130];
  v145[27] = v80;
  v144[28] = @"ProductID";
  unsigned int v79 = +[NSNumber numberWithUnsignedInt:v142];
  v145[28] = v79;
  v144[29] = @"RssiAverage";
  uint64_t v58 = *(int *)(a2 + 200);
  if (v58) {
    uint64_t v59 = *(void *)(a2 + 192) / v58;
  }
  else {
    uint64_t v59 = 0;
  }
  int32x2_t v78 = +[NSNumber numberWithInt:v59];
  v145[29] = v78;
  v144[30] = @"RssiMax";
  uint64_t v77 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 208)];
  v145[30] = v77;
  v144[31] = @"RssiMin";
  v131 = +[NSNumber numberWithInt:*(unsigned int *)(a2 + 204)];
  v145[31] = v131;
  v144[32] = @"ReTransmission_RX";
  unsigned int v76 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 220)];
  v145[32] = v76;
  v144[33] = @"ReTransmission_TX";
  unsigned int v75 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 216)];
  v145[33] = v75;
  v144[34] = @"RxNormFirstRXWindow";
  v105 = +[NSNumber numberWithUnsignedInt:v104];
  v145[34] = v105;
  v144[35] = @"RxNormSecondRXWindow";
  long long v103 = +[NSNumber numberWithUnsignedInt:v102];
  v145[35] = v103;
  v145[36] = v136;
  v144[36] = @"SanitizedDeviceName";
  v144[37] = @"SessionType";
  v145[37] = v106;
  v144[38] = @"SilenceCycleRate";
  long long v121 = +[NSNumber numberWithUnsignedInt:0];
  v145[38] = v121;
  v144[39] = @"TxNormFirstTXWindow";
  v107 = +[NSNumber numberWithUnsignedInt:v100];
  v145[39] = v107;
  v144[40] = @"TxNormSecondTXWindow";
  long long v101 = +[NSNumber numberWithUnsignedInt:v98];
  v145[40] = v101;
  v144[41] = @"VendorID";
  uint64_t v99 = +[NSNumber numberWithUnsignedInt:v143];
  v145[41] = v99;
  v144[42] = @"VersionIDSource";
  unsigned int v74 = +[NSNumber numberWithUnsignedInt:HIDWORD(v143)];
  v145[42] = v74;
  v144[43] = @"Version";
  long long v119 = +[NSNumber numberWithUnsignedInt:HIDWORD(v142)];
  v145[43] = v119;
  v144[44] = @"Interval_Bin_00_7point5ms";
  unsigned int v73 = +[NSNumber numberWithUnsignedChar:a1[532]];
  v145[44] = v73;
  v144[45] = @"Interval_Bin_01_11point25ms";
  unsigned int v72 = +[NSNumber numberWithUnsignedChar:a1[533]];
  v145[45] = v72;
  v144[46] = @"Interval_Bin_02_15ms";
  uint64_t v71 = +[NSNumber numberWithUnsignedChar:a1[534]];
  v145[46] = v71;
  v144[47] = @"Interval_Bin_Other";
  unsigned int v60 = +[NSNumber numberWithInt:a1[530] + a1[531] - (a1[532] + a1[533] + a1[534])];
  v145[47] = v60;
  v144[48] = @"BTBand";
  if (*(char *)(a2 + 159) >= 0) {
    uint64_t v61 = a2 + 136;
  }
  else {
    uint64_t v61 = *(void *)(a2 + 136);
  }
  uint64_t v62 = +[NSString stringWithUTF8String:v61];
  v145[48] = v62;
  v144[49] = @"TipiConnected";
  unsigned int v63 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a2 + 160)];
  v145[49] = v63;
  v144[50] = @"IsAoSCall";
  unsigned int v64 = +[NSNumber numberWithBool:*(unsigned __int8 *)(a2 + 237)];
  v145[50] = v64;
  v144[51] = @"2GDurationPercentage";
  unsigned int v65 = +[NSNumber numberWithUnsignedInt:HIDWORD(v97)];
  v145[51] = v65;
  v144[52] = @"5GDurationPercentage";
  unsigned int v66 = +[NSNumber numberWithUnsignedInt:v97];
  v145[52] = v66;
  v144[53] = @"TxFlushPercentage";
  BOOL v67 = +[NSNumber numberWithUnsignedInt:v132.u32[0]];
  v145[53] = v67;
  v144[54] = @"TxConsecFlushPercentage";
  uint64_t v68 = +[NSNumber numberWithUnsignedInt:v132.u32[1]];
  v145[54] = v68;
  v144[55] = @"RxCRCErrorPercentage";
  uint64_t v69 = +[NSNumber numberWithUnsignedInt:v96];
  v145[55] = v69;
  unsigned int v70 = +[NSDictionary dictionaryWithObjects:v145 forKeys:v144 count:56];

  sub_10038094C((uint64_t)a1, 0x57u, v70);
  if (SHIBYTE(v141.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v141.__r_.__value_.__l.__data_);
  }
}

void sub_100385E54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,void *a63)
{
  if (*(char *)(v71 - 185) < 0) {
    operator delete(*(void **)(v71 - 208));
  }

  if (a71 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_10038624C(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_10075B824((int *)a2, v4);
  }
  v9[0] = @"HeadTrackingTransition";
  if (*((char *)a2 + 31) >= 0) {
    unsigned int v5 = a2 + 2;
  }
  else {
    unsigned int v5 = (unsigned int *)*((void *)a2 + 1);
  }
  double v6 = +[NSString stringWithUTF8String:v5];
  v9[1] = @"WxProductID";
  v10[0] = v6;
  int v7 = +[NSNumber numberWithUnsignedInt:*a2];
  v10[1] = v7;
  BOOL v8 = +[NSDictionary dictionaryWithObjects:v10 forKeys:v9 count:2];

  sub_10038094C(a1, 0x55u, v8);
}

void sub_10038636C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_10038639C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      unsigned int v5 = a2;
    }
    else {
      unsigned int v5 = (uint64_t *)*a2;
    }
    if (*((char *)a2 + 47) >= 0) {
      double v6 = a2 + 3;
    }
    else {
      double v6 = (uint64_t *)a2[3];
    }
    int v7 = *((_DWORD *)a2 + 12);
    if (*((char *)a2 + 79) >= 0) {
      BOOL v8 = a2 + 7;
    }
    else {
      BOOL v8 = (uint64_t *)a2[7];
    }
    *(_DWORD *)long long buf = 136315906;
    uint64_t v23 = v5;
    __int16 v24 = 2080;
    unint64_t v25 = v6;
    __int16 v26 = 1024;
    int v27 = v7;
    __int16 v28 = 2080;
    uint64_t v29 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Spatial Setting submitting following CA metric: AudioCategory:%s SpatialTransition:%s WxProductID:%u BundleID:%s", buf, 0x26u);
  }
  v20[0] = @"AudioCategory";
  if (*((char *)a2 + 23) >= 0) {
    CFStringRef v9 = a2;
  }
  else {
    CFStringRef v9 = (uint64_t *)*a2;
  }
  double v10 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v9, v20[0]);
  v21[0] = v10;
  v20[1] = @"SpatialTransition";
  if (*((char *)a2 + 47) >= 0) {
    uint64_t v11 = (uint64_t)(a2 + 3);
  }
  else {
    uint64_t v11 = a2[3];
  }
  unsigned int v12 = +[NSString stringWithUTF8String:v11];
  v21[1] = v12;
  v20[2] = @"WxProductID";
  unsigned int v13 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 12)];
  void v21[2] = v13;
  void v20[3] = @"BundleID";
  uint64_t v16 = a2[7];
  unsigned int v15 = a2 + 7;
  uint64_t v14 = v16;
  if (*((char *)v15 + 23) >= 0) {
    uint64_t v17 = (uint64_t)v15;
  }
  else {
    uint64_t v17 = v14;
  }
  unint64_t v18 = +[NSString stringWithUTF8String:v17];
  void v21[3] = v18;
  unsigned int v19 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:4];

  sub_10038094C(a1, 0x74u, v19);
}

void sub_1003865B4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003865FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    if (*((char *)a2 + 47) >= 0) {
      unsigned int v5 = a2 + 3;
    }
    else {
      unsigned int v5 = (uint64_t *)a2[3];
    }
    if (*((char *)a2 + 71) >= 0) {
      double v6 = a2 + 6;
    }
    else {
      double v6 = (uint64_t *)a2[6];
    }
    int v7 = *((_DWORD *)a2 + 18);
    int v8 = *((_DWORD *)a2 + 19);
    int v9 = *((_DWORD *)a2 + 20);
    if (*((char *)a2 + 111) >= 0) {
      double v10 = a2 + 11;
    }
    else {
      double v10 = (uint64_t *)a2[11];
    }
    int v11 = *((_DWORD *)a2 + 28);
    int v12 = *((_DWORD *)a2 + 29);
    int v13 = *((_DWORD *)a2 + 30);
    if (*((char *)a2 + 151) >= 0) {
      uint64_t v14 = a2 + 16;
    }
    else {
      uint64_t v14 = (uint64_t *)a2[16];
    }
    int v15 = *((_DWORD *)a2 + 38);
    *(_DWORD *)long long buf = 136317954;
    uint64_t v39 = v4;
    __int16 v40 = 2080;
    char v41 = v5;
    __int16 v42 = 2080;
    uint64_t v43 = v6;
    __int16 v44 = 1024;
    int v45 = v7;
    __int16 v46 = 1024;
    int v47 = v8;
    __int16 v48 = 1024;
    int v49 = v9;
    __int16 v50 = 2080;
    unsigned int v51 = v10;
    __int16 v52 = 1024;
    int v53 = v11;
    __int16 v54 = 1024;
    int v55 = v12;
    __int16 v56 = 1024;
    int v57 = v13;
    __int16 v58 = 2080;
    uint64_t v59 = v14;
    __int16 v60 = 1024;
    int v61 = v15;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "HeadtrackedSpatial Setting submitting following CA metric: fAccessHTTransition: %s fAudioCategory: %s fBundleID: %s fCurrAccessHTSetting: %d fCurrHeadTrackingSetting: %d fCurrSpatialSetting: %d fHeadTrackingTransition: %s fPrevAccessHTSetting: %d fPrevHeadTrackingSetting: %d fPrevSpatialSetting: %d fSpatialTransition: %s fWxProductID: %u", buf, 0x5Eu);
  }
  v36[0] = @"AccessHTTransition";
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v16 = a2;
  }
  else {
    uint64_t v16 = (uint64_t *)*a2;
  }
  uint32x2_t v35 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v16, a1);
  v37[0] = v35;
  v36[1] = @"AudioCategory";
  if (*((char *)a2 + 47) >= 0) {
    uint64_t v17 = (uint64_t)(a2 + 3);
  }
  else {
    uint64_t v17 = a2[3];
  }
  uint64_t v34 = +[NSString stringWithUTF8String:v17];
  v37[1] = v34;
  _OWORD v36[2] = @"BundleID";
  if (*((char *)a2 + 71) >= 0) {
    uint64_t v18 = (uint64_t)(a2 + 6);
  }
  else {
    uint64_t v18 = a2[6];
  }
  uint64_t v33 = +[NSString stringWithUTF8String:v18];
  v37[2] = v33;
  void v36[3] = @"CurrAccessHTSetting";
  unsigned int v19 = +[NSNumber numberWithInt:*((unsigned int *)a2 + 18)];
  void v37[3] = v19;
  v36[4] = @"CurrHeadTrackingSetting";
  unsigned int v20 = +[NSNumber numberWithInt:*((unsigned int *)a2 + 19)];
  v37[4] = v20;
  v36[5] = @"CurrSpatialSetting";
  double v21 = +[NSNumber numberWithInt:*((unsigned int *)a2 + 20)];
  v37[5] = v21;
  v36[6] = @"HeadTrackingTransition";
  if (*((char *)a2 + 111) >= 0) {
    uint64_t v22 = (uint64_t)(a2 + 11);
  }
  else {
    uint64_t v22 = a2[11];
  }
  uint64_t v23 = +[NSString stringWithUTF8String:v22];
  v37[6] = v23;
  v36[7] = @"PrevAccessHTSetting";
  __int16 v24 = +[NSNumber numberWithInt:*((unsigned int *)a2 + 28)];
  v37[7] = v24;
  char v36[8] = @"PrevHeadTrackingSetting";
  unint64_t v25 = +[NSNumber numberWithInt:*((unsigned int *)a2 + 29)];
  v37[8] = v25;
  v36[9] = @"PrevSpatialSetting";
  __int16 v26 = +[NSNumber numberWithInt:*((unsigned int *)a2 + 30)];
  v37[9] = v26;
  v36[10] = @"SpatialTransition";
  if (*((char *)a2 + 151) >= 0) {
    uint64_t v27 = (uint64_t)(a2 + 16);
  }
  else {
    uint64_t v27 = a2[16];
  }
  __int16 v28 = +[NSString stringWithUTF8String:v27];
  v37[10] = v28;
  v36[11] = @"WxProductID";
  uint64_t v29 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 38)];
  v37[11] = v29;
  int32x2_t v30 = +[NSDictionary dictionaryWithObjects:v37 forKeys:v36 count:12];

  sub_10038094C(v32, 0x54u, v30);
}

void sub_100386A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, uint64_t a11, uint64_t a12)
{
  _Unwind_Resume(a1);
}

void sub_100386AC8(uint64_t a1, uint64_t a2)
{
  if ((*(_DWORD *)(a2 + 32) - 1) < 0x3B) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = *(_DWORD *)(a2 + 32) / 0x3Cu;
  }
  unsigned int v4 = *(_DWORD *)(a2 + 48);
  unsigned int v5 = *(_DWORD *)(a2 + 52);
  unsigned int v6 = v4 - 1;
  unsigned int v7 = v4 / 0x3C;
  if (v6 < 0x3B) {
    uint64_t v8 = 1;
  }
  else {
    uint64_t v8 = v7;
  }
  unsigned int v9 = v5 - 1;
  unsigned int v10 = v5 / 0x3C;
  if (v9 < 0x3B) {
    uint64_t v11 = 1;
  }
  else {
    uint64_t v11 = v10;
  }
  int v12 = *(_DWORD *)(a2 + 68) - 1;
  if (v12 > 2) {
    CFStringRef v13 = @"GUEST_UNKNOWN";
  }
  else {
    CFStringRef v13 = (const __CFString *)*((void *)&off_1009AA828 + v12);
  }
  int v14 = *(_DWORD *)(a2 + 72) - 1;
  if (v14 > 2) {
    CFStringRef v15 = @"GUEST_NOT_APPLICABLE";
  }
  else {
    CFStringRef v15 = (const __CFString *)*((void *)&off_1009AA840 + v14);
  }
  uint64_t v16 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = *(_DWORD *)(a2 + 36);
    int v18 = *(_DWORD *)(a2 + 40);
    int v19 = *(_DWORD *)(a2 + 44);
    *(_DWORD *)long long buf = 67110914;
    int v38 = v3;
    __int16 v39 = 1024;
    int v40 = v17;
    __int16 v41 = 1024;
    int v42 = v18;
    __int16 v43 = 1024;
    int v44 = v19;
    __int16 v45 = 1024;
    int v46 = v8;
    __int16 v47 = 1024;
    int v48 = v11;
    __int16 v49 = 2112;
    CFStringRef v50 = v13;
    __int16 v51 = 2112;
    CFStringRef v52 = v15;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Wireless Splitter submitting following CA metric: totalDurationSharingSessionMinuite:%um totalSiriActivationDuringSession:%u Sessions fTotalIncomingCallsDuringSessio:%u Calls fTotalOutgoingCallsDuringSession:%u Calls totalMusicPlaybackDurationMinuite:%um totalVideoPlaybackDurationMinuite:%um sharingSessionStart:%@, sharingSessionStop:%@", buf, 0x3Au);
  }
  v35[0] = @"totalDurationSessionMinuite";
  unsigned int v20 = +[NSNumber numberWithUnsignedInt:v3];
  v36[0] = v20;
  v35[1] = @"totalSiriActivaton";
  double v21 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 36)];
  v36[1] = v21;
  v35[2] = @"totalIncomingCalls";
  uint64_t v22 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 40)];
  _OWORD v36[2] = v22;
  void v35[3] = @"totalOutgoingCalls";
  uint64_t v23 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 44)];
  void v36[3] = v23;
  v35[4] = @"musicPlaybackDurationMinuite";
  __int16 v24 = +[NSNumber numberWithUnsignedInt:v8];
  v36[4] = v24;
  v35[5] = @"videoPlaybackDurationMinuite";
  unint64_t v25 = +[NSNumber numberWithUnsignedInt:v11];
  v36[5] = v25;
  v36[6] = &off_1009E0E18;
  v35[6] = @"failureToAggregateAudio";
  v35[7] = @"failureToConnectToGuest";
  v36[7] = &off_1009E0E18;
  char v36[8] = &off_1009E0E18;
  v35[8] = @"authFailureToGuest";
  v35[9] = @"sharingSessionStart";
  v36[9] = v13;
  v36[10] = v15;
  v35[10] = @"sharingSessionStop";
  v35[11] = @"ownerGuestWxProductID";
  if (*(char *)(a2 + 151) >= 0) {
    uint64_t v26 = a2 + 128;
  }
  else {
    uint64_t v26 = *(void *)(a2 + 128);
  }
  uint64_t v27 = +[NSString stringWithUTF8String:v26];
  v36[11] = v27;
  v35[12] = @"errorCode";
  uint64_t v30 = *(void *)(a2 + 152);
  uint64_t v29 = a2 + 152;
  uint64_t v28 = v30;
  if (*(char *)(v29 + 23) >= 0) {
    uint64_t v31 = v29;
  }
  else {
    uint64_t v31 = v28;
  }
  uint64_t v32 = +[NSString stringWithUTF8String:v31];
  void v36[12] = v32;
  uint64_t v33 = +[NSDictionary dictionaryWithObjects:v36 forKeys:v35 count:13];

  sub_10038094C(a1, 0x76u, v33);
}

void sub_100386E50(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100386EC8(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  v14[0] = @"MFGModel";
  unsigned int v9 = +[NSString stringWithUTF8String:a2];
  v15[0] = v9;
  v14[1] = @"Result";
  unsigned int v10 = +[NSNumber numberWithUnsignedLongLong:a3];
  v15[1] = v10;
  v14[2] = @"Script";
  uint64_t v11 = +[NSString stringWithUTF8String:a4];
  void v15[2] = v11;
  void v14[3] = @"DurationInMs";
  int v12 = +[NSNumber numberWithUnsignedLongLong:a5];
  void v15[3] = v12;
  CFStringRef v13 = +[NSDictionary dictionaryWithObjects:v15 forKeys:v14 count:4];

  sub_10038094C(a1, 0x5Au, v13);
}

void sub_10038701C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100387064(uint64_t a1, unsigned int a2, unsigned int a3, uint64_t *a4)
{
  uint64_t v8 = sub_1003872D4(a1, a2);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  if (*((char *)a4 + 23) >= 0) {
    unsigned int v9 = a4;
  }
  else {
    unsigned int v9 = (uint64_t *)*a4;
  }
  unsigned int v10 = +[NSString stringWithUTF8String:v9];
  if (![(__CFString *)v10 length])
  {

    unsigned int v10 = @"Unknown";
  }
  uint64_t v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412546;
    double v21 = v8;
    __int16 v22 = 1024;
    unsigned int v23 = a3;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Sending FWError to CoreAnalytics Type : %@ , ErrorCode: %d", buf, 0x12u);
  }
  int v12 = +[NSString stringWithCString:encoding:](NSString, "stringWithCString:encoding:", __p, +[NSString defaultCStringEncoding]);
  v19[0] = v8;
  v18[0] = @"FWErrorType";
  v18[1] = @"ErrorCode";
  CFStringRef v13 = +[NSNumber numberWithUnsignedLongLong:a3];
  v19[1] = v13;
  void v19[2] = v10;
  void v18[2] = @"ErrorReason";
  void v18[3] = @"FirmwareVersion";
  void v19[3] = v12;
  int v14 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:4];

  sub_10038094C(a1, 0x50u, v14);
  if (a2 <= 0xD && ((1 << a2) & 0x2D9B) != 0) {
    sub_1003872F8(v15, v14);
  }

  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10038726C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

CFStringRef sub_1003872D4(uint64_t a1, unsigned int a2)
{
  if (a2 > 0xD) {
    return @"Unknown";
  }
  else {
    return (const __CFString *)*((void *)&off_1009AA858 + (int)a2);
  }
}

void sub_1003872F8(uint64_t a1, void *a2)
{
  id v2 = a2;
  uint64_t v3 = sub_100017768();
  int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 648))(v3);
  unsigned int v5 = qword_100A19E50;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Notifying BT Firmware Crashed", buf, 2u);
    }
    unsigned int v7 = +[NSMutableDictionary dictionaryWithDictionary:v2];
    [v7 setObject:@"FWCrashed" forKeyedSubscript:@"_input"];
    v9[0] = _NSConcreteStackBlock;
    v9[1] = 3221225472;
    void v9[2] = sub_1003AEC24;
    v9[3] = &unk_1009AA568;
    id v10 = objc_alloc_init((Class)BTServicesClient);
    id v8 = v10;
    [v8 diagnosticControl:v7 completion:v9];
  }
  else if (v6)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Not Notifying BT Firmware Crashed", buf, 2u);
  }
}

void sub_100387480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  uint64_t v17 = v16;

  _Unwind_Resume(a1);
}

uint64_t sub_1003874C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  if ((sub_100478B2C(a2, 12) & 1) != 0 || (uint64_t result = sub_100478AF4(a2), result))
  {
    sub_10047B7A8(a2, (_DWORD *)&v5 + 1, &v5, &v4, (_DWORD *)&v4 + 1);
    return v4;
  }
  return result;
}

void sub_100387524()
{
  if (qword_1009FB180 != -1) {
    dispatch_once(&qword_1009FB180, &stru_1009AA788);
  }
  uint64_t v0 = qword_1009FB178;

  sub_1002C08B0(v0);
}

void sub_100387578(uint64_t a1)
{
  uint64_t v2 = sub_1004AF8EC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003875F4;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003875F4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v19 = 0;
  unsigned int v20 = 0;
  uint64_t v21 = 0;
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009AA688);
  }
  sub_10060C508((uint64_t)off_1009F8760, (uint64_t **)&v19);
  uint64_t v3 = v19;
  uint64_t v2 = v20;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  if (qword_1009F8080 != -1) {
    dispatch_once(&qword_1009F8080, &stru_1009AA7A8);
  }
  sub_100497978((uint64_t)off_1009F8078, (char *)&v16);
  uint64_t v5 = v16;
  uint64_t v4 = v17;
  uint64_t v6 = sub_1004AFD94();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  void v10[2] = sub_1003877F4;
  v10[3] = &unk_1009AA498;
  void v10[4] = v1;
  std::string __p = 0;
  long long __dst = 0;
  uint64_t v13 = 0;
  unsigned int v7 = v19;
  int64_t v8 = v20 - (unsigned char *)v19;
  if (v20 != v19)
  {
    sub_1000405B8(&__p, v8 >> 3);
    unsigned int v9 = (char *)__dst;
    memmove(__dst, v7, v8);
    long long __dst = &v9[8 * (v8 >> 3)];
  }
  __int16 v14 = (unint64_t)(v2 - v3) >> 3;
  __int16 v15 = (unint64_t)(v4 - v5) >> 3;
  sub_100013018(v6, v10);
  if (__p)
  {
    long long __dst = __p;
    operator delete(__p);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
  if (v19)
  {
    unsigned int v20 = v19;
    operator delete(v19);
  }
}

void sub_1003877A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  if (a19) {
    operator delete(a19);
  }
  if (a22) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003877F4(uint64_t a1)
{
  uint64_t v2 = *(_WORD **)(a1 + 32);
  v2[285] = 0;
  uint64_t v3 = *(uint64_t **)(a1 + 40);
  uint64_t v4 = *(uint64_t **)(a1 + 48);
  if (v3 != v4)
  {
    while (1)
    {
      uint64_t v5 = *v3;
      char v12 = 0;
      uint64_t v6 = sub_1003708B0();
      sub_10004191C(__p, "_CTKD_");
      BOOL v7 = !(*(unsigned int (**)(uint64_t, uint64_t, void **, char *))(*(void *)v6 + 784))(v6, v5, __p, &v12)|| v12 == 0;
      BOOL v8 = !v7;
      if (v11 < 0) {
        break;
      }
      if (v8) {
        goto LABEL_10;
      }
LABEL_11:
      if (++v3 == v4) {
        goto LABEL_15;
      }
    }
    operator delete(__p[0]);
    if (!v8) {
      goto LABEL_11;
    }
LABEL_10:
    ++v2[285];
    goto LABEL_11;
  }
LABEL_15:
  unsigned int v9 = *(unsigned __int16 *)(a1 + 64);
  if (v9 >= 0xA) {
    LOWORD(v9) = 10;
  }
  v2[280] = v9;
  v2[282] = *(_WORD *)(a1 + 66);
}

void sub_100387918(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100387934(uint64_t a1, uint64_t a2)
{
  return sub_100040550((void *)(a1 + 40), a2 + 40);
}

void sub_100387940(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void sub_10038795C(uint64_t a1)
{
}

void sub_100387968(uint64_t a1)
{
}

void sub_100387974(uint64_t a1)
{
}

void sub_10038797C(uint64_t a1)
{
  uint64_t v2 = sub_100019878();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003879F8;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003879F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AA708);
  }
  uint64_t v2 = sub_10070CA20(qword_1009F7EC8);
  unsigned __int16 v3 = (unsigned __int16)[v2 count];
  if (qword_1009F7ED0 != -1) {
    dispatch_once(&qword_1009F7ED0, &stru_1009AA708);
  }
  uint64_t v4 = sub_10070CB6C(qword_1009F7EC8);
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
  }
  uint64_t v5 = off_1009F7ED8;
  sub_10004191C(v28, "A1603");
  uint64_t v6 = sub_1006BDE30((uint64_t)v5, (uint64_t)v28);
  id v7 = [v6 mutableCopy];

  if (v29 < 0) {
    operator delete(v28[0]);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
  }
  BOOL v8 = off_1009F7ED8;
  sub_10004191C(__p, "A2051");
  unsigned int v9 = sub_1006BDE30((uint64_t)v8, (uint64_t)__p);
  [v7 addObjectsFromArray:v9];

  if (v27 < 0) {
    operator delete(__p[0]);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
  }
  id v10 = off_1009F7ED8;
  sub_10004191C(v24, "A3085");
  char v11 = sub_1006BDE30((uint64_t)v10, (uint64_t)v24);
  [v7 addObjectsFromArray:v11];

  if (v25 < 0) {
    operator delete(v24[0]);
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
  }
  char v12 = off_1009F7ED8;
  sub_10004191C(v22, "A2538");
  uint64_t v13 = sub_1006BDE30((uint64_t)v12, (uint64_t)v22);
  [v7 addObjectsFromArray:v13];

  if (v23 < 0) {
    operator delete(v22[0]);
  }
  uint64_t v14 = sub_1004AFD94();
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 3221225472;
  v17[2] = sub_100387DD0;
  void v17[3] = &unk_1009AA4D0;
  uint64_t v20 = v1;
  _OWORD v17[4] = v2;
  unsigned __int16 v21 = v3;
  id v15 = v4;
  id v18 = v15;
  id v16 = v7;
  id v19 = v16;
  sub_100013018(v14, v17);
}

void sub_100387D04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  _Unwind_Resume(a1);
}

id sub_100387DD0(uint64_t a1)
{
  uint64_t v1 = *(_WORD **)(a1 + 56);
  v1[285] = 0;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  id v2 = *(id *)(a1 + 32);
  id v3 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v16;
    do
    {
      uint64_t v5 = 0;
      do
      {
        if (*(void *)v16 != v4) {
          objc_enumerationMutation(v2);
        }
        uint64_t v6 = *(void **)(*((void *)&v15 + 1) + 8 * (void)v5);
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
        }
        id v7 = off_1009F7ED8;
        sub_10004191C(__p, "_CTKD_");
        int v8 = sub_100030A04((uint64_t)v7, v6, (uint64_t)__p);
        int v9 = v8;
        if ((v14 & 0x80000000) == 0)
        {
          if (!v8) {
            goto LABEL_11;
          }
LABEL_10:
          ++v1[285];
          goto LABEL_11;
        }
        operator delete(__p[0]);
        if (v9) {
          goto LABEL_10;
        }
LABEL_11:
        uint64_t v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v10 = [v2 countByEnumeratingWithState:&v15 objects:v19 count:16];
      id v3 = v10;
    }
    while (v10);
  }

  v1[281] = *(_WORD *)(a1 + 64);
  v1[283] = (unsigned __int16)[*(id *)(a1 + 40) count];
  id result = [*(id *)(a1 + 48) count];
  v1[284] = (_WORD)result;
  return result;
}

void sub_100387F7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  _Unwind_Resume(a1);
}

void sub_100387FB8(uint64_t a1)
{
}

void sub_100387FC4(uint64_t a1)
{
}

void sub_100387FCC(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  int v106 = a3;
  int v104 = *(_DWORD *)(a2 + 128);
  __int16 v105 = *(_WORD *)(a2 + 132);
  int v103 = 0;
  uint64_t v102 = 0;
  unsigned int v101 = 0;
  sub_10047B7A8(a2, &v103, (_DWORD *)&v102 + 1, &v101, &v102);
  if (a4 == 11)
  {
    int v9 = +[NSString stringWithUTF8String:sub_1004D53E8(&v106)];
    v109[0] = 0uLL;
    sub_10003AED0((uint64_t)v109, a1 + 176);
    id v10 = [*(id *)(a1 + 336) objectForKey:v9];
    BOOL v11 = v10 == 0;

    if (v11)
    {
      if (a5) {
        +[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", &off_1009E0E00, &off_1009E0E30, 0);
      }
      else {
      uint64_t v22 = +[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", &off_1009E0E30, 0);
      }
      char v23 = *(void **)(a1 + 344);
      *(void *)(a1 + 344) = v22;

      [*(id *)(a1 + 336) setObject:*(void *)(a1 + 344) forKeyedSubscript:v9];
    }
    else
    {
      char v12 = [*(id *)(a1 + 336) objectForKeyedSubscript:v9];
      uint64_t v13 = [v12 objectAtIndexedSubscript:1];
      unsigned int v14 = [v13 unsignedIntValue];

      long long v15 = +[NSNumber numberWithUnsignedInt:v14 + 1];
      long long v16 = [*(id *)(a1 + 336) objectForKeyedSubscript:v9];
      [v16 setObject:v15 atIndexedSubscript:1];

      if (!a5)
      {
        long long v17 = [*(id *)(a1 + 336) objectForKeyedSubscript:v9];
        long long v18 = [v17 objectAtIndexedSubscript:0];
        unsigned int v19 = [v18 unsignedIntValue];

        uint64_t v20 = +[NSNumber numberWithUnsignedInt:v19 + 1];
        unsigned __int16 v21 = [*(id *)(a1 + 336) objectForKeyedSubscript:v9];
        [v21 setObject:v20 atIndexedSubscript:0];
      }
    }
    sub_10003AFE8((uint64_t)v109);
    sub_10003AFB4((uint64_t)v109);
  }
  else if ((a4 - 11) > 1)
  {
    goto LABEL_18;
  }
  id v24 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v113 = 0;
  long long v111 = 0u;
  long long v112 = 0u;
  long long v110 = 0u;
  memset(v109, 0, sizeof(v109));
  char v25 = sub_1002E5104(a1 + 320, a4);
  [v24 setObject:v25 forKey:@"Event"];

  uint64_t v26 = +[NSString stringWithUTF8String:sub_1004D53E8(&v106)];
  [v24 setObject:v26 forKey:@"ServiceID"];

  char v27 = +[NSNumber numberWithInt:a5];
  [v24 setObject:v27 forKey:@"Result"];

  if (sub_10048103C(a2, v106, a4, a5, (uint64_t)v109))
  {
    unsigned int v98 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    sub_1002E4C60(a1 + 320, (uint64_t)v109 + 4, 20);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v97 = 0;
    sub_1002E4C60(a1 + 320, (uint64_t)&v109[1] + 8, 20);
    uint64_t v28 = +[NSString stringWithUTF8String:&v98];
    [v24 setObject:v28 forKey:@"PrimaryHash"];

    char v29 = +[NSString stringWithUTF8String:__p];
    [v24 setObject:v29 forKey:@"SecondaryHash"];

    int v95 = v111;
    uint64_t v30 = +[NSString stringWithUTF8String:sub_1004ABEA8(&v95)];
    [v24 setObject:v30 forKey:@"TypesOfDevicesConnected"];

    uint64_t v31 = sub_1002E4E24(a1 + 320, SDWORD2(v110));
    [v24 setObject:v31 forKey:@"ActiveSessions"];

    uint64_t v32 = sub_1002E4E24(a1 + 320, SDWORD2(v111));
    [v24 setObject:v32 forKey:@"ConnectedServices"];

    uint64_t v33 = sub_1002E4E24(a1 + 320, SHIDWORD(v111));
    [v24 setObject:v33 forKey:@"PendingServices"];

    uint64_t v34 = sub_1002E4F50(a1 + 320, *((uint64_t *)&v112 + 1));
    [v24 setObject:v34 forKey:@"UserSettingsEnabled"];

    uint32x2_t v35 = +[NSNumber numberWithUnsignedChar:v112];
    [v24 setObject:v35 forKey:@"PbapObexTransportProtocol"];

    unsigned int v36 = +[NSNumber numberWithBool:BYTE1(v112)];
    [v24 setObject:v36 forKey:@"DidSendPbapObexUnauthorizedError"];

    unsigned int v37 = +[NSNumber numberWithBool:BYTE2(v113)];
    [v24 setObject:v37 forKey:@"HidServicePresent"];

    if (SHIBYTE(v97) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v100) < 0) {
      operator delete(v98);
    }
  }
  sub_10038094C(a1, 0x72u, v24);

LABEL_18:
  if (a4 != 201 && a4 != 101)
  {
    if (a4 != 11) {
      return;
    }
    if (!a5)
    {
      sub_1004A82EC((unsigned __int8 *)&v104, v109);
      if ((SBYTE7(v109[1]) & 0x80u) == 0) {
        __int16 v45 = v109;
      }
      else {
        __int16 v45 = *(_OWORD **)&v109[0];
      }
      int v46 = +[NSString stringWithUTF8String:v45];
      if (SBYTE7(v109[1]) < 0) {
        operator delete(*(void **)&v109[0]);
      }
      v109[0] = 0uLL;
      sub_10003AED0((uint64_t)v109, a1 + 176);
      __int16 v47 = [*(id *)(a1 + 304) objectForKey:v46];
      BOOL v48 = v47 == 0;

      if (v48)
      {
        __int16 v49 = +[NSNumber numberWithBool:sub_100478B2C(a2, 12)];
        [*(id *)(a1 + 304) setObject:v49 forKeyedSubscript:v46];
      }
      sub_10003AFE8((uint64_t)v109);
      sub_10003AFB4((uint64_t)v109);
    }
    unsigned int v98 = 0;
    uint64_t v99 = 0;
    sub_10003AED0((uint64_t)&v98, a1 + 240);
    sub_100474E18(a2, v109);
    uint64_t v50 = sub_1003B9630(a1 + 384, (const void **)v109);
    if (SBYTE7(v109[1]) < 0) {
      operator delete(*(void **)&v109[0]);
    }
    if (v50 != 1) {
      goto LABEL_59;
    }
    memset(v109, 0, 24);
    sub_100474E18(a2, v109);
    switch(v106)
    {
      case 1:
        if (a5)
        {
          uint64_t v58 = sub_10036C70C(a1 + 384, (const void **)v109);
          uint64_t v59 = *(void **)(v58 + 24);
          *(void *)(v58 + 24) = @"HFP Connect Failed";

          uint64_t v60 = sub_10036C70C(a1 + 384, (const void **)v109);
          int v61 = *(void **)(v60 + 32);
          *(void *)(v60 + 32) = @"HFP Failed";

          uint64_t v62 = +[NSNumber numberWithInt:a5];
          uint64_t v63 = sub_10036C70C(a1 + 384, (const void **)v109);
          unsigned int v64 = *(void **)(v63 + 48);
          *(void *)(v63 + 48) = v62;

          unsigned int v65 = (int *)sub_10036C70C(a1 + 384, (const void **)v109);
          unsigned int v66 = v82;
          BOOL v67 = v82;
LABEL_50:
          sub_1003895A0((uint64_t)v67, v65);
LABEL_53:
          sub_100388DA4(a1, v66);
          sub_1003B96B0((uint64_t **)(a1 + 384), (const void **)v109);
          goto LABEL_57;
        }
        *(unsigned char *)(sub_10036C70C(a1 + 384, (const void **)v109) + 4) = 1;
        break;
      case 0x10:
        if (a5)
        {
          uint64_t v68 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "Analytics - A2DP Failed", (uint8_t *)__p, 2u);
          }
          uint64_t v69 = sub_10036C70C(a1 + 384, (const void **)v109);
          unsigned int v70 = *(void **)(v69 + 24);
          *(void *)(v69 + 24) = @"A2DP Connect Failed";

          uint64_t v71 = sub_10036C70C(a1 + 384, (const void **)v109);
          unsigned int v72 = *(void **)(v71 + 32);
          *(void *)(v71 + 32) = @"A2DP Failed";

          uint64_t v73 = +[NSNumber numberWithInt:a5];
          uint64_t v74 = sub_10036C70C(a1 + 384, (const void **)v109);
          unsigned int v75 = *(void **)(v74 + 48);
          *(void *)(v74 + 48) = v73;

          unsigned int v65 = (int *)sub_10036C70C(a1 + 384, (const void **)v109);
          unsigned int v66 = v83;
          BOOL v67 = v83;
          goto LABEL_50;
        }
        *(unsigned char *)(sub_10036C70C(a1 + 384, (const void **)v109) + 1) = 1;
        break;
      case 0x80000:
        if (a5)
        {
          __int16 v51 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Analytics - AACP Failed", (uint8_t *)__p, 2u);
          }
          uint64_t v52 = +[NSNumber numberWithInt:a5];
          uint64_t v53 = sub_10036C70C(a1 + 384, (const void **)v109);
          __int16 v54 = *(void **)(v53 + 48);
          *(void *)(v53 + 48) = v52;

          uint64_t v55 = sub_10036C70C(a1 + 384, (const void **)v109);
          __int16 v56 = *(void **)(v55 + 32);
          CFStringRef v57 = @"AACP Failed";
        }
        else
        {
          *(unsigned char *)sub_10036C70C(a1 + 384, (const void **)v109) = 1;
          uint64_t v55 = sub_10036C70C(a1 + 384, (const void **)v109);
          __int16 v56 = *(void **)(v55 + 32);
          CFStringRef v57 = @"Success";
        }
        *(void *)(v55 + 32) = v57;

        char v76 = sub_10048C68C(a2);
        *(unsigned char *)(sub_10036C70C(a1 + 384, (const void **)v109) + 3) = v76;
        uint64_t v77 = sub_10036C70C(a1 + 384, (const void **)v109);
        int v78 = *(_DWORD *)v77;
        __int16 v85 = *(_WORD *)(v77 + 4);
        int v84 = v78;
        id v86 = *(id *)(v77 + 8);
        id v87 = *(id *)(v77 + 16);
        id v88 = *(id *)(v77 + 24);
        id v89 = *(id *)(v77 + 32);
        id v90 = *(id *)(v77 + 40);
        id v91 = *(id *)(v77 + 48);
        id v92 = *(id *)(v77 + 56);
        long long v79 = *(_OWORD *)(v77 + 79);
        v93[0] = *(_OWORD *)(v77 + 64);
        *(_OWORD *)((char *)v93 + 15) = v79;
        id v94 = *(id *)(v77 + 96);
        unsigned int v66 = (unsigned __int8 *)&v84;
        goto LABEL_53;
      default:
        goto LABEL_57;
    }
    uint64_t v80 = sub_10036C70C(a1 + 384, (const void **)v109);
    uint64_t v81 = *(void **)(v80 + 32);
    *(void *)(v80 + 32) = @"Success";

LABEL_57:
    if (SBYTE7(v109[1]) < 0) {
      operator delete(*(void **)&v109[0]);
    }
LABEL_59:
    sub_10003AFB4((uint64_t)&v98);
    return;
  }
  v107[0] = @"PID";
  int v38 = +[NSNumber numberWithUnsignedInt:v101];
  v108[0] = v38;
  v107[1] = @"VID";
  __int16 v39 = +[NSNumber numberWithUnsignedInt:HIDWORD(v102)];
  v108[1] = v39;
  v107[2] = @"Version";
  int v40 = +[NSNumber numberWithUnsignedInt:v102];
  v108[2] = v40;
  v107[3] = @"IsAppleDevice";
  __int16 v41 = +[NSNumber numberWithBool:sub_100478B2C(a2, 12)];
  v108[3] = v41;
  v107[4] = @"Result";
  int v42 = +[NSNumber numberWithInt:a5];
  v108[4] = v42;
  __int16 v43 = +[NSDictionary dictionaryWithObjects:v108 forKeys:v107 count:5];

  if (a4 == 201)
  {
    ++*(_WORD *)(a1 + 134);
    unsigned int v44 = 9;
  }
  else
  {
    ++*(_WORD *)(a1 + 136);
    unsigned int v44 = 83;
  }
  sub_10038094C(a1, v44, v43);
}

void sub_100388B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62)
{
  sub_10003AFB4(v64 - 192);
  _Unwind_Resume(a1);
}

void sub_100388DA4(uint64_t a1, unsigned __int8 *a2)
{
  id v3 = (void *)*((void *)a2 + 6);
  if (v3) {
    __int16 v41 = v3;
  }
  else {
    __int16 v41 = &off_1009E0E00;
  }
  id v4 = [*((id *)a2 + 1) length];
  uint64_t v5 = (void *)*((void *)a2 + 1);
  if (v4)
  {
    int v42 = v5;
  }
  else
  {
    int v42 = @"Unknown";
    *((void *)a2 + 1) = @"Unknown";
  }
  v57[0] = @"ACLConnected";
  v58[0] = +[NSNumber numberWithBool:a2[2]];
  v57[1] = @"AACPConnected";
  __int16 v39 = +[NSNumber numberWithBool:*a2];
  v58[1] = v39;
  v57[2] = @"A2DPConnected";
  int v40 = +[NSNumber numberWithBool:a2[1]];
  v58[2] = v40;
  void v58[3] = v42;
  void v57[3] = @"BundleID";
  v57[4] = @"ConnectionType";
  v58[4] = *((void *)a2 + 2);
  v57[5] = @"DurationInMSec";
  mach_absolute_time();
  int v38 = +[NSNumber numberWithUnsignedLongLong:UpTicksToMilliseconds()];
  v58[5] = v38;
  v58[6] = v41;
  v57[6] = @"ErrorCode";
  v57[7] = @"ErrorReason";
  v58[7] = *((void *)a2 + 3);
  v57[8] = @"FastConnectUsed";
  uint64_t v6 = +[NSNumber numberWithBool:a2[3]];
  uint64_t v7 = *((void *)a2 + 5);
  unsigned int v37 = (void *)v6;
  v58[8] = v6;
  v58[9] = v7;
  v57[9] = @"FWVersion";
  v57[10] = @"HFPConnected";
  unsigned int v36 = +[NSNumber numberWithBool:a2[4]];
  v58[10] = v36;
  v57[11] = @"MagicPairingSuccessfull";
  +[NSNumber numberWithBool:a2[5]];
  v35 = uint64_t v34 = a1;
  v58[11] = v35;
  v57[12] = @"PID";
  int v8 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 17)];
  v58[12] = v8;
  v57[13] = @"VID";
  int v9 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 16)];
  uint64_t v10 = *((void *)a2 + 7);
  v58[13] = v9;
  v58[14] = v10;
  v57[14] = @"LastSeenTimeInSec";
  v57[15] = @"Status";
  v58[15] = *((void *)a2 + 4);
  v57[16] = @"RetryCurrent";
  BOOL v11 = +[NSNumber numberWithUnsignedChar:a2[88]];
  v58[16] = v11;
  v57[17] = @"RetryMax";
  char v12 = +[NSNumber numberWithUnsignedChar:a2[89]];
  v58[17] = v12;
  v57[18] = @"BasebandDuration";
  uint64_t v13 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a2 + 45)];
  v58[18] = v13;
  v57[19] = @"BasebandDurationTotal";
  unsigned int v14 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a2 + 46)];
  v58[19] = v14;
  v57[20] = @"BBFCStatusSource";
  long long v15 = +[NSNumber numberWithBool:a2[94]];
  v58[20] = v15;
  long long v16 = (void *)v58[0];
  long long v17 = +[NSDictionary dictionaryWithObjects:v58 forKeys:v57 count:21];
  id v18 = [v17 mutableCopy];

  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  id v19 = *((id *)a2 + 12);
  id v20 = [v19 countByEnumeratingWithState:&v49 objects:v56 count:16];
  if (v20)
  {
    uint64_t v21 = *(void *)v50;
    do
    {
      for (uint64_t i = 0; i != v20; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v50 != v21) {
          objc_enumerationMutation(v19);
        }
        uint64_t v23 = *(void *)(*((void *)&v49 + 1) + 8 * i);
        id v24 = [*((id *)a2 + 12) objectForKeyedSubscript:v23];
        [v18 setObject:v24 forKeyedSubscript:v23];
      }
      id v20 = [v19 countByEnumeratingWithState:&v49 objects:v56 count:16];
    }
    while (v20);
  }

  uint64_t v48 = 0;
  NSAppendPrintF_safe();
  id v25 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  id v26 = v18;
  id v27 = [v26 countByEnumeratingWithState:&v44 objects:v55 count:16];
  if (v27)
  {
    uint64_t v28 = *(void *)v45;
    do
    {
      for (SCNetworkInterfaceRef j = 0; j != v27; SCNetworkInterfaceRef j = (char *)j + 1)
      {
        if (*(void *)v45 != v28) {
          objc_enumerationMutation(v26);
        }
        uint64_t v30 = *(void *)(*((void *)&v44 + 1) + 8 * (void)j);
        NSAppendPrintF_safe();
        id v31 = v25;

        uint64_t v33 = [v26 objectForKeyedSubscript:v30, v30];
        NSAppendPrintF_safe();
        id v25 = v31;
      }
      id v27 = [v26 countByEnumeratingWithState:&v44 objects:v55 count:16];
    }
    while (v27);
  }

  uint64_t v32 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v54 = v25;
    _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "%@", buf, 0xCu);
  }
  sub_10038094C(v34, 0x3Du, v26);
}

void sub_100389444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, void *a19, id *a20)
{
  sub_100389FA8(a20);
  _Unwind_Resume(a1);
}

uint64_t sub_1003895A0(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  *(void *)(a1 + 8) = *((id *)a2 + 1);
  *(void *)(a1 + 16) = *((id *)a2 + 2);
  *(void *)(a1 + 24) = *((id *)a2 + 3);
  *(void *)(a1 + 32) = *((id *)a2 + 4);
  *(void *)(a1 + 40) = *((id *)a2 + 5);
  *(void *)(a1 + 48) = *((id *)a2 + 6);
  *(void *)(a1 + 56) = *((id *)a2 + 7);
  long long v5 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 79) = *(_OWORD *)((char *)a2 + 79);
  *(_OWORD *)(a1 + 64) = v5;
  *(void *)(a1 + 96) = *((id *)a2 + 12);
  return a1;
}

void sub_100389648(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
}

void sub_100389650(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!a3)
  {
    *(void *)long long buf = 0;
    sub_100026C30((uint64_t)buf);
    uint64_t v6 = *(int *)buf;
    uint64_t v7 = *(__int16 *)&buf[4];
    *(void *)long long buf = a2 + 128;
    int v8 = sub_1003B970C((uint64_t **)(a1 + 408), a2 + 128, (uint64_t)&unk_1007BE9D0, (_DWORD **)buf);
    *((void *)v8 + 5) = v6;
    *((void *)v8 + 6) = v7;
  }
  int v9 = *(unsigned __int8 *)(a2 + 1333);
  uint64_t v10 = (id)qword_100A19E50;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(a2, (uint64_t)&v88);
    BOOL v11 = v89 >= 0 ? &v88 : (long long *)v88;
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v11;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = a3;
    *(_WORD *)&buf[18] = 1024;
    *(_DWORD *)&buf[20] = v9;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "ACL connected aclConnectCfm for device %s status %d incoming %d", buf, 0x18u);
    if (SHIBYTE(v89) < 0) {
      operator delete((void *)v88);
    }
  }

  if (v9 && sub_100478B2C(a2, 12))
  {
    char v12 = (id)qword_100A19E50;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      sub_100474E18(a2, buf);
      uint64_t v13 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
      LODWORD(v88) = 136315138;
      *(void *)((char *)&v88 + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Start monitoring for connection %s", (uint8_t *)&v88, 0xCu);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }

    __p[0] = 0;
    __p[1] = 0;
    sub_10003AED0((uint64_t)__p, a1 + 240);
    sub_100474E18(a2, buf);
    uint64_t v14 = sub_1003B9630(a1 + 384, (const void **)buf);
    uint64_t v15 = v14;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (!v15)
      {
LABEL_21:
        memset(v86, 0, sizeof(v86));
        long long v84 = 0u;
        long long v85 = 0u;
        *(void *)long long buf = 0;
        *(_OWORD *)&uint8_t buf[16] = 0u;
        id v87 = 0;
        *(void *)&uint8_t buf[8] = @"Unknown";

        long long v16 = *(void **)&buf[16];
        *(void *)&uint8_t buf[16] = @"Incoming";

        long long v17 = (void *)v84;
        *(void *)&long long v84 = @"Pending";

        id v18 = *(void **)&buf[24];
        *(void *)&buf[24] = @"NA";

        id v19 = (void *)*((void *)&v84 + 1);
        *((void *)&v84 + 1) = @"NA";

        id v20 = (void *)v85;
        *(void *)&long long v85 = 0;

        uint64_t v21 = (void *)*((void *)&v85 + 1);
        *((void *)&v85 + 1) = &off_1009E0E18;
        *(void *)&v86[0] = 0;

        *((void *)&v86[0] + 1) = mach_absolute_time();
        DWORD2(v86[1]) = -1;
        WORD6(v86[1]) = -1;
        BYTE14(v86[1]) = 0;
        id v22 = [&off_1009E1730 mutableCopy];
        id v23 = v87;
        id v87 = v22;

        sub_100474E18(a2, &v88);
        v82[0] = &v88;
        id v24 = sub_1003B987C((uint64_t **)(a1 + 384), (const void **)&v88, (uint64_t)&unk_1007BE9D0, v82);
        sub_100389F04((uint64_t)v24 + 56, (int *)buf);
        if (SHIBYTE(v89) < 0) {
          operator delete((void *)v88);
        }
      }
    }
    else if (!v14)
    {
      goto LABEL_21;
    }
    sub_10003AFB4((uint64_t)__p);
  }
  long long v88 = 0uLL;
  uint64_t v89 = 0;
  sub_100474E18(a2, &v88);
  v82[0] = 0;
  v82[1] = 0;
  sub_10003AED0((uint64_t)v82, a1 + 240);
  id v25 = (uint64_t **)(a1 + 384);
  if (sub_1003B9630(a1 + 384, (const void **)&v88) != 1) {
    goto LABEL_41;
  }
  uint64_t v80 = 0;
  uint64_t v81 = 0;
  sub_10047B7A8(a2, (_DWORD *)&v81 + 1, &v81, &v80, (_DWORD *)&v80 + 1);
  int v26 = v81;
  *(_DWORD *)(sub_10036C70C(a1 + 384, (const void **)&v88) + 64) = v26;
  int v27 = v80;
  *(_DWORD *)(sub_10036C70C(a1 + 384, (const void **)&v88) + 68) = v27;
  sub_100480344(a2, 0xAu, buf);
  if ((buf[23] & 0x80u) == 0) {
    uint64_t v28 = buf;
  }
  else {
    uint64_t v28 = *(uint8_t **)buf;
  }
  uint64_t v29 = +[NSString stringWithUTF8String:v28];
  uint64_t v30 = sub_10036C70C(a1 + 384, (const void **)&v88);
  id v31 = *(void **)(v30 + 40);
  *(void *)(v30 + 40) = v29;

  if ((char)buf[23] < 0)
  {
    operator delete(*(void **)buf);
    if (a3) {
      goto LABEL_31;
    }
  }
  else if (a3)
  {
LABEL_31:
    int v32 = *(unsigned __int8 *)(sub_10036C70C(a1 + 384, (const void **)&v88) + 88);
    int v33 = *(unsigned __int8 *)(sub_10036C70C(a1 + 384, (const void **)&v88) + 89);
    uint64_t v34 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = v32;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v33;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "Analytics - ACL Connection Failed retryCurrent=%d retryMax=%d", buf, 0xEu);
    }
    if (v32 == v33)
    {
      uint64_t v35 = sub_10036C70C(a1 + 384, (const void **)&v88);
      unsigned int v36 = *(void **)(v35 + 24);
      *(void *)(v35 + 24) = @"ACL Connect Failed";

      uint64_t v37 = sub_10036C70C(a1 + 384, (const void **)&v88);
      int v38 = *(void **)(v37 + 32);
      *(void *)(v37 + 32) = @"Failed";

      uint64_t v39 = +[NSNumber numberWithInt:a3];
      uint64_t v40 = sub_10036C70C(a1 + 384, (const void **)&v88);
      __int16 v41 = *(void **)(v40 + 48);
      *(void *)(v40 + 48) = v39;

      memset(v86, 0, sizeof(v86));
      long long v84 = 0u;
      long long v85 = 0u;
      memset(buf, 0, sizeof(buf));
      sub_100474E18(a2, __p);
      uint64_t v63 = a1;
      uint64_t v42 = sub_10036C70C(a1 + 384, (const void **)__p);
      int v43 = *(_DWORD *)v42;
      *(_WORD *)&uint8_t buf[4] = *(_WORD *)(v42 + 4);
      *(_DWORD *)long long buf = v43;
      id v44 = *(id *)(v42 + 8);
      *(void *)&uint8_t buf[8] = v44;
      id v45 = *(id *)(v42 + 16);
      *(void *)&uint8_t buf[16] = v45;
      id v46 = *(id *)(v42 + 24);
      *(void *)&buf[24] = v46;
      id v47 = *(id *)(v42 + 32);
      *(void *)&long long v84 = v47;
      id v48 = *(id *)(v42 + 40);
      *((void *)&v84 + 1) = v48;
      id v49 = *(id *)(v42 + 48);
      *(void *)&long long v85 = v49;
      id v50 = *(id *)(v42 + 56);
      *((void *)&v85 + 1) = v50;
      long long v51 = *(_OWORD *)(v42 + 79);
      v86[0] = *(_OWORD *)(v42 + 64);
      *(_OWORD *)((char *)v86 + 15) = v51;
      id v52 = *(id *)(v42 + 96);
      id v87 = v52;
      if (v76 < 0) {
        operator delete(__p[0]);
      }
      int v64 = *(_DWORD *)buf;
      __int16 v65 = *(_WORD *)&buf[4];
      id v53 = v44;
      id v66 = v53;
      id v54 = v45;
      id v67 = v54;
      id v55 = v46;
      id v68 = v55;
      id v56 = v47;
      id v69 = v56;
      id v57 = v48;
      id v70 = v57;
      id v58 = v49;
      id v71 = v58;
      id v59 = v50;
      id v72 = v59;
      v73[0] = v86[0];
      *(_OWORD *)((char *)v73 + 15) = *(_OWORD *)((char *)v86 + 15);
      id v60 = v52;
      id v74 = v60;
      sub_100388DA4(v63, (unsigned __int8 *)&v64);
    }
    sub_1003B96B0(v25, (const void **)&v88);
    goto LABEL_41;
  }
  *(unsigned char *)(sub_10036C70C(a1 + 384, (const void **)&v88) + 2) = 1;
  __p[0] = 0;
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  char v77 = 0;
  memset(buf, 0, 24);
  int v61 = sub_100373558();
  (*(void (**)(void *, void **, uint64_t *, uint64_t *, char *, uint8_t *))(*(void *)v61 + 32))(v61, __p, &v79, &v78, &v77, buf);
  __int16 v62 = v78;
  *(_WORD *)(sub_10036C70C(a1 + 384, (const void **)&v88) + 92) = v62;
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
LABEL_41:
  sub_10003AFE8((uint64_t)v82);
  sub_10003AFB4((uint64_t)v82);
  if (SHIBYTE(v89) < 0) {
    operator delete((void *)v88);
  }
}

void sub_100389E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  sub_100389FA8(&a36);
  sub_10003AFB4((uint64_t)&__p);
  _Unwind_Resume(a1);
}

uint64_t sub_100389F04(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  objc_storeStrong((id *)(a1 + 8), *((id *)a2 + 1));
  objc_storeStrong((id *)(a1 + 16), *((id *)a2 + 2));
  objc_storeStrong((id *)(a1 + 24), *((id *)a2 + 3));
  objc_storeStrong((id *)(a1 + 32), *((id *)a2 + 4));
  objc_storeStrong((id *)(a1 + 40), *((id *)a2 + 5));
  objc_storeStrong((id *)(a1 + 48), *((id *)a2 + 6));
  objc_storeStrong((id *)(a1 + 56), *((id *)a2 + 7));
  long long v5 = *((_OWORD *)a2 + 4);
  *(_OWORD *)(a1 + 79) = *(_OWORD *)((char *)a2 + 79);
  *(_OWORD *)(a1 + 64) = v5;
  objc_storeStrong((id *)(a1 + 96), *((id *)a2 + 12));
  return a1;
}

id *sub_100389FA8(id *a1)
{
  return a1;
}

void sub_10038A00C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_10038A014(uint64_t result, uint64_t a2, int a3)
{
  if (!a3)
  {
    uint64_t v8 = v3;
    uint64_t v9 = v4;
    uint64_t v5 = result;
    int v6 = *(_DWORD *)(a2 + 128);
    __int16 v7 = *(_WORD *)(a2 + 132);
    sub_1003B99BC((uint64_t **)(result + 408), (uint64_t)&v6);
    return sub_1003B9AE8((uint64_t **)(v5 + 432), (uint64_t)&v6);
  }
  return result;
}

uint64_t sub_10038A070(uint64_t a1, uint64_t a2, int a3)
{
  return sub_10038A014(a1 - 32, a2, a3);
}

void sub_10038A078(uint64_t a1, uint64_t a2, void *a3)
{
  id v5 = a3;
  int v6 = (id)qword_100A19E50;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_100475EE0(a2, (uint64_t)__p);
    __int16 v7 = v20 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "updateAirpodsConnectionMetricDevice FastConnect for device %s", buf, 0xCu);
    if (SHIBYTE(v20) < 0) {
      operator delete(__p[0]);
    }
  }

  __p[0] = 0;
  __p[1] = 0;
  uint64_t v20 = 0;
  sub_100474E18(a2, __p);
  *(_OWORD *)long long buf = 0uLL;
  sub_10003AED0((uint64_t)buf, a1 + 240);
  uint64_t v8 = a1 + 384;
  if (sub_1003B9630(a1 + 384, (const void **)__p) == 1)
  {
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    id v9 = v5;
    id v10 = [v9 countByEnumeratingWithState:&v15 objects:v21 count:16];
    if (v10)
    {
      uint64_t v11 = *(void *)v16;
      do
      {
        for (uint64_t i = 0; i != v10; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v16 != v11) {
            objc_enumerationMutation(v9);
          }
          uint64_t v13 = *(void *)(*((void *)&v15 + 1) + 8 * i);
          uint64_t v14 = [v9 objectForKeyedSubscript:v13];
          [*(id *)(sub_10036C70C(v8, (const void **)__p) + 96) setObject:v14 forKeyedSubscript:v13];
        }
        id v10 = [v9 countByEnumeratingWithState:&v15 objects:v21 count:16];
      }
      while (v10);
    }
  }
  sub_10003AFE8((uint64_t)buf);
  sub_10003AFB4((uint64_t)buf);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p[0]);
  }
}

void sub_10038A298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  sub_10003AFB4(v25 - 112);
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_10038A304(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  if (sub_100050494())
  {
    if (*(_DWORD *)a2 == 7)
    {
      uint64_t v7 = *(void *)(a2 + 16);
      id v5 = (uint64_t *)(a2 + 16);
      uint64_t v6 = v7;
      int v8 = *(unsigned __int16 *)(v7 + 16);
      uint64_t v9 = *(unsigned __int8 *)(v7 + 1);
      if ((v9 - 1) > 0xA) {
        unsigned int v10 = 0;
      }
      else {
        unsigned int v10 = word_1007BCEF2[32 * v9 + 2];
      }
      switch(v8)
      {
        case 0:
        case 1:
        case 2:
        case 4:
        case 5:
        case 11:
          break;
        case 3:
          if (v10 >= 0xA1)
          {
            std::string v141 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075B924(v141, v142, v143, v144, v145, v146, v147, v148);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          __int16 v149 = +[NSNumber numberWithUnsignedShort:WORD5(v385[0])];
          [v4 setObject:v149 forKeyedSubscript:@"time_to_r1scanstart_utp"];

          v150 = +[NSNumber numberWithUnsignedShort:WORD6(v385[0])];
          [v4 setObject:v150 forKeyedSubscript:@"time_to_rxsecpage_utp"];

          unsigned int v151 = +[NSNumber numberWithUnsignedShort:HIWORD(v385[0])];
          [v4 setObject:v151 forKeyedSubscript:@"time_to_conncompl_utp"];

          __int16 v152 = +[NSNumber numberWithUnsignedShort:LOWORD(v385[1])];
          [v4 setObject:v152 forKeyedSubscript:@"time_to_txpage_src"];

          unsigned int v153 = +[NSNumber numberWithUnsignedShort:WORD1(v385[1])];
          [v4 setObject:v153 forKeyedSubscript:@"time_to_extraconnect_src"];

          __int16 v154 = +[NSNumber numberWithUnsignedShort:WORD2(v385[1])];
          [v4 setObject:v154 forKeyedSubscript:@"time_to_earlyconnect_src"];

          unsigned int v155 = +[NSNumber numberWithUnsignedShort:WORD3(v385[1])];
          [v4 setObject:v155 forKeyedSubscript:@"time_to_magicpairing_src"];

          __int16 v156 = +[NSNumber numberWithUnsignedShort:WORD4(v385[1])];
          [v4 setObject:v156 forKeyedSubscript:@"time_to_conncompl_src"];

          unsigned int v157 = +[NSNumber numberWithUnsignedShort:WORD5(v385[1])];
          [v4 setObject:v157 forKeyedSubscript:@"time_to_buds_in_ear"];

          __int16 v158 = +[NSNumber numberWithUnsignedShort:WORD6(v385[1])];
          [v4 setObject:v158 forKeyedSubscript:@"connection_direction"];

          if (v9 >= 9)
          {
            sub_100381514(v159, @"boot_time_event_durations", 20, 2u, (uint64_t)&v385[1] + 14, v4, 0);
            sub_100381514(v160, @"boot_time_event_ids", 20, 1u, (uint64_t)&v386 + 6, v4, 0);
            int v161 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v387 + 10)];
            [v4 setObject:v161 forKeyedSubscript:@"nvram_generation_count"];

            __int16 v162 = +[NSNumber numberWithUnsignedChar:BYTE14(v387)];
            [v4 setObject:v162 forKeyedSubscript:@"flash_vendor"];

            int v163 = +[NSNumber numberWithUnsignedChar:HIBYTE(v387)];
            [v4 setObject:v163 forKeyedSubscript:@"boot_type"];

            __int16 v164 = +[NSNumber numberWithUnsignedChar:LOBYTE(v388[0])];
            [v4 setObject:v164 forKeyedSubscript:@"case_findmy_paired_st"];

            int v165 = +[NSNumber numberWithUnsignedChar:BYTE1(v388[0])];
            [v4 setObject:v165 forKeyedSubscript:@"other_findmy_paired_st"];

            __int16 v166 = +[NSNumber numberWithUnsignedChar:BYTE2(v388[0])];
            [v4 setObject:v166 forKeyedSubscript:@"self_findmy_paired_st"];

            sub_100381514(v167, @"unused_bytes_2", 11, 1u, (uint64_t)v388 + 3, v4, 0);
          }
          break;
        case 6:
          if (v10 >= 0xA1)
          {
            v168 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075B99C(v168, v169, v170, v171, v172, v173, v174, v175);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          v176 = memcpy(&v384, (const void *)v6, v10);
          sub_100381514((uint64_t)v176, @"unused_bytes_1", 10, 2u, (uint64_t)v385 + 10, v4, 0);
          unsigned int v177 = +[NSNumber numberWithUnsignedShort:HIWORD(v385[1])];
          [v4 setObject:v177 forKeyedSubscript:@"count_in_state_disabled"];

          v178 = +[NSNumber numberWithUnsignedShort:LOWORD(v385[2])];
          [v4 setObject:v178 forKeyedSubscript:@"seconds_in_state_disabled"];

          unsigned int v179 = +[NSNumber numberWithUnsignedShort:WORD1(v385[2])];
          [v4 setObject:v179 forKeyedSubscript:@"count_in_state_inEar"];

          v180 = +[NSNumber numberWithUnsignedShort:WORD2(v385[2])];
          [v4 setObject:v180 forKeyedSubscript:@"seconds_in_state_inEar"];

          unsigned int v181 = +[NSNumber numberWithUnsignedShort:WORD3(v385[2])];
          [v4 setObject:v181 forKeyedSubscript:@"count_in_state_inEarDetect"];

          v182 = +[NSNumber numberWithUnsignedShort:WORD4(v385[2])];
          [v4 setObject:v182 forKeyedSubscript:@"seconds_in_state_inEarDetect"];

          BOOL v183 = +[NSNumber numberWithUnsignedShort:WORD5(v385[2])];
          [v4 setObject:v183 forKeyedSubscript:@"count_in_state_tableTop"];

          v184 = +[NSNumber numberWithUnsignedShort:WORD6(v385[2])];
          [v4 setObject:v184 forKeyedSubscript:@"seconds_in_state_tableTop"];

          v185 = +[NSNumber numberWithUnsignedShort:HIWORD(v385[2])];
          [v4 setObject:v185 forKeyedSubscript:@"count_in_state_inCaseLidClosed"];

          unsigned int v186 = +[NSNumber numberWithUnsignedShort:LOWORD(v385[3])];
          [v4 setObject:v186 forKeyedSubscript:@"seconds_in_state_inCaseLidClosed"];

          uint32x2_t v187 = +[NSNumber numberWithUnsignedShort:WORD1(v385[3])];
          [v4 setObject:v187 forKeyedSubscript:@"count_in_state_inCaseLidOpen"];

          v188 = +[NSNumber numberWithUnsignedShort:WORD2(v385[3])];
          [v4 setObject:v188 forKeyedSubscript:@"seconds_in_state_inCaseLidOpen"];

          v189 = +[NSNumber numberWithUnsignedShort:WORD3(v385[3])];
          [v4 setObject:v189 forKeyedSubscript:@"count_in_state_offEar"];

          uint64_t v190 = +[NSNumber numberWithUnsignedShort:WORD4(v385[3])];
          [v4 setObject:v190 forKeyedSubscript:@"seconds_in_state_offEar"];

          v191 = +[NSNumber numberWithUnsignedShort:WORD5(v385[3])];
          [v4 setObject:v191 forKeyedSubscript:@"count_in_state_pocket"];

          v192 = +[NSNumber numberWithUnsignedShort:WORD6(v385[3])];
          [v4 setObject:v192 forKeyedSubscript:@"seconds_in_state_pocket"];

          char v193 = +[NSNumber numberWithUnsignedShort:HIWORD(v385[3])];
          [v4 setObject:v193 forKeyedSubscript:@"count_in_state_outOfPocketDetect"];

          v194 = +[NSNumber numberWithUnsignedShort:(unsigned __int16)v386];
          [v4 setObject:v194 forKeyedSubscript:@"seconds_in_state_outOfPocketDetect"];

          sub_100381514(v195, @"unused_bytes_2", 10, 4u, (uint64_t)&v386 + 6, v4, 0);
          sub_100381514(v196, @"ied_reserved_unused_bytes", 2, 2u, (uint64_t)&v386 + 2, v4, 0);
          sub_100381514(v197, @"unused_bytes_3", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 7:
          if (v10 >= 0xA1)
          {
            uint64_t v11 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BA14(v11, v12, v13, v14, v15, v16, v17, v18);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          id v19 = +[NSNumber numberWithUnsignedShort:WORD5(v385[0])];
          [v4 setObject:v19 forKeyedSubscript:@"adc_status_err_cnt"];

          uint64_t v20 = +[NSNumber numberWithUnsignedShort:WORD6(v385[0])];
          [v4 setObject:v20 forKeyedSubscript:@"bus_err_cnt"];

          uint64_t v21 = +[NSNumber numberWithUnsignedShort:HIWORD(v385[0])];
          [v4 setObject:v21 forKeyedSubscript:@"service_not_found_err_cnt"];

          id v22 = +[NSNumber numberWithUnsignedShort:LOWORD(v385[1])];
          [v4 setObject:v22 forKeyedSubscript:@"adc_conversion_cnt"];

          id v23 = +[NSNumber numberWithShort:SWORD1(v385[1])];
          [v4 setObject:v23 forKeyedSubscript:@"delta_baseline_cap"];

          id v24 = +[NSNumber numberWithShort:SWORD2(v385[1])];
          [v4 setObject:v24 forKeyedSubscript:@"abs_baseline_cap"];

          uint64_t v25 = +[NSNumber numberWithUnsignedShort:WORD3(v385[1])];
          [v4 setObject:v25 forKeyedSubscript:@"gsr_cnt"];

          int v26 = +[NSNumber numberWithUnsignedShort:WORD4(v385[1])];
          [v4 setObject:v26 forKeyedSubscript:@"chip_id_read_err_cnt"];

          int v27 = +[NSNumber numberWithUnsignedShort:WORD5(v385[1])];
          [v4 setObject:v27 forKeyedSubscript:@"sensor_wdg_cnt"];

          uint64_t v28 = +[NSNumber numberWithUnsignedShort:WORD6(v385[1])];
          [v4 setObject:v28 forKeyedSubscript:@"max_noise_low_freq"];

          uint64_t v29 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[1] + 14)];
          [v4 setObject:v29 forKeyedSubscript:@"max_noise_high_freq"];

          sub_100381514(v30, @"unused_bytes_1", 19, 4u, (uint64_t)&v385[2] + 2, v4, 0);
          sub_100381514(v31, @"unused_bytes_2", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 8:
          if (v10 >= 0xA1)
          {
            v198 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BA8C(v198, v199, v200, v201, v202, v203, v204, v205);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          v206 = +[NSNumber numberWithUnsignedShort:WORD5(v385[0])];
          [v4 setObject:v206 forKeyedSubscript:@"gest_duration"];

          v207 = +[NSNumber numberWithUnsignedShort:WORD6(v385[0])];
          [v4 setObject:v207 forKeyedSubscript:@"intent_gest_duration"];

          v208 = +[NSNumber numberWithShort:SHIWORD(v385[0])];
          [v4 setObject:v208 forKeyedSubscript:@"force_slope"];

          v209 = +[NSNumber numberWithUnsignedShort:LOWORD(v385[1])];
          [v4 setObject:v209 forKeyedSubscript:@"slope_def"];

          v210 = +[NSNumber numberWithShort:SWORD1(v385[1])];
          [v4 setObject:v210 forKeyedSubscript:@"dbl_clk_valley"];

          v211 = +[NSNumber numberWithUnsignedShort:WORD2(v385[1])];
          [v4 setObject:v211 forKeyedSubscript:@"dbl_clk_interval"];

          v212 = +[NSNumber numberWithShort:SWORD3(v385[1])];
          [v4 setObject:v212 forKeyedSubscript:@"force_peak_1"];

          v213 = +[NSNumber numberWithShort:SWORD4(v385[1])];
          [v4 setObject:v213 forKeyedSubscript:@"force_peak_2"];

          v214 = +[NSNumber numberWithShort:SWORD5(v385[1])];
          [v4 setObject:v214 forKeyedSubscript:@"decision_thres_force"];

          v215 = +[NSNumber numberWithShort:SWORD6(v385[1])];
          [v4 setObject:v215 forKeyedSubscript:@"decision_thres_slope"];

          v216 = +[NSNumber numberWithInt:*(unsigned int *)((char *)&v385[1] + 14)];
          [v4 setObject:v216 forKeyedSubscript:@"gest_force_peak"];

          v217 = +[NSNumber numberWithInt:*(unsigned int *)((char *)&v385[2] + 2)];
          [v4 setObject:v217 forKeyedSubscript:@"force_peak_3"];

          v218 = +[NSNumber numberWithInt:*(unsigned int *)((char *)&v385[2] + 6)];
          [v4 setObject:v218 forKeyedSubscript:@"baseline_cap_delta"];

          v219 = +[NSNumber numberWithInt:*(unsigned int *)((char *)&v385[2] + 10)];
          [v4 setObject:v219 forKeyedSubscript:@"baseline_cap"];

          sub_100381514(v220, @"unused_bytes_1", 16, 4u, (uint64_t)&v385[2] + 14, v4, 0);
          sub_100381514(v221, @"unused_bytes_2", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 9:
          if (v10 >= 0xA1)
          {
            int v32 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BB04(v32, v33, v34, v35, v36, v37, v38, v39);
            }
            uint64_t v6 = *v5;
          }
          goto LABEL_23;
        case 10:
          if (v10 >= 0xA1)
          {
            v222 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BB04(v222, v223, v224, v225, v226, v227, v228, v229);
            }
            uint64_t v6 = *v5;
          }
LABEL_23:
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          uint64_t v40 = +[NSNumber numberWithUnsignedShort:WORD5(v385[0])];
          [v4 setObject:v40 forKeyedSubscript:@"cycleCount"];

          uint64_t v41 = +[NSNumber numberWithUnsignedShort:WORD4(v386)];
          [v4 setObject:v41 forKeyedSubscript:@"timeChargingTotal"];

          uint64_t v42 = +[NSNumber numberWithUnsignedShort:WORD5(v386)];
          [v4 setObject:v42 forKeyedSubscript:@"timeChargingWirelessTotal"];

          int v43 = +[NSNumber numberWithUnsignedShort:WORD6(v386)];
          [v4 setObject:v43 forKeyedSubscript:@"timeChargingTopOff"];

          id v44 = +[NSNumber numberWithUnsignedShort:HIWORD(v386)];
          [v4 setObject:v44 forKeyedSubscript:@"timeChargingTopOffWireless"];

          id v45 = +[NSNumber numberWithUnsignedShort:(unsigned __int16)v387];
          [v4 setObject:v45 forKeyedSubscript:@"timeChargingTopOffWired"];

          id v46 = +[NSNumber numberWithShort:SWORD1(v387)];
          [v4 setObject:v46 forKeyedSubscript:@"tempBattMax"];

          id v47 = +[NSNumber numberWithShort:SWORD2(v387)];
          [v4 setObject:v47 forKeyedSubscript:@"tempBattAvg"];

          id v48 = +[NSNumber numberWithShort:SWORD3(v387)];
          [v4 setObject:v48 forKeyedSubscript:@"tempBattMin"];

          id v49 = +[NSNumber numberWithShort:SWORD4(v387)];
          [v4 setObject:v49 forKeyedSubscript:@"tempMlbMax"];

          id v50 = +[NSNumber numberWithUnsignedShort:WORD5(v387)];
          [v4 setObject:v50 forKeyedSubscript:@"voltageMax"];

          long long v51 = +[NSNumber numberWithUnsignedShort:WORD6(v387)];
          [v4 setObject:v51 forKeyedSubscript:@"voltageMin"];

          id v52 = +[NSNumber numberWithUnsignedShort:HIWORD(v387)];
          [v4 setObject:v52 forKeyedSubscript:@"capacity"];

          id v53 = +[NSNumber numberWithUnsignedShort:LOWORD(v388[0])];
          [v4 setObject:v53 forKeyedSubscript:@"cycleAtCapacity"];

          id v54 = +[NSNumber numberWithUnsignedShort:WORD1(v388[0])];
          [v4 setObject:v54 forKeyedSubscript:@"resistance"];

          id v55 = +[NSNumber numberWithShort:SWORD2(v388[0])];
          [v4 setObject:v55 forKeyedSubscript:@"tempSiPMax"];

          id v56 = +[NSNumber numberWithShort:SWORD3(v388[0])];
          [v4 setObject:v56 forKeyedSubscript:@"currentDischargeMax"];

          id v57 = +[NSNumber numberWithUnsignedShort:WORD4(v388[0])];
          [v4 setObject:v57 forKeyedSubscript:@"batteryVendor"];

          id v58 = +[NSNumber numberWithUnsignedChar:BYTE10(v388[0])];
          [v4 setObject:v58 forKeyedSubscript:@"capacityMilestone_0"];

          id v59 = +[NSNumber numberWithUnsignedChar:BYTE11(v388[0])];
          [v4 setObject:v59 forKeyedSubscript:@"capacityMilestone_1"];

          id v60 = +[NSNumber numberWithUnsignedChar:BYTE12(v388[0])];
          [v4 setObject:v60 forKeyedSubscript:@"capacityMilestone_2"];

          int v61 = +[NSNumber numberWithUnsignedChar:BYTE13(v388[0])];
          [v4 setObject:v61 forKeyedSubscript:@"capacityMilestone_3"];

          __int16 v62 = +[NSNumber numberWithUnsignedChar:v389];
          [v4 setObject:v62 forKeyedSubscript:@"capacityMilestone_4"];

          uint64_t v63 = +[NSNumber numberWithUnsignedChar:BYTE1(v389)];
          [v4 setObject:v63 forKeyedSubscript:@"capacityMilestone_5"];

          int v64 = +[NSNumber numberWithUnsignedChar:BYTE14(v389)];
          [v4 setObject:v64 forKeyedSubscript:@"timeInField"];

          __int16 v65 = +[NSNumber numberWithUnsignedChar:HIBYTE(v389)];
          [v4 setObject:v65 forKeyedSubscript:@"timeInFieldAtCapacity"];

          sub_100381514(v66, @"timeAVoltageTempMatrix", 30, 2u, (uint64_t)v385 + 12, v4, 0);
          sub_100381514(v67, @"cycleCountAtCapacityMilestone", 6, 1u, (uint64_t)&v389 + 2, v4, 0);
          sub_100381514(v68, @"timeInFieldMilestone", 6, 1u, (uint64_t)&v389 + 8, v4, 0);
          break;
        case 12:
          if (v10 >= 0xA1)
          {
            id v69 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BC58(v69, v70, v71, v72, v73, v74, v75, v76);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          if (BYTE14(v385[0]) == 3)
          {
            if (*(_DWORD *)(v6 + 138))
            {
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
                sub_10075BB7C();
              }
            }
            else
            {
              v325 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v6 + 130) / 0x3CuLL];
              [v4 setObject:v325 forKeyedSubscript:@"budMileage"];

              v326 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)v385 + 10) / 0xE10uLL];
              [v4 setObject:v326 forKeyedSubscript:@"duration"];

              v327 = +[NSNumber numberWithUnsignedChar:3];
              [v4 setObject:v327 forKeyedSubscript:@"metricVersion"];

              uint64_t v328 = BYTE3(v385[1]);
              uint64_t v329 = BYTE4(v385[1]);
              unint64_t v330 = BYTE3(v385[1]) + (unint64_t)BYTE4(v385[1]);
              uint64_t v331 = BYTE5(v385[1]);
              v332 = +[NSNumber numberWithBool:v330 + BYTE5(v385[1]) != 0];
              [v4 setObject:v332 forKeyedSubscript:@"hasSuccess"];

              v333 = +[NSNumber numberWithUnsignedChar:v328];
              [v4 setObject:v333 forKeyedSubscript:@"successTableTop"];

              v334 = +[NSNumber numberWithUnsignedChar:v329];
              [v4 setObject:v334 forKeyedSubscript:@"successWired"];

              v335 = +[NSNumber numberWithUnsignedChar:v331];
              [v4 setObject:v335 forKeyedSubscript:@"successWireless"];

              v336 = +[NSNumber numberWithUnsignedChar:BYTE6(v385[1])];
              [v4 setObject:v336 forKeyedSubscript:@"failureStaticTableTop"];

              v337 = +[NSNumber numberWithUnsignedChar:BYTE11(v385[1])];
              [v4 setObject:v337 forKeyedSubscript:@"failureStaticWired"];

              v338 = +[NSNumber numberWithUnsignedChar:LOBYTE(v385[2])];
              [v4 setObject:v338 forKeyedSubscript:@"failureStaticWireless"];

              v339 = +[NSNumber numberWithUnsignedChar:BYTE7(v385[1])];
              [v4 setObject:v339 forKeyedSubscript:@"failureGyroTableTop"];

              v340 = +[NSNumber numberWithUnsignedChar:BYTE12(v385[1])];
              [v4 setObject:v340 forKeyedSubscript:@"failureGyroWired"];

              v341 = +[NSNumber numberWithUnsignedChar:BYTE1(v385[2])];
              [v4 setObject:v341 forKeyedSubscript:@"failureGyroWireless"];

              v342 = +[NSNumber numberWithUnsignedChar:BYTE8(v385[1])];
              [v4 setObject:v342 forKeyedSubscript:@"failureFlushTableTop"];

              v343 = +[NSNumber numberWithUnsignedChar:BYTE13(v385[1])];
              [v4 setObject:v343 forKeyedSubscript:@"failureFlushWired"];

              v344 = +[NSNumber numberWithUnsignedChar:BYTE2(v385[2])];
              [v4 setObject:v344 forKeyedSubscript:@"failureFlushWireless"];

              v345 = +[NSNumber numberWithUnsignedChar:BYTE9(v385[1])];
              [v4 setObject:v345 forKeyedSubscript:@"failureJammedTableTop"];

              v346 = +[NSNumber numberWithUnsignedChar:BYTE14(v385[1])];
              [v4 setObject:v346 forKeyedSubscript:@"failureJammedWired"];

              v347 = +[NSNumber numberWithUnsignedChar:BYTE3(v385[2])];
              [v4 setObject:v347 forKeyedSubscript:@"failureJammedWireless"];

              v348 = +[NSNumber numberWithUnsignedChar:BYTE10(v385[1])];
              [v4 setObject:v348 forKeyedSubscript:@"failureUserTableTop"];

              v349 = +[NSNumber numberWithUnsignedChar:HIBYTE(v385[1])];
              [v4 setObject:v349 forKeyedSubscript:@"failureUserWired"];

              v350 = +[NSNumber numberWithUnsignedChar:BYTE4(v385[2])];
              [v4 setObject:v350 forKeyedSubscript:@"failureUserWireless"];

              double v351 = fabs((double)*(__int16 *)((char *)&v385[2] + 5) * 0.00390625);
              double v352 = fabs((double)*(__int16 *)((char *)&v385[2] + 11) * 0.00390625);
              if (v351 < v352) {
                double v351 = v352;
              }
              double v353 = fabs((double)*(__int16 *)((char *)&v385[2] + 7) * 0.00390625);
              double v354 = fabs((double)*(__int16 *)((char *)&v385[2] + 13) * 0.00390625);
              if (v353 >= v354) {
                double v355 = v353;
              }
              else {
                double v355 = v354;
              }
              double v356 = fabs((double)*(__int16 *)((char *)&v385[2] + 9) * 0.00390625);
              double v357 = fabs((double)*(__int16 *)((char *)&v385[2] + 15) * 0.00390625);
              if (v356 >= v357) {
                double v358 = v356;
              }
              else {
                double v358 = v357;
              }
              v359 = +[NSNumber numberWithDouble:v351];
              [v4 setObject:v359 forKeyedSubscript:@"deltaGyttX"];

              v360 = +[NSNumber numberWithDouble:v355];
              [v4 setObject:v360 forKeyedSubscript:@"deltaGyttY"];

              v361 = +[NSNumber numberWithDouble:v358];
              [v4 setObject:v361 forKeyedSubscript:@"deltaGyttZ"];

              if (v330 == -v331) {
                +[NSNumber numberWithChar:BYTE3(v385[3])];
              }
              else {
              v362 = +[NSNumber numberWithChar:BYTE1(v385[3])];
              }
              [v4 setObject:v362 forKeyedSubscript:@"maxCalibrationTemperature"];

              if (v330 == -v331) {
                +[NSNumber numberWithChar:BYTE4(v385[3])];
              }
              else {
              v363 = +[NSNumber numberWithChar:BYTE2(v385[3])];
              }
              [v4 setObject:v363 forKeyedSubscript:@"minCalibrationTemperature"];

              v364 = +[NSNumber numberWithChar:BYTE5(v385[3])];
              [v4 setObject:v364 forKeyedSubscript:@"maxSessionTemperature"];

              v365 = +[NSNumber numberWithChar:BYTE6(v385[3])];
              [v4 setObject:v365 forKeyedSubscript:@"minSessionTemperature"];

              v366 = +[NSNumber numberWithInt:(SDWORD2(v385[3]) / 3600)];
              [v4 setObject:v366 forKeyedSubscript:@"calibrationInterval"];

              v367 = +[NSNumber numberWithUnsignedInt:HIDWORD(v385[3])];
              [v4 setObject:v367 forKeyedSubscript:@"numberOfInEarSessionFirstCal"];

              v368 = +[NSNumber numberWithUnsignedInt:v386];
              [v4 setObject:v368 forKeyedSubscript:@"numberOfInEarSessionFirstJam"];

              v369 = +[NSNumber numberWithUnsignedInt:DWORD1(v386)];
              [v4 setObject:v369 forKeyedSubscript:@"numberOfJams"];

              v370 = +[NSNumber numberWithUnsignedInt:DWORD2(v386) / 0xE10uLL];
              [v4 setObject:v370 forKeyedSubscript:@"durationLastJam"];

              unsigned int v371 = WORD6(v386);
              v372 = +[NSNumber numberWithBool:BYTE12(v386) & 1];
              [v4 setObject:v372 forKeyedSubscript:@"isFirstCalibration"];

              v373 = +[NSNumber numberWithBool:(v371 >> 1) & 1];
              [v4 setObject:v373 forKeyedSubscript:@"hasDMSession"];

              v374 = +[NSNumber numberWithBool:(v371 >> 2) & 1];
              [v4 setObject:v374 forKeyedSubscript:@"hasGyroJammedSession"];

              v375 = +[NSNumber numberWithBool:(v371 >> 3) & 1];
              [v4 setObject:v375 forKeyedSubscript:@"isFirstGyroJammed"];

              v376 = +[NSNumber numberWithBool:(v371 >> 8) & 1];
              [v4 setObject:v376 forKeyedSubscript:@"isCalibrated"];

              v377 = +[NSNumber numberWithBool:(v371 >> 9) & 1];
              [v4 setObject:v377 forKeyedSubscript:@"hasBeenGyroJammed"];

              v378 = +[NSNumber numberWithBool:(v371 >> 10) & 1];
              [v4 setObject:v378 forKeyedSubscript:@"isCurrentlyJammed"];

              CFStringRef v379 = @"Unknown";
              if (v371 >> 12 == 2) {
                CFStringRef v379 = @"Sovereign2";
              }
              if (v371 >> 12 == 1) {
                CFStringRef v380 = @"Sovereign";
              }
              else {
                CFStringRef v380 = v379;
              }
              [v4 setObject:v380 forKeyedSubscript:@"sensorModel"];
              v381 = +[NSNumber numberWithInt:v371 & 0x8F0];
              [v4 setObject:v381 forKeyedSubscript:@"status_unused"];

              sub_100381514(v382, @"unused_bytes_1", 32, 1u, (uint64_t)&v386 + 14, v4, 0);
              sub_100381514(v383, @"unused_bytes_2", 4, 4u, (uint64_t)&v389, v4, 0);
            }
          }
          else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
          {
            sub_10075BBEC();
          }
          break;
        case 13:
          if (v10 >= 0xA1)
          {
            char v77 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BCD0(v77, v78, v79, v80, v81, v82, v83, v84);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          long long v85 = +[NSNumber numberWithUnsignedShort:WORD5(v385[0])];
          [v4 setObject:v85 forKeyedSubscript:@"swipe_prediction_duration"];

          id v86 = +[NSNumber numberWithShort:SWORD6(v385[0])];
          [v4 setObject:v86 forKeyedSubscript:@"swipe_start"];

          id v87 = +[NSNumber numberWithShort:SHIWORD(v385[0])];
          [v4 setObject:v87 forKeyedSubscript:@"swipe_end"];

          long long v88 = +[NSNumber numberWithShort:SLOWORD(v385[1])];
          [v4 setObject:v88 forKeyedSubscript:@"touch_baseline_1"];

          uint64_t v89 = +[NSNumber numberWithShort:SWORD1(v385[1])];
          [v4 setObject:v89 forKeyedSubscript:@"touch_baseline_2"];

          id v90 = +[NSNumber numberWithShort:SWORD2(v385[1])];
          [v4 setObject:v90 forKeyedSubscript:@"touch_baseline_3"];

          id v91 = +[NSNumber numberWithShort:SWORD3(v385[1])];
          [v4 setObject:v91 forKeyedSubscript:@"force_peak"];

          id v92 = +[NSNumber numberWithShort:SWORD4(v385[1])];
          [v4 setObject:v92 forKeyedSubscript:@"touch_peak_1"];

          uint64_t v93 = +[NSNumber numberWithShort:SWORD5(v385[1])];
          [v4 setObject:v93 forKeyedSubscript:@"touch_peak_2"];

          id v94 = +[NSNumber numberWithShort:SWORD6(v385[1])];
          [v4 setObject:v94 forKeyedSubscript:@"touch_peak_3"];

          int v95 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[1] + 14)];
          [v4 setObject:v95 forKeyedSubscript:@"volume_feature_enabled"];

          unsigned int v96 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[2] + 2)];
          [v4 setObject:v96 forKeyedSubscript:@"consecutive_swipe_prediction_interval"];

          uint64_t v97 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[2] + 6)];
          [v4 setObject:v97 forKeyedSubscript:@"num_consecutive_swipes"];

          unsigned int v98 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[2] + 10)];
          [v4 setObject:v98 forKeyedSubscript:@"consecutive_swipe_pattern"];

          uint64_t v99 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[2] + 14)];
          [v4 setObject:v99 forKeyedSubscript:@"num_freq_hops"];

          uint64_t v100 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[3] + 2)];
          [v4 setObject:v100 forKeyedSubscript:@"percentage_time_on_high_freq"];

          unsigned int v101 = +[NSNumber numberWithInt:*(unsigned int *)((char *)&v385[3] + 6)];
          [v4 setObject:v101 forKeyedSubscript:@"max_noise_low_freq"];

          uint64_t v102 = +[NSNumber numberWithInt:*(unsigned int *)((char *)&v385[3] + 10)];
          [v4 setObject:v102 forKeyedSubscript:@"max_noise_high_freq"];

          sub_100381514(v103, @"unused_bytes_1", 12, 4u, (uint64_t)&v385[3] + 14, v4, 0);
          sub_100381514(v104, @"unused_bytes_2", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 14:
          if (v10 >= 0xA1)
          {
            v230 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BD48(v230, v231, v232, v233, v234, v235, v236, v237);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          v238 = +[NSNumber numberWithShort:SWORD5(v385[0])];
          [v4 setObject:v238 forKeyedSubscript:@"force_cap_c2_delta"];

          v239 = +[NSNumber numberWithShort:SWORD6(v385[0])];
          [v4 setObject:v239 forKeyedSubscript:@"force_cap_c2"];

          v240 = +[NSNumber numberWithShort:SHIWORD(v385[0])];
          [v4 setObject:v240 forKeyedSubscript:@"force_cap_c1_delta"];

          v241 = +[NSNumber numberWithShort:SLOWORD(v385[1])];
          [v4 setObject:v241 forKeyedSubscript:@"force_cap_c1"];

          v242 = +[NSNumber numberWithShort:SWORD1(v385[1])];
          [v4 setObject:v242 forKeyedSubscript:@"water_ingress_count_high_cap"];

          v243 = +[NSNumber numberWithShort:SWORD2(v385[1])];
          [v4 setObject:v243 forKeyedSubscript:@"water_ingress_count_low_cap"];

          sub_100381514(v244, @"unused_bytes_1", 4, 2u, (uint64_t)&v385[1] + 6, v4, 0);
          sub_100381514(v245, @"unused_bytes_2", 20, 4u, (uint64_t)&v385[1] + 14, v4, 0);
          sub_100381514(v246, @"unused_bytes_3", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 15:
          if (v10 >= 0xA1)
          {
            __int16 v105 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BDC0(v105, v106, v107, v108, v109, v110, v111, v112);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          uint64_t v113 = +[NSNumber numberWithUnsignedShort:WORD5(v385[0])];
          [v4 setObject:v113 forKeyedSubscript:@"timeSpentAtLowerSoC"];

          unsigned int v114 = +[NSNumber numberWithUnsignedShort:WORD6(v385[0])];
          [v4 setObject:v114 forKeyedSubscript:@"timeSpentAtHigherSoC"];

          long long v115 = +[NSNumber numberWithUnsignedChar:BYTE14(v385[0])];
          [v4 setObject:v115 forKeyedSubscript:@"engagementEvents"];

          unsigned int v116 = +[NSNumber numberWithUnsignedChar:HIBYTE(v385[0])];
          [v4 setObject:v116 forKeyedSubscript:@"underchargeEvents"];

          v117 = +[NSNumber numberWithUnsignedChar:LOBYTE(v385[1])];
          [v4 setObject:v117 forKeyedSubscript:@"chargingEvents"];

          unsigned int v118 = +[NSNumber numberWithUnsignedChar:BYTE1(v385[1])];
          [v4 setObject:v118 forKeyedSubscript:@"budSocAtLastEngagement"];

          long long v119 = +[NSNumber numberWithUnsignedShort:WORD1(v385[1])];
          [v4 setObject:v119 forKeyedSubscript:@"medianTimeBetweenUses"];

          unsigned int v120 = +[NSNumber numberWithUnsignedShort:WORD2(v385[1])];
          [v4 setObject:v120 forKeyedSubscript:@"stdDevTimeBetweenUses"];

          long long v121 = +[NSNumber numberWithUnsignedShort:WORD3(v385[1])];
          [v4 setObject:v121 forKeyedSubscript:@"featureEnabledStatus"];

          sub_100381514(v122, @"unused_bytes_1", 3, 2u, (uint64_t)&v385[1] + 8, v4, 0);
          sub_100381514(v123, @"unused_bytes_2", 20, 4u, (uint64_t)&v385[1] + 14, v4, 0);
          sub_100381514(v124, @"unused_bytes_3", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 16:
          if (v10 >= 0xA1)
          {
            v247 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BE38(v247, v248, v249, v250, v251, v252, v253, v254);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          v255 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)v385 + 10)];
          [v4 setObject:v255 forKeyedSubscript:@"nvram_erase_count"];

          v256 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)v385 + 14)];
          [v4 setObject:v256 forKeyedSubscript:@"nvram_corruption_single_bank"];

          v257 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[1] + 2)];
          [v4 setObject:v257 forKeyedSubscript:@"nvram_corruption_both_banks"];

          v258 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[1] + 6)];
          [v4 setObject:v258 forKeyedSubscript:@"syscfg_corruption_count"];

          if (BYTE1(v384) >= 0xAu)
          {
            v260 = +[NSNumber numberWithUnsignedChar:HIBYTE(v385[1])];
            [v4 setObject:v260 forKeyedSubscript:@"has_limited_logging_ever_on"];

            v261 = +[NSNumber numberWithUnsignedChar:BYTE14(v385[1])];
            [v4 setObject:v261 forKeyedSubscript:@"vendor_id"];
          }
          sub_100381514(v259, @"unused_bytes_1", 2, 2u, (uint64_t)&v385[1] + 10, v4, 0);
          sub_100381514(v262, @"unused_bytes_2", 20, 4u, (uint64_t)&v385[2], v4, 0);
          sub_100381514(v263, @"unused_bytes_3", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 17:
          if (v10 >= 0xA1)
          {
            long long v125 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BEB0(v125, v126, v127, v128, v129, v130, v131, v132);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          long long v133 = +[NSNumber numberWithUnsignedShort:WORD5(v385[0])];
          [v4 setObject:v133 forKeyedSubscript:@"start_unloaded_vbat_mv"];

          uint32x2_t v134 = +[NSNumber numberWithUnsignedShort:WORD6(v385[0])];
          [v4 setObject:v134 forKeyedSubscript:@"start_loaded_vbat_mv"];

          long long v135 = +[NSNumber numberWithUnsignedShort:HIWORD(v385[0])];
          [v4 setObject:v135 forKeyedSubscript:@"unloaded_vbat_mv"];

          long long v136 = +[NSNumber numberWithUnsignedShort:LOWORD(v385[1])];
          [v4 setObject:v136 forKeyedSubscript:@"loaded_vbat_mv"];

          std::string v137 = +[NSNumber numberWithUnsignedLongLong:*(void *)((char *)&v385[1] + 2)];
          [v4 setObject:v137 forKeyedSubscript:@"time_elapsed_us"];

          sub_100381514(v138, @"unused_bytes_1", 2, 2u, (uint64_t)&v385[1] + 10, v4, 0);
          sub_100381514(v139, @"unused_bytes_2", 20, 4u, (uint64_t)&v385[1] + 14, v4, 0);
          sub_100381514(v140, @"unused_bytes_3", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 18:
          if (v10 >= 0xA1)
          {
            v264 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BF28(v264, v265, v266, v267, v268, v269, v270, v271);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          v272 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)((char *)v385 + 11)];
          [v4 setObject:v272 forKeyedSubscript:@"duration"];

          v273 = +[NSNumber numberWithUnsignedChar:BYTE10(v385[0])];
          [v4 setObject:v273 forKeyedSubscript:@"user_awake"];

          v274 = +[NSNumber numberWithUnsignedChar:BYTE13(v385[0])];
          [v4 setObject:v274 forKeyedSubscript:@"hour"];

          sub_100381514(v275, @"unused_bytes_1", 48, 2u, (uint64_t)v385 + 14, v4, 0);
          sub_100381514(v276, @"unused_bytes_2", 4, 4u, (uint64_t)&v389, v4, 0);
          break;
        case 19:
          if (v10 >= 0xA1)
          {
            v277 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
              sub_10075BFA0(v277, v278, v279, v280, v281, v282, v283, v284);
            }
            uint64_t v6 = *v5;
          }
          long long v389 = 0u;
          long long v387 = 0u;
          memset(v388, 0, sizeof(v388));
          long long v386 = 0u;
          long long v384 = 0u;
          memset(v385, 0, sizeof(v385));
          memcpy(&v384, (const void *)v6, v10);
          v285 = +[NSNumber numberWithUnsignedShort:WORD5(v385[0])];
          [v4 setObject:v285 forKeyedSubscript:@"num_cd_trigger"];

          v286 = +[NSNumber numberWithUnsignedShort:WORD6(v385[0])];
          [v4 setObject:v286 forKeyedSubscript:@"num_false_start"];

          v287 = +[NSNumber numberWithUnsignedShort:HIWORD(v385[0])];
          [v4 setObject:v287 forKeyedSubscript:@"num_false_transition"];

          v288 = +[NSNumber numberWithUnsignedChar:LOBYTE(v385[1])];
          [v4 setObject:v288 forKeyedSubscript:@"num_cd_user_setting_off"];

          v289 = +[NSNumber numberWithUnsignedChar:BYTE1(v385[1])];
          [v4 setObject:v289 forKeyedSubscript:@"num_cd_user_setting_on"];

          v290 = +[NSNumber numberWithUnsignedShort:WORD1(v385[1])];
          [v4 setObject:v290 forKeyedSubscript:@"num_cd_reset"];

          v291 = +[NSNumber numberWithUnsignedShort:WORD2(v385[1])];
          [v4 setObject:v291 forKeyedSubscript:@"num_cd_pause"];

          v292 = +[NSNumber numberWithUnsignedShort:WORD3(v385[1])];
          [v4 setObject:v292 forKeyedSubscript:@"num_cd_unpause"];

          v293 = +[NSNumber numberWithUnsignedShort:WORD4(v385[1])];
          [v4 setObject:v293 forKeyedSubscript:@"num_cd_pause_siri"];

          v294 = +[NSNumber numberWithUnsignedShort:WORD5(v385[1])];
          [v4 setObject:v294 forKeyedSubscript:@"num_cd_pause_hfp"];

          v295 = +[NSNumber numberWithUnsignedShort:WORD6(v385[1])];
          [v4 setObject:v295 forKeyedSubscript:@"num_cd_pause_sourcepause"];

          v296 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[1] + 14)];
          [v4 setObject:v296 forKeyedSubscript:@"total_cd_pause_duration_s"];

          v297 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[2] + 2)];
          [v4 setObject:v297 forKeyedSubscript:@"total_cd_user_setting_on_duration_s"];

          v298 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[2] + 6)];
          [v4 setObject:v298 forKeyedSubscript:@"total_cd_session_duration_s"];

          v299 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v385[2] + 10)];
          [v4 setObject:v299 forKeyedSubscript:@"total_primary_use_duration_s"];

          v300 = +[NSNumber numberWithUnsignedChar:BYTE14(v385[2])];
          [v4 setObject:v300 forKeyedSubscript:@"qad_sh_600_1200_ms"];

          v301 = +[NSNumber numberWithUnsignedChar:HIBYTE(v385[2])];
          [v4 setObject:v301 forKeyedSubscript:@"qad_sh_1200_1800_ms"];

          v302 = +[NSNumber numberWithUnsignedChar:LOBYTE(v385[3])];
          [v4 setObject:v302 forKeyedSubscript:@"qad_sh_1800_2400_ms"];

          v303 = +[NSNumber numberWithUnsignedChar:BYTE1(v385[3])];
          [v4 setObject:v303 forKeyedSubscript:@"qad_sh_2400_3000_ms"];

          v304 = +[NSNumber numberWithUnsignedChar:BYTE2(v385[3])];
          [v4 setObject:v304 forKeyedSubscript:@"qad_sh_3200_3600_ms"];

          v305 = +[NSNumber numberWithUnsignedChar:BYTE3(v385[3])];
          [v4 setObject:v305 forKeyedSubscript:@"qad_sh_3600_4200_ms"];

          v306 = +[NSNumber numberWithUnsignedChar:BYTE4(v385[3])];
          [v4 setObject:v306 forKeyedSubscript:@"qad_md_600_1200_ms"];

          v307 = +[NSNumber numberWithUnsignedChar:BYTE5(v385[3])];
          [v4 setObject:v307 forKeyedSubscript:@"qad_md_1200_1800_ms"];

          v308 = +[NSNumber numberWithUnsignedChar:BYTE6(v385[3])];
          [v4 setObject:v308 forKeyedSubscript:@"qad_md_1800_2400_ms"];

          v309 = +[NSNumber numberWithUnsignedChar:BYTE7(v385[3])];
          [v4 setObject:v309 forKeyedSubscript:@"qad_md_2400_3000_ms"];

          v310 = +[NSNumber numberWithUnsignedChar:BYTE8(v385[3])];
          [v4 setObject:v310 forKeyedSubscript:@"qad_md_3200_3600_ms"];

          v311 = +[NSNumber numberWithUnsignedChar:BYTE9(v385[3])];
          [v4 setObject:v311 forKeyedSubscript:@"qad_md_3600_4200_ms"];

          v312 = +[NSNumber numberWithUnsignedChar:BYTE10(v385[3])];
          [v4 setObject:v312 forKeyedSubscript:@"qad_lg_600_1200_ms"];

          v313 = +[NSNumber numberWithUnsignedChar:BYTE11(v385[3])];
          [v4 setObject:v313 forKeyedSubscript:@"qad_lg_1200_1800_ms"];

          v314 = +[NSNumber numberWithUnsignedChar:BYTE12(v385[3])];
          [v4 setObject:v314 forKeyedSubscript:@"qad_lg_1800_2400_ms"];

          v315 = +[NSNumber numberWithUnsignedChar:BYTE13(v385[3])];
          [v4 setObject:v315 forKeyedSubscript:@"qad_lg_2400_3000_ms"];

          v316 = +[NSNumber numberWithUnsignedChar:BYTE14(v385[3])];
          [v4 setObject:v316 forKeyedSubscript:@"qad_lg_3200_3600_ms"];

          v317 = +[NSNumber numberWithUnsignedChar:HIBYTE(v385[3])];
          [v4 setObject:v317 forKeyedSubscript:@"qad_lg_3600_4200_ms"];

          v318 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)v388 + 14)];
          [v4 setObject:v318 forKeyedSubscript:@"sw_version_ext"];

          v319 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v388[1] + 2)];
          [v4 setObject:v319 forKeyedSubscript:@"bud_mileage"];

          v320 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v388[1] + 6)];
          [v4 setObject:v320 forKeyedSubscript:@"feature_flags"];

          v321 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)((char *)&v388[1] + 10)];
          [v4 setObject:v321 forKeyedSubscript:@"error_code_ext"];

          v322 = +[NSNumber numberWithUnsignedShort:HIWORD(v388[1])];
          [v4 setObject:v322 forKeyedSubscript:@"hw_version"];

          sub_100381514(v323, @"unused_bytes_1", 23, 2u, (uint64_t)&v386, v4, 0);
          sub_100381514(v324, @"unused_bytes_2", 4, 2u, (uint64_t)&v389, v4, 0);
          break;
        default:
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10075B8BC();
          }
          break;
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_10075C018();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075C084();
  }
}

void sub_10038D984(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

#error "10038E584: too big function (funcsize=0)"

void sub_1003A413C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003A9E5C(uint64_t a1, int a2, int *a3)
{
  switch(a2)
  {
    case 0:
      int v3 = 42;
      goto LABEL_24;
    case 1:
      int v3 = 39;
      goto LABEL_24;
    case 2:
      int v3 = 38;
      goto LABEL_24;
    case 3:
      int v3 = 29;
      goto LABEL_24;
    case 4:
      int v3 = 37;
      goto LABEL_24;
    case 5:
      int v3 = 34;
      goto LABEL_24;
    case 6:
      int v3 = 35;
      goto LABEL_24;
    case 7:
      int v3 = 40;
      goto LABEL_24;
    case 8:
      int v3 = 41;
      goto LABEL_24;
    case 9:
      int v3 = 28;
      goto LABEL_24;
    case 10:
      int v3 = 26;
      goto LABEL_24;
    case 11:
      int v3 = 31;
      goto LABEL_24;
    case 12:
      int v3 = 33;
      goto LABEL_24;
    case 13:
      int v3 = 44;
      goto LABEL_24;
    case 14:
      int v3 = 45;
      goto LABEL_24;
    case 15:
      int v3 = 36;
      goto LABEL_24;
    case 16:
      int v3 = 32;
      goto LABEL_24;
    case 17:
      int v3 = 27;
      goto LABEL_24;
    case 18:
      int v3 = 43;
      goto LABEL_24;
    case 19:
      int v3 = 30;
LABEL_24:
      *a3 = v3;
      BOOL result = 1;
      break;
    default:
      BOOL result = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_10075C128();
        BOOL result = 0;
      }
      break;
  }
  return result;
}

CFStringRef sub_1003A9FCC(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x7B) {
    return @"Unknown";
  }
  else {
    return (const __CFString *)*((void *)&off_1009AA8C8 + (int)a2);
  }
}

void sub_1003A9FF8(uint64_t a1, unsigned __int16 *a2)
{
  v31[0] = @"haBrand";
  id v4 = +[NSNumber numberWithUnsignedShort:*a2];
  v32[0] = v4;
  v31[1] = @"leaVersion";
  id v5 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 2)];
  v32[1] = v5;
  v31[2] = @"codecId";
  uint64_t v6 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 3)];
  void v32[2] = v6;
  void v31[3] = @"streamType";
  uint64_t v7 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 4)];
  void v32[3] = v7;
  v31[4] = @"duration";
  int v8 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 2)];
  v32[4] = v8;
  uint64_t v9 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:5];
  unsigned int v10 = +[NSMutableDictionary dictionaryWithDictionary:v9];

  int v11 = *((unsigned __int8 *)a2 + 12);
  if (v11 == 2)
  {
    uint64_t v17 = +[NSNumber numberWithShort:(__int16)a2[7]];
    [v10 setObject:v17 forKeyedSubscript:@"avgRssiRight"];

    uint64_t v18 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 4)];
    [v10 setObject:v18 forKeyedSubscript:@"reTxRateRight"];

    id v19 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 5)];
    [v10 setObject:v19 forKeyedSubscript:@"txFailureRateRight"];

    uint64_t v20 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 6)];
    [v10 setObject:v20 forKeyedSubscript:@"rxPerRight"];

    uint64_t v16 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 7)];
    [v10 setObject:v16 forKeyedSubscript:@"rxMissingRateRight"];
  }
  else
  {
    if (v11 != 1) {
      goto LABEL_6;
    }
    uint64_t v12 = +[NSNumber numberWithShort:(__int16)a2[7]];
    [v10 setObject:v12 forKeyedSubscript:@"avgRssiLeft"];

    uint64_t v13 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 4)];
    [v10 setObject:v13 forKeyedSubscript:@"reTxRateLeft"];

    uint64_t v14 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 5)];
    [v10 setObject:v14 forKeyedSubscript:@"txFailureRateLeft"];

    uint64_t v15 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 6)];
    [v10 setObject:v15 forKeyedSubscript:@"rxPerLeft"];

    uint64_t v16 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 7)];
    [v10 setObject:v16 forKeyedSubscript:@"rxMissingRateLeft"];
  }

LABEL_6:
  int v21 = *((unsigned __int8 *)a2 + 32);
  if (v21 == 2)
  {
    int v27 = +[NSNumber numberWithShort:(__int16)a2[17]];
    [v10 setObject:v27 forKeyedSubscript:@"avgRssiRight"];

    uint64_t v28 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 9)];
    [v10 setObject:v28 forKeyedSubscript:@"reTxRateRight"];

    uint64_t v29 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 10)];
    [v10 setObject:v29 forKeyedSubscript:@"txFailureRateRight"];

    uint64_t v30 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 11)];
    [v10 setObject:v30 forKeyedSubscript:@"rxPerRight"];

    int v26 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 12)];
    [v10 setObject:v26 forKeyedSubscript:@"rxMissingRateRight"];
    goto LABEL_10;
  }
  if (v21 == 1)
  {
    id v22 = +[NSNumber numberWithShort:(__int16)a2[17]];
    [v10 setObject:v22 forKeyedSubscript:@"avgRssiLeft"];

    id v23 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 9)];
    [v10 setObject:v23 forKeyedSubscript:@"reTxRateLeft"];

    id v24 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 10)];
    [v10 setObject:v24 forKeyedSubscript:@"txFailureRateLeft"];

    uint64_t v25 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 11)];
    [v10 setObject:v25 forKeyedSubscript:@"rxPerLeft"];

    int v26 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)a2 + 12)];
    [v10 setObject:v26 forKeyedSubscript:@"rxMissingRateLeft"];
LABEL_10:
  }
  sub_10038094C(a1, 0x5Du, v10);
}

void sub_1003AA528(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AA67C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003AA700;
  v5[3] = &unk_100997570;
  v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1003AA700(uint64_t a1)
{
  id v2 = *(unsigned char **)(a1 + 32);
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(a1 + 40);
    *(_DWORD *)long long buf = 67109120;
    int v15 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "updateBTPowerStateMonitorEvent: eventType = %d", buf, 8u);
  }
  switch(*(_DWORD *)(a1 + 40))
  {
    case 1:
      if (!v2[681])
      {
        id v5 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BT power state pre-SU is ON, report metrics", buf, 2u);
        }
        char v6 = -1;
        goto LABEL_29;
      }
      break;
    case 2:
      if (!v2[681])
      {
        uint64_t v7 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BT power state pre-SU is OFF, start monitor timer", buf, 2u);
        }
        sub_1003AAAFC((uint64_t)v2, 0x1Cu);
        goto LABEL_24;
      }
      break;
    case 3:
      if (v2[681] == 1 && v2[684])
      {
        unsigned int v8 = v2[682] - 1;
        uint64_t v9 = qword_100A19E50;
        if (v8 > 0x1B)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10075C1FC();
          }
          char v6 = 0;
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "BT power state metrics monitor timer is active and BT power off request is invoked from BT Setting, report metrics", buf, 2u);
          }
          char v6 = 29 - v2[682];
        }
        sub_1003AAAFC((uint64_t)v2, 0);
        xpc_activity_unregister("com.apple.Bluetooth.PowerStateMonitor");
        v2[684] = 0;
        v2[681] = 0;
        if (v8 < 0x1C) {
LABEL_29:
        }
          sub_1003AACA8((uint64_t)v2, v6);
      }
      break;
    case 4:
      if (!v2[681] && v2[682] - 1 <= 0x1B)
      {
        unsigned int v10 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = v2[682];
          *(_DWORD *)long long buf = 67109120;
          int v15 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Recover monitor timer for BT power state metrics, numOfDays = %d", buf, 8u);
        }
LABEL_24:
        xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
        xpc_dictionary_set_BOOL(v12, XPC_ACTIVITY_REPEATING, 1);
        xpc_dictionary_set_int64(v12, XPC_ACTIVITY_DELAY, XPC_ACTIVITY_INTERVAL_1_DAY);
        xpc_dictionary_set_int64(v12, XPC_ACTIVITY_GRACE_PERIOD, XPC_ACTIVITY_INTERVAL_1_MIN);
        xpc_dictionary_set_string(v12, XPC_ACTIVITY_PRIORITY, XPC_ACTIVITY_PRIORITY_MAINTENANCE);
        handler[0] = _NSConcreteStackBlock;
        handler[1] = 3221225472;
        handler[2] = sub_1003AAC24;
        handler[3] = &unk_1009AA3F8;
        handler[4] = v2;
        xpc_activity_register("com.apple.Bluetooth.PowerStateMonitor", v12, handler);
        v2[681] = 1;
        v2[684] = 1;
      }
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075C190();
      }
      break;
  }
}

void sub_1003AAAD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AAAFC(uint64_t a1, unsigned int a2)
{
  char valuePtr = a2;
  if (*(unsigned __int8 *)(a1 + 682) != a2)
  {
    int v3 = qword_100A19E50;
    if (a2 < 0x1D)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        unsigned int v8 = a2;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "writeBTPowerStateMonitorNumOfDays : numOfDays %d", buf, 8u);
      }
      *(unsigned char *)(a1 + 682) = a2;
      CFNumberRef v5 = CFNumberCreate(kCFAllocatorDefault, kCFNumberCharType, &valuePtr);
      CFPreferencesSetAppValue(@"BTPowerStateMonitorNumOfDays", v5, @"com.apple.BTServer");
      CFPreferencesAppSynchronize(@"com.apple.BTServer");
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
    {
      sub_10075C268();
    }
  }
}

void sub_1003AAC24(uint64_t a1)
{
}

void sub_1003AAC2C(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003AAEF8;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003AACA8(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003AADC0;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1003AAD2C(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003AADB0;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1003AADB0(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 683) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1003AADC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 40);
    *(_DWORD *)long long buf = 67109120;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "sendBTPowerStatePostSUMetrics: numOfDaysForBTReTurnedOff = %d", buf, 8u);
  }
  CFNumberRef v5 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a1 + 40), @"NumOfDaysForBTReTurnedOff"];
  unsigned int v8 = v5;
  char v6 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

  sub_10038094C(v2, 0x41u, v6);
}

void sub_1003AAED4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AAEF8(uint64_t a1)
{
  uint64_t v1 = *(unsigned __int8 **)(a1 + 32);
  if (!v1[683])
  {
    int v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v7) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT is turned off by non-BT settings clients, stop metrics monitoring", (uint8_t *)&v7, 2u);
    }
    goto LABEL_14;
  }
  unsigned int v2 = v1[682];
  if (v2 >= 0x1D)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075C1FC();
    }
LABEL_14:
    sub_1003AAAFC((uint64_t)v1, 0);
    if (v1[684])
    {
      xpc_activity_unregister("com.apple.Bluetooth.PowerStateMonitor");
      v1[684] = 0;
    }
    return;
  }
  int v4 = qword_100A19E50;
  BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (!v2)
  {
    if (v5)
    {
      int v7 = 67109120;
      int v8 = 28;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "btPowerStateMonitorTimerHandler : BT is not re-turned off manually within %d days, report metrics", (uint8_t *)&v7, 8u);
    }
    sub_1003AACA8((uint64_t)v1, 0);
    goto LABEL_14;
  }
  if (v5)
  {
    int v6 = v1[682];
    int v7 = 67109120;
    int v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "btPowerStateMonitorTimerHandler : Keep timer alive, numOfDays = %d", (uint8_t *)&v7, 8u);
  }
  sub_1003AAAFC((uint64_t)v1, (v1[682] - 1));
}

void sub_1003AB0B4(uint64_t a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  v18[0] = @"DisconnectReason";
  uint64_t v17 = +[NSNumber numberWithUnsignedInt:a2[4]];
  v19[0] = v17;
  v18[1] = @"DURATION";
  uint64_t v14 = +[NSNumber numberWithUnsignedInt:a2[3]];
  v19[1] = v14;
  void v18[2] = @"IsA2DPStreaming";
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AA6C8);
  }
  int v15 = +[NSNumber numberWithBool:*((unsigned __int8 *)off_1009F8150 + 197)];
  void v19[2] = v15;
  void v18[3] = @"IsHFPActive";
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AA6C8);
  }
  uint64_t v16 = +[NSNumber numberWithBool:*((unsigned __int8 *)off_1009F8150 + 198)];
  void v19[3] = v16;
  void v18[4] = @"IsLEAStreaming";
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AA6C8);
  }
  int v4 = +[NSNumber numberWithBool:*((unsigned __int8 *)off_1009F8150 + 199)];
  void v19[4] = v4;
  v18[5] = @"IsApplePencilConnected";
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
  }
  BOOL v5 = +[NSNumber numberWithBool:sub_1006C7E14((uint64_t)off_1009F7ED8)];
  v19[5] = v5;
  v18[6] = @"NumberOfAppleMouseOrTrackpadConnected";
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AA668);
  }
  int v6 = +[NSNumber numberWithUnsignedInt:sub_1004AC764((uint64_t)off_1009F7EF8)];
  void v19[6] = v6;
  v18[7] = @"NumberOfAppleKeyboardConnected";
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AA668);
  }
  int v7 = +[NSNumber numberWithUnsignedInt:sub_1004AC86C((uint64_t)off_1009F7EF8)];
  v19[7] = v7;
  v18[8] = @"PER";
  int v8 = +[NSNumber numberWithInt:a2[2]];
  v19[8] = v8;
  v18[9] = @"PID";
  uint64_t v9 = +[NSNumber numberWithUnsignedInt:HIWORD(v3)];
  v19[9] = v9;
  v18[10] = @"RSSI";
  int v10 = +[NSNumber numberWithInt:a2[1]];
  v19[10] = v10;
  v18[11] = @"VID";
  int v11 = +[NSNumber numberWithUnsignedInt:(unsigned __int16)v3];
  v19[11] = v11;
  xpc_object_t v12 = +[NSDictionary dictionaryWithObjects:v19 forKeys:v18 count:12];

  sub_10038094C(a1, 0x59u, v12);
}

void sub_1003AB488(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AB548(uint64_t a1, void *a2)
{
}

void sub_1003AB554(uint64_t a1, unsigned int a2, void *a3, uint64_t a4, uint64_t a5)
{
  id v9 = a3;
  int v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 8) {
      int v11 = "?";
    }
    else {
      int v11 = off_1009AACA8[a2];
    }
    *(_DWORD *)long long buf = 136316162;
    uint64_t v20 = v11;
    __int16 v21 = 1024;
    unsigned int v22 = a2;
    __int16 v23 = 2112;
    id v24 = v9;
    __int16 v25 = 1024;
    int v26 = a4;
    __int16 v27 = 1024;
    int v28 = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Submitting EN state metric: version %s (%u), inSubdivisionCode %@ inLegalConsentPageCount %d inAvailabilityAlertCount %d ", buf, 0x28u);
  }
  v17[0] = @"Version";
  if (a2 > 8) {
    xpc_object_t v12 = "?";
  }
  else {
    xpc_object_t v12 = off_1009AACA8[a2];
  }
  uint64_t v13 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v12, v17[0]);
  v18[0] = v13;
  v18[1] = v9;
  v17[1] = @"subdivisionCode";
  v17[2] = @"LegalConsentPageCount";
  uint64_t v14 = +[NSNumber numberWithUnsignedChar:a4];
  void v18[2] = v14;
  void v17[3] = @"AvailabilityAlertCount";
  int v15 = +[NSNumber numberWithUnsignedChar:a5];
  void v18[3] = v15;
  uint64_t v16 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:4];

  sub_10038094C(a1, 0x4Eu, v16);
}

void sub_1003AB740(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AB788(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, void *a5, void *a6, uint64_t a7)
{
  id v13 = a5;
  id v14 = a6;
  int v15 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (a2 > 4) {
      uint64_t v16 = "?";
    }
    else {
      uint64_t v16 = off_1009AACF0[a2];
    }
    uint64_t v17 = "no";
    *(_DWORD *)long long buf = 136316674;
    uint64_t v29 = v16;
    __int16 v30 = 1024;
    if (a3) {
      uint64_t v18 = "yes";
    }
    else {
      uint64_t v18 = "no";
    }
    unsigned int v31 = a2;
    if (a4) {
      id v19 = "yes";
    }
    else {
      id v19 = "no";
    }
    __int16 v32 = 2080;
    if (a7) {
      uint64_t v17 = "yes";
    }
    uint64_t v33 = v18;
    __int16 v34 = 2080;
    uint64_t v35 = v19;
    __int16 v36 = 2112;
    id v37 = v13;
    __int16 v38 = 2112;
    id v39 = v14;
    __int16 v40 = 2080;
    uint64_t v41 = v17;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Submitting EN onboarding metric: trigger %s (%u), completed %s, firstTime %s countryCode %@ subDiv %@ inlegalConsent %s", buf, 0x44u);
  }
  v26[0] = @"ENOnboardingTrigger";
  if (a2 > 4) {
    uint64_t v20 = "?";
  }
  else {
    uint64_t v20 = off_1009AACF0[a2];
  }
  __int16 v21 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v20, v26[0]);
  v27[0] = v21;
  v26[1] = @"Completed";
  unsigned int v22 = +[NSNumber numberWithBool:a3];
  v27[1] = v22;
  v26[2] = @"FirstAttempt";
  __int16 v23 = +[NSNumber numberWithBool:a4];
  v27[2] = v23;
  void v27[3] = v13;
  void v26[3] = @"CountryCode";
  v26[4] = @"subdivisionCode";
  v27[4] = v14;
  v26[5] = @"sawLegalConsentPage";
  id v24 = +[NSNumber numberWithBool:a7];
  v27[5] = v24;
  __int16 v25 = +[NSDictionary dictionaryWithObjects:v27 forKeys:v26 count:6];

  sub_10038094C(a1, 0x4Du, v25);
}

void sub_1003ABA10(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ABA68(uint64_t a1, int a2)
{
  int v4 = (id)qword_100A19E50;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v10 = ENErrorMetricTypeToString();
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Submitting EN error metric: error %s (%u)", buf, 0x12u);
  }

  BOOL v5 = +[NSString stringWithUTF8String:ENErrorMetricTypeToString(), @"ErrorType"];
  int v8 = v5;
  int v6 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

  sub_10038094C(a1, 0x4Cu, v6);
}

void sub_1003ABBA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ABBD0(uint64_t a1, id a2)
{
  id v3 = objc_retainBlock(a2);
  int v4 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = v3;
}

uint64_t sub_1003ABC10(int a1)
{
  int v1 = a1 - 1;
  uint64_t result = 0;
  switch(v1)
  {
    case 0:
      return result;
    case 1:
      uint64_t result = 1;
      break;
    case 3:
      uint64_t result = 2;
      break;
    case 7:
      uint64_t result = 3;
      break;
    default:
      uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_10075C2D4();
        uint64_t result = 0;
      }
      break;
  }
  return result;
}

unsigned char *sub_1003ABCDC(unsigned char *result, uint64_t a2, char a3, int a4)
{
  switch(a4)
  {
    case 1:
      result[574] = a3;
      break;
    case 2:
      result[573] = a3;
      break;
    case 3:
      result[576] = a3;
      break;
    case 4:
      result[575] = a3;
      break;
    default:
      return result;
  }
  return result;
}

unsigned char *sub_1003ABD38(unsigned char *result, uint64_t a2, char a3, int a4)
{
  switch(a4)
  {
    case 1:
      result[534] = a3;
      break;
    case 2:
      result[533] = a3;
      break;
    case 3:
      result[536] = a3;
      break;
    case 4:
      result[535] = a3;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1003ABD94(uint64_t result, char a2)
{
  *(unsigned char *)(result + 577) = a2;
  return result;
}

uint64_t sub_1003ABD9C(uint64_t result, char a2)
{
  *(unsigned char *)(result + 572) = a2;
  return result;
}

void sub_1003ABDA4(unsigned __int8 *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = v6;
  uint64_t v29 = v5;
  if (v5 && v6)
  {
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    id v8 = v5;
    id v9 = [v8 countByEnumeratingWithState:&v30 objects:v36 count:16];
    if (v9)
    {
      uint64_t v11 = *(void *)v31;
      *(void *)&long long v10 = 138412290;
      long long v28 = v10;
      do
      {
        for (uint64_t i = 0; i != v9; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v31 != v11) {
            objc_enumerationMutation(v8);
          }
          id v13 = *(void **)(*((void *)&v30 + 1) + 8 * i);
          switch(objc_msgSend(v13, "intValue", v28))
          {
            case 0u:
              id v14 = +[NSNumber numberWithBool:a1[573]];
              [v7 setObject:v14 forKeyedSubscript:v13];

              break;
            case 1u:
              uint64_t v18 = +[NSNumber numberWithBool:a1[574]];
              [v7 setObject:v18 forKeyedSubscript:v13];

              break;
            case 2u:
              int v15 = +[NSNumber numberWithBool:a1[575]];
              [v7 setObject:v15 forKeyedSubscript:v13];

              break;
            case 3u:
              id v19 = +[NSNumber numberWithBool:a1[576]];
              [v7 setObject:v19 forKeyedSubscript:v13];

              break;
            case 4u:
              uint64_t v16 = +[NSNumber numberWithBool:a1[577]];
              [v7 setObject:v16 forKeyedSubscript:v13];

              break;
            case 5u:
              uint64_t v20 = +[NSNumber numberWithInt:a1[528]];
              [v7 setObject:v20 forKeyedSubscript:v13];

              break;
            case 6u:
              __int16 v21 = +[NSNumber numberWithInt:a1[529]];
              [v7 setObject:v21 forKeyedSubscript:v13];

              break;
            case 7u:
              unsigned int v22 = +[NSNumber numberWithInt:a1[531]];
              [v7 setObject:v22 forKeyedSubscript:v13];

              break;
            case 8u:
              __int16 v23 = +[NSNumber numberWithInt:a1[530]];
              [v7 setObject:v23 forKeyedSubscript:v13];

              break;
            case 9u:
              uint64_t v17 = +[NSNumber numberWithBool:a1[572]];
              [v7 setObject:v17 forKeyedSubscript:v13];

              break;
            case 0xAu:
              if (a1[576]) {
                BOOL v24 = a1[572] != 0;
              }
              else {
                BOOL v24 = 0;
              }
              int v26 = +[NSNumber numberWithBool:v24];
              [v7 setObject:v26 forKeyedSubscript:v13];

              break;
            default:
              __int16 v25 = qword_100A19E50;
              if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = v28;
                uint64_t v35 = v13;
                _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Invalid target for readStoredMetricValue: %@", buf, 0xCu);
              }
              break;
          }
        }
        id v9 = [v8 countByEnumeratingWithState:&v30 objects:v36 count:16];
      }
      while (v9);
    }
  }
  else
  {
    __int16 v27 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075C308((uint64_t)v7, (uint64_t)v29, v27);
    }
  }
}

void sub_1003AC188(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AC260(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (sub_1005400F4())
  {
    uint64_t v3 = sub_1004AFD94();
    v4[0] = _NSConcreteStackBlock;
    v4[1] = 3221225472;
    _DWORD v4[2] = sub_1003AC320;
    v4[3] = &unk_100997450;
    id v5 = v2;
    sub_100013018(v3, v4);
  }
}

void sub_1003AC300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003AC320(uint64_t a1)
{
  id v2 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"ServiceUUID"];
  uint64_t v17 = v2;
  uint64_t v3 = +[NSArray arrayWithObjects:&v17 count:1];

  int v4 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SessionState"];
  unsigned __int8 v5 = [v4 intValue];
  id v6 = BiomeLibrary();
  uint64_t v7 = [v6 Device];
  id v8 = [v7 Wireless];
  id v9 = [v8 BluetoothGATTSession];

  id v10 = objc_alloc((Class)BMDeviceBluetoothGATTSession);
  uint64_t v11 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"BundleID"];
  uint64_t v12 = sub_1003ABC10(v5);
  id v13 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SupportsBackgrounding"];
  id v14 = [*(id *)(a1 + 32) objectForKeyedSubscript:@"SupportsStateRestoration"];
  id v15 = [v10 initWithBundleID:v11 serviceUUID:v3 sessionType:@"Peripheral" sessionState:v12 supportsBackgrounding:v13 supportsStateRestoration:v14];

  uint64_t v16 = [v9 source];
  [v16 sendEvent:v15];
}

void sub_1003AC4E8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003AC58C(uint64_t a1, void *a2)
{
}

void sub_1003AC598(uint64_t a1, void *a2)
{
}

void sub_1003AC5A4(uint64_t a1, void *a2)
{
}

void sub_1003AC5B0(uint64_t a1, void *a2)
{
}

void sub_1003AC5BC(uint64_t a1, void *a2)
{
}

void sub_1003AC5C8(uint64_t a1, void *a2)
{
}

void sub_1003AC5D4(uint64_t a1, void *a2)
{
}

void sub_1003AC5E0(uint64_t a1, void *a2, uint64_t a3)
{
  id v5 = a2;
  sub_10038094C(a1, 0x68u, v5);
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v34 = 0;
  sub_100474E18(a3, v33);
  v32[0] = 0;
  v32[1] = 0;
  sub_10003AED0((uint64_t)v32, a1 + 240);
  if (sub_1003B9630(a1 + 384, v33) == 1)
  {
    id v6 = [v5 objectForKeyedSubscript:@"Reason"];
    unsigned int v7 = [v6 isEqualToString:@"Success"];

    if (v7)
    {
      *(unsigned char *)(sub_10036C70C(a1 + 384, v33) + 5) = 1;
    }
    else
    {
      id v8 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Analytics - MagicPairing Complete - Failed", buf, 2u);
      }
      *(unsigned char *)(sub_10036C70C(a1 + 384, v33) + 5) = 0;
      uint64_t v9 = [v5 objectForKeyedSubscript:@"Reason"];
      uint64_t v10 = sub_10036C70C(a1 + 384, v33);
      uint64_t v11 = *(void **)(v10 + 24);
      *(void *)(v10 + 24) = v9;

      uint64_t v12 = sub_10036C70C(a1 + 384, v33);
      id v13 = *(void **)(v12 + 32);
      *(void *)(v12 + 32) = @"Failed";

      uint64_t v14 = [v5 objectForKeyedSubscript:@"Status"];
      uint64_t v15 = sub_10036C70C(a1 + 384, v33);
      uint64_t v16 = *(void **)(v15 + 48);
      *(void *)(v15 + 48) = v14;

      uint64_t v17 = sub_10036C70C(a1 + 384, v33);
      int v18 = *(_DWORD *)v17;
      __int16 v21 = *(_WORD *)(v17 + 4);
      int v20 = v18;
      id v22 = *(id *)(v17 + 8);
      id v23 = *(id *)(v17 + 16);
      id v24 = *(id *)(v17 + 24);
      id v25 = *(id *)(v17 + 32);
      id v26 = *(id *)(v17 + 40);
      id v27 = *(id *)(v17 + 48);
      id v28 = *(id *)(v17 + 56);
      long long v19 = *(_OWORD *)(v17 + 79);
      v29[0] = *(_OWORD *)(v17 + 64);
      *(_OWORD *)((char *)v29 + 15) = v19;
      id v30 = *(id *)(v17 + 96);
      sub_100388DA4(a1, (unsigned __int8 *)&v20);
      sub_1003B96B0((uint64_t **)(a1 + 384), v33);
    }
  }
  sub_10003AFB4((uint64_t)v32);
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33[0]);
  }
}

void sub_1003AC850(_Unwind_Exception *a1)
{
  sub_10003AFB4(v3 - 88);
  if (*(char *)(v3 - 49) < 0) {
    operator delete(*(void **)(v3 - 72));
  }

  _Unwind_Resume(a1);
}

void sub_1003AC898(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v28 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  uint64_t v25 = 0;
  int v4 = sub_100373558();
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v4 + 24))(v4, &v28, &v27, &v26, &v25);
  id v5 = +[NSNumber numberWithUnsignedLongLong:v28];
  [v3 setObject:v5 forKey:@"BasebandScanPrepTimeMs"];

  id v6 = +[NSNumber numberWithUnsignedLongLong:v27];
  [v3 setObject:v6 forKey:@"BasebandScanTimeMs"];

  unsigned int v7 = +[NSNumber numberWithUnsignedLongLong:v26];
  [v3 setObject:v7 forKey:@"BasebandTimeMs"];

  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  unsigned __int8 v21 = 0;
  std::string __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  id v8 = sub_100373558();
  (*(void (**)(void *, uint64_t *, uint64_t *, uint64_t *, unsigned __int8 *, void **))(*(void *)v8 + 32))(v8, &v24, &v23, &v22, &v21, &__p);
  uint64_t v9 = +[NSNumber numberWithUnsignedLongLong:v24];
  [v3 setObject:v9 forKey:@"BasebandScanPrepTimeMs"];

  uint64_t v10 = +[NSNumber numberWithUnsignedLongLong:v23];
  [v3 setObject:v10 forKey:@"BasebandScanTimeMS"];

  uint64_t v11 = +[NSNumber numberWithUnsignedLongLong:v22];
  [v3 setObject:v11 forKey:@"BasebandTimeMs"];

  uint64_t v12 = +[NSNumber numberWithUnsignedChar:v21];
  [v3 setObject:v12 forKey:@"Status"];

  uint64_t v13 = HIBYTE(v20);
  if (v20 < 0) {
    uint64_t v13 = v19;
  }
  if (v13)
  {
    id v14 = objc_alloc((Class)NSString);
    if (v20 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    id v16 = [v14 initWithUTF8String:p_p];
    if (v16) {
      [v3 setObject:v16 forKey:@"Reason"];
    }
  }
  uint64_t v17 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v30 = v3;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Fast Connect Metrics: %@", buf, 0xCu);
  }
  sub_10038094C(a1, 0x4Fu, v3);
  if (SHIBYTE(v20) < 0) {
    operator delete(__p);
  }
}

void sub_1003ACB98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1003ACC2C(uint64_t a1, void *a2)
{
}

void sub_1003ACC38(uint64_t a1, void *a2, int a3)
{
  CFStringRef v22 = @"GAPAPairingMetricUniqueIdSalt";
  id v5 = +[NSArray arrayWithObjects:&v22 count:1];
  id v19 = 0;
  id v6 = +[CBUserController readPrefKeys:v5 source:8 error:&v19];
  id v7 = v19;
  id v8 = [v6 objectForKeyedSubscript:@"GAPAPairingMetricUniqueIdSalt"];

  uint64_t v9 = (id)qword_100A19E50;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
  {
    uint64_t v10 = CUPrintNSError();
    *(_DWORD *)long long buf = 138412546;
    *(void *)unsigned __int8 v21 = v10;
    *(_WORD *)&v21[8] = 2112;
    *(void *)&v21[10] = v8;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "GAPAPairingMetricUniqueIdSalt from readPrefKeys %@ %@", buf, 0x16u);
  }
  if (!v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0) && [v8 length] == (id)a3)
  {
    id v11 = v8;
    memcpy(a2, [v11 bytes], (size_t)[v11 length]);
    id v12 = 0;
  }
  else
  {
    arc4random_buf(a2, a3);
    uint64_t v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)long long buf = 68157954;
      *(_DWORD *)unsigned __int8 v21 = 16;
      *(_WORD *)&void v21[4] = 2096;
      *(void *)&v21[6] = a2;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "Make fresh GAPAPairingMetricUniqueIdSalt %.16P", buf, 0x12u);
    }
    id v14 = +[NSData dataWithBytes:a2 length:a3];
    id v18 = v7;
    unsigned __int8 v15 = +[CBUserController writePrefKey:@"GAPAPairingMetricUniqueIdSalt" value:v14 source:8 error:&v18];
    id v12 = v18;

    if ((v15 & 1) == 0)
    {
      id v16 = (id)qword_100A19E50;
      if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
      {
        uint64_t v17 = CUPrintNSError();
        sub_10075C3A8(v17, buf, v16);
      }
    }
  }
}

void sub_1003ACEF8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003ACF5C(uint64_t a1, int *a2, int a3, int a4, int a5, long long *a6, void *a7, void *a8, void *a9)
{
  id v15 = a7;
  id v16 = a8;
  id v17 = a9;
  uint64_t v18 = sub_1004AFD94();
  v24[0] = _NSConcreteStackBlock;
  v24[1] = 3321888768;
  void v24[2] = sub_1003AD12C;
  void v24[3] = &unk_1009AA4F8;
  uint64_t v28 = a1;
  int v19 = *a2;
  int v31 = a3;
  int v34 = v19;
  __int16 v35 = *((_WORD *)a2 + 2);
  id v20 = v15;
  id v25 = v20;
  if (*((char *)a6 + 23) < 0)
  {
    sub_10003B098(&__p, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long __p = *a6;
    uint64_t v30 = *((void *)a6 + 2);
  }
  int v32 = a5;
  int v33 = a4;
  id v21 = v16;
  id v26 = v21;
  id v22 = v17;
  id v27 = v22;
  sub_100013018(v18, v24);

  if (SHIBYTE(v30) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1003AD0D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  _Unwind_Resume(a1);
}

void sub_1003AD12C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  uint64_t v3 = *(unsigned int *)(a1 + 88);
  if (v3)
  {
    uint64_t v60 = 0;
    int v34 = CUPrintFlags32();
    NSAppendPrintF_safe();
    id v4 = 0;

    int v5 = *(_DWORD *)(a1 + 88);
  }
  else
  {
    LOBYTE(v5) = 0;
    id v4 = 0;
  }
  id v45 = v4;
  uint64_t v7 = a1 + 100;
  int v6 = *(_DWORD *)(a1 + 100);
  v70[1] = 0;
  v70[0] = 0;
  int data = v6;
  __int16 v69 = *(_WORD *)(a1 + 104);
  sub_1003ACC38(v3, v70, 16);
  *(void *)md = 0;
  uint64_t v66 = 0;
  int v67 = 0;
  CC_SHA1(&data, 0x16u, md);
  id v44 = +[NSData dataWithBytes:md length:20];
  int v58 = *(_DWORD *)(a1 + 100);
  __int16 v59 = *(_WORD *)(a1 + 104);
  unsigned int v8 = sub_1003AD7D8(v2, (unsigned __int8 *)&v58, 0);
  int v56 = *(_DWORD *)(a1 + 100);
  __int16 v57 = *(_WORD *)(a1 + 104);
  uint64_t v9 = sub_1003AD7D8(v2, (unsigned __int8 *)&v56, 1u);
  int v54 = *(_DWORD *)(a1 + 100);
  __int16 v55 = *(_WORD *)(a1 + 104);
  int v10 = sub_1003AD7D8(v2, (unsigned __int8 *)&v54, 2u);
  int v52 = *(_DWORD *)(a1 + 100);
  __int16 v53 = *(_WORD *)(a1 + 104);
  int v11 = sub_1003AD7D8(v2, (unsigned __int8 *)&v52, 3u);
  int v50 = *(_DWORD *)(a1 + 100);
  __int16 v51 = *(_WORD *)(a1 + 104);
  int v12 = sub_1003AD7D8(v2, (unsigned __int8 *)&v50, 4u);
  unsigned int v42 = v8;
  int v48 = *(_DWORD *)(a1 + 100);
  __int16 v49 = *(_WORD *)(a1 + 104);
  int v13 = sub_1003AD7D8(v2, (unsigned __int8 *)&v48, 5u);
  int v46 = *(_DWORD *)(a1 + 100);
  __int16 v47 = *(_WORD *)(a1 + 104);
  uint64_t v14 = sub_1003AD7D8(v2, (unsigned __int8 *)&v46, 6u);
  uint64_t v15 = v14;
  uint64_t v16 = v5 & 3;
  if (v14)
  {
    LODWORD(v41) = v14 - v9;
    HIDWORD(v41) = v14 - v13;
    uint64_t v17 = (v13 - v12);
    uint64_t v18 = (v12 - v11);
    uint64_t v19 = (v11 - v10);
    uint64_t v20 = (v10 - v9);
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v20 = 0;
    uint64_t v19 = 0;
    uint64_t v18 = 0;
    uint64_t v17 = 0;
    uint64_t v41 = 0;
  }
  v63[0] = @"Flags";
  v63[1] = @"StartSession";
  uint64_t v21 = *(void *)(a1 + 32);
  v64[0] = v45;
  v64[1] = v21;
  v63[2] = @"State";
  __int16 v40 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", v16, v34);
  v64[2] = v40;
  void v63[3] = @"FWVersion";
  id v22 = (void *)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    id v22 = (void *)*v22;
  }
  id v39 = +[NSString stringWithUTF8String:v22];
  void v64[3] = v39;
  v63[4] = @"PID";
  __int16 v38 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 92)];
  v64[4] = v38;
  v63[5] = @"VID";
  uint64_t v23 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 96)];
  uint64_t v24 = *(void *)(a1 + 40);
  uint64_t v25 = *(void *)(a1 + 48);
  id v37 = (void *)v23;
  v64[5] = v23;
  v64[6] = v24;
  v63[6] = @"PrimaryIdentificationHash";
  v63[7] = @"SecondaryIdentificationHash";
  v64[7] = v25;
  v64[8] = v44;
  v63[8] = @"UniqueIdentificationHash";
  v63[9] = @"TimingNonAuthTotalMS";
  int v43 = +[NSNumber numberWithUnsignedInt:v42];
  v64[9] = v43;
  v63[10] = @"Timing_A_AuthSupportedTotalMS";
  __int16 v36 = +[NSNumber numberWithUnsignedInt:v9];
  v64[10] = v36;
  v63[11] = @"Timing_B_AuthGetACRTOTADurationMS";
  __int16 v35 = +[NSNumber numberWithUnsignedInt:v20];
  v64[11] = v35;
  v63[12] = @"Timing_C_AuthACRTReceivedDurationMS";
  id v26 = +[NSNumber numberWithUnsignedInt:v19];
  v64[12] = v26;
  v63[13] = @"Timing_D_AuthChallengeOTADurationMS";
  id v27 = +[NSNumber numberWithUnsignedInt:v18];
  v64[13] = v27;
  v63[14] = @"Timing_E_AuthResponseReceivedDurationMS";
  uint64_t v28 = +[NSNumber numberWithUnsignedInt:v17];
  v64[14] = v28;
  v63[15] = @"Timing_F_AuthResultDurationMS";
  uint64_t v29 = +[NSNumber numberWithUnsignedInt:HIDWORD(v41)];
  v64[15] = v29;
  v63[16] = @"Timing_G_AuthDurationMS";
  uint64_t v30 = +[NSNumber numberWithUnsignedInt:v41];
  v64[16] = v30;
  v63[17] = @"Timing_H_AuthTotalMS";
  int v31 = +[NSNumber numberWithUnsignedInt:v15];
  v64[17] = v31;
  int v32 = +[NSDictionary dictionaryWithObjects:v64 forKeys:v63 count:18];

  int v33 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    __int16 v62 = v32;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "GAPA result metric %@", buf, 0xCu);
  }
  sub_10038094C(v2, 0x51u, v32);
  sub_1003B9AE8((uint64_t **)(v2 + 432), v7);
}

void sub_1003AD6BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003AD7D8(uint64_t a1, unsigned __int8 *a2, unsigned int a3)
{
  int v5 = (uint64_t **)(a1 + 432);
  if (sub_1003B9B70(a1 + 432, (uint64_t)a2))
  {
    *(void *)uint64_t v16 = a2;
    int v6 = sub_1003B9C30(v5, (uint64_t)a2, (uint64_t)&unk_1007BE9D0, (_DWORD **)v16);
    uint64_t v9 = *((void *)v6 + 6);
    uint64_t v7 = v6 + 12;
    uint64_t v8 = v9;
    if (v9)
    {
      int v10 = v7;
      do
      {
        unsigned int v11 = *(unsigned __int8 *)(v8 + 28);
        BOOL v12 = v11 >= a3;
        if (v11 >= a3) {
          int v13 = (uint64_t *)v8;
        }
        else {
          int v13 = (uint64_t *)(v8 + 8);
        }
        if (v12) {
          int v10 = (_DWORD *)v8;
        }
        uint64_t v8 = *v13;
      }
      while (*v13);
      if (v10 != v7 && *((unsigned __int8 *)v10 + 28) <= a3) {
        return v10[8];
      }
    }
  }
  else
  {
    uint64_t v15 = (id)qword_100A19E50;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      sub_1004A82EC(a2, v16);
      sub_10075C400(v16, buf, v15);
    }
  }
  return 0;
}

void sub_1003AD8F0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1003AD908(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    uint64_t result = sub_10003B098(result, *(void **)(a2 + 64), *(void *)(a2 + 72));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 64);
    result[2] = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t result = v5;
  }
  int v6 = *(_DWORD *)(a2 + 100);
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  *(_DWORD *)(a1 + 100) = v6;
  return result;
}

void sub_1003AD968(uint64_t a1)
{
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
}

void *sub_1003AD97C(uint64_t a1, unsigned __int8 *a2, unsigned int a3, int a4)
{
  unsigned __int8 v16 = a3;
  uint64_t v8 = (uint64_t **)(a1 + 408);
  if (sub_1003B9B70(a1 + 408, (uint64_t)a2))
  {
    uint64_t v17 = 0;
    sub_100026C30((uint64_t)&v17);
    int v9 = (int)v17;
    int v10 = SWORD2(v17);
    uint64_t v17 = a2;
    unsigned int v11 = sub_1003B970C(v8, (uint64_t)a2, (uint64_t)&unk_1007BE9D0, (_DWORD **)&v17);
    int v12 = v10 - v11[12] + 1000 * (v9 - v11[10]);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075C474();
    }
    int v12 = 0;
  }
  uint64_t v17 = a2;
  uint64_t result = sub_1003B9C30((uint64_t **)(a1 + 432), (uint64_t)a2, (uint64_t)&unk_1007BE9D0, (_DWORD **)&v17);
  uint64_t v14 = (uint64_t **)*((void *)result + 6);
  if (!v14)
  {
LABEL_13:
    uint64_t v17 = &v16;
    uint64_t result = sub_1003B9CD4((uint64_t **)result + 5, &v16, (uint64_t)&unk_1007BE9D0, &v17);
    *((_DWORD *)result + 8) = v12;
    return result;
  }
  while (1)
  {
    unsigned int v15 = *((unsigned __int8 *)v14 + 28);
    if (v15 <= a3) {
      break;
    }
LABEL_10:
    uint64_t v14 = (uint64_t **)*v14;
    if (!v14) {
      goto LABEL_13;
    }
  }
  if (v15 < a3)
  {
    ++v14;
    goto LABEL_10;
  }
  if (a4) {
    goto LABEL_13;
  }
  return result;
}

void sub_1003ADAD0(uint64_t a1, void *a2)
{
}

void sub_1003ADADC(uint64_t a1, void *a2)
{
}

void sub_1003ADAE8(uint64_t a1, long long *a2, void *a3, uint64_t a4, char a5, char a6)
{
  id v11 = a3;
  uint64_t v12 = sub_1004AFD94();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3321888768;
  v14[2] = sub_1003ADC28;
  void v14[3] = &unk_1009AA530;
  uint64_t v16 = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v18 = *((void *)a2 + 2);
  }
  id v13 = v11;
  id v15 = v13;
  uint64_t v19 = a4;
  char v20 = a5;
  char v21 = a6;
  sub_100013018(v12, v14);

  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1003ADBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1003ADC28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = (void *)(a1 + 48);
    if (*(char *)(a1 + 71) < 0) {
      id v4 = (void *)*v4;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Start monitoring for connection %s", buf, 0xCu);
  }
  v11[0] = 0;
  v11[1] = 0;
  sub_10003AED0((uint64_t)v11, v2 + 240);
  if (!sub_1003B9630(v2 + 384, (const void **)(a1 + 48)))
  {
    id v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v14 = 0u;
    *(void *)&uint8_t buf[8] = *(id *)(a1 + 32);
    *(void *)&long long v14 = @"Outgoing";
    *((void *)&v14 + 1) = @"NA";
    *(void *)&long long v15 = @"Pending";
    *((void *)&v15 + 1) = @"NA";
    *(void *)&long long v16 = 0;
    *(void *)&long long v17 = 0;
    uint64_t v5 = +[NSNumber numberWithInteger:*(void *)(a1 + 72)];
    int v6 = (void *)*((void *)&v16 + 1);
    *((void *)&v16 + 1) = v5;

    *((void *)&v17 + 1) = mach_absolute_time();
    WORD4(v18) = *(_WORD *)(a1 + 80);
    *(_DWORD *)((char *)&v18 + 10) = -1;
    BYTE14(v18) = 0;
    id v7 = [&off_1009E1758 mutableCopy];
    id v8 = v19;
    id v19 = v7;

    uint64_t v12 = (long long *)(a1 + 48);
    int v9 = sub_1003B9D98((uint64_t **)(v2 + 384), (const void **)(a1 + 48), (uint64_t)&unk_1007BE9D0, &v12);
    sub_100389F04((uint64_t)(v9 + 7), (int *)buf);
  }
  sub_10003AFE8((uint64_t)v11);
  return sub_10003AFB4((uint64_t)v11);
}

void sub_1003ADE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, id a13)
{
}

void *sub_1003ADE50(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_10003B098(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v3 = *(_OWORD *)(a2 + 48);
  result[2] = *(void *)(a2 + 64);
  *(_OWORD *)uint64_t result = v3;
  return result;
}

void sub_1003ADE80(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void sub_1003ADE94(uint64_t a1, char a2, char a3, char a4, char a5)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  uint64_t v11 = sub_1004AFD94();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  _DWORD v12[2] = sub_1003ADF54;
  v12[3] = &unk_100998280;
  void v12[4] = a1;
  char v13 = a5;
  char v14 = a2;
  char v15 = a3;
  char v16 = a4;
  *(CFAbsoluteTime *)&v12[5] = Current;
  sub_100013018(v11, v12);
}

double sub_1003ADF54(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = (unsigned __int8 *)(v2 + 456);
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(unsigned char *)(v2 + 456)) {
      (*(void (**)(void, void, void, void, void))(*(void *)v2 + 400))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 49), *(unsigned __int8 *)(a1 + 50), *(unsigned __int8 *)(a1 + 51), 0);
    }
    *(unsigned char *)(v2 + 456) = *(unsigned char *)(a1 + 49);
    *(void *)(v2 + 464) = *(void *)(a1 + 40);
    id v4 = (uint64_t **)(v2 + 472);
    *(void *)&v14[0] = v3;
    uint64_t v5 = sub_1003B9F08(v4, v3, (uint64_t)&unk_1007BE9D0, (unsigned char **)v14);
    LODWORD(v15) = *(_DWORD *)((char *)v5 + 42);
    WORD2(v15) = *((_WORD *)v5 + 23);
    int v6 = v5[7];
    uint64_t v7 = (uint64_t)v5[6] + 1;
    __int16 v8 = *(_WORD *)(a1 + 50);
    *(void *)&v14[0] = v3;
    int v9 = sub_1003B9F08(v4, v3, (uint64_t)&unk_1007BE9D0, (unsigned char **)v14);
    *((_WORD *)v9 + 20) = v8;
    *(_DWORD *)((char *)v9 + 42) = v15;
    *((_WORD *)v9 + 23) = WORD2(v15);
    v9[6] = (uint64_t *)v7;
    v9[7] = v6;
  }
  else if (*(unsigned char *)(v2 + 456))
  {
    *(void *)&v14[0] = v2 + 456;
    uint64_t v11 = sub_1003B9F08((uint64_t **)(v2 + 472), (unsigned __int8 *)(v2 + 456), (uint64_t)&unk_1007BE9D0, (unsigned char **)v14);
    *(_OWORD *)char v14 = *(_OWORD *)(v11 + 5);
    unint64_t v12 = (unint64_t)((double)(unint64_t)v11[7] + (*(double *)(a1 + 40) - *(double *)(v2 + 464)) * 1000.0);
    char v15 = (unsigned char *)(v2 + 456);
    char v13 = sub_1003B9F08((uint64_t **)(v2 + 472), (unsigned __int8 *)(v2 + 456), (uint64_t)&unk_1007BE9D0, &v15);
    double result = v14[0];
    *(_OWORD *)(v13 + 5) = *(_OWORD *)v14;
    v13[7] = (uint64_t *)v12;
  }
  return result;
}

void sub_1003AE0F0(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003AE174;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

void sub_1003AE174(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 40) == 1)
  {
    uint64_t v1 = *(void *)(a1 + 32);
    ++*(void *)(v1 + 584);
    uint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      uint64_t v3 = *(void *)(v1 + 584);
      int v4 = 138478083;
      CFStringRef v5 = @"fNearbyActionNoWakePrecisionFindingDailyUsage";
      __int16 v6 = 2048;
      uint64_t v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "Set %{private}@ to: %tu", (uint8_t *)&v4, 0x16u);
    }
  }
}

void sub_1003AE248(uint64_t a1, double a2, float a3, float a4)
{
  uint64_t v8 = sub_1004AFD94();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003AE2E8;
  v9[3] = &unk_1009A12D0;
  void v9[4] = a1;
  *(double *)&void v9[5] = a2;
  float v10 = a3;
  float v11 = a4;
  sub_100013018(v8, v9);
}

void sub_1003AE2E8(uint64_t a1)
{
  uint64_t v17 = *(void *)(a1 + 32);
  id v16 = +[NSDate date];
  [v16 timeIntervalSinceReferenceDate];
  LODWORD(v3) = 86400;
  if ((int)(uint64_t)rint(v2 - *(double *)(a1 + 40)) < 86400)
  {
    [v16 timeIntervalSinceReferenceDate];
    uint64_t v3 = (uint64_t)rint(v4 - *(double *)(a1 + 40));
  }
  CFStringRef v5 = +[NSCalendar currentCalendar];
  __int16 v6 = [v5 components:224 fromDate:v16];

  char v15 = v6;
  unsigned int v7 = [v6 hour];
  unsigned int v8 = [v6 minute];
  unsigned int v9 = [v6 second];
  if ((int)v3 >= 1)
  {
    unsigned int v10 = 0;
    int v11 = (int)(3600 * v7 + 60 * v8 + v9 - v3 + 86400) % 86400;
    int v12 = v11 / 3600;
    do
    {
      if ((int)v3 >= 3600 * ((int)(v12 + v10) % 24) - v11 + 3600) {
        int v13 = 3600 * ((int)(v12 + v10) % 24) - v11 + 3600;
      }
      else {
        int v13 = v3;
      }
      sub_1003AE4EC(v17, ((char)(v12 + v10) % 24), (unsigned __int16)v13, *(float *)(a1 + 48), *(float *)(a1 + 52));
      if (v10 > 0x16) {
        break;
      }
      int v11 = (v13 + v11) % 86400;
      ++v10;
      BOOL v14 = __OFSUB__(v3, v13);
      LODWORD(v3) = v3 - v13;
    }
    while (!(((int)v3 < 0) ^ v14 | (v3 == 0)));
  }
}

void sub_1003AE4B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11)
{
  _Unwind_Resume(a1);
}

void sub_1003AE4EC(uint64_t a1, unsigned int a2, unsigned int a3, float a4, float a5)
{
  unsigned __int8 v17 = a2;
  BOOL v6 = a4 > -1.0 || a2 > 0x17;
  if (!v6 && (unsigned __int16)(a3 - 3600) >= 0xF1F1u)
  {
    unsigned int v9 = (uint64_t **)(a1 + 496);
    *(void *)long long buf = &v17;
    unsigned int v10 = (float *)sub_1003B9FD0((uint64_t **)(a1 + 496), &v17, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf);
    float v11 = v10[8];
    float v12 = v11 + (float)a3;
    float v13 = (float)((float)((float)a3 * a4) + (float)(v10[9] * v11)) / v12;
    float v14 = (float)((float)((float)a3 * a5) + (float)(v10[10] * v11)) / v12;
    *(void *)long long buf = &v17;
    char v15 = (float *)sub_1003B9FD0(v9, &v17, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf);
    v15[8] = v12;
    v15[9] = v13;
    v15[10] = v14;
    id v16 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 67109888;
      *(_DWORD *)&uint8_t buf[4] = v17;
      __int16 v19 = 2048;
      double v20 = v12;
      __int16 v21 = 2048;
      double v22 = v13;
      __int16 v23 = 2048;
      double v24 = v14;
      _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "reportNearbyInfoV2DensityBubbleHourly: hour %u cum seconds %.1f avg rssi %.1f avg mps %.1f", buf, 0x26u);
    }
  }
}

void sub_1003AE678(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003AE6F8;
  v5[3] = &unk_100998260;
  v5[4] = a1;
  void v5[5] = a2;
  sub_100013018(v4, v5);
}

void sub_1003AE6F8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  unint64_t v1 = *(void *)(a1 + 40);
  if (v1 > *(void *)(v2 + 520))
  {
    *(void *)(v2 + 520) = v1;
    uint64_t v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      uint64_t v4 = *(void *)(v2 + 520);
      int v5 = 134217984;
      uint64_t v6 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "Set fNumberOfAOPBTPrecisionFindingKeys to: %02lu", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_1003AE7B0(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003AE82C;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1003AE82C(uint64_t result)
{
  return result;
}

void sub_1003AE840(uint64_t a1, char a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003AE8C4;
  v5[3] = &unk_100998A58;
  v5[4] = a1;
  char v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1003AE8C4(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(result + 40)) {
    ++*(_DWORD *)(v1 + 600);
  }
  else {
    ++*(_DWORD *)(v1 + 596);
  }
  return result;
}

void sub_1003AE8F0(uint64_t a1, char a2, uint64_t a3, double a4)
{
  uint64_t v8 = sub_1004AFD94();
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003AE990;
  v9[3] = &unk_1009A0648;
  char v10 = a2;
  void v9[4] = a1;
  void v9[5] = a3;
  *(double *)&void v9[6] = a4;
  sub_100013018(v8, v9);
}

void sub_1003AE990(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  double v3 = *(double *)(v2 + 168);
  char v4 = *(unsigned char *)(a1 + 56);
  if (v3 == 0.0)
  {
    if (*(unsigned char *)(a1 + 56))
    {
      *(void *)(v2 + 168) = *(void *)(a1 + 48);
      *(unsigned char *)(v2 + 144) = v4;
      *(void *)(v2 + 152) = *(void *)(a1 + 40);
    }
  }
  else if (*(unsigned char *)(a1 + 56) && *(void *)(v2 + 152) == *(void *)(a1 + 40))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
      sub_10075C538();
    }
  }
  else
  {
    *(unsigned char *)(v2 + 160) = v4;
    double v5 = *(double *)(a1 + 48);
    char v6 = +[NSMutableString stringWithString:@"AudioRouteTransition"];
    unsigned int v7 = v6;
    uint64_t v8 = (unsigned char *)(v2 + 144);
    CFStringRef v9 = @"fromBTtoNonBT";
    if (*(unsigned char *)(v2 + 160) && *v8) {
      CFStringRef v9 = @"fromBTtoBT";
    }
    [v6 appendString:v9];
    double v10 = v5 - v3;
    if (v5 - v3 <= 0.0 || v10 > 5.0)
    {
      if (v10 <= 5.0 || v10 > 10.0)
      {
        if (v10 > 60.0 || v10 <= 10.0) {
          CFStringRef v14 = @"over60seconds";
        }
        else {
          CFStringRef v14 = @"within10to60seconds";
        }
      }
      else
      {
        CFStringRef v14 = @"within5to10seconds";
      }
    }
    else
    {
      CFStringRef v14 = @"within0to5seconds";
    }
    [v7 appendString:v14];
    char v15 = *(void **)(v2 + 360);
    id v16 = [v15 objectForKey:v7];
    unsigned __int8 v17 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v16 intValue] + 1);
    [v15 setObject:v17 forKey:v7];

    long long v18 = (id)qword_100A19E50;
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
    {
      __int16 v19 = [*(id *)(v2 + 360) description];
      sub_10075C4E0(v19, v20, v18);
    }

    if (*(unsigned char *)(a1 + 56))
    {
      *(unsigned char *)(v2 + 144) = 1;
      *(void *)(v2 + 152) = *(void *)(a1 + 40);
      *(unsigned char *)(v2 + 160) = 0;
      *(void *)(v2 + 168) = *(void *)(a1 + 48);
    }
    else
    {
      *(_OWORD *)uint64_t v8 = 0u;
      *(_OWORD *)(v2 + 160) = 0u;
    }
  }
}

void sub_1003AEBF0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003AEC24(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

id sub_1003AEC2C(uint64_t a1, void *a2)
{
  id v3 = a2;
  int v4 = *(_DWORD *)(a1 + 548);
  unsigned int v21 = *(_DWORD *)(a1 + 556);
  if (*(unsigned char *)(a1 + 544)) {
    CFStringRef v5 = @"On";
  }
  else {
    CFStringRef v5 = @"Off";
  }
  if (v4 == 3) {
    CFStringRef v5 = @"WiFiAssociatedBand6GHz";
  }
  if (v4 == 2) {
    CFStringRef v5 = @"WiFiAssociatedBand5GHz";
  }
  if (v4 == 1) {
    CFStringRef v6 = @"WiFiAssociatedBand2GHz";
  }
  else {
    CFStringRef v6 = v5;
  }
  uint64_t v7 = *(unsigned __int8 *)(a1 + 528);
  uint64_t v8 = *(unsigned __int8 *)(a1 + 531);
  uint64_t v9 = *(unsigned __int8 *)(a1 + 529);
  uint64_t v10 = *(unsigned __int8 *)(a1 + 530);
  float v11 = +[NSMutableDictionary dictionaryWithDictionary:v3];
  float v12 = +[NSNumber numberWithBool:v4 == 1];
  [v11 setObject:v12 forKeyedSubscript:@"WiFiAssociated2GHz"];

  float v13 = +[NSNumber numberWithUnsignedChar:v7];
  [v11 setObject:v13 forKeyedSubscript:@"NumberOfClassicDevicesConnected"];

  CFStringRef v14 = +[NSNumber numberWithUnsignedInt:v9];
  [v11 setObject:v14 forKeyedSubscript:@"NumberOfLEDevicesConnected"];

  char v15 = +[NSNumber numberWithUnsignedChar:v8];
  [v11 setObject:v15 forKeyedSubscript:@"NumberOfClassicHIDDevicesConnected"];

  id v16 = +[NSNumber numberWithUnsignedInt:v10];
  [v11 setObject:v16 forKeyedSubscript:@"NumberOfLEHIDDevicesConnected"];

  [v11 setObject:v6 forKeyedSubscript:@"WiFiState"];
  int v17 = *(_DWORD *)(a1 + 540) - 1;
  if (v17 > 2) {
    CFStringRef v18 = @"Unknown";
  }
  else {
    CFStringRef v18 = (const __CFString *)*((void *)&off_1009AAD18 + v17);
  }
  [v11 setObject:v18 forKeyedSubscript:@"SmartCoverState"];
  __int16 v19 = +[NSNumber numberWithInt:v21];
  [v11 setObject:v19 forKeyedSubscript:@"WiFiM1M4HandshakeCount"];

  return v11;
}

void sub_1003AEE70(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003AEED8(uint64_t a1, unsigned int a2)
{
  id v3 = sub_1003A9FCC(a1, a2);
  CFStringRef v4 = @"com.apple.Bluetooth.";
  if (a2 == 64) {
    CFStringRef v4 = @"com.apple.";
  }
  CFStringRef v5 = +[NSString stringWithFormat:@"%@%@", v4, v3];

  return v5;
}

void sub_1003AEF5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003AEF6C(uint64_t a1)
{
  return *(id *)(a1 + 32);
}

void sub_1003AEF74(uint64_t a1)
{
  uint64_t v76 = 0;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v70 = 0u;
  long long v71 = 0u;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  long long v64 = 0u;
  long long v65 = 0u;
  long long v62 = 0u;
  long long v63 = 0u;
  if (qword_1009F85C8 != -1) {
    dispatch_once(&qword_1009F85C8, &stru_1009AA7C8);
  }
  *(void *)&double v1 = sub_1006F53D4((uint64_t)off_1009F85C0, (uint64_t)&v62).n128_u64[0];
  v77[0] = @"fTimewindowMsec";
  int v61 = +[NSNumber numberWithUnsignedLong:](NSNumber, "numberWithUnsignedLong:", v62, v1);
  v78[0] = v61;
  v77[1] = @"fNumAdvsMaincoreElnaOn";
  uint64_t v60 = +[NSNumber numberWithUnsignedLong:DWORD1(v62)];
  v78[1] = v60;
  v77[2] = @"fNumAdvsBeforeFilteringMaincoreElnaOn";
  __int16 v59 = +[NSNumber numberWithUnsignedLong:DWORD2(v62)];
  v78[2] = v59;
  v77[3] = @"fTotalScanningTimeMaincoreElnaOn";
  int v58 = +[NSNumber numberWithUnsignedLong:HIDWORD(v62)];
  v78[3] = v58;
  v77[4] = @"fNumAdvsMaincoreElnaBypass";
  __int16 v57 = +[NSNumber numberWithUnsignedLong:v63];
  v78[4] = v57;
  v77[5] = @"fNumAdvsBeforeFilteringMaincoreElnaBypass";
  int v56 = +[NSNumber numberWithUnsignedLong:DWORD1(v63)];
  v78[5] = v56;
  v77[6] = @"fTotalScanningTimeMaincoreElnaBypass";
  __int16 v55 = +[NSNumber numberWithUnsignedLong:DWORD2(v63)];
  v78[6] = v55;
  v77[7] = @"fNumAdvsScancoreElnaOn";
  int v54 = +[NSNumber numberWithUnsignedLong:HIDWORD(v63)];
  v78[7] = v54;
  v77[8] = @"fNumAdvsBeforeFilteringScancoreElnaOn";
  __int16 v53 = +[NSNumber numberWithUnsignedLong:v64];
  v78[8] = v53;
  v77[9] = @"fTotalScanningTimeScancoreElnaOn";
  int v52 = +[NSNumber numberWithUnsignedLong:DWORD1(v64)];
  v78[9] = v52;
  v77[10] = @"fNumAdvsScancoreElnaBypass";
  __int16 v51 = +[NSNumber numberWithUnsignedLong:DWORD2(v64)];
  v78[10] = v51;
  v77[11] = @"fNumAdvsBeforeFilteringScancoreElnaBypass";
  int v50 = +[NSNumber numberWithUnsignedLong:HIDWORD(v64)];
  v78[11] = v50;
  v77[12] = @"fTotalScanningTimeScancoreElnaBypass";
  __int16 v49 = +[NSNumber numberWithUnsignedLong:v65];
  v78[12] = v49;
  v77[13] = @"fNumRangeScanRequests";
  int v48 = +[NSNumber numberWithUnsignedLong:DWORD1(v65)];
  v78[13] = v48;
  v77[14] = @"fNumPriorityCriticalScanRequests";
  __int16 v47 = +[NSNumber numberWithUnsignedLong:DWORD2(v65)];
  v78[14] = v47;
  v77[15] = @"fNumScanRequests";
  int v46 = +[NSNumber numberWithUnsignedLong:HIDWORD(v65)];
  v78[15] = v46;
  v77[16] = @"fTotalTimeVeryHighPassiveInternal";
  id v45 = +[NSNumber numberWithUnsignedLong:v66];
  v78[16] = v45;
  v77[17] = @"fTotalTimeVeryHighPassiveExternal";
  id v44 = +[NSNumber numberWithUnsignedLong:DWORD1(v66)];
  v78[17] = v44;
  v77[18] = @"fTotalTimeVeryHighPassiveCombined";
  int v43 = +[NSNumber numberWithUnsignedLong:DWORD2(v66)];
  v78[18] = v43;
  v77[19] = @"fTotalTimeVeryHighActiveInternal";
  unsigned int v42 = +[NSNumber numberWithUnsignedLong:HIDWORD(v66)];
  v78[19] = v42;
  v77[20] = @"fTotalTimeVeryHighActiveExternal";
  uint64_t v41 = +[NSNumber numberWithUnsignedLong:v67];
  v78[20] = v41;
  v77[21] = @"fTotalTimeVeryHighActiveCombined";
  __int16 v40 = +[NSNumber numberWithUnsignedLong:DWORD1(v67)];
  v78[21] = v40;
  v77[22] = @"fTotalTimeHighPassiveInternal";
  id v39 = +[NSNumber numberWithUnsignedLong:DWORD2(v67)];
  v78[22] = v39;
  v77[23] = @"fTotalTimeHighPassiveExternal";
  __int16 v38 = +[NSNumber numberWithUnsignedLong:HIDWORD(v67)];
  v78[23] = v38;
  v77[24] = @"fTotalTimeHighPassiveCombined";
  id v37 = +[NSNumber numberWithUnsignedLong:v68];
  v78[24] = v37;
  v77[25] = @"fTotalTimeHighActiveInternal";
  __int16 v36 = +[NSNumber numberWithUnsignedLong:DWORD1(v68)];
  v78[25] = v36;
  v77[26] = @"fTotalTimeHighActiveExternal";
  __int16 v35 = +[NSNumber numberWithUnsignedLong:DWORD2(v68)];
  v78[26] = v35;
  v77[27] = @"fTotalTimeHighActiveCombined";
  int v34 = +[NSNumber numberWithUnsignedLong:HIDWORD(v68)];
  v78[27] = v34;
  v77[28] = @"fTotalTimeMediumHighPassiveInternal";
  int v33 = +[NSNumber numberWithUnsignedLong:v69];
  v78[28] = v33;
  v77[29] = @"fTotalTimeMediumHighPassiveExternal";
  int v32 = +[NSNumber numberWithUnsignedLong:DWORD1(v69)];
  v78[29] = v32;
  v77[30] = @"fTotalTimeMediumHighPassiveCombined";
  int v31 = +[NSNumber numberWithUnsignedLong:DWORD2(v69)];
  v78[30] = v31;
  v77[31] = @"fTotalTimeMediumHighActiveInternal";
  uint64_t v30 = +[NSNumber numberWithUnsignedLong:HIDWORD(v69)];
  v78[31] = v30;
  v77[32] = @"fTotalTimeMediumHighActiveExternal";
  uint64_t v29 = +[NSNumber numberWithUnsignedLong:v70];
  v78[32] = v29;
  v77[33] = @"fTotalTimeMediumHighActiveCombined";
  uint64_t v28 = +[NSNumber numberWithUnsignedLong:DWORD1(v70)];
  v78[33] = v28;
  v77[34] = @"fTotalTimeMediumPassiveInternal";
  id v27 = +[NSNumber numberWithUnsignedLong:DWORD2(v70)];
  v78[34] = v27;
  v77[35] = @"fTotalTimeMediumPassiveExternal";
  id v26 = +[NSNumber numberWithUnsignedLong:HIDWORD(v70)];
  v78[35] = v26;
  v77[36] = @"fTotalTimeMediumPassiveCombined";
  uint64_t v25 = +[NSNumber numberWithUnsignedLong:v71];
  v78[36] = v25;
  v77[37] = @"fTotalTimeMediumActiveInternal";
  double v24 = +[NSNumber numberWithUnsignedLong:DWORD1(v71)];
  v78[37] = v24;
  v77[38] = @"fTotalTimeMediumActiveExternal";
  __int16 v23 = +[NSNumber numberWithUnsignedLong:DWORD2(v71)];
  v78[38] = v23;
  v77[39] = @"fTotalTimeMediumActiveCombined";
  double v22 = +[NSNumber numberWithUnsignedLong:HIDWORD(v71)];
  v78[39] = v22;
  v77[40] = @"fTotalTimeMediumLowPassiveInternal";
  unsigned int v21 = +[NSNumber numberWithUnsignedLong:v72];
  v78[40] = v21;
  v77[41] = @"fTotalTimeMediumLowPassiveExternal";
  double v20 = +[NSNumber numberWithUnsignedLong:DWORD1(v72)];
  v78[41] = v20;
  v77[42] = @"fTotalTimeMediumLowPassiveCombined";
  __int16 v19 = +[NSNumber numberWithUnsignedLong:DWORD2(v72)];
  v78[42] = v19;
  v77[43] = @"fTotalTimeMediumLowActiveInternal";
  CFStringRef v18 = +[NSNumber numberWithUnsignedLong:HIDWORD(v72)];
  v78[43] = v18;
  v77[44] = @"fTotalTimeMediumLowActiveExternal";
  int v17 = +[NSNumber numberWithUnsignedLong:v73];
  v78[44] = v17;
  v77[45] = @"fTotalTimeMediumLowActiveCombined";
  id v16 = +[NSNumber numberWithUnsignedLong:v73];
  v78[45] = v16;
  v77[46] = @"fTotalTimeLowPassiveInternal";
  char v15 = +[NSNumber numberWithUnsignedLong:DWORD2(v73)];
  v78[46] = v15;
  v77[47] = @"fTotalTimeLowPassiveExternal";
  CFStringRef v14 = +[NSNumber numberWithUnsignedLong:HIDWORD(v73)];
  v78[47] = v14;
  v77[48] = @"fTotalTimeLowPassiveCombined";
  uint64_t v2 = +[NSNumber numberWithUnsignedLong:v74];
  v78[48] = v2;
  v77[49] = @"fTotalTimeLowActiveInternal";
  id v3 = +[NSNumber numberWithUnsignedLong:DWORD1(v74)];
  v78[49] = v3;
  v77[50] = @"fTotalTimeLowActiveExternal";
  CFStringRef v4 = +[NSNumber numberWithUnsignedLong:DWORD2(v74)];
  v78[50] = v4;
  v77[51] = @"fTotalTimeLowActiveCombined";
  CFStringRef v5 = +[NSNumber numberWithUnsignedLong:HIDWORD(v74)];
  v78[51] = v5;
  v77[52] = @"fTotalTimeVeryLowPassiveInternal";
  CFStringRef v6 = +[NSNumber numberWithUnsignedLong:v75];
  v78[52] = v6;
  v77[53] = @"fTotalTimeVeryLowPassiveExternal";
  uint64_t v7 = +[NSNumber numberWithUnsignedLong:DWORD1(v75)];
  v78[53] = v7;
  v77[54] = @"fTotalTimeVeryLowPassiveCombined";
  uint64_t v8 = +[NSNumber numberWithUnsignedLong:DWORD2(v75)];
  v78[54] = v8;
  v77[55] = @"fTotalTimeVeryLowActiveInternal";
  uint64_t v9 = +[NSNumber numberWithUnsignedLong:HIDWORD(v75)];
  v78[55] = v9;
  v77[56] = @"fTotalTimeVeryLowActiveExternal";
  uint64_t v10 = +[NSNumber numberWithUnsignedLong:v76];
  v78[56] = v10;
  v77[57] = @"fTotalTimeVeryLowActiveCombined";
  float v11 = +[NSNumber numberWithUnsignedLong:v76];
  v78[57] = v11;
  float v12 = +[NSDictionary dictionaryWithObjects:v78 forKeys:v77 count:58];

  sub_10038094C(a1, 0x5Eu, v12);
}

void sub_1003AFA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58)
{
  _Unwind_Resume(a1);
}

void sub_1003AFDDC(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B02B4;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003AFE58(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B1BE0;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003AFED4(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B1E8C;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003AFF50(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B1FC4;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003AFFCC(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B2210;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003B0048(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B237C;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003B00C4(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B24B4;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003B0140(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B733C;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003B01BC(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B7628;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003B0238(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B2894;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1003B02B4(uint64_t a1)
{
  return sub_1003B02BC(*(void *)(a1 + 32));
}

uint64_t sub_1003B02BC(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Sending all day BT metrics to CoreAnalytics", buf, 2u);
  }
  uint64_t v159 = 0;
  *(void *)long long buf = 0;
  uint64_t v138 = a1;
  sub_10003AED0((uint64_t)buf, a1 + 176);
  long long v156 = 0u;
  long long v157 = 0u;
  long long v154 = 0u;
  long long v155 = 0u;
  id v3 = *(id *)(a1 + 304);
  unsigned __int16 v4 = 0;
  id v5 = [v3 countByEnumeratingWithState:&v154 objects:v183 count:16];
  if (v5)
  {
    unsigned __int16 v118 = 0;
    uint64_t v6 = *(void *)v155;
    do
    {
      uint64_t v7 = 0;
      v118 += (unsigned __int16)v5;
      do
      {
        if (*(void *)v155 != v6) {
          objc_enumerationMutation(v3);
        }
        uint64_t v8 = [*(id *)(v138 + 304) objectForKeyedSubscript:*(void *)(*((void *)&v154 + 1) + 8 * (void)v7)];
        unsigned __int16 v9 = (unsigned __int16)[v8 isEqual:&__kCFBooleanTrue];

        v4 += v9;
        uint64_t v7 = (char *)v7 + 1;
      }
      while (v5 != v7);
      id v5 = [v3 countByEnumeratingWithState:&v154 objects:v183 count:16];
    }
    while (v5);
  }
  else
  {
    unsigned __int16 v118 = 0;
  }

  long long v152 = 0u;
  long long v153 = 0u;
  long long v150 = 0u;
  long long v151 = 0u;
  id v10 = *(id *)(v138 + 312);
  id v11 = [v10 countByEnumeratingWithState:&v150 objects:v182 count:16];
  if (!v11)
  {
    unsigned __int16 v134 = 0;
    unsigned __int16 v130 = 0;
    unsigned __int16 v126 = 0;
    unsigned __int16 v121 = 0;
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
    double v16 = 0.0;
    goto LABEL_32;
  }
  unsigned __int16 v134 = 0;
  unsigned __int16 v130 = 0;
  unsigned __int16 v126 = 0;
  unsigned __int16 v121 = 0;
  uint64_t v12 = *(void *)v151;
  double v13 = 0.0;
  double v14 = 0.0;
  double v15 = 0.0;
  double v16 = 0.0;
  do
  {
    for (uint64_t i = 0; i != v11; uint64_t i = (char *)i + 1)
    {
      if (*(void *)v151 != v12) {
        objc_enumerationMutation(v10);
      }
      uint64_t v18 = *(void *)(*((void *)&v150 + 1) + 8 * i);
      __int16 v19 = [*(id *)(v138 + 312) objectForKeyedSubscript:v18];
      BOOL v20 = (unint64_t)[v19 count] > 1;

      if (v20)
      {
        unsigned int v21 = [*(id *)(v138 + 312) objectForKeyedSubscript:v18];
        double v22 = [v21 objectAtIndexedSubscript:0];
        unsigned int v23 = [v22 isEqualToString:@"isAppleDevice"];

        if (v23)
        {
          double v24 = [*(id *)(v138 + 312) objectForKeyedSubscript:v18];
          uint64_t v25 = [v24 objectAtIndexedSubscript:1];
          [v25 doubleValue];
          ++v130;
          double v13 = v13 + v26;
          goto LABEL_26;
        }
        uint64_t v28 = [*(id *)(v138 + 312) objectForKeyedSubscript:v18];
        uint64_t v29 = [v28 objectAtIndexedSubscript:0];
        unsigned int v30 = [v29 isEqualToString:@"BTResourceManagerconnectionUseCaseDigitalCarKey"];

        if (v30)
        {
          double v24 = [*(id *)(v138 + 312) objectForKeyedSubscript:v18];
          uint64_t v25 = [v24 objectAtIndexedSubscript:1];
          [v25 doubleValue];
          ++v126;
          double v14 = v14 + v31;
          goto LABEL_26;
        }
        int v32 = [*(id *)(v138 + 312) objectForKeyedSubscript:v18];
        int v33 = [v32 objectAtIndexedSubscript:0];
        unsigned int v34 = [v33 isEqualToString:@"BTResourceManagerconnectionUseCaseThirdPartyApp"];

        if (v34)
        {
          double v24 = [*(id *)(v138 + 312) objectForKeyedSubscript:v18];
          uint64_t v25 = [v24 objectAtIndexedSubscript:1];
          [v25 doubleValue];
          ++v121;
          double v15 = v15 + v35;
LABEL_26:
        }
        __int16 v36 = [*(id *)(v138 + 312) objectForKeyedSubscript:v18];
        id v37 = [v36 objectAtIndexedSubscript:1];
        [v37 doubleValue];
        double v39 = v38;

        ++v134;
        double v16 = v16 + v39;
        continue;
      }
      id v27 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075C578(&v148, v149, v27);
      }
    }
    id v11 = [v10 countByEnumeratingWithState:&v150 objects:v182 count:16];
  }
  while (v11);
LABEL_32:

  sub_10003AFE8((uint64_t)buf);
  if (qword_1009F8748 != -1) {
    dispatch_once(&qword_1009F8748, &stru_1009AA808);
  }
  int v40 = sub_100028CB4((uint64_t)off_1009F8740);
  long long v146 = 0u;
  long long v147 = 0u;
  long long v144 = 0u;
  long long v145 = 0u;
  uint64_t v41 = [*(id *)(v138 + 368) allKeys];
  id v42 = [v41 countByEnumeratingWithState:&v144 objects:v181 count:16];
  int v113 = v40;
  id v43 = 0;
  id v44 = 0;
  if (!v42)
  {
    obSCNetworkInterfaceRef j = 0;
    unsigned int v116 = 0;
    goto LABEL_52;
  }
  obSCNetworkInterfaceRef j = 0;
  unsigned int v116 = 0;
  uint64_t v45 = *(void *)v145;
  while (2)
  {
    uint64_t v46 = 0;
    while (2)
    {
      if (*(void *)v145 != v45) {
        objc_enumerationMutation(v41);
      }
      __int16 v47 = *(void **)(*((void *)&v144 + 1) + 8 * v46);
      if ([v47 isEqualToString:@"A1603"])
      {
        int v48 = [*(id *)(v138 + 368) objectForKeyedSubscript:v47];
        __int16 v49 = [v48 objectAtIndexedSubscript:0];
        id v43 = [v49 unsignedIntValue];
        goto LABEL_47;
      }
      if ([v47 isEqualToString:@"A2051"])
      {
        int v48 = [*(id *)(v138 + 368) objectForKeyedSubscript:v47];
        __int16 v49 = [v48 objectAtIndexedSubscript:0];
        id v44 = [v49 unsignedIntValue];
        goto LABEL_47;
      }
      if ([v47 isEqualToString:@"A3085"])
      {
        int v48 = [*(id *)(v138 + 368) objectForKeyedSubscript:v47];
        __int16 v49 = [v48 objectAtIndexedSubscript:0];
        obSCNetworkInterfaceRef j = [v49 unsignedIntValue];
        goto LABEL_47;
      }
      if ([v47 isEqualToString:@"A2538"])
      {
        int v48 = [*(id *)(v138 + 368) objectForKeyedSubscript:v47];
        __int16 v49 = [v48 objectAtIndexedSubscript:0];
        unsigned int v116 = [v49 unsignedIntValue];
LABEL_47:
      }
      if (v42 != (id)++v46) {
        continue;
      }
      break;
    }
    id v42 = [v41 countByEnumeratingWithState:&v144 objects:v181 count:16];
    if (v42) {
      continue;
    }
    break;
  }
LABEL_52:

  v179[0] = @"NumberOfA2DPSessionPerDay";
  int v50 = (unsigned __int16 *)v138;
  uint64_t v111 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 134)];
  v180[0] = v111;
  v179[1] = @"NumberOfAppleLEPencilPairedDeviceCount";
  uint64_t v109 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 568)];
  v180[1] = v109;
  v179[2] = @"NumberOfAppleLEPencilSessionPerDay";
  uint64_t v107 = +[NSNumber numberWithUnsignedInt:v44 + v43 + obj + v116];
  v180[2] = v107;
  v179[3] = @"NumberOfClassicLocalPairedDeviceCount";
  uint64_t v106 = +[NSNumber numberWithInt:v50[280] - v50[282]];
  v180[3] = v106;
  v179[4] = @"NumberOfHFPSessionPerDay";
  __int16 v105 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 136)];
  v180[4] = v105;
  v179[5] = @"NumberOfLECloudPairedDeviceCount";
  uint64_t v104 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 566)];
  v180[5] = v104;
  v179[6] = @"NumberOfLELocalPairedDeviceCount";
  uint64_t v103 = +[NSNumber numberWithInt:v50[281] - v50[283]];
  v180[6] = v103;
  v179[7] = @"NumberOfLEPairedDeviceCount";
  uint64_t v102 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 562)];
  v180[7] = v102;
  v179[8] = @"NumberOfMagicPairedDeviceCount";
  unsigned int v101 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 564)];
  v180[8] = v101;
  v179[9] = @"NumberOfPairedDeviceCount";
  uint64_t v100 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 560)];
  v180[9] = v100;
  v179[10] = @"NumberCTKDPairedDeviceCount";
  uint64_t v99 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 570)];
  v180[10] = v99;
  v179[11] = @"MaxClassicDeviceCount";
  unsigned int v98 = +[NSNumber numberWithUnsignedShort:v118];
  v180[11] = v98;
  v179[12] = @"MaxAppleClassicDeviceCount";
  uint64_t v97 = +[NSNumber numberWithUnsignedShort:v4];
  v180[12] = v97;
  v179[13] = @"MaxLEDeviceCount";
  unsigned int v96 = +[NSNumber numberWithUnsignedShort:v134];
  v180[13] = v96;
  v179[14] = @"MaxLEThirdPartyDeviceCount";
  int v95 = +[NSNumber numberWithUnsignedShort:v121];
  v180[14] = v95;
  v179[15] = @"MaxCarKeyDeviceCount";
  uint64_t v127 = +[NSNumber numberWithUnsignedShort:v126];
  v180[15] = v127;
  v179[16] = @"MaxAppleLEDeviceCount";
  uint64_t v131 = +[NSNumber numberWithUnsignedShort:v130];
  v180[16] = v131;
  v179[17] = @"PowerState";
  unsigned int v114 = +[NSNumber numberWithBool:v113 == 1];
  v180[17] = v114;
  v179[18] = @"TotalNumberOfDeviceCount";
  long long v135 = +[NSNumber numberWithInt:v134 + v118];
  v180[18] = v135;
  v179[19] = @"TotalAppleLESessionDurationInSec";
  long long v119 = +[NSNumber numberWithDouble:v13];
  v180[19] = v119;
  v179[20] = @"TotalCarKeyDeviceDurationInSec";
  __int16 v51 = +[NSNumber numberWithDouble:v14];
  v180[20] = v51;
  v179[21] = @"TotalLEDeviceDurationInSec";
  int v52 = +[NSNumber numberWithDouble:v16];
  v180[21] = v52;
  v179[22] = @"TotalLEThirdPartyAppSessionDurationInSec";
  __int16 v53 = +[NSNumber numberWithDouble:v15];
  v180[22] = v53;
  v179[23] = @"ClassicReadDeviceNameFromFlashSuccessDailyCount";
  int v54 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v138 + 600)];
  v180[23] = v54;
  v179[24] = @"ClassicReadDeviceNameFromFlashFailureDailyCount";
  __int16 v55 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v138 + 596)];
  v180[24] = v55;
  v179[25] = @"NumberOfApplePencilV1ConnectionsCount";
  int v56 = +[NSNumber numberWithUnsignedInt:v43];
  v180[25] = v56;
  v179[26] = @"NumberOfApplePencilV2ConnectionsCount";
  __int16 v57 = +[NSNumber numberWithUnsignedInt:v44];
  v180[26] = v57;
  v179[27] = @"NumberOfApplePencilV3ConnectionsCount";
  int v58 = +[NSNumber numberWithUnsignedInt:obj];
  v180[27] = v58;
  v179[28] = @"NumberOfApplePencilV4ConnectionsCount";
  __int16 v59 = +[NSNumber numberWithUnsignedInt:v116];
  v180[28] = v59;
  uint64_t v122 = +[NSDictionary dictionaryWithObjects:v180 forKeys:v179 count:29];

  uint64_t v60 = v138;
  sub_10038094C(v138, 0x47u, v122);
  unsigned int v120 = (unsigned int *)(v138 + 104);
  if (*(_WORD *)(v138 + 116))
  {
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003B1B9C;
    block[3] = &unk_100997528;
    void block[4] = v138;
    if (qword_100A125C8 != -1) {
      dispatch_once(&qword_100A125C8, block);
    }
    v161[0] = @"AutoDateTimeEnabled";
    uint64_t v162 = +[NSNumber numberWithBool:*(unsigned __int8 *)(v138 + 578)];
    v161[1] = @"AverageReferenceTimeDelta";
    long long v136 = (void *)v162;
    uint64_t v163 = +[NSNumber numberWithInt:*v120];
    v161[2] = @"AverageReferenceTimeUncertainty";
    uint64_t v132 = (void *)v163;
    uint64_t v164 = +[NSNumber numberWithInt:*(unsigned int *)(v138 + 108)];
    v161[3] = @"AverageReferenceTimeReliability";
    uint64_t v128 = (void *)v164;
    uint64_t v165 = +[NSNumber numberWithInt:*(unsigned int *)(v138 + 112)];
    v161[4] = @"numberOfAuthAndIntegrityTagsProcessed";
    id obja = (id)v165;
    v117 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 116)];
    __int16 v166 = v117;
    v161[5] = @"numberOfAuthAndIntegrityTagsResolved";
    long long v115 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 118)];
    uint64_t v167 = v115;
    v161[6] = @"NumberOfAuthTagsResolvedAndIntegrityNotResolved";
    uint64_t v112 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 120)];
    v168 = v112;
    v161[7] = @"NumberOfResolvedAuthTagsDecryptionFailed";
    uint64_t v110 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 122)];
    uint64_t v169 = v110;
    v161[8] = @"NumberOfResolvedAuthIntegrityTagsCurrentWindow";
    uint64_t v108 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 124)];
    uint64_t v170 = v108;
    v161[9] = @"NumberOfResolvedAuthIntegrityTagsPreviousWindow";
    int v61 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 126)];
    uint64_t v171 = v61;
    v161[10] = @"NumberOfResolvedAuthIntegrityTagsNextWindow";
    long long v62 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v138 + 128)];
    uint64_t v172 = v62;
    v161[11] = @"percentageOfAuthAndIntegrityTagsResolved";
    long long v63 = +[NSNumber numberWithDouble:(double)(*(unsigned __int16 *)(v138 + 118) / *(unsigned __int16 *)(v138 + 116)) * 100.0];
    uint64_t v173 = v63;
    v161[12] = @"percentageOfAuthTagsResolvedAndIntegrityNotResolved";
    long long v64 = +[NSNumber numberWithDouble:(double)(*(unsigned __int16 *)(v138 + 120) / *(unsigned __int16 *)(v138 + 116)) * 100.0];
    uint64_t v174 = v64;
    v161[13] = @"percentageOfResolvedAuthTagsDecryptionFailed";
    long long v65 = +[NSNumber numberWithDouble:(double)(*(unsigned __int16 *)(v138 + 122) / *(unsigned __int16 *)(v138 + 116)) * 100.0];
    uint64_t v175 = v65;
    v161[14] = @"percentageOfResolvedAuthIntegrityTagsCurrentWindow";
    unsigned int v66 = *(unsigned __int16 *)(v138 + 118);
    if (*(_WORD *)(v138 + 118)) {
      unsigned int v66 = *(unsigned __int16 *)(v138 + 124) / v66;
    }
    long long v67 = +[NSNumber numberWithDouble:(double)(int)v66 * 100.0];
    v176 = v67;
    v161[15] = @"percentageOfResolvedAuthIntegrityTagsPreviousWindow";
    unsigned int v68 = *(unsigned __int16 *)(v138 + 118);
    if (*(_WORD *)(v138 + 118)) {
      unsigned int v68 = *(unsigned __int16 *)(v138 + 126) / v68;
    }
    long long v69 = +[NSNumber numberWithDouble:(double)(int)v68 * 100.0];
    unsigned int v177 = v69;
    v161[16] = @"percentageOfResolvedAuthIntegrityTagsNextWindow";
    unsigned int v70 = *(unsigned __int16 *)(v138 + 118);
    if (*(_WORD *)(v138 + 118)) {
      unsigned int v70 = *(unsigned __int16 *)(v138 + 128) / v70;
    }
    long long v71 = +[NSNumber numberWithDouble:(double)(int)v70 * 100.0];
    v178 = v71;
    long long v72 = +[NSDictionary dictionaryWithObjects:&v162 forKeys:v161 count:17];

    sub_10038094C(v138, 0x3Fu, v72);
    uint64_t v60 = v138;
  }
  id v137 = objc_alloc_init((Class)NSMutableDictionary);
  long long v141 = 0u;
  long long v142 = 0u;
  long long v139 = 0u;
  long long v140 = 0u;
  long long v73 = [*(id *)(v60 + 336) allKeys];
  id objb = v73;
  id v74 = [v73 countByEnumeratingWithState:&v139 objects:v160 count:16];
  if (v74)
  {
    int v75 = 0;
    LODWORD(v76) = 0;
    uint64_t v129 = *(void *)v140;
    do
    {
      char v77 = 0;
      id v133 = v74;
      do
      {
        if (*(void *)v140 != v129) {
          objc_enumerationMutation(objb);
        }
        uint64_t v78 = *(void *)(*((void *)&v139 + 1) + 8 * (void)v77);
        [v137 setObject:v78 forKeyedSubscript:@"ServiceType"];
        uint64_t v79 = [*(id *)(v138 + 336) objectForKeyedSubscript:v78];
        uint64_t v80 = [v79 objectAtIndexedSubscript:0];
        unsigned int v81 = [v80 unsignedIntValue];
        uint64_t v82 = [*(id *)(v138 + 336) objectForKeyedSubscript:v78];
        uint64_t v83 = [v82 objectAtIndexedSubscript:1];
        uint64_t v84 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", 100 * v81 / [v83 unsignedIntValue]);
        [v137 setObject:v84 forKeyedSubscript:@"ConnectionSuccessPercentagePerDay"];

        uint64_t v85 = [*(id *)(v138 + 336) objectForKeyedSubscript:v78];
        id v86 = [(id)v85 objectAtIndexedSubscript:1];
        [v137 setObject:v86 forKeyedSubscript:@"TotalConnectionPerDay"];

        id v87 = [*(id *)(v138 + 336) objectForKeyedSubscript:v78];
        long long v88 = [v87 objectAtIndexedSubscript:0];
        LODWORD(v85) = [v88 unsignedIntValue];

        uint64_t v89 = [*(id *)(v138 + 336) objectForKeyedSubscript:v78];
        id v90 = [v89 objectAtIndexedSubscript:1];
        LODWORD(v88) = [v90 unsignedIntValue];

        sub_10038094C(v138, 0x73u, v137);
        v75 += v85;
        uint64_t v76 = (v88 + v76);
        char v77 = (char *)v77 + 1;
      }
      while (v133 != v77);
      id v74 = [objb countByEnumeratingWithState:&v139 objects:v160 count:16];
    }
    while (v74);

    uint64_t v91 = v138;
    if (v76)
    {
      [v137 setObject:@"Overall" forKeyedSubscript:@"ServiceType"];
      id v92 = +[NSNumber numberWithUnsignedInt:100 * v75 / v76];
      [v137 setObject:v92 forKeyedSubscript:@"ConnectionSuccessPercentagePerDay"];

      uint64_t v93 = +[NSNumber numberWithUnsignedInt:v76];
      [v137 setObject:v93 forKeyedSubscript:@"TotalConnectionPerDay"];

      uint64_t v91 = v138;
      sub_10038094C(v138, 0x73u, v137);
    }
  }
  else
  {

    uint64_t v91 = v138;
  }
  *(void *)unsigned int v120 = 0;
  *(void *)(v138 + 112) = 0;
  *(_DWORD *)(v138 + 128) = 0;
  *(void *)(v138 + 120) = 0;
  *(_DWORD *)(v91 + 132) = 0;
  *(_WORD *)(v91 + 136) = 0;
  [*(id *)(v91 + 304) removeAllObjects];
  [*(id *)(v91 + 312) removeAllObjects];
  [*(id *)(v91 + 328) removeAllObjects];
  [*(id *)(v91 + 336) removeAllObjects];
  [*(id *)(v91 + 344) removeAllObjects];
  [*(id *)(v91 + 368) removeAllObjects];
  [*(id *)(v91 + 376) removeAllObjects];
  *(void *)(v91 + 596) = 0;

  return sub_10003AFB4((uint64_t)buf);
}

void sub_1003B1690(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31)
{
  sub_10003AFB4((uint64_t)&STACK[0x200]);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B1B9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  *(unsigned char *)(v1 + 578) = TMIsAutomaticTimeEnabled() != 0;

  return sub_10037FC10(v1);
}

void sub_1003B1BE0(uint64_t a1, __n128 a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 472);
  unsigned __int16 v4 = (void *)(v2 + 480);
  if (v3 != (void *)(v2 + 480))
  {
    a2.n128_u64[0] = 138412290;
    __n128 v17 = a2;
    do
    {
      v20[0] = @"NearbyActionType";
      unint64_t v5 = *((char *)v3 + 32);
      uint64_t v6 = "?";
      if (v5 <= 0x58) {
        uint64_t v6 = off_1009AAD30[v5];
      }
      uint64_t v7 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v6, *(_OWORD *)&v17);
      v21[0] = v7;
      v20[1] = @"NearbyActionTypeFlags";
      uint64_t v8 = CUPrintFlags32();
      v21[1] = v8;
      v20[2] = @"NearbyActionTypeFlags2";
      unsigned __int16 v9 = CUPrintFlags32();
      void v21[2] = v9;
      void v20[3] = @"NearbyActionTypeCounter";
      id v10 = +[NSNumber numberWithUnsignedLongLong:v3[6]];
      void v21[3] = v10;
      void v20[4] = @"NearbyActionTypeDuration";
      id v11 = +[NSNumber numberWithUnsignedLongLong:v3[7]];
      void v21[4] = v11;
      uint64_t v12 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:5];

      double v13 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = v17.n128_u32[0];
        __int16 v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "sending NearbyActionDailyStats : %@", buf, 0xCu);
      }
      sub_10038094C(v2, 0x6Fu, v12);

      double v14 = (void *)v3[1];
      if (v14)
      {
        do
        {
          double v15 = v14;
          double v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          double v15 = (void *)v3[2];
          BOOL v16 = *v15 == (void)v3;
          id v3 = v15;
        }
        while (!v16);
      }
      id v3 = v15;
    }
    while (v15 != v4);
  }
  sub_1000486F0(v2 + 472, *(void **)(v2 + 480));
  *(void *)(v2 + 480) = 0;
  *(void *)(v2 + 488) = 0;
  *(void *)(v2 + 472) = v4;
}

void sub_1003B1E38(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B1E8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(void *)(v1 + 584))
  {
    CFStringRef v7 = @"T26FindingSessionDailyCount";
    uint64_t v2 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:");
    uint64_t v8 = v2;
    id v3 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

    unsigned __int16 v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      int v5 = 138412290;
      uint64_t v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "sending T26FindingSessionDailyCount: %@", (uint8_t *)&v5, 0xCu);
    }
    sub_10038094C(v1, 0x75u, v3);
    *(void *)(v1 + 584) = 0;
  }
}

void sub_1003B1FA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B1FC4(uint64_t a1, __n128 a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v3 = *(void **)(v2 + 496);
  unsigned __int16 v4 = (void *)(v2 + 504);
  if (v3 != (void *)(v2 + 504))
  {
    a2.n128_u64[0] = 138412290;
    __n128 v17 = a2;
    do
    {
      v20[0] = @"RefHour";
      int v5 = +[NSNumber numberWithUnsignedChar:](NSNumber, "numberWithUnsignedChar:", *((unsigned __int8 *)v3 + 28), *(_OWORD *)&v17);
      v21[0] = v5;
      v20[1] = @"Duration";
      LODWORD(v6) = *((_DWORD *)v3 + 8);
      CFStringRef v7 = +[NSNumber numberWithFloat:v6];
      v21[1] = v7;
      v20[2] = @"RSSI";
      LODWORD(v8) = *((_DWORD *)v3 + 9);
      unsigned __int16 v9 = +[NSNumber numberWithFloat:v8];
      void v21[2] = v9;
      void v20[3] = @"MPS";
      LODWORD(v10) = *((_DWORD *)v3 + 10);
      id v11 = +[NSNumber numberWithFloat:v10];
      void v21[3] = v11;
      uint64_t v12 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:4];

      double v13 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_DWORD *)long long buf = v17.n128_u32[0];
        __int16 v19 = v12;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "sending NearbyActionInfoV2DensityDailyStats : %@", buf, 0xCu);
      }
      sub_10038094C(v2, 0x70u, v12);

      double v14 = (void *)v3[1];
      if (v14)
      {
        do
        {
          double v15 = v14;
          double v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          double v15 = (void *)v3[2];
          BOOL v16 = *v15 == (void)v3;
          id v3 = v15;
        }
        while (!v16);
      }
      id v3 = v15;
    }
    while (v15 != v4);
  }
  sub_1000486F0(v2 + 496, *(void **)(v2 + 504));
  *(void *)(v2 + 504) = 0;
  *(void *)(v2 + 512) = 0;
  *(void *)(v2 + 496) = v4;
}

void sub_1003B21C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B2210(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 2368))(v2) && *(void *)(v1 + 520))
  {
    CFStringRef v8 = @"AOPBTPrecisionFindingKeysCount";
    id v3 = +[NSNumber numberWithUnsignedInteger:](NSNumber, "numberWithUnsignedInteger:");
    unsigned __int16 v9 = v3;
    unsigned __int16 v4 = +[NSDictionary dictionaryWithObjects:&v9 forKeys:&v8 count:1];

    int v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      int v6 = 138412290;
      CFStringRef v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "sending AOPBTPrecisionFindingKeysUsage : %@", (uint8_t *)&v6, 0xCu);
    }
    sub_10038094C(v1, 0x3Cu, v4);
    *(void *)(v1 + 520) = 0;
  }
}

void sub_1003B2358(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B237C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(_WORD *)(v1 + 592))
  {
    CFStringRef v7 = @"GATTDiscoverServiceWithUUIDCacheMissDailyCount";
    uint64_t v2 = +[NSNumber numberWithUnsignedShort:](NSNumber, "numberWithUnsignedShort:");
    CFStringRef v8 = v2;
    id v3 = +[NSDictionary dictionaryWithObjects:&v8 forKeys:&v7 count:1];

    unsigned __int16 v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 138412290;
      int v6 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sending GattDailyStats : %@", (uint8_t *)&v5, 0xCu);
    }
    sub_10038094C(v1, 0x52u, v3);
    *(_WORD *)(v1 + ++*(_WORD *)(*(void *)(result + 32) + 592) = 0;
  }
}

void sub_1003B2490(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B24B4(uint64_t a1)
{
  uint64_t v1 = *(unsigned int **)(a1 + 32);
  memset(__s1, 0, sizeof(__s1));
  if (memcmp(__s1, v1 + 172, 0x30uLL))
  {
    v19[0] = @"TotalWildReports";
    double v15 = +[NSNumber numberWithUnsignedInt:v1[172]];
    v20[0] = v15;
    v19[1] = @"TotalNearOwnerReports";
    double v14 = +[NSNumber numberWithUnsignedInt:v1[173]];
    v20[1] = v14;
    void v19[2] = @"TotalType18NearOwner";
    double v13 = +[NSNumber numberWithUnsignedInt:v1[174]];
    v20[2] = v13;
    void v19[3] = @"TotalPoshNearOwnerApple";
    uint64_t v12 = +[NSNumber numberWithUnsignedInt:v1[175]];
    void v20[3] = v12;
    void v19[4] = @"TotalPoshNearOwnerNonApple";
    id v11 = +[NSNumber numberWithUnsignedInt:v1[176]];
    void v20[4] = v11;
    v19[5] = @"TotalType18Wild";
    uint64_t v2 = +[NSNumber numberWithUnsignedInt:v1[177]];
    void v20[5] = v2;
    void v19[6] = @"TotalPoshWildApple";
    id v3 = +[NSNumber numberWithUnsignedInt:v1[178]];
    v20[6] = v3;
    v19[7] = @"TotalPoshWildNonApple";
    unsigned __int16 v4 = +[NSNumber numberWithUnsignedInt:v1[179]];
    v20[7] = v4;
    v19[8] = @"TotalWildBufferReads";
    int v5 = +[NSNumber numberWithUnsignedInt:v1[180]];
    v20[8] = v5;
    v19[9] = @"TotalNearOwnerBufferReads";
    int v6 = +[NSNumber numberWithUnsignedInt:v1[181]];
    v20[9] = v6;
    v19[10] = @"MaxWildBufferReports";
    CFStringRef v7 = +[NSNumber numberWithUnsignedInt:v1[182]];
    v20[10] = v7;
    v19[11] = @"MaxNearOwnerBufferReports";
    CFStringRef v8 = +[NSNumber numberWithUnsignedInt:v1[183]];
    v20[11] = v8;
    unsigned __int16 v9 = +[NSDictionary dictionaryWithObjects:v20 forKeys:v19 count:12];

    double v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "sending AdvBufferFindMyDailyMetric : %@", buf, 0xCu);
    }
    sub_10038094C((uint64_t)v1, 0x7Au, v9);
    *((_OWORD *)v1 + 44) = 0u;
    *((_OWORD *)v1 + 45) = 0u;
    *((_OWORD *)v1 + 43) = 0u;
  }
}

void sub_1003B27D8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B2894(uint64_t a1)
{
  uint64_t v1 = 0;
  unint64_t v2 = 0;
  uint64_t v3 = *(void *)(a1 + 32);
  unsigned __int16 v4 = (unsigned int *)(v3 + 736);
  unsigned int v5 = *(_DWORD *)(v3 + 736);
  v36[0] = v5 >> 1;
  v36[1] = (3 * v5) >> 2;
  _OWORD v36[2] = 9 * v5 / 0xA;
  void v36[3] = 19 * v5 / 0x14;
  v36[4] = 99 * v5 / 0x64;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  unsigned int v35 = 0;
  unsigned int v6 = *(_DWORD *)(v3 + 752);
  do
  {
    unsigned int v7 = v36[v1];
    if (v7 > v6 && v2 <= 4)
    {
      uint64_t v9 = 0;
      do
      {
        unint64_t v10 = v2 + v9;
        v6 += *(_DWORD *)(v3 + 756 + 4 * v2 + 4 * v9++);
      }
      while (v7 > v6 && v10 < 4);
      unint64_t v2 = (v2 + v9);
    }
    *((_DWORD *)&v33 + v1++) = byte_1007BCEED[v2];
  }
  while (v1 != 5);
  v31[0] = @"AdvPayload_Average";
  uint64_t v28 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 748)];
  v32[0] = v28;
  v31[1] = @"ADVPayload_Max";
  id v27 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 740)];
  v32[1] = v27;
  v31[2] = @"ADVPayload_Min";
  double v26 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 744)];
  void v32[2] = v26;
  void v31[3] = @"AverageAdvertismentsReceived";
  uint64_t v25 = +[NSNumber numberWithUnsignedInt:*v4];
  void v32[3] = v25;
  v31[4] = @"NumberOfAdvMode00";
  double v24 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 772)];
  v32[4] = v24;
  void v31[5] = @"NumberOfAdvMode01";
  unsigned int v23 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 776)];
  void v32[5] = v23;
  v31[6] = @"NumberOfAdvMode10";
  double v22 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 780)];
  v32[6] = v22;
  v31[7] = @"NumberOfDirectedAdv";
  unsigned int v21 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 784)];
  v32[7] = v21;
  v31[8] = @"NumberOfLE1MAdv";
  uint64_t v12 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 788)];
  v32[8] = v12;
  v31[9] = @"NumberOfLE2MAdv";
  double v13 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(v3 + 792)];
  v32[9] = v13;
  v31[10] = @"AdvPayload_Median";
  double v14 = +[NSNumber numberWithUnsignedInt:v33];
  unsigned char v32[10] = v14;
  v31[11] = @"AdvPayload_P75";
  double v15 = +[NSNumber numberWithUnsignedInt:HIDWORD(v33)];
  v32[11] = v15;
  v31[12] = @"AdvPayload_P90";
  BOOL v16 = +[NSNumber numberWithUnsignedInt:v34];
  v32[12] = v16;
  v31[13] = @"AdvPayload_P95";
  __n128 v17 = +[NSNumber numberWithUnsignedInt:HIDWORD(v34)];
  v32[13] = v17;
  v31[14] = @"AdvPayload_P99";
  uint64_t v18 = +[NSNumber numberWithUnsignedInt:v35];
  v32[14] = v18;
  __int16 v19 = +[NSDictionary dictionaryWithObjects:v32 forKeys:v31 count:15];

  BOOL v20 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    unsigned int v30 = v19;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "sending ExtAdvDailyMetric : %@", buf, 0xCu);
  }
  sub_10038094C(v3, 0x7Bu, v19);
  *(_OWORD *)(v3 + 780) = 0u;
  *(_OWORD *)(v3 + 752) = 0u;
  *(_OWORD *)(v3 + 768) = 0u;
  *(_OWORD *)unsigned __int16 v4 = 0u;
}

void sub_1003B2CEC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B2DD8(uint64_t a1, unsigned int *a2, int a3, uint64_t a4, unsigned int a5, uint8x8_t a6, uint8x8_t a7)
{
  if (a3 == 2) {
    CFStringRef v9 = @"Anomaly";
  }
  else {
    CFStringRef v9 = @"Normal";
  }
  unint64_t v10 = *((char *)a2 + 70);
  if (v10 > 0xC) {
    CFStringRef v11 = @"NA";
  }
  else {
    CFStringRef v11 = (const __CFString *)*((void *)&off_1009AAFF8 + v10);
  }
  uint64_t v12 = *(void *)(a1 + 664);
  if (!v12) {
    goto LABEL_18;
  }
  uint64_t v13 = a1 + 664;
  do
  {
    unsigned int v14 = *(unsigned __int16 *)(v12 + 32);
    BOOL v15 = v14 >= a5;
    if (v14 >= a5) {
      BOOL v16 = (uint64_t *)v12;
    }
    else {
      BOOL v16 = (uint64_t *)(v12 + 8);
    }
    if (v15) {
      uint64_t v13 = v12;
    }
    uint64_t v12 = *v16;
  }
  while (*v16);
  if (v13 == a1 + 664 || *(unsigned __int16 *)(v13 + 32) > a5)
  {
LABEL_18:
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    unsigned int v123 = 0;
    uint64_t v19 = 0;
    unsigned int v121 = 0;
    int8x8_t v127 = 0;
    goto LABEL_19;
  }
  unsigned __int8 v32 = *(unsigned char *)(v13 + 184);
  unsigned __int8 v33 = *(unsigned char *)(v13 + 185);
  char v34 = *(unsigned char *)(v13 + 264);
  a6.i32[0] = *(_DWORD *)(v13 + 191);
  int16x4_t v35 = (int16x4_t)vmovl_u8(a6).u64[0];
  a7.i32[0] = *(_DWORD *)(v13 + 271);
  int16x4_t v36 = (int16x4_t)vmovl_u8(a7).u64[0];
  int16x4_t v37 = (int16x4_t)vcgt_u16((uint16x4_t)v35, (uint16x4_t)v36);
  if (v34 & 1) != 0 && (v32)
  {
    uint64_t v17 = 2;
  }
  else if (*(unsigned char *)(v13 + 264) & 1) == 0 || (v32)
  {
    int v38 = v34 & 1;
    unsigned int v39 = (v38 == 0) & v32;
    int v40 = v39 | v38;
    if (*(unsigned char *)(v13 + 184)) {
      unsigned int v41 = 0;
    }
    else {
      unsigned int v41 = 3;
    }
    if (v40) {
      uint64_t v17 = v39;
    }
    else {
      uint64_t v17 = v41;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  int16x4_t v42 = (int16x4_t)vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)v37);
  char v43 = *(unsigned char *)(v13 + 187);
  unsigned __int8 v44 = *(unsigned char *)(v13 + 186);
  if (*(unsigned char *)(v13 + 265) & 1) != 0 && (v33)
  {
    uint64_t v18 = 2;
  }
  else if (*(unsigned char *)(v13 + 265) & 1) == 0 || (v33)
  {
    int v45 = *(unsigned char *)(v13 + 265) & 1;
    unsigned int v46 = (v45 == 0) & v33;
    int v47 = v46 | v45;
    if (*(unsigned char *)(v13 + 185)) {
      unsigned int v48 = 0;
    }
    else {
      unsigned int v48 = 3;
    }
    if (v47) {
      uint64_t v18 = v46;
    }
    else {
      uint64_t v18 = v48;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  unsigned __int8 v49 = *(unsigned char *)(v13 + 189);
  char v50 = *(unsigned char *)(v13 + 267);
  int8x8_t v51 = (int8x8_t)vceq_s16(v35, v36);
  int8x8_t v52 = (int8x8_t)vsub_s16(v42, v37);
  if (*(unsigned char *)(v13 + 266) & 1) != 0 && (v44)
  {
    int v53 = 2;
  }
  else if (*(unsigned char *)(v13 + 266) & 1) == 0 || (v44)
  {
    int v54 = *(unsigned char *)(v13 + 266) & 1;
    int v55 = (v54 == 0) & v44;
    int v56 = v55 | v54;
    if (*(unsigned char *)(v13 + 186)) {
      int v57 = 0;
    }
    else {
      int v57 = 3;
    }
    if (v56) {
      int v53 = v55;
    }
    else {
      int v53 = v57;
    }
  }
  else
  {
    int v53 = 0;
  }
  int v58 = *(unsigned __int8 *)(v13 + 190);
  char v59 = *(unsigned char *)(v13 + 188);
  char v60 = *(unsigned char *)(v13 + 268);
  char v61 = *(unsigned char *)(v13 + 269);
  char v62 = *(unsigned char *)(v13 + 270);
  unsigned int v123 = v53;
  int8x8_t v127 = vbic_s8(v52, v51);
  if (v43 & 1) != 0 && (v50)
  {
    uint64_t v19 = 2;
LABEL_71:
    if (v59 & 1) != 0 && (v60)
    {
      int v63 = 4;
    }
    else if (v49 & 1) != 0 && (v61)
    {
      int v63 = 5;
    }
    else if (v58 & 1) != 0 && (v62)
    {
      int v63 = 6;
    }
    else if (v59 & 1) == 0 || (v60)
    {
      if (v62) {
        int v65 = 0;
      }
      else {
        int v65 = 9;
      }
      int v63 = (v58 << 31 >> 31) & v65;
      if ((v49 & ((v61 & 1) == 0)) != 0) {
        int v63 = 8;
      }
    }
    else
    {
      int v63 = 7;
    }
    goto LABEL_107;
  }
  if (v43 & 1) == 0 || (v50)
  {
    char v64 = v43 & 1;
    if ((v50 & 1) == 0) {
      char v64 = 1;
    }
    if (v43) {
      char v64 = 0;
    }
    if ((v64 & ((v50 & 1) == 0)) != 0) {
      uint64_t v19 = 3;
    }
    else {
      uint64_t v19 = 0;
    }
    if ((v43 & 1) == 0)
    {
      unsigned int v121 = 0;
      goto LABEL_19;
    }
    if (v50) {
      goto LABEL_71;
    }
  }
  else
  {
    uint64_t v19 = 1;
  }
  if (v59)
  {
    int v63 = 1;
  }
  else if (v49)
  {
    int v63 = 2;
  }
  else
  {
    int v63 = (v58 << 31 >> 31) & 3;
  }
LABEL_107:
  unsigned int v121 = v63;
LABEL_19:
  unsigned int v20 = a2[2];
  uint64_t v67 = v20 >> 4;
  uint64_t v68 = v20 & 0xF;
  uint64_t v66 = BYTE1(v20);
  long long v125 = NSPrintF_safe();
  v131[0] = @"AverageHIDLatencyInMSec";
  unsigned int v120 = +[NSNumber numberWithChar:](NSNumber, "numberWithChar:", *((unsigned __int8 *)a2 + 69), v66, v67, v68);
  v132[0] = v120;
  v131[1] = @"DisconnectReason";
  unsigned int v114 = +[NSNumber numberWithUnsignedInt:a2[7]];
  v132[1] = v114;
  v131[2] = @"HIDType";
  unsigned int v116 = +[NSNumber numberWithUnsignedChar:a4];
  v132[2] = v116;
  v131[3] = @"IsA2DPStreaming";
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AA6C8);
  }
  long long v115 = +[NSNumber numberWithBool:*((unsigned __int8 *)off_1009F8150 + 197)];
  v132[3] = v115;
  v131[4] = @"IsDeviceStatisticEnabled";
  v117 = +[NSNumber numberWithBool:*((unsigned __int8 *)a2 + 12)];
  v132[4] = v117;
  v131[5] = @"IsHFPActive";
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AA6C8);
  }
  unsigned __int16 v118 = +[NSNumber numberWithBool:*((unsigned __int8 *)off_1009F8150 + 198)];
  v132[5] = v118;
  v131[6] = @"IsLEAStreaming";
  if (qword_1009F8158 != -1) {
    dispatch_once(&qword_1009F8158, &stru_1009AA6C8);
  }
  long long v119 = +[NSNumber numberWithBool:*((unsigned __int8 *)off_1009F8150 + 199)];
  v132[6] = v119;
  v131[7] = @"NumberOfAppleMouseOrTrackpadConnected";
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AA668);
  }
  int v113 = +[NSNumber numberWithUnsignedInt:sub_1004AC764((uint64_t)off_1009F7EF8)];
  v132[7] = v113;
  v131[8] = @"NumberOfAppleKeyboardConnected";
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AA668);
  }
  uint64_t v112 = +[NSNumber numberWithUnsignedInt:sub_1004AC86C((uint64_t)off_1009F7EF8)];
  v132[8] = v112;
  v131[9] = @"PER";
  uint64_t v111 = +[NSNumber numberWithInt:a2[6]];
  v132[9] = v111;
  v131[10] = @"PID";
  uint64_t v110 = +[NSNumber numberWithUnsignedInt:*a2];
  v132[10] = v110;
  v131[11] = @"RSSI";
  uint64_t v109 = +[NSNumber numberWithInt:a2[5]];
  v132[11] = v109;
  v131[12] = @"VID";
  uint64_t v107 = +[NSNumber numberWithUnsignedInt:a2[1]];
  v132[12] = v107;
  v132[13] = v125;
  v131[13] = @"FWVersion";
  v131[14] = @"DSniffOffset";
  uint64_t v106 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)a2 + 16)];
  v132[14] = v106;
  v131[15] = @"StatisticsCollectedInSeconds";
  __int16 v105 = +[NSNumber numberWithUnsignedInt:a2[9]];
  v132[15] = v105;
  v131[16] = @"SniffIntervalServiced";
  uint64_t v104 = +[NSNumber numberWithUnsignedInt:a2[10]];
  v132[16] = v104;
  v131[17] = @"SniffIntervalServicedPercentage";
  uint64_t v103 = +[NSNumber numberWithChar:*((unsigned __int8 *)a2 + 44)];
  v132[17] = v103;
  v131[18] = @"SniffIntervalSkipped";
  uint64_t v102 = +[NSNumber numberWithUnsignedInt:a2[12]];
  v132[18] = v102;
  v131[19] = @"SniffIntervalSkippedPercentage";
  unsigned int v101 = +[NSNumber numberWithChar:*((unsigned __int8 *)a2 + 52)];
  v132[19] = v101;
  v131[20] = @"CentralSkipDenials";
  uint64_t v100 = +[NSNumber numberWithUnsignedInt:a2[16]];
  v132[20] = v100;
  v131[21] = @"CentralSkipDenialsPercentage";
  uint64_t v99 = +[NSNumber numberWithChar:*((unsigned __int8 *)a2 + 68)];
  v132[21] = v99;
  v131[22] = @"NoSync";
  unsigned int v98 = +[NSNumber numberWithUnsignedInt:a2[14]];
  v132[22] = v98;
  v131[23] = @"NoSyncPercentage";
  uint64_t v97 = +[NSNumber numberWithChar:*((unsigned __int8 *)a2 + 60)];
  v132[23] = v97;
  v132[24] = v11;
  v131[24] = @"MaxHIDLatencyInMSec";
  v131[25] = @"TotalAnomaliesInBins";
  unsigned int v96 = +[NSNumber numberWithUnsignedInt:a2[4]];
  v132[25] = v96;
  v131[26] = @"SniffInterval_Bin_00_7.5ms";
  int v95 = +[NSNumber numberWithUnsignedInt:a2[18]];
  v132[26] = v95;
  v131[27] = @"SniffInterval_Bin_01_11.25ms";
  id v94 = +[NSNumber numberWithUnsignedInt:a2[19]];
  v132[27] = v94;
  v131[28] = @"SniffInterval_Bin_02_15ms";
  uint64_t v93 = +[NSNumber numberWithUnsignedInt:a2[20]];
  v132[28] = v93;
  v131[29] = @"SniffInterval_Bin_03_22.5ms";
  id v92 = +[NSNumber numberWithUnsignedInt:a2[21]];
  v132[29] = v92;
  v131[30] = @"SniffInterval_Bin_04_30ms";
  uint64_t v91 = +[NSNumber numberWithUnsignedInt:a2[22]];
  v132[30] = v91;
  v131[31] = @"SniffInterval_Bin_05_45ms";
  id v90 = +[NSNumber numberWithUnsignedInt:a2[23]];
  v132[31] = v90;
  v131[32] = @"SniffInterval_Bin_06_60ms";
  uint64_t v89 = +[NSNumber numberWithUnsignedInt:a2[24]];
  v132[32] = v89;
  v131[33] = @"SniffInterval_Bin_07_90ms";
  long long v88 = +[NSNumber numberWithUnsignedInt:a2[25]];
  v132[33] = v88;
  v131[34] = @"SniffInterval_Bin_08_120ms";
  id v87 = +[NSNumber numberWithUnsignedInt:a2[26]];
  v132[34] = v87;
  v131[35] = @"SniffInterval_Bin_09_150ms";
  id v86 = +[NSNumber numberWithUnsignedInt:a2[27]];
  v132[35] = v86;
  v131[36] = @"SniffInterval_Bin_10_500ms";
  uint64_t v85 = +[NSNumber numberWithUnsignedInt:a2[28]];
  v132[36] = v85;
  v131[37] = @"SniffInterval_Bin_11_750ms";
  uint64_t v84 = +[NSNumber numberWithUnsignedInt:a2[29]];
  v132[37] = v84;
  v131[38] = @"SniffInterval_Bin_12_>750ms";
  uint64_t v83 = +[NSNumber numberWithUnsignedInt:a2[30]];
  v132[38] = v83;
  v132[39] = v9;
  v131[39] = @"TriggerReason";
  v131[40] = @"ConnectedClassicDevice";
  uint64_t v82 = +[NSNumber numberWithUnsignedChar:v127.u8[0]];
  v132[40] = v82;
  v131[41] = @"ConnectedClassicHIDDevice";
  unsigned int v81 = +[NSNumber numberWithUnsignedChar:v127.u8[2]];
  v132[41] = v81;
  v131[42] = @"ConnectedLEDevice";
  uint64_t v80 = +[NSNumber numberWithUnsignedChar:v127.u8[4]];
  v132[42] = v80;
  v131[43] = @"ConnectedLEHIDDevice";
  uint64_t v79 = +[NSNumber numberWithUnsignedChar:v127.u8[6]];
  v132[43] = v79;
  v131[44] = @"A2DPSessionState";
  uint64_t v78 = +[NSNumber numberWithUnsignedChar:v17];
  v132[44] = v78;
  v131[45] = @"HFPSessionState";
  char v77 = +[NSNumber numberWithUnsignedChar:v18];
  v132[45] = v77;
  v131[46] = @"LEASessionState";
  uint64_t v124 = +[NSNumber numberWithUnsignedChar:v123];
  v132[46] = v124;
  v131[47] = @"WiFiPowerState";
  uint64_t v76 = +[NSNumber numberWithUnsignedChar:v19];
  v132[47] = v76;
  v131[48] = @"WiFiOnWhichBand";
  uint64_t v122 = +[NSNumber numberWithUnsignedChar:v121];
  v132[48] = v122;
  v131[49] = @"NumberOfRSSIIncreasedBetween03To05dBm";
  int v75 = +[NSNumber numberWithUnsignedInt:a2[31]];
  v132[49] = v75;
  v131[50] = @"NumberOfRSSIIncreasedBetween06To10dBm";
  id v74 = +[NSNumber numberWithUnsignedInt:a2[32]];
  v132[50] = v74;
  v131[51] = @"NumberOfRSSIIncreasedBetween11To15dBm";
  long long v73 = +[NSNumber numberWithUnsignedInt:a2[33]];
  v132[51] = v73;
  v131[52] = @"NumberOfRSSIIncreasedBetween16To20dBm";
  long long v72 = +[NSNumber numberWithUnsignedInt:a2[34]];
  v132[52] = v72;
  v131[53] = @"NumberOfRSSIIncreasedBetween21To25dBm";
  long long v71 = +[NSNumber numberWithUnsignedInt:a2[35]];
  v132[53] = v71;
  v131[54] = @"NumberOfRSSIIncreasedBetween26To30dBm";
  unsigned int v70 = +[NSNumber numberWithUnsignedInt:a2[36]];
  v132[54] = v70;
  v131[55] = @"NumberOfRSSIIncreasedMoreThan30dBm";
  long long v69 = +[NSNumber numberWithUnsignedInt:a2[37]];
  v132[55] = v69;
  v131[56] = @"NumberOfRSSIDecreasedBetween03To05dBm";
  unsigned int v21 = +[NSNumber numberWithUnsignedInt:a2[38]];
  v132[56] = v21;
  v131[57] = @"NumberOfRSSIDecreasedBetween06To10dBm";
  double v22 = +[NSNumber numberWithUnsignedInt:a2[39]];
  v132[57] = v22;
  v131[58] = @"NumberOfRSSIDecreasedBetween11To15dBm";
  unsigned int v23 = +[NSNumber numberWithUnsignedInt:a2[40]];
  v132[58] = v23;
  v131[59] = @"NumberOfRSSIDecreasedBetween16To20dBm";
  double v24 = +[NSNumber numberWithUnsignedInt:a2[41]];
  v132[59] = v24;
  v131[60] = @"NumberOfRSSIDecreasedBetween21To25dBm";
  uint64_t v25 = +[NSNumber numberWithUnsignedInt:a2[42]];
  v132[60] = v25;
  v131[61] = @"NumberOfRSSIDecreasedBetween26To30dBm";
  double v26 = +[NSNumber numberWithUnsignedInt:a2[43]];
  v132[61] = v26;
  v131[62] = @"NumberOfRSSIDecreasedMoreThan30dBm";
  id v27 = +[NSNumber numberWithUnsignedInt:a2[44]];
  v132[62] = v27;
  v131[63] = @"DeviceHighestRSSI";
  uint64_t v28 = +[NSNumber numberWithInt:a2[45]];
  v132[63] = v28;
  v131[64] = @"DeviceLowestRSSI";
  uint64_t v29 = +[NSNumber numberWithInt:a2[46]];
  v132[64] = v29;
  uint64_t v128 = +[NSDictionary dictionaryWithObjects:v132 forKeys:v131 count:65];

  sub_10038094C(a1, 0x58u, v128);
  if (a3 == 2)
  {
    unsigned int v30 = +[NSMutableDictionary dictionaryWithDictionary:v128];
    [v30 setObject:@"HIDLagDetected" forKeyedSubscript:@"_input"];
    v129[0] = _NSConcreteStackBlock;
    v129[1] = 3221225472;
    v129[2] = sub_1003B4228;
    v129[3] = &unk_1009AA568;
    id v130 = objc_alloc_init((Class)BTServicesClient);
    id v31 = v130;
    [v31 diagnosticControl:v30 completion:v129];
  }
}

void sub_1003B3E1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  _Unwind_Resume(a1);
}

id sub_1003B4228(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

void sub_1003B4230(uint64_t a1, double *a2)
{
  v12[0] = @"HIDIntervalUpdated";
  v11[0] = @"_input";
  v11[1] = @"DeviceName";
  uint64_t v3 = (uint64_t *)a2;
  if (*((char *)a2 + 23) < 0) {
    uint64_t v3 = *(uint64_t **)a2;
  }
  unsigned __int16 v4 = +[NSString stringWithUTF8String:v3];
  v12[1] = v4;
  void v11[2] = @"DeviceType";
  unsigned int v5 = +[NSNumber numberWithUnsignedChar:*((unsigned __int8 *)a2 + 24)];
  _DWORD v12[2] = v5;
  v11[3] = @"Intervalms";
  unsigned int v6 = +[NSNumber numberWithDouble:a2[4]];
  v12[3] = v6;
  unsigned int v7 = +[NSDictionary dictionaryWithObjects:v12 forKeys:v11 count:4];

  v9[0] = _NSConcreteStackBlock;
  v9[1] = 3221225472;
  void v9[2] = sub_1003B4418;
  v9[3] = &unk_1009AA568;
  id v10 = objc_alloc_init((Class)BTServicesClient);
  id v8 = v10;
  [v8 diagnosticControl:v7 completion:v9];
}

void sub_1003B43C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

id sub_1003B4418(uint64_t a1)
{
  return [*(id *)(a1 + 32) invalidate];
}

int64_t sub_1003B4420(uint64_t a1, void *a2)
{
  id v2 = a2;
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
  }
  uint64_t v3 = off_1009F7ED8;
  sub_10004191C(v15, "A1603");
  if (sub_100030A04((uint64_t)v3, v2, (uint64_t)v15))
  {
    int64_t v4 = 1;
  }
  else
  {
    if (qword_1009F7EE0 != -1) {
      dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
    }
    unsigned int v5 = off_1009F7ED8;
    sub_10004191C(v13, "A2051");
    if (sub_100030A04((uint64_t)v5, v2, (uint64_t)v13))
    {
      int64_t v4 = 1;
    }
    else
    {
      if (qword_1009F7EE0 != -1) {
        dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
      }
      unsigned int v6 = off_1009F7ED8;
      sub_10004191C(v11, "A3085");
      if (sub_100030A04((uint64_t)v6, v2, (uint64_t)v11))
      {
        int64_t v4 = 1;
      }
      else
      {
        if (qword_1009F7EE0 != -1) {
          dispatch_once(&qword_1009F7EE0, &stru_1009AA768);
        }
        unsigned int v7 = off_1009F7ED8;
        sub_10004191C(__p, "A2538");
        int64_t v4 = sub_100030A04((uint64_t)v7, v2, (uint64_t)__p);
        if (v10 < 0) {
          operator delete(__p[0]);
        }
      }
      if (v12 < 0) {
        operator delete(v11[0]);
      }
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
  }
  if (v16 < 0) {
    operator delete(v15[0]);
  }

  return v4;
}

void sub_1003B45EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v27 - 33) < 0) {
    operator delete(*(void **)(v27 - 56));
  }

  _Unwind_Resume(a1);
}

void sub_1003B465C(uint64_t a1, void *a2)
{
}

void sub_1003B4668(uint64_t a1, __int16 a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003B46EC;
  v5[3] = &unk_1009A0B58;
  v5[4] = a1;
  __int16 v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1003B46EC(uint64_t result)
{
  *(unsigned char *)(*(void *)(result + 32) + 528) = *(unsigned char *)(result + 40);
  return result;
}

void sub_1003B46FC(uint64_t a1, __int16 a2)
{
}

void sub_1003B4704(uint64_t a1, char a2, char a3, uint64_t a4, char a5, char a6, char a7)
{
  uint64_t v13 = sub_1004AFD94();
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 3221225472;
  double v14[2] = sub_1003B47B8;
  void v14[3] = &unk_1009A6D98;
  void v14[4] = a1;
  char v15 = a3;
  char v16 = a2;
  char v17 = a5;
  char v18 = a6;
  char v19 = a7;
  sub_100013018(v13, v14);
}

uint64_t sub_1003B47B8(uint64_t result)
{
  uint64_t v1 = *(unsigned char **)(result + 32);
  v1[530] = *(unsigned char *)(result + 40);
  v1[531] = *(unsigned char *)(result + 41);
  v1[532] = *(unsigned char *)(result + 42);
  v1[533] = *(unsigned char *)(result + 43);
  v1[534] = *(unsigned char *)(result + 44);
  return result;
}

void sub_1003B47E8(uint64_t a1, char a2, char a3, uint64_t a4, char a5, char a6, char a7)
{
}

void sub_1003B47F8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003B4880;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A125D0 != -1) {
    dispatch_once(&qword_100A125D0, block);
  }
}

void sub_1003B4880(uint64_t a1)
{
}

void sub_1003B4888(uint64_t a1)
{
}

void sub_1003B4890(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B490C;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

double sub_1003B490C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double result = 0.0;
  *(void *)(v1 + 536) = 0;
  *(_DWORD *)(v1 + 528) = 0;
  return result;
}

void sub_1003B4920(uint64_t a1)
{
}

void sub_1003B4928(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B49A4;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

double sub_1003B49A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  double result = 0.0;
  *(void *)(v1 + 536) = 0;
  *(_DWORD *)(v1 + 528) = 0;
  return result;
}

void sub_1003B49B8(uint64_t a1)
{
}

void sub_1003B49C0(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003B4A44;
  v5[3] = &unk_100997570;
  v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1003B4A44(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 536) = *(_DWORD *)(result + 40);
  return result;
}

void sub_1003B4A54(uint64_t a1, int a2)
{
}

void sub_1003B4A5C(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003B4AE0;
  v5[3] = &unk_100997570;
  v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1003B4AE0(uint64_t result)
{
  *(_DWORD *)(*(void *)(result + 32) + 540) = *(_DWORD *)(result + 40);
  return result;
}

void sub_1003B4AF0(uint64_t a1, int a2)
{
}

void sub_1003B4AF8(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = sub_1004AFD94();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  _OWORD v6[2] = sub_1003B4B7C;
  v6[3] = &unk_100997570;
  v6[4] = a1;
  int v7 = a3;
  sub_100013018(v5, v6);
}

uint64_t sub_1003B4B7C(uint64_t result)
{
  if (!*(_DWORD *)(result + 40)) {
    ++*(unsigned char *)(*(void *)(result + 32) + 529);
  }
  return result;
}

void sub_1003B4B9C(uint64_t a1, uint64_t a2, int a3)
{
}

void sub_1003B4BA4(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B4C20;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1003B4C20(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  if (*(unsigned char *)(v1 + 529)) {
    --*(unsigned char *)(v1 + 529);
  }
  return result;
}

void sub_1003B4C38(uint64_t a1)
{
}

void sub_1003B4C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1004AFD94();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1003B4CD0;
  v7[3] = &unk_1009A12D0;
  v7[4] = a1;
  void v7[5] = a2;
  void v7[6] = a3;
  sub_100013018(v6, v7);
}

__n128 sub_1003B4CD0(uint64_t a1)
{
  __n128 result = *(__n128 *)(a1 + 40);
  *(__n128 *)(*(void *)(a1 + 32) + 544) = result;
  return result;
}

void sub_1003B4CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void *sub_1003B4CE8@<X0>(unsigned int a1@<W1>, void *a2@<X8>)
{
  if (a1 > 0xC) {
    uint64_t v2 = "NA";
  }
  else {
    uint64_t v2 = off_1009AB060[(char)a1];
  }
  return sub_10004191C(a2, v2);
}

double sub_1003B4D14(uint64_t a1, unsigned int a2)
{
  double result = 0.0;
  if (a2 <= 0xC) {
    return dbl_1007BD1F8[(char)a2];
  }
  return result;
}

void sub_1003B4D34(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = sub_1004AFD94();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1003B4DC4;
  v7[3] = &unk_1009988A0;
  v7[4] = a1;
  void v7[5] = a2;
  __int16 v8 = a3;
  sub_100013018(v6, v7);
}

uint64_t sub_1003B4DC4(uint64_t a1, uint64_t a2)
{
  return sub_1003B4DD4(*(void *)(a1 + 32), a2, *(unsigned __int16 *)(a1 + 48));
}

uint64_t sub_1003B4DD4(uint64_t result, uint64_t a2, unsigned int a3)
{
  unsigned __int16 v10 = a3;
  uint64_t v3 = *(void *)(result + 664);
  if (v3)
  {
    uint64_t v4 = result;
    result += 656;
    uint64_t v5 = v4 + 664;
    uint64_t v6 = v4 + 664;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v3 + 32);
      BOOL v8 = v7 >= a3;
      if (v7 >= a3) {
        CFStringRef v9 = (uint64_t *)v3;
      }
      else {
        CFStringRef v9 = (uint64_t *)(v3 + 8);
      }
      if (v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != v5 && *(unsigned __int16 *)(v6 + 32) <= a3) {
      return sub_1003BA1D0(result, &v10);
    }
  }
  return result;
}

void sub_1003B4E44(uint64_t a1, __int16 a2, uint64_t a3, char a4, __int16 a5)
{
  uint64_t v10 = sub_1004AFD94();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1003B4EEC;
  v11[3] = &unk_1009A28D8;
  __int16 v12 = a2;
  void v11[4] = a1;
  v11[5] = a3;
  char v14 = a4;
  __int16 v13 = a5;
  sub_100013018(v10, v11);
}

double sub_1003B4EEC(uint64_t a1, uint8x8_t a2)
{
  return sub_1003B4F04(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 48), *(uint64_t **)(a1 + 40), *(unsigned char *)(a1 + 52), *(_WORD *)(a1 + 50), a2);
}

double sub_1003B4F04(uint64_t a1, unsigned int a2, uint64_t *a3, char a4, __int16 a5, uint8x8_t a6)
{
  __int16 v9 = a2;
  unsigned __int16 v41 = a2;
  CFStringRef v11 = (uint64_t **)(a1 + 656);
  uint64_t v12 = *(void *)(a1 + 664);
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = a1 + 664;
  do
  {
    unsigned int v14 = *(unsigned __int16 *)(v12 + 32);
    BOOL v15 = v14 >= a2;
    if (v14 >= a2) {
      char v16 = (uint64_t *)v12;
    }
    else {
      char v16 = (uint64_t *)(v12 + 8);
    }
    if (v15) {
      uint64_t v13 = v12;
    }
    uint64_t v12 = *v16;
  }
  while (*v16);
  if (v13 != a1 + 664 && *(unsigned __int16 *)(v13 + 32) <= a2)
  {
    int16x8_t v27 = *(int16x8_t *)(v13 + 80);
    long long v44 = *(_OWORD *)(v13 + 64);
    v45[0] = v27;
    *(int16x8_t *)((char *)v45 + 9) = *(int16x8_t *)(v13 + 89);
    char v40 = *(unsigned char *)(v13 + 195);
    long long v43 = *(_OWORD *)(v13 + 264);
    v28.i32[1] = DWORD1(v43);
    __int16 v29 = *(_WORD *)(a1 + 573);
    char v30 = *(unsigned char *)(a1 + 576);
    char v31 = *(unsigned char *)(a1 + 544);
    int v32 = *(_DWORD *)(a1 + 548);
    BOOL v33 = v32 == 1;
    BOOL v34 = v32 == 2;
    BOOL v35 = v32 == 3;
    int16x4_t v42 = &v41;
    v28.i32[0] = *(_DWORD *)(a1 + 528);
    int16x4_t v38 = (int16x4_t)vmovl_u8(v28).u64[0];
    int16x4_t v36 = sub_1003BA24C(v11, &v41, (uint64_t)&unk_1007BE9D0, &v42);
    v36[6] = 0;
    v36[7] = 0;
    _DWORD v36[5] = a3;
    int16x8_t v37 = v45[0];
    *((_OWORD *)v36 + 4) = v44;
    *((int16x8_t *)v36 + 5) = v37;
    *(int16x8_t *)((char *)v36 + 89) = *(int16x8_t *)((char *)v45 + 9);
    *((unsigned char *)v36 + 105) = a4;
    *((_WORD *)v36 + 53) = a5;
    *((_WORD *)v36 + 54) = v9;
    *(_OWORD *)((char *)v36 + 110) = 0u;
    *(_OWORD *)((char *)v36 + 126) = 0u;
    *(_OWORD *)((char *)v36 + 142) = 0u;
    *(_OWORD *)((char *)v36 + 158) = 0u;
    *(_OWORD *)(v36 + 21) = 0u;
    *((_WORD *)v36 + 92) = v29;
    *((unsigned char *)v36 + 186) = v30;
    *((unsigned char *)v36 + 187) = v31;
    *((unsigned char *)v36 + 188) = v33;
    *((unsigned char *)v36 + 189) = v34;
    *((unsigned char *)v36 + 190) = v35;
    *(int16x4_t *)v37.i8 = vzip1_s16(v38, (int16x4_t)vext_s8((int8x8_t)v38, (int8x8_t)vdup_lane_s16(v38, 2), 6uLL));
    *(_DWORD *)((char *)v36 + 191) = vmovn_s16(v37).u32[0];
    *((unsigned char *)v36 + 195) = v40;
    *((_OWORD *)v36 + 15) = 0u;
    *(_OWORD *)((char *)v36 + 228) = 0u;
    *(_OWORD *)((char *)v36 + 212) = 0u;
    *(_OWORD *)((char *)v36 + 196) = 0u;
    v36[32] = (uint64_t *)0x3E8FFFFFC18;
    double result = *(double *)&v43;
    *(_OWORD *)(v36 + 33) = v43;
  }
  else
  {
LABEL_12:
    __int16 v17 = *(_WORD *)(a1 + 573);
    char v18 = *(unsigned char *)(a1 + 576);
    char v19 = *(unsigned char *)(a1 + 544);
    int v20 = *(_DWORD *)(a1 + 548);
    BOOL v21 = v20 == 1;
    BOOL v22 = v20 == 2;
    BOOL v23 = v20 == 3;
    *(void *)&long long v44 = &v41;
    a6.i32[0] = *(_DWORD *)(a1 + 528);
    int16x4_t v39 = (int16x4_t)vmovl_u8(a6).u64[0];
    double v24 = sub_1003BA24C(v11, &v41, (uint64_t)&unk_1007BE9D0, (_WORD **)&v44);
    v24[5] = a3;
    *((_OWORD *)v24 + 3) = 0u;
    *((_OWORD *)v24 + 4) = 0u;
    *((_OWORD *)v24 + 5) = 0u;
    *(_OWORD *)((char *)v24 + 89) = 0u;
    *((unsigned char *)v24 + 105) = a4;
    *((_WORD *)v24 + 53) = a5;
    *((_WORD *)v24 + 54) = v9;
    *(_OWORD *)((char *)v24 + 110) = 0u;
    *(_OWORD *)((char *)v24 + 126) = 0u;
    *(_OWORD *)((char *)v24 + 142) = 0u;
    *(_OWORD *)((char *)v24 + 158) = 0u;
    *(_OWORD *)(v24 + 21) = 0u;
    *((_WORD *)v24 + 92) = v17;
    *((unsigned char *)v24 + 186) = v18;
    *((unsigned char *)v24 + 187) = v19;
    *((unsigned char *)v24 + 188) = v21;
    *((unsigned char *)v24 + 189) = v22;
    *((unsigned char *)v24 + 190) = v23;
    *(int16x4_t *)v25.i8 = vzip1_s16(v39, (int16x4_t)vext_s8((int8x8_t)v39, (int8x8_t)vdup_lane_s16(v39, 2), 6uLL));
    *(_DWORD *)((char *)v24 + 191) = vmovn_s16(v25).u32[0];
    *((_OWORD *)v24 + 15) = 0u;
    *(_OWORD *)((char *)v24 + 227) = 0u;
    *(_OWORD *)((char *)v24 + 211) = 0u;
    *(_OWORD *)((char *)v24 + 195) = 0u;
    *(void *)&double result = 0x3E8FFFFFC18;
    v24[32] = (uint64_t *)0x3E8FFFFFC18;
    v24[33] = 0;
    v24[34] = 0;
  }
  return result;
}

void sub_1003B51C8(uint64_t a1, __int16 a2, int a3, int a4, int a5, int a6)
{
  uint64_t v12 = sub_1004AFD94();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_1003B5274;
  void v13[3] = &unk_1009AA5B0;
  v13[4] = a1;
  __int16 v18 = a2;
  int v14 = a3;
  int v15 = a4;
  int v16 = a5;
  int v17 = a6;
  sub_100013018(v12, v13);
}

double sub_1003B5274(uint64_t a1)
{
  return sub_1003B528C(*(void *)(a1 + 32), *(unsigned __int16 *)(a1 + 56), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), *(_DWORD *)(a1 + 52));
}

double sub_1003B528C(uint64_t a1, unsigned int a2, int a3, int a4, int a5, int a6)
{
  unsigned __int16 v34 = a2;
  CFStringRef v11 = (uint64_t **)(a1 + 656);
  uint64_t v12 = *(void *)(a1 + 664);
  if (!v12) {
    goto LABEL_12;
  }
  uint64_t v13 = a1 + 664;
  uint64_t v14 = a1 + 664;
  do
  {
    unsigned int v15 = *(unsigned __int16 *)(v12 + 32);
    BOOL v16 = v15 >= a2;
    if (v15 >= a2) {
      int v17 = (uint64_t *)v12;
    }
    else {
      int v17 = (uint64_t *)(v12 + 8);
    }
    if (v16) {
      uint64_t v14 = v12;
    }
    uint64_t v12 = *v17;
  }
  while (*v17);
  if (v14 != v13 && *(unsigned __int16 *)(v14 + 32) <= a2)
  {
    long long v31 = *(_OWORD *)(v14 + 40);
    long long v32 = *(_OWORD *)(v14 + 56);
    BOOL v33 = *(uint64_t **)(v14 + 72);
    long long v20 = *(_OWORD *)(v14 + 240);
    long long v44 = *(_OWORD *)(v14 + 224);
    long long v45 = v20;
    long long v46 = *(_OWORD *)(v14 + 256);
    int v47 = *(uint64_t **)(v14 + 272);
    long long v21 = *(_OWORD *)(v14 + 176);
    long long v40 = *(_OWORD *)(v14 + 160);
    long long v41 = v21;
    long long v22 = *(_OWORD *)(v14 + 208);
    long long v42 = *(_OWORD *)(v14 + 192);
    long long v43 = v22;
    long long v23 = *(_OWORD *)(v14 + 112);
    long long v36 = *(_OWORD *)(v14 + 96);
    long long v37 = v23;
    long long v24 = *(_OWORD *)(v14 + 144);
    long long v38 = *(_OWORD *)(v14 + 128);
    long long v39 = v24;
    BOOL v35 = &v34;
    int16x8_t v25 = sub_1003BA24C(v11, &v34, (uint64_t)&unk_1007BE9D0, &v35);
    *(_OWORD *)(v25 + 5) = v31;
    *(_OWORD *)(v25 + 7) = v32;
    v25[9] = v33;
    *((_DWORD *)v25 + 20) = a3;
    *((_DWORD *)v25 + 21) = a4;
    *((_DWORD *)v25 + 22) = a5;
    *((_DWORD *)v25 + 23) = a6;
    long long v26 = v45;
    *((_OWORD *)v25 + 14) = v44;
    *((_OWORD *)v25 + 15) = v26;
    *((_OWORD *)v25 + 16) = v46;
    v25[34] = v47;
    long long v27 = v41;
    *((_OWORD *)v25 + 10) = v40;
    *((_OWORD *)v25 + 11) = v27;
    long long v28 = v43;
    *((_OWORD *)v25 + 12) = v42;
    *((_OWORD *)v25 + 13) = v28;
    long long v29 = v37;
    *((_OWORD *)v25 + 6) = v36;
    *((_OWORD *)v25 + 7) = v29;
    double result = *(double *)&v38;
    long long v30 = v39;
    *((_OWORD *)v25 + 8) = v38;
    *((_OWORD *)v25 + 9) = v30;
  }
  else
  {
LABEL_12:
    *(void *)&long long v36 = &v34;
    __int16 v18 = sub_1003BA24C(v11, &v34, (uint64_t)&unk_1007BE9D0, (_WORD **)&v36);
    v18[9] = 0;
    double result = 0.0;
    *(_OWORD *)(v18 + 7) = 0u;
    *(_OWORD *)(v18 + 5) = 0u;
    *((_DWORD *)v18 + 20) = a3;
    *((_DWORD *)v18 + 21) = a4;
    *((_DWORD *)v18 + 22) = a5;
    *((_DWORD *)v18 + 23) = a6;
    *((_OWORD *)v18 + 6) = 0u;
    *((_OWORD *)v18 + 7) = 0u;
    *((_OWORD *)v18 + 8) = 0u;
    *((_OWORD *)v18 + 9) = 0u;
    *((_OWORD *)v18 + 10) = 0u;
    *((_OWORD *)v18 + 11) = 0u;
    *((_OWORD *)v18 + 12) = 0u;
    *((_OWORD *)v18 + 13) = 0u;
    *((_OWORD *)v18 + 14) = 0u;
    *((_OWORD *)v18 + 15) = 0u;
    *((_OWORD *)v18 + 16) = 0u;
    v18[34] = 0;
  }
  return result;
}

void sub_1003B5460(uint64_t a1, uint64_t a2, __int16 a3)
{
  uint64_t v6 = sub_1004AFD94();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1003B54F0;
  v7[3] = &unk_1009988A0;
  v7[4] = a1;
  void v7[5] = a2;
  __int16 v8 = a3;
  sub_100013018(v6, v7);
}

double sub_1003B54F0(uint64_t a1)
{
  return sub_1003B5504(*(void *)(a1 + 32), *(void *)(a1 + 40), *(unsigned __int16 *)(a1 + 48), 0);
}

double sub_1003B5504(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  unsigned int v5 = a3;
  unsigned __int16 v58 = a3;
  if (a3)
  {
LABEL_2:
    uint64_t v6 = (uint64_t **)(a1 + 656);
    unsigned int v7 = (uint64_t *)(a1 + 664);
    uint64_t v8 = *(void *)(a1 + 664);
    if (!v8) {
      goto LABEL_13;
    }
    uint64_t v9 = a1 + 664;
    do
    {
      unsigned int v10 = *(unsigned __int16 *)(v8 + 32);
      BOOL v11 = v10 >= v5;
      if (v10 >= v5) {
        uint64_t v12 = (uint64_t *)v8;
      }
      else {
        uint64_t v12 = (uint64_t *)(v8 + 8);
      }
      if (v11) {
        uint64_t v9 = v8;
      }
      uint64_t v8 = *v12;
    }
    while (*v12);
    if ((uint64_t *)v9 != v7 && v5 >= *(unsigned __int16 *)(v9 + 32))
    {
      long long v33 = *(_OWORD *)(v9 + 232);
      *(_OWORD *)&v64[32] = *(_OWORD *)(v9 + 216);
      *(_OWORD *)&v64[48] = v33;
      *(_OWORD *)&v64[64] = *(_OWORD *)(v9 + 248);
      *(_OWORD *)&v63[48] = *(_OWORD *)(v9 + 152);
      long long v34 = *(_OWORD *)(v9 + 184);
      *(_OWORD *)&v63[64] = *(_OWORD *)(v9 + 168);
      *(_OWORD *)char v64 = v34;
      *(_OWORD *)&v64[16] = *(_OWORD *)(v9 + 200);
      long long v35 = *(_OWORD *)(v9 + 104);
      long long v62 = *(_OWORD *)(v9 + 88);
      *(_OWORD *)int v63 = v35;
      long long v36 = *(_OWORD *)(v9 + 136);
      *(_OWORD *)&v63[16] = *(_OWORD *)(v9 + 120);
      *(_OWORD *)&v63[32] = v36;
      long long v37 = *(_OWORD *)(v9 + 56);
      *(_OWORD *)long long buf = *(_OWORD *)(v9 + 40);
      *(_OWORD *)&uint8_t buf[16] = v37;
      long long v61 = *(_OWORD *)(v9 + 72);
      long long v65 = *(_OWORD *)(v9 + 264);
      if (vmaxv_u16((uint16x4_t)vmovn_s32(vtstq_s32(*(int32x4_t *)&v63[12], *(int32x4_t *)&v63[12])))) {
        sub_1003B5964(a1, (uint64_t)buf, 1);
      }
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      memset(&v63[6], 0, 74);
      if (a4)
      {
        *(void *)&long long v65 = *(void *)v64;
        BYTE8(v65) = v64[8];
        *(_WORD *)((char *)&v65 + 9) = *(_WORD *)&v64[9];
      }
      else
      {
        memset(&v64[12], 0, 60);
        *(void *)&v64[72] = 0x3E8FFFFFC18;
      }
      char v59 = &v58;
      long long v46 = sub_1003BA24C(v6, &v58, (uint64_t)&unk_1007BE9D0, &v59);
      long long v48 = *(_OWORD *)&v63[16];
      long long v47 = *(_OWORD *)&v63[32];
      long long v49 = *(_OWORD *)v63;
      long long v50 = v61;
      *(_OWORD *)(v46 + 11) = v62;
      long long v52 = *(_OWORD *)v64;
      long long v51 = *(_OWORD *)&v64[16];
      long long v53 = *(_OWORD *)&v63[64];
      *(_OWORD *)(v46 + 19) = *(_OWORD *)&v63[48];
      long long v55 = *(_OWORD *)&v64[64];
      long long v54 = v65;
      long long v56 = *(_OWORD *)&v64[48];
      *(_OWORD *)(v46 + 27) = *(_OWORD *)&v64[32];
      *(_OWORD *)(v46 + 29) = v56;
      *(_OWORD *)(v46 + 31) = v55;
      *(_OWORD *)(v46 + 33) = v54;
      *(_OWORD *)(v46 + 21) = v53;
      *(_OWORD *)(v46 + 23) = v52;
      *(_OWORD *)(v46 + 25) = v51;
      *(_OWORD *)(v46 + 13) = v49;
      *(_OWORD *)(v46 + 15) = v48;
      *(_OWORD *)(v46 + 17) = v47;
      double result = *(double *)buf;
      long long v57 = *(_OWORD *)&buf[16];
      *(_OWORD *)(v46 + 5) = *(_OWORD *)buf;
      *(_OWORD *)(v46 + 7) = v57;
      *(_OWORD *)(v46 + 9) = v50;
    }
    else
    {
LABEL_13:
      uint64_t v13 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "sendAccumulatedHIDLatencyStatsData";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v5;
        *(_WORD *)&buf[18] = 1024;
        *(_DWORD *)&buf[20] = v5;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s -- Did not find stored HID Latency Statistics data for LM Handle %d (0x%04x)", buf, 0x18u);
      }
      uint64_t v14 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "sendAccumulatedHIDLatencyStatsData";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "%s -- LM handle in the list: ", buf, 0xCu);
      }
      BOOL v16 = *v6;
      if (*v6 != v7)
      {
        do
        {
          int v17 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            int v18 = *((unsigned __int16 *)v16 + 16);
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = "sendAccumulatedHIDLatencyStatsData";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v18;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "%s -- LM Handle 0x%02x", buf, 0x12u);
          }
          char v19 = (uint64_t *)v16[1];
          if (v19)
          {
            do
            {
              long long v20 = v19;
              char v19 = (uint64_t *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              long long v20 = (uint64_t *)v16[2];
              BOOL v21 = *v20 == (void)v16;
              BOOL v16 = v20;
            }
            while (!v21);
          }
          BOOL v16 = v20;
        }
        while (v20 != v7);
      }
    }
    return result;
  }
  if (a2)
  {
    long long v22 = *(void **)(a1 + 656);
    if (v22 != (void *)(a1 + 664))
    {
      while (v22[5] != a2)
      {
        long long v23 = (void *)v22[1];
        if (v23)
        {
          do
          {
            long long v24 = v23;
            long long v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            long long v24 = (void *)v22[2];
            BOOL v21 = *v24 == (void)v22;
            long long v22 = v24;
          }
          while (!v21);
        }
        long long v22 = v24;
        if (v24 == (void *)(a1 + 664)) {
          goto LABEL_44;
        }
      }
      unsigned __int16 v58 = *((_WORD *)v22 + 16);
      unsigned int v5 = v58;
      if (v58) {
        goto LABEL_2;
      }
    }
  }
  else
  {
    int16x8_t v25 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075C644(v25, v26, v27, v28, v29, v30, v31, v32);
    }
  }
LABEL_44:
  long long v38 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10075C5B8(v38, v39, v40, v41, v42, v43, v44, v45);
  }
  return result;
}

void sub_1003B5964(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1003B6618(a1, a2, a3);
  uint64_t v6 = *(unsigned __int8 *)(a2 + 65);
  if ((v6 - 1) > 1u)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075C6BC();
    }
  }
  else
  {
    if (a3 == 2)
    {
      memset(v26, 0, 250);
      bzero(v26, 0xFAuLL);
      sub_1003B4CE8(*(unsigned __int8 *)(a2 + 29), &__p);
      if ((v23 & 0x8000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      sub_10025B74C((uint64_t)v26, 250, (uint64_t)"HID Latency Statistics events indicated HID lag issue is detected with %s latency for connection handle 0x%04x, vid = %d (0x%04x), pid = %d (0x%04x)", v7, v8, v9, v10, v11, (uint64_t)p_p);
      if (SBYTE1(v23) < 0) {
        operator delete(__p);
      }
      sub_100115824((const char *)v26);
      uint64_t v13 = qword_100A19E50;
      BOOL v5 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
      if (v5)
      {
        int v14 = *(unsigned __int16 *)(a2 + 68);
        int v15 = *(_DWORD *)(a2 + 44);
        int v16 = *(_DWORD *)(a2 + 48);
        LODWORD(__p) = 67110144;
        HIDWORD(__p) = v14;
        __int16 v18 = 1024;
        int v19 = v15;
        __int16 v20 = 1024;
        int v21 = v15;
        __int16 v22 = 1024;
        int v23 = v16;
        __int16 v24 = 1024;
        int v25 = v16;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "HID Latency Statistics events indicated HID lag issue is detected on connection handle 0x%04x, vid = %d (0x%04x), pid = %d (0x%04x)", (uint8_t *)&__p, 0x20u);
      }
      uint64_t v6 = *(unsigned __int8 *)(a2 + 65);
      if (v6 == 1) {
        *(unsigned char *)(a2 + 28) = llround(sub_1003B4D14(v5, *(unsigned __int8 *)(a2 + 29)));
      }
    }
    sub_1003B649C(v5, a3, 0, v6, a2);
  }
}

void sub_1003B5B64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003B5B88(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    unsigned int v2 = *a2;
    uint64_t v3 = *(void *)(a1 + 664);
    if (!v3) {
      goto LABEL_22;
    }
    uint64_t v4 = a1 + 664;
    do
    {
      unsigned int v5 = *(unsigned __int16 *)(v3 + 32);
      BOOL v6 = v5 >= v2;
      if (v5 >= v2) {
        uint64_t v7 = (uint64_t *)v3;
      }
      else {
        uint64_t v7 = (uint64_t *)(v3 + 8);
      }
      if (v6) {
        uint64_t v4 = v3;
      }
      uint64_t v3 = *v7;
    }
    while (*v7);
    if (v4 != a1 + 664 && v2 >= *(unsigned __int16 *)(v4 + 32))
    {
      uint64_t v16 = 0;
      long long v17 = *(_OWORD *)(v4 + 104);
      long long v18 = *(_OWORD *)(v4 + 88);
      long long v19 = *(_OWORD *)(v4 + 120);
      long long v20 = *(_OWORD *)(v4 + 232);
      long long v32 = *(_OWORD *)(v4 + 216);
      long long v33 = v20;
      long long v34 = *(_OWORD *)(v4 + 248);
      long long v21 = *(_OWORD *)(v4 + 168);
      long long v28 = *(_OWORD *)(v4 + 152);
      long long v29 = v21;
      long long v22 = *(_OWORD *)(v4 + 200);
      long long v30 = *(_OWORD *)(v4 + 184);
      long long v31 = v22;
      void v25[3] = v18;
      *(_OWORD *)uint64_t v26 = v17;
      long long v23 = *(_OWORD *)(v4 + 136);
      *(_OWORD *)&_OWORD v26[16] = v19;
      long long v27 = v23;
      long long v24 = *(_OWORD *)(v4 + 56);
      v25[0] = *(_OWORD *)(v4 + 40);
      v25[1] = v24;
      v25[2] = *(_OWORD *)(v4 + 72);
      long long v35 = *(_OWORD *)(v4 + 264);
      *(_WORD *)&void v26[6] = a2[1];
      *(_DWORD *)&v26[8] = *((unsigned __int8 *)a2 + 4);
      *(uint32x4_t *)&v26[12] = vmovl_u16(*(uint16x4_t *)((char *)a2 + 5));
      do
      {
        *(_DWORD *)&v26[4 * v16 + 28] = *(unsigned __int16 *)((char *)&a2[v16 + 6] + 1);
        ++v16;
      }
      while (v16 != 13);
      sub_1003B5964(a1, (uint64_t)v25, 2);
    }
    else
    {
LABEL_22:
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075C7C0();
      }
    }
  }
  else
  {
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075C748(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
}

void sub_1003B5D00(uint64_t a1, long long *a2)
{
  if (a2)
  {
    uint64_t v4 = malloc_type_malloc(0x30uLL, 0x1000040EED21634uLL);
    if (v4)
    {
      unsigned int v5 = v4;
      v4[1] = 0u;
      _DWORD v4[2] = 0u;
      *uint64_t v4 = 0u;
      if ((*(_DWORD *)(sub_10003FB34() + 712) - 1) >= 0x7CF)
      {
        long long v6 = *a2;
        long long v7 = a2[1];
        v5[2] = a2[2];
      }
      else
      {
        long long v6 = *a2;
        long long v7 = a2[1];
        *(void *)((char *)v5 + 31) = *(void *)((char *)a2 + 31);
      }
      *unsigned int v5 = v6;
      v5[1] = v7;
      uint64_t v24 = sub_1004AFD94();
      v25[0] = _NSConcreteStackBlock;
      v25[1] = 3221225472;
      v25[2] = sub_1003B5E3C;
      void v25[3] = &unk_100998260;
      _OWORD v25[4] = a1;
      v25[5] = v5;
      sub_100013018(v24, v25);
    }
    else
    {
      uint64_t v16 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075C8B0(v16, v17, v18, v19, v20, v21, v22, v23);
      }
    }
  }
  else
  {
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075C838(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
}

void sub_1003B5E3C(uint64_t a1)
{
}

void sub_1003B5E48(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    uint64_t v4 = 0;
    unsigned __int8 v5 = 0;
    unsigned int v6 = *a2;
    do
    {
      if (*(unsigned __int16 *)((char *)&a2[v4 + 6] + 1)) {
        BOOL v7 = v4 == 10;
      }
      else {
        BOOL v7 = 1;
      }
      if (!v7) {
        unsigned __int8 v5 = v4;
      }
      ++v4;
    }
    while (v4 != 13);
    unsigned int v8 = *(unsigned __int8 *)(a1 + 680);
    BOOL v9 = sub_1003B5F58(a1, a2);
    BOOL v10 = v8 > v5 && !v9;
    if (v10 || (sub_1003B5504(a1, 0, v6, v5 >= v8), v5 < v8)) {
      sub_1003B6000(a1, a2);
    }
    else {
      sub_1003B5B88(a1, a2);
    }
    free(a2);
  }
  else
  {
    uint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075C928(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
}

BOOL sub_1003B5F58(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    uint64_t v2 = *(void *)(a1 + 664);
    if (!v2) {
      return 0;
    }
    unsigned int v3 = *a2;
    uint64_t v4 = a1 + 664;
    do
    {
      unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
      BOOL v6 = v5 >= v3;
      if (v5 >= v3) {
        BOOL v7 = (uint64_t *)v2;
      }
      else {
        BOOL v7 = (uint64_t *)(v2 + 8);
      }
      if (v6) {
        uint64_t v4 = v2;
      }
      uint64_t v2 = *v7;
    }
    while (*v7);
    if (v4 == a1 + 664 || v3 < *(unsigned __int16 *)(v4 + 32)) {
      return 0;
    }
    return *(_DWORD *)(v4 + 112) + *((unsigned __int8 *)a2 + 4) > 0x708;
  }
  else
  {
    BOOL v9 = qword_100A19E50;
    BOOL result = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR);
    if (result)
    {
      sub_10075C9A0(v9, v10, v11, v12, v13, v14, v15, v16);
      return 0;
    }
  }
  return result;
}

double sub_1003B6000(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    unsigned int v4 = *a2;
    unsigned __int16 v58 = *a2;
    uint64_t v5 = *(void *)(a1 + 664);
    if (!v5) {
      goto LABEL_24;
    }
    uint64_t v6 = a1 + 664;
    do
    {
      unsigned int v7 = *(unsigned __int16 *)(v5 + 32);
      BOOL v8 = v7 >= v4;
      if (v7 >= v4) {
        BOOL v9 = (uint64_t *)v5;
      }
      else {
        BOOL v9 = (uint64_t *)(v5 + 8);
      }
      if (v8) {
        uint64_t v6 = v5;
      }
      uint64_t v5 = *v9;
    }
    while (*v9);
    if (v6 != a1 + 664 && v4 >= *(unsigned __int16 *)(v6 + 32))
    {
      uint64_t v19 = 0;
      long long v20 = *(_OWORD *)(v6 + 104);
      long long v21 = *(_OWORD *)(v6 + 232);
      long long v54 = *(_OWORD *)(v6 + 216);
      long long v55 = v21;
      long long v56 = *(_OWORD *)(v6 + 248);
      long long v22 = *(_OWORD *)(v6 + 168);
      long long v50 = *(_OWORD *)(v6 + 152);
      long long v51 = v22;
      long long v23 = *(_OWORD *)(v6 + 200);
      long long v52 = *(_OWORD *)(v6 + 184);
      long long v53 = v23;
      long long v47 = *(_OWORD *)(v6 + 88);
      *(_OWORD *)long long v48 = v20;
      long long v24 = *(_OWORD *)(v6 + 136);
      *(_OWORD *)&v48[16] = *(_OWORD *)(v6 + 120);
      long long v49 = v24;
      long long v25 = *(_OWORD *)(v6 + 56);
      long long v44 = *(_OWORD *)(v6 + 40);
      long long v45 = v25;
      long long v46 = *(_OWORD *)(v6 + 72);
      long long v57 = *(_OWORD *)(v6 + 264);
      *(_WORD *)&v48[4] = v4;
      *(_WORD *)&v48[6] = a2[1];
      *(_DWORD *)&v48[8] = DWORD2(v20) + *((unsigned __int8 *)a2 + 4);
      *(uint32x4_t *)&v48[12] = vaddw_u16(*(uint32x4_t *)&v48[12], *(uint16x4_t *)((char *)a2 + 5));
      do
      {
        *(_DWORD *)&v48[4 * v19 + 28] += *(unsigned __int16 *)((char *)&a2[v19 + 6] + 1);
        ++v19;
      }
      while (v19 != 13);
      uint64_t v26 = sub_10003FB34();
      if ((*(_DWORD *)(v26 + 712) - 1) >= 0x7CF)
      {
        int v28 = *((char *)a2 + 39);
        LODWORD(v45) = v45 + 1;
        DWORD1(v45) += v28;
        sub_1003B62D0(v26, &v44, v28);
        HIDWORD(v52) = v28;
        int v29 = HIDWORD(v44) + a2[23];
        DWORD2(v44) += a2[22];
        HIDWORD(v44) = v29;
      }
      LOWORD(v52) = *(_WORD *)(a1 + 573);
      BYTE2(v52) = *(unsigned char *)(a1 + 576);
      BYTE3(v52) = *(unsigned char *)(a1 + 544);
      int v30 = *(_DWORD *)(a1 + 548);
      BYTE4(v52) = v30 == 1;
      BYTE5(v52) = v30 == 2;
      BYTE6(v52) = v30 == 3;
      v27.i32[0] = *(_DWORD *)(a1 + 528);
      int16x8_t v31 = (int16x8_t)vmovl_u8(v27);
      *(int16x4_t *)v31.i8 = vzip1_s16(*(int16x4_t *)v31.i8, (int16x4_t)vext_s8(*(int8x8_t *)v31.i8, (int8x8_t)vdup_lane_s16(*(int16x4_t *)v31.i8, 2), 6uLL));
      *(_DWORD *)((char *)&v52 + 7) = vmovn_s16(v31).u32[0];
      char v59 = &v58;
      long long v32 = sub_1003BA24C((uint64_t **)(a1 + 656), &v58, (uint64_t)&unk_1007BE9D0, &v59);
      long long v34 = *(_OWORD *)&v48[16];
      long long v33 = v49;
      long long v35 = *(_OWORD *)v48;
      long long v36 = v46;
      *(_OWORD *)(v32 + 11) = v47;
      long long v38 = v52;
      long long v37 = v53;
      long long v39 = v51;
      *(_OWORD *)(v32 + 19) = v50;
      long long v41 = v56;
      long long v40 = v57;
      long long v42 = v55;
      *(_OWORD *)(v32 + 27) = v54;
      *(_OWORD *)(v32 + 29) = v42;
      *(_OWORD *)(v32 + 31) = v41;
      *(_OWORD *)(v32 + 33) = v40;
      *(_OWORD *)(v32 + 21) = v39;
      *(_OWORD *)(v32 + 23) = v38;
      *(_OWORD *)(v32 + 25) = v37;
      *(_OWORD *)(v32 + 13) = v35;
      *(_OWORD *)(v32 + 15) = v34;
      *(_OWORD *)(v32 + 17) = v33;
      double result = *(double *)&v44;
      long long v43 = v45;
      *(_OWORD *)(v32 + 5) = v44;
      *(_OWORD *)(v32 + 7) = v43;
      *(_OWORD *)(v32 + 9) = v36;
    }
    else
    {
LABEL_24:
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075CA90();
      }
    }
  }
  else
  {
    uint64_t v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075CA18(v11, v12, v13, v14, v15, v16, v17, v18);
    }
  }
  return result;
}

void sub_1003B62D0(uint64_t a1, _DWORD *a2, int a3)
{
  if (a2)
  {
    if (a2[54] < a3) {
      a2[54] = a3;
    }
    if (a2[55] > a3) {
      a2[55] = a3;
    }
    int v3 = a2[39];
    if (v3)
    {
      if (v3 >= a3)
      {
        __int16 v5 = v3 - a3;
        if ((unsigned __int16)(v5 - 3) > 2u)
        {
          if ((v5 - 6) > 4)
          {
            if ((v5 - 11) > 4)
            {
              if ((v5 - 16) > 4)
              {
                if ((v5 - 21) > 4)
                {
                  if ((v5 - 26) > 4)
                  {
                    if (v5 >= 31) {
                      ++a2[53];
                    }
                  }
                  else
                  {
                    ++a2[52];
                  }
                }
                else
                {
                  ++a2[51];
                }
              }
              else
              {
                ++a2[50];
              }
            }
            else
            {
              ++a2[49];
            }
          }
          else
          {
            ++a2[48];
          }
        }
        else
        {
          ++a2[47];
        }
      }
      else
      {
        __int16 v4 = a3 - v3;
        if ((unsigned __int16)(v4 - 3) > 2u)
        {
          if ((v4 - 6) > 4)
          {
            if ((v4 - 11) > 4)
            {
              if ((v4 - 16) > 4)
              {
                if ((v4 - 21) > 4)
                {
                  if ((v4 - 26) > 4)
                  {
                    if (v4 >= 31) {
                      ++a2[46];
                    }
                  }
                  else
                  {
                    ++a2[45];
                  }
                }
                else
                {
                  ++a2[44];
                }
              }
              else
              {
                ++a2[43];
              }
            }
            else
            {
              ++a2[42];
            }
          }
          else
          {
            ++a2[41];
          }
        }
        else
        {
          ++a2[40];
        }
      }
    }
  }
}

void sub_1003B649C(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    *(_OWORD *)&void v38[3] = 0u;
    *(_OWORD *)long long v38 = 0u;
    long long v37 = 0u;
    long long v36 = 0u;
    int32x2_t v34 = vrev64_s32(*(int32x2_t *)(a5 + 44));
    *((void *)&v37 + 1) = *(void *)(a5 + 72);
    *(_OWORD *)&v38[7] = *(_OWORD *)(a5 + 92);
    *(_OWORD *)&v38[11] = *(_OWORD *)(a5 + 108);
    *(_OWORD *)&v38[15] = *(_OWORD *)(a5 + 124);
    long long v8 = *(_OWORD *)(a5 + 176);
    long long v39 = *(_OWORD *)(a5 + 160);
    long long v40 = v8;
    long long v9 = *(_OWORD *)(a5 + 208);
    long long v41 = *(_OWORD *)(a5 + 192);
    int v10 = *(_DWORD *)(a5 + 52);
    char v11 = *(unsigned char *)(a5 + 56);
    unsigned int v12 = *(_DWORD *)(a5 + 32);
    unsigned int v13 = *(_DWORD *)(a5 + 60);
    int v14 = *(char *)(a5 + 64);
    __int16 v15 = *(_WORD *)(a5 + 70);
    char v16 = *(unsigned char *)(a5 + 24);
    char v17 = *(unsigned char *)(a5 + 25);
    int v19 = *(_DWORD *)(a5 + 80);
    int v18 = *(_DWORD *)(a5 + 84);
    char v20 = *(unsigned char *)(a5 + 26);
    int v21 = *(_DWORD *)(a5 + 88);
    __int16 v22 = *(_WORD *)(a5 + 27);
    char v23 = *(unsigned char *)(a5 + 29);
    int v24 = *(_DWORD *)(a5 + 140);
    int v35 = v10;
    LOBYTE(v36) = v11;
    *(void *)((char *)&v36 + 4) = __PAIR64__(v13, v12);
    HIDWORD(v36) = v14;
    LODWORD(v37) = a3;
    WORD2(v37) = v15;
    LOBYTE(v38[0]) = v16;
    v38[1] = v19;
    LOBYTE(v38[2]) = v17;
    void v38[3] = v18;
    LOBYTE(v38[4]) = v20;
    v38[5] = v21;
    LOWORD(v38[6]) = v22;
    BYTE2(v38[6]) = v23;
    v38[19] = v24;
    long long v42 = v9;
    if (sub_100050530())
    {
      uint64_t v25 = sub_100050530();
      (*(void (**)(uint64_t, int32x2_t *, uint64_t, uint64_t, void))(*(void *)v25 + 488))(v25, &v34, a2, a4, *(unsigned __int16 *)(a5 + 68));
    }
  }
  else
  {
    uint64_t v26 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075CB08(v26, v27, v28, v29, v30, v31, v32, v33);
    }
  }
}

void sub_1003B6618(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v6 = 0;
  int v7 = 0;
  unsigned int v8 = 0;
  uint64_t v9 = a2 + 92;
  double v10 = 0.0;
  do
  {
    unsigned int v11 = *(_DWORD *)(v9 + 4 * v6);
    if (v11)
    {
      if (a3 == 2 && v6 == 10)
      {
        unsigned __int8 v12 = 10;
      }
      else
      {
        *(unsigned char *)(a2 + 29) = v6;
        unsigned __int8 v12 = v6;
      }
      double v10 = v10 + (double)v11 * sub_1003B4D14(a1, v12);
      v8 += v11;
      if (v6 >= *(unsigned __int8 *)(a1 + 680)) {
        unsigned int v13 = v11;
      }
      else {
        unsigned int v13 = 0;
      }
      v7 += v13;
    }
    ++v6;
  }
  while (v6 != 13);
  double v14 = v10 / (double)v8;
  *(unsigned char *)(a2 + 28) = llround(v14);
  *(_DWORD *)(a2 + 32) = v7;
  *(_DWORD *)(a2 + 36) = v8;
  LOWORD(v14) = *(_WORD *)(a2 + 66);
  HIDWORD(v15) = 1083129856;
  LODWORD(v15) = *(_DWORD *)(a2 + 72);
  double v16 = 1000.0 / ((double)*(unint64_t *)&v14 * 0.625) * (double)v15;
  unsigned int v17 = *(_DWORD *)(a2 + 76);
  if (v17) {
    char v18 = llround((double)v17 / v16 * 100.0);
  }
  else {
    char v18 = 0;
  }
  *(unsigned char *)(a2 + 24) = v18;
  unsigned int v19 = *(_DWORD *)(a2 + 80);
  if (v19) {
    LOBYTE(v19) = llround((double)v19 / v16 * 100.0);
  }
  *(unsigned char *)(a2 + 25) = v19;
  unsigned int v20 = *(_DWORD *)(a2 + 88);
  if (v20) {
    LOBYTE(v20) = llround((double)v20 / v16 * 100.0);
  }
  *(unsigned char *)(a2 + 27) = v20;
  unsigned int v21 = *(_DWORD *)(a2 + 84);
  if (v21)
  {
    if (v21 <= v17) {
      char v22 = llround((double)(v21 / v17) * 100.0);
    }
    else {
      char v22 = -1;
    }
  }
  else
  {
    char v22 = 0;
  }
  *(unsigned char *)(a2 + 26) = v22;
  int v23 = *(_DWORD *)(a2 + 16);
  if (v23)
  {
    int v24 = *(_DWORD *)(a2 + 20) / v23;
    *(_DWORD *)(a2 + 60) = v24;
    if (v24) {
      *(unsigned char *)(a2 + 56) = 1;
    }
  }
  else
  {
    *(_DWORD *)(a2 + 60) = 0;
  }
  char v25 = 0;
  unsigned int v26 = *(_DWORD *)(a2 + 12);
  if (v26)
  {
    int v27 = v26 + *(_DWORD *)(a2 + 8);
    if (v27) {
      char v25 = llround((double)v26 * 100.0 / (double)v27);
    }
  }
  *(unsigned char *)(a2 + 64) = v25;
}

void sub_1003B6818(uint64_t a1, _OWORD *a2)
{
  if ((*(_DWORD *)(sub_10003FB34() + 712) - 1) <= 0x7CE)
  {
    if (a2)
    {
      __int16 v4 = malloc_type_malloc(0xCEuLL, 0x100004047758063uLL);
      if (v4)
      {
        __int16 v5 = v4;
        *(_OWORD *)((char *)v4 + 190) = 0u;
        v4[10] = 0u;
        v4[11] = 0u;
        v4[8] = 0u;
        v4[9] = 0u;
        void v4[6] = 0u;
        v4[7] = 0u;
        void v4[4] = 0u;
        void v4[5] = 0u;
        _DWORD v4[2] = 0u;
        v4[3] = 0u;
        *__int16 v4 = 0u;
        v4[1] = 0u;
        *__int16 v4 = *a2;
        long long v6 = a2[1];
        long long v7 = a2[2];
        long long v8 = a2[4];
        v4[3] = a2[3];
        void v4[4] = v8;
        v4[1] = v6;
        _DWORD v4[2] = v7;
        long long v9 = a2[5];
        long long v10 = a2[6];
        long long v11 = a2[8];
        v4[7] = a2[7];
        v4[8] = v11;
        void v4[5] = v9;
        void v4[6] = v10;
        long long v12 = a2[9];
        long long v13 = a2[10];
        long long v14 = a2[11];
        *(_OWORD *)((char *)v4 + 190) = *(_OWORD *)((char *)a2 + 190);
        v4[10] = v13;
        v4[11] = v14;
        v4[9] = v12;
        uint64_t v15 = sub_1004AFD94();
        v32[0] = _NSConcreteStackBlock;
        v32[1] = 3221225472;
        void v32[2] = sub_1003B698C;
        void v32[3] = &unk_100998260;
        v32[4] = a1;
        void v32[5] = v5;
        sub_100013018(v15, v32);
      }
      else
      {
        int v24 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075CBF8(v24, v25, v26, v27, v28, v29, v30, v31);
        }
      }
    }
    else
    {
      double v16 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075CB80(v16, v17, v18, v19, v20, v21, v22, v23);
      }
    }
  }
}

void sub_1003B698C(uint64_t a1)
{
}

void sub_1003B6998(uint64_t a1, unsigned __int16 *a2)
{
  if (a2)
  {
    unsigned int v4 = a2[102];
    unsigned int v5 = a2[101];
    if (v4)
    {
      signed __int16 v6 = a2[9];
      if ((unsigned __int16)(v6 + 127) >= 0x94u) {
        signed __int16 v6 = 0;
      }
      sub_1003B6A78(a1, v4, v6, *(unsigned __int16 *)((char *)a2 + 25), *(unsigned __int16 *)((char *)a2 + 27));
    }
    if (v5)
    {
      signed __int16 v7 = a2[8];
      if ((unsigned __int16)(v7 + 127) >= 0x94u) {
        signed __int16 v7 = 0;
      }
      sub_1003B6A78(a1, v5, v7, a2[17], a2[18]);
    }
    free(a2);
  }
  else
  {
    long long v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075CC70(v8, v9, v10, v11, v12, v13, v14, v15);
    }
  }
}

double sub_1003B6A78(uint64_t a1, unsigned int a2, int a3, int a4, int a5)
{
  unsigned __int16 v47 = a2;
  uint64_t v5 = *(void *)(a1 + 664);
  if (!v5) {
    goto LABEL_19;
  }
  signed __int16 v7 = (uint64_t **)(a1 + 656);
  uint64_t v8 = a1 + 664;
  do
  {
    unsigned int v9 = *(unsigned __int16 *)(v5 + 32);
    BOOL v10 = v9 >= a2;
    if (v9 >= a2) {
      uint64_t v11 = (uint64_t *)v5;
    }
    else {
      uint64_t v11 = (uint64_t *)(v5 + 8);
    }
    if (v10) {
      uint64_t v8 = v5;
    }
    uint64_t v5 = *v11;
  }
  while (*v11);
  if (v8 != a1 + 664 && *(unsigned __int16 *)(v8 + 32) <= a2)
  {
    long long v13 = *(_OWORD *)(v8 + 232);
    long long v43 = *(_OWORD *)(v8 + 216);
    long long v44 = v13;
    long long v45 = *(_OWORD *)(v8 + 248);
    long long v14 = *(_OWORD *)(v8 + 168);
    long long v39 = *(_OWORD *)(v8 + 152);
    long long v40 = v14;
    long long v15 = *(_OWORD *)(v8 + 200);
    long long v41 = *(_OWORD *)(v8 + 184);
    long long v42 = v15;
    long long v16 = *(_OWORD *)(v8 + 104);
    long long v35 = *(_OWORD *)(v8 + 88);
    long long v36 = v16;
    long long v17 = *(_OWORD *)(v8 + 136);
    long long v37 = *(_OWORD *)(v8 + 120);
    long long v38 = v17;
    long long v18 = *(_OWORD *)(v8 + 56);
    long long v32 = *(_OWORD *)(v8 + 40);
    long long v33 = v18;
    long long v19 = *(_OWORD *)(v8 + 264);
    long long v34 = *(_OWORD *)(v8 + 72);
    long long v46 = v19;
    DWORD2(v32) += a4;
    HIDWORD(v32) += a5;
    if (a3)
    {
      LODWORD(v33) = v33 + 1;
      DWORD1(v33) += a3;
      sub_1003B62D0(a1, &v32, a3);
      HIDWORD(v41) = a3;
    }
    long long v48 = &v47;
    uint64_t v20 = sub_1003BA24C(v7, &v47, (uint64_t)&unk_1007BE9D0, &v48);
    long long v22 = v37;
    long long v21 = v38;
    long long v23 = v36;
    long long v24 = v34;
    *(_OWORD *)(v20 + 11) = v35;
    long long v26 = v41;
    long long v25 = v42;
    long long v27 = v40;
    *(_OWORD *)(v20 + 19) = v39;
    long long v29 = v45;
    long long v28 = v46;
    long long v30 = v44;
    *(_OWORD *)(v20 + 27) = v43;
    *(_OWORD *)(v20 + 29) = v30;
    *(_OWORD *)(v20 + 31) = v29;
    *(_OWORD *)(v20 + 33) = v28;
    *(_OWORD *)(v20 + 21) = v27;
    *(_OWORD *)(v20 + 23) = v26;
    *(_OWORD *)(v20 + 25) = v25;
    *(_OWORD *)(v20 + 13) = v23;
    *(_OWORD *)(v20 + 15) = v22;
    *(_OWORD *)(v20 + 17) = v21;
    double result = *(double *)&v32;
    long long v31 = v33;
    *(_OWORD *)(v20 + 5) = v32;
    *(_OWORD *)(v20 + 7) = v31;
    *(_OWORD *)(v20 + 9) = v24;
  }
  else
  {
LABEL_19:
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075CCE8();
    }
  }
  return result;
}

void sub_1003B6C3C(uint64_t a1, __int16 a2, void *a3)
{
  id v5 = a3;
  uint64_t v6 = sub_1004AFD94();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1003B6D10;
  v8[3] = &unk_1009AA5D8;
  uint64_t v10 = a1;
  __int16 v11 = a2;
  id v7 = v5;
  id v9 = v7;
  sub_100013018(v6, v8);
}

void sub_1003B6CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003B6D10(uint64_t a1)
{
}

void sub_1003B6D20(uint64_t a1, unsigned int a2, void *a3)
{
  id v5 = a3;
  if (v5)
  {
    *(_DWORD *)((char *)__dst + 3) = 0;
    __dst[0] = 0;
    id v7 = v5;
    id v6 = v5;
    memcpy(__dst, [v6 bytes], (size_t)[v6 length]);
    sub_1003B528C(a1, a2, 0, *(unsigned __int16 *)((char *)__dst + 1), *(unsigned __int16 *)((char *)__dst + 3), 0);
    id v5 = v7;
  }
}

void sub_1003B6DC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B6DD0(uint64_t a1, int a2)
{
  uint64_t v4 = sub_1004AFD94();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003B6E54;
  v5[3] = &unk_100997570;
  v5[4] = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

uint64_t sub_1003B6E54(uint64_t result)
{
  uint64_t v1 = *(unsigned int **)(result + 32);
  uint64_t v2 = v1[184];
  if (v2 != -1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = *(unsigned __int8 *)(result + 40);
    unsigned int v5 = v1[185];
    if (v5 <= v4) {
      unsigned int v5 = *(unsigned __int8 *)(result + 40);
    }
    v1[185] = v5;
    unsigned int v6 = v1[186];
    if (v6 >= v4) {
      unsigned int v6 = v4;
    }
    v1[186] = v6;
    uint64_t v7 = v1[187] * v2;
    unint64_t v8 = v2 + 1;
    v1[184] = v8;
    v1[187] = (v4 + v7) / v8;
    while (byte_1007BCEED[v3] <= v4)
    {
      if (++v3 == 5) {
        goto LABEL_11;
      }
    }
    ++v1[v3 + 188];
LABEL_11:
    int v9 = *(unsigned __int8 *)(result + 41);
    if (v9 == 2)
    {
      ++v1[195];
    }
    else if (v9 == 1)
    {
      ++v1[194];
    }
    else if (!*(unsigned char *)(result + 41))
    {
      ++v1[193];
    }
    if (*(unsigned char *)(result + 42)) {
      ++v1[196];
    }
    if (*(unsigned char *)(result + 43) == 1) {
      ++v1[197];
    }
    else {
      ++v1[198];
    }
  }
  return result;
}

void sub_1003B6F60(uint64_t a1, long long *a2)
{
  uint64_t v4 = sub_1004AFD94();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  long long v5 = a2[1];
  long long v7 = *a2;
  long long v8 = v5;
  _OWORD v6[2] = sub_1003B6FE8;
  v6[3] = &unk_1009AA5F8;
  v6[4] = a1;
  sub_100013018(v4, v6);
}

uint64_t sub_1003B6FE8(uint64_t result)
{
  uint64_t v1 = *(int32x4_t **)(result + 32);
  int32x4_t v2 = v1[44];
  v1[43] = vaddq_s32(v1[43], *(int32x4_t *)(result + 40));
  v1[44] = vaddq_s32(v2, *(int32x4_t *)(result + 56));
  unsigned __int32 v3 = *(_DWORD *)(result + 40);
  if (v3 <= v1[45].i32[2]) {
    unsigned __int32 v3 = v1[45].u32[2];
  }
  v1[45].i32[2] = v3;
  unsigned __int32 v4 = *(_DWORD *)(result + 44);
  if (v4 <= v1[45].i32[3]) {
    unsigned __int32 v4 = v1[45].u32[3];
  }
  v1[45].i32[3] = v4;
  return result;
}

void sub_1003B7034(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B70B0;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1003B70B0(uint64_t result)
{
  return result;
}

void sub_1003B70C4(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B7140;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

uint64_t sub_1003B7140(uint64_t result)
{
  return result;
}

void sub_1003B7154(uint64_t a1, void *a2, int a3)
{
  id v5 = a2;
  uint64_t v6 = sub_1004AFD94();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1003B7228;
  v8[3] = &unk_100999A10;
  uint64_t v10 = a1;
  id v7 = v5;
  id v9 = v7;
  int v11 = a3;
  sub_100013018(v6, v8);
}

void sub_1003B7208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003B7228(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  unsigned __int32 v3 = *(void **)(v2 + 800);
  if (!v3)
  {
    uint64_t v4 = objc_opt_new();
    id v5 = *(void **)(v2 + 800);
    *(void *)(v2 + 800) = v4;

    unsigned __int32 v3 = *(void **)(v2 + 800);
  }
  id v10 = [v3 objectForKey:*(void *)(a1 + 32)];
  id v6 = [v10 mutableCopy];

  id v7 = v6;
  if (!v6) {
    id v7 = objc_opt_new();
  }
  unsigned int v8 = *(_DWORD *)(a1 + 48) - 1;
  if (v8 > 9) {
    CFStringRef v9 = @"CBCentralManager_scan";
  }
  else {
    CFStringRef v9 = off_1009AB0C8[v8];
  }
  id v11 = v7;
  [v7 setObject:&__kCFBooleanTrue forKey:v9];
  [v11 setObject:*(void *)(a1 + 32) forKey:@"BundleID"];
  [*(id *)(v2 + 800) setObject:v11 forKeyedSubscript:*(void *)(a1 + 32)];
}

void sub_1003B7324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_1003B733C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  long long v8 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  id v2 = *(id *)(v1 + 800);
  id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v9;
    do
    {
      id v5 = 0;
      do
      {
        if (*(void *)v9 != v4) {
          objc_enumerationMutation(v2);
        }
        id v6 = [[*(id *)(v1 + 800) objectForKey:*(void *)(*((void *)&v8 + 1) + 8 * (void)v5) (void)v8];
        sub_10038094C(v1, 0x42u, v6);

        id v5 = (char *)v5 + 1;
      }
      while (v3 != v5);
      id v3 = [v2 countByEnumeratingWithState:&v8 objects:v12 count:16];
    }
    while (v3);
  }

  return [*(id *)(v1 + 800) removeAllObjects];
}

void sub_1003B745C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B7488(uint64_t a1, int a2, int a3)
{
  uint64_t v6 = sub_1004AFD94();
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 3221225472;
  _DWORD v7[2] = sub_1003B7518;
  v7[3] = &unk_100998260;
  v7[4] = a1;
  int v8 = a3;
  int v9 = a2;
  sub_100013018(v6, v7);
}

void sub_1003B7518(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  CFStringRef v2 = @"Unknown";
  int v3 = *(_DWORD *)(a1 + 40);
  if (v3 == 1) {
    CFStringRef v2 = @"Classic";
  }
  if (v3 == 2) {
    CFStringRef v2 = @"Le";
  }
  uint64_t v4 = +[NSString stringWithFormat:@"%@_%d", v2, *(unsigned int *)(a1 + 44)];
  id v5 = *(void **)(v1 + 352);
  id v8 = (id)v4;
  uint64_t v6 = [v5 objectForKey:];
  id v7 = +[NSNumber numberWithInt:](NSNumber, "numberWithInt:", [v6 intValue] + 1);
  [v5 setObject:v7 forKey:v8];
}

void sub_1003B75FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, id a12)
{
  _Unwind_Resume(a1);
}

void sub_1003B7628(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  obSCNetworkInterfaceRef j = *(id *)(v1 + 352);
  id v3 = [obj countByEnumeratingWithState:&v10 objects:v14 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v11;
    do
    {
      for (uint64_t i = 0; i != v3; uint64_t i = (char *)i + 1)
      {
        if (*(void *)v11 != v4) {
          objc_enumerationMutation(obj);
        }
        uint64_t v6 = *(void *)(*((void *)&v10 + 1) + 8 * i);
        [v2 setObject:v6 forKeyedSubscript:@"Result"];
        id v7 = [*(id *)(v1 + 352) objectForKeyedSubscript:v6];
        id v8 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:", [v7 unsignedIntValue]);
        [v2 setObject:v8 forKeyedSubscript:@"NumberOfDailyReports"];

        sub_10038094C(v1, 0x4Au, v2);
      }
      id v3 = [obj countByEnumeratingWithState:&v10 objects:v14 count:16];
    }
    while (v3);
  }

  [*(id *)(v1 + 352) removeAllObjects];
}

void sub_1003B77C0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B7808(uint64_t a1, uint64_t a2, char a3, char a4)
{
  id v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "reportEncryptionKeySizeStats", buf, 2u);
  }
  uint64_t v9 = sub_1004AFD94();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_1003B78EC;
  v10[3] = &unk_1009988A0;
  char v11 = a3;
  char v12 = a4;
  void v10[4] = a1;
  void v10[5] = a2;
  sub_100013018(v9, v10);
}

void sub_1003B78EC(uint64_t a1)
{
  id v2 = *(_WORD **)(a1 + 32);
  long long __p = 0;
  long long v10 = 0;
  uint64_t v11 = 0;
  if (qword_1009F8768 != -1) {
    dispatch_once(&qword_1009F8768, &stru_1009AA688);
  }
  sub_10060C508((uint64_t)off_1009F8760, (uint64_t **)&__p);
  id v3 = __p;
  v2[304] = (v10 - __p) >> 3;
  if (*(unsigned char *)(a1 + 48))
  {
    ++v2[305];
    if (*(unsigned char *)(a1 + 49)) {
      ++v2[306];
    }
    uint64_t v4 = *(unsigned __int8 **)(a1 + 40);
    unint64_t v8 = ((unint64_t)v4[128] << 40) | ((unint64_t)v4[129] << 32) | ((unint64_t)v4[130] << 24) | ((unint64_t)v4[131] << 16) | ((unint64_t)v4[132] << 8) | v4[133];
    uint64_t v5 = (uint64_t)(v2 + 308);
    char v12 = &v8;
    if (!*((_DWORD *)sub_1003BA350(v5, &v8, (uint64_t)&unk_1007BE9D0, &v12) + 6))
    {
      int v7 = 0;
      sub_100476250(*(void *)(a1 + 40), &v7);
      int v6 = v7;
      char v12 = &v8;
      *((_DWORD *)sub_1003BA350(v5, &v8, (uint64_t)&unk_1007BE9D0, &v12) + 6) = v6;
    }
    id v3 = __p;
  }
  if (v3)
  {
    long long v10 = v3;
    operator delete(v3);
  }
}

void sub_1003B7A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003B7A6C(uint64_t a1)
{
  uint64_t v2 = sub_1004AFD94();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1003B7AE8;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003B7AE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v2 = objc_alloc_init((Class)NSMutableDictionary);
  id v3 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v1 + 608)];
  [v2 setObject:v3 forKeyedSubscript:@"NumberOfDevices"];

  uint64_t v4 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v1 + 610)];
  [v2 setObject:v4 forKeyedSubscript:@"NumberOfLowSecurityDevices"];

  uint64_t v5 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(v1 + 612)];
  [v2 setObject:v5 forKeyedSubscript:@"NumberOfEncryptionDowngrade"];

  for (uint64_t i = *(uint64_t ***)(v1 + 632); i; uint64_t i = (uint64_t **)*i)
  {
    uint64_t v7 = *((unsigned int *)i + 6);
    unint64_t v8 = sub_1006ACEAC();
    uint64_t v9 = +[NSString stringWithFormat:@"LowSecurityDevice_%@", v8];

    long long v10 = +[NSNumber numberWithUnsignedInt:v7];
    [v2 setObject:v9 forKey:v10];
  }
  uint64_t v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v13 = v2;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "sendEncryptionKeySizeDailyMetric : %@", buf, 0xCu);
  }
  sub_10038094C(v1, 0x4Bu, v2);
}

void sub_1003B7CD4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003B7D28(uint64_t a1, long long *a2)
{
  long long v5 = *a2;
  int v6 = *((_DWORD *)a2 + 4);
  uint64_t v3 = sub_1004AFD94();
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  _DWORD v4[2] = sub_1003B7DB4;
  v4[3] = &unk_1009AA618;
  void v4[4] = a1;
  sub_100013018(v3, v4);
}

void sub_1003B7DB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  id v8 = objc_alloc_init((Class)NSMutableDictionary);
  uint64_t v3 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 40)];
  [v8 setObject:v3 forKeyedSubscript:@"Result"];

  uint64_t v4 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 44)];
  [v8 setObject:v4 forKeyedSubscript:@"NumberOfBTConnections"];

  long long v5 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 48)];
  [v8 setObject:v5 forKeyedSubscript:@"BtConnectionDuration"];

  int v6 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 52)];
  [v8 setObject:v6 forKeyedSubscript:@"NumberOfBTEntryCounter"];

  uint64_t v7 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a1 + 56)];
  [v8 setObject:v7 forKeyedSubscript:@"NumberOfBTExitCounter"];

  sub_10038094C(v2, 0x67u, v8);
}

void sub_1003B7EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003B7F34(uint64_t a1, uint64_t a2, const void ***a3)
{
  uint64_t v5 = sub_1004AFD94();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3321888768;
  _OWORD v6[2] = sub_1003B7FF8;
  v6[3] = &unk_1009AA638;
  v6[4] = a1;
  sub_10030BA54(v7, a3);
  sub_100013018(v5, v6);
  sub_10004BA28((uint64_t)v7, (char *)v7[1]);
}

void sub_1003B7FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char *a15)
{
  sub_10004BA28(v15, a15);
  _Unwind_Resume(a1);
}

uint64_t sub_1003B7FF8(void *a1)
{
  uint64_t v1 = (void *)a1[5];
  uint64_t v17 = a1[4];
  uint64_t v2 = a1 + 6;
  uint64_t v3 = @"Unknown";
  if (v1 != a1 + 6)
  {
    do
    {
      uint64_t v4 = (const char *)(v1 + 4);
      if (*((char *)v1 + 55) < 0) {
        uint64_t v4 = *(const char **)v4;
      }
      if (!strcmp(v4, "A1603"))
      {
        uint64_t v3 = @"A1603";
      }
      else if (!strcmp(v4, "A2051"))
      {
        uint64_t v3 = @"A2051";
      }
      else if (!strcmp(v4, "A3085"))
      {
        uint64_t v3 = @"A3085";
      }
      else if (!strcmp(v4, "A2538"))
      {
        uint64_t v3 = @"A2538";
      }
      uint64_t v5 = (void *)v1[1];
      if (v5)
      {
        do
        {
          int v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v6 = (void *)v1[2];
          BOOL v7 = *v6 == (void)v1;
          uint64_t v1 = v6;
        }
        while (!v7);
      }
      uint64_t v1 = v6;
    }
    while (v6 != v2);
  }
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, v17 + 176);
  id v8 = [*(id *)(v17 + 368) objectForKey:v3];

  if (v8)
  {
    uint64_t v9 = [*(id *)(v17 + 368) objectForKeyedSubscript:v3];
    long long v10 = [v9 objectAtIndexedSubscript:0];
    uint64_t v11 = [v10 unsignedIntValue] + 1;

    char v12 = +[NSNumber numberWithUnsignedInt:v11];
    id v13 = [*(id *)(v17 + 368) objectForKeyedSubscript:v3];
    [v13 setObject:v12 atIndexedSubscript:0];
  }
  else if (([(__CFString *)v3 isEqualToString:@"Unknown"] & 1) == 0)
  {
    uint64_t v14 = +[NSMutableArray arrayWithObjects:](NSMutableArray, "arrayWithObjects:", &off_1009E0E30, 0);
    uint64_t v15 = *(void **)(v17 + 376);
    *(void *)(v17 + 376) = v14;

    [*(id *)(v17 + 368) setObject:*(void *)(v17 + 376) forKeyedSubscript:v3];
  }
  sub_10003AFE8((uint64_t)v18);
  return sub_10003AFB4((uint64_t)v18);
}

void sub_1003B8234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003B826C(uint64_t a1, uint64_t a2)
{
  return sub_10030BA54((uint64_t *)(a1 + 40), (const void ***)(a2 + 40));
}

void sub_1003B8278(uint64_t a1)
{
}

void sub_1003B8288(uint64_t a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = +[NSProcessInfo processInfo];
  uint64_t v5 = [v4 environment];
  int v6 = [v5 objectForKeyedSubscript:@"XCTestConfigurationFilePath"];
  if (v6)
  {
  }
  else
  {
    int v7 = _os_feature_enabled_impl();

    if (v7)
    {
      uint64_t v8 = sub_1004AFD94();
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3221225472;
      void v9[2] = sub_1003B83DC;
      v9[3] = &unk_100998A38;
      uint64_t v11 = a1;
      id v10 = v3;
      sub_100013018(v8, v9);
    }
  }
}

void sub_1003B83A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1003B83DC(uint64_t a1)
{
}

void sub_1003B83F0(uint64_t a1)
{
  sub_1003B8CE0(a1);

  operator delete();
}

uint64_t sub_1003B8438(uint64_t a1)
{
  return sub_1003B8CE0(a1 - 16);
}

void sub_1003B8440(uint64_t a1)
{
  sub_1003B8CE0(a1 - 16);

  operator delete();
}

void sub_1003B84A0(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  uint64_t v4 = *(char **)(a1 + 8);
  uint64_t v5 = *(char **)(a1 + 16);
  if (v4 == v5)
  {
    int v6 = *(char **)(a1 + 8);
    goto LABEL_10;
  }
  int v6 = *(char **)(a1 + 8);
  while (*(void *)v6 != a2)
  {
    v6 += 8;
    if (v6 == v5)
    {
      int v6 = *(char **)(a1 + 16);
      break;
    }
  }
  if (v6 == v5)
  {
    if (v4 != v5)
    {
LABEL_11:
      uint64_t v7 = a2;
      sub_1003B8570(a1 + 8, v6, (char *)&v7);
      sub_100061554(a1 + 8);
      goto LABEL_12;
    }
LABEL_10:
    (***(void (****)(void, uint64_t))(a1 + 32))(*(void *)(a1 + 32), a1);
    goto LABEL_11;
  }
LABEL_12:
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

char *sub_1003B8570(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  uint64_t v4 = __src;
  int v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    id v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      long long v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      long long v19 = 0;
    }
    uint64_t v20 = &v19[8 * v16];
    long long __p = v19;
    long long v27 = v20;
    long long v28 = v20;
    long long v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        long long v23 = (char *)sub_1000405F8(v8, v22);
        uint64_t v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        long long v27 = v20;
        long long v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        long long v27 = v20;
      }
    }
    *(void *)uint64_t v20 = *(void *)v3;
    long long v28 = v20 + 8;
    uint64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)long long __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    uint64_t v9 = __src + 8;
    id v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)uint64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1003B8778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B87B0(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  *(_OWORD *)(a1 + 16) = v4;
  *(_OWORD *)(a1 + 32) = v5;
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v7;
  }
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 104), *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v8;
  }
  if (*(char *)(a2 + 151) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 128), *(void **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v9;
  }
  if (*(char *)(a2 + 175) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 152), *(void **)(a2 + 152), *(void *)(a2 + 160));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = v10;
  }
  if (*(char *)(a2 + 199) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 176), *(void **)(a2 + 176), *(void *)(a2 + 184));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v11;
  }
  if (*(char *)(a2 + 223) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 200), *(void **)(a2 + 200), *(void *)(a2 + 208));
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)(a1 + 200) = v12;
  }
  if (*(char *)(a2 + 247) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 224), *(void **)(a2 + 224), *(void *)(a2 + 232));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 224);
    *(void *)(a1 + 240) = *(void *)(a2 + 240);
    *(_OWORD *)(a1 + 224) = v13;
  }
  long long v14 = *(_OWORD *)(a2 + 248);
  long long v15 = *(_OWORD *)(a2 + 264);
  *(void *)(a1 + 280) = *(void *)(a2 + 280);
  *(_OWORD *)(a1 + 264) = v15;
  *(_OWORD *)(a1 + 248) = v14;
  uint64_t v16 = (unsigned char *)(a1 + 288);
  if (*(char *)(a2 + 311) < 0)
  {
    sub_10003B098(v16, *(void **)(a2 + 288), *(void *)(a2 + 296));
  }
  else
  {
    long long v17 = *(_OWORD *)(a2 + 288);
    *(void *)(a1 + 304) = *(void *)(a2 + 304);
    *(_OWORD *)uint64_t v16 = v17;
  }
  *(unsigned char *)(a1 + 312) = *(unsigned char *)(a2 + 312);
  return a1;
}

void sub_1003B89B4(_Unwind_Exception *exception_object)
{
  if (v1[247] < 0) {
    operator delete(*v8);
  }
  if (v1[223] < 0) {
    operator delete(*v7);
  }
  if (v1[199] < 0) {
    operator delete(*v6);
  }
  if (v1[175] < 0) {
    operator delete(*v5);
  }
  if (v1[151] < 0) {
    operator delete(*v4);
  }
  if (v1[127] < 0) {
    operator delete(*v3);
  }
  if (v1[103] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B8A60(uint64_t a1)
{
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  if (*(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  return a1;
}

uint64_t sub_1003B8B04(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 36) = *((_DWORD *)a2 + 9);
  if (*((char *)a2 + 63) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 40), *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 40);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)(a1 + 40) = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 64), *((void **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v7 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v7;
  }
  if (*((char *)a2 + 111) < 0)
  {
    sub_10003B098((unsigned char *)(a1 + 88), *((void **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 88);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 88) = v8;
  }
  long long v9 = (unsigned char *)(a1 + 112);
  if (*((char *)a2 + 135) < 0)
  {
    sub_10003B098(v9, *((void **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v10 = a2[7];
    *(void *)(a1 + 128) = *((void *)a2 + 16);
    *(_OWORD *)long long v9 = v10;
  }
  long long v11 = *(long long *)((char *)a2 + 136);
  long long v12 = *(long long *)((char *)a2 + 152);
  long long v13 = *(long long *)((char *)a2 + 168);
  *(_DWORD *)(a1 + 184) = *((_DWORD *)a2 + 46);
  *(_OWORD *)(a1 + 168) = v13;
  *(_OWORD *)(a1 + 152) = v12;
  *(_OWORD *)(a1 + 136) = v11;
  return a1;
}

void sub_1003B8C30(_Unwind_Exception *exception_object)
{
  if (v1[111] < 0) {
    operator delete(*v4);
  }
  if (v1[87] < 0) {
    operator delete(*v3);
  }
  if (v1[63] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003B8C7C(uint64_t a1)
{
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  return a1;
}

uint64_t sub_1003B8CE0(uint64_t a1)
{
  *(void *)a1 = off_1009A9E60;
  *(void *)(a1 + 8) = &off_1009AA1E0;
  *(void *)(a1 + 16) = off_1009AA1F8;
  *(void *)(a1 + 24) = &off_1009AA238;
  *(void *)(a1 + 32) = off_1009AA250;
  *(void *)(a1 + 40) = off_1009AA280;
  *(void *)(a1 + 48) = off_1009AA2D0;
  *(void *)(a1 + 56) = &off_1009AA300;
  *(void *)(a1 + 64) = off_1009AA318;
  *(void *)(a1 + 72) = &off_1009AA3C8;
  *(void *)(a1 + 80) = off_1009AA3E0;

  sub_1000486F0(a1 + 656, *(void **)(a1 + 664));
  sub_1000A9450(a1 + 616);
  sub_1000486F0(a1 + 496, *(void **)(a1 + 504));
  sub_1000486F0(a1 + 472, *(void **)(a1 + 480));
  sub_1002CBCC8(a1 + 432, *(void **)(a1 + 440));
  sub_1000486F0(a1 + 408, *(void **)(a1 + 416));
  sub_1003B8F18(a1 + 384, *(void **)(a1 + 392));

  sub_100052DA4(a1 + 240);
  sub_100052DA4(a1 + 176);

  return a1;
}

void sub_1003B8F18(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1003B8F18(a1, *a2);
    sub_1003B8F18(a1, a2[1]);
    sub_1003B8F74((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_1003B8F74(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003B8FE8(id a1)
{
}

void sub_1003B902C()
{
}

void sub_1003B9050(id a1)
{
}

void sub_1003B9094()
{
}

void sub_1003B90B8(id a1)
{
}

void sub_1003B90FC()
{
}

void sub_1003B9120(id a1)
{
}

void sub_1003B92B0()
{
}

void sub_1003B92D4(id a1)
{
}

void sub_1003B9318()
{
}

void sub_1003B933C(id a1)
{
}

void sub_1003B9380()
{
}

void sub_1003B93A4(id a1)
{
}

void sub_1003B93E8()
{
}

void sub_1003B940C(id a1)
{
}

void sub_1003B9450()
{
}

void sub_1003B9474(id a1)
{
}

void sub_1003B94B8()
{
}

void sub_1003B94DC(id a1)
{
}

void sub_1003B9520()
{
}

uint64_t sub_1003B9544(uint64_t a1, const void **a2, uint64_t a3)
{
  *(void *)(a1 + 8) = 0;
  long long v4 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  if (a3)
  {
    uint64_t v6 = 24 * a3;
    do
    {
      sub_10030BB38((uint64_t **)a1, v4, a2, (uint64_t)a2);
      a2 += 3;
      v6 -= 24;
    }
    while (v6);
  }
  return a1;
}

void sub_1003B95B0(_Unwind_Exception *a1)
{
  sub_10004BA28(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_1003B95C8(id a1)
{
}

void sub_1003B960C()
{
}

uint64_t sub_1003B9630(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = a1 + 16;
    uint64_t v5 = 1;
    do
    {
      if (!sub_1000315FC(v4, a2, v2 + 4))
      {
        if (!sub_1000315FC(v4, v2 + 4, a2)) {
          return v5;
        }
        ++v2;
      }
      uint64_t v2 = (const void **)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t sub_1003B96B0(uint64_t **a1, const void **a2)
{
  id v3 = (uint64_t *)sub_10003156C((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10004D3B8(a1, v3);
  sub_1003B8F74((uint64_t)(v4 + 4));
  operator delete(v4);
  return 1;
}

_DWORD *sub_1003B970C(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = sub_1003B97A4((uint64_t)a1, &v11, a2);
  long long v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    long long v7 = operator new(0x38uLL);
    __int16 v9 = *((_WORD *)*a4 + 2);
    v7[8] = **a4;
    *((_WORD *)v7 + 18) = v9;
    *((void *)v7 + 5) = 0;
    *((void *)v7 + 6) = 0;
    sub_100036CA0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t *sub_1003B97A4(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(uint64_t **)(a1 + 8);
  double result = (uint64_t *)(a1 + 8);
  uint64_t v4 = v5;
  if (v5)
  {
    while (1)
    {
      uint64_t v6 = v4;
      unsigned int v7 = bswap32(*(_DWORD *)a3);
      unsigned int v8 = bswap32(*((_DWORD *)v6 + 8));
      if (v7 != v8) {
        goto LABEL_8;
      }
      unsigned int v7 = bswap32(*(unsigned __int16 *)(a3 + 4)) >> 16;
      unsigned int v9 = bswap32(*((unsigned __int16 *)v6 + 18));
      if (v7 == HIWORD(v9))
      {
LABEL_12:
        unsigned int v11 = bswap32(*((_DWORD *)v6 + 8));
        unsigned int v12 = bswap32(*(_DWORD *)a3);
        if (v11 == v12)
        {
          unsigned int v11 = bswap32(*((unsigned __int16 *)v6 + 18)) >> 16;
          unsigned int v13 = bswap32(*(unsigned __int16 *)(a3 + 4));
          if (v11 == HIWORD(v13)) {
            goto LABEL_22;
          }
          unsigned int v12 = HIWORD(v13);
        }
        if (v11 < v12) {
          int v14 = -1;
        }
        else {
          int v14 = 1;
        }
        if ((v14 & 0x80000000) == 0) {
          goto LABEL_22;
        }
        double result = v6 + 1;
        uint64_t v4 = (uint64_t *)v6[1];
        if (!v4) {
          goto LABEL_22;
        }
      }
      else
      {
        unsigned int v8 = HIWORD(v9);
LABEL_8:
        if (v7 < v8) {
          int v10 = -1;
        }
        else {
          int v10 = 1;
        }
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_12;
        }
        uint64_t v4 = (uint64_t *)*v6;
        double result = v6;
        if (!*v6) {
          goto LABEL_22;
        }
      }
    }
  }
  uint64_t v6 = result;
LABEL_22:
  *a2 = v6;
  return result;
}

_OWORD *sub_1003B987C(uint64_t **a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v14 = 0;
  uint64_t v6 = (void **)sub_1000314CC((uint64_t)a1, &v14, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    uint64_t v13 = 0;
    unsigned int v7 = operator new(0xA0uLL);
    v12[1] = a1 + 1;
    unsigned int v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    _DWORD v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    void v9[2] = 0;
    *unsigned int v9 = 0;
    *(_OWORD *)((char *)v7 + 56) = 0u;
    *(_OWORD *)((char *)v7 + 72) = 0u;
    *(_OWORD *)((char *)v7 + 88) = 0u;
    *(_OWORD *)((char *)v7 + 104) = 0u;
    *(_OWORD *)((char *)v7 + 120) = 0u;
    *(_OWORD *)((char *)v7 + 136) = 0u;
    *((void *)v7 + 19) = 0;
    LOBYTE(v13) = 1;
    sub_100036CA0(a1, v14, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_1003B9964((uint64_t)v12, 0);
  }
  return v7;
}

void sub_1003B9964(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1003B8F74((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_1003B99BC(uint64_t **a1, uint64_t a2)
{
  id v3 = (uint64_t *)sub_1003B9A10((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  uint64_t v4 = v3;
  sub_10004D3B8(a1, v3);
  operator delete(v4);
  return 1;
}

uint64_t sub_1003B9A10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v2 = a1 + 8;
  uint64_t v3 = v4;
  if (!v4) {
    return v2;
  }
  uint64_t v5 = v2;
  do
  {
    unsigned int v6 = bswap32(*(_DWORD *)(v3 + 32));
    unsigned int v7 = bswap32(*(_DWORD *)a2);
    if (v6 != v7) {
      goto LABEL_7;
    }
    unsigned int v6 = bswap32(*(unsigned __int16 *)(v3 + 36)) >> 16;
    unsigned int v8 = bswap32(*(unsigned __int16 *)(a2 + 4));
    if (v6 != HIWORD(v8))
    {
      unsigned int v7 = HIWORD(v8);
LABEL_7:
      if (v6 < v7) {
        int v9 = -1;
      }
      else {
        int v9 = 1;
      }
      goto LABEL_10;
    }
    int v9 = 0;
LABEL_10:
    BOOL v10 = v9 < 0;
    if (v9 >= 0) {
      unsigned int v11 = (uint64_t *)v3;
    }
    else {
      unsigned int v11 = (uint64_t *)(v3 + 8);
    }
    if (!v10) {
      uint64_t v5 = v3;
    }
    uint64_t v3 = *v11;
  }
  while (*v11);
  if (v5 == v2) {
    return v2;
  }
  unsigned int v12 = bswap32(*(_DWORD *)a2);
  unsigned int v13 = bswap32(*(_DWORD *)(v5 + 32));
  if (v12 != v13) {
    goto LABEL_20;
  }
  unsigned int v12 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
  unsigned int v14 = bswap32(*(unsigned __int16 *)(v5 + 36));
  if (v12 != HIWORD(v14))
  {
    unsigned int v13 = HIWORD(v14);
LABEL_20:
    int v15 = v12 < v13 ? -1 : 1;
    if (v15 < 0) {
      return v2;
    }
  }
  return v5;
}

uint64_t sub_1003B9AE8(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_1003B9A10((uint64_t)a1, a2);
  if (a1 + 1 == (uint64_t **)v3) {
    return 0;
  }
  sub_1003B9B30(a1, v3);
  return 1;
}

uint64_t *sub_1003B9B30(uint64_t **a1, uint64_t a2)
{
  uint64_t v3 = sub_10004D3B8(a1, (uint64_t *)a2);
  sub_1000486F0(a2 + 40, *(void **)(a2 + 48));
  operator delete((void *)a2);
  return v3;
}

uint64_t sub_1003B9B70(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(uint64_t **)(a1 + 8);
  if (v2)
  {
    uint64_t result = 1;
    while (1)
    {
      unsigned int v4 = bswap32(*(_DWORD *)a2);
      unsigned int v5 = bswap32(*((_DWORD *)v2 + 8));
      if (v4 == v5)
      {
        unsigned int v4 = bswap32(*(unsigned __int16 *)(a2 + 4)) >> 16;
        unsigned int v6 = bswap32(*((unsigned __int16 *)v2 + 18));
        if (v4 == HIWORD(v6)) {
          break;
        }
        unsigned int v5 = HIWORD(v6);
      }
      int v7 = v4 < v5 ? -1 : 1;
      if ((v7 & 0x80000000) == 0) {
        break;
      }
LABEL_19:
      uint64_t v2 = (uint64_t *)*v2;
      if (!v2) {
        return 0;
      }
    }
    unsigned int v8 = bswap32(*((_DWORD *)v2 + 8));
    unsigned int v9 = bswap32(*(_DWORD *)a2);
    if (v8 == v9)
    {
      unsigned int v8 = bswap32(*((unsigned __int16 *)v2 + 18)) >> 16;
      unsigned int v10 = bswap32(*(unsigned __int16 *)(a2 + 4));
      if (v8 == HIWORD(v10))
      {
        int v11 = 0;
LABEL_17:
        if ((v11 & 0x80000000) == 0) {
          return result;
        }
        ++v2;
        goto LABEL_19;
      }
      unsigned int v9 = HIWORD(v10);
    }
    if (v8 < v9) {
      int v11 = -1;
    }
    else {
      int v11 = 1;
    }
    goto LABEL_17;
  }
  return 0;
}

_DWORD *sub_1003B9C30(uint64_t **a1, uint64_t a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v11 = 0;
  unsigned int v6 = sub_1003B97A4((uint64_t)a1, &v11, a2);
  int v7 = (_DWORD *)*v6;
  if (!*v6)
  {
    unsigned int v8 = (uint64_t **)v6;
    int v7 = operator new(0x40uLL);
    __int16 v9 = *((_WORD *)*a4 + 2);
    v7[8] = **a4;
    *((_WORD *)v7 + 18) = v9;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 6) = 0;
    *((void *)v7 + 5) = v7 + 12;
    sub_100036CA0(a1, v11, v8, (uint64_t *)v7);
  }
  return v7;
}

uint64_t **sub_1003B9CD4(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 28);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    __int16 v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x28uLL);
    v11[28] = **a4;
    *((_DWORD *)v11 + 8) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *sub_1003B9D98(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  unsigned int v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v11, a2);
  int v7 = *v6;
  if (!*v6)
  {
    unsigned int v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1003B9E50((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, v10[0]);
    int v7 = v10[0];
    v10[0] = 0;
    sub_1003B9964((uint64_t)v10, 0);
  }
  return v7;
}

double sub_1003B9E50@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unsigned int v6 = (char *)operator new(0xA0uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  int v7 = v6 + 32;
  unsigned int v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_10003B098(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)int v7 = v9;
  }
  *((void *)v6 + 19) = 0;
  double result = 0.0;
  *(_OWORD *)(v6 + 136) = 0u;
  *(_OWORD *)(v6 + 120) = 0u;
  *(_OWORD *)(v6 + 104) = 0u;
  *(_OWORD *)(v6 + 88) = 0u;
  *(_OWORD *)(v6 + 72) = 0u;
  *(_OWORD *)(v6 + 56) = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1003B9EF0(_Unwind_Exception *a1)
{
  sub_1003B9964(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t **sub_1003B9F08(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 32);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[32] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((void *)v11 + 5) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t **sub_1003B9FD0(uint64_t **a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  int v7 = a1 + 1;
  unsigned int v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int8 *)v6 + 28);
        if (v8 >= v10) {
          break;
        }
        unsigned int v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      unsigned int v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x30uLL);
    v11[28] = **a4;
    *((_DWORD *)v11 + 10) = 0;
    *((void *)v11 + 4) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1003BA098(id a1)
{
}

void sub_1003BA0DC()
{
}

void sub_1003BA100(id a1)
{
}

void sub_1003BA144()
{
}

void sub_1003BA168(id a1)
{
}

void sub_1003BA1AC()
{
}

uint64_t sub_1003BA1D0(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  unsigned int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    unsigned int v5 = *(unsigned __int16 *)(v2 + 32);
    BOOL v6 = v5 >= v3;
    if (v5 >= v3) {
      int v7 = (uint64_t *)v2;
    }
    else {
      int v7 = (uint64_t *)(v2 + 8);
    }
    if (v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(unsigned __int16 *)(v4 + 32)) {
    return 0;
  }
  sub_10004D3B8((uint64_t **)a1, (uint64_t *)v4);
  operator delete((void *)v4);
  return 1;
}

uint64_t **sub_1003BA24C(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  int v7 = a1 + 1;
  BOOL v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        long long v9 = (uint64_t **)v6;
        unsigned int v10 = *((unsigned __int16 *)v6 + 16);
        if (v8 >= v10) {
          break;
        }
        BOOL v6 = *v9;
        int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      BOOL v6 = v9[1];
      if (!v6)
      {
        int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    long long v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = (char *)operator new(0x118uLL);
    *((_WORD *)v11 + 16) = **a4;
    *(_OWORD *)(v11 + 248) = 0u;
    *(_OWORD *)(v11 + 232) = 0u;
    *(_OWORD *)(v11 + 216) = 0u;
    *(_OWORD *)(v11 + 200) = 0u;
    *(_OWORD *)(v11 + 184) = 0u;
    *(_OWORD *)(v11 + 168) = 0u;
    *(_OWORD *)(v11 + 152) = 0u;
    *(_OWORD *)(v11 + 136) = 0u;
    *(_OWORD *)(v11 + 120) = 0u;
    *(_OWORD *)(v11 + 104) = 0u;
    *(_OWORD *)(v11 + 88) = 0u;
    *(_OWORD *)(v11 + 72) = 0u;
    *(_OWORD *)(v11 + 56) = 0u;
    *(_OWORD *)(v11 + 40) = 0u;
    *(_OWORD *)(v11 + 264) = 0u;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void *sub_1003BA350(uint64_t a1, unint64_t *a2, uint64_t a3, void **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *a2;
      if (v6 >= v7) {
        unint64_t v9 = v6 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
            if (v11[2] == v6) {
              return v11;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v6;
  void v11[2] = **a4;
  *((_DWORD *)v11 + 6) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_1000A9204(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v9 = v6 % v7;
      }
      else {
        unint64_t v9 = v6;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  uint64_t v20 = *(void **)(*(void *)a1 + 8 * v9);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    uint64_t v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1003BA564(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003BA594(uint64_t a1)
{
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1009AB128;
  *(void *)(a1 + 8) = a1 + 16;
  *(void *)(a1 + 24) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  sub_1000262C4();
  return a1;
}

void sub_1003BA5F8(_Unwind_Exception *a1)
{
  sub_1003BEF50(v1, *v2);
  _Unwind_Resume(a1);
}

uint64_t sub_1003BA614(uint64_t a1)
{
  *(void *)a1 = off_1009AB128;
  sub_1000262C4();
  sub_1003BEF50(a1 + 8, *(void **)(a1 + 16));
  return a1;
}

void sub_1003BA664(_Unwind_Exception *a1)
{
  sub_1003BEF50(v1 + 8, *(void **)(v1 + 16));
  _Unwind_Resume(a1);
}

void sub_1003BA680(uint64_t a1)
{
  sub_1003BA614(a1);

  operator delete();
}

uint64_t sub_1003BA6B8(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 32);
  unsigned int v5 = qword_100A19EB8;
  BOOL v6 = os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = *(void *)(a1 + 24);
      int v32 = 134217984;
      uint64_t v33 = v7;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "getStoredDevices reading from local cache (%zu devices)", (uint8_t *)&v32, 0xCu);
    }
    uint8x8_t v8 = *(void **)(a1 + 8);
    if (v8 != (void *)(a1 + 16))
    {
      do
      {
        unint64_t v9 = (unsigned __int8 *)(v8 + 4);
        LOWORD(v33) = 0;
        int v32 = 0;
        if (*((char *)v8 + 55) < 0) {
          unint64_t v9 = *(unsigned __int8 **)v9;
        }
        if (sub_1004A82DC((uint64_t)&v32, v9))
        {
          if ((_BYTE)v32)
          {
LABEL_9:
            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009AB218);
            }
            uint64_t v10 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v32, 1);
            if (!sub_1004A8390(a2, v10))
            {
              unint64_t v12 = *(uint64_t **)(a2 + 8);
              unint64_t v11 = *(void *)(a2 + 16);
              if ((unint64_t)v12 >= v11)
              {
                uint64_t v16 = ((uint64_t)v12 - *(void *)a2) >> 3;
                if ((unint64_t)(v16 + 1) >> 61) {
                  abort();
                }
                uint64_t v17 = v11 - *(void *)a2;
                uint64_t v18 = v17 >> 2;
                if (v17 >> 2 <= (unint64_t)(v16 + 1)) {
                  uint64_t v18 = v16 + 1;
                }
                if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v19 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v19 = v18;
                }
                if (v19) {
                  uint64_t v20 = (char *)sub_1000405F8(a2 + 16, v19);
                }
                else {
                  uint64_t v20 = 0;
                }
                unint64_t v21 = (uint64_t *)&v20[8 * v16];
                *unint64_t v21 = v10;
                float v13 = v21 + 1;
                long long v23 = *(uint64_t **)a2;
                unint64_t v22 = *(uint64_t **)(a2 + 8);
                if (v22 != *(uint64_t **)a2)
                {
                  do
                  {
                    uint64_t v24 = *--v22;
                    *--unint64_t v21 = v24;
                  }
                  while (v22 != v23);
                  unint64_t v22 = *(uint64_t **)a2;
                }
                *(void *)a2 = v21;
                *(void *)(a2 + 8) = v13;
                *(void *)(a2 + 16) = &v20[8 * v19];
                if (v22) {
                  operator delete(v22);
                }
              }
              else
              {
                *unint64_t v12 = v10;
                float v13 = v12 + 1;
              }
              *(void *)(a2 + 8) = v13;
            }
          }
          else
          {
            uint64_t v14 = 1;
            while (v14 != 6)
            {
              if (*((unsigned __int8 *)&v32 + v14++))
              {
                if ((unint64_t)(v14 - 2) <= 4) {
                  goto LABEL_9;
                }
                break;
              }
            }
          }
        }
        long long v25 = (void *)v8[1];
        if (v25)
        {
          do
          {
            long long v26 = v25;
            long long v25 = (void *)*v25;
          }
          while (v25);
        }
        else
        {
          do
          {
            long long v26 = (void *)v8[2];
            BOOL v27 = *v26 == (void)v8;
            uint8x8_t v8 = v26;
          }
          while (!v27);
        }
        uint8x8_t v8 = v26;
      }
      while (v26 != (void *)(a1 + 16));
    }
    return 0;
  }
  else
  {
    if (v6)
    {
      LOWORD(v32) = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "getStoredDevices reading from keychain", (uint8_t *)&v32, 2u);
    }
    uint64_t v28 = sub_100311C54((void **)a2);
    uint64_t v30 = *(uint64_t **)a2;
    long long v29 = *(uint64_t **)(a2 + 8);
    while (v30 != v29)
      sub_1003BA9A4(a1, *v30++);
    *(unsigned char *)(a1 + 32) = 1;
  }
  return v28;
}

void sub_1003BA9A4(uint64_t a1, uint64_t a2)
{
  int v121 = *(_DWORD *)(a2 + 128);
  __int16 v122 = *(_WORD *)(a2 + 132);
  long long v119 = 0;
  unsigned int v120 = 0;
  sub_1004A82EC((unsigned __int8 *)&v121, __p);
  sub_1003BB6BC(a1, (const void **)__p, &v119);
  if (v118 < 0) {
    operator delete(__p[0]);
  }
  int v4 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_1004A82EC((unsigned __int8 *)&v121, &v114);
    unsigned int v5 = SHIBYTE(v116) >= 0 ? &v114 : (void **)v114;
    *(_DWORD *)long long buf = 136446210;
    uint64_t v124 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Loading keys from keychain for device address %{public}s", buf, 0xCu);
    if (SHIBYTE(v116) < 0) {
      operator delete(v114);
    }
  }
  unsigned int v114 = 0;
  long long v115 = 0;
  unsigned int v116 = 0;
  uint64_t v7 = (char *)sub_1002C44F0((uint64_t)&v116, 1uLL);
  uint8x8_t v8 = (char *)v114;
  unint64_t v9 = v115;
  uint64_t v10 = &v7[4 * v6];
  *(_DWORD *)uint64_t v7 = 1;
  unint64_t v11 = v7 + 4;
  unint64_t v12 = v7;
  while (v9 != v8)
  {
    int v13 = *((_DWORD *)v9 - 1);
    v9 -= 4;
    *((_DWORD *)v12 - 1) = v13;
    v12 -= 4;
  }
  unsigned int v114 = v12;
  long long v115 = v7 + 4;
  unsigned int v116 = &v7[4 * v6];
  if (v8)
  {
    operator delete(v8);
    uint64_t v10 = v116;
  }
  long long v115 = v7 + 4;
  if (v11 >= v10)
  {
    BOOL v15 = (char *)v114;
    uint64_t v16 = (v11 - (unsigned char *)v114) >> 2;
    unint64_t v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 62) {
      abort();
    }
    uint64_t v18 = v10 - (unsigned char *)v114;
    if (v18 >> 1 > v17) {
      unint64_t v17 = v18 >> 1;
    }
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v19 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v19 = v17;
    }
    if (v19)
    {
      uint64_t v20 = (char *)sub_1002C44F0((uint64_t)&v116, v19);
      BOOL v15 = (char *)v114;
      unint64_t v11 = v115;
    }
    else
    {
      uint64_t v20 = 0;
    }
    unint64_t v21 = &v20[4 * v16];
    uint64_t v10 = &v20[4 * v19];
    *(_DWORD *)unint64_t v21 = 2;
    uint64_t v14 = v21 + 4;
    while (v11 != v15)
    {
      int v22 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v21 - 1) = v22;
      v21 -= 4;
    }
    unsigned int v114 = v21;
    long long v115 = v14;
    unsigned int v116 = v10;
    if (v15)
    {
      operator delete(v15);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *((_DWORD *)v7 + 1) = 2;
    uint64_t v14 = v7 + 8;
  }
  long long v115 = v14;
  if (v14 >= v10)
  {
    uint64_t v24 = (char *)v114;
    uint64_t v25 = (v14 - (unsigned char *)v114) >> 2;
    unint64_t v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 62) {
      abort();
    }
    uint64_t v27 = v10 - (unsigned char *)v114;
    if (v27 >> 1 > v26) {
      unint64_t v26 = v27 >> 1;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v28 = v26;
    }
    if (v28)
    {
      long long v29 = (char *)sub_1002C44F0((uint64_t)&v116, v28);
      uint64_t v24 = (char *)v114;
      uint64_t v14 = v115;
    }
    else
    {
      long long v29 = 0;
    }
    uint64_t v30 = &v29[4 * v25];
    uint64_t v10 = &v29[4 * v28];
    *(_DWORD *)uint64_t v30 = 4;
    long long v23 = v30 + 4;
    while (v14 != v24)
    {
      int v31 = *((_DWORD *)v14 - 1);
      v14 -= 4;
      *((_DWORD *)v30 - 1) = v31;
      v30 -= 4;
    }
    unsigned int v114 = v30;
    long long v115 = v23;
    unsigned int v116 = v10;
    if (v24)
    {
      operator delete(v24);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v14 = 4;
    long long v23 = v14 + 4;
  }
  long long v115 = v23;
  if (v23 >= v10)
  {
    uint64_t v33 = (char *)v114;
    uint64_t v34 = (v23 - (unsigned char *)v114) >> 2;
    unint64_t v35 = v34 + 1;
    if ((unint64_t)(v34 + 1) >> 62) {
      abort();
    }
    uint64_t v36 = v10 - (unsigned char *)v114;
    if (v36 >> 1 > v35) {
      unint64_t v35 = v36 >> 1;
    }
    if ((unint64_t)v36 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v37 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v37 = v35;
    }
    if (v37)
    {
      long long v38 = (char *)sub_1002C44F0((uint64_t)&v116, v37);
      uint64_t v33 = (char *)v114;
      long long v23 = v115;
    }
    else
    {
      long long v38 = 0;
    }
    long long v39 = &v38[4 * v34];
    uint64_t v10 = &v38[4 * v37];
    *(_DWORD *)long long v39 = 8;
    int v32 = v39 + 4;
    while (v23 != v33)
    {
      int v40 = *((_DWORD *)v23 - 1);
      v23 -= 4;
      *((_DWORD *)v39 - 1) = v40;
      v39 -= 4;
    }
    unsigned int v114 = v39;
    long long v115 = v32;
    unsigned int v116 = v10;
    if (v33)
    {
      operator delete(v33);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *(_DWORD *)long long v23 = 8;
    int v32 = v23 + 4;
  }
  long long v115 = v32;
  if (v32 >= v10)
  {
    long long v42 = (char *)v114;
    uint64_t v43 = (v32 - (unsigned char *)v114) >> 2;
    unint64_t v44 = v43 + 1;
    if ((unint64_t)(v43 + 1) >> 62) {
      abort();
    }
    uint64_t v45 = v10 - (unsigned char *)v114;
    if (v45 >> 1 > v44) {
      unint64_t v44 = v45 >> 1;
    }
    if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v46 = v44;
    }
    if (v46)
    {
      unsigned __int16 v47 = (char *)sub_1002C44F0((uint64_t)&v116, v46);
      long long v42 = (char *)v114;
      int v32 = v115;
    }
    else
    {
      unsigned __int16 v47 = 0;
    }
    long long v48 = &v47[4 * v43];
    uint64_t v10 = &v47[4 * v46];
    *(_DWORD *)long long v48 = 16;
    long long v41 = v48 + 4;
    while (v32 != v42)
    {
      int v49 = *((_DWORD *)v32 - 1);
      v32 -= 4;
      *((_DWORD *)v48 - 1) = v49;
      v48 -= 4;
    }
    unsigned int v114 = v48;
    long long v115 = v41;
    unsigned int v116 = v10;
    if (v42)
    {
      operator delete(v42);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *(_DWORD *)int v32 = 16;
    long long v41 = v32 + 4;
  }
  long long v115 = v41;
  if (v41 >= v10)
  {
    long long v51 = (char *)v114;
    uint64_t v52 = (v41 - (unsigned char *)v114) >> 2;
    unint64_t v53 = v52 + 1;
    if ((unint64_t)(v52 + 1) >> 62) {
      abort();
    }
    uint64_t v54 = v10 - (unsigned char *)v114;
    if (v54 >> 1 > v53) {
      unint64_t v53 = v54 >> 1;
    }
    if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v55 = v53;
    }
    if (v55)
    {
      long long v56 = (char *)sub_1002C44F0((uint64_t)&v116, v55);
      long long v51 = (char *)v114;
      long long v41 = v115;
    }
    else
    {
      long long v56 = 0;
    }
    long long v57 = &v56[4 * v52];
    uint64_t v10 = &v56[4 * v55];
    *(_DWORD *)long long v57 = 32;
    long long v50 = v57 + 4;
    while (v41 != v51)
    {
      int v58 = *((_DWORD *)v41 - 1);
      v41 -= 4;
      *((_DWORD *)v57 - 1) = v58;
      v57 -= 4;
    }
    unsigned int v114 = v57;
    long long v115 = v50;
    unsigned int v116 = v10;
    if (v51)
    {
      operator delete(v51);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *(_DWORD *)long long v41 = 32;
    long long v50 = v41 + 4;
  }
  long long v115 = v50;
  if (v50 >= v10)
  {
    char v60 = (char *)v114;
    uint64_t v61 = (v50 - (unsigned char *)v114) >> 2;
    unint64_t v62 = v61 + 1;
    if ((unint64_t)(v61 + 1) >> 62) {
      abort();
    }
    uint64_t v63 = v10 - (unsigned char *)v114;
    if (v63 >> 1 > v62) {
      unint64_t v62 = v63 >> 1;
    }
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v64 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v64 = v62;
    }
    if (v64)
    {
      long long v65 = (char *)sub_1002C44F0((uint64_t)&v116, v64);
      char v60 = (char *)v114;
      long long v50 = v115;
    }
    else
    {
      long long v65 = 0;
    }
    uint64_t v66 = &v65[4 * v61];
    uint64_t v10 = &v65[4 * v64];
    *(_DWORD *)uint64_t v66 = 64;
    char v59 = v66 + 4;
    while (v50 != v60)
    {
      int v67 = *((_DWORD *)v50 - 1);
      v50 -= 4;
      *((_DWORD *)v66 - 1) = v67;
      v66 -= 4;
    }
    unsigned int v114 = v66;
    long long v115 = v59;
    unsigned int v116 = v10;
    if (v60)
    {
      operator delete(v60);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *(_DWORD *)long long v50 = 64;
    char v59 = v50 + 4;
  }
  long long v115 = v59;
  if (v59 >= v10)
  {
    long long v69 = (char *)v114;
    uint64_t v70 = (v59 - (unsigned char *)v114) >> 2;
    unint64_t v71 = v70 + 1;
    if ((unint64_t)(v70 + 1) >> 62) {
      abort();
    }
    uint64_t v72 = v10 - (unsigned char *)v114;
    if (v72 >> 1 > v71) {
      unint64_t v71 = v72 >> 1;
    }
    if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v73 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v73 = v71;
    }
    if (v73)
    {
      id v74 = (char *)sub_1002C44F0((uint64_t)&v116, v73);
      long long v69 = (char *)v114;
      char v59 = v115;
    }
    else
    {
      id v74 = 0;
    }
    int v75 = &v74[4 * v70];
    uint64_t v10 = &v74[4 * v73];
    *(_DWORD *)int v75 = 128;
    uint64_t v68 = v75 + 4;
    while (v59 != v69)
    {
      int v76 = *((_DWORD *)v59 - 1);
      v59 -= 4;
      *((_DWORD *)v75 - 1) = v76;
      v75 -= 4;
    }
    unsigned int v114 = v75;
    long long v115 = v68;
    unsigned int v116 = v10;
    if (v69)
    {
      operator delete(v69);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *(_DWORD *)char v59 = 128;
    uint64_t v68 = v59 + 4;
  }
  long long v115 = v68;
  if (v68 >= v10)
  {
    uint64_t v78 = (char *)v114;
    uint64_t v79 = (v68 - (unsigned char *)v114) >> 2;
    unint64_t v80 = v79 + 1;
    if ((unint64_t)(v79 + 1) >> 62) {
      abort();
    }
    uint64_t v81 = v10 - (unsigned char *)v114;
    if (v81 >> 1 > v80) {
      unint64_t v80 = v81 >> 1;
    }
    if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v82 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v82 = v80;
    }
    if (v82)
    {
      uint64_t v83 = (char *)sub_1002C44F0((uint64_t)&v116, v82);
      uint64_t v78 = (char *)v114;
      uint64_t v68 = v115;
    }
    else
    {
      uint64_t v83 = 0;
    }
    uint64_t v84 = &v83[4 * v79];
    uint64_t v10 = &v83[4 * v82];
    *(_DWORD *)uint64_t v84 = 256;
    char v77 = v84 + 4;
    while (v68 != v78)
    {
      int v85 = *((_DWORD *)v68 - 1);
      v68 -= 4;
      *((_DWORD *)v84 - 1) = v85;
      v84 -= 4;
    }
    unsigned int v114 = v84;
    long long v115 = v77;
    unsigned int v116 = v10;
    if (v78)
    {
      operator delete(v78);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v68 = 256;
    char v77 = v68 + 4;
  }
  long long v115 = v77;
  if (v77 >= v10)
  {
    id v87 = (char *)v114;
    uint64_t v88 = (v77 - (unsigned char *)v114) >> 2;
    unint64_t v89 = v88 + 1;
    if ((unint64_t)(v88 + 1) >> 62) {
      abort();
    }
    uint64_t v90 = v10 - (unsigned char *)v114;
    if (v90 >> 1 > v89) {
      unint64_t v89 = v90 >> 1;
    }
    if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v91 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v91 = v89;
    }
    if (v91)
    {
      id v92 = (char *)sub_1002C44F0((uint64_t)&v116, v91);
      id v87 = (char *)v114;
      char v77 = v115;
    }
    else
    {
      id v92 = 0;
    }
    uint64_t v93 = &v92[4 * v88];
    uint64_t v10 = &v92[4 * v91];
    *(_DWORD *)uint64_t v93 = 512;
    id v86 = v93 + 4;
    while (v77 != v87)
    {
      int v94 = *((_DWORD *)v77 - 1);
      v77 -= 4;
      *((_DWORD *)v93 - 1) = v94;
      v93 -= 4;
    }
    unsigned int v114 = v93;
    long long v115 = v86;
    unsigned int v116 = v10;
    if (v87)
    {
      operator delete(v87);
      uint64_t v10 = v116;
    }
  }
  else
  {
    *(_DWORD *)char v77 = 512;
    id v86 = v77 + 4;
  }
  long long v115 = v86;
  if (v86 >= v10)
  {
    unsigned int v96 = (char *)v114;
    uint64_t v97 = (v86 - (unsigned char *)v114) >> 2;
    unint64_t v98 = v97 + 1;
    if ((unint64_t)(v97 + 1) >> 62) {
      abort();
    }
    uint64_t v99 = v10 - (unsigned char *)v114;
    if (v99 >> 1 > v98) {
      unint64_t v98 = v99 >> 1;
    }
    if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v100 = v98;
    }
    if (v100)
    {
      unsigned int v101 = (char *)sub_1002C44F0((uint64_t)&v116, v100);
      unsigned int v96 = (char *)v114;
      id v86 = v115;
    }
    else
    {
      unsigned int v101 = 0;
    }
    uint64_t v102 = &v101[4 * v97];
    uint64_t v103 = &v101[4 * v100];
    *(_DWORD *)uint64_t v102 = 1024;
    int v95 = v102 + 4;
    while (v86 != v96)
    {
      int v104 = *((_DWORD *)v86 - 1);
      v86 -= 4;
      *((_DWORD *)v102 - 1) = v104;
      v102 -= 4;
    }
    unsigned int v114 = v102;
    long long v115 = v95;
    unsigned int v116 = v103;
    if (v96) {
      operator delete(v96);
    }
  }
  else
  {
    *(_DWORD *)id v86 = 1024;
    int v95 = v86 + 4;
  }
  long long v115 = v95;
  __int16 v105 = v120;
  uint64_t v112 = off_1009AB248;
  int v113 = v120;
  if (v120)
  {
    sub_100037354((uint64_t)v120);
    int v95 = v115;
  }
  uint64_t v109 = 0;
  long long __dst = 0;
  uint64_t v111 = 0;
  uint64_t v106 = v114;
  int64_t v107 = v95 - (unsigned char *)v114;
  if (v107)
  {
    sub_1002EA03C(&v109, v107 >> 2);
    uint64_t v108 = (char *)__dst;
    __int16 v105 = (atomic_uint *)memmove(__dst, v106, v107);
    long long __dst = &v108[4 * (v107 >> 2)];
  }
  sub_1003BB3E0((uint64_t)v105, a2, (uint64_t)&v112, (int **)&v109);
  if (v109)
  {
    long long __dst = v109;
    operator delete(v109);
  }
  uint64_t v112 = off_1009AB248;
  if (v113) {
    sub_1000368F4(v113);
  }
  if (v114)
  {
    long long v115 = (char *)v114;
    operator delete(v114);
  }
  long long v119 = off_1009AB248;
  if (v120) {
    sub_1000368F4(v120);
  }
}

void sub_1003BB314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,atomic_uint *a21)
{
  if (a21) {
    sub_1000368F4(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003BB3C0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1003BB3B8);
}

void sub_1003BB3D8()
{
}

void sub_1003BB3E0(uint64_t a1, uint64_t a2, uint64_t a3, int **a4)
{
  int v20 = *(_DWORD *)(a2 + 128);
  __int16 v21 = *(_WORD *)(a2 + 132);
  CFTypeRef cf = 0;
  int v4 = *a4;
  unsigned int v5 = a4[1];
  if (*a4 != v5)
  {
    do
    {
      int v7 = *v4;
      int v19 = 64;
      memset(v27, 0, sizeof(v27));
      sub_1004A82EC((unsigned __int8 *)&v20, __p);
      if (SBYTE3(v24) >= 0) {
        unint64_t v9 = __p;
      }
      else {
        unint64_t v9 = *(const char **)__p;
      }
      int v10 = sub_1003114E4(v7, v9, (char *)v27, &v19, (const __CFDictionary **)&cf, v8);
      if (SBYTE3(v24) < 0) {
        operator delete(*(void **)__p);
      }
      int v11 = v19;
      if (v10) {
        BOOL v12 = 1;
      }
      else {
        BOOL v12 = v19 == 0;
      }
      if (!v12)
      {
        int v13 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEBUG))
        {
          sub_1004A82EC((unsigned __int8 *)&v20, v16);
          BOOL v15 = v16;
          if (v17 < 0) {
            BOOL v15 = (void **)v16[0];
          }
          *(_DWORD *)long long __p = 136446978;
          *(void *)&__p[4] = v15;
          *(_WORD *)&unsigned char __p[12] = 1024;
          *(_DWORD *)&__p[14] = v7;
          __int16 v23 = 2080;
          uint64_t v24 = v27;
          __int16 v25 = 1024;
          int v26 = v19;
          _os_log_debug_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEBUG, "readKeyForDevice(%{public}s) aType:%d data:%s len:%d", __p, 0x22u);
          if (v17 < 0) {
            operator delete(v16[0]);
          }
          int v11 = v19;
        }
        uint64_t v14 = *(void *)(a3 + 8);
        sub_1000335D8(__p, v27, v11 + 1);
        sub_1003BB660(v14, v7, (uint64_t)__p);
        *(void *)long long __p = &off_100998428;
        if (*(void *)&__p[8]) {
          sub_1000368F4(*(atomic_uint **)&__p[8]);
        }
      }
      ++v4;
    }
    while (v4 != v5);
    if (cf) {
      CFRelease(cf);
    }
  }
}

void sub_1003BB608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, atomic_uint *a18, int a19, __int16 a20,char a21,char a22)
{
  if (a18) {
    sub_1000368F4(a18);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BB660(uint64_t a1, int a2, uint64_t a3)
{
  int v6 = a2;
  int v7 = &v6;
  int v4 = sub_1003BF088((uint64_t **)(a1 + 16), &v6, (uint64_t)&unk_1007BE9D0, &v7);
  return sub_100049EE0((uint64_t)(v4 + 5), a3);
}

void sub_1003BB6BC(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = sub_10003156C(a1 + 8, a2);
  if (a1 + 16 == v5) {
    operator new();
  }
  *a3 = off_1009AB248;
  uint64_t v6 = *(void *)(v5 + 64);
  a3[1] = v6;
  if (v6)
  {
    sub_100037354(v6);
  }
}

void sub_1003BB850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, atomic_uint *a10)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003BB86C(void *a1)
{
  *a1 = off_1009AB248;
  uint64_t v2 = (atomic_uint *)a1[1];
  if (v2) {
    sub_1000368F4(v2);
  }
  return a1;
}

void sub_1003BB8B8(uint64_t a1)
{
  if (IsAppleInternalBuild())
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2 != (void *)(a1 + 16))
    {
      do
      {
        uint64_t v3 = v2[8];
        *(void *)int v22 = off_1009AB248;
        __int16 v23 = (atomic_uint *)v3;
        if (v3) {
          sub_100037354(v3);
        }
        int v4 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v5 = v2 + 4;
          if (*((char *)v2 + 55) < 0) {
            uint64_t v5 = (void *)*v5;
          }
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v5;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:    %s", (uint8_t *)&buf, 0xCu);
          int v4 = qword_100A19EB8;
        }
        uint64_t v6 = v23;
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v23, 1, &buf);
          uint64_t v7 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v7;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Pincode:\t       %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 2, &buf);
          uint64_t v8 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v8;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Link key:       %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 4, &buf);
          uint64_t v9 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v9;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Link key type:  %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 8, &buf);
          uint64_t v10 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v10;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Local address:  %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 16, &buf);
          uint64_t v11 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v11;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Magic IRK:      %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 32, &buf);
          uint64_t v12 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v12;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Magic Enc:      %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 64, &buf);
          uint64_t v13 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v13;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Magic Acc:      %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 128, &buf);
          uint64_t v14 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v14;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Magic Hint:     %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 256, &buf);
          uint64_t v15 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v15;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Magic Ratchet:   %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 512, &buf);
          uint64_t v16 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v16;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Guest IRK:      %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          int v4 = qword_100A19EB8;
          uint64_t v6 = v23;
        }
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          sub_1003BC0D4((uint64_t)v6, 1024, &buf);
          uint64_t v17 = sub_10004A6E4((uint64_t)&buf);
          *(_DWORD *)__int16 v25 = 136315138;
          uint64_t v26 = v17;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "statedump:       Guest Enc:      %s", v25, 0xCu);
          *(void *)&long long buf = &off_100998428;
          if (*((void *)&buf + 1)) {
            sub_1000368F4(*((atomic_uint **)&buf + 1));
          }
          uint64_t v6 = v23;
        }
        *(void *)int v22 = off_1009AB248;
        if (v6) {
          sub_1000368F4(v6);
        }
        uint64_t v18 = (void *)v2[1];
        if (v18)
        {
          do
          {
            int v19 = v18;
            uint64_t v18 = (void *)*v18;
          }
          while (v18);
        }
        else
        {
          do
          {
            int v19 = (void *)v2[2];
            BOOL v20 = *v19 == (void)v2;
            uint64_t v2 = v19;
          }
          while (!v20);
        }
        uint64_t v2 = v19;
      }
      while (v19 != (void *)(a1 + 16));
    }
  }
  else
  {
    __int16 v21 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "statedump:    Not authorized to view security keys.", v22, 2u);
    }
  }
}

void sub_1003BC02C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, atomic_uint *a12, uint64_t a13, atomic_uint *a14)
{
  if (a14) {
    sub_1000368F4(a14);
  }
  if (a12) {
    sub_1000368F4(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003BC0CC()
{
}

void sub_1003BC0D4(uint64_t a1@<X0>, int a2@<W1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 24);
  uint64_t v3 = a1 + 24;
  uint64_t v4 = v5;
  if (!v5) {
    goto LABEL_11;
  }
  uint64_t v6 = v3;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < a2;
    if (v7 >= a2) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != v3 && *(_DWORD *)(v6 + 32) <= a2)
  {
    uint64_t v10 = *(void *)(v6 + 48);
    *a3 = &off_100998428;
    a3[1] = v10;
    if (v10) {
      sub_100037354(v10);
    }
  }
  else
  {
LABEL_11:
    *a3 = &off_100998428;
    a3[1] = 0;
  }
}

uint64_t sub_1003BC158(uint64_t a1, uint64_t a2, char *a3)
{
  int v12 = *(_DWORD *)(a2 + 128);
  __int16 v13 = *(_WORD *)(a2 + 132);
  uint64_t v5 = a1 + 8;
  sub_1004A82EC((unsigned __int8 *)&v12, &__p);
  uint64_t v6 = sub_10003156C(v5, (const void **)&__p);
  if (v11 < 0) {
    operator delete(__p);
  }
  if (a1 + 16 == v6) {
    return 155;
  }
  long long __p = 0;
  uint64_t v10 = 0;
  sub_1003BC0D4(*(void *)(v6 + 64), 1, &__p);
  if (sub_100013DCC((uint64_t)&__p))
  {
    long long __p = &off_100998428;
    if (v10) {
      sub_1000368F4(v10);
    }
    return 155;
  }
  BOOL v8 = (char *)sub_10004A6E4((uint64_t)&__p);
  sub_1006162A4(a3, v8);
  long long __p = &off_100998428;
  if (v10) {
    sub_1000368F4(v10);
  }
  return 0;
}

void sub_1003BC270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, atomic_uint *a10, int a11, __int16 a12, char a13, char a14)
{
  if (a10) {
    sub_1000368F4(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BC2C4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v24 = *(_DWORD *)(a2 + 128);
  __int16 v25 = *(_WORD *)(a2 + 132);
  int v22 = 0;
  __int16 v23 = 0;
  sub_1004A82EC((unsigned __int8 *)&v24, __p);
  sub_1003BB6BC(a1, (const void **)__p, &v22);
  if (v21 < 0) {
    operator delete(__p[0]);
  }
  sub_1004A82EC((unsigned __int8 *)&v24, __dst);
  int v5 = SBYTE7(v27);
  uint64_t v6 = (char *)__dst[0];
  sub_100616338(a3, buf);
  if (v5 >= 0) {
    int v7 = (char *)__dst;
  }
  else {
    int v7 = v6;
  }
  if ((v32 & 0x80u) == 0) {
    BOOL v8 = buf;
  }
  else {
    BOOL v8 = *(uint8_t **)buf;
  }
  int v9 = sub_1003104B0(1, v7, (const char *)v8, 0);
  if ((char)v32 < 0) {
    operator delete(*(void **)buf);
  }
  if (SBYTE7(v27) < 0)
  {
    operator delete(__dst[0]);
    if (v9) {
      goto LABEL_25;
    }
  }
  else if (v9)
  {
    goto LABEL_25;
  }
  sub_100616338(a3, __dst);
  if ((SBYTE7(v27) & 0x80u) == 0) {
    unint64_t v10 = BYTE7(v27);
  }
  else {
    unint64_t v10 = (unint64_t)__dst[1];
  }
  if (SBYTE7(v27) < 0) {
    operator delete(__dst[0]);
  }
  if (v10 <= 0x40)
  {
    long long v28 = 0u;
    long long v29 = 0u;
    *(_OWORD *)long long __dst = 0u;
    long long v27 = 0u;
    char v11 = buf;
    sub_100616338(a3, buf);
    if ((v32 & 0x80u) != 0) {
      char v11 = *(uint8_t **)buf;
    }
    sub_100616338(a3, &v17);
    if ((char)v19 < 0)
    {
      memcpy(__dst, v11, __n);
      operator delete(v17);
    }
    else
    {
      memcpy(__dst, v11, v19);
    }
    if ((char)v32 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v15 = v23;
    sub_100616338(a3, buf);
    uint64_t v16 = v32;
    if ((v32 & 0x80u) != 0) {
      uint64_t v16 = v31;
    }
    sub_1000335D8(&v17, __dst, v16 + 1);
    sub_1003BB660((uint64_t)v15, 1, (uint64_t)&v17);
    uint64_t v17 = &off_100998428;
    if (__n) {
      sub_1000368F4((atomic_uint *)__n);
    }
    if ((char)v32 < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v13 = 0;
    goto LABEL_28;
  }
LABEL_25:
  int v12 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
  {
    sub_100616338(a3, __dst);
    sub_10075CD60((uint64_t)__dst, buf, v12);
  }
  uint64_t v13 = 159;
LABEL_28:
  int v22 = off_1009AB248;
  if (v23) {
    sub_1000368F4(v23);
  }
  return v13;
}

void sub_1003BC584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, atomic_uint *a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a11) {
    sub_1000368F4(a11);
  }
  if (*(char *)(v27 - 41) < 0) {
    operator delete(*(void **)(v27 - 64));
  }
  if (a20) {
    sub_1000368F4(a20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BC668()
{
  return 2;
}

uint64_t sub_1003BC670()
{
  return 2;
}

uint64_t sub_1003BC678(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v47 = *(_DWORD *)(a3 + 128);
  __int16 v48 = *(_WORD *)(a3 + 132);
  long long v55 = 0uLL;
  sub_1004A82EC((unsigned __int8 *)&v47, __p);
  uint64_t v8 = sub_10003156C(a1 + 8, (const void **)__p);
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
  if (a1 + 16 == v8) {
    return 150;
  }
  uint64_t v43 = 0;
  unint64_t v44 = 0;
  sub_1003BC0D4(*(void *)(v8 + 64), 2, &v43);
  if (sub_100013DCC((uint64_t)&v43))
  {
    int v9 = 2;
    goto LABEL_48;
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v46 = 0;
  unint64_t v10 = (char *)sub_10004A6E4((uint64_t)&v43);
  sub_10004191C(__p, v10);
  if (v46 >= 0) {
    char v11 = __p;
  }
  else {
    char v11 = (void **)__p[0];
  }
  if (!sub_1003BCCF8((uint64_t)v11, (uint64_t)&v55, 16))
  {
    char v21 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
    {
      sub_100474E18(a3, &v49);
      int v28 = v50;
      unint64_t v29 = v49.n128_u64[0];
      uint64_t v30 = sub_10004A6E4((uint64_t)&v43);
      uint64_t v31 = &v49;
      if (v28 < 0) {
        uint64_t v31 = (__n128 *)v29;
      }
      *(_DWORD *)long long buf = 136446466;
      uint64_t v52 = v31;
      __int16 v53 = 2080;
      uint64_t v54 = v30;
      uint64_t v26 = "Failed to parse malformed link key for device %{public}s - data was %s";
      goto LABEL_34;
    }
LABEL_27:
    int v9 = 1;
    a4 = 151;
    goto LABEL_46;
  }
  sub_1003BC0D4(*(void *)(v8 + 64), 4, &v49);
  sub_100049EE0((uint64_t)&v43, (uint64_t)&v49);
  v49.n128_u64[0] = (unint64_t)&off_100998428;
  if (v49.n128_u64[1]) {
    sub_1000368F4((atomic_uint *)v49.n128_u64[1]);
  }
  if (!sub_100013DCC((uint64_t)&v43))
  {
    int v12 = (const char *)sub_10004A6E4((uint64_t)&v43);
    if (!strcmp(v12, "Combo"))
    {
      unsigned int v27 = 0;
    }
    else
    {
      uint64_t v13 = (const char *)sub_10004A6E4((uint64_t)&v43);
      if (!strcmp(v13, "Local"))
      {
        unsigned int v27 = 1;
      }
      else
      {
        uint64_t v14 = (const char *)sub_10004A6E4((uint64_t)&v43);
        if (!strcmp(v14, "Remote"))
        {
          unsigned int v27 = 2;
        }
        else
        {
          uint64_t v15 = (const char *)sub_10004A6E4((uint64_t)&v43);
          if (!strcmp(v15, "DebugCombo"))
          {
            unsigned int v27 = 3;
          }
          else
          {
            uint64_t v16 = (const char *)sub_10004A6E4((uint64_t)&v43);
            if (!strcmp(v16, "UnAuthenticated"))
            {
              unsigned int v27 = 4;
            }
            else
            {
              uint64_t v17 = (const char *)sub_10004A6E4((uint64_t)&v43);
              if (!strcmp(v17, "Authenticated"))
              {
                unsigned int v27 = 5;
              }
              else
              {
                uint64_t v18 = (const char *)sub_10004A6E4((uint64_t)&v43);
                if (!strcmp(v18, "ChangedCombo"))
                {
                  unsigned int v27 = 6;
                }
                else
                {
                  unsigned __int8 v19 = (const char *)sub_10004A6E4((uint64_t)&v43);
                  if (!strcmp(v19, "UnAuthComboP256"))
                  {
                    unsigned int v27 = 7;
                  }
                  else
                  {
                    BOOL v20 = (const char *)sub_10004A6E4((uint64_t)&v43);
                    if (strcmp(v20, "AuthComboP256"))
                    {
                      char v21 = qword_100A19EB8;
                      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
                      {
                        sub_100474E18(a3, &v49);
                        int v22 = v50;
                        unint64_t v23 = v49.n128_u64[0];
                        uint64_t v24 = sub_10004A6E4((uint64_t)&v43);
                        __int16 v25 = &v49;
                        if (v22 < 0) {
                          __int16 v25 = (__n128 *)v23;
                        }
                        *(_DWORD *)long long buf = 136446466;
                        uint64_t v52 = v25;
                        __int16 v53 = 2080;
                        uint64_t v54 = v24;
                        uint64_t v26 = "Invalid link key type for device %{public}s - %s";
LABEL_34:
                        _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v26, buf, 0x16u);
                        if (v50 < 0) {
                          operator delete((void *)v49.n128_u64[0]);
                        }
                        goto LABEL_27;
                      }
                      goto LABEL_27;
                    }
                    unsigned int v27 = 8;
                  }
                }
              }
            }
          }
        }
      }
    }
    sub_1003BC0D4(*(void *)(v8 + 64), 8, &v49);
    sub_100049EE0((uint64_t)&v43, (uint64_t)&v49);
    v49.n128_u64[0] = (unint64_t)&off_100998428;
    if (v49.n128_u64[1]) {
      sub_1000368F4((atomic_uint *)v49.n128_u64[1]);
    }
    if (!sub_100013DCC((uint64_t)&v43))
    {
      sub_1004A82EC(a2, &v49);
      int v33 = v50;
      unint64_t v34 = v49.n128_u64[0];
      unint64_t v35 = (const char *)sub_10004A6E4((uint64_t)&v43);
      if (v33 >= 0) {
        uint64_t v36 = &v49;
      }
      else {
        uint64_t v36 = (__n128 *)v34;
      }
      int v37 = strcmp((const char *)v36, v35);
      if (v50 < 0) {
        operator delete((void *)v49.n128_u64[0]);
      }
      if (v37)
      {
        long long v38 = qword_100A19EB8;
        if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
        {
          sub_1004A82EC(a2, &v49);
          int v39 = v50;
          unint64_t v40 = v49.n128_u64[0];
          uint64_t v41 = sub_10004A6E4((uint64_t)&v43);
          long long v42 = &v49;
          if (v39 < 0) {
            long long v42 = (__n128 *)v40;
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v52 = v42;
          __int16 v53 = 2080;
          uint64_t v54 = v41;
          _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "We have a link key for the wrong local device : %s != %s.", buf, 0x16u);
          if (v50 < 0) {
            operator delete((void *)v49.n128_u64[0]);
          }
        }
        int v9 = 1;
        a4 = 150;
      }
      else
      {
        sub_100600E5C((uint64_t)&v49, &v55, v27);
        sub_100600E48((__n128 *)a4, &v49);
        nullsub_95(&v49);
        a4 = 0;
        int v9 = 1;
      }
      goto LABEL_46;
    }
  }
  int v9 = 2;
LABEL_46:
  if (SHIBYTE(v46) < 0) {
    operator delete(__p[0]);
  }
LABEL_48:
  uint64_t v43 = &off_100998428;
  if (v44) {
    sub_1000368F4(v44);
  }
  if (v9 == 2) {
    return 150;
  }
  return a4;
}

void sub_1003BCBE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  if (a11) {
    sub_1000368F4(a11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003BCCF8(uint64_t a1, uint64_t a2, int a3)
{
  BOOL v3 = 0;
  if (a1 && a2)
  {
    uint64_t v4 = (unsigned __int8 *)(a1 - 1);
    do
      int v5 = *++v4;
    while (v5 == 32);
    if (a3 < 1)
    {
      return 1;
    }
    else
    {
      uint64_t v6 = 0;
      BOOL v3 = 0;
      do
      {
        int v7 = *v4;
        char v8 = v7 - 48;
        if ((v7 - 48) >= 0xA)
        {
          if ((v7 - 97) > 5)
          {
            if ((v7 - 65) > 5) {
              return v3;
            }
            char v8 = v7 - 55;
          }
          else
          {
            char v8 = v7 - 87;
          }
        }
        int v9 = v4[1];
        char v10 = v9 - 48;
        if ((v9 - 48) >= 0xA)
        {
          if ((v9 - 97) > 5)
          {
            if ((v9 - 65) > 5) {
              return v3;
            }
            char v10 = v9 - 55;
          }
          else
          {
            char v10 = v9 - 87;
          }
        }
        *(unsigned char *)(a2 + v6) = v10 + 16 * v8;
        int v11 = v4[2];
        v4 += 2;
        if (v11 == 45) {
          ++v4;
        }
        BOOL v3 = ++v6 >= (unint64_t)a3;
      }
      while (a3 != v6);
    }
  }
  return v3;
}

uint64_t sub_1003BCDC8(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char *a4, int a5)
{
  if (sub_100600EA0(a4))
  {
    char v10 = *(uint64_t (**)(uint64_t, unsigned __int8 *, uint64_t))(*(void *)a1 + 64);
    return v10(a1, a2, a3);
  }
  int v48 = *(_DWORD *)(a3 + 128);
  __int16 v49 = *(_WORD *)(a3 + 132);
  long long v52 = 0u;
  long long v53 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v51 = 0u;
  int v12 = (unsigned __int8 *)nullsub_95(a4);
  unsigned int v13 = sub_100600E8C((uint64_t)a4);
  if (v13 >= 9)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
      sub_10075CF04((uint64_t)a4);
    }
    uint64_t v14 = "Unknown";
  }
  else
  {
    uint64_t v14 = (&off_1009AB258)[v13];
  }
  uint64_t v46 = 0;
  int v47 = 0;
  sub_1004A82EC((unsigned __int8 *)&v48, __p);
  sub_1003BB6BC(a1, (const void **)__p, &v46);
  if (v45 < 0) {
    operator delete(__p[0]);
  }
  sub_1004A82EC((unsigned __int8 *)&v48, &v41);
  if (v43 >= 0) {
    uint64_t v15 = (char *)&v41;
  }
  else {
    uint64_t v15 = (char *)v41;
  }
  int v16 = sub_1003104B0(4, v15, v14, a5);
  int v17 = v16;
  if (v43 < 0)
  {
    operator delete(v41);
    if (v17)
    {
LABEL_17:
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a3, &v41);
        sub_10075CEA8();
      }
      goto LABEL_22;
    }
  }
  else if (v16)
  {
    goto LABEL_17;
  }
  uint64_t v18 = v47;
  size_t v19 = strlen(v14);
  sub_1000335D8(&v41, v14, v19 + 1);
  sub_1003BB660((uint64_t)v18, 4, (uint64_t)&v41);
  uint64_t v41 = &off_100998428;
  if (v42) {
    sub_1000368F4(v42);
  }
LABEL_22:
  snprintf(__str, 0x3FuLL, "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", *v12, v12[1], v12[2], v12[3], v12[4], v12[5], v12[6], v12[7], v12[8], v12[9], v12[10], v12[11], v12[12], v12[13], v12[14], v12[15]);
  HIBYTE(v53) = 0;
  sub_1004A82EC((unsigned __int8 *)&v48, &v38);
  if (v40 >= 0) {
    BOOL v20 = (char *)&v38;
  }
  else {
    BOOL v20 = (char *)v38;
  }
  int v21 = sub_1003104B0(2, v20, __str, a5);
  int v22 = v21;
  if (v40 < 0)
  {
    operator delete(v38);
    if (v22)
    {
LABEL_27:
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a3, &v38);
        sub_10075CE4C();
      }
      goto LABEL_32;
    }
  }
  else if (v21)
  {
    goto LABEL_27;
  }
  unint64_t v23 = v47;
  size_t v24 = strlen(__str);
  sub_1000335D8(&v38, __str, v24 + 1);
  sub_1003BB660((uint64_t)v23, 2, (uint64_t)&v38);
  long long v38 = &off_100998428;
  if (v39) {
    sub_1000368F4(v39);
  }
LABEL_32:
  sub_1004A82EC((unsigned __int8 *)&v48, v36);
  int v25 = (char)v37;
  uint64_t v26 = (char *)v36[0];
  sub_1004A82EC(a2, &v33);
  if (v25 >= 0) {
    unsigned int v27 = (char *)v36;
  }
  else {
    unsigned int v27 = v26;
  }
  if (v35 >= 0) {
    int v28 = (const char *)&v33;
  }
  else {
    int v28 = (const char *)v33;
  }
  uint64_t v29 = sub_1003104B0(8, v27, v28, a5);
  if (v35 < 0) {
    operator delete(v33);
  }
  if (((char)v37 & 0x80000000) == 0)
  {
    if (v29) {
      goto LABEL_42;
    }
LABEL_45:
    long long v52 = 0u;
    long long v53 = 0u;
    *(_OWORD *)std::string __str = 0u;
    long long v51 = 0u;
    sub_1004A82EC(a2, v36);
    if ((v37 & 0x80u) == 0) {
      uint64_t v30 = v36;
    }
    else {
      uint64_t v30 = (void **)v36[0];
    }
    strlcpy(__str, (const char *)v30, 0x40uLL);
    if ((char)v37 < 0) {
      operator delete(v36[0]);
    }
    uint64_t v31 = v47;
    sub_1004A82EC(a2, v36);
    unint64_t v32 = v37;
    if ((v37 & 0x80u) != 0) {
      unint64_t v32 = (unint64_t)v36[1];
    }
    sub_1000335D8(&v33, __str, v32 + 1);
    sub_1003BB660((uint64_t)v31, 8, (uint64_t)&v33);
    int v33 = &off_100998428;
    if (v34) {
      sub_1000368F4(v34);
    }
    if ((char)v37 < 0) {
      operator delete(v36[0]);
    }
    goto LABEL_56;
  }
  operator delete(v36[0]);
  if (!v29) {
    goto LABEL_45;
  }
LABEL_42:
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR)) {
    sub_10075CDD8();
  }
LABEL_56:
  uint64_t v46 = off_1009AB248;
  if (v47) {
    sub_1000368F4(v47);
  }
  return v29;
}

void sub_1003BD338(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,atomic_uint *a56)
{
  if (a56) {
    sub_1000368F4(a56);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003BD49C(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  int v21 = *(_DWORD *)(a2 + 128);
  __int16 v22 = *(_WORD *)(a2 + 132);
  int v7 = (uint64_t **)(a1 + 8);
  sub_1004A82EC((unsigned __int8 *)&v21, __p);
  char v8 = (uint64_t *)sub_10003156C((uint64_t)v7, (const void **)__p);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  if ((uint64_t *)(a1 + 16) != v8)
  {
    for (; a3; --a3)
    {
      uint64_t v9 = v8[8];
      int v10 = *a4++;
      LODWORD(__p[0]) = v10;
      sub_1003BF3C8(v9 + 16, (int *)__p);
    }
    int v11 = (void *)v8[8];
    uint64_t v12 = v11[4];
    if (v12 != 1)
    {
      if (v12) {
        return;
      }
      unsigned int v13 = (void *)v11[3];
      goto LABEL_9;
    }
    unsigned int v13 = (void *)v11[3];
    if (v13)
    {
      uint64_t v14 = (int *)(v11 + 3);
      uint64_t v15 = v11[3];
      do
      {
        int v16 = *(_DWORD *)(v15 + 32);
        BOOL v17 = v16 < 8;
        if (v16 >= 8) {
          uint64_t v18 = (uint64_t *)v15;
        }
        else {
          uint64_t v18 = (uint64_t *)(v15 + 8);
        }
        if (!v17) {
          uint64_t v14 = (int *)v15;
        }
        uint64_t v15 = *v18;
      }
      while (*v18);
      if (v14 != (int *)(v11 + 3) && v14[8] <= 8)
      {
LABEL_9:
        sub_1003BEED0((uint64_t)(v11 + 2), v13);
        v11[3] = 0;
        void v11[2] = v11 + 3;
        void v11[4] = 0;
        sub_10004D3B8(v7, v8);
        sub_1003BEFAC((uint64_t)(v8 + 4));
        operator delete(v8);
      }
    }
  }
}

void sub_1003BD5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BD600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v8 = *(_DWORD *)(a3 + 128);
  __int16 v9 = *(_WORD *)(a3 + 132);
  uint64_t v10 = 0x400000002;
  sub_1003BD49C(a1, a3, 2, (int *)&v10);
  sub_1004A82EC((unsigned __int8 *)&v8, __p);
  if (v7 >= 0) {
    BOOL v3 = (char *)__p;
  }
  else {
    BOOL v3 = (char *)__p[0];
  }
  uint64_t v4 = sub_100311764(v3, 6u);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1003BD6BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BD6E0(uint64_t a1, uint64_t a2)
{
  int v2 = *(_DWORD *)(a2 + 128);
  __int16 v10 = *(_WORD *)(a2 + 132);
  int v8 = 1;
  int v9 = v2;
  sub_1003BD49C(a1, a2, 1, &v8);
  sub_1004A82EC((unsigned __int8 *)&v9, __p);
  if (v7 >= 0) {
    BOOL v3 = (char *)__p;
  }
  else {
    BOOL v3 = (char *)__p[0];
  }
  uint64_t v4 = sub_100311764(v3, 1u);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_1003BD764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BD780(uint64_t a1, uint64_t a2)
{
  return _sandbox_extension_consume(a2);
}

uint64_t sub_1003BD788(uint64_t a1, uint64_t a2)
{
  return _sandbox_extension_release(a2);
}

uint64_t sub_1003BD790(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4)
{
  int v23 = *(_DWORD *)(a2 + 128);
  __int16 v24 = *(_WORD *)(a2 + 132);
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v26 = 0u;
  int v21 = 0;
  __int16 v22 = 0;
  sub_1004A82EC((unsigned __int8 *)&v23, __p);
  sub_1003BB6BC(a1, (const void **)__p, &v21);
  if (v20 < 0) {
    operator delete(__p[0]);
  }
  snprintf(__str, 0x3FuLL, "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", *a4, a4[1], a4[2], a4[3], a4[4], a4[5], a4[6], a4[7], a4[8], a4[9], a4[10], a4[11], a4[12], a4[13], a4[14], a4[15]);
  HIBYTE(v28) = 0;
  if (a3)
  {
    uint64_t v7 = 0;
    if (a3 != 1) {
      goto LABEL_23;
    }
    sub_1004A82EC((unsigned __int8 *)&v23, &v16);
    if (v18 >= 0) {
      int v8 = (char *)&v16;
    }
    else {
      int v8 = (char *)v16;
    }
    uint64_t v9 = sub_1003104B0(1024, v8, __str, 1);
  }
  else
  {
    sub_1004A82EC((unsigned __int8 *)&v23, &v16);
    if (v18 >= 0) {
      __int16 v10 = (char *)&v16;
    }
    else {
      __int16 v10 = (char *)v16;
    }
    uint64_t v9 = sub_1003104B0(512, v10, __str, 1);
  }
  uint64_t v7 = v9;
  if (v18 < 0)
  {
    operator delete(v16);
    if (v7) {
      goto LABEL_23;
    }
  }
  else if (v9)
  {
    goto LABEL_23;
  }
  if (a3 == 1)
  {
    unsigned int v13 = v22;
    size_t v14 = strlen(__str);
    sub_1000335D8(&v16, __str, v14 + 1);
    sub_1003BB660((uint64_t)v13, 1024, (uint64_t)&v16);
  }
  else
  {
    int v11 = v22;
    size_t v12 = strlen(__str);
    sub_1000335D8(&v16, __str, v12 + 1);
    sub_1003BB660((uint64_t)v11, 512, (uint64_t)&v16);
  }
  int v16 = &off_100998428;
  if (v17) {
    sub_1000368F4(v17);
  }
  uint64_t v7 = 0;
LABEL_23:
  int v21 = off_1009AB248;
  if (v22) {
    sub_1000368F4(v22);
  }
  return v7;
}

void sub_1003BDA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,atomic_uint *a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,atomic_uint *a39)
{
  if (a27) {
    sub_1000368F4(a27);
  }
  if (a39) {
    sub_1000368F4(a39);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BDAD8(uint64_t a1, uint64_t a2, int a3)
{
  int v16 = *(_DWORD *)(a2 + 128);
  __int16 v17 = *(_WORD *)(a2 + 132);
  sub_1004A82EC((unsigned __int8 *)&v16, &__p);
  uint64_t v6 = sub_10003156C(a1 + 8, (const void **)&__p);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  if (a1 + 16 == v6) {
    return 150;
  }
  size_t v14 = 0;
  uint64_t v15 = 0;
  sub_1003BC0D4(*(void *)(v6 + 64), dword_1007BD260[a3], &v14);
  if (sub_100013DCC((uint64_t)&v14))
  {
    uint64_t v7 = qword_100A19EB8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO)) {
      goto LABEL_21;
    }
    sub_100474E18(a2, buf);
    int v8 = v19 >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(__p) = 67109634;
    HIDWORD(__p) = a3;
    __int16 v21 = 2080;
    __int16 v22 = v8;
    __int16 v23 = 1024;
    int v24 = 150;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "Wireless Splitter call to retrieve key chain key data of type %d for device %s failed with result %d", (uint8_t *)&__p, 0x18u);
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_21;
    }
    uint64_t v9 = *(void **)buf;
    goto LABEL_20;
  }
  sub_10004A6E4((uint64_t)&v14);
  if (sub_100045F00((uint64_t)&v14))
  {
    uint64_t v10 = 0;
    goto LABEL_22;
  }
  int v11 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    size_t v12 = v24 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Wireless Splitter key was empty for device %s", buf, 0xCu);
    if (SHIBYTE(v24) < 0)
    {
      uint64_t v9 = __p;
LABEL_20:
      operator delete(v9);
    }
  }
LABEL_21:
  uint64_t v10 = 150;
LABEL_22:
  size_t v14 = &off_100998428;
  if (v15) {
    sub_1000368F4(v15);
  }
  return v10;
}

void sub_1003BDD20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a11) {
    sub_1000368F4(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BDD80(uint64_t a1, uint64_t a2)
{
  int v7 = *(_DWORD *)(a2 + 128);
  __int16 v8 = *(_WORD *)(a2 + 132);
  uint64_t v9 = 0x40000000200;
  sub_1003BD49C(a1, a2, 2, (int *)&v9);
  sub_1004A82EC((unsigned __int8 *)&v7, __p);
  if (v6 >= 0) {
    int v2 = (char *)__p;
  }
  else {
    int v2 = (char *)__p[0];
  }
  uint64_t v3 = sub_100311764(v2, 0x600u);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1003BDE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BDE5C(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  int v38 = *(_DWORD *)(a2 + 128);
  __int16 v39 = *(_WORD *)(a2 + 132);
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v45 = 0u;
  long long v46 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v44 = 0u;
  if (a3 > 4) {
    return 3;
  }
  uint64_t v36 = 0;
  unsigned __int8 v37 = 0;
  sub_1004A82EC((unsigned __int8 *)&v38, __p);
  sub_1003BB6BC(a1, (const void **)__p, &v36);
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  int v9 = *a4;
  int v10 = a4[1];
  int v11 = a4[2];
  int v12 = a4[4];
  if (a3 != 4)
  {
    snprintf(__str, 0x3FuLL, "%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X-%02X", v9, v10, v11, a4[3], v12, a4[5], a4[6], a4[7], a4[8], a4[9], a4[10], a4[11], a4[12], a4[13], a4[14], a4[15]);
    HIBYTE(v46) = 0;
    switch(a3)
    {
      case 0u:
        sub_1004A82EC((unsigned __int8 *)&v38, buf);
        if (v42 >= 0) {
          __int16 v17 = buf;
        }
        else {
          __int16 v17 = *(char **)buf;
        }
        uint64_t v14 = sub_1003104B0(64, v17, __str, 0);
        goto LABEL_10;
      case 1u:
        sub_1004A82EC((unsigned __int8 *)&v38, buf);
        if (v42 >= 0) {
          char v20 = buf;
        }
        else {
          char v20 = *(char **)buf;
        }
        uint64_t v14 = sub_1003104B0(128, v20, __str, 0);
        goto LABEL_10;
      case 2u:
        sub_1004A82EC((unsigned __int8 *)&v38, buf);
        if (v42 >= 0) {
          __int16 v21 = buf;
        }
        else {
          __int16 v21 = *(char **)buf;
        }
        uint64_t v14 = sub_1003104B0(16, v21, __str, 0);
        goto LABEL_10;
      case 3u:
        sub_1004A82EC((unsigned __int8 *)&v38, buf);
        if (v42 >= 0) {
          __int16 v22 = buf;
        }
        else {
          __int16 v22 = *(char **)buf;
        }
        uint64_t v14 = sub_1003104B0(32, v22, __str, 0);
        goto LABEL_10;
      default:
        goto LABEL_44;
    }
  }
  snprintf(__str, 0x14uLL, "%02X-%02X-%02X-%02X-%02x", v9, v10, v11, a4[3], v12);
  BYTE4(v44) = 0;
  sub_1004A82EC((unsigned __int8 *)&v38, buf);
  if (v42 >= 0) {
    unsigned int v13 = buf;
  }
  else {
    unsigned int v13 = *(char **)buf;
  }
  uint64_t v14 = sub_1003104B0(256, v13, __str, 0);
LABEL_10:
  uint64_t v4 = v14;
  if (SHIBYTE(v42) < 0)
  {
    operator delete(*(void **)buf);
    if (v4) {
      goto LABEL_12;
    }
LABEL_24:
    switch(a3)
    {
      case 0u:
        char v18 = v37;
        size_t v19 = strlen(__str);
        sub_1000335D8(buf, __str, v19 + 1);
        sub_1003BB660((uint64_t)v18, 64, (uint64_t)buf);
        goto LABEL_42;
      case 1u:
        long long v29 = v37;
        size_t v30 = strlen(__str);
        sub_1000335D8(buf, __str, v30 + 1);
        sub_1003BB660((uint64_t)v29, 128, (uint64_t)buf);
        goto LABEL_42;
      case 2u:
        __int16 v23 = v37;
        size_t v24 = strlen(__str);
        sub_1000335D8(buf, __str, v24 + 1);
        sub_1003BB660((uint64_t)v23, 16, (uint64_t)buf);
        goto LABEL_42;
      case 3u:
        int v25 = v37;
        size_t v26 = strlen(__str);
        sub_1000335D8(buf, __str, v26 + 1);
        sub_1003BB660((uint64_t)v25, 32, (uint64_t)buf);
        goto LABEL_42;
      case 4u:
        long long v27 = v37;
        size_t v28 = strlen(__str);
        sub_1000335D8(buf, __str, v28 + 1);
        sub_1003BB660((uint64_t)v27, 256, (uint64_t)buf);
LABEL_42:
        *(void *)long long buf = &off_100998428;
        if (*(void *)&buf[8]) {
          sub_1000368F4(*(atomic_uint **)&buf[8]);
        }
        break;
      default:
        break;
    }
LABEL_44:
    uint64_t v4 = 0;
    goto LABEL_45;
  }
  if (!v14) {
    goto LABEL_24;
  }
LABEL_12:
  uint64_t v15 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
  {
    sub_100474E18(a2, v32);
    int v16 = v33 >= 0 ? v32 : (void **)v32[0];
    *(_DWORD *)long long buf = 136446722;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v4;
    __int16 v41 = 1024;
    signed int v42 = a3;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to write magicKey data for device %{public}s to keychain with result %d for keyType %d", buf, 0x18u);
    if (v33 < 0) {
      operator delete(v32[0]);
    }
  }
LABEL_45:
  uint64_t v36 = off_1009AB248;
  if (v37) {
    sub_1000368F4(v37);
  }
  return v4;
}

void sub_1003BE340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,atomic_uint *a36,uint64_t a37,void *__p,atomic_uint *a39,int a40,__int16 a41,char a42,char a43)
{
  if (a39) {
    sub_1000368F4(a39);
  }
  if (a36) {
    sub_1000368F4(a36);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BE44C(uint64_t a1, uint64_t a2, unsigned int a3, void *a4)
{
  int v21 = *(_DWORD *)(a2 + 128);
  __int16 v22 = *(_WORD *)(a2 + 132);
  __src[0] = 0;
  __src[1] = 0;
  if (a3 > 4) {
    return 3;
  }
  sub_1004A82EC((unsigned __int8 *)&v21, &__p);
  uint64_t v9 = sub_10003156C(a1 + 8, (const void **)&__p);
  if (SHIBYTE(v29) < 0) {
    operator delete(__p);
  }
  if (a1 + 16 == v9) {
    return 150;
  }
  size_t v19 = 0;
  char v20 = 0;
  sub_1003BC0D4(*(void *)(v9 + 64), dword_1007BD268[a3], &v19);
  if (sub_100013DCC((uint64_t)&v19))
  {
    int v10 = qword_100A19EB8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_INFO)) {
      goto LABEL_27;
    }
    sub_100474E18(a2, buf);
    int v11 = v24 >= 0 ? buf : *(uint8_t **)buf;
    LODWORD(__p) = 67109634;
    HIDWORD(__p) = a3;
    __int16 v26 = 2082;
    long long v27 = v11;
    __int16 v28 = 1024;
    int v29 = 150;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "Call to retrieve key chain magic key data of type %d for device %{public}s failed with result %d", (uint8_t *)&__p, 0x18u);
    if ((v24 & 0x80000000) == 0) {
      goto LABEL_27;
    }
    int v12 = *(void **)buf;
    goto LABEL_26;
  }
  uint64_t v13 = sub_10004A6E4((uint64_t)&v19);
  if (sub_100045F00((uint64_t)&v19))
  {
    if (a3 == 4) {
      size_t v14 = 5;
    }
    else {
      size_t v14 = 16;
    }
    if (sub_1003BCCF8(v13, (uint64_t)__src, v14))
    {
      memcpy(a4, __src, v14);
      uint64_t v4 = 0;
    }
    else
    {
      char v18 = qword_100A19EB8;
      if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_ERROR))
      {
        sub_100474E18(a2, &__p);
        sub_10075CF7C((char *)&__p, v13, buf, v18);
      }
      uint64_t v4 = 151;
    }
    goto LABEL_28;
  }
  uint64_t v15 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    sub_100474E18(a2, &__p);
    int v16 = v29 >= 0 ? &__p : (void **)__p;
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "magic key was empty for device %{public}s", buf, 0xCu);
    if (SHIBYTE(v29) < 0)
    {
      int v12 = __p;
LABEL_26:
      operator delete(v12);
    }
  }
LABEL_27:
  uint64_t v4 = 150;
LABEL_28:
  size_t v19 = &off_100998428;
  if (v20) {
    sub_1000368F4(v20);
  }
  return v4;
}

void sub_1003BE730(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, atomic_uint *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a11) {
    sub_1000368F4(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003BE794(uint64_t a1, uint64_t a2)
{
  int v7 = *(_DWORD *)(a2 + 128);
  __int16 v8 = *(_WORD *)(a2 + 132);
  sub_1003BD49C(a1, a2, 5, dword_1007BD268);
  sub_1004A82EC((unsigned __int8 *)&v7, __p);
  if (v6 >= 0) {
    int v2 = (char *)__p;
  }
  else {
    int v2 = (char *)__p[0];
  }
  uint64_t v3 = sub_100311764(v2, 0x1F0u);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_1003BE818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

double sub_1003BE834(uint64_t a1, _OWORD *a2, _OWORD *a3)
{
  unsigned int v9 = 0;
  long long v14 = 0u;
  long long v15 = 0u;
  int v5 = sub_100313364(4, (UInt8 *)&v14, 32, &v9);
  char v6 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    int v11 = v5;
    __int16 v12 = 1024;
    unsigned int v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "readCloudMasterKeys res = %d, %d", buf, 0xEu);
  }
  if (!v5 && v9 >= 0x20)
  {
    double result = *(double *)&v14;
    long long v8 = v15;
    *a2 = v14;
    *a3 = v8;
  }
  return result;
}

uint64_t sub_1003BE93C(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  unsigned int v10 = 0;
  long long v15 = 0uLL;
  __int16 v9 = 0;
  int v8 = 0;
  uint64_t v5 = 1;
  if (!sub_100313364(8, (UInt8 *)&v15, 16, &v10) && v10 >= 0x10)
  {
    uint64_t v5 = sub_100313364(9, (UInt8 *)&v8, 6, &v10);
    char v6 = qword_100A19EB8;
    if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      int v12 = v5;
      __int16 v13 = 1024;
      unsigned int v14 = v10;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "readCloudMasterKeys res = %d, %d", buf, 0xEu);
    }
    *a2 = v15;
    *(_WORD *)(a3 + 4) = v9;
    *(_DWORD *)a3 = v8;
  }
  return v5;
}

BOOL sub_1003BEA68(uint64_t a1, _OWORD *a2, long long *a3)
{
  unsigned int v7 = 32;
  memset(v8, 0, sizeof(v8));
  long long v4 = *a3;
  v9[0] = *a2;
  v9[1] = v4;
  if (!sub_100313364(4, (UInt8 *)v8, 32, &v7)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 168))(a1);
  }
  int v5 = sub_100313540(4u, (const UInt8 *)v9, v7);
  if (v5 && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
    sub_10075D000();
  }
  return v5 != 0;
}

BOOL sub_1003BEB64(uint64_t a1, UInt8 *a2, const UInt8 *a3)
{
  unsigned int v8 = 16;
  if (!sub_100313364(8, a2, 16, &v8)) {
    (*(void (**)(uint64_t))(*(void *)a1 + 176))(a1);
  }
  if (sub_100313540(8u, a2, 0x10u) && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
    sub_10075D0D0();
  }
  int v6 = sub_100313540(9u, a3, 6u);
  if (v6 && os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_FAULT)) {
    sub_10075D068();
  }
  return v6 != 0;
}

uint64_t sub_1003BEC68()
{
  uint64_t v0 = sub_1003137A0(4);
  uint64_t v1 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    v3[0] = 67109120;
    v3[1] = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "deleteCloudMasterKeys result %d", (uint8_t *)v3, 8u);
  }
  return v0;
}

uint64_t sub_1003BED18()
{
  int v0 = sub_1003137A0(9);
  uint64_t v1 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 67109120;
    int v6 = v0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "deleteCloudFCIRKAddress address result %d", (uint8_t *)&v5, 8u);
  }
  uint64_t v2 = sub_1003137A0(8);
  uint64_t v3 = qword_100A19EB8;
  if (os_log_type_enabled((os_log_t)qword_100A19EB8, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 67109120;
    int v6 = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "deleteCloudFCIRKAddress IRK result %d", (uint8_t *)&v5, 8u);
  }
  return v2;
}

uint64_t sub_1003BEE20(uint64_t a1)
{
  *(void *)a1 = &off_1009AB208;
  sub_1003BEED0(a1 + 16, *(void **)(a1 + 24));
  return a1;
}

void sub_1003BEE68(uint64_t a1)
{
  *(void *)a1 = &off_1009AB208;
  sub_1003BEED0(a1 + 16, *(void **)(a1 + 24));

  operator delete();
}

void sub_1003BEED0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1003BEED0(a1, *a2);
    sub_1003BEED0(a1, a2[1]);
    a2[5] = &off_100998428;
    long long v4 = (atomic_uint *)a2[6];
    if (v4) {
      sub_1000368F4(v4);
    }
    operator delete(a2);
  }
}

void sub_1003BEF50(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1003BEF50(a1, *a2);
    sub_1003BEF50(a1, a2[1]);
    sub_1003BEFAC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1003BEFAC(uint64_t a1)
{
  *(void *)(a1 + 24) = off_1009AB248;
  uint64_t v2 = *(atomic_uint **)(a1 + 32);
  if (v2) {
    sub_1000368F4(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_1003BF020(id a1)
{
}

void sub_1003BF064()
{
}

uint64_t **sub_1003BF088(uint64_t **a1, int *a2, uint64_t a3, _DWORD **a4)
{
  unsigned int v7 = a1 + 1;
  int v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        __int16 v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        int v6 = *v9;
        unsigned int v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        unsigned int v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    __int16 v9 = a1 + 1;
LABEL_10:
    int v11 = operator new(0x38uLL);
    v11[8] = **a4;
    *((void *)v11 + 5) = &off_100998428;
    *((void *)v11 + 6) = 0;
    sub_100036CA0(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

void sub_1003BF168(void *a1)
{
  *a1 = off_1009AB248;
  uint64_t v1 = (atomic_uint *)a1[1];
  if (v1) {
    sub_1000368F4(v1);
  }

  operator delete();
}

uint64_t *sub_1003BF1D4(uint64_t **a1, const void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  int v6 = (uint64_t **)sub_1000314CC((uint64_t)a1, &v11, a2);
  unsigned int v7 = *v6;
  if (!*v6)
  {
    int v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1003BF28C((uint64_t)a1, a4, v10);
    sub_100036CA0(a1, v11, v8, v10[0]);
    unsigned int v7 = v10[0];
    v10[0] = 0;
    sub_1003BF370((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_1003BF28C@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  int v6 = operator new(0x48uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  double result = sub_1003BF300(v6 + 4, *a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1003BF2E8(_Unwind_Exception *a1)
{
  sub_1003BF370(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_1003BF300(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10003B098(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v3 = *a2;
    _DWORD __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v3;
  }
  __dst[3] = off_1009AB248;
  __dst[4] = 0;
  return __dst;
}

void sub_1003BF370(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1003BEFAC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_1003BF3C8(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (!v2) {
    return 0;
  }
  int v3 = *a2;
  uint64_t v4 = a1 + 8;
  do
  {
    int v5 = *(_DWORD *)(v2 + 32);
    BOOL v6 = v5 < v3;
    if (v5 >= v3) {
      unsigned int v7 = (uint64_t *)v2;
    }
    else {
      unsigned int v7 = (uint64_t *)(v2 + 8);
    }
    if (!v6) {
      uint64_t v4 = v2;
    }
    uint64_t v2 = *v7;
  }
  while (*v7);
  if (v4 == a1 + 8 || v3 < *(_DWORD *)(v4 + 32)) {
    return 0;
  }
  sub_1003BF430((uint64_t **)a1, (uint64_t *)v4);
  return 1;
}

uint64_t *sub_1003BF430(uint64_t **a1, uint64_t *a2)
{
  int v3 = sub_10004D3B8(a1, a2);
  a2[5] = (uint64_t)&off_100998428;
  uint64_t v4 = (atomic_uint *)a2[6];
  if (v4) {
    sub_1000368F4(v4);
  }
  operator delete(a2);
  return v3;
}

void sub_1003BF490(void *a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_error_impl(a1, v9, OS_LOG_TYPE_ERROR, a4, &a9, 8u);
}

void sub_1003BF4B4(uint64_t a1)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  int v4 = *(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a1 + 12) != v4)
  {
    *(_DWORD *)(a1 + 12) = v4;
LABEL_17:
    os_unfair_lock_unlock((os_unfair_lock_t)a1);
    return;
  }
  if (!*(unsigned char *)(a1 + 4))
  {
    if (*(void *)(a1 + 16)) {
      sub_100007674(a1);
    }
    goto LABEL_17;
  }
  if (*(void *)(a1 + 56) && !*(_DWORD *)(a1 + 24))
  {
    int v5 = (void *)(a1 + 32);
    BOOL v6 = (void *)(a1 + 32);
    if (*(char *)(a1 + 55) < 0) {
      BOOL v6 = (void *)*v5;
    }
    unsigned int v7 = +[NSString stringWithUTF8String:v6];
    int v8 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 55) < 0) {
        int v5 = (void *)*v5;
      }
      *(_DWORD *)long long buf = 138412546;
      *(void *)&uint8_t buf[4] = v7;
      __int16 v37 = 2082;
      int v38 = v5;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Watchdog dispatch scheduled: %@ (%{public}s)", buf, 0x16u);
    }
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003BFA94;
    block[3] = &unk_100998A38;
    id v34 = v7;
    uint64_t v35 = a1;
    id v9 = v7;
    dispatch_block_t v10 = dispatch_block_create_with_qos_class(DISPATCH_BLOCK_ENFORCE_QOS_CLASS, QOS_CLASS_USER_INITIATED, 0, block);
    dispatch_async(*(dispatch_queue_t *)(a1 + 56), v10);
  }
  ++*(_DWORD *)(a1 + 24);
  uint64_t v11 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 664))(v11)) {
    WriteStackshotReport_stdc();
  }
  if (*(_DWORD *)(a1 + 24) == 3)
  {
    uint64_t v12 = sub_100017768();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v12 + 672))(v12) & 1) == 0)
    {
      uint64_t v14 = sub_100017768();
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v14 + 8))(v14))
      {
        while (1)
        {
          sub_1003BFB58(a1);
          __break(1u);
LABEL_31:
          int v15 = *(char *)(a1 + 55);
          if (v15 >= 0) {
            int v16 = (unsigned __int8 *)(a1 + 32);
          }
          else {
            int v16 = *(unsigned __int8 **)(a1 + 32);
          }
          if (v15 >= 0) {
            int64_t v17 = *(unsigned __int8 *)(a1 + 55);
          }
          else {
            int64_t v17 = *(void *)(a1 + 40);
          }
          while (1)
          {
            if (*((char *)v2 + 55) < 0)
            {
              size_t v19 = v2[4];
              char v18 = v2[5];
            }
            else
            {
              char v18 = (char *)*((unsigned __int8 *)v2 + 55);
              size_t v19 = (char *)(v2 + 4);
            }
            if (!v17) {
              break;
            }
            if ((uint64_t)v18 >= v17)
            {
              __int16 v23 = &v18[(void)v19];
              int v24 = *v16;
              int v25 = v19;
              while (1)
              {
                __int16 v26 = &v18[-v17];
                if (v26 == (char *)-1) {
                  goto LABEL_42;
                }
                long long v27 = (char *)memchr(v25, v24, (size_t)(v26 + 1));
                if (!v27) {
                  goto LABEL_42;
                }
                __int16 v28 = v27;
                if (!memcmp(v27, v16, v17)) {
                  break;
                }
                int v25 = v28 + 1;
                char v18 = (char *)(v23 - (v28 + 1));
                if ((uint64_t)v18 < v17) {
                  goto LABEL_42;
                }
              }
              if (v28 != v23 && v28 - v19 != -1) {
                break;
              }
            }
LABEL_42:
            char v20 = v2[1];
            if (v20)
            {
              do
              {
                int v21 = (char **)v20;
                char v20 = *(char **)v20;
              }
              while (v20);
            }
            else
            {
              do
              {
                int v21 = (char **)v2[2];
                BOOL v22 = *v21 == (char *)v2;
                uint64_t v2 = v21;
              }
              while (!v22);
            }
            uint64_t v2 = v21;
            if (v21 == v1) {
              goto LABEL_28;
            }
          }
          int v29 = qword_100A19EC8;
          if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v16;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "Targetted WatchDog Stall signature found, filing ABC Snapshot for %s", buf, 0xCu);
          }
          if (qword_1009FB088 != -1) {
            dispatch_once(&qword_1009FB088, &stru_1009AB2A0);
          }
          uint64_t v30 = qword_1009FB080;
          sub_10004191C(buf, "Watchdog");
          sub_1004B7DA8(60.0, v30, (uint64_t *)buf, (uint64_t *)v2 + 4);
          if (v39 < 0) {
            operator delete(*(void **)buf);
          }
LABEL_28:
          sub_10004BA28((uint64_t)&v31, v32[0]);
        }
      }
    }
    long long v31 = 0;
    v32[0] = 0;
    v32[1] = 0;
    sub_10004191C(buf, "com.apple.UserEventAgent");
    sub_10004191C(v40, "com.apple.cloudpaird");
    sub_10004191C(v41, "com.apple.nearbyd");
    sub_10004191C(v42, "com.apple.bluetooth.coreBluetooth");
    sub_1003B9544((uint64_t)&v31, (const void **)buf, 4);
    for (uint64_t i = 0; i != -12; i -= 3)
    {
      if (SHIBYTE(v42[i + 2]) < 0) {
        operator delete((void *)v42[i]);
      }
    }
    uint64_t v2 = v31;
    uint64_t v1 = v32;
    if (v31 != v32) {
      goto LABEL_31;
    }
    goto LABEL_28;
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

void sub_1003BFA04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, char *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_10004BA28((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_1003BFA94(uint64_t a1)
{
  uint64_t v2 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = *(void *)(a1 + 40);
    int v5 = (void *)(v4 + 32);
    if (*(char *)(v4 + 55) < 0) {
      int v5 = (void *)*v5;
    }
    int v6 = 138412546;
    uint64_t v7 = v3;
    __int16 v8 = 2082;
    id v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Watchdog dispatch performed: %@ (%{public}s)", (uint8_t *)&v6, 0x16u);
  }
}

void sub_1003BFB58(uint64_t a1)
{
  WriteStackshotReport_stdc();
  sub_10025B8C0();
  uint64_t v2 = (const char **)(a1 + 32);
  uint64_t v3 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v3 = *v2;
  }
  long long v14 = 0u;
  long long v15 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v10 = 0u;
  long long v11 = 0u;
  *(_OWORD *)std::string __str = 0u;
  long long v9 = 0u;
  snprintf(__str, 0x80uLL, "XPC watchdog timeout on thread: %s", v3);
  qword_1009FC078 = (uint64_t)__str;
  uint64_t v4 = _os_log_pack_size();
  __chkstk_darwin(v4, v5);
  __error();
  uint64_t v6 = _os_log_pack_fill();
  if (*(char *)(a1 + 55) < 0) {
    uint64_t v2 = (const char **)*v2;
  }
  *(_DWORD *)uint64_t v6 = 136446210;
  *(void *)(v6 + 4) = v2;
  os_log_create("com.apple.bluetooth", "CBCrash");
  qword_1009FC078 = os_log_pack_send_and_compose();
  uint64_t v7 = (void *)abort_with_payload();
  sub_1003BFCBC(v7);
}

void sub_1003BFCBC(id a1)
{
}

xpc_object_t sub_1003BFD00(uint64_t **a1)
{
  xpc_object_t v14 = xpc_array_create(0, 0);
  for (uint64_t i = *a1; i != a1[1]; ++i)
  {
    uint64_t v2 = *i;
    xpc_object_t xdict = sub_1003BFFE0(*i);
    xpc_dictionary_set_int64(xdict, "kCBMsgArgAttributeID", *(unsigned __int16 *)(v2 + 16));
    xpc_object_t v3 = xpc_array_create(0, 0);
    xpc_object_t v4 = xpc_array_create(0, 0);
    BOOL v22 = 0;
    __int16 v23 = 0;
    uint64_t v24 = 0;
    sub_100040550(&v22, v2 + 104);
    for (SCNetworkInterfaceRef j = (uint64_t *)v22; j != v23; ++j)
    {
      xpc_object_t v6 = sub_1003C00F0(*j);
      xpc_dictionary_set_int64(v6, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*j + 104));
      xpc_array_append_value(v3, v6);
      xpc_release(v6);
    }
    size_t v19 = 0;
    char v20 = 0;
    uint64_t v21 = 0;
    sub_100040550(&v19, v2 + 136);
    for (k = (uint64_t *)v19; k != v20; ++k)
    {
      xpc_object_t v8 = xpc_array_create(0, 0);
      xpc_object_t v9 = sub_1003C01E8(*k);
      xpc_dictionary_set_int64(v9, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*k + 16));
      long long __p = 0;
      int64_t v17 = 0;
      uint64_t v18 = 0;
      sub_100040550(&__p, *k + 104);
      for (m = (uint64_t *)__p; m != v17; ++m)
      {
        xpc_object_t v11 = sub_1003C0348(*m);
        xpc_dictionary_set_int64(v11, "kCBMsgArgAttributeID", *(unsigned __int16 *)(*m + 16));
        xpc_array_append_value(v8, v11);
        xpc_release(v11);
      }
      xpc_dictionary_set_value(v9, "kCBMsgArgDescriptors", v8);
      xpc_array_append_value(v4, v9);
      xpc_release(v9);
      xpc_release(v8);
      if (__p)
      {
        int64_t v17 = (uint64_t *)__p;
        operator delete(__p);
      }
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgCharacteristics", v4);
    xpc_dictionary_set_value(xdict, "kCBMsgArgIncludedServices", v3);
    xpc_array_append_value(v14, xdict);
    xpc_release(v3);
    xpc_release(v4);
    xpc_release(xdict);
    if (v19)
    {
      char v20 = (uint64_t *)v19;
      operator delete(v19);
    }
    if (v22)
    {
      __int16 v23 = (uint64_t *)v22;
      operator delete(v22);
    }
  }
  return v14;
}

void sub_1003BFF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

xpc_object_t sub_1003BFFE0(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  bytes[0] = 0;
  bytes[1] = 0;
  __n128 v7 = *(__n128 *)(a1 + 72);
  int v8 = *(_DWORD *)(a1 + 88);
  sub_100035F98(&v5, &v7);
  size_t v3 = sub_10071D240((unsigned __int8 *)&v5, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_BOOL(v2, "kCBMsgArgType", *(unsigned char *)(a1 + 96));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceStartHandle", **(unsigned __int16 **)(a1 + 8));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceEndHandle", *(unsigned __int16 *)(a1 + 48));
  return v2;
}

xpc_object_t sub_1003C00F0(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  bytes[0] = 0;
  bytes[1] = 0;
  __n128 v7 = *(__n128 *)(a1 + 76);
  int v8 = *(_DWORD *)(a1 + 92);
  sub_100035F98(&v5, &v7);
  size_t v3 = sub_10071D240((unsigned __int8 *)&v5, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 104));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceStartHandle", *(unsigned __int16 *)(a1 + 72));
  xpc_dictionary_set_int64(v2, "kCBMsgArgServiceEndHandle", *(unsigned __int16 *)(a1 + 74));
  return v2;
}

xpc_object_t sub_1003C01E8(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  bytes[0] = 0;
  bytes[1] = 0;
  __n128 v10 = *(__n128 *)(a1 + 76);
  int v11 = *(_DWORD *)(a1 + 92);
  sub_100035F98(&v8, &v10);
  size_t v3 = sub_10071D240((unsigned __int8 *)&v8, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v3);
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicHandle", **(unsigned __int16 **)(a1 + 8));
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicValueHandle", *(unsigned __int16 *)(a1 + 74));
  xpc_dictionary_set_int64(v2, "kCBMsgArgCharacteristicProperties", *(unsigned __int8 *)(a1 + 72));
  uint64_t v4 = *(void *)(a1 + 96);
  if (v4)
  {
    __n128 v5 = (const void *)sub_10004A6E4(v4 + 72);
    size_t v6 = sub_100045F00(v4 + 72);
    xpc_dictionary_set_data(v2, "kCBMsgArgData", v5, v6);
    xpc_dictionary_set_int64(v2, "kCBMsgArgAttributePermissions", *(unsigned __int8 *)(*(void *)(v4 + 8) + 26));
  }
  return v2;
}

xpc_object_t sub_1003C0348(uint64_t a1)
{
  xpc_object_t v2 = xpc_dictionary_create(0, 0, 0);
  bytes[0] = 0;
  bytes[1] = 0;
  __n128 v12 = 0uLL;
  int v13 = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  int v4 = *(_DWORD *)(v3 + 20);
  *(_OWORD *)long long __p = *(_OWORD *)(v3 + 4);
  int v10 = v4;
  sub_100035F98(&v12, (__n128 *)__p);
  unsigned int v5 = sub_10071D240((unsigned __int8 *)&v12, bytes);
  xpc_dictionary_set_int64(v2, "kCBMsgArgAttributeID", *(unsigned int *)(a1 + 16));
  xpc_dictionary_set_data(v2, "kCBMsgArgUUID", bytes, v5);
  xpc_dictionary_set_int64(v2, "kCBMsgArgDescriptorHandle", **(unsigned __int16 **)(a1 + 8));
  if (*(unsigned char *)(a1 + 20))
  {
    sub_10071D144((uint64_t)__p, 10496);
    if (sub_10022A44C((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
    {
      xpc_dictionary_set_int64(v2, "kCBMsgArgData", *(unsigned __int16 *)(a1 + 72));
    }
    else
    {
      sub_10071D144((uint64_t)__p, 10497);
      if (sub_10022A44C((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
      {
        sub_1003C05B8(a1, __p);
        if (v11 >= 0) {
          size_t v6 = __p;
        }
        else {
          size_t v6 = (void **)__p[0];
        }
        xpc_dictionary_set_string(v2, "kCBMsgArgData", (const char *)v6);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
      }
      else
      {
        sub_10071D144((uint64_t)__p, 10498);
        if (sub_10022A44C((unsigned __int8 *)&v12, (unsigned __int8 *)__p)
          || (sub_10071D144((uint64_t)v8, 10499), sub_10022A44C((unsigned __int8 *)&v12, v8)))
        {
          xpc_dictionary_set_int64(v2, "kCBMsgArgData", *(unsigned __int16 *)(a1 + 72));
        }
        else
        {
          sub_10071D144((uint64_t)__p, 10500);
          if (sub_10022A44C((unsigned __int8 *)&v12, (unsigned __int8 *)__p))
          {
            LODWORD(__p[0]) = *(_DWORD *)(a1 + 72);
            BYTE4(__p[0]) = *(unsigned char *)(a1 + 76);
            *(_WORD *)((char *)__p + 5) = *(_WORD *)(a1 + 78);
            xpc_dictionary_set_data(v2, "kCBMsgArgData", __p, 7uLL);
          }
          else
          {
            xpc_dictionary_set_data(v2, "kCBMsgArgData", *(const void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
          }
        }
      }
    }
  }
  return v2;
}

void sub_1003C0594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003C05B8@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(_WORD *)(a1 + 80)) {
    return sub_1002E5698(a2, *(void **)(a1 + 72), *(unsigned __int16 *)(a1 + 80));
  }
  else {
    return sub_10004191C(a2, "");
  }
}

uint64_t sub_1003C05DC(uint64_t a1, int a2, void *a3)
{
  id v5 = a3;
  *(void *)a1 = off_1009AB2D0;
  *(_DWORD *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = v5;
  return a1;
}

uint64_t sub_1003C062C(uint64_t a1)
{
  return a1;
}

xpc_object_t sub_1003C0660(id *a1, int a2, uint64_t a3)
{
  xpc_object_t v6 = xpc_dictionary_create(0, 0, 0);
  (*((void (**)(id *, xpc_object_t, uint64_t))*a1 + 2))(a1, v6, a3);
  *(void *)uuid = 0;
  uint64_t v9 = 0;
  [a1[2] getUUIDBytes:uuid];
  xpc_dictionary_set_uuid(v6, "kCBMsgArgDeviceUUID", uuid);
  xpc_dictionary_set_int64(v6, "kCBMsgArgResult", a2);
  return v6;
}

void sub_1003C0744(uint64_t a1, void *a2, uint64_t **a3)
{
  if (a3[1] != *a3)
  {
    xpc_object_t v5 = xpc_array_create(0, 0);
    for (uint64_t i = *a3; i != a3[1]; ++i)
    {
      uint64_t v7 = *i;
      uint64_t v9 = *(unsigned __int8 **)(a1 + 24);
      __n128 v8 = *(unsigned __int8 **)(a1 + 32);
      if (v8 != v9)
      {
        __n128 v17 = *(__n128 *)(v7 + 72);
        int v18 = *(_DWORD *)(v7 + 88);
        sub_100035F98(&v16, &v17);
        while (!sub_10022A44C(v9, (unsigned __int8 *)&v16))
        {
          v9 += 20;
          if (v9 == v8)
          {
            uint64_t v9 = v8;
            break;
          }
        }
        if (v9 == *(unsigned __int8 **)(a1 + 32)) {
          continue;
        }
      }
      if (qword_1009F7F10 != -1) {
        dispatch_once(&qword_1009F7F10, &stru_1009AB400);
      }
      uint64_t v10 = qword_1009F7F08;
      __n128 v17 = *(__n128 *)(v7 + 72);
      int v18 = *(_DWORD *)(v7 + 88);
      sub_100035F98(&v16, &v17);
      int v11 = *(unsigned __int8 *)(a1 + 48);
      uint64_t v12 = *(unsigned int *)(a1 + 52);
      id v13 = *(id *)(a1 + 16);
      LOBYTE(v10) = sub_10063C2BC(v10, (unsigned __int8 *)&v16, v11, v12, v13);

      if (v10)
      {
        xpc_object_t v14 = sub_1003BFFE0(v7);
        xpc_array_set_value(v5, 0xFFFFFFFFFFFFFFFFLL, v14);
        xpc_release(v14);
      }
    }
    xpc_dictionary_set_value(a2, "kCBMsgArgServices", v5);
    xpc_release(v5);
  }
}

void sub_1003C0918(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C0930(uint64_t a1, xpc_object_t xdict, uint64_t **a3)
{
  xpc_object_t v3 = xdict;
  if (a3[1] != *a3)
  {
    xpc_object_t v6 = xpc_array_create(0, 0);
    for (uint64_t i = *a3; i != a3[1]; ++i)
    {
      uint64_t v8 = *i;
      uint64_t v10 = *(unsigned __int8 **)(a1 + 32);
      uint64_t v9 = *(unsigned __int8 **)(a1 + 40);
      if (v9 != v10)
      {
        __n128 v18 = *(__n128 *)(v8 + 76);
        int v19 = *(_DWORD *)(v8 + 92);
        sub_100035F98(&v17, &v18);
        while (!sub_10022A44C(v10, (unsigned __int8 *)&v17))
        {
          v10 += 20;
          if (v10 == v9)
          {
            uint64_t v10 = v9;
            break;
          }
        }
        if (v10 == *(unsigned __int8 **)(a1 + 40)) {
          continue;
        }
      }
      if (qword_1009F7F10 != -1) {
        dispatch_once(&qword_1009F7F10, &stru_1009AB400);
      }
      uint64_t v11 = qword_1009F7F08;
      __n128 v18 = *(__n128 *)(v8 + 76);
      int v19 = *(_DWORD *)(v8 + 92);
      sub_100035F98(&v17, &v18);
      int v12 = *(unsigned __int8 *)(a1 + 56);
      uint64_t v13 = *(unsigned int *)(a1 + 60);
      id v14 = *(id *)(a1 + 16);
      LOBYTE(v11) = sub_10063C2BC(v11, (unsigned __int8 *)&v17, v12, v13, v14);

      if (v11)
      {
        xpc_object_t v15 = sub_1003C00F0(v8);
        xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v15);
        xpc_release(v15);
      }
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgServices", v6);
    xpc_release(v6);
    xpc_object_t v3 = xdict;
  }
  xpc_dictionary_set_int64(v3, "kCBMsgArgServiceStartHandle", *(void *)(a1 + 24));
}

void sub_1003C0B20(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C0B38(int64_t *a1, xpc_object_t xdict, uint64_t **a3)
{
  if (a3[1] != *a3)
  {
    xpc_object_t v6 = xpc_array_create(0, 0);
    for (uint64_t i = *a3; i != a3[1]; ++i)
    {
      uint64_t v8 = *i;
      uint64_t v9 = (unsigned __int8 *)a1[4];
      uint64_t v10 = (unsigned __int8 *)a1[5];
      if (v10 == v9) {
        goto LABEL_10;
      }
      __n128 v13 = *(__n128 *)(v8 + 76);
      int v14 = *(_DWORD *)(v8 + 92);
      sub_100035F98(&v12, &v13);
      while (!sub_10022A44C(v9, (unsigned __int8 *)&v12))
      {
        v9 += 20;
        if (v9 == v10)
        {
          uint64_t v9 = v10;
          break;
        }
      }
      if (v9 != (unsigned __int8 *)a1[5])
      {
LABEL_10:
        xpc_object_t v11 = sub_1003C01E8(v8);
        xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v11);
        xpc_release(v11);
      }
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgCharacteristics", v6);
    xpc_release(v6);
  }
  xpc_dictionary_set_int64(xdict, "kCBMsgArgServiceStartHandle", a1[3]);
}

void sub_1003C0C8C(uint64_t a1, xpc_object_t xdict)
{
}

void sub_1003C0CA4(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    uint64_t v5 = **(void **)a3 + 72;
    xpc_object_t v6 = (const void *)sub_10004A6E4(v5);
    size_t v7 = sub_100045F00(v5);
    xpc_dictionary_set_data(xdict, "kCBMsgArgData", v6, v7);
  }
  int64_t v8 = *(void *)(a1 + 24);

  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", v8);
}

void sub_1003C0D30(uint64_t a1, xpc_object_t xdict)
{
  xpc_dictionary_set_int64(xdict, "kCBMsgArgState", *(unsigned __int8 *)(a1 + 32));
  int64_t v4 = *(void *)(a1 + 24);

  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", v4);
}

void sub_1003C0D88(uint64_t a1, xpc_object_t xdict, uint64_t **a3)
{
  if (a3[1] != *a3)
  {
    xpc_object_t v6 = xpc_array_create(0, 0);
    size_t v7 = *a3;
    while (v7 != a3[1])
    {
      uint64_t v8 = *v7++;
      xpc_object_t v9 = sub_1003C0348(v8);
      xpc_array_set_value(v6, 0xFFFFFFFFFFFFFFFFLL, v9);
      xpc_release(v9);
    }
    xpc_dictionary_set_value(xdict, "kCBMsgArgDescriptors", v6);
    xpc_release(v6);
  }
  int64_t v10 = *(void *)(a1 + 24);

  xpc_dictionary_set_int64(xdict, "kCBMsgArgCharacteristicHandle", v10);
}

void sub_1003C0E50(uint64_t a1, xpc_object_t xdict)
{
}

void sub_1003C0E68(uint64_t a1, xpc_object_t xdict, uint64_t a3)
{
  if (*(void *)(a3 + 8) != *(void *)a3)
  {
    xpc_object_t v5 = sub_1003C0348(**(void **)a3);
    xpc_object_t value = xpc_dictionary_get_value(v5, "kCBMsgArgData");
    xpc_dictionary_set_value(xdict, "kCBMsgArgData", value);
    xpc_release(v5);
  }
  int64_t v7 = *(void *)(a1 + 24);

  xpc_dictionary_set_int64(xdict, "kCBMsgArgDescriptorHandle", v7);
}

uint64_t sub_1003C0EF4(uint64_t a1)
{
  *(void *)a1 = off_1009AB2F8;
  xpc_object_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1003C0F4C(uint64_t a1)
{
  *(void *)a1 = off_1009AB2F8;
  xpc_object_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1003C0FC4(uint64_t a1)
{
  *(void *)a1 = off_1009AB320;
  xpc_object_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1003C101C(uint64_t a1)
{
  *(void *)a1 = off_1009AB320;
  xpc_object_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1003C1094(uint64_t a1)
{
  *(void *)a1 = off_1009AB348;
  xpc_object_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1003C10EC(uint64_t a1)
{
  *(void *)a1 = off_1009AB348;
  xpc_object_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }

  operator delete();
}

uint64_t sub_1003C1164(uint64_t a1)
{
  return a1;
}

void sub_1003C1190(uint64_t a1)
{
  operator delete();
}

uint64_t sub_1003C11DC(uint64_t a1)
{
  return a1;
}

void sub_1003C1208(uint64_t a1)
{
  operator delete();
}

uint64_t sub_1003C1254(uint64_t a1)
{
  return a1;
}

void sub_1003C1280(uint64_t a1)
{
  operator delete();
}

uint64_t sub_1003C12CC(uint64_t a1)
{
  return a1;
}

void sub_1003C12F8(uint64_t a1)
{
  operator delete();
}

void sub_1003C1344(id a1)
{
}

void sub_1003C1388()
{
}

void *sub_1003C13B0(void *a1, uint64_t a2)
{
  *sub_1004EEEA8(a1, a2) = &off_1009AB430;
  if (qword_100A125D8 != -1) {
    dispatch_once(&qword_100A125D8, &stru_1009AB450);
  }
  return a1;
}

void sub_1003C141C(id a1)
{
  xpc_object_t v3 = "kCBMsgIdSessionAttach";
  uint64_t v4 = 21;
  xpc_object_t v5 = &v3;
  uint64_t v1 = sub_1003C1E20((uint64_t)&xmmword_100A19AA8, (uint64_t)&v3, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v5);
  v1[4] = sub_1003C14D8;
  void v1[5] = 0;
  xpc_object_t v3 = "kCBMsgIdSessionDetach";
  uint64_t v4 = 21;
  xpc_object_t v5 = &v3;
  xpc_object_t v2 = sub_1003C1E20((uint64_t)&xmmword_100A19AA8, (uint64_t)&v3, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v5);
  v2[4] = sub_1003C1960;
  v2[5] = 0;
}

void sub_1003C14D8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_object_t v5 = sub_100019738(value, "kCBMsgArgName");
  memset(&v53, 0, sizeof(v53));
  xpc_object_t v6 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    char v59 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BTSessionMsgHandler::handleAttachMsg name:%@", buf, 0xCu);
  }
  xpc_connection_get_audit_token();
  audit_token_t token = v53;
  int64_t v7 = SecTaskCreateWithAuditToken(kCFAllocatorDefault, &token);
  uint64_t v8 = v7;
  if (v7)
  {
    CFStringRef v9 = SecTaskCopySigningIdentifier(v7, 0);
    CFStringRef v10 = v9;
    if (v9)
    {
      int v11 = CFEqual(v9, @"com.apple.dmd");
      BOOL v12 = v11 != 0;
      if (!v11)
      {
        __n128 v13 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
          sub_10075D1B0(v13, v14, v15, v16, v17, v18, v19, v20);
        }
      }
      CFRelease(v10);
    }
    else
    {
      uint64_t v21 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075D178(v21, v22, v23, v24, v25, v26, v27, v28);
      }
      BOOL v12 = 0;
    }
    CFRelease(v8);
  }
  else
  {
    BOOL v12 = 0;
  }
  bzero(buf, 0x400uLL);
  uint64_t v29 = *(void *)(a1 + 72);
  uint64_t v30 = (const char *)(v29 + 56);
  if (*(char *)(v29 + 79) < 0) {
    uint64_t v30 = *(const char **)v30;
  }
  id v31 = v5;
  snprintf((char *)buf, 0x400uLL, "%s-unique-id-%s", v30, (const char *)[v31 UTF8String]);
  uint64_t v51 = 0;
  int v32 = sub_100550F34((char *)buf);
  if (v32)
  {
    char v33 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
      sub_10075D140(v33, v34, v35, v36, v37, v38, v39, v40);
    }
    uint64_t v41 = 0;
  }
  else
  {
    uint64_t v41 = v51;
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009AB4A0);
    }
    uint64_t v42 = sub_100019C0C((void *)qword_1009F8160, v51);
    if (v42)
    {
      *(unsigned char *)(v42 + 136) = 1;
      sub_100551A80(v42, (unint64_t)off_1009FB3D8, *(void *)(a1 + 72));
      uint64_t v43 = *(void *)(a1 + 72);
      int v44 = *(_DWORD *)(v43 + 40);
      au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v43 + 16));
      if (qword_1009F8168 != -1) {
        dispatch_once(&qword_1009F8168, &stru_1009AB4A0);
      }
      sub_100553DAC(qword_1009F8160, v51, v44, asid);
      *(void *)(*(void *)(a1 + 72) + 152) = v41;
      if (v12)
      {
        long long v46 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v54 = 0;
          _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "Session has Managed Config Bundle ID", v54, 2u);
        }
        if (qword_1009F8168 != -1) {
          dispatch_once(&qword_1009F8168, &stru_1009AB4A0);
        }
        sub_100554290(qword_1009F8160, v51);
      }
      int v32 = 0;
    }
    else
    {
      sub_100550FEC(&v51);
      int v32 = 100;
    }
  }
  long long v47 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)uint64_t v54 = 134218240;
    uint64_t v55 = v41;
    __int16 v56 = 1024;
    int v57 = v32;
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "Sending the reply now sessionID:%llx result:%d", v54, 0x12u);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  long long v49 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgSessionID", v41);
    xpc_dictionary_set_uint64(v49, "kCBMsgArgResult", v32);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v49);
    xpc_release(v49);
  }
  long long v50 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "Done sending the reply now", v54, 2u);
  }
}

void sub_1003C1928(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C1960(uint64_t a1, void *a2)
{
  uint64_t v4 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 72);
    xpc_object_t v6 = (void *)(v5 + 56);
    if (*(char *)(v5 + 79) < 0) {
      xpc_object_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BTSessionMsgHandler::handleDetachMsg name:%s", buf, 0xCu);
  }
  *(void *)long long buf = 0;
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  if (!sub_1000198BC(value, 1, v8, v9, v10, v11, v12, v13, (uint64_t)"kCBMsgArgSessionID"))
  {
    if (*(void *)(*(void *)(a1 + 72) + 152)) {
      sub_1003C1A7C(a1);
    }
  }
}

void sub_1003C1A7C(uint64_t a1)
{
  xpc_object_t v2 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = (void *)(v3 + 56);
    if (*(char *)(v3 + 79) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)xpc_object_t v6 = 136315138;
    *(void *)&v6[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BTSessionMsgHandler::cleanupBTSession name:%s", v6, 0xCu);
  }
  unint64_t v5 = *(void *)(*(void *)(a1 + 72) + 152);
  *(void *)xpc_object_t v6 = v5;
  if (v5)
  {
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009AB4A0);
    }
    sub_1005543F8(qword_1009F8160, v5);
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009AB4A0);
    }
    sub_10055411C(qword_1009F8160, v5);
    sub_100550FEC((unint64_t *)v6);
  }
}

void sub_1003C1BBC(uint64_t a1)
{
  xpc_object_t v2 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = (void *)(v3 + 56);
    if (*(char *)(v3 + 79) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    int v5 = 136315138;
    xpc_object_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "BTSessionMsgHandler::handleDisconnection name:%s", (uint8_t *)&v5, 0xCu);
  }
  sub_1003C1A7C(a1);
}

BOOL sub_1003C1C7C(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v11 = string;
  size_t v12 = strlen(string);
  int v5 = sub_1003C2560(&xmmword_100A19AA8, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    xpc_object_t v6 = sub_1003C1E20((uint64_t)&xmmword_100A19AA8, (uint64_t)&v11, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v13);
    int64_t v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if (v8) {
      int64_t v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }
  return v5 != 0;
}

void *sub_1003C1D78(void *a1)
{
  *a1 = &off_1009AB480;
  sub_100052DA4(a1 + 1);
  return a1;
}

void sub_1003C1DBC(void *a1)
{
  *a1 = &off_1009AB480;
  sub_100052DA4(a1 + 1);

  operator delete();
}

void *sub_1003C1E20(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003C208C((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        uint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12) {
              break;
            }
          }
          uint64_t v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v14 = operator new(0x30uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_1000A9204(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)uint64_t v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }
  *(void *)uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1003C2078(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_1003C208C(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  if (a3 > 0x20)
  {
    if (a3 > 0x40)
    {
      uint64_t v4 = *(uint64_t *)((char *)a2 + a3 - 48);
      uint64_t v5 = *(uint64_t *)((char *)a2 + a3 - 40);
      uint64_t v6 = *(uint64_t *)((char *)a2 + a3 - 24);
      uint64_t v8 = *(uint64_t *)((char *)a2 + a3 - 64);
      uint64_t v7 = *(uint64_t *)((char *)a2 + a3 - 56);
      uint64_t v9 = *(uint64_t *)((char *)a2 + a3 - 16);
      uint64_t v10 = *(uint64_t *)((char *)a2 + a3 - 8);
      unint64_t v11 = v7 + v9;
      unint64_t v12 = 0x9DDFEA08EB382D69
          * (v6 ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))) >> 47) ^ (0x9DDFEA08EB382D69 * (v6 ^ (v4 + a3))));
      unint64_t v13 = 0x9DDFEA08EB382D69 * (v12 ^ (v12 >> 47));
      unint64_t v14 = v8 + a3 + v7 + v4;
      uint64_t v15 = v14 + v5;
      unint64_t v16 = __ROR8__(v14, 44) + v8 + a3 + __ROR8__(v5 + v8 + a3 - 0x622015F714C7D297 * (v12 ^ (v12 >> 47)), 21);
      uint64_t v17 = v7 + v9 + *(uint64_t *)((char *)a2 + a3 - 32) - 0x4B6D499041670D8DLL;
      uint64_t v18 = v17 + v6 + v9;
      uint64_t v19 = __ROR8__(v18, 44);
      uint64_t v20 = v18 + v10;
      uint64_t v21 = v19 + v17 + __ROR8__(v17 + v5 + v10, 21);
      uint64_t v23 = *a2;
      unint64_t v22 = a2 + 4;
      unint64_t v24 = v23 - 0x4B6D499041670D8DLL * v5;
      uint64_t v25 = -(uint64_t)((a3 - 1) & 0xFFFFFFFFFFFFFFC0);
      do
      {
        uint64_t v26 = *(v22 - 3);
        uint64_t v27 = v24 + v15 + v11 + v26;
        uint64_t v28 = v22[2];
        uint64_t v29 = v22[3];
        uint64_t v30 = v22[1];
        unint64_t v11 = v30 + v15 - 0x4B6D499041670D8DLL * __ROR8__(v11 + v16 + v28, 42);
        uint64_t v31 = v13 + v20;
        uint64_t v32 = *(v22 - 2);
        uint64_t v33 = *(v22 - 1);
        uint64_t v34 = *(v22 - 4) - 0x4B6D499041670D8DLL * v16;
        uint64_t v35 = v34 + v20 + v33;
        uint64_t v36 = v34 + v26 + v32;
        uint64_t v15 = v36 + v33;
        uint64_t v37 = __ROR8__(v36, 44) + v34;
        unint64_t v38 = (0xB492B66FBE98F273 * __ROR8__(v27, 37)) ^ v21;
        unint64_t v24 = 0xB492B66FBE98F273 * __ROR8__(v31, 33);
        unint64_t v16 = v37 + __ROR8__(v35 + v38, 21);
        unint64_t v39 = v24 + v21 + *v22;
        uint64_t v20 = v39 + v30 + v28 + v29;
        uint64_t v21 = __ROR8__(v39 + v30 + v28, 44) + v39 + __ROR8__(v11 + v32 + v39 + v29, 21);
        v22 += 8;
        unint64_t v13 = v38;
        v25 += 64;
      }
      while (v25);
      unint64_t v40 = v24
          - 0x622015F714C7D297
          * ((0x9DDFEA08EB382D69
            * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) ^ ((0x9DDFEA08EB382D69 * (v21 ^ ((0x9DDFEA08EB382D69 * (v21 ^ v16)) >> 47) ^ (0x9DDFEA08EB382D69 * (v21 ^ v16)))) >> 47));
      unint64_t v41 = 0x9DDFEA08EB382D69
          * (v40 ^ (v38
                  - 0x4B6D499041670D8DLL * (v11 ^ (v11 >> 47))
                  - 0x622015F714C7D297
                  * ((0x9DDFEA08EB382D69
                    * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) ^ ((0x9DDFEA08EB382D69 * (v20 ^ ((0x9DDFEA08EB382D69 * (v20 ^ v15)) >> 47) ^ (0x9DDFEA08EB382D69 * (v20 ^ v15)))) >> 47))));
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) ^ ((0x9DDFEA08EB382D69 * (v40 ^ (v41 >> 47) ^ v41)) >> 47));
    }
    else
    {
      return sub_1003C2438(a2, a3);
    }
  }
  else if (a3 > 0x10)
  {
    return sub_1003C238C(a2, a3);
  }
  else
  {
    return sub_1003C2294(a2, a3);
  }
}

unint64_t sub_1003C2294(_DWORD *a1, unint64_t a2)
{
  if (a2 < 9)
  {
    if (a2 < 4)
    {
      unint64_t result = 0x9AE16A3B2F90404FLL;
      if (a2)
      {
        unint64_t v8 = (0xC949D7C7509E6557 * (a2 + 4 * *((unsigned __int8 *)a1 + a2 - 1))) ^ (0x9AE16A3B2F90404FLL
                                                                                      * (*(unsigned __int8 *)a1 | ((unint64_t)*((unsigned __int8 *)a1 + (a2 >> 1)) << 8)));
        return 0x9AE16A3B2F90404FLL * (v8 ^ (v8 >> 47));
      }
    }
    else
    {
      uint64_t v6 = *(unsigned int *)((char *)a1 + a2 - 4);
      unint64_t v7 = 0x9DDFEA08EB382D69 * (((8 * *a1) + a2) ^ v6);
      return 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) ^ ((0x9DDFEA08EB382D69 * (v6 ^ (v7 >> 47) ^ v7)) >> 47));
    }
  }
  else
  {
    uint64_t v3 = *(void *)((char *)a1 + a2 - 8);
    uint64_t v4 = __ROR8__(v3 + a2, a2);
    return (0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69
            * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) ^ ((0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)) >> 47) ^ (0x9DDFEA08EB382D69 * (v4 ^ *(void *)a1)))) >> 47))) ^ v3;
  }
  return result;
}

unint64_t sub_1003C238C(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[1];
  unint64_t v3 = 0xB492B66FBE98F273 * *a1;
  uint64_t v4 = __ROR8__(0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8), 30) + __ROR8__(v3 - v2, 43);
  unint64_t v5 = v3 + a2 + __ROR8__(v2 ^ 0xC949D7C7509E6557, 20) - 0x9AE16A3B2F90404FLL * *(void *)((char *)a1 + a2 - 8);
  unint64_t v6 = 0x9DDFEA08EB382D69 * (v5 ^ (v4 - 0x3C5A37A36834CED9 * *(void *)((char *)a1 + a2 - 16)));
  return 0x9DDFEA08EB382D69
       * ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) ^ ((0x9DDFEA08EB382D69 * (v5 ^ (v6 >> 47) ^ v6)) >> 47));
}

unint64_t sub_1003C2438(void *a1, uint64_t a2)
{
  uint64_t v2 = *(void *)((char *)a1 + a2 - 16);
  uint64_t v3 = *a1 - 0x3C5A37A36834CED9 * (v2 + a2);
  uint64_t v5 = a1[2];
  uint64_t v4 = a1[3];
  uint64_t v6 = __ROR8__(v3 + v4, 52);
  uint64_t v7 = v3 + a1[1];
  uint64_t v8 = __ROR8__(v7, 7);
  uint64_t v9 = v7 + v5;
  uint64_t v10 = *(void *)((char *)a1 + a2 - 32) + v5;
  uint64_t v11 = v8 + __ROR8__(*a1 - 0x3C5A37A36834CED9 * (v2 + a2), 37) + v6 + __ROR8__(v9, 31);
  uint64_t v12 = *(void *)((char *)a1 + a2 - 24) + v10 + v2;
  unint64_t v13 = 0xC3A5C85C97CB3127 * (v12 + *(void *)((char *)a1 + a2 - 8) + v4 + v11)
      - 0x651E95C4D06FBFB1
      * (v9
       + v4
       + __ROR8__(v10, 37)
       + __ROR8__(*(void *)((char *)a1 + a2 - 24) + v10, 7)
       + __ROR8__(*(void *)((char *)a1 + a2 - 8) + v4 + v10, 52)
       + __ROR8__(v12, 31));
  return 0x9AE16A3B2F90404FLL
       * ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) ^ ((v11 - 0x3C5A37A36834CED9 * (v13 ^ (v13 >> 47))) >> 47));
}

void sub_1003C24F8(id a1)
{
}

void sub_1003C253C()
{
}

uint64_t **sub_1003C2560(void *a1, uint64_t a2)
{
  unint64_t v4 = sub_1003C208C((uint64_t)&v17, *(uint64_t **)a2, *(void *)(a2 + 8));
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  unint64_t v8 = v7.u32[0];
  if (v7.u32[0] > 1uLL)
  {
    unint64_t v9 = v4;
    if (v4 >= *(void *)&v5) {
      unint64_t v9 = v4 % *(void *)&v5;
    }
  }
  else
  {
    unint64_t v9 = (*(void *)&v5 - 1) & v4;
  }
  uint64_t v10 = *(uint64_t ****)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  uint64_t v11 = *v10;
  if (*v10)
  {
    uint64_t v14 = a2;
    uint64_t v12 = *(uint64_t **)a2;
    size_t v13 = *(void *)(v14 + 8);
    do
    {
      unint64_t v15 = (unint64_t)v11[1];
      if (v15 == v6)
      {
        if (v11[3] == (uint64_t *)v13 && !memcmp(v11[2], v12, v13)) {
          return v11;
        }
      }
      else
      {
        if (v8 > 1)
        {
          if (v15 >= *(void *)&v5) {
            v15 %= *(void *)&v5;
          }
        }
        else
        {
          v15 &= *(void *)&v5 - 1;
        }
        if (v15 != v9) {
          return 0;
        }
      }
      uint64_t v11 = (uint64_t **)*v11;
    }
    while (v11);
  }
  return v11;
}

void sub_1003C2680()
{
  xmmword_100A19AA8 = 0u;
  unk_100A19AB8 = 0u;
  dword_100A19AC8 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1003C13AC, &xmmword_100A19AA8, (void *)&_mh_execute_header);
}

void sub_1003C26EC(unint64_t *a1, __int16 a2)
{
  int8x8_t v5 = (unsigned char *)a1[1];
  unint64_t v4 = a1[2];
  if ((unint64_t)v5 >= v4)
  {
    unint64_t v7 = *a1;
    unint64_t v8 = &v5[-*a1];
    unint64_t v9 = (unint64_t)(v8 + 1);
    if ((uint64_t)(v8 + 1) < 0) {
      goto LABEL_38;
    }
    unint64_t v10 = v4 - v7;
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (unint64_t)operator new(v11);
    }
    else {
      unint64_t v12 = 0;
    }
    size_t v13 = (char *)(v12 + v11);
    v8[v12] = a2;
    unint64_t v6 = &v8[v12 + 1];
    if (v5 == (unsigned char *)v7)
    {
      v12 += (unint64_t)v8;
    }
    else
    {
      uint64_t v14 = &v5[~v7];
      do
      {
        char v15 = *--v5;
        (v14--)[v12] = v15;
      }
      while (v5 != (unsigned char *)v7);
      int8x8_t v5 = (unsigned char *)*a1;
    }
    *a1 = v12;
    a1[1] = (unint64_t)v6;
    a1[2] = (unint64_t)v13;
    if (v5) {
      operator delete(v5);
    }
  }
  else
  {
    *int8x8_t v5 = a2;
    unint64_t v6 = v5 + 1;
  }
  a1[1] = (unint64_t)v6;
  unint64_t v16 = a1[2];
  if ((unint64_t)v6 < v16)
  {
    *unint64_t v6 = HIBYTE(a2);
    uint64_t v17 = (uint64_t)(v6 + 1);
    goto LABEL_37;
  }
  unint64_t v18 = *a1;
  uint64_t v19 = &v6[-*a1];
  unint64_t v20 = (unint64_t)(v19 + 1);
  if ((uint64_t)(v19 + 1) < 0) {
LABEL_38:
  }
    abort();
  unint64_t v21 = v16 - v18;
  if (2 * v21 > v20) {
    unint64_t v20 = 2 * v21;
  }
  if (v21 >= 0x3FFFFFFFFFFFFFFFLL) {
    size_t v22 = 0x7FFFFFFFFFFFFFFFLL;
  }
  else {
    size_t v22 = v20;
  }
  if (v22) {
    unint64_t v23 = (unint64_t)operator new(v22);
  }
  else {
    unint64_t v23 = 0;
  }
  unint64_t v24 = (char *)(v23 + v22);
  v19[v23] = HIBYTE(a2);
  uint64_t v17 = (uint64_t)&v19[v23 + 1];
  if (v6 == (unsigned char *)v18)
  {
    *a1 = (unint64_t)&v19[v23];
    a1[1] = v17;
    a1[2] = (unint64_t)v24;
LABEL_36:
    operator delete(v6);
    goto LABEL_37;
  }
  uint64_t v25 = &v6[~v18];
  do
  {
    char v26 = *--v6;
    (v25--)[v23] = v26;
  }
  while (v6 != (unsigned char *)v18);
  unint64_t v6 = (unsigned char *)*a1;
  *a1 = v23;
  a1[1] = v17;
  a1[2] = (unint64_t)v24;
  if (v6) {
    goto LABEL_36;
  }
LABEL_37:
  a1[1] = v17;
}

void sub_1003C2898(unint64_t *a1, __int16 a2, unsigned int a3, uint64_t *a4)
{
  sub_1003C26EC(a1, a2);
  sub_1003C26EC(a1, a3);
  if (a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = (unsigned char *)a1[1];
    uint64_t v9 = a3;
    do
    {
      uint64_t v10 = *a4;
      unint64_t v11 = a1[2];
      if ((unint64_t)v8 >= v11)
      {
        unint64_t v13 = *a1;
        uint64_t v14 = &v8[-*a1];
        unint64_t v15 = (unint64_t)(v14 + 1);
        if ((uint64_t)(v14 + 1) < 0) {
          abort();
        }
        unint64_t v16 = v11 - v13;
        if (2 * v16 > v15) {
          unint64_t v15 = 2 * v16;
        }
        if (v16 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v17 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v17 = v15;
        }
        if (v17) {
          unint64_t v18 = (char *)operator new(v17);
        }
        else {
          unint64_t v18 = 0;
        }
        uint64_t v19 = &v14[(void)v18];
        v14[(void)v18] = *(unsigned char *)(v10 + v7);
        uint64_t v12 = (uint64_t)&v14[(void)v18 + 1];
        if (v8 != (unsigned char *)v13)
        {
          unint64_t v20 = &v8[~v13];
          do
          {
            char v21 = *--v8;
            (v20--)[(void)v18] = v21;
          }
          while (v8 != (unsigned char *)v13);
          unint64_t v8 = (unsigned char *)*a1;
          uint64_t v19 = v18;
        }
        *a1 = (unint64_t)v19;
        a1[1] = v12;
        a1[2] = (unint64_t)&v18[v17];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *unint64_t v8 = *(unsigned char *)(v10 + v7);
        uint64_t v12 = (uint64_t)(v8 + 1);
      }
      a1[1] = v12;
      ++v7;
      unint64_t v8 = (unsigned char *)v12;
    }
    while (v7 != v9);
  }
}

id sub_1003C29D0(unsigned __int8 *a1, uint64_t a2)
{
  for (id i = [objc_alloc((Class)NSMutableString) initWithString:@"0x"]; a2; --a2)
  {
    unsigned int v5 = *a1++;
    [i appendFormat:@"%02x", v5];
  }

  return i;
}

void sub_1003C2A5C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C2A6C(void *a1)
{
  id v1 = a1;
  uint64_t v2 = qword_100A19FE0;
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "handleHIDDeviceRemoved:", v3, 2u);
  }
  [v1 close];
}

void sub_1003C2AE8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C2AF8(int a1, int a2, uint64_t a3)
{
  unint64_t v6 = qword_100A19FE0;
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
  {
    v7[0] = 67109634;
    v7[1] = a1;
    __int16 v8 = 1024;
    int v9 = a2;
    __int16 v10 = 2112;
    uint64_t v11 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "handleHIDReportWithType:%d reportID:%d data:%@", (uint8_t *)v7, 0x18u);
  }
}

void sub_1003C2BC4(os_unfair_lock_s *a1, void *a2)
{
  uint64_t v3 = a2;
  os_unfair_lock_lock(a1);
  unsigned int v5 = 0;
  unint64_t v6 = 0;
  uint64_t v7 = 0;
  sub_100040550(&v5, (uint64_t)&a1[2]);
  os_unfair_lock_unlock(a1);
  unint64_t v4 = v5;
  if (v5 != v6)
  {
    do
      v3[2](v3, *v4++);
    while (v4 != v6);
    unint64_t v4 = v5;
  }
  if (v4)
  {
    unint64_t v6 = v4;
    operator delete(v4);
  }
}

void sub_1003C2C68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C2C90(uint64_t a1, uint64_t (***a2)(void, uint64_t))
{
  return (**a2)(a2, a1 + 32);
}

uint64_t sub_1003C2CC0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 16))(a2, *(unsigned __int8 *)(a1 + 32));
}

uint64_t sub_1003C2CF0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 24))(a2, a1 + 32);
}

void sub_1003C2D24(uint64_t a1, uint64_t a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)a1);
  unsigned int v5 = *(char **)(a1 + 8);
  unint64_t v4 = *(char **)(a1 + 16);
  if (v5 != v4)
  {
    while (*(void *)v5 != a2)
    {
      v5 += 8;
      if (v5 == v4)
      {
        unsigned int v5 = *(char **)(a1 + 16);
        break;
      }
    }
  }
  if (v5 == v4)
  {
    uint64_t v6 = a2;
    sub_1003C8274(a1 + 8, v4, (char *)&v6);
    sub_100061554(a1 + 8);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)a1);
}

uint64_t sub_1003C2DB0(uint64_t a1, uint64_t a2, CFAbsoluteTime *a3)
{
  if (*(void *)(a1 + 64))
  {
    int v19 = 0;
    long long v18 = 0u;
    long long v17 = 0u;
    memset(&v16[1], 0, 32);
    v16[0] = 1;
    id v14 = 0;
    uint64_t v15 = 69;
    unsigned __int8 v5 = [*(id *)(a1 + 112) getReport:v16 reportLength:&v15 withIdentifier:1 forType:1 error:&v14];
    id v6 = v14;
    if (v5)
    {
      *(void *)(a2 + 7) = *(void *)&v16[16];
      *(void *)a2 = *(void *)&v16[9];
      if (*(unsigned char *)(a2 + 12))
      {
        uint64_t v7 = 0;
        *a3 = CFAbsoluteTimeGetCurrent() + (double)*(unint64_t *)&v16[1] / -1000000.0;
LABEL_14:

        return v7;
      }
      uint64_t v12 = qword_100A19FE0;
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        int v9 = "readAopCaches: bt-services not running";
        __int16 v10 = v12;
        uint32_t v11 = 2;
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v8 = qword_100A19FE0;
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 138412290;
        id v21 = v6;
        int v9 = "readAopCaches: getReport::ServiceState failed %@";
        __int16 v10 = v8;
        uint32_t v11 = 12;
LABEL_12:
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v9, buf, v11);
      }
    }
    uint64_t v7 = 1;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
    sub_10075D480();
  }
  return 1;
}

void sub_1003C2F80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C2F98(uint64_t a1, unsigned int a2, int **a3)
{
  a3[1] = *a3;
  if (!a2) {
    return;
  }
  uint64_t v5 = 0;
  uint64_t v31 = (uint64_t)(a3 + 2);
  uint64_t v6 = a2;
  while (1)
  {
    int v39 = 0;
    long long v37 = 0u;
    long long v38 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    char v34 = v5 + 5;
    id v32 = 0;
    uint64_t v33 = 69;
    unsigned __int8 v7 = [*(id *)(a1 + 112) getReport:&v34 reportLength:&v33 withIdentifier:(v5 + 5) forType:1 error:&v32];
    id v8 = v32;
    if ((v7 & 1) == 0)
    {
      uint64_t v26 = qword_100A19FE0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 67109378;
      int v41 = v5;
      __int16 v42 = 2112;
      v43[0] = v8;
      uint64_t v27 = "readAopCaches: getReport::MatchTableConf%u failed %@";
      uint64_t v28 = v26;
      uint32_t v29 = 18;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, v27, buf, v29);
      goto LABEL_33;
    }
    if (!BYTE9(v35))
    {
      uint64_t v30 = qword_100A19FE0;
      if (!os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_33;
      }
      *(_DWORD *)long long buf = 67109120;
      int v41 = BYTE8(v35);
      uint64_t v27 = "readAopCaches: handleIndex %d empty";
      uint64_t v28 = v30;
      uint32_t v29 = 8;
      goto LABEL_30;
    }
    int v9 = BYTE8(v35);
    __int16 v10 = qword_100A19FE0;
    if (v5 != BYTE8(v35)) {
      break;
    }
    int v11 = (unsigned __int16)v36;
    int v12 = (unsigned __int16)(HIWORD(v35) + 14);
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109632;
      int v41 = v9;
      __int16 v42 = 1024;
      LODWORD(v43[0]) = v11;
      WORD2(v43[0]) = 1024;
      *(_DWORD *)((char *)v43 + 6) = v12;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "readAopCaches: handleIndex %d num %d size %d", buf, 0x14u);
    }
    int v13 = v11 | (v12 << 16);
    uint64_t v15 = a3[1];
    unint64_t v14 = (unint64_t)a3[2];
    if ((unint64_t)v15 >= v14)
    {
      uint64_t v17 = v15 - *a3;
      if ((unint64_t)(v17 + 1) >> 62) {
        abort();
      }
      uint64_t v18 = v14 - (void)*a3;
      uint64_t v19 = v18 >> 1;
      if (v18 >> 1 <= (unint64_t)(v17 + 1)) {
        uint64_t v19 = v17 + 1;
      }
      if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v20 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v20 = v19;
      }
      if (v20) {
        id v21 = (char *)sub_1002C44F0(v31, v20);
      }
      else {
        id v21 = 0;
      }
      size_t v22 = (int *)&v21[4 * v17];
      int *v22 = v13;
      unint64_t v16 = v22 + 1;
      unint64_t v24 = *a3;
      unint64_t v23 = (char *)a3[1];
      if (v23 != (char *)*a3)
      {
        do
        {
          int v25 = *((_DWORD *)v23 - 1);
          v23 -= 4;
          *--size_t v22 = v25;
        }
        while (v23 != (char *)v24);
        unint64_t v23 = (char *)*a3;
      }
      *a3 = v22;
      a3[1] = v16;
      a3[2] = (int *)&v21[4 * v20];
      if (v23) {
        operator delete(v23);
      }
    }
    else
    {
      *uint64_t v15 = v13;
      unint64_t v16 = v15 + 1;
    }
    a3[1] = v16;

    if (++v5 == v6) {
      return;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
    sub_10075D4B4(v5, v9, v10);
  }
LABEL_33:
}

void sub_1003C32B8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C32D4(uint64_t a1, uint64_t a2)
{
  unint64_t v25 = 1041;
  unint64_t v4 = operator new(0x411uLL);
  bzero(v4 + 1, 0x410uLL);
  *unint64_t v4 = 9;
  uint64_t v5 = *(void **)(a1 + 112);
  id v24 = 0;
  unsigned __int8 v6 = [v5 getReport:v4 reportLength:&v25 withIdentifier:9 forType:1 error:&v24];
  id v22 = v24;
  if (v6)
  {
    if (v25 >= 0x45)
    {
      double Current = CFAbsoluteTimeGetCurrent();
      if (v25 - 69 >= 0x30)
      {
        unsigned __int16 v8 = 0;
        double v9 = Current + (double)*(unint64_t *)(v4 + 1) / -1000000.0;
        unint64_t v10 = (v25 - 69) / 0x30;
        int v11 = v4 + 31;
        do
        {
          unint64_t v12 = *(void *)(v11 - 14);
          if (v12)
          {
            int v13 = qword_100A19FE0;
            if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
            {
              CUPrintAddress();
              id v14 = (id)objc_claimAutoreleasedReturnValue();
              uint64_t v15 = CUPrintHex();
              int v16 = (char)v11[31];
              int v17 = v11[32];
              *(_DWORD *)long long buf = 67110402;
              *(_DWORD *)&uint8_t buf[4] = v8;
              __int16 v27 = 2048;
              unint64_t v28 = v12;
              __int16 v29 = 2112;
              id v30 = v14;
              __int16 v31 = 2112;
              id v32 = v15;
              __int16 v33 = 1024;
              int v34 = v16;
              __int16 v35 = 1024;
              int v36 = v17;
              _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "_fetchBtProxCtxCache %2d, TS %llu, ADDR %@, PAYLOAD %@, RSSI %3d, CH %2d", buf, 0x32u);

              unint64_t v12 = *(void *)(v11 - 14);
            }
            *(double *)long long buf = v9 + (double)v12 / 1000000.0;
            int v23 = 31;
            sub_1003C35F8((void **)a2, buf, &v23, v11 + 31, v11 + 32, (uint64_t *)(v11 - 14));
            uint64_t v18 = *(void *)(a2 + 8);
            int v19 = *(_DWORD *)(v11 - 6);
            *(_WORD *)(v18 - 12) = *((_WORD *)v11 - 1);
            *(_DWORD *)(v18 - 16) = v19;
            uint64_t v20 = *(void *)(a2 + 8);
            long long v21 = *(_OWORD *)v11;
            *(_OWORD *)(v20 - 33) = *(_OWORD *)(v11 + 15);
            *(_OWORD *)(v20 - 48) = v21;
          }
          ++v8;
          v11 += 48;
        }
        while (v10 > v8);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
  {
    sub_10075D544();
  }

  operator delete(v4);
}

void sub_1003C359C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
  operator delete(v11);
  _Unwind_Resume(a1);
}

char *sub_1003C35F8(void **a1, void *a2, int *a3, char *a4, char *a5, uint64_t *a6)
{
  id v14 = a1[2];
  uint64_t v12 = (uint64_t)(a1 + 2);
  int v13 = v14;
  unint64_t v15 = *(void *)(v12 - 8);
  if (v15 >= (unint64_t)v14)
  {
    uint64_t v21 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v15 - (void)*a1) >> 3);
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) > 0x492492492492492) {
      abort();
    }
    unint64_t v23 = 0x6DB6DB6DB6DB6DB7 * ((v13 - (unsigned char *)*a1) >> 3);
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x249249249249249) {
      unint64_t v24 = 0x492492492492492;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      unint64_t v25 = (char *)sub_100378AFC(v12, v24);
    }
    else {
      unint64_t v25 = 0;
    }
    char v26 = *a3;
    __int16 v27 = &v25[56 * v21];
    char v28 = *a4;
    char v29 = *a5;
    id v30 = &v25[56 * v24];
    uint64_t v31 = *a6;
    *(void *)__int16 v27 = *a2;
    v27[39] = v26;
    v27[46] = v28;
    v27[47] = v29;
    *((void *)v27 + 6) = v31;
    *((void *)v27 + 2) = 0;
    *((void *)v27 + 3) = 0;
    *((void *)v27 + 1) = 0;
    *(void *)(v27 + 31) = 0;
    *((_DWORD *)v27 + 10) = 0;
    *((_WORD *)v27 + 22) = 0;
    uint64_t v20 = v27 + 56;
    __int16 v33 = (char *)*a1;
    id v32 = (char *)a1[1];
    if (v32 != *a1)
    {
      do
      {
        long long v34 = *(_OWORD *)(v32 - 56);
        long long v35 = *(_OWORD *)(v32 - 40);
        long long v36 = *(_OWORD *)(v32 - 24);
        *((void *)v27 - 1) = *((void *)v32 - 1);
        *(_OWORD *)(v27 - 24) = v36;
        *(_OWORD *)(v27 - 40) = v35;
        *(_OWORD *)(v27 - 56) = v34;
        v27 -= 56;
        v32 -= 56;
      }
      while (v32 != v33);
      id v32 = (char *)*a1;
    }
    *a1 = v27;
    a1[1] = v20;
    a1[2] = v30;
    if (v32) {
      operator delete(v32);
    }
  }
  else
  {
    int v16 = *a3;
    char v17 = *a4;
    char v18 = *a5;
    uint64_t v19 = *a6;
    *(void *)unint64_t v15 = *a2;
    *(unsigned char *)(v15 + 39) = v16;
    *(unsigned char *)(v15 + 46) = v17;
    *(unsigned char *)(v15 + 47) = v18;
    *(void *)(v15 + 48) = v19;
    *(void *)(v15 + 16) = 0;
    *(void *)(v15 + 24) = 0;
    *(void *)(v15 + 8) = 0;
    *(void *)(v15 + 31) = 0;
    *(_DWORD *)(v15 + 40) = 0;
    uint64_t v20 = (char *)(v15 + 56);
    *(_WORD *)(v15 + 44) = 0;
  }
  a1[1] = v20;
  return v20 - 56;
}

void sub_1003C37C0(uint64_t a1)
{
  uint64_t v2 = sub_1004AFCFC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1003C383C;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003C383C(uint64_t a1)
{
  id v1 = *(os_unfair_lock_s **)(a1 + 32);
  double v9 = 0;
  unint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_1003C32D4((uint64_t)v1, (uint64_t)&v9);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3321888768;
  v5[2] = sub_1003C3984;
  v5[3] = &unk_1009AB520;
  long long __dst = 0;
  uint64_t v8 = 0;
  long long __p = 0;
  uint64_t v2 = v9;
  int64_t v3 = v10 - (unsigned char *)v9;
  if (v10 != v9)
  {
    sub_1003C8530(&__p, 0x6DB6DB6DB6DB6DB7 * (v3 >> 3));
    unint64_t v4 = (char *)__dst;
    memmove(__dst, v2, v3);
    long long __dst = &v4[8 * (v3 >> 3)];
  }
  sub_1003C2BC4(v1, v5);
  if (__p)
  {
    long long __dst = __p;
    operator delete(__p);
  }
  if (v9)
  {
    unint64_t v10 = v9;
    operator delete(v9);
  }
}

void sub_1003C3950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, void *a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003C3984(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1 + 32);
}

void *sub_1003C39B4(uint64_t a1, uint64_t a2)
{
  return sub_1003C84B4((void *)(a1 + 32), a2 + 32);
}

void sub_1003C39C0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void sub_1003C39D8(uint64_t a1)
{
  uint64_t v2 = sub_1004AFCFC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1003C3A54;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_100013018(v2, v3);
}

void sub_1003C3A54(uint64_t a1)
{
  id v1 = *(os_unfair_lock_s **)(a1 + 32);
  double v54 = 0.0;
  memset(v55, 0, 15);
  int v2 = sub_1003C2DB0((uint64_t)v1, (uint64_t)v55, &v54);
  unsigned int v3 = LOBYTE(v55[1]);
  unsigned int v4 = BYTE1(v55[1]);
  if (v2) {
    BOOL v5 = 1;
  }
  else {
    BOOL v5 = LOBYTE(v55[1]) == 0;
  }
  if (v5 || BYTE1(v55[1]) == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D5AC();
    }
    sub_1003C2BC4(v1, &stru_1009AB570);
  }
  else
  {
    uint64_t v51 = 0;
    long long v52 = 0;
    uint64_t v53 = 0;
    sub_1003C2F98((uint64_t)v1, BYTE3(v55[1]), (int **)&v51);
    if (v51 == v52)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
        sub_10075D5E0();
      }
      sub_1003C2BC4(v1, &stru_1009AB590);
    }
    else
    {
      uint64_t v50 = 0;
      uint64_t v7 = mach_continuous_time();
      uint64_t v8 = sub_100017768();
      sub_10004191C(buf, "AOPInterfaceManager");
      sub_10004191C(__p, "LastDramFetchInterval");
      int v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, uint64_t *))(*(void *)v8 + 144))(v8, buf, __p, &v50);
      if (v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v58) < 0) {
        operator delete(*(void **)buf);
      }
      if (v50) {
        int v10 = v9;
      }
      else {
        int v10 = 0;
      }
      unsigned int v11 = v3;
      if (v10 == 1)
      {
        unsigned int v12 = UpTicksToSeconds() / v4;
        if (v12 + 1 < v3) {
          unsigned int v11 = v12 + 1;
        }
        else {
          unsigned int v11 = v3;
        }
      }
      BOOL v14 = v3 > 1 && v11 == v3;
      uint64_t v15 = v11 - v14;
      size_t v16 = v15 * WORD2(v55[0]);
      if (v16)
      {
        char v17 = operator new(v15 * WORD2(v55[0]));
        bzero(v17, v16);
      }
      else
      {
        char v17 = 0;
      }
      unsigned int v38 = sub_1005E4F00((uint64_t)&v1[12], (char *)v17, v15);
      char v18 = qword_100A19FE0;
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v15;
        LOWORD(v57) = 1024;
        *(_DWORD *)((char *)&v57 + 2) = v38;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "readAopCaches: asked %u, read %u caches", buf, 0xEu);
      }
      uint64_t v19 = sub_100017768();
      sub_10004191C(buf, "AOPInterfaceManager");
      sub_10004191C(__p, "LastDramFetchInterval");
      (*(void (**)(uint64_t, uint8_t *, void **, uint64_t))(*(void *)v19 + 152))(v19, buf, __p, v7);
      if (v49 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v58) < 0) {
        operator delete(*(void **)buf);
      }
      long long v36 = v51;
      long long v37 = v52;
      *(void *)long long buf = 0;
      int v57 = 0;
      uint64_t v58 = 0;
      if (v38)
      {
        unsigned __int16 v20 = 0;
        unint64_t v41 = (v52 - (unsigned char *)v51) >> 2;
        do
        {
          int v39 = v20;
          if (v37 != v36)
          {
            uint64_t v21 = 0;
            int v22 = 0;
            uint64_t v40 = (uint64_t)v17 + WORD2(v55[0]) * v39 + 11;
            do
            {
              uint64_t v23 = *((unsigned __int16 *)v51 + 2 * v21);
              if (*((_WORD *)v51 + 2 * v21))
              {
                uint64_t v24 = *((unsigned __int16 *)v51 + 2 * v21 + 1);
                unint64_t v25 = (char *)v40;
                do
                {
                  unsigned int v26 = *(_DWORD *)(v25 - 11);
                  if (!v26) {
                    break;
                  }
                  size_t v27 = v25[2] >= 0x16u ? 22 : v25[2];
                  char v28 = v25[1];
                  *(double *)long long __p = v54 + (double)v26;
                  char v47 = 40;
                  int v46 = v27 + 9;
                  sub_1003C41F8((void **)buf, __p, &v46, v25, &v47);
                  char v29 = v57;
                  int v30 = *(_DWORD *)(v25 - 7);
                  *(v57 - 6) = *(_WORD *)(v25 - 3);
                  *((_DWORD *)v29 - 4) = v30;
                  uint64_t v31 = v57;
                  *((unsigned char *)v57 - 46) = 26;
                  *(v31 - 24) = 258;
                  *((unsigned char *)v31 - 45) = v27 + 5;
                  *((unsigned char *)v31 - 42) = 0;
                  *(v31 - 22) = 19711;
                  *((unsigned char *)v31 - 41) = v28;
                  *((unsigned char *)v31 - 40) = v27;
                  memcpy((char *)v31 - 39, v25 + 3, v27);
                  v25 += v24;
                  --v23;
                }
                while (v23);
              }
              uint64_t v21 = (unsigned __int16)++v22;
            }
            while (v41 > (unsigned __int16)v22);
          }
          unsigned __int16 v20 = v39 + 1;
        }
        while (v38 > (unsigned __int16)(v39 + 1));
      }
      id v32 = qword_100A19FE0;
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "readAopCaches: calling _listeners.notify(^(AOPEventListener* listener)...", (uint8_t *)__p, 2u);
      }
      v42[0] = _NSConcreteStackBlock;
      v42[1] = 3321888768;
      v42[2] = sub_1003C43AC;
      void v42[3] = &unk_1009AB520;
      long long __dst = 0;
      uint64_t v45 = 0;
      uint64_t v43 = 0;
      __int16 v33 = *(const void **)buf;
      int64_t v34 = (int64_t)v57 - *(void *)buf;
      if (v57 != *(_WORD **)buf)
      {
        sub_1003C8530(&v43, 0x6DB6DB6DB6DB6DB7 * (v34 >> 3));
        long long v35 = (char *)__dst;
        memmove(__dst, v33, v34);
        long long __dst = &v35[8 * (v34 >> 3)];
      }
      sub_1003C2BC4(v1, v42);
      if (v43)
      {
        long long __dst = v43;
        operator delete(v43);
      }
      if (*(void *)buf)
      {
        int v57 = *(_WORD **)buf;
        operator delete(*(void **)buf);
      }
      if (v17) {
        operator delete(v17);
      }
    }
    if (v51)
    {
      long long v52 = v51;
      operator delete(v51);
    }
  }
}

void sub_1003C400C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003C40F0(id a1, AOPEventListener *a2)
{
  unsigned int v3 = 0;
  uint64_t v4 = 0;
  long long __p = 0;
  (*((void (**)(AOPEventListener *, void **))a2->var0 + 1))(a2, &__p);
  if (__p)
  {
    unsigned int v3 = __p;
    operator delete(__p);
  }
}

void sub_1003C4158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003C4174(id a1, AOPEventListener *a2)
{
  unsigned int v3 = 0;
  uint64_t v4 = 0;
  long long __p = 0;
  (*((void (**)(AOPEventListener *, void **))a2->var0 + 1))(a2, &__p);
  if (__p)
  {
    unsigned int v3 = __p;
    operator delete(__p);
  }
}

void sub_1003C41DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003C41F8(void **a1, void *a2, int *a3, char *a4, char *a5)
{
  unsigned int v12 = a1[2];
  uint64_t v10 = (uint64_t)(a1 + 2);
  unsigned int v11 = v12;
  unint64_t v13 = *(void *)(v10 - 8);
  if (v13 >= (unint64_t)v12)
  {
    uint64_t v18 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v13 - (void)*a1) >> 3);
    unint64_t v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) > 0x492492492492492) {
      abort();
    }
    unint64_t v20 = 0x6DB6DB6DB6DB6DB7 * ((v11 - (unsigned char *)*a1) >> 3);
    if (2 * v20 > v19) {
      unint64_t v19 = 2 * v20;
    }
    if (v20 >= 0x249249249249249) {
      unint64_t v21 = 0x492492492492492;
    }
    else {
      unint64_t v21 = v19;
    }
    if (v21) {
      int v22 = (char *)sub_100378AFC(v10, v21);
    }
    else {
      int v22 = 0;
    }
    char v23 = *a3;
    uint64_t v24 = &v22[56 * v18];
    char v25 = *a4;
    char v26 = *a5;
    size_t v27 = &v22[56 * v21];
    *(void *)uint64_t v24 = *a2;
    v24[39] = v23;
    v24[46] = v25;
    v24[47] = v26;
    *((void *)v24 + 6) = 0;
    *((void *)v24 + 2) = 0;
    *((void *)v24 + 3) = 0;
    *((void *)v24 + 1) = 0;
    *(void *)(v24 + 31) = 0;
    *((_DWORD *)v24 + 10) = 0;
    *((_WORD *)v24 + 22) = 0;
    char v17 = v24 + 56;
    char v29 = (char *)*a1;
    char v28 = (char *)a1[1];
    if (v28 != *a1)
    {
      do
      {
        long long v30 = *(_OWORD *)(v28 - 56);
        long long v31 = *(_OWORD *)(v28 - 40);
        long long v32 = *(_OWORD *)(v28 - 24);
        *((void *)v24 - 1) = *((void *)v28 - 1);
        *(_OWORD *)(v24 - 24) = v32;
        *(_OWORD *)(v24 - 40) = v31;
        *(_OWORD *)(v24 - 56) = v30;
        v24 -= 56;
        v28 -= 56;
      }
      while (v28 != v29);
      char v28 = (char *)*a1;
    }
    *a1 = v24;
    a1[1] = v17;
    a1[2] = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    int v14 = *a3;
    char v15 = *a4;
    char v16 = *a5;
    *(void *)unint64_t v13 = *a2;
    *(unsigned char *)(v13 + 39) = v14;
    *(unsigned char *)(v13 + 46) = v15;
    *(unsigned char *)(v13 + 47) = v16;
    *(void *)(v13 + 48) = 0;
    *(void *)(v13 + 16) = 0;
    *(void *)(v13 + 24) = 0;
    *(void *)(v13 + 8) = 0;
    *(void *)(v13 + 31) = 0;
    *(_DWORD *)(v13 + 40) = 0;
    char v17 = (char *)(v13 + 56);
    *(_WORD *)(v13 + 44) = 0;
  }
  a1[1] = v17;
  return v17 - 56;
}

uint64_t sub_1003C43AC(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a2 + 8))(a2, a1 + 32);
}

uint64_t sub_1003C43DC()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  bzero(v15, 0xFF7uLL);
  char v13 = 4;
  uint64_t v4 = *(const void **)v2;
  size_t v14 = *(void *)(v2 + 8) - *(void *)v2;
  memcpy(v15, v4, v14);
  BOOL v5 = *(void **)(v3 + 112);
  id v12 = 0;
  unsigned int v6 = [v5 setReport:&v13 reportLength:v14 + 9 withIdentifier:0 forType:1 error:&v12];
  id v7 = v12;
  uint64_t v8 = qword_100A19FE0;
  if (v6)
  {
    uint64_t v9 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v11, 2u);
      uint64_t v9 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D614();
    }
    uint64_t v9 = 1;
  }

  return v9;
}

void sub_1003C4538(void *a1, uint64_t a2)
{
  id v3 = a1;
  uint64_t v4 = qword_100A19FE0;
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v39) = [v3 count];
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "sendProxyOOBKeys: %d keys", buf, 8u);
  }
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  id v5 = v3;
  id v6 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
  if (v6)
  {
    uint64_t v7 = *(void *)v33;
    do
    {
      for (id i = 0; i != v6; id i = (char *)i + 1)
      {
        if (*(void *)v33 != v7) {
          objc_enumerationMutation(v5);
        }
        uint64_t v9 = qword_100A19FE0;
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = *(void *)(*((void *)&v32 + 1) + 8 * i);
          *(_DWORD *)long long buf = 138412290;
          uint64_t v39 = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "keyType: %@", buf, 0xCu);
        }
      }
      id v6 = [v5 countByEnumeratingWithState:&v32 objects:v40 count:16];
    }
    while (v6);
  }

  long long v30 = 0u;
  long long v31 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  id v11 = v5;
  id v12 = [v11 countByEnumeratingWithState:&v28 objects:v37 count:16];
  if (v12)
  {
    uint64_t v23 = *(void *)v29;
    do
    {
      for (SCNetworkInterfaceRef j = 0; j != v12; SCNetworkInterfaceRef j = (char *)j + 1)
      {
        if (*(void *)v29 != v23) {
          objc_enumerationMutation(v11);
        }
        uint64_t v14 = *(void *)(*((void *)&v28 + 1) + 8 * (void)j);
        sub_1003C26EC((unint64_t *)a2, 2);
        char v15 = [v11 objectForKeyedSubscript:v14];
        sub_1003C26EC((unint64_t *)a2, 16 * ((unsigned __int16)[v15 count] & 0xFFF));

        long long v26 = 0u;
        long long v27 = 0u;
        long long v24 = 0u;
        long long v25 = 0u;
        char v16 = [v11 objectForKeyedSubscript:v14];
        id v17 = [v16 countByEnumeratingWithState:&v24 objects:v36 count:16];
        if (v17)
        {
          uint64_t v18 = *(void *)v25;
          do
          {
            for (k = 0; k != v17; k = (char *)k + 1)
            {
              if (*(void *)v25 != v18) {
                objc_enumerationMutation(v16);
              }
              id v20 = [*(id *)(*((void *)&v24 + 1) + 8 * (void)k) irkData];
              unint64_t v21 = [v20 bytes];

              int v22 = (char *)operator new(0x10uLL);
              *(_OWORD *)int v22 = *v21;
              sub_1003C8584(a2, *(char **)(a2 + 8), v22, v22 + 16, 16);
              operator delete(v22);
            }
            id v17 = [v16 countByEnumeratingWithState:&v24 objects:v36 count:16];
          }
          while (v17);
        }
      }
      id v12 = [v11 countByEnumeratingWithState:&v28 objects:v37 count:16];
    }
    while (v12);
  }
}

void sub_1003C4894(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C4920(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v4 & 1) == 0)
  {
    id v5 = qword_100A19FE0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D67C(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  long long __p = 0;
  unint64_t v21 = 0;
  uint64_t v22 = 0;
  char v13 = operator new(1uLL);
  *char v13 = 0;
  v19[1] = (uint64_t)(v13 + 1);
  void v19[2] = (uint64_t)(v13 + 1);
  v19[0] = (uint64_t)v13;
  sub_1003C2898((unint64_t *)&__p, 3, 1u, v19);
  operator delete(v13);
  sub_1003C4538(v3, (uint64_t)&__p);
  sub_1003C26EC((unint64_t *)&__p, 4);
  sub_1003C26EC((unint64_t *)&__p, 0);
  sub_1003C43DC();
  uint64_t v14 = +[NSNumber numberWithUnsignedInt:1];
  char v15 = [v3 objectForKey:v14];

  if (v15)
  {
    uint64_t v16 = sub_100050530();
    id v17 = +[NSNumber numberWithUnsignedInt:1];
    uint64_t v18 = [v3 objectForKey:v17];
    (*(void (**)(uint64_t, id))(*(void *)v16 + 416))(v16, [v18 count]);
  }
  if (__p)
  {
    unint64_t v21 = __p;
    operator delete(__p);
  }
}

void sub_1003C4AB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1003C4B0C()
{
  uint64_t v0 = __chkstk_darwin();
  char v2 = v1;
  char v4 = v3;
  char v6 = v5;
  char v8 = v7;
  char v10 = v9;
  __int16 v12 = v11;
  uint64_t v13 = v0;
  bzero(&v29, 0xFF8uLL);
  char v22 = 6;
  __int16 v23 = v12;
  char v24 = v10;
  char v25 = v8;
  char v26 = v6;
  char v27 = v2;
  char v28 = v4;
  uint64_t v14 = *(void **)(v13 + 112);
  id v21 = 0;
  unsigned int v15 = [v14 setReport:&v22 reportLength:8 withIdentifier:0 forType:1 error:&v21];
  id v16 = v21;
  id v17 = qword_100A19FE0;
  if (v15)
  {
    uint64_t v18 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)id v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v20, 2u);
      uint64_t v18 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D614();
    }
    uint64_t v18 = 1;
  }

  return v18;
}

uint64_t sub_1003C4C88(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = __chkstk_darwin(a1, a2);
  __int16 v4 = v3;
  uint64_t v5 = v2;
  bzero(v16, 0xFFDuLL);
  char v14 = 9;
  __int16 v15 = v4;
  char v6 = *(void **)(v5 + 112);
  id v13 = 0;
  unsigned int v7 = [v6 setReport:&v14 reportLength:3 withIdentifier:0 forType:1 error:&v13];
  id v8 = v13;
  char v9 = qword_100A19FE0;
  if (v7)
  {
    uint64_t v10 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)__int16 v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Successfully sent report to AOP", v12, 2u);
      uint64_t v10 = 0;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D614();
    }
    uint64_t v10 = 1;
  }

  return v10;
}

void sub_1003C4DCC(uint64_t a1)
{
  uint64_t v2 = qword_100A19FE0;
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = sub_10003FB34();
    int v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 2352))(v3);
    uint64_t v5 = *(void *)sub_10003FB34();
    int v6 = (*(uint64_t (**)(void))(v5 + 2360))();
    *(_DWORD *)long long buf = 67109376;
    int v16 = v4;
    __int16 v17 = 1024;
    int v18 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Starting AOPInterfaceManager, AOPInterface: %d, AOPBuffering: %d\n", buf, 0xEu);
  }
  uint64_t v7 = sub_10003FB34();
  int v8 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 2368))(v7);
  BOOL v9 = (_os_feature_enabled_impl() & 1) != 0 || IsAppleInternalBuild() != 0;
  uint64_t v10 = sub_10003FB34();
  int v11 = (*(uint64_t (**)(uint64_t))(*(void *)v10 + 2360))(v10);
  uint64_t v12 = *(void *)sub_10003FB34();
  if (((*(unsigned int (**)(void))(v12 + 2384))() | v8) & 1) != 0 || (v11 & v9)
  {
    *(void *)(a1 + 32) = *(void *)(sub_1004AFCFC() + 8);
    uint64_t v13 = sub_1004AFCFC();
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 3221225472;
    double v14[2] = sub_1003C505C;
    void v14[3] = &unk_100997528;
    void v14[4] = a1;
    sub_1000197D8(v13, v14);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
  {
    sub_10075D6F4();
  }
}

void sub_1003C505C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 32));
  uint64_t v2 = objc_opt_new();
  uint64_t v3 = *(void **)(v1 + 104);
  *(void *)(v1 + 104) = v2;

  [*(id *)(v1 + 104) open];
  [*(id *)(v1 + 104) setDispatchQueue:*(void *)(v1 + 32)];
  [*(id *)(v1 + 104) setDeviceMatching:&off_1009E1780];
  int v4 = *(void **)(v1 + 104);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 3221225472;
  v31[2] = sub_1003C5420;
  void v31[3] = &unk_1009AB5B0;
  v31[4] = v1;
  [v4 setDeviceNotificationHandler:v31];
  [*(id *)(v1 + 104) setInputReportHandler:&stru_1009AB5F0];
  [*(id *)(v1 + 104) activate];
  uint64_t v5 = *(void **)(v1 + 112);
  if (v5)
  {
    int v30 = 0;
    long long v29 = 0u;
    long long v28 = 0u;
    long long v27 = 0u;
    long long v26 = 0u;
    char v25 = 1;
    id v23 = 0;
    uint64_t v24 = 69;
    unsigned int v6 = [v5 getReport:&v25 reportLength:&v24 withIdentifier:1 forType:1 error:&v23];
    id v7 = v23;
    int v8 = qword_100A19FE0;
    if (v6)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
      {
        id v9 = objc_alloc((Class)NSData);
        id v10 = [v9 initWithBytes:&v25 length:v24];
        int v11 = [v10 description];
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Get service state report: %@", buf, 0xCu);
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
    {
      sub_10075D7C4();
    }
    char v33 = 0;
    *(_OWORD *)long long buf = xmmword_1007BD290;
    __int16 v15 = *(void **)(v1 + 112);
    id v22 = 0;
    unsigned __int8 v16 = [v15 setReport:buf reportLength:17 withIdentifier:0 forType:1 error:&v22];
    id v17 = v22;

    if ((v16 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D75C();
    }
    id v18 = [objc_alloc((Class)HIDEventSystemClient) initWithType:1];
    unint64_t v19 = *(void **)(v1 + 120);
    *(void *)(v1 + 120) = v18;

    [*(id *)(v1 + 120) setDispatchQueue:*(void *)(v1 + 32)];
    [*(id *)(v1 + 120) setMatching:&off_1009E17A8];
    id v20 = *(void **)(v1 + 120);
    v21[0] = _NSConcreteStackBlock;
    v21[1] = 3221225472;
    void v21[2] = sub_100050FF0;
    void v21[3] = &unk_1009AB610;
    void v21[4] = v1;
    [v20 setEventHandler:v21];
    [*(id *)(v1 + 120) setResetHandler:&stru_1009AB630];
    [*(id *)(v1 + 120) setCancelHandler:&stru_1009AB650];
    [*(id *)(v1 + 120) activate];
    atomic_store(1u, (unsigned __int8 *)(v1 + 96));
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D728();
    }
    uint64_t v13 = *(void **)(v1 + 104);
    uint64_t v12 = (id *)(v1 + 104);
    [v13 cancel];
    [*v12 close];
    id v14 = *v12;
    *uint64_t v12 = 0;
  }
}

void sub_1003C53F8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C5420(uint64_t a1, void *a2, int a3)
{
  id v6 = a2;
  uint64_t v7 = *(void *)(a1 + 32);
  uint64_t entryID = 0;
  uint64_t RegistryEntryID = IORegistryEntryGetRegistryEntryID((io_registry_entry_t)[v6 service], &entryID);
  uint64_t v9 = RegistryEntryID;
  if (RegistryEntryID)
  {
    NSLog(@"IORegistryEntryGetRegistryEntryID failed 0x%x", RegistryEntryID);
    id v10 = qword_100A19FE0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D82C(v9, v10, v11, v12, v13, v14, v15, v16);
    }
  }
  else if (a3)
  {
    id v17 = qword_100A19FE0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v22 = entryID;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "New client to SPUBluetooth 0x%llx", buf, 0xCu);
    }
    objc_storeStrong((id *)(v7 + 112), a2);
    sub_1003C5594(v7, *(void **)(v7 + 112));
  }
  else
  {
    unint64_t v19 = *(void **)(v7 + 112);
    id v18 = (void **)(v7 + 112);
    *id v18 = 0;

    sub_1003C2A6C(*v18);
  }
}

void sub_1003C557C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C5594(uint64_t a1, void *a2)
{
  kern_return_t ChildEntry;
  NSObject *v34;
  CFStringRef v35;
  kern_return_t Name;
  NSObject *v37;
  NSObject *v38;
  const char *v39;
  uint32_t v40;
  NSObject *v41;
  int v42;
  uint64_t v43;
  uint8_t v44;
  unsigned char v45[11];
  io_registry_entry_t child;
  io_registry_entry_t parent[2];
  id v48;
  uint8_t v49[4];
  uint8_t *v50;
  __int16 v51;
  int v52;
  uint8_t buf[16];
  long long v54;
  long long v55;
  long long v56;
  long long v57;
  long long v58;
  long long v59;
  long long v60;

  id v3 = a2;
  unsigned __int8 v4 = atomic_load((unsigned __int8 *)(a1 + 96));
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = qword_100A19FE0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075DA18(v5, v6, v7, v8, v9, v10, v11, v12);
    }
  }
  long long v48 = 0;
  unsigned __int8 v13 = [v3 openWithOptions:0 error:&v48];
  id v14 = v48;
  if ((v13 & 1) == 0 && os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
    sub_10075D9B0();
  }
  *(void *)parent = 0;
  uint64_t ParentEntry = IORegistryEntryGetParentEntry((io_registry_entry_t)[v3 service], "IOService", &parent[1]);
  if (ParentEntry)
  {
    uint64_t v16 = qword_100A19FE0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
      sub_10075D944(ParentEntry, v16, v17, v18, v19, v20, v21, v22);
    }
    goto LABEL_38;
  }
  uint64_t ChildIterator = IORegistryEntryGetChildIterator(parent[1], "IOService", parent);
  if (!ChildIterator)
  {
    io_object_t v31 = IOIteratorNext(parent[0]);
    if (!v31) {
      goto LABEL_38;
    }
    while (1)
    {
      CFStringRef v32 = IOObjectCopyClass(v31);
      if (!CFEqual(@"AppleSPUFastpathInterface", v32))
      {
        CFRelease(v32);
        goto LABEL_32;
      }
      CFRelease(v32);
      child = 0;
      ChildEntry = IORegistryEntryGetChildEntry(v31, "IOService", &child);
      if (ChildEntry)
      {
        long long v34 = qword_100A19FE0;
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = ChildEntry;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "IORegistryEntryGetChildEntry failed for AppleSPUFastpathInterface 0x%0x", buf, 8u);
        }
        goto LABEL_32;
      }
      long long v35 = IOObjectCopyClass(child);
      if (CFEqual(v35, @"AppleSPUFastpathDriver"))
      {
        char v59 = 0u;
        char v60 = 0u;
        int v57 = 0u;
        uint64_t v58 = 0u;
        uint64_t v55 = 0u;
        __int16 v56 = 0u;
        *(_OWORD *)long long buf = 0u;
        double v54 = 0u;
        Name = IORegistryEntryGetName(child, (char *)buf);
        long long v37 = qword_100A19FE0;
        if (Name)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)char v49 = 67109120;
            LODWORD(v50) = Name;
            unsigned int v38 = v37;
            uint64_t v39 = "IORegistryEntryGetName failed 0x%0x";
            uint64_t v40 = 8;
            goto LABEL_36;
          }
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)char v49 = 136315138;
            uint64_t v50 = buf;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Found fastpath service with name %s", v49, 0xCu);
          }
          __int16 v42 = sub_1005E4CA8(a1 + 48, 0, child);
          if (v42)
          {
            uint64_t v43 = qword_100A19FE0;
            if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)char v49 = 136315394;
              uint64_t v50 = buf;
              uint64_t v51 = 1024;
              long long v52 = v42;
              unsigned int v38 = v43;
              uint64_t v39 = "Failed to open %s, error 0x%x";
              uint64_t v40 = 18;
LABEL_36:
              _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, v39, v49, v40);
              if (!v35) {
                goto LABEL_31;
              }
LABEL_30:
              CFRelease(v35);
              goto LABEL_31;
            }
          }
        }
      }
      else
      {
        unint64_t v41 = qword_100A19FE0;
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
          sub_10075D898(&v44, v45, v41);
        }
      }
      if (v35) {
        goto LABEL_30;
      }
LABEL_31:
      IOObjectRelease(child);
LABEL_32:
      if (!IOObjectRelease(v31))
      {
        io_object_t v31 = IOIteratorNext(parent[0]);
        if (!v31) {
          goto LABEL_38;
        }
      }
    }
  }
  uint64_t v24 = qword_100A19FE0;
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
    sub_10075D8D8(ChildIterator, v24, v25, v26, v27, v28, v29, v30);
  }
LABEL_38:
}

void sub_1003C59A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C59E0(id a1, HIDDevice *a2, unint64_t a3, int64_t a4, int64_t a5, NSData *a6)
{
}

void sub_1003C59F0(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
    sub_10075DA90();
  }
}

void sub_1003C5A34(id a1)
{
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
    sub_10075DAC4();
  }
}

void sub_1003C5A78(uint64_t a1)
{
  uint64_t v2 = sub_1004AFCFC();
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  _DWORD v3[2] = sub_1003C5AFC;
  v3[3] = &unk_100997528;
  v3[4] = a1;
  sub_1000197D8(v2, v3);
  atomic_store(0, (unsigned __int8 *)(a1 + 96));
}

id sub_1003C5AFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = qword_100A19FE0;
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned __int8 v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "AOPInterfaceManager terminate", v4, 2u);
  }
  [*(id *)(v1 + 120) cancel];
  return [*(id *)(v1 + 104) cancel];
}

_DWORD *sub_1003C5B78(uint64_t a1, unsigned __int8 a2, _DWORD *a3, _DWORD *a4)
{
  unsigned __int8 v9 = a2;
  uint64_t v6 = a1 + 128;
  unint64_t result = sub_10026D430((void *)(a1 + 128), &v9);
  if (result)
  {
    uint64_t v10 = &v9;
    *a3 = *((_DWORD *)sub_1003C8040(v6, &v9, (uint64_t)&unk_1007BE9D0, &v10) + 5);
    uint64_t v10 = &v9;
    unint64_t result = sub_1003C8040(v6, &v9, (uint64_t)&unk_1007BE9D0, &v10);
    int v8 = result[6];
  }
  else
  {
    *a3 = 0;
    int v8 = 0;
  }
  *a4 = v8;
  return result;
}

uint64_t sub_1003C5C2C(uint64_t a1, unsigned __int8 a2)
{
  unsigned __int8 v7 = a2;
  float v6 = 0.0;
  sub_1003C5B78(a1, a2, &v6, &v5);
  id v3 = (void *)(a1 + 128);
  if (sub_10026D430(v3, &v7))
  {
    int v8 = &v7;
    *((unsigned char *)sub_1003C8040((uint64_t)v3, &v7, (uint64_t)&unk_1007BE9D0, &v8) + 28) = 0;
  }
  return (char)(uint64_t)rintf(v6);
}

void sub_1003C5CB4(uint64_t a1, void *a2)
{
  id v3 = a2;
  unsigned __int8 v4 = qword_100A19FE0;
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 138412290;
    id v17 = v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Send report to AOP %@", buf, 0xCu);
  }
  int v5 = [v3 objectForKey:@"type"];
  unsigned int v6 = [v5 unsignedCharValue];

  uint64_t v7 = [v3 objectForKey:@"descriptor"];
  int v8 = (void *)v7;
  if (!v6 || !v7)
  {
    uint64_t v10 = qword_100A19FE0;
    if (!os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v17) = v6;
    uint64_t v11 = "Send report to AOP (type %d) invalid argument";
LABEL_11:
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, v11, buf, 8u);
    goto LABEL_12;
  }
  if (!*(void *)(a1 + 112))
  {
    uint64_t v10 = qword_100A19FE0;
    if (!os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_12;
    }
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v17) = v6;
    uint64_t v11 = "Send report to AOP (type %d) _device is null";
    goto LABEL_11;
  }
  uint64_t v9 = sub_1004AFCFC();
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 3221225472;
  void v12[2] = sub_1003C5EFC;
  v12[3] = &unk_1009AB678;
  uint64_t v14 = a1;
  char v15 = v6;
  id v13 = v8;
  sub_100013018(v9, v12);

LABEL_12:
}

void sub_1003C5EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_1003C5EFC(uint64_t a1)
{
  id v1 = 0;
  id v3 = (unsigned __int8 *)(a1 + 48);
  int v2 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v4 = *(void *)(a1 + 40);
  v16[0] = 0;
  v16[1] = 0;
  char v17 = 0;
  switch(v2)
  {
    case 1:
      uint64_t v5 = sub_1003C60E4(a1, *(void **)(a1 + 32), v16);
      goto LABEL_6;
    case 2:
      LOBYTE(v16[0]) = 2;
      goto LABEL_9;
    case 3:
      uint64_t v5 = sub_1003C632C(a1, *(void **)(a1 + 32), (uint64_t)v16);
      goto LABEL_6;
    case 5:
      uint64_t v5 = sub_1003C6208(a1, *(void **)(a1 + 32), (uint64_t)v16);
LABEL_6:
      uint64_t v6 = v5;
      goto LABEL_10;
    case 8:
      sub_1003C6644(a1, *(void **)(a1 + 32), v16);
      goto LABEL_9;
    case 10:
      sub_1003C6878(a1, *(void **)(a1 + 32), v16);
LABEL_9:
      uint64_t v6 = 1;
LABEL_10:
      uint64_t v7 = *(void **)(v4 + 112);
      id v11 = 0;
      unsigned __int8 v8 = [v7 setReport:v16 reportLength:17 withIdentifier:0 forType:1 error:&v11];
      id v1 = v11;
      uint64_t v9 = qword_100A19FE0;
      if (v8)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
        {
          int v10 = *v3;
          *(_DWORD *)long long buf = 67109376;
          int v13 = v10;
          __int16 v14 = 2048;
          uint64_t v15 = v6;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Send report to AOP (type %d) success. Return 0x%016llx", buf, 0x12u);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR))
      {
        sub_10075DAF8(v3, (uint64_t)v1, v9);
      }
      break;
    default:
      break;
  }
}

uint64_t sub_1003C60E4(uint64_t a1, void *a2, unsigned char *a3)
{
  id v4 = a2;
  *a3 = 1;
  uint64_t v5 = [v4 objectForKey:@"baseDramWakePeriodSeconds"];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    unsigned int v6 = [v5 unsignedCharValue];
    if (v6) {
      char v7 = v6;
    }
    else {
      char v7 = 60;
    }
    a3[2] = v7;
    uint64_t v8 = 3;
  }
  else
  {
    uint64_t v8 = 1;
  }
  uint64_t v9 = [v4 objectForKey:@"running"];

  if (v9)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      a3[1] = [v9 unsignedCharValue] != 0;
    }
  }

  return v8;
}

void sub_1003C61DC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C6208(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  *(unsigned char *)a3 = 5;
  uint64_t v5 = [v4 objectForKey:@"bufferSize"];
  if (v5)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      unsigned int v6 = [v5 unsignedShortValue];
      if (v6 >= 0x800) {
        __int16 v7 = 2048;
      }
      else {
        __int16 v7 = v6;
      }
      *(_WORD *)(a3 + 1) = v7;
    }
  }
  uint64_t v8 = [v4 objectForKey:@"multiType"];

  if (v8 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    *(unsigned char *)(a3 + 3) = [v8 unsignedCharValue] != 0;
    uint64_t v9 = 5;
  }
  else
  {
    uint64_t v9 = 1;
  }

  return v9;
}

void sub_1003C6300(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C632C(uint64_t a1, void *a2, uint64_t a3)
{
  id v4 = a2;
  *(unsigned char *)a3 = 3;
  *(void *)(a3 + 1) = 0x28000AFFB01F0816;
  *(unsigned char *)(a3 + 9) = 0;
  uint64_t v5 = [v4 objectForKey:@"conf"];
  if (v5 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
  {
    unsigned int v6 = [v5 objectForKey:@"appleType"];
    if (v6)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        *(unsigned char *)(a3 + 1) = [v6 unsignedCharValue];
      }
    }
    __int16 v7 = [v5 objectForKey:@"payloadLengthLimits"];

    if (v7 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0))
    {
      uint64_t v8 = [v7 objectAtIndex:0];
      *(unsigned char *)(a3 + 2) = [v8 unsignedCharValue];

      uint64_t v9 = [v7 objectAtIndex:1];
      *(unsigned char *)(a3 + 3) = [v9 unsignedCharValue];

      uint64_t v10 = 3;
    }
    else
    {
      uint64_t v10 = 1;
    }
    id v11 = [v5 objectForKey:@"rssiLimits"];

    if (v11)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        uint64_t v12 = [v11 objectAtIndex:0];
        *(unsigned char *)(a3 + 4) = [v12 charValue];

        int v13 = [v11 objectAtIndex:1];
        *(unsigned char *)(a3 + 5) = [v13 charValue];

        v10 |= 8uLL;
      }
    }
    __int16 v14 = [v5 objectForKey:@"pktSize"];

    if (v14)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        *(_WORD *)(a3 + 6) = (unsigned __int16)[v14 unsignedShortValue];
        v10 |= 0x20uLL;
      }
    }
    uint64_t v15 = [v5 objectForKey:@"numLines"];

    if (v15)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        unsigned int v16 = [v15 unsignedShortValue];
        if (v16 <= 1) {
          __int16 v17 = 1;
        }
        else {
          __int16 v17 = v16;
        }
        *(_WORD *)(a3 + 8) = v17;
        v10 |= 0x80uLL;
      }
    }
  }
  else
  {
    uint64_t v10 = 1;
  }

  return v10;
}

void sub_1003C65E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C6644(uint64_t a1, void *a2, unsigned char *a3)
{
  id v4 = a2;
  *a3 = 8;
  id v15 = v4;
  uint64_t v5 = [v4 objectForKey:@"TypeToRssiThresholdMapping"];
  if (!v5) {
    goto LABEL_16;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    goto LABEL_16;
  }
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  unsigned int v6 = [v5 allKeys];
  id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
  if (!v7)
  {

    unsigned __int8 v8 = 0;
LABEL_15:
    bzero(&a3[(2 * v8) | 1], 2 * (2 - v8) + 2);
    goto LABEL_16;
  }
  unsigned __int8 v8 = 0;
  uint64_t v9 = *(void *)v17;
  uint64_t v10 = a3 + 1;
  while (2)
  {
    for (id i = 0; i != v7; id i = (char *)i + 1)
    {
      if (*(void *)v17 != v9) {
        objc_enumerationMutation(v6);
      }
      uint64_t v12 = *(void **)(*((void *)&v16 + 1) + 8 * i);
      v10[2 * v8] = [v12 unsignedIntValue];
      int v13 = [v5 objectForKey:v12];
      v10[2 * v8 + 1] = [v13 intValue];

      if (++v8 == 3)
      {

        goto LABEL_16;
      }
    }
    id v7 = [v6 countByEnumeratingWithState:&v16 objects:v20 count:16];
    if (v7) {
      continue;
    }
    break;
  }

  if (v8 <= 2u) {
    goto LABEL_15;
  }
LABEL_16:

  return 1;
}

void sub_1003C682C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C6878(uint64_t a1, void *a2, unsigned char *a3)
{
  *a3 = 10;
  id v4 = [a2 valueForKey:@"log_verbose"];
  uint64_t v5 = v4;
  if (v4) {
    a3[1] = [v4 unsignedIntValue];
  }

  return 1;
}

void sub_1003C68D0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003C68E0(uint64_t a1, int a2, void *a3)
{
  unsigned int v6 = qword_100A19FE0;
  if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Receive report %d from AOP", buf, 8u);
  }
  uint64_t v7 = 3;
  if (a2 && a3)
  {
    if (*(void *)(a1 + 112))
    {
      uint64_t v12 = 0;
      int v13 = &v12;
      uint64_t v14 = 0x2020000000;
      int v15 = 0;
      *(void *)long long buf = 0;
      long long v17 = buf;
      uint64_t v18 = 0x3032000000;
      long long v19 = sub_10004D064;
      uint64_t v20 = sub_10004CE0C;
      id v21 = 0;
      uint64_t v8 = sub_1004AFCFC();
      v10[0] = _NSConcreteStackBlock;
      v10[1] = 3221225472;
      void v10[2] = sub_1003C6AE4;
      v10[3] = &unk_1009AB6A0;
      void v10[5] = buf;
      void v10[6] = a1;
      char v11 = a2;
      void v10[4] = &v12;
      sub_1000197D8(v8, v10);
      uint64_t v7 = *((unsigned int *)v13 + 6);
      if (!v7)
      {
        *a3 = *((id *)v17 + 5);
        uint64_t v7 = *((unsigned int *)v13 + 6);
      }
      _Block_object_dispose(buf, 8);

      _Block_object_dispose(&v12, 8);
    }
    else
    {
      return 22;
    }
  }
  return v7;
}

void sub_1003C6AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,id a26)
{
  _Block_object_dispose(&a17, 8);
  _Unwind_Resume(a1);
}

void sub_1003C6AE4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 48);
  unint64_t v48 = 1093;
  id v3 = (unsigned __int8 *)operator new(0x445uLL);
  bzero(v3 + 1, 0x444uLL);
  int v4 = *(unsigned __int8 *)(a1 + 56);
  unsigned __int8 *v3 = v4;
  switch(v4)
  {
    case 1:
      int v13 = *(void **)(v2 + 112);
      id v47 = 0;
      unsigned __int8 v14 = [v13 getReport:v3 reportLength:&v48 withIdentifier:1 forType:1 error:&v47];
      id v15 = v47;
      id v8 = v15;
      if (v14)
      {
        uint64_t v16 = *(void *)(*(void *)(a1 + 40) + 8);
        long long v17 = *(void **)(v16 + 40);
        uint64_t v10 = (id *)(v16 + 40);
        int v46 = v17;
        sub_1003C6F38((uint64_t)v15, (uint64_t)v3, v48, &v46);
        id v12 = v46;
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
        sub_10075DB84();
      }
      goto LABEL_6;
    case 2:
      uint64_t v18 = *(void **)(v2 + 112);
      id v45 = 0;
      unsigned __int8 v19 = [v18 getReport:v3 reportLength:&v48 withIdentifier:2 forType:1 error:&v45];
      id v20 = v45;
      id v8 = v20;
      if (v19)
      {
        uint64_t v21 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v22 = *(void **)(v21 + 40);
        uint64_t v10 = (id *)(v21 + 40);
        int v44 = v22;
        sub_1003C7200((uint64_t)v20, (uint64_t)v3, v48, &v44);
        id v12 = v44;
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
        sub_10075DBEC();
      }
      goto LABEL_6;
    case 5:
    case 6:
    case 7:
    case 8:
      uint64_t v5 = *(void **)(v2 + 112);
      v43[1] = 0;
      unsigned __int8 v6 = [v5 getReport:v3 reportLength:&v48 withIdentifier:v4 forType:v5 error:&v48];
      id v7 = 0;
      id v8 = v7;
      if (v6)
      {
        uint64_t v9 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v11 = *(void *)(v9 + 40);
        uint64_t v10 = (id *)(v9 + 40);
        v43[0] = v11;
        sub_1003C7520((uint64_t)v7, (uint64_t)v3, v48, v43);
        id v12 = (id)v43[0];
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
        sub_10075DC54();
      }
      goto LABEL_6;
    case 9:
      id v23 = *(void **)(v2 + 112);
      id v42 = 0;
      unsigned __int8 v24 = [v23 getReport:v3 reportLength:&v48 withIdentifier:9 forType:1 error:&v42];
      id v25 = v42;
      id v8 = v25;
      if (v24)
      {
        uint64_t v26 = *(void *)(*(void *)(a1 + 40) + 8);
        uint64_t v27 = *(void **)(v26 + 40);
        uint64_t v10 = (id *)(v26 + 40);
        unint64_t v41 = v27;
        sub_1003C78B8((uint64_t)v25, v3, v48, &v41);
        id v12 = v41;
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
        sub_10075DCBC();
      }
      goto LABEL_6;
    case 10:
      uint64_t v28 = *(void **)(v2 + 112);
      id v40 = 0;
      unsigned __int8 v29 = [v28 getReport:v3 reportLength:&v48 withIdentifier:10 forType:1 error:&v40];
      id v8 = v40;
      if (v29)
      {
        uint64_t v30 = *(void *)(*(void *)(a1 + 40) + 8);
        io_object_t v31 = *(void **)(v30 + 40);
        uint64_t v10 = (id *)(v30 + 40);
        uint64_t v39 = v31;
        sub_1003C7BF8(v2, (uint64_t)v3, v48, &v39);
        id v12 = v39;
        goto LABEL_18;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
        sub_10075DD24();
      }
      goto LABEL_6;
    case 11:
      CFStringRef v32 = *(void **)(v2 + 112);
      id v38 = 0;
      unsigned __int8 v33 = [v32 getReport:v3 reportLength:&v48 withIdentifier:11 forType:1 error:&v38];
      id v34 = v38;
      id v8 = v34;
      if (v33)
      {
        uint64_t v35 = *(void *)(*(void *)(a1 + 40) + 8);
        long long v36 = *(void **)(v35 + 40);
        uint64_t v10 = (id *)(v35 + 40);
        obSCNetworkInterfaceRef j = v36;
        sub_1003C7F0C((uint64_t)v34, (uint64_t)v3, v48, &obj);
        id v12 = obj;
LABEL_18:
        objc_storeStrong(v10, v12);
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_ERROR)) {
          sub_10075DD8C();
        }
LABEL_6:
        *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
      }

LABEL_20:
      operator delete(v3);
      return;
    default:
      *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 2;
      goto LABEL_20;
  }
}

void sub_1003C6EF4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1003C6F38(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3 >= 0x18 && a4)
  {
    id v17 = (id)objc_opt_new();
    unsigned __int8 v6 = +[NSNumber numberWithUnsignedLong:*(unsigned int *)(a2 + 9)];
    [v17 setObject:v6 forKey:@"serviceFlags"];

    id v7 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a2 + 13)];
    [v17 setObject:v7 forKey:@"maxSramSize"];

    id v8 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a2 + 15)];
    [v17 setObject:v8 forKey:@"currentSramSize"];

    uint64_t v9 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 17)];
    [v17 setObject:v9 forKey:@"sramToDramMultiplier"];

    uint64_t v10 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 18)];
    [v17 setObject:v10 forKey:@"baseDramWakePeriodSeconds"];

    uint64_t v11 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 19)];
    [v17 setObject:v11 forKey:@"maxNumMatchTableHandlers"];

    id v12 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 20)];
    [v17 setObject:v12 forKey:@"currentValidMatchTableHandlers"];

    int v13 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a2 + 22)];
    [v17 setObject:v13 forKey:@"currentSramBufferOffset"];

    unsigned __int8 v14 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 21)];
    [v17 setObject:v14 forKey:@"running"];

    id v15 = objc_opt_new();
    uint64_t v16 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 1)];
    [v15 setObject:v16 forKey:@"aop_time"];

    [v15 setObject:v17 forKey:@"ServiceStateReport"];
    *a4 = [v15 copy];
  }
}

void sub_1003C71AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C7200(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3 >= 0x45 && a4)
  {
    unsigned __int8 v19 = a4;
    id v5 = [objc_alloc((Class)NSMutableArray) initWithCapacity:16];
    for (uint64_t i = 0; i != 32; i += 2)
    {
      v20[0] = @"type";
      id v7 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + i + 17), v19, @"type"];
      v20[1] = @"count";
      v21[0] = v7;
      id v8 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + i + 18)];
      v21[1] = v8;
      uint64_t v9 = +[NSDictionary dictionaryWithObjects:v21 forKeys:v20 count:2];
      [v5 addObject:v9];
    }
    uint64_t v10 = objc_opt_new();
    id v11 = [v5 copy];
    [v10 setObject:v11 forKey:@"histSamples"];

    id v12 = objc_opt_new();
    int v13 = +[NSNumber numberWithUnsignedLong:*(unsigned int *)(a2 + 9)];
    [v12 setObject:v13 forKey:@"intervalSeconds"];

    unsigned __int8 v14 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a2 + 13)];
    [v12 setObject:v14 forKey:@"spmiXactions"];

    id v15 = [v10 copy];
    [v12 setObject:v15 forKey:@"tlvHist"];

    uint64_t v16 = objc_opt_new();
    id v17 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 1)];
    [v16 setObject:v17 forKey:@"aop_time"];

    id v18 = [v12 copy];
    [v16 setObject:v18 forKey:@"TelemetryReport"];

    *unsigned __int8 v19 = [v16 copy];
  }
}

void sub_1003C746C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C7520(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3 >= 0x13)
  {
    if (a4)
    {
      unsigned __int8 v6 = objc_opt_new();
      id v7 = +[NSNumber numberWithUnsignedShort:*(unsigned __int8 *)(a2 + 10)];
      [v6 setObject:v7 forKey:@"appleType"];

      id v8 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 11)];
      v23[0] = v8;
      uint64_t v9 = +[NSNumber numberWithUnsignedChar:*(unsigned __int8 *)(a2 + 12)];
      v23[1] = v9;
      uint64_t v10 = +[NSArray arrayWithObjects:v23 count:2];
      [v6 setObject:v10 forKey:@"payloadLengthLimits"];

      id v11 = +[NSNumber numberWithChar:*(unsigned __int8 *)(a2 + 13)];
      v22[0] = v11;
      id v12 = +[NSNumber numberWithChar:*(unsigned __int8 *)(a2 + 14)];
      v22[1] = v12;
      int v13 = +[NSArray arrayWithObjects:v22 count:2];
      [v6 setObject:v13 forKey:@"rssiLimits"];

      unsigned __int8 v14 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a2 + 15)];
      [v6 setObject:v14 forKey:@"pktSize"];

      id v15 = +[NSNumber numberWithUnsignedShort:*(unsigned __int16 *)(a2 + 17)];
      [v6 setObject:v15 forKey:@"numLines"];

      uint64_t v16 = objc_opt_new();
      id v17 = +[NSNumber numberWithUnsignedShort:*(unsigned __int8 *)(a2 + 9)];
      [v16 setObject:v17 forKey:@"handleIndex"];

      id v18 = [v6 copy];
      [v16 setObject:v18 forKey:@"conf"];

      unsigned __int8 v19 = objc_opt_new();
      id v20 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 1)];
      [v19 setObject:v20 forKey:@"aop_time"];

      id v21 = [v16 copy];
      [v19 setObject:v21 forKey:@"MatchTableConfReport"];

      *a4 = [v19 copy];
    }
  }
}

void sub_1003C77E4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003C78B8(uint64_t a1, unsigned __int8 *a2, unint64_t a3, void *a4)
{
  int64_t v4 = a3 - 17;
  if (a3 >= 0x11 && a4)
  {
    int64_t v7 = *(unsigned int *)(a2 + 13);
    if (v4 >= v7)
    {
      id v20 = (id)objc_opt_new();
      uint64_t v9 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 9)];
      [v20 setObject:v9 forKey:@"cacheSize"];

      uint64_t v10 = +[NSNumber numberWithUnsignedInt:*(unsigned int *)(a2 + 13)];
      [v20 setObject:v10 forKey:@"reportLength"];

      if (*(_DWORD *)(a2 + 13) >= 0x30u)
      {
        uint64_t v11 = 0;
        id v12 = a2 + 17;
        unsigned int v13 = *(_DWORD *)(a2 + 13);
        do
        {
          unsigned __int8 v14 = +[NSData dataWithBytes:v12 length:48];
          id v15 = +[NSString stringWithFormat:@"cacheline%02d", v11];
          [v20 setObject:v14 forKey:v15];

          ++v11;
          v12 += 48;
        }
        while (v13 / 0x30uLL != v11);
      }
      uint64_t v16 = objc_opt_new();
      id v17 = +[NSNumber numberWithUnsignedInt:*a2];
      [v16 setObject:v17 forKey:@"type"];

      id v18 = +[NSNumber numberWithUnsignedLongLong:*(void *)(a2 + 1)];
      [v16 setObject:v18 forKey:@"aop_time"];

      id v19 = [v20 copy];
      [v16 setObject:v19 forKey:@"BtProxCtxCacheFetchReport"];

      *a4 = [v16 copy];
    }
    else
    {
      id v8 = qword_100A19FE0;
      if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        int v22 = v7;
        __int16 v23 = 2048;
        int64_t v24 = v4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "invalid BtProxCtxCacheFetchReport reportLength : %d/%ld", buf, 0x12u);
      }
    }
  }
}

void sub_1003C7B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
}

void sub_1003C7BF8(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3 >= 0xF && a4)
  {
    id v18 = objc_opt_new();
    uint64_t v6 = 0;
    int64_t v7 = (void *)(a1 + 128);
    do
    {
      uint64_t v8 = *(char *)(a2 + v6 + 10);
      unsigned __int8 v19 = *(unsigned char *)(a2 + v6 + 9);
      id v9 = objc_alloc((Class)NSNumber);
      id v10 = [v9 initWithUnsignedInt:v19];
      uint64_t v11 = +[NSNumber numberWithInt:v8];
      id v12 = [v10 stringValue];
      [v18 setObject:v11 forKey:v12];

      if (sub_10026D430(v7, &v19))
      {
        unsigned int v13 = qword_100A19FE0;
        if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "void AOPInterfaceManager::_parseGetReportTypeToRssiThresholdMapFetch(const GetReportPacke"
                               "t &, NSInteger, NSDictionary *__autoreleasing *)";
          __int16 v21 = 1024;
          int v22 = v19;
          __int16 v23 = 1024;
          int v24 = v8;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s updating lower bound RSSI for type %d to %+d", buf, 0x18u);
        }
        *(void *)long long buf = &v19;
        *((float *)sub_1003C8040((uint64_t)v7, &v19, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 8) = (float)(int)v8;
        *(void *)long long buf = &v19;
        float v14 = *((float *)sub_1003C8040((uint64_t)v7, &v19, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 9);
        *(void *)long long buf = &v19;
        if (v14 < *((float *)sub_1003C8040((uint64_t)v7, &v19, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 8))
        {
          *(void *)long long buf = &v19;
          int v15 = *((_DWORD *)sub_1003C8040((uint64_t)v7, &v19, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 8);
          *(void *)long long buf = &v19;
          *((_DWORD *)sub_1003C8040((uint64_t)v7, &v19, (uint64_t)&unk_1007BE9D0, (unsigned char **)buf) + 9) = v15;
        }
      }

      v6 += 2;
    }
    while (v6 != 6);
    uint64_t v16 = qword_100A19FE0;
    if (os_log_type_enabled((os_log_t)qword_100A19FE0, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "dPayload : %@", buf, 0xCu);
    }
    *a4 = [v18 copy];
  }
}

void sub_1003C7EC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  _Unwind_Resume(a1);
}

void sub_1003C7F0C(uint64_t a1, uint64_t a2, unint64_t a3, void *a4)
{
  if (a3 >= 0xA && a4)
  {
    id v7 = (id)objc_opt_new();
    id v6 = [objc_alloc((Class)NSNumber) initWithUnsignedInt:*(unsigned __int8 *)(a2 + 9)];
    [v7 setObject:v6 forKey:@"log_verbose"];

    *a4 = [v7 copy];
  }
}

void sub_1003C7FB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003C7FD8(id a1)
{
}

void sub_1003C801C()
{
}

void *sub_1003C8040(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned char **a4)
{
  unint64_t v6 = *a2;
  unint64_t v7 = *(void *)(a1 + 8);
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = *a2;
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
    id v10 = *(void ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v6)
          {
            if (*((unsigned __int8 *)v11 + 16) == v6) {
              return v11;
            }
          }
          else
          {
            if (v8.u32[0] > 1uLL)
            {
              if (v12 >= v7) {
                v12 %= v7;
              }
            }
            else
            {
              v12 &= v7 - 1;
            }
            if (v12 != v9) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  else
  {
    unint64_t v9 = 0;
  }
  uint64_t v11 = operator new(0x28uLL);
  *uint64_t v11 = 0;
  v11[1] = v6;
  *((unsigned char *)v11 + 16) = **a4;
  *((_DWORD *)v11 + 9) = 0;
  *(void *)((char *)v11 + 20) = 0;
  *(void *)((char *)v11 + 28) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    BOOL v15 = 1;
    if (v7 >= 3) {
      BOOL v15 = (v7 & (v7 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v7);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_1000A9204(a1, v18);
    unint64_t v7 = *(void *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6) {
        unint64_t v9 = v6 % v7;
      }
      else {
        unint64_t v9 = v6;
      }
    }
    else
    {
      unint64_t v9 = (v7 - 1) & v6;
    }
  }
  uint64_t v19 = *(void *)a1;
  id v20 = *(void **)(*(void *)a1 + 8 * v9);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    void *v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v9) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v21 >= v7) {
        v21 %= v7;
      }
    }
    else
    {
      v21 &= v7 - 1;
    }
    id v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void sub_1003C8260(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_1003C8274(uint64_t a1, char *__src, char *a3)
{
  id v3 = a3;
  int64_t v4 = __src;
  unint64_t v6 = *(char **)(a1 + 8);
  uint64_t v8 = a1 + 16;
  unint64_t v7 = *(void *)(a1 + 16);
  if ((unint64_t)v6 >= v7)
  {
    float v13 = *(char **)a1;
    unint64_t v14 = ((uint64_t)&v6[-*(void *)a1] >> 3) + 1;
    if (v14 >> 61) {
      abort();
    }
    uint64_t v15 = __src - v13;
    uint64_t v16 = (__src - v13) >> 3;
    uint64_t v17 = v7 - (void)v13;
    if (v17 >> 2 > v14) {
      unint64_t v14 = v17 >> 2;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v14;
    }
    uint64_t v30 = a1 + 16;
    if (v18) {
      uint64_t v19 = (char *)sub_1000405F8(a1 + 16, v18);
    }
    else {
      uint64_t v19 = 0;
    }
    id v20 = &v19[8 * v16];
    long long __p = v19;
    uint64_t v27 = v20;
    uint64_t v28 = v20;
    unsigned __int8 v29 = &v19[8 * v18];
    if (v16 == v18)
    {
      if (v15 < 1)
      {
        if (v13 == v4) {
          unint64_t v22 = 1;
        }
        else {
          unint64_t v22 = v15 >> 2;
        }
        __int16 v23 = (char *)sub_1000405F8(v8, v22);
        id v20 = &v23[8 * (v22 >> 2)];
        long long __p = v23;
        uint64_t v27 = v20;
        unsigned __int8 v29 = &v23[8 * v24];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        unint64_t v21 = v16 + 2;
        if (v16 >= -1) {
          unint64_t v21 = v16 + 1;
        }
        v20 -= 8 * (v21 >> 1);
        uint64_t v27 = v20;
      }
    }
    *(void *)id v20 = *(void *)v3;
    uint64_t v28 = v20 + 8;
    int64_t v4 = sub_100061614((void **)a1, (uint64_t)&__p, v4);
    if (v28 != v27) {
      v28 += (v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8;
    }
    if (__p) {
      operator delete(__p);
    }
  }
  else if (__src == v6)
  {
    *(void *)long long __src = *(void *)a3;
    *(void *)(a1 + 8) = __src + 8;
  }
  else
  {
    unint64_t v9 = __src + 8;
    id v10 = v6 - 8;
    uint64_t v11 = *(void **)(a1 + 8);
    while (v10 < v6)
    {
      uint64_t v12 = *(void *)v10;
      v10 += 8;
      *v11++ = v12;
    }
    *(void *)(a1 + 8) = v11;
    if (v6 != v9) {
      memmove(&v6[-8 * ((v6 - v9) >> 3)], __src, v6 - v9);
    }
    if (v4 <= v3) {
      v3 += 8 * (*(void *)(a1 + 8) > (unint64_t)v3);
    }
    *(void *)int64_t v4 = *(void *)v3;
  }
  return v4;
}

void sub_1003C847C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003C84B4(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    sub_1003C8530(a1, 0x6DB6DB6DB6DB6DB7 * (v5 >> 3));
    unint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *sub_1003C8530(void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    abort();
  }
  unint64_t result = (char *)sub_100378AFC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

char *sub_1003C8584(uint64_t a1, char *__dst, char *__src, char *a4, uint64_t a5)
{
  int64_t v5 = __dst;
  if (a5 < 1) {
    return v5;
  }
  uint64_t v6 = a5;
  unint64_t v7 = __src;
  id v10 = *(char **)(a1 + 8);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9 - (uint64_t)v10 < a5)
  {
    uint64_t v11 = *(char **)a1;
    uint64_t v12 = (uint64_t)&v10[a5 - *(void *)a1];
    if (v12 < 0) {
      abort();
    }
    float v13 = (char *)(__dst - v11);
    unint64_t v14 = v9 - (void)v11;
    if (2 * v14 > v12) {
      uint64_t v12 = 2 * v14;
    }
    if (v14 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v15 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = operator new(v15);
    }
    else {
      uint64_t v16 = 0;
    }
    uint64_t v26 = &v13[(void)v16];
    uint64_t v27 = &v13[(void)v16 + v6];
    uint64_t v28 = v26;
    do
    {
      char v29 = *v7++;
      *v28++ = v29;
      --v6;
    }
    while (v6);
    uint64_t v30 = *(char **)a1;
    if (*(char **)a1 == v5)
    {
      CFStringRef v32 = v26;
    }
    else
    {
      io_object_t v31 = v5;
      CFStringRef v32 = v26;
      do
      {
        char v33 = *--v31;
        *--CFStringRef v32 = v33;
      }
      while (v31 != v30);
      id v10 = *(char **)(a1 + 8);
    }
    id v34 = (char *)v16 + v15;
    if (v10 != v5) {
      memmove(v27, v5, v10 - v5);
    }
    uint64_t v35 = *(char **)a1;
    *(void *)a1 = v32;
    *(void *)(a1 + 8) = &v27[v10 - v5];
    *(void *)(a1 + 16) = v34;
    if (v35) {
      operator delete(v35);
    }
    return v26;
  }
  uint64_t v17 = v10 - __dst;
  if (v10 - __dst >= a5)
  {
    unint64_t v18 = &__src[a5];
    id v20 = *(char **)(a1 + 8);
LABEL_17:
    unint64_t v21 = &v5[v6];
    unint64_t v22 = &v20[-v6];
    __int16 v23 = v20;
    if (&v20[-v6] < v10)
    {
      int64_t v24 = &v10[v6] - v20;
      __int16 v23 = v20;
      do
      {
        char v25 = *v22++;
        *v23++ = v25;
        --v24;
      }
      while (v24);
    }
    *(void *)(a1 + 8) = v23;
    if (v20 != v21) {
      memmove(&v5[v6], v5, v20 - v21);
    }
    if (v18 != v7) {
      memmove(v5, v7, v18 - v7);
    }
    return v5;
  }
  unint64_t v18 = &__src[v17];
  int64_t v19 = a4 - &__src[v17];
  if (a4 != &__src[v17]) {
    memmove(*(void **)(a1 + 8), &__src[v17], a4 - &__src[v17]);
  }
  id v20 = &v10[v19];
  *(void *)(a1 + 8) = &v10[v19];
  if (v17 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

uint64_t sub_1003C8778(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075DDF4();
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 8);
  uint64_t v6 = *(void **)(a1 + 80);
  unint64_t v7 = (void *)(a1 + 88);
  if (v6 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v8 = v6[4];
      if (v8 && *(unsigned char *)(*(void *)(v8 + 48) + 160))
      {
        uint64_t v9 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = *(void *)(v8 + 32);
          *(_DWORD *)long long buf = 134218752;
          uint64_t v21 = a2;
          __int16 v22 = 1024;
          unsigned int v23 = a3;
          __int16 v24 = 1024;
          int v25 = a4;
          __int16 v26 = 2048;
          uint64_t v27 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::BTLocalDeviceStatusEventCallback localDevice:%llx event:%d result:%d cbid:%llx", buf, 0x22u);
        }
        xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
        uint64_t v11 = v10;
        if (v10)
        {
          xpc_dictionary_set_uint64(v10, "kCBMsgArgID", *(void *)(v8 + 32));
          xpc_dictionary_set_uint64(v11, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgResult", a4);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgEvent", a3);
          sub_1002D7B48(*(void *)(v8 + 48), "kCBMsgIdLocalDeviceStatusEvent", v11, 1);
        }
      }
      uint64_t v12 = (void *)v6[1];
      if (v12)
      {
        do
        {
          float v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          float v13 = (void *)v6[2];
          BOOL v14 = *v13 == (void)v6;
          uint64_t v6 = v13;
        }
        while (!v14);
      }
      uint64_t v6 = v13;
    }
    while (v13 != v7);
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1003C89B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1003C89CC(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 8);
  unint64_t v7 = *(void **)(a1 + 80);
  if (v7 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v8 = v7[4];
      if (v8 && *(unsigned char *)(*(void *)(v8 + 48) + 160))
      {
        uint64_t v9 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v15 = *(void *)(v8 + 32);
          *(_DWORD *)long long buf = 134218752;
          uint64_t v20 = a2;
          __int16 v21 = 1024;
          int v22 = a3;
          __int16 v23 = 2048;
          uint64_t v24 = a4;
          __int16 v25 = 2048;
          uint64_t v26 = v15;
          _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::BTLocalDeviceLeTestStoppedCallback localDevice:%llx result:%d nbPackets:%lld cbid:%llx", buf, 0x26u);
        }
        xpc_object_t v10 = xpc_dictionary_create(0, 0, 0);
        uint64_t v11 = v10;
        if (v10)
        {
          xpc_dictionary_set_uint64(v10, "kCBMsgArgID", *(void *)(v8 + 32));
          xpc_dictionary_set_uint64(v11, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgResult", a3);
          xpc_dictionary_set_uint64(v11, "kCBMsgArgNumberOfPackets", a4);
          sub_1002D7B48(*(void *)(v8 + 48), "kCBMsgIdLocalDeviceLETestStoppedEvent", v11, 1);
        }
      }
      uint64_t v12 = (void *)v7[1];
      if (v12)
      {
        do
        {
          float v13 = v12;
          uint64_t v12 = (void *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          float v13 = (void *)v7[2];
          BOOL v14 = *v13 == (void)v7;
          unint64_t v7 = v13;
        }
        while (!v14);
      }
      unint64_t v7 = v13;
    }
    while (v13 != (void *)(a1 + 88));
  }
  return sub_10003AFB4((uint64_t)v18);
}

void sub_1003C8BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1003C8BF8(uint64_t a1, uint64_t a2, int a3, uint64_t a4, const void *a5)
{
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  uint64_t v9 = *(void **)(a1 + 80);
  if (v9 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v10 = v9[4];
      if (v10 && *(unsigned char *)(*(void *)(v10 + 48) + 160))
      {
        uint64_t v11 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v17 = *(void *)(v10 + 32);
          *(_DWORD *)long long buf = 134218752;
          uint64_t v22 = a2;
          __int16 v23 = 1024;
          int v24 = a3;
          __int16 v25 = 2048;
          uint64_t v26 = a4;
          __int16 v27 = 2048;
          uint64_t v28 = v17;
          _os_log_debug_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::BTLocalDeviceAFHMapChangedCallback localDevice:%llx result:%d remoteDevice:%llx cbid:%llx", buf, 0x26u);
        }
        xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
        float v13 = v12;
        if (v12)
        {
          xpc_dictionary_set_uint64(v12, "kCBMsgArgID", *(void *)(v10 + 32));
          xpc_dictionary_set_uint64(v13, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v13, "kCBMsgArgResult", a3);
          xpc_dictionary_set_uint64(v13, "kCBMsgArgBTDevice", a4);
          xpc_dictionary_set_data(v13, "kCBMsgArgAFHMap", a5, 0xAuLL);
          sub_1002D7B48(*(void *)(v10 + 48), "kCBMsgIdLocalDeviceAFHMapChangedEvent", v13, 1);
        }
      }
      BOOL v14 = (void *)v9[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          BOOL v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v9[2];
          BOOL v16 = *v15 == (void)v9;
          uint64_t v9 = v15;
        }
        while (!v16);
      }
      uint64_t v9 = v15;
    }
    while (v15 != (void *)(a1 + 88));
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1003C8E1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
}

uint64_t sub_1003C8E38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v16[0] = 0;
  v16[1] = 0;
  sub_10003AED0((uint64_t)v16, a1 + 8);
  uint64_t v6 = *(void **)(a1 + 80);
  if (v6 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v7 = v6[4];
      if (v7 && *(unsigned char *)(*(void *)(v7 + 48) + 160))
      {
        uint64_t v8 = qword_100A19EC8;
        if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
        {
          uint64_t v14 = *(void *)(v7 + 32);
          *(_DWORD *)long long buf = 134218496;
          uint64_t v18 = a2;
          __int16 v19 = 2048;
          uint64_t v20 = a3;
          __int16 v21 = 2048;
          uint64_t v22 = v14;
          _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::BTLocalDeviceLinkModeChangedCallback localDevice:%llx device:%llx cbid:%llx", buf, 0x20u);
        }
        xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
        uint64_t v10 = v9;
        if (v9)
        {
          xpc_dictionary_set_uint64(v9, "kCBMsgArgID", *(void *)(v7 + 32));
          xpc_dictionary_set_uint64(v10, "kCBMsgArgLocalDeviceID", a2);
          xpc_dictionary_set_uint64(v10, "kCBMsgArgBTDevice", a3);
          sub_1002D7B48(*(void *)(v7 + 48), "kCBMsgIdLocalDeviceLinkModeChangedEvent", v10, 1);
        }
      }
      uint64_t v11 = (void *)v6[1];
      if (v11)
      {
        do
        {
          xpc_object_t v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          xpc_object_t v12 = (void *)v6[2];
          BOOL v13 = *v12 == (void)v6;
          uint64_t v6 = v12;
        }
        while (!v13);
      }
      uint64_t v6 = v12;
    }
    while (v12 != (void *)(a1 + 88));
  }
  return sub_10003AFB4((uint64_t)v16);
}

void sub_1003C9018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t sub_1003C9034(uint64_t result, unsigned int a2, int a3, uint64_t a4)
{
  if (a4) {
    return sub_1003C8778(a4, result, a2, a3);
  }
  return result;
}

uint64_t sub_1003C9054(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a3) {
    return sub_1003C8E38(a3, result, a2);
  }
  return result;
}

uint64_t sub_1003C9070(uint64_t result, int a2, unsigned int a3, uint64_t a4)
{
  if (a4) {
    return sub_1003C89CC(a4, result, a2, a3);
  }
  return result;
}

uint64_t sub_1003C9090(uint64_t result, int a2, uint64_t a3, const void *a4, uint64_t a5)
{
  if (a5) {
    return sub_1003C8BF8(a5, result, a2, a3, a4);
  }
  return result;
}

void *sub_1003C90B4(void *a1, uint64_t a2)
{
  uint64_t v3 = sub_1004EEEA8(a1, a2);
  void *v3 = &off_1009AB6F0;
  v3[12] = 0;
  v3[11] = 0;
  v3[10] = v3 + 11;
  *((unsigned char *)v3 + 104) = 0;
  *((unsigned char *)v3 + 106) = 0;
  if (qword_100A125E0 != -1) {
    dispatch_once(&qword_100A125E0, &stru_1009AB710);
  }
  return a1;
}

void sub_1003C9138(id a1)
{
  double v54 = "kCBMsgIdLocalDeviceGetDefaultMsg";
  uint64_t v55 = 32;
  __int16 v56 = &v54;
  id v1 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v1[4] = sub_1003C9E70;
  void v1[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceAddCallbacksMsg";
  uint64_t v55 = 34;
  __int16 v56 = &v54;
  uint64_t v2 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v2[4] = sub_1003CA068;
  v2[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceRemoveCallbacksMsg";
  uint64_t v55 = 37;
  __int16 v56 = &v54;
  uint64_t v3 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v3[4] = sub_1003CA384;
  void v3[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceMaskCallbacks";
  uint64_t v55 = 32;
  __int16 v56 = &v54;
  uint64_t v4 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v4[4] = sub_1003CA65C;
  void v4[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceSetModulePowerMsg";
  uint64_t v55 = 36;
  __int16 v56 = &v54;
  int64_t v5 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v5[4] = sub_1003CA778;
  void v5[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetModulePowerMsg";
  uint64_t v55 = 36;
  __int16 v56 = &v54;
  uint64_t v6 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v6[4] = sub_1003CA8EC;
  void v6[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetSpatialPlatformSupportMsg";
  uint64_t v55 = 47;
  __int16 v56 = &v54;
  uint64_t v7 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v7[4] = sub_1003CAA24;
  void v7[5] = 0;
  double v54 = "kCBMsgIdLocalDevicePowerResetMsg";
  uint64_t v55 = 32;
  __int16 v56 = &v54;
  uint64_t v8 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v8[4] = sub_1003CAB10;
  void v8[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetAirplaneModeStatusMsg";
  uint64_t v55 = 43;
  __int16 v56 = &v54;
  xpc_object_t v9 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v9[4] = sub_1003CABD8;
  void v9[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetAddressStringMsg";
  uint64_t v55 = 38;
  __int16 v56 = &v54;
  uint64_t v10 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v10[4] = sub_1003CACC4;
  void v10[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetNameMsg";
  uint64_t v55 = 29;
  __int16 v56 = &v54;
  uint64_t v11 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v11[4] = sub_1003CAE48;
  v11[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceSetDiscoverableMsg";
  uint64_t v55 = 37;
  __int16 v56 = &v54;
  xpc_object_t v12 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v12[4] = sub_1003CB014;
  v12[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetDiscoverableMsg";
  uint64_t v55 = 37;
  __int16 v56 = &v54;
  BOOL v13 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v13[4] = sub_1003CB104;
  void v13[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceSetConnectableMsg";
  uint64_t v55 = 36;
  __int16 v56 = &v54;
  uint64_t v14 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v14[4] = sub_1003CB1F0;
  void v14[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetConnectableMsg";
  uint64_t v55 = 36;
  __int16 v56 = &v54;
  uint64_t v15 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v15[4] = sub_1003CB2E0;
  v15[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetPairingStatusMsg";
  uint64_t v55 = 38;
  __int16 v56 = &v54;
  BOOL v16 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v16[4] = sub_1003CB3CC;
  unsigned char v16[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetPairedDevicesMsg";
  uint64_t v55 = 38;
  __int16 v56 = &v54;
  uint64_t v17 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v17[4] = sub_1003CB4B8;
  void v17[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetConnectionStatusMsg";
  uint64_t v55 = 41;
  __int16 v56 = &v54;
  uint64_t v18 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v18[4] = sub_1003CB688;
  v18[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetConnectedDevicesMsg";
  uint64_t v55 = 41;
  __int16 v56 = &v54;
  __int16 v19 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v19[4] = sub_1003CB774;
  v19[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetConnectingDevicesMsg";
  uint64_t v55 = 42;
  __int16 v56 = &v54;
  uint64_t v20 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v20[4] = sub_1003CB930;
  void v20[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetAdvertisingStatusMsg";
  uint64_t v55 = 42;
  __int16 v56 = &v54;
  __int16 v21 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v21[4] = sub_1003CBAEC;
  void v21[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetScanningMsg";
  uint64_t v55 = 33;
  __int16 v56 = &v54;
  uint64_t v22 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v22[4] = sub_1003CBBD8;
  v22[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceEnableDUTModeMsg";
  uint64_t v55 = 35;
  __int16 v56 = &v54;
  __int16 v23 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v23[4] = sub_1003CBCC4;
  v23[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetDUTModeEnabledMsg";
  uint64_t v55 = 39;
  __int16 v56 = &v54;
  int v24 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v24[4] = sub_1003CBD74;
  v24[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceEnableLeTxTestModeMsg";
  uint64_t v55 = 40;
  __int16 v56 = &v54;
  __int16 v25 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  uint8_t v25[4] = sub_1003CBE60;
  v25[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceEnableLeRxTestModeMsg";
  uint64_t v55 = 40;
  __int16 v56 = &v54;
  uint64_t v26 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v26[4] = sub_1003CBFFC;
  v26[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceDisableLeTestModeMsg";
  uint64_t v55 = 39;
  __int16 v56 = &v54;
  __int16 v27 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  _OWORD v27[4] = sub_1003CC0EC;
  v27[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceSupportsServiceMsg";
  uint64_t v55 = 37;
  __int16 v56 = &v54;
  uint64_t v28 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v28[4] = sub_1003CC1B4;
  v28[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceAdvertiseDataMsg";
  uint64_t v55 = 35;
  __int16 v56 = &v54;
  char v29 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v29[4] = sub_1003CC2C8;
  v29[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceRemoveDataMsg";
  uint64_t v55 = 32;
  __int16 v56 = &v54;
  uint64_t v30 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v30[4] = sub_1003CC3F0;
  v30[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceRegisterForPowerUpdatesMsg";
  uint64_t v55 = 45;
  __int16 v56 = &v54;
  io_object_t v31 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v31[4] = sub_1003CC518;
  void v31[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceUnregisterForPowerUpdatesMsg";
  uint64_t v55 = 47;
  __int16 v56 = &v54;
  CFStringRef v32 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v32[4] = sub_1003CC818;
  void v32[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceReadPowerConsumptionMsg";
  uint64_t v55 = 42;
  __int16 v56 = &v54;
  char v33 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v33[4] = sub_1003CCAD4;
  v33[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceRegisterForPowerProfileStatisticsMsg";
  uint64_t v55 = 55;
  __int16 v56 = &v54;
  id v34 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v34[4] = sub_1003CCBC0;
  v34[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceUnregisterForPowerProfileStatisticsMsg";
  uint64_t v55 = 57;
  __int16 v56 = &v54;
  uint64_t v35 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v35[4] = sub_1003CCEC0;
  v35[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceReadPowerProfileStatisticsMsg";
  uint64_t v55 = 48;
  __int16 v56 = &v54;
  long long v36 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v36[4] = sub_1003CD17C;
  _DWORD v36[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceReadEnhancedPowerProfileStatisticsMsg";
  uint64_t v55 = 56;
  __int16 v56 = &v54;
  long long v37 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v37[4] = sub_1003CD2D4;
  v37[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceReadTransportSwitchStatisticsMsg";
  uint64_t v55 = 51;
  __int16 v56 = &v54;
  id v38 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v38[4] = sub_1003CD40C;
  v38[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceReadDetailedPowerProfileStatisticsMsg";
  uint64_t v55 = 56;
  __int16 v56 = &v54;
  uint64_t v39 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v39[4] = sub_1003CD564;
  v39[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceStartHCITracesMsg";
  uint64_t v55 = 36;
  __int16 v56 = &v54;
  id v40 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v40[4] = sub_1003CD7CC;
  v40[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceStopHCITracesMsg";
  uint64_t v55 = 35;
  __int16 v56 = &v54;
  unint64_t v41 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v41[4] = sub_1003CD894;
  v41[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceShowPowerPromptMsg";
  uint64_t v55 = 37;
  __int16 v56 = &v54;
  id v42 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  void v42[4] = sub_1003CDA5C;
  v42[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceSetAFHMapMsg";
  uint64_t v55 = 31;
  __int16 v56 = &v54;
  uint64_t v43 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v43[4] = sub_1003CDB48;
  v43[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceReadAFHMapMsg";
  uint64_t v55 = 32;
  __int16 v56 = &v54;
  int v44 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v44[4] = sub_1003CDC8C;
  v44[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceSetDelayedWakeMsg";
  uint64_t v55 = 36;
  __int16 v56 = &v54;
  id v45 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v45[4] = sub_1003CDD78;
  v45[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceSetDenylistEnabledMsg";
  uint64_t v55 = 40;
  __int16 v56 = &v54;
  int v46 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v46[4] = sub_1003CDE30;
  v46[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetDenylistEnabledMsg";
  uint64_t v55 = 40;
  __int16 v56 = &v54;
  id v47 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v47[4] = sub_1003CDF1C;
  v47[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetDeviceNamesThatMayBeDenylistedMsg";
  uint64_t v55 = 55;
  __int16 v56 = &v54;
  unint64_t v48 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v48[4] = sub_1003CE008;
  v48[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceGetSharingAddressesMsg";
  uint64_t v55 = 41;
  __int16 v56 = &v54;
  char v49 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v49[4] = sub_1003CE1D0;
  v49[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceIsSharingEnabledMsg";
  uint64_t v55 = 38;
  __int16 v56 = &v54;
  uint64_t v50 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v50[4] = sub_1003CE39C;
  v50[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceDumpExposureNotificationDatabaseMsg";
  uint64_t v55 = 54;
  __int16 v56 = &v54;
  uint64_t v51 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v51[4] = sub_1003CE488;
  v51[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceLinkQualityGetDataMsg";
  uint64_t v55 = 40;
  __int16 v56 = &v54;
  long long v52 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v52[4] = sub_1003CE60C;
  v52[5] = 0;
  double v54 = "kCBMsgIdLocalDeviceSetCallScreeningMsg";
  uint64_t v55 = 38;
  __int16 v56 = &v54;
  uint64_t v53 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v54, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v56);
  v53[4] = sub_1003CE8A0;
  v53[5] = 0;
}

void sub_1003C9E70(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075DE78();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_11:
    uint64_t v6 = 1;
    goto LABEL_12;
  }
  if (!uint64) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v13 = 0;
  LODWORD(v6) = sub_10046A828(uint64, &v13);
  uunsigned __int8 int64 = 0;
  if (!v6)
  {
    uunsigned __int8 int64 = v13;
    uint64_t v7 = *(void *)(a1 + 72);
    int v8 = *(_DWORD *)(v7 + 40);
    au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
    uint64_t v10 = qword_100A19EC8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)long long buf = 134218496;
      unint64_t v15 = v13;
      __int16 v16 = 1024;
      int v17 = v8;
      __int16 v18 = 2048;
      uint64_t v19 = asid;
      _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "Adding identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
    }
    if (qword_1009F8168 != -1) {
      dispatch_once(&qword_1009F8168, &stru_1009AB730);
    }
    sub_100553778(qword_1009F8160, v13, v8, asid);
  }
  uint64_t v6 = (int)v6;
LABEL_12:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgLocalDeviceID", uint64);
    xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

uint64_t sub_1003CA068(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075DEE0();
  }
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    int v17 = 1;
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AB730);
  }
  if (sub_100553A48(qword_1009F8160, uint64, v8, asid))
  {
    uint64_t v11 = *(void **)(a1 + 80);
    if (v11 != (void *)(a1 + 88))
    {
      do
      {
        uint64_t v12 = v11[4];
        if (*(void *)(v12 + 32) == v6 && *(void *)(v12 + 40) == uint64) {
          goto LABEL_20;
        }
        uint64_t v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }
          while (!v15);
        }
        uint64_t v11 = v14;
      }
      while (v14 != (void *)(a1 + 88));
    }
    __int16 v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040AF0111D3uLL);
    *(void *)long long buf = v16;
    void v16[4] = v6;
    unsigned char v16[5] = uint64;
    void v16[2] = sub_1003C9090;
    v16[1] = sub_1003C9070;
    *__int16 v16 = sub_1003C9034;
    v16[6] = *(void *)(a1 + 72);
    sub_100051620((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(unsigned char *)(a1 + 104))
    {
      int v17 = 0;
    }
    else
    {
      int v17 = sub_10046A954(uint64, *(long long **)buf, a1);
      *(unsigned char *)(a1 + 104) = 1;
    }
  }
  else
  {
    int v17 = 7;
  }
LABEL_23:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v19);
    xpc_release(v19);
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1003CA360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003CA384(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075DF7C();
  }
  v20[0] = 0;
  v20[1] = 0;
  sub_10003AED0((uint64_t)v20, a1 + 8);
  if (!uint64) {
    goto LABEL_21;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v22 = 1024;
    int v23 = v8;
    __int16 v24 = 2048;
    uint64_t v25 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AB730);
  }
  if (sub_100553A48(qword_1009F8160, uint64, v8, asid))
  {
    uint64_t v11 = *(void **)(a1 + 80);
    if (v11 == (void *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075DF48();
      }
      int v16 = 3;
    }
    else
    {
      while (1)
      {
        uint64_t v12 = v11[4];
        if (*(void *)(v12 + 32) == v6 && *(void *)(v12 + 40) == uint64) {
          break;
        }
        uint64_t v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }
          while (!v15);
        }
        uint64_t v11 = v14;
        if (v14 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }
      *(void *)long long buf = v11[4];
      if (*(unsigned char *)(a1 + 104))
      {
        int v16 = sub_10046A9F0(uint64, (long long *)v12);
        *(unsigned char *)(a1 + 104) = 0;
      }
      else
      {
        int v16 = 0;
      }
      sub_1000517A4(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }
  else
  {
LABEL_21:
    int v16 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  __int16 v18 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v16);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v18);
    xpc_release(v18);
  }
  return sub_10003AFB4((uint64_t)v20);
}

void sub_1003CA638(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003CA65C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceEventMask");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075DFE4();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v7 = 1;
    goto LABEL_8;
  }
  if (!uint64) {
    goto LABEL_7;
  }
LABEL_3:
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AB730);
  }
  sub_100554494(qword_1009F8160, uint64, v6);
  uint64_t v7 = 0;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CA778(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTPowerModule");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTPowerMode");
  int v8 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    int v12 = 134218496;
    uint64_t v13 = uint64;
    __int16 v14 = 2048;
    uint64_t v15 = v6;
    __int16 v16 = 2048;
    uint64_t v17 = v7;
    _os_log_debug_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::handleBTLocalDeviceSetModulePowerMsg localDeviceId:%llx module:%llx powerOn:%llx", (uint8_t *)&v12, 0x20u);
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_10046AA78(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v9 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1003CA8EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTPowerModule");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E0C8();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_7:
    uunsigned __int8 int64 = 1;
    goto LABEL_8;
  }
  if (!uint64) {
    goto LABEL_7;
  }
LABEL_3:
  LODWORD(uint64) = sub_10046AE3C(uint64, v6, (int *)&value);
  uint64_t v7 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075E04C((int *)&value, v7);
  }
  uunsigned __int8 int64 = (int)uint64;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", uint64);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBTPowerMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CAA24(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E130();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046ADD4(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgSpatialPlatformSupport", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CAB10(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E198();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046B0F0(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CABD8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E200();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046B26C(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgAirplaneMode", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CACC4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v13 - v8;
  bzero((char *)&v13 - v8, v6);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E268();
    if (uint64)
    {
LABEL_3:
      if (*(int *)(*(void *)(a1 + 72) + 80) < 1) {
        uint64_t v10 = 13;
      }
      else {
        uint64_t v10 = (int)sub_10046B300(uint64, v9, v6);
      }
      goto LABEL_8;
    }
  }
  else if (uint64)
  {
    goto LABEL_3;
  }
  uint64_t v10 = 1;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_string(v12, "kCBMsgArgAddressString", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1003CAE48(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(&__p, 0, sizeof(__p));
  sub_10004191C(&__p, "");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E2D0();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_14:
    int v8 = 1;
    goto LABEL_15;
  }
  if (!uint64) {
    goto LABEL_14;
  }
LABEL_3:
  if (qword_1009F7EB0 != -1) {
    dispatch_once(&qword_1009F7EB0, &stru_1009AB750);
  }
  uint64_t v7 = sub_1004B1154((uint64_t)off_1009F7EA8, uint64);
  if (v7)
  {
    int v8 = sub_1004B43E4(v7, &__p);
    if (!v8)
    {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      if (v6 >= size + 1) {
        int v8 = 0;
      }
      else {
        int v8 = 5;
      }
    }
  }
  else
  {
    int v8 = 7;
  }
LABEL_15:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  uint64_t v11 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    xpc_dictionary_set_string(v11, "kCBMsgArgDeviceName", (const char *)p_p);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_1003CAFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003CB014(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgDiscoverable");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E338();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046B428(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CB104(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E3A0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046B5D0(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDiscoverable", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CB1F0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectable");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E408();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046B65C(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CB2E0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E470();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046B6E8(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnectable", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CB3CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E470();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046B774(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CB4B8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  int v8 = (uint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  uint64_t v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E4D8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    int v10 = sub_10046B800(uint64, v8, &v15, v6);
    goto LABEL_6;
  }
  int v10 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_uint64(v12, "kCbMsgArgDeviceArrayMaxSize", v15);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (uint64_t i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003CB688(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E540();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046B988(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnected", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CB774(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  int v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  unint64_t v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E5A8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    int v10 = sub_10046BA14(uint64, v8, &v15, v6);
    goto LABEL_6;
  }
  int v10 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (unint64_t i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003CB930(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  __chkstk_darwin(v6, 8 * v6);
  int v8 = (unint64_t *)((char *)&v15 - v7);
  bzero((char *)&v15 - v7, v9);
  unint64_t v15 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E610();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    int v10 = sub_10046BBC4(uint64, v8, &v15, v6);
    goto LABEL_6;
  }
  int v10 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (!v10 && v15)
    {
      for (unint64_t i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, v8[i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003CBAEC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E678();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046BD74(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgAdvertising", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CBBD8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E6E0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046BE00(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgScanning", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CBCC4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (uint64) {
    uint64_t v6 = (int)sub_10046BE7C(uint64);
  }
  else {
    uint64_t v6 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CBD74(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E748();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046BEF8(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDutModeEnabled", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CBE60(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgTestFrequency");
  uint64_t v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgPayloadSize");
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgPayload");
  size_t v9 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    int v13 = 134218752;
    uint64_t v14 = uint64;
    __int16 v15 = 2048;
    uint64_t v16 = v6;
    __int16 v17 = 2048;
    uint64_t v18 = v7;
    __int16 v19 = 2048;
    uint64_t v20 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "BTLocalDeviceMsgHandler::handleBTLocalDeviceEnableLeTxTestModeMsg localDeviceId:%llx testFrequency:%llx payloadSize:%llx payload:%llx", (uint8_t *)&v13, 0x2Au);
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v10 = (int)sub_10046BF84(uint64, (unsigned __int16)v6, v7, v8);
    goto LABEL_6;
  }
  uint64_t v10 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1003CBFFC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgTestFrequency");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E7B0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046C024(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CC0EC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E818();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046C0A8(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CC1B4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgServices");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075E880();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046C124(uint64, v6, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgServiceSuppored", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CC2C8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  size_t length = 0;
  int data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  size_t v11 = 0;
  uint64_t v7 = xpc_dictionary_get_data(value, "kCBMsgArgValue", &v11);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075E8E8();
  }
  uint64_t v8 = 1;
  if (uint64 && length && v11) {
    uint64_t v8 = (int)sub_10046C1D4(uint64, data, length, v7, v11);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003CC3F0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  size_t length = 0;
  int data = xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  size_t v11 = 0;
  uint64_t v7 = xpc_dictionary_get_data(value, "kCBMsgArgValue", &v11);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075E950();
  }
  uint64_t v8 = 1;
  if (uint64 && length && v11) {
    uint64_t v8 = (int)sub_10046C28C(uint64, data, length, v7, v11);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

uint64_t sub_1003CC518(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075E9B8();
  }
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    int v17 = 1;
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AB730);
  }
  if (sub_100553A48(qword_1009F8160, uint64, v8, asid))
  {
    size_t v11 = *(void **)(a1 + 80);
    if (v11 != (void *)(a1 + 88))
    {
      do
      {
        uint64_t v12 = v11[4];
        if (*(void *)(v12 + 32) == v6 && *(void *)(v12 + 40) == uint64) {
          goto LABEL_20;
        }
        int v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            int v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            size_t v11 = v14;
          }
          while (!v15);
        }
        size_t v11 = v14;
      }
      while (v14 != (void *)(a1 + 88));
    }
    uint64_t v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040AF0111D3uLL);
    *(void *)long long buf = v16;
    void v16[4] = v6;
    unsigned char v16[5] = uint64;
    void v16[3] = sub_1003C9054;
    v16[6] = *(void *)(a1 + 72);
    sub_100051620((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(unsigned char *)(a1 + 105))
    {
      int v17 = 0;
    }
    else
    {
      int v17 = sub_10046C344(uint64);
      *(unsigned char *)(a1 + 105) = 1;
    }
  }
  else
  {
    int v17 = 7;
  }
LABEL_23:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  __int16 v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v19);
    xpc_release(v19);
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1003CC7F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003CC818(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075EA20();
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 8);
  if (!uint64) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(v6 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v6 + 16));
  size_t v9 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 2048;
    uint64_t v24 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AB730);
  }
  if (sub_100553A48(qword_1009F8160, uint64, v7, asid))
  {
    uint64_t v10 = *(void **)(a1 + 80);
    if (v10 == (void *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075DF48();
      }
      int v15 = 3;
    }
    else
    {
      while (1)
      {
        uint64_t v11 = v10[4];
        if (*(void *)(v11 + 24))
        {
          if (*(void *)(v11 + 40) == uint64) {
            break;
          }
        }
        uint64_t v12 = (void *)v10[1];
        if (v12)
        {
          do
          {
            int v13 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            int v13 = (void *)v10[2];
            BOOL v14 = *v13 == (void)v10;
            uint64_t v10 = v13;
          }
          while (!v14);
        }
        uint64_t v10 = v13;
        if (v13 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }
      *(void *)long long buf = v10[4];
      if (*(unsigned char *)(a1 + 105))
      {
        int v15 = sub_10046C408(uint64);
        *(unsigned char *)(a1 + 105) = 0;
      }
      else
      {
        int v15 = 0;
      }
      sub_1000517A4(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }
  else
  {
LABEL_21:
    int v15 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  int v17 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v17);
    xpc_release(v17);
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1003CCAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003CCAD4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075EA88();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046C4B0(uint64, (uint64_t)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgPowerConsumed", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

uint64_t sub_1003CCBC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075EAF0();
  }
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, a1 + 8);
  if (!uint64)
  {
LABEL_20:
    int v17 = 1;
    goto LABEL_23;
  }
  uint64_t v7 = *(void *)(a1 + 72);
  int v8 = *(_DWORD *)(v7 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v7 + 16));
  uint64_t v10 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v23 = 1024;
    int v24 = v8;
    __int16 v25 = 2048;
    uint64_t v26 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AB730);
  }
  if (sub_100553A48(qword_1009F8160, uint64, v8, asid))
  {
    uint64_t v11 = *(void **)(a1 + 80);
    if (v11 != (void *)(a1 + 88))
    {
      do
      {
        uint64_t v12 = v11[4];
        if (*(void *)(v12 + 32) == v6 && *(void *)(v12 + 40) == uint64) {
          goto LABEL_20;
        }
        int v13 = (void *)v11[1];
        if (v13)
        {
          do
          {
            BOOL v14 = v13;
            int v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            BOOL v14 = (void *)v11[2];
            BOOL v15 = *v14 == (void)v11;
            uint64_t v11 = v14;
          }
          while (!v15);
        }
        uint64_t v11 = v14;
      }
      while (v14 != (void *)(a1 + 88));
    }
    uint64_t v16 = malloc_type_calloc(1uLL, 0x38uLL, 0x10A0040AF0111D3uLL);
    *(void *)long long buf = v16;
    void v16[4] = v6;
    unsigned char v16[5] = uint64;
    void v16[3] = sub_1003C9054;
    v16[6] = *(void *)(a1 + 72);
    sub_100051620((uint64_t **)(a1 + 80), (unint64_t *)buf, (uint64_t *)buf);
    if (*(unsigned char *)(a1 + 106))
    {
      int v17 = 0;
    }
    else
    {
      int v17 = sub_10046C560(uint64);
      *(unsigned char *)(a1 + 106) = 1;
    }
  }
  else
  {
    int v17 = 7;
  }
LABEL_23:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  __int16 v19 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v17);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v19);
    xpc_release(v19);
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1003CCE9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003CCEC0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075EB58();
  }
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 8);
  if (!uint64) {
    goto LABEL_21;
  }
  uint64_t v6 = *(void *)(a1 + 72);
  int v7 = *(_DWORD *)(v6 + 40);
  au_asid_t asid = xpc_connection_get_asid(*(xpc_connection_t *)(v6 + 16));
  size_t v9 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 134218496;
    *(void *)&uint8_t buf[4] = uint64;
    __int16 v21 = 1024;
    int v22 = v7;
    __int16 v23 = 2048;
    uint64_t v24 = asid;
    _os_log_debug_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEBUG, "identifier mapping localDevice:%llx pid:%d asid:%llx", buf, 0x1Cu);
  }
  if (qword_1009F8168 != -1) {
    dispatch_once(&qword_1009F8168, &stru_1009AB730);
  }
  if (sub_100553A48(qword_1009F8160, uint64, v7, asid))
  {
    uint64_t v10 = *(void **)(a1 + 80);
    if (v10 == (void *)(a1 + 88))
    {
LABEL_18:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_10075DF48();
      }
      int v15 = 3;
    }
    else
    {
      while (1)
      {
        uint64_t v11 = v10[4];
        if (*(void *)(v11 + 24))
        {
          if (*(void *)(v11 + 40) == uint64) {
            break;
          }
        }
        uint64_t v12 = (void *)v10[1];
        if (v12)
        {
          do
          {
            int v13 = v12;
            uint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            int v13 = (void *)v10[2];
            BOOL v14 = *v13 == (void)v10;
            uint64_t v10 = v13;
          }
          while (!v14);
        }
        uint64_t v10 = v13;
        if (v13 == (void *)(a1 + 88)) {
          goto LABEL_18;
        }
      }
      *(void *)long long buf = v10[4];
      if (*(unsigned char *)(a1 + 106))
      {
        int v15 = sub_10046C624(uint64);
        *(unsigned char *)(a1 + 106) = 0;
      }
      else
      {
        int v15 = 0;
      }
      sub_1000517A4(a1 + 80, (unint64_t *)buf);
      free(*(void **)buf);
    }
  }
  else
  {
LABEL_21:
    int v15 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  int v17 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v15);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v17);
    xpc_release(v17);
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1003CD158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003CD17C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  value[0] = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075EBC0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046C6CC(uint64, v6, (uint64_t)value + 6, (uint64_t)value + 4, (uint64_t)value + 2, (uint64_t)value);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTransmitting", HIWORD(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsReceiving", WORD2(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsSleep", WORD1(value[0]));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsOthers", LOWORD(value[0]));
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CD2D4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgReset");
  uint64_t v11 = 0;
  memset(v10, 0, sizeof(v10));
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075EC28();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046C7B8(uint64, v6, (uint64_t)v10);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_data(v9, "kCBMsgArgData", v10, 0xF8uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CD40C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  uint64_t v10 = 0;
  uint64_t value = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075EC90();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046C880(uint64, v6, (uint64_t)&value + 4, (uint64_t)&value, (uint64_t)&v10 + 4, (uint64_t)&v10);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTotal", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsSuccesful", value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDowngraded", HIDWORD(v10));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsInvolundaryDowngraded", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CD564(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  unsigned __int16 v6 = xpc_dictionary_get_uint64(v4, "kCBMsgArgReset");
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t value = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075ECF8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046C968(uint64, v6, (uint64_t)&v16 + 4, (uint64_t)&v16, (uint64_t)&v15 + 4, (uint64_t)&v15, (uint64_t)&v14 + 4, (uint64_t)&v14, (uint64_t)&v13 + 4, (uint64_t)&v13, (uint64_t)&value + 4, (uint64_t)&value, (uint64_t)&v11 + 4, (uint64_t)&v11, (uint64_t)&v10 + 4, (uint64_t)&v10);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationTotal", HIDWORD(v16));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationActive", v16);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationIdle", HIDWORD(v15));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDurationSleep", v15);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsDisableCounter", HIDWORD(v14));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsiPATxBT", v14);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsePATxBT", HIDWORD(v13));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsiPATxLE", v13);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsePATxLE", HIDWORD(value));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsConnectedRxBT", value);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsConnectedRxLE", HIDWORD(v11));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsScanRxBT", v11);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsScanRxLE", HIDWORD(v10));
    xpc_dictionary_set_uint64(v9, "kCBMsgArgStatsTotalPHYCal", v10);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CD7CC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075ED60();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046CA78(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CD894(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgExtensionToken");
  uint64_t v7 = xpc_dictionary_get_string(value, "kCBMsgArgPath");
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v8, v9);
  uint64_t v11 = (char *)&v15 - v10;
  bzero((char *)&v15 - v10, v8);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075EDC8();
    if (string) {
      goto LABEL_3;
    }
LABEL_5:
    if (uint64) {
      uint64_t v12 = (int)sub_10046CB1C(uint64, (uint64_t)v7, string, (uint64_t)v11, v8);
    }
    else {
      uint64_t v12 = 1;
    }
    goto LABEL_9;
  }
  if (!string) {
    goto LABEL_5;
  }
LABEL_3:
  if (!*string || *(unsigned char *)(*(void *)(a1 + 72) + 90)) {
    goto LABEL_5;
  }
  uint64_t v12 = 3;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    xpc_dictionary_set_string(v14, "kCBMsgArgName", v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1003CDA5C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgBundleIdString");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075EE30();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046CC00(uint64, string);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CDB48(uint64_t a1, xpc_object_t xdict)
{
  size_t length = 0;
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int data = xpc_dictionary_get_data(value, "kCBMsgArgData", &length);
  if (length == 10)
  {
    uint64_t v7 = (uint64_t)data;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_10075EE98();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_10046CD00(uint64, v7);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      uint64_t v10 = reply;
      uint64_t v11 = v8;
      goto LABEL_13;
    }
    uint64_t v8 = 1;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
    sub_10075EF00();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    uint64_t v11 = 3;
LABEL_13:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003CDC8C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075EF40();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046CE00(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CDD78(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  xpc_dictionary_get_uint64(value, "kCBMsgArgDelay");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075EFA8();
  }
  int v5 = sub_10046CF40();
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v7 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v5);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v7);
    xpc_release(v7);
  }
}

void sub_1003CDE30(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075EFE8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046CFF0(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003CDF1C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075F050();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046D07C(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CE008(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  unint64_t v16 = 0;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG);
  if (v7) {
    sub_10075F0B8();
  }
  __chkstk_darwin(v7, 248 * v6);
  uint64_t v9 = (char *)&v16 - v8;
  bzero((char *)&v16 - v8, v10);
  if (uint64) {
    uint64_t v11 = (int)sub_10046D0F8(uint64, v9, &v16, v6);
  }
  else {
    uint64_t v11 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v13 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v11);
    xpc_object_t v14 = xpc_array_create(0, 0);
    if (v16)
    {
      for (unint64_t i = 0; i < v16; ++i)
      {
        xpc_array_set_string(v14, 0xFFFFFFFFFFFFFFFFLL, v9);
        v9 += 248;
      }
    }
    xpc_dictionary_set_value(v13, "kCBMsgArgDeviceArray", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v13);
    xpc_release(v14);
    xpc_release(v13);
  }
}

void sub_1003CE1D0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCbMsgArgDeviceArrayMaxSize");
  unint64_t v15 = 0;
  BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG);
  if (v7) {
    sub_10075F120();
  }
  __chkstk_darwin(v7, 6 * v6);
  uint64_t v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  bzero(v9, v8);
  if (uint64) {
    uint64_t v10 = (int)sub_10046D180(uint64, (uint64_t)v9, &v15);
  }
  else {
    uint64_t v10 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (v15)
    {
      for (unint64_t i = 0; i < v15; ++i)
      {
        xpc_array_set_data(v13, 0xFFFFFFFFFFFFFFFFLL, v9, 6uLL);
        v9 += 6;
      }
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgDeviceArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003CE39C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgLocalDeviceID");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075F188();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046D23C(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003CE488(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  __chkstk_darwin(v6, v7);
  uint64_t v9 = (char *)&v13 - v8;
  bzero((char *)&v13 - v8, v6);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075F1F0();
    if (uint64)
    {
LABEL_3:
      if (*(int *)(*(void *)(a1 + 72) + 80) < 1) {
        uint64_t v10 = 13;
      }
      else {
        uint64_t v10 = (int)sub_10046D2E8(uint64, v9, v6);
      }
      goto LABEL_8;
    }
  }
  else if (uint64)
  {
    goto LABEL_3;
  }
  uint64_t v10 = 1;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_dictionary_set_string(v12, "kCBMsgArgBufferName", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1003CE60C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  bzero(v19, 0x21AuLL);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075F258();
  }
  if (uint64) {
    uint64_t v6 = (int)sub_10046D428(uint64, v19);
  }
  else {
    uint64_t v6 = 1;
  }
  xpc_object_t v7 = xpc_array_create(0, 0);
  v21[0] = 0;
  v21[1] = 0;
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    if (v19[0])
    {
      xpc_object_t xdicta = v9;
      uint64_t v18 = a1;
      unint64_t v10 = 0;
      uint64_t v11 = (const char *)&v20;
      do
      {
        xpc_object_t v12 = xpc_dictionary_create(0, 0, 0);
        v21[v10] = v12;
        xpc_dictionary_set_uint64(v12, "kCBMsgArgRetX", *((unsigned __int8 *)v11 - 10));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgRssi", *(v11 - 9));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgNoise", *(v11 - 8));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgSnr", *((unsigned __int8 *)v11 - 7));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgDataRate", *((unsigned __int16 *)v11 - 3));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgJitterBuffer", *((unsigned __int16 *)v11 - 2));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgCodecType", *((unsigned __int16 *)v11 - 1));
        xpc_dictionary_set_string(v12, "kCBMsgArgName", v11);
        xpc_array_set_value(v7, 0xFFFFFFFFFFFFFFFFLL, v12);
        ++v10;
        v11 += 268;
      }
      while (v10 < v19[0]);
      uint64_t v9 = xdicta;
      xpc_dictionary_set_value(xdicta, "kCBMsgArgBTLinkQualityData", v7);
      a1 = v18;
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    uint64_t v13 = 0;
    char v14 = 1;
    do
    {
      char v15 = v14;
      unint64_t v16 = (void *)v21[v13];
      if (v16) {
        xpc_release(v16);
      }
      char v14 = 0;
      uint64_t v13 = 1;
    }
    while ((v15 & 1) != 0);
    xpc_release(v7);
    xpc_release(v9);
  }
}

void sub_1003CE8A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgLocalDeviceID");
  uuid = xpc_dictionary_get_uuid(value, "kCBMsgArgUUID");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10075F2C0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_10046D53C(uint64, (uint64_t)uuid, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    unint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

uint64_t sub_1003CE9A8(uint64_t a1)
{
  uint64_t v2 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    int v4 = 134217984;
    uint64_t v5 = a1;
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "MBFXPC LOG: BTLocalDeviceMsgHandler::~BTLocalDeviceMsgHandler() %p", (uint8_t *)&v4, 0xCu);
  }
  sub_1000486F0(a1 + 80, *(void **)(a1 + 88));
  *(void *)a1 = &off_1009AB480;
  sub_100052DA4(a1 + 8);
  return a1;
}

void sub_1003CEA88(uint64_t a1)
{
  sub_1003CE9A8(a1);

  operator delete();
}

BOOL sub_1003CEAC0(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v11 = string;
  size_t v12 = strlen(string);
  uint64_t v5 = sub_1003C2560(&xmmword_100A19AD0, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    uint64_t v6 = sub_1003CED28((uint64_t)&xmmword_100A19AD0, (uint64_t)&v11, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v13);
    int v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if (v8) {
      int v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }
  return v5 != 0;
}

uint64_t sub_1003CEBBC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_10075F328();
  }
  v15[0] = 0;
  v15[1] = 0;
  sub_10003AED0((uint64_t)v15, a1 + 8);
  uint64_t v2 = *(void **)(a1 + 80);
  uint64_t v3 = (void *)(a1 + 88);
  if (v2 != (void *)(a1 + 88))
  {
    do
    {
      int v4 = (void *)v2[4];
      long long v13 = 0uLL;
      uint64_t v14 = 0;
      uint64_t v6 = v4[2];
      uint64_t v5 = v4[3];
      long long v13 = *(_OWORD *)v4;
      uint64_t v14 = v6;
      uint64_t v7 = v4[5];
      if (v6) {
        BOOL v8 = 0;
      }
      else {
        BOOL v8 = *((void *)&v13 + 1) == 0;
      }
      BOOL v9 = v8 && (void)v13 == 0;
      if (v9 || !*(unsigned char *)(a1 + 104))
      {
        if (v5)
        {
          if (*(unsigned char *)(a1 + 105))
          {
            sub_10046C408(v7);
            *(unsigned char *)(a1 + 105) = 0;
          }
          else if (*(unsigned char *)(a1 + 106))
          {
            sub_10046C624(v7);
            *(unsigned char *)(a1 + 106) = 0;
          }
        }
      }
      else
      {
        sub_10046A9F0(v7, &v13);
        *(unsigned char *)(a1 + 104) = 0;
      }
      free(v4);
      unint64_t v10 = (void *)v2[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          unint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v2[2];
          BOOL v8 = *v11 == (void)v2;
          uint64_t v2 = v11;
        }
        while (!v8);
      }
      uint64_t v2 = v11;
    }
    while (v11 != v3);
  }
  sub_1000486F0(a1 + 80, *(void **)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = v3;
  return sub_10003AFB4((uint64_t)v15);
}

void sub_1003CED14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_1003CED28(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003C208C((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    long long v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      uint64_t v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        char v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12) {
              break;
            }
          }
          uint64_t v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  uint64_t v14 = operator new(0x30uLL);
  *(void *)uint64_t v14 = 0;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_1000A9204(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  uint64_t v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)uint64_t v14 = *v26;
LABEL_40:
    *uint64_t v26 = v14;
    goto LABEL_41;
  }
  *(void *)uint64_t v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    uint64_t v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1003CEF80(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1003CEF94(id a1)
{
}

void sub_1003CEFD8()
{
}

void sub_1003CEFFC(id a1)
{
}

void sub_1003CF040()
{
}

void sub_1003CF064(void *a1, NSObject *a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint8_t a9)
{
  _os_log_debug_impl(a1, a2, OS_LOG_TYPE_DEBUG, a4, &a9, 0xCu);
}

void sub_1003CF080(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_debug_impl(a1, log, OS_LOG_TYPE_DEBUG, a4, (uint8_t *)va, 0x16u);
}

void sub_1003CF0A0()
{
  xmmword_100A19AD0 = 0u;
  unk_100A19AE0 = 0u;
  dword_100A19AF0 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1003C8774, &xmmword_100A19AD0, (void *)&_mh_execute_header);
}

uint64_t sub_1003CF10C(uint64_t a1)
{
  *(void *)a1 = &off_1009AB780;
  *(unsigned char *)(a1 + 12) = 0;
  *(_DWORD *)(a1 + 8) = -1;
  uint64_t v2 = (int *)(a1 + 8);
  CFNumberRef v3 = (const __CFNumber *)MGCopyAnswer();
  if (v3)
  {
    CFNumberRef v4 = v3;
    CFNumberGetValue(v3, kCFNumberIntType, v2);
    CFRelease(v4);
  }
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v6 = *v2;
    v8[0] = 67109120;
    v8[1] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "deviceClass=%d", (uint8_t *)v8, 8u);
  }
  return a1;
}

void sub_1003CF220()
{
}

uint64_t sub_1003CF234(int a1, std::string *this)
{
  return 0;
}

uint64_t sub_1003CF25C(uint64_t a1, std::string *a2)
{
  bzero(&v4, 0x500uLL);
  uname(&v4);
  if (!v4.machine[0]) {
    return 1;
  }
  std::string::assign(a2, v4.machine);
  return 0;
}

uint64_t sub_1003CF2F0(uint64_t a1, std::string *a2)
{
  utsname v4 = (void *)MGCopyAnswer();
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = v4;
    std::string::assign(a2, (const std::string::value_type *)[v6 UTF8String]);
    unint64_t v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "modelName=%@", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }

  return v8;
}

void sub_1003CF3F4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003CF40C(uint64_t a1, std::string *a2)
{
  utsname v4 = (void *)MGCopyAnswer();
  uint64_t v5 = v4;
  if (v4)
  {
    id v6 = v4;
    std::string::assign(a2, (const std::string::value_type *)[v6 UTF8String]);
    unint64_t v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      int v10 = 138412290;
      id v11 = v6;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "productType=%@", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 1;
  }

  return v8;
}

void sub_1003CF510(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003CF528(uint64_t a1, std::string *a2)
{
  utsname v4 = +[NSProcessInfo processInfo];
  id v5 = [v4 operatingSystemVersionString];
  std::string::assign(a2, (const std::string::value_type *)[v5 UTF8String]);

  return 0;
}

void sub_1003CF5A0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003CF5BC(uint64_t a1, std::string *a2, char a3)
{
  CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
  CFLocaleRef v7 = CFLocaleCopyCurrent();
  uint64_t v8 = CFDateFormatterCreate(0, v7, kCFDateFormatterNoStyle, kCFDateFormatterShortStyle);
  CFRelease(v7);
  CFStringRef Format = CFDateFormatterGetFormat(v8);
  if (Format)
  {
    CFStringRef v10 = Format;
    if (CFStringFind(Format, @"H", 0).location == -1)
    {
      CFIndex location = CFStringFind(v10, @"k", 0).location;
      CFStringRef v12 = @"yy'/'MM'/'dd', 'HH':'mm':'ss";
      if (location != -1 || (a3 & 1) != 0) {
        goto LABEL_9;
      }
      goto LABEL_8;
    }
LABEL_7:
    CFStringRef v12 = @"yy'/'MM'/'dd', 'HH':'mm':'ss";
    goto LABEL_9;
  }
  if (a3) {
    goto LABEL_7;
  }
LABEL_8:
  CFStringRef v12 = @"yy'/'MM'/'dd', 'hh':'mm':'ss";
LABEL_9:
  CFDateFormatterSetFormat(v8, v12);
  StringWithAbsoluteTime = (__CFString *)CFDateFormatterCreateStringWithAbsoluteTime(0, v8, Current);
  if (StringWithAbsoluteTime)
  {
    uint64_t v14 = StringWithAbsoluteTime;
    std::string::assign(a2, (const std::string::value_type *)[(__CFString *)v14 UTF8String]);
    CFRelease(v14);
    uint64_t v15 = 0;
  }
  else
  {
    uint64_t v15 = 1;
  }
  CFRelease(v8);
  return v15;
}

uint64_t sub_1003CF6F8(uint64_t a1, int a2)
{
  unsigned __int8 v26 = 1;
  memset(&v25, 0, sizeof(v25));
  sub_10004191C(&v25, "");
  if (a2 <= 511)
  {
    if (a2 <= 15)
    {
      switch(a2)
      {
        case 1:
          utsname v4 = "handsfree";
          break;
        case 2:
          utsname v4 = "phonebook";
          break;
        case 8:
          utsname v4 = "avrcp";
          break;
        default:
          goto LABEL_38;
      }
    }
    else if (a2 > 127)
    {
      if (a2 == 128)
      {
        utsname v4 = "wiap";
      }
      else
      {
        if (a2 != 256) {
          goto LABEL_38;
        }
        utsname v4 = "netSharing";
      }
    }
    else if (a2 == 16)
    {
      utsname v4 = "a2dp";
    }
    else
    {
      if (a2 != 32) {
        goto LABEL_38;
      }
      utsname v4 = "hid";
    }
  }
  else if (a2 >= 0x20000)
  {
    if (a2 >= 0x80000)
    {
      if (a2 == 0x80000)
      {
        utsname v4 = "aacp";
      }
      else
      {
        if (a2 != 0x100000) {
          goto LABEL_38;
        }
        utsname v4 = "GATT";
      }
    }
    else if (a2 == 0x20000)
    {
      utsname v4 = "wiapSink";
    }
    else
    {
      if (a2 != 0x40000) {
        goto LABEL_38;
      }
      utsname v4 = "wirelessCarplay";
    }
  }
  else if (a2 > 4095)
  {
    if (a2 == 4096)
    {
      utsname v4 = "netConsumer";
    }
    else
    {
      if (a2 != 0x2000) {
        goto LABEL_38;
      }
      utsname v4 = "braille";
    }
  }
  else if (a2 == 512)
  {
    utsname v4 = "MAP";
  }
  else
  {
    if (a2 != 2048) {
      goto LABEL_38;
    }
    utsname v4 = "d2d";
  }
  std::string::assign(&v25, v4);
LABEL_38:
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "ServiceSettings");
  int v6 = (*(uint64_t (**)(uint64_t, std::string *, uint8_t *, unsigned __int8 *))(*(void *)v5 + 72))(v5, &v25, buf, &v26);
  int v7 = v6;
  if (v30 < 0)
  {
    operator delete(*(void **)buf);
    if (v7) {
      goto LABEL_40;
    }
  }
  else if (v6)
  {
LABEL_40:
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v9 = &v25;
      if ((v25.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v9 = (std::string *)v25.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v26;
      __int16 v28 = 2082;
      char v29 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: Using override value %d for service %{public}s", buf, 0x12u);
    }
    BOOL v10 = v26 == 0;
    goto LABEL_77;
  }
  int v11 = *(_DWORD *)(a1 + 8);
  int v12 = 2046907;
  switch(v11)
  {
    case 1:
      break;
    case 2:
      int v12 = 1653433;
      break;
    case 3:
      if (MGGetBoolAnswer()) {
        int v12 = 2046905;
      }
      else {
        int v12 = 2046649;
      }
      break;
    case 4:
      uint64_t v13 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 416))(v13)) {
        int v14 = 128;
      }
      else {
        int v14 = 127;
      }
      int v12 = v14 + 1581113;
      break;
    case 6:
      char v24 = 0;
      uint64_t v16 = sub_100017768();
      sub_10004191C(buf, "StackSettings");
      sub_10004191C(__p, "HFServiceEnable");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v16 + 72))(v16, buf, __p, &v24);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(*(void **)buf);
      }
      int v12 = 1581113;
      if (v24)
      {
        uint64_t v17 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 1581113;
          unint64_t v18 = "Warning: Enabling HF Service using override, serviceMask is now 0x%x";
          goto LABEL_72;
        }
      }
      else
      {
        int v12 = 1581112;
      }
      break;
    case 7:
      int v12 = 0x20000;
      break;
    case 9:
      char v24 = 0;
      uint64_t v19 = sub_100017768();
      sub_10004191C(buf, "IAP");
      sub_10004191C(__p, "enableIAP");
      (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v19 + 72))(v19, buf, __p, &v24);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      if (v30 < 0) {
        operator delete(*(void **)buf);
      }
      int v12 = 1782201;
      if (v24)
      {
        uint64_t v17 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = 1782201;
          unint64_t v18 = "Warning: Enabling IAP using override, serviceMask is now 0x%x";
LABEL_72:
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v18, buf, 8u);
        }
      }
      else
      {
        int v12 = 1782073;
      }
      break;
    case 11:
      int v12 = 1784505;
      break;
    default:
      int v12 = 789176;
      uint64_t v15 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075F390(v11, v15);
      }
      break;
  }
  BOOL v10 = (v12 & a2) == 0;
LABEL_77:
  uint64_t v20 = !v10;
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v25.__r_.__value_.__l.__data_);
  }
  return v20;
}

void sub_1003CFC94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003CFD38()
{
  unsigned int v0 = sub_1003FAF7C() - 137;
  return (v0 > 0x1B) | (0xDE07FCu >> v0) & 1;
}

uint64_t sub_1003CFD70()
{
  unsigned int v0 = sub_1003FAF7C() - 137;
  return (v0 > 0x1B) | (0xDE07FCu >> v0) & 1;
}

uint64_t sub_1003CFDA8(uint64_t a1)
{
  int v1 = *(_DWORD *)(a1 + 8) - 1;
  if (v1 > 0xA) {
    uint64_t v2 = 0;
  }
  else {
    uint64_t v2 = dword_1007BD824[v1];
  }
  unsigned int v9 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "Device");
  sub_10004191C(__p, "ClassOfDevice");
  int v4 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned int *))(*(void *)v3 + 88))(v3, buf, __p, &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0)
  {
    operator delete(*(void **)buf);
    if (!v4) {
      return v2;
    }
  }
  else if (!v4)
  {
    return v2;
  }
  uint64_t v2 = v9;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, "Class of device set to %d", buf, 8u);
  }
  return v2;
}

void sub_1003CFF04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003CFF40(uint64_t a1)
{
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v3 = *(_DWORD *)(a1 + 8);
    int v14 = 67109120;
    int v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "getPairingInputs deviceClass=%d", (uint8_t *)&v14, 8u);
  }
  int v4 = *(_DWORD *)(a1 + 8);
  if ((v4 - 1) < 3)
  {
    char v8 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
LABEL_10:
      uint64_t v6 = 3;
      goto LABEL_25;
    }
    LOWORD(v14) = 0;
    unsigned int v9 = "iphone/ipod/ipad";
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, v9, (uint8_t *)&v14, 2u);
    goto LABEL_10;
  }
  if ((v4 - 6) < 2)
  {
    uint64_t v5 = qword_100A19E50;
    uint64_t v6 = 1;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    LOWORD(v14) = 0;
    int v7 = "watch/homepod";
    goto LABEL_20;
  }
  if (v4 == 4)
  {
    uint64_t v5 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
    {
      LOWORD(v14) = 0;
      int v7 = "appleTV";
LABEL_14:
      uint64_t v6 = 2;
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_INFO, v7, (uint8_t *)&v14, 2u);
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  BOOL v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_INFO, "dunno", (uint8_t *)&v14, 2u);
  }
  int v11 = sub_1003FAF7C();
  if ((v11 - 173) < 5)
  {
    uint64_t v5 = qword_100A19E50;
    uint64_t v6 = 1;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO)) {
      goto LABEL_25;
    }
    LOWORD(v14) = 0;
    int v7 = "531/541/8006";
    goto LABEL_20;
  }
  if (v11 != 270)
  {
    char v8 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO)) {
      goto LABEL_10;
    }
    LOWORD(v14) = 0;
    unsigned int v9 = "default";
    goto LABEL_9;
  }
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    LOWORD(v14) = 0;
    int v7 = "unknown";
    goto LABEL_14;
  }
LABEL_24:
  uint64_t v6 = 2;
LABEL_25:
  int v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    int v14 = 67109120;
    int v15 = v6;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "selected input caps : %d", (uint8_t *)&v14, 8u);
  }
  return v6;
}

BOOL sub_1003D01F4(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1)) {
    return 1;
  }
  char v8 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "SupportsScalablePipes");
  int v2 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0)
  {
    operator delete(*(void **)buf);
    if (v2) {
      goto LABEL_6;
    }
    return 1;
  }
  if (!v2) {
    return 1;
  }
LABEL_6:
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v8) {
      int v4 = "enabled";
    }
    else {
      int v4 = "disabled";
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: Overriding scalable pipe support - pipes are %{public}s", buf, 0xCu);
  }
  return v8 != 0;
}

void sub_1003D0380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003D03BC(uint64_t a1)
{
  if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1)) {
    return 1;
  }
  int v2 = sub_1003FAF7C();
  return (v2 - 4) < 2 || v2 == 136;
}

uint64_t sub_1003D042C()
{
  return MGIsDeviceOneOfType();
}

uint64_t sub_1003D0DD8()
{
  return 1;
}

BOOL sub_1003D1194()
{
  return sub_1003FAF7C() < 4;
}

BOOL sub_1003D11B4()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 15) < 0xF91;
}

BOOL sub_1003D11DC(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 384))(a1)) {
    return (*(_DWORD *)(sub_10003FB34() + 712) - 20) < 0x7BC;
  }
  int v2 = sub_1003FAF7C() - 10;
  BOOL result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 89:
    case 90:
    case 91:
    case 92:
    case 95:
    case 96:
    case 97:
    case 98:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 116:
    case 117:
    case 118:
    case 119:
    case 120:
    case 121:
    case 122:
    case 123:
    case 124:
    case 125:
    case 132:
    case 133:
    case 134:
    case 135:
    case 136:
    case 137:
    case 140:
    case 142:
    case 144:
    case 148:
      return result;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL sub_1003D14C8()
{
  return ((sub_1003FAF7C() - 126) & 0xFFFFFFFD) == 0;
}

uint64_t sub_1003D14EC()
{
  unsigned int v0 = sub_1003FAF7C() - 67;
  return (v0 < 0x12) & (0x200FFu >> v0);
}

BOOL sub_1003D1520(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 384))(a1)) {
    return (*(_DWORD *)(sub_10003FB34() + 712) - 20) < 0x7BC;
  }
  int v2 = sub_1003FAF7C() - 20;
  BOOL result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 69:
    case 70:
    case 71:
    case 72:
    case 73:
    case 74:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 85:
    case 86:
    case 87:
    case 88:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
    case 113:
    case 114:
    case 115:
    case 125:
    case 126:
    case 130:
    case 132:
    case 134:
    case 138:
      return result;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL sub_1003D17E4(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 384))(a1)) {
    return (*(_DWORD *)(sub_10003FB34() + 712) - 20) < 0x7BC;
  }
  int v2 = sub_1003FAF7C() - 20;
  BOOL result = 1;
  switch(v2)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 73:
    case 74:
    case 85:
    case 86:
    case 87:
    case 88:
    case 92:
    case 93:
    case 94:
    case 95:
    case 96:
    case 97:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 111:
    case 112:
    case 113:
    case 114:
    case 125:
    case 130:
    case 134:
    case 138:
      return result;
    default:
      BOOL result = 0;
      break;
  }
  return result;
}

BOOL sub_1003D1AA8()
{
  return (*(_DWORD *)(sub_10003FB34() + 712) - 22) < 0x7BA;
}

BOOL sub_1003D1AD0()
{
  char v11 = 1;
  uint64_t v0 = sub_100017768();
  sub_10004191C(v9, "Device");
  sub_10004191C(__p, "EnableHDR");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v0 + 72))(v0, v9, __p, &v11);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(v9[0]);
  }
  if (!v11) {
    return 0;
  }
  int v1 = *(_DWORD *)(sub_10003FB34() + 712);
  uint64_t v2 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 344))(v2)) {
    return 0;
  }
  uint64_t v3 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v3 + 336))(v3)) {
    return 0;
  }
  uint64_t v5 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 384))(v5)) {
    BOOL v6 = (v1 - 21) >= 0x7BB;
  }
  else {
    BOOL v6 = (v1 - 20) >= 0x7BC;
  }
  return !v6;
}

void sub_1003D1C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D1C78()
{
  unsigned int v0 = sub_1003FAF7C() - 53;
  return (v0 < 0x1A) & (0x3C003FFu >> v0);
}

uint64_t sub_1003D1CAC()
{
  unsigned int v0 = *(_DWORD *)(sub_10003FB34() + 712);
  unsigned int v1 = _os_feature_enabled_impl();
  if (v0 - 1 < 0x7CF) {
    unsigned int v2 = v1;
  }
  else {
    unsigned int v2 = 0;
  }
  if (v0 > 0xC) {
    return v2;
  }
  else {
    return 0;
  }
}

uint64_t sub_1003D1CF8(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  if (result)
  {
    return _os_feature_enabled_impl();
  }
  return result;
}

uint64_t sub_1003D1D64(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
  if (result)
  {
    return _os_feature_enabled_impl();
  }
  return result;
}

uint64_t sub_1003D1DD0()
{
  if (qword_100A125F0 != -1) {
    dispatch_once(&qword_100A125F0, &stru_1009ABB68);
  }
  return byte_100A125E8;
}

void sub_1003D1E14(id a1)
{
  byte_100A125E8 = MGGetBoolAnswer();
}

uint64_t sub_1003D1E3C()
{
  return 0;
}

BOOL sub_1003D1E44()
{
  return sub_1003FAF7C() - 67 < 8;
}

BOOL sub_1003D1E68()
{
  uint64_t v0 = 1;
  int v1 = sub_1003FAF7C();
  BOOL v2 = (v1 - 233) > 0x15 || v1 == 234;
  if (v2 && ((v1 - 112) > 0x2B || ((1 << (v1 - 112)) & 0x8000003CF0FLL) == 0)) {
    return (v1 - 44) < 6;
  }
  return v0;
}

uint64_t sub_1003D1ED4()
{
  return 1;
}

uint64_t sub_1003D1EDC()
{
  return 0;
}

uint64_t sub_1003D1EE4()
{
  return 0;
}

void sub_1003D1EEC(id a1)
{
  byte_100A125F8 = sub_1003D1F14(@"iPhone");
}

id sub_1003D1F14(uint64_t a1)
{
  id result = (id)MGGetStringAnswer();
  if (result)
  {
    uint64_t v3 = result;
    id v4 = [result isEqualToString:a1];
    CFRelease(v3);
    return v4;
  }
  return result;
}

uint64_t sub_1003D1F60()
{
  if (qword_100A12610 != -1) {
    dispatch_once(&qword_100A12610, &stru_1009ABBA8);
  }
  return byte_100A12608;
}

void sub_1003D1FA4(id a1)
{
  byte_100A12608 = sub_1003D1F14(@"iPad");
}

uint64_t sub_1003D1FCC()
{
  if (qword_100A12620 != -1) {
    dispatch_once(&qword_100A12620, &stru_1009ABBC8);
  }
  return byte_100A12618;
}

void sub_1003D2010(id a1)
{
  byte_100A12618 = sub_1003D1F14(@"iPod");
}

void sub_1003D2038(id a1)
{
  byte_100A12628 = sub_1003D1F14(@"Watch");
}

void sub_1003D2060(id a1)
{
  byte_100A12638 = sub_1003D1F14(@"Mac");
}

uint64_t sub_1003D2088()
{
  if (qword_100A12650 != -1) {
    dispatch_once(&qword_100A12650, &stru_1009ABC28);
  }
  return byte_100A12648;
}

void sub_1003D20CC(id a1)
{
  byte_100A12648 = sub_1003D1F14(@"RealityDevice");
}

uint64_t sub_1003D20F4()
{
  return MGGetBoolAnswer();
}

uint64_t sub_1003D2100()
{
  if (qword_100A12660 != -1) {
    dispatch_once(&qword_100A12660, &stru_1009ABC48);
  }
  return byte_100A12658;
}

void sub_1003D2144(id a1)
{
  byte_100A12658 = sub_1003D1F14(@"AudioAccessory");
}

uint64_t sub_1003D216C()
{
  if (qword_100A12670 != -1) {
    dispatch_once(&qword_100A12670, &stru_1009ABC68);
  }
  return byte_100A12668;
}

void sub_1003D21B0(id a1)
{
  byte_100A12668 = sub_1003D1F14(@"AppleTV");
}

BOOL sub_1003D21D8()
{
  if (qword_100A12680 != -1) {
    dispatch_once(&qword_100A12680, &stru_1009ABC88);
  }
  return (byte_100A12678 & 1) == 0;
}

void sub_1003D2224(id a1)
{
  uint64_t v1 = MGGetProductType();
  if (v1 <= 1110205731)
  {
    if (v1 != 33245053)
    {
      uint64_t v2 = 741626682;
LABEL_7:
      if (v1 != v2) {
        return;
      }
    }
  }
  else if (v1 != 1110205732 && v1 != 2692844695)
  {
    uint64_t v2 = 2271819421;
    goto LABEL_7;
  }
  byte_100A12678 = 1;
}

uint64_t sub_1003D22A4()
{
  return 60;
}

uint64_t sub_1003D22AC(uint64_t a1)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 376))(a1)) {
    return 60;
  }
  else {
    return 180;
  }
}

uint64_t sub_1003D22FC()
{
  unsigned __int8 v8 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(buf, "SMP");
  sub_10004191C(__p, "DisableCTKD");
  int v1 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, unsigned __int8 *))(*(void *)v0 + 72))(v0, buf, __p, &v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0)
  {
    operator delete(*(void **)buf);
    if (!v1) {
      return v8;
    }
  }
  else if (!v1)
  {
    return v8;
  }
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Warning: DisableCTKD", buf, 2u);
  }
  return v8;
}

void sub_1003D23F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D2430()
{
  if (qword_100A12690 != -1) {
    dispatch_once(&qword_100A12690, &stru_1009ABCA8);
  }
  return byte_100A12688;
}

void sub_1003D2474(id a1)
{
  int v1 = (char *)malloc_type_malloc(0x16uLL, 0x4BD24E2CuLL);
  snprintf(v1, 0x16uLL, "%s%s", "IODeviceTree", ":/product");
  io_registry_entry_t v2 = IORegistryEntryFromPath(kIOMainPortDefault, v1);
  if (v2)
  {
    io_object_t v3 = v2;
    CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v2, @"boot-ios-diagnostics", kCFAllocatorDefault, 0);
    if (CFProperty)
    {
      CFRelease(CFProperty);
      int v5 = 1;
    }
    else
    {
      int v5 = 0;
    }
    IOObjectRelease(v3);
    if (v1) {
      goto LABEL_8;
    }
  }
  else
  {
    int v5 = 0;
    if (v1) {
LABEL_8:
    }
      free(v1);
  }
  byte_100A12688 = v5;
  BOOL v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Setting diagnositcs mode to %d", buf, 8u);
  }
}

uint64_t sub_1003D25C8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D2658;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A126A0 != -1) {
    dispatch_once(&qword_100A126A0, block);
  }
  return byte_100A12698;
}

void sub_1003D2658(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2120))(v2);
    byte_100A12698 = v3;
    id v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (v3) {
        int v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended scans : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisableExtScans");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_24;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableExtScans=%d", buf, 8u);
    }
    if (byte_100A12698) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12698 = v10;
  }
LABEL_24:
  char v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12698) {
      int v12 = "enabled";
    }
    else {
      int v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Extended Scanning is %s", buf, 0xCu);
  }
}

void sub_1003D2980(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D29BC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D2A4C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A126B0 != -1) {
    dispatch_once(&qword_100A126B0, block);
  }
  return byte_100A126A8;
}

void sub_1003D2A4C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 1984))(v2);
    byte_100A126A8 = v3;
    id v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (v3) {
        int v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertisingsets : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisableExtAdvertising");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_24;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableAdvertising=%d", buf, 8u);
    }
    if (byte_100A126A8) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A126A8 = v10;
  }
LABEL_24:
  char v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A126A8) {
      int v12 = "enabled";
    }
    else {
      int v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Extended Advertising is %s", buf, 0xCu);
  }
}

void sub_1003D2D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D2DB0()
{
  if (qword_100A126C0 != -1) {
    dispatch_once(&qword_100A126C0, &stru_1009ABCC8);
  }
  return byte_100A126B8;
}

void sub_1003D2DF4(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 1992))(v1);
  byte_100A126B8 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = "disabled";
    if (v2) {
      id v4 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for periodic advertising advertiser : %s", buf, 0xCu);
    int v2 = byte_100A126B8;
  }
  if (v2)
  {
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisablePeriodicAdvertisingAdv");
    int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    int v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisablePeriodicAdvertisingAdv=%d", buf, 8u);
    }
    if (byte_100A126B8) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_100A126B8 = v9;
  }
LABEL_21:
  char v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A126B8) {
      char v11 = "enabled";
    }
    else {
      char v11 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Periodic Advertising Advertiser is %s", buf, 0xCu);
  }
}

void sub_1003D3050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D308C()
{
  if (qword_100A126D0 != -1) {
    dispatch_once(&qword_100A126D0, &stru_1009ABCE8);
  }
  return byte_100A126C8;
}

void sub_1003D30D0(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2000))(v1);
  byte_100A126C8 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = "disabled";
    if (v2) {
      id v4 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for periodic advertising synchronizer : %s", buf, 0xCu);
    int v2 = byte_100A126C8;
  }
  if (v2)
  {
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisablePeriodicAdvertisingSync");
    int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    int v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisablePeriodicAdvertisingSync=%d", buf, 8u);
    }
    if (byte_100A126C8) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_100A126C8 = v9;
  }
LABEL_21:
  char v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A126C8) {
      char v11 = "enabled";
    }
    else {
      char v11 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Periodic Advertising Synchronizer is %s", buf, 0xCu);
  }
}

void sub_1003D332C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D3368()
{
  if (qword_100A126E0 != -1) {
    dispatch_once(&qword_100A126E0, &stru_1009ABD08);
  }
  return byte_100A126D8;
}

void sub_1003D33AC(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2008))(v1);
  byte_100A126D8 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = "disabled";
    if (v2) {
      id v4 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for periodic advertising sync transfer sender : %s", buf, 0xCu);
    int v2 = byte_100A126D8;
  }
  if (v2)
  {
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisablePeriodicAdvSyncTranSender");
    int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    int v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisablePeriodicAdvSyncTranSender=%d", buf, 8u);
    }
    if (byte_100A126D8) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_100A126D8 = v9;
  }
LABEL_21:
  char v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A126D8) {
      char v11 = "enabled";
    }
    else {
      char v11 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Periodic Advertising Sync Transfer Sender is %s", buf, 0xCu);
  }
}

void sub_1003D3608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D3644()
{
  if (qword_100A126F0 != -1) {
    dispatch_once(&qword_100A126F0, &stru_1009ABD28);
  }
  return byte_100A126E8;
}

void sub_1003D3688(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2016))(v1);
  byte_100A126E8 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    id v4 = "disabled";
    if (v2) {
      id v4 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for periodic advertising sync transfer recipient: %s", buf, 0xCu);
    int v2 = byte_100A126E8;
  }
  if (v2)
  {
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisablePeriodicAdvSyncTranRecipient");
    int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    int v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisablePeriodicAdvSyncTranRecipient=%d", buf, 8u);
    }
    if (byte_100A126E8) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_100A126E8 = v9;
  }
LABEL_21:
  char v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A126E8) {
      char v11 = "enabled";
    }
    else {
      char v11 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Periodic Advertising Sync Transfer Recipient is %s", buf, 0xCu);
  }
}

void sub_1003D38E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D3920(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2024))(v2);
    byte_100A126F8 = v3;
    id v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      int v8 = 136315138;
      char v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with scan source core : %s", (uint8_t *)&v8, 0xCu);
    }
  }
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A126F8) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    int v8 = 136315138;
    char v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "support for extended advertising report with scan source core is %s", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1003D3B20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2032))(v2);
    byte_100A12708 = v3;
    id v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      int v8 = 136315138;
      char v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with pass up : %s", (uint8_t *)&v8, 0xCu);
    }
  }
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12708) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    int v8 = 136315138;
    char v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "support for extended advertising report with pass up is %s", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1003D3D20(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2040))(v2);
    byte_100A12718 = v3;
    id v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      int v8 = 136315138;
      char v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with ELNA mode : %s", (uint8_t *)&v8, 0xCu);
    }
  }
  int v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12718) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    int v8 = 136315138;
    char v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "support for extended advertising report with ELNA mode is %s", (uint8_t *)&v8, 0xCu);
  }
}

uint64_t sub_1003D3F20(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D3FB0;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12730 != -1) {
    dispatch_once(&qword_100A12730, block);
  }
  return byte_100A12728;
}

void sub_1003D3FB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 376))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    goto LABEL_35;
  }
  uint64_t v2 = sub_10003FB34();
  byte_100A12728 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2192))(v2);
  if (sub_1003FAF7C() == 93 || sub_1003FAF7C() == 94)
  {
    uint64_t v3 = sub_10003FB34();
    (*(void (**)(long long *__return_ptr))(*(void *)v3 + 16))(&buf);
    if ((v18 & 0x80000000) == 0)
    {
      if (v18 != 2 || (unsigned __int16)buf != 12355) {
        goto LABEL_15;
      }
LABEL_13:
      byte_100A12728 = 0;
      goto LABEL_15;
    }
    if (*((void *)&buf + 1) != 2)
    {
      operator delete((void *)buf);
      goto LABEL_15;
    }
    int v4 = *(unsigned __int16 *)buf;
    operator delete((void *)buf);
    if (v4 == 12355) {
      goto LABEL_13;
    }
  }
LABEL_15:
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12728) {
      int v6 = "enabled";
    }
    else {
      int v6 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "BT chip support for LowPowerCore Scan : %s", (uint8_t *)&buf, 0xCu);
  }
  unsigned __int8 v16 = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(&buf, "LowPowerCoreScan");
  sub_10004191C(__p, "DisableLowPowerCoreScan");
  int v8 = (*(uint64_t (**)(uint64_t, long long *, void **, unsigned __int8 *))(*(void *)v7 + 72))(v7, &buf, __p, &v16);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (v18 < 0)
  {
    operator delete((void *)buf);
    if (!v8) {
      goto LABEL_35;
    }
  }
  else if (!v8)
  {
    goto LABEL_35;
  }
  char v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v16;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Overriding Disabling LowPowerCore Scan=%d", (uint8_t *)&buf, 8u);
  }
  if (byte_100A12728) {
    BOOL v10 = v16 == 0;
  }
  else {
    BOOL v10 = 0;
  }
  char v11 = v10;
  byte_100A12728 = v11;
LABEL_35:
  int v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12728) {
      char v13 = "enabled";
    }
    else {
      char v13 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "support for new LowPowerCore scan is %s", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1003D436C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D43A8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D4438;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12740 != -1) {
    dispatch_once(&qword_100A12740, block);
  }
  return byte_100A12738;
}

void sub_1003D4438(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 328))(*(void *)(a1 + 32)))
  {
    uint64_t v1 = sub_10003FB34();
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2048))(v1);
    byte_100A12738 = v2;
    uint64_t v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = "disabled";
      if (v2) {
        int v4 = "enabled";
      }
      int v7 = 136315138;
      int v8 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with SC Compensation : %s", (uint8_t *)&v7, 0xCu);
    }
  }
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12738) {
      int v6 = "enabled";
    }
    else {
      int v6 = "disabled";
    }
    int v7 = 136315138;
    int v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "support for extended advertising report with SC Compensation is %s", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t sub_1003D45CC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D465C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12750 != -1) {
    dispatch_once(&qword_100A12750, block);
  }
  return dword_100A12748;
}

void sub_1003D465C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_10003FB34();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2064))(v2);
  if (v3)
  {
    int v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with antenna enabled", buf, 2u);
    }
  }
  uint64_t v5 = sub_10003FB34();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 2056))(v5))
  {
    int v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "BT chip support for extended advertising report with Coex Denial enabled", buf, 2u);
    }
  }
  if ((*(_DWORD *)(sub_10003FB34() + 712) - 1) <= 0x7CE)
  {
    if (v3)
    {
      if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
        || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384))(v1) & 1) != 0
        || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 424))(v1))
      {
        int v7 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "getEstimateScanRequestTxDeniedByCoexType : Yes", buf, 2u);
        }
        dword_100A12748 = 1;
      }
      int v14 = 0;
      uint64_t v8 = sub_100017768();
      sub_10004191C(buf, "BBFC");
      sub_10004191C(__p, "EnableEstimateScanRequestTxDeniedByCoex");
      int v9 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v8 + 88))(v8, buf, __p, &v14);
      if (v13 < 0) {
        operator delete(__p[0]);
      }
      if (v18 < 0) {
        operator delete(*(void **)buf);
      }
      if (v9)
      {
        BOOL v10 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = dword_100A12748;
          __int16 v16 = 1024;
          int v17 = v14;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "getEstimateScanRequestTxDeniedByCoexType (overriden): original %d overriden %d", buf, 0xEu);
        }
        dword_100A12748 = v14;
      }
    }
    else
    {
      char v11 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "getEstimateScanRequestTxDeniedByCoexType : No", buf, 2u);
      }
    }
  }
}

void sub_1003D49EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D4A28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    goto LABEL_46;
  }
  uint64_t v2 = sub_10003FB34();
  byte_100A12758 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2184))(v2);
  if (sub_1003FAF7C() == 93 || sub_1003FAF7C() == 94)
  {
    uint64_t v3 = sub_10003FB34();
    (*(void (**)(long long *__return_ptr))(*(void *)v3 + 16))(&buf);
    if (v20 < 0)
    {
      if (*((void *)&buf + 1) != 2)
      {
        operator delete((void *)buf);
        goto LABEL_14;
      }
      int v4 = *(unsigned __int16 *)buf;
      operator delete((void *)buf);
      if (v4 == 12355) {
        goto LABEL_12;
      }
    }
    else if (v20 == 2 && (unsigned __int16)buf == 12355)
    {
LABEL_12:
      byte_100A12758 = 0;
    }
  }
LABEL_14:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1) && *(_DWORD *)(sub_10003FB34() + 712) == 21) {
    byte_100A12758 = 0;
  }
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v1 + 424))(v1)) {
    goto LABEL_26;
  }
  uint64_t v5 = sub_10003FB34();
  (*(void (**)(long long *__return_ptr))(*(void *)v5 + 16))(&buf);
  if ((v20 & 0x80000000) == 0)
  {
    if (v20 != 2 || (unsigned __int16)buf != 12355) {
      goto LABEL_26;
    }
LABEL_24:
    byte_100A12758 = 0;
    goto LABEL_26;
  }
  if (*((void *)&buf + 1) != 2)
  {
    operator delete((void *)buf);
    goto LABEL_26;
  }
  int v6 = *(unsigned __int16 *)buf;
  operator delete((void *)buf);
  if (v6 == 12355) {
    goto LABEL_24;
  }
LABEL_26:
  int v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12758) {
      uint64_t v8 = "enabled";
    }
    else {
      uint64_t v8 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "BT chip support for LowPowerCore Scan : %s", (uint8_t *)&buf, 0xCu);
  }
  unsigned __int8 v18 = 0;
  uint64_t v9 = sub_100017768();
  sub_10004191C(&buf, "LowPowerCoreScan");
  sub_10004191C(__p, "DisableLowPowerCoreScan");
  int v10 = (*(uint64_t (**)(uint64_t, long long *, void **, unsigned __int8 *))(*(void *)v9 + 72))(v9, &buf, __p, &v18);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if (v20 < 0)
  {
    operator delete((void *)buf);
    if (!v10) {
      goto LABEL_46;
    }
  }
  else if (!v10)
  {
    goto LABEL_46;
  }
  char v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v18;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Overriding Disabling LowPowerCore Scan=%d", (uint8_t *)&buf, 8u);
  }
  if (byte_100A12758) {
    BOOL v12 = v18 == 0;
  }
  else {
    BOOL v12 = 0;
  }
  char v13 = v12;
  byte_100A12758 = v13;
LABEL_46:
  int v14 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12758) {
      char v15 = "enabled";
    }
    else {
      char v15 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "support for new LowPowerCore scan is %s", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1003D4EA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D4EE4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D4F74;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12770 != -1) {
    dispatch_once(&qword_100A12770, block);
  }
  return byte_100A12768;
}

void sub_1003D4F74(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2200))(v2);
    byte_100A12768 = v3;
    int v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Low Power Scan with Limited RSSI Reading: %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "LowPowerCoreScan");
    sub_10004191C(__p, "DisableLowPowerCoreScanWithLimitedRSSIReading");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_23;
      }
    }
    else if (!v7)
    {
      goto LABEL_23;
    }
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Disabling LowPowerCore with limited RSSI Reading %d", buf, 8u);
    }
    if (byte_100A12768) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12768 = v10;
  }
LABEL_23:
  char v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12768) {
      BOOL v12 = "enabled";
    }
    else {
      BOOL v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Low Power Scan with Limited RSSI Reading %s", buf, 0xCu);
  }
}

void sub_1003D5268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D52A4()
{
  if (qword_100A12780 != -1) {
    dispatch_once(&qword_100A12780, &stru_1009ABD48);
  }
  return byte_100A12778;
}

void sub_1003D52E8(id a1)
{
  uint64_t v1 = sub_10003FB34();
  byte_100A12778 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2208))(v1);
  unsigned __int8 v10 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "VSCScanParams");
  sub_10004191C(__p, "DisableVSCScanParams");
  int v3 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v2 + 72))(v2, buf, __p, &v10);
  if (v9 < 0) {
    operator delete(__p[0]);
  }
  if (v12 < 0) {
    operator delete(*(void **)buf);
  }
  int v4 = qword_100A19E50;
  if (v3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding Disabling VSScanParams Scan=%d", buf, 8u);
      int v4 = qword_100A19E50;
    }
    if (byte_100A12778) {
      BOOL v5 = v10 == 0;
    }
    else {
      BOOL v5 = 0;
    }
    char v6 = v5;
    byte_100A12778 = v6;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12778) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "support for new VSScanParams scan is %s", buf, 0xCu);
  }
}

void sub_1003D54D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D550C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    goto LABEL_42;
  }
  uint64_t v2 = sub_10003FB34();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2216))(v2);
  byte_100A12788 = v3;
  if (sub_1003FAF7C() == 93 || sub_1003FAF7C() == 94)
  {
    uint64_t v4 = sub_10003FB34();
    (*(void (**)(long long *__return_ptr))(*(void *)v4 + 16))(&buf);
    if (v21 < 0)
    {
      if (*((void *)&buf + 1) == 2)
      {
        int v5 = *(unsigned __int16 *)buf;
        operator delete((void *)buf);
        if (v5 != 12355) {
          goto LABEL_14;
        }
        goto LABEL_12;
      }
      operator delete((void *)buf);
    }
    else if (v21 == 2 && (unsigned __int16)buf == 12355)
    {
LABEL_12:
      byte_100A12788 = 0;
    }
  }
LABEL_14:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 424))(v1))
  {
    uint64_t v6 = sub_10003FB34();
    (*(void (**)(long long *__return_ptr))(*(void *)v6 + 16))(&buf);
    if ((v21 & 0x80000000) == 0)
    {
      if (v21 != 2 || (unsigned __int16)buf != 12355) {
        goto LABEL_23;
      }
LABEL_21:
      byte_100A12788 = 0;
      goto LABEL_23;
    }
    if (*((void *)&buf + 1) != 2)
    {
      operator delete((void *)buf);
      goto LABEL_23;
    }
    int v7 = *(unsigned __int16 *)buf;
    operator delete((void *)buf);
    if (v7 == 12355) {
      goto LABEL_21;
    }
  }
LABEL_23:
  uint64_t v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    char v9 = "disabled";
    if (v3) {
      char v9 = "enabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "BT chip support for Scan Core : %s", (uint8_t *)&buf, 0xCu);
  }
  char v19 = 0;
  uint64_t v10 = sub_100017768();
  sub_10004191C(&buf, "ScanCore");
  sub_10004191C(__p, "EnableScanCore");
  int v11 = (*(uint64_t (**)(uint64_t, long long *, void **, char *))(*(void *)v10 + 72))(v10, &buf, __p, &v19);
  if (v18 < 0) {
    operator delete(__p[0]);
  }
  if (v21 < 0)
  {
    operator delete((void *)buf);
    if (!v11) {
      goto LABEL_42;
    }
  }
  else if (!v11)
  {
    goto LABEL_42;
  }
  char v12 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v19) {
      char v13 = "Enabled";
    }
    else {
      char v13 = "Disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v13;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Overriding EnableScanCore with %s", (uint8_t *)&buf, 0xCu);
  }
  if (v19) {
    char v14 = v3;
  }
  else {
    char v14 = 0;
  }
  byte_100A12788 = v14;
LABEL_42:
  unsigned __int8 v15 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12788) {
      __int16 v16 = "enabled";
    }
    else {
      __int16 v16 = "disabled";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "Support for Scan Core is %s", (uint8_t *)&buf, 0xCu);
  }
}

void sub_1003D595C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D5998(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D5A28;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A127A0 != -1) {
    dispatch_once(&qword_100A127A0, block);
  }
  return byte_100A12798;
}

void sub_1003D5A28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 400))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2216))(v2);
    byte_100A12798 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (v3) {
        int v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for LE non-Connection Stats : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "LowPowerCoreScan");
    sub_10004191C(__p, "DisableLEConnectionStatsV1");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_23;
      }
    }
    else if (!v7)
    {
      goto LABEL_23;
    }
    uint64_t v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Disabling LE non-Connection stats V1 (going back to V0)=%d", buf, 8u);
    }
    if (byte_100A12798) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12798 = v10;
  }
LABEL_23:
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12798) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new LE non-Connection Stats V1 scan is %s", buf, 0xCu);
  }
}

void sub_1003D5D1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D5D58(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D5DE8;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A127B0 != -1) {
    dispatch_once(&qword_100A127B0, block);
  }
  return byte_100A127A8;
}

void sub_1003D5DE8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2232))(v2);
    byte_100A127A8 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "disabled";
      if (v3) {
        int v5 = "enabled";
      }
      int v8 = 136315138;
      BOOL v9 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Get Scan Stats : %s", (uint8_t *)&v8, 0xCu);
    }
  }
  uint64_t v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A127A8) {
      int v7 = "enabled";
    }
    else {
      int v7 = "disabled";
    }
    int v8 = 136315138;
    BOOL v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "support for Get Scan Stats is %s", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1003D5FB4(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2248))(v1);
  byte_100A127B8 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "disabled";
    if (v2) {
      uint64_t v4 = "enabled";
    }
    int v5 = 136315138;
    uint64_t v6 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for scan core compensation : %s", (uint8_t *)&v5, 0xCu);
  }
}

uint64_t sub_1003D60A8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D6138;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A127D0 != -1) {
    dispatch_once(&qword_100A127D0, block);
  }
  return byte_100A127C8;
}

void sub_1003D6138(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) == 0
    && ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 344))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 400))(v1))
  {
    goto LABEL_23;
  }
  uint64_t v2 = sub_10003FB34();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2288))(v2);
  byte_100A127C8 = v3;
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "disabled";
    if (v3) {
      int v5 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Low Energy Long Range : %s", buf, 0xCu);
  }
  unsigned __int8 v15 = 0;
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "LowEnergyLongRange");
  sub_10004191C(__p, "LowEnergyLongRangeDisable");
  int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (!v7) {
      goto LABEL_16;
    }
LABEL_14:
    int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Disabling Low Energy Long Range=%d", buf, 8u);
    }
    goto LABEL_16;
  }
  operator delete(*(void **)buf);
  if (v7) {
    goto LABEL_14;
  }
LABEL_16:
  if (byte_100A127C8) {
    BOOL v9 = v15 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = v9;
  byte_100A127C8 = v10;
LABEL_23:
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A127C8) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new Low Energy Long Range is %s", buf, 0xCu);
  }
}

void sub_1003D642C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D6468(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D64F8;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A127D8 != -1) {
    dispatch_once(&qword_100A127D8, block);
  }
  return byte_1009FB3E0;
}

void sub_1003D64F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) == 0
    && !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    goto LABEL_22;
  }
  uint64_t v2 = sub_10003FB34();
  int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2304))(v2);
  byte_1009FB3E0 = v3;
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "disabled";
    if (v3) {
      int v5 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for LE 2M PHy  : %s", buf, 0xCu);
  }
  unsigned __int8 v15 = 0;
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "LE2MPhyDisabled");
  int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (!v7) {
      goto LABEL_15;
    }
LABEL_13:
    int v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Force LE PHY 2M =%d", buf, 8u);
    }
    goto LABEL_15;
  }
  operator delete(*(void **)buf);
  if (v7) {
    goto LABEL_13;
  }
LABEL_15:
  if (byte_1009FB3E0) {
    BOOL v9 = v15 == 0;
  }
  else {
    BOOL v9 = 0;
  }
  char v10 = v9;
  byte_1009FB3E0 = v10;
LABEL_22:
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_1009FB3E0) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Support for LE2MPhy  is %s", buf, 0xCu);
  }
}

void sub_1003D67B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D67F4(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2160))(v1);
  byte_100A127E0 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "disabled";
    if (v2) {
      uint64_t v4 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for Scan With New Vsc : %s", buf, 0xCu);
  }
  unsigned __int8 v13 = 0;
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "ScanEnhancements");
  sub_10004191C(__p, "DisableScanEnhancements");
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, __p, &v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  int v7 = qword_100A19E50;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding Disabling ScanEnhancements=%d", buf, 8u);
      int v7 = qword_100A19E50;
    }
    if (byte_100A127E0) {
      BOOL v8 = v13 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_100A127E0 = v9;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A127E0) {
      char v10 = "enabled";
    }
    else {
      char v10 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "support for new Scan Enhancement VSC is %s", buf, 0xCu);
  }
}

void sub_1003D6A40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D6A7C()
{
  if (qword_100A127F8 != -1) {
    dispatch_once(&qword_100A127F8, &stru_1009ABDA8);
  }
  return byte_100A127F0;
}

void sub_1003D6AC0(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2168))(v1);
  byte_100A127F0 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "disabled";
    if (v2) {
      uint64_t v4 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for removeMultipleDuplicateEntries VSC is %s", buf, 0xCu);
  }
  unsigned __int8 v13 = 0;
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "ScanEnhancements");
  sub_10004191C(__p, "DisableRemoveMultipleDupliateEntries");
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, __p, &v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  int v7 = qword_100A19E50;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding Disabling removeMultipleDuplicateEntries=%d", buf, 8u);
      int v7 = qword_100A19E50;
    }
    if (byte_100A127F0) {
      BOOL v8 = v13 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_100A127F0 = v9;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A127F0) {
      char v10 = "enabled";
    }
    else {
      char v10 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "support for removeMultipleDuplicateEntries VSC is %s", buf, 0xCu);
  }
}

void sub_1003D6D0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D6D48()
{
  if (qword_100A12808 != -1) {
    dispatch_once(&qword_100A12808, &stru_1009ABDC8);
  }
  return byte_100A12800;
}

void sub_1003D6D8C(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2176))(v1);
  byte_100A12800 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "disabled";
    if (v2) {
      uint64_t v4 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "support keeping Duplicate filter when Scan Enable VSC is: %s", buf, 0xCu);
  }
  unsigned __int8 v13 = 0;
  uint64_t v5 = sub_100017768();
  sub_10004191C(buf, "ScanEnhancements");
  sub_10004191C(__p, "KeepDupFilterWhenScanEnable");
  int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, __p, &v13);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  int v7 = qword_100A19E50;
  if (v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding Disabling KeepDupFilterWhenScanEnable=%d", buf, 8u);
      int v7 = qword_100A19E50;
    }
    if (byte_100A12800) {
      BOOL v8 = v13 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_100A12800 = v9;
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12800) {
      char v10 = "enabled";
    }
    else {
      char v10 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "support for KeepDupFilterWhenScanEnable VSC is %s", buf, 0xCu);
  }
}

void sub_1003D6FD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D7014(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D70A4;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12818 != -1) {
    dispatch_once(&qword_100A12818, block);
  }
  return byte_100A12810;
}

void sub_1003D70A4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2144))(v2);
    byte_100A12810 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for BT Spec advertisingsets : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisableSpecSets");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_24;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    BOOL v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableSpecSets=%d", buf, 8u);
    }
    if (byte_100A12810) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12810 = v10;
  }
LABEL_24:
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12810) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for BT 5.0 advertising sets is %s", buf, 0xCu);
  }
}

void sub_1003D73CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D7408(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D7498;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12828 != -1) {
    dispatch_once(&qword_100A12828, block);
  }
  return byte_100A12820;
}

void sub_1003D7498(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 376))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2128))(v2);
    byte_100A12820 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Enhanced Connections : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisableEnhancedConnections");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_24;
      }
    }
    else if (!v7)
    {
      goto LABEL_24;
    }
    BOOL v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableEnhancedConnections=%d", buf, 8u);
    }
    if (byte_100A12820) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12820 = v10;
  }
LABEL_24:
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12820) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Enhanced Connections is %s", buf, 0xCu);
  }
}

void sub_1003D77C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D77FC(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D788C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12838 != -1) {
    dispatch_once(&qword_100A12838, block);
  }
  return byte_100A12830;
}

void sub_1003D788C(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 328))(*(void *)(a1 + 32)))
  {
    uint64_t v1 = sub_10003FB34();
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2136))(v1);
    byte_100A12830 = v2;
    int v3 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = "disabled";
      if (v2) {
        uint64_t v4 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for Enhanced Connections V2 : %s", buf, 0xCu);
    }
    unsigned __int8 v14 = 0;
    uint64_t v5 = sub_100017768();
    sub_10004191C(buf, "AE");
    sub_10004191C(__p, "DisableEnhancedConnectionsV2");
    int v6 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v5 + 72))(v5, buf, __p, &v14);
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v16 < 0)
    {
      operator delete(*(void **)buf);
      if (!v6) {
        goto LABEL_21;
      }
    }
    else if (!v6)
    {
      goto LABEL_21;
    }
    int v7 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Overriding DisableEnhancedConnectionsV2=%d", buf, 8u);
    }
    if (byte_100A12830) {
      BOOL v8 = v14 == 0;
    }
    else {
      BOOL v8 = 0;
    }
    char v9 = v8;
    byte_100A12830 = v9;
  }
LABEL_21:
  char v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12830) {
      int v11 = "enabled";
    }
    else {
      int v11 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "support for Enhanced Connections V2 is %s", buf, 0xCu);
  }
}

void sub_1003D7B18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D7B54(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D7BE4;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12848 != -1) {
    dispatch_once(&qword_100A12848, block);
  }
  return byte_100A12840;
}

void sub_1003D7BE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2256))(v2);
    byte_100A12840 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Controller BT clock capture : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "DisallowControllerBTClockConfigure");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    BOOL v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Controller BT clock capture =%d", buf, 8u);
    }
    if (byte_100A12840) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12840 = v10;
  }
LABEL_22:
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12840) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new Controller BT clock capture is %s", buf, 0xCu);
  }
}

void sub_1003D7EA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D7EE0(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D7F70;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12858 != -1) {
    dispatch_once(&qword_100A12858, block);
  }
  return byte_100A12850;
}

void sub_1003D7F70(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2264))(v2);
    byte_100A12850 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for RSSI Connection statistics and detection : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "DisallowRSSIConnectionStatisticAndInterval");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    BOOL v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding RSSI Connection statistics and detection =%d", buf, 8u);
    }
    if (byte_100A12850) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12850 = v10;
  }
LABEL_22:
  int v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12850) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for new RSSI Connection statistics and detection is %s", buf, 0xCu);
  }
}

void sub_1003D8230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D826C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D82FC;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12868 != -1) {
    dispatch_once(&qword_100A12868, block);
  }
  return byte_100A12860;
}

void sub_1003D82FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    byte_100A12860 = 1;
    unsigned __int8 v9 = 0;
    uint64_t v2 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "MagnetTimeoutABCLog");
    int v3 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v2 + 72))(v2, buf, __p, &v9);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v11 < 0)
    {
      operator delete(*(void **)buf);
      if (!v3) {
        goto LABEL_12;
      }
    }
    else if (!v3)
    {
      goto LABEL_12;
    }
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Overriding MagnetTimeoutABCLog =%d", buf, 8u);
    }
    byte_100A12860 = v9;
  }
LABEL_12:
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12860) {
      uint64_t v6 = "enabled";
    }
    else {
      uint64_t v6 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "support for Magnet Timeout ABC Log is %s", buf, 0xCu);
  }
}

void sub_1003D851C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D8558()
{
  if (qword_100A12878 != -1) {
    dispatch_once(&qword_100A12878, &stru_1009ABDE8);
  }
  return byte_100A12870;
}

void sub_1003D859C(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2456))(v1);
  byte_100A12870 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      uint64_t v4 = "enabled";
    }
    else {
      uint64_t v4 = "disabled";
    }
    int v7 = 136315138;
    char v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for LE Manufacturer Scan Filter : %s", (uint8_t *)&v7, 0xCu);
    int v2 = byte_100A12870;
  }
  if (v2) {
    int v2 = _os_feature_enabled_impl();
  }
  byte_100A12870 = v2;
  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      uint64_t v6 = "enabled";
    }
    else {
      uint64_t v6 = "disabled";
    }
    int v7 = 136315138;
    char v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "support for LE Manufacturer Scan Filter %s", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t sub_1003D8718(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D87A8;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12888 != -1) {
    dispatch_once(&qword_100A12888, block);
  }
  return byte_100A12880;
}

void sub_1003D87A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2272))(v2);
    byte_100A12880 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Bluetooth Usage  : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "DisallowBluetoothUsageNotification");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    char v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Bluetooth usage notification =%d", buf, 8u);
    }
    if (byte_100A12880) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12880 = v10;
  }
LABEL_22:
  char v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12880) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Bluetooth usage notification is %s", buf, 0xCu);
  }
}

void sub_1003D8A68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D8AA4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D8B34;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12898 != -1) {
    dispatch_once(&qword_100A12898, block);
  }
  return byte_100A12890;
}

void sub_1003D8B34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2280))(v2);
    byte_100A12890 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Phy Statistics Usage : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "DisallowPhyStatisticsUsageNotification");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    char v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding Phy Statistics Bluetooth usage notification =%d", buf, 8u);
    }
    if (byte_100A12890) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A12890 = v10;
  }
LABEL_22:
  char v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12890) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Phy Statistics Bluetooth notification is %s", buf, 0xCu);
  }
}

void sub_1003D8DF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D8E30(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 376))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2312))(v2);
    byte_100A128A0 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "YES";
      if (!v3) {
        uint64_t v5 = "NO";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v5;
      __int16 v15 = 1024;
      int v16 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for ADV Buffers is : %s (%d buffers)", buf, 0x12u);
    }
    unsigned __int8 v13 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "DisableADVBuffers");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v13);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_16;
      }
    }
    else if (!v7)
    {
      goto LABEL_16;
    }
    char v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v13;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableADVBuffers=%d", buf, 8u);
    }
    byte_100A128A0 = 0;
  }
LABEL_16:
  BOOL v9 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    char v10 = "YES";
    if (!byte_100A128A0) {
      char v10 = "NO";
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v10;
    __int16 v15 = 1024;
    int v16 = byte_100A128A0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "support for ADV Buffering is %s (%d buffers)", buf, 0x12u);
  }
}

void sub_1003D90F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D9130(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003D91C0;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A128B8 != -1) {
    dispatch_once(&qword_100A128B8, block);
  }
  return byte_100A128B0;
}

void sub_1003D91C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 376))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2480))(v2);
    byte_100A128B0 = v3;
    uint64_t v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = "disabled";
      if (v3) {
        uint64_t v5 = "enabled";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Match Buffers is  : %s", buf, 0xCu);
    }
    unsigned __int8 v15 = 0;
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "DisableMatchBuffers");
    int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v6 + 72))(v6, buf, __p, &v15);
    if (v14 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v7) {
        goto LABEL_22;
      }
    }
    else if (!v7)
    {
      goto LABEL_22;
    }
    char v8 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v15;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Overriding DisableMatchBuffers=%d", buf, 8u);
    }
    if (byte_100A128B0) {
      BOOL v9 = v15 == 0;
    }
    else {
      BOOL v9 = 0;
    }
    char v10 = v9;
    byte_100A128B0 = v10;
  }
LABEL_22:
  char v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A128B0) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Match Buffering is %s", buf, 0xCu);
  }
}

void sub_1003D9480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003D94BC()
{
  if (qword_100A128C8 != -1) {
    dispatch_once(&qword_100A128C8, &stru_1009ABE08);
  }
  unsigned __int8 v7 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(buf, "A2DP");
  sub_10004191C(__p, "WirelessSplitter");
  (*(void (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v0 + 72))(v0, buf, __p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  BOOL v1 = (byte_100A128C0 | v7) != 0;
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = "not supported";
    if (v1) {
      int v3 = "supported";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Wireless Splitter is %s on this hardware platform", buf, 0xCu);
  }
  return v1;
}

void sub_1003D9638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003D9674(id a1)
{
  byte_100A128C0 = MGGetBoolAnswer();
}

uint64_t sub_1003D969C()
{
  unsigned int v0 = sub_1003FAF7C() - 57;
  return (v0 < 0x16) & (0x3C0033u >> v0);
}

uint64_t sub_1003D96D0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(void *)a1 + 384))(a1);
}

BOOL sub_1003D9710()
{
  return sub_1003FAF7C() == 136;
}

uint64_t sub_1003D9730()
{
  if (qword_100A128D0 != -1) {
    dispatch_once(&qword_100A128D0, &stru_1009ABE28);
  }
  return (unsigned __int16)word_1009FB3E2;
}

void sub_1003D9774(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2616))(v1);
  word_1009FB3E2 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Minimum advertising interval supported by HW : %d", buf, 8u);
  }
  int v9 = 32;
  uint64_t v4 = sub_100017768();
  sub_10004191C(buf, "AE");
  sub_10004191C(__p, "MinAdvertisingInterval");
  int v5 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, int *))(*(void *)v4 + 88))(v4, buf, __p, &v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
  char v6 = qword_100A19E50;
  if (v5)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = v9;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Overriding MinAdvertisingInterval=%d", buf, 8u);
      char v6 = qword_100A19E50;
    }
    word_1009FB3E2 = v9;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = (unsigned __int16)word_1009FB3E2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Minimum advertising interval is %d", buf, 8u);
  }
}

void sub_1003D9984(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003D99C0()
{
  return sub_1003FAF7C() == 148;
}

uint64_t sub_1003D99E0()
{
  if (qword_100A128E0 != -1) {
    dispatch_once(&qword_100A128E0, &stru_1009ABE48);
  }
  return byte_100A128D8;
}

void sub_1003D9A24(id a1)
{
  char v8 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "Scan");
  sub_10004191C(__p, "DisableMatchTableConfigV2");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = sub_10003FB34();
  if (!v8)
  {
    unsigned int v3 = *(_DWORD *)(v2 + 712);
    if (v3 >= 0x7D0 && v3 <= 0xF9F && v3 >= 0x7D1) {
      byte_100A128D8 = 1;
    }
  }
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A128D8) {
      int v5 = "enabled";
    }
    else {
      int v5 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "support for MatchTableV2 usage notification is %s", buf, 0xCu);
  }
}

void sub_1003D9B98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D9BD4()
{
  if (qword_100A128F0 != -1) {
    dispatch_once(&qword_100A128F0, &stru_1009ABE68);
  }
  return byte_100A128E8;
}

void sub_1003D9C18(id a1)
{
  char v8 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "Scan");
  sub_10004191C(__p, "DisableMatchTableConfigV3");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &v8);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v10 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = sub_10003FB34();
  if (!v8)
  {
    unsigned int v3 = *(_DWORD *)(v2 + 712);
    if (v3 >= 0x7D0 && v3 <= 0xF9F && v3 >= 0x7D1) {
      byte_100A128E8 = 1;
    }
  }
  uint64_t v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A128E8) {
      int v5 = "enabled";
    }
    else {
      int v5 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "support for MatchTableV3 usage notification is %s", buf, 0xCu);
  }
}

void sub_1003D9D8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D9DC8()
{
  if (qword_100A12900 != -1) {
    dispatch_once(&qword_100A12900, &stru_1009ABE88);
  }
  return byte_100A128F8;
}

void sub_1003D9E0C(id a1)
{
  char v7 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "IncludeHiddenLEFeatureVendors");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &v7);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v2 = sub_10003FB34();
  byte_100A128F8 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2608))(v2);
  if ((*(_DWORD *)(sub_10003FB34() + 712) - 1) <= 0x7CE && !v7) {
    byte_100A128F8 = 0;
  }
  unsigned int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A128F8) {
      uint64_t v4 = "include";
    }
    else {
      uint64_t v4 = "not include";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "support for Inclue Hidden LE Feature Vendor List Vendors is %s", buf, 0xCu);
  }
}

void sub_1003D9FA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003D9FDC()
{
  uint64_t v0 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v0 + 8))(v0)) {
    goto LABEL_10;
  }
  char v8 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "HFP");
  sub_10004191C(__p, "DisableUWBS");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(*(void **)buf);
  }
  if (v8)
  {
    uint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "UWBS for HFP disabled by defaults write", buf, 2u);
    }
    return 0;
  }
  else
  {
LABEL_10:
    sub_10003FB34();
    return sub_1003509EC();
  }
}

void sub_1003DA108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DA13C()
{
  uint64_t v0 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v0 + 328))(v0)
    || (uint64_t result = _os_feature_enabled_impl(), result))
  {
    uint64_t v2 = sub_10003FB34();
    return sub_100350D18(v2);
  }
  return result;
}

uint64_t sub_1003DA1B8()
{
  uint64_t v0 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v0 + 384))(v0))
  {
    uint64_t v1 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v1 + 8))(v1))
    {
      char v12 = 0;
      uint64_t v2 = sub_100017768();
      sub_10004191C(v10, "HFP");
      sub_10004191C(__p, "DisableUWBSStereo");
      (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v2 + 72))(v2, v10, __p, &v12);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      if (v12) {
        return 0;
      }
    }
  }
  uint64_t v3 = sub_100035F54();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 328))(v3))
  {
    uint64_t v4 = sub_100017768();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4))
    {
      char v12 = 0;
      uint64_t v5 = sub_100017768();
      sub_10004191C(v10, "HFP");
      sub_10004191C(__p, "DisableUWBSStereo");
      (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v5 + 72))(v5, v10, __p, &v12);
      if (v9 < 0) {
        operator delete(__p[0]);
      }
      if (v11 < 0) {
        operator delete(v10[0]);
      }
      if (v12) {
        return 0;
      }
    }
  }
  uint64_t v7 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v7 + 336))(v7)
    || (uint64_t result = _os_feature_enabled_impl(), result))
  {
    sub_10003FB34();
    return sub_100350B58();
  }
  return result;
}

void sub_1003DA408(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DA444()
{
  uint64_t v0 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v0 + 328))(v0)
    || (uint64_t result = _os_feature_enabled_impl(), result))
  {
    uint64_t v2 = sub_100035F54();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 384))(v2))
    {
      uint64_t result = _os_feature_enabled_impl();
      if (!result) {
        return result;
      }
      char v11 = 0;
      uint64_t v3 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v3 + 8))(v3))
      {
        uint64_t v4 = sub_100017768();
        sub_10004191C(v9, "HFP");
        sub_10004191C(__p, "DisableUWBSStereo");
        (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v4 + 72))(v4, v9, __p, &v11);
        if (v8 < 0) {
          operator delete(__p[0]);
        }
        if (v10 < 0) {
          operator delete(v9[0]);
        }
        if (v11) {
          return 0;
        }
      }
    }
    else
    {
      uint64_t v5 = sub_100035F54();
      if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 336))(v5)) {
        return 0;
      }
    }
    uint64_t v6 = sub_10003FB34();
    return sub_100350D80(v6);
  }
  return result;
}

void sub_1003DA5F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DA62C()
{
  uint64_t result = _os_feature_enabled_impl();
  if (result)
  {
    uint64_t v1 = *(uint64_t (**)(void))(*(void *)sub_10003FB34() + 2496);
    return v1();
  }
  return result;
}

uint64_t sub_1003DA69C()
{
  uint64_t v0 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v0 + 384))(v0) & 1) != 0
    || (uint64_t v1 = sub_100035F54(), result = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1), result))
  {
    sub_10003FB34();
    return sub_100350B58();
  }
  return result;
}

uint64_t sub_1003DA734()
{
  uint64_t v0 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v0 + 8))(v0)) {
    goto LABEL_10;
  }
  char v8 = 0;
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "HFP");
  sub_10004191C(__p, "DisableWBS");
  (*(void (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &v8);
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  if (v7 < 0) {
    operator delete(*(void **)buf);
  }
  if (v8)
  {
    uint64_t v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "WBS for HFP disabled by defaults write", buf, 2u);
    }
    return 0;
  }
  else
  {
LABEL_10:
    sub_10003FB34();
    return sub_1003509A0();
  }
}

void sub_1003DA860(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DA894(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 3:
      if ((*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1)) {
        return 0;
      }
      char v9 = *(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 792);
      return v9(a1, 1);
    case 6:
      char v8 = *(uint64_t (**)(void))(*(void *)a1 + 192);
      goto LABEL_46;
    case 7:
      char v8 = *(uint64_t (**)(void))(*(void *)a1 + 200);
      goto LABEL_46;
    case 8:
      char v8 = *(uint64_t (**)(void))(*(void *)a1 + 208);
      goto LABEL_46;
    case 9:
      char v8 = *(uint64_t (**)(void))(*(void *)a1 + 216);
      goto LABEL_46;
    case 10:
      char v8 = *(uint64_t (**)(void))(*(void *)a1 + 224);
      goto LABEL_46;
    case 11:
      char v8 = *(uint64_t (**)(void))(*(void *)a1 + 232);
      goto LABEL_46;
    case 12:
      char v8 = *(uint64_t (**)(void))(*(void *)a1 + 240);
LABEL_46:
      uint64_t result = v8();
      break;
    default:
      uint64_t v5 = sub_10003FB34();
      uint64_t result = 0;
      unsigned int v6 = *(_DWORD *)(v5 + 712);
      switch(a2)
      {
        case 0:
          int v10 = sub_1003FAF7C() - 6;
          uint64_t result = 1;
          switch(v10)
          {
            case 0:
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
            case 8:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 14:
            case 15:
            case 16:
            case 17:
            case 22:
            case 23:
            case 24:
            case 25:
            case 26:
            case 51:
            case 52:
            case 55:
            case 56:
            case 61:
            case 62:
            case 63:
            case 64:
            case 65:
            case 66:
            case 67:
            case 68:
            case 69:
            case 70:
            case 71:
            case 72:
            case 73:
            case 74:
            case 75:
            case 76:
            case 77:
            case 78:
            case 79:
            case 80:
            case 81:
            case 83:
            case 84:
            case 85:
            case 86:
            case 87:
            case 88:
            case 89:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 103:
            case 104:
            case 110:
            case 111:
            case 112:
            case 113:
            case 136:
            case 137:
            case 138:
            case 139:
            case 178:
            case 179:
            case 180:
            case 181:
            case 182:
            case 183:
              return result;
            default:
              uint64_t result = v6 > 0x13;
              break;
          }
          break;
        case 1:
        case 4:
          if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 352))(a1)) {
            BOOL v7 = v6 > 0xB;
          }
          else {
            BOOL v7 = 0;
          }
          if (v7) {
            goto LABEL_42;
          }
          LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 360))(a1);
          if (v6 > 0xC) {
            uint64_t result = result;
          }
          else {
            uint64_t result = 0;
          }
          break;
        case 2:
          uint64_t v11 = sub_100035F54();
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v11 + 328))(v11)) {
            return 0;
          }
          uint64_t v12 = sub_100035F54();
          if (!(*(unsigned int (**)(uint64_t, void))(*(void *)v12 + 792))(v12, 0)) {
            return 0;
          }
          uint64_t v13 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 8))(v13))
          {
            uint64_t v14 = sub_100017768();
            if (((*(uint64_t (**)(uint64_t))(*(void *)v14 + 592))(v14) & 1) == 0) {
              return 0;
            }
          }
LABEL_42:
          uint64_t result = 1;
          break;
        case 5:
          uint64_t v15 = sub_100035F54();
          int v16 = (*(uint64_t (**)(uint64_t, void))(*(void *)v15 + 792))(v15, 0);
          uint64_t result = 0;
          if (v16)
          {
            char v8 = *(uint64_t (**)(void))(*(void *)sub_100035F54() + 424);
            goto LABEL_46;
          }
          break;
        default:
          return result;
      }
      break;
  }
  return result;
}

uint64_t sub_1003DB0C8()
{
  unsigned int v0 = sub_1003FAF7C();
  if (v0 > 0x16) {
    return 0;
  }
  else {
    return byte_1007BD850[v0];
  }
}

BOOL sub_1003DB0FC(uint64_t a1)
{
  return *(_DWORD *)(sub_10003FB34() + 712)
      && *(_DWORD *)(sub_10003FB34() + 712) <= 0x7CFu
      && *(_DWORD *)(sub_10003FB34() + 712) >= 0x16u
      && !(*(unsigned int (**)(uint64_t))(*(void *)a1 + 384))(a1);
}

uint64_t sub_1003DB188()
{
  if (qword_100A12910 != -1) {
    dispatch_once(&qword_100A12910, &stru_1009ABEA8);
  }
  return byte_100A12908;
}

void sub_1003DB1CC(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2072))(v1);
  byte_100A12908 = v2;
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Support power Tag feature =%d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_1003DB2A8()
{
  if (qword_100A12920 != -1) {
    dispatch_once(&qword_100A12920, &stru_1009ABEC8);
  }
  return byte_100A12918;
}

void sub_1003DB2EC(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2080))(v1);
  byte_100A12918 = v2;
  uint64_t v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Support power Tag feature =%d", (uint8_t *)v4, 8u);
  }
}

uint64_t sub_1003DB3C8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 12);
}

uint64_t sub_1003DB3D0(uint64_t a1, char a2)
{
  uint64_t result = _os_feature_enabled_impl();
  *(unsigned char *)(a1 + 12) = result & a2;
  return result;
}

uint64_t sub_1003DB410()
{
  if (qword_100A12930 != -1) {
    dispatch_once(&qword_100A12930, &stru_1009ABEE8);
  }
  return byte_100A12928;
}

void sub_1003DB454(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2096))(v1);
  char v13 = 0;
  uint64_t v3 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "EnableAdjustLEInstantFactor");
  int v4 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v3 + 72))(v3, buf, __p, &v13);
  if (v13) {
    int v5 = v4;
  }
  else {
    int v5 = 0;
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(*(void **)buf);
  }
  int v6 = v5 | v2;
  byte_100A12928 = v5 | v2;
  BOOL v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    char v8 = "No";
    if (v6) {
      char v9 = "Yes";
    }
    else {
      char v9 = "No";
    }
    if (v2) {
      int v10 = "Yes";
    }
    else {
      int v10 = "No";
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = v9;
    __int16 v15 = 2080;
    int v16 = v10;
    if (v13) {
      char v8 = "Yes";
    }
    __int16 v17 = 2080;
    char v18 = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Support for Adjusting LE Instant Factor is enabled: %s (hw %s override %s)", buf, 0x20u);
  }
}

void sub_1003DB608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003DB644(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 384))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 336))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 344))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 424))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 2648))(v2);
    byte_100A12938 = v3;
  }
  else
  {
    int v3 = byte_100A12938;
  }
  if (!v3) {
    goto LABEL_29;
  }
  unsigned int v4 = *(_DWORD *)(sub_10003FB34() + 712);
  BOOL v5 = !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1) || v4 == 0;
  if (v5 || v4 != 20)
  {
    BOOL v6 = !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 336))(v1) || v4 == 0;
    if (v6 || v4 > 0x7CF) {
      goto LABEL_29;
    }
  }
  char v18 = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "EnforcePrioritization");
  int v8 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v7 + 72))(v7, buf, __p, &v18);
  if (v18) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  if ((v22 & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_25;
    }
LABEL_28:
    byte_100A12938 = 0;
    goto LABEL_29;
  }
  operator delete(*(void **)buf);
  if (!v9) {
    goto LABEL_28;
  }
LABEL_25:
  int v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Support for Discovery Scan Prioritization is enforced.", buf, 2u);
  }
LABEL_29:
  uint64_t v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12938) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    uint64_t v13 = sub_10003FB34();
    int v14 = (*(uint64_t (**)(uint64_t))(*(void *)v13 + 2648))(v13);
    __int16 v15 = "N";
    if (v14) {
      __int16 v15 = "Y";
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    __int16 v20 = 2080;
    char v21 = v15;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "Support for Discovery Scan Prioritization is %s (hw capability %s)", buf, 0x16u);
  }
}

void sub_1003DBA24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DBA60()
{
  if (qword_100A12950 != -1) {
    dispatch_once(&qword_100A12950, &stru_1009ABF08);
  }
  return byte_100A12948;
}

void sub_1003DBAA4(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2680))(v1);
  byte_100A12948 = v2;
  if (v2)
  {
    char v13 = 0;
    uint64_t v3 = sub_100017768();
    sub_10004191C(buf, "LE");
    sub_10004191C(__p, "DisableLEConnectionPrioritization");
    int v4 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v3 + 72))(v3, buf, __p, &v13);
    if (v13) {
      int v5 = v4;
    }
    else {
      int v5 = 0;
    }
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v17 < 0)
    {
      operator delete(*(void **)buf);
      if (!v5) {
        goto LABEL_13;
      }
    }
    else if (!v5)
    {
      goto LABEL_13;
    }
    byte_100A12948 = 0;
    BOOL v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "Disable LE Connection Prioritization.", buf, 2u);
    }
  }
LABEL_13:
  uint64_t v7 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12948) {
      int v8 = "enabled";
    }
    else {
      int v8 = "disabled";
    }
    uint64_t v9 = sub_10003FB34();
    int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 2680))(v9);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v8;
    __int16 v15 = 1024;
    int v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Support for LE Connection Prioritization is %s (hw capability %{BOOL}d)", buf, 0x12u);
  }
}

void sub_1003DBCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DBCF4(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003DBD84;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12960 != -1) {
    dispatch_once(&qword_100A12960, block);
  }
  return byte_100A12958;
}

void sub_1003DBD84(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(uint64_t))(*(void *)v1 + 344))(v1) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v1 + 328))(v1) & 1) != 0
    || (*(unsigned int (**)(uint64_t))(*(void *)v1 + 384))(v1))
  {
    uint64_t v2 = sub_10003FB34();
    int v3 = (*(uint64_t (**)(uint64_t))(*(void *)v2 + 3560))(v2);
    byte_100A12958 = v3;
    int v4 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    int v5 = "disabled";
    if (v3) {
      int v5 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "BT chip support for Controller Scan Rx Stats : %s", buf, 0xCu);
  }
  int v3 = byte_100A12958;
LABEL_9:
  if (!v3) {
    goto LABEL_22;
  }
  int v6 = _os_feature_enabled_impl();
  byte_100A12958 = v6;
  if (!v6 || !(*(unsigned int (**)(uint64_t))(*(void *)v1 + 344))(v1)) {
    goto LABEL_23;
  }
  char v15 = 0;
  uint64_t v7 = sub_100017768();
  sub_10004191C(buf, "BLESCAN");
  sub_10004191C(__p, "FWStatsScan");
  int v8 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v7 + 72))(v7, buf, __p, &v15);
  if (v15) {
    int v9 = v8;
  }
  else {
    int v9 = 0;
  }
  if (v14 < 0) {
    operator delete(__p[0]);
  }
  if ((v17 & 0x80000000) == 0)
  {
    if (v9) {
      goto LABEL_19;
    }
LABEL_22:
    byte_100A12958 = 0;
    goto LABEL_23;
  }
  operator delete(*(void **)buf);
  if (!v9) {
    goto LABEL_22;
  }
LABEL_19:
  byte_100A12958 = 1;
  int v10 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Controller Scan Rx Stats is enabled with override.", buf, 2u);
  }
LABEL_23:
  uint64_t v11 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12958) {
      char v12 = "enabled";
    }
    else {
      char v12 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "support for Get Scan Stats is %s", buf, 0xCu);
  }
}

void sub_1003DC0C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003DC100(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (sub_100052090(v1))
  {
    uint64_t v2 = sub_10003FB34();
    if ((*(unsigned int (**)(uint64_t))(*(void *)v2 + 2224))(v2)) {
      int v3 = 2;
    }
    else {
      int v3 = 3;
    }
  }
  else
  {
    if (!sub_100036F68(v1)) {
      goto LABEL_8;
    }
    int v3 = 1;
  }
  dword_100A12968 = v3;
LABEL_8:
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (dword_100A12968 > 3) {
      int v5 = "Unknown ScanCoreHWType";
    }
    else {
      int v5 = off_1009ABFE8[dword_100A12968];
    }
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "ScanCore HW Type : %s", (uint8_t *)&v6, 0xCu);
  }
}

uint64_t sub_1003DC22C()
{
  if (qword_100A12980 != -1) {
    dispatch_once(&qword_100A12980, &stru_1009ABF28);
  }
  return byte_100A12978;
}

void sub_1003DC270(id a1)
{
  uint64_t v1 = sub_10003FB34();
  int v2 = sub_100354F18(v1, 5);
  byte_100A12978 = v2;
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      int v4 = "enabled";
    }
    else {
      int v4 = "disabled";
    }
    int v7 = 136315138;
    int v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for LE Connection Scan Prioritization : %s", (uint8_t *)&v7, 0xCu);
    int v2 = byte_100A12978;
  }
  if (v2) {
    int v2 = _os_feature_enabled_impl();
  }
  byte_100A12978 = v2;
  int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (v2) {
      int v6 = "enabled";
    }
    else {
      int v6 = "disabled";
    }
    int v7 = 136315138;
    int v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "support for LE Connection Scan Prioritization is %s", (uint8_t *)&v7, 0xCu);
  }
}

uint64_t sub_1003DC3C8()
{
  if (qword_100A12990 != -1) {
    dispatch_once(&qword_100A12990, &stru_1009ABF48);
  }
  return byte_100A12988;
}

void sub_1003DC40C(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "AllowFindMyActionConnScanPrioritization");
  int v2 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A12989);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12989) {
      int v4 = "Yes";
    }
    else {
      int v4 = "No";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: FindMyConnScanPrioritization: %s", buf, 0xCu);
  }
  byte_100A12988 = byte_100A12989;
}

void sub_1003DC568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DC5A4()
{
  if (qword_100A129A0 != -1) {
    dispatch_once(&qword_100A129A0, &stru_1009ABF68);
  }
  return byte_100A12998;
}

void sub_1003DC5E8(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "AllowFindMyActionTxPowerIncreaseLEConnecting");
  int v2 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A12999);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A12999) {
      int v4 = "Yes";
    }
    else {
      int v4 = "No";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: AllowFindMyActionTxPowerIncreaseLEConnecting: %s", buf, 0xCu);
  }
  byte_100A12998 = byte_100A12999;
}

void sub_1003DC744(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DC780()
{
  if (qword_100A129B0 != -1) {
    dispatch_once(&qword_100A129B0, &stru_1009ABF88);
  }
  return byte_100A129A8;
}

void sub_1003DC7C4(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "AllowFindMyActionTxPowerIncrease");
  int v2 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A129A9);
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v2) {
      return;
    }
  }
  else if (!v2)
  {
    return;
  }
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A129A9) {
      int v4 = "Yes";
    }
    else {
      int v4 = "No";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: allowFindMyActionTxPowerIncrease: %s", buf, 0xCu);
  }
  byte_100A129A8 = byte_100A129A9;
}

void sub_1003DC920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DC95C(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003DC9EC;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A129C0 != -1) {
    dispatch_once(&qword_100A129C0, block);
  }
  return byte_100A129B8;
}

void sub_1003DC9EC(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 32) + 328))(*(void *)(a1 + 32)))
  {
    uint64_t v1 = sub_10003FB34();
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 2576))(v1);
    byte_100A129B8 = v2;
    int v3 = qword_100A19E50;
    if (!os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    int v4 = "disabled";
    if (v2) {
      int v4 = "enabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "BT chip support for Controller LE Connection Tx Power Increase HPLink : %s", buf, 0xCu);
  }
  int v2 = byte_100A129B8;
LABEL_7:
  if (v2) {
    char v5 = _os_feature_enabled_impl();
  }
  else {
    char v5 = 0;
  }
  byte_100A129B8 = v5;
  char v13 = 0;
  uint64_t v6 = sub_100017768();
  sub_10004191C(buf, "LE");
  sub_10004191C(__p, "forceLEConnectionTxPowerEPA");
  int v7 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v6 + 72))(v6, buf, __p, &v13);
  if (v13) {
    int v8 = v7;
  }
  else {
    int v8 = 0;
  }
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v15 < 0) {
    operator delete(*(void **)buf);
  }
  int v9 = qword_100A19E50;
  if (v8)
  {
    byte_100A129B8 = v13;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "forceLEConnectionTxPowerEPA is enabled with override.", buf, 2u);
      int v9 = qword_100A19E50;
    }
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (byte_100A129B8) {
      int v10 = "enabled";
    }
    else {
      int v10 = "disabled";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "support for Get Scan Stats is %s", buf, 0xCu);
  }
}

void sub_1003DCC7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DCCB8()
{
  if (qword_100A129D0 != -1) {
    dispatch_once(&qword_100A129D0, &stru_1009ABFA8);
  }
  return byte_100A129C8;
}

void sub_1003DCCFC(id a1)
{
  byte_100A129C8 = GestaltGetDeviceClass() == 13;
  if (IsAppleInternalBuild())
  {
    uint64_t v1 = sub_100017768();
    sub_10004191C(v4, "LE");
    sub_10004191C(__p, "supportsNCSecondaryAdvInstance");
    (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v1 + 72))(v1, v4, __p, &byte_100A129C8);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
    if (v5 < 0) {
      operator delete(v4[0]);
    }
  }
}

void sub_1003DCDBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DCDF0()
{
  if (qword_100A129E0 != -1) {
    dispatch_once(&qword_100A129E0, &stru_1009ABFC8);
  }
  return byte_100A129D8;
}

void sub_1003DCE34(id a1)
{
  uint64_t v1 = sub_100017768();
  sub_10004191C(buf, "BBFC");
  sub_10004191C(__p, "EnforceBBFCScanPrioritization");
  int v2 = (*(uint64_t (**)(uint64_t, uint8_t *, void **, char *))(*(void *)v1 + 72))(v1, buf, __p, &byte_100A129D8);
  if (byte_100A129D8) {
    int v3 = v2;
  }
  else {
    int v3 = 0;
  }
  if (v6 < 0) {
    operator delete(__p[0]);
  }
  if (v8 < 0)
  {
    operator delete(*(void **)buf);
    if (!v3) {
      return;
    }
  }
  else if (!v3)
  {
    return;
  }
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Warning: BBFC: enforceBBFCScanPrioritization=true", buf, 2u);
  }
}

void sub_1003DCF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DCF6C(uint64_t a1)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 344))(a1) & 1) != 0
    || (uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 328))(a1), result))
  {
    return _os_feature_enabled_impl();
  }
  return result;
}

uint64_t sub_1003DD01C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 328))(a1);
  if (result) {
    return (*(_DWORD *)(sub_10003FB34() + 712) - 1) >= 0x16 && (sub_1003FAF7C() & 0xFFFFFFFC) != 112;
  }
  return result;
}

void sub_1003DD15C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003DD1E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1003DD248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)AppProtectionObserver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1003DD324(uint64_t a1)
{
  uint64_t v2 = sub_10003FFD4();
  if (v2)
  {
    uint64_t v3 = v2;
    (*(void (**)(uint64_t, void))(*(void *)v2 + 272))(v2, *(unsigned int *)(a1 + 32));
    int v4 = (id)qword_100A19E50;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 280))(v3);
      char v6 = off_1009AC008[(*(int (**)(uint64_t))(*(void *)v3 + 280))(v3)];
      v7[0] = 67109378;
      v7[1] = v5;
      __int16 v8 = 2080;
      int v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "smartCoverStateDidChange -- getSmartCoverState() returned %d (%s)", (uint8_t *)v7, 0x12u);
    }
  }
}

void sub_1003DD490(_Unwind_Exception *exception_object)
{
}

void sub_1003DD658(_Unwind_Exception *a1)
{
  uint64_t v3 = v2;

  _Unwind_Resume(a1);
}

void sub_1003DD728(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  int v10 = v9;
  a9.receiver = v10;
  a9.super_class = (Class)SystemScreenObserver;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_1003DD8C4(_Unwind_Exception *a1)
{
  objc_destroyWeak(v2);
  objc_destroyWeak((id *)(v4 - 72));

  _Unwind_Resume(a1);
}

void sub_1003DD8FC(uint64_t a1)
{
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEBUG)) {
    sub_10075F43C();
  }
  uint64_t v2 = +[BLSBacklight sharedBacklight];
  unsigned int v3 = [v2 isAlwaysOnEnabled];

  if (v3)
  {
    id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
    [WeakRetained screenStateChanged:1];
  }
}

void sub_1003DD988(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003DD99C(uint64_t a1)
{
  return [*(id *)(a1 + 32) screenStateChanged:*(unsigned __int8 *)(a1 + 40)];
}

void sub_1003DDAA4(uint64_t a1)
{
  uint64_t v2 = sub_1002DF804(a1);
  *(void *)uint64_t v2 = off_1009AC060;
  *(void *)(v2 + 8) = off_1009AC3D8;
  *(void *)(v2 + 16) = off_1009AC3F8;
  *(void *)(v2 + 24) = off_1009AC418;
  *(void *)(v2 + 32) = off_1009AC438;
  *(void *)(v2 + 40) = off_1009AC458;
  *(void *)(v2 + 48) = off_1009AC478;
  *(void *)(v2 + 56) = off_1009AC498;
  *(void *)(v2 + 64) = off_1009AC4B8;
  *(void *)(v2 + 72) = off_1009AC4D8;
  *(void *)(v2 + 80) = off_1009AC4F8;
  *(void *)(v2 + 88) = off_1009AC518;
  *(void *)(v2 + 96) = off_1009AC538;
  *(void *)(v2 + 104) = off_1009AC558;
  *(void *)(v2 + 112) = off_1009AC578;
  *(void *)(v2 + 120) = off_1009AC598;
  *(void *)(v2 + 128) = off_1009AC5B8;
  *(void *)(v2 + 136) = off_1009AC5D8;
  *(void *)(v2 + 144) = off_1009AC5F8;
  *(void *)(v2 + 152) = off_1009AC618;
  *(void *)(v2 + 160) = off_1009AC638;
  *(void *)(v2 + 168) = off_1009AC658;
  *(void *)(v2 + 176) = off_1009AC678;
  *(void *)(v2 + 184) = off_1009AC698;
  *(void *)(v2 + 192) = off_1009AC6B8;
  *(void *)(v2 + 200) = off_1009AC6D8;
  *(void *)(v2 + 1256) = &off_1009AC6F8;
  *(void *)(v2 + 1328) = 0;
  *(_OWORD *)(v2 + 1289) = 0u;
  *(_OWORD *)(v2 + 1280) = 0u;
  *(_OWORD *)(v2 + 1264) = 0u;
  *(_OWORD *)(v2 + 1308) = 0u;
  *(unsigned char *)(v2 + 1324) = 0;
  *(_DWORD *)(v2 + 1348) = -1;
  *(void *)(v2 + 1352) = -1;
  *(void *)(v2 + 1360) = 0;
  *(_DWORD *)(v2 + 1368) = -1;
  *(unsigned char *)(v2 + 1372) = 0;
  *(void *)(v2 + 1380) = -1;
  *(unsigned char *)(v2 + 1388) = 1;
  *(_OWORD *)(v2 + 1392) = 0u;
  *(_OWORD *)(v2 + 1432) = 0u;
  sub_100052DA8(v2 + 1448);
  *(_WORD *)(a1 + 1512) = 256;
  *(_OWORD *)(a1 + 1520) = 0u;
  *(_OWORD *)(a1 + 1536) = 0u;
  *(unsigned char *)(a1 + 1552) = 0;
  *(void *)(a1 + 1560) = @"XZ";
  unsigned int v3 = *(void **)(a1 + 1432);
  *(void *)(a1 + 1432) = 0;

  *(_DWORD *)(a1 + 1408) = -1;
  *(unsigned char *)(a1 + 1412) = 0;
  operator new();
}

void sub_1003DE114(_Unwind_Exception *a1)
{
  sub_100052DA4(v2);
  sub_1003DE510((void *)v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003DE178(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, v1 + 1448);
  *(unsigned char *)(v1 + 1512) = 1;
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(v1 + 1512);
    int v4 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)long long buf = 67109376;
    int v8 = v3;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor fDeviceFirstUnlocked:%d fDeviceLocked:%d", buf, 0xEu);
  }
  sub_10003AFE8((uint64_t)v6);
  sub_1002E2A3C((os_unfair_lock_s *)v1);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1003DE260(_Unwind_Exception *exception_object)
{
}

id sub_1003DE27C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 1528);
  id v3 = [*(id *)(v1 + 1440) screenOn];

  return [v2 screenStateChanged:v3];
}

uint64_t sub_1003DE2C0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, v1 + 1448);
  BOOL v2 = [*(id *)(v1 + 1440) systemLockStateSync] == 3
    || [*(id *)(v1 + 1440) systemLockStateSync] == 2;
  *(unsigned char *)(v1 + 1513) = v2;
  id v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(v1 + 1512);
    int v5 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)long long buf = 67109376;
    int v9 = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SystemSettingsModel::systemMonitor fDeviceFirstUnlocked:%d fDeviceLocked:%d", buf, 0xEu);
  }
  sub_10003AFE8((uint64_t)v7);
  sub_1002E283C((os_unfair_lock_s *)v1, *(unsigned __int8 *)(v1 + 1513));
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1003DE3D0(_Unwind_Exception *exception_object)
{
}

uint64_t sub_1003DE3EC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v7[0] = 0;
  v7[1] = 0;
  sub_10003AED0((uint64_t)v7, v1 + 1448);
  BOOL v2 = [*(id *)(v1 + 1440) systemLockStateSync] == 3
    || [*(id *)(v1 + 1440) systemLockStateSync] == 2;
  *(unsigned char *)(v1 + 1513) = v2;
  *(unsigned char *)(v1 + 1512) = [*(id *)(v1 + 1440) firstUnlockedSync];
  id v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(v1 + 1512);
    int v5 = *(unsigned __int8 *)(v1 + 1513);
    *(_DWORD *)long long buf = 67109376;
    int v9 = v4;
    __int16 v10 = 1024;
    int v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SystemSettings::SystemMonitor activated fDeviceFirstUnlocked:%d fDeviceLocked:%d", buf, 0xEu);
  }
  return sub_10003AFB4((uint64_t)v7);
}

void sub_1003DE4F4(_Unwind_Exception *exception_object)
{
}

void *sub_1003DE510(void *a1)
{
  *a1 = &off_1009A3688;
  a1[1] = &off_1009A3860;
  a1[2] = &off_1009A3880;
  a1[3] = &off_1009A38A0;
  a1[4] = &off_1009A38C0;
  a1[5] = &off_1009A38E0;
  a1[6] = &off_1009A3900;
  a1[7] = &off_1009A3920;
  a1[8] = &off_1009A3940;
  a1[9] = &off_1009A3960;
  a1[10] = &off_1009A3980;
  a1[11] = &off_1009A39A0;
  a1[12] = &off_1009A39C0;
  a1[13] = &off_1009A39E0;
  a1[14] = &off_1009A3A00;
  a1[15] = &off_1009A3A20;
  a1[16] = &off_1009A3A40;
  a1[17] = &off_1009A3A60;
  a1[18] = &off_1009A3A80;
  a1[19] = &off_1009A3AA0;
  a1[20] = &off_1009A3AC0;
  a1[21] = &off_1009A3AE0;
  a1[22] = &off_1009A3B00;
  a1[23] = &off_1009A3B20;
  a1[24] = &off_1009A3B40;
  a1[25] = &off_1009A3B60;
  BOOL v2 = (void *)a1[152];
  if (v2)
  {
    a1[153] = v2;
    operator delete(v2);
  }
  id v3 = (void *)a1[147];
  if (v3)
  {
    a1[148] = v3;
    operator delete(v3);
  }
  int v4 = (void *)a1[142];
  if (v4)
  {
    a1[143] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[137];
  if (v5)
  {
    a1[138] = v5;
    operator delete(v5);
  }
  char v6 = (void *)a1[132];
  if (v6)
  {
    a1[133] = v6;
    operator delete(v6);
  }
  int v7 = (void *)a1[127];
  if (v7)
  {
    a1[128] = v7;
    operator delete(v7);
  }
  int v8 = (void *)a1[122];
  if (v8)
  {
    a1[123] = v8;
    operator delete(v8);
  }
  int v9 = (void *)a1[117];
  if (v9)
  {
    a1[118] = v9;
    operator delete(v9);
  }
  __int16 v10 = (void *)a1[112];
  if (v10)
  {
    a1[113] = v10;
    operator delete(v10);
  }
  int v11 = (void *)a1[107];
  if (v11)
  {
    a1[108] = v11;
    operator delete(v11);
  }
  char v12 = (void *)a1[102];
  if (v12)
  {
    a1[103] = v12;
    operator delete(v12);
  }
  char v13 = (void *)a1[97];
  if (v13)
  {
    a1[98] = v13;
    operator delete(v13);
  }
  char v14 = (void *)a1[92];
  if (v14)
  {
    a1[93] = v14;
    operator delete(v14);
  }
  char v15 = (void *)a1[87];
  if (v15)
  {
    a1[88] = v15;
    operator delete(v15);
  }
  int v16 = (void *)a1[82];
  if (v16)
  {
    a1[83] = v16;
    operator delete(v16);
  }
  char v17 = (void *)a1[77];
  if (v17)
  {
    a1[78] = v17;
    operator delete(v17);
  }
  char v18 = (void *)a1[72];
  if (v18)
  {
    a1[73] = v18;
    operator delete(v18);
  }
  char v19 = (void *)a1[67];
  if (v19)
  {
    a1[68] = v19;
    operator delete(v19);
  }
  __int16 v20 = (void *)a1[62];
  if (v20)
  {
    a1[63] = v20;
    operator delete(v20);
  }
  char v21 = (void *)a1[57];
  if (v21)
  {
    a1[58] = v21;
    operator delete(v21);
  }
  char v22 = (void *)a1[52];
  if (v22)
  {
    a1[53] = v22;
    operator delete(v22);
  }
  char v23 = (void *)a1[47];
  if (v23)
  {
    a1[48] = v23;
    operator delete(v23);
  }
  char v24 = (void *)a1[42];
  if (v24)
  {
    a1[43] = v24;
    operator delete(v24);
  }
  std::string v25 = (void *)a1[37];
  if (v25)
  {
    a1[38] = v25;
    operator delete(v25);
  }
  unsigned __int8 v26 = (void *)a1[32];
  if (v26)
  {
    a1[33] = v26;
    operator delete(v26);
  }
  unint64_t v27 = (void *)a1[27];
  if (v27)
  {
    a1[28] = v27;
    operator delete(v27);
  }
  return a1;
}

uint64_t sub_1003DEA14(int a1, std::string *this)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A12A00, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A12A00))
  {
    sub_10004191C(&stru_100A129E8, "");
    __cxa_atexit((void (*)(void *))&std::string::~string, &stru_100A129E8, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100A12A00);
  }
  if (qword_100A12A08 != -1) {
    dispatch_once(&qword_100A12A08, &stru_1009AC738);
  }
  std::string::operator=(this, &stru_100A129E8);
  return 0;
}

void sub_1003DEAD8(_Unwind_Exception *a1)
{
}

void sub_1003DEAF0(id a1)
{
  unint64_t __val = 1;
  uint64_t v1 = (std::string::value_type *)container_system_group_path_for_identifier();
  if (v1)
  {
    BOOL v2 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v1;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Using containerized path %s", buf, 0xCu);
    }
    std::string::assign(&stru_100A129E8, v1);
    free(v1);
  }
  else if (IsAppleInternalBuild())
  {
    uint64_t v23 = 0;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    *(_OWORD *)int v11 = 0u;
    long long v12 = 0u;
    memset(v10, 0, sizeof(v10));
    *(_OWORD *)long long buf = 0u;
    sub_10004C67C((uint64_t)buf);
    uint64_t v3 = sub_10003AB28((uint64_t)v10);
    std::to_string(&__p, __val);
    sub_10003AB28(v3);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    sub_10011631C((const char *)p_p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    *(void *)&v10[0] = v5;
    if (SHIBYTE(v12) < 0) {
      operator delete(v11[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  else
  {
    char v6 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT)) {
      sub_10075F47C((uint64_t *)&__val, v6);
    }
  }
}

void sub_1003DEDEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_100742518((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_1003DEE2C(uint64_t a1)
{
  *(void *)(a1 + 1272) = SCDynamicStoreKeyCreateComputerName(kCFAllocatorDefault);

  sub_1003DEE74(a1);
}

void sub_1003DEE74(uint64_t a1)
{
  if (*(void *)(a1 + 1272) || *(void *)(a1 + 1280))
  {
    if (*(void *)(a1 + 1264)) {
      goto LABEL_6;
    }
    v10.version = 0;
    memset(&v10.retain, 0, 24);
    v10.info = (void *)a1;
    SCDynamicStoreRef v2 = SCDynamicStoreCreate(kCFAllocatorDefault, @"com.apple.MobileBluetooth.SystemSettings", (SCDynamicStoreCallBack)sub_1003DF094, &v10);
    *(void *)(a1 + 1264) = v2;
    if (v2)
    {
      uint64_t v3 = v2;
      uint64_t v4 = sub_1004AF8EC();
      SCDynamicStoreSetDispatchQueue(v3, *(dispatch_queue_t *)(v4 + 8));
LABEL_6:
      Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        char v6 = Mutable;
        int v7 = *(const void **)(a1 + 1272);
        if (v7) {
          CFArrayAppendValue(Mutable, v7);
        }
        int v8 = *(const void **)(a1 + 1280);
        if (v8) {
          CFArrayAppendValue(v6, v8);
        }
        SCDynamicStoreSetNotificationKeys(*(SCDynamicStoreRef *)(a1 + 1264), v6, 0);
        CFRelease(v6);
      }
      return;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F4F8();
    }
  }
  else
  {
    int v9 = *(const __SCDynamicStore **)(a1 + 1264);
    if (v9)
    {
      SCDynamicStoreSetDispatchQueue(v9, 0);
      CFRelease(*(CFTypeRef *)(a1 + 1264));
      *(void *)(a1 + 1264) = 0;
    }
  }
}

void sub_1003DEFB4(uint64_t a1)
{
  SCDynamicStoreRef v2 = *(const void **)(a1 + 1272);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 1272) = 0;
  }

  sub_1003DEE74(a1);
}

void sub_1003DEFF8(uint64_t a1)
{
  if (sub_100540000())
  {
    *(void *)(a1 + 1280) = @"com.apple.MobileInternetSharing";
    sub_1003DEE74(a1);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075F52C();
  }
}

void sub_1003DF074(uint64_t a1)
{
}

void sub_1003DF07C(uint64_t a1)
{
  *(void *)(a1 + 1280) = 0;
  sub_1003DEE74(a1);
}

void sub_1003DF084(uint64_t a1)
{
  *(void *)(a1 + 1272) = 0;
  sub_1003DEE74(a1 - 8);
}

void sub_1003DF094(uint64_t a1, const __CFArray *a2, uint64_t a3)
{
}

uint64_t sub_1003DF09C(uint64_t a1, std::string *a2)
{
  HostName = (const __SCPreferences *)SCDynamicStoreCopyComputerName(*(SCDynamicStoreRef *)(a1 + 1264), 0);
  SCPreferencesRef v4 = HostName;
  if (HostName) {
    goto LABEL_2;
  }
  SCPreferencesRef v7 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.MobileBluetooth.SystemSettings", 0);
  if (!v7) {
    return 1;
  }
  SCPreferencesRef v4 = v7;
  HostName = (const __SCPreferences *)SCPreferencesGetHostName();
  if (HostName)
  {
LABEL_2:
    std::string::assign(a2, (const std::string::value_type *)[(__SCPreferences *)HostName UTF8String]);
    uint64_t v5 = 0;
  }
  else
  {
    uint64_t v5 = 1;
  }
  CFRelease(v4);
  return v5;
}

uint64_t sub_1003DF130(uint64_t a1, BOOL *a2, unsigned char *a3, unsigned char *a4)
{
  *a2 = 0;
  *a4 = 0;
  *a3 = 0;
  if (!sub_100540000())
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F52C();
    }
    return 1;
  }
  int v8 = *(const __SCDynamicStore **)(a1 + 1264);
  if (!v8) {
    return 1;
  }
  CFStringRef v9 = *(const __CFString **)(a1 + 1280);
  if (!v9) {
    return 1;
  }
  CFDictionaryRef v10 = (const __CFDictionary *)SCDynamicStoreCopyValue(v8, v9);
  if (!v10) {
    return 1;
  }
  CFDictionaryRef v11 = v10;
  CFTypeID v12 = CFGetTypeID(v10);
  if (v12 == CFDictionaryGetTypeID())
  {
    int valuePtr = 0;
    CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v11, @"State");
    if (Value
      && (CFNumberRef v14 = Value, v15 = CFGetTypeID(Value), v15 == CFNumberGetTypeID())
      && CFNumberGetValue(v14, kCFNumberIntType, &valuePtr))
    {
      uint64_t v16 = 0;
      *a2 = valuePtr == 1023;
    }
    else
    {
      uint64_t v16 = 1;
    }
    CFDictionaryRef v18 = (const __CFDictionary *)CFDictionaryGetValue(v11, @"Hosts");
    if (v18)
    {
      CFDictionaryRef v19 = v18;
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 == CFDictionaryGetTypeID())
      {
        CFNumberRef v21 = (const __CFNumber *)CFDictionaryGetValue(v19, @"Current");
        if (v21)
        {
          CFNumberRef v22 = v21;
          CFTypeID v23 = CFGetTypeID(v21);
          if (v23 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v22, kCFNumberIntType, &valuePtr);
            *a3 = valuePtr;
          }
        }
        CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(v19, @"Max");
        if (v24)
        {
          CFNumberRef v25 = v24;
          CFTypeID v26 = CFGetTypeID(v24);
          if (v26 == CFNumberGetTypeID())
          {
            CFNumberGetValue(v25, kCFNumberIntType, &valuePtr);
            *a4 = valuePtr;
          }
        }
      }
    }
  }
  else
  {
    uint64_t v16 = 1;
  }
  CFRelease(v11);
  return v16;
}

void sub_1003DF318(uint64_t a1, const __CFArray *a2)
{
  if (sub_100540000())
  {
    if (CFArrayGetCount(a2) >= 1)
    {
      CFIndex v4 = 0;
      do
      {
        CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a2, v4);
        CFStringRef v6 = ValueAtIndex;
        CFStringRef v7 = *(const __CFString **)(a1 + 1272);
        if (v7 && CFEqual(ValueAtIndex, v7))
        {
          v12[1] = 0;
          uint64_t v13 = 0;
          v12[0] = 0;
          if (!(*(unsigned int (**)(uint64_t, void **))(*(void *)a1 + 16))(a1, v12))
          {
            if (SHIBYTE(v13) < 0)
            {
              sub_10003B098(__p, v12[0], (unint64_t)v12[1]);
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)v12;
              uint64_t v11 = v13;
            }
            sub_1002DFD54((os_unfair_lock_s *)a1, __p);
            if (SHIBYTE(v11) < 0) {
              operator delete(__p[0]);
            }
          }
          if (SHIBYTE(v13) < 0) {
            operator delete(v12[0]);
          }
        }
        else
        {
          CFStringRef v8 = *(const __CFString **)(a1 + 1280);
          if (v8 && CFEqual(v6, v8))
          {
            LOBYTE(v12[0]) = 0;
            __int16 v9 = 0;
            if (!(*(unsigned int (**)(uint64_t, void **, char *, __int16 *))(*(void *)a1 + 24))(a1, v12, (char *)&v9 + 1, &v9))sub_1002E007C((os_unfair_lock_s *)a1, LOBYTE(v12[0]), HIBYTE(v9), v9); {
          }
            }
        }
        ++v4;
      }
      while (v4 < CFArrayGetCount(a2));
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075F52C();
  }
}

void sub_1003DF4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003DF500()
{
  if (!sub_10053FFEC() && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10075F560();
  }
}

uint64_t sub_1003DF550(uint64_t a1, unsigned char *a2, unsigned char *a3, unsigned char *a4, unsigned char *a5, unsigned char *a6, _DWORD *a7)
{
  if (sub_10053FFEC())
  {
    *a2 = 0;
    *a3 = 0;
    *a4 = 0;
    int v14 = sub_1006553B0(*(void *)(a1 + 1400));
    *a5 = v14;
    if (v14 && sub_1006553D0(*(void *)(a1 + 1400)))
    {
      if (sub_1006553C0(*(void *)(a1 + 1400)) == 1) {
        *a2 = 1;
      }
      if (sub_1006553C0(*(void *)(a1 + 1400)) == 2) {
        *a3 = 1;
      }
      if (sub_1006553C0(*(void *)(a1 + 1400)) == 3) {
        *a4 = 1;
      }
    }
    *a6 = sub_1006553E0(*(void *)(a1 + 1400));
    int v15 = sub_1006553A4(*(void *)(a1 + 1400));
    uint64_t result = 0;
    *a7 = v15;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F560();
    }
    return 1;
  }
  return result;
}

void sub_1003DF668(uint64_t a1)
{
  __int16 v14 = 0;
  __int16 v13 = 0;
  char v12 = 0;
  int v11 = 0;
  if (!(*(unsigned int (**)(uint64_t, char *, __int16 *, char *, __int16 *, char *, int *))(*(void *)a1 + 48))(a1, (char *)&v14 + 1, &v14, (char *)&v13 + 1, &v13, &v12, &v11))
  {
    if ((_BYTE)v13) {
      uint64_t v1 = "On";
    }
    else {
      uint64_t v1 = "Off";
    }
    sub_10004191C(&v8, v1);
    SCDynamicStoreRef v2 = std::string::insert(&v8, 0, "WiFi State: ");
    long long v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    v9.__r_.__value_.__r.__words[2] = v2->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v9.__r_.__value_.__l.__data_ = v3;
    v2->__r_.__value_.__l.__size_ = 0;
    v2->__r_.__value_.__r.__words[2] = 0;
    v2->__r_.__value_.__r.__words[0] = 0;
    CFIndex v4 = std::string::append(&v9, ", Band: ");
    long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v10.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v10.__r_.__value_.__l.__data_ = v5;
    v4->__r_.__value_.__l.__size_ = 0;
    v4->__r_.__value_.__r.__words[2] = 0;
    v4->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if ((_BYTE)v14)
    {
      CFStringRef v6 = "5 GHz";
    }
    else if (HIBYTE(v14))
    {
      CFStringRef v6 = "2.4 GHz";
    }
    else if (HIBYTE(v13))
    {
      CFStringRef v6 = "6 GHz";
    }
    else
    {
      CFStringRef v6 = "Unknown";
    }
    std::string::append(&v10, v6);
    if (v12) {
      std::string::append(&v10, ". [WARNING] 2.4 GHz critical state!");
    }
    if ((v10.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      CFStringRef v7 = &v10;
    }
    else {
      CFStringRef v7 = (std::string *)v10.__r_.__value_.__r.__words[0];
    }
    sub_100115824((const char *)v7);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v10.__r_.__value_.__l.__data_);
    }
  }
}

void sub_1003DF800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003DF848(uint64_t a1, unsigned char *a2)
{
  if (sub_10053FFEC())
  {
    char v4 = sub_1006553D0(*(void *)(a1 + 1400));
    uint64_t result = 0;
    *a2 = v4;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F560();
    }
    return 1;
  }
  return result;
}

void sub_1003DF8B8(uint64_t a1)
{
}

void sub_1003DF8C0(uint64_t a1)
{
  if (sub_10053FFEC())
  {
    uint64_t v2 = sub_1004AF8EC();
    v3[0] = _NSConcreteStackBlock;
    v3[1] = 3221225472;
    _DWORD v3[2] = sub_1003DF970;
    v3[3] = &unk_100997528;
    v3[4] = a1;
    sub_100013018(v2, v3);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075F560();
  }
}

void sub_1003DF970(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  unsigned int v2 = sub_1006553B0(*(void *)(v1 + 1400));
  unsigned int v3 = sub_1006553C0(*(void *)(v1 + 1400)) - 1;
  if (v3 >= 3)
  {
    sub_1006553D0(*(void *)(v1 + 1400));
    unint64_t v4 = 0;
  }
  else
  {
    unint64_t v4 = (unint64_t)&_mh_execute_header + ((unint64_t)v3 << 32);
  }
  uint64_t v5 = sub_1006553E0(*(void *)(v1 + 1400));
  uint64_t v6 = v5 | (sub_1006553A4(*(void *)(v1 + 1400)) << 32);
  sub_1003DF668(v1);

  sub_1002E02C8((os_unfair_lock_s *)v1, v4 | v2, v6);
}

void sub_1003DFA14(uint64_t a1)
{
  unsigned int v2 = SCPreferencesCreate(kCFAllocatorDefault, @"com.apple.MobileBluetooth.SystemSettings", @"com.apple.radios.plist");
  *(void *)(a1 + 1296) = v2;
  if (v2)
  {
    v6.version = 0;
    memset(&v6.retain, 0, 24);
    v6.info = (void *)a1;
    SCPreferencesSetCallback(v2, (SCPreferencesCallBack)sub_1003DFAE0, &v6);
    unsigned int v3 = *(const __SCPreferences **)(a1 + 1296);
    uint64_t v4 = sub_1004AF8EC();
    SCPreferencesSetDispatchQueue(v3, *(dispatch_queue_t *)(v4 + 8));
  }
  if (!*(unsigned char *)(a1 + 1304))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, (const void *)a1, (CFNotificationCallback)sub_1003DFAE8, (CFStringRef)NSProcessInfoPowerStateDidChangeNotification, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    *(unsigned char *)(a1 + 1304) = 1;
  }
}

void sub_1003DFAE0(uint64_t a1, char a2, uint64_t a3)
{
}

void sub_1003DFAE8(uint64_t a1, os_unfair_lock_s *a2)
{
  unsigned int v3 = +[NSProcessInfo processInfo];
  int v4 = [v3 isLowPowerModeEnabled];

  uint64_t v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = v4;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Low Power Mode Enabled: %d", (uint8_t *)v6, 8u);
  }
  sub_1002E071C(a2, v4);
}

void sub_1003DFBC0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003DFBD8(uint64_t a1)
{
}

void sub_1003DFBE0(uint64_t a1)
{
  unsigned int v2 = *(const __SCPreferences **)(a1 + 1296);
  if (v2)
  {
    SCPreferencesSetDispatchQueue(v2, 0);
    CFRelease(*(CFTypeRef *)(a1 + 1296));
    *(void *)(a1 + 1296) = 0;
  }
  if (*(unsigned char *)(a1 + 1304))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(LocalCenter, (const void *)a1, (CFNotificationName)NSProcessInfoPowerStateDidChangeNotification, 0);
    *(unsigned char *)(a1 + 1304) = 0;
  }
}

void sub_1003DFC44(uint64_t a1)
{
}

BOOL sub_1003DFC4C(uint64_t a1, BOOL *a2)
{
  return !sub_1003DFC74(a1, @"AirplaneMode", a2);
}

BOOL sub_1003DFC74(uint64_t a1, const __CFString *a2, BOOL *a3)
{
  CFBooleanRef Value = (const __CFBoolean *)SCPreferencesGetValue(*(SCPreferencesRef *)(a1 + 1296), a2);
  BOOL v5 = Value != 0;
  if (Value)
  {
    CFBooleanRef v6 = Value;
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 != CFBooleanGetTypeID()) {
      return 0;
    }
    BOOL v8 = CFBooleanGetValue(v6) != 0;
  }
  else
  {
    BOOL v8 = 0;
  }
  *a3 = v8;
  return v5;
}

uint64_t sub_1003DFCF0(uint64_t a1, unsigned char *a2)
{
  unsigned int v3 = +[NSProcessInfo processInfo];
  *a2 = [v3 isLowPowerModeEnabled];

  return 0;
}

void sub_1003DFD34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003DFD44(uint64_t a1, char a2)
{
  if ((a2 & 2) != 0)
  {
    unsigned __int8 v3 = 0;
    SCPreferencesSynchronize(*(SCPreferencesRef *)(a1 + 1296));
    if (!(*(unsigned int (**)(uint64_t, unsigned __int8 *))(*(void *)a1 + 72))(a1, &v3)) {
      sub_1002E051C((os_unfair_lock_s *)a1, v3);
    }
  }
}

void sub_1003DFDBC(uint64_t a1)
{
  io_connect_t v2 = IORegisterForSystemPower((void *)a1, (IONotificationPortRef *)(a1 + 1312), (IOServiceInterestCallback)sub_1003DFE30, (io_object_t *)(a1 + 1320));
  *(_DWORD *)(a1 + 1308) = v2;
  if (v2)
  {
    *(unsigned char *)(a1 + 1324) = 0;
    unsigned __int8 v3 = *(IONotificationPort **)(a1 + 1312);
    int v4 = *(NSObject **)(sub_1004AF8EC() + 8);
    IONotificationPortSetDispatchQueue(v3, v4);
  }
}

void sub_1003DFE30(uint64_t a1, uint64_t a2, int a3, intptr_t a4)
{
}

void sub_1003DFE3C(uint64_t a1)
{
}

uint64_t sub_1003DFE44(uint64_t result)
{
  if (*(_DWORD *)(result + 1308))
  {
    uint64_t v1 = result;
    IODeregisterForSystemPower((io_object_t *)(result + 1320));
    IONotificationPortDestroy(*(IONotificationPortRef *)(v1 + 1312));
    uint64_t result = IOServiceClose(*(_DWORD *)(v1 + 1308));
    *(_DWORD *)(v1 + 1308) = 0;
  }
  return result;
}

uint64_t sub_1003DFE88(uint64_t a1)
{
  return sub_1003DFE44(a1 - 32);
}

void sub_1003DFE90(uint64_t a1, int a2, intptr_t a3)
{
  CFBooleanRef v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "powerManagementMessage %x", buf, 8u);
  }
  if (a2 == -536870144)
  {
    sub_1002E0850((os_unfair_lock_s *)a1, 2u, 0);
    if (*(double *)(a1 + 1392) == 0.0)
    {
      double v7 = 0.0;
    }
    else
    {
      +[NSDate timeIntervalSinceReferenceDate];
      double v7 = v9 - *(double *)(a1 + 1392);
    }
    *(void *)(a1 + 1392) = 0;
    goto LABEL_15;
  }
  double v7 = 0.0;
  if (a2 == -536870272)
  {
    int v10 = sub_1002E0850((os_unfair_lock_s *)a1, 1u, 0);
    *(unsigned char *)(a1 + 1324) = 0;
    +[NSDate timeIntervalSinceReferenceDate];
    *(void *)(a1 + 1392) = v11;
    if (!v10)
    {
LABEL_8:
      IOCancelPowerChange(*(_DWORD *)(a1 + 1308), a3);
      goto LABEL_15;
    }
LABEL_12:
    IOAllowPowerChange(*(_DWORD *)(a1 + 1308), a3);
    goto LABEL_15;
  }
  if (a2 == -536870288)
  {
    if (!*(unsigned char *)(a1 + 1324))
    {
      char v8 = sub_1002E0850((os_unfair_lock_s *)a1, 0, 0);
      *(unsigned char *)(a1 + 1324) = 1;
      if ((v8 & 1) == 0) {
        goto LABEL_8;
      }
    }
    goto LABEL_12;
  }
LABEL_15:
  uint64_t v12 = sub_100035F54();
  if (v7 > (double)(*(unsigned int (**)(uint64_t))(*(void *)v12 + 464))(v12))
  {
    uint64_t v13 = sub_10003FB34();
    (*(void (**)(uint64_t))(*(void *)v13 + 1256))(v13);
    uint64_t v14 = sub_100035F54();
    int v15 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 392))(v14) ^ 1;
    if (a2 != -536870144) {
      LOBYTE(v15) = 1;
    }
    if ((v15 & 1) == 0)
    {
      unsigned int v16 = *(_DWORD *)(sub_10003FB34() + 712);
      if (v16 - 2000 <= 0x7CF)
      {
        uint64_t v46 = 0;
        uint64_t v47 = 0;
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v41 = 0;
        if ((*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 176))(a1, 0))
        {
          long long v17 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v46;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = 0;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Calling PPS - durationSleep %d, controllerDidSleep %d", buf, 0xEu);
          }
          uint64_t v18 = sub_10003FB34();
          int v19 = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(*(void *)v18 + 1192))(v18, (char *)&v47 + 4, &v47, (char *)&v46 + 4, &v46, (char *)&v45 + 4, &v45, (char *)&v44 + 4, &v44, (char *)&v43 + 4, &v43, (char *)&v42 + 4, &v42, (char *)&v41 + 4, &v41);
          CFTypeID v20 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67112704;
            *(_DWORD *)&uint8_t buf[4] = v19;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = HIDWORD(v47);
            *(_WORD *)&buf[14] = 1024;
            *(_DWORD *)&uint8_t buf[16] = v47;
            *(_WORD *)&buf[20] = 1024;
            *(_DWORD *)&buf[22] = HIDWORD(v46);
            *(_WORD *)&buf[26] = 1024;
            *(_DWORD *)&buf[28] = v46;
            *(_WORD *)&unsigned char buf[32] = 1024;
            *(_DWORD *)&buf[34] = HIDWORD(v45);
            *(_WORD *)&buf[38] = 1024;
            *(_DWORD *)&buf[40] = v45;
            *(_WORD *)&buf[44] = 1024;
            *(_DWORD *)&buf[46] = HIDWORD(v44);
            *(_WORD *)&buf[50] = 1024;
            *(_DWORD *)&buf[52] = v44;
            *(_WORD *)&buf[56] = 1024;
            *(_DWORD *)&buf[58] = HIDWORD(v43);
            *(_WORD *)&buf[62] = 1024;
            LODWORD(v49) = v43;
            WORD2(v49) = 1024;
            *(_DWORD *)((char *)&v49 + 6) = HIDWORD(v42);
            WORD5(v49) = 1024;
            HIDWORD(v49) = v42;
            LOWORD(v50) = 1024;
            *(_DWORD *)((char *)&v50 + 2) = HIDWORD(v41);
            WORD3(v50) = 1024;
            DWORD2(v50) = v41;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "PPS completed with result %d durationTotal %d, durationActive %d, durationIdle %d, durationSleep %d disableCounter %d, iPATxBT %d, ePATxBT %d, iPATxLE %d, ePATxLE %d, connectedRxBT %d, connectedRxLE %d, scanRxBT %d scanRxLE %d, totalPHYCal %d", buf, 0x5Cu);
          }
          int v21 = v46;
          BOOL v22 = v46 == 0;
        }
        else
        {
          BOOL v22 = 0;
          int v19 = 205;
          int v21 = v46;
        }
        BOOL v25 = v21 != 0;
        CFTypeID v26 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109632;
          *(_DWORD *)&uint8_t buf[4] = v19;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v46;
          *(_WORD *)&buf[14] = 1024;
          *(_DWORD *)&uint8_t buf[16] = v21 != 0;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "result %d, durationSleep %d, controllerDidSleep %d", buf, 0x14u);
        }
        if (v19) {
          return;
        }
LABEL_41:
        if (v25) {
          return;
        }
        uint64_t v28 = sub_100035F54();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v28 + 328))(v28) & 1) == 0)
        {
          uint64_t v29 = sub_100035F54();
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v29 + 344))(v29)) {
            return;
          }
        }
        if (qword_1009F8158 != -1) {
          dispatch_once(&qword_1009F8158, &stru_1009AC7D0);
        }
        int v30 = *((_DWORD *)off_1009F8150 + 40) + *((_DWORD *)off_1009F8150 + 39);
        if (v30)
        {
          uint64_t v31 = sub_100035F54();
          if (!(*(unsigned int (**)(uint64_t))(*(void *)v31 + 344))(v31))
          {
            long long v37 = qword_100A19E50;
            if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
              sub_10075F594(v30, v37, v7);
            }
            return;
          }
        }
        CFStringRef v32 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)long long buf = 134218752;
          *(void *)&uint8_t buf[4] = (uint64_t)v7;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          *(_WORD *)&unsigned char buf[18] = 1024;
          *(_DWORD *)&buf[20] = 0;
          *(_WORD *)&uint8_t buf[24] = 1024;
          *(_DWORD *)&buf[26] = v22;
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Detected that BT did not sleep during AP sleep of %lld seconds.  Restarting nb connections: %d, controllerDidSleep: %d, retry: %d", buf, 0x1Eu);
          if (!v22) {
            goto LABEL_59;
          }
        }
        else if (!v22)
        {
          goto LABEL_59;
        }
        uint64_t v33 = sub_100035F54();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v33 + 344))(v33))
        {
          uint64_t v46 = 0;
          uint64_t v47 = 0;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v41 = 0;
          uint64_t v34 = sub_10003FB34();
          int v35 = (*(uint64_t (**)(uint64_t, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *, char *, uint64_t *))(*(void *)v34 + 1192))(v34, (char *)&v47 + 4, &v47, (char *)&v46 + 4, &v46, (char *)&v45 + 4, &v45, (char *)&v44 + 4, &v44, (char *)&v43 + 4, &v43, (char *)&v42 + 4, &v42, (char *)&v41 + 4, &v41);
          long long v36 = qword_100A19E50;
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109376;
            *(_DWORD *)&uint8_t buf[4] = v35;
            *(_WORD *)&uint8_t buf[8] = 1024;
            *(_DWORD *)&buf[10] = v46;
            _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "Retry PPS completed with result %d, durationSleep %d", buf, 0xEu);
          }
          if (!v35 && v46) {
            return;
          }
        }
LABEL_59:
        uint64_t v38 = sub_100050530();
        memset(buf, 0, 24);
        (*(void (**)(uint64_t, uint64_t, void, uint8_t *))(*(void *)v38 + 104))(v38, 6, 0, buf);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        if (qword_1009F8070 != -1) {
          dispatch_once(&qword_1009F8070, &stru_1009AC7F0);
        }
        uint64_t v39 = off_1009F8068;
        sub_10004191C(&__p, "");
        sub_1004E258C((uint64_t)v39, 653, &__p);
      }
      if (v16 - 1 > 0x7CE)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075F61C();
        }
      }
      else
      {
        WORD2(v47) = 0;
        LOWORD(v47) = 0;
        WORD2(v46) = 0;
        LOWORD(v46) = 0;
        if ((*(unsigned int (**)(uint64_t, void))(*(void *)a1 + 176))(a1, 0))
        {
          if (v16 < 0x13)
          {
            uint64_t v27 = sub_10003FB34();
            int v24 = (*(uint64_t (**)(uint64_t, void, char *, uint64_t *, char *, uint64_t *))(*(void *)v27 + 1160))(v27, 0, (char *)&v47 + 4, &v47, (char *)&v46 + 4, &v46);
          }
          else
          {
            uint64_t v60 = 0;
            long long v58 = 0u;
            long long v59 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            long long v50 = 0u;
            long long v51 = 0u;
            long long v49 = 0u;
            memset(buf, 0, sizeof(buf));
            uint64_t v23 = sub_10003FB34();
            int v24 = (*(uint64_t (**)(uint64_t, void, uint8_t *))(*(void *)v23 + 1168))(v23, 0, buf);
            if (!v24)
            {
              WORD2(v47) = *(_WORD *)&buf[4];
              WORD2(v46) = *(_WORD *)&buf[12];
            }
          }
        }
        else
        {
          int v24 = 205;
        }
        BOOL v22 = 0;
        BOOL v25 = WORD2(v46) != 0;
        if (!v24) {
          goto LABEL_41;
        }
      }
    }
  }
}

void sub_1003E082C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003E0864(uint64_t a1, int a2)
{
  *(CFAbsoluteTime *)(a1 + 1336) = CFAbsoluteTimeGetCurrent();
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(a1 + 1336);
    int v25 = 134217984;
    uint64_t v26 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): current timestamp: %f", (uint8_t *)&v25, 0xCu);
  }
  CFBooleanRef v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(void *)(a1 + 1328);
    int v25 = 134217984;
    uint64_t v26 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): previous timestamp: %f", (uint8_t *)&v25, 0xCu);
  }
  double v8 = *(double *)(a1 + 1336) - *(double *)(a1 + 1328);
  uint64_t v9 = sub_100035F54();
  double v10 = (double)(*(unsigned int (**)(uint64_t))(*(void *)v9 + 456))(v9);
  if (v8 <= v10)
  {
    long long v17 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v25) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): can't read power stats right now", (uint8_t *)&v25, 2u);
    }
    if (*(double *)(a1 + 1336) < *(double *)(a1 + 1328))
    {
      uint64_t v18 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = *(void *)(a1 + 1336);
        uint64_t v20 = *(void *)(a1 + 1328);
        int v25 = 134218240;
        uint64_t v26 = v19;
        __int16 v27 = 2048;
        uint64_t v28 = v20;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): current timestamp: %f is less than previous time stamp: %f", (uint8_t *)&v25, 0x16u);
      }
      *(void *)(a1 + 1328) = *(void *)(a1 + 1336);
    }
    int v21 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v22 = *(void *)(a1 + 1336);
      int v25 = 134217984;
      uint64_t v26 = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): end current timestamp: %f", (uint8_t *)&v25, 0xCu);
    }
    int v15 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *(void *)(a1 + 1328);
      int v25 = 134217984;
      uint64_t v26 = v23;
      goto LABEL_23;
    }
  }
  else
  {
    if (a2)
    {
      *(void *)(a1 + 1328) = *(void *)(a1 + 1336);
      uint64_t v11 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = *(void *)(a1 + 1328);
        int v25 = 134217984;
        uint64_t v26 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): (reset) previous timestamp: %f", (uint8_t *)&v25, 0xCu);
      }
    }
    uint64_t v13 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 1336);
      int v25 = 134217984;
      uint64_t v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): end current timestamp: %f", (uint8_t *)&v25, 0xCu);
    }
    int v15 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = *(void *)(a1 + 1328);
      int v25 = 134217984;
      uint64_t v26 = v16;
LABEL_23:
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "(BTPowerLog): end previous timestamp: %f", (uint8_t *)&v25, 0xCu);
    }
  }
  return v8 > v10;
}

uint64_t sub_1003E0BDC(os_unfair_lock_s *a1, int a2)
{
  int v4 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    v6[0] = 67109120;
    v6[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Notifying system is shutting down with reason %d", (uint8_t *)v6, 8u);
  }
  return sub_1002E0850(a1, 4u, a2);
}

void sub_1003E0C9C(uint64_t a1)
{
  io_connect_t v2 = (int *)(a1 + 1344);
  unsigned __int8 v3 = *(NSObject **)(sub_1004AF8EC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003E0D98;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  uint64_t v4 = notify_register_dispatch("com.apple.mobile.keybagd.first_unlock", v2, v3, handler);
  uint64_t v5 = qword_100A19E50;
  if (v4)
  {
    uint64_t v6 = v4;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F650(v6, v5, v7, v8, v9, v10, v11, v12);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Successfully registered for MKB first unlock notification", v13, 2u);
  }
}

void sub_1003E0D98(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  io_connect_t v2 = (id)qword_100A19E50;
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    v4[0] = 67109120;
    v4[1] = MKBDeviceUnlockedSinceBoot();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Received MKB first unlock notification. MKBDeviceUnlockedSinceBoot returns : %d", (uint8_t *)v4, 8u);
  }

  if (MKBDeviceUnlockedSinceBoot() != 1
    && os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_FAULT))
  {
    sub_10074E57C();
  }
  BOOL v3 = MKBDeviceUnlockedSinceBoot() == 1;
  sub_1002E0C2C(v1, v3);
}

void sub_1003E0E8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E0EA4(uint64_t a1)
{
}

uint64_t sub_1003E0EAC(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1344));
  *(_DWORD *)(a1 + 1344) = -1;
  return result;
}

uint64_t sub_1003E0EDC(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1296));
  *(_DWORD *)(a1 + 1296) = -1;
  return result;
}

uint64_t sub_1003E0F0C(uint64_t a1, BOOL *a2)
{
  *a2 = MKBDeviceUnlockedSinceBoot() == 1;
  return 0;
}

void sub_1003E0F40(const void *a1)
{
  if (sub_100540028() && BYSetupAssistantNeedsToRun())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFStringRef v3 = (const __CFString *)BYSetupAssistantFinishedDarwinNotification;
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1003E0FB8, v3, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
}

void sub_1003E0FB8(uint64_t a1, uint64_t a2)
{
}

void sub_1003E0FC0(uint64_t a1)
{
}

void sub_1003E0FC8(const void *a1)
{
  if (sub_100540028())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFStringRef v3 = (const __CFString *)BYSetupAssistantFinishedDarwinNotification;
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, v3, 0);
  }
}

void sub_1003E1024(uint64_t a1)
{
}

uint64_t sub_1003E102C(uint64_t a1, unsigned char *a2)
{
  int v3 = sub_100540028();
  if (v3) {
    LOBYTE(v3) = BYSetupAssistantNeedsToRun();
  }
  *a2 = v3;
  return 0;
}

void sub_1003E1060(uint64_t a1)
{
  if (sub_100540028())
  {
    io_connect_t v2 = *(NSObject **)(sub_1004AF8EC() + 8);
    block[0] = _NSConcreteStackBlock;
    block[1] = 3221225472;
    block[2] = sub_1003E10E8;
    block[3] = &unk_100997528;
    void block[4] = a1;
    dispatch_async(v2, block);
  }
}

void sub_1003E10E8(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  char v2 = BYSetupAssistantNeedsToRun();

  sub_1002E0E2C(v1, v2);
}

uint64_t sub_1003E1124(uint64_t a1)
{
  char v2 = (int *)(a1 + 1348);
  int v3 = *(NSObject **)(sub_1004AF8EC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003E11B4;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.powersources.percent", v2, v3, handler);
}

void sub_1003E11B4(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  __int16 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, char *, __int16 *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                              + 96))(v1, (char *)&v2 + 1, &v2))sub_1002E0F98(v1, HIBYTE(v2), v2);
}

uint64_t sub_1003E1224(uint64_t a1)
{
  return sub_1003E1124(a1 - 40);
}

uint64_t sub_1003E122C(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1348));
  *(_DWORD *)(a1 + 1348) = -1;
  return result;
}

uint64_t sub_1003E125C(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1308));
  *(_DWORD *)(a1 + 1308) = -1;
  return result;
}

uint64_t sub_1003E128C(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v5 = sub_100035F54();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 392))(v5))
  {
    uint64_t result = IOPSGetPercentRemaining();
    if (result)
    {
      return 1;
    }
    else
    {
      *a3 = 0;
      *a2 = 0;
    }
  }
  else
  {
    uint64_t result = 0;
    *a2 = 1;
    *a3 = 100;
  }
  return result;
}

uint64_t sub_1003E1338(uint64_t a1)
{
  __int16 v2 = (int *)(a1 + 1352);
  int v3 = *(NSObject **)(sub_1004AF8EC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003E13C8;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.powersources.source", v2, v3, handler);
}

void sub_1003E13C8(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned int v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned int *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                           + 120))(v1, &v2))sub_1002E11C8(v1, v2);
}

uint64_t sub_1003E1430(uint64_t a1)
{
  return sub_1003E1338(a1 - 64);
}

uint64_t sub_1003E1438(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1352));
  *(_DWORD *)(a1 + 1352) = -1;
  return result;
}

uint64_t sub_1003E1468(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1288));
  *(_DWORD *)(a1 + 1288) = -1;
  return result;
}

void sub_1003E1498(uint64_t a1)
{
  if (sub_100058654())
  {
    unsigned int v2 = *(NSObject **)(sub_1004AF8EC() + 8);
    handler[0] = _NSConcreteStackBlock;
    handler[1] = 3221225472;
    handler[2] = sub_100050E6C;
    handler[3] = &unk_1009A7640;
    handler[4] = a1;
    notify_register_dispatch("com.apple.coreaudio.ActivePorts", (int *)(a1 + 1356), v2, handler);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075F6BC();
  }
}

void sub_1003E155C(uint64_t a1)
{
}

uint64_t sub_1003E1564(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1356));
  *(_DWORD *)(a1 + 1356) = -1;
  return result;
}

uint64_t sub_1003E1594(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1284));
  *(_DWORD *)(a1 + 1284) = -1;
  return result;
}

void sub_1003E15C4(CFBundleRef *a1)
{
  CFURLRef v2 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, @"/System/Library/PrivateFrameworks/AssistantServices.framework", kCFURLPOSIXPathStyle, 1u);
  a1[170] = CFBundleCreate(kCFAllocatorDefault, v2);
  CFRelease(v2);
  if (a1[170] && MGGetBoolAnswer())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFStringRef v4 = *(const __CFString **)CFBundleGetDataPointerForName(a1[170], @"kAFPreferencesDidChangeDarwinNotification");
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1003E16A0, v4, 0, CFNotificationSuspensionBehaviorDeliverImmediately);
  }
}

void sub_1003E16A0(uint64_t a1, uint64_t a2)
{
}

void sub_1003E16A8(uint64_t a1)
{
}

void sub_1003E16B0(CFBundleRef *a1)
{
  if (MGGetBoolAnswer())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    DataPointerForName = (CFNotificationName *)CFBundleGetDataPointerForName(a1[170], @"kAFPreferencesDidChangeDarwinNotification");
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, *DataPointerForName, 0);
  }
  CFRelease(a1[170]);
  a1[170] = 0;
}

void sub_1003E1718(uint64_t a1)
{
}

uint64_t sub_1003E1720(uint64_t a1, BOOL *a2)
{
  uint64_t v4 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 56))(v4)
    || !*(void *)(a1 + 1360)
    || !MGGetBoolAnswer())
  {
    return 1;
  }
  FunctionPointerForName = (void (*)(void))CFBundleGetFunctionPointerForName(*(CFBundleRef *)(a1 + 1360), @"AFSupportPreferencesSynchronize");
  FunctionPointerForName();
  uint64_t v6 = (uint64_t (*)(void))CFBundleGetFunctionPointerForName(*(CFBundleRef *)(a1 + 1360), @"AFPreferencesAssistantEnabled");
  int v7 = v6();
  uint64_t result = 0;
  *a2 = v7 != 0;
  return result;
}

void sub_1003E17CC(uint64_t a1)
{
  CFURLRef v2 = *(NSObject **)(sub_1004AF8EC() + 8);
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003E184C;
  block[3] = &unk_100997528;
  void block[4] = a1;
  dispatch_async(v2, block);
}

void sub_1003E184C(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned __int8 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                              + 136))(v1, &v2))sub_1002E13E8(v1, v2);
}

uint64_t sub_1003E18B4(uint64_t a1)
{
  unsigned __int8 v2 = (int *)(a1 + 1368);
  int v3 = *(NSObject **)(sub_1004AF8EC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003E1944;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.coreaudio.BorealisToggled", v2, v3, handler);
}

void sub_1003E1944(uint64_t a1)
{
}

uint64_t sub_1003E194C(uint64_t a1)
{
  return sub_1003E18B4(a1 - 88);
}

uint64_t sub_1003E1954(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1368));
  *(_DWORD *)(a1 + 1368) = -1;
  return result;
}

uint64_t sub_1003E1984(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1280));
  *(_DWORD *)(a1 + 1280) = -1;
  return result;
}

void sub_1003E19B4(unsigned char *a1)
{
  if (sub_10053FE54())
  {
    a1[1372] = 0;
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterAddObserver(DarwinNotifyCenter, a1, (CFNotificationCallback)sub_1003E1A54, @"com.apple.carplay.allowed-changed", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    sub_1003E1A5C();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075F6F0();
  }
}

void sub_1003E1A54()
{
}

void sub_1003E1A5C()
{
  if (sub_10053FE54())
  {
    CRIsCarPlayAllowed();
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075F6F0();
  }
}

void sub_1003E1B18(uint64_t a1)
{
}

void sub_1003E1B20(unsigned char *a1)
{
  if (sub_10053FE54())
  {
    DarwinNotifyCenter = CFNotificationCenterGetDarwinNotifyCenter();
    CFNotificationCenterRemoveObserver(DarwinNotifyCenter, a1, @"com.apple.carplay.allowed-changed", 0);
    a1[1372] = 0;
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075F6F0();
  }
}

void sub_1003E1B90(uint64_t a1)
{
}

uint64_t sub_1003E1B98(uint64_t a1, unsigned char *a2)
{
  *a2 = *(unsigned char *)(a1 + 1372);
  return 0;
}

void sub_1003E1BA8(uint64_t a1, char a2)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(NSObject **)(sub_1004AF8EC() + 8);
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  v5[2] = sub_1003E1C30;
  v5[3] = &unk_100998A58;
  void v5[4] = v3;
  char v6 = a2;
  dispatch_async(v4, v5);
}

void sub_1003E1C30(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 40);
  if (*(unsigned __int8 *)(v2 + 1372) != v3)
  {
    *(unsigned char *)(v2 + 1372) = v3;
    sub_1002E1770((os_unfair_lock_s *)v2, v3 != 0);
  }
}

void *sub_1003E1C5C(void *result)
{
  if (!result[191])
  {
    uint64_t v1 = result;
    uint64_t v2 = objc_alloc_init(SystemScreenObserver);
    uint64_t result = [(SystemScreenObserver *)v2 activateWithSystemMonitor:v1[180]];
    v1[191] = v2;
  }
  return result;
}

void sub_1003E1CA0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void *sub_1003E1CB0(uint64_t a1)
{
  return sub_1003E1C5C((void *)(a1 - 104));
}

uint64_t sub_1003E1CB8(uint64_t result)
{
  *(void *)(result + 1528) = 0;
  return result;
}

uint64_t sub_1003E1CC0(uint64_t result)
{
  *(void *)(result + 1424) = 0;
  return result;
}

uint64_t sub_1003E1CC8(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v4 + 408))(v4) & 1) != 0
    || (uint64_t v5 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 384))(v5) & 1) != 0))
  {
    unsigned __int8 v6 = 1;
  }
  else
  {
    unsigned __int8 v6 = [*(id *)(a1 + 1528) screenOn];
  }
  *a2 = v6;
  return 0;
}

uint64_t sub_1003E1D7C()
{
  return 11;
}

uint64_t sub_1003E1D84(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 1380);
  int v3 = *(NSObject **)(sub_1004AF8EC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003E1E14;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.keyboard.isOnScreen", v2, v3, handler);
}

void sub_1003E1E14(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned __int8 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *, void))(*(void *)&v1->_os_unfair_lock_opaque
                                                                                      + 208))(v1, &v2, 0))sub_1002E2400(v1, v2);
}

uint64_t sub_1003E1E80(uint64_t a1)
{
  return sub_1003E1D84(a1 - 120);
}

uint64_t sub_1003E1E88(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1380));
  *(_DWORD *)(a1 + 1380) = -1;
  return result;
}

uint64_t sub_1003E1EB8(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1260));
  *(_DWORD *)(a1 + 1260) = -1;
  return result;
}

uint64_t sub_1003E1EE8(uint64_t a1, BOOL *a2, int a3)
{
  uint64_t state64 = 0;
  if (a3) {
    notify_register_check("com.apple.keyboard.isOnScreen", (int *)(a1 + 1380));
  }
  uint64_t result = notify_get_state(*(_DWORD *)(a1 + 1380), &state64);
  if (result) {
    return 1;
  }
  *a2 = state64 == 1;
  return result;
}

uint64_t sub_1003E1F54(uint64_t a1)
{
  unsigned __int8 v2 = (int *)(a1 + 1384);
  int v3 = *(NSObject **)(sub_1004AF8EC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003E1FE4;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.mobilegarageband.appAndSessionState", v2, v3, handler);
}

void sub_1003E1FE4(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  unsigned __int8 v2 = 0;
  if (!(*(unsigned int (**)(os_unfair_lock_s *, unsigned __int8 *))(*(void *)&v1->_os_unfair_lock_opaque
                                                                              + 216))(v1, &v2))sub_1002E1BA0(v1, v2);
}

uint64_t sub_1003E204C(uint64_t a1)
{
  return sub_1003E1F54(a1 - 136);
}

uint64_t sub_1003E2054(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1384));
  *(_DWORD *)(a1 + 1384) = -1;
  return result;
}

uint64_t sub_1003E2084(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1248));
  *(_DWORD *)(a1 + 1248) = -1;
  return result;
}

uint64_t sub_1003E20B4(uint64_t a1, BOOL *a2)
{
  uint64_t state64 = 0;
  uint64_t result = notify_get_state(*(_DWORD *)(a1 + 1384), &state64);
  if (result) {
    return 1;
  }
  *a2 = state64 != 0;
  return result;
}

void sub_1003E2118(uint64_t a1)
{
  unsigned __int8 v6 = 1;
  uint64_t v2 = sub_100373114();
  (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v2 + 64))(v2, &v6);
  int v3 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(a1 + 1388);
    *(_DWORD *)long long buf = 67109376;
    int v8 = v6;
    __int16 v9 = 1024;
    int v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "SystemSettings Accessibility setting newHT:%u, currHT:%u", buf, 0xEu);
  }
  int v5 = v6;
  if (*(unsigned __int8 *)(a1 + 1388) != v6)
  {
    *(unsigned char *)(a1 + 1388) = v6;
    sub_1002E1DB8((os_unfair_lock_s *)a1, v5 != 0);
  }
}

uint64_t sub_1003E2228(uint64_t a1, unsigned char *a2)
{
  uint64_t v4 = sub_100373114();
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 64))(v4, a2);
  *(unsigned char *)(a1 + 1388) = *a2;
  return 0;
}

void sub_1003E2294(uint64_t a1, void *a2)
{
  id v4 = a2;
  int v5 = (id *)(a1 + 1560);
  objc_storeStrong(v5, a2);
  unsigned __int8 v6 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
  {
    id v7 = *v5;
    int v8 = 138412290;
    id v9 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "Country code changed %@", (uint8_t *)&v8, 0xCu);
  }
}

void sub_1003E2364(uint64_t a1, void *a2)
{
}

uint64_t sub_1003E236C(uint64_t a1)
{
  uint64_t result = sub_100540244();
  if (result)
  {
    *(unsigned char *)(a1 + 1412) = 0;
    uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1408));
    *(_DWORD *)(a1 + 1408) = -1;
  }
  return result;
}

uint64_t sub_1003E23A8(uint64_t a1)
{
  uint64_t result = sub_100540244();
  if (result)
  {
    *(unsigned char *)(a1 + 1252) = 0;
    uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1248));
    *(_DWORD *)(a1 + 1248) = -1;
  }
  return result;
}

uint64_t sub_1003E23E4(uint64_t a1)
{
  uint64_t result = sub_100540244();
  if (result)
  {
    if (*(_DWORD *)(a1 + 1408) == -1)
    {
      int v3 = *(NSObject **)(sub_1004AF8EC() + 8);
      handler[0] = _NSConcreteStackBlock;
      handler[1] = 3221225472;
      handler[2] = sub_1003E2488;
      handler[3] = &unk_1009A7640;
      handler[4] = a1;
      return notify_register_dispatch("com.apple.bluetooth.prefsChanged", (int *)(a1 + 1408), v3, handler);
    }
  }
  return result;
}

void sub_1003E2488(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  id v3 = (id)CFPreferencesCopyValue(@"SpatialSoundProfileAllowed", @"com.apple.bluetooth", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  if (v3 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
    int v2 = [v3 BOOLValue];
  }
  else {
    int v2 = 1;
  }
  if (*(unsigned __int8 *)(v1 + 1412) != v2)
  {
    *(unsigned char *)(v1 + 1412) = v2;
    sub_1002E1FD0((os_unfair_lock_s *)v1, v2);
  }
}

void sub_1003E2540(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E2554(uint64_t a1)
{
  return sub_1003E23E4(a1 - 160);
}

uint64_t sub_1003E255C(uint64_t a1, unsigned char *a2)
{
  if (sub_100540244())
  {
    id v4 = (void *)CFPreferencesCopyValue(@"SpatialSoundProfileAllowed", @"com.apple.bluetooth", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
    if (v4 && (objc_opt_class(), (objc_opt_isKindOfClass() & 1) != 0)) {
      unsigned int v5 = [v4 BOOLValue];
    }
    else {
      unsigned int v5 = 1;
    }
    *a2 = v5;
    if (*(unsigned __int8 *)(a1 + 1412) != v5) {
      *(unsigned char *)(a1 + 1412) = v5;
    }
  }
  return 0;
}

void sub_1003E260C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E261C(uint64_t a1)
{
  int v2 = (int *)(a1 + 1416);
  id v3 = *(NSObject **)(sub_1004AF8EC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003E26AC;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.bluetooth.prefsChanged", v2, v3, handler);
}

void sub_1003E26AC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = (void *)CFPreferencesCopyValue(@"move3PPLEMSToLegacyMode", @"com.apple.bluetooth", kCFPreferencesAnyUser, kCFPreferencesCurrentHost);
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    int v3 = [v2 BOOLValue];
    id v4 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      int v7 = 136315394;
      int v8 = "virtual void BT::SystemSettings::listenersWillBecomeNonEmpty(const ObservedListeners<HID3ppLELegacyModeListen"
           "er> &)_block_invoke";
      __int16 v9 = 1024;
      int v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "%s: Using Pref Setting for LE Mouse at 7.5ms: %d", (uint8_t *)&v7, 0x12u);
    }
  }
  else
  {
    int v3 = 0;
  }
  if (*(unsigned __int8 *)(v1 + 1420) != v3)
  {
    *(unsigned char *)(v1 + 1420) = v3;
    sub_1002E21E8((os_unfair_lock_s *)v1, v3);
  }
  unsigned int v5 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *(unsigned __int8 *)(v1 + 1420);
    int v7 = 136315394;
    int v8 = "virtual void BT::SystemSettings::listenersWillBecomeNonEmpty(const ObservedListeners<HID3ppLELegacyModeListener"
         "> &)_block_invoke";
    __int16 v9 = 1024;
    int v10 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "%s: LE Mouse at 7.5ms is currently set to %d", (uint8_t *)&v7, 0x12u);
  }
}

void sub_1003E2854(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E286C(uint64_t a1)
{
  return sub_1003E261C(a1 - 168);
}

uint64_t sub_1003E2874(uint64_t a1)
{
  *(unsigned char *)(a1 + 1420) = 0;
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1416));
  *(_DWORD *)(a1 + 1416) = -1;
  return result;
}

uint64_t sub_1003E28A8(uint64_t a1)
{
  *(unsigned char *)(a1 + 1252) = 0;
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1248));
  *(_DWORD *)(a1 + 1248) = -1;
  return result;
}

uint64_t sub_1003E28DC(uint64_t a1)
{
  int v2 = (int *)(a1 + 1424);
  int v3 = *(NSObject **)(sub_1004AF8EC() + 8);
  handler[0] = _NSConcreteStackBlock;
  handler[1] = 3221225472;
  handler[2] = sub_1003E296C;
  handler[3] = &unk_1009A7640;
  handler[4] = a1;
  return notify_register_dispatch("com.apple.system.console_mode_changed", v2, v3, handler);
}

void sub_1003E296C(uint64_t a1)
{
  uint64_t v1 = *(os_unfair_lock_s **)(a1 + 32);
  uint64_t state64 = 0;
  uint32_t state = notify_get_state(v1[356]._os_unfair_lock_opaque, &state64);
  int v3 = qword_100A19E50;
  BOOL v4 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
  if (state)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "fGameConsoleModeNotifyToken is invalid", buf, 2u);
    }
  }
  else
  {
    if (v4)
    {
      *(_DWORD *)long long buf = 134217984;
      uint64_t v7 = state64;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "com.apple.system.console_mode_changed: %llu", buf, 0xCu);
    }
    sub_1002E2BAC(v1, state64 == 1);
  }
}

uint64_t sub_1003E2A84(uint64_t a1)
{
  return sub_1003E28DC(a1 - 192);
}

uint64_t sub_1003E2A8C(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1424));
  *(_DWORD *)(a1 + 1424) = -1;
  return result;
}

uint64_t sub_1003E2ABC(uint64_t a1)
{
  uint64_t result = notify_cancel(*(_DWORD *)(a1 + 1232));
  *(_DWORD *)(a1 + 1232) = -1;
  return result;
}

uint64_t sub_1003E2AEC(uint64_t a1, BOOL *a2)
{
  uint64_t v3 = sub_100035F54();
  if (((*(uint64_t (**)(uint64_t))(*(void *)v3 + 384))(v3) & 1) == 0)
  {
    uint64_t v4 = sub_100035F54();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 328))(v4)) {
      return 1;
    }
  }
  size_t v6 = 8;
  uint64_t v7 = 0;
  if (sysctlbyname("kern.console_mode", &v7, &v6, 0, 0) == -1) {
    return 1;
  }
  uint64_t result = 0;
  *a2 = v7 == 1;
  return result;
}

void sub_1003E2BC4(uint64_t a1)
{
  if (sub_10053FEDC())
  {
    int v2 = *(void **)(a1 + 1432);
    if (!v2)
    {
      id v3 = objc_alloc_init((Class)CMDeviceOrientationManager);
      uint64_t v4 = *(void **)(a1 + 1432);
      *(void *)(a1 + 1432) = v3;

      int v2 = *(void **)(a1 + 1432);
    }
    unsigned int v5 = +[NSOperationQueue mainQueue];
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 3221225472;
    _DWORD v6[2] = sub_1003E2CCC;
    v6[3] = &unk_1009AC778;
    v6[4] = a1;
    [v2 startDeviceOrientationUpdatesToQueue:v5 withHandler:v6];
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10075F724();
  }
}

void sub_1003E2CBC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003E2CCC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  uint64_t v7 = *(os_unfair_lock_s **)(a1 + 32);
  int v8 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Receiving device orientation update", buf, 2u);
  }
  int v10 = 0;
  id v9 = [v5 orientation];
  if (!sub_1003E2D9C((uint64_t)v9, (int)v9, &v10)) {
    sub_1002E2618(v7, v10);
  }
}

void sub_1003E2D88(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E2D9C(uint64_t a1, int a2, int *a3)
{
  if (sub_10053FEDC())
  {
    switch(a2)
    {
      case 0:
      case 7:
        uint64_t result = 0;
        int v6 = 1;
        break;
      case 1:
        uint64_t result = 0;
        int v6 = 2;
        break;
      case 2:
        uint64_t result = 0;
        int v6 = 6;
        break;
      case 3:
        uint64_t result = 0;
        int v6 = 7;
        break;
      case 4:
        uint64_t result = 0;
        int v6 = 3;
        break;
      case 5:
        uint64_t result = 0;
        int v6 = 4;
        break;
      case 6:
        uint64_t result = 0;
        int v6 = 5;
        break;
      default:
        *a3 = 0;
        return 1;
    }
    *a3 = v6;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F724();
    }
    return 1;
  }
  return result;
}

void sub_1003E2EA0(uint64_t a1)
{
}

id sub_1003E2EA8(uint64_t a1)
{
  return [*(id *)(a1 + 1432) stopDeviceOrientationUpdates];
}

id sub_1003E2EB0(uint64_t a1)
{
  return [*(id *)(a1 + 1304) stopDeviceOrientationUpdates];
}

uint64_t sub_1003E2EB8(uint64_t a1)
{
  if (sub_10053FEDC())
  {
    unsigned int v11 = 0;
    int v2 = [*(id *)(a1 + 1432) deviceOrientationBlocking];
    id v3 = v2;
    if (!v2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075F758();
      }
      uint64_t v9 = 0;
      goto LABEL_16;
    }
    id v4 = [v2 orientation];
    int v5 = sub_1003E2D9C((uint64_t)v4, (int)v4, (int *)&v11);
    int v6 = qword_100A19E50;
    BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
    if (v5)
    {
      if (v7)
      {
        *(_DWORD *)long long buf = 67109120;
        unsigned int v13 = v11;
        int v8 = "Unexpected device orientation received - %u";
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v8, buf, 8u);
      }
    }
    else if (v7)
    {
      *(_DWORD *)long long buf = 67109120;
      unsigned int v13 = v11;
      int v8 = "Successfully queried device orientation - %u";
      goto LABEL_14;
    }
    uint64_t v9 = v11;
LABEL_16:

    return v9;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10075F724();
  }
  return 0;
}

void sub_1003E3034(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_1003E304C()
{
  size_t v3 = 8;
  uint64_t v4 = 0;
  if (sysctlbyname("security.mac.amfi.developer_mode_status", &v4, &v3, 0, 0)) {
    return 0;
  }
  uint64_t v1 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "Developer Mode enabled", v2, 2u);
  }
  return v4 == 1;
}

uint64_t sub_1003E30F0()
{
  if (qword_100A12A18 != -1) {
    dispatch_once(&qword_100A12A18, &stru_1009AC798);
  }
  return byte_100A12A10;
}

void sub_1003E3134(id a1)
{
  int v2 = 0;
  size_t v1 = 4;
  if (!sysctlbyname("kern.hv_vmm_present", &v2, &v1, 0, 0)) {
    byte_100A12A10 = v2 != 0;
  }
}

id sub_1003E3190(uint64_t a1)
{
  id result = (id)sub_100540448();
  if (result)
  {
    size_t v3 = *(void **)(a1 + 1536);
    return [v3 messagesAppLockState];
  }
  return result;
}

uint64_t sub_1003E31D8(uint64_t a1)
{
  block[0] = _NSConcreteStackBlock;
  block[1] = 3221225472;
  block[2] = sub_1003E32A8;
  block[3] = &unk_100997528;
  void block[4] = a1;
  if (qword_100A12A20 != -1) {
    dispatch_once(&qword_100A12A20, block);
  }
  if (*(void *)(a1 + 1544)) {
    return 0;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10075F78C();
  }
  return 1;
}

void sub_1003E32A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = +[NSDate dateWithTimeIntervalSinceNow:10.0];
  useconds_t v3 = 10000;
  *(void *)&long long v4 = 138412290;
  long long v28 = v4;
  while (1)
  {
    [v2 timeIntervalSinceNow];
    if (v5 <= 0.0) {
      break;
    }
    CFDictionaryRef v6 = IOServiceNameMatching("AppleOLYHAL");
    io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v6);
    io_registry_entry_t v8 = MatchingService;
    if (MatchingService)
    {
      CFTypeRef v9 = IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", @"HWIdentifiers", kCFAllocatorDefault, 1u);
      int v10 = v9;
      if (v9)
      {
        CFTypeID v11 = CFGetTypeID(v9);
        if (v11 == CFDictionaryGetTypeID())
        {
          uint64_t v12 = *(const void **)(v1 + 1544);
          if (v12)
          {
            CFRelease(v12);
            *(void *)(v1 + 1544) = 0;
          }
          CFRetain(v10);
          *(void *)(v1 + 1544) = v10;
        }
        CFRelease(v10);
      }
      CFBooleanRef v13 = (const __CFBoolean *)IORegistryEntrySearchCFProperty(v8, "IODeviceTree", @"WiFiBootState", kCFAllocatorDefault, 1u);
      CFBooleanRef v14 = v13;
      if (v13)
      {
        CFTypeID v15 = CFGetTypeID(v13);
        if (v15 == CFBooleanGetTypeID()) {
          *(unsigned char *)(v1 + 1552) = CFBooleanGetValue(v14) != 0;
        }
        CFRelease(v14);
      }
      IOObjectRelease(v8);
      CFDictionaryRef v16 = *(const __CFDictionary **)(v1 + 1544);
      if (v16)
      {
        uint64_t valuePtr = 0;
        CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(v16, @"C");
        CFNumberRef v18 = Value;
        if (!Value || (CFTypeID v19 = CFGetTypeID(Value), v19 != CFNumberGetTypeID()))
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10075F7C0();
          }
          break;
        }
        CFNumberGetValue(v18, kCFNumberLongType, &valuePtr);
        if (valuePtr != 4399) {
          break;
        }
        int v20 = *(unsigned __int8 *)(v1 + 1552);
        int v21 = qword_100A19E50;
        BOOL v22 = os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT);
        if (v20)
        {
          if (v22)
          {
            uint64_t v26 = *(void *)(v1 + 1544);
            int v27 = *(unsigned __int8 *)(v1 + 1552);
            *(_DWORD *)long long buf = 138412546;
            uint64_t v31 = v26;
            __int16 v32 = 1024;
            int v33 = v27;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "HWIdentifiers property is set: %@ and WiFi has booted %d", buf, 0x12u);
          }
          break;
        }
        if (v22)
        {
          uint64_t v23 = *(void *)(v1 + 1544);
          *(_DWORD *)long long buf = v28;
          uint64_t v31 = v23;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "HWIdentifiers property is set: %@ but WiFi has not booted", buf, 0xCu);
        }
      }
      else
      {
        int v25 = qword_100A19E50;
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_INFO, "No HWIdentifiers property. Retrying...\n", buf, 2u);
        }
      }
    }
    else
    {
      int v24 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_INFO))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_INFO, "No AppleOLYHAL service. Retrying...\n", buf, 2u);
      }
    }
    usleep(v3);
    v3 *= 2;
  }
}

void sub_1003E3630(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E3654(void *a1)
{
  uint64_t result = a1[193];
  if (!result)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F828();
    }
    if ((*(unsigned int (**)(void *))(*a1 + 288))(a1))
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075F7F4();
      }
      return 0;
    }
    else
    {
      return a1[193];
    }
  }
  return result;
}

uint64_t sub_1003E370C(CFDictionaryRef *a1)
{
  if (!(*((uint64_t (**)(CFDictionaryRef *))*a1 + 37))(a1))
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F85C();
    }
    return 0;
  }
  uint64_t valuePtr = 0;
  CFNumberRef Value = (const __CFNumber *)CFDictionaryGetValue(a1[193], @"C");
  if (!Value)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F7C0();
    }
    return 0;
  }
  CFNumberGetValue(Value, kCFNumberLongType, &valuePtr);
  if (valuePtr == 276347) {
    return 4377;
  }
  else {
    return valuePtr;
  }
}

void *sub_1003E37F4@<X0>(CFDictionaryRef *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if ((*((uint64_t (**)(CFDictionaryRef *))*a1 + 37))(a1))
  {
    *(_OWORD *)buffer = 0u;
    long long v29 = 0u;
    cStr[0] = a2;
    cStr[1] = 0;
    CFStringRef v6 = CFStringCreateWithCString(kCFAllocatorDefault, cStr, 0x8000100u);
    CFTypeRef v7 = CFAutorelease(v6);
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(a1[193], v7);
    if (Value)
    {
      CFTypeRef v9 = buffer;
      CFStringGetCString(Value, buffer, 32, 0x8000100u);
    }
    else
    {
      CFTypeID v19 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075F900(a2, v19, v20, v21, v22, v23, v24, v25);
      }
      CFTypeRef v9 = "";
    }
    CFNumberRef v18 = a3;
    long long v17 = v9;
  }
  else
  {
    int v10 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075F890(a2, v10, v11, v12, v13, v14, v15, v16);
    }
    long long v17 = "";
    CFNumberRef v18 = a3;
  }
  return sub_10004191C(v18, v17);
}

uint64_t sub_1003E3960(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 86);
}

uint64_t sub_1003E3990(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 77);
}

uint64_t sub_1003E39C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 115);
}

uint64_t sub_1003E39F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 80);
}

uint64_t sub_1003E3A20(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 312))(a1, 109);
}

void sub_1003E3A50(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  useconds_t v3 = (void **)a2;
  sub_1003E3D2C(a2, 0, buf);
  if (*((char *)v3 + 23) < 0) {
    operator delete(*v3);
  }
  *(_OWORD *)useconds_t v3 = *(_OWORD *)buf;
  _DWORD v3[2] = *(void **)&buf[16];
  CFStringRef v6 = v3;
  if (*((char *)v3 + 23) < 0) {
    CFStringRef v6 = *v3;
  }
  CFTypeRef v7 = +[NSString stringWithUTF8String:v6];
  io_registry_entry_t v8 = +[NSString stringWithFormat:@".*(%@)", v7];
  CFTypeRef v9 = (*(void (**)(uint64_t, const __CFString *, void *))(*(void *)a1 + 384))(a1, @"/etc/bluetool/", v8);
  uint64_t v10 = MGCopyAnswer();
  uint64_t v11 = qword_100A19E50;
  if (v10 && v9)
  {
    uint64_t v12 = (id)qword_100A19E50;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      id v14 = [@"/etc/bluetool/" stringByAppendingString:v9];
      id v15 = [v14 UTF8String];
      if (*((char *)v3 + 23) < 0) {
        useconds_t v3 = (void **)*v3;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v3;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Found file from override directory: %s with extension: %s", buf, 0x16u);
    }
    id v13 = [@"/etc/bluetool/" stringByAppendingString:v9];
    sub_10004191C(a3, (char *)[v13 UTF8String]);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v3 + 23) < 0) {
        useconds_t v3 = (void **)*v3;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v3;
      *(_WORD *)&unsigned char buf[12] = 2112;
      *(void *)&buf[14] = @"/etc/bluetool/";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "No override %s file in %@", buf, 0x16u);
    }
    sub_10004191C(a3, "");
  }
}

void sub_1003E3CD8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E3D2C@<X0>(const void **a1@<X0>, char a2@<W1>, void *a3@<X8>)
{
  size_t v6 = *((unsigned __int8 *)a1 + 23);
  size_t v7 = (size_t)a1[1];
  a3[1] = 0;
  a3[2] = 0;
  if ((v6 & 0x80u) == 0) {
    size_t v8 = v6;
  }
  else {
    size_t v8 = v7;
  }
  *a3 = 0;
  uint64_t result = sub_1002EA240((uint64_t)a3, v8 + 1);
  if (*(char *)(result + 23) >= 0) {
    uint64_t v10 = (char *)result;
  }
  else {
    uint64_t v10 = *(char **)result;
  }
  if (v8)
  {
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = *a1;
    }
    uint64_t result = (uint64_t)memmove(v10, v11, v8);
  }
  uint64_t v12 = &v10[v8];
  *uint64_t v12 = a2;
  v12[1] = 0;
  return result;
}

void sub_1003E3DC8(uint64_t a1@<X0>, const void **a2@<X1>, void *a3@<X8>)
{
  useconds_t v3 = a2;
  uint64_t v26 = a3;
  sub_1003E3D2C(a2, 0, __p);
  if (*((char *)v3 + 23) < 0) {
    operator delete((void *)*v3);
  }
  *(_OWORD *)useconds_t v3 = *(_OWORD *)__p;
  _DWORD v3[2] = *(const void **)&__p[16];
  double v5 = v3;
  if (*((char *)v3 + 23) < 0) {
    double v5 = (void *)*v3;
  }
  int v27 = +[NSString stringWithUTF8String:v5];
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 336))(__p, a1);
  if (__p[23] >= 0) {
    size_t v6 = __p;
  }
  else {
    size_t v6 = *(unsigned char **)__p;
  }
  size_t v7 = +[NSString stringWithUTF8String:v6];
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 344))(__p, a1);
  if (__p[23] >= 0) {
    size_t v8 = __p;
  }
  else {
    size_t v8 = *(unsigned char **)__p;
  }
  long long v28 = +[NSString stringWithUTF8String:v8];
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 320))(__p, a1);
  if (__p[23] >= 0) {
    CFTypeRef v9 = __p;
  }
  else {
    CFTypeRef v9 = *(unsigned char **)__p;
  }
  uint64_t v10 = +[NSString stringWithUTF8String:v9];
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)a1 + 424))(__p, a1);
  if (__p[23] >= 0) {
    uint64_t v11 = __p;
  }
  else {
    uint64_t v11 = *(unsigned char **)__p;
  }
  uint64_t v12 = +[NSString stringWithUTF8String:v11];
  if ((__p[23] & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  if ([v7 length] && objc_msgSend(v28, "length") && objc_msgSend(v10, "length"))
  {
    id v13 = [v10 uppercaseString];
    if ([v13 characterAtIndex:0] == 71)
    {
      uint64_t v14 = +[NSString stringWithUTF8String:"S"];

      uint64_t v10 = (void *)v14;
    }

    if ([v27 containsString:@"ptb"])
    {
      if ([(__CFString *)v12 length])
      {
        uint64_t v15 = +[NSString stringWithFormat:@"K_%@", v12];

        uint64_t v12 = (__CFString *)v15;
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
      {
        sub_10075FA60();
      }
    }
    else
    {

      uint64_t v12 = &stru_1009C1AC8;
    }
    if ([(__CFString *)v12 length]
      || ([v27 containsString:@"ptb"] & 1) == 0)
    {
      uint64_t v18 = +[NSString stringWithFormat:@".*(%@).*(%@).*._(%@).*(%@)_.*(%@)", v7, v28, v10, v12, v27, v26];
      uint64_t v19 = (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 384))(a1, @"/usr/share/firmware/bluetooth/", v18);
      long long v17 = (void *)v18;
      if (v19)
      {
        uint64_t v20 = (void *)v19;
        goto LABEL_44;
      }
    }
    else
    {
      long long v17 = 0;
    }
    if (![v27 containsString:@"ptb"]) {
      goto LABEL_49;
    }

    uint64_t v12 = @"K_R";
    uint64_t v18 = +[NSString stringWithFormat:@".*(%@).*(%@).*._(%@).*(%@)_.*(%@)", v7, v28, v10, @"K_R", v27];

    uint64_t v20 = (*(void (**)(uint64_t, const __CFString *, uint64_t))(*(void *)a1 + 384))(a1, @"/usr/share/firmware/bluetooth/", v18);
    long long v17 = (void *)v18;
    if (!v20)
    {
LABEL_49:
      uint64_t v25 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075F9E8((char *)v3 + 23, v3, v25);
      }
      sub_10004191C(v26, "");
      goto LABEL_52;
    }
LABEL_44:
    uint64_t v21 = (id)qword_100A19E50;
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      id v22 = [@"/usr/share/firmware/bluetooth/" stringByAppendingString:v20];
      id v23 = [v22 UTF8String];
      if (*((char *)v3 + 23) < 0) {
        useconds_t v3 = (const void **)*v3;
      }
      *(_DWORD *)long long __p = 136315394;
      *(void *)&__p[4] = v23;
      *(_WORD *)&unsigned char __p[12] = 2080;
      *(void *)&__p[14] = v3;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "Found file from HWIdentifiers: %s with extension: %s", __p, 0x16u);
    }
    id v24 = [@"/usr/share/firmware/bluetooth/" stringByAppendingString:v20];
    sub_10004191C(v26, (char *)[v24 UTF8String]);

    long long v17 = (void *)v18;
LABEL_52:

    goto LABEL_53;
  }
  uint64_t v16 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
    sub_10075F970((char *)v3 + 23, v3, v16);
  }
  sub_10004191C(v26, "");
LABEL_53:
}

void sub_1003E4414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, void *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  _Unwind_Resume(a1);
}

void sub_1003E4508(const void **a1@<X1>, void *a2@<X8>)
{
  int v2 = (void **)a1;
  sub_1003E3D2C(a1, 0, buffer);
  if (*((char *)v2 + 23) < 0) {
    operator delete(*v2);
  }
  *(_OWORD *)int v2 = *(_OWORD *)buffer;
  v2[2] = (void *)v22;
  if (*((char *)v2 + 23) < 0) {
    int v2 = (void **)*v2;
  }
  long long v4 = +[NSString stringWithUTF8String:v2];
  CFDictionaryRef v5 = IOServiceNameMatching("bluetooth-pcie");
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v5);
  io_object_t v7 = MatchingService;
  if (MatchingService)
  {
    CFStringRef v8 = (const __CFString *)IORegistryEntrySearchCFProperty(MatchingService, "IODeviceTree", @"IOName", kCFAllocatorDefault, 1u);
    CFStringRef v9 = v8;
    if (v8)
    {
      *(_OWORD *)buffer = 0u;
      long long v22 = 0u;
      if (CFStringGetCString(v8, buffer, 32, 0x8000100u))
      {
        CFRelease(v9);
        IOObjectRelease(v7);
        uint64_t v10 = strtok(buffer, ",");
        uint64_t v11 = strtok(0, ",");
        uint64_t v12 = v11;
        id v13 = qword_100A19E50;
        if (v10 && v11)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
          {
            int v15 = 136315394;
            uint64_t v16 = v10;
            __int16 v17 = 2080;
            uint64_t v18 = v12;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "Got IOName with vendorId %s, deviceId %s", (uint8_t *)&v15, 0x16u);
          }
          uint64_t v14 = +[NSString stringWithUTF8String:v10];
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10075FB30();
          }
          sub_10004191C(a2, "");
        }
        else
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
          {
            int v15 = 136315650;
            uint64_t v16 = v10;
            __int16 v17 = 2080;
            uint64_t v18 = v12;
            __int16 v19 = 2080;
            uint64_t v20 = buffer;
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Missing vendorId (%s) or deviceId (%s) from IOName %s", (uint8_t *)&v15, 0x20u);
          }
          sub_10004191C(a2, "");
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075FAFC();
        }
        CFRelease(v9);
        IOObjectRelease(v7);
        sub_10004191C(a2, "");
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075FAC8();
      }
      IOObjectRelease(v7);
      sub_10004191C(a2, "");
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075FA94();
    }
    sub_10004191C(a2, "");
  }
}

void sub_1003E4864(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

NSObject *sub_1003E4898(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v24 = a3;
  size_t v6 = +[NSFileManager defaultManager];
  io_object_t v7 = +[NSURL fileURLWithPath:v5];
  CFStringRef v8 = +[NSArray arrayWithObject:NSURLNameKey];
  id v29 = 0;
  CFStringRef v9 = [v6 contentsOfDirectoryAtURL:v7 includingPropertiesForKeys:v8 options:4 error:&v29];
  id v10 = v29;

  if (v10)
  {
    uint64_t v11 = (id)qword_100A19E50;
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = [v10 debugDescription];
      sub_10075FB98((uint64_t)v5, v12, (uint64_t)v31);
    }
    id v13 = 0;
  }
  else
  {
    uint64_t v14 = +[NSMutableArray array];
    long long v27 = 0u;
    long long v28 = 0u;
    long long v25 = 0u;
    long long v26 = 0u;
    id v15 = v9;
    id v16 = [v15 countByEnumeratingWithState:&v25 objects:v30 count:16];
    if (v16)
    {
      uint64_t v17 = *(void *)v26;
      do
      {
        for (unint64_t i = 0; i != v16; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v26 != v17) {
            objc_enumerationMutation(v15);
          }
          __int16 v19 = *(void **)(*((void *)&v25 + 1) + 8 * i);
          if (v19)
          {
            uint64_t v20 = [v19 lastPathComponent];
            [v14 addObject:v20];
          }
        }
        id v16 = [v15 countByEnumeratingWithState:&v25 objects:v30 count:16];
      }
      while (v16);
    }

    id v21 = [v14 count];
    long long v22 = 0;
    if (v24 && v21)
    {
      long long v22 = (*(void (**)(uint64_t, void *, id))(*(void *)a1 + 416))(a1, v14, v24);
    }
    uint64_t v11 = v22;

    id v13 = v11;
  }

  return v13;
}

void sub_1003E4B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  _Unwind_Resume(a1);
}

id sub_1003E4BCC(uint64_t a1, void *a2, void *a3)
{
  id v31 = a2;
  id v5 = a3;
  if ([v5 containsString:@"aladdink"])
  {
    CFStringRef v6 = @"aladdin";
    CFStringRef v7 = @"aladdink";
  }
  else
  {
    if (![v5 containsString:@"geniek"]) {
      goto LABEL_6;
    }
    CFStringRef v6 = @"genie";
    CFStringRef v7 = @"geniek";
  }
  uint64_t v8 = [v5 stringByReplacingOccurrencesOfString:v7 withString:v6];

  id v5 = (id)v8;
LABEL_6:
  uint64_t v30 = a1;
  __int16 v32 = v5;
  id v9 = objc_alloc_init((Class)NSMutableArray);
  long long v39 = 0u;
  long long v40 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  id v10 = v31;
  id v11 = [v10 countByEnumeratingWithState:&v37 objects:v43 count:16];
  if (v11)
  {
    uint64_t v12 = *(void *)v38;
    do
    {
      for (unint64_t i = 0; i != v11; unint64_t i = (char *)i + 1)
      {
        if (*(void *)v38 != v12) {
          objc_enumerationMutation(v10);
        }
        uint64_t v14 = *(void **)(*((void *)&v37 + 1) + 8 * i);
        long long v33 = 0u;
        long long v34 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        id v15 = [&off_1009E1930 countByEnumeratingWithState:&v33 objects:v42 count:16];
        if (v15)
        {
          uint64_t v16 = *(void *)v34;
          do
          {
            for (SCNetworkInterfaceRef j = 0; j != v15; SCNetworkInterfaceRef j = (char *)j + 1)
            {
              if (*(void *)v34 != v16) {
                objc_enumerationMutation(&off_1009E1930);
              }
              if (([v14 containsString:*(void *)(*((void *)&v33 + 1) + 8 * (void)j)] & 1) == 0)[v9 addObject:v14]; {
            }
              }
            id v15 = [&off_1009E1930 countByEnumeratingWithState:&v33 objects:v42 count:16];
          }
          while (v15);
        }
      }
      id v11 = [v10 countByEnumeratingWithState:&v37 objects:v43 count:16];
    }
    while (v11);
  }

  uint64_t v18 = +[NSPredicate predicateWithFormat:@"SELF MATCHES[c] %@", v32];
  __int16 v19 = [v9 filteredArrayUsingPredicate:v18];
  id v20 = [v19 mutableCopy];

  if (![v20 count]) {
    goto LABEL_27;
  }
  id v21 = [v20 sortedArrayUsingSelector:"localizedCaseInsensitiveCompare:"];
  id v22 = [v21 mutableCopy];

  id v20 = v22;
  id v23 = [v22 lastObject];
  BOOL v24 = (unint64_t)[v23 length] > 0xFF;

  if (v24)
  {
    long long v25 = (id)qword_100A19E50;
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      long long v26 = [v22 lastObject];
      sub_10075FBF0(v26, (uint64_t)v32, (uint64_t)v41);
    }

LABEL_27:
    long long v27 = 0;
    goto LABEL_34;
  }
  if ((unint64_t)[v22 count] < 2)
  {
    uint64_t v28 = [v22 lastObject];
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075FC58();
    }
    uint64_t v28 = (*(void (**)(uint64_t, id))(*(void *)v30 + 392))(v30, v22);
  }
  long long v27 = (void *)v28;
LABEL_34:

  return v27;
}

void sub_1003E4F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

id sub_1003E502C(uint64_t a1, void *a2)
{
  id v27 = a2;
  id v47 = 0;
  id v31 = +[NSRegularExpression regularExpressionWithPattern:@".*_([0-9]*)[.]([0-9]*)[.]([0-9]*)[.].*" options:1 error:&v47];
  id v26 = v47;
  if (v26)
  {
    int v2 = (id)qword_100A19E50;
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      useconds_t v3 = [v27 lastObject];
      long long v4 = [v26 debugDescription];
      sub_10075FCC0(v3, v4, (uint64_t)v50);
    }

    id v5 = [v27 lastObject];
  }
  else
  {
    id v37 = objc_alloc_init((Class)NSNumberFormatter);
    long long v35 = [v27 lastObject];
    long long v45 = 0u;
    long long v46 = 0u;
    long long v43 = 0u;
    long long v44 = 0u;
    obSCNetworkInterfaceRef j = v27;
    id v6 = [obj countByEnumeratingWithState:&v43 objects:v49 count:16];
    if (v6)
    {
      id v33 = 0;
      id v34 = 0;
      id v36 = 0;
      uint64_t v29 = *(void *)v44;
      id v30 = v6;
      CFStringRef v7 = &stru_1009C1AC8;
      uint64_t v8 = &stru_1009C1AC8;
      do
      {
        for (unint64_t i = 0; i != v30; unint64_t i = (char *)i + 1)
        {
          if (*(void *)v44 != v29) {
            objc_enumerationMutation(obj);
          }
          id v9 = *(void **)(*((void *)&v43 + 1) + 8 * i);
          id v10 = [v31 matchesInString:v9 options:0 range:[v9 length]];

          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          id v33 = v10;
          id v11 = [v33 countByEnumeratingWithState:&v39 objects:v48 count:16];
          if (v11)
          {
            uint64_t v38 = *(void *)v40;
            CFStringRef v7 = &stru_1009C1AC8;
            uint64_t v8 = &stru_1009C1AC8;
            do
            {
              for (SCNetworkInterfaceRef j = 0; j != v11; SCNetworkInterfaceRef j = (char *)j + 1)
              {
                if (*(void *)v40 != v38) {
                  objc_enumerationMutation(v33);
                }
                id v13 = *(void **)(*((void *)&v39 + 1) + 8 * (void)j);
                if ((unint64_t)[v13 numberOfRanges] >= 4)
                {
                  id v14 = [v13 rangeAtIndex:1];
                  uint64_t v16 = [v9 substringWithRange:v14, v15];

                  id v17 = [v13 rangeAtIndex:3];
                  uint64_t v19 = [v9 substringWithRange:v17, v18];

                  id v20 = [v37 numberFromString:v16];
                  id v21 = [v20 longValue];

                  id v22 = [v37 numberFromString:v19];
                  id v23 = [v22 longValue];

                  if ((uint64_t)v36 < (uint64_t)v21 || v36 == v21 && (uint64_t)v34 < (uint64_t)v23)
                  {
                    id v24 = v9;

                    long long v35 = v24;
                    id v36 = v21;
                    uint64_t v8 = (__CFString *)v16;
                    CFStringRef v7 = (__CFString *)v19;
                    id v34 = v23;
                  }
                  else
                  {
                    uint64_t v8 = (__CFString *)v16;
                    CFStringRef v7 = (__CFString *)v19;
                  }
                }
              }
              id v11 = [v33 countByEnumeratingWithState:&v39 objects:v48 count:16];
            }
            while (v11);
          }
          else
          {
            CFStringRef v7 = &stru_1009C1AC8;
            uint64_t v8 = &stru_1009C1AC8;
          }
        }
        id v30 = [obj countByEnumeratingWithState:&v43 objects:v49 count:16];
      }
      while (v30);
    }
    else
    {
      id v33 = 0;
      uint64_t v8 = &stru_1009C1AC8;
      CFStringRef v7 = &stru_1009C1AC8;
    }

    id v5 = v35;
  }

  return v5;
}

void sub_1003E5464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003E5550(uint64_t a1, uint64_t a2, void *a3, _DWORD *a4)
{
  bzero(v11, 0x240uLL);
  sub_1003E593C(v11);
  if ((*((unsigned char *)&v11[4] + (unint64_t)*(v11[0] - 3)) & 5) != 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075FEA0();
    }
    uint64_t v6 = 2402;
  }
  else
  {
    *a4 = 0;
    std::istream::seekg();
    std::istream::tellg();
    *a4 = v10;
    std::istream::seekg();
    size_t v8 = *a4;
    if ((int)v8 <= 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
        sub_10075FD20();
      }
      if (v12 && !std::filebuf::close()) {
        std::ios_base::clear((std::ios_base *)((char *)v11 + (unint64_t)*(v11[0] - 3)), *(_DWORD *)((char *)&v11[4] + (unint64_t)*(v11[0] - 3)) | 4);
      }
      uint64_t v6 = 2403;
    }
    else
    {
      id v9 = malloc_type_malloc(v8, 0x100004077774924uLL);
      *a3 = v9;
      if (v9)
      {
        std::istream::read();
        if ((*((unsigned char *)&v11[4] + (unint64_t)*(v11[0] - 3)) & 5) != 0)
        {
          if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
            sub_10075FE18();
          }
          if (v12 && !std::filebuf::close()) {
            std::ios_base::clear((std::ios_base *)((char *)v11 + (unint64_t)*(v11[0] - 3)), *(_DWORD *)((char *)&v11[4] + (unint64_t)*(v11[0] - 3)) | 4);
          }
          uint64_t v6 = 2405;
        }
        else
        {
          if (v12 && !std::filebuf::close()) {
            std::ios_base::clear((std::ios_base *)((char *)v11 + (unint64_t)*(v11[0] - 3)), *(_DWORD *)((char *)&v11[4] + (unint64_t)*(v11[0] - 3)) | 4);
          }
          uint64_t v6 = 0;
        }
      }
      else
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
          sub_10075FDA8();
        }
        if (v12 && !std::filebuf::close()) {
          std::ios_base::clear((std::ios_base *)((char *)v11 + (unint64_t)*(v11[0] - 3)), *(_DWORD *)((char *)&v11[4] + (unint64_t)*(v11[0] - 3)) | 4);
        }
        uint64_t v6 = 2404;
      }
    }
  }
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return v6;
}

void sub_1003E591C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

void (__cdecl ***sub_1003E593C(void (__cdecl ***a1)(std::ifstream *__hidden this)))(std::ifstream *__hidden this)
{
  *a1 = v3;
  *(void *)((char *)*(v3 - 3) + (void)a1) = v2;
  a1[1] = 0;
  long long v4 = (std::ios_base *)((char *)*(*a1 - 3) + (void)a1);
  std::ios_base::init(v4, a1 + 2);
  v4[1].__vftable = 0;
  v4[1].__fmtflags_ = -1;
  std::filebuf::basic_filebuf();
  if (!std::filebuf::open()) {
    std::ios_base::clear((std::ios_base *)((char *)*(*a1 - 3) + (void)a1), *(_DWORD *)((char *)*(*a1 - 3) + (void)a1 + 32) | 4);
  }
  return a1;
}

void sub_1003E5AD4(_Unwind_Exception *a1)
{
}

void *sub_1003E5B0C(void *a1)
{
  std::filebuf::~filebuf();
  std::istream::~istream();
  std::ios::~ios();
  return a1;
}

uint64_t sub_1003E5BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  int v10 = (char *)(a2 + 23);
  if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(a2 + 23)) {
      goto LABEL_3;
    }
LABEL_7:
    id v11 = qword_100A19E50;
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075FF10(v11, v12, v13, v14, v15, v16, v17, v18);
    }
    return 2400;
  }
  if (!*(void *)(a2 + 8)) {
    goto LABEL_7;
  }
LABEL_3:
  if (!a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR)) {
      sub_10075FF88();
    }
    return 2401;
  }
  if ((*(unsigned char *)(a2 + 23) & 0x80) != 0)
  {
    sub_10003B098(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v30 = *(void *)(a2 + 16);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)a1 + 360))(&v31, a1, __p);
  if (*((char *)a5 + 23) < 0) {
    operator delete(*(void **)a5);
  }
  *a5 = v31;
  *((void *)a5 + 2) = v32;
  HIBYTE(v32) = 0;
  LOBYTE(v31) = 0;
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  if (*((char *)a5 + 23) < 0)
  {
    unint64_t v20 = *((void *)a5 + 1);
    if (v20)
    {
      sub_10003B098(&__dst, *(void **)a5, v20);
LABEL_23:
      uint64_t v19 = (*(uint64_t (**)(uint64_t, long long *, uint64_t, uint64_t))(*(void *)a1 + 400))(a1, &__dst, a3, a4);
      if (SHIBYTE(v28) < 0)
      {
        id v21 = (void *)__dst;
LABEL_37:
        operator delete(v21);
        return v19;
      }
      return v19;
    }
  }
  else if (*((unsigned char *)a5 + 23))
  {
    long long __dst = *a5;
    uint64_t v28 = *((void *)a5 + 2);
    goto LABEL_23;
  }
  if (*v10 < 0)
  {
    sub_10003B098(v25, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long v25 = *(_OWORD *)a2;
    uint64_t v26 = *(void *)(a2 + 16);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, void **))(*(void *)a1 + 368))(&v31, a1, v25);
  if (*((char *)a5 + 23) < 0) {
    operator delete(*(void **)a5);
  }
  *a5 = v31;
  *((void *)a5 + 2) = v32;
  HIBYTE(v32) = 0;
  LOBYTE(v31) = 0;
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (*((char *)a5 + 23) < 0)
  {
    sub_10003B098(v23, *(void **)a5, *((void *)a5 + 1));
  }
  else
  {
    *(_OWORD *)id v23 = *a5;
    uint64_t v24 = *((void *)a5 + 2);
  }
  uint64_t v19 = (*(uint64_t (**)(uint64_t, void **, uint64_t, uint64_t))(*(void *)a1 + 400))(a1, v23, a3, a4);
  if (SHIBYTE(v24) < 0)
  {
    id v21 = v23[0];
    goto LABEL_37;
  }
  return v19;
}

void sub_1003E5ED8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003E5F30(std::string *a1@<X8>)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  sub_10004191C(a1, "");
  uint64_t v2 = qword_100A19E50;
  if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v10) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "System Settings MGCopyAnswer WSKU", (uint8_t *)&v10, 2u);
  }
  CFDataRef v3 = (const __CFData *)MGCopyAnswer();
  CFDataRef v4 = v3;
  if (v3)
  {
    if (CFDataGetLength(v3) == 16)
    {
      uint64_t v5 = 0;
      uint64_t v6 = CFDataGetBytePtr(v4) + 8;
      do
      {
        unsigned int v7 = v6[v5];
        if (v7 >= 0x21) {
          std::string::push_back(a1, v7);
        }
        ++v5;
      }
      while (v5 != 4);
      size_t v8 = qword_100A19E50;
      if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_DEFAULT))
      {
        if ((a1->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          id v9 = a1;
        }
        else {
          id v9 = (std::string *)a1->__r_.__value_.__r.__words[0];
        }
        int v10 = 136315138;
        id v11 = v9;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Obtained sku from system is: %s", (uint8_t *)&v10, 0xCu);
      }
    }
    CFRelease(v4);
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E50, OS_LOG_TYPE_ERROR))
  {
    sub_10076002C();
  }
}

void sub_1003E60C8(_Unwind_Exception *exception_object)
{
}

void sub_1003E60F8(uint64_t a1)
{
  sub_1003E62E8(a1);

  operator delete();
}

Class sub_1003E6174(uint64_t a1)
{
  if (!qword_100A12A30) {
    qword_100A12A30 = _sl_dlopen();
  }
  Class result = objc_getClass("SBSSmartCoverService");
  *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  qword_100A12A28 = *(void *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
  return result;
}

uint64_t sub_1003E6274()
{
  uint64_t result = _sl_dlopen();
  qword_100A12A30 = result;
  return result;
}

void *sub_1003E62E8(uint64_t a1)
{
  *(void *)a1 = off_1009AC060;
  *(void *)(a1 + 8) = off_1009AC3D8;
  *(void *)(a1 + 16) = off_1009AC3F8;
  *(void *)(a1 + 24) = off_1009AC418;
  *(void *)(a1 + 32) = off_1009AC438;
  *(void *)(a1 + 40) = off_1009AC458;
  *(void *)(a1 + 48) = off_1009AC478;
  *(void *)(a1 + 56) = off_1009AC498;
  *(void *)(a1 + 64) = off_1009AC4B8;
  *(void *)(a1 + 72) = off_1009AC4D8;
  *(void *)(a1 + 80) = off_1009AC4F8;
  *(void *)(a1 + 88) = off_1009AC518;
  *(void *)(a1 + 96) = off_1009AC538;
  *(void *)(a1 + 104) = off_1009AC558;
  *(void *)(a1 + 112) = off_1009AC578;
  *(void *)(a1 + 120) = off_1009AC598;
  *(void *)(a1 + 128) = off_1009AC5B8;
  *(void *)(a1 + 136) = off_1009AC5D8;
  *(void *)(a1 + 144) = off_1009AC5F8;
  *(void *)(a1 + 152) = off_1009AC618;
  *(void *)(a1 + 160) = off_1009AC638;
  *(void *)(a1 + 168) = off_1009AC658;
  *(void *)(a1 + 176) = off_1009AC678;
  *(void *)(a1 + 184) = off_1009AC698;
  *(void *)(a1 + 192) = off_1009AC6B8;
  *(void *)(a1 + 200) = off_1009AC6D8;
  *(void *)(a1 + 1256) = &off_1009AC6F8;

  sub_100052DA4(a1 + 1448);

  return sub_1003DE510((void *)a1);
}

void sub_1003E6698(id a1)
{
}

void sub_1003E6828()
{
}

void sub_1003E684C(id a1)
{
}

void sub_1003E6890()
{
}

uint64_t sub_1003E68B4(uint64_t result, uint64_t a2, uint64_t a3, float a4)
{
  *(float *)a3 = a4;
  *(void *)(a3 + 4) = result;
  *(_WORD *)(a3 + 12) = 2112;
  *(void *)(a3 + 14) = a2;
  return result;
}

void sub_1003E68CC(void *a1, uint64_t a2, os_log_t log, const char *a4, ...)
{
  va_start(va, a4);
  _os_log_error_impl(a1, log, OS_LOG_TYPE_ERROR, a4, (uint8_t *)va, 0xCu);
}

void sub_1003E68EC(uint64_t a1@<X8>)
{
  *(void *)(v1 - 8) = a1;
}

uint64_t sub_1003E68FC(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, int a6)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 8);
  size_t v8 = *(void **)(a1 + 80);
  if (v8 != (void *)(a1 + 88))
  {
    while (1)
    {
      uint64_t v9 = v8[4];
      int v10 = qword_100A19EC8;
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
        break;
      }
      if (v9) {
        goto LABEL_4;
      }
LABEL_7:
      uint64_t v13 = (void *)v8[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v8[2];
          BOOL v15 = *v14 == (void)v8;
          size_t v8 = v14;
        }
        while (!v15);
      }
      size_t v8 = v14;
      if (v14 == (void *)(a1 + 88)) {
        return sub_10003AFB4((uint64_t)v22);
      }
    }
    uint64_t v16 = *(void *)(v9 + 8);
    *(_DWORD *)long long buf = 134219264;
    uint64_t v24 = a2;
    __int16 v25 = 1024;
    unsigned int v26 = a3;
    __int16 v27 = 1024;
    unsigned int v28 = a4;
    __int16 v29 = 1024;
    unsigned int v30 = a5;
    __int16 v31 = 1024;
    int v32 = a6;
    __int16 v33 = 2048;
    uint64_t v34 = v16;
    _os_log_debug_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEBUG, "BTDeviceMsgHandler::BTServiceEventCallback device:%llx services:%x eventType:%x ServiceSpecificEvent:%x result:%d cbid:%llx", buf, 0x2Eu);
LABEL_4:
    if (*(unsigned char *)(*(void *)(v9 + 24) + 160))
    {
      xpc_object_t v11 = xpc_dictionary_create(0, 0, 0);
      uint64_t v12 = v11;
      if (v11)
      {
        xpc_dictionary_set_uint64(v11, "kCBMsgArgID", *(void *)(v9 + 8));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgSessionID", *(void *)(v9 + 16));
        xpc_dictionary_set_uint64(v12, "kCBMsgArgBTDevice", a2);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgServiceMask", a3);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgEventType", a4);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgEvent", a5);
        xpc_dictionary_set_uint64(v12, "kCBMsgArgResult", a6);
        sub_1002D7B48(*(void *)(v9 + 24), "kCBMsgIdServiceEvent", v12, 1);
      }
    }
    goto LABEL_7;
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_1003E6B74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
}

uint64_t sub_1003E6B90(uint64_t result, unsigned int a2, unsigned int a3, unsigned int a4, int a5, uint64_t a6)
{
  if (a6) {
    return sub_1003E68FC(a6, result, a2, a3, a4, a5);
  }
  return result;
}

void *sub_1003E6BB8(void *a1, uint64_t a2)
{
  CFDataRef v3 = sub_1004EEEA8(a1, a2);
  void *v3 = &off_1009AC820;
  v3[11] = 0;
  v3[12] = 0;
  v3[10] = v3 + 11;
  *((unsigned char *)v3 + 104) = 0;
  if (qword_100A12A38 != -1) {
    dispatch_once(&qword_100A12A38, &stru_1009AC840);
  }
  return a1;
}

void sub_1003E6C38(id a1)
{
  long long v55 = "kCBMsgIdDeviceAddressToStringMsg";
  uint64_t v56 = 32;
  long long v57 = &v55;
  uint64_t v1 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v1[4] = sub_1003E79A8;
  void v1[5] = 0;
  long long v55 = "kCBMsgIdDeviceAddressFromStringMsg";
  uint64_t v56 = 34;
  long long v57 = &v55;
  uint64_t v2 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v2[4] = sub_1003E7B9C;
  v2[5] = 0;
  long long v55 = "kCBMsgIdDeviceFromAddressMsg";
  uint64_t v56 = 28;
  long long v57 = &v55;
  CFDataRef v3 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v3[4] = sub_1003E7C84;
  void v3[5] = 0;
  long long v55 = "kCBMsgIdDeviceFromIdentifierMsg";
  uint64_t v56 = 31;
  long long v57 = &v55;
  uint64_t v4 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v4[4] = sub_1003E7DF0;
  void v4[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetAddressStringMsg";
  uint64_t v56 = 33;
  long long v57 = &v55;
  uint64_t v5 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v5[4] = sub_1003E7F00;
  void v5[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetDeviceTypeMsg";
  uint64_t v56 = 30;
  long long v57 = &v55;
  uint64_t v6 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v6[4] = sub_1003E8064;
  void v6[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetDeviceClassMsg";
  uint64_t v56 = 31;
  long long v57 = &v55;
  unsigned int v7 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v7[4] = sub_1003E8150;
  void v7[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetDefaultNameMsg";
  uint64_t v56 = 31;
  long long v57 = &v55;
  size_t v8 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v8[4] = sub_1003E823C;
  void v8[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetNameMsg";
  uint64_t v56 = 24;
  long long v57 = &v55;
  uint64_t v9 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v9[4] = sub_1003E83A0;
  void v9[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetProductNameMsg";
  uint64_t v56 = 31;
  long long v57 = &v55;
  int v10 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  _OWORD v10[4] = sub_1003E8504;
  void v10[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetUserNameMsg";
  uint64_t v56 = 28;
  long long v57 = &v55;
  xpc_object_t v11 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v11[4] = sub_1003E8668;
  v11[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetSyncSettingsMsg";
  uint64_t v56 = 32;
  long long v57 = &v55;
  uint64_t v12 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v12[4] = sub_1003E8754;
  v12[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetSyncSettingsMsg";
  uint64_t v56 = 32;
  long long v57 = &v55;
  uint64_t v13 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v13[4] = sub_1003E8840;
  void v13[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetGroupsMsg";
  uint64_t v56 = 26;
  long long v57 = &v55;
  uint64_t v14 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v14[4] = sub_1003E892C;
  void v14[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetGroupMsg";
  uint64_t v56 = 25;
  long long v57 = &v55;
  BOOL v15 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v15[4] = sub_1003E8AE8;
  v15[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetPairingStatusMsg";
  uint64_t v56 = 33;
  long long v57 = &v55;
  uint64_t v16 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v16[4] = sub_1003E8BEC;
  unsigned char v16[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetCloudPairingStatusMsg";
  uint64_t v56 = 38;
  long long v57 = &v55;
  uint64_t v17 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v17[4] = sub_1003E8CD8;
  void v17[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetMagicPairingStatusMsg";
  uint64_t v56 = 38;
  long long v57 = &v55;
  uint64_t v18 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v18[4] = sub_1003E8DC4;
  v18[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetConnectionStatusMsg";
  uint64_t v56 = 36;
  long long v57 = &v55;
  uint64_t v19 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v19[4] = sub_1003E8EB0;
  v19[5] = 0;
  long long v55 = "kCBMsgIdDeviceIsAppleAudioDeviceMsg";
  uint64_t v56 = 35;
  long long v57 = &v55;
  unint64_t v20 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v20[4] = sub_1003E8F9C;
  void v20[5] = 0;
  long long v55 = "kCBMsgIdDeviceSupportsHSMsg";
  uint64_t v56 = 27;
  long long v57 = &v55;
  id v21 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v21[4] = sub_1003E9088;
  void v21[5] = 0;
  long long v55 = "kCBMsgIdDeviceIsProControllerMsg";
  uint64_t v56 = 32;
  long long v57 = &v55;
  id v22 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v22[4] = sub_1003E9174;
  v22[5] = 0;
  long long v55 = "kCBMsgIdDeviceServiceAddCallbacksMsg";
  uint64_t v56 = 36;
  long long v57 = &v55;
  id v23 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v23[4] = sub_1003E9260;
  v23[5] = 0;
  long long v55 = "kCBMsgIdDeviceServiceRemoveCallbacksMsg";
  uint64_t v56 = 39;
  long long v57 = &v55;
  uint64_t v24 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v24[4] = sub_1003E9488;
  v24[5] = 0;
  long long v55 = "kCBMsgIdDeviceConnectMsg";
  uint64_t v56 = 24;
  long long v57 = &v55;
  __int16 v25 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  uint8_t v25[4] = sub_1003E966C;
  v25[5] = 0;
  long long v55 = "kCBMsgIdDeviceConnectServicesMsg";
  uint64_t v56 = 32;
  long long v57 = &v55;
  unsigned int v26 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v26[4] = sub_1003E9738;
  v26[5] = 0;
  long long v55 = "kCBMsgIdDeviceConnectServicesWithParametersMsg";
  uint64_t v56 = 46;
  long long v57 = &v55;
  __int16 v27 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  _OWORD v27[4] = sub_1003E9824;
  v27[5] = 0;
  long long v55 = "kCBMsgIdDeviceDisconnectMsg";
  uint64_t v56 = 27;
  long long v57 = &v55;
  unsigned int v28 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v28[4] = sub_1003E9988;
  v28[5] = 0;
  long long v55 = "kCBMsgIdDeviceDisconnectServicesMsg";
  uint64_t v56 = 35;
  long long v57 = &v55;
  __int16 v29 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v29[4] = sub_1003E9A54;
  v29[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetConnectedServicesMsg";
  uint64_t v56 = 37;
  long long v57 = &v55;
  unsigned int v30 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v30[4] = sub_1003E9B40;
  v30[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetSupportedServicesMsg";
  uint64_t v56 = 37;
  long long v57 = &v55;
  __int16 v31 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v31[4] = sub_1003E9C2C;
  void v31[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetServiceSettingsMsg";
  uint64_t v56 = 35;
  long long v57 = &v55;
  int v32 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v32[4] = sub_1003E9D18;
  void v32[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetServiceSettingsMsg";
  uint64_t v56 = 35;
  long long v57 = &v55;
  __int16 v33 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v33[4] = sub_1003E9E3C;
  v33[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetVirtualTypeMsg";
  uint64_t v56 = 31;
  long long v57 = &v55;
  uint64_t v34 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v34[4] = sub_1003E9FB8;
  v34[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetVirtualTypeMsg";
  uint64_t v56 = 31;
  long long v57 = &v55;
  long long v35 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v35[4] = sub_1003EA0A4;
  v35[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetComPortForServiceMsg";
  uint64_t v56 = 37;
  long long v57 = &v55;
  id v36 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v36[4] = sub_1003EA190;
  _DWORD v36[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetComPortForServiceWithSandboxExtensionMsg";
  uint64_t v56 = 57;
  long long v57 = &v55;
  id v37 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v37[4] = sub_1003EA32C;
  v37[5] = 0;
  long long v55 = "kCBMsgIdDeviceMatchesAdvertisedKeyMsg";
  uint64_t v56 = 37;
  long long v57 = &v55;
  uint64_t v38 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v38[4] = sub_1003EA578;
  v38[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetAdvertisedValueForKeyMsg";
  uint64_t v56 = 41;
  long long v57 = &v55;
  long long v39 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v39[4] = sub_1003EA694;
  v39[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetDeviceIdMsg";
  uint64_t v56 = 28;
  long long v57 = &v55;
  long long v40 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v40[4] = sub_1003EA84C;
  v40[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetHIDPropertiesMsg";
  uint64_t v56 = 33;
  long long v57 = &v55;
  long long v41 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v41[4] = sub_1003EA980;
  v41[5] = 0;
  long long v55 = "kCBMsgIdDevicePhysicalLinkDisconnectMsg";
  uint64_t v56 = 39;
  long long v57 = &v55;
  long long v42 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  void v42[4] = sub_1003EAA84;
  v42[5] = 0;
  long long v55 = "kCBMsgIdDeviceConfigureLinkKeyMsg";
  uint64_t v56 = 33;
  long long v57 = &v55;
  long long v43 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v43[4] = sub_1003EAB4C;
  v43[5] = 0;
  long long v55 = "kCBMsgIdDeviceIsTemporaryPairedMsg";
  uint64_t v56 = 34;
  long long v57 = &v55;
  long long v44 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v44[4] = sub_1003EACD8;
  v44[5] = 0;
  long long v55 = "kCBMsgIdDeviceIsWirelessSplitterSupportedMsg";
  uint64_t v56 = 44;
  long long v57 = &v55;
  long long v45 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v45[4] = sub_1003EADC4;
  v45[5] = 0;
  long long v55 = "kCBMsgIdDeviceIsTemporaryPairedNotInContactsMsg";
  uint64_t v56 = 47;
  long long v57 = &v55;
  long long v46 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v46[4] = sub_1003EAEB0;
  v46[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetLowSecurityStatusMsg";
  uint64_t v56 = 37;
  long long v57 = &v55;
  id v47 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v47[4] = sub_1003EAF9C;
  v47[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetHIDDeviceBehaviorMsg";
  uint64_t v56 = 37;
  long long v57 = &v55;
  unint64_t v48 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v48[4] = sub_1003EB088;
  v48[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetHijackAudioRouteMsg";
  uint64_t v56 = 36;
  long long v57 = &v55;
  long long v49 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v49[4] = sub_1003EB178;
  v49[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetACLHighPriorityMsg";
  uint64_t v56 = 35;
  long long v57 = &v55;
  long long v50 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v50[4] = sub_1003EB264;
  v50[5] = 0;
  long long v55 = "kCBMsgIdDeviceIsCentralMsg";
  uint64_t v56 = 26;
  long long v57 = &v55;
  long long v51 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v51[4] = sub_1003EB368;
  v51[5] = 0;
  long long v55 = "kCBMsgIdDeviceGetUserSelectedDeviceTypeMsg";
  uint64_t v56 = 42;
  long long v57 = &v55;
  long long v52 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v52[4] = sub_1003EB454;
  v52[5] = 0;
  long long v55 = "kCBMsgIdDeviceSetUserSelectedDeviceTypeMsg";
  uint64_t v56 = 42;
  long long v57 = &v55;
  long long v53 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  v53[4] = sub_1003EB540;
  v53[5] = 0;
  long long v55 = "kCBMsgIdDeviceIsGenuineAirPodsMsg";
  uint64_t v56 = 33;
  long long v57 = &v55;
  long long v54 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v55, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v57);
  uint8_t v54[4] = sub_1003EB62C;
  v54[5] = 0;
}

void sub_1003E79A8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  size_t length = 0;
  int data = (int *)xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgAddressStringBuffSize");
  if (length != 6 || uint64 == 0)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
      sub_100760060();
    }
    xpc_object_t reply = xpc_dictionary_create_reply(xdict);
    if (reply)
    {
      int v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", 3uLL);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
      xpc_release(v10);
    }
  }
  else
  {
    if (uint64 >= 0x200) {
      size_t v11 = 512;
    }
    else {
      size_t v11 = uint64;
    }
    __chkstk_darwin(uint64, v7);
    uint64_t v13 = (char *)&length - v12;
    bzero((char *)&length - v12, v11);
    *uint64_t v13 = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
      sub_100760094();
    }
    int v14 = sub_100465D1C(data, v13, v11);
    xpc_object_t v15 = xpc_dictionary_create_reply(xdict);
    if (v15)
    {
      uint64_t v16 = v15;
      xpc_dictionary_set_uint64(v15, "kCBMsgArgResult", v14);
      xpc_dictionary_set_string(v16, "kCBMsgArgAddressString", v13);
      xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v16);
      xpc_release(v16);
    }
  }
}

void sub_1003E7B9C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  string = (unsigned __int8 *)xpc_dictionary_get_string(value, "kCBMsgArgAddressString");
  __int16 v10 = 0;
  int bytes = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_1007600D4();
  }
  int v6 = sub_100465DF0(string, (uint64_t)&bytes);
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    size_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_data(v8, "kCBMsgArgAddressBytes", &bytes, 6uLL);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E7C84(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  size_t length = 0;
  int data = (int *)xpc_dictionary_get_data(v4, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    int v6 = data;
    uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
    uint64_t value = 0;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_10076013C();
      if (uint64) {
        goto LABEL_4;
      }
    }
    else if (uint64)
    {
LABEL_4:
      uint64_t v8 = (int)sub_100465E4C(uint64, v6, &value);
LABEL_11:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      __int16 v10 = reply;
      xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
      uint64_t v12 = value;
      size_t v11 = "kCBMsgArgBTDevice";
      xpc_object_t v9 = v10;
      goto LABEL_13;
    }
    uint64_t v8 = 1;
    goto LABEL_11;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
    sub_1007601A4();
  }
  xpc_object_t v9 = xpc_dictionary_create_reply(xdict);
  if (v9)
  {
    __int16 v10 = v9;
    size_t v11 = "kCBMsgArgResult";
    uint64_t v12 = 8;
LABEL_13:
    xpc_dictionary_set_uint64(v9, v11, v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003E7DF0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgSessionID");
  uuid = xpc_dictionary_get_uuid(v4, "kCBMsgArgUUID");
  uint64_t value = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007601D8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100465F64(uint64, (uint64_t)uuid, &value);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBTDevice", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003E7F00(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760240();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v8 = 1;
    goto LABEL_9;
  }
  if (!uint64) {
    goto LABEL_8;
  }
LABEL_3:
  if (v6 >= 0x200) {
    size_t v7 = 512;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = (int)sub_1004660B0(uint64, (char *)v11, v7);
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int16 v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgAddressString", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003E8064(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007602A8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004662F4(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDeviceType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E8150(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760310();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004664A0(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgDeviceClass", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E823C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760378();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v8 = 1;
    goto LABEL_9;
  }
  if (!uint64) {
    goto LABEL_8;
  }
LABEL_3:
  if (v6 >= 0x100) {
    size_t v7 = 256;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = (int)sub_10046658C(uint64, (char *)v11, v7);
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int16 v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgName", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003E83A0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007603E0();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v8 = 1;
    goto LABEL_9;
  }
  if (!uint64) {
    goto LABEL_8;
  }
LABEL_3:
  if (v6 >= 0x100) {
    size_t v7 = 256;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = (int)sub_1004667B8(uint64, (char *)v11, v7);
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int16 v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgName", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003E8504(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  memset(v11, 0, sizeof(v11));
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760448();
    if (uint64) {
      goto LABEL_3;
    }
LABEL_8:
    uint64_t v8 = 1;
    goto LABEL_9;
  }
  if (!uint64) {
    goto LABEL_8;
  }
LABEL_3:
  if (v6 >= 0x100) {
    size_t v7 = 256;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = (int)sub_100466A4C(uint64, (char *)v11, v7);
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    __int16 v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgName", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003E8668(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = (char *)xpc_dictionary_get_string(value, "kCBMsgArgName");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007604B0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100466CE0(uint64, string);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003E8754(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760518();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100466E68(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgSyncSettings", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E8840(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  unsigned int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgSyncSettings");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760580();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100466F40(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    xpc_object_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003E892C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgGrouIdArraySize");
  __chkstk_darwin(v6, 4 * v6);
  uint64_t v8 = (char *)&v15 - v7;
  bzero((char *)&v15 - v7, v9);
  uint64_t v15 = v6;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007605E8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v10 = (int)sub_100467010(uint64, (uint64_t)v8, &v15);
    goto LABEL_6;
  }
  uint64_t v15 = 0;
  uint64_t v10 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v12 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v10);
    xpc_object_t v13 = xpc_array_create(0, 0);
    if (v15)
    {
      for (uint64_t i = 0; i < v15; ++i)
        xpc_array_set_uint64(v13, 0xFFFFFFFFFFFFFFFFLL, *(int *)&v8[4 * i]);
    }
    xpc_dictionary_set_value(v12, "kCBMsgArgGrouIdArray", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v13);
    xpc_release(v12);
  }
}

void sub_1003E8AE8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgGrouId");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760650();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_1004670E0(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003E8BEC(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007606B8();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004672AC(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E8CD8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760720();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100467430(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E8DC4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760788();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004674A0(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E8EB0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007607F0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100467558(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgConnected", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E8F9C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760858();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004675D4(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E9088(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007608C0();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004676C4(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E9174(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760928();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004677B4(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

uint64_t sub_1003E9260(uint64_t a1, void *a2)
{
  v19[0] = 0;
  v19[1] = 0;
  sub_10003AED0((uint64_t)v19, a1 + 8);
  xpc_object_t value = xpc_dictionary_get_value(a2, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (!os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    if (uint64) {
      goto LABEL_3;
    }
LABEL_16:
    int v14 = 1;
    goto LABEL_17;
  }
  sub_100760990();
  if (!uint64) {
    goto LABEL_16;
  }
LABEL_3:
  uint64_t v8 = *(void **)(a1 + 80);
  if (v8 != (void *)(a1 + 88))
  {
    do
    {
      uint64_t v9 = v8[4];
      if (*(void *)(v9 + 8) == v6 && *(void *)(v9 + 16) == uint64) {
        goto LABEL_16;
      }
      uint64_t v10 = (void *)v8[1];
      if (v10)
      {
        do
        {
          size_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          size_t v11 = (void *)v8[2];
          BOOL v12 = *v11 == (void)v8;
          uint64_t v8 = v11;
        }
        while (!v12);
      }
      uint64_t v8 = v11;
    }
    while (v11 != (void *)(a1 + 88));
  }
  xpc_object_t v13 = (uint64_t *)malloc_type_calloc(1uLL, 0x20uLL, 0x10A00407049A3A3uLL);
  uint64_t v18 = v13;
  v13[1] = v6;
  v13[2] = uint64;
  *xpc_object_t v13 = (uint64_t)sub_1003E6B90;
  void v13[3] = *(void *)(a1 + 72);
  sub_100051620((uint64_t **)(a1 + 80), (unint64_t *)&v18, (uint64_t *)&v18);
  if (*(unsigned char *)(a1 + 104))
  {
    int v14 = 0;
  }
  else
  {
    int v14 = sub_10046782C(uint64, *v18, v7, a1);
    *(unsigned char *)(a1 + 104) = 1;
  }
LABEL_17:
  xpc_object_t reply = xpc_dictionary_create_reply(a2);
  uint64_t v16 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v14);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v16);
    xpc_release(v16);
  }
  return sub_10003AFB4((uint64_t)v19);
}

void sub_1003E9460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003E9488(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgSessionID");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgID");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100760A54();
  }
  v17[0] = 0;
  v17[1] = 0;
  sub_10003AED0((uint64_t)v17, a1 + 8);
  if (uint64)
  {
    int v7 = *(void **)(a1 + 80);
    if (v7 == (void *)(a1 + 88))
    {
LABEL_13:
      if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_ERROR)) {
        sub_100760A14();
      }
      int v12 = 3;
    }
    else
    {
      while (1)
      {
        uint64_t v8 = (uint64_t *)v7[4];
        if (v8[1] == v6 && v8[2] == uint64) {
          break;
        }
        uint64_t v9 = (void *)v7[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v7[2];
            BOOL v11 = *v10 == (void)v7;
            int v7 = v10;
          }
          while (!v11);
        }
        int v7 = v10;
        if (v10 == (void *)(a1 + 88)) {
          goto LABEL_13;
        }
      }
      uint64_t v16 = (void *)v7[4];
      if (*(unsigned char *)(a1 + 104))
      {
        int v12 = sub_1004678B0(uint64, *v8);
        *(unsigned char *)(a1 + 104) = 0;
      }
      else
      {
        int v12 = 0;
      }
      sub_1000517A4(a1 + 80, (unint64_t *)&v16);
      free(v16);
    }
  }
  else
  {
    int v12 = 1;
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  int v14 = reply;
  if (reply)
  {
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
  return sub_10003AFB4((uint64_t)v17);
}

void sub_1003E9654(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003E966C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760ABC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046791C(uint64, -1);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E9738(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServices");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760B24();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_10046791C(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003E9824(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServices");
  int data = (long long *)xpc_dictionary_get_data(value, "kCBMsgArgKey", 0);
  int v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgConnectionMode");
  long long v12 = 0uLL;
  if (data) {
    long long v12 = *data;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760B8C();
    if (uint64) {
      goto LABEL_5;
    }
  }
  else if (uint64)
  {
LABEL_5:
    uint64_t v9 = (int)sub_100467D6C(uint64, v6, v8, &v12);
    goto LABEL_8;
  }
  uint64_t v9 = 1;
LABEL_8:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    BOOL v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1003E9988(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760BF4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100468AC8(uint64, -1);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E9A54(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760C5C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100468AC8(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003E9B40(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760CC4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100468DB0(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgServiceMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E9C2C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760D2C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100468F18(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgServiceMask", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003E9D18(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(value, "kCBMsgArgKey");
  uint64_t v7 = xpc_dictionary_get_string(value, "kCBMsgArgValue");
  int v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760D94();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v9 = (int)sub_10046907C(uint64, v8, (uint64_t)string, (uint64_t)v7);
    goto LABEL_6;
  }
  uint64_t v9 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    BOOL v11 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v11);
    xpc_release(v11);
  }
}

void sub_1003E9E3C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  string = xpc_dictionary_get_string(value, "kCBMsgArgKey");
  memset(v11, 0, sizeof(v11));
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceMask");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760DFC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_100469170(uint64, v7, (uint64_t)string, (uint64_t)v11);
    goto LABEL_6;
  }
  uint64_t v8 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_dictionary_set_string(v10, "kCBMsgArgValue", (const char *)v11);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003E9FB8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  xpc_dictionary_get_uint64(value, "kCBMsgArgType");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760E64();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100469264(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EA0A4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760ECC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100467430(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EA190(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200) {
    size_t v7 = 512;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceID");
  int v9 = v8;
  __chkstk_darwin(v8, v10);
  long long v12 = (char *)&v16 - v11;
  bzero((char *)&v16 - v11, v7);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760F34();
    if (uint64) {
      goto LABEL_6;
    }
  }
  else if (uint64)
  {
LABEL_6:
    int v13 = sub_1004692D4(uint64, v9, v12, v7);
    goto LABEL_9;
  }
  int v13 = 1;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v15 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    if (!v13) {
      xpc_dictionary_set_data(v15, "kCBMsgArgData", v12, v7);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v15);
    xpc_release(v15);
  }
}

void sub_1003EA32C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = (char *)xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200) {
    size_t v7 = 512;
  }
  else {
    size_t v7 = v6;
  }
  uint64_t v8 = xpc_dictionary_get_uint64(value, "kCBMsgArgServiceID");
  int v9 = v8;
  long long v16 = 0u;
  memset(v15, 0, sizeof(v15));
  __chkstk_darwin(v8, v10);
  long long v12 = (char *)v15 - v11;
  bzero((char *)v15 - v11, v7);
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100760F9C();
    if (uint64) {
      goto LABEL_6;
    }
LABEL_10:
    LODWORD(uint64) = 1;
    goto LABEL_11;
  }
  if (!uint64) {
    goto LABEL_10;
  }
LABEL_6:
  LODWORD(uint64) = sub_1004692D4((unint64_t)uint64, v9, v12, v7);
  if (!uint64)
  {
    uunsigned __int8 int64 = (char *)sandbox_extension_issue_file();
    if (uint64)
    {
      strlcpy((char *)v15, uint64, 0x200uLL);
      HIBYTE(v16) = 0;
      free(uint64);
      LODWORD(uint64) = 0;
    }
  }
LABEL_11:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", (int)uint64);
    if (!uint64)
    {
      xpc_dictionary_set_data(v14, "kCBMsgArgData", v12, v7);
      xpc_dictionary_set_data(v14, "kCBMsgArgExtensionToken", v15, 0x200uLL);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1003EA578(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  *(void *)&value[1] = 0;
  int data = (void *)xpc_dictionary_get_data(v4, "kCBMsgArgKey", (size_t *)&value[1]);
  value[0] = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100761004();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_1004693C8(uint64, data, *(size_t *)&value[1], value);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgBool", value[0]);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003EA694(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBufferSize");
  if (v6 >= 0x200) {
    size_t v7 = 512;
  }
  else {
    size_t v7 = v6;
  }
  size_t length = 0;
  int data = (void *)xpc_dictionary_get_data(value, "kCBMsgArgKey", &length);
  __chkstk_darwin(data, v9);
  uint64_t v11 = (char *)&v15 - v10;
  bzero((char *)&v15 - v10, v7);
  size_t v16 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10076106C();
    if (uint64) {
      goto LABEL_6;
    }
  }
  else if (uint64)
  {
LABEL_6:
    int v12 = sub_10046945C(uint64, data, length, (uint64_t)v11, &v16, v7);
    goto LABEL_9;
  }
  int v12 = 1;
LABEL_9:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v14 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v12);
    if (!v12) {
      xpc_dictionary_set_data(v14, "kCBMsgArgData", v11, v16);
    }
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v14);
    xpc_release(v14);
  }
}

void sub_1003EA84C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  uint64_t v9 = 0;
  uint64_t value = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007610D4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100469514(uint64, (_DWORD *)&value + 1, &value, (_DWORD *)&v9 + 1, &v9);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVendorIdSource", HIDWORD(value));
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVendorId", value);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgProductId", HIDWORD(v9));
    xpc_dictionary_set_uint64(v8, "kCBMsgArgVersionId", v9);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EA980(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgAuthStatus");
  unsigned __int8 v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgHIDType");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10076113C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_100469634(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003EAA84(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007611A4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100468718(uint64);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EAB4C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (v6) {
    int data = xpc_dictionary_get_data(value, "kCBMsgArgKey", 0);
  }
  else {
    int data = 0;
  }
  size_t length = 0;
  uint64_t v8 = (int *)xpc_dictionary_get_data(value, "kCBMsgArgAddressBytes", &length);
  if (length == 6)
  {
    uint64_t v9 = v8;
    if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
    {
      sub_10076120C();
      if (uint64) {
        goto LABEL_7;
      }
    }
    else if (uint64)
    {
LABEL_7:
      uint64_t v10 = (int)sub_100469704(uint64, v9, (uint64_t)data, v6);
LABEL_14:
      xpc_object_t reply = xpc_dictionary_create_reply(xdict);
      if (!reply) {
        return;
      }
      int v12 = reply;
      uint64_t v13 = v10;
      goto LABEL_16;
    }
    uint64_t v10 = 1;
    goto LABEL_14;
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_FAULT)) {
    sub_1007601A4();
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    int v12 = reply;
    uint64_t v13 = 8;
LABEL_16:
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v13);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v12);
    xpc_release(v12);
  }
}

void sub_1003EACD8(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100761274();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_1004698A4(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgPaired", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EADC4(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007612DC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100469948(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EAEB0(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100761344();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100469A38(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EAF9C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007613AC();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100469ADC(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgLowSecurityStatus", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EB088(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 2;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100761414();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100469B54(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMSgArgHIDDeviceBehavior", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EB178(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10076147C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100469BCC(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003EB264(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  uint64_t v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgRequesterID");
  int v7 = xpc_dictionary_get_uint64(value, "kCBMsgArgBool");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007614E4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v8 = (int)sub_100469CB4(uint64, v6, v7);
    goto LABEL_6;
  }
  uint64_t v8 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v10 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v8);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v10);
    xpc_release(v10);
  }
}

void sub_1003EB368(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10076154C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100469E1C(uint64, (int *)&value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBool", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EB454(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_1007615B4();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_100469E98(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v8 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v8, "kCBMsgArgBTDeviceType", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v8);
    xpc_release(v8);
  }
}

void sub_1003EB540(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t value = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDevice");
  int v6 = xpc_dictionary_get_uint64(value, "kCBMsgArgBTDeviceType");
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_10076161C();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v7 = (int)sub_100469F78(uint64, v6);
    goto LABEL_6;
  }
  uint64_t v7 = 1;
LABEL_6:
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v7);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void sub_1003EB62C(uint64_t a1, xpc_object_t xdict)
{
  xpc_object_t v4 = xpc_dictionary_get_value(xdict, "kCBMsgArgs");
  uunsigned __int8 int64 = xpc_dictionary_get_uint64(v4, "kCBMsgArgBTDevice");
  LODWORD(value) = -1;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG))
  {
    sub_100761734();
    if (uint64) {
      goto LABEL_3;
    }
  }
  else if (uint64)
  {
LABEL_3:
    uint64_t v6 = (int)sub_10046A1D8(uint64, &value);
    goto LABEL_6;
  }
  uint64_t v6 = 1;
LABEL_6:
  uint64_t v7 = qword_100A19EC8;
  if (os_log_type_enabled((os_log_t)qword_100A19EC8, OS_LOG_TYPE_DEBUG)) {
    sub_100761684((int *)&value, uint64, v7);
  }
  xpc_object_t reply = xpc_dictionary_create_reply(xdict);
  if (reply)
  {
    uint64_t v9 = reply;
    xpc_dictionary_set_uint64(reply, "kCBMsgArgResult", v6);
    xpc_dictionary_set_uint64(v9, "kCBMsgArgGenuine", value);
    xpc_connection_send_message(*(xpc_connection_t *)(*(void *)(a1 + 72) + 16), v9);
    xpc_release(v9);
  }
}

void *sub_1003EB750(void *a1)
{
  uint64_t v2 = (uint64_t)(a1 + 10);
  CFDataRef v3 = (void *)a1[10];
  xpc_object_t v4 = a1 + 11;
  if (v3 != a1 + 11)
  {
    do
    {
      free((void *)v3[4]);
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          CFDataRef v3 = v6;
        }
        while (!v7);
      }
      CFDataRef v3 = v6;
    }
    while (v6 != v4);
  }
  sub_1000486F0(v2, (void *)a1[11]);
  a1[11] = 0;
  a1[12] = 0;
  a1[10] = v4;
  sub_1000486F0(v2, 0);
  *a1 = &off_1009AB480;
  sub_100052DA4(a1 + 1);
  return a1;
}

void sub_1003EB818(void *a1)
{
  sub_1003EB750(a1);

  operator delete();
}

BOOL sub_1003EB850(uint64_t a1, xpc_object_t xdict)
{
  string = xpc_dictionary_get_string(xdict, "kCBMsgId");
  uint64_t v11 = string;
  size_t v12 = strlen(string);
  uint64_t v5 = sub_1003C2560(&xmmword_100A19AF8, (uint64_t)&v11);
  if (v5)
  {
    uint64_t v11 = string;
    size_t v12 = strlen(string);
    uint64_t v13 = &v11;
    uint64_t v6 = sub_1003EBA34((uint64_t)&xmmword_100A19AF8, (uint64_t)&v11, (uint64_t)&unk_1007BE9D0, (_OWORD **)&v13);
    BOOL v7 = (void (*)(void *, xpc_object_t))v6[4];
    uint64_t v8 = v6[5];
    uint64_t v9 = (void *)(a1 + (v8 >> 1));
    if (v8) {
      BOOL v7 = *(void (**)(void *, xpc_object_t))(*v9 + v7);
    }
    v7(v9, xdict);
  }
  return v5 != 0;
}

uint64_t sub_1003EB94C(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  sub_10003AED0((uint64_t)v9, a1 + 8);
  uint64_t v2 = *(void **)(a1 + 80);
  CFDataRef v3 = (void *)(a1 + 88);
  if (v2 != (void *)(a1 + 88))
  {
    do
    {
      xpc_object_t v4 = (uint64_t *)v2[4];
      if (*(unsigned char *)(a1 + 104))
      {
        sub_1004678B0(v4[2], *v4);
        *(unsigned char *)(a1 + 104) = 0;
      }
      free(v4);
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
  sub_1000486F0(a1 + 80, *(void **)(a1 + 88));
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 80) = v3;
  return sub_10003AFB4((uint64_t)v9);
}

void sub_1003EBA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_1003EBA34(uint64_t a1, uint64_t a2, uint64_t a3, _OWORD **a4)
{
  unint64_t v7 = sub_1003C208C((uint64_t)&v29, *(uint64_t **)a2, *(void *)(a2 + 8));
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(void ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      int v14 = *v13;
      if (*v13)
      {
        uint64_t v17 = a2;
        uint64_t v15 = *(uint64_t **)a2;
        size_t v16 = *(void *)(v17 + 8);
        do
        {
          unint64_t v18 = *((void *)v14 + 1);
          if (v18 == v8)
          {
            if (*((void *)v14 + 3) == v16 && !memcmp(*((const void **)v14 + 2), v15, v16)) {
              return v14;
            }
          }
          else
          {
            if (v11 > 1)
            {
              if (v18 >= v9) {
                v18 %= v9;
              }
            }
            else
            {
              v18 &= v9 - 1;
            }
            if (v18 != v12) {
              break;
            }
          }
          int v14 = *(void **)v14;
        }
        while (v14);
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  int v14 = operator new(0x30uLL);
  *(void *)int v14 = 0;
  *((void *)v14 + 1) = v8;
  *((_OWORD *)v14 + 1) = **a4;
  *((void *)v14 + 4) = 0;
  *((void *)v14 + 5) = 0;
  float v19 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v20 = *(float *)(a1 + 32);
  if (!v9 || (float)(v20 * (float)v9) < v19)
  {
    BOOL v21 = 1;
    if (v9 >= 3) {
      BOOL v21 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v22 = v21 | (2 * v9);
    unint64_t v23 = vcvtps_u32_f32(v19 / v20);
    if (v22 <= v23) {
      size_t v24 = v23;
    }
    else {
      size_t v24 = v22;
    }
    sub_1000A9204(a1, v24);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  uint64_t v25 = *(void *)a1;
  unsigned int v26 = *(void **)(*(void *)a1 + 8 * v12);
  if (v26)
  {
    *(void *)int v14 = *v26;
LABEL_40:
    *unsigned int v26 = v14;
    goto LABEL_41;
  }
  *(void *)int v14 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v14;
  *(void *)(v25 + 8 * v12) = a1 + 16;
  if (*(void *)v14)
  {
    unint64_t v27 = *(void *)(*(void *)v14 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v27 >= v9) {
        v27 %= v9;
      }
    }
    else
    {
      v27 &= v9 - 1;
    }
    unsigned int v26 = (void *)(*(void *)a1 + 8 * v27);
    goto LABEL_40;
  }
LABEL_41:
  ++*(void *)(a1 + 24);
  return v14;
}

void sub_1003EBC8C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1003EBCA0()
{
  xmmword_100A19AF8 = 0u;
  unk_100A19B08 = 0u;
  dword_100A19B18 = 1065353216;
  __cxa_atexit((void (*)(void *))sub_1003E68F8, &xmmword_100A19AF8, (void *)&_mh_execute_header);
}

uint64_t sub_1003EBD0C(uint64_t a1)
{
  *(void *)a1 = off_1009AC870;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  sub_100052DA8(a1 + 64);
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 424) = 0;
  *(unsigned char *)(a1 + 448) = 0;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AC928);
  }
  sub_10026B36C((uint64_t)off_1009F8068 + 64, a1);
  uint64_t v2 = objc_opt_new();
  CFDataRef v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v2;

  [*(id *)(a1 + 8) setFormatOptions:1907];
  uint64_t v4 = sub_1004AF8EC();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_1003EBEDC;
  v8[3] = &unk_100997528;
  void v8[4] = a1;
  sub_100013018(v4, v8);
  uint64_t v5 = objc_opt_new();
  uint64_t v6 = *(void **)(a1 + 424);
  *(void *)(a1 + 424) = v5;

  *(void *)(a1 + 136) = 0;
  *(void *)(a1 + 142) = 0;
  *(_WORD *)(a1 + 139) = 1023;
  *(unsigned char *)(a1 + 141) = 8;
  *(_DWORD *)(a1 + 142) = 100000;
  *(_DWORD *)(a1 + 433) = 33619967;
  *(unsigned char *)(a1 + 437) = 2;
  *(double *)(a1 + 440) = sub_1003EC310();
  sub_1003EC468(a1);
  return a1;
}

void sub_1003EBE98(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 48) = v4;
    operator delete(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1003EBEE0()
{
  unsigned int v0 = +[NSFileManager defaultManager];
  id v27 = 0;
  uint64_t v1 = [v0 contentsOfDirectoryAtPath:@"/private/var/mobile/Library/Logs/Bluetooth/" error:&v27];
  id v2 = v27;
  unint64_t v18 = v1;
  float v19 = v2;
  if (v1) {
    BOOL v3 = v2 == 0;
  }
  else {
    BOOL v3 = 0;
  }
  if (v3)
  {
    long long v25 = 0u;
    long long v26 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    obSCNetworkInterfaceRef j = v1;
    id v4 = [obj countByEnumeratingWithState:&v23 objects:v36 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v24;
      do
      {
        uint64_t v6 = 0;
        do
        {
          if (*(void *)v24 != v5) {
            objc_enumerationMutation(obj);
          }
          unint64_t v7 = *(void **)(*((void *)&v23 + 1) + 8 * (void)v6);
          if (([v7 hasPrefix:@"Accessory"] & 1) != 0
            || ([v7 hasPrefix:@"bluetoothd-Accessory"] & 1) != 0)
          {
            unint64_t v8 = +[NSString stringWithFormat:@"%@%@", @"/private/var/mobile/Library/Logs/Bluetooth/", v7, v18];
            id v22 = 0;
            unint64_t v9 = [v0 attributesOfItemAtPath:v8 error:&v22];
            id v10 = v22;
            unint64_t v11 = [v9 objectForKey:NSFileCreationDate];
            [v11 timeIntervalSinceNow];
            double v13 = v12;

            if (v10)
            {
              int v14 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)long long buf = 141558531;
                uint64_t v29 = 1752392040;
                __int16 v30 = 2113;
                __int16 v31 = v8;
                __int16 v32 = 2114;
                double v33 = *(double *)&v10;
                _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "deleteOldLogFiles: Can't get path attributes for %{private, mask.hash}@, error %{public}@", buf, 0x20u);
              }
            }
            else if (v13 >= -15552000.0 {
                   && (v13 >= -604800.0
            }
                    || (uint64_t v16 = sub_100017768(),
                        ((*(uint64_t (**)(uint64_t))(*(void *)v16 + 8))(v16) & 1) != 0)))
            {
              id v10 = 0;
            }
            else
            {
              id v21 = 0;
              [v0 removeItemAtPath:v8 error:&v21];
              id v10 = v21;
              uint64_t v15 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 141558787;
                uint64_t v29 = 1752392040;
                __int16 v30 = 2113;
                __int16 v31 = v8;
                __int16 v32 = 2048;
                double v33 = v13;
                __int16 v34 = 2114;
                id v35 = v10;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "deleteOldLogFiles: Deleting old log file: %{private, mask.hash}@, fileAge %f, error %{public}@", buf, 0x2Au);
              }
            }
          }
          uint64_t v6 = (char *)v6 + 1;
        }
        while (v4 != v6);
        id v17 = [obj countByEnumeratingWithState:&v23 objects:v36 count:16];
        id v4 = v17;
      }
      while (v17);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_10076179C();
  }
}

void sub_1003EC2A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18)
{
  _Unwind_Resume(a1);
}

double sub_1003EC310()
{
  uint64_t v0 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v0 + 8))(v0)) {
    double v1 = 1.0;
  }
  else {
    double v1 = 0.1;
  }
  keyExistsAndHasValidCFStringRef Format = 0;
  AppIntegerCFStringRef Value = CFPreferencesGetAppIntegerValue(@"com.apple.bluetooth.accessory.CrashAnalyticsSamplingRate", @"com.apple.da", &keyExistsAndHasValidFormat);
  if (keyExistsAndHasValidFormat)
  {
    uint64_t v3 = AppIntegerValue;
    if ((unint64_t)AppIntegerValue > 0x64)
    {
      id v4 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100761808(v3, v4, v5, v6, v7, v8, v9, v10);
      }
    }
    else
    {
      double v1 = (double)AppIntegerValue / 100.0;
    }
  }
  unint64_t v11 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    double v15 = v1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "getCrashAnalyticsSamplingRate: Returning %f", buf, 0xCu);
  }
  return v1;
}

double sub_1003EC468(uint64_t a1)
{
  uint64_t v1 = a1;
  *(unsigned char *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 31) = 0;
  [*(id *)(a1 + 128) invalidate];
  id v2 = *(void **)(v1 + 128);
  *(void *)(v1 + 128) = 0;

  [*(id *)(v1 + 424) removeAllObjects];
  double result = 0.0;
  *(_OWORD *)(v1 + 150) = 0u;
  v1 += 150;
  *(unsigned char *)(v1 + 282) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(_OWORD *)(v1 + 48) = 0u;
  *(_OWORD *)(v1 + 64) = 0u;
  *(_OWORD *)(v1 + 80) = 0u;
  *(_OWORD *)(v1 + 96) = 0u;
  *(_OWORD *)(v1 + 112) = 0u;
  *(_OWORD *)(v1 + 128) = 0u;
  *(_OWORD *)(v1 + 144) = 0u;
  *(_OWORD *)(v1 + 160) = 0u;
  *(_OWORD *)(v1 + 176) = 0u;
  *(_OWORD *)(v1 + 192) = 0u;
  *(_OWORD *)(v1 + 208) = 0u;
  *(_OWORD *)(v1 + 224) = 0u;
  *(_OWORD *)(v1 + 240) = 0u;
  *(unsigned char *)(v1 + 256) = 0;
  *(_WORD *)(v1 + 257) = 1;
  *(_WORD *)(v1 + 265) = 768;
  *(_DWORD *)(v1 + 268) = 0;
  *(unsigned char *)(v1 + 272) = 1;
  return result;
}

uint64_t sub_1003EC504(uint64_t a1)
{
  *(void *)a1 = off_1009AC870;
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AC928);
  }
  sub_100052718((uint64_t)off_1009F8068 + 64, a1);

  sub_100052DA4(a1 + 64);
  id v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }

  return a1;
}

void sub_1003EC5B0(_Unwind_Exception *a1)
{
  sub_100052DA4(v1 + 64);
  uint64_t v3 = *(void **)(v1 + 40);
  if (v3)
  {
    *(void *)(v1 + 48) = v3;
    operator delete(v3);
  }

  _Unwind_Resume(a1);
}

void sub_1003EC5F0(uint64_t a1)
{
  sub_1003EC504(a1);

  operator delete();
}

uint64_t sub_1003EC628(uint64_t result)
{
  *(unsigned char *)(result + 448) = 1;
  return result;
}

uint64_t sub_1003EC634(uint64_t result)
{
  *(unsigned char *)(result + 448) = 0;
  return result;
}

void sub_1003EC63C(uint64_t a1, uint64_t a2, int a3)
{
  if (*(unsigned char *)(a1 + 448))
  {
    if (a2)
    {
      v58[0] = 0;
      v58[1] = 0;
      sub_10003AED0((uint64_t)v58, a1 + 64);
      uint64_t v6 = a2 + 128;
      uint64_t v7 = sub_1003ED128(a1, a2 + 128);
      if (!v7) {
        operator new();
      }
      uint64_t v8 = v7;
      uint64_t v9 = qword_100A19E40;
      if (*(unsigned char *)(v7 + 40) == 3)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          id v10 = *(id *)(v8 + 8);
          *(_DWORD *)long long buf = 138543362;
          *(void *)&uint8_t buf[4] = v10;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "initializeAccessoryLoggingSession: Disconnected device %{public}@ reconnected", buf, 0xCu);
        }
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
      {
        sub_100761B40(v8);
      }
      sub_1003ED168(a1, a2 + 128);
      uint64_t v11 = sub_1004AF8EC();
      v57[0] = _NSConcreteStackBlock;
      v57[1] = 3221225472;
      v57[2] = sub_1003ED434;
      void v57[3] = &unk_100997528;
      v57[4] = a1;
      sub_100013018(v11, v57);
      if (((a3 - 8194) > 0xE || ((1 << (a3 - 2)) & 0x409B) == 0)
        && !sub_100480504(a2)
        && !*(unsigned char *)(a2 + 960))
      {
        uint64_t v44 = sub_100035F54();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v44 + 328))(v44) & 1) != 0
          || (uint64_t v45 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v45 + 384))(v45) & 1) != 0)
          || (uint64_t v46 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v46 + 424))(v46)))
        {
          if (sub_1003ED438()) {
            int v47 = 8;
          }
          else {
            int v47 = 9;
          }
          sub_1003ED54C(a1, a2 + 128, v47, 2u);
        }
      }
      uint64_t v12 = sub_100035F54();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 328))(v12))
      {
        if ((a3 - 8194) <= 0xE && ((1 << (a3 - 2)) & 0x409B) != 0)
        {
          uint64_t v13 = sub_100017768();
          if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 8))(v13))
          {
            int v14 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "initializeAccessoryLoggingSession: Invoking W1 iOS-internal initialization steps", buf, 2u);
              int v14 = qword_100A19E40;
            }
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
            {
              int v15 = *(unsigned __int8 *)(a1 + 136);
              int v16 = *(unsigned __int8 *)(a1 + 137);
              int v17 = *(unsigned __int16 *)(a1 + 139);
              int v18 = *(unsigned __int8 *)(a1 + 141);
              int v19 = *(_DWORD *)(a1 + 142);
              int v20 = *(_DWORD *)(a1 + 146);
              int v21 = *(unsigned __int8 *)(a1 + 138);
              *(_DWORD *)long long buf = 67110656;
              *(_DWORD *)&uint8_t buf[4] = v15;
              *(_WORD *)&uint8_t buf[8] = 1024;
              *(_DWORD *)&buf[10] = v16;
              *(_WORD *)uint64_t v61 = 1024;
              *(_DWORD *)&v61[2] = v17;
              *(_WORD *)unint64_t v62 = 1024;
              *(_DWORD *)&v62[2] = v18;
              __int16 v63 = 1024;
              int v64 = v19;
              __int16 v65 = 1024;
              int v66 = v20;
              __int16 v67 = 1024;
              int v68 = v21;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "initializeAccessoryLoggingSession: isTimeStampPeriodicallyEnabled = %d, isDisableDiagnosticsPeriodicallyEnabled = %d, module = %d, level = %d, log_interval = %d, power_logging_interval = %d, isCrashLoggingDisabled = %d", buf, 0x2Cu);
            }
            if (*(unsigned char *)(a1 + 137))
            {
              id v22 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
              {
                id v23 = *(id *)(v8 + 8);
                *(_DWORD *)long long buf = 138543874;
                *(void *)&uint8_t buf[4] = v23;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)uint64_t v61 = 1;
                *(_WORD *)&v61[4] = 1024;
                *(_DWORD *)unint64_t v62 = 3000;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Send Diagnostics Request Periodically to %{public}@, type = %d, interval = %d", buf, 0x18u);
              }
              buf[0] = 0;
              sub_10001B8E0(buf);
              int v24 = sub_1000D7BB8((unsigned __int8 *)(a2 + 128), 1, 3000);
              sub_10001B910(buf);
              if (v24 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
                sub_100761AB8();
              }
              sub_10001B8AC(buf);
            }
            if (*(unsigned char *)(a1 + 136))
            {
              long long v25 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
              {
                id v26 = *(id *)(v8 + 8);
                *(_DWORD *)long long buf = 138543874;
                *(void *)&uint8_t buf[4] = v26;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)uint64_t v61 = 0;
                *(_WORD *)&v61[4] = 1024;
                *(_DWORD *)unint64_t v62 = 100;
                _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Send TimeStamp Request Periodically to %{public}@, type = %d, interval = %d", buf, 0x18u);
              }
              buf[0] = 0;
              sub_10001B8E0(buf);
              int v27 = sub_1000D7BB8((unsigned __int8 *)(a2 + 128), 0, 100);
              sub_10001B910(buf);
              if (v27 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
                sub_100761A30();
              }
              sub_10001B8AC(buf);
            }
            if (*(_DWORD *)(a1 + 146))
            {
              unsigned int v28 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
              {
                id v29 = *(id *)(v8 + 8);
                int v30 = *(_DWORD *)(a1 + 146);
                *(_DWORD *)long long buf = 138543874;
                *(void *)&uint8_t buf[4] = v29;
                *(_WORD *)&unsigned char buf[12] = 1024;
                *(_DWORD *)uint64_t v61 = 2;
                *(_WORD *)&v61[4] = 1024;
                *(_DWORD *)unint64_t v62 = v30;
                _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "Send Power Logging Request Periodically to %{public}@, type = %d, interval = %d", buf, 0x18u);
              }
              *(unsigned char *)(v8 + 40) = 6;
              LOBYTE(dword_1009FB578) = 1;
              char v56 = 0;
              sub_10001B8E0(&v56);
              int v31 = sub_1000D88D4((unsigned __int8 *)(a2 + 128), 4u, 5u, (unsigned __int8 *)&dword_1009FB578);
              sub_10001B910(&v56);
              if (v31 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
                sub_1007619A8();
              }
              __int16 v32 = fopen(aPrivateVarMobi_13, "a");
              if (v32)
              {
                sub_100475EE0(a2, (uint64_t)buf);
                int v33 = v62[3];
                __int16 v34 = *(const char **)buf;
                long long v42 = (const char *)sub_10025B48C(v6, v35, v36, v37, v38, v39, v40, v41);
                long long v43 = buf;
                if (v33 < 0) {
                  long long v43 = v34;
                }
                fprintf(v32, "Power Logging - Device Name -> \"%s\", Bluetooth Addr -> \"%s\" \n", v43, v42);
                if ((v62[3] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                fclose(v32);
              }
              else
              {
                unint64_t v48 = qword_100A19E40;
                if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                {
                  long long v49 = __error();
                  sub_100761964(v49, (uint64_t)v59, v48);
                }
              }
              sub_10001B8AC(&v56);
            }
            if (!*(unsigned char *)(a1 + 138) && *(unsigned char *)(v8 + 40) != 6)
            {
              sub_1003EDE14(a1);
              long long v50 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
              {
                id v51 = *(id *)(v8 + 8);
                *(_DWORD *)long long buf = 138543362;
                *(void *)&uint8_t buf[4] = v51;
                _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "initializeAccessoryLoggingSession: Send request to %{public}@ for check crash log existence, Left Bud", buf, 0xCu);
              }
              *(_DWORD *)(a1 + 418) = 0x10000;
              *(unsigned char *)(v8 + 40) = 7;
              LOBYTE(dword_1009FB578) = 2;
              *(unsigned char *)(a1 + 416) = 2;
              buf[0] = 0;
              sub_10001B8E0(buf);
              int v52 = sub_1000D88D4((unsigned __int8 *)v6, 4u, 5u, (unsigned __int8 *)&dword_1009FB578);
              sub_10001B910(buf);
              dword_100A12C50 = dword_1009FB578;
              byte_100A12C54 = byte_1009FB57C;
              byte_100A12C59 = 5;
              __int16 v53 = *(_WORD *)(v6 + 4);
              *(_DWORD *)(a1 + 409) = *(_DWORD *)v6;
              *(_WORD *)(a1 + 413) = v53;
              *(unsigned char *)(a1 + 415) = 0;
              if (v52)
              {
                if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
                  sub_1007618DC();
                }
              }
              sub_10001B8AC(buf);
            }
            uint64_t v54 = sub_1004AF8EC();
            v55[0] = _NSConcreteStackBlock;
            v55[1] = 3221225472;
            void v55[2] = sub_1003EDE98;
            void v55[3] = &unk_100997528;
            v55[4] = a1;
            sub_1004AFF58(v54, 30000, v55);
          }
        }
      }
      sub_10003AFB4((uint64_t)v58);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      sub_1007618A8();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100761874();
  }
}

void sub_1003ED090(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

uint64_t sub_1003ED128(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    id v2 = *(uint64_t **)(a1 + 40);
    uint64_t v3 = *(uint64_t **)(a1 + 48);
    while (v2 != v3)
    {
      uint64_t result = *v2;
      if (*(_DWORD *)(*v2 + 16) == *(_DWORD *)a2 && *(unsigned __int16 *)(*v2 + 20) == *(unsigned __int16 *)(a2 + 4)) {
        return result;
      }
      ++v2;
    }
  }
  return 0;
}

uint64_t sub_1003ED168(uint64_t a1, uint64_t a2)
{
  unint64_t v32 = 0;
  uint64_t v33 = 0;
  __int16 v34 = 0;
  uint64_t v4 = sub_1003ED128(a1, a2);
  if (*(unsigned char *)(a1 + 448))
  {
    uint64_t v5 = v4;
    if (v4)
    {
      v35.__darwin_time_t tv_sec = 0;
      *(void *)&v35.__darwin_suseconds_t tv_usec = 0;
      gettimeofday(&v35, 0);
      uint64_t v6 = qword_100A19E40;
      BOOL v7 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
      __darwin_time_t tv_sec = v35.tv_sec;
      __darwin_suseconds_t tv_usec = v35.tv_usec;
      if (v7)
      {
        id v10 = *(id *)(v5 + 8);
        *(_DWORD *)long long buf = 134218498;
        __darwin_time_t v37 = tv_sec;
        __int16 v38 = 1024;
        __darwin_suseconds_t v39 = tv_usec;
        __int16 v40 = 2114;
        id v41 = v10;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "sendTimestamp: Sending UNIX Epoch Time (seconds %ld, useconds %u) to %{public}@", buf, 0x1Cu);
      }
      unint64_t v32 = __PAIR64__(tv_usec, tv_sec);
      int v19 = +[NSTimeZone localTimeZone];
      [*(id *)(a1 + 8) setTimeZone:v19];

      int v20 = *(void **)(a1 + 8);
      int v21 = +[NSDate dateWithTimeIntervalSince1970:(double)tv_sec];
      id v22 = [v20 stringFromDate:v21];
      id v23 = (const char *)[v22 UTF8String];

      __int16 v34 = v23;
      LOWORD(v33) = strlen(v23);
      if (qword_1009F7F00 != -1) {
        dispatch_once(&qword_1009F7F00, &stru_1009AC988);
      }
      *(_DWORD *)long long buf = *(_DWORD *)a2;
      LOWORD(v37) = *(_WORD *)(a2 + 4);
      uint64_t v24 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
      if (v24)
      {
        if (qword_1009F80A0 != -1) {
          dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
        }
        return sub_1002879DC((uint64_t)off_1009F8098, v24, (uint64_t)&v32);
      }
      else
      {
        long long v25 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_100761C7C(a2, v25, v26, v27, v28, v29, v30, v31);
        }
        return 1;
      }
    }
    else
    {
      uint64_t v12 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100761C04(a2, v12, v13, v14, v15, v16, v17, v18);
      }
      return 312;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100761BD0();
    }
    return 111;
  }
}

void sub_1003ED40C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003ED438()
{
  char v7 = 0;
  uint64_t v0 = sub_100017768();
  sub_10004191C(v5, "AccessoryLogging");
  sub_10004191C(__p, "APLogCollectionEnabled");
  (*(void (**)(uint64_t, void **, void **, char *))(*(void *)v0 + 72))(v0, v5, __p, &v7);
  if (v4 < 0) {
    operator delete(__p[0]);
  }
  if (v6 < 0) {
    operator delete(v5[0]);
  }
  uint64_t v1 = sub_100017768();
  LODWORD(result) = (*(uint64_t (**)(uint64_t))(*(void *)v1 + 264))(v1);
  if (v7) {
    return 1;
  }
  else {
    return result;
  }
}

void sub_1003ED518(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003ED54C(uint64_t a1, uint64_t a2, int a3, unsigned int a4)
{
  long long __p = 0;
  unsigned int v96 = 0;
  uint64_t v97 = 0;
  uint64_t v8 = sub_100017768();
  char v9 = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 160))(v8);
  if (a4 == 1) {
    char v10 = 1;
  }
  else {
    char v10 = v9;
  }
  if (v10)
  {
    if (*(unsigned char *)(a1 + 448))
    {
      if (*(unsigned char *)(a1 + 32))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_100761D74();
        }
        uint64_t v11 = 10;
      }
      else
      {
        v94[0] = 0;
        v94[1] = 0;
        sub_10003AED0((uint64_t)v94, a1 + 64);
        int v88 = a3;
        if (a2)
        {
          uint64_t v12 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = sub_10025B48C(a2, v13, v14, v15, v16, v17, v18, v19);
            *(_DWORD *)long long buf = 141558275;
            *(void *)&uint8_t buf[4] = 1752392040;
            __int16 v99 = 2081;
            uint64_t v100 = v20;
            _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "sendLogCommand: BdAddr %{private, mask.hash}s specified", buf, 0x16u);
          }
          uint64_t v21 = sub_1003ED128(a1, a2);
          if (v21)
          {
            uint64_t v22 = v21;
            unsigned int v23 = *(_DWORD *)(v21 + 24) - 8194;
            if (v23 > 0xE || ((1 << v23) & 0x409B) == 0)
            {
              uint64_t v24 = v96;
              if (v96 >= v97)
              {
                uint64_t v45 = ((char *)v96 - (unsigned char *)__p) >> 3;
                if ((unint64_t)(v45 + 1) >> 61) {
                  abort();
                }
                unint64_t v46 = ((char *)v97 - (unsigned char *)__p) >> 2;
                if (v46 <= v45 + 1) {
                  unint64_t v46 = v45 + 1;
                }
                if ((unint64_t)((char *)v97 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v47 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v47 = v46;
                }
                if (v47) {
                  unint64_t v48 = (char *)sub_1000405F8((uint64_t)&v97, v47);
                }
                else {
                  unint64_t v48 = 0;
                }
                long long v49 = (uint64_t *)&v48[8 * v45];
                long long v50 = &v48[8 * v47];
                *long long v49 = v22;
                long long v25 = v49 + 1;
                int v52 = (char *)__p;
                id v51 = (char *)v96;
                if (v96 != __p)
                {
                  do
                  {
                    uint64_t v53 = *((void *)v51 - 1);
                    v51 -= 8;
                    *--long long v49 = v53;
                  }
                  while (v51 != v52);
                  id v51 = (char *)__p;
                }
                long long __p = v49;
                unsigned int v96 = v25;
                uint64_t v97 = (uint64_t *)v50;
                if (v51) {
                  operator delete(v51);
                }
              }
              else
              {
                *unsigned int v96 = v21;
                long long v25 = v24 + 1;
              }
              unsigned int v96 = v25;
            }
          }
        }
        else
        {
          for (uint64_t i = *(uint64_t **)(a1 + 40); i != *(uint64_t **)(a1 + 48); ++i)
          {
            uint64_t v27 = *i;
            unsigned int v28 = *(_DWORD *)(*i + 24) - 8194;
            BOOL v29 = v28 > 0xE;
            int v30 = (1 << v28) & 0x409B;
            if (v29 || v30 == 0)
            {
              if (*(unsigned char *)(v27 + 40))
              {
                unint64_t v32 = qword_100A19E40;
                if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
                {
                  id v33 = *(id *)(v27 + 8);
                  int v34 = *(unsigned __int8 *)(v27 + 40);
                  *(_DWORD *)long long buf = 138543618;
                  *(void *)&uint8_t buf[4] = v33;
                  __int16 v99 = 1024;
                  LODWORD(v100) = v34;
                  _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "sendLogCommand: %{public}@ not idle (status %d), skipping", buf, 0x12u);
                }
              }
              else
              {
                timeval v35 = v96;
                if (v96 >= v97)
                {
                  uint64_t v37 = ((char *)v96 - (unsigned char *)__p) >> 3;
                  if ((unint64_t)(v37 + 1) >> 61) {
                    abort();
                  }
                  unint64_t v38 = ((char *)v97 - (unsigned char *)__p) >> 2;
                  if (v38 <= v37 + 1) {
                    unint64_t v38 = v37 + 1;
                  }
                  if ((unint64_t)((char *)v97 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v39 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v39 = v38;
                  }
                  if (v39) {
                    __int16 v40 = (char *)sub_1000405F8((uint64_t)&v97, v39);
                  }
                  else {
                    __int16 v40 = 0;
                  }
                  id v41 = &v40[8 * v37];
                  *(void *)id v41 = v27;
                  uint64_t v36 = (uint64_t *)(v41 + 8);
                  long long v43 = (char *)__p;
                  long long v42 = (char *)v96;
                  if (v96 != __p)
                  {
                    do
                    {
                      uint64_t v44 = *((void *)v42 - 1);
                      v42 -= 8;
                      *((void *)v41 - 1) = v44;
                      v41 -= 8;
                    }
                    while (v42 != v43);
                    long long v42 = (char *)__p;
                  }
                  long long __p = v41;
                  unsigned int v96 = v36;
                  uint64_t v97 = (uint64_t *)&v40[8 * v39];
                  if (v42) {
                    operator delete(v42);
                  }
                }
                else
                {
                  *unsigned int v96 = v27;
                  uint64_t v36 = v35 + 1;
                }
                unsigned int v96 = v36;
              }
            }
          }
        }
        uint64_t v54 = (uint64_t *)__p;
        if (v96 == __p)
        {
          unint64_t v73 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "sendLogCommand: No appropriate accessory to command", buf, 2u);
          }
          uint64_t v11 = 312;
        }
        else
        {
          unsigned __int8 v92 = v88;
          *(_DWORD *)uint64_t v93 = *(_DWORD *)(a1 + 433);
          v93[4] = *(unsigned char *)(a1 + 437);
          if (a4 <= 0xA && ((1 << a4) & 0x63E) != 0) {
            v93[3] = a4;
          }
          unsigned int v85 = a4;
          if (v88 == 7) {
            *(_DWORD *)&v93[1] = 1;
          }
          uint64_t v86 = a1;
          unsigned int v89 = 0;
          char v87 = 0;
          long long v55 = (os_log_t *)&qword_100A19E40;
          char v56 = CBStackConnectDeviceRequest;
          long long v57 = CBStackConnectDeviceRequest;
          long long v58 = &unk_1009F8000;
          while (1)
          {
            uint64_t v59 = *v54;
            uint64_t v60 = *v55;
            if (os_log_type_enabled(*v55, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v61 = v55;
              unint64_t v62 = v58;
              __int16 v63 = v57;
              int v64 = v56;
              unsigned int v65 = v92 - 1;
              int v66 = "Unknown";
              if (v65 <= 8) {
                int v66 = off_1009AC9C8[(char)v65];
              }
              id v67 = *(id *)(v59 + 8);
              *(_DWORD *)long long buf = 136316674;
              *(void *)&uint8_t buf[4] = v66;
              __int16 v99 = 2114;
              uint64_t v100 = (uint64_t)v67;
              __int16 v101 = 1024;
              int v102 = v93[0];
              __int16 v103 = 1024;
              int v104 = v93[1];
              __int16 v105 = 1024;
              int v106 = v93[2];
              __int16 v107 = 1024;
              int v108 = v93[3];
              __int16 v109 = 1024;
              int v110 = v93[4];
              _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "sendLogCommand: Sending command %s to %{public}@: device %d module %d submodule %d type %d level %d", buf, 0x34u);

              char v56 = v64;
              long long v57 = v63;
              long long v58 = v62;
              long long v55 = v61;
            }
            if (v56[96].isa != (__objc2_class *)-1) {
              dispatch_once(&qword_1009F7F00, &stru_1009AC988);
            }
            uint64_t info = (uint64_t)v57[95].info;
            *(_DWORD *)long long buf = *(_DWORD *)(v59 + 16);
            *(_WORD *)&uint8_t buf[4] = *(_WORD *)(v59 + 20);
            uint64_t v69 = sub_1004AA194(info, (uint64_t)buf, 1);
            if (!v69) {
              break;
            }
            if (v58[20] != -1) {
              dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
            }
            unsigned int v70 = sub_10028502C((uint64_t)off_1009F8098, v69, 512, 6, (uint64_t)&v92);
            if (v70)
            {
              unint64_t v71 = *v55;
              if (os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
              {
                id v72 = *(id *)(v59 + 8);
                *(_DWORD *)long long buf = 138543618;
                *(void *)&uint8_t buf[4] = v72;
                __int16 v99 = 1024;
                LODWORD(v100) = v70;
                _os_log_error_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_ERROR, "sendLogCommand: Failed to send command to %{public}@ (error = %d)", buf, 0x12u);
              }
              unsigned int v89 = v70;
            }
            else
            {
              if (v88 == 5) {
                sub_1003EE094(v86, v59);
              }
              char v87 = 1;
            }
            if (++v54 == v96)
            {
              if (!((v85 != 2) | v87 & 1))
              {
                uint64_t v83 = sub_100017768();
                sub_10004191C(buf, "AccessoryLogging");
                sub_10004191C(v90, "StoredLogsRetrieved");
                (*(void (**)(uint64_t, unsigned char *, void **, void))(*(void *)v83 + 80))(v83, buf, v90, 0);
                if (v91 < 0) {
                  operator delete(v90[0]);
                }
                if (SHIBYTE(v101) < 0) {
                  operator delete(*(void **)buf);
                }
              }
              if (v87) {
                uint64_t v11 = 0;
              }
              else {
                uint64_t v11 = v89;
              }
              goto LABEL_105;
            }
          }
          id v74 = *v55;
          if (os_log_type_enabled(*v55, OS_LOG_TYPE_ERROR))
          {
            uint64_t v82 = sub_10025B48C(v59 + 16, v75, v76, v77, v78, v79, v80, v81);
            sub_100761D34(v82, (uint64_t)buf, v74);
          }
          uint64_t v11 = 1;
        }
LABEL_105:
        sub_10003AFB4((uint64_t)v94);
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100761D00();
      }
      uint64_t v11 = 111;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100761DA8();
    }
    uint64_t v11 = 2;
  }
  if (__p)
  {
    unsigned int v96 = (uint64_t *)__p;
    operator delete(__p);
  }
  return v11;
}

void sub_1003EDD8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (__p)
  {
    a30 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

id sub_1003EDE14(uint64_t a1)
{
  [*(id *)(a1 + 424) removeAllObjects];
  sub_1003FA4CC(a1, (uint64_t)aPrivateVarMobi_14);
  sub_1003FA4CC(a1, (uint64_t)aPrivateVarMobi_13);
  sub_1003FA4CC(a1, (uint64_t)aPrivateVarMobi_15);
  sub_1003FA4CC(a1, (uint64_t)&unk_100A12A40);
  sub_1003FA4CC(a1, (uint64_t)&unk_100A12B40);
  id result = [*(id *)(a1 + 424) count];
  *(unsigned char *)(a1 + 432) = (_BYTE)result;
  return result;
}

uint64_t sub_1003EDE98(uint64_t a1)
{
  return sub_1003EDEA0(*(void *)(a1 + 32));
}

uint64_t sub_1003EDEA0(uint64_t a1)
{
  v22[0] = 0;
  v22[1] = 0;
  sub_10003AED0((uint64_t)v22, a1 + 64);
  uint64_t v2 = *(void *)(a1 + 48);
  while (v2 != *(void *)(a1 + 40))
  {
    uint64_t v4 = *(void *)(v2 - 8);
    v2 -= 8;
    uint64_t v3 = v4;
    unsigned int v5 = *(_DWORD *)(v4 + 24) - 8194;
    BOOL v6 = v5 > 0xE;
    int v7 = (1 << v5) & 0x409B;
    if (!v6 && v7 != 0)
    {
      if (*(unsigned char *)(a1 + 448))
      {
        if (qword_1009F7F00 != -1) {
          dispatch_once(&qword_1009F7F00, &stru_1009AC988);
        }
        int v10 = *(_DWORD *)(v3 + 16);
        uint64_t v9 = v3 + 16;
        int v23 = v10;
        __int16 v24 = *(_WORD *)(v9 + 4);
        uint64_t v11 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v23, 1);
        if (v11)
        {
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
          }
          sub_1002859A4((uint64_t)off_1009F8098, v11, 9, 0, 2u);
        }
        else
        {
          uint64_t v12 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
          {
            uint64_t v20 = sub_10025B48C(v9, v13, v14, v15, v16, v17, v18, v19);
            sub_100761E44(v20, (uint64_t)&v23, v12);
          }
        }
        return sub_10003AFB4((uint64_t)v22);
      }
      goto LABEL_19;
    }
  }
  if (!*(unsigned char *)(a1 + 448))
  {
LABEL_19:
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100761DDC();
    }
    return sub_10003AFB4((uint64_t)v22);
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100761E10();
  }
  return sub_10003AFB4((uint64_t)v22);
}

void sub_1003EE070(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003EE094(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(a2 + 40) = 1;
  *(unsigned char *)(a1 + 32) = 1;
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    id v5 = *(id *)(a2 + 8);
    int v6 = *(_DWORD *)(a2 + 24);
    *(_DWORD *)long long buf = 138543618;
    id v21 = v5;
    __int16 v22 = 1024;
    int v23 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "startInactivityTimer: Timeout period for %{public}@ begun, pId = 0x%x", buf, 0x12u);
  }
  int v7 = *(_DWORD *)(a2 + 24);
  BOOL v8 = v7 == 8223 || v7 == 8202;
  double v9 = 45.0;
  uint64_t v15 = 3221225472;
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v16 = sub_1003EE244;
  uint64_t v17 = &unk_1009AC8A0;
  if (!v8) {
    double v9 = 12.0;
  }
  uint64_t v18 = a1;
  uint64_t v19 = a2;
  uint64_t v10 = +[NSTimer timerWithTimeInterval:0 repeats:&v14 block:v9];
  uint64_t v12 = *(void **)(a2 + 32);
  uint64_t v11 = (uint64_t *)(a2 + 32);
  *uint64_t v11 = v10;

  uint64_t v13 = +[NSRunLoop mainRunLoop];
  [v13 addTimer:*v11 forMode:NSDefaultRunLoopMode];
}

void sub_1003EE22C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003EE244(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003AED0((uint64_t)v6, v2 + 64);
  uint64_t v3 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100761E84(a1, v3);
  }
  [*(id *)(*(void *)(a1 + 40) + 80) removeAllObjects];
  uint64_t v4 = *(void *)(a1 + 40);
  *(unsigned char *)(v4 + 40) = 2;
  sub_1003EE2F0(v2, v4);
  return sub_10003AFB4((uint64_t)v6);
}

void sub_1003EE2DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003EE2F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = objc_opt_new();
  long long __p = 0;
  char v118 = 0;
  long long v119 = 0;
  if (a2)
  {
    if (*(unsigned __int8 *)(a2 + 40) - 3 <= 1 && *(void *)(a2 + 64))
    {
      id v5 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = *(void *)(a2 + 48);
        *(_DWORD *)long long buf = 138412290;
        *(void *)&uint8_t buf[4] = v6;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "Warning: finishSession: File %@ still open, closing and marking as corrupt", buf, 0xCu);
      }
      *(unsigned char *)(a2 + 56) = 1;
      sub_1003F5D24(a2);
    }
    int v7 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(id *)(a2 + 8);
      uint64_t v10 = v9;
      int v11 = *(unsigned __int8 *)(a2 + 40);
      uint64_t v12 = *(void *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 48);
      if (v12 == v13)
      {
        int v14 = 0;
      }
      else
      {
        int v14 = 0;
        do
        {
          unsigned int v15 = *(unsigned __int8 *)(*(void *)v12 + 40);
          BOOL v16 = v15 > 8;
          int v17 = (1 << v15) & 0x182;
          if (!v16 && v17 != 0) {
            ++v14;
          }
          v12 += 8;
        }
        while (v12 != v13);
      }
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v123 = 1024;
      int v124 = v11;
      __int16 v125 = 1024;
      int v126 = v14;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "finishSession: %{public}@ logging session finished (state now %d); remaining sessions: %d",
        buf,
        0x18u);
    }
    id v21 = *(uint64_t **)(a1 + 40);
    uint64_t v20 = *(uint64_t **)(a1 + 48);
    if (v21 == v20) {
      goto LABEL_103;
    }
    int v22 = 0;
    int v23 = *(uint64_t **)(a1 + 40);
    do
    {
      unsigned int v24 = *(unsigned __int8 *)(*v23 + 40);
      BOOL v16 = v24 > 8;
      int v25 = (1 << v24) & 0x182;
      if (!v16 && v25 != 0) {
        ++v22;
      }
      ++v23;
    }
    while (v23 != v20);
    if (v22 > 0)
    {
      uint64_t v19 = 0;
      goto LABEL_132;
    }
    if (v21 == v20)
    {
LABEL_103:
      uint64_t v27 = 0;
      char v106 = 0;
      int v104 = 0;
      goto LABEL_104;
    }
    int v104 = 0;
    char v106 = 0;
    uint64_t v27 = 0;
    *(void *)&long long v8 = 67109120;
    long long v101 = v8;
    uint64_t v105 = a1;
    while (1)
    {
      uint64_t v28 = *v21;
      int v29 = *(unsigned __int8 *)(*v21 + 40);
      switch(*(unsigned char *)(*v21 + 40))
      {
        case 0:
        case 6:
          goto LABEL_84;
        case 1:
        case 8:
          long long v43 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
          {
            uint64_t v44 = *(void **)(v28 + 8);
            int v45 = *(unsigned __int8 *)(v28 + 40);
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v44;
            __int16 v123 = 1024;
            int v124 = v45;
            id v46 = v44;
            _os_log_error_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_ERROR, "finishSession: %{public}@ should not be in state %d", buf, 0x12u);
          }
          goto LABEL_66;
        case 2:
        case 4:
        case 5:
          goto LABEL_35;
        case 3:
          unint64_t v47 = v21;
          uint64_t v48 = v28 + 16;
          long long v49 = v118;
          if (v118 >= v119)
          {
            uint64_t v65 = (v118 - (unsigned char *)__p) >> 3;
            if ((unint64_t)(v65 + 1) >> 61) {
              abort();
            }
            unint64_t v66 = (v119 - (unsigned char *)__p) >> 2;
            if (v66 <= v65 + 1) {
              unint64_t v66 = v65 + 1;
            }
            if ((unint64_t)(v119 - (unsigned char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v66;
            }
            if (v67) {
              int v68 = (char *)sub_1000405F8((uint64_t)&v119, v67);
            }
            else {
              int v68 = 0;
            }
            uint64_t v69 = (uint64_t *)&v68[8 * v65];
            uint64_t *v69 = v48;
            long long v50 = (char *)(v69 + 1);
            unint64_t v71 = (char *)__p;
            unsigned int v70 = v118;
            if (v118 != __p)
            {
              do
              {
                uint64_t v72 = *((void *)v70 - 1);
                v70 -= 8;
                *--uint64_t v69 = v72;
              }
              while (v70 != v71);
              unsigned int v70 = (char *)__p;
            }
            long long __p = v69;
            char v118 = v50;
            long long v119 = &v68[8 * v67];
            if (v70) {
              operator delete(v70);
            }
          }
          else
          {
            *(void *)char v118 = v48;
            long long v50 = v49 + 8;
          }
          char v118 = v50;
          unint64_t v73 = qword_100A19E40;
          id v21 = v47;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            id v74 = *(id *)(v28 + 8);
            *(_DWORD *)long long buf = 138543362;
            *(void *)&uint8_t buf[4] = v74;
            _os_log_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEFAULT, "finishSession: Session for %{public}@ marked for deletion", buf, 0xCu);
          }
LABEL_35:
          unsigned int v30 = *(_DWORD *)(v28 + 24) - 8194;
          BOOL v16 = v30 > 0xE;
          int v31 = (1 << v30) & 0x409B;
          if (v16 || v31 == 0)
          {
            id v33 = *(id *)(v28 + 80);
          }
          else
          {
            id v33 = *(id *)(a1 + 424);
            v106 |= (unint64_t)[*(id *)(a1 + 424) count] > *(unsigned __int8 *)(a1 + 432);
          }
          long long v115 = 0u;
          long long v116 = 0u;
          long long v113 = 0u;
          long long v114 = 0u;
          id v34 = v33;
          id v35 = [v34 countByEnumeratingWithState:&v113 objects:v121 count:16];
          int v102 = v21;
          if (!v35) {
            goto LABEL_57;
          }
          uint64_t v36 = *(void *)v114;
          break;
        case 7:
          id v51 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            int v52 = *(void **)(v28 + 8);
            int v53 = *(unsigned __int8 *)(v28 + 40);
            *(_DWORD *)long long buf = 138543618;
            *(void *)&uint8_t buf[4] = v52;
            __int16 v123 = 1024;
            int v124 = v53;
            id v54 = v52;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "Warning: finishSession: %{public}@ in state %d", buf, 0x12u);
          }
          goto LABEL_84;
        default:
          long long v55 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = v101;
            *(_DWORD *)&uint8_t buf[4] = v29;
            _os_log_error_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_ERROR, "finishSession: Unhandled status %d", buf, 8u);
          }
          goto LABEL_66;
      }
      do
      {
        uint64_t v37 = 0;
        do
        {
          if (*(void *)v114 != v36) {
            objc_enumerationMutation(v34);
          }
          uint64_t v38 = *(void *)(*((void *)&v113 + 1) + 8 * (void)v37);
          unsigned int v39 = *(_DWORD *)(v28 + 24) - 8194;
          BOOL v16 = v39 > 0xE;
          int v40 = (1 << v39) & 0x409B;
          if (!v16 && v40 != 0) {
            goto LABEL_49;
          }
          if (![*(id *)(*((void *)&v113 + 1) + 8 * (void)v37) hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryVersionInfo"])
          {
            char v106 = 1;
LABEL_49:
            [v4 addObject:v38, v101];
            uint64_t v27 = v28;
            goto LABEL_50;
          }
          if (!*(unsigned char *)(v105 + 34)) {
            goto LABEL_49;
          }
LABEL_50:
          uint64_t v37 = (char *)v37 + 1;
        }
        while (v35 != v37);
        id v42 = [v34 countByEnumeratingWithState:&v113 objects:v121 count:16];
        id v35 = v42;
      }
      while (v42);
LABEL_57:

      a1 = v105;
      id v21 = v102;

LABEL_66:
      if (*(unsigned char *)(a1 + 34))
      {
        unsigned int v56 = *(_DWORD *)(v28 + 24) - 8194;
        BOOL v16 = v56 > 0x22;
        uint64_t v57 = (1 << v56) & 0x47A877F9BLL;
        if (!v16 && v57 != 0)
        {
          uint64_t v59 = sub_1003F617C(a1, v28);
          uint64_t v60 = v59;
          if (v59 && (!*(void *)(a1 + 24) || *(unsigned char *)(a1 + 16)))
          {
            __int16 v103 = v21;
            long long v111 = 0u;
            long long v112 = 0u;
            long long v109 = 0u;
            long long v110 = 0u;
            id v61 = v59;
            id v62 = [v61 countByEnumeratingWithState:&v109 objects:v120 count:16];
            if (v62)
            {
              uint64_t v63 = *(void *)v110;
              do
              {
                for (uint64_t i = 0; i != v62; uint64_t i = (char *)i + 1)
                {
                  if (*(void *)v110 != v63) {
                    objc_enumerationMutation(v61);
                  }
                  [v4 addObject:*(void *)(*((void *)&v109 + 1) + 8 * i), v101];
                }
                id v62 = [v61 countByEnumeratingWithState:&v109 objects:v120 count:16];
              }
              while (v62);
            }

            a1 = v105;
            id v21 = v103;
          }
        }
      }
      sub_1003F3C14(v28);
      ++v104;
LABEL_84:
      if (++v21 == *(uint64_t **)(a1 + 48))
      {
LABEL_104:
        uint64_t v75 = qword_100A19E40;
        char v76 = v106;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          id v77 = [v4 count];
          *(_DWORD *)long long buf = 134218240;
          *(void *)&uint8_t buf[4] = v77;
          __int16 v123 = 1024;
          int v124 = v104;
          _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "finishSession: Sending %lu file(s) from %d session(s)", buf, 0x12u);
        }
        if (*(void *)(a1 + 24))
        {
          uint64_t v78 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            if (*(unsigned char *)(a1 + 16)) {
              uint64_t v79 = "Diagnostic Extension";
            }
            else {
              uint64_t v79 = "Sysdiagnose";
            }
            *(_DWORD *)long long buf = 136446210;
            *(void *)&uint8_t buf[4] = v79;
            _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "finishSession: %{public}s - Accessory Log Retrieval Completed", buf, 0xCu);
          }
          if (v106) {
            uint64_t v80 = v4;
          }
          else {
            uint64_t v80 = 0;
          }
          sub_1003FA5D4(a1, v80);
          goto LABEL_116;
        }
        if ((v106 & 1) == 0)
        {
          uint64_t v82 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "Warning: finishSession: No real log files to send", buf, 2u);
          }
          uint64_t v19 = 1;
          goto LABEL_124;
        }
        if (*(unsigned char *)(a1 + 33))
        {
          uint64_t v81 = qword_100A19E40;
          uint64_t v19 = 0;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "finishSession: Force send complete", buf, 2u);
            goto LABEL_116;
          }
          goto LABEL_124;
        }
        uint64_t v89 = sub_100035F54();
        if ((((*(uint64_t (**)(uint64_t))(*(void *)v89 + 328))(v89) & 1) != 0
           || (uint64_t v90 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v90 + 384))(v90) & 1) != 0)
           || (uint64_t v91 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v91 + 424))(v91)))
          && (uint64_t v92 = sub_100017768(), (*(unsigned int (**)(uint64_t))(*(void *)v92 + 8))(v92)))
        {
          int v93 = *(unsigned __int8 *)(a1 + 34);
          int v94 = qword_100A19E40;
          BOOL v95 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
          if (v93)
          {
            if (v95)
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "finishSession: Retrieved crash log, opening Tap-to-Radar", buf, 2u);
            }
            uint64_t v96 = sub_100052E70();
            (*(void (**)(uint64_t, void *, uint64_t, void))(*(void *)v96 + 168))(v96, v4, 1, *(unsigned int *)(v27 + 24));
LABEL_116:
            uint64_t v19 = 0;
LABEL_124:
            if (!*(unsigned char *)(a1 + 34))
            {
              uint64_t v85 = sub_100035F54();
              if (((*(uint64_t (**)(uint64_t))(*(void *)v85 + 328))(v85) & 1) != 0
                || (uint64_t v86 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v86 + 424))(v86)))
              {
                uint64_t v87 = sub_100017768();
                if ((*(unsigned int (**)(uint64_t))(*(void *)v87 + 8))(v87))
                {
                  uint64_t v88 = sub_100017768();
                  sub_10004191C(buf, "AccessoryLogging");
                  sub_10004191C(v107, "StoredLogsRetrieved");
                  (*(void (**)(uint64_t, unsigned char *, void **, void))(*(void *)v88 + 80))(v88, buf, v107, v76 & 1);
                  if (v108 < 0) {
                    operator delete(v107[0]);
                  }
                  if (SHIBYTE(v126) < 0) {
                    operator delete(*(void **)buf);
                  }
                }
              }
            }
            uint64_t v83 = (uint64_t *)__p;
            if (__p != v118)
            {
              do
              {
                if (qword_1009F80A0 != -1) {
                  dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
                }
                if (!sub_100294BC0((uint64_t)off_1009F8098, *v83)) {
                  sub_1003F0308(a1, *v83);
                }
                ++v83;
              }
              while (v83 != (uint64_t *)v118);
            }
            sub_1003EC468(a1);
LABEL_132:
            if (__p)
            {
              char v118 = (char *)__p;
              operator delete(__p);
            }
            goto LABEL_134;
          }
          if (v95)
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "finishSession: Internal Settings - Accessory Log Retrieval Completed", buf, 2u);
          }
          uint64_t v97 = sub_100052E70();
          uint64_t v98 = *(unsigned int *)(v27 + 24);
          id v99 = *(id *)v27;
          uint64_t v100 = +[NSString stringWithString:v99];
          (*(void (**)(uint64_t, void *, void, uint64_t, void *))(*(void *)v97 + 152))(v97, v4, 0, v98, v100);

          uint64_t v19 = 0;
        }
        else
        {
          if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
          {
            uint64_t v19 = 2;
            goto LABEL_124;
          }
          sub_100761F4C();
          uint64_t v19 = 2;
        }
        char v76 = v106;
        goto LABEL_124;
      }
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100761F18();
    uint64_t v19 = 1;
    goto LABEL_132;
  }
  uint64_t v19 = 1;
LABEL_134:

  return v19;
}

void sub_1003EEFF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void *sub_1003EF0E0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return memcpy(a2, (const void *)(a1 + 150), 0x101uLL);
}

void sub_1003EF0F0(uint64_t a1, unint64_t a2, unint64_t a3)
{
  *(void *)int v7 = a2;
  *(_DWORD *)&v7[8] = a3;
  *(_WORD *)&long long v7[12] = WORD2(a3);
  uint64_t v6 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67110656;
    int v9 = a2 & 1;
    __int16 v10 = 1024;
    unsigned int v11 = (a2 >> 8) & 1;
    __int16 v12 = 1024;
    int v13 = (unsigned __int16)(a2 >> 24);
    __int16 v14 = 1024;
    int v15 = BYTE5(a2);
    __int16 v16 = 1024;
    int v17 = *(_DWORD *)&v7[6];
    __int16 v18 = 1024;
    int v19 = a3 >> 16;
    __int16 v20 = 1024;
    unsigned int v21 = WORD1(a2) & 1;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "setW1Logging: isTimeStampPeriodicallyEnabled = %d, isDisableDiagnosticsPeriodicallyEnabled = %d, module = %d, level = %d, log_interval = %d, power_logging_interval = %d, isCrashLoggingDisabled = %d", buf, 0x2Cu);
  }
  *(void *)(a1 + 136) = *(void *)v7;
  *(void *)(a1 + 142) = *(void *)&v7[6];
}

void sub_1003EF214(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109888;
    v5[1] = BYTE1(a2);
    __int16 v6 = 1024;
    int v7 = BYTE4(a2);
    __int16 v8 = 1024;
    int v9 = BYTE2(a2);
    __int16 v10 = 1024;
    int v11 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "setAccessoryLogging: module = %d, level = %d, submodule = %d, device = %d", (uint8_t *)v5, 0x1Au);
  }
  *(_WORD *)(a1 + 433) = a2;
  *(unsigned char *)(a1 + 435) = BYTE2(a2);
  *(unsigned char *)(a1 + 436) = BYTE3(a2);
  *(unsigned char *)(a1 + 437) = BYTE4(a2);
}

uint64_t sub_1003EF310()
{
  return 0;
}

void sub_1003EF32C()
{
  uint64_t v0 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "Post an event to trigger AWD Diagnostics ", v1, 2u);
  }
  if (qword_1009FB140 != -1) {
    dispatch_once(&qword_1009FB140, &stru_1009AC948);
  }
  if ((*(unsigned int (**)(void *))(*(void *)off_1009FB138 + 32))(off_1009FB138))
  {
    if (qword_1009FB140 != -1) {
      dispatch_once(&qword_1009FB140, &stru_1009AC948);
    }
    sub_1004C9DF0((uint64_t)off_1009FB138, &stru_1009AC908);
  }
}

uint64_t sub_1003EF420(uint64_t a1, uint64_t a2, int a3, int a4)
{
  if (!*(unsigned char *)(a1 + 448)) {
    return 111;
  }
  uint64_t v7 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 8))(v7)
    && (uint64_t v8 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v8 + 328))(v8)))
  {
    int v9 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(a2, (uint64_t)__p);
      __int16 v10 = v14 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136315650;
      __int16 v16 = v10;
      __int16 v17 = 1024;
      int v18 = a3;
      __int16 v19 = 1024;
      int v20 = a4;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Send RequestPeriodically to device \"%s\", type = %d, interval = %d", buf, 0x18u);
      if (v14 < 0) {
        operator delete(__p[0]);
      }
    }
    buf[0] = 0;
    sub_10001B8E0(buf);
    uint64_t v11 = sub_1000D7BB8((unsigned __int8 *)(a2 + 128), a3, a4);
    sub_10001B910(buf);
    if (v11 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100761F80();
    }
    sub_10001B8AC(buf);
  }
  else
  {
    uint64_t v11 = 102;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AC928);
  }
  return sub_1004E2340((uint64_t)off_1009F8068, v11, 10000);
}

void sub_1003EF628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003EF644(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (!*(unsigned char *)(a1 + 448)) {
    return 111;
  }
  uint64_t v5 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 8))(v5)
    && (uint64_t v6 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v6 + 328))(v6)))
  {
    uint64_t v7 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      sub_100475EE0(a2, (uint64_t)__p);
      uint64_t v8 = v12 >= 0 ? __p : (void **)__p[0];
      *(_DWORD *)long long buf = 136315394;
      char v14 = v8;
      __int16 v15 = 1024;
      unsigned int v16 = a3;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "Send CancelRequestPeriodically to device \"%s\", type = %d", buf, 0x12u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
    LOBYTE(__p[0]) = 0;
    sub_10001B8E0(__p);
    uint64_t v9 = sub_1000D7F2C((unsigned __int8 *)(a2 + 128), a3);
    sub_10001B910(__p);
    if (v9 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100761FE8();
    }
    sub_10001B8AC(__p);
  }
  else
  {
    uint64_t v9 = 102;
  }
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009AC928);
  }
  return sub_1004E2340((uint64_t)off_1009F8068, v9, 10000);
}

void sub_1003EF83C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003EF858(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(a1 + 24) = a2;
  *(unsigned char *)(a1 + 16) = a3;
  sub_1003EF87C();
  return 0;
}

void sub_1003EF87C()
{
  uint64_t v0 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_INFO))
  {
    *(_WORD *)uint64_t v1 = 0;
    _os_log_impl((void *)&_mh_execute_header, v0, OS_LOG_TYPE_INFO, "TraceLogCollection - syncLogOnDemand", v1, 2u);
  }
  if (qword_1009FB140 != -1) {
    dispatch_once(&qword_1009FB140, &stru_1009AC948);
  }
  if ((*(unsigned int (**)(void *))(*(void *)off_1009FB138 + 32))(off_1009FB138))
  {
    if (qword_1009FB140 != -1) {
      dispatch_once(&qword_1009FB140, &stru_1009AC948);
    }
    sub_1004C9DF0((uint64_t)off_1009FB138, &stru_1009AC8C0);
  }
}

void sub_1003EF970(id a1)
{
  if (qword_1009F8798 != -1) {
    dispatch_once(&qword_1009F8798, &stru_1009AC968);
  }
  uint64_t v1 = qword_1009F8790;

  sub_1003EF9C4(v1);
}

uint64_t sub_1003EF9C4(uint64_t a1)
{
  uint64_t v2 = sub_100017768();
  if ((*(uint64_t (**)(uint64_t))(*(void *)v2 + 160))(v2))
  {
    if (*(unsigned char *)(a1 + 448))
    {
      if (*(void *)(a1 + 48) == *(void *)(a1 + 40))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_100762084();
        }
        return 312;
      }
      else if (*(unsigned char *)(a1 + 32))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_1007620B8();
        }
        return 10;
      }
      else
      {
        uint64_t v3 = sub_1003ED54C(a1, 0, 5, 2u);
        uint64_t v4 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          LODWORD(v30) = v3;
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "syncLogOnDemandEvent: sendLogCommand returned %d", buf, 8u);
        }
        uint64_t v5 = sub_100017768();
        if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 8))(v5))
        {
          sub_1003EDE14(a1);
          v28[0] = 0;
          v28[1] = 0;
          sub_10003AED0((uint64_t)v28, a1 + 64);
          uint64_t v7 = *(void *)(a1 + 40);
          uint64_t v6 = *(void *)(a1 + 48);
          do
          {
            uint64_t v8 = v6;
            if (v6 == v7)
            {
              uint64_t v16 = 0;
              goto LABEL_37;
            }
            v6 -= 8;
            uint64_t v9 = *(void *)(v8 - 8);
            unsigned int v10 = *(_DWORD *)(v9 + 24) - 8194;
            BOOL v11 = v10 > 0xE;
            int v12 = (1 << v10) & 0x409B;
          }
          while (v11 || v12 == 0);
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009AC988);
          }
          *(_DWORD *)long long buf = *(_DWORD *)(v9 + 16);
          LOWORD(v30) = *(_WORD *)(v9 + 20);
          uint64_t v14 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
          int v27 = 3;
          if (qword_1009F80A0 != -1) {
            dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
          }
          sub_100290170((uint64_t)off_1009F8098, v14, &v27);
          char v15 = v27;
          if ((v27 - 3) <= 0xFFFFFFFD)
          {
            char v15 = 2;
            int v27 = 2;
          }
          *(unsigned char *)(a1 + 416) = v15;
          *(_WORD *)(a1 + 407) = 1;
          *(_DWORD *)(a1 + 418) = 0x10000;
          LOBYTE(dword_1009FB578) = v15;
          char v26 = 0;
          sub_10001B8E0(&v26);
          uint64_t v16 = sub_1000D88D4((unsigned __int8 *)(v9 + 16), 4u, 5u, (unsigned __int8 *)&dword_1009FB578);
          __int16 v17 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            id v18 = *(id *)(v9 + 8);
            *(_DWORD *)long long buf = 138543618;
            id v30 = v18;
            __int16 v31 = 1024;
            int v32 = v16;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "syncLogOnDemandEvent: Requested trace log from W1 device %{public}@, Left Bud (id result = %d)", buf, 0x12u);
          }
          dword_100A12C50 = dword_1009FB578;
          byte_100A12C54 = byte_1009FB57C;
          byte_100A12C59 = 5;
          __int16 v19 = *(_WORD *)(v9 + 20);
          *(_DWORD *)(a1 + 409) = *(_DWORD *)(v9 + 16);
          *(_WORD *)(a1 + 413) = v19;
          *(unsigned char *)(a1 + 415) = 0;
          sub_10001B910(&v26);
          if (!v16)
          {
            *(unsigned char *)(v9 + 40) = 8;
            *(unsigned char *)(a1 + 32) = 1;
          }
          sub_10001B8AC(&v26);
LABEL_37:
          if (*(unsigned char *)(a1 + 32) && *(void *)(a1 + 24))
          {
            int v20 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "syncLogOnDemandEvent: Starting overall timer", buf, 2u);
            }
            v25[0] = _NSConcreteStackBlock;
            v25[1] = 3221225472;
            v25[2] = sub_1003EFF80;
            void v25[3] = &unk_1009A1400;
            uint8_t v25[4] = a1;
            uint64_t v21 = +[NSTimer timerWithTimeInterval:0 repeats:v25 block:415.0];
            int v22 = *(void **)(a1 + 128);
            *(void *)(a1 + 128) = v21;

            int v23 = +[NSRunLoop mainRunLoop];
            [v23 addTimer:*(void *)(a1 + 128) forMode:NSDefaultRunLoopMode];
          }
          if (v3 && v8 != v7)
          {
            if (qword_1009F8070 != -1) {
              dispatch_once(&qword_1009F8070, &stru_1009AC928);
            }
            uint64_t v3 = sub_1004E2340((uint64_t)off_1009F8068, v16, 10000);
          }
          sub_10003AFB4((uint64_t)v28);
        }
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100762050();
      }
      return 111;
    }
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_1007620EC();
    }
    return 2;
  }
  return v3;
}

void sub_1003EFF34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);

  sub_10003AFB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003EFF78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 32);
}

void sub_1003EFF80(uint64_t a1, void *a2)
{
  id v24 = a2;
  uint64_t v3 = *(void *)(a1 + 32);
  v28[0] = 0;
  v28[1] = 0;
  sub_10003AED0((uint64_t)v28, v3 + 64);
  int v25 = 0;
  char v26 = 0;
  int v27 = 0;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100762120(v3);
  }
  uint64_t v5 = *(uint64_t **)(v3 + 40);
  uint64_t v4 = *(uint64_t **)(v3 + 48);
  if (v5 != v4)
  {
    while (1)
    {
      uint64_t v6 = *v5;
      unsigned int v7 = *(_DWORD *)(*v5 + 24) - 8194;
      BOOL v8 = v7 > 0xE;
      int v9 = (1 << v7) & 0x409B;
      if (v8 || v9 == 0) {
        break;
      }
      unsigned int v11 = *(unsigned __int8 *)(v6 + 40);
      if (v11 != 7) {
        goto LABEL_11;
      }
LABEL_32:
      if (++v5 == v4) {
        goto LABEL_33;
      }
    }
    unsigned int v11 = *(unsigned __int8 *)(v6 + 40);
LABEL_11:
    BOOL v8 = v11 > 8;
    int v12 = (1 << v11) & 0x182;
    if (!v8 && v12 != 0)
    {
      if (v26 >= v27)
      {
        uint64_t v15 = ((char *)v26 - v25) >> 3;
        if ((unint64_t)(v15 + 1) >> 61) {
          abort();
        }
        unint64_t v16 = ((char *)v27 - v25) >> 2;
        if (v16 <= v15 + 1) {
          unint64_t v16 = v15 + 1;
        }
        if ((unint64_t)((char *)v27 - v25) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          id v18 = (char *)sub_1000405F8((uint64_t)&v27, v17);
        }
        else {
          id v18 = 0;
        }
        __int16 v19 = &v18[8 * v15];
        *(void *)__int16 v19 = v6;
        uint64_t v14 = (uint64_t *)(v19 + 8);
        int v20 = v26;
        if (v26 != (uint64_t *)v25)
        {
          do
          {
            uint64_t v21 = *--v20;
            *((void *)v19 - 1) = v21;
            v19 -= 8;
          }
          while (v20 != (uint64_t *)v25);
          int v20 = (uint64_t *)v25;
        }
        int v25 = v19;
        int v27 = (uint64_t *)&v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *char v26 = v6;
        uint64_t v14 = v26 + 1;
      }
      char v26 = v14;
      uint64_t v4 = *(uint64_t **)(v3 + 48);
    }
    goto LABEL_32;
  }
LABEL_33:
  int v22 = (uint64_t *)v25;
  if (v25 != (char *)v26)
  {
    do
    {
      uint64_t v23 = *v22;
      *(unsigned char *)(v23 + 40) = 4;
      sub_1003EE2F0(v3, v23);
      ++v22;
    }
    while (v22 != v26);
    int v22 = (uint64_t *)v25;
  }
  if (v22) {
    operator delete(v22);
  }
  sub_10003AFB4((uint64_t)v28);
}

void sub_1003F0198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *__p, uint64_t a11, uint64_t a12, char a13)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F01D4(uint64_t a1, uint64_t a2)
{
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
  }
  uint64_t v4 = sub_100292790((uint64_t)off_1009F8098);
  if (*(void *)(a1 + 24) && !*(unsigned char *)(a1 + 16))
  {
    uint64_t v6 = v4;
    *(unsigned char *)(a1 + 16) = 1;
    unsigned int v7 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)BOOL v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "purgeCallback: Returning zero files to sysdiagnose", v8, 2u);
    }
    return sub_10029BA14(v6, a2, 64);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_1007621D4();
    }
    return 12;
  }
}

BOOL sub_1003F02E8(uint64_t a1)
{
  return *(void *)(a1 + 24) && *(unsigned char *)(a1 + 16) == 0;
}

uint64_t sub_1003F0308(uint64_t a1, uint64_t a2)
{
  v18[0] = 0;
  v18[1] = 0;
  sub_10003AED0((uint64_t)v18, a1 + 64);
  uint64_t v4 = sub_1003ED128(a1, a2);
  uint64_t v5 = v4;
  uint64_t v6 = *(char **)(a1 + 48);
  unsigned int v7 = *(char **)(a1 + 40);
  if (v7 != v6)
  {
    while (*(void *)v7 != v4)
    {
      v7 += 8;
      if (v7 == v6)
      {
        unsigned int v7 = *(char **)(a1 + 48);
        break;
      }
    }
  }
  if (v7 == v6)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762208();
    }
    uint64_t v14 = 312;
  }
  else
  {
    unsigned int v8 = *(unsigned __int8 *)(v4 + 40);
    BOOL v9 = v8 > 8;
    int v10 = (1 << v8) & 0x182;
    if (v9 || v10 == 0)
    {
      uint64_t v15 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        id v16 = *(id *)(v5 + 8);
        *(_DWORD *)long long buf = 138543362;
        id v20 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "removeAccessoryLoggingSession: Removing %{public}@", buf, 0xCu);

        uint64_t v6 = *(char **)(a1 + 48);
      }
      if (v6 != v7 + 8) {
        memmove(v7, v7 + 8, v6 - (v7 + 8));
      }
      *(void *)(a1 + 48) = v6 - 8;
      sub_1003FAA3C(v5);
      operator delete();
    }
    *(unsigned char *)(v4 + 40) = 3;
    int v12 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(id *)(v5 + 8);
      *(_DWORD *)long long buf = 138543362;
      id v20 = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Warning: removeAccessoryLoggingSession: Disconnected from %{public}@ while actively logging", buf, 0xCu);
    }
    uint64_t v14 = sub_1003EE2F0(a1, v5);
  }
  sub_10003AFB4((uint64_t)v18);
  return v14;
}

void sub_1003F0544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003F0560(uint64_t a1, uint64_t a2)
{
  if (sub_100480504(a2)) {
    return 1;
  }

  return sub_1003ED438();
}

uint64_t sub_1003F059C(uint64_t a1, unsigned int *a2, int a3, unsigned int a4, int *a5)
{
  v33[0] = 0;
  v33[1] = 0;
  sub_10003AED0((uint64_t)v33, a1 + 64);
  uint64_t v10 = sub_1003ED128(a1, (uint64_t)a2);
  unsigned int v11 = qword_100A19E40;
  if (v10)
  {
    uint64_t v12 = v10;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      id v13 = *(id *)(v12 + 8);
      int v14 = *(unsigned __int8 *)(v12 + 40);
      *(_DWORD *)long long buf = 138544130;
      id v35 = v13;
      __int16 v36 = 1024;
      int v37 = a3;
      __int16 v38 = 1024;
      unsigned int v39 = a4;
      __int16 v40 = 1024;
      int v41 = v14;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "recvLoggingHandler: %{public}@, type: %u, len: %u, status: %d", buf, 0x1Eu);
    }
    if (a3 > 31)
    {
      if (a3 == 32)
      {
        uint64_t v15 = sub_1003F0EE0(a1, (uint64_t)a2, a4, a5);
        goto LABEL_22;
      }
      if (a3 != 128)
      {
        if (a3 == 1024)
        {
          uint64_t v15 = sub_1003F2490(a1, a2, a4, (unsigned __int8 *)a5);
LABEL_22:
          uint64_t v24 = v15;
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      uint64_t v27 = sub_100017768();
      uint64_t v28 = (*(uint64_t (**)(uint64_t))(*(void *)v27 + 8))(v27);
      if (v28)
      {
        uint64_t v15 = sub_1003F0A8C(v28, v29, 0, (uint64_t)a5);
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (a3 == 2)
    {
      uint64_t v30 = sub_100017768();
      if ((*(unsigned int (**)(uint64_t))(*(void *)v30 + 8))(v30))
      {
        uint64_t v15 = sub_1003F08CC(a1, (uint64_t)a2, a4, a5);
        goto LABEL_22;
      }
      goto LABEL_23;
    }
    if (a3 != 4)
    {
LABEL_24:
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100762278();
      }
      uint64_t v24 = 3;
      goto LABEL_27;
    }
    uint64_t v25 = sub_100017768();
    if (!(*(unsigned int (**)(uint64_t))(*(void *)v25 + 8))(v25))
    {
LABEL_23:
      uint64_t v24 = 2;
      goto LABEL_27;
    }
    int v26 = *(unsigned __int8 *)(v12 + 40);
    if ((v26 - 7) < 2)
    {
      uint64_t v15 = sub_1003F1AA0(a1, (uint64_t)a2, a4, (unsigned __int8 *)a5);
      goto LABEL_22;
    }
    if (v26 == 6)
    {
      uint64_t v15 = sub_1003F17C4(a1, (unsigned __int8 *)a2, 0, (unsigned __int8 *)a5);
      goto LABEL_22;
    }
    int v32 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762300(v12, v32);
    }
    uint64_t v24 = 1;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = sub_10025B48C((uint64_t)a2, v16, v17, v18, v19, v20, v21, v22);
      sub_10076223C(v23, (uint64_t)buf);
    }
    uint64_t v24 = 8;
  }
LABEL_27:
  sub_10003AFB4((uint64_t)v33);
  return v24;
}

void sub_1003F08AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003F08CC(uint64_t a1, uint64_t a2, __int16 a3, const void *a4)
{
  LOWORD(__nitems) = a3;
  v24.__darwin_time_t tv_sec = 0;
  *(void *)&v24.__darwin_suseconds_t tv_usec = 0;
  gettimeofday(&v24, 0);
  __darwin_suseconds_t tv_usec = v24.tv_usec;
  int __ptr = v24.tv_sec;
  uint64_t v7 = sub_1003ED128(a1, a2);
  if (v7)
  {
    uint64_t v8 = v7;
    int v9 = *(_DWORD *)(v7 + 24);
    if (v9 == 8194)
    {
      uint64_t v10 = (const char *)&unk_100A12A40;
LABEL_9:
      uint64_t v19 = fopen(v10, "ab");
      if (v19)
      {
        uint64_t v20 = v19;
        fwrite((const void *)(a1 + 422), 1uLL, 1uLL, v19);
        fwrite(&__ptr, 1uLL, 4uLL, v20);
        fwrite(&tv_usec, 1uLL, 4uLL, v20);
        fwrite(&__nitems, 1uLL, 2uLL, v20);
        fwrite(a4, 1uLL, (unsigned __int16)__nitems, v20);
        fclose(v20);
        return 0;
      }
      else
      {
        uint64_t v21 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_10076248C(v21);
        }
        return 1;
      }
    }
    if (v9 == 8201)
    {
      uint64_t v10 = (const char *)&unk_100A12B40;
      goto LABEL_9;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762400(v8);
    }
    return 2;
  }
  else
  {
    uint64_t v11 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762388(a2, v11, v12, v13, v14, v15, v16, v17);
    }
    return 8;
  }
}

uint64_t sub_1003F0A8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = fopen(aPrivateVarMobi_15, "w");
  if (v5)
  {
    uint64_t v6 = v5;
    uint64_t v7 = 0;
    uint64_t v8 = a4 + 20;
    uint64_t v9 = a4 + 28;
    uint64_t v34 = a4;
    uint64_t v10 = a4 + 21;
    uint64_t v11 = v8;
    do
    {
      if (*(unsigned char *)(v8 + 40 * v7))
      {
LABEL_4:
        fwrite("Source Device : Addr -> ", 0x18uLL, 1uLL, v6);
        for (uint64_t i = 0; i != 6; ++i)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v11 + i));
        fwrite(", Link Key -> ", 0xEuLL, 1uLL, v6);
        for (uint64_t j = 0; j != 16; ++j)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v9 + j));
        fputc(10, v6);
      }
      else
      {
        uint64_t v14 = 0;
        while (v14 != 5)
        {
          if (*(unsigned __int8 *)(v10 + v14++))
          {
            if ((unint64_t)(v14 - 1) <= 4) {
              goto LABEL_4;
            }
            break;
          }
        }
      }
      ++v7;
      v10 += 40;
      v11 += 40;
      v9 += 40;
    }
    while (v7 != 15);
    uint64_t v16 = 0;
    uint64_t v17 = v34 + 636;
    uint64_t v18 = v34 + 621;
    uint64_t v19 = v34 + 620;
    do
    {
      if (*(unsigned char *)(v34 + 620 + 36 * v16))
      {
LABEL_17:
        fwrite("Magic Device : Hint -> ", 0x17uLL, 1uLL, v6);
        for (uint64_t k = 0; k != 16; ++k)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v19 + k));
        fwrite(", Key -> ", 9uLL, 1uLL, v6);
        for (uint64_t m = 0; m != 16; ++m)
          fprintf(v6, "%02x", *(unsigned __int8 *)(v17 + m));
        fprintf(v6, ", Ratchet -> %d", *(_DWORD *)(v34 + 652 + 36 * v16));
        fputc(10, v6);
      }
      else
      {
        uint64_t v22 = 0;
        while (v22 != 15)
        {
          if (*(unsigned __int8 *)(v18 + v22++))
          {
            if ((unint64_t)(v22 - 1) <= 0xE) {
              goto LABEL_17;
            }
            break;
          }
        }
      }
      ++v16;
      v18 += 36;
      v19 += 36;
      v17 += 36;
    }
    while (v16 != 5);
    if (*(unsigned char *)(v34 + 800))
    {
LABEL_30:
      fwrite("Magic IRK -> ", 0xDuLL, 1uLL, v6);
      for (uint64_t n = 0; n != 16; ++n)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 800 + n));
      fwrite(", Magic Key -> ", 0xFuLL, 1uLL, v6);
      for (iuint64_t i = 0; ii != 16; ++ii)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 816 + ii));
      fputc(10, v6);
    }
    else
    {
      uint64_t v30 = 0;
      while (v30 != 15)
      {
        if (*(unsigned __int8 *)(v34 + 801 + v30++))
        {
          if ((unint64_t)(v30 - 1) <= 0xE) {
            goto LABEL_30;
          }
          break;
        }
      }
    }
    if (*(unsigned char *)(v34 + 832))
    {
LABEL_36:
      fwrite("Couple Addr -> ", 0xFuLL, 1uLL, v6);
      for (juint64_t j = 0; jj != 6; ++jj)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 832 + jj));
      fwrite(", Link Key -> ", 0xEuLL, 1uLL, v6);
      for (kuint64_t k = 0; kk != 16; ++kk)
        fprintf(v6, "%02x", *(unsigned __int8 *)(v34 + 840 + kk));
      fputc(10, v6);
    }
    else
    {
      uint64_t v32 = 0;
      while (v32 != 5)
      {
        if (*(unsigned __int8 *)(v34 + 833 + v32++))
        {
          if ((unint64_t)(v32 - 1) <= 4) {
            goto LABEL_36;
          }
          break;
        }
      }
    }
    fclose(v6);
    return 0;
  }
  else
  {
    uint64_t v29 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762510(v29);
    }
    return 1;
  }
}

uint64_t sub_1003F0EE0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  memset(v107, 0, 31);
  uint64_t v93 = 0;
  int v94 = 0;
  __int16 v91 = 0;
  char v92 = 0;
  uint64_t v105 = 0;
  char v106 = 0;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AC988);
  }
  *(_DWORD *)long long buf = *(_DWORD *)a2;
  *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a2 + 4);
  uint64_t v70 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  uint64_t v8 = sub_1003ED128(a1, a2);
  if (!v8)
  {
    uint64_t v13 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762594(a2, v13, v14, v15, v16, v17, v18, v19);
    }
    return 8;
  }
  uint64_t v9 = v8;
  if (!a4)
  {
LABEL_22:
    uint64_t v23 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      id v67 = *(id *)(v9 + 8);
      *(_DWORD *)long long buf = 138543874;
      *(void *)&uint8_t buf[4] = v67;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&unsigned char buf[14] = a4;
      *(_WORD *)&buf[22] = 1024;
      *(_DWORD *)&unsigned char buf[24] = a3;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "recvW1AppDiagnosticsHandler: %{public}@ sent invalid APP Diag data : data->%p, len->%d", buf, 0x1Cu);
    }
    return 3;
  }
  if (a3 > 453)
  {
    if (a3 != 454)
    {
      if (a3 == 904)
      {
        int v11 = 0;
        unsigned int v12 = 2;
        int v10 = 1;
        uint64_t v69 = 1;
        goto LABEL_19;
      }
      goto LABEL_18;
    }
    uint64_t v69 = 0;
    int v11 = 0;
    int v10 = 1;
LABEL_17:
    unsigned int v12 = 1;
    goto LABEL_19;
  }
  if (a3 == 64)
  {
    int v10 = 0;
    int v11 = 0;
    uint64_t v69 = 0x100000000;
    goto LABEL_17;
  }
  if (a3 == 128)
  {
    int v10 = 0;
    int v11 = 0;
    unsigned int v12 = 2;
    uint64_t v69 = 0x100000001;
    goto LABEL_19;
  }
LABEL_18:
  int v10 = 0;
  unsigned int v12 = 0;
  uint64_t v69 = 0x100000000;
  int v11 = 1;
LABEL_19:
  int v68 = *(unsigned __int16 *)(v70 + 986);
  uint64_t v21 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    id v22 = *(id *)(v9 + 8);
    *(_DWORD *)long long buf = 138543874;
    *(void *)&uint8_t buf[4] = v22;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = v12;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = v10;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "recvW1AppDiagnosticsHandler: DiagInfo received from %{public}@ %d bud, AWD = %d", buf, 0x18u);
  }
  if (v11) {
    goto LABEL_22;
  }
  size_t v25 = (unint64_t)v12 << 6;
  memcpy((void *)(a1 + 150), a4, v25);
  *(unsigned char *)(a1 + 406) = (_BYTE)v12 << 6;
  int v26 = fopen(aPrivateVarMobi_14, "w");
  if (!v26)
  {
    long long v43 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762610(v43);
    }
    uint64_t v20 = 1;
    goto LABEL_44;
  }
  int v27 = *a4;
  int v28 = a4[1];
  v107[0] = *(_OWORD *)(a4 + 2);
  *(_OWORD *)((char *)v107 + 15) = *(_OWORD *)((char *)a4 + 23);
  uint64_t v93 = *(void *)((char *)a4 + 39);
  int v94 = *(int *)((char *)a4 + 47);
  __int16 v91 = *(_WORD *)((char *)a4 + 51);
  char v92 = *((unsigned char *)a4 + 53);
  int v29 = *((unsigned __int8 *)a4 + 54);
  uint64_t v30 = *(void *)((char *)a4 + 55);
  char v106 = *((unsigned char *)a4 + 63);
  uint64_t v105 = v30;
  fwrite("App Diagnostics Info Collected from Accessory Device\n\n", 0x36uLL, 1uLL, v26);
  sub_100475EE0(v70, (uint64_t)buf);
  if ((buf[23] & 0x80u) == 0) {
    __int16 v31 = buf;
  }
  else {
    __int16 v31 = *(uint8_t **)buf;
  }
  fprintf(v26, "DeviceName : %s\n", (const char *)v31);
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  unsigned int v39 = (const char *)sub_10025B48C(a2, v32, v33, v34, v35, v36, v37, v38);
  fprintf(v26, "Device Bluetooth Address : %s\n", v39);
  int v40 = fwrite("\n======Primary Device======\n", 0x1CuLL, 1uLL, v26);
  v82[0] = v27;
  v82[1] = v28;
  *(_OWORD *)uint64_t v83 = v107[0];
  *(_OWORD *)&v83[15] = *(_OWORD *)((char *)v107 + 15);
  uint64_t v84 = v93;
  int v85 = v94;
  __int16 v86 = v91;
  char v87 = v92;
  char v88 = v29;
  char v90 = v106;
  uint64_t v89 = v105;
  sub_1003F2E2C(v40, v26, (uint64_t)v82);
  memset(buf, 0, 32);
  sub_1004B8C24((uint64_t)buf, 1, v70);
  *(_DWORD *)&unsigned char buf[24] = v27;
  *(_DWORD *)&buf[28] = v28;
  *(_WORD *)&uint8_t buf[16] = WORD6(v107[1]);
  unsigned char buf[18] = BYTE14(v107[1]);
  *(_WORD *)&buf[19] = *(_WORD *)((char *)&v94 + 1);
  buf[21] = HIBYTE(v94);
  uint64_t v41 = sub_100050530();
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v41 + 56))(v41, buf);
  if (v29 == 9)
  {
    id v42 = "dev-fused";
LABEL_39:
    uint64_t v44 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      id v45 = *(id *)(v9 + 8);
      v98[0] = 138543618;
      *(void *)&v98[1] = v45;
      __int16 v99 = 2082;
      uint64_t v100 = v42;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "recvW1AppDiagnosticsHandler: %{public}@ fused status : %{public}s", (uint8_t *)v98, 0x16u);
    }
    goto LABEL_41;
  }
  if (v29 == 1)
  {
    id v42 = "prod-fused";
    goto LABEL_39;
  }
LABEL_41:
  if (v69)
  {
    v107[0] = *(_OWORD *)(a4 + 18);
    *(_OWORD *)((char *)v107 + 15) = *(_OWORD *)((char *)a4 + 87);
    uint64_t v93 = *(void *)((char *)a4 + 103);
    int v94 = *(int *)((char *)a4 + 111);
    __int16 v91 = *(_WORD *)((char *)a4 + 115);
    char v92 = *((unsigned char *)a4 + 117);
    char v46 = *((unsigned char *)a4 + 118);
    char v106 = *((unsigned char *)a4 + 127);
    uint64_t v105 = *(void *)((char *)a4 + 119);
    uint64_t v47 = *((void *)a4 + 8);
    int v48 = fwrite("\n======Secondary Device======\n", 0x1EuLL, 1uLL, v26);
    uint64_t v73 = v47;
    *(_OWORD *)id v74 = v107[0];
    *(_OWORD *)&v74[15] = *(_OWORD *)((char *)v107 + 15);
    uint64_t v75 = v93;
    int v76 = v94;
    __int16 v77 = v91;
    char v78 = v92;
    char v79 = v46;
    char v81 = v106;
    uint64_t v80 = v105;
    sub_1003F2E2C(v48, v26, (uint64_t)&v73);
  }
  fclose(v26);
  uint64_t v20 = 0;
LABEL_44:
  if ((v69 & 0x100000000) != 0) {
    return v20;
  }
  long long v49 = (char *)a4 + v25;
  bzero(buf, 0x29AuLL);
  bzero(v98, 0x29AuLL);
  sub_1003F3060(v50, (char *)buf, (uint64_t)a4 + v25 + 4);
  int v51 = *((unsigned __int8 *)a4 + v25);
  buf[1] = *((unsigned char *)a4 + v25);
  if (v68) {
    v104 |= v68;
  }
  unsigned int v52 = *((unsigned __int16 *)v49 + 1);
  *(_WORD *)&buf[3] = *((_WORD *)v49 + 1);
  int v53 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    id v54 = *(id *)(v9 + 8);
    int v55 = v49[1];
    *(_DWORD *)BOOL v95 = 138544130;
    *(void *)&v95[4] = v54;
    *(_WORD *)&v95[12] = 1024;
    *(_DWORD *)&v95[14] = v51;
    *(_WORD *)&v95[18] = 1024;
    *(_DWORD *)&v95[20] = v55;
    __int16 v96 = 1024;
    unsigned int v97 = v52;
    _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "recvW1AppDiagnosticsHandler: Received %{public}@ AWD: awdVersion=%d, data[1]=%d, awdLength=%d", v95, 0x1Eu);
  }
  if (v52 == 386)
  {
    uint8_t v56 = v49[1];
    uint8_t v57 = v56 != 0;
  }
  else
  {
    if (v52 < 0x182 || (uint8_t v57 = v49[1]) == 0)
    {
      int v64 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
      {
        id v65 = *(id *)(v9 + 8);
        int v66 = v49[1];
        *(_DWORD *)BOOL v95 = 138543874;
        *(void *)&v95[4] = v65;
        *(_WORD *)&v95[12] = 1024;
        *(_DWORD *)&v95[14] = v52;
        *(_WORD *)&v95[18] = 1024;
        *(_DWORD *)&v95[20] = v66;
        _os_log_error_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_ERROR, "recvW1AppDiagnosticsHandler: %{public}@ sent invalid AWD header awdLength=%d data[1]=%d", v95, 0x18u);
      }
      return 3;
    }
    uint8_t v56 = 1;
  }
  buf[0] = v57;
  buf[2] = v56;
  __int16 v103 = *(_DWORD *)(v9 + 24);
  memset(v95, 0, sizeof(v95));
  sub_1004B8C24((uint64_t)v95, 5, v70);
  *(void *)&v95[16] = buf;
  uint64_t v58 = sub_100050530();
  int v59 = (*(uint64_t (**)(uint64_t, uint8_t *))(*(void *)v58 + 56))(v58, v95);
  __int16 v60 = *(_WORD *)&buf[3];
  char v61 = v69 ^ 1;
  if (*(unsigned __int16 *)&buf[3] < 0x183u) {
    char v61 = 1;
  }
  if ((v61 & 1) == 0)
  {
    sub_1003F3060(v59, (char *)v98, (uint64_t)(v49 + 390));
    if (v68) {
      v104 |= v68;
    }
    if (buf[0] == 1) {
      char v62 = 2;
    }
    else {
      char v62 = 1;
    }
    LOBYTE(v98[0]) = v62;
    BYTE1(v98[0]) = buf[1];
    BYTE2(v98[0]) = 2;
    *(_WORD *)((char *)v98 + 3) = v60;
    __int16 v101 = *(_DWORD *)(v9 + 24);
    v71[0] = 0;
    v71[1] = 0;
    uint64_t v72 = 0;
    sub_1004B8C24((uint64_t)v71, 5, v70);
    uint64_t v72 = v98;
    uint64_t v63 = sub_100050530();
    (*(void (**)(uint64_t, void *))(*(void *)v63 + 56))(v63, v71);
  }
  return v20;
}

uint64_t sub_1003F17C4(uint64_t a1, unsigned __int8 *a2, uint64_t a3, unsigned __int8 *a4)
{
  if (!*(unsigned char *)(a1 + 448)) {
    return 111;
  }
  int v7 = a4[4];
  int v8 = a4[1];
  int v9 = *a4;
  if (v9 == 1 && v8 == 121 && v7 == 1)
  {
    LOBYTE(dword_1009FB578) = 2;
    LOBYTE(v19.tm_sec) = 0;
    sub_10001B8E0(&v19);
    uint64_t v11 = sub_1000D88D4(a2, 4u, 5u, (unsigned __int8 *)&dword_1009FB578);
    if (v11 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762698();
    }
    goto LABEL_21;
  }
  if (v9 == 2 && v8 == 121 && v7 == 1)
  {
    LOBYTE(v19.tm_sec) = 0;
    sub_10001B8E0(&v19);
    uint64_t v11 = sub_1000D7BB8(a2, 2, 2 * ((5 * *(_WORD *)(a1 + 146)) & 0x7FFFu));
    if (v11 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762700();
    }
    goto LABEL_21;
  }
  if (v8 != 85) {
    return 0;
  }
  uint64_t v14 = fopen(aPrivateVarMobi_13, "a");
  if (v14)
  {
    uint64_t v15 = v14;
    memset(&v19, 0, sizeof(v19));
    time_t v20 = time(0);
    localtime_r(&v20, &v19);
    fprintf(v15, "%02d/%02d/%02d %02d:%02d:%02d : side = ", v19.tm_mon + 1, v19.tm_mday, v19.tm_year + 1900, v19.tm_hour, v19.tm_min, v19.tm_sec);
    if (v9 == 1)
    {
      uint64_t v16 = "Left, ";
      size_t v17 = 6;
    }
    else
    {
      uint64_t v16 = "Right, ";
      size_t v17 = 7;
    }
    fwrite(v16, v17, 1uLL, v15);
    fprintf(v15, "voltage = %dmV, current = %dmA, temperature = %dºC, level = %d%%\n", __rev16(*((unsigned __int16 *)a4 + 3)), __rev16(*((unsigned __int16 *)a4 + 4)), a4[10], a4[5]);
    fclose(v15);
    if (v9 == 1)
    {
      LOBYTE(v19.tm_sec) = 0;
      sub_10001B8E0(&v19);
      uint64_t v11 = sub_1000D88D4(a2, 4u, 7u, byte_1009FB645);
      if (v11 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_1007627EC();
      }
LABEL_21:
      sub_10001B8AC(&v19);
      return v11;
    }
    return 0;
  }
  uint64_t v18 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100762768(v18);
  }
  return 1;
}

void sub_1003F1A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003F1AA0(uint64_t a1, uint64_t a2, unsigned int a3, unsigned __int8 *a4)
{
  int v8 = *a4;
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AC988);
  }
  *(_DWORD *)long long buf = *(_DWORD *)a2;
  LOWORD(v77) = *(_WORD *)(a2 + 4);
  uint64_t v9 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  uint64_t v10 = sub_1003ED128(a1, a2);
  uint64_t v75 = 0;
  if (!*(unsigned char *)(a1 + 448)) {
    return 111;
  }
  uint64_t v11 = v10;
  if (v10)
  {
    unsigned int v12 = *(_DWORD *)(v10 + 24) - 8194;
    if (v12 <= 0xE && ((1 << v12) & 0x409B) != 0)
    {
      uint64_t v74 = v10;
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
      }
      sub_10028FEDC((uint64_t)off_1009F8098, v9, (int *)&v75 + 1, (int *)&v75);
      int v73 = v75;
      uint64_t v13 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        id v14 = *(id *)(v74 + 8);
        int v15 = *(_DWORD *)(v74 + 24);
        *(_DWORD *)long long buf = 138544386;
        uint64_t v77 = (uint64_t)v14;
        __int16 v78 = 1024;
        *(_DWORD *)char v79 = a3;
        *(_WORD *)&v79[4] = 1024;
        *(_DWORD *)&v79[6] = v73 != 3;
        __int16 v80 = 1024;
        int v81 = v15;
        __int16 v82 = 1024;
        int v83 = v8;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: %{public}@ leuint64_t n = %d, isUTPUp = %d, productId = %d, buddyRspSide = %d", buf, 0x24u);
      }
      uint64_t v16 = v74;
      if (a3 == 1 && v73 != 3 || a3 == 1 && *(_DWORD *)(v74 + 24) != 8194)
      {
        size_t v17 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          id v18 = *(id *)(v74 + 8);
          *(_DWORD *)long long buf = 138543362;
          uint64_t v77 = (uint64_t)v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "Warning: recvW1CrashTraceHandler: Flash in %{public}@ is busy. Retransmit Buddy command", buf, 0xCu);
        }
        sub_1003F3240(a1, a2);
        return 10;
      }
      if (a3 < 2)
      {
        int v31 = 0;
        int v32 = 0;
      }
      else
      {
        uint64_t v30 = a4 + 1;
        int v31 = sub_1003F3374(a1, a2, v8, v30, (unsigned __int16)(a3 - 1));
        int v32 = *v30;
        uint64_t v16 = v74;
      }
      int v36 = *(unsigned __int8 *)(a1 + 416);
      if (v8 == v36)
      {
        if ((a3 == 1 || v32 == 131 || v31 == 1) && *(_DWORD *)(v16 + 24) == 8194)
        {
          int v36 = v8;
          if (v73 != 3)
          {
            *(_DWORD *)(a1 + 418) = 0x10000;
            if (v8 == 1) {
              char v37 = 2;
            }
            else {
              char v37 = 1;
            }
            LOBYTE(dword_1009FB578) = v37;
            int v38 = *(unsigned __int8 *)(v16 + 40);
            if (v38 == 8)
            {
              uint64_t v41 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
              {
                id v42 = *(id *)(v16 + 8);
                *(_DWORD *)long long buf = 138543362;
                uint64_t v77 = (uint64_t)v42;
                _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Send request to %{public}@ for trace log", buf, 0xCu);
              }
              *(unsigned char *)(a1 + 407) = 0;
            }
            else if (v38 == 7)
            {
              unsigned int v39 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
              {
                id v40 = *(id *)(v16 + 8);
                *(_DWORD *)long long buf = 138543362;
                uint64_t v77 = (uint64_t)v40;
                _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Send request to %{public}@ to check crash log existence", buf, 0xCu);
              }
            }
            long long v43 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
            {
              id v44 = *(id *)(v74 + 8);
              *(_DWORD *)long long buf = 138543618;
              uint64_t v77 = (uint64_t)v44;
              __int16 v78 = 1024;
              *(_DWORD *)char v79 = dword_1009FB578;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Send TestEnable command to %{public}@ for the other side, side = %d", buf, 0x12u);
            }
            buf[0] = 0;
            sub_10001B8E0(buf);
            uint64_t v45 = v9 + 128;
            int v46 = sub_1000D88D4((unsigned __int8 *)(v9 + 128), 4u, 5u, (unsigned __int8 *)&dword_1009FB578);
            sub_10001B910(buf);
            dword_100A12C50 = dword_1009FB578;
            byte_100A12C54 = byte_1009FB57C;
            byte_100A12C59 = 5;
            __int16 v47 = *(_WORD *)(v45 + 4);
            *(_DWORD *)(a1 + 409) = *(_DWORD *)v45;
            *(_WORD *)(a1 + 413) = v47;
            *(unsigned char *)(a1 + 415) = 0;
            uint64_t v16 = v74;
            if (v46 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
            {
              sub_100762854();
              uint64_t v16 = v74;
            }
            sub_10001B8AC(buf);
            int v36 = *(unsigned __int8 *)(a1 + 416);
          }
        }
        else
        {
          int v36 = v8;
        }
      }
      if (v36 == 1) {
        int v48 = 2;
      }
      else {
        int v48 = 1;
      }
      if (v48 == v8 || *(_DWORD *)(v16 + 24) != 8194 || v73 == 3)
      {
        if (a3 != 1 && v32 != 131 && v31 != 1)
        {
          if (*(_DWORD *)(v16 + 24) != 8194 || *(unsigned char *)(v16 + 40) != 8) {
            return 0;
          }
          uint64_t v19 = 0;
          if (*(unsigned char *)(a1 + 408) || v32 != 121) {
            return v19;
          }
        }
        id v49 = [*(id *)(a1 + 424) count];
        int v50 = *(unsigned __int8 *)(v74 + 40);
        if ((unint64_t)v49 > *(unsigned __int8 *)(a1 + 432))
        {
          if (v50 == 8)
          {
            uint64_t v51 = *(void *)(a1 + 24);
            unsigned int v52 = qword_100A19E40;
            BOOL v53 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
            if (v51)
            {
              if (v53)
              {
                *(_WORD *)long long buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: TTR or Sysdiagnose - Trace Log Collection Completed", buf, 2u);
              }
              *(unsigned char *)(v74 + 40) = 5;
              return sub_1003EE2F0(a1, v74);
            }
            if (!v53) {
              goto LABEL_80;
            }
            *(_WORD *)long long buf = 0;
            id v54 = "recvW1CrashTraceHandler: Internal Settings - Trace Log Collection Completed";
          }
          else
          {
            unsigned int v52 = qword_100A19E40;
            if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_80;
            }
            *(_WORD *)long long buf = 0;
            id v54 = "recvW1CrashTraceHandler: Found crash in Audio Accessory device";
          }
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v54, buf, 2u);
LABEL_80:
          uint64_t v55 = sub_100035F54();
          if (((*(uint64_t (**)(uint64_t))(*(void *)v55 + 328))(v55) & 1) != 0
            || (uint64_t v56 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v56 + 384))(v56)))
          {
            uint8_t v57 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Triggering Tap-to-Radar popup", buf, 2u);
            }
            uint64_t v58 = sub_100052E70();
            int v59 = +[NSOrderedSet orderedSetWithOrderedSet:*(void *)(a1 + 424)];
            int v60 = *(unsigned __int8 *)(v74 + 40);
            uint64_t v61 = *(unsigned int *)(v74 + 24);
            id v62 = *(id *)v74;
            uint64_t v63 = +[NSString stringWithString:v62];
            (*(void (**)(uint64_t, void *, BOOL, uint64_t, void *))(*(void *)v58 + 152))(v58, v59, v60 == 7, v61, v63);

            uint64_t v19 = 0;
          }
          else
          {
            int v64 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
            {
              id v65 = [*(id *)(a1 + 424) count];
              *(_DWORD *)long long buf = 134217984;
              uint64_t v77 = (uint64_t)v65;
              _os_log_impl((void *)&_mh_execute_header, v64, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Have %ld logs, but cannot trigger non-iOS pop-up", buf, 0xCu);
            }
            uint64_t v19 = 2;
          }
          sub_1003F3C14(v74);
          uint64_t v66 = *(void *)(a1 + 40);
          uint64_t v67 = *(void *)(a1 + 48);
          if (v66 == v67) {
            goto LABEL_97;
          }
          int v68 = 0;
          do
          {
            unsigned int v69 = *(unsigned __int8 *)(*(void *)v66 + 40);
            BOOL v70 = v69 > 8;
            int v71 = (1 << v69) & 0x182;
            if (!v70 && v71 != 0) {
              ++v68;
            }
            v66 += 8;
          }
          while (v66 != v67);
          if (!v68) {
LABEL_97:
          }
            sub_1003EC468(a1);
          sub_1003EDE14(a1);
          return v19;
        }
        if (v50 != 8)
        {
          uint64_t v19 = 0;
          *(unsigned char *)(v74 + 40) = 0;
          return v19;
        }
      }
      return 0;
    }
    uint64_t v33 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      id v34 = *(id *)(v11 + 8);
      int v35 = *(_DWORD *)(v11 + 24);
      *(_DWORD *)long long buf = 138543618;
      uint64_t v77 = (uint64_t)v34;
      __int16 v78 = 1024;
      *(_DWORD *)char v79 = v35;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: %{public}@ productId = %d unsupported for legacy crash trace handling", buf, 0x12u);
    }
    return 2;
  }
  else
  {
    time_t v20 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = sub_10025B48C(a2, v21, v22, v23, v24, v25, v26, v27);
      *(_DWORD *)long long buf = 141558275;
      uint64_t v77 = 1752392040;
      __int16 v78 = 2081;
      *(void *)char v79 = v28;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "recvW1CrashTraceHandler: Invalid address %{private, mask.hash}s", buf, 0x16u);
    }
    return 8;
  }
}

void sub_1003F2458(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F2490(uint64_t a1, unsigned int *a2, unsigned int a3, unsigned __int8 *a4)
{
  uint64_t v8 = sub_1003ED128(a1, (uint64_t)a2);
  if (!a3 || !a4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762B98();
    }
    return 3;
  }
  uint64_t v9 = v8;
  if (v8)
  {
    uint64_t v10 = *(void **)(v8 + 32);
    if (!v10)
    {
LABEL_9:
      int v11 = *a4;
      switch(*a4)
      {
        case 0xFCu:
          if (a3 < 2)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
              sub_100762B64();
            }
            return 3;
          }
          if (a4[1] != 1)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
              sub_100762AF8();
            }
            return 3;
          }
          char v64 = 0;
          uint64_t v15 = sub_100017768();
          sub_10004191C(&buf, "AccessoryLogging");
          sub_10004191C(v66, "AccessoryLogDWRPopupKey");
          (*(void (**)(uint64_t, tm *, unsigned char *, char *))(*(void *)v15 + 72))(v15, &buf, v66, &v64);
          if (v67 < 0) {
            operator delete(*(void **)v66);
          }
          if (SHIBYTE(buf.tm_year) < 0) {
            operator delete(*(void **)&buf.tm_sec);
          }
          if (v64)
          {
            uint64_t v16 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf.tm_sec) = 0;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "recvLogHandler: Skipping DWR popup", (uint8_t *)&buf, 2u);
            }
            uint64_t result = 17;
          }
          else
          {
            uint64_t result = sub_1003F4D04(a1, a2, 5);
          }
          break;
        case 0xFDu:
          uint64_t result = sub_1003F49CC(a1, (uint64_t)a2);
          break;
        case 0xFEu:
          uint64_t result = sub_1003F47DC(a1, (uint64_t)a2, a3, (uint64_t)a4);
          break;
        case 0xFFu:
          uint64_t result = sub_1003F4508(a1, (uint64_t)a2);
          break;
        default:
          if (v11 != 6) {
            goto LABEL_29;
          }
          uint64_t result = sub_1003F3D40(a1, (uint64_t)a2, a3, (uint64_t)a4);
          break;
      }
      return result;
    }
    int v11 = *a4;
    if (v11 != 4)
    {
      unsigned int v12 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        id v13 = *(id *)(v9 + 8);
        buf.tm_sec = 138543362;
        *(void *)&buf.tm_miuint64_t n = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "recvLogHandler: Stopping inactivity timer for %{public}@", (uint8_t *)&buf, 0xCu);

        uint64_t v10 = *(void **)(v9 + 32);
      }
      [v10 invalidate];
      id v14 = *(void **)(v9 + 32);
      *(void *)(v9 + 32) = 0;

      goto LABEL_9;
    }
LABEL_29:
    if (a3 <= 2)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100762954(v9);
      }
      return 3;
    }
    if (a3 == 3)
    {
      uint64_t v25 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        id v26 = *(id *)(v9 + 8);
        int v27 = *a4;
        int v28 = a4[1];
        int v29 = a4[2];
        buf.tm_sec = 138544130;
        *(void *)&buf.tm_miuint64_t n = v26;
        LOWORD(buf.tm_mday) = 1024;
        *(int *)((char *)&buf.tm_mday + 2) = v27;
        HIWORD(buf.tm_mon) = 1024;
        buf.tm_year = v28;
        LOWORD(buf.tm_wday) = 1024;
        *(int *)((char *)&buf.tm_wday + 2) = v29;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "Warning: recvLogHandler: Ignoring data for %{public}@ shorter with only header: %02x %02x %02x", (uint8_t *)&buf, 0x1Eu);
      }
      return 3;
    }
    if (v11 == 4) {
      return sub_1003F4EE4(a1, (uint64_t)a2, a3, a4);
    }
    signed __int8 v30 = a4[1];
    int v31 = v30 & 0x7F;
    int v32 = v31;
    if (*(void *)(v9 + 64))
    {
LABEL_43:
      int v33 = *(unsigned __int8 *)(v9 + 72);
      if (v31 != v33)
      {
        id v34 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
        {
          uint64_t v59 = *(void *)(v9 + 48);
          buf.tm_sec = 138412802;
          *(void *)&buf.tm_miuint64_t n = v59;
          LOWORD(buf.tm_mday) = 1024;
          *(int *)((char *)&buf.tm_mday + 2) = v32;
          HIWORD(buf.tm_mon) = 1024;
          buf.tm_year = v33;
          _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "recvLogHandler: File %@ seq num mismatch rcvd %d expected %d", (uint8_t *)&buf, 0x18u);
          LOBYTE(v33) = *(unsigned char *)(v9 + 72);
        }
        *(unsigned char *)(v9 + 56) = 1;
        LOBYTE(v31) = v33;
      }
      *(unsigned char *)(v9 + 72) = (v31 + 1) & 0x7F;
      int v35 = *a4;
      int v36 = *(unsigned __int8 *)(v9 + 73);
      if (v35 != v36)
      {
        char v37 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
        {
          uint64_t v60 = *(void *)(v9 + 48);
          buf.tm_sec = 138412802;
          *(void *)&buf.tm_miuint64_t n = v60;
          LOWORD(buf.tm_mday) = 1024;
          *(int *)((char *)&buf.tm_mday + 2) = v35;
          HIWORD(buf.tm_mon) = 1024;
          buf.tm_year = v36;
          _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "recvLogHandler: File %@ log type mismatch rcvd %d expected %d", (uint8_t *)&buf, 0x18u);
        }
        *(unsigned char *)(v9 + 56) = 1;
      }
      int v38 = a4[2];
      int v39 = *(unsigned __int8 *)(v9 + 74);
      if (v38 != v39)
      {
        id v40 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
        {
          uint64_t v61 = *(void *)(v9 + 48);
          buf.tm_sec = 138412802;
          *(void *)&buf.tm_miuint64_t n = v61;
          LOWORD(buf.tm_mday) = 1024;
          *(int *)((char *)&buf.tm_mday + 2) = v38;
          HIWORD(buf.tm_mon) = 1024;
          buf.tm_year = v39;
          _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "recvLogHandler: File %@ log device mismatch rcvd %d expected %d", (uint8_t *)&buf, 0x18u);
        }
        *(unsigned char *)(v9 + 56) = 1;
      }
      fwrite(a4 + 3, 1uLL, a3 - 3, *(FILE **)(v9 + 64));
      if (v30 >= 0)
      {
        uint64_t v41 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v42 = *(void *)(v9 + 48);
          buf.tm_sec = 138412290;
          *(void *)&buf.tm_miuint64_t n = v42;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "recvLogHandler: Completed writing file %@", (uint8_t *)&buf, 0xCu);
        }
        sub_1003F5D24(v9);
      }
      return 0;
    }
    unsigned int v43 = *(unsigned __int8 *)(v9 + 40);
    if (v43 > 8 || ((1 << v43) & 0x182) == 0)
    {
      uint64_t v45 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        id v46 = *(id *)(v9 + 8);
        int v47 = *(unsigned __int8 *)(v9 + 40);
        int v48 = *a4;
        int v49 = a4[1];
        int v50 = a4[2];
        buf.tm_sec = 138544386;
        *(void *)&buf.tm_miuint64_t n = v46;
        LOWORD(buf.tm_mday) = 1024;
        *(int *)((char *)&buf.tm_mday + 2) = v47;
        HIWORD(buf.tm_mon) = 1024;
        buf.tm_year = v48;
        LOWORD(buf.tm_wday) = 1024;
        *(int *)((char *)&buf.tm_wday + 2) = v49;
        HIWORD(buf.tm_yday) = 1024;
        buf.tm_isdst = v50;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Warning: recvLogHandler: Refusing non-AWD log data from %{public}@ (status %d), header %02x %02x %02x", (uint8_t *)&buf, 0x24u);
      }
      return 6;
    }
    if ((v30 & 0x7F) != 0)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100762A70();
      }
    }
    else
    {
      *(unsigned char *)(v9 + 73) = v11;
      if (v11 == 1)
      {
        *(unsigned char *)(a1 + 34) = 1;
        char v44 = 7;
      }
      else
      {
        char v44 = 8;
      }
      *(unsigned char *)(v9 + 40) = v44;
      *(unsigned char *)(v9 + 74) = a4[2];
      memset(&buf, 0, sizeof(buf));
      uint64_t v51 = sub_1003F3200(v8, &buf);
      uint64_t v63 = sub_1003F5B30((uint64_t)v51, *(unsigned __int8 *)(v9 + 73));
      id v62 = sub_1003F5BB0((uint64_t)v63, *(unsigned __int8 *)(v9 + 74));
      if (qword_1009F80A0 != -1) {
        dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
      }
      unsigned int v52 = sub_100292ED4((uint64_t)off_1009F8098, v9 + 16);
      uint64_t v53 = +[NSString stringWithFormat:@"/private/var/mobile/Library/Logs/Bluetooth/Accessory%s_%s_%@_%04d-%02d-%02d-%02d-%02d-%02d.%s", v63, v62, v52, (buf.tm_year + 1900), (buf.tm_mon + 1), buf.tm_mday, buf.tm_hour, buf.tm_min, buf.tm_sec, sub_1003F5CA4((uint64_t)v52, *(unsigned __int8 *)(v9 + 73))];
      id v54 = *(void **)(v9 + 48);
      *(void *)(v9 + 48) = v53;

      *(void *)(v9 + 64) = fopen((const char *)[*(id *)(v9 + 48) UTF8String], "ab");
      *(unsigned char *)(v9 + 72) = 0;
      uint64_t v55 = *(void *)(v9 + 96);
      if (v55)
      {
        [*(id *)(v9 + 104) setObject:v55 forKey:*(void *)(v9 + 48)];
        uint64_t v56 = *(void **)(v9 + 96);
        *(void *)(v9 + 96) = 0;
      }
      uint8_t v57 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v58 = *(void *)(v9 + 48);
        *(_DWORD *)uint64_t v66 = 138412290;
        *(void *)&v66[4] = v58;
        _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "recvLogHandler: Opening file %@", v66, 0xCu);
      }
      if (*(void *)(v9 + 64))
      {
        int v32 = 0;
        goto LABEL_43;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_1007629DC();
      }
    }
    return 1;
  }
  uint64_t v18 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_1007628DC((uint64_t)a2, v18, v19, v20, v21, v22, v23, v24);
  }
  return 8;
}

void sub_1003F2DD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F2E2C(int a1, FILE *a2, uint64_t a3)
{
  return fprintf(a2, "  SCP Ver.......... %d.%d.%d.%d.%d.%d\n", *(unsigned __int8 *)(a3 + 57), *(unsigned __int8 *)(a3 + 58), *(unsigned __int8 *)(a3 + 59), *(unsigned __int8 *)(a3 + 60), *(unsigned __int8 *)(a3 + 61), *(unsigned __int8 *)(a3 + 62));
}

__n128 sub_1003F3060(int a1, char *a2, uint64_t a3)
{
  uint64_t v5 = a2 + 307;
  bzero(a2, 0x29AuLL);
  *(_WORD *)(a2 + 5) = *(_WORD *)a3;
  *(_WORD *)(a2 + 7) = *(_WORD *)(a3 + 2);
  *(_WORD *)(a2 + 9) = *(_WORD *)(a3 + 4);
  *(_DWORD *)(a2 + 11) = *(_DWORD *)(a3 + 6);
  *(_DWORD *)(a2 + 15) = *(_DWORD *)(a3 + 10);
  *(_DWORD *)(a2 + 19) = *(_DWORD *)(a3 + 14);
  *(_DWORD *)(a2 + 23) = *(_DWORD *)(a3 + 18);
  *(_DWORD *)(a2 + 27) = *(_DWORD *)(a3 + 22);
  *(_DWORD *)(a2 + 31) = *(_DWORD *)(a3 + 26);
  *(_DWORD *)(a2 + 35) = *(_DWORD *)(a3 + 30);
  *(_DWORD *)(a2 + 39) = *(_DWORD *)(a3 + 34);
  *(_DWORD *)(a2 + 43) = *(_DWORD *)(a3 + 38);
  *(_DWORD *)(a2 + 47) = *(_DWORD *)(a3 + 42);
  long long v6 = *(_OWORD *)(a3 + 46);
  long long v7 = *(_OWORD *)(a3 + 62);
  long long v8 = *(_OWORD *)(a3 + 78);
  *(_OWORD *)(a2 + 99) = *(_OWORD *)(a3 + 94);
  *(_OWORD *)(a2 + 83) = v8;
  *(_OWORD *)(a2 + 67) = v7;
  *(_OWORD *)(a2 + 51) = v6;
  long long v9 = *(_OWORD *)(a3 + 110);
  long long v10 = *(_OWORD *)(a3 + 126);
  long long v11 = *(_OWORD *)(a3 + 142);
  *(_OWORD *)(a2 + 163) = *(_OWORD *)(a3 + 158);
  *(_OWORD *)(a2 + 147) = v11;
  *(_OWORD *)(a2 + 131) = v10;
  *(_OWORD *)(a2 + 115) = v9;
  long long v12 = *(_OWORD *)(a3 + 174);
  long long v13 = *(_OWORD *)(a3 + 190);
  long long v14 = *(_OWORD *)(a3 + 206);
  *(_OWORD *)(a2 + 227) = *(_OWORD *)(a3 + 222);
  *(_OWORD *)(a2 + 211) = v14;
  *(_OWORD *)(a2 + 195) = v13;
  *(_OWORD *)(a2 + 179) = v12;
  long long v15 = *(_OWORD *)(a3 + 238);
  long long v16 = *(_OWORD *)(a3 + 254);
  long long v17 = *(_OWORD *)(a3 + 286);
  *(_OWORD *)(a2 + 275) = *(_OWORD *)(a3 + 270);
  *(_OWORD *)(a2 + 291) = v17;
  *(_OWORD *)(a2 + 259) = v16;
  *(_OWORD *)(a2 + 243) = v15;
  *(void *)uint64_t v5 = *(void *)(a3 + 302);
  uint64_t v18 = *(void *)(a3 + 310);
  *(_DWORD *)(a2 + 323) = *(_DWORD *)(a3 + 318);
  *(void *)(a2 + 315) = v18;
  uint64_t v19 = *(void *)(a3 + 322);
  *(_DWORD *)(a2 + 335) = *(_DWORD *)(a3 + 330);
  *(void *)(a2 + 327) = v19;
  long long v20 = *(_OWORD *)(a3 + 334);
  *(_DWORD *)(a2 + 357) = *(_DWORD *)(a3 + 350);
  *(_OWORD *)(a2 + 341) = v20;
  __n128 result = *(__n128 *)(a3 + 354);
  *(_OWORD *)(a2 + 373) = *(_OWORD *)(a3 + 366);
  *(__n128 *)(a2 + 361) = result;
  *((_WORD *)v5 + 16) = *(_WORD *)(a3 + 382);
  *((_WORD *)v5 + 41) = *(_WORD *)(a3 + 384);
  return result;
}

tm *sub_1003F3200(uint64_t a1, tm *a2)
{
  time_t v4 = time(0);
  return localtime_r(&v4, a2);
}

void sub_1003F3240(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003ED128(a1, a2);
  if (*(unsigned char *)(a1 + 448))
  {
    uint64_t v5 = v4;
    if (v4)
    {
      if (*(unsigned __int8 *)(a1 + 415) < 5u)
      {
        uint64_t v20 = sub_1004AF8EC();
        v21[0] = _NSConcreteStackBlock;
        v21[1] = 3221225472;
        void v21[2] = sub_1003F9C5C;
        void v21[3] = &unk_100997528;
        void v21[4] = a1;
        sub_1004AFF58(v20, 10000, v21);
      }
      else
      {
        uint64_t v6 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_100762C78(a1, v6, v7, v8, v9, v10, v11, v12);
        }
        *(unsigned char *)(v5 + 40) = 0;
      }
    }
    else
    {
      uint64_t v13 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100762C00(a2, v13, v14, v15, v16, v17, v18, v19);
      }
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100762BCC();
  }
}

uint64_t sub_1003F3374(uint64_t a1, uint64_t a2, int a3, unsigned __int8 *a4, unsigned int a5)
{
  int v10 = *a4;
  int v11 = a4[3];
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AC988);
  }
  memset(&v48, 0, sizeof(v48));
  LODWORD(v43[0]) = *(_DWORD *)a2;
  WORD2(v43[0]) = *(_WORD *)(a2 + 4);
  uint64_t v12 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)v43, 1);
  uint64_t v13 = sub_1003ED128(a1, a2);
  if (v12) {
    BOOL v14 = v13 == 0;
  }
  else {
    BOOL v14 = 1;
  }
  if (!v14)
  {
    uint64_t v23 = v13;
    if (v10 == 133)
    {
      if (*(unsigned char *)(a1 + 407) && *(unsigned char *)(v13 + 40) == 8 && *(unsigned __int8 *)(a1 + 416) != a3)
      {
        uint64_t result = 0;
        *(unsigned char *)(a1 + 408) = 1;
        return result;
      }
      goto LABEL_15;
    }
    if (v10 == 129)
    {
      int v24 = 1;
LABEL_18:
      v43[0] = time(0);
      localtime_r(v43, &v48);
      tm v47 = v48;
      sub_1003FA25C(a1, (uint64_t)&unk_100A12C5A, a2, 1);
      tm v46 = v48;
      sub_1003FA25C(a1, (uint64_t)&unk_100A12D5A, a2, 2);
      if (*(unsigned char *)(v23 + 40) == 7)
      {
        tm v45 = v48;
        sub_1003FA25C(a1, (uint64_t)&unk_100A12E5A, a2, 3);
      }
      if (*(_DWORD *)(v23 + 24) == 8201)
      {
        tm v44 = v48;
        sub_1003FA25C(a1, (uint64_t)&unk_100A12F5A, a2, 8);
      }
      if (v11 == 1) {
        char v25 = v24;
      }
      else {
        char v25 = 0;
      }
      if (v10 == 133 || (v25 & 1) != 0)
      {
        if (v10 == 133)
        {
          sleep(5u);
          goto LABEL_42;
        }
      }
      else
      {
        uint64_t result = 1;
        if (v10 != 121 || v11 != 1 || *(unsigned char *)(a1 + 407) || *(unsigned char *)(v23 + 40) != 8) {
          return result;
        }
      }
      if (v24)
      {
        v43[0] = 0;
        v43[1] = 0;
        sub_1004B8C24((uint64_t)v43, 0, v12);
        uint64_t v26 = sub_100050530();
        (*(void (**)(uint64_t, time_t *))(*(void *)v26 + 56))(v26, v43);
      }
LABEL_42:
      unsigned int v27 = *(unsigned __int16 *)(a1 + 418);
      int v28 = *(unsigned __int8 *)(a1 + 420);
LABEL_43:
      sub_1003F9E50(a1, a2, 3, a3, v27, 246, v28);
      uint64_t result = 0;
      __int16 v29 = *(_WORD *)(a1 + 418) + 246;
      goto LABEL_44;
    }
    if (v10 == 121 && v11 == 1)
    {
      if (!*(unsigned char *)(a1 + 407) && *(unsigned char *)(v13 + 40) == 8 && *(unsigned char *)(a1 + 408))
      {
LABEL_15:
        int v24 = 0;
        goto LABEL_18;
      }
LABEL_47:
      int v30 = *(unsigned __int8 *)(v13 + 40);
      if (v30 == 8)
      {
        if (*(unsigned char *)(a1 + 407))
        {
          sub_1003F9E50(a1, a2, 5, a3, 0, 0, 0);
          uint64_t result = 0;
          if (*(_DWORD *)(v23 + 24) != 8194) {
            return result;
          }
          sleep(1u);
          if (a3 == 1) {
            int v34 = 2;
          }
          else {
            int v34 = 1;
          }
          uint64_t v31 = a1;
          uint64_t v32 = a2;
          int v33 = 5;
          goto LABEL_71;
        }
      }
      else if (v30 == 7)
      {
        if (*(unsigned char *)(a1 + 141) != 8)
        {
          uint64_t v31 = a1;
          uint64_t v32 = a2;
          int v33 = 6;
LABEL_70:
          int v34 = a3;
LABEL_71:
          sub_1003F9E50(v31, v32, v33, v34, 0, 0, 0);
          return 0;
        }
        goto LABEL_67;
      }
      return 0;
    }
    if (v10 == 121)
    {
      if (v11 == 1) {
        goto LABEL_47;
      }
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100762D0C();
      }
      return 1;
    }
    uint64_t result = 0;
    if (v10 > 134)
    {
      if (v10 == 139)
      {
LABEL_68:
        uint64_t v31 = a1;
        uint64_t v32 = a2;
        int v33 = 2;
        goto LABEL_70;
      }
      if (v10 != 135) {
        return result;
      }
LABEL_67:
      if (*(_DWORD *)(a1 + 142) != 100000)
      {
        uint64_t v31 = a1;
        uint64_t v32 = a2;
        int v33 = 7;
        goto LABEL_70;
      }
      goto LABEL_68;
    }
    if (v10 != 123)
    {
      if (v10 != 131) {
        return result;
      }
      usleep(0x7A120u);
      return 0;
    }
    if (v11 != 1) {
      return 1;
    }
    usleep(0x186A0u);
    unsigned int v35 = *(unsigned __int16 *)(a1 + 420) - 1;
    if (v35 <= 8
      && ((0x187u >> v35) & 1) != 0
      && (int v36 = fopen((const char *)*(&off_1009ACA10 + (__int16)v35), "ab")) != 0)
    {
      char v37 = v36;
      fwrite(a4 + 4, 1uLL, a5 - 4, v36);
      fclose(v37);
    }
    else
    {
      int v38 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100762D40(v38);
      }
    }
    unsigned int v39 = *(unsigned __int16 *)(a1 + 420);
    switch(*(_WORD *)(a1 + 420))
    {
      case 1:
        if (*(_WORD *)(a1 + 418) == 0x2000)
        {
          LOWORD(v39) = 2;
          goto LABEL_87;
        }
        unsigned int v39 = 1;
        goto LABEL_111;
      case 2:
        if (*(_WORD *)(a1 + 418) != 4096)
        {
          LOBYTE(v39) = 2;
          goto LABEL_117;
        }
        sub_1003FA4CC(a1, (uint64_t)&unk_100A12C5A);
        sub_1003FA4CC(a1, (uint64_t)&unk_100A12D5A);
        if (*(unsigned char *)(v23 + 40) == 7)
        {
          LOWORD(v39) = 3;
LABEL_87:
          unsigned int v27 = 0;
          *(_WORD *)(a1 + 420) = v39;
          *(_WORD *)(a1 + 418) = 0;
          goto LABEL_118;
        }
        if (*(_DWORD *)(v23 + 24) != 8201) {
          goto LABEL_107;
        }
        goto LABEL_105;
      case 3:
        if (*(_WORD *)(a1 + 418) != 4096)
        {
          LOBYTE(v39) = 3;
          goto LABEL_117;
        }
        sub_1003FA4CC(a1, (uint64_t)&unk_100A12E5A);
        if (*(_DWORD *)(v23 + 24) != 8201) {
          goto LABEL_107;
        }
        id v40 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v43[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "Start logging for MCU1", (uint8_t *)v43, 2u);
        }
LABEL_105:
        *(_DWORD *)(a1 + 418) = 0x80000;
LABEL_106:
        unsigned int v39 = 8;
        goto LABEL_111;
      case 8:
        if (*(_WORD *)(a1 + 418) != 0x2000) {
          goto LABEL_106;
        }
        sub_1003FA4CC(a1, (uint64_t)&unk_100A12F5A);
        if (*(_DWORD *)(v23 + 24) != 8201) {
          goto LABEL_108;
        }
        uint64_t v41 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v43[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "Log collection for MCU1 is completed.", (uint8_t *)v43, 2u);
        }
        goto LABEL_107;
      case 9:
        if (*(_WORD *)(a1 + 418) == 0x2000)
        {
          uint64_t v42 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v43[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "Log collection for MCU1 and MCU2 are completed.", (uint8_t *)v43, 2u);
          }
          sub_1003FA4CC(a1, (uint64_t)&unk_100A1305A);
LABEL_107:
          sub_1003F9E50(a1, a2, 4, a3, 0, 0, 0);
LABEL_108:
          unsigned int v39 = *(unsigned __int16 *)(a1 + 420);
LABEL_109:
          if (v39 > 9 || ((1 << v39) & 0x302) == 0)
          {
LABEL_112:
            if (v39 <= 9 && ((1 << v39) & 0x302) != 0 && *(_WORD *)(a1 + 418) == 8118)
            {
              sub_1003F9E50(a1, a2, 3, a3, 8118, 74, v39);
              uint64_t result = 0;
              __int16 v29 = *(_WORD *)(a1 + 418) + 74;
              goto LABEL_44;
            }
            if ((v39 & 0xFFFE) != 2) {
              return 0;
            }
LABEL_117:
            unsigned int v27 = *(unsigned __int16 *)(a1 + 418);
            if (v27 > 0xF5F)
            {
              if (v27 == 3936)
              {
                sub_1003F9E50(a1, a2, 3, a3, 3936, 160, v39);
                uint64_t result = 0;
                __int16 v29 = *(_WORD *)(a1 + 418) + 160;
LABEL_44:
                *(_WORD *)(a1 + 418) = v29;
                return result;
              }
              return 0;
            }
LABEL_118:
            int v28 = v39;
            goto LABEL_43;
          }
        }
        else
        {
          unsigned int v39 = 9;
        }
LABEL_111:
        unsigned int v27 = *(unsigned __int16 *)(a1 + 418);
        if (v27 >> 1 <= 0xFDA) {
          goto LABEL_118;
        }
        goto LABEL_112;
      default:
        goto LABEL_109;
    }
  }
  uint64_t v15 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100762DC4(a2, v15, v16, v17, v18, v19, v20, v21);
  }
  return 8;
}

id sub_1003F3C14(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  uint64_t v2 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = 0;

  *(unsigned char *)(a1 + 40) = 0;
  uint64_t v3 = *(void **)(a1 + 48);
  *(void *)(a1 + 48) = 0;

  *(unsigned char *)(a1 + 56) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v4 = *(FILE **)(a1 + 64);
  if (v4) {
    fclose(v4);
  }
  *(void *)(a1 + 64) = 0;
  *(_WORD *)(a1 + 72) = -256;
  *(unsigned char *)(a1 + 74) = -1;
  [*(id *)(a1 + 80) removeAllObjects];
  uint64_t v5 = *(void **)(a1 + 96);
  *(void *)(a1 + 96) = 0;

  [*(id *)(a1 + 104) removeAllObjects];
  unsigned int v6 = *(_DWORD *)(a1 + 24) - 8194;
  if (v6 > 0xE || ((1 << v6) & 0x409B) == 0)
  {
    uint64_t v8 = *(void **)(a1 + 80);
    if (qword_1009F80A0 != -1) {
      dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
    }
    uint64_t v9 = sub_100293198((uint64_t)off_1009F8098, a1 + 16);
    [v8 addObject:v9];
  }
  id result = [*(id *)(a1 + 80) count];
  *(unsigned char *)(a1 + 88) = (_BYTE)result;
  return result;
}

void sub_1003F3D30(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F3D40(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A12C48, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A12C48))
  {
    qword_100A12C40 = +[NSDate dateWithTimeIntervalSince1970:315572400.0];
    __cxa_guard_release(&qword_100A12C48);
  }
  uint64_t v7 = sub_1003ED128(a1, a2);
  int v60 = *(_DWORD *)a2;
  __int16 v61 = *(_WORD *)(a2 + 4);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AC988);
  }
  uint64_t v8 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v60, 0);
  char v59 = 0;
  uint64_t v9 = sub_100017768();
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(__p, "AccessoryLogCrashPopupKey");
  (*(void (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v9 + 72))(v9, buf, __p, &v59);
  if (v58 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(*(void **)buf);
  }
  sub_100475EE0(v8, (uint64_t)buf);
  if (v65 >= 0) {
    int v10 = buf;
  }
  else {
    int v10 = *(unsigned char **)buf;
  }
  int v55 = *(_DWORD *)a2;
  __int16 v56 = *(_WORD *)(a2 + 4);
  sub_1004A82EC((unsigned __int8 *)&v55, __p);
  if (v58 >= 0) {
    int v11 = __p;
  }
  else {
    int v11 = (void **)__p[0];
  }
  uint64_t v12 = +[NSString stringWithUTF8String:v11];
  uint64_t v13 = +[NSString stringWithFormat:@"Accessory %s %@ crashed before this connection, it might appear as a timeout or remote terminated connection", v10, v12];

  if (v58 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(*(void **)buf);
  }
  id v14 = v13;
  sub_10011631C((const char *)[v14 UTF8String]);
  if (v7)
  {
    if (*(unsigned char *)(a1 + 32) || (unsigned int v15 = *(unsigned __int8 *)(v7 + 40), v15 <= 8) && ((1 << v15) & 0x182) != 0)
    {
      uint64_t v16 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        id v17 = *(id *)(v7 + 8);
        int v18 = *(unsigned __int8 *)(a1 + 32);
        int v19 = *(unsigned __int8 *)(v7 + 40);
        *(_DWORD *)tm buf = 138543874;
        *(void *)&uint8_t buf[4] = v17;
        *(_WORD *)&unsigned char buf[12] = 1024;
        int v63 = v18;
        __int16 v64 = 1024;
        int v65 = v19;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "Warning: recvCrashAvailableHandler: Refusing crash log available from %{public}@ (busy %d) (status %d)", buf, 0x18u);
      }
      uint64_t v20 = 10;
      goto LABEL_28;
    }
    uint64_t v30 = sub_100017768();
    int v31 = (*(uint64_t (**)(uint64_t))(*(void *)v30 + 8))(v30);
    if (v59) {
      int v32 = 0;
    }
    else {
      int v32 = v31;
    }
    if (v32 != 1 || !sub_100480504(v8) && (sub_1003ED438() & 1) == 0)
    {
      unsigned int v39 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v40 = sub_100017768();
        int v41 = (*(uint64_t (**)(uint64_t))(*(void *)v40 + 8))(v40);
        if (sub_100480504(v8)) {
          int v42 = 1;
        }
        else {
          int v42 = sub_1003ED438();
        }
        *(_DWORD *)tm buf = 67109376;
        *(_DWORD *)&uint8_t buf[4] = v41;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v42;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "recvCrashAvailableHandler: Dismissing; internal build %d, AACP stored logging possible %d",
          buf,
          0xEu);
      }
      goto LABEL_56;
    }
    uint64_t v33 = sub_100035F54();
    if (((*(uint64_t (**)(uint64_t))(*(void *)v33 + 328))(v33) & 1) == 0)
    {
      uint64_t v34 = sub_100035F54();
      if (((*(uint64_t (**)(uint64_t))(*(void *)v34 + 384))(v34) & 1) == 0)
      {
        uint64_t v35 = sub_100035F54();
        if (((*(uint64_t (**)(uint64_t))(*(void *)v35 + 424))(v35) & 1) == 0)
        {
          uint64_t v53 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)tm buf = 0;
            uint64_t v20 = 2;
            _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "recvCrashAvailableHandler: Ignoring available crash (unsupported platform)", buf, 2u);
          }
          else
          {
            uint64_t v20 = 2;
          }
          goto LABEL_28;
        }
      }
    }
    [(id)qword_100A12C40 timeIntervalSinceNow];
    double v37 = v36;
    if (v36 < 0.0 && v36 > -60.0)
    {
      int v38 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)tm buf = 134217984;
        *(double *)&uint8_t buf[4] = -v37;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "recvCrashAvailableHandler: Suppressing crash notification (%f seconds elapsed)", buf, 0xCu);
      }
LABEL_56:
      uint64_t v20 = sub_1003ED54C(a1, a2, 6, 1u);
      goto LABEL_28;
    }
    uint64_t v43 = +[NSDate date];
    tm v44 = (void *)qword_100A12C40;
    qword_100A12C40 = v43;

    uint64_t v46 = sub_1003F5F34(v45, a3, a4);
    tm v47 = *(void **)(v7 + 96);
    *(void *)(v7 + 96) = v46;

    tm v48 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      id v49 = *(id *)(v7 + 8);
      *(_DWORD *)tm buf = 138543362;
      *(void *)&uint8_t buf[4] = v49;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "recvCrashAvailableHandler: Crash log from %{public}@ available, informing user", buf, 0xCu);
    }
    sub_100480344(v8, 0xAu, buf);
    if (v65 >= 0) {
      int v50 = buf;
    }
    else {
      int v50 = *(unsigned char **)buf;
    }
    uint64_t v51 = +[NSString stringWithUTF8String:v50];
    if (SHIBYTE(v65) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v52 = sub_100052E70();
    (*(void (**)(uint64_t, unint64_t, void, void, void *))(*(void *)v52 + 144))(v52, *(unsigned int *)(v7 + 16) | ((unint64_t)*(unsigned __int16 *)(v7 + 20) << 32), *(unsigned int *)(v7 + 24), *(void *)v7, v51);

    uint64_t v20 = 0;
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      uint64_t v28 = sub_10025B48C(a2, v21, v22, v23, v24, v25, v26, v27);
      sub_100762E3C(v28, (uint64_t)buf);
    }
    uint64_t v20 = 8;
  }
LABEL_28:

  return v20;
}

void sub_1003F4460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

uint64_t sub_1003F4508(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1003ED128(a1, a2);
  if (v4)
  {
    uint64_t v5 = v4;
    unsigned int v6 = *(unsigned __int8 *)(v4 + 40);
    BOOL v7 = v6 > 8;
    int v8 = (1 << v6) & 0x182;
    if (v7 || v8 == 0)
    {
      uint64_t v24 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = *(void **)(v5 + 8);
        int v26 = *(unsigned __int8 *)(v5 + 40);
        int v32 = 138543618;
        id v33 = v25;
        __int16 v34 = 1024;
        LODWORD(v35) = v26;
        id v27 = v25;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Warning: recvLogCompleteHandler: Refusing log complete from %{public}@ (status %d)", (uint8_t *)&v32, 0x12u);
      }
      return 6;
    }
    else
    {
      if (*(void *)(v4 + 64))
      {
        int v10 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          int v11 = *(void **)(v5 + 48);
          int v32 = 138412290;
          id v33 = v11;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: recvLogCompleteHandler: Received log complete while %@ still open; still sending possibly corrupted file",
            (uint8_t *)&v32,
            0xCu);
        }
        *(unsigned char *)(v5 + 56) = 1;
        sub_1003F5D24(v5);
        uint64_t v12 = 1;
      }
      else
      {
        uint64_t v12 = 0;
      }
      id v20 = [*(id *)(v5 + 80) count];
      uint64_t v21 = qword_100A19E40;
      if ((unint64_t)v20 <= *(unsigned __int8 *)(v5 + 88))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
        {
          __int16 v29 = *(void **)(v5 + 8);
          int v30 = *(unsigned __int8 *)(v5 + 40);
          int v32 = 138543618;
          id v33 = v29;
          __int16 v34 = 1024;
          LODWORD(v35) = v30;
          id v31 = v29;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "recvLogCompleteHandler: %{public}@ reports no log file to send (status %d)", (uint8_t *)&v32, 0x12u);

          uint64_t v21 = qword_100A19E40;
        }
        uint64_t v12 = 12;
      }
      *(unsigned char *)(v5 + 40) = 5;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        id v22 = *(id *)(v5 + 8);
        id v23 = [*(id *)(v5 + 80) count];
        int v32 = 138543618;
        id v33 = v22;
        __int16 v34 = 2048;
        id v35 = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "recvLogCompleteHandler: %{public}@ session complete, file count %lu", (uint8_t *)&v32, 0x16u);
      }
      sub_1003EE2F0(a1, v5);
    }
  }
  else
  {
    uint64_t v13 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762E78(a2, v13, v14, v15, v16, v17, v18, v19);
    }
    return 8;
  }
  return v12;
}

void sub_1003F47C4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F47DC(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = sub_1003ED128(a1, a2);
  if (v8)
  {
    uint64_t v9 = v8;
    if (!*(unsigned char *)(a1 + 32)
      && ((unsigned int v10 = *(unsigned __int8 *)(v8 + 40), v11 = v10 >= 8, v13 = v10 == 8, v12 = (1 << v10) & 0x182, v13 || !v11)
        ? (BOOL v13 = v12 == 0)
        : (BOOL v13 = 1),
          v13))
    {
      uint64_t v26 = sub_1003F5F34(v8, a3, a4);
      id v27 = *(void **)(v9 + 96);
      *(void *)(v9 + 96) = v26;

      uint64_t v28 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        id v29 = *(id *)(v9 + 8);
        int v30 = 138543362;
        id v31 = v29;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "recvLogForceSendHandler: Device %{public}@ initiating forced logging session", (uint8_t *)&v30, 0xCu);
      }
      *(unsigned char *)(a1 + 33) = 1;
      sub_1003EE094(a1, v9);
      return 0;
    }
    else
    {
      uint64_t v14 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        id v15 = *(id *)(v9 + 8);
        int v16 = *(unsigned __int8 *)(a1 + 32);
        int v17 = *(unsigned __int8 *)(v9 + 40);
        int v30 = 138543874;
        id v31 = v15;
        __int16 v32 = 1024;
        int v33 = v16;
        __int16 v34 = 1024;
        int v35 = v17;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "Warning: recvLogForceSendHandler: Refusing log force send from %{public}@ (busy %d) (status %d)", (uint8_t *)&v30, 0x18u);
      }
      return 2;
    }
  }
  else
  {
    uint64_t v19 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100762EF0(a2, v19, v20, v21, v22, v23, v24, v25);
    }
    return 8;
  }
}

uint64_t sub_1003F49CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_1003ED128(a1, a2);
  uint64_t v4 = sub_100017768();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v4 + 8))(v4)) {
    return 2;
  }
  uint64_t v5 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v5 + 328))(v5)) {
    return 2;
  }
  uint64_t v6 = sub_100035F54();
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v6 + 424))(v6)) {
    return 2;
  }
  if (*(unsigned char *)(a1 + 32) || (unsigned int v7 = *(unsigned __int8 *)(v3 + 40), v7 <= 8) && ((1 << v7) & 0x182) != 0)
  {
    uint64_t v8 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      id v9 = *(id *)(v3 + 8);
      int v10 = *(unsigned __int8 *)(a1 + 32);
      int v11 = *(unsigned __int8 *)(v3 + 40);
      *(_DWORD *)tm buf = 138543874;
      *(void *)&uint8_t buf[4] = v9;
      __int16 v22 = 1024;
      int v23 = v10;
      __int16 v24 = 1024;
      int v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: recvStoredLogAvailableHandler: Refusing stored log available from %{public}@ (busy %d) (status %d)", buf, 0x18u);
    }
    return 10;
  }
  else
  {
    char v20 = 0;
    uint64_t v13 = sub_100017768();
    sub_10004191C(buf, "AccessoryLogging");
    sub_10004191C(__p, "SuppressAllPopups");
    int v14 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, char *))(*(void *)v13 + 72))(v13, buf, __p, &v20);
    if (v20) {
      int v15 = v14;
    }
    else {
      int v15 = 0;
    }
    if (v19 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v25) < 0) {
      operator delete(*(void **)buf);
    }
    if (v15)
    {
      uint64_t v16 = sub_100017768();
      sub_10004191C(buf, "AccessoryLogging");
      sub_10004191C(__p, "StoredLogAvailable");
      (*(void (**)(uint64_t, unsigned char *, void **, uint64_t))(*(void *)v16 + 80))(v16, buf, __p, 1);
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      uint64_t v17 = sub_100052E70();
      (*(void (**)(uint64_t, void, uint64_t, void))(*(void *)v17 + 168))(v17, 0, 3, *(unsigned int *)(v3 + 24));
    }
    return 0;
  }
}

void sub_1003F4CC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003F4D04(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v5 = sub_1003ED128(a1, (uint64_t)a2);
  int v20 = *a2;
  __int16 v21 = *((_WORD *)a2 + 2);
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AC988);
  }
  uint64_t v6 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v20, 0);
  uint64_t v7 = *(void *)sub_100035F54();
  if ((*(uint64_t (**)(void))(v7 + 328))())
  {
    if (sub_100480504(v6) || (sub_1003ED438() & 1) != 0)
    {
      if (v5)
      {
        uint64_t v8 = sub_100052E70();
        (*(void (**)(uint64_t, unint64_t, uint64_t, void))(*(void *)v8 + 160))(v8, *a2 | ((unint64_t)*((unsigned __int16 *)a2 + 2) << 32), a3, *(unsigned int *)(v5 + 24));
        return 0;
      }
      else
      {
        uint64_t v11 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_100762F68((uint64_t)a2, v11, v12, v13, v14, v15, v16, v17);
        }
        return 8;
      }
    }
    else
    {
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100762FE0();
      }
      return 11;
    }
  }
  else
  {
    int v10 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v19 = 0;
      uint64_t v9 = 2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Warning: recvFileRadarRequestHandler: Only supported on iOS", v19, 2u);
    }
    else
    {
      return 2;
    }
  }
  return v9;
}

uint64_t sub_1003F4EE4(uint64_t a1, uint64_t a2, unsigned int a3, unsigned char *a4)
{
  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009AC988);
  }
  *(_DWORD *)tm buf = *(_DWORD *)a2;
  LOWORD(v59) = *(_WORD *)(a2 + 4);
  uint64_t v7 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
  unsigned __int16 v8 = a3 - 4;
  if (a3 <= 4)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100763014();
    }
    return 3;
  }
  uint64_t v9 = a4[3] & 0x3F;
  if (v9 >= 0x20)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076307C();
    }
    return 2;
  }
  uint64_t v11 = a4[5];
  if ((v11 - 1) > 0xA)
  {
    int v12 = 0;
LABEL_21:
    int v20 = qword_100A19E40;
    BOOL v21 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR);
    if (v21)
    {
      __int16 v22 = sub_1003F6154(v21, v9);
      *(_DWORD *)tm buf = 67110146;
      int v59 = v9;
      __int16 v60 = 2080;
      __int16 v61 = v22;
      __int16 v62 = 1024;
      *(_DWORD *)int v63 = v11;
      *(_WORD *)&v63[4] = 1024;
      *(_DWORD *)&v63[6] = v12;
      __int16 v64 = 1024;
      int v65 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "recvAwdHandler: Unexpected AWD data length for awdDataType: %u (%s), awdVersion %u: expected len %u actual %u", buf, 0x24u);
    }
    return 3;
  }
  int v12 = word_1007BD8B8[32 * v11 + v9];
  if (v12 != v8) {
    goto LABEL_21;
  }
  uint64_t v13 = v7;
  int v14 = *(unsigned __int16 *)(v7 + 986);
  uint64_t v15 = qword_100A19E40;
  BOOL v16 = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT);
  if (v16)
  {
    uint64_t v17 = sub_1003F6154(v16, v9);
    *(_DWORD *)tm buf = 67109634;
    int v59 = v9;
    __int16 v60 = 2080;
    __int16 v61 = v17;
    __int16 v62 = 1024;
    *(_DWORD *)int v63 = v11;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "recvAwdHandler: awdDataType = %u (%s), awdVersiouint64_t n = %u", buf, 0x18u);
  }
  uint64_t result = 0;
  uint64_t v18 = a4 + 4;
  switch((int)v9)
  {
    case 0:
      if (v8 <= 0x299u) {
        size_t v19 = 666 - v8;
      }
      else {
        size_t v19 = 0;
      }
      bzero(&buf[v8], v19);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      sub_1004B8C24((uint64_t)&v55, 5, v13);
      uint8_t v57 = buf;
      if (v14) {
        v68 |= v14;
      }
      goto LABEL_61;
    case 1:
      if (v8 <= 0x312u) {
        size_t v23 = 787 - v8;
      }
      else {
        size_t v23 = 0;
      }
      bzero(&buf[v8], v23);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v24 = 6;
      goto LABEL_60;
    case 2:
      if (v8 <= 0x9Fu) {
        size_t v25 = 160 - v8;
      }
      else {
        size_t v25 = 0;
      }
      bzero(&buf[v8], v25);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      sub_1004B8C24((uint64_t)&v55, 7, v13);
      uint8_t v57 = buf;
      if (v14) {
        v67 |= v14;
      }
      goto LABEL_61;
    case 3:
      if (v8 <= 0x3Eu) {
        size_t v26 = 63 - v8;
      }
      else {
        size_t v26 = 0;
      }
      bzero(&buf[v8], v26);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      sub_1004B8C24((uint64_t)&v55, 8, v13);
      uint8_t v57 = buf;
      if (v14) {
        v66 |= v14;
      }
      goto LABEL_61;
    case 4:
      if (v8 <= 0x36u) {
        size_t v27 = 55 - v8;
      }
      else {
        size_t v27 = 0;
      }
      bzero(&buf[v8], v27);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v24 = 9;
      goto LABEL_60;
    case 5:
      if (v8 <= 0x161u) {
        size_t v28 = 354 - v8;
      }
      else {
        size_t v28 = 0;
      }
      bzero(&buf[v8], v28);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      sub_1004B8C24((uint64_t)&v55, 10, v13);
      uint8_t v57 = buf;
      if (v14) {
        *(_DWORD *)&v63[3] |= v14;
      }
      goto LABEL_61;
    case 6:
      if (v8 <= 0xB8u) {
        size_t v29 = 185 - v8;
      }
      else {
        size_t v29 = 0;
      }
      bzero(&buf[v8], v29);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      sub_1004B8C24((uint64_t)&v55, 11, v13);
      uint8_t v57 = buf;
      if (v14) {
        *(_DWORD *)v63 |= v14;
      }
      goto LABEL_61;
    case 7:
      if (v8 <= 0xB0u) {
        size_t v30 = 177 - v8;
      }
      else {
        size_t v30 = 0;
      }
      bzero(&buf[v8], v30);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v24 = 12;
      goto LABEL_60;
    case 8:
      if (v8 <= 0xF9u) {
        size_t v31 = 250 - v8;
      }
      else {
        size_t v31 = 0;
      }
      bzero(&buf[v8], v31);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v24 = 13;
LABEL_60:
      sub_1004B8C24((uint64_t)&v55, v24, v13);
      uint8_t v57 = buf;
LABEL_61:
      uint64_t v32 = sub_100050530();
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v32 + 56))(v32, &v55);
      goto LABEL_144;
    case 9:
      if (v8 <= 0x3ADu) {
        size_t v33 = 942 - v8;
      }
      else {
        size_t v33 = 0;
      }
      bzero(&buf[v8], v33);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 14;
      goto LABEL_143;
    case 10:
      if (v8 <= 0x224u) {
        size_t v35 = 549 - v8;
      }
      else {
        size_t v35 = 0;
      }
      bzero(&buf[v8], v35);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 15;
      goto LABEL_143;
    case 11:
      if (v8 <= 0x5Du) {
        size_t v36 = 94 - v8;
      }
      else {
        size_t v36 = 0;
      }
      bzero(&buf[v8], v36);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 16;
      goto LABEL_143;
    case 13:
      if (v8 <= 0x6Fu) {
        size_t v37 = 112 - v8;
      }
      else {
        size_t v37 = 0;
      }
      bzero(&buf[v8], v37);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 18;
      goto LABEL_143;
    case 14:
      if (v8 <= 0x8Au) {
        size_t v38 = 139 - v8;
      }
      else {
        size_t v38 = 0;
      }
      bzero(&buf[v8], v38);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 19;
      goto LABEL_143;
    case 15:
      if (v8 <= 0x3Bu) {
        size_t v39 = 60 - v8;
      }
      else {
        size_t v39 = 0;
      }
      bzero(&buf[v8], v39);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 20;
      goto LABEL_143;
    case 16:
      if (v8 <= 0x2Du) {
        size_t v40 = 46 - v8;
      }
      else {
        size_t v40 = 0;
      }
      bzero(&buf[v8], v40);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 21;
      goto LABEL_143;
    case 17:
      if (v8 <= 0x21Eu) {
        size_t v41 = 543 - v8;
      }
      else {
        size_t v41 = 0;
      }
      bzero(&buf[v8], v41);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      sub_1004B8C24((uint64_t)&v55, 22, v13);
      uint8_t v57 = buf;
      if (v14) {
        *(_DWORD *)&v63[3] |= v14;
      }
      goto LABEL_144;
    case 18:
      if (v8 <= 0x2A8u) {
        size_t v42 = 681 - v8;
      }
      else {
        size_t v42 = 0;
      }
      bzero(&buf[v8], v42);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 23;
      goto LABEL_143;
    case 19:
      if (v8 <= 0x2Du) {
        size_t v43 = 46 - v8;
      }
      else {
        size_t v43 = 0;
      }
      bzero(&buf[v8], v43);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 24;
      goto LABEL_143;
    case 20:
      if (v8 <= 0x3Au) {
        size_t v44 = 59 - v8;
      }
      else {
        size_t v44 = 0;
      }
      bzero(&buf[v8], v44);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 25;
      goto LABEL_143;
    case 23:
      if (v8 <= 0x351u) {
        size_t v45 = 850 - v8;
      }
      else {
        size_t v45 = 0;
      }
      bzero(&buf[v8], v45);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 28;
      goto LABEL_143;
    case 24:
      if (v8 <= 0x31u) {
        size_t v46 = 50 - v8;
      }
      else {
        size_t v46 = 0;
      }
      bzero(&buf[v8], v46);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 29;
      goto LABEL_143;
    case 25:
      if (v8 <= 0x28u) {
        size_t v47 = 41 - v8;
      }
      else {
        size_t v47 = 0;
      }
      bzero(&buf[v8], v47);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 30;
      goto LABEL_143;
    case 26:
      if (v8 <= 0x2DCu) {
        size_t v48 = 733 - v8;
      }
      else {
        size_t v48 = 0;
      }
      bzero(&buf[v8], v48);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 31;
      goto LABEL_143;
    case 27:
      if (v8 <= 0x79u) {
        size_t v49 = 122 - v8;
      }
      else {
        size_t v49 = 0;
      }
      bzero(&buf[v8], v49);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 32;
      goto LABEL_143;
    case 28:
      if (v8 <= 0x68u) {
        size_t v50 = 105 - v8;
      }
      else {
        size_t v50 = 0;
      }
      bzero(&buf[v8], v50);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 33;
      goto LABEL_143;
    case 29:
      if (v8 <= 0x65u) {
        size_t v51 = 102 - v8;
      }
      else {
        size_t v51 = 0;
      }
      bzero(&buf[v8], v51);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 34;
      goto LABEL_143;
    case 30:
      if (v8 <= 0x68u) {
        size_t v52 = 105 - v8;
      }
      else {
        size_t v52 = 0;
      }
      bzero(&buf[v8], v52);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 35;
      goto LABEL_143;
    case 31:
      if (v8 <= 0x3Eu) {
        size_t v53 = 63 - v8;
      }
      else {
        size_t v53 = 0;
      }
      bzero(&buf[v8], v53);
      memcpy(buf, v18, v8);
      uint64_t v55 = 0;
      uint64_t v56 = 0;
      uint8_t v57 = 0;
      int v34 = 36;
LABEL_143:
      sub_1004B8C24((uint64_t)&v55, v34, v13);
      uint8_t v57 = buf;
LABEL_144:
      uint64_t v54 = sub_100050530();
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v54 + 48))(v54, &v55);
      uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

const char *sub_1003F5B30(uint64_t a1, int a2)
{
  char v2 = a2 - 1;
  if (a2 - 1) < 0xA && ((0x357u >> v2)) {
    return (&off_1009ACA58)[v2];
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_1007630E4();
  }
  return "UnknownType";
}

const char *sub_1003F5BB0(uint64_t a1, int a2)
{
  if (a2 == 255) {
    return "All";
  }
  uint64_t result = "Single";
  switch(a2 & 0x7F)
  {
    case 0:
      return result;
    case 1:
      int v3 = (char)a2;
      uint64_t v4 = "LeftPrimary";
      uint64_t v5 = "LeftSecondary";
      goto LABEL_6;
    case 2:
      int v3 = (char)a2;
      uint64_t v4 = "RightPrimary";
      uint64_t v5 = "RightSecondary";
LABEL_6:
      if (v3 < 0) {
        uint64_t result = v4;
      }
      else {
        uint64_t result = v5;
      }
      break;
    case 4:
      uint64_t result = "Case";
      break;
    default:
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_10076314C();
      }
      uint64_t result = "UnknownDevice";
      break;
  }
  return result;
}

const char *sub_1003F5CA4(uint64_t a1, int a2)
{
  char v2 = a2 - 1;
  if (a2 - 1) < 0xA && ((0x357u >> v2)) {
    return (&off_1009ACAA8)[v2];
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_1007630E4();
  }
  return "UnknownExt";
}

void sub_1003F5D24(uint64_t a1)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A13178, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A13178))
  {
    qword_100A13170 = (uint64_t)[@"/private/var/mobile/Library/Logs/Bluetooth/Accessory" length];
    __cxa_guard_release(&qword_100A13178);
  }
  char v2 = *(FILE **)(a1 + 64);
  if (v2)
  {
    fclose(v2);
    *(void *)(a1 + 64) = 0;
    if (*(unsigned char *)(a1 + 56))
    {
      int v3 = +[NSMutableString stringWithString:*(void *)(a1 + 48)];
      [v3 insertString:@"Corrupt" atIndex:qword_100A13170];
      uint64_t v4 = +[NSFileManager defaultManager];
      uint64_t v5 = *(void *)(a1 + 48);
      id v10 = 0;
      unsigned int v6 = [v4 moveItemAtPath:v5 toPath:v3 error:&v10];
      id v7 = v10;

      unsigned __int16 v8 = qword_100A19E40;
      if (v6)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)tm buf = 138412290;
          int v12 = v3;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "closeCurrentLogFile: Renaming potentially corrupt file to %@", buf, 0xCu);
        }
        objc_storeStrong((id *)(a1 + 48), v3);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
      {
        sub_1007631B4((uint64_t *)(a1 + 48), (uint64_t)v7, v8);
      }
    }
    [*(id *)(a1 + 80) addObject:*(void *)(a1 + 48)];
    uint64_t v9 = *(void **)(a1 + 48);
    *(void *)(a1 + 48) = 0;

    *(unsigned char *)(a1 + 56) = 0;
  }
}

void sub_1003F5EF8(_Unwind_Exception *a1)
{
}

id sub_1003F5F34(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (a2 <= 3)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100763238();
    }
LABEL_19:
    id v11 = 0;
    goto LABEL_24;
  }
  if (((8 * *(unsigned __int8 *)(a3 + 3)) | 4) != a2)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100763398();
    }
    goto LABEL_19;
  }
  uint64_t v4 = +[NSMutableArray arrayWithCapacity:*(unsigned __int8 *)(a3 + 3)];
  if (*(unsigned char *)(a3 + 3))
  {
    unint64_t v5 = 0;
    uint64_t v6 = a3 + 4;
LABEL_7:
    uint64_t v7 = 0;
    while (1)
    {
      uint64_t v8 = *(unsigned __int8 *)(v6 + v7);
      if (*(unsigned char *)(v6 + v7))
      {
        if (!((v8 & 0x80) != 0 ? __maskrune(v8, 0x40000uLL) : _DefaultRuneLocale.__runetype[v8] & 0x40000)) {
          break;
        }
      }
      if (++v7 == 4)
      {
        if (*(_DWORD *)(a3 + 8 * v5 + 8))
        {
          id v10 = +[NSData dataWithBytes:a3 + 8 * v5 + 4 length:8];
          [v4 setObject:v10 atIndexedSubscript:v5];

          ++v5;
          v6 += 8;
          if (v5 < *(unsigned __int8 *)(a3 + 3)) {
            goto LABEL_7;
          }
          goto LABEL_16;
        }
        uint64_t v13 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_1007632A4(v5, v13);
        }
LABEL_22:
        id v11 = 0;
        goto LABEL_23;
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100763328();
    }
    goto LABEL_22;
  }
LABEL_16:
  id v11 = v4;
LABEL_23:

LABEL_24:

  return v11;
}

void sub_1003F6134(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

const char *sub_1003F6154(uint64_t a1, unsigned int a2)
{
  if (a2 > 0x1F) {
    return "Unknown";
  }
  else {
    return (&off_1009ACAF8)[(char)a2];
  }
}

id sub_1003F617C(uint64_t a1, uint64_t a2)
{
  id v46 = (id)objc_opt_new();
  unsigned __int8 v64 = 0;
  uint64_t v2 = sub_100017768();
  sub_10004191C(buf, "AccessoryLogging");
  sub_10004191C(__p, "CrashAnalyticsTestMode");
  int v3 = (*(uint64_t (**)(uint64_t, unsigned char *, void **, unsigned __int8 *))(*(void *)v2 + 72))(v2, buf, __p, &v64);
  if (v64) {
    int v4 = v3;
  }
  else {
    int v4 = 0;
  }
  if (v63 < 0) {
    operator delete(__p[0]);
  }
  if ((v72 & 0x80000000) == 0)
  {
    if (!v4) {
      goto LABEL_16;
    }
LABEL_10:
    unint64_t v5 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)tm buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Test mode flag is set", buf, 2u);
    }
    uint64_t v6 = sub_100017768();
    sub_10004191C(buf, "AccessoryLogging");
    sub_10004191C(__p, "CrashAnalyticsTestMode");
    (*(void (**)(uint64_t, unsigned char *, void **, void))(*(void *)v6 + 80))(v6, buf, __p, 0);
    if (v63 < 0) {
      operator delete(__p[0]);
    }
    if (v72 < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_16;
  }
  operator delete(*(void **)buf);
  if (v4) {
    goto LABEL_10;
  }
LABEL_16:
  long long v60 = 0u;
  long long v61 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  obuint64_t j = *(id *)(a2 + 80);
  id v7 = [obj countByEnumeratingWithState:&v58 objects:v70 count:16];
  if (!v7)
  {
    int v51 = 0;
    goto LABEL_84;
  }
  int v51 = 0;
  uint64_t v8 = *(void *)v59;
  uint64_t v47 = kOSALogOptionOverrideFilePrefix;
  do
  {
    uint64_t v9 = 0;
    do
    {
      if (*(void *)v59 != v8) {
        objc_enumerationMutation(obj);
      }
      id v10 = *(void **)(*((void *)&v58 + 1) + 8 * (void)v9);
      if ([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash"])
      {
        if ([v10 hasSuffix:@".bin"])
        {
          id v11 = [*(id *)(a2 + 104) objectForKey:v10];
          if (!v11)
          {
            uint64_t v18 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)tm buf = 138412290;
              *(void *)&uint8_t buf[4] = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: No metadata for %@", buf, 0xCu);
            }
            goto LABEL_69;
          }
          int v12 = +[NSData dataWithContentsOfFile:v10];
          uint64_t v13 = v12;
          if (!v12 || ![v12 length])
          {
            uint64_t v17 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)tm buf = 138412290;
              *(void *)&uint8_t buf[4] = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: Could not read %@", buf, 0xCu);
            }
            goto LABEL_68;
          }
          if ([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_RightPrimary"])
          {
            CFStringRef v14 = @"primary";
LABEL_28:
            CFStringRef v15 = @"right";
LABEL_38:
            int v19 = 0;
            int v20 = 0;
            v69[0] = v14;
            CFStringRef v67 = @"role";
            CFStringRef v68 = @"side";
LABEL_39:
            v69[1] = v15;
            size_t v52 = +[NSDictionary dictionaryWithObjects:v69 forKeys:&v67 count:2];
            if (v20) {

            }
            if (v19) {
            BOOL v21 = sub_1003F6D30(a1, v13, v10, v11, v52, *(unsigned int *)(a2 + 24), v64);
            }
            if (v21)
            {
              uint64_t v22 = sub_100035F54();
              if (((*(uint64_t (**)(uint64_t))(*(void *)v22 + 328))(v22) & 1) != 0
                || (uint64_t v23 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v23 + 384))(v23) & 1) != 0)
                || (uint64_t v24 = sub_100035F54(), (*(unsigned int (**)(uint64_t))(*(void *)v24 + 424))(v24)))
              {
                uint64_t v25 = sub_100017768();
                if ((*(unsigned int (**)(uint64_t))(*(void *)v25 + 8))(v25))
                {
                  size_t v26 = [v10 stringByDeletingPathExtension];
                  size_t v27 = [v26 stringByAppendingPathExtension:@"json"];

                  if ([v21 writeToFile:v27 atomically:0])
                  {
                    [v46 addObject:v27];
                  }
                  else
                  {
                    size_t v28 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v27;
                      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: Failed to write analytics file: %@", buf, 0xCu);
                    }
                  }
                }
              }
              uint32_t v29 = arc4random_uniform(0xF4241u);
              double v30 = *(double *)(a1 + 440);
              if ((double)v29 / 1000000.0 <= v30)
              {
                uint64_t v65 = v47;
                CFStringRef v66 = @"AccessoryCrash";
                uint64_t v32 = +[NSDictionary dictionaryWithObjects:&v66 forKeys:&v65 count:1];
                id v57 = 0;
                v55[0] = _NSConcreteStackBlock;
                v55[1] = 3221225472;
                void v55[2] = sub_1003F7518;
                void v55[3] = &unk_1009AC8E8;
                id v56 = v21;
                size_t v33 = +[OSALog createForSubmission:@"305" metadata:0 options:v32 error:&v57 writing:v55];
                id v34 = v57;

                size_t v35 = qword_100A19E40;
                if (!v33 || v34)
                {
                  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                  {
                    *(_DWORD *)tm buf = 138412290;
                    *(void *)&uint8_t buf[4] = v34;
                    _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: Could not submit processed crash log to analytics, error %@", buf, 0xCu);
                  }
                }
                else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v36 = [v33 filepath];
                  *(_DWORD *)tm buf = 138412290;
                  *(void *)&uint8_t buf[4] = v36;
                  size_t v45 = (void *)v36;
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Submitted to analytics: %@", buf, 0xCu);
                }
              }
              else
              {
                size_t v31 = qword_100A19E40;
                if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)tm buf = 134217984;
                  *(double *)&uint8_t buf[4] = v30;
                  _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Skipping analytics submission due to %f sampling rate", buf, 0xCu);
                }
              }
            }
            size_t v37 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)tm buf = 138412290;
              *(void *)&uint8_t buf[4] = v10;
              _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Processed %@", buf, 0xCu);
            }

            ++v51;
LABEL_68:

LABEL_69:
            goto LABEL_70;
          }
          if ([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_LeftPrimary"])
          {
            CFStringRef v14 = @"primary";
          }
          else
          {
            if ([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_RightSecondary"])
            {
              CFStringRef v14 = @"secondary";
              goto LABEL_28;
            }
            if (([v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_LeftSecondary"] & 1) == 0)
            {
              unsigned __int8 v38 = [v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_Single"];
              CFStringRef v39 = @"single";
              if ((v38 & 1) != 0
                || (v40 = [v10 hasPrefix:@"/private/var/mobile/Library/Logs/Bluetooth/AccessoryCrash_Case"], CFStringRef v39 = @"case", (v40 & 1) != 0))
              {
                int v19 = 0;
                CFStringRef v67 = @"role";
              }
              else
              {
                size_t v41 = qword_100A19E40;
                if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)tm buf = 138412290;
                  *(void *)&uint8_t buf[4] = v10;
                  _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: Could not determine role for %@", buf, 0xCu);
                }
                CFStringRef v67 = @"role";
                CFStringRef v39 = +[NSNull null];
                int v19 = 1;
                size_t v48 = (__CFString *)v39;
              }
              CFStringRef v68 = @"side";
              v69[0] = v39;
              +[NSNull null];
              int v20 = 1;
              size_t v49 = (__CFString *)objc_claimAutoreleasedReturnValue();
              CFStringRef v15 = v49;
              goto LABEL_39;
            }
            CFStringRef v14 = @"secondary";
          }
          CFStringRef v15 = @"left";
          goto LABEL_38;
        }
        BOOL v16 = qword_100A19E40;
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)tm buf = 138412290;
          *(void *)&uint8_t buf[4] = v10;
          _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "dispatchCrashLogsToAnalytics: File %@ lacks .bin extension", buf, 0xCu);
        }
      }
LABEL_70:
      uint64_t v9 = (char *)v9 + 1;
    }
    while (v7 != v9);
    id v42 = [obj countByEnumeratingWithState:&v58 objects:v70 count:16];
    id v7 = v42;
  }
  while (v42);
LABEL_84:

  size_t v43 = qword_100A19E40;
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v51;
    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "dispatchCrashLogsToAnalytics: Processed %d crash logs", buf, 8u);
  }

  return v46;
}

void sub_1003F6C00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v46 - 137) < 0) {
    operator delete(*(void **)(v46 - 160));
  }

  _Unwind_Resume(a1);
}

id sub_1003F6D30(uint64_t a1, void *a2, void *a3, void *a4, void *a5, uint64_t a6, uint64_t a7)
{
  id v51 = a2;
  id v49 = a3;
  id v12 = a4;
  id v44 = a5;
  size_t v50 = objc_opt_new();
  v65[0] = @"bug_type";
  v65[1] = @"UI_country_code";
  v66[0] = @"305";
  v66[1] = @"US";
  int v65[2] = @"log-version";
  void v65[3] = @"accessory_type";
  int v66[2] = @"1.0";
  void v66[3] = @"audio";
  v66[4] = v44;
  v65[4] = @"application-info";
  v65[5] = @"accessory_pid";
  uint64_t v67 = +[NSNumber numberWithUnsignedInt:a6];
  v65[6] = @"analytics_test_mode";
  size_t v48 = +[NSNumber numberWithBool:a7];
  CFStringRef v68 = v48;
  v65[7] = @"crashlogs";
  uint64_t v47 = objc_opt_new();
  unsigned int v69 = v47;
  v65[8] = @"accessory_crashreporter_key";
  uint64_t v46 = +[NSNull null];
  BOOL v70 = v46;
  v65[9] = @"accessory_os_version";
  size_t v45 = +[NSNull null];
  int v71 = v45;
  v65[10] = @"accessory_os_train";
  uint64_t v13 = +[NSNull null];
  char v72 = v13;
  v65[11] = @"accessory_machine_config";
  CFStringRef v14 = +[NSNull null];
  int v73 = v14;
  v65[12] = @"accessory_release_type";
  CFStringRef v15 = +[NSNull null];
  uint64_t v74 = v15;
  v65[13] = @"usage_since_last_crash";
  BOOL v16 = +[NSNull null];
  uint64_t v75 = v16;
  v65[14] = @"usage_since_last_crash_user_facing";
  uint64_t v17 = +[NSNull null];
  int v76 = v17;
  v65[15] = @"usage_since_last_crash_in_ear";
  uint64_t v18 = +[NSNull null];
  uint64_t v77 = v18;
  v65[16] = @"accessory_fusing";
  int v19 = +[NSNull null];
  __int16 v78 = v19;
  int v20 = (void *)v67;
  BOOL v21 = +[NSDictionary dictionaryWithObjects:v66 forKeys:v65 count:17];
  [v50 setDictionary:v21];

  unint64_t v22 = 0;
  int v23 = 0;
  do
  {
    if ((unint64_t)[v12 count] <= v22)
    {
      unsigned __int8 v40 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_100763534(v22, (uint64_t)v49, v40);
      }
      goto LABEL_21;
    }
    id v24 = [v12 objectAtIndexedSubscript:v22];
    uint64_t v25 = [v24 bytes];

    unint64_t v26 = v25[1];
    if ((char *)[v51 length] - v23 < (char *)v26)
    {
      size_t v41 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
      {
        int v43 = v25[1];
        *(_DWORD *)tm buf = 67109890;
        int v58 = v22;
        __int16 v59 = 1024;
        int v60 = v43;
        __int16 v61 = 1024;
        int v62 = v23;
        __int16 v63 = 2112;
        id v64 = v49;
        _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "processCrashInstanceForAnalytics: Chunk %d of size %d at offset %d of %@ extends past the end of the file", buf, 0x1Eu);
      }
LABEL_21:
      id v39 = 0;
      goto LABEL_26;
    }
    LOBYTE(v58) = 0;
    *(_DWORD *)tm buf = 0;
    *(_DWORD *)tm buf = *v25;
    LOBYTE(v58) = 0;
    id v27 = v51;
    size_t v28 = +[NSData dataWithBytesNoCopy:length:freeWhenDone:](NSData, "dataWithBytesNoCopy:length:freeWhenDone:", (char *)[v27 bytes] + v23, v25[1], 0);
    if (v28)
    {
      uint32_t v29 = +[NSString stringWithFormat:@"%@, %s core", v49, buf];
      double v30 = sub_1003F7524((uint64_t)v29, v28, v29, v50);

      if (v30)
      {
        size_t v31 = [v50 objectForKeyedSubscript:@"crashlogs"];
        v55[0] = @"core";
        uint64_t v32 = +[NSString stringWithCString:buf encoding:4];
        v55[1] = @"crashlog";
        v56[0] = v32;
        v56[1] = v30;
        size_t v33 = +[NSDictionary dictionaryWithObjects:v56 forKeys:v55 count:2];
        [v31 addObject:v33];
      }
    }
    else
    {
      id v34 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_1007634F4(&v53, v54, v34);
      }
    }
    int v35 = v25[1];

    ++v22;
    v23 += v35;
  }
  while ((unint64_t)[v27 length] > v23);
  if ([v12 count] != (id)v22
    && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100763488();
  }
  id v52 = 0;
  uint64_t v36 = +[NSJSONSerialization dataWithJSONObject:v50 options:1 error:&v52];
  id v37 = v52;
  unsigned __int8 v38 = v37;
  if (!v36 || v37)
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_10076340C();
    }
    id v39 = 0;
  }
  else
  {
    id v39 = v36;
  }

LABEL_26:

  return v39;
}

void sub_1003F73C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, _Unwind_Exception *exception_object, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, void *a20,void *a21)
{
  _Unwind_Resume(a1);
}

id sub_1003F7518(uint64_t a1, void *a2)
{
  return [a2 writeData:*(void *)(a1 + 32)];
}

id sub_1003F7524(uint64_t a1, void *a2, void *a3, void *a4)
{
  id v6 = a2;
  id v219 = a3;
  id v217 = v6;
  id v218 = a4;
  CFDictionaryRef v7 = (const __CFDictionary *)RTBuddyCrashlogDecode();
  if (v7)
  {
    CFDictionaryRef theDict = v7;
    if (!CFDictionaryGetCount(v7))
    {
      uint64_t v8 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)tm buf = 138412290;
        *(void *)&uint8_t buf[4] = v219;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "Warning: processCrashLogForAnalytics: Empty dictionary returned for %@", buf, 0xCu);
      }
    }
    id v220 = (id)objc_opt_new();
    v231[0] = @"mailboxes";
    uint64_t v9 = objc_opt_new();
    v232[0] = v9;
    v231[1] = @"panic";
    id v10 = +[NSNull null];
    v232[1] = v10;
    v231[2] = @"crashlog-version";
    id v11 = +[NSNull null];
    v232[2] = v11;
    v231[3] = @"exception";
    id v12 = +[NSNull null];
    v232[3] = v12;
    v231[4] = @"uuid";
    uint64_t v13 = +[NSNull null];
    v232[4] = v13;
    v231[5] = @"call-stack";
    CFStringRef v14 = +[NSNull null];
    v232[5] = v14;
    v231[6] = @"tasks";
    CFStringRef v15 = +[NSNull null];
    v232[6] = v15;
    v231[7] = @"registers";
    BOOL v16 = +[NSNull null];
    v232[7] = v16;
    v231[8] = @"scenario";
    uint64_t v17 = +[NSNull null];
    v232[8] = v17;
    uint64_t v18 = +[NSDictionary dictionaryWithObjects:v232 forKeys:v231 count:9];
    [v220 setDictionary:v18];

    CFStringRef Value = CFDictionaryGetValue(theDict, @"panic");
    int v20 = Value;
    if (Value)
    {
      CFTypeID v21 = CFGetTypeID(Value);
      if (v21 == CFStringGetTypeID()) {
        [v220 setObject:v20 forKey:@"panic"];
      }
    }
    unint64_t v22 = CFDictionaryGetValue(theDict, @"crashlog-version");
    int v23 = v22;
    if (v22)
    {
      CFTypeID v24 = CFGetTypeID(v22);
      if (v24 == CFStringGetTypeID()) {
        [v220 setObject:v23 forKey:@"crashlog-version"];
      }
    }
    uint64_t v25 = CFDictionaryGetValue(theDict, @"exception");
    unint64_t v26 = v25;
    if (v25)
    {
      CFTypeID v27 = CFGetTypeID(v25);
      if (v27 == CFStringGetTypeID()) {
        [v220 setObject:v26 forKey:@"exception"];
      }
    }
    CFArrayRef v28 = (const __CFArray *)CFDictionaryGetValue(theDict, @"sections");
    CFArrayRef v29 = v28;
    if (v28)
    {
      CFTypeID v30 = CFGetTypeID(v28);
      if (v30 == CFArrayGetTypeID())
      {
        for (CFIndex i = 0; ; ++i)
        {
          if (i >= CFArrayGetCount(v29)) {
            goto LABEL_251;
          }
          CFDictionaryRef ValueAtIndex = (const __CFDictionary *)CFArrayGetValueAtIndex(v29, i);
          CFDictionaryRef v33 = ValueAtIndex;
          if (!ValueAtIndex || (CFTypeID v34 = CFGetTypeID(ValueAtIndex), v34 != CFDictionaryGetTypeID()))
          {
            uint64_t v60 = qword_100A19E40;
            if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
              continue;
            }
            *(_DWORD *)tm buf = 138412290;
            *(void *)&uint8_t buf[4] = v219;
            __int16 v61 = v60;
            int v62 = "processCrashLogForAnalytics: Invalid crash log section in %@";
            goto LABEL_63;
          }
          CFStringRef v35 = (const __CFString *)CFDictionaryGetValue(v33, @"section-name");
          CFStringRef v36 = v35;
          if (!v35 || (CFTypeID v37 = CFGetTypeID(v35), v37 != CFStringGetTypeID()))
          {
            uint64_t v63 = qword_100A19E40;
            if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
              continue;
            }
            *(_DWORD *)tm buf = 138412290;
            *(void *)&uint8_t buf[4] = v219;
            __int16 v61 = v63;
            int v62 = "processCrashLogForAnalytics: Invalid crash log section name in %@";
LABEL_63:
            uint32_t v64 = 12;
            goto LABEL_64;
          }
          CStringPtr = CFStringGetCStringPtr(v36, 0x8000100u);
          if (CStringPtr)
          {
            CFStringRef v39 = (const __CFString *)CFDictionaryGetValue(v33, @"section-signature");
            CFStringRef v40 = v39;
            if (v39 && (CFTypeID v41 = CFGetTypeID(v39), v41 == CFStringGetTypeID()))
            {
              id v42 = CFStringGetCStringPtr(v40, 0x8000100u);
              if (v42)
              {
                if (!strcmp(CStringPtr, "Version Section") && !strcmp(v42, "Cver"))
                {
                  CFStringRef v68 = CFDictionaryGetValue(v33, @"uuid");
                  unsigned int v69 = v68;
                  if (v68 && (CFTypeID v70 = CFGetTypeID(v68), v70 == CFStringGetTypeID()))
                  {
                    [v220 setObject:v69 forKey:@"uuid"];
                  }
                  else
                  {
                    uint64_t v97 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      __int16 v61 = v97;
                      int v62 = "processCrashLogForAnalytics: Invalid UUID in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(CStringPtr, "Callstack Section") && !strcmp(v42, "Ccst"))
                {
                  __int16 v82 = (void *)CFDictionaryGetValue(v33, @"stack");
                  int v83 = v214;
                  uint64_t v84 = v82;
                  if (!v82 || (CFTypeID v85 = CFGetTypeID(v82), v85 != CFArrayGetTypeID()))
                  {
                    __int16 v86 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid stack in %@", buf, 0xCu);
                    }
                    uint64_t v84 = 0;
                  }
                  char v87 = (void *)CFDictionaryGetValue(v33, @"stack-description");
                  char v88 = v87;
                  if (!v87 || (CFTypeID v89 = CFGetTypeID(v87), v89 != CFStringGetTypeID()))
                  {
                    char v90 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v90, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid stack description in %@", buf, 0xCu);
                    }
                    char v88 = 0;
                  }
                  v229[0] = @"stack";
                  __int16 v91 = v84;
                  if (!v84)
                  {
                    v212 = +[NSNull null];
                    __int16 v91 = v212;
                  }
                  v230[0] = v91;
                  v229[1] = @"stack-description";
                  char v92 = v88;
                  if (!v88)
                  {
                    int v83 = +[NSNull null];
                    char v92 = v83;
                  }
                  v230[1] = v92;
                  v214 = v83;
                  uint64_t v93 = +[NSDictionary dictionaryWithObjects:v230 forKeys:v229 count:2];
                  [v220 setObject:v93 forKey:@"call-stack"];

                  if (!v88) {
                  if (!v84)
                  }
                }
                else if (!strcmp(CStringPtr, "Task List Section") && !strcmp(v42, "Crtk"))
                {
                  int v94 = CFDictionaryGetValue(v33, @"tasks");
                  BOOL v95 = v94;
                  if (v94 && (CFTypeID v96 = CFGetTypeID(v94), v96 == CFArrayGetTypeID()))
                  {
                    [v220 setObject:v95 forKey:@"tasks"];
                  }
                  else
                  {
                    uint64_t v123 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      __int16 v61 = v123;
                      int v62 = "processCrashLogForAnalytics: Invalid tasks in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(CStringPtr, "Mailbox Section") && !strcmp(v42, "Cmbx"))
                {
                  CFTypeRef cfa = CFDictionaryGetValue(v33, @"registers");
                  uint64_t v98 = v213;
                  if (!cfa || (CFTypeID v99 = CFGetTypeID(cfa), v99 != CFDictionaryGetTypeID()))
                  {
                    uint64_t v100 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid mailbox registers in %@", buf, 0xCu);
                    }
                    CFTypeRef cfa = 0;
                  }
                  __int16 v101 = (void *)CFDictionaryGetValue(v33, @"mailbox-error");
                  int v102 = v101;
                  if (!v101 || (CFTypeID v103 = CFGetTypeID(v101), v103 != CFStringGetTypeID()))
                  {
                    int v104 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid mailbox error in %@", buf, 0xCu);
                    }
                    int v102 = 0;
                  }
                  uint64_t v105 = (void *)CFDictionaryGetValue(v33, @"route-number");
                  char v106 = v105;
                  if (!v105 || (CFTypeID v107 = CFGetTypeID(v105), v107 != CFStringGetTypeID()))
                  {
                    char v108 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid route number in %@", buf, 0xCu);
                    }
                    char v106 = 0;
                  }
                  long long v109 = (void *)CFDictionaryGetValue(v33, @"log");
                  long long v110 = v109;
                  if (!v109 || (CFTypeID v111 = CFGetTypeID(v109), v111 != CFStringGetTypeID()))
                  {
                    long long v112 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid log in %@", buf, 0xCu);
                    }
                    long long v110 = 0;
                  }
                  long long v113 = [v220 objectForKey:@"mailboxes"];
                  v227[0] = @"registers";
                  CFTypeRef v114 = cfa;
                  if (!cfa)
                  {
                    uint64_t v98 = +[NSNull null];
                    CFTypeRef v114 = v98;
                  }
                  v228[0] = v114;
                  v227[1] = @"mailbox-error";
                  long long v115 = v102;
                  v213 = v98;
                  if (!v102)
                  {
                    v211 = +[NSNull null];
                    long long v115 = v211;
                  }
                  v228[1] = v115;
                  v227[2] = @"route-number";
                  long long v116 = v106;
                  if (!v106)
                  {
                    v210 = +[NSNull null];
                    long long v116 = v210;
                  }
                  v228[2] = v116;
                  v227[3] = @"log";
                  v117 = v110;
                  if (!v110)
                  {
                    v209 = +[NSNull null];
                    v117 = v209;
                  }
                  v228[3] = v117;
                  char v118 = +[NSDictionary dictionaryWithObjects:v228 forKeys:v227 count:4];
                  [v113 addObject:v118];

                  if (!v110) {
                  if (!v106)
                  }

                  if (!v102) {
                  if (!cfa)
                  }
                }
                else if (!strcmp(CStringPtr, "Register Frame Section") && !strcmp(v42, "CrgM"))
                {
                  unsigned int v120 = CFDictionaryGetValue(v33, @"registers");
                  int v121 = v120;
                  if (v120 && (CFTypeID v122 = CFGetTypeID(v120), v122 == CFStringGetTypeID()))
                  {
                    [v220 setObject:v121 forKey:@"registers"];
                  }
                  else
                  {
                    uint64_t v133 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      __int16 v61 = v133;
                      int v62 = "processCrashLogForAnalytics: Invalid registers in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(CStringPtr, "Product Version Section") && !strcmp(v42, "CPvr"))
                {
                  int v124 = CFDictionaryGetValue(v33, @"Machine");
                  __int16 v125 = v124;
                  if (v124 && (CFTypeID v126 = CFGetTypeID(v124), v126 == CFStringGetTypeID()))
                  {
                    [v218 setObject:v125 forKey:@"accessory_machine_config"];
                  }
                  else
                  {
                    unsigned __int16 v134 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid Machine in %@", buf, 0xCu);
                    }
                  }
                  long long v135 = CFDictionaryGetValue(v33, @"Build");
                  long long v136 = v135;
                  if (v135 && (CFTypeID v137 = CFGetTypeID(v135), v137 == CFStringGetTypeID()))
                  {
                    [v218 setObject:v136 forKey:@"accessory_release_type"];
                  }
                  else
                  {
                    uint64_t v138 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      _os_log_error_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid Build in %@", buf, 0xCu);
                    }
                  }
                  long long v139 = (void *)CFDictionaryGetValue(v33, @"OS version");
                  long long v140 = v139;
                  if (v139 && (CFTypeID v141 = CFGetTypeID(v139), v141 == CFStringGetTypeID()))
                  {
                    id v142 = v140;
                    [v218 setObject:v142 forKey:@"accessory_os_version"];
                    uint64_t v143 = [v142 componentsSeparatedByString:@"."];
                    long long v144 = v143;
                    if (v143 && [v143 count])
                    {
                      long long v145 = [v144 objectAtIndexedSubscript:0];
                      long long v146 = [@"RTKitOS " stringByAppendingString:v145];
                      [v218 setObject:v146 forKey:@"accessory_os_train"];
                    }
                    else
                    {
                      long long v151 = qword_100A19E40;
                      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)tm buf = 138412546;
                        *(void *)&uint8_t buf[4] = v142;
                        *(_WORD *)&unsigned char buf[12] = 2112;
                        *(void *)&unsigned char buf[14] = v219;
                        _os_log_error_impl((void *)&_mh_execute_header, v151, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Could not determine OS train for version '%@' for %@", buf, 0x16u);
                      }
                    }
                  }
                  else
                  {
                    uint64_t v147 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      __int16 v61 = v147;
                      int v62 = "processCrashLogForAnalytics: Invalid OS version in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(CStringPtr, "String Section") && !strcmp(v42, "Cstr"))
                {
                  int8x8_t v127 = (void *)CFDictionaryGetValue(v33, @"contents");
                  uint64_t v128 = v127;
                  if (v127 && (CFTypeID v129 = CFGetTypeID(v127), v129 == CFStringGetTypeID()))
                  {
                    id v130 = v128;
                    if ([v130 hasPrefix:@"CrashReporterKey:"])
                    {
                      uint64_t v131 = [v130 substringFromIndex:[@"CrashReporterKey:" length]];
                      [v218 setObject:v131 forKey:@"accessory_crashreporter_key"];
                    }
                  }
                  else
                  {
                    uint64_t v148 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      __int16 v61 = v148;
                      int v62 = "processCrashLogForAnalytics: Invalid string section contents in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else if (!strcmp(v42, "MTBF"))
                {
                  LODWORD(v222) = 0;
                  *(_DWORD *)uint64_t v225 = 0;
                  CFNumberRef v71 = (const __CFNumber *)CFDictionaryGetValue(v33, @"section-offset");
                  CFNumberRef v72 = v71;
                  if (v71 && (CFTypeID v73 = CFGetTypeID(v71), v73 == CFNumberGetTypeID()))
                  {
                    if (CFNumberGetValue(v72, kCFNumberIntType, &v222))
                    {
                      CFNumberRef v74 = (const __CFNumber *)CFDictionaryGetValue(v33, @"section-size");
                      CFNumberRef v75 = v74;
                      if (v74 && (CFTypeID v76 = CFGetTypeID(v74), v76 == CFNumberGetTypeID()))
                      {
                        if (CFNumberGetValue(v75, kCFNumberIntType, v225))
                        {
                          int v77 = *(_DWORD *)v225;
                          if (*(int *)v225 < 1
                            || (int v78 = v222, (v222 & 0x80000000) != 0)
                            || (unint64_t)[v217 length] <= (v78 + v77))
                          {
                            uint64_t v154 = qword_100A19E40;
                            if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
                              continue;
                            }
                            *(_DWORD *)tm buf = 67109634;
                            *(_DWORD *)&uint8_t buf[4] = v222;
                            *(_WORD *)&uint8_t buf[8] = 1024;
                            *(_DWORD *)&buf[10] = *(_DWORD *)v225;
                            *(_WORD *)&unsigned char buf[14] = 2112;
                            *(void *)&uint8_t buf[16] = v219;
                            __int16 v61 = v154;
                            int v62 = "processCrashLogForAnalytics: Invalid mtbf section offset (%d) and size (%d) in %@";
LABEL_199:
                            uint32_t v64 = 24;
LABEL_64:
                            _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, v62, buf, v64);
                            continue;
                          }
                          char v79 = (char *)[v217 bytes];
                          int v80 = *(_DWORD *)v225;
                          if (*(_DWORD *)v225 <= 0x1Bu)
                          {
                            uint64_t v81 = qword_100A19E40;
                            if (!os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
                              continue;
                            }
                            *(_DWORD *)tm buf = 67109634;
                            *(_DWORD *)&uint8_t buf[4] = v80;
                            *(_WORD *)&uint8_t buf[8] = 2048;
                            *(void *)&buf[10] = 28;
                            *(_WORD *)&unsigned char buf[18] = 2112;
                            *(void *)&buf[20] = v219;
                            __int16 v61 = v81;
                            int v62 = "processCrashLogForAnalytics: mtbf section size too small (%d < %zu) in %@";
                            uint32_t v64 = 28;
                            goto LABEL_64;
                          }
                          __int16 v158 = &v79[(int)v222];
                          uint64_t v159 = +[NSNumber numberWithUnsignedInt:*((unsigned int *)v158 + 6)];
                          [v218 setObject:v159 forKey:@"usage_since_last_crash"];

                          if (*(_DWORD *)v225 >= 0x25u)
                          {
                            unsigned int v160 = v158[36] - 1;
                            int v161 = "unknown";
                            if (v160 <= 2) {
                              int v161 = (&off_1009ACBF8)[(char)v160];
                            }
                            uint64_t v162 = +[NSString stringWithCString:v161 encoding:4];
                            [v218 setObject:v162 forKey:@"accessory_fusing"];

                            if (*((_DWORD *)v158 + 7) != -1)
                            {
                              uint64_t v163 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
                              [v218 setObject:v163 forKey:@"usage_since_last_crash_user_facing"];
                            }
                            if (*((_DWORD *)v158 + 8) != -1)
                            {
                              uint64_t v164 = +[NSNumber numberWithUnsignedInt:](NSNumber, "numberWithUnsignedInt:");
                              [v218 setObject:v164 forKey:@"usage_since_last_crash_in_ear"];
                            }
                          }
                        }
                        else
                        {
                          uint64_t v155 = qword_100A19E40;
                          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)tm buf = 138412290;
                            *(void *)&uint8_t buf[4] = v219;
                            __int16 v61 = v155;
                            int v62 = "processCrashLogForAnalytics: Unable to convert mtbf section size in %@";
                            goto LABEL_63;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v149 = qword_100A19E40;
                        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)tm buf = 138412290;
                          *(void *)&uint8_t buf[4] = v219;
                          __int16 v61 = v149;
                          int v62 = "processCrashLogForAnalytics: Invalid mtbf section size in %@";
                          goto LABEL_63;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v150 = qword_100A19E40;
                      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)tm buf = 138412290;
                        *(void *)&uint8_t buf[4] = v219;
                        __int16 v61 = v150;
                        int v62 = "processCrashLogForAnalytics: Unable to convert mtbf section offset in %@";
                        goto LABEL_63;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v119 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      __int16 v61 = v119;
                      int v62 = "processCrashLogForAnalytics: Invalid mtbf section offset in %@";
                      goto LABEL_63;
                    }
                  }
                }
                else
                {
                  if (strcmp(v42, "Csif")) {
                    continue;
                  }
                  uint64_t valuePtr = 0;
                  CFNumberRef v43 = (const __CFNumber *)CFDictionaryGetValue(v33, @"section-offset");
                  CFNumberRef v44 = v43;
                  if (v43 && (CFTypeID v45 = CFGetTypeID(v43), v45 == CFNumberGetTypeID()))
                  {
                    if (CFNumberGetValue(v44, kCFNumberIntType, (char *)&valuePtr + 4))
                    {
                      CFNumberRef v46 = (const __CFNumber *)CFDictionaryGetValue(v33, @"section-size");
                      CFNumberRef v47 = v46;
                      if (v46 && (CFTypeID v48 = CFGetTypeID(v46), v48 == CFNumberGetTypeID()))
                      {
                        if (CFNumberGetValue(v47, kCFNumberIntType, &valuePtr))
                        {
                          int v49 = valuePtr;
                          if (valuePtr >= 0x1C)
                          {
                            int v50 = HIDWORD(valuePtr);
                            if ((valuePtr & 0x8000000000000000) == 0
                              && (unint64_t)[v217 length] > v50 + v49)
                            {
                              uint64_t v204 = objc_opt_new();
                              id v51 = (char *)[v217 bytes];
                              CFTypeRef cf = &v51[SHIDWORD(valuePtr)];
                              uint64_t v52 = *((void *)cf + 2);
                              v208 = objc_opt_new();
                              uint64_t v53 = 0;
                              uint64_t v54 = cf;
                              do
                              {
                                if ((*(void *)v54 & (1 << v53)) != 0)
                                {
                                  uint64_t v55 = +[NSString stringWithUTF8String:off_1009FB4A8[v53]];
                                  [v208 addObject:v55];

                                  uint64_t v54 = cf;
                                }
                                ++v53;
                              }
                              while (v53 != 25);
                              [v204 setValue:v208 forKey:@"active_scenarios"];
                              id v56 = +[NSNumber numberWithUnsignedLongLong:v52];
                              [v204 setValue:v56 forKey:@"time_since_last_transition"];

                              int v57 = valuePtr;
                              int v58 = *((_DWORD *)cf + 6);
                              if (valuePtr < 4 * (v58 & 0x3FFu) + 28)
                              {
                                __int16 v59 = qword_100A19E40;
                                if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                                {
                                  *(_DWORD *)tm buf = 67109634;
                                  *(_DWORD *)&uint8_t buf[4] = v58 & 0x3FF;
                                  *(_WORD *)&uint8_t buf[8] = 1024;
                                  *(_DWORD *)&buf[10] = v57;
                                  *(_WORD *)&unsigned char buf[14] = 2112;
                                  *(void *)&uint8_t buf[16] = v219;
                                  _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Scenario information range (%u) too large for section size (%d) in %@", buf, 0x18u);
                                }
                                uint64_t v205 = +[NSNull null];
                                [v204 setValue:v205 forKey:@"event_history"];
                                goto LABEL_248;
                              }
                              uint64_t v205 = objc_opt_new();
                              uint64_t v165 = cf + 28;
                              unint64_t v166 = *((unsigned int *)cf + 6);
                              uint64_t v167 = (v166 >> 20) & 0x3FF;
                              uint64_t v168 = (v166 >> 10) & 0x3FF;
                              if (v167 == v168)
                              {
LABEL_210:
                                [v204 setValue:v205 forKey:@"event_history"];
                                int v169 = *((_DWORD *)cf + 6);
                                if (v169 < 0)
                                {
                                  uint64_t v170 = v169 & 0x3FF;
                                  int v171 = valuePtr;
                                  uint64_t v172 = 4 * (*((_DWORD *)cf + 6) & 0x3FFu) + 28;
                                  if ((v172 | 2uLL) > (int)valuePtr)
                                  {
                                    uint64_t v173 = qword_100A19E40;
                                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)tm buf = 67109634;
                                      *(_DWORD *)&uint8_t buf[4] = v170;
                                      *(_WORD *)&uint8_t buf[8] = 1024;
                                      *(_DWORD *)&buf[10] = v171;
                                      *(_WORD *)&unsigned char buf[14] = 2112;
                                      *(void *)&uint8_t buf[16] = v219;
                                      _os_log_error_impl((void *)&_mh_execute_header, v173, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Scenario information with range (%u) indicates trailer present but not enough space in section size (%d) in %@", buf, 0x18u);
                                    }
                                    goto LABEL_243;
                                  }
                                  v194 = &v165[4 * v170];
                                  uint64_t v195 = *(unsigned __int16 *)v194;
                                  if (v195 + v172 > (unint64_t)(int)valuePtr)
                                  {
                                    uint64_t v196 = qword_100A19E40;
                                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)tm buf = 67109890;
                                      *(_DWORD *)&uint8_t buf[4] = v170;
                                      *(_WORD *)&uint8_t buf[8] = 1024;
                                      *(_DWORD *)&buf[10] = v195;
                                      *(_WORD *)&unsigned char buf[14] = 1024;
                                      *(_DWORD *)&uint8_t buf[16] = v171;
                                      *(_WORD *)&buf[20] = 2112;
                                      *(void *)&buf[22] = v219;
                                      _os_log_error_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Scenario information range (%u) and trailer length (%u) too large for section size (%d) in %@", buf, 0x1Eu);
                                    }
                                    goto LABEL_243;
                                  }
                                  if (v195 > 9)
                                  {
                                    v198 = objc_opt_new();
                                    uint64_t v199 = +[NSNumber numberWithUnsignedShort:*((_WORD *)v194 + 1) & 1];
                                    [v198 setObject:v199 forKey:@"connected"];

                                    if (*((_WORD *)v194 + 1))
                                    {
                                      uint64_t v200 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)v194 + 2)];
                                      [v198 setObject:v200 forKey:@"vid"];

                                      uint64_t v201 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)v194 + 3)];
                                      [v198 setObject:v201 forKey:@"pid"];

                                      uint64_t v202 = +[NSNumber numberWithUnsignedShort:*((unsigned __int16 *)v194 + 4)];
                                      [v198 setObject:v202 forKey:@"sw_ver"];
                                    }
                                    [v204 setObject:v198 forKey:@"routed_to_source"];
                                  }
                                  else
                                  {
                                    uint64_t v197 = qword_100A19E40;
                                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)tm buf = 67109634;
                                      *(_DWORD *)&uint8_t buf[4] = v195;
                                      *(_WORD *)&uint8_t buf[8] = 2048;
                                      *(void *)&buf[10] = 10;
                                      *(_WORD *)&unsigned char buf[18] = 2112;
                                      *(void *)&buf[20] = v219;
                                      _os_log_error_impl((void *)&_mh_execute_header, v197, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Scenario information trailer length too small (%u < %zu) in %@", buf, 0x1Cu);
                                    }
LABEL_243:
                                    v198 = +[NSNull null];
                                    [v204 setObject:v198 forKey:@"routed_to_source"];
                                  }
                                }
LABEL_248:

                                [v220 setObject:v204 forKey:@"scenario"];
                                continue;
                              }
                              uint64_t v174 = &v165[4 * v167];
                              uint64_t v175 = v166 & 0x3FF;
                              v176 = v174;
                              do
                              {
                                unint64_t v177 = *(unsigned int *)v174;
                                uint64_t v178 = ((&v174[4 * ((v177 >> 24) & 7)] - v165 + 8) >> 2) % v175;
                                uint64_t v174 = &v165[4 * v178];
                                v52 += v177 & 0xFFFFFF;
                              }
                              while (v178 != v168);
                              uint64_t v207 = v52;
                              uint64_t v179 = (uint64_t)cf;
                              while (2)
                              {
                                uint64_t v180 = v207 - (*(_DWORD *)v176 & 0xFFFFFF);
                                uint64_t v222 = 0;
                                memset(buf, 0, 28);
                                sub_1003F991C(v179, (uint64_t)v176, (uint64_t)&v222, (uint64_t)buf);
                                uint64_t v181 = v222 >> 27;
                                v206 = v176;
                                uint64_t v207 = v180;
                                if (v181)
                                {
                                  uint64_t v185 = sub_100017768();
                                  if ((*(unsigned int (**)(uint64_t))(*(void *)v185 + 8))(v185))
                                  {
                                    unsigned int v186 = +[NSMutableString stringWithFormat:@"%04x ", HIWORD(v222)];
                                    for (uint64_t j = 0; j != 28; j += 4)
                                      [v186 appendFormat:@"%02x%02x%02x%02x", *(_DWORD *)&buf[j], BYTE1(*(_DWORD *)&buf[j]), BYTE2(*(_DWORD *)&buf[j]), HIBYTE(*(_DWORD *)&buf[j])];
                                    v188 = +[NSNumber numberWithUnsignedLongLong:v180];
                                    v189 = +[NSNumber numberWithUnsignedInt:v181];
                                    uint64_t v190 = +[NSNumber numberWithUnsignedChar:BYTE4(v222)];
                                    v184 = +[NSDictionary dictionaryWithObjectsAndKeys:v188, @"timestamp", v189, @"source", v190, @"event_number", v186, @"data", 0];

                                    goto LABEL_231;
                                  }
                                  v184 = 0;
                                }
                                else
                                {
                                  int v182 = BYTE4(v222);
                                  if (BYTE4(v222) >= 0x19u)
                                  {
                                    BOOL v183 = qword_100A19E40;
                                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                                    {
                                      *(_DWORD *)uint64_t v225 = 67109120;
                                      int v226 = v182;
                                      _os_log_error_impl((void *)&_mh_execute_header, v183, OS_LOG_TYPE_ERROR, "processCrashLogForAnalytics: Invalid scenarioType %d", v225, 8u);
                                    }
                                    v184 = 0;
LABEL_234:

                                    uint64_t v179 = (uint64_t)cf;
                                    unint64_t v192 = *((unsigned int *)cf + 6);
                                    uint64_t v193 = ((&v206[4 * (v206[3] & 7)] - v165 + 8) >> 2) % (int64_t)(v192 & 0x3FF);
                                    v176 = &v165[4 * v193];
                                    if (v193 == ((v192 >> 10) & 0x3FF)) {
                                      goto LABEL_210;
                                    }
                                    continue;
                                  }
                                  unsigned int v186 = +[NSNumber numberWithUnsignedLongLong:v180];
                                  v188 = +[NSString stringWithUTF8String:off_1009FB4A8[v182]];
                                  if ((v222 & 0x1000000000000) != 0) {
                                    v191 = "ON";
                                  }
                                  else {
                                    v191 = "OFF";
                                  }
                                  v189 = +[NSString stringWithUTF8String:v191];
                                  v184 = +[NSDictionary dictionaryWithObjectsAndKeys:v186, @"timestamp", v188, @"scenario", v189, @"state", 0];
LABEL_231:
                                }
                                break;
                              }
                              [v205 addObject:v184];
                              goto LABEL_234;
                            }
                          }
                          uint64_t v156 = qword_100A19E40;
                          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)tm buf = 67109634;
                            *(_DWORD *)&uint8_t buf[4] = HIDWORD(valuePtr);
                            *(_WORD *)&uint8_t buf[8] = 1024;
                            *(_DWORD *)&buf[10] = valuePtr;
                            *(_WORD *)&unsigned char buf[14] = 2112;
                            *(void *)&uint8_t buf[16] = v219;
                            __int16 v61 = v156;
                            int v62 = "processCrashLogForAnalytics: Invalid scenario information section offset (%d) and size (%d) in %@";
                            goto LABEL_199;
                          }
                        }
                        else
                        {
                          uint64_t v157 = qword_100A19E40;
                          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                          {
                            *(_DWORD *)tm buf = 138412290;
                            *(void *)&uint8_t buf[4] = v219;
                            __int16 v61 = v157;
                            int v62 = "processCrashLogForAnalytics: Unable to convert scenario information section size in %@";
                            goto LABEL_63;
                          }
                        }
                      }
                      else
                      {
                        uint64_t v152 = qword_100A19E40;
                        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                        {
                          *(_DWORD *)tm buf = 138412290;
                          *(void *)&uint8_t buf[4] = v219;
                          __int16 v61 = v152;
                          int v62 = "processCrashLogForAnalytics: Invalid scenario information section size in %@";
                          goto LABEL_63;
                        }
                      }
                    }
                    else
                    {
                      uint64_t v153 = qword_100A19E40;
                      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                      {
                        *(_DWORD *)tm buf = 138412290;
                        *(void *)&uint8_t buf[4] = v219;
                        __int16 v61 = v153;
                        int v62 = "processCrashLogForAnalytics: Unable to convert scenario information section offset in %@";
                        goto LABEL_63;
                      }
                    }
                  }
                  else
                  {
                    uint64_t v132 = qword_100A19E40;
                    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                    {
                      *(_DWORD *)tm buf = 138412290;
                      *(void *)&uint8_t buf[4] = v219;
                      __int16 v61 = v132;
                      int v62 = "processCrashLogForAnalytics: Invalid scenario information section offset in %@";
                      goto LABEL_63;
                    }
                  }
                }
              }
              else
              {
                uint64_t v67 = qword_100A19E40;
                if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
                {
                  *(_DWORD *)tm buf = 138412290;
                  *(void *)&uint8_t buf[4] = v219;
                  __int16 v61 = v67;
                  int v62 = "processCrashLogForAnalytics: Could not convert crash log section signature in %@";
                  goto LABEL_63;
                }
              }
            }
            else
            {
              uint64_t v65 = qword_100A19E40;
              if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
              {
                *(_DWORD *)tm buf = 138412290;
                *(void *)&uint8_t buf[4] = v219;
                __int16 v61 = v65;
                int v62 = "processCrashLogForAnalytics: Invalid crash log section signature in %@";
                goto LABEL_63;
              }
            }
          }
          else
          {
            uint64_t v66 = qword_100A19E40;
            if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
            {
              *(_DWORD *)tm buf = 138412290;
              *(void *)&uint8_t buf[4] = v219;
              __int16 v61 = v66;
              int v62 = "processCrashLogForAnalytics: Could not convert crash log section name in %@";
              goto LABEL_63;
            }
          }
        }
      }
    }
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_100763618();
    }
LABEL_251:
    CFRelease(theDict);
  }
  else
  {
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
      sub_1007635AC();
    }
    id v220 = 0;
  }

  return v220;
}

void sub_1003F95A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,void *a41,void *a42,void *a43,_Unwind_Exception *exception_object)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1003F991C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0;
  uint64_t v5 = *(_DWORD *)(result + 24) & 0x3FF;
  uint64_t v6 = result + 28;
  uint64_t v7 = (a2 - (result + 28)) >> 2;
  char v8 = 1;
  do
  {
    *(_DWORD *)(a3 + 4 * v4) = *(_DWORD *)(v6 + 4 * v7);
    char v9 = v8;
    uint64_t v7 = (v7 + 1) % v5;
    uint64_t v4 = 1;
    char v8 = 0;
  }
  while ((v9 & 1) != 0);
  if ((*(unsigned char *)(a2 + 3) & 7) != 0)
  {
    unint64_t v10 = 0;
    do
    {
      *(_DWORD *)(a4 + 4 * v10) = *(_DWORD *)(v6 + 4 * v7);
      uint64_t v7 = (v7 + 1) % v5;
      ++v10;
    }
    while (v10 < (*(unsigned char *)(a2 + 3) & 7u));
  }
  return result;
}

void sub_1003F9998(id a1)
{
  if (qword_1009F8798 != -1) {
    dispatch_once(&qword_1009F8798, &stru_1009AC968);
  }
  uint64_t v1 = qword_1009F8790;

  sub_1003F99EC(v1);
}

uint64_t sub_1003F99EC(uint64_t a1)
{
  v14[0] = 0;
  v14[1] = 0;
  sub_10003AED0((uint64_t)v14, a1 + 64);
  uint64_t v2 = *(void *)(a1 + 48);
  while (v2 != *(void *)(a1 + 40))
  {
    uint64_t v4 = *(void *)(v2 - 8);
    v2 -= 8;
    uint64_t v3 = v4;
    unsigned int v5 = *(_DWORD *)(v4 + 24) - 8194;
    BOOL v6 = v5 > 0xE;
    int v7 = (1 << v5) & 0x409B;
    if (!v6 && v7 != 0) {
      goto LABEL_7;
    }
  }
  uint64_t v3 = 0;
LABEL_7:
  uint64_t v9 = sub_100017768();
  if ((*(unsigned int (**)(uint64_t))(*(void *)v9 + 8))(v9)
    && (uint64_t v10 = sub_100035F54(), ((*(uint64_t (**)(uint64_t))(*(void *)v10 + 328))(v10) & 1) != 0))
  {
    if (*(unsigned char *)(a1 + 448))
    {
      id v11 = qword_100A19E40;
      if (v3)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
        {
          id v12 = *(id *)(v3 + 8);
          *(_DWORD *)tm buf = 138543362;
          id v16 = v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "triggerW1AWDDiagnosticsEvent: Requesting AWD metrics from device %{public}@", buf, 0xCu);
        }
        buf[0] = 0;
        sub_10001B8E0(buf);
        if (sub_1000D88D4((unsigned __int8 *)(v3 + 16), 0x20u, 0, 0)
          && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
        {
          sub_1007636EC();
        }
        sub_10001B910(buf);
        sub_10001B8AC(buf);
      }
      else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
      {
        sub_1007636B8();
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      sub_100763684();
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100763754();
  }
  return sub_10003AFB4((uint64_t)v14);
}

void sub_1003F9C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_1003F9C5C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v21[0] = 0;
  v21[1] = 0;
  sub_10003AED0((uint64_t)v21, v1 + 64);
  uint64_t v2 = *(void *)(v1 + 48);
  while (v2 != *(void *)(v1 + 40))
  {
    uint64_t v3 = *(void *)(v2 - 8);
    v2 -= 8;
    unsigned int v4 = *(_DWORD *)(v3 + 24) - 8194;
    BOOL v5 = v4 > 0xE;
    int v6 = (1 << v4) & 0x409B;
    if (!v5 && v6 != 0)
    {
      char v8 = qword_100A19E40;
      if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
      {
        int v16 = BYTE1(dword_100A12C50);
        int v17 = *(unsigned __int8 *)(v1 + 415);
        uint64_t v18 = sub_10025B48C(v1 + 409, v9, v10, v11, v12, v13, v14, v15);
        *(_DWORD *)tm buf = 67109634;
        int v23 = v16;
        __int16 v24 = 1024;
        int v25 = v17;
        __int16 v26 = 2080;
        uint64_t v27 = v18;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "retransBuddyCMD: Buddy CMD type -> %d, numOfBuddyRetrans -> %d, Remote addr -> addr \"%s\" ", buf, 0x18u);
      }
      buf[0] = 0;
      sub_10001B8E0(buf);
      int v19 = sub_1000D88D4((unsigned __int8 *)(v1 + 409), 4u, byte_100A12C59, (unsigned __int8 *)&dword_100A12C50);
      sub_10001B910(buf);
      if (v19 && os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
        sub_1007637BC();
      }
      ++*(unsigned char *)(v1 + 415);
      sub_10001B8AC(buf);
      return sub_10003AFB4((uint64_t)v21);
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_100763788();
  }
  return sub_10003AFB4((uint64_t)v21);
}

void sub_1003F9E20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1003F9E50(uint64_t a1, uint64_t a2, int a3, int a4, int a5, int a6, int a7)
{
  char v31 = 0;
  uint64_t __src = 0;
  if (*(unsigned char *)(a1 + 448))
  {
    if (qword_1009F7F00 != -1) {
      dispatch_once(&qword_1009F7F00, &stru_1009AC988);
    }
    int v20 = *(_DWORD *)a2;
    LOWORD(v21) = *(_WORD *)(a2 + 4);
    uint64_t v14 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)&v20, 1);
    uint64_t v15 = qword_100A19E40;
    if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = 67110144;
      int v21 = a3;
      __int16 v22 = 1024;
      int v23 = a4;
      __int16 v24 = 1024;
      int v25 = a5;
      __int16 v26 = 1024;
      int v27 = a6;
      __int16 v28 = 1024;
      int v29 = a7;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "syncCrashLogWithBuddyComamnd, Command Type %d, side %d , offset %d , len %d, logType %d", (uint8_t *)&v20, 0x20u);
    }
    if (sub_1004764A0(v14))
    {
      unsigned int v16 = sub_1003FA0B4(a1, (uint64_t)&__src, a3, a4, a5, a6, a7);
      if (!v16) {
        goto LABEL_16;
      }
      unsigned int v17 = v16;
      LOBYTE(v20) = 0;
      sub_10001B8E0(&v20);
      int v18 = sub_1000D88D4((unsigned __int8 *)a2, 4u, v17, (unsigned __int8 *)&__src);
      memcpy(&dword_100A12C50, &__src, v17);
      byte_100A12C59 = v17;
      __int16 v19 = *(_WORD *)(a2 + 4);
      *(_DWORD *)(a1 + 409) = *(_DWORD *)a2;
      *(_WORD *)(a1 + 413) = v19;
      *(unsigned char *)(a1 + 415) = 0;
      sub_10001B910(&v20);
      sub_10001B8AC(&v20);
      if (v18)
      {
LABEL_16:
        if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
          sub_100762698();
        }
      }
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
    {
      sub_100763824();
    }
  }
}

void sub_1003FA098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

uint64_t sub_1003FA0B4(uint64_t a1, uint64_t a2, int a3, char a4, __int16 a5, __int16 a6, char a7)
{
  switch(a3)
  {
    case 0:
      int v9 = dword_1009FB578;
      *(unsigned char *)(a2 + 4) = byte_1009FB57C;
      *(_DWORD *)a2 = v9;
      goto LABEL_6;
    case 1:
      *(unsigned char *)(a2 + 4) = 0;
      *(_DWORD *)a2 = 67139584;
LABEL_6:
      uint64_t result = 5;
      break;
    case 2:
      int v11 = 50364416;
      goto LABEL_11;
    case 3:
      byte_1009FB650 = a7;
      byte_1009FB651 = HIBYTE(a5);
      byte_1009FB652 = a5;
      byte_1009FB653 = HIBYTE(a6);
      byte_1009FB654 = a6;
      uint64_t v12 = unk_1009FB64C;
      *(unsigned char *)(a2 + 8) = a6;
      *(void *)a2 = v12;
      uint64_t result = 9;
      break;
    case 4:
      int v11 = 50364928;
      goto LABEL_11;
    case 5:
      int v11 = 50365440;
LABEL_11:
      *(_DWORD *)a2 = v11;
      uint64_t result = 4;
      break;
    case 6:
      word_1009FB659 = bswap32(*(unsigned __int16 *)(a1 + 139)) >> 16;
      byte_1009FB65B = *(unsigned char *)(a1 + 141);
      int v13 = dword_1009FB655;
      *(_DWORD *)(a2 + 3) = *(int *)((char *)&dword_1009FB655 + 3);
      *(_DWORD *)a2 = v13;
      uint64_t result = 7;
      break;
    case 7:
      dword_1009FB664 = bswap32(*(_DWORD *)(a1 + 142));
      *(void *)a2 = unk_1009FB660;
      uint64_t result = 8;
      break;
    default:
      uint64_t result = os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR);
      if (result)
      {
        sub_100763858();
        uint64_t result = 0;
      }
      break;
  }
  *(unsigned char *)a2 = a4;
  return result;
}

void sub_1003FA25C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = sub_1003ED128(a1, a3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A13168, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A13168))
  {
    uint64_t v14 = +[NSCharacterSet alphanumericCharacterSet];
    qword_100A13160 = [v14 invertedSet];

    __cxa_guard_release(&qword_100A13168);
  }
  char v8 = [*(id *)v7 componentsSeparatedByCharactersInSet:qword_100A13160];
  id v15 = [v8 componentsJoinedByString:&stru_1009C1AC8];

  id v9 = [v15 length];
  if ((unint64_t)v9 >= 0x101)
  {
    uint64_t v10 = [v15 substringToIndex:256];

    id v15 = (id)v10;
  }
  int v11 = sub_1003FA558((uint64_t)v9, a4);
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 224) = 0u;
  *(_OWORD *)(a2 + 240) = 0u;
  int v12 = *(unsigned __int8 *)(v7 + 40);
  if (v12 == 8)
  {
    sprintf((char *)a2, "/private/var/mobile/Library/Logs/Bluetooth/Accessory_Trace_%s_%s_%c_%d_%d_%d_%d_%d_%d.bin", [v15 UTF8String], v11);
    goto LABEL_10;
  }
  int v13 = v15;
  if (v12 == 7)
  {
    sprintf((char *)a2, "/private/var/mobile/Library/Logs/Bluetooth/Accessory_Crash_%s_%s_%c_%d_%d_%d_%d_%d_%d.bin", [v15 UTF8String], v11);
LABEL_10:
    int v13 = v15;
  }
}

void sub_1003FA488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, id a18)
{
  __cxa_guard_abort(&qword_100A13168);
  _Unwind_Resume(a1);
}

void sub_1003FA4CC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v2 = *(void **)(a1 + 424);
    id v3 = +[NSString stringWithCString:a2 encoding:4];
    [v2 addObject:];
  }
}

void sub_1003FA544(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

const char *sub_1003FA558(uint64_t a1, int a2)
{
  int v2 = a2 - 1;
  if (a2 - 1) < 9 && ((0x187u >> v2)) {
    return (&off_1009ACC10)[v2];
  }
  if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR)) {
    sub_1007638C0();
  }
  return "Unknown";
}

void sub_1003FA5D4(uint64_t a1, void *a2)
{
  id v14 = a2;
  if (qword_1009F80A0 != -1) {
    dispatch_once(&qword_1009F80A0, &stru_1009AC9A8);
  }
  uint64_t v2 = sub_100292790((uint64_t)off_1009F8098);
  if (*(void *)(a1 + 24))
  {
    uint64_t v12 = v2;
    long long __p = 0;
    int v20 = 0;
    uint64_t v21 = 0;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    id v3 = v14;
    id v4 = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
    if (v4)
    {
      uint64_t v5 = *(void *)v16;
      do
      {
        for (CFIndex i = 0; i != v4; CFIndex i = (char *)i + 1)
        {
          if (*(void *)v16 != v5) {
            objc_enumerationMutation(v3);
          }
          id v7 = *(id *)(*((void *)&v15 + 1) + 8 * i);
          char v8 = (char *)[v7 UTF8String];
          id v9 = qword_100A19E40;
          if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)tm buf = 136315138;
            *(void *)&uint8_t buf[4] = v8;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "sendLogCompleteCallback: Sending filename %s", buf, 0xCu);
          }
          size_t v10 = strlen(v8);
          *(void *)tm buf = &__p;
          if (v8 != &v8[v10 + 1])
          {
            size_t v11 = v10 + 1;
            do
            {
              sub_1003FACF8((unint64_t **)buf, v8++);
              --v11;
            }
            while (v11);
          }
        }
        id v4 = [v3 countByEnumeratingWithState:&v15 objects:v23 count:16];
      }
      while (v4);
    }

    sub_10029BA14(v12, *(void *)(a1 + 24), 64);
    *(void *)(a1 + 24) = 0;
    if (__p)
    {
      int v20 = __p;
      operator delete(__p);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_100A19E40, OS_LOG_TYPE_ERROR))
  {
    sub_100763928();
  }
}

void sub_1003FA83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25)
{
  if (__p) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1003FA894(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  int v5 = *(_DWORD *)(a2 + 128);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 132);
  *(_DWORD *)(a1 + 16) = v5;
  *(_DWORD *)(a1 + 24) = a3;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  sub_100475EE0(a2, (uint64_t)__p);
  if (v18 >= 0) {
    uint64_t v6 = __p;
  }
  else {
    uint64_t v6 = (void **)__p[0];
  }
  uint64_t v7 = +[NSString stringWithUTF8String:v6];
  char v8 = *(void **)a1;
  *(void *)a1 = v7;

  if (v18 < 0) {
    operator delete(__p[0]);
  }
  sub_100474E18(a2, __p);
  if (v18 >= 0) {
    id v9 = __p;
  }
  else {
    id v9 = (void **)__p[0];
  }
  uint64_t v10 = +[NSString stringWithUTF8String:v9];
  size_t v11 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v10;

  if (v18 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v12 = objc_opt_new();
  int v13 = *(void **)(a1 + 80);
  *(void *)(a1 + 80) = v12;

  uint64_t v14 = objc_opt_new();
  long long v15 = *(void **)(a1 + 104);
  *(void *)(a1 + 104) = v14;

  sub_1003F3C14(a1);
  return a1;
}

void sub_1003FA9D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1003FAA3C(uint64_t a1)
{
  [*(id *)(a1 + 32) invalidate];
  uint64_t v2 = *(FILE **)(a1 + 64);
  if (v2) {
    fclose(v2);
  }

  return a1;
}

void sub_1003FAAAC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003FAAF0(id a1)
{
}

void sub_1003FAB34()
{
}

void sub_1003FAB58(id a1)
{
}

void sub_1003FAB9C()
{
}

void sub_1003FABC0(id a1)
{
}

void sub_1003FAC04()
{
}

void sub_1003FAC28(id a1)
{
}

void sub_1003FAC6C()
{
}

void sub_1003FAC90(id a1)
{
}

void sub_1003FACD4()
{
}

unint64_t **sub_1003FACF8(unint64_t **a1, unsigned char *a2)
{
  id v4 = *a1;
  uint64_t v6 = (unsigned char *)(*a1)[1];
  unint64_t v5 = (*a1)[2];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *v4;
    id v9 = &v6[-*v4];
    unint64_t v10 = (unint64_t)(v9 + 1);
    if ((uint64_t)(v9 + 1) < 0) {
      abort();
    }
    unint64_t v11 = v5 - v8;
    if (2 * v11 > v10) {
      unint64_t v10 = 2 * v11;
    }
    if (v11 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v12 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v12 = v10;
    }
    if (v12) {
      unint64_t v13 = (unint64_t)operator new(v12);
    }
    else {
      unint64_t v13 = 0;
    }
    uint64_t v14 = (char *)(v13 + v12);
    v9[v13] = *a2;
    uint64_t v7 = (uint64_t)&v9[v13 + 1];
    if (v6 == (unsigned char *)v8)
    {
      v13 += (unint64_t)v9;
    }
    else
    {
      long long v15 = &v6[~v8];
      do
      {
        char v16 = *--v6;
        (v15--)[v13] = v16;
      }
      while (v6 != (unsigned char *)v8);
      uint64_t v6 = (unsigned char *)*v4;
    }
    *id v4 = v13;
    v4[1] = v7;
    _DWORD v4[2] = (unint64_t)v14;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    *uint64_t v6 = *a2;
    uint64_t v7 = (uint64_t)(v6 + 1);
  }
  v4[1] = v7;
  return a1;
}

id sub_1003FAE1C(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
  return v2;
}

uint64_t sub_1003FAE34(uint64_t result, uint64_t a2, float a3)
{
  *(float *)a2 = a3;
  *(void *)(a2 + 4) = 1752392040;
  *(_WORD *)(a2 + 12) = 2081;
  *(void *)(a2 + 14) = result;
  return result;
}

uint64_t sub_1003FAE78()
{
  CFDictionaryRef v0 = (const __CFDictionary *)_CFCopySystemVersionDictionary();
  if (!v0) {
    return 288;
  }
  CFDictionaryRef v1 = v0;
  CFStringRef Value = (const __CFString *)CFDictionaryGetValue(v0, _kCFSystemVersionProductVersionKey);
  if (Value)
  {
    CFStringRef v3 = Value;
    CFStringRef v4 = (const __CFString *)CFDictionaryGetValue(v1, _kCFSystemVersionProductVersionExtraKey);
    if (v4) {
      CFStringRef v5 = v4;
    }
    else {
      CFStringRef v5 = @"0";
    }
    IntCFStringRef Value = CFStringGetIntValue(v3);
    int v7 = (int)(CFStringGetDoubleValue(v3) * 10.0) % 10;
    uint64_t v8 = CFStringGetIntValue(v5) | (IntValue << 8) | (16 * v7);
  }
  else
  {
    uint64_t v8 = 288;
  }
  CFRelease(v1);
  return v8;
}

uint64_t sub_1003FAF50()
{
  return 76;
}

uint64_t sub_1003FAF58()
{
  return dword_1007BE554[sub_1003FAF7C()];
}

uint64_t sub_1003FAF7C()
{
  if (MGIsDeviceOfType())
  {
    int v0 = 0;
LABEL_239:
    dword_1009FB668 = v0;
    return dword_1009FB668;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 2;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 1;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 3;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 4;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 5;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 6;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 8;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 7;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 9;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 10;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 11;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 12;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 13;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 14;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 15;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 16;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 17;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 18;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 19;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 28;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 21;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 22;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 20;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 29;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 30;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 31;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 32;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 33;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 34;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 35;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 36;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 37;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 38;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 39;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 40;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 41;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 42;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 43;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 44;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 45;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 46;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 47;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 48;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 49;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 57;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 58;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 61;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 62;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 75;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 76;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 77;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 78;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 79;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 80;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 81;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 82;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 103;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 104;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 109;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 110;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 59;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 60;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 55;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 56;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 53;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 54;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 51;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 52;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 89;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 90;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 91;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 92;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 93;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 94;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 95;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 97;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 99;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 101;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 96;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 98;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 100;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 102;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 26;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 27;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 136;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 145;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 116;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 117;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 112;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 113;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 114;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 115;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 126;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 127;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 128;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 129;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 67;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 69;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 71;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 73;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 68;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 70;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 72;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 74;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 83;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 84;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 85;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 86;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 105;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 106;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 124;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 125;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 107;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 108;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 120;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 121;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 122;
    goto LABEL_239;
  }
  if (MGIsDeviceOfType())
  {
    int v0 = 123;
    goto LABEL_239;
  }
  return dword_1009FB668;
}

void sub_1003FC624(uint64_t a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_100A13198, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_100A13198))
  {
    xmmword_100A13180 = 0uLL;
    unk_100A13190 = 0;
    __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_100A13180, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_100A13198);
  }
  if (qword_100A131A0 != -1) {
    dispatch_once(&qword_100A131A0, &stru_1009ACC58);
  }
  if (byte_100A13197 < 0)
  {
    long long v2 = xmmword_100A13180;
    sub_10003B098((unsigned char *)a1, (void *)v2, *((unint64_t *)&v2 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_100A13180;
    *(void *)(a1 + 16) = unk_100A13190;
  }
}

void sub_1003FC718(id a1)
{
  long long v9 = 0uLL;
  int v10 = 0;
  long long v11 = xmmword_1007BE504;
  LODWORD(v12[0]) = 1899561076;
  if (MGIsDeviceOfType())
  {
    int v10 = 1899561076;
    long long v9 = xmmword_1007BE504;
  }
  LODWORD(v12[0]) = 1425254930;
  long long v11 = xmmword_1007BE518;
  if (MGIsDeviceOfType())
  {
    int v10 = 1425254930;
    long long v9 = xmmword_1007BE518;
  }
  LODWORD(v12[0]) = -584398440;
  long long v11 = xmmword_1007BE52C;
  if (MGIsDeviceOfType())
  {
    int v10 = -584398440;
    long long v9 = xmmword_1007BE52C;
  }
  LODWORD(v12[0]) = -879476163;
  long long v11 = xmmword_1007BE540;
  if (MGIsDeviceOfType())
  {
    int v10 = -879476163;
    long long v9 = xmmword_1007BE540;
  }
  uint64_t v25 = 0;
  long long v23 = 0u;
  long long v24 = 0u;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  long long v11 = 0u;
  sub_10004C67C((uint64_t)&v11);
  uint64_t v1 = 0;
  char v2 = 1;
  do
  {
    uint64_t v3 = *(void *)&v12[0];
    *(_DWORD *)((char *)v12 + *(void *)(*(void *)&v12[0] - 24) + 8) = *(_DWORD *)((unsigned char *)v12
                                                                                      + *(void *)(*(void *)&v12[0]
                                                                                                  - 24)
                                                                                      + 8) & 0xFFFFFFB5 | 8;
    *(_DWORD *)((char *)v12 + *(void *)(v3 - 24) + 8) |= 0x4000u;
    LOBYTE(v7) = 48;
    CFStringRef v4 = sub_10004C5B4(v12, (unsigned __int8 *)&v7);
    *(void *)((char *)v4 + *(void *)(*v4 - 24) + 24) = 2;
    int v5 = *((unsigned __int8 *)&v9 + v1);
    std::ostream::operator<<();
    v2 &= v5 == 0;
    ++v1;
  }
  while (v1 != 20);
  if ((v2 & 1) == 0)
  {
    std::stringbuf::str();
    if (byte_100A13197 < 0) {
      operator delete((void *)xmmword_100A13180);
    }
    xmmword_100A13180 = v7;
    unk_100A13190 = v8;
  }
  *(void *)((char *)&v12[-1]
  *(void *)&v12[0] = v6;
  if (SHIBYTE(v14) < 0) {
    operator delete(*((void **)&v13 + 1));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  std::ios::~ios();
}

void sub_1003FCAE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  sub_100742518((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_1003FCBAC(id a1)
{
  uint64_t v1 = objc_alloc_init(BTVCLinkAgent);
  char v2 = (void *)qword_100A19B20;
  qword_100A19B20 = (uint64_t)v1;
}

void sub_1003FCC74(id a1)
{
  uint64_t v3 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_DEFAULT, 0);
  dispatch_queue_t v1 = dispatch_queue_create("com.apple.bluetoothd.BTVCLinkAgent", v3);
  char v2 = (void *)qword_100A131B0;
  qword_100A131B0 = (uint64_t)v1;
}

void sub_1003FCDA8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

unsigned char *sub_1003FCE2C(uint64_t a1)
{
  uint64_t result = *(unsigned char **)(a1 + 32);
  if (!result[8]) {
    return [result _activate];
  }
  return result;
}

void sub_1003FCF74(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

id sub_1003FCFF8(uint64_t a1)
{
  return [*(id *)(a1 + 32) _invalidate];
}

void sub_1003FD554(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003FD67C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003FD7A4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003FDA44(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003FDC94(id a1, NSError *a2)
{
  char v2 = a2;
  if (v2)
  {
    uint64_t v3 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      int v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: [BTVCLinkAgent] ### Start BTVCLink advertiser failed: %@\n", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1003FDF4C(_Unwind_Exception *a1)
{
  objc_destroyWeak(v1);
  objc_destroyWeak((id *)(v2 - 24));
  _Unwind_Resume(a1);
}

void sub_1003FDF74(uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5)
{
  id v9 = a3;
  id v10 = a4;
  id v11 = a5;
  size_t v12 = qword_100A19FE8;
  if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = 138412546;
    id v16 = v9;
    __int16 v17 = 2112;
    id v18 = v10;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "[BTVCLinkAgent] Receive ADV data %@ from %@\n", (uint8_t *)&v15, 0x16u);
  }
  id WeakRetained = objc_loadWeakRetained((id *)(a1 + 32));
  long long v14 = WeakRetained;
  if (WeakRetained) {
    [WeakRetained _receivedAdvReport:a2 withData:v9 fromPeer:v10 peerInfo:v11];
  }
}

void sub_1003FE090(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1003FE0B4(id a1, NSError *a2)
{
  uint64_t v2 = a2;
  if (v2)
  {
    uint64_t v3 = qword_100A19FE8;
    if (os_log_type_enabled((os_log_t)qword_100A19FE8, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 138412290;
      int v5 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "Warning: #[BTVCLinkAgent] ## Start BTVCLink scanner failed: %@\n", (uint8_t *)&v4, 0xCu);
    }
  }
}

void sub_1003FED70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,_Unwind_Exception *exception_object,void *a23)
{
  _Unwind_Resume(a1);
}

void sub_1003FEDAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,void *a25,void *a26,void *a27,void *a28,void *a29,void *a30,void *a31,void *a32,void *a33,void *a34,uint64_t a35,uint64_t a36,void *a37,void *a38)
{
  JUMPOUT(0x1003FED8CLL);
}

id sub_1003FEECC(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 64) = 1;
  return [*(id *)(a1 + 32) _update];
}

id sub_1003FEF54(uint64_t a1)
{
  *(unsigned char *)(*(void *)(a1 + 32) + 64) = 0;
  return [*(id *)(a1 + 32) _update];
}

double sub_1003FEFF0(uint64_t a1)
{
  *(void *)a1 = off_1009ACD30;
  *(_WORD *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 10) = 1;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 16) = a1 + 24;
  double result = 0.0;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(void *)(a1 + 104) = 0;
  return result;
}

void sub_1003FF044(uint64_t a1)
{
  if (qword_1009F8070 != -1) {
    dispatch_once(&qword_1009F8070, &stru_1009ACD70);
  }
  uint64_t v2 = (char *)off_1009F8068 + 64;

  sub_10026B36C((uint64_t)v2, a1);
}

void sub_1003FF0AC(uint64_t a1)
{
  uint64_t v2 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "Stack did start", buf, 2u);
  }
  uint64_t v3 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1003FF1B0;
  v5[3] = &unk_100997528;
  void v5[4] = a1;
  sub_1000197D8(v3, v5);
  int v4 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "Initialized L2CAPChannel.", buf, 2u);
  }
}

unsigned char *sub_1003FF1B0(unsigned char *result)
{
  uint64_t v1 = *((void *)result + 4);
  *(unsigned char *)(v1 + 8) = 1;
  uint64_t v2 = *(void **)(v1 + 16);
  uint64_t v3 = (void *)(v1 + 24);
  if (v2 != (void *)(v1 + 24))
  {
    do
    {
      uint64_t v4 = v2[5];
      int v5 = *(uint64_t **)(v4 + 8);
      while (v5 != *(uint64_t **)(v4 + 16))
      {
        uint64_t v6 = *v5;
        if (*(unsigned char *)(*v5 + 4))
        {
          ++v5;
        }
        else
        {
          char v21 = 0;
          sub_10001B8E0(&v21);
          int v7 = *(unsigned __int8 *)(v6 + 56);
          if (v7 == 1)
          {
            if (!sub_10022A2F0()) {
              return sub_10001B8AC(&v21);
            }
            int v7 = *(unsigned __int8 *)(v6 + 56);
          }
          int v8 = *(unsigned __int16 *)(v6 + 2);
          if (v7) {
            int v9 = sub_1001E6164(v8, (uint64_t)sub_1003FF530);
          }
          else {
            int v9 = sub_1001E5FF0(v8, (uint64_t)sub_1003FF414);
          }
          int v10 = v9;
          if (v9)
          {
            id v11 = qword_100A19EE8;
            if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
            {
              int v14 = *(unsigned __int16 *)(v6 + 2);
              sub_10003AE4C(v2[4], (uint64_t)__p);
              int v15 = __p;
              if (v20 < 0) {
                int v15 = (void **)__p[0];
              }
              *(_DWORD *)tm buf = 67109634;
              int v23 = v14;
              __int16 v24 = 2082;
              uint64_t v25 = v15;
              __int16 v26 = 1024;
              int v27 = v10;
              _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Failed to re-register endpoint with psm 0x%04x after power cycle, for session \"%{public}s\" with result %{bluetooth:OI_STATUS}u", buf, 0x18u);
              if (v20 < 0) {
                operator delete(__p[0]);
              }
            }
            size_t v12 = *(uint64_t **)(v4 + 16);
            uint64_t v13 = (char *)v12 - (char *)(v5 + 1);
            if (v12 != v5 + 1) {
              memmove(v5, v5 + 1, (char *)v12 - (char *)(v5 + 1));
            }
            *(void *)(v4 + 16) = (char *)v5 + v13;
          }
          else
          {
            ++v5;
          }
          double result = sub_10001B8AC(&v21);
        }
      }
      id v16 = (void *)v2[1];
      if (v16)
      {
        do
        {
          __int16 v17 = v16;
          id v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          __int16 v17 = (void *)v2[2];
          BOOL v18 = *v17 == (void)v2;
          uint64_t v2 = v17;
        }
        while (!v18);
      }
      uint64_t v2 = v17;
    }
    while (v17 != v3);
  }
  return result;
}

void sub_1003FF3F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1003FF414(int a1, uint64_t a2, int a3)
{
  uint64_t v6 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109376;
    int v12 = a1;
    __int16 v13 = 1024;
    int v14 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "l2capConnectInd for PSM: 0x%0x, CID: 0x%x", buf, 0xEu);
  }
  uint64_t v7 = sub_100019878();
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 3221225472;
  _DWORD v8[2] = sub_100404930;
  v8[3] = &unk_100997570;
  __int16 v9 = a1;
  void v8[4] = a2;
  __int16 v10 = a3;
  sub_100013018(v7, v8);
}

void sub_1003FF530(__int16 a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  __int16 v10 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    id v11 = "";
    if (a4) {
      id v11 = ", wakeUpEvent";
    }
    *(_DWORD *)tm buf = 67109378;
    int v18 = a3;
    __int16 v19 = 2080;
    char v20 = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "Queueing initial data on channel 0x%04x as the L2CAP Channel hasn't finished registration%s", buf, 0x12u);
  }
  uint64_t v12 = sub_100019878();
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 3221225472;
  v13[2] = sub_100402EB4;
  void v13[3] = &unk_1009A28D8;
  __int16 v14 = a1;
  __int16 v15 = a3;
  char v16 = a4;
  v13[4] = a2;
  void v13[5] = a5;
  sub_100013018(v12, v13);
}

void sub_1003FF678(uint64_t a1)
{
  uint64_t v2 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "L2CAPChannelManager::stackWillStop enter", buf, 2u);
  }
  uint64_t v3 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_1003FF77C;
  v5[3] = &unk_100997528;
  void v5[4] = a1;
  sub_1000197D8(v3, v5);
  uint64_t v4 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "L2CAPChannelManager::stackWillStop exit", buf, 2u);
  }
}

unsigned char *sub_1003FF77C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  char v24 = 0;
  sub_10001B8E0(&v24);
  uint64_t v2 = *(void **)(v1 + 16);
  *(unsigned char *)(v1 + 8) = 0;
  uint64_t v3 = (void *)(v1 + 24);
  if (v2 != (void *)(v1 + 24))
  {
    do
    {
      uint64_t v4 = v2[5];
      for (CFIndex i = *(uint64_t **)(v4 + 8); i != *(uint64_t **)(v4 + 16); ++i)
      {
        uint64_t v6 = *i;
        uint64_t v7 = *(__int16 **)(*i + 120);
        if (v7 != *(__int16 **)(*i + 128))
        {
          do
          {
            uint64_t v8 = sub_1002C5648();
            sub_1002C8D38(v8, *v7);
            v7 += 13;
          }
          while (v7 != *(__int16 **)(v6 + 128));
          uint64_t v7 = *(__int16 **)(v6 + 120);
        }
        *(void *)(v6 + 128) = v7;
        if (*(unsigned char *)(v6 + 4))
        {
          __int16 v9 = qword_100A19EE8;
          if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = *(unsigned __int16 *)(v6 + 2);
            sub_10003AE4C(v2[4], (uint64_t)__p);
            id v11 = __p;
            if (v23 < 0) {
              id v11 = (void **)__p[0];
            }
            *(_DWORD *)tm buf = 67109378;
            int v26 = v10;
            __int16 v27 = 2082;
            __int16 v28 = v11;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Clearing out outgoing connections to PSM 0x%04x for session %{public}s", buf, 0x12u);
            if (v23 < 0) {
              operator delete(__p[0]);
            }
          }
          uint64_t v12 = *(uint64_t **)(v4 + 16);
          uint64_t v13 = (char *)v12 - (char *)(i + 1);
          if (v12 != i + 1) {
            memmove(i, i + 1, (char *)v12 - (char *)(i + 1));
          }
          *(void *)(v4 + 16) = (char *)i + v13;
          __int16 v14 = *(void **)(v6 + 120);
          if (v14)
          {
            *(void *)(v6 + 128) = v14;
            operator delete(v14);
          }
          operator delete();
        }
      }
      __int16 v15 = (void *)v2[1];
      if (v15)
      {
        do
        {
          char v16 = v15;
          __int16 v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          char v16 = (void *)v2[2];
          BOOL v17 = *v16 == (void)v2;
          uint64_t v2 = v16;
        }
        while (!v17);
      }
      uint64_t v2 = v16;
    }
    while (v16 != (void *)(v1 + 24));
    uint64_t v2 = *(void **)(v1 + 16);
    uint64_t v3 = (void *)(v1 + 24);
  }
  if (v2 != v3)
  {
    do
    {
      uint64_t v18 = v2[5];
      if (*(unsigned char *)(v18 + 32))
      {
        sub_100406E90(v18);
        operator delete();
      }
      __int16 v19 = (void *)v2[1];
      if (v19)
      {
        do
        {
          char v20 = v19;
          __int16 v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          char v20 = (void *)v2[2];
          BOOL v17 = *v20 == (void)v2;
          uint64_t v2 = v20;
        }
        while (!v17);
      }
      uint64_t v2 = v20;
    }
    while (v20 != v3);
  }
  *(void *)(v1 + 48) = *(void *)(v1 + 40);
  *(void *)(v1 + 72) = *(void *)(v1 + 64);
  return sub_10001B8AC(&v24);
}

void sub_1003FFA98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

void sub_1003FFABC(uint64_t a1, unint64_t a2, uint64_t a3, int a4, unsigned __int16 a5, char a6, int a7, int a8, unsigned __int16 a9, unsigned __int16 a10, unsigned __int8 a11, int a12)
{
  unint64_t v99 = a2;
  unsigned __int16 v98 = a5;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763BBC();
  }
  if (!a3 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763B88();
  }
  if (!a4 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763B54();
  }
  if (!*(unsigned char *)(a1 + 8))
  {
    int v49 = qword_100A19EE8;
    if (!os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_76;
    }
    sub_10003AE4C(v99, (uint64_t)&__p);
    int v50 = v112 >= 0 ? &__p : (void **)__p;
    int v51 = *(unsigned __int8 *)(a1 + 8);
    *(_DWORD *)tm buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = v98;
    __int16 v101 = 2082;
    *(void *)int v102 = v50;
    *(_WORD *)&v102[8] = 1024;
    *(_DWORD *)CFTypeID v103 = v51;
    *(_WORD *)&v103[4] = 1024;
    *(_DWORD *)int v104 = a12;
    _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "Registering L2CAP Channel with PSM 0x%04x for session \"%{public}s\" failed , fStarted=%d priority:%d", buf, 0x1Eu);
    if (v112 < 0)
    {
      operator delete(__p);
      if (!a3) {
        return;
      }
    }
    else
    {
LABEL_76:
      if (!a3) {
        return;
      }
    }
    (*(void (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16))(a3, v98, 111);
    return;
  }
  if (v98)
  {
LABEL_12:
    int v18 = a10;
    __int16 v19 = a9;
    if (a7) {
      int v20 = a7;
    }
    else {
      int v20 = 1024;
    }
    if (a8) {
      int v21 = a8;
    }
    else {
      int v21 = 1024;
    }
    int v95 = v20;
    int v96 = v21;
    if (!(a10 | a9))
    {
      int v18 = 30000;
      __int16 v19 = -1;
    }
    if (!v18) {
      int v18 = 30000;
    }
    unsigned __int16 v93 = v19;
    int v94 = v18;
    long long v22 = qword_100A19EE8;
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
    {
      int v23 = v98;
      sub_10003AE4C(v99, (uint64_t)&__p);
      char v24 = v112 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)tm buf = 67110658;
      *(_DWORD *)&uint8_t buf[4] = v23;
      __int16 v101 = 1024;
      *(_DWORD *)int v102 = v95;
      *(_WORD *)&v102[4] = 1024;
      *(_DWORD *)&v102[6] = v96;
      *(_WORD *)CFTypeID v103 = 1024;
      *(_DWORD *)&v103[2] = v93;
      *(_WORD *)int v104 = 1024;
      *(_DWORD *)&v104[2] = v94;
      __int16 v105 = 1024;
      int v106 = a12;
      __int16 v107 = 2082;
      char v108 = v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "trying to publish psm:%d inMTU:%d inMPS:%d initialCredits:%d creditAckDelta:%d priority:%d for session session \"%{public}s\"", buf, 0x30u);
      if (v112 < 0) {
        operator delete(__p);
      }
    }
    int v26 = (uint64_t *)(a1 + 24);
    uint64_t v25 = *(void **)(a1 + 24);
    __int16 v27 = (uint64_t **)(a1 + 16);
    if (!v25) {
      goto LABEL_39;
    }
    __int16 v28 = (uint64_t *)(a1 + 24);
    int v29 = *(void **)(a1 + 24);
    do
    {
      unint64_t v30 = v29[4];
      BOOL v31 = v30 >= v99;
      if (v30 >= v99) {
        uint64_t v32 = v29;
      }
      else {
        uint64_t v32 = v29 + 1;
      }
      if (v31) {
        __int16 v28 = v29;
      }
      int v29 = (void *)*v32;
    }
    while (*v32);
    if (v28 == v26 || v99 < v28[4]) {
LABEL_39:
    }
      __int16 v28 = (uint64_t *)(a1 + 24);
    if (!v25) {
      goto LABEL_51;
    }
    CFDictionaryRef v33 = (uint64_t *)(a1 + 24);
    do
    {
      unint64_t v34 = v25[4];
      BOOL v35 = v34 >= v99;
      if (v34 >= v99) {
        CFStringRef v36 = v25;
      }
      else {
        CFStringRef v36 = v25 + 1;
      }
      if (v35) {
        CFDictionaryRef v33 = v25;
      }
      uint64_t v25 = (void *)*v36;
    }
    while (*v36);
    if (v33 == v26 || v99 < v33[4])
    {
LABEL_51:
      CFTypeID v37 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
      {
        sub_10003AE4C(v99, (uint64_t)buf);
        if (v103[3] >= 0) {
          unsigned __int8 v38 = buf;
        }
        else {
          unsigned __int8 v38 = *(uint8_t **)buf;
        }
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = a11;
        __int16 v110 = 2082;
        CFTypeID v111 = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "Creating a new session %d for \"%{public}s\"", (uint8_t *)&__p, 0x12u);
        if ((v103[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      operator new();
    }
    char v39 = a6;
    uint64_t v40 = v28[5];
    uint64_t v41 = *(void *)(v40 + 8);
    uint64_t v42 = *(void *)(v40 + 16);
    if (v41 == v42)
    {
LABEL_63:
      CFTypeID v45 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
      {
        int v46 = v98;
        sub_10003AE4C(v99, (uint64_t)buf);
        CFNumberRef v47 = v103[3] >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v46;
        __int16 v110 = 2082;
        CFTypeID v111 = v47;
        _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "Registering L2CAP Channel with PSM 0x%04x for session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
        if ((v103[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      char v97 = 0;
      sub_10001B8E0(&v97);
      if (a11) {
        int v48 = sub_1001E6164(v98, (uint64_t)sub_1003FF530);
      }
      else {
        int v48 = sub_1001E5FF0(v98, (uint64_t)sub_1003FF414);
      }
      int v55 = v48;
      sub_10001B910(&v97);
      if (!v55)
      {
        int v58 = (void *)*v26;
        if (*v26)
        {
          do
          {
            if (v58[4] >= v99) {
              __int16 v59 = v58;
            }
            else {
              __int16 v59 = v58 + 1;
            }
            int v58 = (void *)*v59;
          }
          while (*v59);
        }
        operator new();
      }
      id v56 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
      {
        int v80 = v98;
        sub_10003AE4C(v99, (uint64_t)&__p);
        uint64_t v81 = v112 >= 0 ? &__p : (void **)__p;
        *(_DWORD *)tm buf = 67109634;
        *(_DWORD *)&uint8_t buf[4] = v80;
        __int16 v101 = 2082;
        *(void *)int v102 = v81;
        *(_WORD *)&v102[8] = 1024;
        *(_DWORD *)CFTypeID v103 = v55;
        _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "Failed to register L2CAP Channel with PSM 0x%04x for session \"%{public}s\" with result %{bluetooth:OI_STATUS}u", buf, 0x18u);
        if (v112 < 0) {
          operator delete(__p);
        }
      }
      switch(v55)
      {
        case 104:
          uint64_t v57 = 1802;
          break;
        case 482:
          uint64_t v57 = 1800;
          break;
        case 402:
          uint64_t v57 = 1801;
          break;
        default:
          uint64_t v57 = 1;
          break;
      }
      uint64_t v63 = v28[5];
      if (v63)
      {
        sub_100406E90(v63);
        operator delete();
      }
      sub_10004D3B8(v27, v28);
      operator delete(v28);
      sub_10001B8AC(&v97);
LABEL_127:
      if (a3) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16))(a3, v98, v57);
      }
      return;
    }
    int v43 = v98;
    while (1)
    {
      CFNumberRef v44 = *(unsigned char **)v41;
      if (*(unsigned __int16 *)(*(void *)v41 + 2) == v98 && !v44[4]) {
        break;
      }
      v41 += 8;
      if (v41 == v42) {
        goto LABEL_63;
      }
    }
    if (*v44)
    {
      for (uint64_t i = *(void *)(a1 + 40); i != *(void *)(a1 + 48); i += 48)
      {
        if (v98 == *(unsigned __int16 *)(i + 8))
        {
          uint64_t v67 = qword_100A19EE8;
          if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
          {
            sub_10003AE4C(*(void *)i, (uint64_t)buf);
            if (v103[3] >= 0) {
              char v92 = buf;
            }
            else {
              char v92 = *(uint8_t **)buf;
            }
            LODWORD(__p) = 67109378;
            HIDWORD(__p) = v43;
            __int16 v110 = 2082;
            CFTypeID v111 = v92;
            _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "Failed to register L2CAP Channel PSM 0x%04x as it is already pending registration by session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
            if ((v103[3] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            int v43 = v98;
          }
          break;
        }
      }
      CFStringRef v68 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_INFO))
      {
        sub_10003AE4C(v28[4], (uint64_t)buf);
        if (v103[3] >= 0) {
          unsigned int v69 = buf;
        }
        else {
          unsigned int v69 = *(uint8_t **)buf;
        }
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v43;
        __int16 v110 = 2082;
        CFTypeID v111 = v69;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_INFO, "Delaying registration of L2CAP PSM 0x%04x as it is currently being unregistered by session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
        if ((v103[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        LOWORD(v43) = v98;
      }
      unint64_t v70 = v99;
      unint64_t v71 = *(void *)(a1 + 56);
      unint64_t v72 = *(void *)(a1 + 48);
      if (v72 >= v71)
      {
        uint64_t v74 = *(void *)(a1 + 40);
        unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v72 - v74) >> 4);
        unint64_t v76 = v75 + 1;
        if (v75 + 1 > 0x555555555555555) {
          abort();
        }
        unint64_t v77 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v71 - v74) >> 4);
        if (2 * v77 > v76) {
          unint64_t v76 = 2 * v77;
        }
        if (v77 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v78 = 0x555555555555555;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78) {
          char v79 = (char *)sub_1002C50E8(a1 + 56, v78);
        }
        else {
          char v79 = 0;
        }
        __int16 v82 = &v79[48 * v75];
        *(void *)__int16 v82 = v70;
        int v83 = &v79[48 * v78];
        *((_WORD *)v82 + 4) = v43;
        *((void *)v82 + 2) = a3;
        v82[24] = v39;
        *((_DWORD *)v82 + 7) = a4;
        *((_WORD *)v82 + 16) = v95;
        *((_WORD *)v82 + 17) = v96;
        *((_WORD *)v82 + 18) = v93;
        *((_WORD *)v82 + 19) = v94;
        v82[40] = a11;
        *((_DWORD *)v82 + 11) = a12;
        CFTypeID v73 = v82 + 48;
        CFTypeID v85 = *(char **)(a1 + 40);
        uint64_t v84 = *(char **)(a1 + 48);
        if (v84 != v85)
        {
          do
          {
            long long v86 = *((_OWORD *)v84 - 3);
            long long v87 = *((_OWORD *)v84 - 1);
            *((_OWORD *)v82 - 2) = *((_OWORD *)v84 - 2);
            *((_OWORD *)v82 - 1) = v87;
            *((_OWORD *)v82 - 3) = v86;
            v82 -= 48;
            v84 -= 48;
          }
          while (v84 != v85);
          uint64_t v84 = *(char **)(a1 + 40);
        }
        *(void *)(a1 + 40) = v82;
        *(void *)(a1 + 48) = v73;
        *(void *)(a1 + 56) = v83;
        if (v84) {
          operator delete(v84);
        }
      }
      else
      {
        *(void *)unint64_t v72 = v99;
        *(_WORD *)(v72 + 8) = v43;
        *(void *)(v72 + 16) = a3;
        *(unsigned char *)(v72 + 24) = v39;
        *(_DWORD *)(v72 + 28) = a4;
        *(_WORD *)(v72 + 32) = v95;
        *(_WORD *)(v72 + 34) = v96;
        *(_WORD *)(v72 + 36) = v93;
        *(_WORD *)(v72 + 38) = v94;
        *(unsigned char *)(v72 + 40) = a11;
        CFTypeID v73 = (char *)(v72 + 48);
        *(_DWORD *)(v72 + 44) = a12;
      }
      *(void *)(a1 + 48) = v73;
      uint64_t v57 = 10;
      goto LABEL_164;
    }
    uint64_t v66 = qword_100A19EE8;
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
    {
      sub_10003AE4C(v28[4], (uint64_t)buf);
      if (v103[3] >= 0) {
        __int16 v91 = buf;
      }
      else {
        __int16 v91 = *(uint8_t **)buf;
      }
      LODWORD(__p) = 67109378;
      HIDWORD(__p) = v43;
      __int16 v110 = 2082;
      CFTypeID v111 = v91;
      _os_log_error_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_ERROR, "Failed to register L2CAP Channel with PSM 0x%04x as it is already registered by session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
      if ((v103[3] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v40 = v28[5];
      if (v40)
      {
LABEL_125:
        sub_100406E90(v40);
        operator delete();
      }
    }
    else if (v40)
    {
      goto LABEL_125;
    }
    sub_10004D3B8(v27, v28);
    operator delete(v28);
    uint64_t v57 = 103;
LABEL_164:
    char v88 = qword_100A19EE8;
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
    {
      int v89 = v98;
      sub_10003AE4C(v99, (uint64_t)&__p);
      char v90 = v112 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)tm buf = 67109634;
      *(_DWORD *)&uint8_t buf[4] = v89;
      __int16 v101 = 2082;
      *(void *)int v102 = v90;
      *(_WORD *)&v102[8] = 1024;
      *(_DWORD *)CFTypeID v103 = v57;
      _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, "Registering L2CAP Channel with PSM 0x%04x for session \"%{public}s\" failed with error %d", buf, 0x18u);
      if (v112 < 0) {
        operator delete(__p);
      }
    }
    goto LABEL_127;
  }
  if (a11)
  {
    int v52 = sub_1001E5F0C(&v98);
    uint64_t v53 = qword_100A19EE8;
    if (!v52)
    {
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
      {
        int v64 = v98;
        sub_10003AE4C(v99, (uint64_t)buf);
        uint64_t v65 = v103[3] >= 0 ? buf : *(uint8_t **)buf;
        LODWORD(__p) = 67109378;
        HIDWORD(__p) = v64;
        __int16 v110 = 2082;
        CFTypeID v111 = v65;
        _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "Automatically selected psm:%d for session session \"%{public}s\"", (uint8_t *)&__p, 0x12u);
        if ((v103[3] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
      }
      goto LABEL_12;
    }
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
      sub_100763AEC();
    }
    if (a3)
    {
      switch(v52)
      {
        case 104:
          uint64_t v54 = 1802;
          break;
        case 482:
          uint64_t v54 = 1800;
          break;
        case 402:
          uint64_t v54 = 1801;
          break;
        default:
          uint64_t v54 = 1;
          break;
      }
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a3 + 16))(a3, v98, v54);
    }
  }
  else if (a3)
  {
    __int16 v61 = qword_100A19EE8;
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)tm buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_ERROR, "Invalid Classic PSM: %d", buf, 8u);
      uint64_t v62 = v98;
    }
    else
    {
      uint64_t v62 = 0;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a3 + 16))(a3, v62, 1800);
  }
}

void sub_10040091C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, char a14, char a15)
{
}

void sub_100400940(void *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v6 = qword_100A19EE8;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "Session cannot be NULL", (uint8_t *)__p, 2u);
    uint64_t v6 = qword_100A19EE8;
    if (a3) {
      goto LABEL_6;
    }
  }
  else if (a3)
  {
    goto LABEL_6;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_FAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_FAULT, "psm cannot be 0", (uint8_t *)__p, 2u);
    uint64_t v6 = qword_100A19EE8;
  }
LABEL_6:
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003AE4C(a2, (uint64_t)__p);
    uint64_t v7 = v33 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)tm buf = 67109378;
    int v35 = a3;
    __int16 v36 = 2082;
    CFTypeID v37 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "trying to unpublish psm:%d for session \"%{public}s\"", buf, 0x12u);
    if (v33 < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v8 = (void *)a1[3];
  if (v8)
  {
    __int16 v9 = a1 + 3;
    do
    {
      unint64_t v10 = v8[4];
      BOOL v11 = v10 >= a2;
      if (v10 >= a2) {
        uint64_t v12 = v8;
      }
      else {
        uint64_t v12 = v8 + 1;
      }
      if (v11) {
        __int16 v9 = v8;
      }
      uint64_t v8 = (void *)*v12;
    }
    while (*v12);
    if (v9 != a1 + 3 && v9[4] <= a2)
    {
      uint64_t v13 = (void *)v9[5];
      __int16 v14 = (char *)a1[5];
      __int16 v15 = (char *)a1[6];
      if (v14 != v15)
      {
        uint64_t v16 = 0;
        while (*(void *)&v14[v16] != a2 || *(unsigned __int16 *)&v14[v16 + 8] != a3)
        {
          v16 += 48;
          if (&v14[v16] == v15) {
            goto LABEL_28;
          }
        }
        char v24 = qword_100A19EE8;
        if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
        {
          sub_10003AE4C(a2, (uint64_t)__p);
          if (v33 >= 0) {
            uint64_t v25 = __p;
          }
          else {
            uint64_t v25 = (void **)__p[0];
          }
          *(_DWORD *)tm buf = 67109378;
          int v35 = a3;
          __int16 v36 = 2082;
          CFTypeID v37 = v25;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "Unregistering pending L2CAP Channel 0x%04x for session \"%{public}s\"", buf, 0x12u);
          if (v33 < 0) {
            operator delete(__p[0]);
          }
          __int16 v15 = (char *)a1[6];
        }
        int v26 = &v14[v16 + 48];
        int64_t v27 = v15 - v26;
        if (v15 != v26) {
          memmove(&v14[v16], v26, v15 - v26);
        }
        uint64_t v21 = 0;
        a1[6] = &v14[v16 + v27];
        goto LABEL_50;
      }
LABEL_28:
      BOOL v17 = (uint64_t *)v13[1];
      int v18 = (uint64_t *)v13[2];
      if (v17 == v18)
      {
LABEL_32:
        uint64_t v21 = 0;
      }
      else
      {
        uint64_t v19 = -(uint64_t)v17;
        while (1)
        {
          uint64_t v20 = *v17;
          if (*(unsigned __int16 *)(*v17 + 2) == a3) {
            break;
          }
          ++v17;
          v19 -= 8;
          if (v17 == v18) {
            goto LABEL_32;
          }
        }
        if (*(unsigned char *)v20)
        {
          long long v22 = qword_100A19EE8;
          if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
          {
            sub_10003AE4C(a2, (uint64_t)__p);
            if (v33 >= 0) {
              int v23 = __p;
            }
            else {
              int v23 = (void **)__p[0];
            }
            *(_DWORD *)tm buf = 67109378;
            int v35 = a3;
            __int16 v36 = 2082;
            CFTypeID v37 = v23;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "L2CAP Channel 0x%04x for session \"%{public}s\" is already being unregistered", buf, 0x12u);
            if (v33 < 0) {
              operator delete(__p[0]);
            }
          }
          return;
        }
        uint64_t v28 = sub_100400D6C((uint64_t)a1, v20);
        if (v28 == 10) {
          return;
        }
        uint64_t v21 = v28;
        if (!v28)
        {
          uint64_t v29 = v13[2];
          uint64_t v30 = v29 - (8 - v19);
          if (v29 != 8 - v19) {
            memmove((void *)-v19, (const void *)(8 - v19), v29 - (8 - v19));
          }
          v13[2] = v30 - v19;
          BOOL v31 = *(void **)(v20 + 120);
          if (v31)
          {
            *(void *)(v20 + 128) = v31;
            operator delete(v31);
          }
          operator delete();
        }
      }
LABEL_50:
      (*(void (**)(void, uint64_t, uint64_t))(*(void *)*v13 + 24))(*v13, a3, v21);
    }
  }
}

uint64_t sub_100400D6C(uint64_t a1, uint64_t a2)
{
  int v3 = *(unsigned __int8 *)(a2 + 56);
  if (!*(unsigned char *)(a1 + 8))
  {
    if (*(void *)(a2 + 120) != *(void *)(a2 + 128))
    {
      uint64_t result = os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT);
      if (!result) {
        return result;
      }
      sub_100763BF0();
    }
    return 0;
  }
  *(unsigned char *)a2 = 1;
  uint64_t v4 = *(unsigned __int16 **)(a2 + 120);
  if (v4 == *(unsigned __int16 **)(a2 + 128)) {
    goto LABEL_14;
  }
  do
  {
    char v17 = 0;
    sub_10001B8E0(&v17);
    unsigned int v5 = *v4;
    if (v3) {
      int v6 = sub_1001E1530(v5);
    }
    else {
      int v6 = sub_1001E121C(v5, 436);
    }
    int v7 = v6;
    sub_10001B910(&v17);
    if (v7)
    {
      uint64_t v8 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
      {
        int v9 = *v4;
        *(_DWORD *)tm buf = 67109632;
        int v19 = v9;
        __int16 v20 = 1024;
        int v21 = v3;
        __int16 v22 = 1024;
        int v23 = v7;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to disconnect channel %x for session type %d status=%d", buf, 0x14u);
      }
    }
    sub_10001B8AC(&v17);
    v4 += 13;
  }
  while (v4 != *(unsigned __int16 **)(a2 + 128));
  if (v4 == *(unsigned __int16 **)(a2 + 120))
  {
LABEL_14:
    char v17 = 0;
    sub_10001B8E0(&v17);
    int v12 = *(unsigned __int16 *)(a2 + 2);
    if (v3) {
      int v13 = sub_1001E6310(v12);
    }
    else {
      int v13 = sub_1001E61E4(v12);
    }
    int v14 = v13;
    sub_10001B910(&v17);
    if (v14)
    {
      __int16 v15 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT))
      {
        int v16 = *(unsigned __int16 *)(a2 + 2);
        *(_DWORD *)tm buf = 67109632;
        int v19 = v3;
        __int16 v20 = 1024;
        int v21 = v16;
        __int16 v22 = 1024;
        int v23 = v14;
        _os_log_fault_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_FAULT, "Couldn't unregister valid L2CAP Channel 0x%04x for session type %d with result %{bluetooth:OI_STATUS}u", buf, 0x14u);
      }
    }
    sub_10001B8AC(&v17);
    return 0;
  }
  unint64_t v10 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "We are still waiting for some channels to disconnect, we'll complete the unpublishing when disconnection complete.", buf, 2u);
  }
  return 10;
}

void sub_100401008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100401028(uint64_t a1, unint64_t a2, void (***a3)(void, void *, uint64_t, uint64_t, void, void, void), int a4, uint64_t a5, int a6, int a7, int a8, unsigned __int16 a9, unsigned __int8 *uu, char a11, int a12)
{
  unint64_t v84 = a2;
  if (!a2 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763BBC();
  }
  if (!a3 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763B88();
  }
  if (!a5 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763DDC();
  }
  if (!a4 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763B54();
  }
  int is_null = uuid_is_null(uu);
  __int16 v20 = qword_100A19EE8;
  if (is_null && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)tm buf = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_FAULT, "device cannot be empty", buf, 2u);
    __int16 v20 = qword_100A19EE8;
  }
  if (a6) {
    int v21 = a6;
  }
  else {
    int v21 = 1024;
  }
  int v79 = v21;
  if (a7) {
    int v22 = a7;
  }
  else {
    int v22 = 1024;
  }
  int v78 = v22;
  if (a9 | a8) {
    int v23 = a9;
  }
  else {
    int v23 = 30000;
  }
  if (a9 | a8) {
    unsigned __int16 v24 = a8;
  }
  else {
    unsigned __int16 v24 = -1;
  }
  if (v23) {
    int v25 = v23;
  }
  else {
    int v25 = 30000;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    int v26 = v85;
    sub_10003AE4C(v84, (uint64_t)v85);
    if (SHIBYTE(v85[2]) < 0) {
      int v26 = (void **)v85[0];
    }
    memset(out, 0, sizeof(out));
    uuid_unparse_upper(uu, out);
    sub_10004191C(__p, out);
    if (v83 >= 0) {
      int64_t v27 = __p;
    }
    else {
      int64_t v27 = (void **)__p[0];
    }
    *(_DWORD *)tm buf = 136448002;
    *(void *)&uint8_t buf[4] = v26;
    *(_WORD *)&unsigned char buf[12] = 2082;
    *(void *)&unsigned char buf[14] = v27;
    *(_WORD *)&buf[22] = 1024;
    *(_DWORD *)&unsigned char buf[24] = a5;
    *(_WORD *)&buf[28] = 1024;
    *(_DWORD *)&buf[30] = v79;
    *(_WORD *)&buf[34] = 1024;
    *(_DWORD *)&buf[36] = v78;
    __int16 v87 = 1024;
    int v88 = v24;
    __int16 v89 = 1024;
    int v90 = v25;
    __int16 v91 = 1024;
    int v92 = a12;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" trying to connect to device %{public}s on PSM:0x%04x inMTU:%d inMPS:%d initialCredits:%d creditAckDelta:%d priority:%d", buf, 0x3Au);
    if (v83 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v85[2]) < 0) {
      operator delete(v85[0]);
    }
  }
  uint64_t v81 = 0;
  if (a11)
  {
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009ACDF0);
    }
    if (!sub_1006856B8((uint64_t)off_1009F7EB8, uu, &v81))
    {
      CFNumberRef v47 = qword_100A19EE8;
      if (!os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_87;
      }
      memset(buf, 0, 37);
      uuid_unparse_upper(uu, buf);
      sub_10004191C(out, buf);
      int v48 = out[23] >= 0 ? out : *(char **)out;
      *(_DWORD *)tm buf = 136446466;
      *(void *)&uint8_t buf[4] = v48;
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&unsigned char buf[14] = a5;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "could not connect to device %{public}s on PSM:0x%04x", buf, 0x12u);
      if (out[23] < 0)
      {
        operator delete(*(void **)out);
        if (!a3) {
          return;
        }
      }
      else
      {
LABEL_87:
        if (!a3) {
          return;
        }
      }
      int v49 = sub_100031234(uu);
      (**a3)(a3, v49, 1804, a5, 0, 0, 0);

      return;
    }
    uint64_t v77 = 0;
    uint64_t v28 = 0;
LABEL_52:
    unint64_t v34 = *(void **)(a1 + 24);
    char v33 = (void *)(a1 + 24);
    uint64_t v32 = v34;
    if (!v34) {
      goto LABEL_63;
    }
    int v35 = v33;
    __int16 v36 = v32;
    do
    {
      unint64_t v37 = v36[4];
      BOOL v38 = v37 >= v84;
      if (v37 >= v84) {
        char v39 = v36;
      }
      else {
        char v39 = v36 + 1;
      }
      if (v38) {
        int v35 = v36;
      }
      __int16 v36 = (void *)*v39;
    }
    while (*v39);
    if (v35 == v33 || v84 < v35[4]) {
LABEL_63:
    }
      int v35 = v33;
    if (!v32) {
      goto LABEL_75;
    }
    uint64_t v40 = v33;
    do
    {
      unint64_t v41 = v32[4];
      BOOL v42 = v41 >= v84;
      if (v41 >= v84) {
        int v43 = v32;
      }
      else {
        int v43 = v32 + 1;
      }
      if (v42) {
        uint64_t v40 = v32;
      }
      uint64_t v32 = (void *)*v43;
    }
    while (*v43);
    if (v40 == v33 || v84 < v40[4]) {
LABEL_75:
    }
      operator new();
    uint64_t v44 = v35[5];
    for (uint64_t i = *(uint64_t **)(v44 + 8); ; ++i)
    {
      if (i == *(uint64_t **)(v44 + 16)) {
        operator new();
      }
      uint64_t v46 = *i;
      if (*(unsigned __int16 *)(*i + 2) == a5 && *(unsigned char *)(v46 + 4) == 1) {
        break;
      }
    }
    for (uint64_t j = *(void *)(v46 + 120); j != *(void *)(v46 + 128); j += 26)
    {
      if (!uuid_compare((const unsigned __int8 *)(j + 2), uu))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
          sub_100763D30(uu);
        }
        unint64_t v72 = *(void (****)(void, void *, uint64_t, uint64_t, void, void, void))v44;
        CFTypeID v73 = sub_100031234(uu);
        (**v72)(v72, v73, 1803, a5, 0, 0, 0);

        return;
      }
    }
    memset(v85, 0, 26);
    uuid_copy((unsigned __int8 *)v85 + 2, uu);
    BYTE2(v85[2]) = 0;
    HIDWORD(v85[2]) = 0;
    LOBYTE(v85[3]) = 0;
    char v80 = 0;
    sub_10001B8E0(&v80);
    if (a11 == 1)
    {
      unsigned int v54 = sub_100401F30(v81);
      *(_WORD *)(v46 + 8) = v54 + v54 * (0x400 / v54);
      *(_WORD *)(v46 + 10) = v54 + v54 * (0x400 / v54);
      goto LABEL_104;
    }
    if (a11)
    {
LABEL_104:
      int v55 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
      {
        memset(buf, 0, 37);
        uuid_unparse_upper(uu, buf);
        sub_10004191C(__p, buf);
        id v56 = v83 >= 0 ? __p : (void **)__p[0];
        int v57 = *(unsigned __int16 *)(v46 + 8);
        int v58 = *(unsigned __int16 *)(v46 + 10);
        *(_DWORD *)uuid_string_t out = 67109890;
        *(_DWORD *)&out[4] = a5;
        *(_WORD *)&out[8] = 2082;
        *(void *)&out[10] = v56;
        *(_WORD *)&out[18] = 1024;
        *(_DWORD *)&out[20] = v57;
        *(_WORD *)&out[24] = 1024;
        *(_DWORD *)&out[26] = v58;
        _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "Connecting LE PSM:0x%04x device %{public}s inMTU=%d inMPS=%d", (uint8_t *)out, 0x1Eu);
        if (v83 < 0) {
          operator delete(__p[0]);
        }
      }
      int v59 = sub_1001DFF74((uint64_t)sub_1004024EC, (uint64_t)sub_100402608, (uint64_t)sub_10040268C, a5, v81, (__int16 *)(v46 + 8), v85);
      goto LABEL_111;
    }
    uint64_t v66 = qword_100A19EE8;
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
    {
      memset(buf, 0, 37);
      uuid_unparse_upper(uu, buf);
      sub_10004191C(__p, buf);
      uint64_t v67 = v83 >= 0 ? __p : (void **)__p[0];
      int v68 = *(unsigned __int16 *)(v46 + 24);
      *(_DWORD *)uuid_string_t out = 67109634;
      *(_DWORD *)&out[4] = a5;
      *(_WORD *)&out[8] = 2082;
      *(void *)&out[10] = v67;
      *(_WORD *)&out[18] = 1024;
      *(_DWORD *)&out[20] = v68;
      _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "Connecting Classic PSM:0x%04x device %{public}s inMTU=%d", (uint8_t *)out, 0x18u);
      if (v83 < 0) {
        operator delete(__p[0]);
      }
    }
    if (!v28)
    {
      uint64_t v74 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
      {
        unint64_t v75 = sub_100031234(uu);
        sub_100763C70(v75, buf, v74);
      }
      int v59 = 105;
      goto LABEL_111;
    }
    unsigned int v69 = sub_10048B654(v28, a5);
    if (!v69)
    {
      *(_WORD *)tm buf = -1;
      unsigned int v69 = +[NSData dataWithBytes:buf length:2];
      if (!v69)
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
          sub_100763CC8();
        }
        int v59 = 482;
        goto LABEL_111;
      }
    }
    if ([v69 length] == (id)2)
    {
      unsigned int v70 = *(unsigned __int16 *)[v69 bytes];
      *(unsigned char *)(v46 + 64) = 3;
      *(_WORD *)(v46 + 66) = 2;
      unsigned int v71 = bswap32(v70) >> 16;
    }
    else
    {
      if ([v69 length] != (id)4)
      {
        *(unsigned char *)(v46 + 64) = 3;
        *(_WORD *)(v46 + 66) = 16;
        *(void *)(v46 + 72) = [v69 bytes];
        goto LABEL_149;
      }
      unsigned int v76 = *(_DWORD *)[v69 bytes];
      *(unsigned char *)(v46 + 64) = 3;
      *(_WORD *)(v46 + 66) = 4;
      unsigned int v71 = bswap32(v76);
    }
    *(_DWORD *)(v46 + 72) = v71;
LABEL_149:
    buf[0] = BYTE5(v77);
    buf[1] = BYTE4(v77);
    buf[2] = BYTE3(v77);
    buf[3] = BYTE2(v77);
    uint8_t buf[4] = BYTE1(v77);
    buf[5] = v77;
    int v59 = sub_1001DF7BC((uint64_t)sub_100402134, (uint64_t)sub_1004022A4, (uint64_t)sub_1004023B8, a5, (uint64_t)buf, v46 + 24, v85, v46 + 64);

LABEL_111:
    sub_10001B910(&v80);
    if (v59)
    {
      uint64_t v60 = *(void (****)(void, void *, uint64_t, uint64_t, void, void, void))v44;
      __int16 v61 = sub_100031234(uu);
      switch(v59)
      {
        case 104:
          uint64_t v62 = 1802;
          break;
        case 482:
          uint64_t v62 = 1800;
          break;
        case 402:
          uint64_t v62 = 1801;
          break;
        default:
          uint64_t v62 = 1;
          break;
      }
      (**v60)(v60, v61, v62, a5, 0, 0, 0);
    }
    else
    {
      unint64_t v63 = *(void *)(v46 + 128);
      if (v63 >= *(void *)(v46 + 136))
      {
        uint64_t v65 = sub_1004072A4((uint64_t *)(v46 + 120), (uint64_t)v85);
      }
      else
      {
        *(_WORD *)unint64_t v63 = v85[0];
        uuid_copy((unsigned __int8 *)(v63 + 2), (const unsigned __int8 *)v85 + 2);
        int v64 = *(_DWORD *)((char *)&v85[2] + 2);
        *(_DWORD *)(v63 + 21) = *(_DWORD *)((char *)&v85[2] + 5);
        *(_DWORD *)(v63 + 18) = v64;
        uint64_t v65 = v63 + 26;
        *(void *)(v46 + 128) = v63 + 26;
      }
      *(void *)(v46 + 128) = v65;
    }
    sub_10001B8AC(&v80);
    return;
  }
  if (qword_1009F7EE0 != -1) {
    dispatch_once(&qword_1009F7EE0, &stru_1009ACDB0);
  }
  uint64_t v29 = off_1009F7ED8;
  uint64_t v30 = sub_100031234(uu);
  uint64_t v77 = sub_100030DCC((uint64_t)v29, v30, 0);

  if (qword_1009F7F00 != -1) {
    dispatch_once(&qword_1009F7F00, &stru_1009ACDD0);
  }
  uint64_t v31 = sub_100030F10((uint64_t)off_1009F7EF8, v77, 0);
  uint64_t v28 = v31;
  if (v31 && *(unsigned char *)(v31 + 1332)) {
    goto LABEL_52;
  }
  int v50 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    memset(buf, 0, 37);
    uuid_unparse_upper(uu, buf);
    sub_10004191C(out, buf);
    int v51 = out[23] >= 0 ? out : *(char **)out;
    *(_DWORD *)tm buf = 136446466;
    *(void *)&uint8_t buf[4] = v51;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&unsigned char buf[14] = a5;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "could not connect to device %{public}s on PSM:0x%04x", buf, 0x12u);
    if (out[23] < 0) {
      operator delete(*(void **)out);
    }
  }
  if (a3)
  {
    int v52 = sub_100031234(uu);
    (**a3)(a3, v52, 1804, a5, 0, 0, 0);
  }
}

void sub_100401DF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  sub_10001B8AC(&a16);
  _Unwind_Resume(a1);
}

void *sub_100401EBC@<X0>(const unsigned __int8 *a1@<X0>, void *a2@<X8>)
{
  memset(v4, 0, sizeof(v4));
  uuid_unparse_upper(a1, v4);
  return sub_10004191C(a2, v4);
}

uint64_t sub_100401F30(uint64_t a1)
{
  if (sub_100197770(a1))
  {
    if (*(_WORD *)(a1 + 86)) {
      unsigned __int16 v2 = 625 * *(_WORD *)(a1 + 86);
    }
    else {
      unsigned __int16 v2 = 7500;
    }
    if (!*(unsigned char *)(a1 + 70))
    {
      __int16 v8 = sub_100219FA8(*(unsigned __int16 *)(a1 + 108), *(unsigned __int16 *)(a1 + 104), v2, *(_DWORD *)(a1 + 144), *(_DWORD *)(a1 + 148));
      if (v8)
      {
        unsigned __int16 v3 = v8 - 4;
        goto LABEL_11;
      }
      if (sub_100058654())
      {
        sub_100056E24((uint64_t)"Calculated MTU is zero for rx %d, tx %d, and CE %d us, probe %d", v19, v20, v21, v22, v23, v24, v25, *(unsigned __int16 *)(a1 + 108));
        int v26 = sub_100050B4C(0x5Cu);
        if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR)) {
          sub_100763E10();
        }
      }
    }
    unsigned __int16 v3 = 1024;
LABEL_11:
    if (sub_100058654())
    {
      int v16 = "peripheral";
      if (!*(unsigned char *)(a1 + 70)) {
        int v16 = "central";
      }
      sub_100056E24((uint64_t)"L2CAP %s MTU %d: for rx %d bytes, tx %d bytes, ce %d us, probestate %d", v9, v10, v11, v12, v13, v14, v15, (uint64_t)v16);
      char v17 = sub_100050B4C(0x5Cu);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)tm buf = 136446210;
        uint64_t v28 = sub_100050714();
        unsigned int v5 = " %{public}s";
        int v6 = v17;
        uint32_t v7 = 12;
        goto LABEL_16;
      }
    }
    return v3;
  }
  uint64_t v4 = qword_100A19EE8;
  unsigned __int16 v3 = 672;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109120;
    LODWORD(v28) = 672;
    unsigned int v5 = "Default MTU %d for classic Handle";
    int v6 = v4;
    uint32_t v7 = 8;
LABEL_16:
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, buf, v7);
  }
  return v3;
}

void sub_100402134(int a1, int a2, int a3, int a4)
{
  __int16 v8 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109888;
    int v16 = a1;
    __int16 v17 = 1024;
    int v18 = a2;
    __int16 v19 = 1024;
    int v20 = a3;
    __int16 v21 = 1024;
    int v22 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "l2capConnected for CID: 0x%0x, inMTU: 0x%x, outMTU: 0x%x, result: 0x%x", buf, 0x1Au);
  }
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  sub_100403560((void *)qword_1009FB070, a1);
  uint64_t v9 = sub_100019878();
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3221225472;
  void v10[2] = sub_100404EF0;
  v10[3] = &unk_1009A0B58;
  __int16 v12 = a1;
  __int16 v13 = a2;
  __int16 v14 = a3;
  int v11 = a4;
  sub_100013018(v9, v10);
}

void sub_1004022A4(int a1, int a2)
{
  uint64_t v4 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109376;
    int v10 = a1;
    __int16 v11 = 1024;
    int v12 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "l2capDisconnected for CID: 0x%0x, reson: 0x%x", buf, 0xEu);
  }
  uint64_t v5 = sub_100019878();
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  void v6[2] = sub_100405550;
  v6[3] = &unk_100998880;
  __int16 v8 = a1;
  int v7 = a2;
  sub_100013018(v5, v6);
}

void sub_1004023B8(int a1, const void *a2, unsigned int a3, int a4)
{
  __int16 v8 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = "No";
    v10[0] = 67109634;
    v10[1] = a1;
    if (a4) {
      uint64_t v9 = "Yes";
    }
    __int16 v11 = 1024;
    unsigned int v12 = a3;
    __int16 v13 = 2082;
    __int16 v14 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "l2capDataInd for CID: 0x%0x, len: 0x%x wakeUpEvent: %{public}s", (uint8_t *)v10, 0x18u);
  }
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  sub_100405ACC((void *)qword_1009FB070, a1, a2, a3, a4);
}

void sub_1004024EC(unsigned int a1, __int16 a2, unsigned int a3, int a4)
{
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  int v16 = 0;
  sub_100403560((void *)qword_1009FB070, a1);
  if (!a4 && (!sub_1001DD56C(a1, (uint64_t *)&v16) || !sub_1001E6484(v16)))
  {
    uint64_t v9 = (uint64_t *)sub_1001E6484(v16);
    unsigned int v10 = sub_100401F30(*v9);
    if (v10 < a3) {
      a3 = a3 / v10 * v10;
    }
  }
  uint64_t v8 = sub_100019878();
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 3221225472;
  void v11[2] = sub_1004036C4;
  v11[3] = &unk_1009A0B58;
  __int16 v13 = a1;
  __int16 v14 = a2;
  __int16 v15 = a3;
  int v12 = a4;
  sub_100013018(v8, v11);
}

void sub_100402608(__int16 a1, int a2)
{
  uint64_t v4 = sub_100019878();
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 3221225472;
  _DWORD v5[2] = sub_100403D30;
  v5[3] = &unk_100998880;
  __int16 v7 = a1;
  int v6 = a2;
  sub_100013018(v4, v5);
}

void sub_10040268C(int a1, const void *a2, unsigned int a3, int a4)
{
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  uint64_t v8 = (void *)qword_1009FB070;

  sub_1004042AC(v8, a1, a2, a3, a4);
}

void sub_100402710(uint64_t a1, unint64_t a2, uint64_t a3, unsigned __int8 *uu)
{
  if (!a2 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763BBC();
  }
  if (!a3 && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT)) {
    sub_100763DDC();
  }
  int is_null = uuid_is_null(uu);
  uint64_t v9 = qword_100A19EE8;
  if (is_null && os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_FAULT))
  {
    *(_WORD *)uuid_string_t out = 0;
    _os_log_fault_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_FAULT, "device cannot be empty", out, 2u);
    uint64_t v9 = qword_100A19EE8;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v10 = v31;
    sub_10003AE4C(a2, (uint64_t)v31);
    if (v32 < 0) {
      unsigned int v10 = (void **)v31[0];
    }
    memset(out, 0, 37);
    uuid_unparse_upper(uu, (char *)out);
    sub_10004191C(__p, (char *)out);
    if (v30 >= 0) {
      __int16 v11 = __p;
    }
    else {
      __int16 v11 = (void **)__p[0];
    }
    *(_DWORD *)tm buf = 136446722;
    unint64_t v34 = v10;
    __int16 v35 = 2082;
    __int16 v36 = v11;
    __int16 v37 = 1024;
    int v38 = a3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Session \"%{public}s\" trying to disconnect device %{public}s on PSM:0x%04x", buf, 0x1Cu);
    if (v30 < 0) {
      operator delete(__p[0]);
    }
    if (v32 < 0) {
      operator delete(v31[0]);
    }
  }
  __int16 v14 = *(void **)(a1 + 24);
  __int16 v13 = (void *)(a1 + 24);
  int v12 = v14;
  if (v14)
  {
    __int16 v15 = v13;
    do
    {
      unint64_t v16 = v12[4];
      BOOL v17 = v16 >= a2;
      if (v16 >= a2) {
        int v18 = v12;
      }
      else {
        int v18 = v12 + 1;
      }
      if (v17) {
        __int16 v15 = v12;
      }
      int v12 = (void *)*v18;
    }
    while (*v18);
    if (v15 != v13 && v15[4] <= a2)
    {
      __int16 v19 = (uint64_t *)v15[5];
      __int16 v21 = (uint64_t *)v19[1];
      int v20 = (uint64_t *)v19[2];
      while (1)
      {
        if (v21 == v20)
        {
          uint64_t v27 = *v19;
          uint64_t v28 = sub_100031234(uu);
          (*(void (**)(uint64_t, void *, uint64_t, uint64_t, void))(*(void *)v27 + 8))(v27, v28, 1804, a3, 0);

          return;
        }
        uint64_t v22 = *v21;
        uint64_t v23 = *(unsigned __int16 **)(*v21 + 120);
        if (v23 != *(unsigned __int16 **)(*v21 + 128)) {
          break;
        }
LABEL_42:
        ++v21;
      }
      while (1)
      {
        if (*((unsigned char *)v23 + 18) == 1 && !uuid_compare((const unsigned __int8 *)v23 + 2, uu))
        {
          out[0] = 0;
          sub_10001B8E0(out);
          unsigned int v24 = *v23;
          int v25 = *(unsigned char *)(v22 + 56) ? sub_1001E1530(v24) : sub_1001E121C(v24, 1818);
          int v26 = v25;
          sub_10001B910(out);
          sub_10001B8AC(out);
          if (!v26) {
            break;
          }
        }
        v23 += 13;
        if (v23 == *(unsigned __int16 **)(v22 + 128))
        {
          int v20 = (uint64_t *)v19[2];
          goto LABEL_42;
        }
      }
    }
  }
}

void sub_100402A18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  _Unwind_Resume(a1);
}

id sub_100402A58(uint64_t a1)
{
  unsigned __int16 v2 = +[NSMutableSet set];
  unsigned __int16 v3 = *(void **)(a1 + 16);
  uint64_t v4 = (void *)(a1 + 24);
  if (v3 != (void *)(a1 + 24))
  {
    do
    {
      uint64_t v5 = v3[5];
      if (*(unsigned char *)(v5 + 40) == 1)
      {
        __int16 v7 = *(uint64_t **)(v5 + 8);
        int v6 = *(uint64_t **)(v5 + 16);
        while (v7 != v6)
        {
          uint64_t v8 = *v7;
          uint64_t v9 = *(void *)(*v7 + 120);
          if (v9 != *(void *)(*v7 + 128))
          {
            do
            {
              unsigned int v10 = sub_100031234((const unsigned __int8 *)(v9 + 2));
              [v2 addObject:v10];

              v9 += 26;
            }
            while (v9 != *(void *)(v8 + 128));
            int v6 = *(uint64_t **)(v5 + 16);
          }
          ++v7;
        }
      }
      __int16 v11 = (void *)v3[1];
      if (v11)
      {
        do
        {
          int v12 = v11;
          __int16 v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          int v12 = (void *)v3[2];
          BOOL v13 = *v12 == (void)v3;
          unsigned __int16 v3 = v12;
        }
        while (!v13);
      }
      unsigned __int16 v3 = v12;
    }
    while (v12 != v4);
  }
  __int16 v14 = [v2 allObjects];

  return v14;
}

void sub_100402B7C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100402B9C(uint64_t a1, uint64_t a2)
{
  unsigned __int16 v2 = *(void **)(a1 + 16);
  unsigned __int16 v3 = (void *)(a1 + 24);
  if (v2 != (void *)(a1 + 24))
  {
    char v5 = 0;
    unsigned __int16 v6 = 0;
    while (1)
    {
      sub_10003AE4C(v2[4], (uint64_t)&__s1);
      sub_10003AE4C(a2, (uint64_t)__p);
      unsigned __int8 v7 = v34;
      if ((v34 & 0x80u) == 0) {
        size_t v8 = v34;
      }
      else {
        size_t v8 = __n;
      }
      unint64_t v9 = v31;
      int v10 = (char)v31;
      if ((v31 & 0x80u) != 0) {
        unint64_t v9 = (unint64_t)__p[1];
      }
      if (v8 != v9)
      {
        BOOL v20 = 0;
        if (((char)v31 & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_29;
      }
      __int16 v11 = (v31 & 0x80u) == 0 ? __p : (void **)__p[0];
      if ((char)v34 < 0) {
        break;
      }
      if (v34)
      {
        uint64_t v12 = v34 - 1;
        p_s1 = &__s1;
        do
        {
          int v15 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v14 = v15;
          int v17 = *(unsigned __int8 *)v11;
          __int16 v11 = (void **)((char *)v11 + 1);
          int v16 = v17;
          BOOL v19 = v12-- != 0;
          BOOL v20 = v14 == v16;
        }
        while (v14 == v16 && v19);
LABEL_24:
        if ((v10 & 0x80000000) == 0) {
          goto LABEL_25;
        }
        goto LABEL_29;
      }
      BOOL v20 = 1;
      if (((char)v31 & 0x80000000) == 0)
      {
LABEL_25:
        if ((v7 & 0x80) == 0) {
          goto LABEL_26;
        }
        goto LABEL_30;
      }
LABEL_29:
      operator delete(__p[0]);
      if ((v34 & 0x80) == 0)
      {
LABEL_26:
        if (v20) {
          goto LABEL_31;
        }
        goto LABEL_39;
      }
LABEL_30:
      operator delete(__s1);
      if (v20)
      {
LABEL_31:
        uint64_t v21 = v2[5];
        if (*(unsigned char *)(v21 + 40) == 1)
        {
          uint64_t v22 = *(void *)(v21 + 8);
          uint64_t v23 = *(void *)(v21 + 16);
          while (v22 != v23)
          {
            uint64_t v25 = *(void *)(*(void *)v22 + 120);
            uint64_t v24 = *(void *)(*(void *)v22 + 128);
            if (v25 != v24)
            {
              if (v5 || (v6 = *(_WORD *)(*(void *)v22 + 2), char v5 = 1, v25 + 26 != v24)) {
                ++v5;
              }
            }
            v22 += 8;
          }
        }
      }
LABEL_39:
      int v26 = (void *)v2[1];
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          int v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (void *)v2[2];
          BOOL v28 = *v27 == (void)v2;
          unsigned __int16 v2 = v27;
        }
        while (!v28);
      }
      unsigned __int16 v2 = v27;
      if (v27 == v3) {
        return v6;
      }
    }
    BOOL v20 = memcmp(__s1, v11, __n) == 0;
    goto LABEL_24;
  }
  return 0;
}

void sub_100402D70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100402D8C(uint64_t a1, unint64_t a2, unsigned __int8 *uu2)
{
  unsigned __int16 v3 = *(void **)(a1 + 16);
  uint64_t v4 = (void *)(a1 + 24);
  if (v3 != (void *)(a1 + 24))
  {
    do
    {
      uint64_t v8 = v3[5];
      if (!*(unsigned char *)(v8 + 40))
      {
        BOOL v13 = *(uint64_t **)(v8 + 8);
        uint64_t v12 = *(uint64_t **)(v8 + 16);
        while (v13 != v12)
        {
          uint64_t v14 = *v13;
          uint64_t v15 = *(void *)(*v13 + 120);
          if (v15 != *(void *)(*v13 + 128))
          {
            while (uuid_compare((const unsigned __int8 *)(v15 + 2), uu2))
            {
              v15 += 26;
              if (v15 == *(void *)(v14 + 128))
              {
                uint64_t v12 = *(uint64_t **)(v8 + 16);
                goto LABEL_16;
              }
            }
            uint64_t v16 = *(unsigned __int16 *)(v14 + 2);
            sub_100402710(a1, a2, v16, (unsigned __int8 *)(v15 + 2));
            return;
          }
LABEL_16:
          ++v13;
        }
      }
      unint64_t v9 = (void *)v3[1];
      if (v9)
      {
        do
        {
          int v10 = v9;
          unint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void *)v3[2];
          BOOL v11 = *v10 == (void)v3;
          unsigned __int16 v3 = v10;
        }
        while (!v11);
      }
      unsigned __int16 v3 = v10;
    }
    while (v10 != v4);
  }
}

void sub_100402EB4(uint64_t a1)
{
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  uint64_t v2 = qword_1009FB070;
  int v3 = *(unsigned __int16 *)(a1 + 48);
  uint64_t v4 = *(_DWORD **)(a1 + 32);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 50);
  int v6 = *(unsigned __int8 *)(a1 + 52);

  sub_100402F24(v2, v3, v4, v5, v6);
}

void sub_100402F24(uint64_t a1, int a2, _DWORD *a3, unsigned int a4, int a5)
{
  unint64_t v9 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1040;
    *(_DWORD *)&buf[10] = 6;
    *(_WORD *)&unsigned char buf[14] = 2096;
    *(void *)&uint8_t buf[16] = (char *)a3 + 1;
    *(_WORD *)&unsigned char buf[24] = 1024;
    LODWORD(v45) = a4;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "Connection Indication PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d", buf, 0x1Eu);
  }
  int v10 = *(void **)(a1 + 16);
  if (v10 == (void *)(a1 + 24))
  {
LABEL_15:
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
      sub_100763E90();
    }
  }
  else
  {
    while (1)
    {
      uint64_t v11 = v10[5];
      int v12 = sub_100402B9C(a1, v10[4]);
      BOOL v13 = *(uint64_t **)(v11 + 8);
      uint64_t v14 = *(uint64_t **)(v11 + 16);
      if (v13 != v14) {
        break;
      }
LABEL_9:
      int v17 = (void *)v10[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          int v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          int v18 = (void *)v10[2];
          BOOL v19 = *v18 == (void)v10;
          int v10 = v18;
        }
        while (!v19);
      }
      int v10 = v18;
      if (v18 == (void *)(a1 + 24)) {
        goto LABEL_15;
      }
    }
    int v15 = v12;
    while (1)
    {
      uint64_t v16 = *v13;
      if (*(unsigned __int16 *)(*v13 + 2) == a2 && !*(unsigned char *)(v16 + 4)) {
        break;
      }
      if (++v13 == v14) {
        goto LABEL_9;
      }
    }
    memset(uu, 0, sizeof(uu));
    uuid_clear(uu);
    uint64_t v20 = sub_100197B34(a3);
    if (qword_1009F7EC0 != -1) {
      dispatch_once(&qword_1009F7EC0, &stru_1009ACDF0);
    }
    if (sub_10067F618((uint64_t)off_1009F7EB8, v20, uu) && !uuid_is_null(uu))
    {
      char v40 = 0;
      sub_10001B8E0(&v40);
      unsigned int v21 = sub_100401F30(v20);
      unsigned __int16 v22 = v21 + v21 * (0x400 / v21);
      *(_WORD *)(v16 + 8) = v22;
      *(_WORD *)(v16 + 10) = v22;
      if (v15) {
        BOOL v23 = *(unsigned __int16 *)(v16 + 2) == v15;
      }
      else {
        BOOL v23 = 0;
      }
      uint64_t v24 = qword_100A19EE8;
      if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = "Rejecting";
        int v26 = *(unsigned __int16 *)(v16 + 2);
        *(_DWORD *)tm buf = 136316674;
        if (v23) {
          uint64_t v25 = "Accepting";
        }
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&unsigned char buf[14] = v26;
        *(_WORD *)&unsigned char buf[18] = 1040;
        *(_DWORD *)&buf[20] = 6;
        *(_WORD *)&unsigned char buf[24] = 2096;
        CFTypeID v45 = (char *)a3 + 1;
        __int16 v46 = 1024;
        unsigned int v47 = a4;
        __int16 v48 = 1024;
        int v49 = v22;
        __int16 v50 = 1024;
        int v51 = v22;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "%s connection for PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d inMTU=%d inMPS=%d", buf, 0x34u);
      }
      if (v15) {
        BOOL v27 = *(unsigned __int16 *)(v16 + 2) == v15;
      }
      else {
        BOOL v27 = 1;
      }
      if (sub_1001E0C70((uint64_t)sub_1004024EC, (uint64_t)sub_100402608, (uint64_t)sub_10040268C, a4, v16 + 8, v27))
      {
        if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
          sub_100763F00();
        }
      }
      else
      {
        memset(&buf[2], 0, 24);
        *(_WORD *)tm buf = a4;
        uuid_copy(&buf[2], uu);
        unsigned char buf[18] = 0;
        *(_DWORD *)&buf[20] = 0;
        unsigned char buf[24] = 0;
        unint64_t v28 = *(void *)(v16 + 128);
        if (v28 >= *(void *)(v16 + 136))
        {
          uint64_t v30 = sub_1004072A4((uint64_t *)(v16 + 120), (uint64_t)buf);
        }
        else
        {
          *(_WORD *)unint64_t v28 = *(_WORD *)buf;
          uuid_copy((unsigned __int8 *)(v28 + 2), &buf[2]);
          int v29 = *(_DWORD *)&buf[18];
          *(_DWORD *)(v28 + 21) = *(_DWORD *)&buf[21];
          *(_DWORD *)(v28 + 18) = v29;
          uint64_t v30 = v28 + 26;
          *(void *)(v16 + 128) = v28 + 26;
        }
        *(void *)(v16 + 128) = v30;
        if (!*(_WORD *)(v16 + 16))
        {
          int v31 = sub_1001DA35C(a4, *(unsigned __int16 *)(v16 + 14));
          if (v31)
          {
            char v32 = qword_100A19EE8;
            if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
            {
              int v36 = *(unsigned __int16 *)(v16 + 14);
              *(_DWORD *)unint64_t v41 = 67109632;
              *(_DWORD *)&v41[4] = a4;
              LOWORD(v42) = 1024;
              *(_DWORD *)((char *)&v42 + 2) = v36;
              HIWORD(v42) = 1024;
              int v43 = v31;
              _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "LE_L2CAP_SendChannelCredits cid=%d credits=%d failed with status %d", v41, 0x14u);
            }
          }
        }
      }
      if (a5)
      {
        *(void *)unint64_t v41 = &off_100998428;
        BOOL v42 = 0;
        memset(buf, 0, 24);
        sub_100551758(v10[4], (std::string *)buf);
        uint64_t v33 = sub_1003731C0();
        if (buf[23] >= 0) {
          unsigned __int8 v34 = buf;
        }
        else {
          unsigned __int8 v34 = *(unsigned char **)buf;
        }
        __int16 v35 = sub_100031234(uu);
        int v38 = &off_100998428;
        char v39 = v42;
        if (v42) {
          sub_100037354((uint64_t)v42);
        }
        (*(void (**)(uint64_t, uint64_t, unsigned char *, void *, uint64_t (***)()))(*(void *)v33 + 40))(v33, 3, v34, v35, &v38);
        int v38 = &off_100998428;
        if (v39) {
          sub_1000368F4(v39);
        }

        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        *(void *)unint64_t v41 = &off_100998428;
        if (v42) {
          sub_1000368F4(v42);
        }
      }
      sub_10001B8AC(&v40);
    }
    else if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
    {
      sub_100763F68(a3);
    }
  }
}

void sub_1004034DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  *(void *)(v26 + 128) = v25;
  sub_10001B8AC(&a15);
  _Unwind_Resume(a1);
}

void sub_100403560(void *a1, int a2)
{
  uint64_t v4 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    v18[0] = 67109120;
    v18[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "cid:0x%04x", (uint8_t *)v18, 8u);
  }
  unint64_t v5 = a1[10];
  int v6 = (char *)a1[9];
  if ((unint64_t)v6 >= v5)
  {
    uint64_t v8 = (char *)a1[8];
    uint64_t v9 = v6 - v8;
    if (v6 - v8 <= -3) {
      abort();
    }
    uint64_t v10 = v9 >> 1;
    unint64_t v11 = v5 - (void)v8;
    if (v11 <= (v9 >> 1) + 1) {
      unint64_t v12 = v10 + 1;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v11 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v12;
    }
    if (v13)
    {
      uint64_t v14 = (char *)sub_1002C5544((uint64_t)(a1 + 10), v13);
      uint64_t v8 = (char *)a1[8];
      int v6 = (char *)a1[9];
    }
    else
    {
      uint64_t v14 = 0;
    }
    int v15 = &v14[2 * v10];
    uint64_t v16 = &v14[2 * v13];
    *(_WORD *)int v15 = a2;
    unsigned __int8 v7 = v15 + 2;
    while (v6 != v8)
    {
      __int16 v17 = *((_WORD *)v6 - 1);
      v6 -= 2;
      *((_WORD *)v15 - 1) = v17;
      v15 -= 2;
    }
    a1[8] = v15;
    a1[9] = v7;
    a1[10] = v16;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    *(_WORD *)int v6 = a2;
    unsigned __int8 v7 = v6 + 2;
  }
  a1[9] = v7;
}

void sub_1004036C4(uint64_t a1)
{
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  uint64_t v2 = qword_1009FB070;
  uint64_t v3 = *(unsigned __int16 *)(a1 + 36);
  int v4 = *(unsigned __int16 *)(a1 + 38);
  int v5 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v6 = *(unsigned int *)(a1 + 32);

  sub_100403734(v2, v3, v4, v5, v6);
}

void sub_100403734(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    *(_WORD *)&unsigned char buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = a4;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "connectedCB cid:0x%04x inMTU:%d outMTU:%d result:%d", buf, 0x1Au);
  }
  unsigned int v38 = -1;
  uint64_t v37 = 0;
  unint64_t v11 = *(void **)(a1 + 16);
  if (v11 != (void *)(a1 + 24))
  {
    do
    {
      uint64_t v12 = v11[5];
      for (uint64_t i = *(uint64_t **)(v12 + 8); i != *(uint64_t **)(v12 + 16); ++i)
      {
        uint64_t v14 = *i;
        uint64_t v16 = *(void *)(*i + 120);
        int v15 = *(unsigned __int16 **)(*i + 128);
        if ((unsigned __int16 *)v16 != v15)
        {
          uint64_t v17 = -v16;
          while (*(unsigned __int16 *)v16 != a2)
          {
            v16 += 26;
            v17 -= 26;
            if ((unsigned __int16 *)v16 == v15) {
              goto LABEL_10;
            }
          }
          memset(dst, 0, sizeof(dst));
          uuid_copy(dst, (const unsigned __int8 *)(v16 + 2));
          if (a5)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
              sub_100764054();
            }
            sub_100406094(a1, a2);
            BOOL v21 = 1;
          }
          else
          {
            *(_WORD *)(v16 + 20) = a3;
            *(_WORD *)(v16 + 22) = a4;
            *(unsigned char *)(v16 + 18) = 1;
            if (qword_1009F7EC0 != -1) {
              dispatch_once(&qword_1009F7EC0, &stru_1009ACDF0);
            }
            BOOL v21 = sub_1006856B8((uint64_t)off_1009F7EB8, (unsigned __int8 *)(v16 + 2), &v37);
            unsigned __int16 v22 = qword_100A19EE8;
            if (v21)
            {
              if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
              {
                int v23 = *(unsigned __int16 *)(v16 + 20);
                int v24 = *(unsigned __int16 *)(v16 + 22);
                *(_DWORD *)tm buf = 67109632;
                *(_DWORD *)&uint8_t buf[4] = a2;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&buf[10] = v23;
                *(_WORD *)&unsigned char buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v24;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "Registering pipe cid:0x%04x inMTU:%d outMTU:%d", buf, 0x14u);
              }
              uint64_t v25 = sub_1002C5648();
              if (!sub_1002C69FC(v25, v37, a2, *(_DWORD *)(v12 + 36), a4, (int *)&v38, *(_DWORD *)(v14 + 112)))
              {
                buf[0] = 0;
                sub_10001B8E0(buf);
                sub_1001F667C(v37);
                sub_10001B8AC(buf);
                sub_100406094(a1, a2);
                if (!*(_WORD *)(v14 + 16))
                {
                  LOBYTE(__p[0]) = 0;
                  sub_10001B8E0(__p);
                  int v27 = sub_1001DA35C(a2, *(unsigned __int16 *)(v14 + 14));
                  sub_10001B910(__p);
                  if (v27)
                  {
                    unint64_t v28 = qword_100A19EE8;
                    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
                    {
                      int v34 = *(unsigned __int16 *)(v14 + 14);
                      *(_DWORD *)tm buf = 67109632;
                      *(_DWORD *)&uint8_t buf[4] = a2;
                      *(_WORD *)&uint8_t buf[8] = 1024;
                      *(_DWORD *)&buf[10] = v34;
                      *(_WORD *)&unsigned char buf[14] = 1024;
                      *(_DWORD *)&uint8_t buf[16] = v27;
                      _os_log_error_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_ERROR, "LE_L2CAP_SendChannelCredits cid=%d credits=%d failed with status %d", buf, 0x14u);
                    }
                  }
                  sub_10001B8AC(__p);
                }
                a5 = 0;
                BOOL v21 = 0;
                goto LABEL_44;
              }
              uint64_t v26 = qword_100A19EE8;
              if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper(dst, (char *)buf);
                sub_10004191C(__p, (char *)buf);
                uint64_t v33 = v36 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)tm buf = 67109378;
                *(_DWORD *)&uint8_t buf[4] = a2;
                *(_WORD *)&uint8_t buf[8] = 2082;
                *(void *)&buf[10] = v33;
                _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to register a socket for channel 0x%04x on device \"%{public}s\"", buf, 0x12u);
                if (v36 < 0) {
                  operator delete(__p[0]);
                }
              }
              buf[0] = 0;
              sub_10001B8E0(buf);
              if (*(unsigned char *)(v14 + 56)) {
                sub_1001E1530(a2);
              }
              else {
                sub_1001E121C(a2, 436);
              }
              sub_10001B8AC(buf);
              a5 = 1805;
            }
            else
            {
              if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper((const unsigned __int8 *)(v16 + 2), (char *)buf);
                sub_10004191C(__p, (char *)buf);
                char v32 = v36 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)tm buf = 136446210;
                *(void *)&uint8_t buf[4] = v32;
                _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "Connection manager wasn't tracking \"%{public}s\" !", buf, 0xCu);
                if (v36 < 0) {
                  operator delete(__p[0]);
                }
              }
              a5 = 1804;
            }
            sub_100406094(a1, a2);
          }
LABEL_44:
          int v29 = *(void (****)(void, void *, uint64_t, void, uint64_t, void, void))v12;
          uint64_t v30 = sub_100031234(dst);
          (**v29)(v29, v30, a5, *(unsigned __int16 *)(v14 + 2), a2, 0, v38);

          if (v21)
          {
            sub_1004075F4(26 - v17, *(void *)(v14 + 128), -v17);
            *(void *)(v14 + 128) = v31;
          }
          return;
        }
LABEL_10:
        ;
      }
      int v18 = (void *)v11[1];
      if (v18)
      {
        do
        {
          BOOL v19 = v18;
          int v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          BOOL v19 = (void *)v11[2];
          BOOL v20 = *v19 == (void)v11;
          unint64_t v11 = v19;
        }
        while (!v20);
      }
      unint64_t v11 = v19;
    }
    while (v19 != (void *)(a1 + 24));
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
    sub_100763FEC();
  }
  sub_100406094(a1, a2);
}

void sub_100403CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_100403D30(uint64_t a1)
{
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  uint64_t v2 = qword_1009FB070;
  uint64_t v3 = *(unsigned __int16 *)(a1 + 36);
  unsigned int v4 = *(_DWORD *)(a1 + 32);

  sub_100403D98(v2, v3, v4);
}

void sub_100403D98(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "disconnectedCB cid:%d reason:%d", buf, 0xEu);
  }
  unsigned int v38 = a3;
  uint64_t v40 = a1;
  uint64_t v7 = a1 + 16;
  uint64_t v8 = *(void **)(a1 + 16);
  char v39 = (void *)(v7 + 8);
  if (v8 != (void *)(v7 + 8))
  {
    while (2)
    {
      unint64_t v41 = (void *)v8[5];
      uint64_t v10 = (uint64_t *)v41[1];
      uint64_t v9 = (uint64_t *)v41[2];
      while (v10 != v9)
      {
        uint64_t v11 = *v10;
        uint64_t v12 = *(unsigned __int16 **)(*v10 + 120);
        if (v12 != *(unsigned __int16 **)(*v10 + 128))
        {
          uint64_t v13 = -(uint64_t)v12;
          while (1)
          {
            memset(dst, 0, sizeof(dst));
            uuid_copy(dst, (const unsigned __int8 *)v12 + 2);
            uint64_t v14 = qword_100A19EE8;
            if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_INFO))
            {
              memset(buf, 0, 37);
              uuid_unparse_upper(dst, (char *)buf);
              sub_10004191C(__p, (char *)buf);
              int v15 = __p;
              if (v43 < 0) {
                int v15 = (void **)__p[0];
              }
              int v16 = *v12;
              *(_DWORD *)tm buf = 136446466;
              *(void *)&uint8_t buf[4] = v15;
              *(_WORD *)&unsigned char buf[12] = 1024;
              *(_DWORD *)&unsigned char buf[14] = v16;
              _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_INFO, "device=%{public}s cid=%x", buf, 0x12u);
              if (v43 < 0) {
                operator delete(__p[0]);
              }
            }
            if (*v12 == a2) {
              break;
            }
            v12 += 13;
            v13 -= 26;
            if (v12 == *(unsigned __int16 **)(v11 + 128))
            {
              uint64_t v9 = (uint64_t *)v41[2];
              goto LABEL_16;
            }
          }
          uint64_t v25 = sub_1002C5648();
          sub_1002C8D38(v25, *v12);
          if (!*((unsigned char *)v41 + 32))
          {
            uint64_t v26 = *v41;
            int v27 = sub_100031234(dst);
            (*(void (**)(uint64_t, void *, void, void, uint64_t))(*(void *)v26 + 8))(v26, v27, v38, *(unsigned __int16 *)(v11 + 2), a2);
          }
          sub_1004075F4(26 - v13, *(void *)(v11 + 128), -v13);
          *(void *)(v11 + 128) = v28;
          if (*(unsigned char *)v11)
          {
            if (!*(unsigned char *)(v11 + 4) && v28 == *(void *)(v11 + 120))
            {
              uint64_t v29 = sub_100400D6C(v40, v11);
              if (v29 != 10 && !*((unsigned char *)v41 + 32)) {
                (*(void (**)(void, void, uint64_t))(*(void *)*v41 + 24))(*v41, *(unsigned __int16 *)(v11 + 2), v29);
              }
            }
            uint64_t v30 = *(void **)(v11 + 128);
            if (v30 == *(void **)(v11 + 120))
            {
              uint64_t v31 = (uint64_t *)v41[2];
              int64_t v32 = (char *)v31 - (char *)(v10 + 1);
              if (v31 != v10 + 1)
              {
                memmove(v10, v10 + 1, (char *)v31 - (char *)(v10 + 1));
                uint64_t v30 = *(void **)(v11 + 120);
              }
              v41[2] = (char *)v10 + v32;
              if (v30)
              {
                *(void *)(v11 + 128) = v30;
                operator delete(v30);
              }
              operator delete();
            }
            if (*((unsigned char *)v41 + 32) && v41[2] == v41[1])
            {
              sub_100406E90((uint64_t)v41);
              operator delete();
            }
          }
          return;
        }
LABEL_16:
        ++v10;
      }
      uint64_t v17 = (void *)v8[1];
      if (v17)
      {
        do
        {
          int v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          int v18 = (void *)v8[2];
          BOOL v19 = *v18 == (void)v8;
          uint64_t v8 = v18;
        }
        while (!v19);
      }
      uint64_t v8 = v18;
      if (v18 != v39) {
        continue;
      }
      break;
    }
  }
  BOOL v21 = *(uint64_t **)(v40 + 88);
  BOOL v20 = *(uint64_t **)(v40 + 96);
  while (v21 != v20)
  {
    uint64_t v22 = *v21;
    int v23 = *(unsigned __int16 **)(*v21 + 120);
    if (v23 != *(unsigned __int16 **)(*v21 + 128))
    {
      uint64_t v24 = -(uint64_t)v23;
      while (1)
      {
        *(void *)tm buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        uuid_copy(buf, (const unsigned __int8 *)v23 + 2);
        if (*v23 == a2) {
          break;
        }
        v23 += 13;
        v24 -= 26;
        if (v23 == *(unsigned __int16 **)(v22 + 128))
        {
          BOOL v20 = *(uint64_t **)(v40 + 96);
          goto LABEL_30;
        }
      }
      uint64_t v33 = sub_1002C5648();
      sub_1002C8D38(v33, *v23);
      sub_1004075F4(26 - v24, *(void *)(v22 + 128), -v24);
      *(void *)(v22 + 128) = v34;
      if (v34 == *(void *)(v22 + 120))
      {
        if (!*(unsigned char *)(v22 + 4)) {
          sub_100400D6C(v40, v22);
        }
        __int16 v35 = *(uint64_t **)(v40 + 96);
        int64_t v36 = (char *)v35 - (char *)(v21 + 1);
        if (v35 != v21 + 1) {
          memmove(v21, v21 + 1, (char *)v35 - (char *)(v21 + 1));
        }
        *(void *)(v40 + 96) = (char *)v21 + v36;
        uint64_t v37 = *(void **)(v22 + 120);
        if (v37)
        {
          *(void *)(v22 + 128) = v37;
          operator delete(v37);
        }
        operator delete();
      }
      return;
    }
LABEL_30:
    ++v21;
  }
}

void sub_100404294(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1004042AC(void *a1, int a2, const void *a3, unsigned int a4, int a5)
{
  uint64_t v11 = (unsigned __int16 *)a1[8];
  uint64_t v10 = (unsigned __int16 *)a1[9];
  if (v11 != v10)
  {
    while (*v11 != a2)
    {
      if (++v11 == v10)
      {
        uint64_t v11 = (unsigned __int16 *)a1[9];
        break;
      }
    }
  }
  if (v11 != v10)
  {
    uint64_t v12 = qword_100A19EE8;
    if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)tm buf = 67109120;
      *(_DWORD *)&uint8_t buf[4] = a2;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "Queueing initial data on channel 0x%04x as the L2CAP Channel hasn't finished registration", buf, 8u);
    }
    operator new();
  }
  uint64_t v13 = sub_1002C5648();
  sub_1002C93F4(v13, a2, a3, a4, 1, a5);
  if (a5)
  {
    uint64_t v48 = 0;
    long long v46 = 0u;
    long long v47 = 0u;
    long long v44 = 0u;
    long long v45 = 0u;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    long long v38 = 0u;
    long long v39 = 0u;
    long long v36 = 0u;
    long long v37 = 0u;
    *(_OWORD *)tm buf = 0u;
    memset(v35, 0, sizeof(v35));
    sub_10004C67C((uint64_t)buf);
    uint64_t v14 = (void *)a1[2];
    int v15 = a1 + 3;
    if (v14 == a1 + 3)
    {
      int v16 = 0;
    }
    else
    {
      int v16 = 0;
      do
      {
        uint64_t v17 = v14[5];
        uint64_t v18 = *(void *)(v17 + 8);
        uint64_t v19 = *(void *)(v17 + 16);
LABEL_13:
        if (v18 == v19)
        {
          char v22 = 0;
        }
        else
        {
          for (uint64_t i = *(const unsigned __int8 **)(*(void *)v18 + 120); ; i += 26)
          {
            if (i == *(const unsigned __int8 **)(*(void *)v18 + 128))
            {
              v18 += 8;
              goto LABEL_13;
            }
            if (*(unsigned __int16 *)i == a2) {
              break;
            }
          }
          uint64_t v21 = sub_100031234(i + 2);

          sub_100551758(v14[4], &__p);
          sub_10003AB28((uint64_t)v35);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v22 = 1;
          int v16 = (void *)v21;
        }
        int v23 = (void *)v14[1];
        if (v23)
        {
          do
          {
            uint64_t v24 = v23;
            int v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            uint64_t v24 = (void *)v14[2];
            BOOL v25 = *v24 == (void)v14;
            uint64_t v14 = v24;
          }
          while (!v25);
        }
        if (v24 == v15) {
          char v22 = 1;
        }
        uint64_t v14 = v24;
      }
      while ((v22 & 1) == 0);
    }
    uint64_t v31 = 0;
    int64_t v32 = 0;
    sub_1000335D8(&v31, a3, a4);
    uint64_t v26 = sub_1003731C0();
    std::stringbuf::str();
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    uint64_t v29 = &off_100998428;
    uint64_t v30 = v32;
    if (v32) {
      sub_100037354((uint64_t)v32);
    }
    (*(void (**)(uint64_t, uint64_t, std::string *, void *, uint64_t (***)()))(*(void *)v26 + 40))(v26, 4, p_p, v16, &v29);
    uint64_t v29 = &off_100998428;
    if (v30) {
      sub_1000368F4(v30);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v31 = &off_100998428;
    if (v32) {
      sub_1000368F4(v32);
    }

    v35[0] = v28;
    if (SHIBYTE(v37) < 0) {
      operator delete(*((void **)&v36 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
}

void sub_100404798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, atomic_uint *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a13) {
    sub_1000368F4(a13);
  }

  sub_100742518((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_100404868(uint64_t a1)
{
  uint64_t v2 = sub_1002C5648();
  int v3 = *(unsigned __int16 *)(a1 + 40);
  unsigned int v4 = (const void *)sub_10004A6E4(*(void *)(a1 + 32));
  size_t v5 = sub_100045F00(*(void *)(a1 + 32));
  sub_1002C93F4(v2, v3, v4, v5, 1, *(unsigned char *)(a1 + 42));
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *uint64_t v6 = &off_100998428;
    uint64_t v7 = (atomic_uint *)v6[1];
    if (v7) {
      sub_1000368F4(v7);
    }
    operator delete();
  }
}

void sub_100404930(uint64_t a1)
{
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  uint64_t v2 = qword_1009FB070;
  int v3 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v4 = *(void *)(a1 + 32);
  unsigned int v5 = *(unsigned __int16 *)(a1 + 42);

  sub_10040499C(v2, v3, v4, v5);
}

void sub_10040499C(uint64_t a1, int a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109890;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1040;
    LODWORD(v35) = 6;
    WORD2(v35) = 2096;
    *(void *)((char *)&v35 + 6) = a3;
    HIWORD(v35) = 1024;
    unsigned int v36 = a4;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "l2capConnectIndCb PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d", buf, 0x1Eu);
  }
  uint64_t v9 = *(void **)(a1 + 16);
  if (v9 != (void *)(a1 + 24))
  {
    while (2)
    {
      uint64_t v10 = v9[5];
      uint64_t v11 = *(uint64_t **)(v10 + 8);
      uint64_t v12 = *(uint64_t **)(v10 + 16);
      while (v11 != v12)
      {
        uint64_t v13 = *v11;
        if (*(unsigned __int16 *)(*v11 + 2) == a2 && !*(unsigned char *)(v13 + 4))
        {
          if (qword_1009F7F00 != -1) {
            dispatch_once(&qword_1009F7F00, &stru_1009ACDD0);
          }
          *(_DWORD *)tm buf = *(_DWORD *)a3;
          *(_WORD *)&uint8_t buf[4] = *(_WORD *)(a3 + 4);
          uint64_t v17 = sub_1004AA194((uint64_t)off_1009F7EF8, (uint64_t)buf, 1);
          uint64_t v18 = (unsigned __int8 *)v17;
          if (v17 && *(unsigned char *)(v17 + 1332))
          {
            uint64_t v19 = qword_100A19EE8;
            if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
            {
              int v20 = *(unsigned __int16 *)(v13 + 24);
              *(_DWORD *)tm buf = 67110146;
              *(_DWORD *)&uint8_t buf[4] = a2;
              *(_WORD *)&uint8_t buf[8] = 1040;
              LODWORD(v35) = 6;
              WORD2(v35) = 2096;
              *(void *)((char *)&v35 + 6) = a3;
              HIWORD(v35) = 1024;
              unsigned int v36 = a4;
              __int16 v37 = 1024;
              int v38 = v20;
              _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "Accepting connection for PSM:0x%04x Address: %{bluetooth:BD_ADDR}.6P) cid:%d inMTU=%d", buf, 0x24u);
            }
            uint64_t v21 = sub_10048B654((uint64_t)v18, a2);
            char v22 = v21;
            if (v21)
            {
              if ([v21 length] == (id)2)
              {
                unsigned int v23 = *(unsigned __int16 *)[v22 bytes];
                *(unsigned char *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 2;
                unsigned int v24 = bswap32(v23) >> 16;
                goto LABEL_32;
              }
              if ([v22 length] == (id)4)
              {
                unsigned int v26 = *(_DWORD *)[v22 bytes];
                *(unsigned char *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 4;
                unsigned int v24 = bswap32(v26);
LABEL_32:
                *(_DWORD *)(v13 + 72) = v24;
              }
              else
              {
                *(unsigned char *)(v13 + 64) = 3;
                *(_WORD *)(v13 + 66) = 16;
                *(void *)(v13 + 72) = [v22 bytes];
              }
              char v31 = 0;
              sub_10001B8E0(&v31);
              int v27 = sub_1001E0320((uint64_t)sub_100402134, (uint64_t)sub_1004022A4, (uint64_t)sub_1004023B8, a4, v13 + 24, 1, v13 + 64);
              sub_10001B910(&v31);
              if (v27)
              {
                if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
                  sub_100763F00();
                }
              }
              else
              {
                *(void *)src = 0;
                uint64_t v33 = 0;
                if (qword_1009F7EE0 != -1) {
                  dispatch_once(&qword_1009F7EE0, &stru_1009ACDB0);
                }
                sub_100014B58((uint64_t)off_1009F7ED8, ((unint64_t)v18[128] << 40) | ((unint64_t)v18[129] << 32) | ((unint64_t)v18[130] << 24) | ((unint64_t)v18[131] << 16) | ((unint64_t)v18[132] << 8) | v18[133], 1u, 0, 0, 0, src);
                long long v35 = 0uLL;
                *(void *)&buf[2] = 0;
                *(_WORD *)tm buf = a4;
                uuid_copy(&buf[2], src);
                BYTE8(v35) = 0;
                *(_DWORD *)((char *)&v35 + 10) = 0;
                BYTE14(v35) = 1;
                unint64_t v28 = *(void *)(v13 + 128);
                if (v28 >= *(void *)(v13 + 136))
                {
                  uint64_t v30 = sub_1004072A4((uint64_t *)(v13 + 120), (uint64_t)buf);
                }
                else
                {
                  *(_WORD *)unint64_t v28 = *(_WORD *)buf;
                  uuid_copy((unsigned __int8 *)(v28 + 2), &buf[2]);
                  int v29 = DWORD2(v35);
                  *(_DWORD *)(v28 + 21) = *(_DWORD *)((char *)&v35 + 11);
                  *(_DWORD *)(v28 + 18) = v29;
                  uint64_t v30 = v28 + 26;
                  *(void *)(v13 + 128) = v28 + 26;
                }
                *(void *)(v13 + 128) = v30;
              }
              sub_10001B8AC(&v31);
            }
            else if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
            {
              sub_1007640BC();
            }

            return;
          }
          BOOL v25 = qword_100A19EE8;
          if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)tm buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "l2capConnectIndCb - Device is not connected", buf, 2u);
          }
          return;
        }
        ++v11;
      }
      uint64_t v14 = (void *)v9[1];
      if (v14)
      {
        do
        {
          int v15 = v14;
          uint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          int v15 = (void *)v9[2];
          BOOL v16 = *v15 == (void)v9;
          uint64_t v9 = v15;
        }
        while (!v16);
      }
      uint64_t v9 = v15;
      if (v15 != (void *)(a1 + 24)) {
        continue;
      }
      break;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
    sub_100763E90();
  }
}

void sub_100404EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  *(void *)(v15 + 128) = v14;
  sub_10001B8AC(&a13);

  _Unwind_Resume(a1);
}

void sub_100404EF0(uint64_t a1)
{
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  uint64_t v2 = qword_1009FB070;
  uint64_t v3 = *(unsigned __int16 *)(a1 + 36);
  int v4 = *(unsigned __int16 *)(a1 + 38);
  int v5 = *(unsigned __int16 *)(a1 + 40);
  uint64_t v6 = *(unsigned int *)(a1 + 32);

  sub_100404F60(v2, v3, v4, v5, v6);
}

void sub_100404F60(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5)
{
  uint64_t v10 = qword_100A19EE8;
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)tm buf = 67109888;
    *(_DWORD *)&uint8_t buf[4] = a2;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&unsigned char buf[10] = a3;
    *(_WORD *)&unsigned char buf[14] = 1024;
    *(_DWORD *)&uint8_t buf[16] = a4;
    *(_WORD *)&buf[20] = 1024;
    *(_DWORD *)&buf[22] = a5;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "connectedCB cid:0x%04x inMTU:%d outMTU:%d result:%d", buf, 0x1Au);
  }
  unsigned int v43 = -1;
  uint64_t v11 = *(void **)(a1 + 16);
  if (v11 != (void *)(a1 + 24))
  {
    while (2)
    {
      uint64_t v12 = v11[5];
      for (uint64_t i = *(uint64_t **)(v12 + 8); i != *(uint64_t **)(v12 + 16); ++i)
      {
        uint64_t v14 = *i;
        uint64_t v16 = *(void *)(*i + 120);
        uint64_t v15 = *(unsigned __int16 **)(*i + 128);
        if ((unsigned __int16 *)v16 != v15)
        {
          uint64_t v17 = -v16;
          while (*(unsigned __int16 *)v16 != a2)
          {
            v16 += 26;
            v17 -= 26;
            if ((unsigned __int16 *)v16 == v15) {
              goto LABEL_10;
            }
          }
          memset(dst, 0, sizeof(dst));
          uuid_copy(dst, (const unsigned __int8 *)(v16 + 2));
          if (a5)
          {
            if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
              sub_100764054();
            }
            BOOL v21 = 1;
          }
          else
          {
            *(_WORD *)(v16 + 20) = a3;
            *(_WORD *)(v16 + 22) = a4;
            *(unsigned char *)(v16 + 18) = 1;
            if (qword_1009F7EE0 != -1) {
              dispatch_once(&qword_1009F7EE0, &stru_1009ACDB0);
            }
            char v22 = off_1009F7ED8;
            unsigned int v23 = sub_100031234((const unsigned __int8 *)(v16 + 2));
            uint64_t v24 = sub_100030DCC((uint64_t)v22, v23, 0);

            if (qword_1009F7F00 != -1) {
              dispatch_once(&qword_1009F7F00, &stru_1009ACDD0);
            }
            uint64_t v25 = sub_100030F10((uint64_t)off_1009F7EF8, v24, 0);
            if (v25 && *(unsigned char *)(v25 + 1332))
            {
              unsigned int v26 = qword_100A19EE8;
              if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_DEFAULT))
              {
                int v27 = *(unsigned __int16 *)(v16 + 20);
                int v28 = *(unsigned __int16 *)(v16 + 22);
                int v29 = *(_DWORD *)(v14 + 112);
                *(_DWORD *)tm buf = 67109888;
                *(_DWORD *)&uint8_t buf[4] = a2;
                *(_WORD *)&uint8_t buf[8] = 1024;
                *(_DWORD *)&unsigned char buf[10] = v27;
                *(_WORD *)&unsigned char buf[14] = 1024;
                *(_DWORD *)&uint8_t buf[16] = v28;
                *(_WORD *)&buf[20] = 1024;
                *(_DWORD *)&buf[22] = v29;
                _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "Registering pipe cid:0x%04x inMTU:%d outMTU:%d priority:%d", buf, 0x1Au);
              }
              v40[0] = BYTE5(v24);
              v40[1] = BYTE4(v24);
              v40[2] = BYTE3(v24);
              uint64_t v40[3] = BYTE2(v24);
              v40[4] = BYTE1(v24);
              v40[5] = v24;
              uint64_t v30 = sub_100197A30((uint64_t)v40);
              uint64_t v31 = sub_1002C5648();
              int v32 = sub_1002C69FC(v31, v30, a2, *(_DWORD *)(v12 + 36), a4, (int *)&v43, *(_DWORD *)(v14 + 112));
              BOOL v21 = v32 != 0;
              if (v32)
              {
                uint64_t v33 = qword_100A19EE8;
                if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
                {
                  memset(buf, 0, 37);
                  uuid_unparse_upper(dst, (char *)buf);
                  sub_10004191C(__p, (char *)buf);
                  long long v39 = v42 >= 0 ? __p : (void **)__p[0];
                  *(_DWORD *)tm buf = 67109378;
                  *(_DWORD *)&uint8_t buf[4] = a2;
                  *(_WORD *)&uint8_t buf[8] = 2082;
                  *(void *)&unsigned char buf[10] = v39;
                  _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Failed to register a socket for channel 0x%04x on device \"%{public}s\"", buf, 0x12u);
                  if (v42 < 0) {
                    operator delete(__p[0]);
                  }
                }
                buf[0] = 0;
                sub_10001B8E0(buf);
                if (*(unsigned char *)(v14 + 56)) {
                  sub_1001E1530(a2);
                }
                else {
                  sub_1001E121C(a2, 436);
                }
                sub_10001B8AC(buf);
                a5 = 1805;
              }
              else
              {
                buf[0] = 0;
                sub_10001B8E0(buf);
                sub_1001F667C(v30);
                sub_10001B8AC(buf);
                a5 = 0;
              }
            }
            else
            {
              uint64_t v34 = qword_100A19EE8;
              if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR))
              {
                memset(buf, 0, 37);
                uuid_unparse_upper((const unsigned __int8 *)(v16 + 2), (char *)buf);
                sub_10004191C(__p, (char *)buf);
                int v38 = v42 >= 0 ? __p : (void **)__p[0];
                *(_DWORD *)tm buf = 136446210;
                *(void *)&uint8_t buf[4] = v38;
                _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Device is not connected \"%{public}s\" !", buf, 0xCu);
                if (v42 < 0) {
                  operator delete(__p[0]);
                }
              }
              BOOL v21 = 0;
              a5 = 1804;
            }
          }
          sub_100406094(a1, a2);
          long long v35 = *(void (****)(void, void *, uint64_t, void, uint64_t, void, void))v12;
          unsigned int v36 = sub_100031234(dst);
          (**v35)(v35, v36, a5, *(unsigned __int16 *)(v14 + 2), a2, *(unsigned __int8 *)(v16 + 24), v43);

          if (v21)
          {
            sub_1004075F4(26 - v17, *(void *)(v14 + 128), -v17);
            *(void *)(v14 + 128) = v37;
          }
          return;
        }
LABEL_10:
        ;
      }
      uint64_t v18 = (void *)v11[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v11[2];
          BOOL v20 = *v19 == (void)v11;
          uint64_t v11 = v19;
        }
        while (!v20);
      }
      uint64_t v11 = v19;
      if (v19 != (void *)(a1 + 24)) {
        continue;
      }
      break;
    }
  }
  if (os_log_type_enabled((os_log_t)qword_100A19EE8, OS_LOG_TYPE_ERROR)) {
    sub_100763FEC();
  }
  sub_100406094(a1, a2);
}

void sub_100405518(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_10001B8AC(va);
  _Unwind_Resume(a1);
}

void sub_100405550(uint64_t a1)
{
  if (qword_1009FB078 != -1) {
    dispatch_once(&qword_1009FB078, &stru_1009ACE10);
  }
  uint64_t v2 = qword_1009FB070;
  uint64_t v3 = *(unsigned __int16 *)(a1 + 36);
  unsigned int v4 = *(_DWORD *)(a1 + 32);

  sub_1004055B8(v2, v3, v4);
}